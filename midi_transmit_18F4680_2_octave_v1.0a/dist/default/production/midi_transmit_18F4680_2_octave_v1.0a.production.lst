

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 15 18:26:07 2023

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4680
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     9                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
    10                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
    11                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    22                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    25                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	text0,global,reloc=2,class=CODE,delta=1
    27                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text2,global,reloc=2,class=CODE,delta=1
    29                           	psect	text3,global,reloc=2,class=CODE,delta=1
    30                           	psect	text4,global,reloc=2,class=CODE,delta=1
    31                           	psect	text5,global,reloc=2,class=CODE,delta=1
    32                           	psect	text6,global,reloc=2,class=CODE,delta=1
    33                           	psect	text7,global,reloc=2,class=CODE,delta=1
    34                           	psect	text8,global,reloc=2,class=CODE,delta=1
    35                           	psect	text9,global,reloc=2,class=CODE,delta=1
    36                           	psect	text10,global,reloc=2,class=CODE,delta=1
    37                           	psect	text11,global,reloc=2,class=CODE,delta=1
    38                           	psect	text12,global,reloc=2,class=CODE,delta=1
    39                           	psect	text13,global,reloc=2,class=CODE,delta=1
    40                           	psect	text14,global,reloc=2,class=CODE,delta=1
    41                           	psect	text15,global,reloc=2,class=CODE,delta=1
    42                           	psect	text16,global,reloc=2,class=CODE,delta=1
    43                           	psect	text17,global,reloc=2,class=CODE,delta=1
    44                           	psect	text18,global,reloc=2,class=CODE,delta=1
    45                           	psect	text19,global,reloc=2,class=CODE,delta=1
    46                           	psect	text20,global,reloc=2,class=CODE,delta=1
    47                           	psect	text21,global,reloc=2,class=CODE,delta=1
    48                           	psect	text22,global,reloc=2,class=CODE,delta=1
    49                           	psect	text23,global,reloc=2,class=CODE,delta=1
    50                           	psect	text24,global,reloc=2,class=CODE,delta=1
    51                           	psect	text25,global,reloc=2,class=CODE,delta=1
    52                           	psect	text26,global,reloc=2,class=CODE,delta=1
    53                           	psect	text27,global,reloc=2,class=CODE,delta=1
    54                           	psect	text28,global,reloc=2,class=CODE,delta=1
    55                           	psect	text29,global,reloc=2,class=CODE,delta=1
    56                           	psect	text30,global,reloc=2,class=CODE,delta=1
    57                           	psect	text31,global,reloc=2,class=CODE,delta=1
    58                           	psect	text32,global,reloc=2,class=CODE,delta=1
    59                           	psect	text33,global,reloc=2,class=CODE,delta=1
    60                           	psect	text34,global,reloc=2,class=CODE,delta=1
    61                           	psect	text35,global,reloc=2,class=CODE,delta=1
    62                           	psect	text36,global,reloc=2,class=CODE,delta=1
    63                           	psect	text37,global,reloc=2,class=CODE,delta=1
    64                           	psect	text38,global,reloc=2,class=CODE,delta=1
    65                           	psect	text39,global,reloc=2,class=CODE,delta=1
    66                           	psect	text40,global,reloc=2,class=CODE,delta=1
    67                           	psect	text41,global,reloc=2,class=CODE,delta=1
    68                           	psect	text42,global,reloc=2,class=CODE,delta=1
    69                           	psect	text43,global,reloc=2,class=CODE,delta=1
    70                           	psect	text44,global,reloc=2,class=CODE,delta=1
    71                           	psect	text45,global,reloc=2,class=CODE,delta=1
    72                           	psect	text46,global,reloc=2,class=CODE,delta=1
    73                           	psect	text47,global,reloc=2,class=CODE,delta=1
    74                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    75                           	psect	text49,global,reloc=2,class=CODE,delta=1
    76                           	psect	text50,global,reloc=2,class=CODE,delta=1
    77                           	psect	text51,global,reloc=2,class=CODE,delta=1
    78                           	psect	text52,global,reloc=2,class=CODE,delta=1
    79                           	psect	text53,global,reloc=2,class=CODE,delta=1
    80                           	psect	text54,global,reloc=2,class=CODE,delta=1
    81                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=2
    82                           	psect	text56,global,reloc=2,class=CODE,delta=1
    83                           	psect	text57,global,reloc=2,class=CODE,delta=1
    84                           	psect	text58,global,reloc=2,class=CODE,delta=1
    85                           	psect	text59,global,reloc=2,class=CODE,delta=1
    86                           	psect	text60,global,reloc=2,class=CODE,delta=1
    87                           	psect	text61,global,reloc=2,class=CODE,delta=1
    88                           	psect	text62,global,reloc=2,class=CODE,delta=1
    89                           	psect	text63,global,reloc=2,class=CODE,delta=1
    90                           	psect	text64,global,reloc=2,class=CODE,delta=1
    91                           	psect	text65,global,reloc=2,class=CODE,delta=1
    92                           	psect	text66,global,reloc=2,class=CODE,delta=1
    93                           	psect	text67,global,reloc=2,class=CODE,delta=1
    94                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=2
    95                           	psect	text69,global,reloc=2,class=CODE,delta=1
    96                           	psect	text70,global,reloc=2,class=CODE,delta=1
    97                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text74,global,reloc=2,class=CODE,delta=1
   101                           	psect	text75,global,reloc=2,class=CODE,delta=1
   102                           	psect	text76,global,reloc=2,class=CODE,delta=1
   103                           	psect	text77,global,reloc=2,class=CODE,delta=1
   104                           	psect	text78,global,reloc=2,class=CODE,delta=1
   105                           	psect	text79,global,reloc=2,class=CODE,delta=1
   106                           	psect	text80,global,reloc=2,class=CODE,delta=1,group=2
   107                           	psect	text81,global,reloc=2,class=CODE,delta=1,group=2
   108                           	psect	text82,global,reloc=2,class=CODE,delta=1
   109                           	psect	text83,global,reloc=2,class=CODE,delta=1
   110                           	psect	text84,global,reloc=2,class=CODE,delta=1
   111                           	psect	text85,global,reloc=2,class=CODE,delta=1
   112                           	psect	text86,global,reloc=2,class=CODE,delta=1
   113                           	psect	text87,global,reloc=2,class=CODE,delta=1
   114                           	psect	text88,global,reloc=2,class=CODE,delta=1
   115                           	psect	text89,global,reloc=2,class=CODE,delta=1
   116                           	psect	text90,global,reloc=2,class=CODE,delta=1
   117                           	psect	text91,global,reloc=2,class=CODE,delta=1
   118                           	psect	text92,global,reloc=2,class=CODE,delta=1
   119                           	psect	text93,global,reloc=2,class=CODE,delta=1
   120                           	psect	text94,global,reloc=2,class=CODE,delta=1
   121                           	psect	text95,global,reloc=2,class=CODE,delta=1
   122                           	psect	text96,global,reloc=2,class=CODE,delta=1
   123                           	psect	text97,global,reloc=2,class=CODE,delta=1
   124                           	psect	text98,global,reloc=2,class=CODE,delta=1
   125                           	psect	text99,global,reloc=2,class=CODE,delta=1
   126                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=2
   127                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=2
   128                           	psect	text102,global,reloc=2,class=CODE,delta=1
   129                           	psect	text103,global,reloc=2,class=CODE,delta=1
   130                           	psect	text104,global,reloc=2,class=CODE,delta=1
   131                           	psect	text105,global,reloc=2,class=CODE,delta=1
   132                           	psect	text106,global,reloc=2,class=CODE,delta=1
   133                           	psect	text107,global,reloc=2,class=CODE,delta=1
   134                           	psect	text108,global,reloc=2,class=CODE,delta=1
   135                           	psect	text109,global,reloc=2,class=CODE,delta=1
   136                           	psect	text110,global,reloc=2,class=CODE,delta=1
   137                           	psect	text111,global,reloc=2,class=CODE,delta=1
   138                           	psect	text112,global,reloc=2,class=CODE,delta=1
   139                           	psect	text113,global,reloc=2,class=CODE,delta=1
   140                           	psect	text114,global,reloc=2,class=CODE,delta=1
   141                           	psect	text115,global,reloc=2,class=CODE,delta=1
   142                           	psect	text116,global,reloc=2,class=CODE,delta=1
   143                           	psect	text117,global,reloc=2,class=CODE,delta=1
   144                           	psect	text118,global,reloc=2,class=CODE,delta=1
   145                           	psect	text119,global,reloc=2,class=CODE,delta=1
   146                           	psect	text120,global,reloc=2,class=CODE,delta=1
   147                           	psect	text121,global,reloc=2,class=CODE,delta=1
   148                           	psect	text122,global,reloc=2,class=CODE,delta=1
   149                           	psect	text123,global,reloc=2,class=CODE,delta=1
   150                           	psect	text124,global,reloc=2,class=CODE,delta=1
   151                           	psect	text125,global,reloc=2,class=CODE,delta=1
   152                           	psect	text126,global,reloc=2,class=CODE,delta=1
   153                           	psect	text127,global,reloc=2,class=CODE,delta=1,group=2
   154                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=2
   155                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=2
   156                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=2
   157                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=2
   158                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=2
   159                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=2
   160                           	psect	text134,global,reloc=2,class=CODE,delta=1
   161                           	psect	text135,global,reloc=2,class=CODE,delta=1
   162                           	psect	text136,global,reloc=2,class=CODE,delta=1
   163                           	psect	text137,global,reloc=2,class=CODE,delta=1
   164                           	psect	text138,global,reloc=2,class=CODE,delta=1
   165                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   166                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   167                           	psect	text140,global,reloc=2,class=CODE,delta=1
   168                           	psect	text141,global,reloc=2,class=CODE,delta=1
   169                           	psect	text142,global,reloc=2,class=CODE,delta=1
   170                           	psect	text143,global,reloc=2,class=CODE,delta=1
   171                           	psect	text144,global,reloc=2,class=CODE,delta=1
   172                           	psect	text145,global,reloc=2,class=CODE,delta=1
   173                           	psect	text146,global,reloc=2,class=CODE,delta=1
   174                           	psect	text147,global,reloc=2,class=CODE,delta=1
   175                           	psect	text148,global,reloc=2,class=CODE,delta=1
   176                           	psect	text149,global,reloc=2,class=CODE,delta=1
   177                           	psect	text150,global,reloc=2,class=CODE,delta=1
   178                           	psect	text151,global,reloc=2,class=CODE,delta=1
   179                           	psect	text152,global,reloc=2,class=CODE,delta=1
   180                           	psect	text153,global,reloc=2,class=CODE,delta=1
   181                           	psect	text154,global,reloc=2,class=CODE,delta=1
   182                           	psect	text155,global,reloc=2,class=CODE,delta=1
   183                           	psect	text156,global,reloc=2,class=CODE,delta=1
   184                           	psect	text157,global,reloc=2,class=CODE,delta=1
   185                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   186                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   187                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   188  0000                     
   189                           ; Version 1.45
   190                           ; Generated 16/11/2017 GMT
   191                           ; 
   192                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   193                           ; All rights reserved.
   194                           ; 
   195                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   196                           ; 
   197                           ; Redistribution and use in source and binary forms, with or without modification, are
   198                           ; permitted provided that the following conditions are met:
   199                           ; 
   200                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   201                           ;        conditions and the following disclaimer.
   202                           ; 
   203                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   204                           ;        of conditions and the following disclaimer in the documentation and/or other
   205                           ;        materials provided with the distribution.
   206                           ; 
   207                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   208                           ;        software without specific prior written permission.
   209                           ; 
   210                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   211                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   212                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   213                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   214                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   215                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   216                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   217                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   218                           ; 
   219                           ; 
   220                           ; Code-generator required, PIC18F4680 Definitions
   221                           ; 
   222                           ; SFR Addresses
   223  0000                     
   224                           	psect	eeprom_data
   225  F00000  00 24 00 32 FF FF FF FF 	db	0,36,0,50,255,255,255,255	;# 
   226  0000                     
   227                           	psect	idataCOMRAM
   228  009690                     __pidataCOMRAM:
   229                           	opt stack 0
   230                           
   231                           ;initializer for _number_to_display
   232  009690  FF80               	dw	65408
   233                           
   234                           ;initializer for _PRESCALER
   235  009692  04                 	db	4
   236                           
   237                           ;initializer for _PPQN
   238  009693  30                 	db	48
   239                           
   240                           	psect	idataBANK0
   241  00966E                     __pidataBANK0:
   242                           	opt stack 0
   243                           
   244                           ;initializer for _NOTE_LENGTH_PULSES
   245  00966E  0C                 	db	12
   246                           
   247                           ;initializer for _OCTAVES
   248  00966F  03                 	db	3
   249                           
   250                           ;initializer for _which_screen
   251  009670  02                 	db	2
   252                           
   253                           ;initializer for _iterator_focus
   254  009671  FF                 	db	255
   255                           
   256                           ;initializer for _ema_integer
   257  009672  32                 	db	50
   258                           
   259                           ;initializer for _octave
   260  009673  04                 	db	4
   261                           
   262                           ;initializer for _velocity
   263  009674  7F                 	db	127
   264                           
   265                           ;initializer for _drumchannel
   266  009675  09                 	db	9
   267                           
   268                           ;initializer for _BPM
   269  009676  78                 	db	120
   270                           
   271                           	psect	idataBANK1
   272  00946A                     __pidataBANK1:
   273                           	opt stack 0
   274                           
   275                           ;initializer for _DRUM_CC
   276  00946A  50                 	db	80
   277  00946B  51                 	db	81
   278  00946C  52                 	db	82
   279  00946D  53                 	db	83
   280  00946E  55                 	db	85
   281  00946F  56                 	db	86
   282  009470  57                 	db	87
   283  009471  58                 	db	88
   284                           
   285                           ;initializer for _DRUM_NOTE
   286  009472  24                 	db	36
   287  009473  26                 	db	38
   288  009474  27                 	db	39
   289  009475  28                 	db	40
   290  009476  2A                 	db	42
   291  009477  2E                 	db	46
   292  009478  31                 	db	49
   293  009479  36                 	db	54
   294                           
   295                           ;initializer for _randx
   296  00947A  0001               	dw	1
   297  00947C  0000               	dw	0
   298                           
   299                           ;initializer for _HYST_VAL
   300  00947E  0010               	dw	16
   301                           
   302                           ;initializer for _command
   303  009480  80                 	db	128
   304                           
   305                           ;initializer for _string_to_display
   306  009481  74                 	db	116
   307  009482  45                 	db	69
   308  009483  53                 	db	83
   309  009484  74                 	db	116
   310  009485  00                 	db	0
   311                           
   312                           ;initializer for _diminished_triad
   313  009486  00                 	db	0
   314  009487  03                 	db	3
   315  009488  06                 	db	6
   316                           
   317                           ;initializer for _augmented_triad
   318  009489  00                 	db	0
   319  00948A  04                 	db	4
   320  00948B  08                 	db	8
   321                           
   322                           ;initializer for _minor_triad
   323  00948C  00                 	db	0
   324  00948D  03                 	db	3
   325  00948E  07                 	db	7
   326                           
   327                           ;initializer for _major_triad
   328  00948F  00                 	db	0
   329  009490  04                 	db	4
   330  009491  07                 	db	7
   331                           
   332                           	psect	idataBANK2
   333  008E4E                     __pidataBANK2:
   334                           	opt stack 0
   335                           
   336                           ;initializer for _inputPotsArray
   337  008E4E  00                 	db	0
   338  008E4F  46                 	db	70
   339  008E50  10                 	db	16
   340  008E51  00                 	db	0
   341  008E52  47                 	db	71
   342  008E53  11                 	db	17
   343  008E54  00                 	db	0
   344  008E55  48                 	db	72
   345  008E56  12                 	db	18
   346  008E57  00                 	db	0
   347  008E58  49                 	db	73
   348  008E59  13                 	db	19
   349  008E5A  00                 	db	0
   350  008E5B  4A                 	db	74
   351  008E5C  14                 	db	20
   352  008E5D  00                 	db	0
   353  008E5E  4B                 	db	75
   354  008E5F  15                 	db	21
   355  008E60  00                 	db	0
   356  008E61  4C                 	db	76
   357  008E62  16                 	db	22
   358  008E63  00                 	db	0
   359  008E64  66                 	db	102
   360  008E65  17                 	db	23
   361  008E66  00                 	db	0
   362  008E67  67                 	db	103
   363  008E68  18                 	db	24
   364  008E69  00                 	db	0
   365  008E6A  68                 	db	104
   366  008E6B  19                 	db	25
   367  008E6C  00                 	db	0
   368  008E6D  6A                 	db	106
   369  008E6E  1A                 	db	26
   370  008E6F  00                 	db	0
   371  008E70  6B                 	db	107
   372  008E71  1B                 	db	27
   373  008E72  00                 	db	0
   374  008E73  6C                 	db	108
   375  008E74  1C                 	db	28
   376  008E75  00                 	db	0
   377  008E76  6D                 	db	109
   378  008E77  1D                 	db	29
   379  008E78  00                 	db	0
   380  008E79  FD                 	db	253
   381  008E7A  FD                 	db	253
   382  008E7B  00                 	db	0
   383  008E7C  FE                 	db	254
   384  008E7D  FE                 	db	254
   385                           
   386                           ;initializer for _NOTE_LENGTH_PULSES_ARRAY
   387  008E7E  30                 	db	48
   388  008E7F  48                 	db	72
   389  008E80  20                 	db	32
   390  008E81  18                 	db	24
   391  008E82  24                 	db	36
   392  008E83  10                 	db	16
   393  008E84  0C                 	db	12
   394  008E85  12                 	db	18
   395  008E86  08                 	db	8
   396  008E87  06                 	db	6
   397  008E88  09                 	db	9
   398  008E89  04                 	db	4
   399                           
   400                           ;initializer for _diminished_7th
   401  008E8A  00                 	db	0
   402  008E8B  03                 	db	3
   403  008E8C  06                 	db	6
   404  008E8D  09                 	db	9
   405                           
   406                           ;initializer for _half_diminished_7th
   407  008E8E  00                 	db	0
   408  008E8F  03                 	db	3
   409  008E90  06                 	db	6
   410  008E91  0A                 	db	10
   411                           
   412                           ;initializer for _minor_7th
   413  008E92  00                 	db	0
   414  008E93  03                 	db	3
   415  008E94  07                 	db	7
   416  008E95  0A                 	db	10
   417                           
   418                           ;initializer for _major_7th
   419  008E96  00                 	db	0
   420  008E97  04                 	db	4
   421  008E98  07                 	db	7
   422  008E99  0B                 	db	11
   423                           
   424                           ;initializer for _dominant_7th
   425  008E9A  00                 	db	0
   426  008E9B  04                 	db	4
   427  008E9C  07                 	db	7
   428  008E9D  0A                 	db	10
   429                           
   430                           	psect	idataBANK3
   431  008764                     __pidataBANK3:
   432                           	opt stack 0
   433                           
   434                           ;initializer for _menuArray
   435  008764  08                 	db	8
   436  008765  00                 	db	0
   437  008766  00                 	db	0
   438  008767  0C                 	db	12
   439  008768  00                 	db	0
   440  008769  00                 	db	0
   441  00876A  07                 	db	7
   442  00876B  00                 	db	0
   443  00876C  00                 	db	0
   444  00876D  04                 	db	4
   445  00876E  00                 	db	0
   446  00876F  00                 	db	0
   447  008770  05                 	db	5
   448  008771  00                 	db	0
   449  008772  00                 	db	0
   450  008773  02                 	db	2
   451  008774  00                 	db	0
   452  008775  00                 	db	0
   453  008776  05                 	db	5
   454  008777  00                 	db	0
   455  008778  00                 	db	0
   456  008779  02                 	db	2
   457  00877A  00                 	db	0
   458  00877B  00                 	db	0
   459  00877C  08                 	db	8
   460  00877D  00                 	db	0
   461  00877E  00                 	db	0
   462  00877F  08                 	db	8
   463  008780  00                 	db	0
   464  008781  00                 	db	0
   465  008782  05                 	db	5
   466  008783  00                 	db	0
   467  008784  00                 	db	0
   468  008785  02                 	db	2
   469  008786  00                 	db	0
   470  008787  00                 	db	0
   471  008788  07                 	db	7
   472  008789  00                 	db	0
   473  00878A  00                 	db	0
   474  00878B  07                 	db	7
   475  00878C  00                 	db	0
   476  00878D  00                 	db	0
   477  00878E  02                 	db	2
   478  00878F  00                 	db	0
   479  008790  00                 	db	0
   480  008791  02                 	db	2
   481  008792  00                 	db	0
   482  008793  00                 	db	0
   483  008794  05                 	db	5
   484  008795  00                 	db	0
   485  008796  00                 	db	0
   486  008797  05                 	db	5
   487  008798  00                 	db	0
   488  008799  00                 	db	0
   489  00879A  02                 	db	2
   490  00879B  00                 	db	0
   491  00879C  00                 	db	0
   492  00879D  09                 	db	9
   493  00879E  00                 	db	0
   494  00879F  00                 	db	0
   495  0087A0  02                 	db	2
   496  0087A1  00                 	db	0
   497  0087A2  00                 	db	0
   498  0087A3  07                 	db	7
   499  0087A4  00                 	db	0
   500  0087A5  00                 	db	0
   501  0087A6  0C                 	db	12
   502  0087A7  00                 	db	0
   503  0087A8  00                 	db	0
   504  0087A9  02                 	db	2
   505  0087AA  00                 	db	0
   506  0087AB  00                 	db	0
   507  0087AC  01                 	db	1
   508  0087AD  00                 	db	0
   509  0087AE  00                 	db	0
   510  0087AF  01                 	db	1
   511  0087B0  00                 	db	0
   512  0087B1  00                 	db	0
   513  0087B2  01                 	db	1
   514  0087B3  00                 	db	0
   515  0087B4  00                 	db	0
   516  0087B5  02                 	db	2
   517  0087B6  00                 	db	0
   518  0087B7  00                 	db	0
   519  0087B8  01                 	db	1
   520  0087B9  00                 	db	0
   521  0087BA  00                 	db	0
   522  0087BB  01                 	db	1
   523  0087BC  00                 	db	0
   524  0087BD  00                 	db	0
   525  0087BE  04                 	db	4
   526  0087BF  00                 	db	0
   527  0087C0  00                 	db	0
   528  0087C1  01                 	db	1
   529  0087C2  00                 	db	0
   530  0087C3  00                 	db	0
   531  0087C4  01                 	db	1
   532  0087C5  00                 	db	0
   533  0087C6  00                 	db	0
   534  0087C7  01                 	db	1
   535  0087C8  00                 	db	0
   536  0087C9  00                 	db	0
   537  0087CA  01                 	db	1
   538  0087CB  00                 	db	0
   539  0087CC  00                 	db	0
   540                           
   541                           	psect	mediumconst
   542  00E8C2                     __pmediumconst:
   543                           	opt stack 0
   544  00E8C2  00                 	db	0
   545  00E8C3  4B                 	db	75
   546  00E8C4  45                 	db	69
   547  00E8C5  59                 	db	89
   548  00E8C6  42                 	db	66
   549  00E8C7  4F                 	db	79
   550  00E8C8  41                 	db	65
   551  00E8C9  52                 	db	82
   552  00E8CA  44                 	db	68
   553  00E8CB  20                 	db	32
   554  00E8CC  4D                 	db	77
   555  00E8CD  4F                 	db	79
   556  00E8CE  44                 	db	68
   557  00E8CF  45                 	db	69
   558  00E8D0  3A                 	db	58
   559  00E8D1  00                 	db	0
   560  00E8D2  00                 	db	0
   561  00E8D3  00                 	db	0
   562  00E8D4  41                 	db	65
   563  00E8D5  52                 	db	82
   564  00E8D6  50                 	db	80
   565  00E8D7  45                 	db	69
   566  00E8D8  47                 	db	71
   567  00E8D9  47                 	db	71
   568  00E8DA  49                 	db	73
   569  00E8DB  4F                 	db	79
   570  00E8DC  20                 	db	32
   571  00E8DD  4D                 	db	77
   572  00E8DE  45                 	db	69
   573  00E8DF  4E                 	db	78
   574  00E8E0  55                 	db	85
   575  00E8E1  3A                 	db	58
   576  00E8E2  00                 	db	0
   577  00E8E3  00                 	db	0
   578  00E8E4  00                 	db	0
   579  00E8E5  54                 	db	84
   580  00E8E6  52                 	db	82
   581  00E8E7  41                 	db	65
   582  00E8E8  4E                 	db	78
   583  00E8E9  53                 	db	83
   584  00E8EA  50                 	db	80
   585  00E8EB  4F                 	db	79
   586  00E8EC  53                 	db	83
   587  00E8ED  45                 	db	69
   588  00E8EE  20                 	db	32
   589  00E8EF  4D                 	db	77
   590  00E8F0  4F                 	db	79
   591  00E8F1  44                 	db	68
   592  00E8F2  45                 	db	69
   593  00E8F3  3A                 	db	58
   594  00E8F4  00                 	db	0
   595  00E8F5  00                 	db	0
   596  00E8F6  44                 	db	68
   597  00E8F7  52                 	db	82
   598  00E8F8  55                 	db	85
   599  00E8F9  4D                 	db	77
   600  00E8FA  20                 	db	32
   601  00E8FB  4D                 	db	77
   602  00E8FC  4F                 	db	79
   603  00E8FD  44                 	db	68
   604  00E8FE  45                 	db	69
   605  00E8FF  3A                 	db	58
   606  00E900  00                 	db	0
   607  00E901  00                 	db	0
   608  00E902  00                 	db	0
   609  00E903  00                 	db	0
   610  00E904  00                 	db	0
   611  00E905  00                 	db	0
   612  00E906  00                 	db	0
   613  00E907  50                 	db	80
   614  00E908  4F                 	db	79
   615  00E909  54                 	db	84
   616  00E90A  53                 	db	83
   617  00E90B  20                 	db	32
   618  00E90C  4D                 	db	77
   619  00E90D  4F                 	db	79
   620  00E90E  44                 	db	68
   621  00E90F  45                 	db	69
   622  00E910  3A                 	db	58
   623  00E911  00                 	db	0
   624  00E912  00                 	db	0
   625  00E913  00                 	db	0
   626  00E914  00                 	db	0
   627  00E915  00                 	db	0
   628  00E916  00                 	db	0
   629  00E917  00                 	db	0
   630  00E918  4D                 	db	77
   631  00E919  49                 	db	73
   632  00E91A  44                 	db	68
   633  00E91B  49                 	db	73
   634  00E91C  20                 	db	32
   635  00E91D  43                 	db	67
   636  00E91E  48                 	db	72
   637  00E91F  41                 	db	65
   638  00E920  4E                 	db	78
   639  00E921  4E                 	db	78
   640  00E922  45                 	db	69
   641  00E923  4C                 	db	76
   642  00E924  53                 	db	83
   643  00E925  3A                 	db	58
   644  00E926  00                 	db	0
   645  00E927  00                 	db	0
   646  00E928  00                 	db	0
   647  00E929  50                 	db	80
   648  00E92A  52                 	db	82
   649  00E92B  4F                 	db	79
   650  00E92C  47                 	db	71
   651  00E92D  52                 	db	82
   652  00E92E  41                 	db	65
   653  00E92F  4D                 	db	77
   654  00E930  20                 	db	32
   655  00E931  43                 	db	67
   656  00E932  48                 	db	72
   657  00E933  41                 	db	65
   658  00E934  4E                 	db	78
   659  00E935  47                 	db	71
   660  00E936  45                 	db	69
   661  00E937  3A                 	db	58
   662  00E938  00                 	db	0
   663  00E939  00                 	db	0
   664  00E93A  45                 	db	69
   665  00E93B  45                 	db	69
   666  00E93C  50                 	db	80
   667  00E93D  52                 	db	82
   668  00E93E  4F                 	db	79
   669  00E93F  4D                 	db	77
   670  00E940  20                 	db	32
   671  00E941  4D                 	db	77
   672  00E942  45                 	db	69
   673  00E943  4E                 	db	78
   674  00E944  55                 	db	85
   675  00E945  3A                 	db	58
   676  00E946  00                 	db	0
   677  00E947  00                 	db	0
   678  00E948  00                 	db	0
   679  00E949  00                 	db	0
   680  00E94A  00                 	db	0
   681  00E94B  43                 	db	67
   682  00E94C  48                 	db	72
   683  00E94D  52                 	db	82
   684  00E94E  4F                 	db	79
   685  00E94F  4D                 	db	77
   686  00E950  41                 	db	65
   687  00E951  54                 	db	84
   688  00E952  49                 	db	73
   689  00E953  43                 	db	67
   690  00E954  00                 	db	0
   691  00E955  00                 	db	0
   692  00E956  00                 	db	0
   693  00E957  00                 	db	0
   694  00E958  00                 	db	0
   695  00E959  00                 	db	0
   696  00E95A  00                 	db	0
   697  00E95B  00                 	db	0
   698  00E95C  4D                 	db	77
   699  00E95D  41                 	db	65
   700  00E95E  4A                 	db	74
   701  00E95F  4F                 	db	79
   702  00E960  52                 	db	82
   703  00E961  00                 	db	0
   704  00E962  00                 	db	0
   705  00E963  00                 	db	0
   706  00E964  00                 	db	0
   707  00E965  00                 	db	0
   708  00E966  00                 	db	0
   709  00E967  00                 	db	0
   710  00E968  00                 	db	0
   711  00E969  00                 	db	0
   712  00E96A  00                 	db	0
   713  00E96B  00                 	db	0
   714  00E96C  00                 	db	0
   715  00E96D  4D                 	db	77
   716  00E96E  49                 	db	73
   717  00E96F  4E                 	db	78
   718  00E970  4F                 	db	79
   719  00E971  52                 	db	82
   720  00E972  00                 	db	0
   721  00E973  00                 	db	0
   722  00E974  00                 	db	0
   723  00E975  00                 	db	0
   724  00E976  00                 	db	0
   725  00E977  00                 	db	0
   726  00E978  00                 	db	0
   727  00E979  00                 	db	0
   728  00E97A  00                 	db	0
   729  00E97B  00                 	db	0
   730  00E97C  00                 	db	0
   731  00E97D  00                 	db	0
   732  00E97E  4D                 	db	77
   733  00E97F  4F                 	db	79
   734  00E980  44                 	db	68
   735  00E981  45                 	db	69
   736  00E982  53                 	db	83
   737  00E983  00                 	db	0
   738  00E984  00                 	db	0
   739  00E985  00                 	db	0
   740  00E986  00                 	db	0
   741  00E987  00                 	db	0
   742  00E988  00                 	db	0
   743  00E989  00                 	db	0
   744  00E98A  00                 	db	0
   745  00E98B  00                 	db	0
   746  00E98C  00                 	db	0
   747  00E98D  00                 	db	0
   748  00E98E  00                 	db	0
   749  00E98F  50                 	db	80
   750  00E990  45                 	db	69
   751  00E991  4E                 	db	78
   752  00E992  54                 	db	84
   753  00E993  41                 	db	65
   754  00E994  54                 	db	84
   755  00E995  4F                 	db	79
   756  00E996  4E                 	db	78
   757  00E997  49                 	db	73
   758  00E998  43                 	db	67
   759  00E999  20                 	db	32
   760  00E99A  4D                 	db	77
   761  00E99B  41                 	db	65
   762  00E99C  4A                 	db	74
   763  00E99D  4F                 	db	79
   764  00E99E  52                 	db	82
   765  00E99F  00                 	db	0
   766  00E9A0  50                 	db	80
   767  00E9A1  45                 	db	69
   768  00E9A2  4E                 	db	78
   769  00E9A3  54                 	db	84
   770  00E9A4  41                 	db	65
   771  00E9A5  54                 	db	84
   772  00E9A6  4F                 	db	79
   773  00E9A7  4E                 	db	78
   774  00E9A8  49                 	db	73
   775  00E9A9  43                 	db	67
   776  00E9AA  20                 	db	32
   777  00E9AB  4D                 	db	77
   778  00E9AC  49                 	db	73
   779  00E9AD  4E                 	db	78
   780  00E9AE  4F                 	db	79
   781  00E9AF  52                 	db	82
   782  00E9B0  00                 	db	0
   783  00E9B1  54                 	db	84
   784  00E9B2  52                 	db	82
   785  00E9B3  49                 	db	73
   786  00E9B4  41                 	db	65
   787  00E9B5  44                 	db	68
   788  00E9B6  00                 	db	0
   789  00E9B7  00                 	db	0
   790  00E9B8  00                 	db	0
   791  00E9B9  00                 	db	0
   792  00E9BA  00                 	db	0
   793  00E9BB  00                 	db	0
   794  00E9BC  00                 	db	0
   795  00E9BD  00                 	db	0
   796  00E9BE  00                 	db	0
   797  00E9BF  00                 	db	0
   798  00E9C0  00                 	db	0
   799  00E9C1  00                 	db	0
   800  00E9C2  44                 	db	68
   801  00E9C3  49                 	db	73
   802  00E9C4  41                 	db	65
   803  00E9C5  54                 	db	84
   804  00E9C6  4F                 	db	79
   805  00E9C7  4E                 	db	78
   806  00E9C8  49                 	db	73
   807  00E9C9  43                 	db	67
   808  00E9CA  20                 	db	32
   809  00E9CB  54                 	db	84
   810  00E9CC  20                 	db	32
   811  00E9CD  4D                 	db	77
   812  00E9CE  41                 	db	65
   813  00E9CF  4A                 	db	74
   814  00E9D0  4F                 	db	79
   815  00E9D1  52                 	db	82
   816  00E9D2  00                 	db	0
   817  00E9D3  44                 	db	68
   818  00E9D4  49                 	db	73
   819  00E9D5  41                 	db	65
   820  00E9D6  54                 	db	84
   821  00E9D7  4F                 	db	79
   822  00E9D8  4E                 	db	78
   823  00E9D9  49                 	db	73
   824  00E9DA  43                 	db	67
   825  00E9DB  20                 	db	32
   826  00E9DC  54                 	db	84
   827  00E9DD  20                 	db	32
   828  00E9DE  4D                 	db	77
   829  00E9DF  49                 	db	73
   830  00E9E0  4E                 	db	78
   831  00E9E1  4F                 	db	79
   832  00E9E2  52                 	db	82
   833  00E9E3  00                 	db	0
   834  00E9E4  53                 	db	83
   835  00E9E5  45                 	db	69
   836  00E9E6  56                 	db	86
   837  00E9E7  45                 	db	69
   838  00E9E8  4E                 	db	78
   839  00E9E9  54                 	db	84
   840  00E9EA  48                 	db	72
   841  00E9EB  00                 	db	0
   842  00E9EC  00                 	db	0
   843  00E9ED  00                 	db	0
   844  00E9EE  00                 	db	0
   845  00E9EF  00                 	db	0
   846  00E9F0  00                 	db	0
   847  00E9F1  00                 	db	0
   848  00E9F2  00                 	db	0
   849  00E9F3  00                 	db	0
   850  00E9F4  00                 	db	0
   851  00E9F5  44                 	db	68
   852  00E9F6  49                 	db	73
   853  00E9F7  41                 	db	65
   854  00E9F8  54                 	db	84
   855  00E9F9  4F                 	db	79
   856  00E9FA  4E                 	db	78
   857  00E9FB  49                 	db	73
   858  00E9FC  43                 	db	67
   859  00E9FD  20                 	db	32
   860  00E9FE  37                 	db	55
   861  00E9FF  20                 	db	32
   862  00EA00  4D                 	db	77
   863  00EA01  41                 	db	65
   864  00EA02  4A                 	db	74
   865  00EA03  4F                 	db	79
   866  00EA04  52                 	db	82
   867  00EA05  00                 	db	0
   868  00EA06  44                 	db	68
   869  00EA07  49                 	db	73
   870  00EA08  41                 	db	65
   871  00EA09  54                 	db	84
   872  00EA0A  4F                 	db	79
   873  00EA0B  4E                 	db	78
   874  00EA0C  49                 	db	73
   875  00EA0D  43                 	db	67
   876  00EA0E  20                 	db	32
   877  00EA0F  37                 	db	55
   878  00EA10  20                 	db	32
   879  00EA11  4D                 	db	77
   880  00EA12  49                 	db	73
   881  00EA13  4E                 	db	78
   882  00EA14  4F                 	db	79
   883  00EA15  52                 	db	82
   884  00EA16  00                 	db	0
   885  00EA17  69                 	db	105
   886  00EA18  6F                 	db	111
   887  00EA19  6E                 	db	110
   888  00EA1A  69                 	db	105
   889  00EA1B  61                 	db	97
   890  00EA1C  6E                 	db	110
   891  00EA1D  00                 	db	0
   892  00EA1E  00                 	db	0
   893  00EA1F  00                 	db	0
   894  00EA20  00                 	db	0
   895  00EA21  00                 	db	0
   896  00EA22  00                 	db	0
   897  00EA23  00                 	db	0
   898  00EA24  00                 	db	0
   899  00EA25  00                 	db	0
   900  00EA26  00                 	db	0
   901  00EA27  00                 	db	0
   902  00EA28  64                 	db	100
   903  00EA29  6F                 	db	111
   904  00EA2A  72                 	db	114
   905  00EA2B  69                 	db	105
   906  00EA2C  61                 	db	97
   907  00EA2D  6E                 	db	110
   908  00EA2E  00                 	db	0
   909  00EA2F  00                 	db	0
   910  00EA30  00                 	db	0
   911  00EA31  00                 	db	0
   912  00EA32  00                 	db	0
   913  00EA33  00                 	db	0
   914  00EA34  00                 	db	0
   915  00EA35  00                 	db	0
   916  00EA36  00                 	db	0
   917  00EA37  00                 	db	0
   918  00EA38  00                 	db	0
   919  00EA39  70                 	db	112
   920  00EA3A  68                 	db	104
   921  00EA3B  72                 	db	114
   922  00EA3C  79                 	db	121
   923  00EA3D  67                 	db	103
   924  00EA3E  69                 	db	105
   925  00EA3F  61                 	db	97
   926  00EA40  6E                 	db	110
   927  00EA41  00                 	db	0
   928  00EA42  00                 	db	0
   929  00EA43  00                 	db	0
   930  00EA44  00                 	db	0
   931  00EA45  00                 	db	0
   932  00EA46  00                 	db	0
   933  00EA47  00                 	db	0
   934  00EA48  00                 	db	0
   935  00EA49  00                 	db	0
   936  00EA4A  6C                 	db	108
   937  00EA4B  79                 	db	121
   938  00EA4C  64                 	db	100
   939  00EA4D  69                 	db	105
   940  00EA4E  61                 	db	97
   941  00EA4F  6E                 	db	110
   942  00EA50  00                 	db	0
   943  00EA51  00                 	db	0
   944  00EA52  00                 	db	0
   945  00EA53  00                 	db	0
   946  00EA54  00                 	db	0
   947  00EA55  00                 	db	0
   948  00EA56  00                 	db	0
   949  00EA57  00                 	db	0
   950  00EA58  00                 	db	0
   951  00EA59  00                 	db	0
   952  00EA5A  00                 	db	0
   953  00EA5B  6D                 	db	109
   954  00EA5C  69                 	db	105
   955  00EA5D  78                 	db	120
   956  00EA5E  6F                 	db	111
   957  00EA5F  6C                 	db	108
   958  00EA60  79                 	db	121
   959  00EA61  64                 	db	100
   960  00EA62  69                 	db	105
   961  00EA63  61                 	db	97
   962  00EA64  6E                 	db	110
   963  00EA65  00                 	db	0
   964  00EA66  00                 	db	0
   965  00EA67  00                 	db	0
   966  00EA68  00                 	db	0
   967  00EA69  00                 	db	0
   968  00EA6A  00                 	db	0
   969  00EA6B  00                 	db	0
   970  00EA6C  61                 	db	97
   971  00EA6D  65                 	db	101
   972  00EA6E  6F                 	db	111
   973  00EA6F  6C                 	db	108
   974  00EA70  69                 	db	105
   975  00EA71  61                 	db	97
   976  00EA72  6E                 	db	110
   977  00EA73  00                 	db	0
   978  00EA74  00                 	db	0
   979  00EA75  00                 	db	0
   980  00EA76  00                 	db	0
   981  00EA77  00                 	db	0
   982  00EA78  00                 	db	0
   983  00EA79  00                 	db	0
   984  00EA7A  00                 	db	0
   985  00EA7B  00                 	db	0
   986  00EA7C  00                 	db	0
   987  00EA7D  6C                 	db	108
   988  00EA7E  6F                 	db	111
   989  00EA7F  63                 	db	99
   990  00EA80  72                 	db	114
   991  00EA81  69                 	db	105
   992  00EA82  61                 	db	97
   993  00EA83  6E                 	db	110
   994  00EA84  00                 	db	0
   995  00EA85  00                 	db	0
   996  00EA86  00                 	db	0
   997  00EA87  00                 	db	0
   998  00EA88  00                 	db	0
   999  00EA89  00                 	db	0
  1000  00EA8A  00                 	db	0
  1001  00EA8B  00                 	db	0
  1002  00EA8C  00                 	db	0
  1003  00EA8D  00                 	db	0
  1004  00EA8E  6D                 	db	109
  1005  00EA8F  61                 	db	97
  1006  00EA90  6A                 	db	106
  1007  00EA91  6F                 	db	111
  1008  00EA92  72                 	db	114
  1009  00EA93  20                 	db	32
  1010  00EA94  74                 	db	116
  1011  00EA95  72                 	db	114
  1012  00EA96  69                 	db	105
  1013  00EA97  61                 	db	97
  1014  00EA98  64                 	db	100
  1015  00EA99  00                 	db	0
  1016  00EA9A  00                 	db	0
  1017  00EA9B  00                 	db	0
  1018  00EA9C  00                 	db	0
  1019  00EA9D  00                 	db	0
  1020  00EA9E  00                 	db	0
  1021  00EA9F  6D                 	db	109
  1022  00EAA0  69                 	db	105
  1023  00EAA1  6E                 	db	110
  1024  00EAA2  6F                 	db	111
  1025  00EAA3  72                 	db	114
  1026  00EAA4  20                 	db	32
  1027  00EAA5  74                 	db	116
  1028  00EAA6  72                 	db	114
  1029  00EAA7  69                 	db	105
  1030  00EAA8  61                 	db	97
  1031  00EAA9  64                 	db	100
  1032  00EAAA  00                 	db	0
  1033  00EAAB  00                 	db	0
  1034  00EAAC  00                 	db	0
  1035  00EAAD  00                 	db	0
  1036  00EAAE  00                 	db	0
  1037  00EAAF  00                 	db	0
  1038  00EAB0  61                 	db	97
  1039  00EAB1  75                 	db	117
  1040  00EAB2  67                 	db	103
  1041  00EAB3  6D                 	db	109
  1042  00EAB4  65                 	db	101
  1043  00EAB5  6E                 	db	110
  1044  00EAB6  74                 	db	116
  1045  00EAB7  65                 	db	101
  1046  00EAB8  64                 	db	100
  1047  00EAB9  20                 	db	32
  1048  00EABA  74                 	db	116
  1049  00EABB  72                 	db	114
  1050  00EABC  69                 	db	105
  1051  00EABD  61                 	db	97
  1052  00EABE  64                 	db	100
  1053  00EABF  00                 	db	0
  1054  00EAC0  00                 	db	0
  1055  00EAC1  64                 	db	100
  1056  00EAC2  69                 	db	105
  1057  00EAC3  6D                 	db	109
  1058  00EAC4  69                 	db	105
  1059  00EAC5  6E                 	db	110
  1060  00EAC6  69                 	db	105
  1061  00EAC7  73                 	db	115
  1062  00EAC8  68                 	db	104
  1063  00EAC9  65                 	db	101
  1064  00EACA  64                 	db	100
  1065  00EACB  20                 	db	32
  1066  00EACC  74                 	db	116
  1067  00EACD  72                 	db	114
  1068  00EACE  69                 	db	105
  1069  00EACF  61                 	db	97
  1070  00EAD0  64                 	db	100
  1071  00EAD1  00                 	db	0
  1072  00EAD2  64                 	db	100
  1073  00EAD3  6F                 	db	111
  1074  00EAD4  6D                 	db	109
  1075  00EAD5  69                 	db	105
  1076  00EAD6  6E                 	db	110
  1077  00EAD7  61                 	db	97
  1078  00EAD8  6E                 	db	110
  1079  00EAD9  74                 	db	116
  1080  00EADA  20                 	db	32
  1081  00EADB  37                 	db	55
  1082  00EADC  74                 	db	116
  1083  00EADD  68                 	db	104
  1084  00EADE  00                 	db	0
  1085  00EADF  00                 	db	0
  1086  00EAE0  00                 	db	0
  1087  00EAE1  00                 	db	0
  1088  00EAE2  00                 	db	0
  1089  00EAE3  6D                 	db	109
  1090  00EAE4  61                 	db	97
  1091  00EAE5  6A                 	db	106
  1092  00EAE6  6F                 	db	111
  1093  00EAE7  72                 	db	114
  1094  00EAE8  20                 	db	32
  1095  00EAE9  37                 	db	55
  1096  00EAEA  74                 	db	116
  1097  00EAEB  68                 	db	104
  1098  00EAEC  00                 	db	0
  1099  00EAED  00                 	db	0
  1100  00EAEE  00                 	db	0
  1101  00EAEF  00                 	db	0
  1102  00EAF0  00                 	db	0
  1103  00EAF1  00                 	db	0
  1104  00EAF2  00                 	db	0
  1105  00EAF3  00                 	db	0
  1106  00EAF4  6D                 	db	109
  1107  00EAF5  69                 	db	105
  1108  00EAF6  6E                 	db	110
  1109  00EAF7  6F                 	db	111
  1110  00EAF8  72                 	db	114
  1111  00EAF9  20                 	db	32
  1112  00EAFA  37                 	db	55
  1113  00EAFB  74                 	db	116
  1114  00EAFC  68                 	db	104
  1115  00EAFD  00                 	db	0
  1116  00EAFE  00                 	db	0
  1117  00EAFF  00                 	db	0
  1118  00EB00  00                 	db	0
  1119  00EB01  00                 	db	0
  1120  00EB02  00                 	db	0
  1121  00EB03  00                 	db	0
  1122  00EB04  00                 	db	0
  1123  00EB05  68                 	db	104
  1124  00EB06  61                 	db	97
  1125  00EB07  6C                 	db	108
  1126  00EB08  66                 	db	102
  1127  00EB09  20                 	db	32
  1128  00EB0A  64                 	db	100
  1129  00EB0B  69                 	db	105
  1130  00EB0C  6D                 	db	109
  1131  00EB0D  69                 	db	105
  1132  00EB0E  6E                 	db	110
  1133  00EB0F  69                 	db	105
  1134  00EB10  73                 	db	115
  1135  00EB11  68                 	db	104
  1136  00EB12  65                 	db	101
  1137  00EB13  64                 	db	100
  1138  00EB14  00                 	db	0
  1139  00EB15  00                 	db	0
  1140  00EB16  64                 	db	100
  1141  00EB17  69                 	db	105
  1142  00EB18  6D                 	db	109
  1143  00EB19  69                 	db	105
  1144  00EB1A  6E                 	db	110
  1145  00EB1B  69                 	db	105
  1146  00EB1C  73                 	db	115
  1147  00EB1D  68                 	db	104
  1148  00EB1E  65                 	db	101
  1149  00EB1F  64                 	db	100
  1150  00EB20  20                 	db	32
  1151  00EB21  37                 	db	55
  1152  00EB22  74                 	db	116
  1153  00EB23  68                 	db	104
  1154  00EB24  00                 	db	0
  1155  00EB25  00                 	db	0
  1156  00EB26  00                 	db	0
  1157  00EB27  48                 	db	72
  1158  00EB28  41                 	db	65
  1159  00EB29  4C                 	db	76
  1160  00EB2A  46                 	db	70
  1161  00EB2B  20                 	db	32
  1162  00EB2C  53                 	db	83
  1163  00EB2D  54                 	db	84
  1164  00EB2E  45                 	db	69
  1165  00EB2F  50                 	db	80
  1166  00EB30  00                 	db	0
  1167  00EB31  00                 	db	0
  1168  00EB32  00                 	db	0
  1169  00EB33  00                 	db	0
  1170  00EB34  00                 	db	0
  1171  00EB35  00                 	db	0
  1172  00EB36  00                 	db	0
  1173  00EB37  00                 	db	0
  1174  00EB38  43                 	db	67
  1175  00EB39  49                 	db	73
  1176  00EB3A  52                 	db	82
  1177  00EB3B  43                 	db	67
  1178  00EB3C  4C                 	db	76
  1179  00EB3D  45                 	db	69
  1180  00EB3E  20                 	db	32
  1181  00EB3F  4F                 	db	79
  1182  00EB40  46                 	db	70
  1183  00EB41  20                 	db	32
  1184  00EB42  46                 	db	70
  1185  00EB43  49                 	db	73
  1186  00EB44  46                 	db	70
  1187  00EB45  54                 	db	84
  1188  00EB46  48                 	db	72
  1189  00EB47  53                 	db	83
  1190  00EB48  00                 	db	0
  1191  00EB49  44                 	db	68
  1192  00EB4A  52                 	db	82
  1193  00EB4B  55                 	db	85
  1194  00EB4C  4D                 	db	77
  1195  00EB4D  20                 	db	32
  1196  00EB4E  49                 	db	73
  1197  00EB4F  53                 	db	83
  1198  00EB50  20                 	db	32
  1199  00EB51  4E                 	db	78
  1200  00EB52  4F                 	db	79
  1201  00EB53  54                 	db	84
  1202  00EB54  45                 	db	69
  1203  00EB55  20                 	db	32
  1204  00EB56  4F                 	db	79
  1205  00EB57  4E                 	db	78
  1206  00EB58  00                 	db	0
  1207  00EB59  00                 	db	0
  1208  00EB5A  44                 	db	68
  1209  00EB5B  52                 	db	82
  1210  00EB5C  55                 	db	85
  1211  00EB5D  4D                 	db	77
  1212  00EB5E  20                 	db	32
  1213  00EB5F  49                 	db	73
  1214  00EB60  53                 	db	83
  1215  00EB61  20                 	db	32
  1216  00EB62  43                 	db	67
  1217  00EB63  43                 	db	67
  1218  00EB64  00                 	db	0
  1219  00EB65  00                 	db	0
  1220  00EB66  00                 	db	0
  1221  00EB67  00                 	db	0
  1222  00EB68  00                 	db	0
  1223  00EB69  00                 	db	0
  1224  00EB6A  00                 	db	0
  1225  00EB6B  44                 	db	68
  1226  00EB6C  52                 	db	82
  1227  00EB6D  55                 	db	85
  1228  00EB6E  4D                 	db	77
  1229  00EB6F  20                 	db	32
  1230  00EB70  43                 	db	67
  1231  00EB71  43                 	db	67
  1232  00EB72  20                 	db	32
  1233  00EB73  54                 	db	84
  1234  00EB74  59                 	db	89
  1235  00EB75  50                 	db	80
  1236  00EB76  45                 	db	69
  1237  00EB77  00                 	db	0
  1238  00EB78  00                 	db	0
  1239  00EB79  00                 	db	0
  1240  00EB7A  00                 	db	0
  1241  00EB7B  00                 	db	0
  1242  00EB7C  44                 	db	68
  1243  00EB7D  52                 	db	82
  1244  00EB7E  55                 	db	85
  1245  00EB7F  4D                 	db	77
  1246  00EB80  20                 	db	32
  1247  00EB81  53                 	db	83
  1248  00EB82  45                 	db	69
  1249  00EB83  54                 	db	84
  1250  00EB84  20                 	db	32
  1251  00EB85  4E                 	db	78
  1252  00EB86  4E                 	db	78
  1253  00EB87  23                 	db	35
  1254  00EB88  00                 	db	0
  1255  00EB89  00                 	db	0
  1256  00EB8A  00                 	db	0
  1257  00EB8B  00                 	db	0
  1258  00EB8C  00                 	db	0
  1259  00EB8D  44                 	db	68
  1260  00EB8E  52                 	db	82
  1261  00EB8F  55                 	db	85
  1262  00EB90  4D                 	db	77
  1263  00EB91  20                 	db	32
  1264  00EB92  53                 	db	83
  1265  00EB93  45                 	db	69
  1266  00EB94  54                 	db	84
  1267  00EB95  20                 	db	32
  1268  00EB96  43                 	db	67
  1269  00EB97  43                 	db	67
  1270  00EB98  23                 	db	35
  1271  00EB99  00                 	db	0
  1272  00EB9A  00                 	db	0
  1273  00EB9B  00                 	db	0
  1274  00EB9C  00                 	db	0
  1275  00EB9D  00                 	db	0
  1276  00EB9E  44                 	db	68
  1277  00EB9F  52                 	db	82
  1278  00EBA0  55                 	db	85
  1279  00EBA1  4D                 	db	77
  1280  00EBA2  20                 	db	32
  1281  00EBA3  43                 	db	67
  1282  00EBA4  43                 	db	67
  1283  00EBA5  20                 	db	32
  1284  00EBA6  54                 	db	84
  1285  00EBA7  52                 	db	82
  1286  00EBA8  49                 	db	73
  1287  00EBA9  47                 	db	71
  1288  00EBAA  47                 	db	71
  1289  00EBAB  45                 	db	69
  1290  00EBAC  52                 	db	82
  1291  00EBAD  00                 	db	0
  1292  00EBAE  00                 	db	0
  1293  00EBAF  44                 	db	68
  1294  00EBB0  52                 	db	82
  1295  00EBB1  55                 	db	85
  1296  00EBB2  4D                 	db	77
  1297  00EBB3  20                 	db	32
  1298  00EBB4  43                 	db	67
  1299  00EBB5  43                 	db	67
  1300  00EBB6  20                 	db	32
  1301  00EBB7  54                 	db	84
  1302  00EBB8  4F                 	db	79
  1303  00EBB9  47                 	db	71
  1304  00EBBA  47                 	db	71
  1305  00EBBB  4C                 	db	76
  1306  00EBBC  45                 	db	69
  1307  00EBBD  00                 	db	0
  1308  00EBBE  00                 	db	0
  1309  00EBBF  00                 	db	0
  1310  00EBC0  44                 	db	68
  1311  00EBC1  52                 	db	82
  1312  00EBC2  55                 	db	85
  1313  00EBC3  4D                 	db	77
  1314  00EBC4  20                 	db	32
  1315  00EBC5  31                 	db	49
  1316  00EBC6  20                 	db	32
  1317  00EBC7  4E                 	db	78
  1318  00EBC8  4E                 	db	78
  1319  00EBC9  3A                 	db	58
  1320  00EBCA  20                 	db	32
  1321  00EBCB  00                 	db	0
  1322  00EBCC  00                 	db	0
  1323  00EBCD  00                 	db	0
  1324  00EBCE  00                 	db	0
  1325  00EBCF  00                 	db	0
  1326  00EBD0  00                 	db	0
  1327  00EBD1  44                 	db	68
  1328  00EBD2  52                 	db	82
  1329  00EBD3  55                 	db	85
  1330  00EBD4  4D                 	db	77
  1331  00EBD5  20                 	db	32
  1332  00EBD6  32                 	db	50
  1333  00EBD7  20                 	db	32
  1334  00EBD8  4E                 	db	78
  1335  00EBD9  4E                 	db	78
  1336  00EBDA  3A                 	db	58
  1337  00EBDB  20                 	db	32
  1338  00EBDC  00                 	db	0
  1339  00EBDD  00                 	db	0
  1340  00EBDE  00                 	db	0
  1341  00EBDF  00                 	db	0
  1342  00EBE0  00                 	db	0
  1343  00EBE1  00                 	db	0
  1344  00EBE2  44                 	db	68
  1345  00EBE3  52                 	db	82
  1346  00EBE4  55                 	db	85
  1347  00EBE5  4D                 	db	77
  1348  00EBE6  20                 	db	32
  1349  00EBE7  33                 	db	51
  1350  00EBE8  20                 	db	32
  1351  00EBE9  4E                 	db	78
  1352  00EBEA  4E                 	db	78
  1353  00EBEB  3A                 	db	58
  1354  00EBEC  20                 	db	32
  1355  00EBED  00                 	db	0
  1356  00EBEE  00                 	db	0
  1357  00EBEF  00                 	db	0
  1358  00EBF0  00                 	db	0
  1359  00EBF1  00                 	db	0
  1360  00EBF2  00                 	db	0
  1361  00EBF3  44                 	db	68
  1362  00EBF4  52                 	db	82
  1363  00EBF5  55                 	db	85
  1364  00EBF6  4D                 	db	77
  1365  00EBF7  20                 	db	32
  1366  00EBF8  34                 	db	52
  1367  00EBF9  20                 	db	32
  1368  00EBFA  4E                 	db	78
  1369  00EBFB  4E                 	db	78
  1370  00EBFC  3A                 	db	58
  1371  00EBFD  20                 	db	32
  1372  00EBFE  00                 	db	0
  1373  00EBFF  00                 	db	0
  1374  00EC00  00                 	db	0
  1375  00EC01  00                 	db	0
  1376  00EC02  00                 	db	0
  1377  00EC03  00                 	db	0
  1378  00EC04  44                 	db	68
  1379  00EC05  52                 	db	82
  1380  00EC06  55                 	db	85
  1381  00EC07  4D                 	db	77
  1382  00EC08  20                 	db	32
  1383  00EC09  35                 	db	53
  1384  00EC0A  20                 	db	32
  1385  00EC0B  4E                 	db	78
  1386  00EC0C  4E                 	db	78
  1387  00EC0D  3A                 	db	58
  1388  00EC0E  20                 	db	32
  1389  00EC0F  00                 	db	0
  1390  00EC10  00                 	db	0
  1391  00EC11  00                 	db	0
  1392  00EC12  00                 	db	0
  1393  00EC13  00                 	db	0
  1394  00EC14  00                 	db	0
  1395  00EC15  44                 	db	68
  1396  00EC16  52                 	db	82
  1397  00EC17  55                 	db	85
  1398  00EC18  4D                 	db	77
  1399  00EC19  20                 	db	32
  1400  00EC1A  36                 	db	54
  1401  00EC1B  20                 	db	32
  1402  00EC1C  4E                 	db	78
  1403  00EC1D  4E                 	db	78
  1404  00EC1E  3A                 	db	58
  1405  00EC1F  20                 	db	32
  1406  00EC20  00                 	db	0
  1407  00EC21  00                 	db	0
  1408  00EC22  00                 	db	0
  1409  00EC23  00                 	db	0
  1410  00EC24  00                 	db	0
  1411  00EC25  00                 	db	0
  1412  00EC26  44                 	db	68
  1413  00EC27  52                 	db	82
  1414  00EC28  55                 	db	85
  1415  00EC29  4D                 	db	77
  1416  00EC2A  20                 	db	32
  1417  00EC2B  37                 	db	55
  1418  00EC2C  20                 	db	32
  1419  00EC2D  4E                 	db	78
  1420  00EC2E  4E                 	db	78
  1421  00EC2F  3A                 	db	58
  1422  00EC30  20                 	db	32
  1423  00EC31  00                 	db	0
  1424  00EC32  00                 	db	0
  1425  00EC33  00                 	db	0
  1426  00EC34  00                 	db	0
  1427  00EC35  00                 	db	0
  1428  00EC36  00                 	db	0
  1429  00EC37  44                 	db	68
  1430  00EC38  52                 	db	82
  1431  00EC39  55                 	db	85
  1432  00EC3A  4D                 	db	77
  1433  00EC3B  20                 	db	32
  1434  00EC3C  38                 	db	56
  1435  00EC3D  20                 	db	32
  1436  00EC3E  4E                 	db	78
  1437  00EC3F  4E                 	db	78
  1438  00EC40  3A                 	db	58
  1439  00EC41  20                 	db	32
  1440  00EC42  00                 	db	0
  1441  00EC43  00                 	db	0
  1442  00EC44  00                 	db	0
  1443  00EC45  00                 	db	0
  1444  00EC46  00                 	db	0
  1445  00EC47  00                 	db	0
  1446  00EC48  44                 	db	68
  1447  00EC49  52                 	db	82
  1448  00EC4A  55                 	db	85
  1449  00EC4B  4D                 	db	77
  1450  00EC4C  20                 	db	32
  1451  00EC4D  31                 	db	49
  1452  00EC4E  20                 	db	32
  1453  00EC4F  43                 	db	67
  1454  00EC50  43                 	db	67
  1455  00EC51  3A                 	db	58
  1456  00EC52  20                 	db	32
  1457  00EC53  00                 	db	0
  1458  00EC54  00                 	db	0
  1459  00EC55  00                 	db	0
  1460  00EC56  00                 	db	0
  1461  00EC57  00                 	db	0
  1462  00EC58  00                 	db	0
  1463  00EC59  44                 	db	68
  1464  00EC5A  52                 	db	82
  1465  00EC5B  55                 	db	85
  1466  00EC5C  4D                 	db	77
  1467  00EC5D  20                 	db	32
  1468  00EC5E  32                 	db	50
  1469  00EC5F  20                 	db	32
  1470  00EC60  43                 	db	67
  1471  00EC61  43                 	db	67
  1472  00EC62  3A                 	db	58
  1473  00EC63  20                 	db	32
  1474  00EC64  00                 	db	0
  1475  00EC65  00                 	db	0
  1476  00EC66  00                 	db	0
  1477  00EC67  00                 	db	0
  1478  00EC68  00                 	db	0
  1479  00EC69  00                 	db	0
  1480  00EC6A  44                 	db	68
  1481  00EC6B  52                 	db	82
  1482  00EC6C  55                 	db	85
  1483  00EC6D  4D                 	db	77
  1484  00EC6E  20                 	db	32
  1485  00EC6F  33                 	db	51
  1486  00EC70  20                 	db	32
  1487  00EC71  43                 	db	67
  1488  00EC72  43                 	db	67
  1489  00EC73  3A                 	db	58
  1490  00EC74  20                 	db	32
  1491  00EC75  00                 	db	0
  1492  00EC76  00                 	db	0
  1493  00EC77  00                 	db	0
  1494  00EC78  00                 	db	0
  1495  00EC79  00                 	db	0
  1496  00EC7A  00                 	db	0
  1497  00EC7B  44                 	db	68
  1498  00EC7C  52                 	db	82
  1499  00EC7D  55                 	db	85
  1500  00EC7E  4D                 	db	77
  1501  00EC7F  20                 	db	32
  1502  00EC80  34                 	db	52
  1503  00EC81  20                 	db	32
  1504  00EC82  43                 	db	67
  1505  00EC83  43                 	db	67
  1506  00EC84  3A                 	db	58
  1507  00EC85  20                 	db	32
  1508  00EC86  00                 	db	0
  1509  00EC87  00                 	db	0
  1510  00EC88  00                 	db	0
  1511  00EC89  00                 	db	0
  1512  00EC8A  00                 	db	0
  1513  00EC8B  00                 	db	0
  1514  00EC8C  44                 	db	68
  1515  00EC8D  52                 	db	82
  1516  00EC8E  55                 	db	85
  1517  00EC8F  4D                 	db	77
  1518  00EC90  20                 	db	32
  1519  00EC91  35                 	db	53
  1520  00EC92  20                 	db	32
  1521  00EC93  43                 	db	67
  1522  00EC94  43                 	db	67
  1523  00EC95  3A                 	db	58
  1524  00EC96  20                 	db	32
  1525  00EC97  00                 	db	0
  1526  00EC98  00                 	db	0
  1527  00EC99  00                 	db	0
  1528  00EC9A  00                 	db	0
  1529  00EC9B  00                 	db	0
  1530  00EC9C  00                 	db	0
  1531  00EC9D  44                 	db	68
  1532  00EC9E  52                 	db	82
  1533  00EC9F  55                 	db	85
  1534  00ECA0  4D                 	db	77
  1535  00ECA1  20                 	db	32
  1536  00ECA2  36                 	db	54
  1537  00ECA3  20                 	db	32
  1538  00ECA4  43                 	db	67
  1539  00ECA5  43                 	db	67
  1540  00ECA6  3A                 	db	58
  1541  00ECA7  20                 	db	32
  1542  00ECA8  00                 	db	0
  1543  00ECA9  00                 	db	0
  1544  00ECAA  00                 	db	0
  1545  00ECAB  00                 	db	0
  1546  00ECAC  00                 	db	0
  1547  00ECAD  00                 	db	0
  1548  00ECAE  44                 	db	68
  1549  00ECAF  52                 	db	82
  1550  00ECB0  55                 	db	85
  1551  00ECB1  4D                 	db	77
  1552  00ECB2  20                 	db	32
  1553  00ECB3  37                 	db	55
  1554  00ECB4  20                 	db	32
  1555  00ECB5  43                 	db	67
  1556  00ECB6  43                 	db	67
  1557  00ECB7  3A                 	db	58
  1558  00ECB8  20                 	db	32
  1559  00ECB9  00                 	db	0
  1560  00ECBA  00                 	db	0
  1561  00ECBB  00                 	db	0
  1562  00ECBC  00                 	db	0
  1563  00ECBD  00                 	db	0
  1564  00ECBE  00                 	db	0
  1565  00ECBF  44                 	db	68
  1566  00ECC0  52                 	db	82
  1567  00ECC1  55                 	db	85
  1568  00ECC2  4D                 	db	77
  1569  00ECC3  20                 	db	32
  1570  00ECC4  38                 	db	56
  1571  00ECC5  20                 	db	32
  1572  00ECC6  43                 	db	67
  1573  00ECC7  43                 	db	67
  1574  00ECC8  3A                 	db	58
  1575  00ECC9  20                 	db	32
  1576  00ECCA  00                 	db	0
  1577  00ECCB  00                 	db	0
  1578  00ECCC  00                 	db	0
  1579  00ECCD  00                 	db	0
  1580  00ECCE  00                 	db	0
  1581  00ECCF  00                 	db	0
  1582  00ECD0  50                 	db	80
  1583  00ECD1  4F                 	db	79
  1584  00ECD2  54                 	db	84
  1585  00ECD3  53                 	db	83
  1586  00ECD4  20                 	db	32
  1587  00ECD5  52                 	db	82
  1588  00ECD6  45                 	db	69
  1589  00ECD7  53                 	db	83
  1590  00ECD8  4F                 	db	79
  1591  00ECD9  4C                 	db	76
  1592  00ECDA  55                 	db	85
  1593  00ECDB  54                 	db	84
  1594  00ECDC  49                 	db	73
  1595  00ECDD  4F                 	db	79
  1596  00ECDE  4E                 	db	78
  1597  00ECDF  00                 	db	0
  1598  00ECE0  00                 	db	0
  1599  00ECE1  50                 	db	80
  1600  00ECE2  4F                 	db	79
  1601  00ECE3  54                 	db	84
  1602  00ECE4  53                 	db	83
  1603  00ECE5  20                 	db	32
  1604  00ECE6  41                 	db	65
  1605  00ECE7  4C                 	db	76
  1606  00ECE8  50                 	db	80
  1607  00ECE9  48                 	db	72
  1608  00ECEA  41                 	db	65
  1609  00ECEB  00                 	db	0
  1610  00ECEC  00                 	db	0
  1611  00ECED  00                 	db	0
  1612  00ECEE  00                 	db	0
  1613  00ECEF  00                 	db	0
  1614  00ECF0  00                 	db	0
  1615  00ECF1  00                 	db	0
  1616  00ECF2  50                 	db	80
  1617  00ECF3  4F                 	db	79
  1618  00ECF4  54                 	db	84
  1619  00ECF5  53                 	db	83
  1620  00ECF6  20                 	db	32
  1621  00ECF7  53                 	db	83
  1622  00ECF8  45                 	db	69
  1623  00ECF9  54                 	db	84
  1624  00ECFA  20                 	db	32
  1625  00ECFB  43                 	db	67
  1626  00ECFC  43                 	db	67
  1627  00ECFD  23                 	db	35
  1628  00ECFE  00                 	db	0
  1629  00ECFF  00                 	db	0
  1630  00ED00  00                 	db	0
  1631  00ED01  00                 	db	0
  1632  00ED02  00                 	db	0
  1633  00ED03  53                 	db	83
  1634  00ED04  4C                 	db	76
  1635  00ED05  49                 	db	73
  1636  00ED06  44                 	db	68
  1637  00ED07  45                 	db	69
  1638  00ED08  50                 	db	80
  1639  00ED09  4F                 	db	79
  1640  00ED0A  54                 	db	84
  1641  00ED0B  20                 	db	32
  1642  00ED0C  53                 	db	83
  1643  00ED0D  45                 	db	69
  1644  00ED0E  54                 	db	84
  1645  00ED0F  20                 	db	32
  1646  00ED10  43                 	db	67
  1647  00ED11  43                 	db	67
  1648  00ED12  23                 	db	35
  1649  00ED13  00                 	db	0
  1650  00ED14  4A                 	db	74
  1651  00ED15  4F                 	db	79
  1652  00ED16  59                 	db	89
  1653  00ED17  53                 	db	83
  1654  00ED18  54                 	db	84
  1655  00ED19  49                 	db	73
  1656  00ED1A  43                 	db	67
  1657  00ED1B  4B                 	db	75
  1658  00ED1C  20                 	db	32
  1659  00ED1D  53                 	db	83
  1660  00ED1E  45                 	db	69
  1661  00ED1F  54                 	db	84
  1662  00ED20  20                 	db	32
  1663  00ED21  43                 	db	67
  1664  00ED22  43                 	db	67
  1665  00ED23  23                 	db	35
  1666  00ED24  00                 	db	0
  1667  00ED25  50                 	db	80
  1668  00ED26  4F                 	db	79
  1669  00ED27  54                 	db	84
  1670  00ED28  53                 	db	83
  1671  00ED29  20                 	db	32
  1672  00ED2A  4C                 	db	76
  1673  00ED2B  4F                 	db	79
  1674  00ED2C  20                 	db	32
  1675  00ED2D  52                 	db	82
  1676  00ED2E  45                 	db	69
  1677  00ED2F  53                 	db	83
  1678  00ED30  00                 	db	0
  1679  00ED31  00                 	db	0
  1680  00ED32  00                 	db	0
  1681  00ED33  00                 	db	0
  1682  00ED34  00                 	db	0
  1683  00ED35  00                 	db	0
  1684  00ED36  50                 	db	80
  1685  00ED37  4F                 	db	79
  1686  00ED38  54                 	db	84
  1687  00ED39  53                 	db	83
  1688  00ED3A  20                 	db	32
  1689  00ED3B  48                 	db	72
  1690  00ED3C  49                 	db	73
  1691  00ED3D  20                 	db	32
  1692  00ED3E  52                 	db	82
  1693  00ED3F  45                 	db	69
  1694  00ED40  53                 	db	83
  1695  00ED41  00                 	db	0
  1696  00ED42  00                 	db	0
  1697  00ED43  00                 	db	0
  1698  00ED44  00                 	db	0
  1699  00ED45  00                 	db	0
  1700  00ED46  00                 	db	0
  1701  00ED47  50                 	db	80
  1702  00ED48  31                 	db	49
  1703  00ED49  20                 	db	32
  1704  00ED4A  43                 	db	67
  1705  00ED4B  43                 	db	67
  1706  00ED4C  3A                 	db	58
  1707  00ED4D  00                 	db	0
  1708  00ED4E  00                 	db	0
  1709  00ED4F  00                 	db	0
  1710  00ED50  00                 	db	0
  1711  00ED51  00                 	db	0
  1712  00ED52  00                 	db	0
  1713  00ED53  00                 	db	0
  1714  00ED54  00                 	db	0
  1715  00ED55  00                 	db	0
  1716  00ED56  00                 	db	0
  1717  00ED57  00                 	db	0
  1718  00ED58  50                 	db	80
  1719  00ED59  32                 	db	50
  1720  00ED5A  20                 	db	32
  1721  00ED5B  43                 	db	67
  1722  00ED5C  43                 	db	67
  1723  00ED5D  3A                 	db	58
  1724  00ED5E  00                 	db	0
  1725  00ED5F  00                 	db	0
  1726  00ED60  00                 	db	0
  1727  00ED61  00                 	db	0
  1728  00ED62  00                 	db	0
  1729  00ED63  00                 	db	0
  1730  00ED64  00                 	db	0
  1731  00ED65  00                 	db	0
  1732  00ED66  00                 	db	0
  1733  00ED67  00                 	db	0
  1734  00ED68  00                 	db	0
  1735  00ED69  50                 	db	80
  1736  00ED6A  33                 	db	51
  1737  00ED6B  20                 	db	32
  1738  00ED6C  43                 	db	67
  1739  00ED6D  43                 	db	67
  1740  00ED6E  3A                 	db	58
  1741  00ED6F  00                 	db	0
  1742  00ED70  00                 	db	0
  1743  00ED71  00                 	db	0
  1744  00ED72  00                 	db	0
  1745  00ED73  00                 	db	0
  1746  00ED74  00                 	db	0
  1747  00ED75  00                 	db	0
  1748  00ED76  00                 	db	0
  1749  00ED77  00                 	db	0
  1750  00ED78  00                 	db	0
  1751  00ED79  00                 	db	0
  1752  00ED7A  50                 	db	80
  1753  00ED7B  34                 	db	52
  1754  00ED7C  20                 	db	32
  1755  00ED7D  43                 	db	67
  1756  00ED7E  43                 	db	67
  1757  00ED7F  3A                 	db	58
  1758  00ED80  00                 	db	0
  1759  00ED81  00                 	db	0
  1760  00ED82  00                 	db	0
  1761  00ED83  00                 	db	0
  1762  00ED84  00                 	db	0
  1763  00ED85  00                 	db	0
  1764  00ED86  00                 	db	0
  1765  00ED87  00                 	db	0
  1766  00ED88  00                 	db	0
  1767  00ED89  00                 	db	0
  1768  00ED8A  00                 	db	0
  1769  00ED8B  50                 	db	80
  1770  00ED8C  35                 	db	53
  1771  00ED8D  20                 	db	32
  1772  00ED8E  43                 	db	67
  1773  00ED8F  43                 	db	67
  1774  00ED90  3A                 	db	58
  1775  00ED91  00                 	db	0
  1776  00ED92  00                 	db	0
  1777  00ED93  00                 	db	0
  1778  00ED94  00                 	db	0
  1779  00ED95  00                 	db	0
  1780  00ED96  00                 	db	0
  1781  00ED97  00                 	db	0
  1782  00ED98  00                 	db	0
  1783  00ED99  00                 	db	0
  1784  00ED9A  00                 	db	0
  1785  00ED9B  00                 	db	0
  1786  00ED9C  50                 	db	80
  1787  00ED9D  36                 	db	54
  1788  00ED9E  20                 	db	32
  1789  00ED9F  43                 	db	67
  1790  00EDA0  43                 	db	67
  1791  00EDA1  3A                 	db	58
  1792  00EDA2  00                 	db	0
  1793  00EDA3  00                 	db	0
  1794  00EDA4  00                 	db	0
  1795  00EDA5  00                 	db	0
  1796  00EDA6  00                 	db	0
  1797  00EDA7  00                 	db	0
  1798  00EDA8  00                 	db	0
  1799  00EDA9  00                 	db	0
  1800  00EDAA  00                 	db	0
  1801  00EDAB  00                 	db	0
  1802  00EDAC  00                 	db	0
  1803  00EDAD  50                 	db	80
  1804  00EDAE  37                 	db	55
  1805  00EDAF  20                 	db	32
  1806  00EDB0  43                 	db	67
  1807  00EDB1  43                 	db	67
  1808  00EDB2  3A                 	db	58
  1809  00EDB3  00                 	db	0
  1810  00EDB4  00                 	db	0
  1811  00EDB5  00                 	db	0
  1812  00EDB6  00                 	db	0
  1813  00EDB7  00                 	db	0
  1814  00EDB8  00                 	db	0
  1815  00EDB9  00                 	db	0
  1816  00EDBA  00                 	db	0
  1817  00EDBB  00                 	db	0
  1818  00EDBC  00                 	db	0
  1819  00EDBD  00                 	db	0
  1820  00EDBE  53                 	db	83
  1821  00EDBF  31                 	db	49
  1822  00EDC0  20                 	db	32
  1823  00EDC1  43                 	db	67
  1824  00EDC2  43                 	db	67
  1825  00EDC3  3A                 	db	58
  1826  00EDC4  20                 	db	32
  1827  00EDC5  00                 	db	0
  1828  00EDC6  00                 	db	0
  1829  00EDC7  00                 	db	0
  1830  00EDC8  00                 	db	0
  1831  00EDC9  00                 	db	0
  1832  00EDCA  00                 	db	0
  1833  00EDCB  00                 	db	0
  1834  00EDCC  00                 	db	0
  1835  00EDCD  00                 	db	0
  1836  00EDCE  00                 	db	0
  1837  00EDCF  53                 	db	83
  1838  00EDD0  32                 	db	50
  1839  00EDD1  20                 	db	32
  1840  00EDD2  43                 	db	67
  1841  00EDD3  43                 	db	67
  1842  00EDD4  3A                 	db	58
  1843  00EDD5  20                 	db	32
  1844  00EDD6  00                 	db	0
  1845  00EDD7  00                 	db	0
  1846  00EDD8  00                 	db	0
  1847  00EDD9  00                 	db	0
  1848  00EDDA  00                 	db	0
  1849  00EDDB  00                 	db	0
  1850  00EDDC  00                 	db	0
  1851  00EDDD  00                 	db	0
  1852  00EDDE  00                 	db	0
  1853  00EDDF  00                 	db	0
  1854  00EDE0  53                 	db	83
  1855  00EDE1  33                 	db	51
  1856  00EDE2  20                 	db	32
  1857  00EDE3  43                 	db	67
  1858  00EDE4  43                 	db	67
  1859  00EDE5  3A                 	db	58
  1860  00EDE6  20                 	db	32
  1861  00EDE7  00                 	db	0
  1862  00EDE8  00                 	db	0
  1863  00EDE9  00                 	db	0
  1864  00EDEA  00                 	db	0
  1865  00EDEB  00                 	db	0
  1866  00EDEC  00                 	db	0
  1867  00EDED  00                 	db	0
  1868  00EDEE  00                 	db	0
  1869  00EDEF  00                 	db	0
  1870  00EDF0  00                 	db	0
  1871  00EDF1  53                 	db	83
  1872  00EDF2  34                 	db	52
  1873  00EDF3  20                 	db	32
  1874  00EDF4  43                 	db	67
  1875  00EDF5  43                 	db	67
  1876  00EDF6  3A                 	db	58
  1877  00EDF7  20                 	db	32
  1878  00EDF8  00                 	db	0
  1879  00EDF9  00                 	db	0
  1880  00EDFA  00                 	db	0
  1881  00EDFB  00                 	db	0
  1882  00EDFC  00                 	db	0
  1883  00EDFD  00                 	db	0
  1884  00EDFE  00                 	db	0
  1885  00EDFF  00                 	db	0
  1886  00EE00  00                 	db	0
  1887  00EE01  00                 	db	0
  1888  00EE02  53                 	db	83
  1889  00EE03  35                 	db	53
  1890  00EE04  20                 	db	32
  1891  00EE05  43                 	db	67
  1892  00EE06  43                 	db	67
  1893  00EE07  3A                 	db	58
  1894  00EE08  20                 	db	32
  1895  00EE09  00                 	db	0
  1896  00EE0A  00                 	db	0
  1897  00EE0B  00                 	db	0
  1898  00EE0C  00                 	db	0
  1899  00EE0D  00                 	db	0
  1900  00EE0E  00                 	db	0
  1901  00EE0F  00                 	db	0
  1902  00EE10  00                 	db	0
  1903  00EE11  00                 	db	0
  1904  00EE12  00                 	db	0
  1905  00EE13  53                 	db	83
  1906  00EE14  36                 	db	54
  1907  00EE15  20                 	db	32
  1908  00EE16  43                 	db	67
  1909  00EE17  43                 	db	67
  1910  00EE18  3A                 	db	58
  1911  00EE19  20                 	db	32
  1912  00EE1A  00                 	db	0
  1913  00EE1B  00                 	db	0
  1914  00EE1C  00                 	db	0
  1915  00EE1D  00                 	db	0
  1916  00EE1E  00                 	db	0
  1917  00EE1F  00                 	db	0
  1918  00EE20  00                 	db	0
  1919  00EE21  00                 	db	0
  1920  00EE22  00                 	db	0
  1921  00EE23  00                 	db	0
  1922  00EE24  53                 	db	83
  1923  00EE25  37                 	db	55
  1924  00EE26  20                 	db	32
  1925  00EE27  43                 	db	67
  1926  00EE28  43                 	db	67
  1927  00EE29  3A                 	db	58
  1928  00EE2A  20                 	db	32
  1929  00EE2B  00                 	db	0
  1930  00EE2C  00                 	db	0
  1931  00EE2D  00                 	db	0
  1932  00EE2E  00                 	db	0
  1933  00EE2F  00                 	db	0
  1934  00EE30  00                 	db	0
  1935  00EE31  00                 	db	0
  1936  00EE32  00                 	db	0
  1937  00EE33  00                 	db	0
  1938  00EE34  00                 	db	0
  1939  00EE35  4A                 	db	74
  1940  00EE36  58                 	db	88
  1941  00EE37  20                 	db	32
  1942  00EE38  43                 	db	67
  1943  00EE39  43                 	db	67
  1944  00EE3A  3A                 	db	58
  1945  00EE3B  20                 	db	32
  1946  00EE3C  00                 	db	0
  1947  00EE3D  00                 	db	0
  1948  00EE3E  00                 	db	0
  1949  00EE3F  00                 	db	0
  1950  00EE40  00                 	db	0
  1951  00EE41  00                 	db	0
  1952  00EE42  00                 	db	0
  1953  00EE43  00                 	db	0
  1954  00EE44  00                 	db	0
  1955  00EE45  00                 	db	0
  1956  00EE46  4A                 	db	74
  1957  00EE47  59                 	db	89
  1958  00EE48  20                 	db	32
  1959  00EE49  43                 	db	67
  1960  00EE4A  43                 	db	67
  1961  00EE4B  3A                 	db	58
  1962  00EE4C  20                 	db	32
  1963  00EE4D  00                 	db	0
  1964  00EE4E  00                 	db	0
  1965  00EE4F  00                 	db	0
  1966  00EE50  00                 	db	0
  1967  00EE51  00                 	db	0
  1968  00EE52  00                 	db	0
  1969  00EE53  00                 	db	0
  1970  00EE54  00                 	db	0
  1971  00EE55  00                 	db	0
  1972  00EE56  00                 	db	0
  1973  00EE57  4D                 	db	77
  1974  00EE58  61                 	db	97
  1975  00EE59  69                 	db	105
  1976  00EE5A  6E                 	db	110
  1977  00EE5B  20                 	db	32
  1978  00EE5C  63                 	db	99
  1979  00EE5D  68                 	db	104
  1980  00EE5E  61                 	db	97
  1981  00EE5F  6E                 	db	110
  1982  00EE60  6E                 	db	110
  1983  00EE61  65                 	db	101
  1984  00EE62  6C                 	db	108
  1985  00EE63  00                 	db	0
  1986  00EE64  00                 	db	0
  1987  00EE65  00                 	db	0
  1988  00EE66  00                 	db	0
  1989  00EE67  00                 	db	0
  1990  00EE68  44                 	db	68
  1991  00EE69  72                 	db	114
  1992  00EE6A  75                 	db	117
  1993  00EE6B  6D                 	db	109
  1994  00EE6C  20                 	db	32
  1995  00EE6D  63                 	db	99
  1996  00EE6E  68                 	db	104
  1997  00EE6F  61                 	db	97
  1998  00EE70  6E                 	db	110
  1999  00EE71  6E                 	db	110
  2000  00EE72  65                 	db	101
  2001  00EE73  6C                 	db	108
  2002  00EE74  00                 	db	0
  2003  00EE75  00                 	db	0
  2004  00EE76  00                 	db	0
  2005  00EE77  00                 	db	0
  2006  00EE78  00                 	db	0
  2007  00EE79  53                 	db	83
  2008  00EE7A  61                 	db	97
  2009  00EE7B  76                 	db	118
  2010  00EE7C  65                 	db	101
  2011  00EE7D  20                 	db	32
  2012  00EE7E  73                 	db	115
  2013  00EE7F  65                 	db	101
  2014  00EE80  74                 	db	116
  2015  00EE81  74                 	db	116
  2016  00EE82  69                 	db	105
  2017  00EE83  6E                 	db	110
  2018  00EE84  67                 	db	103
  2019  00EE85  73                 	db	115
  2020  00EE86  00                 	db	0
  2021  00EE87  00                 	db	0
  2022  00EE88  00                 	db	0
  2023  00EE89  00                 	db	0
  2024  00EE8A  4C                 	db	76
  2025  00EE8B  6F                 	db	111
  2026  00EE8C  61                 	db	97
  2027  00EE8D  64                 	db	100
  2028  00EE8E  20                 	db	32
  2029  00EE8F  73                 	db	115
  2030  00EE90  65                 	db	101
  2031  00EE91  74                 	db	116
  2032  00EE92  74                 	db	116
  2033  00EE93  69                 	db	105
  2034  00EE94  6E                 	db	110
  2035  00EE95  67                 	db	103
  2036  00EE96  73                 	db	115
  2037  00EE97  00                 	db	0
  2038  00EE98  00                 	db	0
  2039  00EE99  00                 	db	0
  2040  00EE9A  00                 	db	0
  2041  00EE9B  52                 	db	82
  2042  00EE9C  65                 	db	101
  2043  00EE9D  73                 	db	115
  2044  00EE9E  74                 	db	116
  2045  00EE9F  6F                 	db	111
  2046  00EEA0  72                 	db	114
  2047  00EEA1  65                 	db	101
  2048  00EEA2  20                 	db	32
  2049  00EEA3  64                 	db	100
  2050  00EEA4  65                 	db	101
  2051  00EEA5  66                 	db	102
  2052  00EEA6  61                 	db	97
  2053  00EEA7  75                 	db	117
  2054  00EEA8  6C                 	db	108
  2055  00EEA9  74                 	db	116
  2056  00EEAA  73                 	db	115
  2057  00EEAB  00                 	db	0
  2058  00EEAC  45                 	db	69
  2059  00EEAD  6E                 	db	110
  2060  00EEAE  63                 	db	99
  2061  00EEAF  6F                 	db	111
  2062  00EEB0  64                 	db	100
  2063  00EEB1  65                 	db	101
  2064  00EEB2  72                 	db	114
  2065  00EEB3  20                 	db	32
  2066  00EEB4  50                 	db	80
  2067  00EEB5  6F                 	db	111
  2068  00EEB6  6C                 	db	108
  2069  00EEB7  61                 	db	97
  2070  00EEB8  72                 	db	114
  2071  00EEB9  69                 	db	105
  2072  00EEBA  74                 	db	116
  2073  00EEBB  79                 	db	121
  2074  00EEBC  00                 	db	0
  2075  00EEBD  45                 	db	69
  2076  00EEBE  78                 	db	120
  2077  00EEBF  69                 	db	105
  2078  00EEC0  74                 	db	116
  2079  00EEC1  00                 	db	0
  2080  00EEC2  00                 	db	0
  2081  00EEC3  00                 	db	0
  2082  00EEC4  00                 	db	0
  2083  00EEC5  00                 	db	0
  2084  00EEC6  00                 	db	0
  2085  00EEC7  00                 	db	0
  2086  00EEC8  00                 	db	0
  2087  00EEC9  00                 	db	0
  2088  00EECA  00                 	db	0
  2089  00EECB  00                 	db	0
  2090  00EECC  00                 	db	0
  2091  00EECD  00                 	db	0
  2092  00EECE  53                 	db	83
  2093  00EECF  6C                 	db	108
  2094  00EED0  6F                 	db	111
  2095  00EED1  74                 	db	116
  2096  00EED2  20                 	db	32
  2097  00EED3  31                 	db	49
  2098  00EED4  00                 	db	0
  2099  00EED5  00                 	db	0
  2100  00EED6  00                 	db	0
  2101  00EED7  00                 	db	0
  2102  00EED8  00                 	db	0
  2103  00EED9  00                 	db	0
  2104  00EEDA  00                 	db	0
  2105  00EEDB  00                 	db	0
  2106  00EEDC  00                 	db	0
  2107  00EEDD  00                 	db	0
  2108  00EEDE  00                 	db	0
  2109  00EEDF  53                 	db	83
  2110  00EEE0  6C                 	db	108
  2111  00EEE1  6F                 	db	111
  2112  00EEE2  74                 	db	116
  2113  00EEE3  20                 	db	32
  2114  00EEE4  32                 	db	50
  2115  00EEE5  00                 	db	0
  2116  00EEE6  00                 	db	0
  2117  00EEE7  00                 	db	0
  2118  00EEE8  00                 	db	0
  2119  00EEE9  00                 	db	0
  2120  00EEEA  00                 	db	0
  2121  00EEEB  00                 	db	0
  2122  00EEEC  00                 	db	0
  2123  00EEED  00                 	db	0
  2124  00EEEE  00                 	db	0
  2125  00EEEF  00                 	db	0
  2126  00EEF0  53                 	db	83
  2127  00EEF1  6C                 	db	108
  2128  00EEF2  6F                 	db	111
  2129  00EEF3  74                 	db	116
  2130  00EEF4  20                 	db	32
  2131  00EEF5  33                 	db	51
  2132  00EEF6  00                 	db	0
  2133  00EEF7  00                 	db	0
  2134  00EEF8  00                 	db	0
  2135  00EEF9  00                 	db	0
  2136  00EEFA  00                 	db	0
  2137  00EEFB  00                 	db	0
  2138  00EEFC  00                 	db	0
  2139  00EEFD  00                 	db	0
  2140  00EEFE  00                 	db	0
  2141  00EEFF  00                 	db	0
  2142  00EF00  00                 	db	0
  2143  00EF01  53                 	db	83
  2144  00EF02  6C                 	db	108
  2145  00EF03  6F                 	db	111
  2146  00EF04  74                 	db	116
  2147  00EF05  20                 	db	32
  2148  00EF06  34                 	db	52
  2149  00EF07  00                 	db	0
  2150  00EF08  00                 	db	0
  2151  00EF09  00                 	db	0
  2152  00EF0A  00                 	db	0
  2153  00EF0B  00                 	db	0
  2154  00EF0C  00                 	db	0
  2155  00EF0D  00                 	db	0
  2156  00EF0E  00                 	db	0
  2157  00EF0F  00                 	db	0
  2158  00EF10  00                 	db	0
  2159  00EF11  00                 	db	0
  2160  00EF12  45                 	db	69
  2161  00EF13  78                 	db	120
  2162  00EF14  69                 	db	105
  2163  00EF15  74                 	db	116
  2164  00EF16  00                 	db	0
  2165  00EF17  00                 	db	0
  2166  00EF18  00                 	db	0
  2167  00EF19  00                 	db	0
  2168  00EF1A  00                 	db	0
  2169  00EF1B  00                 	db	0
  2170  00EF1C  00                 	db	0
  2171  00EF1D  00                 	db	0
  2172  00EF1E  00                 	db	0
  2173  00EF1F  00                 	db	0
  2174  00EF20  00                 	db	0
  2175  00EF21  00                 	db	0
  2176  00EF22  00                 	db	0
  2177  00EF23  43                 	db	67
  2178  00EF24  57                 	db	87
  2179  00EF25  20                 	db	32
  2180  00EF26  49                 	db	73
  2181  00EF27  53                 	db	83
  2182  00EF28  20                 	db	32
  2183  00EF29  49                 	db	73
  2184  00EF2A  4E                 	db	78
  2185  00EF2B  43                 	db	67
  2186  00EF2C  52                 	db	82
  2187  00EF2D  45                 	db	69
  2188  00EF2E  41                 	db	65
  2189  00EF2F  53                 	db	83
  2190  00EF30  45                 	db	69
  2191  00EF31  00                 	db	0
  2192  00EF32  00                 	db	0
  2193  00EF33  00                 	db	0
  2194  00EF34  43                 	db	67
  2195  00EF35  43                 	db	67
  2196  00EF36  57                 	db	87
  2197  00EF37  20                 	db	32
  2198  00EF38  49                 	db	73
  2199  00EF39  53                 	db	83
  2200  00EF3A  20                 	db	32
  2201  00EF3B  49                 	db	73
  2202  00EF3C  4E                 	db	78
  2203  00EF3D  43                 	db	67
  2204  00EF3E  52                 	db	82
  2205  00EF3F  45                 	db	69
  2206  00EF40  41                 	db	65
  2207  00EF41  53                 	db	83
  2208  00EF42  45                 	db	69
  2209  00EF43  00                 	db	0
  2210  00EF44  00                 	db	0
  2211  00EF45  41                 	db	65
  2212  00EF46  72                 	db	114
  2213  00EF47  70                 	db	112
  2214  00EF48  65                 	db	101
  2215  00EF49  67                 	db	103
  2216  00EF4A  67                 	db	103
  2217  00EF4B  69                 	db	105
  2218  00EF4C  6F                 	db	111
  2219  00EF4D  20                 	db	32
  2220  00EF4E  4F                 	db	79
  2221  00EF4F  46                 	db	70
  2222  00EF50  46                 	db	70
  2223  00EF51  2F                 	db	47
  2224  00EF52  4F                 	db	79
  2225  00EF53  4E                 	db	78
  2226  00EF54  00                 	db	0
  2227  00EF55  00                 	db	0
  2228  00EF56  54                 	db	84
  2229  00EF57  65                 	db	101
  2230  00EF58  6D                 	db	109
  2231  00EF59  70                 	db	112
  2232  00EF5A  6F                 	db	111
  2233  00EF5B  00                 	db	0
  2234  00EF5C  00                 	db	0
  2235  00EF5D  00                 	db	0
  2236  00EF5E  00                 	db	0
  2237  00EF5F  00                 	db	0
  2238  00EF60  00                 	db	0
  2239  00EF61  00                 	db	0
  2240  00EF62  00                 	db	0
  2241  00EF63  00                 	db	0
  2242  00EF64  00                 	db	0
  2243  00EF65  00                 	db	0
  2244  00EF66  00                 	db	0
  2245  00EF67  4F                 	db	79
  2246  00EF68  63                 	db	99
  2247  00EF69  74                 	db	116
  2248  00EF6A  61                 	db	97
  2249  00EF6B  76                 	db	118
  2250  00EF6C  65                 	db	101
  2251  00EF6D  20                 	db	32
  2252  00EF6E  52                 	db	82
  2253  00EF6F  61                 	db	97
  2254  00EF70  6E                 	db	110
  2255  00EF71  67                 	db	103
  2256  00EF72  65                 	db	101
  2257  00EF73  00                 	db	0
  2258  00EF74  00                 	db	0
  2259  00EF75  00                 	db	0
  2260  00EF76  00                 	db	0
  2261  00EF77  00                 	db	0
  2262  00EF78  41                 	db	65
  2263  00EF79  72                 	db	114
  2264  00EF7A  70                 	db	112
  2265  00EF7B  65                 	db	101
  2266  00EF7C  67                 	db	103
  2267  00EF7D  67                 	db	103
  2268  00EF7E  69                 	db	105
  2269  00EF7F  6F                 	db	111
  2270  00EF80  20                 	db	32
  2271  00EF81  54                 	db	84
  2272  00EF82  79                 	db	121
  2273  00EF83  70                 	db	112
  2274  00EF84  65                 	db	101
  2275  00EF85  00                 	db	0
  2276  00EF86  00                 	db	0
  2277  00EF87  00                 	db	0
  2278  00EF88  00                 	db	0
  2279  00EF89  4E                 	db	78
  2280  00EF8A  6F                 	db	111
  2281  00EF8B  74                 	db	116
  2282  00EF8C  65                 	db	101
  2283  00EF8D  20                 	db	32
  2284  00EF8E  4C                 	db	76
  2285  00EF8F  65                 	db	101
  2286  00EF90  6E                 	db	110
  2287  00EF91  67                 	db	103
  2288  00EF92  74                 	db	116
  2289  00EF93  68                 	db	104
  2290  00EF94  00                 	db	0
  2291  00EF95  00                 	db	0
  2292  00EF96  00                 	db	0
  2293  00EF97  00                 	db	0
  2294  00EF98  00                 	db	0
  2295  00EF99  00                 	db	0
  2296  00EF9A  4C                 	db	76
  2297  00EF9B  61                 	db	97
  2298  00EF9C  74                 	db	116
  2299  00EF9D  63                 	db	99
  2300  00EF9E  68                 	db	104
  2301  00EF9F  2F                 	db	47
  2302  00EFA0  41                 	db	65
  2303  00EFA1  75                 	db	117
  2304  00EFA2  74                 	db	116
  2305  00EFA3  6F                 	db	111
  2306  00EFA4  20                 	db	32
  2307  00EFA5  4C                 	db	76
  2308  00EFA6  61                 	db	97
  2309  00EFA7  74                 	db	116
  2310  00EFA8  63                 	db	99
  2311  00EFA9  68                 	db	104
  2312  00EFAA  00                 	db	0
  2313  00EFAB  55                 	db	85
  2314  00EFAC  6E                 	db	110
  2315  00EFAD  2D                 	db	45
  2316  00EFAE  6C                 	db	108
  2317  00EFAF  61                 	db	97
  2318  00EFB0  74                 	db	116
  2319  00EFB1  63                 	db	99
  2320  00EFB2  68                 	db	104
  2321  00EFB3  20                 	db	32
  2322  00EFB4  4D                 	db	77
  2323  00EFB5  6F                 	db	111
  2324  00EFB6  64                 	db	100
  2325  00EFB7  65                 	db	101
  2326  00EFB8  00                 	db	0
  2327  00EFB9  00                 	db	0
  2328  00EFBA  00                 	db	0
  2329  00EFBB  00                 	db	0
  2330  00EFBC  52                 	db	82
  2331  00EFBD  61                 	db	97
  2332  00EFBE  6E                 	db	110
  2333  00EFBF  64                 	db	100
  2334  00EFC0  6F                 	db	111
  2335  00EFC1  6D                 	db	109
  2336  00EFC2  69                 	db	105
  2337  00EFC3  7A                 	db	122
  2338  00EFC4  65                 	db	101
  2339  00EFC5  2F                 	db	47
  2340  00EFC6  53                 	db	83
  2341  00EFC7  6B                 	db	107
  2342  00EFC8  69                 	db	105
  2343  00EFC9  70                 	db	112
  2344  00EFCA  00                 	db	0
  2345  00EFCB  00                 	db	0
  2346  00EFCC  00                 	db	0
  2347  00EFCD  4C                 	db	76
  2348  00EFCE  61                 	db	97
  2349  00EFCF  73                 	db	115
  2350  00EFD0  74                 	db	116
  2351  00EFD1  20                 	db	32
  2352  00EFD2  4E                 	db	78
  2353  00EFD3  6F                 	db	111
  2354  00EFD4  74                 	db	116
  2355  00EFD5  65                 	db	101
  2356  00EFD6  20                 	db	32
  2357  00EFD7  4D                 	db	77
  2358  00EFD8  6F                 	db	111
  2359  00EFD9  64                 	db	100
  2360  00EFDA  65                 	db	101
  2361  00EFDB  00                 	db	0
  2362  00EFDC  00                 	db	0
  2363  00EFDD  00                 	db	0
  2364  00EFDE  41                 	db	65
  2365  00EFDF  52                 	db	82
  2366  00EFE0  50                 	db	80
  2367  00EFE1  45                 	db	69
  2368  00EFE2  47                 	db	71
  2369  00EFE3  47                 	db	71
  2370  00EFE4  49                 	db	73
  2371  00EFE5  41                 	db	65
  2372  00EFE6  54                 	db	84
  2373  00EFE7  4F                 	db	79
  2374  00EFE8  52                 	db	82
  2375  00EFE9  20                 	db	32
  2376  00EFEA  4F                 	db	79
  2377  00EFEB  46                 	db	70
  2378  00EFEC  46                 	db	70
  2379  00EFED  00                 	db	0
  2380  00EFEE  00                 	db	0
  2381  00EFEF  41                 	db	65
  2382  00EFF0  52                 	db	82
  2383  00EFF1  50                 	db	80
  2384  00EFF2  45                 	db	69
  2385  00EFF3  47                 	db	71
  2386  00EFF4  47                 	db	71
  2387  00EFF5  49                 	db	73
  2388  00EFF6  41                 	db	65
  2389  00EFF7  54                 	db	84
  2390  00EFF8  4F                 	db	79
  2391  00EFF9  52                 	db	82
  2392  00EFFA  20                 	db	32
  2393  00EFFB  4F                 	db	79
  2394  00EFFC  4E                 	db	78
  2395  00EFFD  00                 	db	0
  2396  00EFFE  00                 	db	0
  2397  00EFFF  00                 	db	0
  2398  00F000  55                 	db	85
  2399  00F001  50                 	db	80
  2400  00F002  00                 	db	0
  2401  00F003  00                 	db	0
  2402  00F004  00                 	db	0
  2403  00F005  00                 	db	0
  2404  00F006  00                 	db	0
  2405  00F007  00                 	db	0
  2406  00F008  00                 	db	0
  2407  00F009  00                 	db	0
  2408  00F00A  00                 	db	0
  2409  00F00B  00                 	db	0
  2410  00F00C  00                 	db	0
  2411  00F00D  00                 	db	0
  2412  00F00E  00                 	db	0
  2413  00F00F  00                 	db	0
  2414  00F010  00                 	db	0
  2415  00F011  44                 	db	68
  2416  00F012  4F                 	db	79
  2417  00F013  57                 	db	87
  2418  00F014  4E                 	db	78
  2419  00F015  00                 	db	0
  2420  00F016  00                 	db	0
  2421  00F017  00                 	db	0
  2422  00F018  00                 	db	0
  2423  00F019  00                 	db	0
  2424  00F01A  00                 	db	0
  2425  00F01B  00                 	db	0
  2426  00F01C  00                 	db	0
  2427  00F01D  00                 	db	0
  2428  00F01E  00                 	db	0
  2429  00F01F  00                 	db	0
  2430  00F020  00                 	db	0
  2431  00F021  00                 	db	0
  2432  00F022  55                 	db	85
  2433  00F023  50                 	db	80
  2434  00F024  2F                 	db	47
  2435  00F025  44                 	db	68
  2436  00F026  4F                 	db	79
  2437  00F027  57                 	db	87
  2438  00F028  4E                 	db	78
  2439  00F029  00                 	db	0
  2440  00F02A  00                 	db	0
  2441  00F02B  00                 	db	0
  2442  00F02C  00                 	db	0
  2443  00F02D  00                 	db	0
  2444  00F02E  00                 	db	0
  2445  00F02F  00                 	db	0
  2446  00F030  00                 	db	0
  2447  00F031  00                 	db	0
  2448  00F032  00                 	db	0
  2449  00F033  44                 	db	68
  2450  00F034  4F                 	db	79
  2451  00F035  57                 	db	87
  2452  00F036  4E                 	db	78
  2453  00F037  2F                 	db	47
  2454  00F038  55                 	db	85
  2455  00F039  50                 	db	80
  2456  00F03A  00                 	db	0
  2457  00F03B  00                 	db	0
  2458  00F03C  00                 	db	0
  2459  00F03D  00                 	db	0
  2460  00F03E  00                 	db	0
  2461  00F03F  00                 	db	0
  2462  00F040  00                 	db	0
  2463  00F041  00                 	db	0
  2464  00F042  00                 	db	0
  2465  00F043  00                 	db	0
  2466  00F044  53                 	db	83
  2467  00F045  48                 	db	72
  2468  00F046  55                 	db	85
  2469  00F047  46                 	db	70
  2470  00F048  46                 	db	70
  2471  00F049  4C                 	db	76
  2472  00F04A  45                 	db	69
  2473  00F04B  00                 	db	0
  2474  00F04C  00                 	db	0
  2475  00F04D  00                 	db	0
  2476  00F04E  00                 	db	0
  2477  00F04F  00                 	db	0
  2478  00F050  00                 	db	0
  2479  00F051  00                 	db	0
  2480  00F052  00                 	db	0
  2481  00F053  00                 	db	0
  2482  00F054  00                 	db	0
  2483  00F055  52                 	db	82
  2484  00F056  41                 	db	65
  2485  00F057  4E                 	db	78
  2486  00F058  44                 	db	68
  2487  00F059  4F                 	db	79
  2488  00F05A  4D                 	db	77
  2489  00F05B  00                 	db	0
  2490  00F05C  00                 	db	0
  2491  00F05D  00                 	db	0
  2492  00F05E  00                 	db	0
  2493  00F05F  00                 	db	0
  2494  00F060  00                 	db	0
  2495  00F061  00                 	db	0
  2496  00F062  00                 	db	0
  2497  00F063  00                 	db	0
  2498  00F064  00                 	db	0
  2499  00F065  00                 	db	0
  2500  00F066  41                 	db	65
  2501  00F067  53                 	db	83
  2502  00F068  20                 	db	32
  2503  00F069  50                 	db	80
  2504  00F06A  52                 	db	82
  2505  00F06B  45                 	db	69
  2506  00F06C  53                 	db	83
  2507  00F06D  53                 	db	83
  2508  00F06E  45                 	db	69
  2509  00F06F  44                 	db	68
  2510  00F070  00                 	db	0
  2511  00F071  00                 	db	0
  2512  00F072  00                 	db	0
  2513  00F073  00                 	db	0
  2514  00F074  00                 	db	0
  2515  00F075  00                 	db	0
  2516  00F076  00                 	db	0
  2517  00F077  31                 	db	49
  2518  00F078  2F                 	db	47
  2519  00F079  34                 	db	52
  2520  00F07A  00                 	db	0
  2521  00F07B  00                 	db	0
  2522  00F07C  00                 	db	0
  2523  00F07D  00                 	db	0
  2524  00F07E  00                 	db	0
  2525  00F07F  00                 	db	0
  2526  00F080  00                 	db	0
  2527  00F081  00                 	db	0
  2528  00F082  00                 	db	0
  2529  00F083  00                 	db	0
  2530  00F084  00                 	db	0
  2531  00F085  00                 	db	0
  2532  00F086  00                 	db	0
  2533  00F087  00                 	db	0
  2534  00F088  31                 	db	49
  2535  00F089  2F                 	db	47
  2536  00F08A  34                 	db	52
  2537  00F08B  20                 	db	32
  2538  00F08C  44                 	db	68
  2539  00F08D  4F                 	db	79
  2540  00F08E  54                 	db	84
  2541  00F08F  54                 	db	84
  2542  00F090  45                 	db	69
  2543  00F091  44                 	db	68
  2544  00F092  00                 	db	0
  2545  00F093  00                 	db	0
  2546  00F094  00                 	db	0
  2547  00F095  00                 	db	0
  2548  00F096  00                 	db	0
  2549  00F097  00                 	db	0
  2550  00F098  00                 	db	0
  2551  00F099  31                 	db	49
  2552  00F09A  2F                 	db	47
  2553  00F09B  34                 	db	52
  2554  00F09C  20                 	db	32
  2555  00F09D  54                 	db	84
  2556  00F09E  52                 	db	82
  2557  00F09F  49                 	db	73
  2558  00F0A0  50                 	db	80
  2559  00F0A1  4C                 	db	76
  2560  00F0A2  45                 	db	69
  2561  00F0A3  54                 	db	84
  2562  00F0A4  00                 	db	0
  2563  00F0A5  00                 	db	0
  2564  00F0A6  00                 	db	0
  2565  00F0A7  00                 	db	0
  2566  00F0A8  00                 	db	0
  2567  00F0A9  00                 	db	0
  2568  00F0AA  31                 	db	49
  2569  00F0AB  2F                 	db	47
  2570  00F0AC  38                 	db	56
  2571  00F0AD  00                 	db	0
  2572  00F0AE  00                 	db	0
  2573  00F0AF  00                 	db	0
  2574  00F0B0  00                 	db	0
  2575  00F0B1  00                 	db	0
  2576  00F0B2  00                 	db	0
  2577  00F0B3  00                 	db	0
  2578  00F0B4  00                 	db	0
  2579  00F0B5  00                 	db	0
  2580  00F0B6  00                 	db	0
  2581  00F0B7  00                 	db	0
  2582  00F0B8  00                 	db	0
  2583  00F0B9  00                 	db	0
  2584  00F0BA  00                 	db	0
  2585  00F0BB  31                 	db	49
  2586  00F0BC  2F                 	db	47
  2587  00F0BD  38                 	db	56
  2588  00F0BE  20                 	db	32
  2589  00F0BF  44                 	db	68
  2590  00F0C0  4F                 	db	79
  2591  00F0C1  54                 	db	84
  2592  00F0C2  54                 	db	84
  2593  00F0C3  45                 	db	69
  2594  00F0C4  44                 	db	68
  2595  00F0C5  00                 	db	0
  2596  00F0C6  00                 	db	0
  2597  00F0C7  00                 	db	0
  2598  00F0C8  00                 	db	0
  2599  00F0C9  00                 	db	0
  2600  00F0CA  00                 	db	0
  2601  00F0CB  00                 	db	0
  2602  00F0CC  31                 	db	49
  2603  00F0CD  2F                 	db	47
  2604  00F0CE  38                 	db	56
  2605  00F0CF  20                 	db	32
  2606  00F0D0  54                 	db	84
  2607  00F0D1  52                 	db	82
  2608  00F0D2  49                 	db	73
  2609  00F0D3  50                 	db	80
  2610  00F0D4  4C                 	db	76
  2611  00F0D5  45                 	db	69
  2612  00F0D6  54                 	db	84
  2613  00F0D7  00                 	db	0
  2614  00F0D8  00                 	db	0
  2615  00F0D9  00                 	db	0
  2616  00F0DA  00                 	db	0
  2617  00F0DB  00                 	db	0
  2618  00F0DC  00                 	db	0
  2619  00F0DD  31                 	db	49
  2620  00F0DE  2F                 	db	47
  2621  00F0DF  31                 	db	49
  2622  00F0E0  36                 	db	54
  2623  00F0E1  00                 	db	0
  2624  00F0E2  00                 	db	0
  2625  00F0E3  00                 	db	0
  2626  00F0E4  00                 	db	0
  2627  00F0E5  00                 	db	0
  2628  00F0E6  00                 	db	0
  2629  00F0E7  00                 	db	0
  2630  00F0E8  00                 	db	0
  2631  00F0E9  00                 	db	0
  2632  00F0EA  00                 	db	0
  2633  00F0EB  00                 	db	0
  2634  00F0EC  00                 	db	0
  2635  00F0ED  00                 	db	0
  2636  00F0EE  31                 	db	49
  2637  00F0EF  2F                 	db	47
  2638  00F0F0  31                 	db	49
  2639  00F0F1  36                 	db	54
  2640  00F0F2  20                 	db	32
  2641  00F0F3  44                 	db	68
  2642  00F0F4  4F                 	db	79
  2643  00F0F5  54                 	db	84
  2644  00F0F6  54                 	db	84
  2645  00F0F7  45                 	db	69
  2646  00F0F8  44                 	db	68
  2647  00F0F9  00                 	db	0
  2648  00F0FA  00                 	db	0
  2649  00F0FB  00                 	db	0
  2650  00F0FC  00                 	db	0
  2651  00F0FD  00                 	db	0
  2652  00F0FE  00                 	db	0
  2653  00F0FF  31                 	db	49
  2654  00F100  2F                 	db	47
  2655  00F101  31                 	db	49
  2656  00F102  36                 	db	54
  2657  00F103  20                 	db	32
  2658  00F104  54                 	db	84
  2659  00F105  52                 	db	82
  2660  00F106  49                 	db	73
  2661  00F107  50                 	db	80
  2662  00F108  4C                 	db	76
  2663  00F109  45                 	db	69
  2664  00F10A  54                 	db	84
  2665  00F10B  00                 	db	0
  2666  00F10C  00                 	db	0
  2667  00F10D  00                 	db	0
  2668  00F10E  00                 	db	0
  2669  00F10F  00                 	db	0
  2670  00F110  31                 	db	49
  2671  00F111  2F                 	db	47
  2672  00F112  33                 	db	51
  2673  00F113  32                 	db	50
  2674  00F114  00                 	db	0
  2675  00F115  00                 	db	0
  2676  00F116  00                 	db	0
  2677  00F117  00                 	db	0
  2678  00F118  00                 	db	0
  2679  00F119  00                 	db	0
  2680  00F11A  00                 	db	0
  2681  00F11B  00                 	db	0
  2682  00F11C  00                 	db	0
  2683  00F11D  00                 	db	0
  2684  00F11E  00                 	db	0
  2685  00F11F  00                 	db	0
  2686  00F120  00                 	db	0
  2687  00F121  31                 	db	49
  2688  00F122  2F                 	db	47
  2689  00F123  33                 	db	51
  2690  00F124  32                 	db	50
  2691  00F125  20                 	db	32
  2692  00F126  44                 	db	68
  2693  00F127  4F                 	db	79
  2694  00F128  54                 	db	84
  2695  00F129  54                 	db	84
  2696  00F12A  45                 	db	69
  2697  00F12B  44                 	db	68
  2698  00F12C  00                 	db	0
  2699  00F12D  00                 	db	0
  2700  00F12E  00                 	db	0
  2701  00F12F  00                 	db	0
  2702  00F130  00                 	db	0
  2703  00F131  00                 	db	0
  2704  00F132  31                 	db	49
  2705  00F133  2F                 	db	47
  2706  00F134  33                 	db	51
  2707  00F135  32                 	db	50
  2708  00F136  20                 	db	32
  2709  00F137  54                 	db	84
  2710  00F138  52                 	db	82
  2711  00F139  49                 	db	73
  2712  00F13A  50                 	db	80
  2713  00F13B  4C                 	db	76
  2714  00F13C  45                 	db	69
  2715  00F13D  54                 	db	84
  2716  00F13E  00                 	db	0
  2717  00F13F  00                 	db	0
  2718  00F140  00                 	db	0
  2719  00F141  00                 	db	0
  2720  00F142  00                 	db	0
  2721  00F143  53                 	db	83
  2722  00F144  45                 	db	69
  2723  00F145  54                 	db	84
  2724  00F146  2F                 	db	47
  2725  00F147  43                 	db	67
  2726  00F148  4C                 	db	76
  2727  00F149  45                 	db	69
  2728  00F14A  41                 	db	65
  2729  00F14B  52                 	db	82
  2730  00F14C  20                 	db	32
  2731  00F14D  4C                 	db	76
  2732  00F14E  41                 	db	65
  2733  00F14F  54                 	db	84
  2734  00F150  43                 	db	67
  2735  00F151  48                 	db	72
  2736  00F152  00                 	db	0
  2737  00F153  00                 	db	0
  2738  00F154  41                 	db	65
  2739  00F155  55                 	db	85
  2740  00F156  54                 	db	84
  2741  00F157  4F                 	db	79
  2742  00F158  20                 	db	32
  2743  00F159  4C                 	db	76
  2744  00F15A  41                 	db	65
  2745  00F15B  54                 	db	84
  2746  00F15C  43                 	db	67
  2747  00F15D  48                 	db	72
  2748  00F15E  00                 	db	0
  2749  00F15F  00                 	db	0
  2750  00F160  00                 	db	0
  2751  00F161  00                 	db	0
  2752  00F162  00                 	db	0
  2753  00F163  00                 	db	0
  2754  00F164  00                 	db	0
  2755  00F165  55                 	db	85
  2756  00F166  6E                 	db	110
  2757  00F167  2D                 	db	45
  2758  00F168  4C                 	db	76
  2759  00F169  61                 	db	97
  2760  00F16A  74                 	db	116
  2761  00F16B  63                 	db	99
  2762  00F16C  68                 	db	104
  2763  00F16D  20                 	db	32
  2764  00F16E  4D                 	db	77
  2765  00F16F  6F                 	db	111
  2766  00F170  64                 	db	100
  2767  00F171  65                 	db	101
  2768  00F172  00                 	db	0
  2769  00F173  00                 	db	0
  2770  00F174  00                 	db	0
  2771  00F175  00                 	db	0
  2772  00F176  55                 	db	85
  2773  00F177  4E                 	db	78
  2774  00F178  4C                 	db	76
  2775  00F179  41                 	db	65
  2776  00F17A  54                 	db	84
  2777  00F17B  43                 	db	67
  2778  00F17C  48                 	db	72
  2779  00F17D  20                 	db	32
  2780  00F17E  41                 	db	65
  2781  00F17F  4C                 	db	76
  2782  00F180  4C                 	db	76
  2783  00F181  00                 	db	0
  2784  00F182  00                 	db	0
  2785  00F183  00                 	db	0
  2786  00F184  00                 	db	0
  2787  00F185  00                 	db	0
  2788  00F186  00                 	db	0
  2789  00F187  4F                 	db	79
  2790  00F188  4E                 	db	78
  2791  00F189  45                 	db	69
  2792  00F18A  20                 	db	32
  2793  00F18B  41                 	db	65
  2794  00F18C  54                 	db	84
  2795  00F18D  20                 	db	32
  2796  00F18E  41                 	db	65
  2797  00F18F  20                 	db	32
  2798  00F190  54                 	db	84
  2799  00F191  49                 	db	73
  2800  00F192  4D                 	db	77
  2801  00F193  45                 	db	69
  2802  00F194  00                 	db	0
  2803  00F195  00                 	db	0
  2804  00F196  00                 	db	0
  2805  00F197  00                 	db	0
  2806  00F198  52                 	db	82
  2807  00F199  61                 	db	97
  2808  00F19A  6E                 	db	110
  2809  00F19B  64                 	db	100
  2810  00F19C  6F                 	db	111
  2811  00F19D  6D                 	db	109
  2812  00F19E  69                 	db	105
  2813  00F19F  7A                 	db	122
  2814  00F1A0  65                 	db	101
  2815  00F1A1  00                 	db	0
  2816  00F1A2  00                 	db	0
  2817  00F1A3  00                 	db	0
  2818  00F1A4  00                 	db	0
  2819  00F1A5  00                 	db	0
  2820  00F1A6  00                 	db	0
  2821  00F1A7  00                 	db	0
  2822  00F1A8  00                 	db	0
  2823  00F1A9  53                 	db	83
  2824  00F1AA  6B                 	db	107
  2825  00F1AB  69                 	db	105
  2826  00F1AC  70                 	db	112
  2827  00F1AD  20                 	db	32
  2828  00F1AE  46                 	db	70
  2829  00F1AF  69                 	db	105
  2830  00F1B0  72                 	db	114
  2831  00F1B1  73                 	db	115
  2832  00F1B2  74                 	db	116
  2833  00F1B3  2F                 	db	47
  2834  00F1B4  4C                 	db	76
  2835  00F1B5  61                 	db	97
  2836  00F1B6  73                 	db	115
  2837  00F1B7  74                 	db	116
  2838  00F1B8  00                 	db	0
  2839  00F1B9  00                 	db	0
  2840  00F1BA  52                 	db	82
  2841  00F1BB  41                 	db	65
  2842  00F1BC  4E                 	db	78
  2843  00F1BD  44                 	db	68
  2844  00F1BE  4F                 	db	79
  2845  00F1BF  4D                 	db	77
  2846  00F1C0  49                 	db	73
  2847  00F1C1  5A                 	db	90
  2848  00F1C2  45                 	db	69
  2849  00F1C3  20                 	db	32
  2850  00F1C4  41                 	db	65
  2851  00F1C5  55                 	db	85
  2852  00F1C6  54                 	db	84
  2853  00F1C7  4F                 	db	79
  2854  00F1C8  00                 	db	0
  2855  00F1C9  00                 	db	0
  2856  00F1CA  00                 	db	0
  2857  00F1CB  52                 	db	82
  2858  00F1CC  41                 	db	65
  2859  00F1CD  4E                 	db	78
  2860  00F1CE  44                 	db	68
  2861  00F1CF  4F                 	db	79
  2862  00F1D0  4D                 	db	77
  2863  00F1D1  49                 	db	73
  2864  00F1D2  5A                 	db	90
  2865  00F1D3  45                 	db	69
  2866  00F1D4  20                 	db	32
  2867  00F1D5  4F                 	db	79
  2868  00F1D6  4E                 	db	78
  2869  00F1D7  43                 	db	67
  2870  00F1D8  45                 	db	69
  2871  00F1D9  00                 	db	0
  2872  00F1DA  00                 	db	0
  2873  00F1DB  00                 	db	0
  2874  00F1DC  4B                 	db	75
  2875  00F1DD  65                 	db	101
  2876  00F1DE  79                 	db	121
  2877  00F1DF  20                 	db	32
  2878  00F1E0  70                 	db	112
  2879  00F1E1  72                 	db	114
  2880  00F1E2  65                 	db	101
  2881  00F1E3  73                 	db	115
  2882  00F1E4  73                 	db	115
  2883  00F1E5  00                 	db	0
  2884  00F1E6  00                 	db	0
  2885  00F1E7  00                 	db	0
  2886  00F1E8  00                 	db	0
  2887  00F1E9  00                 	db	0
  2888  00F1EA  00                 	db	0
  2889  00F1EB  00                 	db	0
  2890  00F1EC  00                 	db	0
  2891  00F1ED  4B                 	db	75
  2892  00F1EE  65                 	db	101
  2893  00F1EF  79                 	db	121
  2894  00F1F0  20                 	db	32
  2895  00F1F1  72                 	db	114
  2896  00F1F2  65                 	db	101
  2897  00F1F3  6C                 	db	108
  2898  00F1F4  65                 	db	101
  2899  00F1F5  61                 	db	97
  2900  00F1F6  73                 	db	115
  2901  00F1F7  65                 	db	101
  2902  00F1F8  00                 	db	0
  2903  00F1F9  00                 	db	0
  2904  00F1FA  00                 	db	0
  2905  00F1FB  00                 	db	0
  2906  00F1FC  00                 	db	0
  2907  00F1FD  00                 	db	0
  2908  00F1FE  54                 	db	84
  2909  00F1FF  72                 	db	114
  2910  00F200  61                 	db	97
  2911  00F201  6E                 	db	110
  2912  00F202  73                 	db	115
  2913  00F203  70                 	db	112
  2914  00F204  6F                 	db	111
  2915  00F205  73                 	db	115
  2916  00F206  65                 	db	101
  2917  00F207  00                 	db	0
  2918  00F208  00                 	db	0
  2919  00F209  00                 	db	0
  2920  00F20A  00                 	db	0
  2921  00F20B  00                 	db	0
  2922  00F20C  00                 	db	0
  2923  00F20D  00                 	db	0
  2924  00F20E  00                 	db	0
  2925  00F20F  52                 	db	82
  2926  00F210  65                 	db	101
  2927  00F211  73                 	db	115
  2928  00F212  65                 	db	101
  2929  00F213  74                 	db	116
  2930  00F214  00                 	db	0
  2931  00F215  00                 	db	0
  2932  00F216  00                 	db	0
  2933  00F217  00                 	db	0
  2934  00F218  00                 	db	0
  2935  00F219  00                 	db	0
  2936  00F21A  00                 	db	0
  2937  00F21B  00                 	db	0
  2938  00F21C  00                 	db	0
  2939  00F21D  00                 	db	0
  2940  00F21E  00                 	db	0
  2941  00F21F  00                 	db	0
  2942  00F220                     __end_ofascii@LCD_STRINGS:
  2943                           	opt stack 0
  2944  00F220                     _seg_ascii:
  2945                           	opt stack 0
  2946  00F220  3F                 	db	63
  2947  00F221  06                 	db	6
  2948  00F222  5B                 	db	91
  2949  00F223  4F                 	db	79
  2950  00F224  66                 	db	102
  2951  00F225  6D                 	db	109
  2952  00F226  7D                 	db	125
  2953  00F227  07                 	db	7
  2954  00F228  7F                 	db	127
  2955  00F229  6F                 	db	111
  2956  00F22A  00                 	db	0
  2957  00F22B  00                 	db	0
  2958  00F22C  00                 	db	0
  2959  00F22D  00                 	db	0
  2960  00F22E  00                 	db	0
  2961  00F22F  00                 	db	0
  2962  00F230  00                 	db	0
  2963  00F231  77                 	db	119
  2964  00F232  00                 	db	0
  2965  00F233  39                 	db	57
  2966  00F234  00                 	db	0
  2967  00F235  79                 	db	121
  2968  00F236  71                 	db	113
  2969  00F237  3D                 	db	61
  2970  00F238  76                 	db	118
  2971  00F239  30                 	db	48
  2972  00F23A  1E                 	db	30
  2973  00F23B  00                 	db	0
  2974  00F23C  38                 	db	56
  2975  00F23D  00                 	db	0
  2976  00F23E  00                 	db	0
  2977  00F23F  3F                 	db	63
  2978  00F240  73                 	db	115
  2979  00F241  00                 	db	0
  2980  00F242  00                 	db	0
  2981  00F243  6D                 	db	109
  2982  00F244  00                 	db	0
  2983  00F245  3E                 	db	62
  2984  00F246  00                 	db	0
  2985  00F247  00                 	db	0
  2986  00F248  00                 	db	0
  2987  00F249  00                 	db	0
  2988  00F24A  00                 	db	0
  2989  00F24B  00                 	db	0
  2990  00F24C  00                 	db	0
  2991  00F24D  00                 	db	0
  2992  00F24E  00                 	db	0
  2993  00F24F  00                 	db	0
  2994  00F250  00                 	db	0
  2995  00F251  5F                 	db	95
  2996  00F252  7C                 	db	124
  2997  00F253  58                 	db	88
  2998  00F254  5E                 	db	94
  2999  00F255  00                 	db	0
  3000  00F256  00                 	db	0
  3001  00F257  00                 	db	0
  3002  00F258  74                 	db	116
  3003  00F259  00                 	db	0
  3004  00F25A  00                 	db	0
  3005  00F25B  00                 	db	0
  3006  00F25C  00                 	db	0
  3007  00F25D  00                 	db	0
  3008  00F25E  54                 	db	84
  3009  00F25F  5C                 	db	92
  3010  00F260  00                 	db	0
  3011  00F261  67                 	db	103
  3012  00F262  50                 	db	80
  3013  00F263  00                 	db	0
  3014  00F264  78                 	db	120
  3015  00F265  1C                 	db	28
  3016  00F266  00                 	db	0
  3017  00F267  00                 	db	0
  3018  00F268  00                 	db	0
  3019  00F269  6E                 	db	110
  3020  00F26A  00                 	db	0
  3021  00F26B                     __end_of_seg_ascii:
  3022                           	opt stack 0
  3023  00F26B                     _diatonic_seventh_minor:
  3024                           	opt stack 0
  3025  00F26B  00                 	db	0
  3026  00F26C  03                 	db	3
  3027  00F26D  07                 	db	7
  3028  00F26E  0A                 	db	10
  3029  00F26F  02                 	db	2
  3030  00F270  03                 	db	3
  3031  00F271  06                 	db	6
  3032  00F272  0A                 	db	10
  3033  00F273  03                 	db	3
  3034  00F274  04                 	db	4
  3035  00F275  07                 	db	7
  3036  00F276  0B                 	db	11
  3037  00F277  05                 	db	5
  3038  00F278  03                 	db	3
  3039  00F279  07                 	db	7
  3040  00F27A  0A                 	db	10
  3041  00F27B  07                 	db	7
  3042  00F27C  03                 	db	3
  3043  00F27D  07                 	db	7
  3044  00F27E  0A                 	db	10
  3045  00F27F  08                 	db	8
  3046  00F280  04                 	db	4
  3047  00F281  07                 	db	7
  3048  00F282  0B                 	db	11
  3049  00F283  0A                 	db	10
  3050  00F284  04                 	db	4
  3051  00F285  07                 	db	7
  3052  00F286  0A                 	db	10
  3053  00F287  0C                 	db	12
  3054  00F288  03                 	db	3
  3055  00F289  07                 	db	7
  3056  00F28A  0A                 	db	10
  3057  00F28B  0E                 	db	14
  3058  00F28C  03                 	db	3
  3059  00F28D  06                 	db	6
  3060  00F28E  0A                 	db	10
  3061  00F28F  0F                 	db	15
  3062  00F290  04                 	db	4
  3063  00F291  07                 	db	7
  3064  00F292  0B                 	db	11
  3065  00F293  11                 	db	17
  3066  00F294  03                 	db	3
  3067  00F295  07                 	db	7
  3068  00F296  0A                 	db	10
  3069  00F297  13                 	db	19
  3070  00F298  03                 	db	3
  3071  00F299  07                 	db	7
  3072  00F29A  0A                 	db	10
  3073  00F29B  14                 	db	20
  3074  00F29C  04                 	db	4
  3075  00F29D  07                 	db	7
  3076  00F29E  0B                 	db	11
  3077  00F29F  16                 	db	22
  3078  00F2A0  04                 	db	4
  3079  00F2A1  07                 	db	7
  3080  00F2A2  0A                 	db	10
  3081  00F2A3  18                 	db	24
  3082  00F2A4  03                 	db	3
  3083  00F2A5  07                 	db	7
  3084  00F2A6  0A                 	db	10
  3085  00F2A7                     __end_of_diatonic_seventh_minor:
  3086                           	opt stack 0
  3087  00F2A7                     _diatonic_seventh_major:
  3088                           	opt stack 0
  3089  00F2A7  00                 	db	0
  3090  00F2A8  04                 	db	4
  3091  00F2A9  07                 	db	7
  3092  00F2AA  0B                 	db	11
  3093  00F2AB  00                 	db	0
  3094  00F2AC  03                 	db	3
  3095  00F2AD  07                 	db	7
  3096  00F2AE  0A                 	db	10
  3097  00F2AF  00                 	db	0
  3098  00F2B0  03                 	db	3
  3099  00F2B1  07                 	db	7
  3100  00F2B2  0A                 	db	10
  3101  00F2B3  00                 	db	0
  3102  00F2B4  04                 	db	4
  3103  00F2B5  07                 	db	7
  3104  00F2B6  0B                 	db	11
  3105  00F2B7  00                 	db	0
  3106  00F2B8  04                 	db	4
  3107  00F2B9  07                 	db	7
  3108  00F2BA  0A                 	db	10
  3109  00F2BB  00                 	db	0
  3110  00F2BC  03                 	db	3
  3111  00F2BD  07                 	db	7
  3112  00F2BE  0A                 	db	10
  3113  00F2BF  00                 	db	0
  3114  00F2C0  03                 	db	3
  3115  00F2C1  06                 	db	6
  3116  00F2C2  0A                 	db	10
  3117  00F2C3  00                 	db	0
  3118  00F2C4  04                 	db	4
  3119  00F2C5  07                 	db	7
  3120  00F2C6  0B                 	db	11
  3121  00F2C7  00                 	db	0
  3122  00F2C8  03                 	db	3
  3123  00F2C9  07                 	db	7
  3124  00F2CA  0A                 	db	10
  3125  00F2CB  00                 	db	0
  3126  00F2CC  03                 	db	3
  3127  00F2CD  07                 	db	7
  3128  00F2CE  0A                 	db	10
  3129  00F2CF  00                 	db	0
  3130  00F2D0  04                 	db	4
  3131  00F2D1  07                 	db	7
  3132  00F2D2  0B                 	db	11
  3133  00F2D3  00                 	db	0
  3134  00F2D4  04                 	db	4
  3135  00F2D5  07                 	db	7
  3136  00F2D6  0A                 	db	10
  3137  00F2D7  00                 	db	0
  3138  00F2D8  03                 	db	3
  3139  00F2D9  07                 	db	7
  3140  00F2DA  0A                 	db	10
  3141  00F2DB  00                 	db	0
  3142  00F2DC  03                 	db	3
  3143  00F2DD  06                 	db	6
  3144  00F2DE  0A                 	db	10
  3145  00F2DF  00                 	db	0
  3146  00F2E0  04                 	db	4
  3147  00F2E1  07                 	db	7
  3148  00F2E2  0B                 	db	11
  3149  00F2E3                     __end_of_diatonic_seventh_major:
  3150                           	opt stack 0
  3151  00F2E3                     _diatonic_minor:
  3152                           	opt stack 0
  3153  00F2E3  00                 	db	0
  3154  00F2E4  03                 	db	3
  3155  00F2E5  07                 	db	7
  3156  00F2E6  02                 	db	2
  3157  00F2E7  03                 	db	3
  3158  00F2E8  06                 	db	6
  3159  00F2E9  03                 	db	3
  3160  00F2EA  04                 	db	4
  3161  00F2EB  07                 	db	7
  3162  00F2EC  05                 	db	5
  3163  00F2ED  03                 	db	3
  3164  00F2EE  07                 	db	7
  3165  00F2EF  07                 	db	7
  3166  00F2F0  03                 	db	3
  3167  00F2F1  07                 	db	7
  3168  00F2F2  08                 	db	8
  3169  00F2F3  04                 	db	4
  3170  00F2F4  07                 	db	7
  3171  00F2F5  0A                 	db	10
  3172  00F2F6  04                 	db	4
  3173  00F2F7  07                 	db	7
  3174  00F2F8  0C                 	db	12
  3175  00F2F9  03                 	db	3
  3176  00F2FA  07                 	db	7
  3177  00F2FB  0E                 	db	14
  3178  00F2FC  03                 	db	3
  3179  00F2FD  06                 	db	6
  3180  00F2FE  0F                 	db	15
  3181  00F2FF  04                 	db	4
  3182  00F300  07                 	db	7
  3183  00F301  11                 	db	17
  3184  00F302  03                 	db	3
  3185  00F303  07                 	db	7
  3186  00F304  13                 	db	19
  3187  00F305  03                 	db	3
  3188  00F306  07                 	db	7
  3189  00F307  14                 	db	20
  3190  00F308  04                 	db	4
  3191  00F309  07                 	db	7
  3192  00F30A  16                 	db	22
  3193  00F30B  04                 	db	4
  3194  00F30C  07                 	db	7
  3195  00F30D  18                 	db	24
  3196  00F30E  03                 	db	3
  3197  00F30F  07                 	db	7
  3198  00F310                     __end_of_diatonic_minor:
  3199                           	opt stack 0
  3200  00F310                     _diatonic_major:
  3201                           	opt stack 0
  3202  00F310  00                 	db	0
  3203  00F311  04                 	db	4
  3204  00F312  07                 	db	7
  3205  00F313  00                 	db	0
  3206  00F314  03                 	db	3
  3207  00F315  07                 	db	7
  3208  00F316  00                 	db	0
  3209  00F317  03                 	db	3
  3210  00F318  07                 	db	7
  3211  00F319  00                 	db	0
  3212  00F31A  04                 	db	4
  3213  00F31B  07                 	db	7
  3214  00F31C  00                 	db	0
  3215  00F31D  04                 	db	4
  3216  00F31E  07                 	db	7
  3217  00F31F  00                 	db	0
  3218  00F320  03                 	db	3
  3219  00F321  07                 	db	7
  3220  00F322  00                 	db	0
  3221  00F323  03                 	db	3
  3222  00F324  06                 	db	6
  3223  00F325  00                 	db	0
  3224  00F326  04                 	db	4
  3225  00F327  07                 	db	7
  3226  00F328  00                 	db	0
  3227  00F329  03                 	db	3
  3228  00F32A  07                 	db	7
  3229  00F32B  00                 	db	0
  3230  00F32C  03                 	db	3
  3231  00F32D  07                 	db	7
  3232  00F32E  00                 	db	0
  3233  00F32F  04                 	db	4
  3234  00F330  07                 	db	7
  3235  00F331  00                 	db	0
  3236  00F332  04                 	db	4
  3237  00F333  07                 	db	7
  3238  00F334  00                 	db	0
  3239  00F335  03                 	db	3
  3240  00F336  07                 	db	7
  3241  00F337  00                 	db	0
  3242  00F338  03                 	db	3
  3243  00F339  06                 	db	6
  3244  00F33A  00                 	db	0
  3245  00F33B  04                 	db	4
  3246  00F33C  07                 	db	7
  3247  00F33D                     __end_of_diatonic_major:
  3248                           	opt stack 0
  3249  00F33D                     _ttable:
  3250                           	opt stack 0
  3251  00F33D  00                 	db	0
  3252  00F33E  02                 	db	2
  3253  00F33F  04                 	db	4
  3254  00F340  00                 	db	0
  3255  00F341  03                 	db	3
  3256  00F342  00                 	db	0
  3257  00F343  01                 	db	1
  3258  00F344  10                 	db	16
  3259  00F345  03                 	db	3
  3260  00F346  02                 	db	2
  3261  00F347  00                 	db	0
  3262  00F348  00                 	db	0
  3263  00F349  03                 	db	3
  3264  00F34A  02                 	db	2
  3265  00F34B  01                 	db	1
  3266  00F34C  00                 	db	0
  3267  00F34D  06                 	db	6
  3268  00F34E  00                 	db	0
  3269  00F34F  04                 	db	4
  3270  00F350  00                 	db	0
  3271  00F351  06                 	db	6
  3272  00F352  05                 	db	5
  3273  00F353  00                 	db	0
  3274  00F354  20                 	db	32
  3275  00F355  06                 	db	6
  3276  00F356  05                 	db	5
  3277  00F357  04                 	db	4
  3278  00F358  00                 	db	0
  3279  00F359                     __end_of_ttable:
  3280                           	opt stack 0
  3281  00F359                     _seg_bcd_hex:
  3282                           	opt stack 0
  3283  00F359  3F                 	db	63
  3284  00F35A  06                 	db	6
  3285  00F35B  5B                 	db	91
  3286  00F35C  4F                 	db	79
  3287  00F35D  66                 	db	102
  3288  00F35E  6D                 	db	109
  3289  00F35F  7D                 	db	125
  3290  00F360  07                 	db	7
  3291  00F361  7F                 	db	127
  3292  00F362  6F                 	db	111
  3293  00F363  77                 	db	119
  3294  00F364  7C                 	db	124
  3295  00F365  39                 	db	57
  3296  00F366  5E                 	db	94
  3297  00F367  79                 	db	121
  3298  00F368  71                 	db	113
  3299  00F369                     __end_of_seg_bcd_hex:
  3300                           	opt stack 0
  3301  00F369                     _minor_key:
  3302                           	opt stack 0
  3303  00F369  00                 	db	0
  3304  00F36A  02                 	db	2
  3305  00F36B  03                 	db	3
  3306  00F36C  05                 	db	5
  3307  00F36D  07                 	db	7
  3308  00F36E  08                 	db	8
  3309  00F36F  0A                 	db	10
  3310  00F370  0C                 	db	12
  3311  00F371  0E                 	db	14
  3312  00F372  0F                 	db	15
  3313  00F373  11                 	db	17
  3314  00F374  13                 	db	19
  3315  00F375  14                 	db	20
  3316  00F376  16                 	db	22
  3317  00F377  18                 	db	24
  3318  00F378                     __end_of_minor_key:
  3319                           	opt stack 0
  3320  00F378                     _major_key:
  3321                           	opt stack 0
  3322  00F378  00                 	db	0
  3323  00F379  02                 	db	2
  3324  00F37A  04                 	db	4
  3325  00F37B  05                 	db	5
  3326  00F37C  07                 	db	7
  3327  00F37D  09                 	db	9
  3328  00F37E  0B                 	db	11
  3329  00F37F  0C                 	db	12
  3330  00F380  0E                 	db	14
  3331  00F381  10                 	db	16
  3332  00F382  11                 	db	17
  3333  00F383  13                 	db	19
  3334  00F384  15                 	db	21
  3335  00F385  17                 	db	23
  3336  00F386  18                 	db	24
  3337  00F387                     __end_of_major_key:
  3338                           	opt stack 0
  3339  00F387                     _pentatonic_minor_key:
  3340                           	opt stack 0
  3341  00F387  00                 	db	0
  3342  00F388  03                 	db	3
  3343  00F389  05                 	db	5
  3344  00F38A  07                 	db	7
  3345  00F38B  0A                 	db	10
  3346  00F38C  0C                 	db	12
  3347  00F38D  0F                 	db	15
  3348  00F38E  11                 	db	17
  3349  00F38F  13                 	db	19
  3350  00F390  16                 	db	22
  3351  00F391  18                 	db	24
  3352  00F392                     __end_of_pentatonic_minor_key:
  3353                           	opt stack 0
  3354  00F392                     _pentatonic_major_key:
  3355                           	opt stack 0
  3356  00F392  00                 	db	0
  3357  00F393  02                 	db	2
  3358  00F394  04                 	db	4
  3359  00F395  07                 	db	7
  3360  00F396  09                 	db	9
  3361  00F397  0C                 	db	12
  3362  00F398  0E                 	db	14
  3363  00F399  10                 	db	16
  3364  00F39A  13                 	db	19
  3365  00F39B  15                 	db	21
  3366  00F39C  18                 	db	24
  3367  00F39D                     __end_of_pentatonic_major_key:
  3368                           	opt stack 0
  3369  00F39D                     _MAX_NUM_NOTES:
  3370                           	opt stack 0
  3371  00F39D  10                 	db	16
  3372  00F39E                     __end_of_MAX_NUM_NOTES:
  3373                           	opt stack 0
  3374  00F39E                     _LCD_STRINGS:
  3375                           	opt stack 0
  3376  00F39E  4B                 	db	75
  3377  00F39F  45                 	db	69
  3378  00F3A0  59                 	db	89
  3379  00F3A1  42                 	db	66
  3380  00F3A2  4F                 	db	79
  3381  00F3A3  41                 	db	65
  3382  00F3A4  52                 	db	82
  3383  00F3A5  44                 	db	68
  3384  00F3A6  20                 	db	32
  3385  00F3A7  4D                 	db	77
  3386  00F3A8  4F                 	db	79
  3387  00F3A9  44                 	db	68
  3388  00F3AA  45                 	db	69
  3389  00F3AB  3A                 	db	58
  3390  00F3AC  00                 	db	0
  3391  00F3AD  00                 	db	0
  3392  00F3AE  00                 	db	0
  3393  00F3AF  41                 	db	65
  3394  00F3B0  52                 	db	82
  3395  00F3B1  50                 	db	80
  3396  00F3B2  45                 	db	69
  3397  00F3B3  47                 	db	71
  3398  00F3B4  47                 	db	71
  3399  00F3B5  49                 	db	73
  3400  00F3B6  4F                 	db	79
  3401  00F3B7  20                 	db	32
  3402  00F3B8  4D                 	db	77
  3403  00F3B9  45                 	db	69
  3404  00F3BA  4E                 	db	78
  3405  00F3BB  55                 	db	85
  3406  00F3BC  3A                 	db	58
  3407  00F3BD  00                 	db	0
  3408  00F3BE  00                 	db	0
  3409  00F3BF  00                 	db	0
  3410  00F3C0  54                 	db	84
  3411  00F3C1  52                 	db	82
  3412  00F3C2  41                 	db	65
  3413  00F3C3  4E                 	db	78
  3414  00F3C4  53                 	db	83
  3415  00F3C5  50                 	db	80
  3416  00F3C6  4F                 	db	79
  3417  00F3C7  53                 	db	83
  3418  00F3C8  45                 	db	69
  3419  00F3C9  20                 	db	32
  3420  00F3CA  4D                 	db	77
  3421  00F3CB  4F                 	db	79
  3422  00F3CC  44                 	db	68
  3423  00F3CD  45                 	db	69
  3424  00F3CE  3A                 	db	58
  3425  00F3CF  00                 	db	0
  3426  00F3D0  00                 	db	0
  3427  00F3D1  44                 	db	68
  3428  00F3D2  52                 	db	82
  3429  00F3D3  55                 	db	85
  3430  00F3D4  4D                 	db	77
  3431  00F3D5  20                 	db	32
  3432  00F3D6  4D                 	db	77
  3433  00F3D7  4F                 	db	79
  3434  00F3D8  44                 	db	68
  3435  00F3D9  45                 	db	69
  3436  00F3DA  3A                 	db	58
  3437  00F3DB  00                 	db	0
  3438  00F3DC  00                 	db	0
  3439  00F3DD  00                 	db	0
  3440  00F3DE  00                 	db	0
  3441  00F3DF  00                 	db	0
  3442  00F3E0  00                 	db	0
  3443  00F3E1  00                 	db	0
  3444  00F3E2  50                 	db	80
  3445  00F3E3  4F                 	db	79
  3446  00F3E4  54                 	db	84
  3447  00F3E5  53                 	db	83
  3448  00F3E6  20                 	db	32
  3449  00F3E7  4D                 	db	77
  3450  00F3E8  4F                 	db	79
  3451  00F3E9  44                 	db	68
  3452  00F3EA  45                 	db	69
  3453  00F3EB  3A                 	db	58
  3454  00F3EC  00                 	db	0
  3455  00F3ED  00                 	db	0
  3456  00F3EE  00                 	db	0
  3457  00F3EF  00                 	db	0
  3458  00F3F0  00                 	db	0
  3459  00F3F1  00                 	db	0
  3460  00F3F2  00                 	db	0
  3461  00F3F3  4D                 	db	77
  3462  00F3F4  49                 	db	73
  3463  00F3F5  44                 	db	68
  3464  00F3F6  49                 	db	73
  3465  00F3F7  20                 	db	32
  3466  00F3F8  43                 	db	67
  3467  00F3F9  48                 	db	72
  3468  00F3FA  41                 	db	65
  3469  00F3FB  4E                 	db	78
  3470  00F3FC  4E                 	db	78
  3471  00F3FD  45                 	db	69
  3472  00F3FE  4C                 	db	76
  3473  00F3FF  53                 	db	83
  3474  00F400  3A                 	db	58
  3475  00F401  00                 	db	0
  3476  00F402  00                 	db	0
  3477  00F403  00                 	db	0
  3478  00F404  50                 	db	80
  3479  00F405  52                 	db	82
  3480  00F406  4F                 	db	79
  3481  00F407  47                 	db	71
  3482  00F408  52                 	db	82
  3483  00F409  41                 	db	65
  3484  00F40A  4D                 	db	77
  3485  00F40B  20                 	db	32
  3486  00F40C  43                 	db	67
  3487  00F40D  48                 	db	72
  3488  00F40E  41                 	db	65
  3489  00F40F  4E                 	db	78
  3490  00F410  47                 	db	71
  3491  00F411  45                 	db	69
  3492  00F412  3A                 	db	58
  3493  00F413  00                 	db	0
  3494  00F414  00                 	db	0
  3495  00F415  45                 	db	69
  3496  00F416  45                 	db	69
  3497  00F417  50                 	db	80
  3498  00F418  52                 	db	82
  3499  00F419  4F                 	db	79
  3500  00F41A  4D                 	db	77
  3501  00F41B  20                 	db	32
  3502  00F41C  4D                 	db	77
  3503  00F41D  45                 	db	69
  3504  00F41E  4E                 	db	78
  3505  00F41F  55                 	db	85
  3506  00F420  3A                 	db	58
  3507  00F421  00                 	db	0
  3508  00F422  00                 	db	0
  3509  00F423  00                 	db	0
  3510  00F424  00                 	db	0
  3511  00F425  00                 	db	0
  3512  00F426  43                 	db	67
  3513  00F427  48                 	db	72
  3514  00F428  52                 	db	82
  3515  00F429  4F                 	db	79
  3516  00F42A  4D                 	db	77
  3517  00F42B  41                 	db	65
  3518  00F42C  54                 	db	84
  3519  00F42D  49                 	db	73
  3520  00F42E  43                 	db	67
  3521  00F42F  00                 	db	0
  3522  00F430  00                 	db	0
  3523  00F431  00                 	db	0
  3524  00F432  00                 	db	0
  3525  00F433  00                 	db	0
  3526  00F434  00                 	db	0
  3527  00F435  00                 	db	0
  3528  00F436  00                 	db	0
  3529  00F437  4D                 	db	77
  3530  00F438  41                 	db	65
  3531  00F439  4A                 	db	74
  3532  00F43A  4F                 	db	79
  3533  00F43B  52                 	db	82
  3534  00F43C  00                 	db	0
  3535  00F43D  00                 	db	0
  3536  00F43E  00                 	db	0
  3537  00F43F  00                 	db	0
  3538  00F440  00                 	db	0
  3539  00F441  00                 	db	0
  3540  00F442  00                 	db	0
  3541  00F443  00                 	db	0
  3542  00F444  00                 	db	0
  3543  00F445  00                 	db	0
  3544  00F446  00                 	db	0
  3545  00F447  00                 	db	0
  3546  00F448  4D                 	db	77
  3547  00F449  49                 	db	73
  3548  00F44A  4E                 	db	78
  3549  00F44B  4F                 	db	79
  3550  00F44C  52                 	db	82
  3551  00F44D  00                 	db	0
  3552  00F44E  00                 	db	0
  3553  00F44F  00                 	db	0
  3554  00F450  00                 	db	0
  3555  00F451  00                 	db	0
  3556  00F452  00                 	db	0
  3557  00F453  00                 	db	0
  3558  00F454  00                 	db	0
  3559  00F455  00                 	db	0
  3560  00F456  00                 	db	0
  3561  00F457  00                 	db	0
  3562  00F458  00                 	db	0
  3563  00F459  4D                 	db	77
  3564  00F45A  4F                 	db	79
  3565  00F45B  44                 	db	68
  3566  00F45C  45                 	db	69
  3567  00F45D  53                 	db	83
  3568  00F45E  00                 	db	0
  3569  00F45F  00                 	db	0
  3570  00F460  00                 	db	0
  3571  00F461  00                 	db	0
  3572  00F462  00                 	db	0
  3573  00F463  00                 	db	0
  3574  00F464  00                 	db	0
  3575  00F465  00                 	db	0
  3576  00F466  00                 	db	0
  3577  00F467  00                 	db	0
  3578  00F468  00                 	db	0
  3579  00F469  00                 	db	0
  3580  00F46A  50                 	db	80
  3581  00F46B  45                 	db	69
  3582  00F46C  4E                 	db	78
  3583  00F46D  54                 	db	84
  3584  00F46E  41                 	db	65
  3585  00F46F  54                 	db	84
  3586  00F470  4F                 	db	79
  3587  00F471  4E                 	db	78
  3588  00F472  49                 	db	73
  3589  00F473  43                 	db	67
  3590  00F474  20                 	db	32
  3591  00F475  4D                 	db	77
  3592  00F476  41                 	db	65
  3593  00F477  4A                 	db	74
  3594  00F478  4F                 	db	79
  3595  00F479  52                 	db	82
  3596  00F47A  00                 	db	0
  3597  00F47B  50                 	db	80
  3598  00F47C  45                 	db	69
  3599  00F47D  4E                 	db	78
  3600  00F47E  54                 	db	84
  3601  00F47F  41                 	db	65
  3602  00F480  54                 	db	84
  3603  00F481  4F                 	db	79
  3604  00F482  4E                 	db	78
  3605  00F483  49                 	db	73
  3606  00F484  43                 	db	67
  3607  00F485  20                 	db	32
  3608  00F486  4D                 	db	77
  3609  00F487  49                 	db	73
  3610  00F488  4E                 	db	78
  3611  00F489  4F                 	db	79
  3612  00F48A  52                 	db	82
  3613  00F48B  00                 	db	0
  3614  00F48C  54                 	db	84
  3615  00F48D  52                 	db	82
  3616  00F48E  49                 	db	73
  3617  00F48F  41                 	db	65
  3618  00F490  44                 	db	68
  3619  00F491  00                 	db	0
  3620  00F492  00                 	db	0
  3621  00F493  00                 	db	0
  3622  00F494  00                 	db	0
  3623  00F495  00                 	db	0
  3624  00F496  00                 	db	0
  3625  00F497  00                 	db	0
  3626  00F498  00                 	db	0
  3627  00F499  00                 	db	0
  3628  00F49A  00                 	db	0
  3629  00F49B  00                 	db	0
  3630  00F49C  00                 	db	0
  3631  00F49D  44                 	db	68
  3632  00F49E  49                 	db	73
  3633  00F49F  41                 	db	65
  3634  00F4A0  54                 	db	84
  3635  00F4A1  4F                 	db	79
  3636  00F4A2  4E                 	db	78
  3637  00F4A3  49                 	db	73
  3638  00F4A4  43                 	db	67
  3639  00F4A5  20                 	db	32
  3640  00F4A6  54                 	db	84
  3641  00F4A7  20                 	db	32
  3642  00F4A8  4D                 	db	77
  3643  00F4A9  41                 	db	65
  3644  00F4AA  4A                 	db	74
  3645  00F4AB  4F                 	db	79
  3646  00F4AC  52                 	db	82
  3647  00F4AD  00                 	db	0
  3648  00F4AE  44                 	db	68
  3649  00F4AF  49                 	db	73
  3650  00F4B0  41                 	db	65
  3651  00F4B1  54                 	db	84
  3652  00F4B2  4F                 	db	79
  3653  00F4B3  4E                 	db	78
  3654  00F4B4  49                 	db	73
  3655  00F4B5  43                 	db	67
  3656  00F4B6  20                 	db	32
  3657  00F4B7  54                 	db	84
  3658  00F4B8  20                 	db	32
  3659  00F4B9  4D                 	db	77
  3660  00F4BA  49                 	db	73
  3661  00F4BB  4E                 	db	78
  3662  00F4BC  4F                 	db	79
  3663  00F4BD  52                 	db	82
  3664  00F4BE  00                 	db	0
  3665  00F4BF  53                 	db	83
  3666  00F4C0  45                 	db	69
  3667  00F4C1  56                 	db	86
  3668  00F4C2  45                 	db	69
  3669  00F4C3  4E                 	db	78
  3670  00F4C4  54                 	db	84
  3671  00F4C5  48                 	db	72
  3672  00F4C6  00                 	db	0
  3673  00F4C7  00                 	db	0
  3674  00F4C8  00                 	db	0
  3675  00F4C9  00                 	db	0
  3676  00F4CA  00                 	db	0
  3677  00F4CB  00                 	db	0
  3678  00F4CC  00                 	db	0
  3679  00F4CD  00                 	db	0
  3680  00F4CE  00                 	db	0
  3681  00F4CF  00                 	db	0
  3682  00F4D0  44                 	db	68
  3683  00F4D1  49                 	db	73
  3684  00F4D2  41                 	db	65
  3685  00F4D3  54                 	db	84
  3686  00F4D4  4F                 	db	79
  3687  00F4D5  4E                 	db	78
  3688  00F4D6  49                 	db	73
  3689  00F4D7  43                 	db	67
  3690  00F4D8  20                 	db	32
  3691  00F4D9  37                 	db	55
  3692  00F4DA  20                 	db	32
  3693  00F4DB  4D                 	db	77
  3694  00F4DC  41                 	db	65
  3695  00F4DD  4A                 	db	74
  3696  00F4DE  4F                 	db	79
  3697  00F4DF  52                 	db	82
  3698  00F4E0  00                 	db	0
  3699  00F4E1  44                 	db	68
  3700  00F4E2  49                 	db	73
  3701  00F4E3  41                 	db	65
  3702  00F4E4  54                 	db	84
  3703  00F4E5  4F                 	db	79
  3704  00F4E6  4E                 	db	78
  3705  00F4E7  49                 	db	73
  3706  00F4E8  43                 	db	67
  3707  00F4E9  20                 	db	32
  3708  00F4EA  37                 	db	55
  3709  00F4EB  20                 	db	32
  3710  00F4EC  4D                 	db	77
  3711  00F4ED  49                 	db	73
  3712  00F4EE  4E                 	db	78
  3713  00F4EF  4F                 	db	79
  3714  00F4F0  52                 	db	82
  3715  00F4F1  00                 	db	0
  3716  00F4F2  69                 	db	105
  3717  00F4F3  6F                 	db	111
  3718  00F4F4  6E                 	db	110
  3719  00F4F5  69                 	db	105
  3720  00F4F6  61                 	db	97
  3721  00F4F7  6E                 	db	110
  3722  00F4F8  00                 	db	0
  3723  00F4F9  00                 	db	0
  3724  00F4FA  00                 	db	0
  3725  00F4FB  00                 	db	0
  3726  00F4FC  00                 	db	0
  3727  00F4FD  00                 	db	0
  3728  00F4FE  00                 	db	0
  3729  00F4FF  00                 	db	0
  3730  00F500  00                 	db	0
  3731  00F501  00                 	db	0
  3732  00F502  00                 	db	0
  3733  00F503  64                 	db	100
  3734  00F504  6F                 	db	111
  3735  00F505  72                 	db	114
  3736  00F506  69                 	db	105
  3737  00F507  61                 	db	97
  3738  00F508  6E                 	db	110
  3739  00F509  00                 	db	0
  3740  00F50A  00                 	db	0
  3741  00F50B  00                 	db	0
  3742  00F50C  00                 	db	0
  3743  00F50D  00                 	db	0
  3744  00F50E  00                 	db	0
  3745  00F50F  00                 	db	0
  3746  00F510  00                 	db	0
  3747  00F511  00                 	db	0
  3748  00F512  00                 	db	0
  3749  00F513  00                 	db	0
  3750  00F514  70                 	db	112
  3751  00F515  68                 	db	104
  3752  00F516  72                 	db	114
  3753  00F517  79                 	db	121
  3754  00F518  67                 	db	103
  3755  00F519  69                 	db	105
  3756  00F51A  61                 	db	97
  3757  00F51B  6E                 	db	110
  3758  00F51C  00                 	db	0
  3759  00F51D  00                 	db	0
  3760  00F51E  00                 	db	0
  3761  00F51F  00                 	db	0
  3762  00F520  00                 	db	0
  3763  00F521  00                 	db	0
  3764  00F522  00                 	db	0
  3765  00F523  00                 	db	0
  3766  00F524  00                 	db	0
  3767  00F525  6C                 	db	108
  3768  00F526  79                 	db	121
  3769  00F527  64                 	db	100
  3770  00F528  69                 	db	105
  3771  00F529  61                 	db	97
  3772  00F52A  6E                 	db	110
  3773  00F52B  00                 	db	0
  3774  00F52C  00                 	db	0
  3775  00F52D  00                 	db	0
  3776  00F52E  00                 	db	0
  3777  00F52F  00                 	db	0
  3778  00F530  00                 	db	0
  3779  00F531  00                 	db	0
  3780  00F532  00                 	db	0
  3781  00F533  00                 	db	0
  3782  00F534  00                 	db	0
  3783  00F535  00                 	db	0
  3784  00F536  6D                 	db	109
  3785  00F537  69                 	db	105
  3786  00F538  78                 	db	120
  3787  00F539  6F                 	db	111
  3788  00F53A  6C                 	db	108
  3789  00F53B  79                 	db	121
  3790  00F53C  64                 	db	100
  3791  00F53D  69                 	db	105
  3792  00F53E  61                 	db	97
  3793  00F53F  6E                 	db	110
  3794  00F540  00                 	db	0
  3795  00F541  00                 	db	0
  3796  00F542  00                 	db	0
  3797  00F543  00                 	db	0
  3798  00F544  00                 	db	0
  3799  00F545  00                 	db	0
  3800  00F546  00                 	db	0
  3801  00F547  61                 	db	97
  3802  00F548  65                 	db	101
  3803  00F549  6F                 	db	111
  3804  00F54A  6C                 	db	108
  3805  00F54B  69                 	db	105
  3806  00F54C  61                 	db	97
  3807  00F54D  6E                 	db	110
  3808  00F54E  00                 	db	0
  3809  00F54F  00                 	db	0
  3810  00F550  00                 	db	0
  3811  00F551  00                 	db	0
  3812  00F552  00                 	db	0
  3813  00F553  00                 	db	0
  3814  00F554  00                 	db	0
  3815  00F555  00                 	db	0
  3816  00F556  00                 	db	0
  3817  00F557  00                 	db	0
  3818  00F558  6C                 	db	108
  3819  00F559  6F                 	db	111
  3820  00F55A  63                 	db	99
  3821  00F55B  72                 	db	114
  3822  00F55C  69                 	db	105
  3823  00F55D  61                 	db	97
  3824  00F55E  6E                 	db	110
  3825  00F55F  00                 	db	0
  3826  00F560  00                 	db	0
  3827  00F561  00                 	db	0
  3828  00F562  00                 	db	0
  3829  00F563  00                 	db	0
  3830  00F564  00                 	db	0
  3831  00F565  00                 	db	0
  3832  00F566  00                 	db	0
  3833  00F567  00                 	db	0
  3834  00F568  00                 	db	0
  3835  00F569  6D                 	db	109
  3836  00F56A  61                 	db	97
  3837  00F56B  6A                 	db	106
  3838  00F56C  6F                 	db	111
  3839  00F56D  72                 	db	114
  3840  00F56E  20                 	db	32
  3841  00F56F  74                 	db	116
  3842  00F570  72                 	db	114
  3843  00F571  69                 	db	105
  3844  00F572  61                 	db	97
  3845  00F573  64                 	db	100
  3846  00F574  00                 	db	0
  3847  00F575  00                 	db	0
  3848  00F576  00                 	db	0
  3849  00F577  00                 	db	0
  3850  00F578  00                 	db	0
  3851  00F579  00                 	db	0
  3852  00F57A  6D                 	db	109
  3853  00F57B  69                 	db	105
  3854  00F57C  6E                 	db	110
  3855  00F57D  6F                 	db	111
  3856  00F57E  72                 	db	114
  3857  00F57F  20                 	db	32
  3858  00F580  74                 	db	116
  3859  00F581  72                 	db	114
  3860  00F582  69                 	db	105
  3861  00F583  61                 	db	97
  3862  00F584  64                 	db	100
  3863  00F585  00                 	db	0
  3864  00F586  00                 	db	0
  3865  00F587  00                 	db	0
  3866  00F588  00                 	db	0
  3867  00F589  00                 	db	0
  3868  00F58A  00                 	db	0
  3869  00F58B  61                 	db	97
  3870  00F58C  75                 	db	117
  3871  00F58D  67                 	db	103
  3872  00F58E  6D                 	db	109
  3873  00F58F  65                 	db	101
  3874  00F590  6E                 	db	110
  3875  00F591  74                 	db	116
  3876  00F592  65                 	db	101
  3877  00F593  64                 	db	100
  3878  00F594  20                 	db	32
  3879  00F595  74                 	db	116
  3880  00F596  72                 	db	114
  3881  00F597  69                 	db	105
  3882  00F598  61                 	db	97
  3883  00F599  64                 	db	100
  3884  00F59A  00                 	db	0
  3885  00F59B  00                 	db	0
  3886  00F59C  64                 	db	100
  3887  00F59D  69                 	db	105
  3888  00F59E  6D                 	db	109
  3889  00F59F  69                 	db	105
  3890  00F5A0  6E                 	db	110
  3891  00F5A1  69                 	db	105
  3892  00F5A2  73                 	db	115
  3893  00F5A3  68                 	db	104
  3894  00F5A4  65                 	db	101
  3895  00F5A5  64                 	db	100
  3896  00F5A6  20                 	db	32
  3897  00F5A7  74                 	db	116
  3898  00F5A8  72                 	db	114
  3899  00F5A9  69                 	db	105
  3900  00F5AA  61                 	db	97
  3901  00F5AB  64                 	db	100
  3902  00F5AC  00                 	db	0
  3903  00F5AD  64                 	db	100
  3904  00F5AE  6F                 	db	111
  3905  00F5AF  6D                 	db	109
  3906  00F5B0  69                 	db	105
  3907  00F5B1  6E                 	db	110
  3908  00F5B2  61                 	db	97
  3909  00F5B3  6E                 	db	110
  3910  00F5B4  74                 	db	116
  3911  00F5B5  20                 	db	32
  3912  00F5B6  37                 	db	55
  3913  00F5B7  74                 	db	116
  3914  00F5B8  68                 	db	104
  3915  00F5B9  00                 	db	0
  3916  00F5BA  00                 	db	0
  3917  00F5BB  00                 	db	0
  3918  00F5BC  00                 	db	0
  3919  00F5BD  00                 	db	0
  3920  00F5BE  6D                 	db	109
  3921  00F5BF  61                 	db	97
  3922  00F5C0  6A                 	db	106
  3923  00F5C1  6F                 	db	111
  3924  00F5C2  72                 	db	114
  3925  00F5C3  20                 	db	32
  3926  00F5C4  37                 	db	55
  3927  00F5C5  74                 	db	116
  3928  00F5C6  68                 	db	104
  3929  00F5C7  00                 	db	0
  3930  00F5C8  00                 	db	0
  3931  00F5C9  00                 	db	0
  3932  00F5CA  00                 	db	0
  3933  00F5CB  00                 	db	0
  3934  00F5CC  00                 	db	0
  3935  00F5CD  00                 	db	0
  3936  00F5CE  00                 	db	0
  3937  00F5CF  6D                 	db	109
  3938  00F5D0  69                 	db	105
  3939  00F5D1  6E                 	db	110
  3940  00F5D2  6F                 	db	111
  3941  00F5D3  72                 	db	114
  3942  00F5D4  20                 	db	32
  3943  00F5D5  37                 	db	55
  3944  00F5D6  74                 	db	116
  3945  00F5D7  68                 	db	104
  3946  00F5D8  00                 	db	0
  3947  00F5D9  00                 	db	0
  3948  00F5DA  00                 	db	0
  3949  00F5DB  00                 	db	0
  3950  00F5DC  00                 	db	0
  3951  00F5DD  00                 	db	0
  3952  00F5DE  00                 	db	0
  3953  00F5DF  00                 	db	0
  3954  00F5E0  68                 	db	104
  3955  00F5E1  61                 	db	97
  3956  00F5E2  6C                 	db	108
  3957  00F5E3  66                 	db	102
  3958  00F5E4  20                 	db	32
  3959  00F5E5  64                 	db	100
  3960  00F5E6  69                 	db	105
  3961  00F5E7  6D                 	db	109
  3962  00F5E8  69                 	db	105
  3963  00F5E9  6E                 	db	110
  3964  00F5EA  69                 	db	105
  3965  00F5EB  73                 	db	115
  3966  00F5EC  68                 	db	104
  3967  00F5ED  65                 	db	101
  3968  00F5EE  64                 	db	100
  3969  00F5EF  00                 	db	0
  3970  00F5F0  00                 	db	0
  3971  00F5F1  64                 	db	100
  3972  00F5F2  69                 	db	105
  3973  00F5F3  6D                 	db	109
  3974  00F5F4  69                 	db	105
  3975  00F5F5  6E                 	db	110
  3976  00F5F6  69                 	db	105
  3977  00F5F7  73                 	db	115
  3978  00F5F8  68                 	db	104
  3979  00F5F9  65                 	db	101
  3980  00F5FA  64                 	db	100
  3981  00F5FB  20                 	db	32
  3982  00F5FC  37                 	db	55
  3983  00F5FD  74                 	db	116
  3984  00F5FE  68                 	db	104
  3985  00F5FF  00                 	db	0
  3986  00F600  00                 	db	0
  3987  00F601  00                 	db	0
  3988  00F602  48                 	db	72
  3989  00F603  41                 	db	65
  3990  00F604  4C                 	db	76
  3991  00F605  46                 	db	70
  3992  00F606  20                 	db	32
  3993  00F607  53                 	db	83
  3994  00F608  54                 	db	84
  3995  00F609  45                 	db	69
  3996  00F60A  50                 	db	80
  3997  00F60B  00                 	db	0
  3998  00F60C  00                 	db	0
  3999  00F60D  00                 	db	0
  4000  00F60E  00                 	db	0
  4001  00F60F  00                 	db	0
  4002  00F610  00                 	db	0
  4003  00F611  00                 	db	0
  4004  00F612  00                 	db	0
  4005  00F613  43                 	db	67
  4006  00F614  49                 	db	73
  4007  00F615  52                 	db	82
  4008  00F616  43                 	db	67
  4009  00F617  4C                 	db	76
  4010  00F618  45                 	db	69
  4011  00F619  20                 	db	32
  4012  00F61A  4F                 	db	79
  4013  00F61B  46                 	db	70
  4014  00F61C  20                 	db	32
  4015  00F61D  46                 	db	70
  4016  00F61E  49                 	db	73
  4017  00F61F  46                 	db	70
  4018  00F620  54                 	db	84
  4019  00F621  48                 	db	72
  4020  00F622  53                 	db	83
  4021  00F623  00                 	db	0
  4022  00F624  44                 	db	68
  4023  00F625  52                 	db	82
  4024  00F626  55                 	db	85
  4025  00F627  4D                 	db	77
  4026  00F628  20                 	db	32
  4027  00F629  49                 	db	73
  4028  00F62A  53                 	db	83
  4029  00F62B  20                 	db	32
  4030  00F62C  4E                 	db	78
  4031  00F62D  4F                 	db	79
  4032  00F62E  54                 	db	84
  4033  00F62F  45                 	db	69
  4034  00F630  20                 	db	32
  4035  00F631  4F                 	db	79
  4036  00F632  4E                 	db	78
  4037  00F633  00                 	db	0
  4038  00F634  00                 	db	0
  4039  00F635  44                 	db	68
  4040  00F636  52                 	db	82
  4041  00F637  55                 	db	85
  4042  00F638  4D                 	db	77
  4043  00F639  20                 	db	32
  4044  00F63A  49                 	db	73
  4045  00F63B  53                 	db	83
  4046  00F63C  20                 	db	32
  4047  00F63D  43                 	db	67
  4048  00F63E  43                 	db	67
  4049  00F63F  00                 	db	0
  4050  00F640  00                 	db	0
  4051  00F641  00                 	db	0
  4052  00F642  00                 	db	0
  4053  00F643  00                 	db	0
  4054  00F644  00                 	db	0
  4055  00F645  00                 	db	0
  4056  00F646  44                 	db	68
  4057  00F647  52                 	db	82
  4058  00F648  55                 	db	85
  4059  00F649  4D                 	db	77
  4060  00F64A  20                 	db	32
  4061  00F64B  43                 	db	67
  4062  00F64C  43                 	db	67
  4063  00F64D  20                 	db	32
  4064  00F64E  54                 	db	84
  4065  00F64F  59                 	db	89
  4066  00F650  50                 	db	80
  4067  00F651  45                 	db	69
  4068  00F652  00                 	db	0
  4069  00F653  00                 	db	0
  4070  00F654  00                 	db	0
  4071  00F655  00                 	db	0
  4072  00F656  00                 	db	0
  4073  00F657  44                 	db	68
  4074  00F658  52                 	db	82
  4075  00F659  55                 	db	85
  4076  00F65A  4D                 	db	77
  4077  00F65B  20                 	db	32
  4078  00F65C  53                 	db	83
  4079  00F65D  45                 	db	69
  4080  00F65E  54                 	db	84
  4081  00F65F  20                 	db	32
  4082  00F660  4E                 	db	78
  4083  00F661  4E                 	db	78
  4084  00F662  23                 	db	35
  4085  00F663  00                 	db	0
  4086  00F664  00                 	db	0
  4087  00F665  00                 	db	0
  4088  00F666  00                 	db	0
  4089  00F667  00                 	db	0
  4090  00F668  44                 	db	68
  4091  00F669  52                 	db	82
  4092  00F66A  55                 	db	85
  4093  00F66B  4D                 	db	77
  4094  00F66C  20                 	db	32
  4095  00F66D  53                 	db	83
  4096  00F66E  45                 	db	69
  4097  00F66F  54                 	db	84
  4098  00F670  20                 	db	32
  4099  00F671  43                 	db	67
  4100  00F672  43                 	db	67
  4101  00F673  23                 	db	35
  4102  00F674  00                 	db	0
  4103  00F675  00                 	db	0
  4104  00F676  00                 	db	0
  4105  00F677  00                 	db	0
  4106  00F678  00                 	db	0
  4107  00F679  44                 	db	68
  4108  00F67A  52                 	db	82
  4109  00F67B  55                 	db	85
  4110  00F67C  4D                 	db	77
  4111  00F67D  20                 	db	32
  4112  00F67E  43                 	db	67
  4113  00F67F  43                 	db	67
  4114  00F680  20                 	db	32
  4115  00F681  54                 	db	84
  4116  00F682  52                 	db	82
  4117  00F683  49                 	db	73
  4118  00F684  47                 	db	71
  4119  00F685  47                 	db	71
  4120  00F686  45                 	db	69
  4121  00F687  52                 	db	82
  4122  00F688  00                 	db	0
  4123  00F689  00                 	db	0
  4124  00F68A  44                 	db	68
  4125  00F68B  52                 	db	82
  4126  00F68C  55                 	db	85
  4127  00F68D  4D                 	db	77
  4128  00F68E  20                 	db	32
  4129  00F68F  43                 	db	67
  4130  00F690  43                 	db	67
  4131  00F691  20                 	db	32
  4132  00F692  54                 	db	84
  4133  00F693  4F                 	db	79
  4134  00F694  47                 	db	71
  4135  00F695  47                 	db	71
  4136  00F696  4C                 	db	76
  4137  00F697  45                 	db	69
  4138  00F698  00                 	db	0
  4139  00F699  00                 	db	0
  4140  00F69A  00                 	db	0
  4141  00F69B  44                 	db	68
  4142  00F69C  52                 	db	82
  4143  00F69D  55                 	db	85
  4144  00F69E  4D                 	db	77
  4145  00F69F  20                 	db	32
  4146  00F6A0  31                 	db	49
  4147  00F6A1  20                 	db	32
  4148  00F6A2  4E                 	db	78
  4149  00F6A3  4E                 	db	78
  4150  00F6A4  3A                 	db	58
  4151  00F6A5  20                 	db	32
  4152  00F6A6  00                 	db	0
  4153  00F6A7  00                 	db	0
  4154  00F6A8  00                 	db	0
  4155  00F6A9  00                 	db	0
  4156  00F6AA  00                 	db	0
  4157  00F6AB  00                 	db	0
  4158  00F6AC  44                 	db	68
  4159  00F6AD  52                 	db	82
  4160  00F6AE  55                 	db	85
  4161  00F6AF  4D                 	db	77
  4162  00F6B0  20                 	db	32
  4163  00F6B1  32                 	db	50
  4164  00F6B2  20                 	db	32
  4165  00F6B3  4E                 	db	78
  4166  00F6B4  4E                 	db	78
  4167  00F6B5  3A                 	db	58
  4168  00F6B6  20                 	db	32
  4169  00F6B7  00                 	db	0
  4170  00F6B8  00                 	db	0
  4171  00F6B9  00                 	db	0
  4172  00F6BA  00                 	db	0
  4173  00F6BB  00                 	db	0
  4174  00F6BC  00                 	db	0
  4175  00F6BD  44                 	db	68
  4176  00F6BE  52                 	db	82
  4177  00F6BF  55                 	db	85
  4178  00F6C0  4D                 	db	77
  4179  00F6C1  20                 	db	32
  4180  00F6C2  33                 	db	51
  4181  00F6C3  20                 	db	32
  4182  00F6C4  4E                 	db	78
  4183  00F6C5  4E                 	db	78
  4184  00F6C6  3A                 	db	58
  4185  00F6C7  20                 	db	32
  4186  00F6C8  00                 	db	0
  4187  00F6C9  00                 	db	0
  4188  00F6CA  00                 	db	0
  4189  00F6CB  00                 	db	0
  4190  00F6CC  00                 	db	0
  4191  00F6CD  00                 	db	0
  4192  00F6CE  44                 	db	68
  4193  00F6CF  52                 	db	82
  4194  00F6D0  55                 	db	85
  4195  00F6D1  4D                 	db	77
  4196  00F6D2  20                 	db	32
  4197  00F6D3  34                 	db	52
  4198  00F6D4  20                 	db	32
  4199  00F6D5  4E                 	db	78
  4200  00F6D6  4E                 	db	78
  4201  00F6D7  3A                 	db	58
  4202  00F6D8  20                 	db	32
  4203  00F6D9  00                 	db	0
  4204  00F6DA  00                 	db	0
  4205  00F6DB  00                 	db	0
  4206  00F6DC  00                 	db	0
  4207  00F6DD  00                 	db	0
  4208  00F6DE  00                 	db	0
  4209  00F6DF  44                 	db	68
  4210  00F6E0  52                 	db	82
  4211  00F6E1  55                 	db	85
  4212  00F6E2  4D                 	db	77
  4213  00F6E3  20                 	db	32
  4214  00F6E4  35                 	db	53
  4215  00F6E5  20                 	db	32
  4216  00F6E6  4E                 	db	78
  4217  00F6E7  4E                 	db	78
  4218  00F6E8  3A                 	db	58
  4219  00F6E9  20                 	db	32
  4220  00F6EA  00                 	db	0
  4221  00F6EB  00                 	db	0
  4222  00F6EC  00                 	db	0
  4223  00F6ED  00                 	db	0
  4224  00F6EE  00                 	db	0
  4225  00F6EF  00                 	db	0
  4226  00F6F0  44                 	db	68
  4227  00F6F1  52                 	db	82
  4228  00F6F2  55                 	db	85
  4229  00F6F3  4D                 	db	77
  4230  00F6F4  20                 	db	32
  4231  00F6F5  36                 	db	54
  4232  00F6F6  20                 	db	32
  4233  00F6F7  4E                 	db	78
  4234  00F6F8  4E                 	db	78
  4235  00F6F9  3A                 	db	58
  4236  00F6FA  20                 	db	32
  4237  00F6FB  00                 	db	0
  4238  00F6FC  00                 	db	0
  4239  00F6FD  00                 	db	0
  4240  00F6FE  00                 	db	0
  4241  00F6FF  00                 	db	0
  4242  00F700  00                 	db	0
  4243  00F701  44                 	db	68
  4244  00F702  52                 	db	82
  4245  00F703  55                 	db	85
  4246  00F704  4D                 	db	77
  4247  00F705  20                 	db	32
  4248  00F706  37                 	db	55
  4249  00F707  20                 	db	32
  4250  00F708  4E                 	db	78
  4251  00F709  4E                 	db	78
  4252  00F70A  3A                 	db	58
  4253  00F70B  20                 	db	32
  4254  00F70C  00                 	db	0
  4255  00F70D  00                 	db	0
  4256  00F70E  00                 	db	0
  4257  00F70F  00                 	db	0
  4258  00F710  00                 	db	0
  4259  00F711  00                 	db	0
  4260  00F712  44                 	db	68
  4261  00F713  52                 	db	82
  4262  00F714  55                 	db	85
  4263  00F715  4D                 	db	77
  4264  00F716  20                 	db	32
  4265  00F717  38                 	db	56
  4266  00F718  20                 	db	32
  4267  00F719  4E                 	db	78
  4268  00F71A  4E                 	db	78
  4269  00F71B  3A                 	db	58
  4270  00F71C  20                 	db	32
  4271  00F71D  00                 	db	0
  4272  00F71E  00                 	db	0
  4273  00F71F  00                 	db	0
  4274  00F720  00                 	db	0
  4275  00F721  00                 	db	0
  4276  00F722  00                 	db	0
  4277  00F723  44                 	db	68
  4278  00F724  52                 	db	82
  4279  00F725  55                 	db	85
  4280  00F726  4D                 	db	77
  4281  00F727  20                 	db	32
  4282  00F728  31                 	db	49
  4283  00F729  20                 	db	32
  4284  00F72A  43                 	db	67
  4285  00F72B  43                 	db	67
  4286  00F72C  3A                 	db	58
  4287  00F72D  20                 	db	32
  4288  00F72E  00                 	db	0
  4289  00F72F  00                 	db	0
  4290  00F730  00                 	db	0
  4291  00F731  00                 	db	0
  4292  00F732  00                 	db	0
  4293  00F733  00                 	db	0
  4294  00F734  44                 	db	68
  4295  00F735  52                 	db	82
  4296  00F736  55                 	db	85
  4297  00F737  4D                 	db	77
  4298  00F738  20                 	db	32
  4299  00F739  32                 	db	50
  4300  00F73A  20                 	db	32
  4301  00F73B  43                 	db	67
  4302  00F73C  43                 	db	67
  4303  00F73D  3A                 	db	58
  4304  00F73E  20                 	db	32
  4305  00F73F  00                 	db	0
  4306  00F740  00                 	db	0
  4307  00F741  00                 	db	0
  4308  00F742  00                 	db	0
  4309  00F743  00                 	db	0
  4310  00F744  00                 	db	0
  4311  00F745  44                 	db	68
  4312  00F746  52                 	db	82
  4313  00F747  55                 	db	85
  4314  00F748  4D                 	db	77
  4315  00F749  20                 	db	32
  4316  00F74A  33                 	db	51
  4317  00F74B  20                 	db	32
  4318  00F74C  43                 	db	67
  4319  00F74D  43                 	db	67
  4320  00F74E  3A                 	db	58
  4321  00F74F  20                 	db	32
  4322  00F750  00                 	db	0
  4323  00F751  00                 	db	0
  4324  00F752  00                 	db	0
  4325  00F753  00                 	db	0
  4326  00F754  00                 	db	0
  4327  00F755  00                 	db	0
  4328  00F756  44                 	db	68
  4329  00F757  52                 	db	82
  4330  00F758  55                 	db	85
  4331  00F759  4D                 	db	77
  4332  00F75A  20                 	db	32
  4333  00F75B  34                 	db	52
  4334  00F75C  20                 	db	32
  4335  00F75D  43                 	db	67
  4336  00F75E  43                 	db	67
  4337  00F75F  3A                 	db	58
  4338  00F760  20                 	db	32
  4339  00F761  00                 	db	0
  4340  00F762  00                 	db	0
  4341  00F763  00                 	db	0
  4342  00F764  00                 	db	0
  4343  00F765  00                 	db	0
  4344  00F766  00                 	db	0
  4345  00F767  44                 	db	68
  4346  00F768  52                 	db	82
  4347  00F769  55                 	db	85
  4348  00F76A  4D                 	db	77
  4349  00F76B  20                 	db	32
  4350  00F76C  35                 	db	53
  4351  00F76D  20                 	db	32
  4352  00F76E  43                 	db	67
  4353  00F76F  43                 	db	67
  4354  00F770  3A                 	db	58
  4355  00F771  20                 	db	32
  4356  00F772  00                 	db	0
  4357  00F773  00                 	db	0
  4358  00F774  00                 	db	0
  4359  00F775  00                 	db	0
  4360  00F776  00                 	db	0
  4361  00F777  00                 	db	0
  4362  00F778  44                 	db	68
  4363  00F779  52                 	db	82
  4364  00F77A  55                 	db	85
  4365  00F77B  4D                 	db	77
  4366  00F77C  20                 	db	32
  4367  00F77D  36                 	db	54
  4368  00F77E  20                 	db	32
  4369  00F77F  43                 	db	67
  4370  00F780  43                 	db	67
  4371  00F781  3A                 	db	58
  4372  00F782  20                 	db	32
  4373  00F783  00                 	db	0
  4374  00F784  00                 	db	0
  4375  00F785  00                 	db	0
  4376  00F786  00                 	db	0
  4377  00F787  00                 	db	0
  4378  00F788  00                 	db	0
  4379  00F789  44                 	db	68
  4380  00F78A  52                 	db	82
  4381  00F78B  55                 	db	85
  4382  00F78C  4D                 	db	77
  4383  00F78D  20                 	db	32
  4384  00F78E  37                 	db	55
  4385  00F78F  20                 	db	32
  4386  00F790  43                 	db	67
  4387  00F791  43                 	db	67
  4388  00F792  3A                 	db	58
  4389  00F793  20                 	db	32
  4390  00F794  00                 	db	0
  4391  00F795  00                 	db	0
  4392  00F796  00                 	db	0
  4393  00F797  00                 	db	0
  4394  00F798  00                 	db	0
  4395  00F799  00                 	db	0
  4396  00F79A  44                 	db	68
  4397  00F79B  52                 	db	82
  4398  00F79C  55                 	db	85
  4399  00F79D  4D                 	db	77
  4400  00F79E  20                 	db	32
  4401  00F79F  38                 	db	56
  4402  00F7A0  20                 	db	32
  4403  00F7A1  43                 	db	67
  4404  00F7A2  43                 	db	67
  4405  00F7A3  3A                 	db	58
  4406  00F7A4  20                 	db	32
  4407  00F7A5  00                 	db	0
  4408  00F7A6  00                 	db	0
  4409  00F7A7  00                 	db	0
  4410  00F7A8  00                 	db	0
  4411  00F7A9  00                 	db	0
  4412  00F7AA  00                 	db	0
  4413  00F7AB  50                 	db	80
  4414  00F7AC  4F                 	db	79
  4415  00F7AD  54                 	db	84
  4416  00F7AE  53                 	db	83
  4417  00F7AF  20                 	db	32
  4418  00F7B0  52                 	db	82
  4419  00F7B1  45                 	db	69
  4420  00F7B2  53                 	db	83
  4421  00F7B3  4F                 	db	79
  4422  00F7B4  4C                 	db	76
  4423  00F7B5  55                 	db	85
  4424  00F7B6  54                 	db	84
  4425  00F7B7  49                 	db	73
  4426  00F7B8  4F                 	db	79
  4427  00F7B9  4E                 	db	78
  4428  00F7BA  00                 	db	0
  4429  00F7BB  00                 	db	0
  4430  00F7BC  50                 	db	80
  4431  00F7BD  4F                 	db	79
  4432  00F7BE  54                 	db	84
  4433  00F7BF  53                 	db	83
  4434  00F7C0  20                 	db	32
  4435  00F7C1  41                 	db	65
  4436  00F7C2  4C                 	db	76
  4437  00F7C3  50                 	db	80
  4438  00F7C4  48                 	db	72
  4439  00F7C5  41                 	db	65
  4440  00F7C6  00                 	db	0
  4441  00F7C7  00                 	db	0
  4442  00F7C8  00                 	db	0
  4443  00F7C9  00                 	db	0
  4444  00F7CA  00                 	db	0
  4445  00F7CB  00                 	db	0
  4446  00F7CC  00                 	db	0
  4447  00F7CD  50                 	db	80
  4448  00F7CE  4F                 	db	79
  4449  00F7CF  54                 	db	84
  4450  00F7D0  53                 	db	83
  4451  00F7D1  20                 	db	32
  4452  00F7D2  53                 	db	83
  4453  00F7D3  45                 	db	69
  4454  00F7D4  54                 	db	84
  4455  00F7D5  20                 	db	32
  4456  00F7D6  43                 	db	67
  4457  00F7D7  43                 	db	67
  4458  00F7D8  23                 	db	35
  4459  00F7D9  00                 	db	0
  4460  00F7DA  00                 	db	0
  4461  00F7DB  00                 	db	0
  4462  00F7DC  00                 	db	0
  4463  00F7DD  00                 	db	0
  4464  00F7DE  53                 	db	83
  4465  00F7DF  4C                 	db	76
  4466  00F7E0  49                 	db	73
  4467  00F7E1  44                 	db	68
  4468  00F7E2  45                 	db	69
  4469  00F7E3  50                 	db	80
  4470  00F7E4  4F                 	db	79
  4471  00F7E5  54                 	db	84
  4472  00F7E6  20                 	db	32
  4473  00F7E7  53                 	db	83
  4474  00F7E8  45                 	db	69
  4475  00F7E9  54                 	db	84
  4476  00F7EA  20                 	db	32
  4477  00F7EB  43                 	db	67
  4478  00F7EC  43                 	db	67
  4479  00F7ED  23                 	db	35
  4480  00F7EE  00                 	db	0
  4481  00F7EF  4A                 	db	74
  4482  00F7F0  4F                 	db	79
  4483  00F7F1  59                 	db	89
  4484  00F7F2  53                 	db	83
  4485  00F7F3  54                 	db	84
  4486  00F7F4  49                 	db	73
  4487  00F7F5  43                 	db	67
  4488  00F7F6  4B                 	db	75
  4489  00F7F7  20                 	db	32
  4490  00F7F8  53                 	db	83
  4491  00F7F9  45                 	db	69
  4492  00F7FA  54                 	db	84
  4493  00F7FB  20                 	db	32
  4494  00F7FC  43                 	db	67
  4495  00F7FD  43                 	db	67
  4496  00F7FE  23                 	db	35
  4497  00F7FF  00                 	db	0
  4498  00F800  50                 	db	80
  4499  00F801  4F                 	db	79
  4500  00F802  54                 	db	84
  4501  00F803  53                 	db	83
  4502  00F804  20                 	db	32
  4503  00F805  4C                 	db	76
  4504  00F806  4F                 	db	79
  4505  00F807  20                 	db	32
  4506  00F808  52                 	db	82
  4507  00F809  45                 	db	69
  4508  00F80A  53                 	db	83
  4509  00F80B  00                 	db	0
  4510  00F80C  00                 	db	0
  4511  00F80D  00                 	db	0
  4512  00F80E  00                 	db	0
  4513  00F80F  00                 	db	0
  4514  00F810  00                 	db	0
  4515  00F811  50                 	db	80
  4516  00F812  4F                 	db	79
  4517  00F813  54                 	db	84
  4518  00F814  53                 	db	83
  4519  00F815  20                 	db	32
  4520  00F816  48                 	db	72
  4521  00F817  49                 	db	73
  4522  00F818  20                 	db	32
  4523  00F819  52                 	db	82
  4524  00F81A  45                 	db	69
  4525  00F81B  53                 	db	83
  4526  00F81C  00                 	db	0
  4527  00F81D  00                 	db	0
  4528  00F81E  00                 	db	0
  4529  00F81F  00                 	db	0
  4530  00F820  00                 	db	0
  4531  00F821  00                 	db	0
  4532  00F822  50                 	db	80
  4533  00F823  31                 	db	49
  4534  00F824  20                 	db	32
  4535  00F825  43                 	db	67
  4536  00F826  43                 	db	67
  4537  00F827  3A                 	db	58
  4538  00F828  00                 	db	0
  4539  00F829  00                 	db	0
  4540  00F82A  00                 	db	0
  4541  00F82B  00                 	db	0
  4542  00F82C  00                 	db	0
  4543  00F82D  00                 	db	0
  4544  00F82E  00                 	db	0
  4545  00F82F  00                 	db	0
  4546  00F830  00                 	db	0
  4547  00F831  00                 	db	0
  4548  00F832  00                 	db	0
  4549  00F833  50                 	db	80
  4550  00F834  32                 	db	50
  4551  00F835  20                 	db	32
  4552  00F836  43                 	db	67
  4553  00F837  43                 	db	67
  4554  00F838  3A                 	db	58
  4555  00F839  00                 	db	0
  4556  00F83A  00                 	db	0
  4557  00F83B  00                 	db	0
  4558  00F83C  00                 	db	0
  4559  00F83D  00                 	db	0
  4560  00F83E  00                 	db	0
  4561  00F83F  00                 	db	0
  4562  00F840  00                 	db	0
  4563  00F841  00                 	db	0
  4564  00F842  00                 	db	0
  4565  00F843  00                 	db	0
  4566  00F844  50                 	db	80
  4567  00F845  33                 	db	51
  4568  00F846  20                 	db	32
  4569  00F847  43                 	db	67
  4570  00F848  43                 	db	67
  4571  00F849  3A                 	db	58
  4572  00F84A  00                 	db	0
  4573  00F84B  00                 	db	0
  4574  00F84C  00                 	db	0
  4575  00F84D  00                 	db	0
  4576  00F84E  00                 	db	0
  4577  00F84F  00                 	db	0
  4578  00F850  00                 	db	0
  4579  00F851  00                 	db	0
  4580  00F852  00                 	db	0
  4581  00F853  00                 	db	0
  4582  00F854  00                 	db	0
  4583  00F855  50                 	db	80
  4584  00F856  34                 	db	52
  4585  00F857  20                 	db	32
  4586  00F858  43                 	db	67
  4587  00F859  43                 	db	67
  4588  00F85A  3A                 	db	58
  4589  00F85B  00                 	db	0
  4590  00F85C  00                 	db	0
  4591  00F85D  00                 	db	0
  4592  00F85E  00                 	db	0
  4593  00F85F  00                 	db	0
  4594  00F860  00                 	db	0
  4595  00F861  00                 	db	0
  4596  00F862  00                 	db	0
  4597  00F863  00                 	db	0
  4598  00F864  00                 	db	0
  4599  00F865  00                 	db	0
  4600  00F866  50                 	db	80
  4601  00F867  35                 	db	53
  4602  00F868  20                 	db	32
  4603  00F869  43                 	db	67
  4604  00F86A  43                 	db	67
  4605  00F86B  3A                 	db	58
  4606  00F86C  00                 	db	0
  4607  00F86D  00                 	db	0
  4608  00F86E  00                 	db	0
  4609  00F86F  00                 	db	0
  4610  00F870  00                 	db	0
  4611  00F871  00                 	db	0
  4612  00F872  00                 	db	0
  4613  00F873  00                 	db	0
  4614  00F874  00                 	db	0
  4615  00F875  00                 	db	0
  4616  00F876  00                 	db	0
  4617  00F877  50                 	db	80
  4618  00F878  36                 	db	54
  4619  00F879  20                 	db	32
  4620  00F87A  43                 	db	67
  4621  00F87B  43                 	db	67
  4622  00F87C  3A                 	db	58
  4623  00F87D  00                 	db	0
  4624  00F87E  00                 	db	0
  4625  00F87F  00                 	db	0
  4626  00F880  00                 	db	0
  4627  00F881  00                 	db	0
  4628  00F882  00                 	db	0
  4629  00F883  00                 	db	0
  4630  00F884  00                 	db	0
  4631  00F885  00                 	db	0
  4632  00F886  00                 	db	0
  4633  00F887  00                 	db	0
  4634  00F888  50                 	db	80
  4635  00F889  37                 	db	55
  4636  00F88A  20                 	db	32
  4637  00F88B  43                 	db	67
  4638  00F88C  43                 	db	67
  4639  00F88D  3A                 	db	58
  4640  00F88E  00                 	db	0
  4641  00F88F  00                 	db	0
  4642  00F890  00                 	db	0
  4643  00F891  00                 	db	0
  4644  00F892  00                 	db	0
  4645  00F893  00                 	db	0
  4646  00F894  00                 	db	0
  4647  00F895  00                 	db	0
  4648  00F896  00                 	db	0
  4649  00F897  00                 	db	0
  4650  00F898  00                 	db	0
  4651  00F899  53                 	db	83
  4652  00F89A  31                 	db	49
  4653  00F89B  20                 	db	32
  4654  00F89C  43                 	db	67
  4655  00F89D  43                 	db	67
  4656  00F89E  3A                 	db	58
  4657  00F89F  20                 	db	32
  4658  00F8A0  00                 	db	0
  4659  00F8A1  00                 	db	0
  4660  00F8A2  00                 	db	0
  4661  00F8A3  00                 	db	0
  4662  00F8A4  00                 	db	0
  4663  00F8A5  00                 	db	0
  4664  00F8A6  00                 	db	0
  4665  00F8A7  00                 	db	0
  4666  00F8A8  00                 	db	0
  4667  00F8A9  00                 	db	0
  4668  00F8AA  53                 	db	83
  4669  00F8AB  32                 	db	50
  4670  00F8AC  20                 	db	32
  4671  00F8AD  43                 	db	67
  4672  00F8AE  43                 	db	67
  4673  00F8AF  3A                 	db	58
  4674  00F8B0  20                 	db	32
  4675  00F8B1  00                 	db	0
  4676  00F8B2  00                 	db	0
  4677  00F8B3  00                 	db	0
  4678  00F8B4  00                 	db	0
  4679  00F8B5  00                 	db	0
  4680  00F8B6  00                 	db	0
  4681  00F8B7  00                 	db	0
  4682  00F8B8  00                 	db	0
  4683  00F8B9  00                 	db	0
  4684  00F8BA  00                 	db	0
  4685  00F8BB  53                 	db	83
  4686  00F8BC  33                 	db	51
  4687  00F8BD  20                 	db	32
  4688  00F8BE  43                 	db	67
  4689  00F8BF  43                 	db	67
  4690  00F8C0  3A                 	db	58
  4691  00F8C1  20                 	db	32
  4692  00F8C2  00                 	db	0
  4693  00F8C3  00                 	db	0
  4694  00F8C4  00                 	db	0
  4695  00F8C5  00                 	db	0
  4696  00F8C6  00                 	db	0
  4697  00F8C7  00                 	db	0
  4698  00F8C8  00                 	db	0
  4699  00F8C9  00                 	db	0
  4700  00F8CA  00                 	db	0
  4701  00F8CB  00                 	db	0
  4702  00F8CC  53                 	db	83
  4703  00F8CD  34                 	db	52
  4704  00F8CE  20                 	db	32
  4705  00F8CF  43                 	db	67
  4706  00F8D0  43                 	db	67
  4707  00F8D1  3A                 	db	58
  4708  00F8D2  20                 	db	32
  4709  00F8D3  00                 	db	0
  4710  00F8D4  00                 	db	0
  4711  00F8D5  00                 	db	0
  4712  00F8D6  00                 	db	0
  4713  00F8D7  00                 	db	0
  4714  00F8D8  00                 	db	0
  4715  00F8D9  00                 	db	0
  4716  00F8DA  00                 	db	0
  4717  00F8DB  00                 	db	0
  4718  00F8DC  00                 	db	0
  4719  00F8DD  53                 	db	83
  4720  00F8DE  35                 	db	53
  4721  00F8DF  20                 	db	32
  4722  00F8E0  43                 	db	67
  4723  00F8E1  43                 	db	67
  4724  00F8E2  3A                 	db	58
  4725  00F8E3  20                 	db	32
  4726  00F8E4  00                 	db	0
  4727  00F8E5  00                 	db	0
  4728  00F8E6  00                 	db	0
  4729  00F8E7  00                 	db	0
  4730  00F8E8  00                 	db	0
  4731  00F8E9  00                 	db	0
  4732  00F8EA  00                 	db	0
  4733  00F8EB  00                 	db	0
  4734  00F8EC  00                 	db	0
  4735  00F8ED  00                 	db	0
  4736  00F8EE  53                 	db	83
  4737  00F8EF  36                 	db	54
  4738  00F8F0  20                 	db	32
  4739  00F8F1  43                 	db	67
  4740  00F8F2  43                 	db	67
  4741  00F8F3  3A                 	db	58
  4742  00F8F4  20                 	db	32
  4743  00F8F5  00                 	db	0
  4744  00F8F6  00                 	db	0
  4745  00F8F7  00                 	db	0
  4746  00F8F8  00                 	db	0
  4747  00F8F9  00                 	db	0
  4748  00F8FA  00                 	db	0
  4749  00F8FB  00                 	db	0
  4750  00F8FC  00                 	db	0
  4751  00F8FD  00                 	db	0
  4752  00F8FE  00                 	db	0
  4753  00F8FF  53                 	db	83
  4754  00F900  37                 	db	55
  4755  00F901  20                 	db	32
  4756  00F902  43                 	db	67
  4757  00F903  43                 	db	67
  4758  00F904  3A                 	db	58
  4759  00F905  20                 	db	32
  4760  00F906  00                 	db	0
  4761  00F907  00                 	db	0
  4762  00F908  00                 	db	0
  4763  00F909  00                 	db	0
  4764  00F90A  00                 	db	0
  4765  00F90B  00                 	db	0
  4766  00F90C  00                 	db	0
  4767  00F90D  00                 	db	0
  4768  00F90E  00                 	db	0
  4769  00F90F  00                 	db	0
  4770  00F910  4A                 	db	74
  4771  00F911  58                 	db	88
  4772  00F912  20                 	db	32
  4773  00F913  43                 	db	67
  4774  00F914  43                 	db	67
  4775  00F915  3A                 	db	58
  4776  00F916  20                 	db	32
  4777  00F917  00                 	db	0
  4778  00F918  00                 	db	0
  4779  00F919  00                 	db	0
  4780  00F91A  00                 	db	0
  4781  00F91B  00                 	db	0
  4782  00F91C  00                 	db	0
  4783  00F91D  00                 	db	0
  4784  00F91E  00                 	db	0
  4785  00F91F  00                 	db	0
  4786  00F920  00                 	db	0
  4787  00F921  4A                 	db	74
  4788  00F922  59                 	db	89
  4789  00F923  20                 	db	32
  4790  00F924  43                 	db	67
  4791  00F925  43                 	db	67
  4792  00F926  3A                 	db	58
  4793  00F927  20                 	db	32
  4794  00F928  00                 	db	0
  4795  00F929  00                 	db	0
  4796  00F92A  00                 	db	0
  4797  00F92B  00                 	db	0
  4798  00F92C  00                 	db	0
  4799  00F92D  00                 	db	0
  4800  00F92E  00                 	db	0
  4801  00F92F  00                 	db	0
  4802  00F930  00                 	db	0
  4803  00F931  00                 	db	0
  4804  00F932  4D                 	db	77
  4805  00F933  61                 	db	97
  4806  00F934  69                 	db	105
  4807  00F935  6E                 	db	110
  4808  00F936  20                 	db	32
  4809  00F937  63                 	db	99
  4810  00F938  68                 	db	104
  4811  00F939  61                 	db	97
  4812  00F93A  6E                 	db	110
  4813  00F93B  6E                 	db	110
  4814  00F93C  65                 	db	101
  4815  00F93D  6C                 	db	108
  4816  00F93E  00                 	db	0
  4817  00F93F  00                 	db	0
  4818  00F940  00                 	db	0
  4819  00F941  00                 	db	0
  4820  00F942  00                 	db	0
  4821  00F943  44                 	db	68
  4822  00F944  72                 	db	114
  4823  00F945  75                 	db	117
  4824  00F946  6D                 	db	109
  4825  00F947  20                 	db	32
  4826  00F948  63                 	db	99
  4827  00F949  68                 	db	104
  4828  00F94A  61                 	db	97
  4829  00F94B  6E                 	db	110
  4830  00F94C  6E                 	db	110
  4831  00F94D  65                 	db	101
  4832  00F94E  6C                 	db	108
  4833  00F94F  00                 	db	0
  4834  00F950  00                 	db	0
  4835  00F951  00                 	db	0
  4836  00F952  00                 	db	0
  4837  00F953  00                 	db	0
  4838  00F954  53                 	db	83
  4839  00F955  61                 	db	97
  4840  00F956  76                 	db	118
  4841  00F957  65                 	db	101
  4842  00F958  20                 	db	32
  4843  00F959  73                 	db	115
  4844  00F95A  65                 	db	101
  4845  00F95B  74                 	db	116
  4846  00F95C  74                 	db	116
  4847  00F95D  69                 	db	105
  4848  00F95E  6E                 	db	110
  4849  00F95F  67                 	db	103
  4850  00F960  73                 	db	115
  4851  00F961  00                 	db	0
  4852  00F962  00                 	db	0
  4853  00F963  00                 	db	0
  4854  00F964  00                 	db	0
  4855  00F965  4C                 	db	76
  4856  00F966  6F                 	db	111
  4857  00F967  61                 	db	97
  4858  00F968  64                 	db	100
  4859  00F969  20                 	db	32
  4860  00F96A  73                 	db	115
  4861  00F96B  65                 	db	101
  4862  00F96C  74                 	db	116
  4863  00F96D  74                 	db	116
  4864  00F96E  69                 	db	105
  4865  00F96F  6E                 	db	110
  4866  00F970  67                 	db	103
  4867  00F971  73                 	db	115
  4868  00F972  00                 	db	0
  4869  00F973  00                 	db	0
  4870  00F974  00                 	db	0
  4871  00F975  00                 	db	0
  4872  00F976  52                 	db	82
  4873  00F977  65                 	db	101
  4874  00F978  73                 	db	115
  4875  00F979  74                 	db	116
  4876  00F97A  6F                 	db	111
  4877  00F97B  72                 	db	114
  4878  00F97C  65                 	db	101
  4879  00F97D  20                 	db	32
  4880  00F97E  64                 	db	100
  4881  00F97F  65                 	db	101
  4882  00F980  66                 	db	102
  4883  00F981  61                 	db	97
  4884  00F982  75                 	db	117
  4885  00F983  6C                 	db	108
  4886  00F984  74                 	db	116
  4887  00F985  73                 	db	115
  4888  00F986  00                 	db	0
  4889  00F987  45                 	db	69
  4890  00F988  6E                 	db	110
  4891  00F989  63                 	db	99
  4892  00F98A  6F                 	db	111
  4893  00F98B  64                 	db	100
  4894  00F98C  65                 	db	101
  4895  00F98D  72                 	db	114
  4896  00F98E  20                 	db	32
  4897  00F98F  50                 	db	80
  4898  00F990  6F                 	db	111
  4899  00F991  6C                 	db	108
  4900  00F992  61                 	db	97
  4901  00F993  72                 	db	114
  4902  00F994  69                 	db	105
  4903  00F995  74                 	db	116
  4904  00F996  79                 	db	121
  4905  00F997  00                 	db	0
  4906  00F998  45                 	db	69
  4907  00F999  78                 	db	120
  4908  00F99A  69                 	db	105
  4909  00F99B  74                 	db	116
  4910  00F99C  00                 	db	0
  4911  00F99D  00                 	db	0
  4912  00F99E  00                 	db	0
  4913  00F99F  00                 	db	0
  4914  00F9A0  00                 	db	0
  4915  00F9A1  00                 	db	0
  4916  00F9A2  00                 	db	0
  4917  00F9A3  00                 	db	0
  4918  00F9A4  00                 	db	0
  4919  00F9A5  00                 	db	0
  4920  00F9A6  00                 	db	0
  4921  00F9A7  00                 	db	0
  4922  00F9A8  00                 	db	0
  4923  00F9A9  53                 	db	83
  4924  00F9AA  6C                 	db	108
  4925  00F9AB  6F                 	db	111
  4926  00F9AC  74                 	db	116
  4927  00F9AD  20                 	db	32
  4928  00F9AE  31                 	db	49
  4929  00F9AF  00                 	db	0
  4930  00F9B0  00                 	db	0
  4931  00F9B1  00                 	db	0
  4932  00F9B2  00                 	db	0
  4933  00F9B3  00                 	db	0
  4934  00F9B4  00                 	db	0
  4935  00F9B5  00                 	db	0
  4936  00F9B6  00                 	db	0
  4937  00F9B7  00                 	db	0
  4938  00F9B8  00                 	db	0
  4939  00F9B9  00                 	db	0
  4940  00F9BA  53                 	db	83
  4941  00F9BB  6C                 	db	108
  4942  00F9BC  6F                 	db	111
  4943  00F9BD  74                 	db	116
  4944  00F9BE  20                 	db	32
  4945  00F9BF  32                 	db	50
  4946  00F9C0  00                 	db	0
  4947  00F9C1  00                 	db	0
  4948  00F9C2  00                 	db	0
  4949  00F9C3  00                 	db	0
  4950  00F9C4  00                 	db	0
  4951  00F9C5  00                 	db	0
  4952  00F9C6  00                 	db	0
  4953  00F9C7  00                 	db	0
  4954  00F9C8  00                 	db	0
  4955  00F9C9  00                 	db	0
  4956  00F9CA  00                 	db	0
  4957  00F9CB  53                 	db	83
  4958  00F9CC  6C                 	db	108
  4959  00F9CD  6F                 	db	111
  4960  00F9CE  74                 	db	116
  4961  00F9CF  20                 	db	32
  4962  00F9D0  33                 	db	51
  4963  00F9D1  00                 	db	0
  4964  00F9D2  00                 	db	0
  4965  00F9D3  00                 	db	0
  4966  00F9D4  00                 	db	0
  4967  00F9D5  00                 	db	0
  4968  00F9D6  00                 	db	0
  4969  00F9D7  00                 	db	0
  4970  00F9D8  00                 	db	0
  4971  00F9D9  00                 	db	0
  4972  00F9DA  00                 	db	0
  4973  00F9DB  00                 	db	0
  4974  00F9DC  53                 	db	83
  4975  00F9DD  6C                 	db	108
  4976  00F9DE  6F                 	db	111
  4977  00F9DF  74                 	db	116
  4978  00F9E0  20                 	db	32
  4979  00F9E1  34                 	db	52
  4980  00F9E2  00                 	db	0
  4981  00F9E3  00                 	db	0
  4982  00F9E4  00                 	db	0
  4983  00F9E5  00                 	db	0
  4984  00F9E6  00                 	db	0
  4985  00F9E7  00                 	db	0
  4986  00F9E8  00                 	db	0
  4987  00F9E9  00                 	db	0
  4988  00F9EA  00                 	db	0
  4989  00F9EB  00                 	db	0
  4990  00F9EC  00                 	db	0
  4991  00F9ED  45                 	db	69
  4992  00F9EE  78                 	db	120
  4993  00F9EF  69                 	db	105
  4994  00F9F0  74                 	db	116
  4995  00F9F1  00                 	db	0
  4996  00F9F2  00                 	db	0
  4997  00F9F3  00                 	db	0
  4998  00F9F4  00                 	db	0
  4999  00F9F5  00                 	db	0
  5000  00F9F6  00                 	db	0
  5001  00F9F7  00                 	db	0
  5002  00F9F8  00                 	db	0
  5003  00F9F9  00                 	db	0
  5004  00F9FA  00                 	db	0
  5005  00F9FB  00                 	db	0
  5006  00F9FC  00                 	db	0
  5007  00F9FD  00                 	db	0
  5008  00F9FE  43                 	db	67
  5009  00F9FF  57                 	db	87
  5010  00FA00  20                 	db	32
  5011  00FA01  49                 	db	73
  5012  00FA02  53                 	db	83
  5013  00FA03  20                 	db	32
  5014  00FA04  49                 	db	73
  5015  00FA05  4E                 	db	78
  5016  00FA06  43                 	db	67
  5017  00FA07  52                 	db	82
  5018  00FA08  45                 	db	69
  5019  00FA09  41                 	db	65
  5020  00FA0A  53                 	db	83
  5021  00FA0B  45                 	db	69
  5022  00FA0C  00                 	db	0
  5023  00FA0D  00                 	db	0
  5024  00FA0E  00                 	db	0
  5025  00FA0F  43                 	db	67
  5026  00FA10  43                 	db	67
  5027  00FA11  57                 	db	87
  5028  00FA12  20                 	db	32
  5029  00FA13  49                 	db	73
  5030  00FA14  53                 	db	83
  5031  00FA15  20                 	db	32
  5032  00FA16  49                 	db	73
  5033  00FA17  4E                 	db	78
  5034  00FA18  43                 	db	67
  5035  00FA19  52                 	db	82
  5036  00FA1A  45                 	db	69
  5037  00FA1B  41                 	db	65
  5038  00FA1C  53                 	db	83
  5039  00FA1D  45                 	db	69
  5040  00FA1E  00                 	db	0
  5041  00FA1F  00                 	db	0
  5042  00FA20  41                 	db	65
  5043  00FA21  72                 	db	114
  5044  00FA22  70                 	db	112
  5045  00FA23  65                 	db	101
  5046  00FA24  67                 	db	103
  5047  00FA25  67                 	db	103
  5048  00FA26  69                 	db	105
  5049  00FA27  6F                 	db	111
  5050  00FA28  20                 	db	32
  5051  00FA29  4F                 	db	79
  5052  00FA2A  46                 	db	70
  5053  00FA2B  46                 	db	70
  5054  00FA2C  2F                 	db	47
  5055  00FA2D  4F                 	db	79
  5056  00FA2E  4E                 	db	78
  5057  00FA2F  00                 	db	0
  5058  00FA30  00                 	db	0
  5059  00FA31  54                 	db	84
  5060  00FA32  65                 	db	101
  5061  00FA33  6D                 	db	109
  5062  00FA34  70                 	db	112
  5063  00FA35  6F                 	db	111
  5064  00FA36  00                 	db	0
  5065  00FA37  00                 	db	0
  5066  00FA38  00                 	db	0
  5067  00FA39  00                 	db	0
  5068  00FA3A  00                 	db	0
  5069  00FA3B  00                 	db	0
  5070  00FA3C  00                 	db	0
  5071  00FA3D  00                 	db	0
  5072  00FA3E  00                 	db	0
  5073  00FA3F  00                 	db	0
  5074  00FA40  00                 	db	0
  5075  00FA41  00                 	db	0
  5076  00FA42  4F                 	db	79
  5077  00FA43  63                 	db	99
  5078  00FA44  74                 	db	116
  5079  00FA45  61                 	db	97
  5080  00FA46  76                 	db	118
  5081  00FA47  65                 	db	101
  5082  00FA48  20                 	db	32
  5083  00FA49  52                 	db	82
  5084  00FA4A  61                 	db	97
  5085  00FA4B  6E                 	db	110
  5086  00FA4C  67                 	db	103
  5087  00FA4D  65                 	db	101
  5088  00FA4E  00                 	db	0
  5089  00FA4F  00                 	db	0
  5090  00FA50  00                 	db	0
  5091  00FA51  00                 	db	0
  5092  00FA52  00                 	db	0
  5093  00FA53  41                 	db	65
  5094  00FA54  72                 	db	114
  5095  00FA55  70                 	db	112
  5096  00FA56  65                 	db	101
  5097  00FA57  67                 	db	103
  5098  00FA58  67                 	db	103
  5099  00FA59  69                 	db	105
  5100  00FA5A  6F                 	db	111
  5101  00FA5B  20                 	db	32
  5102  00FA5C  54                 	db	84
  5103  00FA5D  79                 	db	121
  5104  00FA5E  70                 	db	112
  5105  00FA5F  65                 	db	101
  5106  00FA60  00                 	db	0
  5107  00FA61  00                 	db	0
  5108  00FA62  00                 	db	0
  5109  00FA63  00                 	db	0
  5110  00FA64  4E                 	db	78
  5111  00FA65  6F                 	db	111
  5112  00FA66  74                 	db	116
  5113  00FA67  65                 	db	101
  5114  00FA68  20                 	db	32
  5115  00FA69  4C                 	db	76
  5116  00FA6A  65                 	db	101
  5117  00FA6B  6E                 	db	110
  5118  00FA6C  67                 	db	103
  5119  00FA6D  74                 	db	116
  5120  00FA6E  68                 	db	104
  5121  00FA6F  00                 	db	0
  5122  00FA70  00                 	db	0
  5123  00FA71  00                 	db	0
  5124  00FA72  00                 	db	0
  5125  00FA73  00                 	db	0
  5126  00FA74  00                 	db	0
  5127  00FA75  4C                 	db	76
  5128  00FA76  61                 	db	97
  5129  00FA77  74                 	db	116
  5130  00FA78  63                 	db	99
  5131  00FA79  68                 	db	104
  5132  00FA7A  2F                 	db	47
  5133  00FA7B  41                 	db	65
  5134  00FA7C  75                 	db	117
  5135  00FA7D  74                 	db	116
  5136  00FA7E  6F                 	db	111
  5137  00FA7F  20                 	db	32
  5138  00FA80  4C                 	db	76
  5139  00FA81  61                 	db	97
  5140  00FA82  74                 	db	116
  5141  00FA83  63                 	db	99
  5142  00FA84  68                 	db	104
  5143  00FA85  00                 	db	0
  5144  00FA86  55                 	db	85
  5145  00FA87  6E                 	db	110
  5146  00FA88  2D                 	db	45
  5147  00FA89  6C                 	db	108
  5148  00FA8A  61                 	db	97
  5149  00FA8B  74                 	db	116
  5150  00FA8C  63                 	db	99
  5151  00FA8D  68                 	db	104
  5152  00FA8E  20                 	db	32
  5153  00FA8F  4D                 	db	77
  5154  00FA90  6F                 	db	111
  5155  00FA91  64                 	db	100
  5156  00FA92  65                 	db	101
  5157  00FA93  00                 	db	0
  5158  00FA94  00                 	db	0
  5159  00FA95  00                 	db	0
  5160  00FA96  00                 	db	0
  5161  00FA97  52                 	db	82
  5162  00FA98  61                 	db	97
  5163  00FA99  6E                 	db	110
  5164  00FA9A  64                 	db	100
  5165  00FA9B  6F                 	db	111
  5166  00FA9C  6D                 	db	109
  5167  00FA9D  69                 	db	105
  5168  00FA9E  7A                 	db	122
  5169  00FA9F  65                 	db	101
  5170  00FAA0  2F                 	db	47
  5171  00FAA1  53                 	db	83
  5172  00FAA2  6B                 	db	107
  5173  00FAA3  69                 	db	105
  5174  00FAA4  70                 	db	112
  5175  00FAA5  00                 	db	0
  5176  00FAA6  00                 	db	0
  5177  00FAA7  00                 	db	0
  5178  00FAA8  4C                 	db	76
  5179  00FAA9  61                 	db	97
  5180  00FAAA  73                 	db	115
  5181  00FAAB  74                 	db	116
  5182  00FAAC  20                 	db	32
  5183  00FAAD  4E                 	db	78
  5184  00FAAE  6F                 	db	111
  5185  00FAAF  74                 	db	116
  5186  00FAB0  65                 	db	101
  5187  00FAB1  20                 	db	32
  5188  00FAB2  4D                 	db	77
  5189  00FAB3  6F                 	db	111
  5190  00FAB4  64                 	db	100
  5191  00FAB5  65                 	db	101
  5192  00FAB6  00                 	db	0
  5193  00FAB7  00                 	db	0
  5194  00FAB8  00                 	db	0
  5195  00FAB9  41                 	db	65
  5196  00FABA  52                 	db	82
  5197  00FABB  50                 	db	80
  5198  00FABC  45                 	db	69
  5199  00FABD  47                 	db	71
  5200  00FABE  47                 	db	71
  5201  00FABF  49                 	db	73
  5202  00FAC0  41                 	db	65
  5203  00FAC1  54                 	db	84
  5204  00FAC2  4F                 	db	79
  5205  00FAC3  52                 	db	82
  5206  00FAC4  20                 	db	32
  5207  00FAC5  4F                 	db	79
  5208  00FAC6  46                 	db	70
  5209  00FAC7  46                 	db	70
  5210  00FAC8  00                 	db	0
  5211  00FAC9  00                 	db	0
  5212  00FACA  41                 	db	65
  5213  00FACB  52                 	db	82
  5214  00FACC  50                 	db	80
  5215  00FACD  45                 	db	69
  5216  00FACE  47                 	db	71
  5217  00FACF  47                 	db	71
  5218  00FAD0  49                 	db	73
  5219  00FAD1  41                 	db	65
  5220  00FAD2  54                 	db	84
  5221  00FAD3  4F                 	db	79
  5222  00FAD4  52                 	db	82
  5223  00FAD5  20                 	db	32
  5224  00FAD6  4F                 	db	79
  5225  00FAD7  4E                 	db	78
  5226  00FAD8  00                 	db	0
  5227  00FAD9  00                 	db	0
  5228  00FADA  00                 	db	0
  5229  00FADB  55                 	db	85
  5230  00FADC  50                 	db	80
  5231  00FADD  00                 	db	0
  5232  00FADE  00                 	db	0
  5233  00FADF  00                 	db	0
  5234  00FAE0  00                 	db	0
  5235  00FAE1  00                 	db	0
  5236  00FAE2  00                 	db	0
  5237  00FAE3  00                 	db	0
  5238  00FAE4  00                 	db	0
  5239  00FAE5  00                 	db	0
  5240  00FAE6  00                 	db	0
  5241  00FAE7  00                 	db	0
  5242  00FAE8  00                 	db	0
  5243  00FAE9  00                 	db	0
  5244  00FAEA  00                 	db	0
  5245  00FAEB  00                 	db	0
  5246  00FAEC  44                 	db	68
  5247  00FAED  4F                 	db	79
  5248  00FAEE  57                 	db	87
  5249  00FAEF  4E                 	db	78
  5250  00FAF0  00                 	db	0
  5251  00FAF1  00                 	db	0
  5252  00FAF2  00                 	db	0
  5253  00FAF3  00                 	db	0
  5254  00FAF4  00                 	db	0
  5255  00FAF5  00                 	db	0
  5256  00FAF6  00                 	db	0
  5257  00FAF7  00                 	db	0
  5258  00FAF8  00                 	db	0
  5259  00FAF9  00                 	db	0
  5260  00FAFA  00                 	db	0
  5261  00FAFB  00                 	db	0
  5262  00FAFC  00                 	db	0
  5263  00FAFD  55                 	db	85
  5264  00FAFE  50                 	db	80
  5265  00FAFF  2F                 	db	47
  5266  00FB00  44                 	db	68
  5267  00FB01  4F                 	db	79
  5268  00FB02  57                 	db	87
  5269  00FB03  4E                 	db	78
  5270  00FB04  00                 	db	0
  5271  00FB05  00                 	db	0
  5272  00FB06  00                 	db	0
  5273  00FB07  00                 	db	0
  5274  00FB08  00                 	db	0
  5275  00FB09  00                 	db	0
  5276  00FB0A  00                 	db	0
  5277  00FB0B  00                 	db	0
  5278  00FB0C  00                 	db	0
  5279  00FB0D  00                 	db	0
  5280  00FB0E  44                 	db	68
  5281  00FB0F  4F                 	db	79
  5282  00FB10  57                 	db	87
  5283  00FB11  4E                 	db	78
  5284  00FB12  2F                 	db	47
  5285  00FB13  55                 	db	85
  5286  00FB14  50                 	db	80
  5287  00FB15  00                 	db	0
  5288  00FB16  00                 	db	0
  5289  00FB17  00                 	db	0
  5290  00FB18  00                 	db	0
  5291  00FB19  00                 	db	0
  5292  00FB1A  00                 	db	0
  5293  00FB1B  00                 	db	0
  5294  00FB1C  00                 	db	0
  5295  00FB1D  00                 	db	0
  5296  00FB1E  00                 	db	0
  5297  00FB1F  53                 	db	83
  5298  00FB20  48                 	db	72
  5299  00FB21  55                 	db	85
  5300  00FB22  46                 	db	70
  5301  00FB23  46                 	db	70
  5302  00FB24  4C                 	db	76
  5303  00FB25  45                 	db	69
  5304  00FB26  00                 	db	0
  5305  00FB27  00                 	db	0
  5306  00FB28  00                 	db	0
  5307  00FB29  00                 	db	0
  5308  00FB2A  00                 	db	0
  5309  00FB2B  00                 	db	0
  5310  00FB2C  00                 	db	0
  5311  00FB2D  00                 	db	0
  5312  00FB2E  00                 	db	0
  5313  00FB2F  00                 	db	0
  5314  00FB30  52                 	db	82
  5315  00FB31  41                 	db	65
  5316  00FB32  4E                 	db	78
  5317  00FB33  44                 	db	68
  5318  00FB34  4F                 	db	79
  5319  00FB35  4D                 	db	77
  5320  00FB36  00                 	db	0
  5321  00FB37  00                 	db	0
  5322  00FB38  00                 	db	0
  5323  00FB39  00                 	db	0
  5324  00FB3A  00                 	db	0
  5325  00FB3B  00                 	db	0
  5326  00FB3C  00                 	db	0
  5327  00FB3D  00                 	db	0
  5328  00FB3E  00                 	db	0
  5329  00FB3F  00                 	db	0
  5330  00FB40  00                 	db	0
  5331  00FB41  41                 	db	65
  5332  00FB42  53                 	db	83
  5333  00FB43  20                 	db	32
  5334  00FB44  50                 	db	80
  5335  00FB45  52                 	db	82
  5336  00FB46  45                 	db	69
  5337  00FB47  53                 	db	83
  5338  00FB48  53                 	db	83
  5339  00FB49  45                 	db	69
  5340  00FB4A  44                 	db	68
  5341  00FB4B  00                 	db	0
  5342  00FB4C  00                 	db	0
  5343  00FB4D  00                 	db	0
  5344  00FB4E  00                 	db	0
  5345  00FB4F  00                 	db	0
  5346  00FB50  00                 	db	0
  5347  00FB51  00                 	db	0
  5348  00FB52  31                 	db	49
  5349  00FB53  2F                 	db	47
  5350  00FB54  34                 	db	52
  5351  00FB55  00                 	db	0
  5352  00FB56  00                 	db	0
  5353  00FB57  00                 	db	0
  5354  00FB58  00                 	db	0
  5355  00FB59  00                 	db	0
  5356  00FB5A  00                 	db	0
  5357  00FB5B  00                 	db	0
  5358  00FB5C  00                 	db	0
  5359  00FB5D  00                 	db	0
  5360  00FB5E  00                 	db	0
  5361  00FB5F  00                 	db	0
  5362  00FB60  00                 	db	0
  5363  00FB61  00                 	db	0
  5364  00FB62  00                 	db	0
  5365  00FB63  31                 	db	49
  5366  00FB64  2F                 	db	47
  5367  00FB65  34                 	db	52
  5368  00FB66  20                 	db	32
  5369  00FB67  44                 	db	68
  5370  00FB68  4F                 	db	79
  5371  00FB69  54                 	db	84
  5372  00FB6A  54                 	db	84
  5373  00FB6B  45                 	db	69
  5374  00FB6C  44                 	db	68
  5375  00FB6D  00                 	db	0
  5376  00FB6E  00                 	db	0
  5377  00FB6F  00                 	db	0
  5378  00FB70  00                 	db	0
  5379  00FB71  00                 	db	0
  5380  00FB72  00                 	db	0
  5381  00FB73  00                 	db	0
  5382  00FB74  31                 	db	49
  5383  00FB75  2F                 	db	47
  5384  00FB76  34                 	db	52
  5385  00FB77  20                 	db	32
  5386  00FB78  54                 	db	84
  5387  00FB79  52                 	db	82
  5388  00FB7A  49                 	db	73
  5389  00FB7B  50                 	db	80
  5390  00FB7C  4C                 	db	76
  5391  00FB7D  45                 	db	69
  5392  00FB7E  54                 	db	84
  5393  00FB7F  00                 	db	0
  5394  00FB80  00                 	db	0
  5395  00FB81  00                 	db	0
  5396  00FB82  00                 	db	0
  5397  00FB83  00                 	db	0
  5398  00FB84  00                 	db	0
  5399  00FB85  31                 	db	49
  5400  00FB86  2F                 	db	47
  5401  00FB87  38                 	db	56
  5402  00FB88  00                 	db	0
  5403  00FB89  00                 	db	0
  5404  00FB8A  00                 	db	0
  5405  00FB8B  00                 	db	0
  5406  00FB8C  00                 	db	0
  5407  00FB8D  00                 	db	0
  5408  00FB8E  00                 	db	0
  5409  00FB8F  00                 	db	0
  5410  00FB90  00                 	db	0
  5411  00FB91  00                 	db	0
  5412  00FB92  00                 	db	0
  5413  00FB93  00                 	db	0
  5414  00FB94  00                 	db	0
  5415  00FB95  00                 	db	0
  5416  00FB96  31                 	db	49
  5417  00FB97  2F                 	db	47
  5418  00FB98  38                 	db	56
  5419  00FB99  20                 	db	32
  5420  00FB9A  44                 	db	68
  5421  00FB9B  4F                 	db	79
  5422  00FB9C  54                 	db	84
  5423  00FB9D  54                 	db	84
  5424  00FB9E  45                 	db	69
  5425  00FB9F  44                 	db	68
  5426  00FBA0  00                 	db	0
  5427  00FBA1  00                 	db	0
  5428  00FBA2  00                 	db	0
  5429  00FBA3  00                 	db	0
  5430  00FBA4  00                 	db	0
  5431  00FBA5  00                 	db	0
  5432  00FBA6  00                 	db	0
  5433  00FBA7  31                 	db	49
  5434  00FBA8  2F                 	db	47
  5435  00FBA9  38                 	db	56
  5436  00FBAA  20                 	db	32
  5437  00FBAB  54                 	db	84
  5438  00FBAC  52                 	db	82
  5439  00FBAD  49                 	db	73
  5440  00FBAE  50                 	db	80
  5441  00FBAF  4C                 	db	76
  5442  00FBB0  45                 	db	69
  5443  00FBB1  54                 	db	84
  5444  00FBB2  00                 	db	0
  5445  00FBB3  00                 	db	0
  5446  00FBB4  00                 	db	0
  5447  00FBB5  00                 	db	0
  5448  00FBB6  00                 	db	0
  5449  00FBB7  00                 	db	0
  5450  00FBB8  31                 	db	49
  5451  00FBB9  2F                 	db	47
  5452  00FBBA  31                 	db	49
  5453  00FBBB  36                 	db	54
  5454  00FBBC  00                 	db	0
  5455  00FBBD  00                 	db	0
  5456  00FBBE  00                 	db	0
  5457  00FBBF  00                 	db	0
  5458  00FBC0  00                 	db	0
  5459  00FBC1  00                 	db	0
  5460  00FBC2  00                 	db	0
  5461  00FBC3  00                 	db	0
  5462  00FBC4  00                 	db	0
  5463  00FBC5  00                 	db	0
  5464  00FBC6  00                 	db	0
  5465  00FBC7  00                 	db	0
  5466  00FBC8  00                 	db	0
  5467  00FBC9  31                 	db	49
  5468  00FBCA  2F                 	db	47
  5469  00FBCB  31                 	db	49
  5470  00FBCC  36                 	db	54
  5471  00FBCD  20                 	db	32
  5472  00FBCE  44                 	db	68
  5473  00FBCF  4F                 	db	79
  5474  00FBD0  54                 	db	84
  5475  00FBD1  54                 	db	84
  5476  00FBD2  45                 	db	69
  5477  00FBD3  44                 	db	68
  5478  00FBD4  00                 	db	0
  5479  00FBD5  00                 	db	0
  5480  00FBD6  00                 	db	0
  5481  00FBD7  00                 	db	0
  5482  00FBD8  00                 	db	0
  5483  00FBD9  00                 	db	0
  5484  00FBDA  31                 	db	49
  5485  00FBDB  2F                 	db	47
  5486  00FBDC  31                 	db	49
  5487  00FBDD  36                 	db	54
  5488  00FBDE  20                 	db	32
  5489  00FBDF  54                 	db	84
  5490  00FBE0  52                 	db	82
  5491  00FBE1  49                 	db	73
  5492  00FBE2  50                 	db	80
  5493  00FBE3  4C                 	db	76
  5494  00FBE4  45                 	db	69
  5495  00FBE5  54                 	db	84
  5496  00FBE6  00                 	db	0
  5497  00FBE7  00                 	db	0
  5498  00FBE8  00                 	db	0
  5499  00FBE9  00                 	db	0
  5500  00FBEA  00                 	db	0
  5501  00FBEB  31                 	db	49
  5502  00FBEC  2F                 	db	47
  5503  00FBED  33                 	db	51
  5504  00FBEE  32                 	db	50
  5505  00FBEF  00                 	db	0
  5506  00FBF0  00                 	db	0
  5507  00FBF1  00                 	db	0
  5508  00FBF2  00                 	db	0
  5509  00FBF3  00                 	db	0
  5510  00FBF4  00                 	db	0
  5511  00FBF5  00                 	db	0
  5512  00FBF6  00                 	db	0
  5513  00FBF7  00                 	db	0
  5514  00FBF8  00                 	db	0
  5515  00FBF9  00                 	db	0
  5516  00FBFA  00                 	db	0
  5517  00FBFB  00                 	db	0
  5518  00FBFC  31                 	db	49
  5519  00FBFD  2F                 	db	47
  5520  00FBFE  33                 	db	51
  5521  00FBFF  32                 	db	50
  5522  00FC00  20                 	db	32
  5523  00FC01  44                 	db	68
  5524  00FC02  4F                 	db	79
  5525  00FC03  54                 	db	84
  5526  00FC04  54                 	db	84
  5527  00FC05  45                 	db	69
  5528  00FC06  44                 	db	68
  5529  00FC07  00                 	db	0
  5530  00FC08  00                 	db	0
  5531  00FC09  00                 	db	0
  5532  00FC0A  00                 	db	0
  5533  00FC0B  00                 	db	0
  5534  00FC0C  00                 	db	0
  5535  00FC0D  31                 	db	49
  5536  00FC0E  2F                 	db	47
  5537  00FC0F  33                 	db	51
  5538  00FC10  32                 	db	50
  5539  00FC11  20                 	db	32
  5540  00FC12  54                 	db	84
  5541  00FC13  52                 	db	82
  5542  00FC14  49                 	db	73
  5543  00FC15  50                 	db	80
  5544  00FC16  4C                 	db	76
  5545  00FC17  45                 	db	69
  5546  00FC18  54                 	db	84
  5547  00FC19  00                 	db	0
  5548  00FC1A  00                 	db	0
  5549  00FC1B  00                 	db	0
  5550  00FC1C  00                 	db	0
  5551  00FC1D  00                 	db	0
  5552  00FC1E  53                 	db	83
  5553  00FC1F  45                 	db	69
  5554  00FC20  54                 	db	84
  5555  00FC21  2F                 	db	47
  5556  00FC22  43                 	db	67
  5557  00FC23  4C                 	db	76
  5558  00FC24  45                 	db	69
  5559  00FC25  41                 	db	65
  5560  00FC26  52                 	db	82
  5561  00FC27  20                 	db	32
  5562  00FC28  4C                 	db	76
  5563  00FC29  41                 	db	65
  5564  00FC2A  54                 	db	84
  5565  00FC2B  43                 	db	67
  5566  00FC2C  48                 	db	72
  5567  00FC2D  00                 	db	0
  5568  00FC2E  00                 	db	0
  5569  00FC2F  41                 	db	65
  5570  00FC30  55                 	db	85
  5571  00FC31  54                 	db	84
  5572  00FC32  4F                 	db	79
  5573  00FC33  20                 	db	32
  5574  00FC34  4C                 	db	76
  5575  00FC35  41                 	db	65
  5576  00FC36  54                 	db	84
  5577  00FC37  43                 	db	67
  5578  00FC38  48                 	db	72
  5579  00FC39  00                 	db	0
  5580  00FC3A  00                 	db	0
  5581  00FC3B  00                 	db	0
  5582  00FC3C  00                 	db	0
  5583  00FC3D  00                 	db	0
  5584  00FC3E  00                 	db	0
  5585  00FC3F  00                 	db	0
  5586  00FC40  55                 	db	85
  5587  00FC41  6E                 	db	110
  5588  00FC42  2D                 	db	45
  5589  00FC43  4C                 	db	76
  5590  00FC44  61                 	db	97
  5591  00FC45  74                 	db	116
  5592  00FC46  63                 	db	99
  5593  00FC47  68                 	db	104
  5594  00FC48  20                 	db	32
  5595  00FC49  4D                 	db	77
  5596  00FC4A  6F                 	db	111
  5597  00FC4B  64                 	db	100
  5598  00FC4C  65                 	db	101
  5599  00FC4D  00                 	db	0
  5600  00FC4E  00                 	db	0
  5601  00FC4F  00                 	db	0
  5602  00FC50  00                 	db	0
  5603  00FC51  55                 	db	85
  5604  00FC52  4E                 	db	78
  5605  00FC53  4C                 	db	76
  5606  00FC54  41                 	db	65
  5607  00FC55  54                 	db	84
  5608  00FC56  43                 	db	67
  5609  00FC57  48                 	db	72
  5610  00FC58  20                 	db	32
  5611  00FC59  41                 	db	65
  5612  00FC5A  4C                 	db	76
  5613  00FC5B  4C                 	db	76
  5614  00FC5C  00                 	db	0
  5615  00FC5D  00                 	db	0
  5616  00FC5E  00                 	db	0
  5617  00FC5F  00                 	db	0
  5618  00FC60  00                 	db	0
  5619  00FC61  00                 	db	0
  5620  00FC62  4F                 	db	79
  5621  00FC63  4E                 	db	78
  5622  00FC64  45                 	db	69
  5623  00FC65  20                 	db	32
  5624  00FC66  41                 	db	65
  5625  00FC67  54                 	db	84
  5626  00FC68  20                 	db	32
  5627  00FC69  41                 	db	65
  5628  00FC6A  20                 	db	32
  5629  00FC6B  54                 	db	84
  5630  00FC6C  49                 	db	73
  5631  00FC6D  4D                 	db	77
  5632  00FC6E  45                 	db	69
  5633  00FC6F  00                 	db	0
  5634  00FC70  00                 	db	0
  5635  00FC71  00                 	db	0
  5636  00FC72  00                 	db	0
  5637  00FC73  52                 	db	82
  5638  00FC74  61                 	db	97
  5639  00FC75  6E                 	db	110
  5640  00FC76  64                 	db	100
  5641  00FC77  6F                 	db	111
  5642  00FC78  6D                 	db	109
  5643  00FC79  69                 	db	105
  5644  00FC7A  7A                 	db	122
  5645  00FC7B  65                 	db	101
  5646  00FC7C  00                 	db	0
  5647  00FC7D  00                 	db	0
  5648  00FC7E  00                 	db	0
  5649  00FC7F  00                 	db	0
  5650  00FC80  00                 	db	0
  5651  00FC81  00                 	db	0
  5652  00FC82  00                 	db	0
  5653  00FC83  00                 	db	0
  5654  00FC84  53                 	db	83
  5655  00FC85  6B                 	db	107
  5656  00FC86  69                 	db	105
  5657  00FC87  70                 	db	112
  5658  00FC88  20                 	db	32
  5659  00FC89  46                 	db	70
  5660  00FC8A  69                 	db	105
  5661  00FC8B  72                 	db	114
  5662  00FC8C  73                 	db	115
  5663  00FC8D  74                 	db	116
  5664  00FC8E  2F                 	db	47
  5665  00FC8F  4C                 	db	76
  5666  00FC90  61                 	db	97
  5667  00FC91  73                 	db	115
  5668  00FC92  74                 	db	116
  5669  00FC93  00                 	db	0
  5670  00FC94  00                 	db	0
  5671  00FC95  52                 	db	82
  5672  00FC96  41                 	db	65
  5673  00FC97  4E                 	db	78
  5674  00FC98  44                 	db	68
  5675  00FC99  4F                 	db	79
  5676  00FC9A  4D                 	db	77
  5677  00FC9B  49                 	db	73
  5678  00FC9C  5A                 	db	90
  5679  00FC9D  45                 	db	69
  5680  00FC9E  20                 	db	32
  5681  00FC9F  41                 	db	65
  5682  00FCA0  55                 	db	85
  5683  00FCA1  54                 	db	84
  5684  00FCA2  4F                 	db	79
  5685  00FCA3  00                 	db	0
  5686  00FCA4  00                 	db	0
  5687  00FCA5  00                 	db	0
  5688  00FCA6  52                 	db	82
  5689  00FCA7  41                 	db	65
  5690  00FCA8  4E                 	db	78
  5691  00FCA9  44                 	db	68
  5692  00FCAA  4F                 	db	79
  5693  00FCAB  4D                 	db	77
  5694  00FCAC  49                 	db	73
  5695  00FCAD  5A                 	db	90
  5696  00FCAE  45                 	db	69
  5697  00FCAF  20                 	db	32
  5698  00FCB0  4F                 	db	79
  5699  00FCB1  4E                 	db	78
  5700  00FCB2  43                 	db	67
  5701  00FCB3  45                 	db	69
  5702  00FCB4  00                 	db	0
  5703  00FCB5  00                 	db	0
  5704  00FCB6  00                 	db	0
  5705  00FCB7  4B                 	db	75
  5706  00FCB8  65                 	db	101
  5707  00FCB9  79                 	db	121
  5708  00FCBA  20                 	db	32
  5709  00FCBB  70                 	db	112
  5710  00FCBC  72                 	db	114
  5711  00FCBD  65                 	db	101
  5712  00FCBE  73                 	db	115
  5713  00FCBF  73                 	db	115
  5714  00FCC0  00                 	db	0
  5715  00FCC1  00                 	db	0
  5716  00FCC2  00                 	db	0
  5717  00FCC3  00                 	db	0
  5718  00FCC4  00                 	db	0
  5719  00FCC5  00                 	db	0
  5720  00FCC6  00                 	db	0
  5721  00FCC7  00                 	db	0
  5722  00FCC8  4B                 	db	75
  5723  00FCC9  65                 	db	101
  5724  00FCCA  79                 	db	121
  5725  00FCCB  20                 	db	32
  5726  00FCCC  72                 	db	114
  5727  00FCCD  65                 	db	101
  5728  00FCCE  6C                 	db	108
  5729  00FCCF  65                 	db	101
  5730  00FCD0  61                 	db	97
  5731  00FCD1  73                 	db	115
  5732  00FCD2  65                 	db	101
  5733  00FCD3  00                 	db	0
  5734  00FCD4  00                 	db	0
  5735  00FCD5  00                 	db	0
  5736  00FCD6  00                 	db	0
  5737  00FCD7  00                 	db	0
  5738  00FCD8  00                 	db	0
  5739  00FCD9  54                 	db	84
  5740  00FCDA  72                 	db	114
  5741  00FCDB  61                 	db	97
  5742  00FCDC  6E                 	db	110
  5743  00FCDD  73                 	db	115
  5744  00FCDE  70                 	db	112
  5745  00FCDF  6F                 	db	111
  5746  00FCE0  73                 	db	115
  5747  00FCE1  65                 	db	101
  5748  00FCE2  00                 	db	0
  5749  00FCE3  00                 	db	0
  5750  00FCE4  00                 	db	0
  5751  00FCE5  00                 	db	0
  5752  00FCE6  00                 	db	0
  5753  00FCE7  00                 	db	0
  5754  00FCE8  00                 	db	0
  5755  00FCE9  00                 	db	0
  5756  00FCEA  52                 	db	82
  5757  00FCEB  65                 	db	101
  5758  00FCEC  73                 	db	115
  5759  00FCED  65                 	db	101
  5760  00FCEE  74                 	db	116
  5761  00FCEF  00                 	db	0
  5762  00FCF0  00                 	db	0
  5763  00FCF1  00                 	db	0
  5764  00FCF2  00                 	db	0
  5765  00FCF3  00                 	db	0
  5766  00FCF4  00                 	db	0
  5767  00FCF5  00                 	db	0
  5768  00FCF6  00                 	db	0
  5769  00FCF7  00                 	db	0
  5770  00FCF8  00                 	db	0
  5771  00FCF9  00                 	db	0
  5772  00FCFA  00                 	db	0
  5773  00FCFB                     __end_of_LCD_STRINGS:
  5774                           	opt stack 0
  5775  00FCFB                     _locrian_key:
  5776                           	opt stack 0
  5777  00FCFB  0B                 	db	11
  5778  00FCFC  01                 	db	1
  5779  00FCFD  03                 	db	3
  5780  00FCFE  05                 	db	5
  5781  00FCFF  06                 	db	6
  5782  00FD00  08                 	db	8
  5783  00FD01  0A                 	db	10
  5784  00FD02  0C                 	db	12
  5785  00FD03  0D                 	db	13
  5786  00FD04  0F                 	db	15
  5787  00FD05  11                 	db	17
  5788  00FD06  12                 	db	18
  5789  00FD07  14                 	db	20
  5790  00FD08  16                 	db	22
  5791  00FD09  18                 	db	24
  5792  00FD0A                     __end_of_locrian_key:
  5793                           	opt stack 0
  5794  00FD0A                     _aeolian_key:
  5795                           	opt stack 0
  5796  00FD0A  09                 	db	9
  5797  00FD0B  02                 	db	2
  5798  00FD0C  03                 	db	3
  5799  00FD0D  05                 	db	5
  5800  00FD0E  07                 	db	7
  5801  00FD0F  08                 	db	8
  5802  00FD10  0A                 	db	10
  5803  00FD11  0C                 	db	12
  5804  00FD12  0E                 	db	14
  5805  00FD13  0F                 	db	15
  5806  00FD14  11                 	db	17
  5807  00FD15  13                 	db	19
  5808  00FD16  14                 	db	20
  5809  00FD17  16                 	db	22
  5810  00FD18  18                 	db	24
  5811  00FD19                     __end_of_aeolian_key:
  5812                           	opt stack 0
  5813  00FD19                     _mixolydian_key:
  5814                           	opt stack 0
  5815  00FD19  07                 	db	7
  5816  00FD1A  02                 	db	2
  5817  00FD1B  04                 	db	4
  5818  00FD1C  05                 	db	5
  5819  00FD1D  07                 	db	7
  5820  00FD1E  09                 	db	9
  5821  00FD1F  0A                 	db	10
  5822  00FD20  0C                 	db	12
  5823  00FD21  0E                 	db	14
  5824  00FD22  10                 	db	16
  5825  00FD23  11                 	db	17
  5826  00FD24  13                 	db	19
  5827  00FD25  15                 	db	21
  5828  00FD26  16                 	db	22
  5829  00FD27  18                 	db	24
  5830  00FD28                     __end_of_mixolydian_key:
  5831                           	opt stack 0
  5832  00FD28                     _lydian_key:
  5833                           	opt stack 0
  5834  00FD28  05                 	db	5
  5835  00FD29  02                 	db	2
  5836  00FD2A  04                 	db	4
  5837  00FD2B  06                 	db	6
  5838  00FD2C  07                 	db	7
  5839  00FD2D  09                 	db	9
  5840  00FD2E  0B                 	db	11
  5841  00FD2F  0C                 	db	12
  5842  00FD30  0E                 	db	14
  5843  00FD31  10                 	db	16
  5844  00FD32  12                 	db	18
  5845  00FD33  13                 	db	19
  5846  00FD34  15                 	db	21
  5847  00FD35  17                 	db	23
  5848  00FD36  18                 	db	24
  5849  00FD37                     __end_of_lydian_key:
  5850                           	opt stack 0
  5851  00FD37                     _phrygian_key:
  5852                           	opt stack 0
  5853  00FD37  04                 	db	4
  5854  00FD38  01                 	db	1
  5855  00FD39  03                 	db	3
  5856  00FD3A  05                 	db	5
  5857  00FD3B  07                 	db	7
  5858  00FD3C  08                 	db	8
  5859  00FD3D  0A                 	db	10
  5860  00FD3E  0C                 	db	12
  5861  00FD3F  0D                 	db	13
  5862  00FD40  0F                 	db	15
  5863  00FD41  11                 	db	17
  5864  00FD42  13                 	db	19
  5865  00FD43  14                 	db	20
  5866  00FD44  16                 	db	22
  5867  00FD45  18                 	db	24
  5868  00FD46                     __end_of_phrygian_key:
  5869                           	opt stack 0
  5870  00FD46                     _dorian_key:
  5871                           	opt stack 0
  5872  00FD46  02                 	db	2
  5873  00FD47  02                 	db	2
  5874  00FD48  03                 	db	3
  5875  00FD49  05                 	db	5
  5876  00FD4A  07                 	db	7
  5877  00FD4B  09                 	db	9
  5878  00FD4C  0A                 	db	10
  5879  00FD4D  0C                 	db	12
  5880  00FD4E  0E                 	db	14
  5881  00FD4F  0F                 	db	15
  5882  00FD50  11                 	db	17
  5883  00FD51  13                 	db	19
  5884  00FD52  15                 	db	21
  5885  00FD53  16                 	db	22
  5886  00FD54  18                 	db	24
  5887  00FD55                     __end_of_dorian_key:
  5888                           	opt stack 0
  5889  00FD55                     _ionian_key:
  5890                           	opt stack 0
  5891  00FD55  00                 	db	0
  5892  00FD56  02                 	db	2
  5893  00FD57  04                 	db	4
  5894  00FD58  05                 	db	5
  5895  00FD59  07                 	db	7
  5896  00FD5A  09                 	db	9
  5897  00FD5B  0B                 	db	11
  5898  00FD5C  0C                 	db	12
  5899  00FD5D  0E                 	db	14
  5900  00FD5E  10                 	db	16
  5901  00FD5F  11                 	db	17
  5902  00FD60  13                 	db	19
  5903  00FD61  15                 	db	21
  5904  00FD62  17                 	db	23
  5905  00FD63  18                 	db	24
  5906  00FD64                     __end_of_ionian_key:
  5907                           	opt stack 0
  5908  0000                     _TMR0	set	4054
  5909  0000                     _EECON2	set	4007
  5910  0000                     _INTCONbits	set	4082
  5911  0000                     _EEDATA	set	4008
  5912  0000                     _EEADR	set	4009
  5913  0000                     _EEADRH	set	4010
  5914  0000                     _EECON1bits	set	4006
  5915  0000                     _SPBRG	set	4015
  5916  0000                     _TMR2	set	4044
  5917  0000                     _T2CON	set	4042
  5918  0000                     _T0CON	set	4053
  5919  0000                     _PORTE	set	3972
  5920  0000                     _PORTC	set	3970
  5921  0000                     _PORTB	set	3969
  5922  0000                     _TRISE	set	3990
  5923  0000                     _TRISD	set	3989
  5924  0000                     _TRISC	set	3988
  5925  0000                     _TRISB	set	3987
  5926  0000                     _TRISA	set	3986
  5927  0000                     _PORTD	set	3971
  5928  0000                     _TXREG	set	4013
  5929  0000                     _ADRESL	set	4035
  5930  0000                     _ADRESH	set	4036
  5931  0000                     _PORTA	set	3968
  5932  0000                     _ADCON2	set	4032
  5933  0000                     _ADCON1	set	4033
  5934  0000                     _ADCON0	set	4034
  5935  0000                     _CMCON	set	4020
  5936  0000                     _TMR0IF	set	32658
  5937  0000                     _RB0	set	31752
  5938  0000                     _TMR2IF	set	31985
  5939  0000                     _RC4	set	31764
  5940  0000                     _RC5	set	31765
  5941  0000                     _RB1	set	31753
  5942  0000                     _GIE	set	32663
  5943  0000                     _PEIE	set	32662
  5944  0000                     _BRGH	set	32098
  5945  0000                     _CREN	set	32092
  5946  0000                     _SPEN	set	32095
  5947  0000                     _SYNC	set	32100
  5948  0000                     _TXEN	set	32101
  5949  0000                     _TMR2IE	set	31977
  5950  0000                     _TMR2ON	set	32338
  5951  0000                     _TMR0IE	set	32661
  5952  0000                     _PSA	set	32427
  5953  0000                     _T0CS	set	32429
  5954  0000                     _T08BIT	set	32430
  5955  0000                     _INT0IE	set	32660
  5956  0000                     _INT0IF	set	32657
  5957  0000                     _INTEDG0	set	32654
  5958  0000                     _RBIE	set	32659
  5959  0000                     _RBIF	set	32656
  5960  0000                     _IPEN	set	32391
  5961  0000                     _RC2	set	31762
  5962  0000                     _RC1	set	31761
  5963  0000                     _RC0	set	31760
  5964  0000                     _RC3	set	31763
  5965  0000                     _TMR0ON	set	32431
  5966  0000                     _RB4	set	31756
  5967  0000                     _RB5	set	31757
  5968  0000                     _RE2	set	31778
  5969  0000                     _RB2	set	31754
  5970  0000                     _RA5	set	31749
  5971  0000                     _TXIF	set	31988
  5972  0000                     _GO_nDONE	set	32273
  5973  0000                     _ADON	set	32272
  5974  0000                     _RE1	set	31777
  5975  0000                     _RE0	set	31776
  5976  0000                     _RD7	set	31775
  5977  0000                     _RD6	set	31774
  5978  0000                     _RD5	set	31773
  5979  0000                     _RD4	set	31772
  5980  00FD64                     STR_10:
  5981  00FD64  20                 	db	32
  5982  00FD65  20                 	db	32
  5983  00FD66  20                 	db	32
  5984  00FD67  20                 	db	32
  5985  00FD68  20                 	db	32
  5986  00FD69  20                 	db	32
  5987  00FD6A  20                 	db	32
  5988  00FD6B  20                 	db	32
  5989  00FD6C  20                 	db	32
  5990  00FD6D  20                 	db	32
  5991  00FD6E  20                 	db	32
  5992  00FD6F  20                 	db	32
  5993  00FD70  20                 	db	32
  5994  00FD71  20                 	db	32
  5995  00FD72  20                 	db	32
  5996  00FD73  20                 	db	32
  5997  00FD74  00                 	db	0
  5998  00FD75                     STR_22:
  5999  00FD75  53                 	db	83	;'S'
  6000  00FD76  65                 	db	101	;'e'
  6001  00FD77  74                 	db	116	;'t'
  6002  00FD78  74                 	db	116	;'t'
  6003  00FD79  69                 	db	105	;'i'
  6004  00FD7A  6E                 	db	110	;'n'
  6005  00FD7B  67                 	db	103	;'g'
  6006  00FD7C  73                 	db	115	;'s'
  6007  00FD7D  20                 	db	32
  6008  00FD7E  4C                 	db	76	;'L'
  6009  00FD7F  6F                 	db	111	;'o'
  6010  00FD80  61                 	db	97	;'a'
  6011  00FD81  64                 	db	100	;'d'
  6012  00FD82  65                 	db	101	;'e'
  6013  00FD83  64                 	db	100	;'d'
  6014  00FD84  21                 	db	33
  6015  00FD85  00                 	db	0
  6016  00FD86                     STR_37:
  6017  00FD86  52                 	db	82	;'R'
  6018  00FD87  65                 	db	101	;'e'
  6019  00FD88  73                 	db	115	;'s'
  6020  00FD89  74                 	db	116	;'t'
  6021  00FD8A  6F                 	db	111	;'o'
  6022  00FD8B  72                 	db	114	;'r'
  6023  00FD8C  65                 	db	101	;'e'
  6024  00FD8D  20                 	db	32
  6025  00FD8E  53                 	db	83	;'S'
  6026  00FD8F  65                 	db	101	;'e'
  6027  00FD90  74                 	db	116	;'t'
  6028  00FD91  74                 	db	116	;'t'
  6029  00FD92  69                 	db	105	;'i'
  6030  00FD93  6E                 	db	110	;'n'
  6031  00FD94  67                 	db	103	;'g'
  6032  00FD95  21                 	db	33
  6033  00FD96  00                 	db	0
  6034  00FD97                     STR_33:
  6035  00FD97  53                 	db	83	;'S'
  6036  00FD98  65                 	db	101	;'e'
  6037  00FD99  74                 	db	116	;'t'
  6038  00FD9A  20                 	db	32
  6039  00FD9B  4A                 	db	74	;'J'
  6040  00FD9C  6F                 	db	111	;'o'
  6041  00FD9D  79                 	db	121	;'y'
  6042  00FD9E  73                 	db	115	;'s'
  6043  00FD9F  74                 	db	116	;'t'
  6044  00FDA0  69                 	db	105	;'i'
  6045  00FDA1  63                 	db	99	;'c'
  6046  00FDA2  6B                 	db	107	;'k'
  6047  00FDA3  20                 	db	32
  6048  00FDA4  43                 	db	67	;'C'
  6049  00FDA5  43                 	db	67	;'C'
  6050  00FDA6  23                 	db	35
  6051  00FDA7  00                 	db	0
  6052  00FDA8                     STR_30:
  6053  00FDA8  50                 	db	80	;'P'
  6054  00FDA9  6F                 	db	111	;'o'
  6055  00FDAA  74                 	db	116	;'t'
  6056  00FDAB  73                 	db	115	;'s'
  6057  00FDAC  20                 	db	32
  6058  00FDAD  52                 	db	82	;'R'
  6059  00FDAE  65                 	db	101	;'e'
  6060  00FDAF  73                 	db	115	;'s'
  6061  00FDB0  6F                 	db	111	;'o'
  6062  00FDB1  6C                 	db	108	;'l'
  6063  00FDB2  75                 	db	117	;'u'
  6064  00FDB3  74                 	db	116	;'t'
  6065  00FDB4  69                 	db	105	;'i'
  6066  00FDB5  6F                 	db	111	;'o'
  6067  00FDB6  6E                 	db	110	;'n'
  6068  00FDB7  3A                 	db	58	;':'
  6069  00FDB8  00                 	db	0
  6070  00FDB9                     STR_46:
  6071  00FDB9  53                 	db	83	;'S'
  6072  00FDBA  65                 	db	101	;'e'
  6073  00FDBB  6C                 	db	108	;'l'
  6074  00FDBC  65                 	db	101	;'e'
  6075  00FDBD  63                 	db	99	;'c'
  6076  00FDBE  74                 	db	116	;'t'
  6077  00FDBF  20                 	db	32
  6078  00FDC0  41                 	db	65	;'A'
  6079  00FDC1  72                 	db	114	;'r'
  6080  00FDC2  70                 	db	112	;'p'
  6081  00FDC3  65                 	db	101	;'e'
  6082  00FDC4  67                 	db	103	;'g'
  6083  00FDC5  67                 	db	103	;'g'
  6084  00FDC6  69                 	db	105	;'i'
  6085  00FDC7  6F                 	db	111	;'o'
  6086  00FDC8  3A                 	db	58	;':'
  6087  00FDC9  00                 	db	0
  6088  00FDCA                     STR_28:
  6089  00FDCA  53                 	db	83	;'S'
  6090  00FDCB  65                 	db	101	;'e'
  6091  00FDCC  74                 	db	116	;'t'
  6092  00FDCD  20                 	db	32
  6093  00FDCE  4E                 	db	78	;'N'
  6094  00FDCF  6F                 	db	111	;'o'
  6095  00FDD0  74                 	db	116	;'t'
  6096  00FDD1  65                 	db	101	;'e'
  6097  00FDD2  20                 	db	32
  6098  00FDD3  4E                 	db	78	;'N'
  6099  00FDD4  75                 	db	117	;'u'
  6100  00FDD5  6D                 	db	109	;'m'
  6101  00FDD6  62                 	db	98	;'b'
  6102  00FDD7  65                 	db	101	;'e'
  6103  00FDD8  72                 	db	114	;'r'
  6104  00FDD9  3A                 	db	58	;':'
  6105  00FDDA  00                 	db	0
  6106  00FDDB                     STR_51:
  6107  00FDDB  41                 	db	65	;'A'
  6108  00FDDC  75                 	db	117	;'u'
  6109  00FDDD  74                 	db	116	;'t'
  6110  00FDDE  6F                 	db	111	;'o'
  6111  00FDDF  4C                 	db	76	;'L'
  6112  00FDE0  61                 	db	97	;'a'
  6113  00FDE1  74                 	db	116	;'t'
  6114  00FDE2  63                 	db	99	;'c'
  6115  00FDE3  68                 	db	104	;'h'
  6116  00FDE4  20                 	db	32
  6117  00FDE5  4F                 	db	79	;'O'
  6118  00FDE6  4E                 	db	78	;'N'
  6119  00FDE7  2F                 	db	47
  6120  00FDE8  4F                 	db	79	;'O'
  6121  00FDE9  46                 	db	70	;'F'
  6122  00FDEA  46                 	db	70	;'F'
  6123  00FDEB  00                 	db	0
  6124  00FDEC                     STR_39:
  6125  00FDEC  45                 	db	69	;'E'
  6126  00FDED  6E                 	db	110	;'n'
  6127  00FDEE  63                 	db	99	;'c'
  6128  00FDEF  6F                 	db	111	;'o'
  6129  00FDF0  64                 	db	100	;'d'
  6130  00FDF1  65                 	db	101	;'e'
  6131  00FDF2  72                 	db	114	;'r'
  6132  00FDF3  20                 	db	32
  6133  00FDF4  50                 	db	80	;'P'
  6134  00FDF5  6F                 	db	111	;'o'
  6135  00FDF6  6C                 	db	108	;'l'
  6136  00FDF7  61                 	db	97	;'a'
  6137  00FDF8  72                 	db	114	;'r'
  6138  00FDF9  69                 	db	105	;'i'
  6139  00FDFA  74                 	db	116	;'t'
  6140  00FDFB  79                 	db	121	;'y'
  6141  00FDFC  00                 	db	0
  6142  00FDFD                     STR_21:
  6143  00FDFD  53                 	db	83	;'S'
  6144  00FDFE  65                 	db	101	;'e'
  6145  00FDFF  74                 	db	116	;'t'
  6146  00FE00  74                 	db	116	;'t'
  6147  00FE01  69                 	db	105	;'i'
  6148  00FE02  6E                 	db	110	;'n'
  6149  00FE03  67                 	db	103	;'g'
  6150  00FE04  73                 	db	115	;'s'
  6151  00FE05  20                 	db	32
  6152  00FE06  53                 	db	83	;'S'
  6153  00FE07  61                 	db	97	;'a'
  6154  00FE08  76                 	db	118	;'v'
  6155  00FE09  65                 	db	101	;'e'
  6156  00FE0A  64                 	db	100	;'d'
  6157  00FE0B  21                 	db	33
  6158  00FE0C  00                 	db	0
  6159  00FE0D                     STR_74:
  6160  00FE0D  4C                 	db	76	;'L'
  6161  00FE0E  61                 	db	97	;'a'
  6162  00FE0F  73                 	db	115	;'s'
  6163  00FE10  74                 	db	116	;'t'
  6164  00FE11  20                 	db	32
  6165  00FE12  4E                 	db	78	;'N'
  6166  00FE13  6F                 	db	111	;'o'
  6167  00FE14  74                 	db	116	;'t'
  6168  00FE15  65                 	db	101	;'e'
  6169  00FE16  20                 	db	32
  6170  00FE17  4D                 	db	77	;'M'
  6171  00FE18  6F                 	db	111	;'o'
  6172  00FE19  64                 	db	100	;'d'
  6173  00FE1A  65                 	db	101	;'e'
  6174  00FE1B  3A                 	db	58	;':'
  6175  00FE1C  00                 	db	0
  6176  00FE1D                     STR_61:
  6177  00FE1D  52                 	db	82	;'R'
  6178  00FE1E  61                 	db	97	;'a'
  6179  00FE1F  6E                 	db	110	;'n'
  6180  00FE20  64                 	db	100	;'d'
  6181  00FE21  6F                 	db	111	;'o'
  6182  00FE22  6D                 	db	109	;'m'
  6183  00FE23  69                 	db	105	;'i'
  6184  00FE24  7A                 	db	122	;'z'
  6185  00FE25  65                 	db	101	;'e'
  6186  00FE26  20                 	db	32
  6187  00FE27  54                 	db	84	;'T'
  6188  00FE28  79                 	db	121	;'y'
  6189  00FE29  70                 	db	112	;'p'
  6190  00FE2A  65                 	db	101	;'e'
  6191  00FE2B  3A                 	db	58	;':'
  6192  00FE2C  00                 	db	0
  6193  00FE2D                     STR_26:
  6194  00FE2D  53                 	db	83	;'S'
  6195  00FE2E  65                 	db	101	;'e'
  6196  00FE2F  6C                 	db	108	;'l'
  6197  00FE30  65                 	db	101	;'e'
  6198  00FE31  63                 	db	99	;'c'
  6199  00FE32  74                 	db	116	;'t'
  6200  00FE33  20                 	db	32
  6201  00FE34  53                 	db	83	;'S'
  6202  00FE35  65                 	db	101	;'e'
  6203  00FE36  76                 	db	118	;'v'
  6204  00FE37  65                 	db	101	;'e'
  6205  00FE38  6E                 	db	110	;'n'
  6206  00FE39  74                 	db	116	;'t'
  6207  00FE3A  68                 	db	104	;'h'
  6208  00FE3B  3A                 	db	58	;':'
  6209  00FE3C  00                 	db	0
  6210  00FE3D                     STR_40:
  6211  00FE3D  41                 	db	65	;'A'
  6212  00FE3E  52                 	db	82	;'R'
  6213  00FE3F  50                 	db	80	;'P'
  6214  00FE40  45                 	db	69	;'E'
  6215  00FE41  47                 	db	71	;'G'
  6216  00FE42  47                 	db	71	;'G'
  6217  00FE43  49                 	db	73	;'I'
  6218  00FE44  41                 	db	65	;'A'
  6219  00FE45  54                 	db	84	;'T'
  6220  00FE46  4F                 	db	79	;'O'
  6221  00FE47  52                 	db	82	;'R'
  6222  00FE48  20                 	db	32
  6223  00FE49  4F                 	db	79	;'O'
  6224  00FE4A  46                 	db	70	;'F'
  6225  00FE4B  46                 	db	70	;'F'
  6226  00FE4C  00                 	db	0
  6227  00FE4D                     STR_32:
  6228  00FE4D  53                 	db	83	;'S'
  6229  00FE4E  6C                 	db	108	;'l'
  6230  00FE4F  69                 	db	105	;'i'
  6231  00FE50  64                 	db	100	;'d'
  6232  00FE51  65                 	db	101	;'e'
  6233  00FE52  70                 	db	112	;'p'
  6234  00FE53  6F                 	db	111	;'o'
  6235  00FE54  74                 	db	116	;'t'
  6236  00FE55  73                 	db	115	;'s'
  6237  00FE56  20                 	db	32
  6238  00FE57  43                 	db	67	;'C'
  6239  00FE58  43                 	db	67	;'C'
  6240  00FE59  23                 	db	35
  6241  00FE5A  3A                 	db	58	;':'
  6242  00FE5B  00                 	db	0
  6243  00FE5C                     STR_56:
  6244  00FE5C  55                 	db	85	;'U'
  6245  00FE5D  6E                 	db	110	;'n'
  6246  00FE5E  2D                 	db	45
  6247  00FE5F  6C                 	db	108	;'l'
  6248  00FE60  61                 	db	97	;'a'
  6249  00FE61  74                 	db	116	;'t'
  6250  00FE62  63                 	db	99	;'c'
  6251  00FE63  68                 	db	104	;'h'
  6252  00FE64  20                 	db	32
  6253  00FE65  4D                 	db	77	;'M'
  6254  00FE66  6F                 	db	111	;'o'
  6255  00FE67  64                 	db	100	;'d'
  6256  00FE68  65                 	db	101	;'e'
  6257  00FE69  3A                 	db	58	;':'
  6258  00FE6A  00                 	db	0
  6259  00FE6B                     STR_29:
  6260  00FE6B  53                 	db	83	;'S'
  6261  00FE6C  65                 	db	101	;'e'
  6262  00FE6D  74                 	db	116	;'t'
  6263  00FE6E  20                 	db	32
  6264  00FE6F  43                 	db	67	;'C'
  6265  00FE70  43                 	db	67	;'C'
  6266  00FE71  20                 	db	32
  6267  00FE72  4E                 	db	78	;'N'
  6268  00FE73  75                 	db	117	;'u'
  6269  00FE74  6D                 	db	109	;'m'
  6270  00FE75  62                 	db	98	;'b'
  6271  00FE76  65                 	db	101	;'e'
  6272  00FE77  72                 	db	114	;'r'
  6273  00FE78  3A                 	db	58	;':'
  6274  00FE79  00                 	db	0
  6275  00FE7A                     STR_63:
  6276  00FE7A  52                 	db	82	;'R'
  6277  00FE7B  41                 	db	65	;'A'
  6278  00FE7C  4E                 	db	78	;'N'
  6279  00FE7D  44                 	db	68	;'D'
  6280  00FE7E  4F                 	db	79	;'O'
  6281  00FE7F  4D                 	db	77	;'M'
  6282  00FE80  49                 	db	73	;'I'
  6283  00FE81  5A                 	db	90	;'Z'
  6284  00FE82  45                 	db	69	;'E'
  6285  00FE83  20                 	db	32
  6286  00FE84  4F                 	db	79	;'O'
  6287  00FE85  4E                 	db	78	;'N'
  6288  00FE86  43                 	db	67	;'C'
  6289  00FE87  45                 	db	69	;'E'
  6290  00FE88  00                 	db	0
  6291  00FE89                     STR_52:
  6292  00FE89  41                 	db	65	;'A'
  6293  00FE8A  75                 	db	117	;'u'
  6294  00FE8B  74                 	db	116	;'t'
  6295  00FE8C  6F                 	db	111	;'o'
  6296  00FE8D  20                 	db	32
  6297  00FE8E  4C                 	db	76	;'L'
  6298  00FE8F  61                 	db	97	;'a'
  6299  00FE90  74                 	db	116	;'t'
  6300  00FE91  63                 	db	99	;'c'
  6301  00FE92  68                 	db	104	;'h'
  6302  00FE93  20                 	db	32
  6303  00FE94  4F                 	db	79	;'O'
  6304  00FE95  46                 	db	70	;'F'
  6305  00FE96  46                 	db	70	;'F'
  6306  00FE97  00                 	db	0
  6307  00FE98                     STR_42:
  6308  00FE98  41                 	db	65	;'A'
  6309  00FE99  52                 	db	82	;'R'
  6310  00FE9A  50                 	db	80	;'P'
  6311  00FE9B  45                 	db	69	;'E'
  6312  00FE9C  47                 	db	71	;'G'
  6313  00FE9D  47                 	db	71	;'G'
  6314  00FE9E  49                 	db	73	;'I'
  6315  00FE9F  41                 	db	65	;'A'
  6316  00FEA0  54                 	db	84	;'T'
  6317  00FEA1  4F                 	db	79	;'O'
  6318  00FEA2  52                 	db	82	;'R'
  6319  00FEA3  20                 	db	32
  6320  00FEA4  4F                 	db	79	;'O'
  6321  00FEA5  4E                 	db	78	;'N'
  6322  00FEA6  00                 	db	0
  6323  00FEA7                     STR_62:
  6324  00FEA7  52                 	db	82	;'R'
  6325  00FEA8  41                 	db	65	;'A'
  6326  00FEA9  4E                 	db	78	;'N'
  6327  00FEAA  44                 	db	68	;'D'
  6328  00FEAB  4F                 	db	79	;'O'
  6329  00FEAC  4D                 	db	77	;'M'
  6330  00FEAD  49                 	db	73	;'I'
  6331  00FEAE  5A                 	db	90	;'Z'
  6332  00FEAF  45                 	db	69	;'E'
  6333  00FEB0  20                 	db	32
  6334  00FEB1  41                 	db	65	;'A'
  6335  00FEB2  55                 	db	85	;'U'
  6336  00FEB3  54                 	db	84	;'T'
  6337  00FEB4  4F                 	db	79	;'O'
  6338  00FEB5  00                 	db	0
  6339  00FEB6                     STR_44:
  6340  00FEB6  54                 	db	84	;'T'
  6341  00FEB7  65                 	db	101	;'e'
  6342  00FEB8  6D                 	db	109	;'m'
  6343  00FEB9  70                 	db	112	;'p'
  6344  00FEBA  6F                 	db	111	;'o'
  6345  00FEBB  20                 	db	32
  6346  00FEBC  28                 	db	40
  6347  00FEBD  42                 	db	66	;'B'
  6348  00FEBE  50                 	db	80	;'P'
  6349  00FEBF  4D                 	db	77	;'M'
  6350  00FEC0  29                 	db	41
  6351  00FEC1  3A                 	db	58	;':'
  6352  00FEC2  20                 	db	32
  6353  00FEC3  00                 	db	0
  6354  00FEC4                     STR_31:
  6355  00FEC4  53                 	db	83	;'S'
  6356  00FEC5  65                 	db	101	;'e'
  6357  00FEC6  74                 	db	116	;'t'
  6358  00FEC7  20                 	db	32
  6359  00FEC8  50                 	db	80	;'P'
  6360  00FEC9  6F                 	db	111	;'o'
  6361  00FECA  74                 	db	116	;'t'
  6362  00FECB  73                 	db	115	;'s'
  6363  00FECC  20                 	db	32
  6364  00FECD  43                 	db	67	;'C'
  6365  00FECE  43                 	db	67	;'C'
  6366  00FECF  23                 	db	35
  6367  00FED0  3A                 	db	58	;':'
  6368  00FED1  00                 	db	0
  6369  00FED2                     STR_25:
  6370  00FED2  53                 	db	83	;'S'
  6371  00FED3  65                 	db	101	;'e'
  6372  00FED4  6C                 	db	108	;'l'
  6373  00FED5  65                 	db	101	;'e'
  6374  00FED6  63                 	db	99	;'c'
  6375  00FED7  74                 	db	116	;'t'
  6376  00FED8  20                 	db	32
  6377  00FED9  54                 	db	84	;'T'
  6378  00FEDA  72                 	db	114	;'r'
  6379  00FEDB  69                 	db	105	;'i'
  6380  00FEDC  61                 	db	97	;'a'
  6381  00FEDD  64                 	db	100	;'d'
  6382  00FEDE  3A                 	db	58	;':'
  6383  00FEDF  00                 	db	0
  6384  00FEE0                     STR_27:
  6385  00FEE0  44                 	db	68	;'D'
  6386  00FEE1  72                 	db	114	;'r'
  6387  00FEE2  75                 	db	117	;'u'
  6388  00FEE3  6D                 	db	109	;'m'
  6389  00FEE4  20                 	db	32
  6390  00FEE5  43                 	db	67	;'C'
  6391  00FEE6  43                 	db	67	;'C'
  6392  00FEE7  20                 	db	32
  6393  00FEE8  4D                 	db	77	;'M'
  6394  00FEE9  6F                 	db	111	;'o'
  6395  00FEEA  64                 	db	100	;'d'
  6396  00FEEB  65                 	db	101	;'e'
  6397  00FEEC  3A                 	db	58	;':'
  6398  00FEED  00                 	db	0
  6399  00FEEE                     STR_45:
  6400  00FEEE  4F                 	db	79	;'O'
  6401  00FEEF  63                 	db	99	;'c'
  6402  00FEF0  74                 	db	116	;'t'
  6403  00FEF1  61                 	db	97	;'a'
  6404  00FEF2  76                 	db	118	;'v'
  6405  00FEF3  65                 	db	101	;'e'
  6406  00FEF4  20                 	db	32
  6407  00FEF5  52                 	db	82	;'R'
  6408  00FEF6  61                 	db	97	;'a'
  6409  00FEF7  6E                 	db	110	;'n'
  6410  00FEF8  67                 	db	103	;'g'
  6411  00FEF9  65                 	db	101	;'e'
  6412  00FEFA  3A                 	db	58	;':'
  6413  00FEFB  00                 	db	0
  6414  00FEFC                     STR_59:
  6415  00FEFC  4F                 	db	79	;'O'
  6416  00FEFD  4E                 	db	78	;'N'
  6417  00FEFE  45                 	db	69	;'E'
  6418  00FEFF  20                 	db	32
  6419  00FF00  41                 	db	65	;'A'
  6420  00FF01  54                 	db	84	;'T'
  6421  00FF02  20                 	db	32
  6422  00FF03  41                 	db	65	;'A'
  6423  00FF04  20                 	db	32
  6424  00FF05  54                 	db	84	;'T'
  6425  00FF06  49                 	db	73	;'I'
  6426  00FF07  4D                 	db	77	;'M'
  6427  00FF08  45                 	db	69	;'E'
  6428  00FF09  00                 	db	0
  6429  00FF0A                     STR_54:
  6430  00FF0A  41                 	db	65	;'A'
  6431  00FF0B  75                 	db	117	;'u'
  6432  00FF0C  74                 	db	116	;'t'
  6433  00FF0D  6F                 	db	111	;'o'
  6434  00FF0E  20                 	db	32
  6435  00FF0F  4C                 	db	76	;'L'
  6436  00FF10  61                 	db	97	;'a'
  6437  00FF11  74                 	db	116	;'t'
  6438  00FF12  63                 	db	99	;'c'
  6439  00FF13  68                 	db	104	;'h'
  6440  00FF14  20                 	db	32
  6441  00FF15  4F                 	db	79	;'O'
  6442  00FF16  4E                 	db	78	;'N'
  6443  00FF17  00                 	db	0
  6444  00FF18                     STR_23:
  6445  00FF18  45                 	db	69	;'E'
  6446  00FF19  78                 	db	120	;'x'
  6447  00FF1A  69                 	db	105	;'i'
  6448  00FF1B  74                 	db	116	;'t'
  6449  00FF1C  20                 	db	32
  6450  00FF1D  45                 	db	69	;'E'
  6451  00FF1E  45                 	db	69	;'E'
  6452  00FF1F  50                 	db	80	;'P'
  6453  00FF20  52                 	db	82	;'R'
  6454  00FF21  4F                 	db	79	;'O'
  6455  00FF22  4D                 	db	77	;'M'
  6456  00FF23  21                 	db	33
  6457  00FF24  00                 	db	0
  6458  00FF25                     STR_38:
  6459  00FF25  52                 	db	82	;'R'
  6460  00FF26  65                 	db	101	;'e'
  6461  00FF27  62                 	db	98	;'b'
  6462  00FF28  6F                 	db	111	;'o'
  6463  00FF29  6F                 	db	111	;'o'
  6464  00FF2A  74                 	db	116	;'t'
  6465  00FF2B  69                 	db	105	;'i'
  6466  00FF2C  6E                 	db	110	;'n'
  6467  00FF2D  67                 	db	103	;'g'
  6468  00FF2E  2E                 	db	46
  6469  00FF2F  2E                 	db	46
  6470  00FF30  2E                 	db	46
  6471  00FF31  00                 	db	0
  6472  00FF32                     STR_47:
  6473  00FF32  4E                 	db	78	;'N'
  6474  00FF33  6F                 	db	111	;'o'
  6475  00FF34  74                 	db	116	;'t'
  6476  00FF35  65                 	db	101	;'e'
  6477  00FF36  20                 	db	32
  6478  00FF37  4C                 	db	76	;'L'
  6479  00FF38  65                 	db	101	;'e'
  6480  00FF39  6E                 	db	110	;'n'
  6481  00FF3A  67                 	db	103	;'g'
  6482  00FF3B  74                 	db	116	;'t'
  6483  00FF3C  68                 	db	104	;'h'
  6484  00FF3D  3A                 	db	58	;':'
  6485  00FF3E  00                 	db	0
  6486  00FF3F                     STR_64:
  6487  00FF3F  53                 	db	83	;'S'
  6488  00FF40  6B                 	db	107	;'k'
  6489  00FF41  69                 	db	105	;'i'
  6490  00FF42  70                 	db	112	;'p'
  6491  00FF43  20                 	db	32
  6492  00FF44  46                 	db	70	;'F'
  6493  00FF45  2F                 	db	47
  6494  00FF46  4C                 	db	76	;'L'
  6495  00FF47  20                 	db	32
  6496  00FF48  4F                 	db	79	;'O'
  6497  00FF49  46                 	db	70	;'F'
  6498  00FF4A  46                 	db	70	;'F'
  6499  00FF4B  00                 	db	0
  6500  00FF4C                     STR_34:
  6501  00FF4C  50                 	db	80	;'P'
  6502  00FF4D  72                 	db	114	;'r'
  6503  00FF4E  6F                 	db	111	;'o'
  6504  00FF4F  67                 	db	103	;'g'
  6505  00FF50  72                 	db	114	;'r'
  6506  00FF51  61                 	db	97	;'a'
  6507  00FF52  6D                 	db	109	;'m'
  6508  00FF53  20                 	db	32
  6509  00FF54  23                 	db	35
  6510  00FF55  3A                 	db	58	;':'
  6511  00FF56  20                 	db	32
  6512  00FF57  00                 	db	0
  6513  00FF58                     STR_24:
  6514  00FF58  45                 	db	69	;'E'
  6515  00FF59  6E                 	db	110	;'n'
  6516  00FF5A  74                 	db	116	;'t'
  6517  00FF5B  65                 	db	101	;'e'
  6518  00FF5C  72                 	db	114	;'r'
  6519  00FF5D  20                 	db	32
  6520  00FF5E  4D                 	db	77	;'M'
  6521  00FF5F  6F                 	db	111	;'o'
  6522  00FF60  64                 	db	100	;'d'
  6523  00FF61  65                 	db	101	;'e'
  6524  00FF62  3A                 	db	58	;':'
  6525  00FF63  00                 	db	0
  6526  00FF64                     STR_57:
  6527  00FF64  55                 	db	85	;'U'
  6528  00FF65  4E                 	db	78	;'N'
  6529  00FF66  4C                 	db	76	;'L'
  6530  00FF67  41                 	db	65	;'A'
  6531  00FF68  54                 	db	84	;'T'
  6532  00FF69  43                 	db	67	;'C'
  6533  00FF6A  48                 	db	72	;'H'
  6534  00FF6B  20                 	db	32
  6535  00FF6C  41                 	db	65	;'A'
  6536  00FF6D  4C                 	db	76	;'L'
  6537  00FF6E  4C                 	db	76	;'L'
  6538  00FF6F  00                 	db	0
  6539  00FF70                     STR_65:
  6540  00FF70  53                 	db	83	;'S'
  6541  00FF71  6B                 	db	107	;'k'
  6542  00FF72  69                 	db	105	;'i'
  6543  00FF73  70                 	db	112	;'p'
  6544  00FF74  20                 	db	32
  6545  00FF75  46                 	db	70	;'F'
  6546  00FF76  2F                 	db	47
  6547  00FF77  4C                 	db	76	;'L'
  6548  00FF78  20                 	db	32
  6549  00FF79  4F                 	db	79	;'O'
  6550  00FF7A  4E                 	db	78	;'N'
  6551  00FF7B  00                 	db	0
  6552  00FF7C                     STR_67:
  6553  00FF7C  46                 	db	70	;'F'
  6554  00FF7D  49                 	db	73	;'I'
  6555  00FF7E  4E                 	db	78	;'N'
  6556  00FF7F  49                 	db	73	;'I'
  6557  00FF80  53                 	db	83	;'S'
  6558  00FF81  48                 	db	72	;'H'
  6559  00FF82  20                 	db	32
  6560  00FF83  4C                 	db	76	;'L'
  6561  00FF84  41                 	db	65	;'A'
  6562  00FF85  53                 	db	83	;'S'
  6563  00FF86  54                 	db	84	;'T'
  6564  00FF87  00                 	db	0
  6565  00FF88                     STR_14:
  6566  00FF88  20                 	db	32
  6567  00FF89  50                 	db	80	;'P'
  6568  00FF8A  49                 	db	73	;'I'
  6569  00FF8B  54                 	db	84	;'T'
  6570  00FF8C  43                 	db	67	;'C'
  6571  00FF8D  48                 	db	72	;'H'
  6572  00FF8E  42                 	db	66	;'B'
  6573  00FF8F  45                 	db	69	;'E'
  6574  00FF90  4E                 	db	78	;'N'
  6575  00FF91  44                 	db	68	;'D'
  6576  00FF92  00                 	db	0
  6577  00FF93                     STR_15:
  6578  00FF93  20                 	db	32
  6579  00FF94  4D                 	db	77	;'M'
  6580  00FF95  4F                 	db	79	;'O'
  6581  00FF96  44                 	db	68	;'D'
  6582  00FF97  2E                 	db	46
  6583  00FF98  57                 	db	87	;'W'
  6584  00FF99  48                 	db	72	;'H'
  6585  00FF9A  45                 	db	69	;'E'
  6586  00FF9B  45                 	db	69	;'E'
  6587  00FF9C  4C                 	db	76	;'L'
  6588  00FF9D  00                 	db	0
  6589  00FF9E                     STR_13:
  6590  00FF9E  20                 	db	32
  6591  00FF9F  20                 	db	32
  6592  00FFA0  56                 	db	86	;'V'
  6593  00FFA1  45                 	db	69	;'E'
  6594  00FFA2  4C                 	db	76	;'L'
  6595  00FFA3  4F                 	db	79	;'O'
  6596  00FFA4  43                 	db	67	;'C'
  6597  00FFA5  49                 	db	73	;'I'
  6598  00FFA6  54                 	db	84	;'T'
  6599  00FFA7  59                 	db	89	;'Y'
  6600  00FFA8  00                 	db	0
  6601  00FFA9                     STR_66:
  6602  00FFA9  49                 	db	73	;'I'
  6603  00FFAA  4D                 	db	77	;'M'
  6604  00FFAB  4D                 	db	77	;'M'
  6605  00FFAC  45                 	db	69	;'E'
  6606  00FFAD  44                 	db	68	;'D'
  6607  00FFAE  49                 	db	73	;'I'
  6608  00FFAF  41                 	db	65	;'A'
  6609  00FFB0  54                 	db	84	;'T'
  6610  00FFB1  45                 	db	69	;'E'
  6611  00FFB2  00                 	db	0
  6612  00FFB3                     STR_36:
  6613  00FFB3  4C                 	db	76	;'L'
  6614  00FFB4  6F                 	db	111	;'o'
  6615  00FFB5  61                 	db	97	;'a'
  6616  00FFB6  64                 	db	100	;'d'
  6617  00FFB7  20                 	db	32
  6618  00FFB8  23                 	db	35
  6619  00FFB9  3A                 	db	58	;':'
  6620  00FFBA  00                 	db	0
  6621  00FFBB                     STR_35:
  6622  00FFBB  53                 	db	83	;'S'
  6623  00FFBC  61                 	db	97	;'a'
  6624  00FFBD  76                 	db	118	;'v'
  6625  00FFBE  65                 	db	101	;'e'
  6626  00FFBF  20                 	db	32
  6627  00FFC0  23                 	db	35
  6628  00FFC1  3A                 	db	58	;':'
  6629  00FFC2  00                 	db	0
  6630  00FFC3                     STR_20:
  6631  00FFC3  53                 	db	83	;'S'
  6632  00FFC4  65                 	db	101	;'e'
  6633  00FFC5  74                 	db	116	;'t'
  6634  00FFC6  21                 	db	33
  6635  00FFC7  00                 	db	0
  6636  00FFC8                     STR_60:
  6637  00FFC8  20                 	db	32
  6638  00FFC9  4F                 	db	79	;'O'
  6639  00FFCA  6E                 	db	110	;'n'
  6640  00FFCB  45                 	db	69	;'E'
  6641  00FFCC  00                 	db	0
  6642  00FFCD                     STR_41:
  6643  00FFCD  41                 	db	65	;'A'
  6644  00FFCE  6F                 	db	111	;'o'
  6645  00FFCF  46                 	db	70	;'F'
  6646  00FFD0  46                 	db	70	;'F'
  6647  00FFD1  00                 	db	0
  6648  00FFD2                     STR_43:
  6649  00FFD2  20                 	db	32
  6650  00FFD3  41                 	db	65	;'A'
  6651  00FFD4  72                 	db	114	;'r'
  6652  00FFD5  50                 	db	80	;'P'
  6653  00FFD6  00                 	db	0
  6654  00FFD7                     STR_8:
  6655  00FFD7  74                 	db	116	;'t'
  6656  00FFD8  45                 	db	69	;'E'
  6657  00FFD9  53                 	db	83	;'S'
  6658  00FFDA  74                 	db	116	;'t'
  6659  00FFDB  00                 	db	0
  6660  00FFDC                     STR_5:
  6661  00FFDC  20                 	db	32
  6662  00FFDD  6F                 	db	111	;'o'
  6663  00FFDE  46                 	db	70	;'F'
  6664  00FFDF  46                 	db	70	;'F'
  6665  00FFE0  00                 	db	0
  6666  00FFE1                     STR_2:
  6667  00FFE1  20                 	db	32
  6668  00FFE2  64                 	db	100	;'d'
  6669  00FFE3  45                 	db	69	;'E'
  6670  00FFE4  4C                 	db	76	;'L'
  6671  00FFE5  00                 	db	0
  6672  00FFE6                     STR_1:
  6673  00FFE6  48                 	db	72	;'H'
  6674  00FFE7  6F                 	db	111	;'o'
  6675  00FFE8  4C                 	db	76	;'L'
  6676  00FFE9  64                 	db	100	;'d'
  6677  00FFEA  00                 	db	0
  6678  00FFEB                     STR_6:
  6679  00FFEB  72                 	db	114	;'r'
  6680  00FFEC  41                 	db	65	;'A'
  6681  00FFED  6E                 	db	110	;'n'
  6682  00FFEE  64                 	db	100	;'d'
  6683  00FFEF  00                 	db	0
  6684  00FFF0                     STR_4:
  6685  00FFF0  41                 	db	65	;'A'
  6686  00FFF1  75                 	db	117	;'u'
  6687  00FFF2  74                 	db	116	;'t'
  6688  00FFF3  6F                 	db	111	;'o'
  6689  00FFF4  00                 	db	0
  6690  00FFF5                     STR_7:
  6691  00FFF5  72                 	db	114	;'r'
  6692  00FFF6  53                 	db	83	;'S'
  6693  00FFF7  45                 	db	69	;'E'
  6694  00FFF8  74                 	db	116	;'t'
  6695  00FFF9  00                 	db	0
  6696  00FFFA                     STR_3:
  6697  00FFFA  4C                 	db	76	;'L'
  6698  00FFFB  61                 	db	97	;'a'
  6699  00FFFC  53                 	db	83	;'S'
  6700  00FFFD  74                 	db	116	;'t'
  6701  00FFFE  00                 	db	0
  6702  0000                     
  6703                           ; #config settings
  6704  00FFFF  00                 	db	0	; dummy byte at the end
  6705  0000                     
  6706                           	psect	cinit
  6707  006716                     __pcinit:
  6708                           	opt stack 0
  6709  006716                     start_initialization:
  6710                           	opt stack 0
  6711  006716                     __initialization:
  6712                           	opt stack 0
  6713                           
  6714                           ; Initialize objects allocated to BANK3 (105 bytes)
  6715                           ; load TBLPTR registers with __pidataBANK3
  6716  006716  0E64               	movlw	low __pidataBANK3
  6717  006718  6EF6               	movwf	tblptrl,c
  6718  00671A  0E87               	movlw	high __pidataBANK3
  6719  00671C  6EF7               	movwf	tblptrh,c
  6720  00671E  0E00               	movlw	low (__pidataBANK3 shr (0+16))
  6721  006720  6EF8               	movwf	tblptru,c
  6722  006722  EE03  F000         	lfsr	0,__pdataBANK3
  6723  006726  EE10 F069          	lfsr	1,105
  6724  00672A                     copy_data0:
  6725  00672A  0009               	tblrd		*+
  6726  00672C  CFF5 FFEE          	movff	tablat,postinc0
  6727  006730  50E5               	movf	postdec1,w,c
  6728  006732  50E1               	movf	fsr1l,w,c
  6729  006734  E1FA               	bnz	copy_data0
  6730                           
  6731                           ; Initialize objects allocated to BANK2 (80 bytes)
  6732                           ; load TBLPTR registers with __pidataBANK2
  6733  006736  0E4E               	movlw	low __pidataBANK2
  6734  006738  6EF6               	movwf	tblptrl,c
  6735  00673A  0E8E               	movlw	high __pidataBANK2
  6736  00673C  6EF7               	movwf	tblptrh,c
  6737  00673E  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  6738  006740  6EF8               	movwf	tblptru,c
  6739  006742  EE02  F0AC         	lfsr	0,__pdataBANK2
  6740  006746  EE10 F050          	lfsr	1,80
  6741  00674A                     copy_data1:
  6742  00674A  0009               	tblrd		*+
  6743  00674C  CFF5 FFEE          	movff	tablat,postinc0
  6744  006750  50E5               	movf	postdec1,w,c
  6745  006752  50E1               	movf	fsr1l,w,c
  6746  006754  E1FA               	bnz	copy_data1
  6747                           
  6748                           ; Initialize objects allocated to BANK1 (40 bytes)
  6749                           ; load TBLPTR registers with __pidataBANK1
  6750  006756  0E6A               	movlw	low __pidataBANK1
  6751  006758  6EF6               	movwf	tblptrl,c
  6752  00675A  0E94               	movlw	high __pidataBANK1
  6753  00675C  6EF7               	movwf	tblptrh,c
  6754  00675E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  6755  006760  6EF8               	movwf	tblptru,c
  6756  006762  EE01  F0D7         	lfsr	0,__pdataBANK1
  6757  006766  EE10 F028          	lfsr	1,40
  6758  00676A                     copy_data2:
  6759  00676A  0009               	tblrd		*+
  6760  00676C  CFF5 FFEE          	movff	tablat,postinc0
  6761  006770  50E5               	movf	postdec1,w,c
  6762  006772  50E1               	movf	fsr1l,w,c
  6763  006774  E1FA               	bnz	copy_data2
  6764                           
  6765                           ; Initialize objects allocated to BANK0 (9 bytes)
  6766                           ; load TBLPTR registers with __pidataBANK0
  6767  006776  0E6E               	movlw	low __pidataBANK0
  6768  006778  6EF6               	movwf	tblptrl,c
  6769  00677A  0E96               	movlw	high __pidataBANK0
  6770  00677C  6EF7               	movwf	tblptrh,c
  6771  00677E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  6772  006780  6EF8               	movwf	tblptru,c
  6773  006782  EE00  F0F7         	lfsr	0,__pdataBANK0
  6774  006786  EE10 F009          	lfsr	1,9
  6775  00678A                     copy_data3:
  6776  00678A  0009               	tblrd		*+
  6777  00678C  CFF5 FFEE          	movff	tablat,postinc0
  6778  006790  50E5               	movf	postdec1,w,c
  6779  006792  50E1               	movf	fsr1l,w,c
  6780  006794  E1FA               	bnz	copy_data3
  6781                           
  6782                           ; Initialize objects allocated to COMRAM (4 bytes)
  6783                           ; load TBLPTR registers with __pidataCOMRAM
  6784  006796  0E90               	movlw	low __pidataCOMRAM
  6785  006798  6EF6               	movwf	tblptrl,c
  6786  00679A  0E96               	movlw	high __pidataCOMRAM
  6787  00679C  6EF7               	movwf	tblptrh,c
  6788  00679E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  6789  0067A0  6EF8               	movwf	tblptru,c
  6790  0067A2  EE00  F05B         	lfsr	0,__pdataCOMRAM
  6791  0067A6  EE10 F004          	lfsr	1,4
  6792  0067AA                     copy_data4:
  6793  0067AA  0009               	tblrd		*+
  6794  0067AC  CFF5 FFEE          	movff	tablat,postinc0
  6795  0067B0  50E5               	movf	postdec1,w,c
  6796  0067B2  50E1               	movf	fsr1l,w,c
  6797  0067B4  E1FA               	bnz	copy_data4
  6798                           
  6799                           ; Clear objects allocated to BANK2 (172 bytes)
  6800  0067B6  EE02  F000         	lfsr	0,__pbssBANK2
  6801  0067BA  0EAC               	movlw	172
  6802  0067BC                     clear_0:
  6803  0067BC  6AEE               	clrf	postinc0,c
  6804  0067BE  06E8               	decf	wreg,f,c
  6805  0067C0  E1FD               	bnz	clear_0
  6806                           
  6807                           ; Clear objects allocated to BANK1 (135 bytes)
  6808  0067C2  EE01  F000         	lfsr	0,__pbssBANK1
  6809  0067C6  0E87               	movlw	135
  6810  0067C8                     clear_1:
  6811  0067C8  6AEE               	clrf	postinc0,c
  6812  0067CA  06E8               	decf	wreg,f,c
  6813  0067CC  E1FD               	bnz	clear_1
  6814                           
  6815                           ; Clear objects allocated to BANK0 (39 bytes)
  6816  0067CE  EE00  F0D0         	lfsr	0,__pbssBANK0
  6817  0067D2  0E27               	movlw	39
  6818  0067D4                     clear_2:
  6819  0067D4  6AEE               	clrf	postinc0,c
  6820  0067D6  06E8               	decf	wreg,f,c
  6821  0067D8  E1FD               	bnz	clear_2
  6822                           
  6823                           ; Clear objects allocated to BITCOMRAM (5 bytes)
  6824  0067DA  6A36               	clrf	((__pbitbssCOMRAM/(0+8)+4))& (0+255),c
  6825  0067DC  6A35               	clrf	((__pbitbssCOMRAM/(0+8)+3))& (0+255),c
  6826  0067DE  6A34               	clrf	((__pbitbssCOMRAM/(0+8)+2))& (0+255),c
  6827  0067E0  6A33               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
  6828  0067E2  6A32               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  6829                           
  6830                           ; Clear objects allocated to COMRAM (36 bytes)
  6831  0067E4  EE00  F037         	lfsr	0,__pbssCOMRAM
  6832  0067E8  0E24               	movlw	36
  6833  0067EA                     clear_3:
  6834  0067EA  6AEE               	clrf	postinc0,c
  6835  0067EC  06E8               	decf	wreg,f,c
  6836  0067EE  E1FD               	bnz	clear_3
  6837  0067F0                     end_of_initialization:
  6838                           	opt stack 0
  6839  0067F0                     __end_of__initialization:
  6840                           	opt stack 0
  6841  0067F0  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  6842  0067F2  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6843  0067F4  0E00               	movlw	low (__Lmediumconst shr (0+16))
  6844  0067F6  6EF8               	movwf	tblptru,c
  6845  0067F8  0100               	movlb	0
  6846  0067FA  EF88  F031         	goto	_main	;jump to C main() function
  6847                           tblptru	equ	0xFF8
  6848                           tblptrh	equ	0xFF7
  6849                           tblptrl	equ	0xFF6
  6850                           tablat	equ	0xFF5
  6851                           postinc0	equ	0xFEE
  6852                           wreg	equ	0xFE8
  6853                           postdec1	equ	0xFE5
  6854                           fsr1l	equ	0xFE1
  6855                           
  6856                           	psect	bitbssCOMRAM
  6857  000190                     __pbitbssCOMRAM:
  6858                           	opt stack 0
  6859  000190                     readPotentiometers@FIRST_READING:
  6860                           	opt stack 0
  6861  000190                     	ds	1
  6862  000191                     int2string@isNegative:
  6863                           	opt stack 0
  6864  000191                     	ds	1
  6865  000192                     doTheUnLatch@once:
  6866                           	opt stack 0
  6867  000192                     	ds	1
  6868  000193                     keyboardTranspose@keyPress:
  6869                           	opt stack 0
  6870  000193                     	ds	1
  6871  000194                     _CONTROL_MODE:
  6872                           	opt stack 0
  6873  000194                     	ds	1
  6874  000195                     _DRUM_MODE:
  6875                           	opt stack 0
  6876  000195                     	ds	1
  6877  000196                     _DISPLAY_STEP_NUMBER:
  6878                           	opt stack 0
  6879  000196                     	ds	1
  6880  000197                     _flag2:
  6881                           	opt stack 0
  6882  000197                     	ds	1
  6883  000198                     _flag1:
  6884                           	opt stack 0
  6885  000198                     	ds	1
  6886  000199                     _note_off_was_sent:
  6887                           	opt stack 0
  6888  000199                     	ds	1
  6889  00019A                     _octave_overflow:
  6890                           	opt stack 0
  6891  00019A                     	ds	1
  6892  00019B                     _overflow:
  6893                           	opt stack 0
  6894  00019B                     	ds	1
  6895  00019C                     _suppress_note_off:
  6896                           	opt stack 0
  6897  00019C                     	ds	1
  6898  00019D                     _suppress_note_on:
  6899                           	opt stack 0
  6900  00019D                     	ds	1
  6901  00019E                     _finishLastNote:
  6902                           	opt stack 0
  6903  00019E                     	ds	1
  6904  00019F                     _LAST_NOTE_MODE_RESET:
  6905                           	opt stack 0
  6906  00019F                     	ds	1
  6907  0001A0                     _LAST_NOTE_MODE_TRANSPOSE:
  6908                           	opt stack 0
  6909  0001A0                     	ds	1
  6910  0001A1                     _LAST_NOTE_MODE_KEY_RELEASE:
  6911                           	opt stack 0
  6912  0001A1                     	ds	1
  6913  0001A2                     _LAST_NOTE_MODE_KEY_PRESS:
  6914                           	opt stack 0
  6915  0001A2                     	ds	1
  6916  0001A3                     _lastNoteMode:
  6917                           	opt stack 0
  6918  0001A3                     	ds	1
  6919  0001A4                     _skipFirstLast:
  6920                           	opt stack 0
  6921  0001A4                     	ds	1
  6922  0001A5                     _AUTO_RANDOMIZE:
  6923                           	opt stack 0
  6924  0001A5                     	ds	1
  6925  0001A6                     _latch_was_pressed:
  6926                           	opt stack 0
  6927  0001A6                     	ds	1
  6928  0001A7                     _AUTO_LATCH:
  6929                           	opt stack 0
  6930  0001A7                     	ds	1
  6931  0001A8                     _UN_LATCH_MODE:
  6932                           	opt stack 0
  6933  0001A8                     	ds	1
  6934  0001A9                     _LATCH:
  6935                           	opt stack 0
  6936  0001A9                     	ds	1
  6937  0001AA                     _RESET_ON_KEY_RELEASE:
  6938                           	opt stack 0
  6939  0001AA                     	ds	1
  6940  0001AB                     _RESET_ON_KEY_PRESS:
  6941                           	opt stack 0
  6942  0001AB                     	ds	1
  6943  0001AC                     _ARPEGGIO_ON:
  6944                           	opt stack 0
  6945  0001AC                     	ds	1
  6946  0001AD                     _SORT_DIRECTION:
  6947                           	opt stack 0
  6948  0001AD                     	ds	1
  6949  0001AE                     _TRANSPOSE_MODE:
  6950                           	opt stack 0
  6951  0001AE                     	ds	1
  6952  0001AF                     _lcd_print_once:
  6953                           	opt stack 0
  6954  0001AF                     	ds	1
  6955  0001B0                     _encoder_click:
  6956                           	opt stack 0
  6957  0001B0                     	ds	1
  6958  0001B1                     _encoderPolarity:
  6959                           	opt stack 0
  6960  0001B1                     	ds	1
  6961  0001B2                     _encoderB:
  6962                           	opt stack 0
  6963  0001B2                     	ds	1
  6964  0001B3                     _encoderA:
  6965                           	opt stack 0
  6966  0001B3                     	ds	1
  6967  0001B4                     _POT_MODE:
  6968                           	opt stack 0
  6969  0001B4                     	ds	1
  6970  0001B5                     _ON_OFF:
  6971                           	opt stack 0
  6972  0001B5                     	ds	1
  6973  0001B6                     _light_decimal_points:
  6974                           	opt stack 0
  6975  0001B6                     	ds	1
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           postinc0	equ	0xFEE
  6981                           wreg	equ	0xFE8
  6982                           postdec1	equ	0xFE5
  6983                           fsr1l	equ	0xFE1
  6984                           
  6985                           	psect	bssCOMRAM
  6986  000037                     __pbssCOMRAM:
  6987                           	opt stack 0
  6988  000037                     displayDigits@digit:
  6989                           	opt stack 0
  6990  000037                     	ds	4
  6991  00003B                     _arpeggiatorMenu:
  6992                           	opt stack 0
  6993  00003B                     	ds	3
  6994  00003E                     _potsMenu:
  6995                           	opt stack 0
  6996  00003E                     	ds	3
  6997  000041                     _drumMenu:
  6998                           	opt stack 0
  6999  000041                     	ds	3
  7000  000044                     _triadMenu:
  7001                           	opt stack 0
  7002  000044                     	ds	3
  7003  000047                     _modeMenu:
  7004                           	opt stack 0
  7005  000047                     	ds	3
  7006  00004A                     _keyboardMenu:
  7007                           	opt stack 0
  7008  00004A                     	ds	3
  7009  00004D                     displayDigits@number_to_display_temp:
  7010                           	opt stack 0
  7011  00004D                     	ds	2
  7012  00004F                     _arpeggioPtr:
  7013                           	opt stack 0
  7014  00004F                     	ds	2
  7015  000051                     displayString@letter_counter:
  7016                           	opt stack 0
  7017  000051                     	ds	1
  7018  000052                     displayDigits@digit_counter:
  7019                           	opt stack 0
  7020  000052                     	ds	1
  7021  000053                     keyboardTranspose@semitone_temp:
  7022                           	opt stack 0
  7023  000053                     	ds	1
  7024  000054                     _TIMER_OVERFLOWS:
  7025                           	opt stack 0
  7026  000054                     	ds	1
  7027  000055                     _last_octave:
  7028                           	opt stack 0
  7029  000055                     	ds	1
  7030  000056                     _which_octave:
  7031                           	opt stack 0
  7032  000056                     	ds	1
  7033  000057                     _which_note:
  7034                           	opt stack 0
  7035  000057                     	ds	1
  7036  000058                     _state:
  7037                           	opt stack 0
  7038  000058                     	ds	1
  7039  000059                     _DIGIT_MODE:
  7040                           	opt stack 0
  7041  000059                     	ds	1
  7042  00005A                     _DISPLAY_MODE:
  7043                           	opt stack 0
  7044  00005A                     	ds	1
  7045                           tblptru	equ	0xFF8
  7046                           tblptrh	equ	0xFF7
  7047                           tblptrl	equ	0xFF6
  7048                           tablat	equ	0xFF5
  7049                           postinc0	equ	0xFEE
  7050                           wreg	equ	0xFE8
  7051                           postdec1	equ	0xFE5
  7052                           fsr1l	equ	0xFE1
  7053                           
  7054                           	psect	dataCOMRAM
  7055  00005B                     __pdataCOMRAM:
  7056                           	opt stack 0
  7057  00005B                     _number_to_display:
  7058                           	opt stack 0
  7059  00005B                     	ds	2
  7060  00005D                     _PRESCALER:
  7061                           	opt stack 0
  7062  00005D                     	ds	1
  7063  00005E                     _PPQN:
  7064                           	opt stack 0
  7065  00005E                     	ds	1
  7066                           tblptru	equ	0xFF8
  7067                           tblptrh	equ	0xFF7
  7068                           tblptrl	equ	0xFF6
  7069                           tablat	equ	0xFF5
  7070                           postinc0	equ	0xFEE
  7071                           wreg	equ	0xFE8
  7072                           postdec1	equ	0xFE5
  7073                           fsr1l	equ	0xFE1
  7074                           
  7075                           	psect	bssBANK0
  7076  0000D0                     __pbssBANK0:
  7077                           	opt stack 0
  7078  0000D0                     _keyboard:
  7079                           	opt stack 0
  7080  0000D0                     	ds	4
  7081  0000D4                     _button_state_last:
  7082                           	opt stack 0
  7083  0000D4                     	ds	4
  7084  0000D8                     _button_state_now:
  7085                           	opt stack 0
  7086  0000D8                     	ds	4
  7087  0000DC                     _arpeggiatorLastNoteModeMenu:
  7088                           	opt stack 0
  7089  0000DC                     	ds	3
  7090  0000DF                     _savesMenu:
  7091                           	opt stack 0
  7092  0000DF                     	ds	3
  7093  0000E2                     key_press_release_note_off@temp:
  7094                           	opt stack 0
  7095  0000E2                     	ds	1
  7096  0000E3                     _toggle_state:
  7097                           	opt stack 0
  7098  0000E3                     	ds	1
  7099  0000E4                     _ARRAY_INDEX:
  7100                           	opt stack 0
  7101  0000E4                     	ds	1
  7102  0000E5                     _NUM_NOTES_PRESSED:
  7103                           	opt stack 0
  7104  0000E5                     	ds	1
  7105  0000E6                     _parallel:
  7106                           	opt stack 0
  7107  0000E6                     	ds	1
  7108  0000E7                     _stored_octave:
  7109                           	opt stack 0
  7110  0000E7                     	ds	1
  7111  0000E8                     _last_note:
  7112                           	opt stack 0
  7113  0000E8                     	ds	1
  7114  0000E9                     _startingDirection:
  7115                           	opt stack 0
  7116  0000E9                     	ds	1
  7117  0000EA                     _ARPEGGIO_TYPE:
  7118                           	opt stack 0
  7119  0000EA                     	ds	1
  7120  0000EB                     _encoder_direction:
  7121                           	opt stack 0
  7122  0000EB                     	ds	1
  7123  0000EC                     _drum:
  7124                           	opt stack 0
  7125  0000EC                     	ds	1
  7126  0000ED                     _drum_button_state_last:
  7127                           	opt stack 0
  7128  0000ED                     	ds	1
  7129  0000EE                     _drum_button_state_now:
  7130                           	opt stack 0
  7131  0000EE                     	ds	1
  7132  0000EF                     _which_seventh:
  7133                           	opt stack 0
  7134  0000EF                     	ds	1
  7135  0000F0                     _which_triad:
  7136                           	opt stack 0
  7137  0000F0                     	ds	1
  7138  0000F1                     _which_mode:
  7139                           	opt stack 0
  7140  0000F1                     	ds	1
  7141  0000F2                     _KEYBOARD_MODE:
  7142                           	opt stack 0
  7143  0000F2                     	ds	1
  7144  0000F3                     _semitone:
  7145                           	opt stack 0
  7146  0000F3                     	ds	1
  7147  0000F4                     _noteNumber:
  7148                           	opt stack 0
  7149  0000F4                     	ds	1
  7150  0000F5                     _statusByte:
  7151                           	opt stack 0
  7152  0000F5                     	ds	1
  7153  0000F6                     _channel:
  7154                           	opt stack 0
  7155  0000F6                     	ds	1
  7156                           tblptru	equ	0xFF8
  7157                           tblptrh	equ	0xFF7
  7158                           tblptrl	equ	0xFF6
  7159                           tablat	equ	0xFF5
  7160                           postinc0	equ	0xFEE
  7161                           wreg	equ	0xFE8
  7162                           postdec1	equ	0xFE5
  7163                           fsr1l	equ	0xFE1
  7164                           
  7165                           	psect	dataBANK0
  7166  0000F7                     __pdataBANK0:
  7167                           	opt stack 0
  7168  0000F7                     _NOTE_LENGTH_PULSES:
  7169                           	opt stack 0
  7170  0000F7                     	ds	1
  7171  0000F8                     _OCTAVES:
  7172                           	opt stack 0
  7173  0000F8                     	ds	1
  7174  0000F9                     _which_screen:
  7175                           	opt stack 0
  7176  0000F9                     	ds	1
  7177  0000FA                     _iterator_focus:
  7178                           	opt stack 0
  7179  0000FA                     	ds	1
  7180  0000FB                     _ema_integer:
  7181                           	opt stack 0
  7182  0000FB                     	ds	1
  7183  0000FC                     _octave:
  7184                           	opt stack 0
  7185  0000FC                     	ds	1
  7186  0000FD                     _velocity:
  7187                           	opt stack 0
  7188  0000FD                     	ds	1
  7189  0000FE                     _drumchannel:
  7190                           	opt stack 0
  7191  0000FE                     	ds	1
  7192  0000FF                     _BPM:
  7193                           	opt stack 0
  7194  0000FF                     	ds	1
  7195                           tblptru	equ	0xFF8
  7196                           tblptrh	equ	0xFF7
  7197                           tblptrl	equ	0xFF6
  7198                           tablat	equ	0xFF5
  7199                           postinc0	equ	0xFEE
  7200                           wreg	equ	0xFE8
  7201                           postdec1	equ	0xFE5
  7202                           fsr1l	equ	0xFE1
  7203                           
  7204                           	psect	bssBANK1
  7205  000100                     __pbssBANK1:
  7206                           	opt stack 0
  7207  000100                     displayString@letter:
  7208                           	opt stack 0
  7209  000100                     	ds	4
  7210  000104                     _ema_alpha:
  7211                           	opt stack 0
  7212  000104                     	ds	4
  7213  000108                     _arpeggiatorLastNoteModeResetMenu:
  7214                           	opt stack 0
  7215  000108                     	ds	3
  7216  00010B                     _arpeggiatorLastNoteModeTransposeMenu:
  7217                           	opt stack 0
  7218  00010B                     	ds	3
  7219  00010E                     _arpeggiatorLastNoteModeKeyReleaseMenu:
  7220                           	opt stack 0
  7221  00010E                     	ds	3
  7222  000111                     _arpeggiatorLastNoteModeKeyPressMenu:
  7223                           	opt stack 0
  7224  000111                     	ds	3
  7225  000114                     _arpeggiatorSkipFirstLastMenu:
  7226                           	opt stack 0
  7227  000114                     	ds	3
  7228  000117                     _arpeggiatorRandomizeTypeMenu:
  7229                           	opt stack 0
  7230  000117                     	ds	3
  7231  00011A                     _arpeggiatorRandomizeSkipMenu:
  7232                           	opt stack 0
  7233  00011A                     	ds	3
  7234  00011D                     _arpeggiatorUnLatchModeMenu:
  7235                           	opt stack 0
  7236  00011D                     	ds	3
  7237  000120                     _arpeggiatorAutoLatchOnOffMenu:
  7238                           	opt stack 0
  7239  000120                     	ds	3
  7240  000123                     _arpeggiatorLatchOnOffMenu:
  7241                           	opt stack 0
  7242  000123                     	ds	3
  7243  000126                     _arpeggiatorLatchMenu:
  7244                           	opt stack 0
  7245  000126                     	ds	3
  7246  000129                     _arpeggiatorNoteLengthMenu:
  7247                           	opt stack 0
  7248  000129                     	ds	3
  7249  00012C                     _arpeggiatorTypeMenu:
  7250                           	opt stack 0
  7251  00012C                     	ds	3
  7252  00012F                     _arpeggiatorOctavesMenu:
  7253                           	opt stack 0
  7254  00012F                     	ds	3
  7255  000132                     _arpeggiatorTempoMenu:
  7256                           	opt stack 0
  7257  000132                     	ds	3
  7258  000135                     _arpeggiatorOnOffMenu:
  7259                           	opt stack 0
  7260  000135                     	ds	3
  7261  000138                     _encoderPolarityMenu:
  7262                           	opt stack 0
  7263  000138                     	ds	3
  7264  00013B                     _eepromMenu:
  7265                           	opt stack 0
  7266  00013B                     	ds	3
  7267  00013E                     _drumChannelMenu:
  7268                           	opt stack 0
  7269  00013E                     	ds	3
  7270  000141                     _mainChannelMenu:
  7271                           	opt stack 0
  7272  000141                     	ds	3
  7273  000144                     _programChangeMenu:
  7274                           	opt stack 0
  7275  000144                     	ds	3
  7276  000147                     _midiChannelMenu:
  7277                           	opt stack 0
  7278  000147                     	ds	3
  7279  00014A                     _joystickCCMenu:
  7280                           	opt stack 0
  7281  00014A                     	ds	3
  7282  00014D                     _slidepotsCCMenu:
  7283                           	opt stack 0
  7284  00014D                     	ds	3
  7285  000150                     _potsCCMenu:
  7286                           	opt stack 0
  7287  000150                     	ds	3
  7288  000153                     _potsAlphaMenu:
  7289                           	opt stack 0
  7290  000153                     	ds	3
  7291  000156                     _potsResoMenu:
  7292                           	opt stack 0
  7293  000156                     	ds	3
  7294  000159                     _drumCCMenu:
  7295                           	opt stack 0
  7296  000159                     	ds	3
  7297  00015C                     _drumNNMenu:
  7298                           	opt stack 0
  7299  00015C                     	ds	3
  7300  00015F                     _drumCCTypeMenu:
  7301                           	opt stack 0
  7302  00015F                     	ds	3
  7303  000162                     _transposeMenu:
  7304                           	opt stack 0
  7305  000162                     	ds	3
  7306  000165                     _seventhMenu:
  7307                           	opt stack 0
  7308  000165                     	ds	3
  7309  000168                     _mainMenu:
  7310                           	opt stack 0
  7311  000168                     	ds	3
  7312  00016B                     displayDigits@number_to_display_last:
  7313                           	opt stack 0
  7314  00016B                     	ds	2
  7315  00016D                     _TIMER_PRELOAD:
  7316                           	opt stack 0
  7317  00016D                     	ds	2
  7318  00016F                     _encoder_state_last:
  7319                           	opt stack 0
  7320  00016F                     	ds	1
  7321  000170                     _encoder_state_now:
  7322                           	opt stack 0
  7323  000170                     	ds	1
  7324  000171                     _patch_number:
  7325                           	opt stack 0
  7326  000171                     	ds	1
  7327  000172                     _ARPEGGIO:
  7328                           	opt stack 0
  7329  000172                     	ds	16
  7330  000182                     _string2display:
  7331                           	opt stack 0
  7332  000182                     	ds	5
  7333                           tblptru	equ	0xFF8
  7334                           tblptrh	equ	0xFF7
  7335                           tblptrl	equ	0xFF6
  7336                           tablat	equ	0xFF5
  7337                           postinc0	equ	0xFEE
  7338                           wreg	equ	0xFE8
  7339                           postdec1	equ	0xFE5
  7340                           fsr1l	equ	0xFE1
  7341                           
  7342                           	psect	dataBANK1
  7343  0001D7                     __pdataBANK1:
  7344                           	opt stack 0
  7345  0001D7                     _DRUM_CC:
  7346                           	opt stack 0
  7347  0001D7                     	ds	8
  7348  0001DF                     _DRUM_NOTE:
  7349                           	opt stack 0
  7350  0001DF                     	ds	8
  7351  0001E7                     _randx:
  7352                           	opt stack 0
  7353  0001E7                     	ds	4
  7354  0001EB                     _HYST_VAL:
  7355                           	opt stack 0
  7356  0001EB                     	ds	2
  7357  0001ED                     _command:
  7358                           	opt stack 0
  7359  0001ED                     	ds	1
  7360  0001EE                     _string_to_display:
  7361                           	opt stack 0
  7362  0001EE                     	ds	5
  7363  0001F3                     _diminished_triad:
  7364                           	opt stack 0
  7365  0001F3                     	ds	3
  7366  0001F6                     _augmented_triad:
  7367                           	opt stack 0
  7368  0001F6                     	ds	3
  7369  0001F9                     _minor_triad:
  7370                           	opt stack 0
  7371  0001F9                     	ds	3
  7372  0001FC                     _major_triad:
  7373                           	opt stack 0
  7374  0001FC                     	ds	3
  7375                           tblptru	equ	0xFF8
  7376                           tblptrh	equ	0xFF7
  7377                           tblptrl	equ	0xFF6
  7378                           tablat	equ	0xFF5
  7379                           postinc0	equ	0xFEE
  7380                           wreg	equ	0xFE8
  7381                           postdec1	equ	0xFE5
  7382                           fsr1l	equ	0xFE1
  7383                           
  7384                           	psect	bssBANK2
  7385  000200                     __pbssBANK2:
  7386                           	opt stack 0
  7387  000200                     _potentiometer_filtered_last:
  7388                           	opt stack 0
  7389  000200                     	ds	32
  7390  000220                     _potentiometer_filtered_now:
  7391                           	opt stack 0
  7392  000220                     	ds	32
  7393  000240                     _ema_sum:
  7394                           	opt stack 0
  7395  000240                     	ds	32
  7396  000260                     _potentiometer_raw:
  7397                           	opt stack 0
  7398  000260                     	ds	32
  7399  000280                     readPotentiometers@count:
  7400                           	opt stack 0
  7401  000280                     	ds	4
  7402  000284                     _count_ISR:
  7403                           	opt stack 0
  7404  000284                     	ds	4
  7405  000288                     _number_of_interrupts:
  7406                           	opt stack 0
  7407  000288                     	ds	4
  7408  00028C                     _ARPEGGIO_RANDOM:
  7409                           	opt stack 0
  7410  00028C                     	ds	16
  7411  00029C                     _ARPEGGIO_SORTED:
  7412                           	opt stack 0
  7413  00029C                     	ds	16
  7414                           tblptru	equ	0xFF8
  7415                           tblptrh	equ	0xFF7
  7416                           tblptrl	equ	0xFF6
  7417                           tablat	equ	0xFF5
  7418                           postinc0	equ	0xFEE
  7419                           wreg	equ	0xFE8
  7420                           postdec1	equ	0xFE5
  7421                           fsr1l	equ	0xFE1
  7422                           
  7423                           	psect	dataBANK2
  7424  0002AC                     __pdataBANK2:
  7425                           	opt stack 0
  7426  0002AC                     _inputPotsArray:
  7427                           	opt stack 0
  7428  0002AC                     	ds	48
  7429  0002DC                     _NOTE_LENGTH_PULSES_ARRAY:
  7430                           	opt stack 0
  7431  0002DC                     	ds	12
  7432  0002E8                     _diminished_7th:
  7433                           	opt stack 0
  7434  0002E8                     	ds	4
  7435  0002EC                     _half_diminished_7th:
  7436                           	opt stack 0
  7437  0002EC                     	ds	4
  7438  0002F0                     _minor_7th:
  7439                           	opt stack 0
  7440  0002F0                     	ds	4
  7441  0002F4                     _major_7th:
  7442                           	opt stack 0
  7443  0002F4                     	ds	4
  7444  0002F8                     _dominant_7th:
  7445                           	opt stack 0
  7446  0002F8                     	ds	4
  7447                           tblptru	equ	0xFF8
  7448                           tblptrh	equ	0xFF7
  7449                           tblptrl	equ	0xFF6
  7450                           tablat	equ	0xFF5
  7451                           postinc0	equ	0xFEE
  7452                           wreg	equ	0xFE8
  7453                           postdec1	equ	0xFE5
  7454                           fsr1l	equ	0xFE1
  7455                           
  7456                           	psect	dataBANK3
  7457  000300                     __pdataBANK3:
  7458                           	opt stack 0
  7459  000300                     _menuArray:
  7460                           	opt stack 0
  7461  000300                     	ds	105
  7462                           tblptru	equ	0xFF8
  7463                           tblptrh	equ	0xFF7
  7464                           tblptrl	equ	0xFF6
  7465                           tablat	equ	0xFF5
  7466                           postinc0	equ	0xFEE
  7467                           wreg	equ	0xFE8
  7468                           postdec1	equ	0xFE5
  7469                           fsr1l	equ	0xFE1
  7470                           
  7471                           	psect	cstackBANK1
  7472  000187                     __pcstackBANK1:
  7473                           	opt stack 0
  7474  000187                     loadFromEEPROM@to_load:
  7475                           	opt stack 0
  7476                           
  7477                           ; 75 bytes @ 0x0
  7478  000187                     	ds	75
  7479  0001D2                     loadFromEEPROM@baseAddress:
  7480                           	opt stack 0
  7481                           
  7482                           ; 2 bytes @ 0x4B
  7483  0001D2                     	ds	2
  7484  0001D4                     loadFromEEPROM@slotNumber:
  7485                           	opt stack 0
  7486                           
  7487                           ; 1 bytes @ 0x4D
  7488  0001D4                     	ds	1
  7489  0001D5                     loadFromEEPROM@byte_count:
  7490                           	opt stack 0
  7491                           
  7492                           ; 2 bytes @ 0x4E
  7493  0001D5                     	ds	2
  7494                           tblptru	equ	0xFF8
  7495                           tblptrh	equ	0xFF7
  7496                           tblptrl	equ	0xFF6
  7497                           tablat	equ	0xFF5
  7498                           postinc0	equ	0xFEE
  7499                           wreg	equ	0xFE8
  7500                           postdec1	equ	0xFE5
  7501                           fsr1l	equ	0xFE1
  7502                           
  7503                           	psect	cstackBANK0
  7504  000060                     __pcstackBANK0:
  7505                           	opt stack 0
  7506  000060                     ??_rotateArrayLeft:
  7507  000060                     ??_processEncoderBuxton:
  7508  000060                     ??_buttonInputsSerial:
  7509  000060                     ?_ADC_Read:
  7510                           	opt stack 0
  7511  000060                     ?___awdiv:
  7512                           	opt stack 0
  7513  000060                     ?___lmul:
  7514                           	opt stack 0
  7515  000060                     ?___xxtofl:
  7516                           	opt stack 0
  7517  000060                     Lcd_SetBit@data_bit:
  7518                           	opt stack 0
  7519  000060                     sendOut@a:
  7520                           	opt stack 0
  7521  000060                     sendUSB@message2:
  7522                           	opt stack 0
  7523  000060                     setControllerResolution@i:
  7524                           	opt stack 0
  7525  000060                     wait_one_pulse@mode:
  7526                           	opt stack 0
  7527  000060                     copy_array@i:
  7528                           	opt stack 0
  7529  000060                     ___lbmod@divisor:
  7530                           	opt stack 0
  7531  000060                     printThisNumber@n:
  7532                           	opt stack 0
  7533  000060                     Read_b_eep@badd:
  7534                           	opt stack 0
  7535  000060                     Write_b_eep@badd:
  7536                           	opt stack 0
  7537  000060                     ___awdiv@dividend:
  7538                           	opt stack 0
  7539  000060                     srand@x:
  7540                           	opt stack 0
  7541  000060                     strcpy@to:
  7542                           	opt stack 0
  7543  000060                     ___lmul@multiplier:
  7544                           	opt stack 0
  7545  000060                     ___xxtofl@val:
  7546                           	opt stack 0
  7547                           
  7548                           ; 4 bytes @ 0x0
  7549  000060                     	ds	1
  7550  000061                     ??_Lcd_Cmd:
  7551  000061                     Lcd_Print_Char@Lower_Nibble:
  7552                           	opt stack 0
  7553  000061                     sendUSB@message3:
  7554                           	opt stack 0
  7555  000061                     findArrayIndex@pitch_of_key_release:
  7556                           	opt stack 0
  7557  000061                     ___lbmod@dividend:
  7558                           	opt stack 0
  7559                           
  7560                           ; 1 bytes @ 0x1
  7561  000061                     	ds	1
  7562  000062                     ??_ADC_Read:
  7563  000062                     ??_sendUSB:
  7564  000062                     Lcd_Cmd@a:
  7565                           	opt stack 0
  7566  000062                     Lcd_Print_Char@Upper_Nibble:
  7567                           	opt stack 0
  7568  000062                     findArrayIndex@i:
  7569                           	opt stack 0
  7570  000062                     Write_b_eep@bdat:
  7571                           	opt stack 0
  7572  000062                     ___lbmod@counter:
  7573                           	opt stack 0
  7574  000062                     ___awdiv@divisor:
  7575                           	opt stack 0
  7576  000062                     strcpy@from:
  7577                           	opt stack 0
  7578                           
  7579                           ; 2 bytes @ 0x2
  7580  000062                     	ds	1
  7581  000063                     ??_Lcd_Start:
  7582  000063                     Lcd_Set_Cursor@b:
  7583                           	opt stack 0
  7584  000063                     Lcd_Print_Char@data:
  7585                           	opt stack 0
  7586  000063                     Write_b_eep@GIE_BIT_VAL:
  7587                           	opt stack 0
  7588  000063                     ___lbmod@rem:
  7589                           	opt stack 0
  7590                           
  7591                           ; 1 bytes @ 0x3
  7592  000063                     	ds	1
  7593  000064                     ??___xxtofl:
  7594  000064                     ?___wmul:
  7595                           	opt stack 0
  7596  000064                     Lcd_Set_Cursor@a:
  7597                           	opt stack 0
  7598  000064                     ADC_Read@adc_channel:
  7599                           	opt stack 0
  7600  000064                     buttonInputsSerial@i:
  7601                           	opt stack 0
  7602  000064                     ___awdiv@counter:
  7603                           	opt stack 0
  7604  000064                     Lcd_Start@i:
  7605                           	opt stack 0
  7606  000064                     Lcd_Print_Char@i:
  7607                           	opt stack 0
  7608  000064                     ___wmul@multiplier:
  7609                           	opt stack 0
  7610  000064                     strcpy@cp:
  7611                           	opt stack 0
  7612  000064                     ___lmul@multiplicand:
  7613                           	opt stack 0
  7614  000064                     saveToEEPROM@to_save:
  7615                           	opt stack 0
  7616                           
  7617                           ; 75 bytes @ 0x4
  7618  000064                     	ds	1
  7619  000065                     Lcd_Set_Cursor@z:
  7620                           	opt stack 0
  7621  000065                     sendUSB@message1:
  7622                           	opt stack 0
  7623  000065                     buttonInputsSerial@i_4383:
  7624                           	opt stack 0
  7625  000065                     ___awdiv@sign:
  7626                           	opt stack 0
  7627                           
  7628                           ; 1 bytes @ 0x5
  7629  000065                     	ds	1
  7630  000066                     ??_displayTest:
  7631  000066                     Lcd_Set_Cursor@y:
  7632                           	opt stack 0
  7633  000066                     Lcd_Print_Char@i_57:
  7634                           	opt stack 0
  7635  000066                     ___wmul@multiplicand:
  7636                           	opt stack 0
  7637  000066                     ___awdiv@quotient:
  7638                           	opt stack 0
  7639  000066                     sendUSB@midiMessage:
  7640                           	opt stack 0
  7641                           
  7642                           ; 3 bytes @ 0x6
  7643  000066                     	ds	1
  7644  000067                     Lcd_Set_Cursor@temp:
  7645                           	opt stack 0
  7646  000067                     rotateArrayLeft@array_index:
  7647                           	opt stack 0
  7648                           
  7649                           ; 1 bytes @ 0x7
  7650  000067                     	ds	1
  7651  000068                     rotateArrayLeft@i:
  7652                           	opt stack 0
  7653  000068                     ___xxtofl@sign:
  7654                           	opt stack 0
  7655  000068                     ___wmul@product:
  7656                           	opt stack 0
  7657  000068                     ___lmul@product:
  7658                           	opt stack 0
  7659                           
  7660                           ; 4 bytes @ 0x8
  7661  000068                     	ds	1
  7662  000069                     ??_add_notes_to_arpeggio:
  7663  000069                     sendUSB@i:
  7664                           	opt stack 0
  7665  000069                     delete_notes_from_arpeggio@pitch:
  7666                           	opt stack 0
  7667  000069                     ___xxtofl@exp:
  7668                           	opt stack 0
  7669                           
  7670                           ; 1 bytes @ 0x9
  7671  000069                     	ds	1
  7672  00006A                     ??_initializeMenuArray:
  7673  00006A                     sendUSB@ii:
  7674                           	opt stack 0
  7675  00006A                     delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT:
  7676                           	opt stack 0
  7677  00006A                     Lcd_Print_String@a:
  7678                           	opt stack 0
  7679  00006A                     ___xxtofl@arg:
  7680                           	opt stack 0
  7681                           
  7682                           ; 4 bytes @ 0xA
  7683  00006A                     	ds	1
  7684  00006B                     noteOff@pitch:
  7685                           	opt stack 0
  7686  00006B                     noteOffDrum@pitch:
  7687                           	opt stack 0
  7688  00006B                     controlChange@controllerNumber:
  7689                           	opt stack 0
  7690  00006B                     pitchBend@lowByte:
  7691                           	opt stack 0
  7692  00006B                     programChange@data1:
  7693                           	opt stack 0
  7694  00006B                     initializeMenuArray@NumberOfElements:
  7695                           	opt stack 0
  7696                           
  7697                           ; 1 bytes @ 0xB
  7698  00006B                     	ds	1
  7699  00006C                     ??_Lcd_Print_String:
  7700  00006C                     ?_rand:
  7701                           	opt stack 0
  7702  00006C                     ?___aldiv:
  7703                           	opt stack 0
  7704  00006C                     noteOff@velocity:
  7705                           	opt stack 0
  7706  00006C                     noteOffDrum@velocity:
  7707                           	opt stack 0
  7708  00006C                     controlChange@value:
  7709                           	opt stack 0
  7710  00006C                     pitchBend@highByte:
  7711                           	opt stack 0
  7712  00006C                     programChange@data2:
  7713                           	opt stack 0
  7714  00006C                     initializeMenuArray@i:
  7715                           	opt stack 0
  7716  00006C                     ___aldiv@dividend:
  7717                           	opt stack 0
  7718                           
  7719                           ; 4 bytes @ 0xC
  7720  00006C                     	ds	1
  7721  00006D                     noteOff@channel:
  7722                           	opt stack 0
  7723  00006D                     noteOffDrum@channel:
  7724                           	opt stack 0
  7725  00006D                     controlChange@channel:
  7726                           	opt stack 0
  7727  00006D                     pitchBend@channel:
  7728                           	opt stack 0
  7729  00006D                     programChange@channel:
  7730                           	opt stack 0
  7731                           
  7732                           ; 1 bytes @ 0xD
  7733  00006D                     	ds	1
  7734  00006E                     ??_processPotentiometers:
  7735  00006E                     ?___awmod:
  7736                           	opt stack 0
  7737  00006E                     ?___flmul:
  7738                           	opt stack 0
  7739  00006E                     noteOn@pitch:
  7740                           	opt stack 0
  7741  00006E                     noteOnDrum@pitch:
  7742                           	opt stack 0
  7743  00006E                     Lcd_Print_String@i:
  7744                           	opt stack 0
  7745  00006E                     ___awmod@dividend:
  7746                           	opt stack 0
  7747  00006E                     ___flmul@b:
  7748                           	opt stack 0
  7749                           
  7750                           ; 4 bytes @ 0xE
  7751  00006E                     	ds	1
  7752  00006F                     noteOn@velocity:
  7753                           	opt stack 0
  7754  00006F                     noteOnDrum@velocity:
  7755                           	opt stack 0
  7756                           
  7757                           ; 1 bytes @ 0xF
  7758  00006F                     	ds	1
  7759  000070                     ??_Function_B:
  7760  000070                     ??_Function_H_5:
  7761  000070                     ??_Function_H_8:
  7762  000070                     ??_exitFunction:
  7763  000070                     ??_exitSave:
  7764  000070                     ??_exitLoad:
  7765  000070                     ??_eepromExit:
  7766  000070                     ??_Function_A_1:
  7767  000070                     ??_Function_A_2:
  7768  000070                     ??_Function_A_3:
  7769  000070                     ??_Function_C_1:
  7770  000070                     ??_Function_D_1:
  7771  000070                     ??_Function_G_3:
  7772  000070                     ??_Function_H_9_1:
  7773  000070                     ??_Function_H_9_2:
  7774  000070                     ??_Function_H_9_3:
  7775  000070                     ??_Function_H_9_4:
  7776  000070                     noteOn@channel:
  7777                           	opt stack 0
  7778  000070                     noteOnDrum@channel:
  7779                           	opt stack 0
  7780  000070                     add_notes_to_arpeggio@pitch:
  7781                           	opt stack 0
  7782  000070                     ___awmod@divisor:
  7783                           	opt stack 0
  7784  000070                     ___aldiv@divisor:
  7785                           	opt stack 0
  7786                           
  7787                           ; 4 bytes @ 0x10
  7788  000070                     	ds	1
  7789  000071                     ??_Function_A:
  7790  000071                     ??_Function_H_9:
  7791  000071                     Function_H_5@i:
  7792                           	opt stack 0
  7793  000071                     processPotentiometers@lowByte:
  7794                           	opt stack 0
  7795                           
  7796                           ; 1 bytes @ 0x11
  7797  000071                     	ds	1
  7798  000072                     ??_Function_G_4:
  7799  000072                     processPotentiometers@highByte:
  7800                           	opt stack 0
  7801  000072                     ___awmod@counter:
  7802                           	opt stack 0
  7803  000072                     ___flmul@a:
  7804                           	opt stack 0
  7805                           
  7806                           ; 4 bytes @ 0x12
  7807  000072                     	ds	1
  7808  000073                     processPotentiometers@i:
  7809                           	opt stack 0
  7810  000073                     ___awmod@sign:
  7811                           	opt stack 0
  7812                           
  7813                           ; 1 bytes @ 0x13
  7814  000073                     	ds	1
  7815  000074                     random_pitches@random_array_index:
  7816                           	opt stack 0
  7817  000074                     random_pitches_non_repeating@temp:
  7818                           	opt stack 0
  7819  000074                     ___aldiv@counter:
  7820                           	opt stack 0
  7821  000074                     int2string@number:
  7822                           	opt stack 0
  7823                           
  7824                           ; 2 bytes @ 0x14
  7825  000074                     	ds	1
  7826  000075                     random_pitches@i:
  7827                           	opt stack 0
  7828  000075                     random_pitches_non_repeating@randomIndex:
  7829                           	opt stack 0
  7830  000075                     ___aldiv@sign:
  7831                           	opt stack 0
  7832                           
  7833                           ; 1 bytes @ 0x15
  7834  000075                     	ds	1
  7835  000076                     ??___flmul:
  7836  000076                     ??_int2string:
  7837  000076                     random_pitches_non_repeating@i:
  7838                           	opt stack 0
  7839  000076                     ___aldiv@quotient:
  7840                           	opt stack 0
  7841                           
  7842                           ; 4 bytes @ 0x16
  7843  000076                     	ds	1
  7844  000077                     ??_Function_H_4:
  7845  000077                     ??_playTriad:
  7846  000077                     ??_playSeventh:
  7847  000077                     playThisNotePentatonic@index:
  7848                           	opt stack 0
  7849  000077                     playDiatonicTriadMajor@index:
  7850                           	opt stack 0
  7851  000077                     playDiatonicSeventhMajor@index:
  7852                           	opt stack 0
  7853  000077                     playDiatonicTriadMinor@index:
  7854                           	opt stack 0
  7855  000077                     playDiatonicSeventhMinor@index:
  7856                           	opt stack 0
  7857                           
  7858                           ; 1 bytes @ 0x17
  7859  000077                     	ds	1
  7860  000078                     ??_playDiatonicTriadMajor:
  7861  000078                     ??_playDiatonicTriadMinor:
  7862  000078                     ??_playDiatonicSeventhMajor:
  7863  000078                     ??_playDiatonicSeventhMinor:
  7864  000078                     ??_playThisNotePentatonic:
  7865  000078                     int2string@number_to_display_temp:
  7866                           	opt stack 0
  7867                           
  7868                           ; 2 bytes @ 0x18
  7869  000078                     	ds	2
  7870  00007A                     ??_Function_E:
  7871  00007A                     ??_Function_C_2:
  7872  00007A                     ??_Function_C_3:
  7873  00007A                     ?_map:
  7874                           	opt stack 0
  7875  00007A                     ___flmul@sign:
  7876                           	opt stack 0
  7877  00007A                     map@x:
  7878                           	opt stack 0
  7879                           
  7880                           ; 4 bytes @ 0x1A
  7881  00007A                     	ds	1
  7882  00007B                     setControllerNumbers@array_index:
  7883                           	opt stack 0
  7884  00007B                     Function_C_2@array_index:
  7885                           	opt stack 0
  7886  00007B                     Function_C_3@array_index:
  7887                           	opt stack 0
  7888  00007B                     playTriad@triad_p:
  7889                           	opt stack 0
  7890  00007B                     playSeventh@seventh_p:
  7891                           	opt stack 0
  7892  00007B                     ___flmul@grs:
  7893                           	opt stack 0
  7894                           
  7895                           ; 4 bytes @ 0x1B
  7896  00007B                     	ds	1
  7897  00007C                     ??_Function_C:
  7898  00007C                     ??_Function_D_3:
  7899  00007C                     ??_Function_D_4:
  7900  00007C                     ??_Function_D_5:
  7901  00007C                     playThisNotePentatonic@temp_pitch:
  7902                           	opt stack 0
  7903  00007C                     playDiatonicTriadMajor@i:
  7904                           	opt stack 0
  7905  00007C                     playDiatonicSeventhMajor@i:
  7906                           	opt stack 0
  7907  00007C                     playDiatonicTriadMinor@pitch:
  7908                           	opt stack 0
  7909  00007C                     playDiatonicSeventhMinor@pitch:
  7910                           	opt stack 0
  7911                           
  7912                           ; 1 bytes @ 0x1C
  7913  00007C                     	ds	1
  7914  00007D                     keyboard_sharps_only_efficient@pitch:
  7915                           	opt stack 0
  7916  00007D                     playTriad@i:
  7917                           	opt stack 0
  7918  00007D                     playSeventh@i:
  7919                           	opt stack 0
  7920  00007D                     playDiatonicTriadMajor@i_1679:
  7921                           	opt stack 0
  7922  00007D                     playDiatonicSeventhMajor@i_1684:
  7923                           	opt stack 0
  7924  00007D                     playDiatonicTriadMinor@i:
  7925                           	opt stack 0
  7926  00007D                     playDiatonicSeventhMinor@i:
  7927                           	opt stack 0
  7928  00007D                     Function_D_3@array_index:
  7929                           	opt stack 0
  7930  00007D                     Function_D_4@array_index:
  7931                           	opt stack 0
  7932  00007D                     Function_D_5@array_index:
  7933                           	opt stack 0
  7934                           
  7935                           ; 1 bytes @ 0x1D
  7936  00007D                     	ds	1
  7937  00007E                     keyboard_sharps_only_efficient@index:
  7938                           	opt stack 0
  7939  00007E                     playTriad@i_1657:
  7940                           	opt stack 0
  7941  00007E                     playSeventh@i_1662:
  7942                           	opt stack 0
  7943  00007E                     playDiatonicTriadMajor@pitch:
  7944                           	opt stack 0
  7945  00007E                     playDiatonicSeventhMajor@pitch:
  7946                           	opt stack 0
  7947  00007E                     playDiatonicTriadMinor@i_1689:
  7948                           	opt stack 0
  7949  00007E                     playDiatonicSeventhMinor@i_1694:
  7950                           	opt stack 0
  7951  00007E                     map@in_min:
  7952                           	opt stack 0
  7953                           
  7954                           ; 4 bytes @ 0x1E
  7955  00007E                     	ds	1
  7956  00007F                     playTriad@pitch:
  7957                           	opt stack 0
  7958  00007F                     playSeventh@pitch:
  7959                           	opt stack 0
  7960  00007F                     playThisNote8@index:
  7961                           	opt stack 0
  7962  00007F                     ___flmul@aexp:
  7963                           	opt stack 0
  7964                           
  7965                           ; 1 bytes @ 0x1F
  7966  00007F                     	ds	1
  7967  000080                     ??_playThisNote:
  7968  000080                     ??_playThisNote8:
  7969  000080                     ___flmul@bexp:
  7970                           	opt stack 0
  7971                           
  7972                           ; 1 bytes @ 0x20
  7973  000080                     	ds	1
  7974  000081                     ___flmul@prod:
  7975                           	opt stack 0
  7976                           
  7977                           ; 4 bytes @ 0x21
  7978  000081                     	ds	1
  7979  000082                     map@in_max:
  7980                           	opt stack 0
  7981                           
  7982                           ; 4 bytes @ 0x22
  7983  000082                     	ds	2
  7984  000084                     playThisNote@pitch:
  7985                           	opt stack 0
  7986  000084                     playThisNote8@pitch:
  7987                           	opt stack 0
  7988                           
  7989                           ; 1 bytes @ 0x24
  7990  000084                     	ds	1
  7991  000085                     keyboard_all_note_efficient@pitch:
  7992                           	opt stack 0
  7993  000085                     playThisNote8@temp_pitch:
  7994                           	opt stack 0
  7995  000085                     ___flmul@temp:
  7996                           	opt stack 0
  7997                           
  7998                           ; 2 bytes @ 0x25
  7999  000085                     	ds	1
  8000  000086                     playThisNote8@mode_p:
  8001                           	opt stack 0
  8002  000086                     map@out_min:
  8003                           	opt stack 0
  8004                           
  8005                           ; 4 bytes @ 0x26
  8006  000086                     	ds	1
  8007  000087                     ?___fldiv:
  8008                           	opt stack 0
  8009  000087                     ___fldiv@b:
  8010                           	opt stack 0
  8011                           
  8012                           ; 4 bytes @ 0x27
  8013  000087                     	ds	1
  8014  000088                     ??_doTheUnLatch:
  8015  000088                     keyboard_eight_note_efficient@pitch:
  8016                           	opt stack 0
  8017                           
  8018                           ; 1 bytes @ 0x28
  8019  000088                     	ds	1
  8020  000089                     keyboard_eight_note_efficient@index:
  8021                           	opt stack 0
  8022                           
  8023                           ; 1 bytes @ 0x29
  8024  000089                     	ds	1
  8025  00008A                     map@out_max:
  8026                           	opt stack 0
  8027                           
  8028                           ; 4 bytes @ 0x2A
  8029  00008A                     	ds	1
  8030  00008B                     ___fldiv@a:
  8031                           	opt stack 0
  8032                           
  8033                           ; 4 bytes @ 0x2B
  8034  00008B                     	ds	1
  8035  00008C                     ??_processOctave:
  8036  00008C                     Function_H_6_1@temp:
  8037                           	opt stack 0
  8038                           
  8039                           ; 1 bytes @ 0x2C
  8040  00008C                     	ds	1
  8041  00008D                     ??_Function_H_6:
  8042                           
  8043                           ; 1 bytes @ 0x2D
  8044  00008D                     	ds	1
  8045  00008E                     ??_map:
  8046  00008E                     
  8047                           ; 1 bytes @ 0x2E
  8048  00008E                     	ds	1
  8049  00008F                     ??___fldiv:
  8050                           
  8051                           ; 1 bytes @ 0x2F
  8052  00008F                     	ds	4
  8053  000093                     ___fldiv@sign:
  8054                           	opt stack 0
  8055                           
  8056                           ; 1 bytes @ 0x33
  8057  000093                     	ds	1
  8058  000094                     ___fldiv@rem:
  8059                           	opt stack 0
  8060                           
  8061                           ; 4 bytes @ 0x34
  8062  000094                     	ds	4
  8063  000098                     ___fldiv@new_exp:
  8064                           	opt stack 0
  8065                           
  8066                           ; 2 bytes @ 0x38
  8067  000098                     	ds	2
  8068  00009A                     ___fldiv@grs:
  8069                           	opt stack 0
  8070                           
  8071                           ; 4 bytes @ 0x3A
  8072  00009A                     	ds	4
  8073  00009E                     ___fldiv@bexp:
  8074                           	opt stack 0
  8075                           
  8076                           ; 1 bytes @ 0x3E
  8077  00009E                     	ds	1
  8078  00009F                     ___fldiv@aexp:
  8079                           	opt stack 0
  8080                           
  8081                           ; 1 bytes @ 0x3F
  8082  00009F                     	ds	1
  8083  0000A0                     ??_Function_D:
  8084  0000A0                     ?___flneg:
  8085                           	opt stack 0
  8086  0000A0                     ___flneg@f1:
  8087                           	opt stack 0
  8088                           
  8089                           ; 4 bytes @ 0x40
  8090  0000A0                     	ds	4
  8091  0000A4                     ?___fladd:
  8092                           	opt stack 0
  8093  0000A4                     ___fladd@b:
  8094                           	opt stack 0
  8095                           
  8096                           ; 4 bytes @ 0x44
  8097  0000A4                     	ds	4
  8098  0000A8                     ___fladd@a:
  8099                           	opt stack 0
  8100                           
  8101                           ; 4 bytes @ 0x48
  8102  0000A8                     	ds	4
  8103  0000AC                     ??___fladd:
  8104                           
  8105                           ; 1 bytes @ 0x4C
  8106  0000AC                     	ds	3
  8107  0000AF                     saveToEEPROM@baseAddress:
  8108                           	opt stack 0
  8109                           
  8110                           ; 2 bytes @ 0x4F
  8111  0000AF                     	ds	2
  8112  0000B1                     saveToEEPROM@slotNumber:
  8113                           	opt stack 0
  8114                           
  8115                           ; 1 bytes @ 0x51
  8116  0000B1                     	ds	1
  8117  0000B2                     saveToEEPROM@byte_count:
  8118                           	opt stack 0
  8119                           
  8120                           ; 2 bytes @ 0x52
  8121  0000B2                     	ds	2
  8122  0000B4                     ??_Function_G_1:
  8123  0000B4                     initializeSaveSlotsOnce@initializeSlotsOnce:
  8124                           	opt stack 0
  8125  0000B4                     ___fladd@signs:
  8126                           	opt stack 0
  8127                           
  8128                           ; 1 bytes @ 0x54
  8129  0000B4                     	ds	1
  8130  0000B5                     ___fladd@aexp:
  8131                           	opt stack 0
  8132                           
  8133                           ; 1 bytes @ 0x55
  8134  0000B5                     	ds	1
  8135  0000B6                     ___fladd@bexp:
  8136                           	opt stack 0
  8137                           
  8138                           ; 1 bytes @ 0x56
  8139  0000B6                     	ds	1
  8140  0000B7                     ___fladd@grs:
  8141                           	opt stack 0
  8142                           
  8143                           ; 1 bytes @ 0x57
  8144  0000B7                     	ds	1
  8145  0000B8                     ?___fltol:
  8146                           	opt stack 0
  8147  0000B8                     ___fltol@f1:
  8148                           	opt stack 0
  8149                           
  8150                           ; 4 bytes @ 0x58
  8151  0000B8                     	ds	4
  8152  0000BC                     ??___fltol:
  8153                           
  8154                           ; 1 bytes @ 0x5C
  8155  0000BC                     	ds	4
  8156  0000C0                     ___fltol@sign1:
  8157                           	opt stack 0
  8158                           
  8159                           ; 1 bytes @ 0x60
  8160  0000C0                     	ds	1
  8161  0000C1                     ___fltol@exp1:
  8162                           	opt stack 0
  8163                           
  8164                           ; 1 bytes @ 0x61
  8165  0000C1                     	ds	1
  8166  0000C2                     ??_readPotentiometers:
  8167  0000C2                     ?_calculate_pulse_length:
  8168                           	opt stack 0
  8169                           
  8170                           ; 2 bytes @ 0x62
  8171  0000C2                     	ds	2
  8172  0000C4                     calculate_pulse_length@s_tick:
  8173                           	opt stack 0
  8174                           
  8175                           ; 4 bytes @ 0x64
  8176  0000C4                     	ds	3
  8177  0000C7                     _readPotentiometers$5807:
  8178                           	opt stack 0
  8179                           
  8180                           ; 4 bytes @ 0x67
  8181  0000C7                     	ds	1
  8182  0000C8                     _calculate_pulse_length$5808:
  8183                           	opt stack 0
  8184                           
  8185                           ; 4 bytes @ 0x68
  8186  0000C8                     	ds	3
  8187  0000CB                     readPotentiometers@i_3358:
  8188                           	opt stack 0
  8189                           
  8190                           ; 1 bytes @ 0x6B
  8191  0000CB                     	ds	1
  8192  0000CC                     ??_Function_H:
  8193  0000CC                     ??_Function_G_2:
  8194  0000CC                     readPotentiometers@i:
  8195                           	opt stack 0
  8196  0000CC                     selectSlotOnBoot@slot:
  8197                           	opt stack 0
  8198                           
  8199                           ; 1 bytes @ 0x6C
  8200  0000CC                     	ds	1
  8201  0000CD                     ??_Function_G:
  8202  0000CD                     readPotentiometers@i_3359:
  8203                           	opt stack 0
  8204                           
  8205                           ; 1 bytes @ 0x6D
  8206  0000CD                     	ds	1
  8207  0000CE                     ??_menu_lcd:
  8208  0000CE                     
  8209                           ; 1 bytes @ 0x6E
  8210  0000CE                     	ds	1
  8211  0000CF                     ??_main:
  8212                           
  8213                           ; 1 bytes @ 0x6F
  8214  0000CF                     	ds	1
  8215                           tblptru	equ	0xFF8
  8216                           tblptrh	equ	0xFF7
  8217                           tblptrl	equ	0xFF6
  8218                           tablat	equ	0xFF5
  8219                           postinc0	equ	0xFEE
  8220                           wreg	equ	0xFE8
  8221                           postdec1	equ	0xFE5
  8222                           fsr1l	equ	0xFE1
  8223                           
  8224                           	psect	cstackCOMRAM
  8225  000001                     __pcstackCOMRAM:
  8226                           	opt stack 0
  8227  000001                     ??_encoderInputsBuxton:
  8228  000001                     ?i2___awdiv:
  8229                           	opt stack 0
  8230  000001                     ?i2___lmul:
  8231                           	opt stack 0
  8232  000001                     i2sendOut@a:
  8233                           	opt stack 0
  8234  000001                     i2sendUSB@message2:
  8235                           	opt stack 0
  8236  000001                     i2___lbmod@divisor:
  8237                           	opt stack 0
  8238  000001                     i2printThisNumber@n:
  8239                           	opt stack 0
  8240  000001                     i2___awdiv@dividend:
  8241                           	opt stack 0
  8242  000001                     i2___lmul@multiplier:
  8243                           	opt stack 0
  8244                           
  8245                           ; 4 bytes @ 0x0
  8246  000001                     	ds	1
  8247  000002                     displayString@i:
  8248                           	opt stack 0
  8249  000002                     i2sendUSB@message3:
  8250                           	opt stack 0
  8251  000002                     i2___lbmod@dividend:
  8252                           	opt stack 0
  8253                           
  8254                           ; 1 bytes @ 0x1
  8255  000002                     	ds	1
  8256  000003                     ??i2_sendUSB:
  8257  000003                     sort_pitches@a:
  8258                           	opt stack 0
  8259  000003                     i2___lbmod@counter:
  8260                           	opt stack 0
  8261  000003                     i2___awdiv@divisor:
  8262                           	opt stack 0
  8263                           
  8264                           ; 2 bytes @ 0x2
  8265  000003                     	ds	1
  8266  000004                     encoderInputsBuxton@tempA:
  8267                           	opt stack 0
  8268  000004                     sort_pitches@j:
  8269                           	opt stack 0
  8270  000004                     i2___lbmod@rem:
  8271                           	opt stack 0
  8272                           
  8273                           ; 1 bytes @ 0x3
  8274  000004                     	ds	1
  8275  000005                     encoderInputsBuxton@tempB:
  8276                           	opt stack 0
  8277  000005                     sort_pitches@i:
  8278                           	opt stack 0
  8279  000005                     i2___awdiv@counter:
  8280                           	opt stack 0
  8281  000005                     i2___lmul@multiplicand:
  8282                           	opt stack 0
  8283                           
  8284                           ; 4 bytes @ 0x4
  8285  000005                     	ds	1
  8286  000006                     encoderInputsBuxton@pinstate:
  8287                           	opt stack 0
  8288  000006                     i2___awdiv@sign:
  8289                           	opt stack 0
  8290  000006                     i2sendUSB@midiMessage:
  8291                           	opt stack 0
  8292                           
  8293                           ; 3 bytes @ 0x5
  8294  000006                     	ds	1
  8295  000007                     i2___awdiv@quotient:
  8296                           	opt stack 0
  8297                           
  8298                           ; 2 bytes @ 0x6
  8299  000007                     	ds	2
  8300  000009                     i2sendUSB@message1:
  8301                           	opt stack 0
  8302  000009                     i2___lmul@product:
  8303                           	opt stack 0
  8304                           
  8305                           ; 4 bytes @ 0x8
  8306  000009                     	ds	1
  8307  00000A                     i2sendUSB@i:
  8308                           	opt stack 0
  8309                           
  8310                           ; 1 bytes @ 0x9
  8311  00000A                     	ds	1
  8312  00000B                     i2sendUSB@ii:
  8313                           	opt stack 0
  8314                           
  8315                           ; 1 bytes @ 0xA
  8316  00000B                     	ds	1
  8317  00000C                     i2noteOff@pitch:
  8318                           	opt stack 0
  8319                           
  8320                           ; 1 bytes @ 0xB
  8321  00000C                     	ds	1
  8322  00000D                     ?i2_rand:
  8323                           	opt stack 0
  8324  00000D                     i2noteOff@velocity:
  8325                           	opt stack 0
  8326                           
  8327                           ; 1 bytes @ 0xC
  8328  00000D                     	ds	1
  8329  00000E                     i2noteOff@channel:
  8330                           	opt stack 0
  8331                           
  8332                           ; 1 bytes @ 0xD
  8333  00000E                     	ds	1
  8334  00000F                     ?i2___awmod:
  8335                           	opt stack 0
  8336  00000F                     i2noteOn@pitch:
  8337                           	opt stack 0
  8338  00000F                     i2___awmod@dividend:
  8339                           	opt stack 0
  8340                           
  8341                           ; 2 bytes @ 0xE
  8342  00000F                     	ds	1
  8343  000010                     i2noteOn@velocity:
  8344                           	opt stack 0
  8345                           
  8346                           ; 1 bytes @ 0xF
  8347  000010                     	ds	1
  8348  000011                     i2noteOn@channel:
  8349                           	opt stack 0
  8350  000011                     i2___awmod@divisor:
  8351                           	opt stack 0
  8352                           
  8353                           ; 2 bytes @ 0x10
  8354  000011                     	ds	2
  8355  000013                     i2___awmod@counter:
  8356                           	opt stack 0
  8357                           
  8358                           ; 1 bytes @ 0x12
  8359  000013                     	ds	1
  8360  000014                     i2___awmod@sign:
  8361                           	opt stack 0
  8362                           
  8363                           ; 1 bytes @ 0x13
  8364  000014                     	ds	1
  8365  000015                     ??_displayDigits:
  8366  000015                     i2random_pitches@random_array_index:
  8367                           	opt stack 0
  8368  000015                     i2random_pitches_non_repeating@temp:
  8369                           	opt stack 0
  8370                           
  8371                           ; 1 bytes @ 0x14
  8372  000015                     	ds	1
  8373  000016                     i2random_pitches@i:
  8374                           	opt stack 0
  8375  000016                     i2random_pitches_non_repeating@randomIndex:
  8376                           	opt stack 0
  8377                           
  8378                           ; 1 bytes @ 0x15
  8379  000016                     	ds	1
  8380  000017                     i2random_pitches_non_repeating@i:
  8381                           	opt stack 0
  8382                           
  8383                           ; 1 bytes @ 0x16
  8384  000017                     	ds	1
  8385  000018                     ??_playArpeggio:
  8386  000018                     displayDigits@lowByte:
  8387                           	opt stack 0
  8388                           
  8389                           ; 1 bytes @ 0x17
  8390  000018                     	ds	1
  8391  000019                     displayDigits@highByte:
  8392                           	opt stack 0
  8393                           
  8394                           ; 1 bytes @ 0x18
  8395  000019                     	ds	1
  8396  00001A                     
  8397                           ; 1 bytes @ 0x19
  8398  00001A                     	ds	4
  8399  00001E                     ??_ISR:
  8400                           
  8401                           ; 1 bytes @ 0x1D
  8402  00001E                     	ds	20
  8403                           tblptru	equ	0xFF8
  8404                           tblptrh	equ	0xFF7
  8405                           tblptrl	equ	0xFF6
  8406                           tablat	equ	0xFF5
  8407                           postinc0	equ	0xFEE
  8408                           wreg	equ	0xFE8
  8409                           postdec1	equ	0xFE5
  8410                           fsr1l	equ	0xFE1
  8411                           
  8412 ;;
  8413 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  8414 ;;
  8415 ;; *************** function _main *****************
  8416 ;; Defined at:
  8417 ;;		line 441 in file "main.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;		None
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;		None
  8422 ;; Return value:  Size  Location     Type
  8423 ;;                  2  4824[None  ] int 
  8424 ;; Registers used:
  8425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8434 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8435 ;;Total ram usage:        1 bytes
  8436 ;; Hardware stack levels required when called:   17
  8437 ;; This function calls:
  8438 ;;		_ADC_Initialize
  8439 ;;		_Lcd_Start
  8440 ;;		_Read_b_eep
  8441 ;;		_analogInputs
  8442 ;;		_calculate_alpha
  8443 ;;		_calculate_pulse_length
  8444 ;;		_digitalInputs
  8445 ;;		_displayTest
  8446 ;;		_initializeMenuArray
  8447 ;;		_initializeSaveSlotsOnce
  8448 ;;		_menu_lcd
  8449 ;;		_panic_button
  8450 ;;		_processEncoderBuxton
  8451 ;;		_selectSlotOnBoot
  8452 ;;		_setup
  8453 ;;		_srand
  8454 ;; This function is called by:
  8455 ;;		Startup code after reset
  8456 ;; This function uses a non-reentrant model
  8457 ;;
  8458                           
  8459                           	psect	text0
  8460  006310                     __ptext0:
  8461                           	opt stack 0
  8462  006310                     _main:
  8463                           	opt stack 14
  8464                           
  8465                           ;main.c: 444: setup();
  8466                           
  8467                           ;incstack = 0
  8468  006310  EC4E  F044         	call	_setup	;wreg free
  8469                           
  8470                           ;main.c: 445: ADC_Initialize();
  8471  006314  EC02  F04B         	call	_ADC_Initialize	;wreg free
  8472                           
  8473                           ;main.c: 446: initializeMenuArray();
  8474  006318  EC40  F026         	call	_initializeMenuArray	;wreg free
  8475                           
  8476                           ;main.c: 447: Lcd_Start();
  8477  00631C  EC29  F03C         	call	_Lcd_Start	;wreg free
  8478                           
  8479                           ;main.c: 450: state = 0x0;
  8480  006320  0E00               	movlw	0
  8481  006322  6E58               	movwf	_state,c
  8482                           
  8483                           ;main.c: 451: POT_MODE = 0;
  8484  006324  9836               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
  8485                           
  8486                           ;main.c: 452: which_screen = MAIN_MENU;
  8487  006326  0E02               	movlw	2
  8488  006328  0100               	movlb	0	; () banked
  8489  00632A  6FF9               	movwf	_which_screen& (0+255),b
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;main.c: 453: menu_lcd();
  8493  00632C  EC72  F034         	call	_menu_lcd	;wreg free
  8494                           
  8495                           ;main.c: 454: panic_button();
  8496  006330  EC98  F04A         	call	_panic_button	;wreg free
  8497                           
  8498                           ;main.c: 456: srand(2048);
  8499  006334  0E08               	movlw	8
  8500  006336  0100               	movlb	0	; () banked
  8501  006338  6F61               	movwf	(srand@x+1)& (0+255),b
  8502  00633A  0E00               	movlw	0
  8503  00633C  6F60               	movwf	srand@x& (0+255),b
  8504  00633E  EC28  F04B         	call	_srand	;wreg free
  8505                           
  8506                           ;main.c: 459: encoderPolarity = Read_b_eep(0x02);
  8507  006342  0E00               	movlw	0
  8508  006344  0100               	movlb	0	; () banked
  8509  006346  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8510  006348  0E02               	movlw	2
  8511  00634A  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8512  00634C  ECF5  F04A         	call	_Read_b_eep	;wreg free
  8513  006350  0100               	movlb	0	; () banked
  8514  006352  6FCF               	movwf	??_main& (0+255),b
  8515  006354  31CF               	rrcf	??_main& (0+255),w,b
  8516  006356  A0D8               	btfss	status,0,c
  8517  006358  D002               	goto	u44710
  8518  00635A  8236               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8519  00635C  D001               	goto	u44725
  8520  00635E                     u44710:
  8521  00635E  9236               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8522  006360                     u44725:
  8523                           
  8524                           ;main.c: 461: ema_integer = Read_b_eep(0x03);
  8525  006360  0E00               	movlw	0
  8526  006362  0100               	movlb	0	; () banked
  8527  006364  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8528  006366  0E03               	movlw	3
  8529  006368  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8530  00636A  ECF5  F04A         	call	_Read_b_eep	;wreg free
  8531  00636E  0100               	movlb	0	; () banked
  8532  006370  6FFB               	movwf	_ema_integer& (0+255),b
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;main.c: 463: calculate_alpha();
  8536  006372  EC9D  F047         	call	_calculate_alpha	;wreg free
  8537                           
  8538                           ;main.c: 466: number_of_interrupts = (int) 500 / 2.5;
  8539  006376  0EC8               	movlw	200
  8540  006378  0102               	movlb	2	; () banked
  8541  00637A  6F88               	movwf	_number_of_interrupts& (0+255),b
  8542  00637C  0E00               	movlw	0
  8543  00637E  6F89               	movwf	(_number_of_interrupts+1)& (0+255),b
  8544  006380  0E00               	movlw	0
  8545  006382  6F8A               	movwf	(_number_of_interrupts+2)& (0+255),b
  8546  006384  0E00               	movlw	0
  8547  006386  6F8B               	movwf	(_number_of_interrupts+3)& (0+255),b
  8548                           
  8549                           ; BSR set to: 2
  8550                           ;main.c: 469: ARPEGGIO_ON = 0;
  8551  006388  9835               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
  8552                           
  8553                           ; BSR set to: 2
  8554                           ;main.c: 472: TIMER_PRELOAD = calculate_pulse_length();
  8555  00638A  EC7A  F02E         	call	_calculate_pulse_length	;wreg free
  8556  00638E  C0C2  F16D         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
  8557  006392  C0C3  F16E         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
  8558                           
  8559                           ;main.c: 475: LATCH = 0;
  8560  006396  9235               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
  8561                           
  8562                           ;main.c: 476: UN_LATCH_MODE = 0;
  8563  006398  9035               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
  8564                           
  8565                           ;main.c: 478: AUTO_LATCH = 0;
  8566  00639A  9E34               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
  8567                           
  8568                           ;main.c: 481: AUTO_RANDOMIZE = 0;
  8569  00639C  9A34               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
  8570                           
  8571                           ;main.c: 485: RESET_ON_KEY_PRESS = 1;
  8572  00639E  8635               	bsf	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
  8573                           
  8574                           ;main.c: 486: RESET_ON_KEY_RELEASE = 1;
  8575  0063A0  8435               	bsf	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
  8576                           
  8577                           ;main.c: 489: LAST_NOTE_MODE_KEY_PRESS = 0;
  8578  0063A2  9434               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
  8579                           
  8580                           ;main.c: 490: LAST_NOTE_MODE_KEY_RELEASE = 0;
  8581  0063A4  9234               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
  8582                           
  8583                           ;main.c: 491: LAST_NOTE_MODE_TRANSPOSE = 1;
  8584  0063A6  8034               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  8585                           
  8586                           ;main.c: 492: LAST_NOTE_MODE_RESET = 1;
  8587  0063A8  8E33               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  8588                           
  8589                           ;main.c: 495: skipFirstLast = 0;
  8590  0063AA  9834               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
  8591                           
  8592                           ;main.c: 498: DISPLAY_STEP_NUMBER = 0;
  8593  0063AC  9C32               	bcf	_DISPLAY_STEP_NUMBER/(0+8),_DISPLAY_STEP_NUMBER& (0+7),c
  8594                           
  8595                           ;main.c: 500: TMR0IE = 1;
  8596  0063AE  8AF2               	bsf	intcon,5,c	;volatile
  8597                           
  8598                           ;main.c: 501: TMR0ON = 0;
  8599  0063B0  9ED5               	bcf	4053,7,c	;volatile
  8600                           
  8601                           ;main.c: 503: TMR2IE = 1;
  8602  0063B2  829D               	bsf	3997,1,c	;volatile
  8603                           
  8604                           ;main.c: 504: TMR2ON = 1;
  8605  0063B4  84CA               	bsf	4042,2,c	;volatile
  8606                           
  8607                           ;main.c: 507: initializeSaveSlotsOnce();
  8608  0063B6  ECC2  F047         	call	_initializeSaveSlotsOnce	;wreg free
  8609                           
  8610                           ;main.c: 508: selectSlotOnBoot();
  8611  0063BA  ECA9  F04A         	call	_selectSlotOnBoot	;wreg free
  8612                           
  8613                           ;main.c: 511: if((ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYPE == UP_DOWN) || (ARPEGGIO_TYPE =
      +                          = RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING) || (ARPEGGIO_TYPE == AS_PRESSED)){
  8614  0063BE  0100               	movlb	0	; () banked
  8615  0063C0  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
  8616  0063C2  B4D8               	btfsc	status,2,c
  8617  0063C4  D010               	goto	u44770
  8618                           
  8619                           ; BSR set to: 0
  8620  0063C6  0E02               	movlw	2
  8621  0063C8  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
  8622  0063CA  B4D8               	btfsc	status,2,c
  8623  0063CC  D00C               	goto	u44770
  8624                           
  8625                           ; BSR set to: 0
  8626  0063CE  0E05               	movlw	5
  8627  0063D0  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
  8628  0063D2  B4D8               	btfsc	status,2,c
  8629  0063D4  D008               	goto	u44770
  8630                           
  8631                           ; BSR set to: 0
  8632  0063D6  0E04               	movlw	4
  8633  0063D8  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
  8634  0063DA  B4D8               	btfsc	status,2,c
  8635  0063DC  D004               	goto	u44770
  8636                           
  8637                           ; BSR set to: 0
  8638  0063DE  0E06               	movlw	6
  8639  0063E0  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
  8640  0063E2  A4D8               	btfss	status,2,c
  8641  0063E4  D002               	goto	l4825
  8642  0063E6                     u44770:
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;main.c: 512: startingDirection = UP;
  8646                           
  8647                           ; BSR set to: 0
  8648  0063E6  0E00               	movlw	0
  8649  0063E8  6FE9               	movwf	_startingDirection& (0+255),b
  8650  0063EA                     l4825:
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;main.c: 513: }
  8654                           ;main.c: 515: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP)){
  8655                           
  8656                           ; BSR set to: 0
  8657  0063EA  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
  8658  0063EC  B4D8               	btfsc	status,2,c
  8659  0063EE  D004               	goto	u44790
  8660                           
  8661                           ; BSR set to: 0
  8662  0063F0  0E03               	movlw	3
  8663  0063F2  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
  8664  0063F4  A4D8               	btfss	status,2,c
  8665  0063F6  D002               	goto	l4828
  8666  0063F8                     u44790:
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;main.c: 516: startingDirection = DOWN;
  8670                           
  8671                           ; BSR set to: 0
  8672  0063F8  0E01               	movlw	1
  8673  0063FA  6FE9               	movwf	_startingDirection& (0+255),b
  8674  0063FC                     l4828:
  8675                           
  8676                           ; BSR set to: 0
  8677                           ;main.c: 517: }
  8678                           ;main.c: 519: displayTest();
  8679                           
  8680                           ; BSR set to: 0
  8681  0063FC  EC02  F040         	call	_displayTest	;wreg free
  8682  006400                     
  8683                           ;main.c: 523: digitalInputs();
  8684  006400  ECD3  F046         	call	_digitalInputs	;wreg free
  8685                           
  8686                           ;main.c: 524: analogInputs();
  8687  006404  EC45  F04B         	call	_analogInputs	;wreg free
  8688                           
  8689                           ;main.c: 525: processEncoderBuxton();
  8690  006408  EC09  F000         	call	_processEncoderBuxton	;wreg free
  8691                           
  8692                           ;main.c: 528: TMR2ON = 0;
  8693  00640C  94CA               	bcf	4042,2,c	;volatile
  8694                           
  8695                           ;main.c: 529: PORTC &= 0xF0;
  8696  00640E  0EF0               	movlw	240
  8697  006410  1682               	andwf	3970,f,c	;volatile
  8698                           
  8699                           ;main.c: 530: menu_lcd();
  8700  006412  EC72  F034         	call	_menu_lcd	;wreg free
  8701                           
  8702                           ;main.c: 531: TMR2ON = 1;
  8703  006416  84CA               	bsf	4042,2,c	;volatile
  8704  006418  D7F3               	goto	l4831
  8705  00641A                     __end_of_main:
  8706                           	opt stack 0
  8707                           tblptru	equ	0xFF8
  8708                           tblptrh	equ	0xFF7
  8709                           tblptrl	equ	0xFF6
  8710                           tablat	equ	0xFF5
  8711                           intcon	equ	0xFF2
  8712                           postinc0	equ	0xFEE
  8713                           wreg	equ	0xFE8
  8714                           postdec1	equ	0xFE5
  8715                           fsr1l	equ	0xFE1
  8716                           status	equ	0xFD8
  8717                           
  8718 ;; *************** function _srand *****************
  8719 ;; Defined at:
  8720 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;  x               2    0[BANK0 ] unsigned int 
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;		None
  8725 ;; Return value:  Size  Location     Type
  8726 ;;                  1    wreg      void 
  8727 ;; Registers used:
  8728 ;;		status,2
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8734 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;Total ram usage:        2 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; Hardware stack levels required when called:    5
  8741 ;; This function calls:
  8742 ;;		Nothing
  8743 ;; This function is called by:
  8744 ;;		_main
  8745 ;; This function uses a non-reentrant model
  8746 ;;
  8747                           
  8748                           	psect	text1
  8749  009650                     __ptext1:
  8750                           	opt stack 0
  8751  009650                     _srand:
  8752                           	opt stack 25
  8753                           
  8754                           ;incstack = 0
  8755  009650  C060  F1E7         	movff	srand@x,_randx
  8756  009654  C061  F1E8         	movff	srand@x+1,_randx+1
  8757  009658  0101               	movlb	1	; () banked
  8758  00965A  6BE9               	clrf	(_randx+2)& (0+255),b
  8759  00965C  6BEA               	clrf	(_randx+3)& (0+255),b
  8760                           
  8761                           ; BSR set to: 1
  8762  00965E  0012               	return		;funcret
  8763  009660                     __end_of_srand:
  8764                           	opt stack 0
  8765                           tblptru	equ	0xFF8
  8766                           tblptrh	equ	0xFF7
  8767                           tblptrl	equ	0xFF6
  8768                           tablat	equ	0xFF5
  8769                           intcon	equ	0xFF2
  8770                           postinc0	equ	0xFEE
  8771                           wreg	equ	0xFE8
  8772                           postdec1	equ	0xFE5
  8773                           fsr1l	equ	0xFE1
  8774                           status	equ	0xFD8
  8775                           
  8776 ;; *************** function _setup *****************
  8777 ;; Defined at:
  8778 ;;		line 172 in file "main.c"
  8779 ;; Parameters:    Size  Location     Type
  8780 ;;		None
  8781 ;; Auto vars:     Size  Location     Type
  8782 ;;		None
  8783 ;; Return value:  Size  Location     Type
  8784 ;;                  1    wreg      void 
  8785 ;; Registers used:
  8786 ;;		wreg, status,2, status,0
  8787 ;; Tracked objects:
  8788 ;;		On entry : 0/0
  8789 ;;		On exit  : 0/0
  8790 ;;		Unchanged: 0/0
  8791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;Total ram usage:        0 bytes
  8797 ;; Hardware stack levels used:    1
  8798 ;; Hardware stack levels required when called:    5
  8799 ;; This function calls:
  8800 ;;		Nothing
  8801 ;; This function is called by:
  8802 ;;		_main
  8803 ;; This function uses a non-reentrant model
  8804 ;;
  8805                           
  8806                           	psect	text2
  8807  00889C                     __ptext2:
  8808                           	opt stack 0
  8809  00889C                     _setup:
  8810                           	opt stack 25
  8811                           
  8812                           ;main.c: 175: TRISA = 0b000001;
  8813                           
  8814                           ; BSR set to: 1
  8815                           ;incstack = 0
  8816  00889C  0E01               	movlw	1
  8817  00889E  6E92               	movwf	3986,c	;volatile
  8818                           
  8819                           ;main.c: 179: TRISB = 0b00110001;
  8820  0088A0  0E31               	movlw	49
  8821  0088A2  6E93               	movwf	3987,c	;volatile
  8822                           
  8823                           ;main.c: 187: TRISC = 0b10010000;
  8824  0088A4  0E90               	movlw	144
  8825  0088A6  6E94               	movwf	3988,c	;volatile
  8826                           
  8827                           ;main.c: 193: TRISD = 0b00000000;
  8828  0088A8  0E00               	movlw	0
  8829  0088AA  6E95               	movwf	3989,c	;volatile
  8830                           
  8831                           ;main.c: 196: TRISE = 0b000;
  8832  0088AC  0E00               	movlw	0
  8833  0088AE  6E96               	movwf	3990,c	;volatile
  8834                           
  8835                           ;main.c: 201: PORTA = 0x00;
  8836  0088B0  0E00               	movlw	0
  8837  0088B2  6E80               	movwf	3968,c	;volatile
  8838                           
  8839                           ;main.c: 202: PORTB = 0x00;
  8840  0088B4  0E00               	movlw	0
  8841  0088B6  6E81               	movwf	3969,c	;volatile
  8842                           
  8843                           ;main.c: 203: PORTC = 0x00;
  8844  0088B8  0E00               	movlw	0
  8845  0088BA  6E82               	movwf	3970,c	;volatile
  8846                           
  8847                           ;main.c: 204: PORTD = 0x00;
  8848  0088BC  0E00               	movlw	0
  8849  0088BE  6E83               	movwf	3971,c	;volatile
  8850                           
  8851                           ;main.c: 205: PORTE = 0x00;
  8852  0088C0  0E00               	movlw	0
  8853  0088C2  6E84               	movwf	3972,c	;volatile
  8854                           
  8855                           ;main.c: 208: IPEN = 0;
  8856  0088C4  9ED0               	bcf	4048,7,c	;volatile
  8857                           
  8858                           ;main.c: 211: RBIF = 0;
  8859  0088C6  90F2               	bcf	intcon,0,c	;volatile
  8860                           
  8861                           ;main.c: 212: RBIE = 1;
  8862  0088C8  86F2               	bsf	intcon,3,c	;volatile
  8863                           
  8864                           ;main.c: 214: INTEDG0 = 0;
  8865  0088CA  9CF1               	bcf	intcon2,6,c	;volatile
  8866                           
  8867                           ;main.c: 215: INT0IF = 0;
  8868  0088CC  92F2               	bcf	intcon,1,c	;volatile
  8869                           
  8870                           ;main.c: 216: INT0IE = 1;
  8871  0088CE  88F2               	bsf	intcon,4,c	;volatile
  8872                           
  8873                           ;main.c: 219: T08BIT = 0;
  8874  0088D0  9CD5               	bcf	4053,6,c	;volatile
  8875                           
  8876                           ;main.c: 220: T0CS = 0;
  8877  0088D2  9AD5               	bcf	4053,5,c	;volatile
  8878                           
  8879                           ;main.c: 221: T0CON &= 0b11111000;
  8880  0088D4  0EF8               	movlw	248
  8881  0088D6  16D5               	andwf	4053,f,c	;volatile
  8882                           
  8883                           ;main.c: 222: T0CON |= 0b00000001;
  8884  0088D8  80D5               	bsf	4053,0,c	;volatile
  8885                           
  8886                           ;main.c: 223: PSA = 0;
  8887  0088DA  96D5               	bcf	4053,3,c	;volatile
  8888                           
  8889                           ;main.c: 224: TMR0ON = 0;
  8890  0088DC  9ED5               	bcf	4053,7,c	;volatile
  8891                           
  8892                           ;main.c: 225: TMR0IE = 1;
  8893  0088DE  8AF2               	bsf	intcon,5,c	;volatile
  8894                           
  8895                           ;main.c: 228: T2CON = 0b01000001;
  8896  0088E0  0E41               	movlw	65
  8897  0088E2  6ECA               	movwf	4042,c	;volatile
  8898                           
  8899                           ;main.c: 229: TMR2 = 0x83;
  8900  0088E4  0E83               	movlw	131
  8901  0088E6  6ECC               	movwf	4044,c	;volatile
  8902                           
  8903                           ;main.c: 230: TMR2ON = 0;
  8904  0088E8  94CA               	bcf	4042,2,c	;volatile
  8905                           
  8906                           ;main.c: 231: TMR2IE = 1;
  8907  0088EA  829D               	bsf	3997,1,c	;volatile
  8908                           
  8909                           ;main.c: 235: TXEN = 1;
  8910  0088EC  8AAC               	bsf	4012,5,c	;volatile
  8911                           
  8912                           ;main.c: 236: SYNC = 0;
  8913  0088EE  98AC               	bcf	4012,4,c	;volatile
  8914                           
  8915                           ;main.c: 239: SPEN = 1;
  8916  0088F0  8EAB               	bsf	4011,7,c	;volatile
  8917                           
  8918                           ;main.c: 240: CREN = 1;
  8919  0088F2  88AB               	bsf	4011,4,c	;volatile
  8920                           
  8921                           ;main.c: 243: BRGH = 0;
  8922  0088F4  94AC               	bcf	4012,2,c	;volatile
  8923                           
  8924                           ;main.c: 244: SPBRG = 9;
  8925  0088F6  0E09               	movlw	9
  8926  0088F8  6EAF               	movwf	4015,c	;volatile
  8927                           
  8928                           ;main.c: 246: PEIE = 1;
  8929  0088FA  8CF2               	bsf	intcon,6,c	;volatile
  8930                           
  8931                           ;main.c: 247: GIE = 1;
  8932  0088FC  8EF2               	bsf	intcon,7,c	;volatile
  8933  0088FE  0012               	return		;funcret
  8934  008900                     __end_of_setup:
  8935                           	opt stack 0
  8936                           tblptru	equ	0xFF8
  8937                           tblptrh	equ	0xFF7
  8938                           tblptrl	equ	0xFF6
  8939                           tablat	equ	0xFF5
  8940                           intcon	equ	0xFF2
  8941                           intcon2	equ	0xFF1
  8942                           postinc0	equ	0xFEE
  8943                           wreg	equ	0xFE8
  8944                           postdec1	equ	0xFE5
  8945                           fsr1l	equ	0xFE1
  8946                           status	equ	0xFD8
  8947                           
  8948 ;; *************** function _selectSlotOnBoot *****************
  8949 ;; Defined at:
  8950 ;;		line 41 in file "eeprom.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;		None
  8953 ;; Auto vars:     Size  Location     Type
  8954 ;;  slot            1  108[BANK0 ] unsigned char 
  8955 ;; Return value:  Size  Location     Type
  8956 ;;                  1    wreg      void 
  8957 ;; Registers used:
  8958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8959 ;; Tracked objects:
  8960 ;;		On entry : 0/0
  8961 ;;		On exit  : 0/0
  8962 ;;		Unchanged: 0/0
  8963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;Total ram usage:        1 bytes
  8969 ;; Hardware stack levels used:    1
  8970 ;; Hardware stack levels required when called:    8
  8971 ;; This function calls:
  8972 ;;		_Read_b_eep
  8973 ;;		_loadFromEEPROM
  8974 ;; This function is called by:
  8975 ;;		_main
  8976 ;; This function uses a non-reentrant model
  8977 ;;
  8978                           
  8979                           	psect	text3
  8980  009552                     __ptext3:
  8981                           	opt stack 0
  8982  009552                     _selectSlotOnBoot:
  8983                           	opt stack 22
  8984                           
  8985                           ;eeprom.c: 43: unsigned char slot = Read_b_eep(0);
  8986                           
  8987                           ;incstack = 0
  8988  009552  0E00               	movlw	0
  8989  009554  0100               	movlb	0	; () banked
  8990  009556  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8991  009558  0E00               	movlw	0
  8992  00955A  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8993  00955C  ECF5  F04A         	call	_Read_b_eep	;wreg free
  8994  009560  0100               	movlb	0	; () banked
  8995  009562  6FCC               	movwf	selectSlotOnBoot@slot& (0+255),b
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;eeprom.c: 45: if (slot == DEFAULT){
  8999  009564  51CC               	movf	selectSlotOnBoot@slot& (0+255),w,b
  9000  009566  B4D8               	btfsc	status,2,c
  9001  009568  0012               	return	
  9002                           
  9003                           ; BSR set to: 0
  9004                           ;eeprom.c: 49: else {
  9005                           ;eeprom.c: 50: loadFromEEPROM(slot);
  9006                           
  9007                           ; BSR set to: 0
  9008                           
  9009                           ; BSR set to: 0
  9010                           ;eeprom.c: 47: }
  9011                           
  9012                           ; BSR set to: 0
  9013                           ;eeprom.c: 46: return;
  9014  00956A  51CC               	movf	selectSlotOnBoot@slot& (0+255),w,b
  9015  00956C  EC24  F025         	call	_loadFromEEPROM
  9016  009570  0012               	return	
  9017  009572                     __end_of_selectSlotOnBoot:
  9018                           	opt stack 0
  9019                           tblptru	equ	0xFF8
  9020                           tblptrh	equ	0xFF7
  9021                           tblptrl	equ	0xFF6
  9022                           tablat	equ	0xFF5
  9023                           intcon	equ	0xFF2
  9024                           intcon2	equ	0xFF1
  9025                           postinc0	equ	0xFEE
  9026                           wreg	equ	0xFE8
  9027                           postdec1	equ	0xFE5
  9028                           fsr1l	equ	0xFE1
  9029                           status	equ	0xFD8
  9030                           
  9031 ;; *************** function _panic_button *****************
  9032 ;; Defined at:
  9033 ;;		line 426 in file "main.c"
  9034 ;; Parameters:    Size  Location     Type
  9035 ;;		None
  9036 ;; Auto vars:     Size  Location     Type
  9037 ;;		None
  9038 ;; Return value:  Size  Location     Type
  9039 ;;                  1    wreg      void 
  9040 ;; Registers used:
  9041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9042 ;; Tracked objects:
  9043 ;;		On entry : 0/0
  9044 ;;		On exit  : 0/0
  9045 ;;		Unchanged: 0/0
  9046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;Total ram usage:        0 bytes
  9052 ;; Hardware stack levels used:    1
  9053 ;; Hardware stack levels required when called:    7
  9054 ;; This function calls:
  9055 ;;		_controlChange
  9056 ;; This function is called by:
  9057 ;;		_main
  9058 ;; This function uses a non-reentrant model
  9059 ;;
  9060                           
  9061                           	psect	text4
  9062  009530                     __ptext4:
  9063                           	opt stack 0
  9064  009530                     _panic_button:
  9065                           	opt stack 23
  9066                           
  9067                           ;main.c: 427: controlChange (channel, all_notes_off, 0x00);
  9068                           
  9069                           ;incstack = 0
  9070  009530  0E7B               	movlw	123
  9071  009532  0100               	movlb	0	; () banked
  9072  009534  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
  9073  009536  0E00               	movlw	0
  9074  009538  6F6C               	movwf	controlChange@value& (0+255),b
  9075  00953A  51F6               	movf	_channel& (0+255),w,b
  9076  00953C  EC4C  F049         	call	_controlChange
  9077                           
  9078                           ;main.c: 428: controlChange (drumchannel, all_notes_off, 0x00);
  9079  009540  0E7B               	movlw	123
  9080  009542  0100               	movlb	0	; () banked
  9081  009544  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
  9082  009546  0E00               	movlw	0
  9083  009548  6F6C               	movwf	controlChange@value& (0+255),b
  9084  00954A  51FE               	movf	_drumchannel& (0+255),w,b
  9085  00954C  EC4C  F049         	call	_controlChange
  9086  009550  0012               	return		;funcret
  9087  009552                     __end_of_panic_button:
  9088                           	opt stack 0
  9089                           tblptru	equ	0xFF8
  9090                           tblptrh	equ	0xFF7
  9091                           tblptrl	equ	0xFF6
  9092                           tablat	equ	0xFF5
  9093                           intcon	equ	0xFF2
  9094                           intcon2	equ	0xFF1
  9095                           postinc0	equ	0xFEE
  9096                           wreg	equ	0xFE8
  9097                           postdec1	equ	0xFE5
  9098                           fsr1l	equ	0xFE1
  9099                           status	equ	0xFD8
  9100                           
  9101 ;; *************** function _menu_lcd *****************
  9102 ;; Defined at:
  9103 ;;		line 294 in file "menu.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;		None
  9106 ;; Auto vars:     Size  Location     Type
  9107 ;;		None
  9108 ;; Return value:  Size  Location     Type
  9109 ;;                  1    wreg      void 
  9110 ;; Registers used:
  9111 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9112 ;; Tracked objects:
  9113 ;;		On entry : 0/0
  9114 ;;		On exit  : 0/0
  9115 ;;		Unchanged: 0/0
  9116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9119 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9120 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9121 ;;Total ram usage:        1 bytes
  9122 ;; Hardware stack levels used:    1
  9123 ;; Hardware stack levels required when called:   16
  9124 ;; This function calls:
  9125 ;;		_Function_A
  9126 ;;		_Function_B
  9127 ;;		_Function_C
  9128 ;;		_Function_D
  9129 ;;		_Function_E
  9130 ;;		_Function_F
  9131 ;;		_Function_G
  9132 ;;		_Function_H
  9133 ;;		_Lcd_Clear
  9134 ;;		_Lcd_Print_String
  9135 ;;		_Lcd_Set_Cursor
  9136 ;;		___lbmod
  9137 ;;		___wmul
  9138 ;;		_exitFunction
  9139 ;; This function is called by:
  9140 ;;		_main
  9141 ;; This function uses a non-reentrant model
  9142 ;;
  9143                           
  9144                           	psect	text5
  9145  0068E4                     __ptext5:
  9146                           	opt stack 0
  9147  0068E4                     _menu_lcd:
  9148                           	opt stack 14
  9149                           
  9150                           ;menu.c: 296: which_screen = MAIN_MENU;
  9151                           
  9152                           ;incstack = 0
  9153  0068E4  0E02               	movlw	2
  9154  0068E6  0100               	movlb	0	; () banked
  9155  0068E8  6FF9               	movwf	_which_screen& (0+255),b
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;menu.c: 299: if (lcd_print_once == 0) {
  9159  0068EA  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9160  0068EC  D027               	goto	l3411
  9161                           
  9162                           ; BSR set to: 0
  9163                           ;menu.c: 301: Lcd_Clear();
  9164  0068EE  EC30  F04B         	call	_Lcd_Clear	;wreg free
  9165                           
  9166                           ;menu.c: 302: Lcd_Set_Cursor(1,1);
  9167  0068F2  0E01               	movlw	1
  9168  0068F4  0100               	movlb	0	; () banked
  9169  0068F6  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9170  0068F8  0E01               	movlw	1
  9171  0068FA  ECF7  F045         	call	_Lcd_Set_Cursor
  9172                           
  9173                           ;menu.c: 308: Lcd_Print_String(LCD_STRINGS[(mainMenu.selector % mainMenu.number) + mainM
      +                          enu.address]);
  9174  0068FE  C168  F060         	movff	_mainMenu,___lbmod@divisor
  9175  006902  0101               	movlb	1	; () banked
  9176  006904  516A               	movf	(_mainMenu+2)& (0+255),w,b
  9177  006906  ECC8  F049         	call	___lbmod
  9178  00690A  0100               	movlb	0	; () banked
  9179  00690C  6FCE               	movwf	??_menu_lcd& (0+255),b
  9180  00690E  51CE               	movf	??_menu_lcd& (0+255),w,b
  9181  006910  0101               	movlb	1	; () banked
  9182  006912  2569               	addwf	(_mainMenu+1)& (0+255),w,b
  9183  006914  0100               	movlb	0	; () banked
  9184  006916  6F64               	movwf	___wmul@multiplier& (0+255),b
  9185  006918  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9186  00691A  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9187  00691C  0E00               	movlw	0
  9188  00691E  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9189  006920  0E11               	movlw	17
  9190  006922  6F66               	movwf	___wmul@multiplicand& (0+255),b
  9191  006924  EC71  F04A         	call	___wmul	;wreg free
  9192  006928  0E9E               	movlw	low _LCD_STRINGS
  9193  00692A  0100               	movlb	0	; () banked
  9194  00692C  2564               	addwf	?___wmul& (0+255),w,b
  9195  00692E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9196  006930  0EF3               	movlw	high _LCD_STRINGS
  9197  006932  2165               	addwfc	(?___wmul+1)& (0+255),w,b
  9198  006934  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9199  006936  ECBD  F040         	call	_Lcd_Print_String	;wreg free
  9200                           
  9201                           ;menu.c: 310: lcd_print_once = 1;
  9202  00693A  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9203  00693C                     l3411:
  9204                           
  9205                           ;menu.c: 311: }
  9206                           ;menu.c: 313: if(encoder_click == 1) {
  9207  00693C  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9208  00693E  0012               	return	
  9209                           
  9210                           ;menu.c: 315: encoder_click = 0;
  9211  006940  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9212                           
  9213                           ;menu.c: 317: switch (mainMenu.selector) {
  9214  006942  D026               	goto	l3413
  9215  006944                     
  9216                           ;menu.c: 319: Function_A();
  9217  006944  ECC3  F03F         	call	_Function_A	;wreg free
  9218                           
  9219                           ;menu.c: 320: exitFunction();
  9220  006948  EC28  F048         	call	_exitFunction	;wreg free
  9221                           
  9222                           ;menu.c: 321: break;
  9223  00694C  0012               	return	
  9224  00694E                     
  9225                           ;menu.c: 323: Function_H();
  9226  00694E  EC2E  F037         	call	_Function_H	;wreg free
  9227                           
  9228                           ;menu.c: 324: exitFunction();
  9229  006952  EC28  F048         	call	_exitFunction	;wreg free
  9230                           
  9231                           ;menu.c: 325: break;
  9232  006956  0012               	return	
  9233  006958                     
  9234                           ;menu.c: 327: Function_B();
  9235  006958  ECC5  F03E         	call	_Function_B	;wreg free
  9236                           
  9237                           ;menu.c: 328: exitFunction();
  9238  00695C  EC28  F048         	call	_exitFunction	;wreg free
  9239                           
  9240                           ;menu.c: 329: break;
  9241  006960  0012               	return	
  9242  006962                     
  9243                           ;menu.c: 331: Function_C();
  9244  006962  ECB3  F03C         	call	_Function_C	;wreg free
  9245                           
  9246                           ;menu.c: 332: exitFunction();
  9247  006966  EC28  F048         	call	_exitFunction	;wreg free
  9248                           
  9249                           ;menu.c: 333: break;
  9250  00696A  0012               	return	
  9251  00696C                     
  9252                           ;menu.c: 335: Function_D();
  9253  00696C  EC3A  F03D         	call	_Function_D	;wreg free
  9254                           
  9255                           ;menu.c: 336: exitFunction();
  9256  006970  EC28  F048         	call	_exitFunction	;wreg free
  9257                           
  9258                           ;menu.c: 337: break;
  9259  006974  0012               	return	
  9260  006976                     
  9261                           ;menu.c: 339: Function_E();
  9262  006976  ECD7  F042         	call	_Function_E	;wreg free
  9263                           
  9264                           ;menu.c: 340: exitFunction();
  9265  00697A  EC28  F048         	call	_exitFunction	;wreg free
  9266                           
  9267                           ;menu.c: 341: break;
  9268  00697E  0012               	return	
  9269  006980                     
  9270                           ;menu.c: 343: Function_F();
  9271  006980  EC7D  F043         	call	_Function_F	;wreg free
  9272                           
  9273                           ;menu.c: 344: exitFunction();
  9274  006984  EC28  F048         	call	_exitFunction	;wreg free
  9275                           
  9276                           ;menu.c: 345: break;
  9277  006988  0012               	return	
  9278  00698A                     
  9279                           ;menu.c: 347: Function_G();
  9280  00698A  EC95  F03B         	call	_Function_G	;wreg free
  9281                           
  9282                           ;menu.c: 353: }
  9283                           
  9284                           ;menu.c: 352: break;
  9285                           
  9286                           ;menu.c: 351: default:
  9287                           
  9288                           ;menu.c: 349: break;
  9289  00698E  0012               	return	
  9290  006990                     l3413:
  9291  006990  0101               	movlb	1	; () banked
  9292  006992  516A               	movf	(_mainMenu+2)& (0+255),w,b
  9293                           
  9294                           ; Switch size 1, requested type "space"
  9295                           ; Number of cases is 8, Range of values is 0 to 7
  9296                           ; switch strategies available:
  9297                           ; Name         Instructions Cycles
  9298                           ; simple_byte           25    13 (average)
  9299                           ;	Chosen strategy is simple_byte
  9300  006994  0A00               	xorlw	0	; case 0
  9301  006996  B4D8               	btfsc	status,2,c
  9302  006998  D7D5               	goto	l3414
  9303  00699A  0A01               	xorlw	1	; case 1
  9304  00699C  B4D8               	btfsc	status,2,c
  9305  00699E  D7D7               	goto	l3416
  9306  0069A0  0A03               	xorlw	3	; case 2
  9307  0069A2  B4D8               	btfsc	status,2,c
  9308  0069A4  D7D9               	goto	l3417
  9309  0069A6  0A01               	xorlw	1	; case 3
  9310  0069A8  B4D8               	btfsc	status,2,c
  9311  0069AA  D7DB               	goto	l3418
  9312  0069AC  0A07               	xorlw	7	; case 4
  9313  0069AE  B4D8               	btfsc	status,2,c
  9314  0069B0  D7DD               	goto	l3419
  9315  0069B2  0A01               	xorlw	1	; case 5
  9316  0069B4  B4D8               	btfsc	status,2,c
  9317  0069B6  D7DF               	goto	l3420
  9318  0069B8  0A03               	xorlw	3	; case 6
  9319  0069BA  B4D8               	btfsc	status,2,c
  9320  0069BC  D7E1               	goto	l3421
  9321  0069BE  0A01               	xorlw	1	; case 7
  9322  0069C0  A4D8               	btfss	status,2,c
  9323                           
  9324                           ; BSR set to: 1
  9325  0069C2  0012               	return	
  9326  0069C4  D7E2               	goto	l3422
  9327  0069C6                     __end_of_menu_lcd:
  9328                           	opt stack 0
  9329                           tblptru	equ	0xFF8
  9330                           tblptrh	equ	0xFF7
  9331                           tblptrl	equ	0xFF6
  9332                           tablat	equ	0xFF5
  9333                           intcon	equ	0xFF2
  9334                           intcon2	equ	0xFF1
  9335                           postinc0	equ	0xFEE
  9336                           wreg	equ	0xFE8
  9337                           postdec1	equ	0xFE5
  9338                           fsr1l	equ	0xFE1
  9339                           status	equ	0xFD8
  9340                           
  9341 ;; *************** function _Lcd_Clear *****************
  9342 ;; Defined at:
  9343 ;;		line 53 in file "lcd.c"
  9344 ;; Parameters:    Size  Location     Type
  9345 ;;		None
  9346 ;; Auto vars:     Size  Location     Type
  9347 ;;		None
  9348 ;; Return value:  Size  Location     Type
  9349 ;;                  1    wreg      void 
  9350 ;; Registers used:
  9351 ;;		wreg, status,2, cstack
  9352 ;; Tracked objects:
  9353 ;;		On entry : 0/0
  9354 ;;		On exit  : 0/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;Total ram usage:        0 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    7
  9364 ;; This function calls:
  9365 ;;		_Lcd_Cmd
  9366 ;; This function is called by:
  9367 ;;		_menu_lcd
  9368 ;; This function uses a non-reentrant model
  9369 ;;
  9370                           
  9371                           	psect	text6
  9372  009660                     __ptext6:
  9373                           	opt stack 0
  9374  009660                     _Lcd_Clear:
  9375                           	opt stack 22
  9376                           
  9377                           ;lcd.c: 55: Lcd_Cmd(0);
  9378                           
  9379                           ;incstack = 0
  9380  009660  0E00               	movlw	0
  9381  009662  EC85  F04A         	call	_Lcd_Cmd
  9382                           
  9383                           ;lcd.c: 56: Lcd_Cmd(1);
  9384  009666  0E01               	movlw	1
  9385  009668  EC85  F04A         	call	_Lcd_Cmd
  9386  00966C  0012               	return		;funcret
  9387  00966E                     __end_of_Lcd_Clear:
  9388                           	opt stack 0
  9389                           tblptru	equ	0xFF8
  9390                           tblptrh	equ	0xFF7
  9391                           tblptrl	equ	0xFF6
  9392                           tablat	equ	0xFF5
  9393                           intcon	equ	0xFF2
  9394                           intcon2	equ	0xFF1
  9395                           postinc0	equ	0xFEE
  9396                           wreg	equ	0xFE8
  9397                           postdec1	equ	0xFE5
  9398                           fsr1l	equ	0xFE1
  9399                           status	equ	0xFD8
  9400                           
  9401 ;; *************** function _Function_H *****************
  9402 ;; Defined at:
  9403 ;;		line 986 in file "menu.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;		None
  9406 ;; Auto vars:     Size  Location     Type
  9407 ;;		None
  9408 ;; Return value:  Size  Location     Type
  9409 ;;                  1    wreg      void 
  9410 ;; Registers used:
  9411 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9412 ;; Tracked objects:
  9413 ;;		On entry : 0/0
  9414 ;;		On exit  : 0/0
  9415 ;;		Unchanged: 0/0
  9416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;Total ram usage:        1 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; Hardware stack levels required when called:   15
  9424 ;; This function calls:
  9425 ;;		_Function_H_1
  9426 ;;		_Function_H_2
  9427 ;;		_Function_H_3
  9428 ;;		_Function_H_4
  9429 ;;		_Function_H_5
  9430 ;;		_Function_H_6
  9431 ;;		_Function_H_7
  9432 ;;		_Function_H_8
  9433 ;;		_Function_H_9
  9434 ;;		_Lcd_Print_String
  9435 ;;		___lbmod
  9436 ;;		___wmul
  9437 ;;		_clear_row2
  9438 ;;		_processEncoderBuxton
  9439 ;; This function is called by:
  9440 ;;		_menu_lcd
  9441 ;; This function uses a non-reentrant model
  9442 ;;
  9443                           
  9444                           	psect	text7
  9445  006E5C                     __ptext7:
  9446                           	opt stack 0
  9447  006E5C                     _Function_H:
  9448                           	opt stack 14
  9449                           
  9450                           ;menu.c: 988: which_screen = ARPEGGIATOR_MENU;
  9451                           
  9452                           ;incstack = 0
  9453  006E5C  0E19               	movlw	25
  9454  006E5E  0100               	movlb	0	; () banked
  9455  006E60  6FF9               	movwf	_which_screen& (0+255),b
  9456                           
  9457                           ; BSR set to: 0
  9458                           ;menu.c: 989: lcd_print_once = 0;
  9459  006E62  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9460                           
  9461                           ;menu.c: 991: while(encoder_click == 0) {
  9462  006E64  D022               	goto	l3631
  9463  006E66                     
  9464                           ;menu.c: 992: processEncoderBuxton();
  9465                           
  9466                           ; BSR set to: 0
  9467  006E66  EC09  F000         	call	_processEncoderBuxton	;wreg free
  9468                           
  9469                           ;menu.c: 993: if (lcd_print_once == 0) {
  9470  006E6A  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9471  006E6C  D01D               	goto	l3633
  9472                           
  9473                           ;menu.c: 994: clear_row2();
  9474  006E6E  EC49  F04A         	call	_clear_row2	;wreg free
  9475                           
  9476                           ;menu.c: 995: Lcd_Print_String(LCD_STRINGS[(arpeggiatorMenu.selector % arpeggiatorMenu.n
      +                          umber) + arpeggiatorMenu.address]);
  9477  006E72  C03B  F060         	movff	_arpeggiatorMenu,___lbmod@divisor
  9478  006E76  503D               	movf	_arpeggiatorMenu+2,w,c
  9479  006E78  ECC8  F049         	call	___lbmod
  9480  006E7C  0100               	movlb	0	; () banked
  9481  006E7E  6FCC               	movwf	??_Function_H& (0+255),b
  9482  006E80  51CC               	movf	??_Function_H& (0+255),w,b
  9483  006E82  243C               	addwf	_arpeggiatorMenu+1,w,c
  9484  006E84  6F64               	movwf	___wmul@multiplier& (0+255),b
  9485  006E86  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9486  006E88  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9487  006E8A  0E00               	movlw	0
  9488  006E8C  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9489  006E8E  0E11               	movlw	17
  9490  006E90  6F66               	movwf	___wmul@multiplicand& (0+255),b
  9491  006E92  EC71  F04A         	call	___wmul	;wreg free
  9492  006E96  0E9E               	movlw	low _LCD_STRINGS
  9493  006E98  0100               	movlb	0	; () banked
  9494  006E9A  2564               	addwf	?___wmul& (0+255),w,b
  9495  006E9C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9496  006E9E  0EF3               	movlw	high _LCD_STRINGS
  9497  006EA0  2165               	addwfc	(?___wmul+1)& (0+255),w,b
  9498  006EA2  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9499  006EA4  ECBD  F040         	call	_Lcd_Print_String	;wreg free
  9500  006EA8                     l3633:
  9501                           
  9502                           ;menu.c: 996: }
  9503                           ;menu.c: 997: lcd_print_once = 1;
  9504  006EA8  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9505  006EAA                     l3631:
  9506  006EAA  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9507  006EAC  D7DC               	goto	l3632
  9508                           
  9509                           ;menu.c: 998: }
  9510                           ;menu.c: 1000: if(arpeggiatorMenu.selector == 0) {Function_H_1();}
  9511  006EAE  503D               	movf	_arpeggiatorMenu+2,w,c
  9512  006EB0  B4D8               	btfsc	status,2,c
  9513  006EB2  ECAF  F03A         	call	_Function_H_1	;wreg free
  9514                           
  9515                           ;menu.c: 1001: if(arpeggiatorMenu.selector == 1) {Function_H_2();}
  9516  006EB6  043D               	decf	_arpeggiatorMenu+2,w,c
  9517  006EB8  B4D8               	btfsc	status,2,c
  9518  006EBA  ECE7  F043         	call	_Function_H_2	;wreg free
  9519                           
  9520                           ;menu.c: 1002: if(arpeggiatorMenu.selector == 2) {Function_H_3();}
  9521  006EBE  0E02               	movlw	2
  9522  006EC0  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9523  006EC2  B4D8               	btfsc	status,2,c
  9524  006EC4  EC11  F045         	call	_Function_H_3	;wreg free
  9525                           
  9526                           ;menu.c: 1003: if(arpeggiatorMenu.selector == 3) {Function_H_4();}
  9527  006EC8  0E03               	movlw	3
  9528  006ECA  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9529  006ECC  B4D8               	btfsc	status,2,c
  9530  006ECE  EC23  F036         	call	_Function_H_4	;wreg free
  9531                           
  9532                           ;menu.c: 1004: if(arpeggiatorMenu.selector == 4) {Function_H_5();}
  9533  006ED2  0E04               	movlw	4
  9534  006ED4  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9535  006ED6  B4D8               	btfsc	status,2,c
  9536  006ED8  ECD7  F036         	call	_Function_H_5	;wreg free
  9537                           
  9538                           ;menu.c: 1005: if(arpeggiatorMenu.selector == 5) {Function_H_6();}
  9539  006EDC  0E05               	movlw	5
  9540  006EDE  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9541  006EE0  B4D8               	btfsc	status,2,c
  9542  006EE2  EC65  F042         	call	_Function_H_6	;wreg free
  9543                           
  9544                           ;menu.c: 1006: if(arpeggiatorMenu.selector == 6) {Function_H_7();}
  9545  006EE6  0E06               	movlw	6
  9546  006EE8  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9547  006EEA  B4D8               	btfsc	status,2,c
  9548  006EEC  EC7F  F036         	call	_Function_H_7	;wreg free
  9549                           
  9550                           ;menu.c: 1007: if(arpeggiatorMenu.selector == 7) {Function_H_8();}
  9551  006EF0  0E07               	movlw	7
  9552  006EF2  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9553  006EF4  B4D8               	btfsc	status,2,c
  9554  006EF6  EC2C  F042         	call	_Function_H_8	;wreg free
  9555                           
  9556                           ;menu.c: 1008: if(arpeggiatorMenu.selector == 8) {Function_H_9();}
  9557  006EFA  0E08               	movlw	8
  9558  006EFC  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9559  006EFE  A4D8               	btfss	status,2,c
  9560  006F00  0012               	return	
  9561  006F02  EC49  F03B         	call	_Function_H_9	;wreg free
  9562  006F06  0012               	return	
  9563  006F08                     __end_of_Function_H:
  9564                           	opt stack 0
  9565                           tblptru	equ	0xFF8
  9566                           tblptrh	equ	0xFF7
  9567                           tblptrl	equ	0xFF6
  9568                           tablat	equ	0xFF5
  9569                           intcon	equ	0xFF2
  9570                           intcon2	equ	0xFF1
  9571                           postinc0	equ	0xFEE
  9572                           wreg	equ	0xFE8
  9573                           postdec1	equ	0xFE5
  9574                           fsr1l	equ	0xFE1
  9575                           status	equ	0xFD8
  9576                           
  9577 ;; *************** function _Function_H_9 *****************
  9578 ;; Defined at:
  9579 ;;		line 1513 in file "menu.c"
  9580 ;; Parameters:    Size  Location     Type
  9581 ;;		None
  9582 ;; Auto vars:     Size  Location     Type
  9583 ;;		None
  9584 ;; Return value:  Size  Location     Type
  9585 ;;                  1    wreg      void 
  9586 ;; Registers used:
  9587 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9588 ;; Tracked objects:
  9589 ;;		On entry : 0/0
  9590 ;;		On exit  : 0/0
  9591 ;;		Unchanged: 0/0
  9592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;Total ram usage:        1 bytes
  9598 ;; Hardware stack levels used:    1
  9599 ;; Hardware stack levels required when called:   10
  9600 ;; This function calls:
  9601 ;;		_Function_H_9_1
  9602 ;;		_Function_H_9_2
  9603 ;;		_Function_H_9_3
  9604 ;;		_Function_H_9_4
  9605 ;;		_Lcd_Print_String
  9606 ;;		___lbmod
  9607 ;;		___wmul
  9608 ;;		_clear_row1
  9609 ;;		_clear_row2
  9610 ;;		_processEncoderBuxton
  9611 ;; This function is called by:
  9612 ;;		_Function_H
  9613 ;; This function uses a non-reentrant model
  9614 ;;
  9615                           
  9616                           	psect	text8
  9617  007692                     __ptext8:
  9618                           	opt stack 0
  9619  007692                     _Function_H_9:
  9620                           	opt stack 18
  9621                           
  9622                           ;menu.c: 1515: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_MENU,
  9623                           ;menu.c: 1516: lcd_print_once = 0;
  9624                           
  9625                           ;incstack = 0
  9626  007692  0E26               	movlw	38
  9627  007694  0100               	movlb	0	; () banked
  9628  007696  6FF9               	movwf	_which_screen& (0+255),b
  9629                           
  9630                           ; BSR set to: 0
  9631  007698  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9632                           
  9633                           ; BSR set to: 0
  9634                           ;menu.c: 1517: encoder_click = 0;
  9635  00769A  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9636                           
  9637                           ;menu.c: 1519: while(encoder_click == 0) {
  9638  00769C  D02C               	goto	l3794
  9639  00769E                     
  9640                           ;menu.c: 1520: processEncoderBuxton();
  9641                           
  9642                           ; BSR set to: 0
  9643  00769E  EC09  F000         	call	_processEncoderBuxton	;wreg free
  9644                           
  9645                           ;menu.c: 1521: if (lcd_print_once == 0) {
  9646  0076A2  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9647  0076A4  D027               	goto	l3796
  9648                           
  9649                           ;menu.c: 1522: clear_row1();
  9650  0076A6  EC5D  F04A         	call	_clear_row1	;wreg free
  9651                           
  9652                           ;menu.c: 1523: Lcd_Print_String("Last Note Mode:");
  9653  0076AA  0E0D               	movlw	low STR_74
  9654  0076AC  0100               	movlb	0	; () banked
  9655  0076AE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9656  0076B0  0EFE               	movlw	high STR_74
  9657  0076B2  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9658  0076B4  ECBD  F040         	call	_Lcd_Print_String	;wreg free
  9659                           
  9660                           ;menu.c: 1524: clear_row2();
  9661  0076B8  EC49  F04A         	call	_clear_row2	;wreg free
  9662                           
  9663                           ;menu.c: 1525: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9664  0076BC  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
  9665  0076C0  0100               	movlb	0	; () banked
  9666  0076C2  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9667  0076C4  ECC8  F049         	call	___lbmod
  9668  0076C8  0100               	movlb	0	; () banked
  9669  0076CA  6F71               	movwf	??_Function_H_9& (0+255),b
  9670  0076CC  5171               	movf	??_Function_H_9& (0+255),w,b
  9671  0076CE  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9672  0076D0  6F64               	movwf	___wmul@multiplier& (0+255),b
  9673  0076D2  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9674  0076D4  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9675  0076D6  0E00               	movlw	0
  9676  0076D8  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9677  0076DA  0E11               	movlw	17
  9678  0076DC  6F66               	movwf	___wmul@multiplicand& (0+255),b
  9679  0076DE  EC71  F04A         	call	___wmul	;wreg free
  9680  0076E2  0E9E               	movlw	low _LCD_STRINGS
  9681  0076E4  0100               	movlb	0	; () banked
  9682  0076E6  2564               	addwf	?___wmul& (0+255),w,b
  9683  0076E8  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9684  0076EA  0EF3               	movlw	high _LCD_STRINGS
  9685  0076EC  2165               	addwfc	(?___wmul+1)& (0+255),w,b
  9686  0076EE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9687  0076F0  ECBD  F040         	call	_Lcd_Print_String	;wreg free
  9688  0076F4                     l3796:
  9689                           
  9690                           ;menu.c: 1526: }
  9691                           ;menu.c: 1527: lcd_print_once = 1;
  9692  0076F4  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9693  0076F6                     l3794:
  9694  0076F6  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9695  0076F8  D7D2               	goto	l3795
  9696                           
  9697                           ;menu.c: 1528: }
  9698                           ;menu.c: 1531: if(arpeggiatorLastNoteModeMenu.selector == 0) {Function_H_9_1();}
  9699  0076FA  0100               	movlb	0	; () banked
  9700  0076FC  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9701  0076FE  B4D8               	btfsc	status,2,c
  9702                           
  9703                           ; BSR set to: 0
  9704  007700  ECCD  F038         	call	_Function_H_9_1	;wreg free
  9705                           
  9706                           ;menu.c: 1532: if(arpeggiatorLastNoteModeMenu.selector == 1) {Function_H_9_2();}
  9707  007704  0100               	movlb	0	; () banked
  9708  007706  05DE               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9709  007708  B4D8               	btfsc	status,2,c
  9710                           
  9711                           ; BSR set to: 0
  9712  00770A  EC7C  F038         	call	_Function_H_9_2	;wreg free
  9713                           
  9714                           ;menu.c: 1533: if(arpeggiatorLastNoteModeMenu.selector == 2) {Function_H_9_3();}
  9715  00770E  0E02               	movlw	2
  9716  007710  0100               	movlb	0	; () banked
  9717  007712  19DE               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9718  007714  B4D8               	btfsc	status,2,c
  9719                           
  9720                           ; BSR set to: 0
  9721  007716  EC2B  F038         	call	_Function_H_9_3	;wreg free
  9722                           
  9723                           ;menu.c: 1534: if(arpeggiatorLastNoteModeMenu.selector == 3) {Function_H_9_4();}
  9724  00771A  0E03               	movlw	3
  9725  00771C  0100               	movlb	0	; () banked
  9726  00771E  19DE               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9727  007720  A4D8               	btfss	status,2,c
  9728  007722  0012               	return	
  9729                           
  9730                           ; BSR set to: 0
  9731  007724  ECDA  F037         	call	_Function_H_9_4	;wreg free
  9732  007728  0012               	return	
  9733  00772A                     __end_of_Function_H_9:
  9734                           	opt stack 0
  9735                           tblptru	equ	0xFF8
  9736                           tblptrh	equ	0xFF7
  9737                           tblptrl	equ	0xFF6
  9738                           tablat	equ	0xFF5
  9739                           intcon	equ	0xFF2
  9740                           intcon2	equ	0xFF1
  9741                           postinc0	equ	0xFEE
  9742                           wreg	equ	0xFE8
  9743                           postdec1	equ	0xFE5
  9744                           fsr1l	equ	0xFE1
  9745                           status	equ	0xFD8
  9746                           
  9747 ;; *************** function _Function_H_9_4 *****************
  9748 ;; Defined at:
  9749 ;;		line 1488 in file "menu.c"
  9750 ;; Parameters:    Size  Location     Type
  9751 ;;		None
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;		None
  9754 ;; Return value:  Size  Location     Type
  9755 ;;                  1    wreg      void 
  9756 ;; Registers used:
  9757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;Total ram usage:        1 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; Hardware stack levels required when called:    9
  9770 ;; This function calls:
  9771 ;;		_Lcd_Print_String
  9772 ;;		___lbmod
  9773 ;;		___wmul
  9774 ;;		_clear_row1
  9775 ;;		_clear_row2
  9776 ;;		_processEncoderBuxton
  9777 ;; This function is called by:
  9778 ;;		_Function_H_9
  9779 ;; This function uses a non-reentrant model
  9780 ;;
  9781                           
  9782                           	psect	text9
  9783  006FB4                     __ptext9:
  9784                           	opt stack 0
  9785  006FB4                     _Function_H_9_4:
  9786                           	opt stack 18
  9787                           
  9788                           ;menu.c: 1490: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU;
  9789                           
  9790                           ;incstack = 0
  9791  006FB4  0E2A               	movlw	42
  9792  006FB6  0100               	movlb	0	; () banked
  9793  006FB8  6FF9               	movwf	_which_screen& (0+255),b
  9794                           
  9795                           ; BSR set to: 0
  9796                           ;menu.c: 1491: lcd_print_once = 0;
  9797  006FBA  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9798                           
  9799                           ; BSR set to: 0
  9800                           ;menu.c: 1492: encoder_click = 0;
  9801  006FBC  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9802                           
  9803                           ;menu.c: 1494: arpeggiatorLastNoteModeResetMenu.selector = LAST_NOTE_MODE_RESET;
  9804  006FBE  0E00               	movlw	0
  9805  006FC0  BE33               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9806  006FC2  0E01               	movlw	1
  9807  006FC4  0101               	movlb	1	; () banked
  9808  006FC6  6F0A               	movwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),b
  9809                           
  9810                           ;menu.c: 1496: while(encoder_click == 0) {
  9811  006FC8  D03D               	goto	l3785
  9812  006FCA                     
  9813                           ;menu.c: 1497: processEncoderBuxton();
  9814                           
  9815                           ; BSR set to: 1
  9816  006FCA  EC09  F000         	call	_processEncoderBuxton	;wreg free
  9817                           
  9818                           ;menu.c: 1498: if (lcd_print_once == 0) {
  9819  006FCE  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9820  006FD0  D038               	goto	l3789
  9821                           
  9822                           ;menu.c: 1499: clear_row1();
  9823  006FD2  EC5D  F04A         	call	_clear_row1	;wreg free
  9824                           
  9825                           ;menu.c: 1500: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9826  006FD6  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
  9827  006FDA  0100               	movlb	0	; () banked
  9828  006FDC  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9829  006FDE  ECC8  F049         	call	___lbmod
  9830  006FE2  0100               	movlb	0	; () banked
  9831  006FE4  6F70               	movwf	??_Function_H_9_4& (0+255),b
  9832  006FE6  5170               	movf	??_Function_H_9_4& (0+255),w,b
  9833  006FE8  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9834  006FEA  6F64               	movwf	___wmul@multiplier& (0+255),b
  9835  006FEC  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9836  006FEE  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9837  006FF0  0E00               	movlw	0
  9838  006FF2  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9839  006FF4  0E11               	movlw	17
  9840  006FF6  6F66               	movwf	___wmul@multiplicand& (0+255),b
  9841  006FF8  EC71  F04A         	call	___wmul	;wreg free
  9842  006FFC  0E9E               	movlw	low _LCD_STRINGS
  9843  006FFE  0100               	movlb	0	; () banked
  9844  007000  2564               	addwf	?___wmul& (0+255),w,b
  9845  007002  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9846  007004  0EF3               	movlw	high _LCD_STRINGS
  9847  007006  2165               	addwfc	(?___wmul+1)& (0+255),w,b
  9848  007008  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9849  00700A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
  9850                           
  9851                           ;menu.c: 1501: if(arpeggiatorLastNoteModeResetMenu.selector == 0) {clear_row2();Lcd_Prin
      +                          t_String("IMMEDIATE");}
  9852  00700E  0101               	movlb	1	; () banked
  9853  007010  510A               	movf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9854  007012  A4D8               	btfss	status,2,c
  9855  007014  D009               	goto	l3788
  9856                           
  9857                           ; BSR set to: 1
  9858  007016  EC49  F04A         	call	_clear_row2	;wreg free
  9859  00701A  0EA9               	movlw	low STR_66
  9860  00701C  0100               	movlb	0	; () banked
  9861  00701E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9862  007020  0EFF               	movlw	high STR_66
  9863  007022  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9864  007024  ECBD  F040         	call	_Lcd_Print_String	;wreg free
  9865  007028                     l3788:
  9866                           
  9867                           ;menu.c: 1502: if(arpeggiatorLastNoteModeResetMenu.selector == 1) {clear_row2();Lcd_Prin
      +                          t_String("FINISH LAST");}
  9868  007028  0101               	movlb	1	; () banked
  9869  00702A  050A               	decf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9870  00702C  A4D8               	btfss	status,2,c
  9871  00702E  D009               	goto	l3789
  9872                           
  9873                           ; BSR set to: 1
  9874  007030  EC49  F04A         	call	_clear_row2	;wreg free
  9875  007034  0E7C               	movlw	low STR_67
  9876  007036  0100               	movlb	0	; () banked
  9877  007038  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9878  00703A  0EFF               	movlw	high STR_67
  9879  00703C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9880  00703E  ECBD  F040         	call	_Lcd_Print_String	;wreg free
  9881  007042                     l3789:
  9882                           
  9883                           ;menu.c: 1503: }
  9884                           ;menu.c: 1504: lcd_print_once = 1;
  9885  007042  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9886  007044                     l3785:
  9887  007044  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9888  007046  D7C1               	goto	l3786
  9889                           
  9890                           ;menu.c: 1505: }
  9891                           ;menu.c: 1507: LAST_NOTE_MODE_RESET = arpeggiatorLastNoteModeResetMenu.selector;
  9892  007048  0101               	movlb	1	; () banked
  9893  00704A  A10A               	btfss	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),0,b
  9894  00704C  D002               	goto	u29910
  9895  00704E  8E33               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9896  007050  0012               	return	
  9897  007052                     u29910:
  9898  007052  9E33               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9899  007054  0012               	return		;funcret
  9900  007056                     __end_of_Function_H_9_4:
  9901                           	opt stack 0
  9902                           tblptru	equ	0xFF8
  9903                           tblptrh	equ	0xFF7
  9904                           tblptrl	equ	0xFF6
  9905                           tablat	equ	0xFF5
  9906                           intcon	equ	0xFF2
  9907                           intcon2	equ	0xFF1
  9908                           postinc0	equ	0xFEE
  9909                           wreg	equ	0xFE8
  9910                           postdec1	equ	0xFE5
  9911                           fsr1l	equ	0xFE1
  9912                           status	equ	0xFD8
  9913                           
  9914 ;; *************** function _Function_H_9_3 *****************
  9915 ;; Defined at:
  9916 ;;		line 1464 in file "menu.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;		None
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;		None
  9921 ;; Return value:  Size  Location     Type
  9922 ;;                  1    wreg      void 
  9923 ;; Registers used:
  9924 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;Total ram usage:        1 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:    9
  9937 ;; This function calls:
  9938 ;;		_Lcd_Print_String
  9939 ;;		___lbmod
  9940 ;;		___wmul
  9941 ;;		_clear_row1
  9942 ;;		_clear_row2
  9943 ;;		_processEncoderBuxton
  9944 ;; This function is called by:
  9945 ;;		_Function_H_9
  9946 ;; This function uses a non-reentrant model
  9947 ;;
  9948                           
  9949                           	psect	text10
  9950  007056                     __ptext10:
  9951                           	opt stack 0
  9952  007056                     _Function_H_9_3:
  9953                           	opt stack 18
  9954                           
  9955                           ;menu.c: 1466: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU;
  9956                           
  9957                           ;incstack = 0
  9958  007056  0E29               	movlw	41
  9959  007058  0100               	movlb	0	; () banked
  9960  00705A  6FF9               	movwf	_which_screen& (0+255),b
  9961                           
  9962                           ; BSR set to: 0
  9963                           ;menu.c: 1467: lcd_print_once = 0;
  9964  00705C  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9965                           
  9966                           ; BSR set to: 0
  9967                           ;menu.c: 1468: encoder_click = 0;
  9968  00705E  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9969                           
  9970                           ;menu.c: 1470: arpeggiatorLastNoteModeTransposeMenu.selector = LAST_NOTE_MODE_TRANSPOSE;
  9971  007060  0E00               	movlw	0
  9972  007062  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9973  007064  0E01               	movlw	1
  9974  007066  0101               	movlb	1	; () banked
  9975  007068  6F0D               	movwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),b
  9976                           
  9977                           ;menu.c: 1472: while(encoder_click == 0) {
  9978  00706A  D03D               	goto	l3776
  9979  00706C                     
  9980                           ;menu.c: 1473: processEncoderBuxton();
  9981                           
  9982                           ; BSR set to: 1
  9983  00706C  EC09  F000         	call	_processEncoderBuxton	;wreg free
  9984                           
  9985                           ;menu.c: 1474: if (lcd_print_once == 0) {
  9986  007070  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9987  007072  D038               	goto	l3780
  9988                           
  9989                           ;menu.c: 1475: clear_row1();
  9990  007074  EC5D  F04A         	call	_clear_row1	;wreg free
  9991                           
  9992                           ;menu.c: 1476: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9993  007078  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
  9994  00707C  0100               	movlb	0	; () banked
  9995  00707E  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9996  007080  ECC8  F049         	call	___lbmod
  9997  007084  0100               	movlb	0	; () banked
  9998  007086  6F70               	movwf	??_Function_H_9_3& (0+255),b
  9999  007088  5170               	movf	??_Function_H_9_3& (0+255),w,b
 10000  00708A  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10001  00708C  6F64               	movwf	___wmul@multiplier& (0+255),b
 10002  00708E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 10003  007090  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10004  007092  0E00               	movlw	0
 10005  007094  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10006  007096  0E11               	movlw	17
 10007  007098  6F66               	movwf	___wmul@multiplicand& (0+255),b
 10008  00709A  EC71  F04A         	call	___wmul	;wreg free
 10009  00709E  0E9E               	movlw	low _LCD_STRINGS
 10010  0070A0  0100               	movlb	0	; () banked
 10011  0070A2  2564               	addwf	?___wmul& (0+255),w,b
 10012  0070A4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10013  0070A6  0EF3               	movlw	high _LCD_STRINGS
 10014  0070A8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 10015  0070AA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10016  0070AC  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10017                           
 10018                           ;menu.c: 1477: if(arpeggiatorLastNoteModeTransposeMenu.selector == 0) {clear_row2();Lcd_
      +                          Print_String("IMMEDIATE");}
 10019  0070B0  0101               	movlb	1	; () banked
 10020  0070B2  510D               	movf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
 10021  0070B4  A4D8               	btfss	status,2,c
 10022  0070B6  D009               	goto	l3779
 10023                           
 10024                           ; BSR set to: 1
 10025  0070B8  EC49  F04A         	call	_clear_row2	;wreg free
 10026  0070BC  0EA9               	movlw	low STR_66
 10027  0070BE  0100               	movlb	0	; () banked
 10028  0070C0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10029  0070C2  0EFF               	movlw	high STR_66
 10030  0070C4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10031  0070C6  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10032  0070CA                     l3779:
 10033                           
 10034                           ;menu.c: 1478: if(arpeggiatorLastNoteModeTransposeMenu.selector == 1) {clear_row2();Lcd_
      +                          Print_String("FINISH LAST");}
 10035  0070CA  0101               	movlb	1	; () banked
 10036  0070CC  050D               	decf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
 10037  0070CE  A4D8               	btfss	status,2,c
 10038  0070D0  D009               	goto	l3780
 10039                           
 10040                           ; BSR set to: 1
 10041  0070D2  EC49  F04A         	call	_clear_row2	;wreg free
 10042  0070D6  0E7C               	movlw	low STR_67
 10043  0070D8  0100               	movlb	0	; () banked
 10044  0070DA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10045  0070DC  0EFF               	movlw	high STR_67
 10046  0070DE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10047  0070E0  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10048  0070E4                     l3780:
 10049                           
 10050                           ;menu.c: 1479: }
 10051                           ;menu.c: 1480: lcd_print_once = 1;
 10052  0070E4  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10053  0070E6                     l3776:
 10054  0070E6  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10055  0070E8  D7C1               	goto	l3777
 10056                           
 10057                           ;menu.c: 1481: }
 10058                           ;menu.c: 1483: LAST_NOTE_MODE_TRANSPOSE = arpeggiatorLastNoteModeTransposeMenu.selector;
 10059  0070EA  0101               	movlb	1	; () banked
 10060  0070EC  A10D               	btfss	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),0,b
 10061  0070EE  D002               	goto	u29850
 10062  0070F0  8034               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 10063  0070F2  0012               	return	
 10064  0070F4                     u29850:
 10065  0070F4  9034               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 10066  0070F6  0012               	return		;funcret
 10067  0070F8                     __end_of_Function_H_9_3:
 10068                           	opt stack 0
 10069                           tblptru	equ	0xFF8
 10070                           tblptrh	equ	0xFF7
 10071                           tblptrl	equ	0xFF6
 10072                           tablat	equ	0xFF5
 10073                           intcon	equ	0xFF2
 10074                           intcon2	equ	0xFF1
 10075                           postinc0	equ	0xFEE
 10076                           wreg	equ	0xFE8
 10077                           postdec1	equ	0xFE5
 10078                           fsr1l	equ	0xFE1
 10079                           status	equ	0xFD8
 10080                           
 10081 ;; *************** function _Function_H_9_2 *****************
 10082 ;; Defined at:
 10083 ;;		line 1441 in file "menu.c"
 10084 ;; Parameters:    Size  Location     Type
 10085 ;;		None
 10086 ;; Auto vars:     Size  Location     Type
 10087 ;;		None
 10088 ;; Return value:  Size  Location     Type
 10089 ;;                  1    wreg      void 
 10090 ;; Registers used:
 10091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10092 ;; Tracked objects:
 10093 ;;		On entry : 0/0
 10094 ;;		On exit  : 0/0
 10095 ;;		Unchanged: 0/0
 10096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;Total ram usage:        1 bytes
 10102 ;; Hardware stack levels used:    1
 10103 ;; Hardware stack levels required when called:    9
 10104 ;; This function calls:
 10105 ;;		_Lcd_Print_String
 10106 ;;		___lbmod
 10107 ;;		___wmul
 10108 ;;		_clear_row1
 10109 ;;		_clear_row2
 10110 ;;		_processEncoderBuxton
 10111 ;; This function is called by:
 10112 ;;		_Function_H_9
 10113 ;; This function uses a non-reentrant model
 10114 ;;
 10115                           
 10116                           	psect	text11
 10117  0070F8                     __ptext11:
 10118                           	opt stack 0
 10119  0070F8                     _Function_H_9_2:
 10120                           	opt stack 18
 10121                           
 10122                           ;menu.c: 1443: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU;
 10123                           
 10124                           ;incstack = 0
 10125  0070F8  0E28               	movlw	40
 10126  0070FA  0100               	movlb	0	; () banked
 10127  0070FC  6FF9               	movwf	_which_screen& (0+255),b
 10128                           
 10129                           ; BSR set to: 0
 10130                           ;menu.c: 1444: lcd_print_once = 0;
 10131  0070FE  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10132                           
 10133                           ; BSR set to: 0
 10134                           ;menu.c: 1445: encoder_click = 0;
 10135  007100  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10136                           
 10137                           ;menu.c: 1447: arpeggiatorLastNoteModeKeyReleaseMenu.selector = LAST_NOTE_MODE_KEY_RELEA
      +                          SE;
 10138  007102  0E00               	movlw	0
 10139  007104  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10140  007106  0E01               	movlw	1
 10141  007108  0101               	movlb	1	; () banked
 10142  00710A  6F10               	movwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),b
 10143                           
 10144                           ;menu.c: 1449: while(encoder_click == 0) {
 10145  00710C  D03D               	goto	l3767
 10146  00710E                     
 10147                           ;menu.c: 1450: processEncoderBuxton();
 10148                           
 10149                           ; BSR set to: 1
 10150  00710E  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10151                           
 10152                           ;menu.c: 1451: if (lcd_print_once == 0) {
 10153  007112  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10154  007114  D038               	goto	l3771
 10155                           
 10156                           ;menu.c: 1452: clear_row1();
 10157  007116  EC5D  F04A         	call	_clear_row1	;wreg free
 10158                           
 10159                           ;menu.c: 1453: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10160  00711A  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
 10161  00711E  0100               	movlb	0	; () banked
 10162  007120  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10163  007122  ECC8  F049         	call	___lbmod
 10164  007126  0100               	movlb	0	; () banked
 10165  007128  6F70               	movwf	??_Function_H_9_2& (0+255),b
 10166  00712A  5170               	movf	??_Function_H_9_2& (0+255),w,b
 10167  00712C  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10168  00712E  6F64               	movwf	___wmul@multiplier& (0+255),b
 10169  007130  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 10170  007132  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10171  007134  0E00               	movlw	0
 10172  007136  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10173  007138  0E11               	movlw	17
 10174  00713A  6F66               	movwf	___wmul@multiplicand& (0+255),b
 10175  00713C  EC71  F04A         	call	___wmul	;wreg free
 10176  007140  0E9E               	movlw	low _LCD_STRINGS
 10177  007142  0100               	movlb	0	; () banked
 10178  007144  2564               	addwf	?___wmul& (0+255),w,b
 10179  007146  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10180  007148  0EF3               	movlw	high _LCD_STRINGS
 10181  00714A  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 10182  00714C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10183  00714E  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10184                           
 10185                           ;menu.c: 1454: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 0) {clear_row2();Lcd
      +                          _Print_String("IMMEDIATE");}
 10186  007152  0101               	movlb	1	; () banked
 10187  007154  5110               	movf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10188  007156  A4D8               	btfss	status,2,c
 10189  007158  D009               	goto	l3770
 10190                           
 10191                           ; BSR set to: 1
 10192  00715A  EC49  F04A         	call	_clear_row2	;wreg free
 10193  00715E  0EA9               	movlw	low STR_66
 10194  007160  0100               	movlb	0	; () banked
 10195  007162  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10196  007164  0EFF               	movlw	high STR_66
 10197  007166  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10198  007168  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10199  00716C                     l3770:
 10200                           
 10201                           ;menu.c: 1455: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 1) {clear_row2();Lcd
      +                          _Print_String("FINISH LAST");}
 10202  00716C  0101               	movlb	1	; () banked
 10203  00716E  0510               	decf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10204  007170  A4D8               	btfss	status,2,c
 10205  007172  D009               	goto	l3771
 10206                           
 10207                           ; BSR set to: 1
 10208  007174  EC49  F04A         	call	_clear_row2	;wreg free
 10209  007178  0E7C               	movlw	low STR_67
 10210  00717A  0100               	movlb	0	; () banked
 10211  00717C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10212  00717E  0EFF               	movlw	high STR_67
 10213  007180  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10214  007182  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10215  007186                     l3771:
 10216                           
 10217                           ;menu.c: 1456: }
 10218                           ;menu.c: 1457: lcd_print_once = 1;
 10219  007186  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10220  007188                     l3767:
 10221  007188  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10222  00718A  D7C1               	goto	l3768
 10223                           
 10224                           ;menu.c: 1458: }
 10225                           ;menu.c: 1460: LAST_NOTE_MODE_KEY_RELEASE = arpeggiatorLastNoteModeKeyReleaseMenu.select
      +                          or;
 10226  00718C  0101               	movlb	1	; () banked
 10227  00718E  A110               	btfss	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),0,b
 10228  007190  D002               	goto	u29790
 10229  007192  8234               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10230  007194  0012               	return	
 10231  007196                     u29790:
 10232  007196  9234               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10233  007198  0012               	return		;funcret
 10234  00719A                     __end_of_Function_H_9_2:
 10235                           	opt stack 0
 10236                           tblptru	equ	0xFF8
 10237                           tblptrh	equ	0xFF7
 10238                           tblptrl	equ	0xFF6
 10239                           tablat	equ	0xFF5
 10240                           intcon	equ	0xFF2
 10241                           intcon2	equ	0xFF1
 10242                           postinc0	equ	0xFEE
 10243                           wreg	equ	0xFE8
 10244                           postdec1	equ	0xFE5
 10245                           fsr1l	equ	0xFE1
 10246                           status	equ	0xFD8
 10247                           
 10248 ;; *************** function _Function_H_9_1 *****************
 10249 ;; Defined at:
 10250 ;;		line 1418 in file "menu.c"
 10251 ;; Parameters:    Size  Location     Type
 10252 ;;		None
 10253 ;; Auto vars:     Size  Location     Type
 10254 ;;		None
 10255 ;; Return value:  Size  Location     Type
 10256 ;;                  1    wreg      void 
 10257 ;; Registers used:
 10258 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10259 ;; Tracked objects:
 10260 ;;		On entry : 0/0
 10261 ;;		On exit  : 0/0
 10262 ;;		Unchanged: 0/0
 10263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;Total ram usage:        1 bytes
 10269 ;; Hardware stack levels used:    1
 10270 ;; Hardware stack levels required when called:    9
 10271 ;; This function calls:
 10272 ;;		_Lcd_Print_String
 10273 ;;		___lbmod
 10274 ;;		___wmul
 10275 ;;		_clear_row1
 10276 ;;		_clear_row2
 10277 ;;		_processEncoderBuxton
 10278 ;; This function is called by:
 10279 ;;		_Function_H_9
 10280 ;; This function uses a non-reentrant model
 10281 ;;
 10282                           
 10283                           	psect	text12
 10284  00719A                     __ptext12:
 10285                           	opt stack 0
 10286  00719A                     _Function_H_9_1:
 10287                           	opt stack 18
 10288                           
 10289                           ;menu.c: 1420: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU;
 10290                           
 10291                           ;incstack = 0
 10292  00719A  0E27               	movlw	39
 10293  00719C  0100               	movlb	0	; () banked
 10294  00719E  6FF9               	movwf	_which_screen& (0+255),b
 10295                           
 10296                           ; BSR set to: 0
 10297                           ;menu.c: 1421: lcd_print_once = 0;
 10298  0071A0  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10299                           
 10300                           ; BSR set to: 0
 10301                           ;menu.c: 1422: encoder_click = 0;
 10302  0071A2  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10303                           
 10304                           ;menu.c: 1424: arpeggiatorLastNoteModeKeyPressMenu.selector = LAST_NOTE_MODE_KEY_PRESS;
 10305  0071A4  0E00               	movlw	0
 10306  0071A6  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10307  0071A8  0E01               	movlw	1
 10308  0071AA  0101               	movlb	1	; () banked
 10309  0071AC  6F13               	movwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),b
 10310                           
 10311                           ;menu.c: 1426: while(encoder_click == 0) {
 10312  0071AE  D03D               	goto	l3758
 10313  0071B0                     
 10314                           ;menu.c: 1427: processEncoderBuxton();
 10315                           
 10316                           ; BSR set to: 1
 10317  0071B0  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10318                           
 10319                           ;menu.c: 1428: if (lcd_print_once == 0) {
 10320  0071B4  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10321  0071B6  D038               	goto	l3762
 10322                           
 10323                           ;menu.c: 1429: clear_row1();
 10324  0071B8  EC5D  F04A         	call	_clear_row1	;wreg free
 10325                           
 10326                           ;menu.c: 1430: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10327  0071BC  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
 10328  0071C0  0100               	movlb	0	; () banked
 10329  0071C2  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10330  0071C4  ECC8  F049         	call	___lbmod
 10331  0071C8  0100               	movlb	0	; () banked
 10332  0071CA  6F70               	movwf	??_Function_H_9_1& (0+255),b
 10333  0071CC  5170               	movf	??_Function_H_9_1& (0+255),w,b
 10334  0071CE  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10335  0071D0  6F64               	movwf	___wmul@multiplier& (0+255),b
 10336  0071D2  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 10337  0071D4  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10338  0071D6  0E00               	movlw	0
 10339  0071D8  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10340  0071DA  0E11               	movlw	17
 10341  0071DC  6F66               	movwf	___wmul@multiplicand& (0+255),b
 10342  0071DE  EC71  F04A         	call	___wmul	;wreg free
 10343  0071E2  0E9E               	movlw	low _LCD_STRINGS
 10344  0071E4  0100               	movlb	0	; () banked
 10345  0071E6  2564               	addwf	?___wmul& (0+255),w,b
 10346  0071E8  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10347  0071EA  0EF3               	movlw	high _LCD_STRINGS
 10348  0071EC  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 10349  0071EE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10350  0071F0  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10351                           
 10352                           ;menu.c: 1431: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 0) {clear_row2();Lcd_P
      +                          rint_String("IMMEDIATE");}
 10353  0071F4  0101               	movlb	1	; () banked
 10354  0071F6  5113               	movf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10355  0071F8  A4D8               	btfss	status,2,c
 10356  0071FA  D009               	goto	l3761
 10357                           
 10358                           ; BSR set to: 1
 10359  0071FC  EC49  F04A         	call	_clear_row2	;wreg free
 10360  007200  0EA9               	movlw	low STR_66
 10361  007202  0100               	movlb	0	; () banked
 10362  007204  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10363  007206  0EFF               	movlw	high STR_66
 10364  007208  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10365  00720A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10366  00720E                     l3761:
 10367                           
 10368                           ;menu.c: 1432: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 1) {clear_row2();Lcd_P
      +                          rint_String("FINISH LAST");}
 10369  00720E  0101               	movlb	1	; () banked
 10370  007210  0513               	decf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10371  007212  A4D8               	btfss	status,2,c
 10372  007214  D009               	goto	l3762
 10373                           
 10374                           ; BSR set to: 1
 10375  007216  EC49  F04A         	call	_clear_row2	;wreg free
 10376  00721A  0E7C               	movlw	low STR_67
 10377  00721C  0100               	movlb	0	; () banked
 10378  00721E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10379  007220  0EFF               	movlw	high STR_67
 10380  007222  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10381  007224  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10382  007228                     l3762:
 10383                           
 10384                           ;menu.c: 1433: }
 10385                           ;menu.c: 1434: lcd_print_once = 1;
 10386  007228  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10387  00722A                     l3758:
 10388  00722A  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10389  00722C  D7C1               	goto	l3759
 10390                           
 10391                           ;menu.c: 1435: }
 10392                           ;menu.c: 1437: LAST_NOTE_MODE_KEY_PRESS = arpeggiatorLastNoteModeKeyPressMenu.selector;
 10393  00722E  0101               	movlb	1	; () banked
 10394  007230  A113               	btfss	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),0,b
 10395  007232  D002               	goto	u29730
 10396  007234  8434               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10397  007236  0012               	return	
 10398  007238                     u29730:
 10399  007238  9434               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10400  00723A  0012               	return		;funcret
 10401  00723C                     __end_of_Function_H_9_1:
 10402                           	opt stack 0
 10403                           tblptru	equ	0xFF8
 10404                           tblptrh	equ	0xFF7
 10405                           tblptrl	equ	0xFF6
 10406                           tablat	equ	0xFF5
 10407                           intcon	equ	0xFF2
 10408                           intcon2	equ	0xFF1
 10409                           postinc0	equ	0xFEE
 10410                           wreg	equ	0xFE8
 10411                           postdec1	equ	0xFE5
 10412                           fsr1l	equ	0xFE1
 10413                           status	equ	0xFD8
 10414                           
 10415 ;; *************** function _Function_H_8 *****************
 10416 ;; Defined at:
 10417 ;;		line 1396 in file "menu.c"
 10418 ;; Parameters:    Size  Location     Type
 10419 ;;		None
 10420 ;; Auto vars:     Size  Location     Type
 10421 ;;		None
 10422 ;; Return value:  Size  Location     Type
 10423 ;;                  1    wreg      void 
 10424 ;; Registers used:
 10425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;Total ram usage:        1 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; Hardware stack levels required when called:   10
 10438 ;; This function calls:
 10439 ;;		_Function_H_8_1
 10440 ;;		_Function_H_8_2
 10441 ;;		_Lcd_Print_String
 10442 ;;		___lbmod
 10443 ;;		___wmul
 10444 ;;		_clear_row2
 10445 ;;		_processEncoderBuxton
 10446 ;; This function is called by:
 10447 ;;		_Function_H
 10448 ;; This function uses a non-reentrant model
 10449 ;;
 10450                           
 10451                           	psect	text13
 10452  008458                     __ptext13:
 10453                           	opt stack 0
 10454  008458                     _Function_H_8:
 10455                           	opt stack 18
 10456                           
 10457                           ;menu.c: 1398: which_screen = ARPEGGIATOR_RANDOMIZE_SKIP_MENU;
 10458                           
 10459                           ;incstack = 0
 10460  008458  0E23               	movlw	35
 10461  00845A  0100               	movlb	0	; () banked
 10462  00845C  6FF9               	movwf	_which_screen& (0+255),b
 10463                           
 10464                           ; BSR set to: 0
 10465                           ;menu.c: 1399: lcd_print_once = 0;
 10466  00845E  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10467                           
 10468                           ; BSR set to: 0
 10469                           ;menu.c: 1400: encoder_click = 0;
 10470  008460  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10471                           
 10472                           ;menu.c: 1402: while(encoder_click == 0) {
 10473  008462  D025               	goto	l3749
 10474  008464                     
 10475                           ;menu.c: 1403: processEncoderBuxton();
 10476                           
 10477                           ; BSR set to: 0
 10478  008464  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10479                           
 10480                           ;menu.c: 1404: if (lcd_print_once == 0) {
 10481  008468  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10482  00846A  D020               	goto	l3751
 10483                           
 10484                           ;menu.c: 1405: clear_row2();
 10485  00846C  EC49  F04A         	call	_clear_row2	;wreg free
 10486                           
 10487                           ;menu.c: 1406: Lcd_Print_String(LCD_STRINGS[(arpeggiatorRandomizeSkipMenu.selector % arp
      +                          eggiatorRandomizeSkipMenu.number) + arpeggiatorRandomizeSkipMenu.address]);
 10488  008470  C11A  F060         	movff	_arpeggiatorRandomizeSkipMenu,___lbmod@divisor
 10489  008474  0101               	movlb	1	; () banked
 10490  008476  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10491  008478  ECC8  F049         	call	___lbmod
 10492  00847C  0100               	movlb	0	; () banked
 10493  00847E  6F70               	movwf	??_Function_H_8& (0+255),b
 10494  008480  5170               	movf	??_Function_H_8& (0+255),w,b
 10495  008482  0101               	movlb	1	; () banked
 10496  008484  251B               	addwf	(_arpeggiatorRandomizeSkipMenu+1)& (0+255),w,b
 10497  008486  0100               	movlb	0	; () banked
 10498  008488  6F64               	movwf	___wmul@multiplier& (0+255),b
 10499  00848A  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 10500  00848C  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10501  00848E  0E00               	movlw	0
 10502  008490  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10503  008492  0E11               	movlw	17
 10504  008494  6F66               	movwf	___wmul@multiplicand& (0+255),b
 10505  008496  EC71  F04A         	call	___wmul	;wreg free
 10506  00849A  0E9E               	movlw	low _LCD_STRINGS
 10507  00849C  0100               	movlb	0	; () banked
 10508  00849E  2564               	addwf	?___wmul& (0+255),w,b
 10509  0084A0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10510  0084A2  0EF3               	movlw	high _LCD_STRINGS
 10511  0084A4  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 10512  0084A6  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10513  0084A8  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10514  0084AC                     l3751:
 10515                           
 10516                           ;menu.c: 1407: }
 10517                           ;menu.c: 1408: lcd_print_once = 1;
 10518  0084AC  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10519  0084AE                     l3749:
 10520  0084AE  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10521  0084B0  D7D9               	goto	l3750
 10522                           
 10523                           ;menu.c: 1409: }
 10524                           ;menu.c: 1412: if(arpeggiatorRandomizeSkipMenu.selector == 0) {Function_H_8_1();}
 10525  0084B2  0101               	movlb	1	; () banked
 10526  0084B4  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10527  0084B6  B4D8               	btfsc	status,2,c
 10528                           
 10529                           ; BSR set to: 1
 10530  0084B8  ECB4  F041         	call	_Function_H_8_1	;wreg free
 10531                           
 10532                           ;menu.c: 1413: if(arpeggiatorRandomizeSkipMenu.selector == 1) {Function_H_8_2();}
 10533  0084BC  0101               	movlb	1	; () banked
 10534  0084BE  051C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10535  0084C0  A4D8               	btfss	status,2,c
 10536  0084C2  0012               	return	
 10537                           
 10538                           ; BSR set to: 1
 10539  0084C4  EC1B  F044         	call	_Function_H_8_2	;wreg free
 10540  0084C8  0012               	return	
 10541  0084CA                     __end_of_Function_H_8:
 10542                           	opt stack 0
 10543                           tblptru	equ	0xFF8
 10544                           tblptrh	equ	0xFF7
 10545                           tblptrl	equ	0xFF6
 10546                           tablat	equ	0xFF5
 10547                           intcon	equ	0xFF2
 10548                           intcon2	equ	0xFF1
 10549                           postinc0	equ	0xFEE
 10550                           wreg	equ	0xFE8
 10551                           postdec1	equ	0xFE5
 10552                           fsr1l	equ	0xFE1
 10553                           status	equ	0xFD8
 10554                           
 10555 ;; *************** function _Function_H_8_2 *****************
 10556 ;; Defined at:
 10557 ;;		line 1374 in file "menu.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;		None
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;		None
 10562 ;; Return value:  Size  Location     Type
 10563 ;;                  1    wreg      void 
 10564 ;; Registers used:
 10565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10566 ;; Tracked objects:
 10567 ;;		On entry : 0/0
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;Total ram usage:        0 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; Hardware stack levels required when called:    9
 10578 ;; This function calls:
 10579 ;;		_Lcd_Print_String
 10580 ;;		_clear_row2
 10581 ;;		_processEncoderBuxton
 10582 ;; This function is called by:
 10583 ;;		_Function_H_8
 10584 ;; This function uses a non-reentrant model
 10585 ;;
 10586                           
 10587                           	psect	text14
 10588  008836                     __ptext14:
 10589                           	opt stack 0
 10590  008836                     _Function_H_8_2:
 10591                           	opt stack 18
 10592                           
 10593                           ;menu.c: 1376: which_screen = ARPEGGIATOR_SKIP_FIRST_LAST_MENU;
 10594                           
 10595                           ;incstack = 0
 10596  008836  0E25               	movlw	37
 10597  008838  0100               	movlb	0	; () banked
 10598  00883A  6FF9               	movwf	_which_screen& (0+255),b
 10599                           
 10600                           ; BSR set to: 0
 10601                           ;menu.c: 1377: lcd_print_once = 0;
 10602  00883C  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10603                           
 10604                           ; BSR set to: 0
 10605                           ;menu.c: 1378: encoder_click = 0;
 10606  00883E  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10607                           
 10608                           ;menu.c: 1380: arpeggiatorSkipFirstLastMenu.selector = skipFirstLast;
 10609  008840  0E00               	movlw	0
 10610  008842  B834               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10611  008844  0E01               	movlw	1
 10612  008846  0101               	movlb	1	; () banked
 10613  008848  6F16               	movwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),b
 10614                           
 10615                           ;menu.c: 1382: while(encoder_click == 0) {
 10616  00884A  D01F               	goto	l3740
 10617  00884C                     
 10618                           ;menu.c: 1383: processEncoderBuxton();
 10619                           
 10620                           ; BSR set to: 1
 10621  00884C  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10622                           
 10623                           ;menu.c: 1384: if (lcd_print_once == 0) {
 10624  008850  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10625  008852  D01A               	goto	l3744
 10626                           
 10627                           ;menu.c: 1385: if(arpeggiatorSkipFirstLastMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L OFF");}
 10628  008854  0101               	movlb	1	; () banked
 10629  008856  5116               	movf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10630  008858  A4D8               	btfss	status,2,c
 10631  00885A  D009               	goto	l3743
 10632                           
 10633                           ; BSR set to: 1
 10634  00885C  EC49  F04A         	call	_clear_row2	;wreg free
 10635  008860  0E3F               	movlw	low STR_64
 10636  008862  0100               	movlb	0	; () banked
 10637  008864  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10638  008866  0EFF               	movlw	high STR_64
 10639  008868  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10640  00886A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10641  00886E                     l3743:
 10642                           
 10643                           ;menu.c: 1386: if(arpeggiatorSkipFirstLastMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L ON");}
 10644  00886E  0101               	movlb	1	; () banked
 10645  008870  0516               	decf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10646  008872  A4D8               	btfss	status,2,c
 10647  008874  D009               	goto	l3744
 10648                           
 10649                           ; BSR set to: 1
 10650  008876  EC49  F04A         	call	_clear_row2	;wreg free
 10651  00887A  0E70               	movlw	low STR_65
 10652  00887C  0100               	movlb	0	; () banked
 10653  00887E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10654  008880  0EFF               	movlw	high STR_65
 10655  008882  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10656  008884  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10657  008888                     l3744:
 10658                           
 10659                           ;menu.c: 1387: }
 10660                           ;menu.c: 1388: lcd_print_once = 1;
 10661  008888  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10662  00888A                     l3740:
 10663  00888A  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10664  00888C  D7DF               	goto	l3741
 10665                           
 10666                           ;menu.c: 1389: }
 10667                           ;menu.c: 1391: skipFirstLast = arpeggiatorSkipFirstLastMenu.selector;
 10668  00888E  0101               	movlb	1	; () banked
 10669  008890  A116               	btfss	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),0,b
 10670  008892  D002               	goto	u29670
 10671  008894  8834               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10672  008896  0012               	return	
 10673  008898                     u29670:
 10674  008898  9834               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10675  00889A  0012               	return		;funcret
 10676  00889C                     __end_of_Function_H_8_2:
 10677                           	opt stack 0
 10678                           tblptru	equ	0xFF8
 10679                           tblptrh	equ	0xFF7
 10680                           tblptrl	equ	0xFF6
 10681                           tablat	equ	0xFF5
 10682                           intcon	equ	0xFF2
 10683                           intcon2	equ	0xFF1
 10684                           postinc0	equ	0xFEE
 10685                           wreg	equ	0xFE8
 10686                           postdec1	equ	0xFE5
 10687                           fsr1l	equ	0xFE1
 10688                           status	equ	0xFD8
 10689                           
 10690 ;; *************** function _Function_H_8_1 *****************
 10691 ;; Defined at:
 10692 ;;		line 1348 in file "menu.c"
 10693 ;; Parameters:    Size  Location     Type
 10694 ;;		None
 10695 ;; Auto vars:     Size  Location     Type
 10696 ;;		None
 10697 ;; Return value:  Size  Location     Type
 10698 ;;                  1    wreg      void 
 10699 ;; Registers used:
 10700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10701 ;; Tracked objects:
 10702 ;;		On entry : 0/0
 10703 ;;		On exit  : 0/0
 10704 ;;		Unchanged: 0/0
 10705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10710 ;;Total ram usage:        0 bytes
 10711 ;; Hardware stack levels used:    1
 10712 ;; Hardware stack levels required when called:    9
 10713 ;; This function calls:
 10714 ;;		_Lcd_Print_String
 10715 ;;		_clear_row1
 10716 ;;		_clear_row2
 10717 ;;		_processEncoderBuxton
 10718 ;; This function is called by:
 10719 ;;		_Function_H_8
 10720 ;; This function uses a non-reentrant model
 10721 ;;
 10722                           
 10723                           	psect	text15
 10724  008368                     __ptext15:
 10725                           	opt stack 0
 10726  008368                     _Function_H_8_1:
 10727                           	opt stack 18
 10728                           
 10729                           ;menu.c: 1350: which_screen = ARPEGGIATOR_RANDOMIZE_TYPE_MENU;
 10730                           
 10731                           ;incstack = 0
 10732  008368  0E24               	movlw	36
 10733  00836A  0100               	movlb	0	; () banked
 10734  00836C  6FF9               	movwf	_which_screen& (0+255),b
 10735                           
 10736                           ; BSR set to: 0
 10737                           ;menu.c: 1351: lcd_print_once = 0;
 10738  00836E  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10739                           
 10740                           ; BSR set to: 0
 10741                           ;menu.c: 1352: encoder_click = 0;
 10742  008370  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10743                           
 10744                           ;menu.c: 1354: arpeggiatorRandomizeTypeMenu.selector = AUTO_RANDOMIZE;
 10745  008372  0E00               	movlw	0
 10746  008374  BA34               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10747  008376  0E01               	movlw	1
 10748  008378  0101               	movlb	1	; () banked
 10749  00837A  6F19               	movwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),b
 10750                           
 10751                           ;menu.c: 1356: while(encoder_click == 0) {
 10752  00837C  D028               	goto	l3731
 10753  00837E                     
 10754                           ;menu.c: 1357: processEncoderBuxton();
 10755                           
 10756                           ; BSR set to: 1
 10757  00837E  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10758                           
 10759                           ;menu.c: 1358: if (lcd_print_once == 0) {
 10760  008382  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10761  008384  D023               	goto	l3735
 10762                           
 10763                           ;menu.c: 1359: clear_row1();
 10764  008386  EC5D  F04A         	call	_clear_row1	;wreg free
 10765                           
 10766                           ;menu.c: 1360: Lcd_Print_String("Randomize Type:");
 10767  00838A  0E1D               	movlw	low STR_61
 10768  00838C  0100               	movlb	0	; () banked
 10769  00838E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10770  008390  0EFE               	movlw	high STR_61
 10771  008392  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10772  008394  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10773                           
 10774                           ;menu.c: 1363: if(arpeggiatorRandomizeTypeMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE AUTO");}
 10775  008398  0101               	movlb	1	; () banked
 10776  00839A  5119               	movf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10777  00839C  A4D8               	btfss	status,2,c
 10778  00839E  D009               	goto	l3734
 10779                           
 10780                           ; BSR set to: 1
 10781  0083A0  EC49  F04A         	call	_clear_row2	;wreg free
 10782  0083A4  0EA7               	movlw	low STR_62
 10783  0083A6  0100               	movlb	0	; () banked
 10784  0083A8  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10785  0083AA  0EFE               	movlw	high STR_62
 10786  0083AC  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10787  0083AE  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10788  0083B2                     l3734:
 10789                           
 10790                           ;menu.c: 1364: if(arpeggiatorRandomizeTypeMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE ONCE");}
 10791  0083B2  0101               	movlb	1	; () banked
 10792  0083B4  0519               	decf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10793  0083B6  A4D8               	btfss	status,2,c
 10794  0083B8  D009               	goto	l3735
 10795                           
 10796                           ; BSR set to: 1
 10797  0083BA  EC49  F04A         	call	_clear_row2	;wreg free
 10798  0083BE  0E7A               	movlw	low STR_63
 10799  0083C0  0100               	movlb	0	; () banked
 10800  0083C2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10801  0083C4  0EFE               	movlw	high STR_63
 10802  0083C6  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10803  0083C8  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10804  0083CC                     l3735:
 10805                           
 10806                           ;menu.c: 1365: }
 10807                           ;menu.c: 1366: lcd_print_once = 1;
 10808  0083CC  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10809  0083CE                     l3731:
 10810  0083CE  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10811  0083D0  D7D6               	goto	l3732
 10812                           
 10813                           ;menu.c: 1367: }
 10814                           ;menu.c: 1369: AUTO_RANDOMIZE = arpeggiatorRandomizeTypeMenu.selector;
 10815  0083D2  0101               	movlb	1	; () banked
 10816  0083D4  A119               	btfss	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),0,b
 10817  0083D6  D002               	goto	u29610
 10818  0083D8  8A34               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10819  0083DA  0012               	return	
 10820  0083DC                     u29610:
 10821  0083DC  9A34               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10822  0083DE  0012               	return		;funcret
 10823  0083E0                     __end_of_Function_H_8_1:
 10824                           	opt stack 0
 10825                           tblptru	equ	0xFF8
 10826                           tblptrh	equ	0xFF7
 10827                           tblptrl	equ	0xFF6
 10828                           tablat	equ	0xFF5
 10829                           intcon	equ	0xFF2
 10830                           intcon2	equ	0xFF1
 10831                           postinc0	equ	0xFEE
 10832                           wreg	equ	0xFE8
 10833                           postdec1	equ	0xFE5
 10834                           fsr1l	equ	0xFE1
 10835                           status	equ	0xFD8
 10836                           
 10837 ;; *************** function _Function_H_7 *****************
 10838 ;; Defined at:
 10839 ;;		line 1315 in file "menu.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;		None
 10842 ;; Auto vars:     Size  Location     Type
 10843 ;;		None
 10844 ;; Return value:  Size  Location     Type
 10845 ;;                  1    wreg      void 
 10846 ;; Registers used:
 10847 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10848 ;; Tracked objects:
 10849 ;;		On entry : 0/0
 10850 ;;		On exit  : 0/0
 10851 ;;		Unchanged: 0/0
 10852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10857 ;;Total ram usage:        0 bytes
 10858 ;; Hardware stack levels used:    1
 10859 ;; Hardware stack levels required when called:    9
 10860 ;; This function calls:
 10861 ;;		_Lcd_Print_String
 10862 ;;		_clear_row1
 10863 ;;		_clear_row2
 10864 ;;		_processEncoderBuxton
 10865 ;;		_strcpy
 10866 ;; This function is called by:
 10867 ;;		_Function_H
 10868 ;; This function uses a non-reentrant model
 10869 ;;
 10870                           
 10871                           	psect	text16
 10872  006CFE                     __ptext16:
 10873                           	opt stack 0
 10874  006CFE                     _Function_H_7:
 10875                           	opt stack 19
 10876                           
 10877                           ;menu.c: 1317: which_screen = ARPEGGIATOR_UN_LATCH_MODE_MENU;
 10878                           
 10879                           ;incstack = 0
 10880  006CFE  0E22               	movlw	34
 10881  006D00  0100               	movlb	0	; () banked
 10882  006D02  6FF9               	movwf	_which_screen& (0+255),b
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;menu.c: 1318: lcd_print_once = 0;
 10886  006D04  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;menu.c: 1319: encoder_click = 0;
 10890  006D06  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10891                           
 10892                           ;menu.c: 1321: arpeggiatorUnLatchModeMenu.selector = UN_LATCH_MODE;
 10893  006D08  0E00               	movlw	0
 10894  006D0A  B035               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10895  006D0C  0E01               	movlw	1
 10896  006D0E  0101               	movlb	1	; () banked
 10897  006D10  6F1F               	movwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),b
 10898                           
 10899                           ;menu.c: 1323: while(encoder_click == 0) {
 10900  006D12  D044               	goto	l3722
 10901  006D14                     
 10902                           ;menu.c: 1324: processEncoderBuxton();
 10903                           
 10904                           ; BSR set to: 1
 10905  006D14  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10906                           
 10907                           ;menu.c: 1325: if (lcd_print_once == 0) {
 10908  006D18  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10909  006D1A  D03F               	goto	l3726
 10910                           
 10911                           ;menu.c: 1326: clear_row1();
 10912  006D1C  EC5D  F04A         	call	_clear_row1	;wreg free
 10913                           
 10914                           ;menu.c: 1327: Lcd_Print_String("Un-latch Mode:");
 10915  006D20  0E5C               	movlw	low STR_56
 10916  006D22  0100               	movlb	0	; () banked
 10917  006D24  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10918  006D26  0EFE               	movlw	high STR_56
 10919  006D28  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10920  006D2A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10921                           
 10922                           ;menu.c: 1328: clear_row2();
 10923  006D2E  EC49  F04A         	call	_clear_row2	;wreg free
 10924                           
 10925                           ;menu.c: 1330: if(arpeggiatorUnLatchModeMenu.selector == 0) {
 10926  006D32  0101               	movlb	1	; () banked
 10927  006D34  511F               	movf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10928  006D36  A4D8               	btfss	status,2,c
 10929  006D38  D016               	goto	l3725
 10930                           
 10931                           ; BSR set to: 1
 10932                           ;menu.c: 1331: clear_row2();Lcd_Print_String("UNLATCH ALL");
 10933  006D3A  EC49  F04A         	call	_clear_row2	;wreg free
 10934  006D3E  0E64               	movlw	low STR_57
 10935  006D40  0100               	movlb	0	; () banked
 10936  006D42  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10937  006D44  0EFF               	movlw	high STR_57
 10938  006D46  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10939  006D48  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10940                           
 10941                           ;menu.c: 1332: DISPLAY_MODE = 1;
 10942  006D4C  0E01               	movlw	1
 10943  006D4E  6E5A               	movwf	_DISPLAY_MODE,c
 10944                           
 10945                           ;menu.c: 1333: strcpy(string_to_display, " ALL");
 10946  006D50  0EEE               	movlw	low _string_to_display
 10947  006D52  0100               	movlb	0	; () banked
 10948  006D54  6F60               	movwf	strcpy@to& (0+255),b
 10949  006D56  0E01               	movlw	high _string_to_display
 10950  006D58  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10951  006D5A  0E6B               	movlw	low (STR_57+7)
 10952  006D5C  6F62               	movwf	strcpy@from& (0+255),b
 10953  006D5E  0EFF               	movlw	high (STR_57+7)
 10954  006D60  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10955  006D62  EC66  F049         	call	_strcpy	;wreg free
 10956  006D66                     l3725:
 10957                           
 10958                           ;menu.c: 1334: }
 10959                           ;menu.c: 1335: if(arpeggiatorUnLatchModeMenu.selector == 1) {
 10960  006D66  0101               	movlb	1	; () banked
 10961  006D68  051F               	decf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10962  006D6A  A4D8               	btfss	status,2,c
 10963  006D6C  D016               	goto	l3726
 10964                           
 10965                           ; BSR set to: 1
 10966                           ;menu.c: 1336: clear_row2();Lcd_Print_String("ONE AT A TIME");
 10967  006D6E  EC49  F04A         	call	_clear_row2	;wreg free
 10968  006D72  0EFC               	movlw	low STR_59
 10969  006D74  0100               	movlb	0	; () banked
 10970  006D76  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10971  006D78  0EFE               	movlw	high STR_59
 10972  006D7A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10973  006D7C  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 10974                           
 10975                           ;menu.c: 1337: DISPLAY_MODE = 1;
 10976  006D80  0E01               	movlw	1
 10977  006D82  6E5A               	movwf	_DISPLAY_MODE,c
 10978                           
 10979                           ;menu.c: 1338: strcpy(string_to_display, " OnE");
 10980  006D84  0EEE               	movlw	low _string_to_display
 10981  006D86  0100               	movlb	0	; () banked
 10982  006D88  6F60               	movwf	strcpy@to& (0+255),b
 10983  006D8A  0E01               	movlw	high _string_to_display
 10984  006D8C  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10985  006D8E  0EC8               	movlw	low STR_60
 10986  006D90  6F62               	movwf	strcpy@from& (0+255),b
 10987  006D92  0EFF               	movlw	high STR_60
 10988  006D94  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10989  006D96  EC66  F049         	call	_strcpy	;wreg free
 10990  006D9A                     l3726:
 10991                           
 10992                           ;menu.c: 1339: }
 10993                           ;menu.c: 1340: }
 10994                           ;menu.c: 1341: lcd_print_once = 1;
 10995  006D9A  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10996  006D9C                     l3722:
 10997  006D9C  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10998  006D9E  D7BA               	goto	l3723
 10999                           
 11000                           ;menu.c: 1342: }
 11001                           ;menu.c: 1344: UN_LATCH_MODE = arpeggiatorUnLatchModeMenu.selector;
 11002  006DA0  0101               	movlb	1	; () banked
 11003  006DA2  A11F               	btfss	(_arpeggiatorUnLatchModeMenu+2)& (0+255),0,b
 11004  006DA4  D002               	goto	u33940
 11005  006DA6  8035               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11006  006DA8  0012               	return	
 11007  006DAA                     u33940:
 11008  006DAA  9035               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11009  006DAC  0012               	return		;funcret
 11010  006DAE                     __end_of_Function_H_7:
 11011                           	opt stack 0
 11012                           tblptru	equ	0xFF8
 11013                           tblptrh	equ	0xFF7
 11014                           tblptrl	equ	0xFF6
 11015                           tablat	equ	0xFF5
 11016                           intcon	equ	0xFF2
 11017                           intcon2	equ	0xFF1
 11018                           postinc0	equ	0xFEE
 11019                           wreg	equ	0xFE8
 11020                           postdec1	equ	0xFE5
 11021                           fsr1l	equ	0xFE1
 11022                           status	equ	0xFD8
 11023                           
 11024 ;; *************** function _Function_H_6 *****************
 11025 ;; Defined at:
 11026 ;;		line 1294 in file "menu.c"
 11027 ;; Parameters:    Size  Location     Type
 11028 ;;		None
 11029 ;; Auto vars:     Size  Location     Type
 11030 ;;		None
 11031 ;; Return value:  Size  Location     Type
 11032 ;;                  1    wreg      void 
 11033 ;; Registers used:
 11034 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11035 ;; Tracked objects:
 11036 ;;		On entry : 0/0
 11037 ;;		On exit  : 0/0
 11038 ;;		Unchanged: 0/0
 11039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11043 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11044 ;;Total ram usage:        1 bytes
 11045 ;; Hardware stack levels used:    1
 11046 ;; Hardware stack levels required when called:   14
 11047 ;; This function calls:
 11048 ;;		_Function_H_6_1
 11049 ;;		_Function_H_6_2
 11050 ;;		_Lcd_Print_String
 11051 ;;		___lbmod
 11052 ;;		___wmul
 11053 ;;		_clear_row2
 11054 ;;		_processEncoderBuxton
 11055 ;; This function is called by:
 11056 ;;		_Function_H
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           	psect	text17
 11061  0084CA                     __ptext17:
 11062                           	opt stack 0
 11063  0084CA                     _Function_H_6:
 11064                           	opt stack 14
 11065                           
 11066                           ;menu.c: 1296: which_screen = ARPEGGIATOR_LATCH_MENU;
 11067                           
 11068                           ;incstack = 0
 11069  0084CA  0E1F               	movlw	31
 11070  0084CC  0100               	movlb	0	; () banked
 11071  0084CE  6FF9               	movwf	_which_screen& (0+255),b
 11072                           
 11073                           ; BSR set to: 0
 11074                           ;menu.c: 1297: lcd_print_once = 0;
 11075  0084D0  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11076                           
 11077                           ; BSR set to: 0
 11078                           ;menu.c: 1298: encoder_click = 0;
 11079  0084D2  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11080                           
 11081                           ;menu.c: 1300: while(encoder_click == 0) {
 11082  0084D4  D025               	goto	l3713
 11083  0084D6                     
 11084                           ;menu.c: 1301: processEncoderBuxton();
 11085                           
 11086                           ; BSR set to: 0
 11087  0084D6  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11088                           
 11089                           ;menu.c: 1302: if (lcd_print_once == 0) {
 11090  0084DA  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11091  0084DC  D020               	goto	l3715
 11092                           
 11093                           ;menu.c: 1303: clear_row2();
 11094  0084DE  EC49  F04A         	call	_clear_row2	;wreg free
 11095                           
 11096                           ;menu.c: 1304: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLatchMenu.selector % arpeggiator
      +                          LatchMenu.number) + arpeggiatorLatchMenu.address]);
 11097  0084E2  C126  F060         	movff	_arpeggiatorLatchMenu,___lbmod@divisor
 11098  0084E6  0101               	movlb	1	; () banked
 11099  0084E8  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 11100  0084EA  ECC8  F049         	call	___lbmod
 11101  0084EE  0100               	movlb	0	; () banked
 11102  0084F0  6F8D               	movwf	??_Function_H_6& (0+255),b
 11103  0084F2  518D               	movf	??_Function_H_6& (0+255),w,b
 11104  0084F4  0101               	movlb	1	; () banked
 11105  0084F6  2527               	addwf	(_arpeggiatorLatchMenu+1)& (0+255),w,b
 11106  0084F8  0100               	movlb	0	; () banked
 11107  0084FA  6F64               	movwf	___wmul@multiplier& (0+255),b
 11108  0084FC  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 11109  0084FE  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11110  008500  0E00               	movlw	0
 11111  008502  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11112  008504  0E11               	movlw	17
 11113  008506  6F66               	movwf	___wmul@multiplicand& (0+255),b
 11114  008508  EC71  F04A         	call	___wmul	;wreg free
 11115  00850C  0E9E               	movlw	low _LCD_STRINGS
 11116  00850E  0100               	movlb	0	; () banked
 11117  008510  2564               	addwf	?___wmul& (0+255),w,b
 11118  008512  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11119  008514  0EF3               	movlw	high _LCD_STRINGS
 11120  008516  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 11121  008518  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11122  00851A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 11123  00851E                     l3715:
 11124                           
 11125                           ;menu.c: 1305: }
 11126                           ;menu.c: 1306: lcd_print_once = 1;
 11127  00851E  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11128  008520                     l3713:
 11129  008520  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11130  008522  D7D9               	goto	l3714
 11131                           
 11132                           ;menu.c: 1307: }
 11133                           ;menu.c: 1310: if(arpeggiatorLatchMenu.selector == 0) {Function_H_6_1();}
 11134  008524  0101               	movlb	1	; () banked
 11135  008526  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 11136  008528  B4D8               	btfsc	status,2,c
 11137                           
 11138                           ; BSR set to: 1
 11139  00852A  EC11  F03A         	call	_Function_H_6_1	;wreg free
 11140                           
 11141                           ;menu.c: 1311: if(arpeggiatorLatchMenu.selector == 1) {Function_H_6_2();}
 11142  00852E  0101               	movlb	1	; () banked
 11143  008530  0528               	decf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 11144  008532  A4D8               	btfss	status,2,c
 11145  008534  0012               	return	
 11146                           
 11147                           ; BSR set to: 1
 11148  008536  EC84  F037         	call	_Function_H_6_2	;wreg free
 11149  00853A  0012               	return	
 11150  00853C                     __end_of_Function_H_6:
 11151                           	opt stack 0
 11152                           tblptru	equ	0xFF8
 11153                           tblptrh	equ	0xFF7
 11154                           tblptrl	equ	0xFF6
 11155                           tablat	equ	0xFF5
 11156                           intcon	equ	0xFF2
 11157                           intcon2	equ	0xFF1
 11158                           postinc0	equ	0xFEE
 11159                           wreg	equ	0xFE8
 11160                           postdec1	equ	0xFE5
 11161                           fsr1l	equ	0xFE1
 11162                           status	equ	0xFD8
 11163                           
 11164 ;; *************** function _Function_H_6_2 *****************
 11165 ;; Defined at:
 11166 ;;		line 1263 in file "menu.c"
 11167 ;; Parameters:    Size  Location     Type
 11168 ;;		None
 11169 ;; Auto vars:     Size  Location     Type
 11170 ;;		None
 11171 ;; Return value:  Size  Location     Type
 11172 ;;                  1    wreg      void 
 11173 ;; Registers used:
 11174 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11175 ;; Tracked objects:
 11176 ;;		On entry : 0/0
 11177 ;;		On exit  : 0/0
 11178 ;;		Unchanged: 0/0
 11179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11184 ;;Total ram usage:        0 bytes
 11185 ;; Hardware stack levels used:    1
 11186 ;; Hardware stack levels required when called:    9
 11187 ;; This function calls:
 11188 ;;		_Lcd_Print_String
 11189 ;;		_clear_row1
 11190 ;;		_clear_row2
 11191 ;;		_processEncoderBuxton
 11192 ;;		_strcpy
 11193 ;; This function is called by:
 11194 ;;		_Function_H_6
 11195 ;; This function uses a non-reentrant model
 11196 ;;
 11197                           
 11198                           	psect	text18
 11199  006F08                     __ptext18:
 11200                           	opt stack 0
 11201  006F08                     _Function_H_6_2:
 11202                           	opt stack 18
 11203                           
 11204                           ;menu.c: 1265: which_screen = ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU;
 11205                           
 11206                           ;incstack = 0
 11207  006F08  0E21               	movlw	33
 11208  006F0A  0100               	movlb	0	; () banked
 11209  006F0C  6FF9               	movwf	_which_screen& (0+255),b
 11210                           
 11211                           ; BSR set to: 0
 11212                           ;menu.c: 1266: lcd_print_once = 0;
 11213  006F0E  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11214                           
 11215                           ; BSR set to: 0
 11216                           ;menu.c: 1267: encoder_click = 0;
 11217  006F10  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11218                           
 11219                           ;menu.c: 1269: arpeggiatorAutoLatchOnOffMenu.selector = AUTO_LATCH;
 11220  006F12  0E00               	movlw	0
 11221  006F14  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11222  006F16  0E01               	movlw	1
 11223  006F18  0101               	movlb	1	; () banked
 11224  006F1A  6F22               	movwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),b
 11225                           
 11226                           ;menu.c: 1271: while(encoder_click == 0) {
 11227  006F1C  D042               	goto	l3704
 11228  006F1E                     
 11229                           ;menu.c: 1272: processEncoderBuxton();
 11230                           
 11231                           ; BSR set to: 1
 11232  006F1E  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11233                           
 11234                           ;menu.c: 1273: if (lcd_print_once == 0) {
 11235  006F22  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11236  006F24  D03D               	goto	l3708
 11237                           
 11238                           ;menu.c: 1274: clear_row1();Lcd_Print_String("AutoLatch ON/OFF");
 11239  006F26  EC5D  F04A         	call	_clear_row1	;wreg free
 11240  006F2A  0EDB               	movlw	low STR_51
 11241  006F2C  0100               	movlb	0	; () banked
 11242  006F2E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11243  006F30  0EFD               	movlw	high STR_51
 11244  006F32  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11245  006F34  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 11246                           
 11247                           ;menu.c: 1275: if(arpeggiatorAutoLatchOnOffMenu.selector == 0) {
 11248  006F38  0101               	movlb	1	; () banked
 11249  006F3A  5122               	movf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11250  006F3C  A4D8               	btfss	status,2,c
 11251  006F3E  D016               	goto	l3707
 11252                           
 11253                           ; BSR set to: 1
 11254                           ;menu.c: 1276: clear_row2();Lcd_Print_String("Auto Latch OFF");
 11255  006F40  EC49  F04A         	call	_clear_row2	;wreg free
 11256  006F44  0E89               	movlw	low STR_52
 11257  006F46  0100               	movlb	0	; () banked
 11258  006F48  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11259  006F4A  0EFE               	movlw	high STR_52
 11260  006F4C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11261  006F4E  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 11262                           
 11263                           ;menu.c: 1277: DISPLAY_MODE = 1;
 11264  006F52  0E01               	movlw	1
 11265  006F54  6E5A               	movwf	_DISPLAY_MODE,c
 11266                           
 11267                           ;menu.c: 1278: strcpy(string_to_display, " oFF");
 11268  006F56  0EEE               	movlw	low _string_to_display
 11269  006F58  0100               	movlb	0	; () banked
 11270  006F5A  6F60               	movwf	strcpy@to& (0+255),b
 11271  006F5C  0E01               	movlw	high _string_to_display
 11272  006F5E  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11273  006F60  0EDC               	movlw	low STR_5
 11274  006F62  6F62               	movwf	strcpy@from& (0+255),b
 11275  006F64  0EFF               	movlw	high STR_5
 11276  006F66  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11277  006F68  EC66  F049         	call	_strcpy	;wreg free
 11278  006F6C                     l3707:
 11279                           
 11280                           ;menu.c: 1279: }
 11281                           ;menu.c: 1280: if(arpeggiatorAutoLatchOnOffMenu.selector == 1) {
 11282  006F6C  0101               	movlb	1	; () banked
 11283  006F6E  0522               	decf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11284  006F70  A4D8               	btfss	status,2,c
 11285  006F72  D016               	goto	l3708
 11286                           
 11287                           ; BSR set to: 1
 11288                           ;menu.c: 1281: clear_row2();Lcd_Print_String("Auto Latch ON");
 11289  006F74  EC49  F04A         	call	_clear_row2	;wreg free
 11290  006F78  0E0A               	movlw	low STR_54
 11291  006F7A  0100               	movlb	0	; () banked
 11292  006F7C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11293  006F7E  0EFF               	movlw	high STR_54
 11294  006F80  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11295  006F82  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 11296                           
 11297                           ;menu.c: 1282: DISPLAY_MODE = 1;
 11298  006F86  0E01               	movlw	1
 11299  006F88  6E5A               	movwf	_DISPLAY_MODE,c
 11300                           
 11301                           ;menu.c: 1283: strcpy(string_to_display, "Auto");
 11302  006F8A  0EEE               	movlw	low _string_to_display
 11303  006F8C  0100               	movlb	0	; () banked
 11304  006F8E  6F60               	movwf	strcpy@to& (0+255),b
 11305  006F90  0E01               	movlw	high _string_to_display
 11306  006F92  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11307  006F94  0EF0               	movlw	low STR_4
 11308  006F96  6F62               	movwf	strcpy@from& (0+255),b
 11309  006F98  0EFF               	movlw	high STR_4
 11310  006F9A  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11311  006F9C  EC66  F049         	call	_strcpy	;wreg free
 11312  006FA0                     l3708:
 11313                           
 11314                           ;menu.c: 1284: }
 11315                           ;menu.c: 1285: }
 11316                           ;menu.c: 1286: lcd_print_once = 1;
 11317  006FA0  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11318  006FA2                     l3704:
 11319  006FA2  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11320  006FA4  D7BC               	goto	l3705
 11321                           
 11322                           ;menu.c: 1287: }
 11323                           ;menu.c: 1289: AUTO_LATCH = arpeggiatorAutoLatchOnOffMenu.selector;
 11324  006FA6  0101               	movlb	1	; () banked
 11325  006FA8  A122               	btfss	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),0,b
 11326  006FAA  D002               	goto	u29550
 11327  006FAC  8E34               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11328  006FAE  0012               	return	
 11329  006FB0                     u29550:
 11330  006FB0  9E34               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11331  006FB2  0012               	return		;funcret
 11332  006FB4                     __end_of_Function_H_6_2:
 11333                           	opt stack 0
 11334                           tblptru	equ	0xFF8
 11335                           tblptrh	equ	0xFF7
 11336                           tblptrl	equ	0xFF6
 11337                           tablat	equ	0xFF5
 11338                           intcon	equ	0xFF2
 11339                           intcon2	equ	0xFF1
 11340                           postinc0	equ	0xFEE
 11341                           wreg	equ	0xFE8
 11342                           postdec1	equ	0xFE5
 11343                           fsr1l	equ	0xFE1
 11344                           status	equ	0xFD8
 11345                           
 11346 ;; *************** function _Function_H_6_1 *****************
 11347 ;; Defined at:
 11348 ;;		line 1171 in file "menu.c"
 11349 ;; Parameters:    Size  Location     Type
 11350 ;;		None
 11351 ;; Auto vars:     Size  Location     Type
 11352 ;;  temp            1   44[BANK0 ] unsigned char 
 11353 ;; Return value:  Size  Location     Type
 11354 ;;                  1    wreg      void 
 11355 ;; Registers used:
 11356 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11357 ;; Tracked objects:
 11358 ;;		On entry : 0/0
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11365 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;Total ram usage:        1 bytes
 11367 ;; Hardware stack levels used:    1
 11368 ;; Hardware stack levels required when called:   13
 11369 ;; This function calls:
 11370 ;;		_Lcd_Print_String
 11371 ;;		_clear_row1
 11372 ;;		_clear_row2
 11373 ;;		_doTheLatch
 11374 ;;		_doTheUnLatch
 11375 ;;		_processEncoderBuxton
 11376 ;; This function is called by:
 11377 ;;		_Function_H_6
 11378 ;; This function uses a non-reentrant model
 11379 ;;
 11380                           
 11381                           	psect	text19
 11382  007422                     __ptext19:
 11383                           	opt stack 0
 11384  007422                     _Function_H_6_1:
 11385                           	opt stack 14
 11386                           
 11387                           ;menu.c: 1173: which_screen = ARPEGGIATOR_LATCH_ON_OFF_MENU;
 11388                           
 11389                           ;incstack = 0
 11390  007422  0E20               	movlw	32
 11391  007424  0100               	movlb	0	; () banked
 11392  007426  6FF9               	movwf	_which_screen& (0+255),b
 11393                           
 11394                           ; BSR set to: 0
 11395                           ;menu.c: 1174: lcd_print_once = 0;
 11396  007428  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;menu.c: 1175: encoder_click = 0;
 11400  00742A  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11401                           
 11402                           ;menu.c: 1177: arpeggiatorLatchOnOffMenu.selector = LATCH;
 11403  00742C  0E00               	movlw	0
 11404  00742E  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11405  007430  0E01               	movlw	1
 11406  007432  0101               	movlb	1	; () banked
 11407  007434  6F25               	movwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),b
 11408                           
 11409                           ;menu.c: 1179: while(encoder_click == 0) {
 11410  007436  D028               	goto	l3693
 11411  007438                     
 11412                           ;menu.c: 1180: processEncoderBuxton();
 11413                           
 11414                           ; BSR set to: 1
 11415  007438  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11416                           
 11417                           ;menu.c: 1181: if (lcd_print_once == 0) {
 11418  00743C  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11419  00743E  D023               	goto	l3697
 11420                           
 11421                           ;menu.c: 1182: clear_row1();Lcd_Print_String("Latch ON/OFF");
 11422  007440  EC5D  F04A         	call	_clear_row1	;wreg free
 11423  007444  0EDF               	movlw	low (STR_51+4)
 11424  007446  0100               	movlb	0	; () banked
 11425  007448  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11426  00744A  0EFD               	movlw	high (STR_51+4)
 11427  00744C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11428  00744E  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 11429                           
 11430                           ;menu.c: 1183: if(arpeggiatorLatchOnOffMenu.selector == 0) {
 11431  007452  0101               	movlb	1	; () banked
 11432  007454  5125               	movf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11433  007456  A4D8               	btfss	status,2,c
 11434  007458  D009               	goto	l3696
 11435                           
 11436                           ; BSR set to: 1
 11437                           ;menu.c: 1184: clear_row2();
 11438  00745A  EC49  F04A         	call	_clear_row2	;wreg free
 11439                           
 11440                           ;menu.c: 1185: Lcd_Print_String("Latch OFF");
 11441  00745E  0E8E               	movlw	low (STR_52+5)
 11442  007460  0100               	movlb	0	; () banked
 11443  007462  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11444  007464  0EFE               	movlw	high (STR_52+5)
 11445  007466  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11446  007468  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 11447  00746C                     l3696:
 11448                           
 11449                           ;menu.c: 1186: }
 11450                           ;menu.c: 1187: if(arpeggiatorLatchOnOffMenu.selector == 1) {
 11451  00746C  0101               	movlb	1	; () banked
 11452  00746E  0525               	decf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11453  007470  A4D8               	btfss	status,2,c
 11454  007472  D009               	goto	l3697
 11455                           
 11456                           ; BSR set to: 1
 11457                           ;menu.c: 1188: clear_row2();
 11458  007474  EC49  F04A         	call	_clear_row2	;wreg free
 11459                           
 11460                           ;menu.c: 1189: Lcd_Print_String("Latch ON");
 11461  007478  0E0F               	movlw	low (STR_54+5)
 11462  00747A  0100               	movlb	0	; () banked
 11463  00747C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11464  00747E  0EFF               	movlw	high (STR_54+5)
 11465  007480  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11466  007482  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 11467  007486                     l3697:
 11468                           
 11469                           ;menu.c: 1190: }
 11470                           ;menu.c: 1191: }
 11471                           ;menu.c: 1192: lcd_print_once = 1;
 11472  007486  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11473  007488                     l3693:
 11474  007488  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11475  00748A  D7D6               	goto	l3694
 11476                           
 11477                           ;menu.c: 1193: }
 11478                           ;menu.c: 1195: LATCH = arpeggiatorLatchOnOffMenu.selector;
 11479  00748C  0101               	movlb	1	; () banked
 11480  00748E  A125               	btfss	(_arpeggiatorLatchOnOffMenu+2)& (0+255),0,b
 11481  007490  D002               	goto	u29450
 11482  007492  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 11483  007494  D001               	goto	u29465
 11484  007496                     u29450:
 11485  007496  9235               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 11486  007498                     u29465:
 11487                           
 11488                           ;menu.c: 1197: if(LATCH == 1){
 11489  007498  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11490                           
 11491                           ;menu.c: 1204: doTheLatch();
 11492  00749A  ECB9  F04A         	call	_doTheLatch	;wreg free
 11493                           
 11494                           ;menu.c: 1205: }
 11495                           ;menu.c: 1207: if(LATCH == 0){
 11496  00749E  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11497  0074A0  0012               	return	
 11498                           
 11499                           ;menu.c: 1210: unsigned char temp = UN_LATCH_MODE;
 11500  0074A2  0E00               	movlw	0
 11501  0074A4  B035               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11502  0074A6  0E01               	movlw	1
 11503  0074A8  0100               	movlb	0	; () banked
 11504  0074AA  6F8C               	movwf	Function_H_6_1@temp& (0+255),b
 11505                           
 11506                           ; BSR set to: 0
 11507                           ;menu.c: 1212: UN_LATCH_MODE = 0;
 11508  0074AC  9035               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11509                           
 11510                           ; BSR set to: 0
 11511                           ;menu.c: 1213: doTheUnLatch();
 11512  0074AE  EC3B  F028         	call	_doTheUnLatch	;wreg free
 11513                           
 11514                           ;menu.c: 1216: UN_LATCH_MODE = temp;
 11515  0074B2  0100               	movlb	0	; () banked
 11516  0074B4  A18C               	btfss	Function_H_6_1@temp& (0+255),0,b
 11517  0074B6  D002               	goto	u29490
 11518  0074B8  8035               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11519  0074BA  0012               	return	
 11520  0074BC                     u29490:
 11521  0074BC  9035               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11522  0074BE  0012               	return	
 11523  0074C0                     __end_of_Function_H_6_1:
 11524                           	opt stack 0
 11525                           tblptru	equ	0xFF8
 11526                           tblptrh	equ	0xFF7
 11527                           tblptrl	equ	0xFF6
 11528                           tablat	equ	0xFF5
 11529                           intcon	equ	0xFF2
 11530                           intcon2	equ	0xFF1
 11531                           postinc0	equ	0xFEE
 11532                           wreg	equ	0xFE8
 11533                           postdec1	equ	0xFE5
 11534                           fsr1l	equ	0xFE1
 11535                           status	equ	0xFD8
 11536                           
 11537 ;; *************** function _Function_H_5 *****************
 11538 ;; Defined at:
 11539 ;;		line 1138 in file "menu.c"
 11540 ;; Parameters:    Size  Location     Type
 11541 ;;		None
 11542 ;; Auto vars:     Size  Location     Type
 11543 ;;  i               1   17[BANK0 ] unsigned char 
 11544 ;; Return value:  Size  Location     Type
 11545 ;;                  1    wreg      void 
 11546 ;; Registers used:
 11547 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11548 ;; Tracked objects:
 11549 ;;		On entry : 0/0
 11550 ;;		On exit  : 0/0
 11551 ;;		Unchanged: 0/0
 11552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11556 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11557 ;;Total ram usage:        2 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; Hardware stack levels required when called:    9
 11560 ;; This function calls:
 11561 ;;		_Lcd_Print_String
 11562 ;;		___lbmod
 11563 ;;		___wmul
 11564 ;;		_clear_row1
 11565 ;;		_clear_row2
 11566 ;;		_processEncoderBuxton
 11567 ;; This function is called by:
 11568 ;;		_Function_H
 11569 ;; This function uses a non-reentrant model
 11570 ;;
 11571                           
 11572                           	psect	text20
 11573  006DAE                     __ptext20:
 11574                           	opt stack 0
 11575  006DAE                     _Function_H_5:
 11576                           	opt stack 19
 11577                           
 11578                           ;menu.c: 1140: which_screen = ARPEGGIATOR_NOTE_LENGTH_MENU,
 11579                           ;menu.c: 1141: lcd_print_once = 0;
 11580                           
 11581                           ;incstack = 0
 11582  006DAE  0E1E               	movlw	30
 11583  006DB0  0100               	movlb	0	; () banked
 11584  006DB2  6FF9               	movwf	_which_screen& (0+255),b
 11585                           
 11586                           ; BSR set to: 0
 11587  006DB4  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11588                           
 11589                           ; BSR set to: 0
 11590                           ;menu.c: 1142: encoder_click = 0;
 11591  006DB6  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11592                           
 11593                           ;menu.c: 1145: for(unsigned char i = 0; i < 12; i++) {
 11594  006DB8  0E00               	movlw	0
 11595  006DBA  6F71               	movwf	Function_H_5@i& (0+255),b
 11596  006DBC                     l21443:
 11597                           
 11598                           ; BSR set to: 0
 11599  006DBC  0E0B               	movlw	11
 11600  006DBE  6571               	cpfsgt	Function_H_5@i& (0+255),b
 11601  006DC0  D001               	goto	l3683
 11602  006DC2  D03D               	goto	l3686
 11603  006DC4                     l3683:
 11604                           
 11605                           ; BSR set to: 0
 11606                           ;menu.c: 1146: if(NOTE_LENGTH_PULSES_ARRAY[i] == NOTE_LENGTH_PULSES) {
 11607                           
 11608                           ; BSR set to: 0
 11609  006DC4  5171               	movf	Function_H_5@i& (0+255),w,b
 11610  006DC6  0D01               	mullw	1
 11611  006DC8  0EDC               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11612  006DCA  24F3               	addwf	prodl,w,c
 11613  006DCC  6ED9               	movwf	fsr2l,c
 11614  006DCE  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11615  006DD0  20F4               	addwfc	prodh,w,c
 11616  006DD2  6EDA               	movwf	fsr2h,c
 11617  006DD4  51F7               	movf	_NOTE_LENGTH_PULSES& (0+255),w,b
 11618  006DD6  18DE               	xorwf	postinc2,w,c
 11619  006DD8  B4D8               	btfsc	status,2,c
 11620                           
 11621                           ; BSR set to: 0
 11622                           ;menu.c: 1148: arpeggiatorNoteLengthMenu.selector = i;
 11623  006DDA  C071  F12B         	movff	Function_H_5@i,_arpeggiatorNoteLengthMenu+2
 11624                           
 11625                           ; BSR set to: 0
 11626                           
 11627                           ; BSR set to: 0
 11628  006DDE  2B71               	incf	Function_H_5@i& (0+255),f,b
 11629  006DE0  D7ED               	goto	l21443
 11630  006DE2                     
 11631                           ;menu.c: 1155: processEncoderBuxton();
 11632                           
 11633                           ; BSR set to: 0
 11634  006DE2  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11635                           
 11636                           ;menu.c: 1156: if (lcd_print_once == 0) {
 11637  006DE6  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11638  006DE8  D029               	goto	l3688
 11639                           
 11640                           ;menu.c: 1157: clear_row1();
 11641  006DEA  EC5D  F04A         	call	_clear_row1	;wreg free
 11642                           
 11643                           ;menu.c: 1158: Lcd_Print_String("Note Length:");
 11644  006DEE  0E32               	movlw	low STR_47
 11645  006DF0  0100               	movlb	0	; () banked
 11646  006DF2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11647  006DF4  0EFF               	movlw	high STR_47
 11648  006DF6  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11649  006DF8  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 11650                           
 11651                           ;menu.c: 1159: clear_row2();
 11652  006DFC  EC49  F04A         	call	_clear_row2	;wreg free
 11653                           
 11654                           ;menu.c: 1160: Lcd_Print_String(LCD_STRINGS[(arpeggiatorNoteLengthMenu.selector % arpegg
      +                          iatorNoteLengthMenu.number) + arpeggiatorNoteLengthMenu.address]);
 11655  006E00  C129  F060         	movff	_arpeggiatorNoteLengthMenu,___lbmod@divisor
 11656  006E04  0101               	movlb	1	; () banked
 11657  006E06  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11658  006E08  ECC8  F049         	call	___lbmod
 11659  006E0C  0100               	movlb	0	; () banked
 11660  006E0E  6F70               	movwf	??_Function_H_5& (0+255),b
 11661  006E10  5170               	movf	??_Function_H_5& (0+255),w,b
 11662  006E12  0101               	movlb	1	; () banked
 11663  006E14  252A               	addwf	(_arpeggiatorNoteLengthMenu+1)& (0+255),w,b
 11664  006E16  0100               	movlb	0	; () banked
 11665  006E18  6F64               	movwf	___wmul@multiplier& (0+255),b
 11666  006E1A  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 11667  006E1C  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11668  006E1E  0E00               	movlw	0
 11669  006E20  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11670  006E22  0E11               	movlw	17
 11671  006E24  6F66               	movwf	___wmul@multiplicand& (0+255),b
 11672  006E26  EC71  F04A         	call	___wmul	;wreg free
 11673  006E2A  0E9E               	movlw	low _LCD_STRINGS
 11674  006E2C  0100               	movlb	0	; () banked
 11675  006E2E  2564               	addwf	?___wmul& (0+255),w,b
 11676  006E30  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11677  006E32  0EF3               	movlw	high _LCD_STRINGS
 11678  006E34  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 11679  006E36  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11680  006E38  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 11681  006E3C                     l3688:
 11682                           
 11683                           ;menu.c: 1161: }
 11684                           ;menu.c: 1162: lcd_print_once = 1;
 11685  006E3C  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11686  006E3E                     l3686:
 11687  006E3E  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11688  006E40  D7D0               	goto	l3687
 11689                           
 11690                           ;menu.c: 1163: }
 11691                           ;menu.c: 1166: NOTE_LENGTH_PULSES = NOTE_LENGTH_PULSES_ARRAY[arpeggiatorNoteLengthMenu.s
      +                          elector];
 11692  006E42  0101               	movlb	1	; () banked
 11693  006E44  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11694  006E46  0D01               	mullw	1
 11695  006E48  0EDC               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11696  006E4A  24F3               	addwf	prodl,w,c
 11697  006E4C  6ED9               	movwf	fsr2l,c
 11698  006E4E  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11699  006E50  20F4               	addwfc	prodh,w,c
 11700  006E52  6EDA               	movwf	fsr2h,c
 11701  006E54  50DF               	movf	indf2,w,c
 11702  006E56  0100               	movlb	0	; () banked
 11703  006E58  6FF7               	movwf	_NOTE_LENGTH_PULSES& (0+255),b
 11704                           
 11705                           ; BSR set to: 0
 11706  006E5A  0012               	return		;funcret
 11707  006E5C                     __end_of_Function_H_5:
 11708                           	opt stack 0
 11709                           tblptru	equ	0xFF8
 11710                           tblptrh	equ	0xFF7
 11711                           tblptrl	equ	0xFF6
 11712                           tablat	equ	0xFF5
 11713                           prodh	equ	0xFF4
 11714                           prodl	equ	0xFF3
 11715                           intcon	equ	0xFF2
 11716                           intcon2	equ	0xFF1
 11717                           postinc0	equ	0xFEE
 11718                           wreg	equ	0xFE8
 11719                           postdec1	equ	0xFE5
 11720                           fsr1l	equ	0xFE1
 11721                           indf2	equ	0xFDF
 11722                           postinc2	equ	0xFDE
 11723                           fsr2h	equ	0xFDA
 11724                           fsr2l	equ	0xFD9
 11725                           status	equ	0xFD8
 11726                           
 11727 ;; *************** function _Function_H_4 *****************
 11728 ;; Defined at:
 11729 ;;		line 1103 in file "menu.c"
 11730 ;; Parameters:    Size  Location     Type
 11731 ;;		None
 11732 ;; Auto vars:     Size  Location     Type
 11733 ;;		None
 11734 ;; Return value:  Size  Location     Type
 11735 ;;                  1    wreg      void 
 11736 ;; Registers used:
 11737 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11738 ;; Tracked objects:
 11739 ;;		On entry : 0/0
 11740 ;;		On exit  : 0/0
 11741 ;;		Unchanged: 0/0
 11742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11746 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11747 ;;Total ram usage:        1 bytes
 11748 ;; Hardware stack levels used:    1
 11749 ;; Hardware stack levels required when called:    9
 11750 ;; This function calls:
 11751 ;;		_Lcd_Print_String
 11752 ;;		___lbmod
 11753 ;;		___wmul
 11754 ;;		_clear_row1
 11755 ;;		_clear_row2
 11756 ;;		_processEncoderBuxton
 11757 ;;		_setupArpeggio
 11758 ;; This function is called by:
 11759 ;;		_Function_H
 11760 ;; This function uses a non-reentrant model
 11761 ;;
 11762                           
 11763                           	psect	text21
 11764  006C46                     __ptext21:
 11765                           	opt stack 0
 11766  006C46                     _Function_H_4:
 11767                           	opt stack 19
 11768                           
 11769                           ;menu.c: 1105: which_screen = ARPEGGIATOR_ARPEGGIO_TYPE_MENU,
 11770                           ;menu.c: 1106: lcd_print_once = 0;
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;incstack = 0
 11774  006C46  0E1D               	movlw	29
 11775  006C48  0100               	movlb	0	; () banked
 11776  006C4A  6FF9               	movwf	_which_screen& (0+255),b
 11777                           
 11778                           ; BSR set to: 0
 11779  006C4C  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;menu.c: 1107: encoder_click = 0;
 11783  006C4E  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11784                           
 11785                           ; BSR set to: 0
 11786                           ;menu.c: 1109: arpeggiatorTypeMenu.selector = ARPEGGIO_TYPE;
 11787  006C50  C0EA  F12E         	movff	_ARPEGGIO_TYPE,_arpeggiatorTypeMenu+2
 11788                           
 11789                           ;menu.c: 1111: while(encoder_click == 0) {
 11790  006C54  D02E               	goto	l3670
 11791  006C56                     
 11792                           ;menu.c: 1112: processEncoderBuxton();
 11793                           
 11794                           ; BSR set to: 0
 11795  006C56  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11796                           
 11797                           ;menu.c: 1113: if (lcd_print_once == 0) {
 11798  006C5A  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11799  006C5C  D029               	goto	l3672
 11800                           
 11801                           ;menu.c: 1114: clear_row1();
 11802  006C5E  EC5D  F04A         	call	_clear_row1	;wreg free
 11803                           
 11804                           ;menu.c: 1115: Lcd_Print_String("Select Arpeggio:");
 11805  006C62  0EB9               	movlw	low STR_46
 11806  006C64  0100               	movlb	0	; () banked
 11807  006C66  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11808  006C68  0EFD               	movlw	high STR_46
 11809  006C6A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11810  006C6C  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 11811                           
 11812                           ;menu.c: 1116: clear_row2();
 11813  006C70  EC49  F04A         	call	_clear_row2	;wreg free
 11814                           
 11815                           ;menu.c: 1117: Lcd_Print_String(LCD_STRINGS[(arpeggiatorTypeMenu.selector % arpeggiatorT
      +                          ypeMenu.number) + arpeggiatorTypeMenu.address]);
 11816  006C74  C12C  F060         	movff	_arpeggiatorTypeMenu,___lbmod@divisor
 11817  006C78  0101               	movlb	1	; () banked
 11818  006C7A  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 11819  006C7C  ECC8  F049         	call	___lbmod
 11820  006C80  0100               	movlb	0	; () banked
 11821  006C82  6F77               	movwf	??_Function_H_4& (0+255),b
 11822  006C84  5177               	movf	??_Function_H_4& (0+255),w,b
 11823  006C86  0101               	movlb	1	; () banked
 11824  006C88  252D               	addwf	(_arpeggiatorTypeMenu+1)& (0+255),w,b
 11825  006C8A  0100               	movlb	0	; () banked
 11826  006C8C  6F64               	movwf	___wmul@multiplier& (0+255),b
 11827  006C8E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 11828  006C90  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11829  006C92  0E00               	movlw	0
 11830  006C94  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11831  006C96  0E11               	movlw	17
 11832  006C98  6F66               	movwf	___wmul@multiplicand& (0+255),b
 11833  006C9A  EC71  F04A         	call	___wmul	;wreg free
 11834  006C9E  0E9E               	movlw	low _LCD_STRINGS
 11835  006CA0  0100               	movlb	0	; () banked
 11836  006CA2  2564               	addwf	?___wmul& (0+255),w,b
 11837  006CA4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11838  006CA6  0EF3               	movlw	high _LCD_STRINGS
 11839  006CA8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 11840  006CAA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11841  006CAC  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 11842  006CB0                     l3672:
 11843                           
 11844                           ;menu.c: 1118: }
 11845                           ;menu.c: 1119: lcd_print_once = 1;
 11846  006CB0  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11847  006CB2                     l3670:
 11848  006CB2  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11849  006CB4  D7D0               	goto	l3671
 11850                           
 11851                           ;menu.c: 1120: }
 11852                           ;menu.c: 1122: ARPEGGIO_TYPE = arpeggiatorTypeMenu.selector;
 11853  006CB6  C12E  F0EA         	movff	_arpeggiatorTypeMenu+2,_ARPEGGIO_TYPE
 11854                           
 11855                           ;menu.c: 1125: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == UP) || (ARPEGGIO_TY
      +                          PE == UP_DOWN) || (ARPEGGIO_TYPE == RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) 
      +                          {
 11856  006CBA  0E06               	movlw	6
 11857  006CBC  0100               	movlb	0	; () banked
 11858  006CBE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11859  006CC0  B4D8               	btfsc	status,2,c
 11860  006CC2  D00F               	goto	u33780
 11861                           
 11862                           ; BSR set to: 0
 11863  006CC4  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 11864  006CC6  B4D8               	btfsc	status,2,c
 11865  006CC8  D00C               	goto	u33780
 11866                           
 11867                           ; BSR set to: 0
 11868  006CCA  0E02               	movlw	2
 11869  006CCC  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11870  006CCE  B4D8               	btfsc	status,2,c
 11871  006CD0  D008               	goto	u33780
 11872                           
 11873                           ; BSR set to: 0
 11874  006CD2  0E05               	movlw	5
 11875  006CD4  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11876  006CD6  B4D8               	btfsc	status,2,c
 11877  006CD8  D004               	goto	u33780
 11878                           
 11879                           ; BSR set to: 0
 11880  006CDA  0E04               	movlw	4
 11881  006CDC  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11882  006CDE  A4D8               	btfss	status,2,c
 11883  006CE0  D002               	goto	l3674
 11884  006CE2                     u33780:
 11885                           
 11886                           ; BSR set to: 0
 11887                           ;menu.c: 1126: startingDirection = UP;
 11888                           
 11889                           ; BSR set to: 0
 11890  006CE2  0E00               	movlw	0
 11891  006CE4  6FE9               	movwf	_startingDirection& (0+255),b
 11892  006CE6                     l3674:
 11893                           
 11894                           ; BSR set to: 0
 11895                           ;menu.c: 1127: }
 11896                           ;menu.c: 1129: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP)) {
 11897                           
 11898                           ; BSR set to: 0
 11899  006CE6  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 11900  006CE8  B4D8               	btfsc	status,2,c
 11901  006CEA  D004               	goto	u33800
 11902                           
 11903                           ; BSR set to: 0
 11904  006CEC  0E03               	movlw	3
 11905  006CEE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11906  006CF0  A4D8               	btfss	status,2,c
 11907  006CF2  D002               	goto	l3677
 11908  006CF4                     u33800:
 11909                           
 11910                           ; BSR set to: 0
 11911                           ;menu.c: 1130: startingDirection = DOWN;
 11912                           
 11913                           ; BSR set to: 0
 11914  006CF4  0E01               	movlw	1
 11915  006CF6  6FE9               	movwf	_startingDirection& (0+255),b
 11916  006CF8                     l3677:
 11917                           
 11918                           ; BSR set to: 0
 11919                           ;menu.c: 1131: }
 11920                           ;menu.c: 1133: setupArpeggio();
 11921                           
 11922                           ; BSR set to: 0
 11923  006CF8  ECFB  F040         	call	_setupArpeggio	;wreg free
 11924  006CFC  0012               	return		;funcret
 11925  006CFE                     __end_of_Function_H_4:
 11926                           	opt stack 0
 11927                           tblptru	equ	0xFF8
 11928                           tblptrh	equ	0xFF7
 11929                           tblptrl	equ	0xFF6
 11930                           tablat	equ	0xFF5
 11931                           prodh	equ	0xFF4
 11932                           prodl	equ	0xFF3
 11933                           intcon	equ	0xFF2
 11934                           intcon2	equ	0xFF1
 11935                           postinc0	equ	0xFEE
 11936                           wreg	equ	0xFE8
 11937                           postdec1	equ	0xFE5
 11938                           fsr1l	equ	0xFE1
 11939                           indf2	equ	0xFDF
 11940                           postinc2	equ	0xFDE
 11941                           fsr2h	equ	0xFDA
 11942                           fsr2l	equ	0xFD9
 11943                           status	equ	0xFD8
 11944                           
 11945 ;; *************** function _Function_H_3 *****************
 11946 ;; Defined at:
 11947 ;;		line 1076 in file "menu.c"
 11948 ;; Parameters:    Size  Location     Type
 11949 ;;		None
 11950 ;; Auto vars:     Size  Location     Type
 11951 ;;		None
 11952 ;; Return value:  Size  Location     Type
 11953 ;;                  1    wreg      void 
 11954 ;; Registers used:
 11955 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11956 ;; Tracked objects:
 11957 ;;		On entry : 0/0
 11958 ;;		On exit  : 0/0
 11959 ;;		Unchanged: 0/0
 11960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11965 ;;Total ram usage:        0 bytes
 11966 ;; Hardware stack levels used:    1
 11967 ;; Hardware stack levels required when called:    9
 11968 ;; This function calls:
 11969 ;;		_Lcd_Print_String
 11970 ;;		_Lcd_Set_Cursor
 11971 ;;		_clear_row2
 11972 ;;		_int2string
 11973 ;;		_processEncoderBuxton
 11974 ;; This function is called by:
 11975 ;;		_Function_H
 11976 ;; This function uses a non-reentrant model
 11977 ;;
 11978                           
 11979                           	psect	text22
 11980  008A22                     __ptext22:
 11981                           	opt stack 0
 11982  008A22                     _Function_H_3:
 11983                           	opt stack 19
 11984                           
 11985                           ;menu.c: 1078: which_screen = ARPEGGIATOR_OCTAVES_MENU;
 11986                           
 11987                           ;incstack = 0
 11988  008A22  0E1C               	movlw	28
 11989  008A24  0100               	movlb	0	; () banked
 11990  008A26  6FF9               	movwf	_which_screen& (0+255),b
 11991                           
 11992                           ; BSR set to: 0
 11993                           ;menu.c: 1079: lcd_print_once = 0;
 11994  008A28  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11995                           
 11996                           ; BSR set to: 0
 11997                           ;menu.c: 1080: encoder_click = 0;
 11998  008A2A  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11999                           
 12000                           ; BSR set to: 0
 12001                           ;menu.c: 1082: arpeggiatorOctavesMenu.selector = OCTAVES;
 12002  008A2C  C0F8  F131         	movff	_OCTAVES,_arpeggiatorOctavesMenu+2
 12003                           
 12004                           ;menu.c: 1084: while(encoder_click == 0) {
 12005  008A30  D021               	goto	l3663
 12006  008A32                     
 12007                           ;menu.c: 1085: processEncoderBuxton();
 12008                           
 12009                           ; BSR set to: 0
 12010  008A32  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12011                           
 12012                           ;menu.c: 1086: if (lcd_print_once == 0) {
 12013  008A36  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12014  008A38  D009               	goto	l3665
 12015                           
 12016                           ;menu.c: 1087: clear_row2();
 12017  008A3A  EC49  F04A         	call	_clear_row2	;wreg free
 12018                           
 12019                           ;menu.c: 1088: Lcd_Print_String("Octave Range:");
 12020  008A3E  0EEE               	movlw	low STR_45
 12021  008A40  0100               	movlb	0	; () banked
 12022  008A42  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12023  008A44  0EFE               	movlw	high STR_45
 12024  008A46  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12025  008A48  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 12026  008A4C                     l3665:
 12027                           
 12028                           ;menu.c: 1089: }
 12029                           ;menu.c: 1090: lcd_print_once = 1;
 12030  008A4C  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12031                           
 12032                           ;menu.c: 1093: int2string(arpeggiatorOctavesMenu.selector);
 12033  008A4E  C131  F074         	movff	_arpeggiatorOctavesMenu+2,int2string@number
 12034  008A52  0100               	movlb	0	; () banked
 12035  008A54  6B75               	clrf	(int2string@number+1)& (0+255),b
 12036  008A56  EC52  F035         	call	_int2string	;wreg free
 12037                           
 12038                           ;menu.c: 1094: Lcd_Set_Cursor(2,13);
 12039  008A5A  0E0D               	movlw	13
 12040  008A5C  0100               	movlb	0	; () banked
 12041  008A5E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 12042  008A60  0E02               	movlw	2
 12043  008A62  ECF7  F045         	call	_Lcd_Set_Cursor
 12044                           
 12045                           ;menu.c: 1095: Lcd_Print_String(string2display);
 12046  008A66  0E82               	movlw	low _string2display
 12047  008A68  0100               	movlb	0	; () banked
 12048  008A6A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12049  008A6C  0E01               	movlw	high _string2display
 12050  008A6E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12051  008A70  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 12052  008A74                     l3663:
 12053  008A74  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12054  008A76  D7DD               	goto	l3664
 12055                           
 12056                           ;menu.c: 1096: }
 12057                           ;menu.c: 1098: OCTAVES = arpeggiatorOctavesMenu.selector;
 12058  008A78  C131  F0F8         	movff	_arpeggiatorOctavesMenu+2,_OCTAVES
 12059  008A7C  0012               	return		;funcret
 12060  008A7E                     __end_of_Function_H_3:
 12061                           	opt stack 0
 12062                           tblptru	equ	0xFF8
 12063                           tblptrh	equ	0xFF7
 12064                           tblptrl	equ	0xFF6
 12065                           tablat	equ	0xFF5
 12066                           prodh	equ	0xFF4
 12067                           prodl	equ	0xFF3
 12068                           intcon	equ	0xFF2
 12069                           intcon2	equ	0xFF1
 12070                           postinc0	equ	0xFEE
 12071                           wreg	equ	0xFE8
 12072                           postdec1	equ	0xFE5
 12073                           fsr1l	equ	0xFE1
 12074                           indf2	equ	0xFDF
 12075                           postinc2	equ	0xFDE
 12076                           fsr2h	equ	0xFDA
 12077                           fsr2l	equ	0xFD9
 12078                           status	equ	0xFD8
 12079                           
 12080 ;; *************** function _Function_H_2 *****************
 12081 ;; Defined at:
 12082 ;;		line 1049 in file "menu.c"
 12083 ;; Parameters:    Size  Location     Type
 12084 ;;		None
 12085 ;; Auto vars:     Size  Location     Type
 12086 ;;		None
 12087 ;; Return value:  Size  Location     Type
 12088 ;;                  1    wreg      void 
 12089 ;; Registers used:
 12090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12091 ;; Tracked objects:
 12092 ;;		On entry : 0/0
 12093 ;;		On exit  : 0/0
 12094 ;;		Unchanged: 0/0
 12095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;Total ram usage:        0 bytes
 12101 ;; Hardware stack levels used:    1
 12102 ;; Hardware stack levels required when called:    9
 12103 ;; This function calls:
 12104 ;;		_Lcd_Print_String
 12105 ;;		_Lcd_Set_Cursor
 12106 ;;		_calculate_pulse_length
 12107 ;;		_clear_row2
 12108 ;;		_int2string
 12109 ;;		_processEncoderBuxton
 12110 ;; This function is called by:
 12111 ;;		_Function_H
 12112 ;; This function uses a non-reentrant model
 12113 ;;
 12114                           
 12115                           	psect	text23
 12116  0087CE                     __ptext23:
 12117                           	opt stack 0
 12118  0087CE                     _Function_H_2:
 12119                           	opt stack 19
 12120                           
 12121                           ;menu.c: 1051: which_screen = ARPEGGIATOR_TEMPO_MENU;
 12122                           
 12123                           ;incstack = 0
 12124  0087CE  0E1B               	movlw	27
 12125  0087D0  0100               	movlb	0	; () banked
 12126  0087D2  6FF9               	movwf	_which_screen& (0+255),b
 12127                           
 12128                           ; BSR set to: 0
 12129                           ;menu.c: 1052: lcd_print_once = 0;
 12130  0087D4  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;menu.c: 1053: encoder_click = 0;
 12134  0087D6  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12135                           
 12136                           ; BSR set to: 0
 12137                           ;menu.c: 1055: arpeggiatorTempoMenu.selector = BPM;
 12138  0087D8  C0FF  F134         	movff	_BPM,_arpeggiatorTempoMenu+2
 12139                           
 12140                           ;menu.c: 1057: while(encoder_click == 0) {
 12141  0087DC  D021               	goto	l3656
 12142  0087DE                     
 12143                           ;menu.c: 1058: processEncoderBuxton();
 12144                           
 12145                           ; BSR set to: 0
 12146  0087DE  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12147                           
 12148                           ;menu.c: 1059: if (lcd_print_once == 0) {
 12149  0087E2  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12150  0087E4  D009               	goto	l3658
 12151                           
 12152                           ;menu.c: 1060: clear_row2();
 12153  0087E6  EC49  F04A         	call	_clear_row2	;wreg free
 12154                           
 12155                           ;menu.c: 1061: Lcd_Print_String("Tempo (BPM): ");
 12156  0087EA  0EB6               	movlw	low STR_44
 12157  0087EC  0100               	movlb	0	; () banked
 12158  0087EE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12159  0087F0  0EFE               	movlw	high STR_44
 12160  0087F2  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12161  0087F4  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 12162  0087F8                     l3658:
 12163                           
 12164                           ;menu.c: 1062: }
 12165                           ;menu.c: 1063: lcd_print_once = 1;
 12166  0087F8  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12167                           
 12168                           ;menu.c: 1066: int2string(arpeggiatorTempoMenu.selector);
 12169  0087FA  C134  F074         	movff	_arpeggiatorTempoMenu+2,int2string@number
 12170  0087FE  0100               	movlb	0	; () banked
 12171  008800  6B75               	clrf	(int2string@number+1)& (0+255),b
 12172  008802  EC52  F035         	call	_int2string	;wreg free
 12173                           
 12174                           ;menu.c: 1067: Lcd_Set_Cursor(2,13);
 12175  008806  0E0D               	movlw	13
 12176  008808  0100               	movlb	0	; () banked
 12177  00880A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 12178  00880C  0E02               	movlw	2
 12179  00880E  ECF7  F045         	call	_Lcd_Set_Cursor
 12180                           
 12181                           ;menu.c: 1068: Lcd_Print_String(string2display);
 12182  008812  0E82               	movlw	low _string2display
 12183  008814  0100               	movlb	0	; () banked
 12184  008816  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12185  008818  0E01               	movlw	high _string2display
 12186  00881A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12187  00881C  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 12188  008820                     l3656:
 12189  008820  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12190  008822  D7DD               	goto	l3657
 12191                           
 12192                           ;menu.c: 1069: }
 12193                           ;menu.c: 1071: BPM = arpeggiatorTempoMenu.selector;
 12194  008824  C134  F0FF         	movff	_arpeggiatorTempoMenu+2,_BPM
 12195                           
 12196                           ;menu.c: 1072: TIMER_PRELOAD = calculate_pulse_length();
 12197  008828  EC7A  F02E         	call	_calculate_pulse_length	;wreg free
 12198  00882C  C0C2  F16D         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 12199  008830  C0C3  F16E         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 12200  008834  0012               	return		;funcret
 12201  008836                     __end_of_Function_H_2:
 12202                           	opt stack 0
 12203                           tblptru	equ	0xFF8
 12204                           tblptrh	equ	0xFF7
 12205                           tblptrl	equ	0xFF6
 12206                           tablat	equ	0xFF5
 12207                           prodh	equ	0xFF4
 12208                           prodl	equ	0xFF3
 12209                           intcon	equ	0xFF2
 12210                           intcon2	equ	0xFF1
 12211                           postinc0	equ	0xFEE
 12212                           wreg	equ	0xFE8
 12213                           postdec1	equ	0xFE5
 12214                           fsr1l	equ	0xFE1
 12215                           indf2	equ	0xFDF
 12216                           postinc2	equ	0xFDE
 12217                           fsr2h	equ	0xFDA
 12218                           fsr2l	equ	0xFD9
 12219                           status	equ	0xFD8
 12220                           
 12221 ;; *************** function _Function_H_1 *****************
 12222 ;; Defined at:
 12223 ;;		line 1013 in file "menu.c"
 12224 ;; Parameters:    Size  Location     Type
 12225 ;;		None
 12226 ;; Auto vars:     Size  Location     Type
 12227 ;;		None
 12228 ;; Return value:  Size  Location     Type
 12229 ;;                  1    wreg      void 
 12230 ;; Registers used:
 12231 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12232 ;; Tracked objects:
 12233 ;;		On entry : 0/0
 12234 ;;		On exit  : 0/0
 12235 ;;		Unchanged: 0/0
 12236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;Total ram usage:        0 bytes
 12242 ;; Hardware stack levels used:    1
 12243 ;; Hardware stack levels required when called:    9
 12244 ;; This function calls:
 12245 ;;		_Lcd_Print_String
 12246 ;;		_clear_row2
 12247 ;;		_processEncoderBuxton
 12248 ;;		_strcpy
 12249 ;; This function is called by:
 12250 ;;		_Function_H
 12251 ;; This function uses a non-reentrant model
 12252 ;;
 12253                           
 12254                           	psect	text24
 12255  00755E                     __ptext24:
 12256                           	opt stack 0
 12257  00755E                     _Function_H_1:
 12258                           	opt stack 19
 12259                           
 12260                           ;menu.c: 1015: which_screen = ARPEGGIATOR_ON_OFF_MENU;
 12261                           
 12262                           ;incstack = 0
 12263  00755E  0E1A               	movlw	26
 12264  007560  0100               	movlb	0	; () banked
 12265  007562  6FF9               	movwf	_which_screen& (0+255),b
 12266                           
 12267                           ; BSR set to: 0
 12268                           ;menu.c: 1016: lcd_print_once = 0;
 12269  007564  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12270                           
 12271                           ; BSR set to: 0
 12272                           ;menu.c: 1017: encoder_click = 0;
 12273  007566  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12274                           
 12275                           ;menu.c: 1019: arpeggiatorOnOffMenu.selector = ARPEGGIO_ON;
 12276  007568  0E00               	movlw	0
 12277  00756A  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12278  00756C  0E01               	movlw	1
 12279  00756E  0101               	movlb	1	; () banked
 12280  007570  6F37               	movwf	(_arpeggiatorOnOffMenu+2)& (0+255),b
 12281                           
 12282                           ;menu.c: 1021: while(encoder_click == 0) {
 12283  007572  D039               	goto	l3647
 12284  007574                     
 12285                           ;menu.c: 1022: processEncoderBuxton();
 12286                           
 12287                           ; BSR set to: 1
 12288  007574  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12289                           
 12290                           ;menu.c: 1023: if (lcd_print_once == 0) {
 12291  007578  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12292  00757A  D034               	goto	l3651
 12293                           
 12294                           ;menu.c: 1028: if(arpeggiatorOnOffMenu.selector == 0) {
 12295  00757C  0101               	movlb	1	; () banked
 12296  00757E  5137               	movf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12297  007580  A4D8               	btfss	status,2,c
 12298  007582  D016               	goto	l3650
 12299                           
 12300                           ; BSR set to: 1
 12301                           ;menu.c: 1029: clear_row2();
 12302  007584  EC49  F04A         	call	_clear_row2	;wreg free
 12303                           
 12304                           ;menu.c: 1030: Lcd_Print_String("ARPEGGIATOR OFF");
 12305  007588  0E3D               	movlw	low STR_40
 12306  00758A  0100               	movlb	0	; () banked
 12307  00758C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12308  00758E  0EFE               	movlw	high STR_40
 12309  007590  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12310  007592  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 12311                           
 12312                           ;menu.c: 1031: DISPLAY_MODE = 1;
 12313  007596  0E01               	movlw	1
 12314  007598  6E5A               	movwf	_DISPLAY_MODE,c
 12315                           
 12316                           ;menu.c: 1032: strcpy(string_to_display, "AoFF");
 12317  00759A  0EEE               	movlw	low _string_to_display
 12318  00759C  0100               	movlb	0	; () banked
 12319  00759E  6F60               	movwf	strcpy@to& (0+255),b
 12320  0075A0  0E01               	movlw	high _string_to_display
 12321  0075A2  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12322  0075A4  0ECD               	movlw	low STR_41
 12323  0075A6  6F62               	movwf	strcpy@from& (0+255),b
 12324  0075A8  0EFF               	movlw	high STR_41
 12325  0075AA  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12326  0075AC  EC66  F049         	call	_strcpy	;wreg free
 12327  0075B0                     l3650:
 12328                           
 12329                           ;menu.c: 1033: }
 12330                           ;menu.c: 1034: if(arpeggiatorOnOffMenu.selector == 1) {
 12331  0075B0  0101               	movlb	1	; () banked
 12332  0075B2  0537               	decf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12333  0075B4  A4D8               	btfss	status,2,c
 12334  0075B6  D016               	goto	l3651
 12335                           
 12336                           ; BSR set to: 1
 12337                           ;menu.c: 1035: clear_row2();
 12338  0075B8  EC49  F04A         	call	_clear_row2	;wreg free
 12339                           
 12340                           ;menu.c: 1036: Lcd_Print_String("ARPEGGIATOR ON");
 12341  0075BC  0E98               	movlw	low STR_42
 12342  0075BE  0100               	movlb	0	; () banked
 12343  0075C0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12344  0075C2  0EFE               	movlw	high STR_42
 12345  0075C4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12346  0075C6  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 12347                           
 12348                           ;menu.c: 1037: DISPLAY_MODE = 1;
 12349  0075CA  0E01               	movlw	1
 12350  0075CC  6E5A               	movwf	_DISPLAY_MODE,c
 12351                           
 12352                           ;menu.c: 1038: strcpy(string_to_display, " ArP");
 12353  0075CE  0EEE               	movlw	low _string_to_display
 12354  0075D0  0100               	movlb	0	; () banked
 12355  0075D2  6F60               	movwf	strcpy@to& (0+255),b
 12356  0075D4  0E01               	movlw	high _string_to_display
 12357  0075D6  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12358  0075D8  0ED2               	movlw	low STR_43
 12359  0075DA  6F62               	movwf	strcpy@from& (0+255),b
 12360  0075DC  0EFF               	movlw	high STR_43
 12361  0075DE  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12362  0075E0  EC66  F049         	call	_strcpy	;wreg free
 12363  0075E4                     l3651:
 12364                           
 12365                           ;menu.c: 1039: }
 12366                           ;menu.c: 1040: }
 12367                           ;menu.c: 1041: lcd_print_once = 1;
 12368  0075E4  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12369  0075E6                     l3647:
 12370  0075E6  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12371  0075E8  D7C5               	goto	l3648
 12372                           
 12373                           ;menu.c: 1042: }
 12374                           ;menu.c: 1044: ARPEGGIO_ON = arpeggiatorOnOffMenu.selector;
 12375  0075EA  0101               	movlb	1	; () banked
 12376  0075EC  A137               	btfss	(_arpeggiatorOnOffMenu+2)& (0+255),0,b
 12377  0075EE  D002               	goto	u33660
 12378  0075F0  8835               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12379  0075F2  0012               	return	
 12380  0075F4                     u33660:
 12381  0075F4  9835               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12382  0075F6  0012               	return		;funcret
 12383  0075F8                     __end_of_Function_H_1:
 12384                           	opt stack 0
 12385                           tblptru	equ	0xFF8
 12386                           tblptrh	equ	0xFF7
 12387                           tblptrl	equ	0xFF6
 12388                           tablat	equ	0xFF5
 12389                           prodh	equ	0xFF4
 12390                           prodl	equ	0xFF3
 12391                           intcon	equ	0xFF2
 12392                           intcon2	equ	0xFF1
 12393                           postinc0	equ	0xFEE
 12394                           wreg	equ	0xFE8
 12395                           postdec1	equ	0xFE5
 12396                           fsr1l	equ	0xFE1
 12397                           indf2	equ	0xFDF
 12398                           postinc2	equ	0xFDE
 12399                           fsr2h	equ	0xFDA
 12400                           fsr2l	equ	0xFD9
 12401                           status	equ	0xFD8
 12402                           
 12403 ;; *************** function _Function_G *****************
 12404 ;; Defined at:
 12405 ;;		line 962 in file "menu.c"
 12406 ;; Parameters:    Size  Location     Type
 12407 ;;		None
 12408 ;; Auto vars:     Size  Location     Type
 12409 ;;		None
 12410 ;; Return value:  Size  Location     Type
 12411 ;;                  1    wreg      void 
 12412 ;; Registers used:
 12413 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12414 ;; Tracked objects:
 12415 ;;		On entry : 0/0
 12416 ;;		On exit  : 0/0
 12417 ;;		Unchanged: 0/0
 12418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12422 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;Total ram usage:        1 bytes
 12424 ;; Hardware stack levels used:    1
 12425 ;; Hardware stack levels required when called:   11
 12426 ;; This function calls:
 12427 ;;		_Function_G_1
 12428 ;;		_Function_G_2
 12429 ;;		_Function_G_3
 12430 ;;		_Function_G_4
 12431 ;;		_Lcd_Print_String
 12432 ;;		___lbmod
 12433 ;;		___wmul
 12434 ;;		_clear_row2
 12435 ;;		_eepromExit
 12436 ;;		_processEncoderBuxton
 12437 ;; This function is called by:
 12438 ;;		_menu_lcd
 12439 ;; This function uses a non-reentrant model
 12440 ;;
 12441                           
 12442                           	psect	text25
 12443  00772A                     __ptext25:
 12444                           	opt stack 0
 12445  00772A                     _Function_G:
 12446                           	opt stack 18
 12447                           
 12448                           ;menu.c: 964: which_screen = EEPROM_MENU;
 12449                           
 12450                           ;incstack = 0
 12451  00772A  0E16               	movlw	22
 12452  00772C  0100               	movlb	0	; () banked
 12453  00772E  6FF9               	movwf	_which_screen& (0+255),b
 12454                           
 12455                           ; BSR set to: 0
 12456                           ;menu.c: 965: lcd_print_once = 0;
 12457  007730  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12458                           
 12459                           ;menu.c: 967: while(encoder_click == 0) {
 12460  007732  D025               	goto	l3619
 12461  007734                     
 12462                           ;menu.c: 968: processEncoderBuxton();
 12463                           
 12464                           ; BSR set to: 0
 12465  007734  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12466                           
 12467                           ;menu.c: 969: if (lcd_print_once == 0) {
 12468  007738  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12469  00773A  D020               	goto	l3621
 12470                           
 12471                           ;menu.c: 970: clear_row2();
 12472  00773C  EC49  F04A         	call	_clear_row2	;wreg free
 12473                           
 12474                           ;menu.c: 971: Lcd_Print_String(LCD_STRINGS[(eepromMenu.selector % eepromMenu.number) + e
      +                          epromMenu.address]);
 12475  007740  C13B  F060         	movff	_eepromMenu,___lbmod@divisor
 12476  007744  0101               	movlb	1	; () banked
 12477  007746  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12478  007748  ECC8  F049         	call	___lbmod
 12479  00774C  0100               	movlb	0	; () banked
 12480  00774E  6FCD               	movwf	??_Function_G& (0+255),b
 12481  007750  51CD               	movf	??_Function_G& (0+255),w,b
 12482  007752  0101               	movlb	1	; () banked
 12483  007754  253C               	addwf	(_eepromMenu+1)& (0+255),w,b
 12484  007756  0100               	movlb	0	; () banked
 12485  007758  6F64               	movwf	___wmul@multiplier& (0+255),b
 12486  00775A  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 12487  00775C  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12488  00775E  0E00               	movlw	0
 12489  007760  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12490  007762  0E11               	movlw	17
 12491  007764  6F66               	movwf	___wmul@multiplicand& (0+255),b
 12492  007766  EC71  F04A         	call	___wmul	;wreg free
 12493  00776A  0E9E               	movlw	low _LCD_STRINGS
 12494  00776C  0100               	movlb	0	; () banked
 12495  00776E  2564               	addwf	?___wmul& (0+255),w,b
 12496  007770  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12497  007772  0EF3               	movlw	high _LCD_STRINGS
 12498  007774  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 12499  007776  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12500  007778  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 12501  00777C                     l3621:
 12502                           
 12503                           ;menu.c: 972: }
 12504                           ;menu.c: 973: lcd_print_once = 1;
 12505  00777C  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12506  00777E                     l3619:
 12507  00777E  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12508  007780  D7D9               	goto	l3620
 12509                           
 12510                           ;menu.c: 974: }
 12511                           ;menu.c: 976: if(eepromMenu.selector == 0) {Function_G_1();}
 12512  007782  0101               	movlb	1	; () banked
 12513  007784  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12514  007786  B4D8               	btfsc	status,2,c
 12515                           
 12516                           ; BSR set to: 1
 12517  007788  EC6F  F039         	call	_Function_G_1	;wreg free
 12518                           
 12519                           ;menu.c: 977: if(eepromMenu.selector == 1) {Function_G_2();}
 12520  00778C  0101               	movlb	1	; () banked
 12521  00778E  053D               	decf	(_eepromMenu+2)& (0+255),w,b
 12522  007790  B4D8               	btfsc	status,2,c
 12523                           
 12524                           ; BSR set to: 1
 12525  007792  EC1E  F039         	call	_Function_G_2	;wreg free
 12526                           
 12527                           ;menu.c: 978: if(eepromMenu.selector == 2) {Function_G_3();}
 12528  007796  0E02               	movlw	2
 12529  007798  0101               	movlb	1	; () banked
 12530  00779A  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12531  00779C  B4D8               	btfsc	status,2,c
 12532                           
 12533                           ; BSR set to: 1
 12534  00779E  EC3F  F045         	call	_Function_G_3	;wreg free
 12535                           
 12536                           ;menu.c: 979: if(eepromMenu.selector == 3) {Function_G_4();}
 12537  0077A2  0E03               	movlw	3
 12538  0077A4  0101               	movlb	1	; () banked
 12539  0077A6  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12540  0077A8  B4D8               	btfsc	status,2,c
 12541                           
 12542                           ; BSR set to: 1
 12543  0077AA  EC60  F03A         	call	_Function_G_4	;wreg free
 12544                           
 12545                           ;menu.c: 980: if(eepromMenu.selector == 4) {eepromExit();}
 12546  0077AE  0E04               	movlw	4
 12547  0077B0  0101               	movlb	1	; () banked
 12548  0077B2  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12549  0077B4  A4D8               	btfss	status,2,c
 12550  0077B6  0012               	return	
 12551                           
 12552                           ; BSR set to: 1
 12553  0077B8  EC82  F048         	call	_eepromExit	;wreg free
 12554  0077BC  0012               	return	
 12555  0077BE                     __end_of_Function_G:
 12556                           	opt stack 0
 12557                           tblptru	equ	0xFF8
 12558                           tblptrh	equ	0xFF7
 12559                           tblptrl	equ	0xFF6
 12560                           tablat	equ	0xFF5
 12561                           prodh	equ	0xFF4
 12562                           prodl	equ	0xFF3
 12563                           intcon	equ	0xFF2
 12564                           intcon2	equ	0xFF1
 12565                           postinc0	equ	0xFEE
 12566                           wreg	equ	0xFE8
 12567                           postdec1	equ	0xFE5
 12568                           fsr1l	equ	0xFE1
 12569                           indf2	equ	0xFDF
 12570                           postinc2	equ	0xFDE
 12571                           fsr2h	equ	0xFDA
 12572                           fsr2l	equ	0xFD9
 12573                           status	equ	0xFD8
 12574                           
 12575 ;; *************** function _Function_G_4 *****************
 12576 ;; Defined at:
 12577 ;;		line 933 in file "menu.c"
 12578 ;; Parameters:    Size  Location     Type
 12579 ;;		None
 12580 ;; Auto vars:     Size  Location     Type
 12581 ;;		None
 12582 ;; Return value:  Size  Location     Type
 12583 ;;                  1    wreg      void 
 12584 ;; Registers used:
 12585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12586 ;; Tracked objects:
 12587 ;;		On entry : 0/0
 12588 ;;		On exit  : 0/0
 12589 ;;		Unchanged: 0/0
 12590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12594 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;Total ram usage:        1 bytes
 12596 ;; Hardware stack levels used:    1
 12597 ;; Hardware stack levels required when called:   10
 12598 ;; This function calls:
 12599 ;;		_Busy_eep
 12600 ;;		_Lcd_Print_String
 12601 ;;		_Write_b_eep
 12602 ;;		___lbmod
 12603 ;;		___wmul
 12604 ;;		_clear_row1
 12605 ;;		_clear_row2
 12606 ;;		_exitFunction
 12607 ;;		_processEncoderBuxton
 12608 ;; This function is called by:
 12609 ;;		_Function_G
 12610 ;; This function uses a non-reentrant model
 12611 ;;
 12612                           
 12613                           	psect	text26
 12614  0074C0                     __ptext26:
 12615                           	opt stack 0
 12616  0074C0                     _Function_G_4:
 12617                           	opt stack 18
 12618                           
 12619                           ;menu.c: 937: which_screen = ENCODER_POLARITY_MENU;
 12620                           
 12621                           ;incstack = 0
 12622  0074C0  0E18               	movlw	24
 12623  0074C2  0100               	movlb	0	; () banked
 12624  0074C4  6FF9               	movwf	_which_screen& (0+255),b
 12625                           
 12626                           ; BSR set to: 0
 12627                           ;menu.c: 938: lcd_print_once = 0;
 12628  0074C6  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;menu.c: 939: encoder_click = 0;
 12632  0074C8  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12633                           
 12634                           ;menu.c: 941: encoderPolarityMenu.selector = encoderPolarity;
 12635  0074CA  0E00               	movlw	0
 12636  0074CC  B236               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12637  0074CE  0E01               	movlw	1
 12638  0074D0  0101               	movlb	1	; () banked
 12639  0074D2  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 12640                           
 12641                           ;menu.c: 943: while(encoder_click == 0) {
 12642  0074D4  D02E               	goto	l3612
 12643  0074D6                     
 12644                           ;menu.c: 944: processEncoderBuxton();
 12645                           
 12646                           ; BSR set to: 1
 12647  0074D6  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12648                           
 12649                           ;menu.c: 945: if (lcd_print_once == 0) {
 12650  0074DA  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12651  0074DC  D029               	goto	l3614
 12652                           
 12653                           ;menu.c: 946: clear_row1();
 12654  0074DE  EC5D  F04A         	call	_clear_row1	;wreg free
 12655                           
 12656                           ;menu.c: 947: Lcd_Print_String("Encoder Polarity");
 12657  0074E2  0EEC               	movlw	low STR_39
 12658  0074E4  0100               	movlb	0	; () banked
 12659  0074E6  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12660  0074E8  0EFD               	movlw	high STR_39
 12661  0074EA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12662  0074EC  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 12663                           
 12664                           ;menu.c: 948: clear_row2();
 12665  0074F0  EC49  F04A         	call	_clear_row2	;wreg free
 12666                           
 12667                           ;menu.c: 949: Lcd_Print_String(LCD_STRINGS[(encoderPolarityMenu.selector % encoderPolari
      +                          tyMenu.number) + encoderPolarityMenu.address]);
 12668  0074F4  C138  F060         	movff	_encoderPolarityMenu,___lbmod@divisor
 12669  0074F8  0101               	movlb	1	; () banked
 12670  0074FA  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 12671  0074FC  ECC8  F049         	call	___lbmod
 12672  007500  0100               	movlb	0	; () banked
 12673  007502  6F72               	movwf	??_Function_G_4& (0+255),b
 12674  007504  5172               	movf	??_Function_G_4& (0+255),w,b
 12675  007506  0101               	movlb	1	; () banked
 12676  007508  2539               	addwf	(_encoderPolarityMenu+1)& (0+255),w,b
 12677  00750A  0100               	movlb	0	; () banked
 12678  00750C  6F64               	movwf	___wmul@multiplier& (0+255),b
 12679  00750E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 12680  007510  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12681  007512  0E00               	movlw	0
 12682  007514  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12683  007516  0E11               	movlw	17
 12684  007518  6F66               	movwf	___wmul@multiplicand& (0+255),b
 12685  00751A  EC71  F04A         	call	___wmul	;wreg free
 12686  00751E  0E9E               	movlw	low _LCD_STRINGS
 12687  007520  0100               	movlb	0	; () banked
 12688  007522  2564               	addwf	?___wmul& (0+255),w,b
 12689  007524  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12690  007526  0EF3               	movlw	high _LCD_STRINGS
 12691  007528  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 12692  00752A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12693  00752C  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 12694  007530                     l3614:
 12695                           
 12696                           ;menu.c: 950: }
 12697                           ;menu.c: 951: lcd_print_once = 1;
 12698  007530  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12699  007532                     l3612:
 12700  007532  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12701  007534  D7D0               	goto	l3613
 12702                           
 12703                           ;menu.c: 952: }
 12704                           ;menu.c: 955: encoderPolarity = encoderPolarityMenu.selector;
 12705  007536  0101               	movlb	1	; () banked
 12706  007538  A13A               	btfss	(_encoderPolarityMenu+2)& (0+255),0,b
 12707  00753A  D002               	goto	u33600
 12708  00753C  8236               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12709  00753E  D001               	goto	u33615
 12710  007540                     u33600:
 12711  007540  9236               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12712  007542                     u33615:
 12713                           
 12714                           ;menu.c: 956: (Busy_eep(), Write_b_eep(0x02,encoderPolarityMenu.selector));
 12715  007542  EC3C  F04B         	call	_Busy_eep	;wreg free
 12716  007546  0E00               	movlw	0
 12717  007548  0100               	movlb	0	; () banked
 12718  00754A  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12719  00754C  0E02               	movlw	2
 12720  00754E  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12721  007550  C13A  F062         	movff	_encoderPolarityMenu+2,Write_b_eep@bdat
 12722  007554  ECE7  F047         	call	_Write_b_eep	;wreg free
 12723                           
 12724                           ;menu.c: 957: exitFunction();
 12725  007558  EC28  F048         	call	_exitFunction	;wreg free
 12726  00755C  0012               	return		;funcret
 12727  00755E                     __end_of_Function_G_4:
 12728                           	opt stack 0
 12729                           tblptru	equ	0xFF8
 12730                           tblptrh	equ	0xFF7
 12731                           tblptrl	equ	0xFF6
 12732                           tablat	equ	0xFF5
 12733                           prodh	equ	0xFF4
 12734                           prodl	equ	0xFF3
 12735                           intcon	equ	0xFF2
 12736                           intcon2	equ	0xFF1
 12737                           postinc0	equ	0xFEE
 12738                           wreg	equ	0xFE8
 12739                           postdec1	equ	0xFE5
 12740                           fsr1l	equ	0xFE1
 12741                           indf2	equ	0xFDF
 12742                           postinc2	equ	0xFDE
 12743                           fsr2h	equ	0xFDA
 12744                           fsr2l	equ	0xFD9
 12745                           status	equ	0xFD8
 12746                           
 12747 ;; *************** function _exitFunction *****************
 12748 ;; Defined at:
 12749 ;;		line 242 in file "menu.c"
 12750 ;; Parameters:    Size  Location     Type
 12751 ;;		None
 12752 ;; Auto vars:     Size  Location     Type
 12753 ;;		None
 12754 ;; Return value:  Size  Location     Type
 12755 ;;                  1    wreg      void 
 12756 ;; Registers used:
 12757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12758 ;; Tracked objects:
 12759 ;;		On entry : 0/0
 12760 ;;		On exit  : 0/0
 12761 ;;		Unchanged: 0/0
 12762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12765 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12767 ;;Total ram usage:        2 bytes
 12768 ;; Hardware stack levels used:    1
 12769 ;; Hardware stack levels required when called:    9
 12770 ;; This function calls:
 12771 ;;		_Lcd_Print_String
 12772 ;;		_clear_row1
 12773 ;; This function is called by:
 12774 ;;		_menu_lcd
 12775 ;;		_Function_G_4
 12776 ;; This function uses a non-reentrant model
 12777 ;;
 12778                           
 12779                           	psect	text27
 12780  009050                     __ptext27:
 12781                           	opt stack 0
 12782  009050                     _exitFunction:
 12783                           	opt stack 20
 12784                           
 12785                           ;menu.c: 244: while(encoder_click == 0);
 12786                           
 12787                           ;incstack = 0
 12788  009050  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12789  009052  D7FE               	goto	_exitFunction
 12790                           
 12791                           ;menu.c: 245: clear_row1();
 12792  009054  EC5D  F04A         	call	_clear_row1	;wreg free
 12793                           
 12794                           ;menu.c: 246: Lcd_Print_String("Set!");
 12795  009058  0EC3               	movlw	low STR_20
 12796  00905A  0100               	movlb	0	; () banked
 12797  00905C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12798  00905E  0EFF               	movlw	high STR_20
 12799  009060  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12800  009062  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 12801                           
 12802                           ;menu.c: 247: _delay((unsigned long)((500)*(20000000/4000.0)));
 12803  009066  0E0D               	movlw	13
 12804  009068  0100               	movlb	0	; () banked
 12805  00906A  6F71               	movwf	(??_exitFunction+1)& (0+255),b
 12806  00906C  0EAF               	movlw	175
 12807  00906E  6F70               	movwf	??_exitFunction& (0+255),b
 12808  009070  0EB6               	movlw	182
 12809  009072                     u44877:
 12810  009072  2EE8               	decfsz	wreg,f,c
 12811  009074  D7FE               	bra	u44877
 12812  009076  2F70               	decfsz	??_exitFunction& (0+255),f,b
 12813  009078  D7FC               	bra	u44877
 12814  00907A  2F71               	decfsz	(??_exitFunction+1)& (0+255),f,b
 12815  00907C  D7FA               	bra	u44877
 12816  00907E  F000               	nop	
 12817                           
 12818                           ;menu.c: 248: which_screen = MAIN_MENU;
 12819  009080  0E02               	movlw	2
 12820  009082  0100               	movlb	0	; () banked
 12821  009084  6FF9               	movwf	_which_screen& (0+255),b
 12822                           
 12823                           ; BSR set to: 0
 12824                           ;menu.c: 249: lcd_print_once = 0;
 12825  009086  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12826                           
 12827                           ; BSR set to: 0
 12828                           ;menu.c: 250: encoder_click = 0;
 12829  009088  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12830                           
 12831                           ; BSR set to: 0
 12832  00908A  0012               	return		;funcret
 12833  00908C                     __end_of_exitFunction:
 12834                           	opt stack 0
 12835                           tblptru	equ	0xFF8
 12836                           tblptrh	equ	0xFF7
 12837                           tblptrl	equ	0xFF6
 12838                           tablat	equ	0xFF5
 12839                           prodh	equ	0xFF4
 12840                           prodl	equ	0xFF3
 12841                           intcon	equ	0xFF2
 12842                           intcon2	equ	0xFF1
 12843                           postinc0	equ	0xFEE
 12844                           wreg	equ	0xFE8
 12845                           postdec1	equ	0xFE5
 12846                           fsr1l	equ	0xFE1
 12847                           indf2	equ	0xFDF
 12848                           postinc2	equ	0xFDE
 12849                           fsr2h	equ	0xFDA
 12850                           fsr2l	equ	0xFD9
 12851                           status	equ	0xFD8
 12852                           
 12853 ;; *************** function _Function_G_3 *****************
 12854 ;; Defined at:
 12855 ;;		line 918 in file "menu.c"
 12856 ;; Parameters:    Size  Location     Type
 12857 ;;		None
 12858 ;; Auto vars:     Size  Location     Type
 12859 ;;		None
 12860 ;; Return value:  Size  Location     Type
 12861 ;;                  1    wreg      void 
 12862 ;; Registers used:
 12863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12864 ;; Tracked objects:
 12865 ;;		On entry : 0/0
 12866 ;;		On exit  : 0/0
 12867 ;;		Unchanged: 0/0
 12868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12871 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12872 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12873 ;;Total ram usage:        2 bytes
 12874 ;; Hardware stack levels used:    1
 12875 ;; Hardware stack levels required when called:    9
 12876 ;; This function calls:
 12877 ;;		_Busy_eep
 12878 ;;		_Lcd_Print_String
 12879 ;;		_Write_b_eep
 12880 ;;		_clear_row1
 12881 ;;		_clear_row2
 12882 ;; This function is called by:
 12883 ;;		_Function_G
 12884 ;; This function uses a non-reentrant model
 12885 ;;
 12886                           
 12887                           	psect	text28
 12888  008A7E                     __ptext28:
 12889                           	opt stack 0
 12890  008A7E                     _Function_G_3:
 12891                           	opt stack 19
 12892                           
 12893                           ;menu.c: 920: while(encoder_click == 0);
 12894                           
 12895                           ; BSR set to: 0
 12896                           ;incstack = 0
 12897  008A7E  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12898  008A80  D7FE               	goto	_Function_G_3
 12899                           
 12900                           ;menu.c: 922: (Busy_eep(), Write_b_eep(0,0x00));
 12901  008A82  EC3C  F04B         	call	_Busy_eep	;wreg free
 12902  008A86  0E00               	movlw	0
 12903  008A88  0100               	movlb	0	; () banked
 12904  008A8A  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12905  008A8C  0E00               	movlw	0
 12906  008A8E  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12907  008A90  0E00               	movlw	0
 12908  008A92  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 12909  008A94  ECE7  F047         	call	_Write_b_eep	;wreg free
 12910                           
 12911                           ;menu.c: 924: clear_row1();
 12912  008A98  EC5D  F04A         	call	_clear_row1	;wreg free
 12913                           
 12914                           ;menu.c: 925: Lcd_Print_String("Restore Setting!");
 12915  008A9C  0E86               	movlw	low STR_37
 12916  008A9E  0100               	movlb	0	; () banked
 12917  008AA0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12918  008AA2  0EFD               	movlw	high STR_37
 12919  008AA4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12920  008AA6  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 12921                           
 12922                           ;menu.c: 926: clear_row2();
 12923  008AAA  EC49  F04A         	call	_clear_row2	;wreg free
 12924                           
 12925                           ;menu.c: 927: Lcd_Print_String("Rebooting...");
 12926  008AAE  0E25               	movlw	low STR_38
 12927  008AB0  0100               	movlb	0	; () banked
 12928  008AB2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12929  008AB4  0EFF               	movlw	high STR_38
 12930  008AB6  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12931  008AB8  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 12932                           
 12933                           ;menu.c: 928: _delay((unsigned long)((2500)*(20000000/4000.0)));
 12934  008ABC  0E40               	movlw	64
 12935  008ABE  0100               	movlb	0	; () banked
 12936  008AC0  6F71               	movwf	(??_Function_G_3+1)& (0+255),b
 12937  008AC2  0E6A               	movlw	106
 12938  008AC4  6F70               	movwf	??_Function_G_3& (0+255),b
 12939  008AC6  0E97               	movlw	151
 12940  008AC8                     u44887:
 12941  008AC8  2EE8               	decfsz	wreg,f,c
 12942  008ACA  D7FE               	bra	u44887
 12943  008ACC  2F70               	decfsz	??_Function_G_3& (0+255),f,b
 12944  008ACE  D7FC               	bra	u44887
 12945  008AD0  2F71               	decfsz	(??_Function_G_3+1)& (0+255),f,b
 12946  008AD2  D7FA               	bra	u44887
 12947  008AD4  D000               	nop2	
 12948  008AD6  00FF               	reset		;# 
 12949  008AD8  0012               	return		;funcret
 12950  008ADA                     __end_of_Function_G_3:
 12951                           	opt stack 0
 12952                           tblptru	equ	0xFF8
 12953                           tblptrh	equ	0xFF7
 12954                           tblptrl	equ	0xFF6
 12955                           tablat	equ	0xFF5
 12956                           prodh	equ	0xFF4
 12957                           prodl	equ	0xFF3
 12958                           intcon	equ	0xFF2
 12959                           intcon2	equ	0xFF1
 12960                           postinc0	equ	0xFEE
 12961                           wreg	equ	0xFE8
 12962                           postdec1	equ	0xFE5
 12963                           fsr1l	equ	0xFE1
 12964                           indf2	equ	0xFDF
 12965                           postinc2	equ	0xFDE
 12966                           fsr2h	equ	0xFDA
 12967                           fsr2l	equ	0xFD9
 12968                           status	equ	0xFD8
 12969                           
 12970 ;; *************** function _Function_G_2 *****************
 12971 ;; Defined at:
 12972 ;;		line 889 in file "menu.c"
 12973 ;; Parameters:    Size  Location     Type
 12974 ;;		None
 12975 ;; Auto vars:     Size  Location     Type
 12976 ;;		None
 12977 ;; Return value:  Size  Location     Type
 12978 ;;                  1    wreg      void 
 12979 ;; Registers used:
 12980 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12981 ;; Tracked objects:
 12982 ;;		On entry : 0/0
 12983 ;;		On exit  : 0/0
 12984 ;;		Unchanged: 0/0
 12985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12989 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;Total ram usage:        1 bytes
 12991 ;; Hardware stack levels used:    1
 12992 ;; Hardware stack levels required when called:   10
 12993 ;; This function calls:
 12994 ;;		_Busy_eep
 12995 ;;		_Lcd_Print_String
 12996 ;;		_Write_b_eep
 12997 ;;		___lbmod
 12998 ;;		___wmul
 12999 ;;		_clear_row1
 13000 ;;		_clear_row2
 13001 ;;		_eepromExit
 13002 ;;		_exitLoad
 13003 ;;		_loadFromEEPROM
 13004 ;;		_processEncoderBuxton
 13005 ;; This function is called by:
 13006 ;;		_Function_G
 13007 ;; This function uses a non-reentrant model
 13008 ;;
 13009                           
 13010                           	psect	text29
 13011  00723C                     __ptext29:
 13012                           	opt stack 0
 13013  00723C                     _Function_G_2:
 13014                           	opt stack 18
 13015                           
 13016                           ;menu.c: 891: which_screen = SAVES_MENU;
 13017                           
 13018                           ;incstack = 0
 13019  00723C  0E17               	movlw	23
 13020  00723E  0100               	movlb	0	; () banked
 13021  007240  6FF9               	movwf	_which_screen& (0+255),b
 13022                           
 13023                           ; BSR set to: 0
 13024                           ;menu.c: 892: encoder_click = 0;
 13025  007242  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13026                           
 13027                           ; BSR set to: 0
 13028                           ;menu.c: 893: lcd_print_once = 0;
 13029  007244  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13030                           
 13031                           ;menu.c: 895: while(encoder_click == 0) {
 13032  007246  D02C               	goto	l3597
 13033  007248                     
 13034                           ;menu.c: 896: processEncoderBuxton();
 13035                           
 13036                           ; BSR set to: 0
 13037  007248  EC09  F000         	call	_processEncoderBuxton	;wreg free
 13038                           
 13039                           ;menu.c: 897: if (lcd_print_once == 0) {
 13040  00724C  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13041  00724E  D027               	goto	l3599
 13042                           
 13043                           ;menu.c: 898: clear_row1();
 13044  007250  EC5D  F04A         	call	_clear_row1	;wreg free
 13045                           
 13046                           ;menu.c: 899: Lcd_Print_String("Load #:");
 13047  007254  0EB3               	movlw	low STR_36
 13048  007256  0100               	movlb	0	; () banked
 13049  007258  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 13050  00725A  0EFF               	movlw	high STR_36
 13051  00725C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13052  00725E  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 13053                           
 13054                           ;menu.c: 900: clear_row2();
 13055  007262  EC49  F04A         	call	_clear_row2	;wreg free
 13056                           
 13057                           ;menu.c: 901: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sav
      +                          esMenu.address]);
 13058  007266  C0DF  F060         	movff	_savesMenu,___lbmod@divisor
 13059  00726A  0100               	movlb	0	; () banked
 13060  00726C  51E1               	movf	(_savesMenu+2)& (0+255),w,b
 13061  00726E  ECC8  F049         	call	___lbmod
 13062  007272  0100               	movlb	0	; () banked
 13063  007274  6FCC               	movwf	??_Function_G_2& (0+255),b
 13064  007276  51CC               	movf	??_Function_G_2& (0+255),w,b
 13065  007278  25E0               	addwf	(_savesMenu+1)& (0+255),w,b
 13066  00727A  6F64               	movwf	___wmul@multiplier& (0+255),b
 13067  00727C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 13068  00727E  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 13069  007280  0E00               	movlw	0
 13070  007282  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13071  007284  0E11               	movlw	17
 13072  007286  6F66               	movwf	___wmul@multiplicand& (0+255),b
 13073  007288  EC71  F04A         	call	___wmul	;wreg free
 13074  00728C  0E9E               	movlw	low _LCD_STRINGS
 13075  00728E  0100               	movlb	0	; () banked
 13076  007290  2564               	addwf	?___wmul& (0+255),w,b
 13077  007292  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 13078  007294  0EF3               	movlw	high _LCD_STRINGS
 13079  007296  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 13080  007298  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13081  00729A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 13082  00729E                     l3599:
 13083                           
 13084                           ;menu.c: 902: }
 13085                           ;menu.c: 903: lcd_print_once = 1;
 13086  00729E  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13087  0072A0                     l3597:
 13088  0072A0  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13089  0072A2  D7D2               	goto	l3598
 13090                           
 13091                           ;menu.c: 904: }
 13092                           ;menu.c: 906: if(savesMenu.selector == 4){eepromExit();}
 13093  0072A4  0E04               	movlw	4
 13094  0072A6  0100               	movlb	0	; () banked
 13095  0072A8  19E1               	xorwf	(_savesMenu+2)& (0+255),w,b
 13096  0072AA  A4D8               	btfss	status,2,c
 13097  0072AC  D003               	goto	l3601
 13098                           
 13099                           ; BSR set to: 0
 13100  0072AE  EC82  F048         	call	_eepromExit	;wreg free
 13101  0072B2  D011               	goto	l3602
 13102  0072B4                     l3601:
 13103                           
 13104                           ;menu.c: 907: else {
 13105                           ;menu.c: 909: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 13106  0072B4  EC3C  F04B         	call	_Busy_eep	;wreg free
 13107  0072B8  0E00               	movlw	0
 13108  0072BA  0100               	movlb	0	; () banked
 13109  0072BC  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 13110  0072BE  0E00               	movlw	0
 13111  0072C0  6F60               	movwf	Write_b_eep@badd& (0+255),b
 13112  0072C2  29E1               	incf	(_savesMenu+2)& (0+255),w,b
 13113  0072C4  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 13114  0072C6  ECE7  F047         	call	_Write_b_eep	;wreg free
 13115                           
 13116                           ;menu.c: 910: loadFromEEPROM(savesMenu.selector + 1);
 13117  0072CA  0100               	movlb	0	; () banked
 13118  0072CC  29E1               	incf	(_savesMenu+2)& (0+255),w,b
 13119  0072CE  EC24  F025         	call	_loadFromEEPROM
 13120                           
 13121                           ;menu.c: 911: exitLoad();
 13122  0072D2  EC46  F048         	call	_exitLoad	;wreg free
 13123  0072D6                     l3602:
 13124                           
 13125                           ;menu.c: 912: }
 13126                           ;menu.c: 914: savesMenu.selector = 0;
 13127  0072D6  0E00               	movlw	0
 13128  0072D8  0100               	movlb	0	; () banked
 13129  0072DA  6FE1               	movwf	(_savesMenu+2)& (0+255),b
 13130                           
 13131                           ; BSR set to: 0
 13132  0072DC  0012               	return		;funcret
 13133  0072DE                     __end_of_Function_G_2:
 13134                           	opt stack 0
 13135                           tblptru	equ	0xFF8
 13136                           tblptrh	equ	0xFF7
 13137                           tblptrl	equ	0xFF6
 13138                           tablat	equ	0xFF5
 13139                           prodh	equ	0xFF4
 13140                           prodl	equ	0xFF3
 13141                           intcon	equ	0xFF2
 13142                           intcon2	equ	0xFF1
 13143                           postinc0	equ	0xFEE
 13144                           wreg	equ	0xFE8
 13145                           postdec1	equ	0xFE5
 13146                           fsr1l	equ	0xFE1
 13147                           indf2	equ	0xFDF
 13148                           postinc2	equ	0xFDE
 13149                           fsr2h	equ	0xFDA
 13150                           fsr2l	equ	0xFD9
 13151                           status	equ	0xFD8
 13152                           
 13153 ;; *************** function _loadFromEEPROM *****************
 13154 ;; Defined at:
 13155 ;;		line 54 in file "eeprom.c"
 13156 ;; Parameters:    Size  Location     Type
 13157 ;;  slotNumber      1    wreg     unsigned char 
 13158 ;; Auto vars:     Size  Location     Type
 13159 ;;  slotNumber      1   77[BANK1 ] unsigned char 
 13160 ;;  byte_count      2   78[BANK1 ] unsigned int 
 13161 ;;  to_load        75    0[BANK1 ] unsigned char [75]
 13162 ;;  baseAddress     2   75[BANK1 ] unsigned int 
 13163 ;; Return value:  Size  Location     Type
 13164 ;;                  1    wreg      void 
 13165 ;; Registers used:
 13166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13167 ;; Tracked objects:
 13168 ;;		On entry : 0/0
 13169 ;;		On exit  : 0/0
 13170 ;;		Unchanged: 0/0
 13171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;      Locals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13175 ;;      Totals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13176 ;;Total ram usage:       80 bytes
 13177 ;; Hardware stack levels used:    1
 13178 ;; Hardware stack levels required when called:    7
 13179 ;; This function calls:
 13180 ;;		_Read_b_eep
 13181 ;;		_calculate_pulse_length
 13182 ;; This function is called by:
 13183 ;;		_Function_G_2
 13184 ;;		_selectSlotOnBoot
 13185 ;; This function uses a non-reentrant model
 13186 ;;
 13187                           
 13188                           	psect	text30
 13189  004A48                     __ptext30:
 13190                           	opt stack 0
 13191  004A48                     _loadFromEEPROM:
 13192                           	opt stack 22
 13193                           
 13194                           ; BSR set to: 0
 13195                           ;incstack = 0
 13196                           ;loadFromEEPROM@slotNumber stored from wreg
 13197  004A48  0101               	movlb	1	; () banked
 13198  004A4A  6FD4               	movwf	loadFromEEPROM@slotNumber& (0+255),b
 13199                           
 13200                           ;eeprom.c: 56: unsigned int baseAddress = 0;
 13201  004A4C  0E00               	movlw	0
 13202  004A4E  0101               	movlb	1	; () banked
 13203  004A50  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13204  004A52  0E00               	movlw	0
 13205  004A54  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13206                           
 13207                           ; BSR set to: 1
 13208                           ;eeprom.c: 59: if (slotNumber == SLOT1) {baseAddress = 128;}
 13209  004A56  05D4               	decf	loadFromEEPROM@slotNumber& (0+255),w,b
 13210  004A58  A4D8               	btfss	status,2,c
 13211  004A5A  D004               	goto	l4279
 13212                           
 13213                           ; BSR set to: 1
 13214  004A5C  0E00               	movlw	0
 13215  004A5E  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13216  004A60  0E80               	movlw	128
 13217  004A62  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13218  004A64                     l4279:
 13219                           
 13220                           ; BSR set to: 1
 13221                           ;eeprom.c: 60: if (slotNumber == SLOT2) {baseAddress = 256;}
 13222                           
 13223                           ; BSR set to: 1
 13224  004A64  0E02               	movlw	2
 13225  004A66  19D4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13226  004A68  A4D8               	btfss	status,2,c
 13227  004A6A  D004               	goto	l4280
 13228                           
 13229                           ; BSR set to: 1
 13230  004A6C  0E01               	movlw	1
 13231  004A6E  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13232  004A70  0E00               	movlw	0
 13233  004A72  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13234  004A74                     l4280:
 13235                           
 13236                           ; BSR set to: 1
 13237                           ;eeprom.c: 61: if (slotNumber == SLOT3) {baseAddress = 384;}
 13238                           
 13239                           ; BSR set to: 1
 13240  004A74  0E03               	movlw	3
 13241  004A76  19D4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13242  004A78  A4D8               	btfss	status,2,c
 13243  004A7A  D004               	goto	l4281
 13244                           
 13245                           ; BSR set to: 1
 13246  004A7C  0E01               	movlw	1
 13247  004A7E  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13248  004A80  0E80               	movlw	128
 13249  004A82  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13250  004A84                     l4281:
 13251                           
 13252                           ; BSR set to: 1
 13253                           ;eeprom.c: 62: if (slotNumber == SLOT4) {baseAddress = 512;}
 13254                           
 13255                           ; BSR set to: 1
 13256  004A84  0E04               	movlw	4
 13257  004A86  19D4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13258  004A88  A4D8               	btfss	status,2,c
 13259  004A8A  D004               	goto	l4282
 13260                           
 13261                           ; BSR set to: 1
 13262  004A8C  0E02               	movlw	2
 13263  004A8E  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13264  004A90  0E00               	movlw	0
 13265  004A92  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13266  004A94                     l4282:
 13267                           
 13268                           ; BSR set to: 1
 13269                           ;eeprom.c: 65: unsigned char to_load[75];
 13270                           ;eeprom.c: 68: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 13271  004A94  0E00               	movlw	0
 13272  004A96  6FD6               	movwf	(loadFromEEPROM@byte_count+1)& (0+255),b
 13273  004A98  0E00               	movlw	0
 13274  004A9A  6FD5               	movwf	loadFromEEPROM@byte_count& (0+255),b
 13275                           
 13276                           ; BSR set to: 1
 13277  004A9C  51D6               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13278  004A9E  E11C               	bnz	l4284
 13279  004AA0  D017               	goto	L1
 13280  004AA2                     
 13281                           ; BSR set to: 1
 13282                           ;eeprom.c: 69: to_load[byte_count] = Read_b_eep(byte_count + baseAddress);
 13283                           
 13284                           ; BSR set to: 1
 13285  004AA2  0E87               	movlw	low loadFromEEPROM@to_load
 13286  004AA4  25D5               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13287  004AA6  6ED9               	movwf	fsr2l,c
 13288  004AA8  0E01               	movlw	high loadFromEEPROM@to_load
 13289  004AAA  21D6               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13290  004AAC  6EDA               	movwf	fsr2h,c
 13291  004AAE  51D2               	movf	loadFromEEPROM@baseAddress& (0+255),w,b
 13292  004AB0  25D5               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13293  004AB2  0100               	movlb	0	; () banked
 13294  004AB4  6F60               	movwf	Read_b_eep@badd& (0+255),b
 13295  004AB6  0101               	movlb	1	; () banked
 13296  004AB8  51D3               	movf	(loadFromEEPROM@baseAddress+1)& (0+255),w,b
 13297  004ABA  21D6               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13298  004ABC  0100               	movlb	0	; () banked
 13299  004ABE  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 13300  004AC0  ECF5  F04A         	call	_Read_b_eep	;wreg free
 13301  004AC4  6EDF               	movwf	indf2,c
 13302  004AC6  0101               	movlb	1	; () banked
 13303  004AC8  4BD5               	infsnz	loadFromEEPROM@byte_count& (0+255),f,b
 13304  004ACA  2BD6               	incf	(loadFromEEPROM@byte_count+1)& (0+255),f,b
 13305                           
 13306                           ; BSR set to: 1
 13307  004ACC  51D6               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13308  004ACE  E104               	bnz	u29120
 13309  004AD0                     L1:
 13310  004AD0  0E4B               	movlw	75
 13311  004AD2  5DD5               	subwf	loadFromEEPROM@byte_count& (0+255),w,b
 13312  004AD4  A0D8               	btfss	status,0,c
 13313  004AD6  D7E5               	goto	l4283
 13314  004AD8                     u29120:
 13315  004AD8                     l4284:
 13316                           
 13317                           ; BSR set to: 1
 13318                           ;eeprom.c: 70: }
 13319                           ;eeprom.c: 75: KEYBOARD_MODE = to_load[0];
 13320  004AD8  C187  F0F2         	movff	loadFromEEPROM@to_load,_KEYBOARD_MODE
 13321                           
 13322                           ;eeprom.c: 76: which_mode = to_load[1];
 13323  004ADC  C188  F0F1         	movff	loadFromEEPROM@to_load+1,_which_mode
 13324                           
 13325                           ;eeprom.c: 77: which_triad = to_load[2];
 13326  004AE0  C189  F0F0         	movff	loadFromEEPROM@to_load+2,_which_triad
 13327                           
 13328                           ;eeprom.c: 78: which_seventh = to_load[3];
 13329  004AE4  C18A  F0EF         	movff	loadFromEEPROM@to_load+3,_which_seventh
 13330                           
 13331                           ;eeprom.c: 81: TRANSPOSE_MODE = to_load[4];
 13332  004AE8  A18B               	btfss	(loadFromEEPROM@to_load+4)& (0+255),0,b
 13333  004AEA  D002               	goto	u29130
 13334  004AEC  8C35               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13335  004AEE  D001               	goto	u29145
 13336  004AF0                     u29130:
 13337  004AF0  9C35               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13338  004AF2                     u29145:
 13339                           
 13340                           ;eeprom.c: 84: DRUM_MODE = to_load[5];
 13341  004AF2  0101               	movlb	1	; () banked
 13342  004AF4  A18C               	btfss	(loadFromEEPROM@to_load+5)& (0+255),0,b
 13343  004AF6  D002               	goto	u29150
 13344  004AF8  8A32               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13345  004AFA  D001               	goto	u29165
 13346  004AFC                     u29150:
 13347  004AFC  9A32               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13348  004AFE                     u29165:
 13349                           
 13350                           ;eeprom.c: 85: CONTROL_MODE = to_load[6];
 13351  004AFE  0101               	movlb	1	; () banked
 13352  004B00  A18D               	btfss	(loadFromEEPROM@to_load+6)& (0+255),0,b
 13353  004B02  D002               	goto	u29170
 13354  004B04  8832               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13355  004B06  D001               	goto	u29185
 13356  004B08                     u29170:
 13357  004B08  9832               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13358  004B0A                     u29185:
 13359                           
 13360                           ;eeprom.c: 88: DRUM_NOTE[0] = to_load[7];
 13361  004B0A  C18E  F1DF         	movff	loadFromEEPROM@to_load+7,_DRUM_NOTE
 13362                           
 13363                           ;eeprom.c: 89: DRUM_NOTE[1] = to_load[8];
 13364  004B0E  C18F  F1E0         	movff	loadFromEEPROM@to_load+8,_DRUM_NOTE+1
 13365                           
 13366                           ;eeprom.c: 90: DRUM_NOTE[2] = to_load[9];
 13367  004B12  C190  F1E1         	movff	loadFromEEPROM@to_load+9,_DRUM_NOTE+2
 13368                           
 13369                           ;eeprom.c: 91: DRUM_NOTE[3] = to_load[10];
 13370  004B16  C191  F1E2         	movff	loadFromEEPROM@to_load+10,_DRUM_NOTE+3
 13371                           
 13372                           ;eeprom.c: 92: DRUM_NOTE[4] = to_load[11];
 13373  004B1A  C192  F1E3         	movff	loadFromEEPROM@to_load+11,_DRUM_NOTE+4
 13374                           
 13375                           ;eeprom.c: 93: DRUM_NOTE[5] = to_load[12];
 13376  004B1E  C193  F1E4         	movff	loadFromEEPROM@to_load+12,_DRUM_NOTE+5
 13377                           
 13378                           ;eeprom.c: 94: DRUM_NOTE[6] = to_load[13];
 13379  004B22  C194  F1E5         	movff	loadFromEEPROM@to_load+13,_DRUM_NOTE+6
 13380                           
 13381                           ;eeprom.c: 95: DRUM_NOTE[7] = to_load[14];
 13382  004B26  C195  F1E6         	movff	loadFromEEPROM@to_load+14,_DRUM_NOTE+7
 13383                           
 13384                           ;eeprom.c: 98: DRUM_CC[0] = to_load[15];
 13385  004B2A  C196  F1D7         	movff	loadFromEEPROM@to_load+15,_DRUM_CC
 13386                           
 13387                           ;eeprom.c: 99: DRUM_CC[1] = to_load[16];
 13388  004B2E  C197  F1D8         	movff	loadFromEEPROM@to_load+16,_DRUM_CC+1
 13389                           
 13390                           ;eeprom.c: 100: DRUM_CC[2] = to_load[17];
 13391  004B32  C198  F1D9         	movff	loadFromEEPROM@to_load+17,_DRUM_CC+2
 13392                           
 13393                           ;eeprom.c: 101: DRUM_CC[3] = to_load[18];
 13394  004B36  C199  F1DA         	movff	loadFromEEPROM@to_load+18,_DRUM_CC+3
 13395                           
 13396                           ;eeprom.c: 102: DRUM_CC[4] = to_load[19];
 13397  004B3A  C19A  F1DB         	movff	loadFromEEPROM@to_load+19,_DRUM_CC+4
 13398                           
 13399                           ;eeprom.c: 103: DRUM_CC[5] = to_load[20];
 13400  004B3E  C19B  F1DC         	movff	loadFromEEPROM@to_load+20,_DRUM_CC+5
 13401                           
 13402                           ;eeprom.c: 104: DRUM_CC[6] = to_load[21];
 13403  004B42  C19C  F1DD         	movff	loadFromEEPROM@to_load+21,_DRUM_CC+6
 13404                           
 13405                           ;eeprom.c: 105: DRUM_CC[7] = to_load[22];
 13406  004B46  C19D  F1DE         	movff	loadFromEEPROM@to_load+22,_DRUM_CC+7
 13407                           
 13408                           ;eeprom.c: 108: POT_MODE = to_load[23];
 13409  004B4A  0101               	movlb	1	; () banked
 13410  004B4C  A19E               	btfss	(loadFromEEPROM@to_load+23)& (0+255),0,b
 13411  004B4E  D002               	goto	u29190
 13412  004B50  8836               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13413  004B52  D001               	goto	u29205
 13414  004B54                     u29190:
 13415  004B54  9836               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13416  004B56                     u29205:
 13417                           
 13418                           ;eeprom.c: 111: inputPotsArray[0].controller_number = to_load[24];
 13419  004B56  C19F  F2AD         	movff	loadFromEEPROM@to_load+24,_inputPotsArray+1
 13420                           
 13421                           ;eeprom.c: 112: inputPotsArray[0].controller_number_two_byte = to_load[25];
 13422  004B5A  C1A0  F2AE         	movff	loadFromEEPROM@to_load+25,_inputPotsArray+2
 13423                           
 13424                           ;eeprom.c: 114: inputPotsArray[1].controller_number = to_load[26];
 13425  004B5E  C1A1  F2B0         	movff	loadFromEEPROM@to_load+26,_inputPotsArray+4
 13426                           
 13427                           ;eeprom.c: 115: inputPotsArray[1].controller_number_two_byte = to_load[27];
 13428  004B62  C1A2  F2B1         	movff	loadFromEEPROM@to_load+27,_inputPotsArray+5
 13429                           
 13430                           ;eeprom.c: 117: inputPotsArray[2].controller_number = to_load[28];
 13431  004B66  C1A3  F2B3         	movff	loadFromEEPROM@to_load+28,_inputPotsArray+7
 13432                           
 13433                           ;eeprom.c: 118: inputPotsArray[2].controller_number_two_byte = to_load[29];
 13434  004B6A  C1A4  F2B4         	movff	loadFromEEPROM@to_load+29,_inputPotsArray+8
 13435                           
 13436                           ;eeprom.c: 120: inputPotsArray[3].controller_number = to_load[30];
 13437  004B6E  C1A5  F2B6         	movff	loadFromEEPROM@to_load+30,_inputPotsArray+10
 13438                           
 13439                           ;eeprom.c: 121: inputPotsArray[3].controller_number_two_byte = to_load[31];
 13440  004B72  C1A6  F2B7         	movff	loadFromEEPROM@to_load+31,_inputPotsArray+11
 13441                           
 13442                           ;eeprom.c: 123: inputPotsArray[4].controller_number = to_load[32];
 13443  004B76  C1A7  F2B9         	movff	loadFromEEPROM@to_load+32,_inputPotsArray+13
 13444                           
 13445                           ;eeprom.c: 124: inputPotsArray[4].controller_number_two_byte = to_load[33];
 13446  004B7A  C1A8  F2BA         	movff	loadFromEEPROM@to_load+33,_inputPotsArray+14
 13447                           
 13448                           ;eeprom.c: 126: inputPotsArray[5].controller_number = to_load[34];
 13449  004B7E  C1A9  F2BC         	movff	loadFromEEPROM@to_load+34,_inputPotsArray+16
 13450                           
 13451                           ;eeprom.c: 127: inputPotsArray[5].controller_number_two_byte = to_load[35];
 13452  004B82  C1AA  F2BD         	movff	loadFromEEPROM@to_load+35,_inputPotsArray+17
 13453                           
 13454                           ;eeprom.c: 129: inputPotsArray[6].controller_number = to_load[36];
 13455  004B86  C1AB  F2BF         	movff	loadFromEEPROM@to_load+36,_inputPotsArray+19
 13456                           
 13457                           ;eeprom.c: 130: inputPotsArray[6].controller_number_two_byte = to_load[37];
 13458  004B8A  C1AC  F2C0         	movff	loadFromEEPROM@to_load+37,_inputPotsArray+20
 13459                           
 13460                           ;eeprom.c: 134: inputPotsArray[7].controller_number = to_load[38];
 13461  004B8E  C1AD  F2C2         	movff	loadFromEEPROM@to_load+38,_inputPotsArray+22
 13462                           
 13463                           ;eeprom.c: 135: inputPotsArray[7].controller_number_two_byte = to_load[39];
 13464  004B92  C1AE  F2C3         	movff	loadFromEEPROM@to_load+39,_inputPotsArray+23
 13465                           
 13466                           ;eeprom.c: 137: inputPotsArray[8].controller_number = to_load[40];
 13467  004B96  C1AF  F2C5         	movff	loadFromEEPROM@to_load+40,_inputPotsArray+25
 13468                           
 13469                           ;eeprom.c: 138: inputPotsArray[8].controller_number_two_byte = to_load[41];
 13470  004B9A  C1B0  F2C6         	movff	loadFromEEPROM@to_load+41,_inputPotsArray+26
 13471                           
 13472                           ;eeprom.c: 140: inputPotsArray[9].controller_number = to_load[42];
 13473  004B9E  C1B1  F2C8         	movff	loadFromEEPROM@to_load+42,_inputPotsArray+28
 13474                           
 13475                           ;eeprom.c: 141: inputPotsArray[9].controller_number_two_byte = to_load[43];
 13476  004BA2  C1B2  F2C9         	movff	loadFromEEPROM@to_load+43,_inputPotsArray+29
 13477                           
 13478                           ;eeprom.c: 143: inputPotsArray[10].controller_number = to_load[44];
 13479  004BA6  C1B3  F2CB         	movff	loadFromEEPROM@to_load+44,_inputPotsArray+31
 13480                           
 13481                           ;eeprom.c: 144: inputPotsArray[10].controller_number_two_byte = to_load[45];
 13482  004BAA  C1B4  F2CC         	movff	loadFromEEPROM@to_load+45,_inputPotsArray+32
 13483                           
 13484                           ;eeprom.c: 146: inputPotsArray[11].controller_number = to_load[46];
 13485  004BAE  C1B5  F2CE         	movff	loadFromEEPROM@to_load+46,_inputPotsArray+34
 13486                           
 13487                           ;eeprom.c: 147: inputPotsArray[11].controller_number_two_byte = to_load[47];
 13488  004BB2  C1B6  F2CF         	movff	loadFromEEPROM@to_load+47,_inputPotsArray+35
 13489                           
 13490                           ;eeprom.c: 149: inputPotsArray[12].controller_number = to_load[48];
 13491  004BB6  C1B7  F2D1         	movff	loadFromEEPROM@to_load+48,_inputPotsArray+37
 13492                           
 13493                           ;eeprom.c: 150: inputPotsArray[12].controller_number_two_byte = to_load[49];
 13494  004BBA  C1B8  F2D2         	movff	loadFromEEPROM@to_load+49,_inputPotsArray+38
 13495                           
 13496                           ;eeprom.c: 152: inputPotsArray[13].controller_number = to_load[50];
 13497  004BBE  C1B9  F2D4         	movff	loadFromEEPROM@to_load+50,_inputPotsArray+40
 13498                           
 13499                           ;eeprom.c: 153: inputPotsArray[13].controller_number_two_byte = to_load[51];
 13500  004BC2  C1BA  F2D5         	movff	loadFromEEPROM@to_load+51,_inputPotsArray+41
 13501                           
 13502                           ;eeprom.c: 155: inputPotsArray[14].controller_number = to_load[52];
 13503  004BC6  C1BB  F2D7         	movff	loadFromEEPROM@to_load+52,_inputPotsArray+43
 13504                           
 13505                           ;eeprom.c: 156: inputPotsArray[14].controller_number_two_byte = to_load[53];
 13506  004BCA  C1BC  F2D8         	movff	loadFromEEPROM@to_load+53,_inputPotsArray+44
 13507                           
 13508                           ;eeprom.c: 158: inputPotsArray[15].controller_number = to_load[54];
 13509  004BCE  C1BD  F2DA         	movff	loadFromEEPROM@to_load+54,_inputPotsArray+46
 13510                           
 13511                           ;eeprom.c: 159: inputPotsArray[15].controller_number_two_byte = to_load[55];
 13512  004BD2  C1BE  F2DB         	movff	loadFromEEPROM@to_load+55,_inputPotsArray+47
 13513                           
 13514                           ;eeprom.c: 163: channel = to_load[56];
 13515  004BD6  C1BF  F0F6         	movff	loadFromEEPROM@to_load+56,_channel
 13516                           
 13517                           ;eeprom.c: 164: drumchannel = to_load[57];
 13518  004BDA  C1C0  F0FE         	movff	loadFromEEPROM@to_load+57,_drumchannel
 13519                           
 13520                           ;eeprom.c: 167: octave = to_load[58];
 13521  004BDE  C1C1  F0FC         	movff	loadFromEEPROM@to_load+58,_octave
 13522                           
 13523                           ;eeprom.c: 168: semitone = to_load[59];
 13524  004BE2  C1C2  F0F3         	movff	loadFromEEPROM@to_load+59,_semitone
 13525                           
 13526                           ;eeprom.c: 171: patch_number = to_load[60];
 13527  004BE6  C1C3  F171         	movff	loadFromEEPROM@to_load+60,_patch_number
 13528                           
 13529                           ;eeprom.c: 174: ARPEGGIO_ON = to_load[61];
 13530  004BEA  0101               	movlb	1	; () banked
 13531  004BEC  A1C4               	btfss	(loadFromEEPROM@to_load+61)& (0+255),0,b
 13532  004BEE  D002               	goto	u29210
 13533  004BF0  8835               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13534  004BF2  D001               	goto	u29225
 13535  004BF4                     u29210:
 13536  004BF4  9835               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13537  004BF6                     u29225:
 13538                           
 13539                           ;eeprom.c: 175: BPM = to_load[62];
 13540  004BF6  C1C5  F0FF         	movff	loadFromEEPROM@to_load+62,_BPM
 13541                           
 13542                           ;eeprom.c: 177: TIMER_PRELOAD = calculate_pulse_length();
 13543  004BFA  EC7A  F02E         	call	_calculate_pulse_length	;wreg free
 13544  004BFE  C0C2  F16D         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 13545  004C02  C0C3  F16E         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 13546                           
 13547                           ;eeprom.c: 179: OCTAVES = to_load[63];
 13548  004C06  C1C6  F0F8         	movff	loadFromEEPROM@to_load+63,_OCTAVES
 13549                           
 13550                           ;eeprom.c: 180: ARPEGGIO_TYPE = to_load[64];
 13551  004C0A  C1C7  F0EA         	movff	loadFromEEPROM@to_load+64,_ARPEGGIO_TYPE
 13552                           
 13553                           ;eeprom.c: 181: NOTE_LENGTH_PULSES = to_load[65];
 13554  004C0E  C1C8  F0F7         	movff	loadFromEEPROM@to_load+65,_NOTE_LENGTH_PULSES
 13555                           
 13556                           ;eeprom.c: 182: LATCH = to_load[66];
 13557  004C12  0101               	movlb	1	; () banked
 13558  004C14  A1C9               	btfss	(loadFromEEPROM@to_load+66)& (0+255),0,b
 13559  004C16  D002               	goto	u29230
 13560  004C18  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 13561  004C1A  D001               	goto	u29245
 13562  004C1C                     u29230:
 13563  004C1C  9235               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 13564  004C1E                     u29245:
 13565                           
 13566                           ;eeprom.c: 183: AUTO_LATCH = to_load[67];
 13567  004C1E  0101               	movlb	1	; () banked
 13568  004C20  A1CA               	btfss	(loadFromEEPROM@to_load+67)& (0+255),0,b
 13569  004C22  D002               	goto	u29250
 13570  004C24  8E34               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13571  004C26  D001               	goto	u29265
 13572  004C28                     u29250:
 13573  004C28  9E34               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13574  004C2A                     u29265:
 13575                           
 13576                           ;eeprom.c: 184: UN_LATCH_MODE = to_load[68];
 13577  004C2A  0101               	movlb	1	; () banked
 13578  004C2C  A1CB               	btfss	(loadFromEEPROM@to_load+68)& (0+255),0,b
 13579  004C2E  D002               	goto	u29270
 13580  004C30  8035               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13581  004C32  D001               	goto	u29285
 13582  004C34                     u29270:
 13583  004C34  9035               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13584  004C36                     u29285:
 13585                           
 13586                           ;eeprom.c: 185: AUTO_RANDOMIZE = to_load[69];
 13587  004C36  0101               	movlb	1	; () banked
 13588  004C38  A1CC               	btfss	(loadFromEEPROM@to_load+69)& (0+255),0,b
 13589  004C3A  D002               	goto	u29290
 13590  004C3C  8A34               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13591  004C3E  D001               	goto	u29305
 13592  004C40                     u29290:
 13593  004C40  9A34               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13594  004C42                     u29305:
 13595                           
 13596                           ;eeprom.c: 186: skipFirstLast = to_load[70];
 13597  004C42  0101               	movlb	1	; () banked
 13598  004C44  A1CD               	btfss	(loadFromEEPROM@to_load+70)& (0+255),0,b
 13599  004C46  D002               	goto	u29310
 13600  004C48  8834               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13601  004C4A  D001               	goto	u29325
 13602  004C4C                     u29310:
 13603  004C4C  9834               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13604  004C4E                     u29325:
 13605                           
 13606                           ;eeprom.c: 187: LAST_NOTE_MODE_KEY_PRESS = to_load[71];
 13607  004C4E  0101               	movlb	1	; () banked
 13608  004C50  A1CE               	btfss	(loadFromEEPROM@to_load+71)& (0+255),0,b
 13609  004C52  D002               	goto	u29330
 13610  004C54  8434               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13611  004C56  D001               	goto	u29345
 13612  004C58                     u29330:
 13613  004C58  9434               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13614  004C5A                     u29345:
 13615                           
 13616                           ;eeprom.c: 188: LAST_NOTE_MODE_KEY_RELEASE = to_load[72];
 13617  004C5A  0101               	movlb	1	; () banked
 13618  004C5C  A1CF               	btfss	(loadFromEEPROM@to_load+72)& (0+255),0,b
 13619  004C5E  D002               	goto	u29350
 13620  004C60  8234               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13621  004C62  D001               	goto	u29365
 13622  004C64                     u29350:
 13623  004C64  9234               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13624  004C66                     u29365:
 13625                           
 13626                           ;eeprom.c: 189: LAST_NOTE_MODE_TRANSPOSE = to_load[73];
 13627  004C66  0101               	movlb	1	; () banked
 13628  004C68  A1D0               	btfss	(loadFromEEPROM@to_load+73)& (0+255),0,b
 13629  004C6A  D002               	goto	u29370
 13630  004C6C  8034               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13631  004C6E  D001               	goto	u29385
 13632  004C70                     u29370:
 13633  004C70  9034               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13634  004C72                     u29385:
 13635                           
 13636                           ;eeprom.c: 190: LAST_NOTE_MODE_RESET = to_load[74];
 13637  004C72  0101               	movlb	1	; () banked
 13638  004C74  A1D1               	btfss	(loadFromEEPROM@to_load+74)& (0+255),0,b
 13639  004C76  D002               	goto	u29390
 13640  004C78  8E33               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13641  004C7A  0012               	return	
 13642  004C7C                     u29390:
 13643  004C7C  9E33               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13644  004C7E  0012               	return		;funcret
 13645  004C80                     __end_of_loadFromEEPROM:
 13646                           	opt stack 0
 13647                           tblptru	equ	0xFF8
 13648                           tblptrh	equ	0xFF7
 13649                           tblptrl	equ	0xFF6
 13650                           tablat	equ	0xFF5
 13651                           prodh	equ	0xFF4
 13652                           prodl	equ	0xFF3
 13653                           intcon	equ	0xFF2
 13654                           intcon2	equ	0xFF1
 13655                           postinc0	equ	0xFEE
 13656                           wreg	equ	0xFE8
 13657                           postdec1	equ	0xFE5
 13658                           fsr1l	equ	0xFE1
 13659                           indf2	equ	0xFDF
 13660                           postinc2	equ	0xFDE
 13661                           fsr2h	equ	0xFDA
 13662                           fsr2l	equ	0xFD9
 13663                           status	equ	0xFD8
 13664                           
 13665 ;; *************** function _calculate_pulse_length *****************
 13666 ;; Defined at:
 13667 ;;		line 148 in file "arpeggio.c"
 13668 ;; Parameters:    Size  Location     Type
 13669 ;;		None
 13670 ;; Auto vars:     Size  Location     Type
 13671 ;;  s_tick          4  100[BANK0 ] void 
 13672 ;; Return value:  Size  Location     Type
 13673 ;;                  2   98[BANK0 ] unsigned short 
 13674 ;; Registers used:
 13675 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13676 ;; Tracked objects:
 13677 ;;		On entry : 0/0
 13678 ;;		On exit  : 0/0
 13679 ;;		Unchanged: 0/0
 13680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13681 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13682 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13684 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13685 ;;Total ram usage:       10 bytes
 13686 ;; Hardware stack levels used:    1
 13687 ;; Hardware stack levels required when called:    6
 13688 ;; This function calls:
 13689 ;;		___fladd
 13690 ;;		___fldiv
 13691 ;;		___flmul
 13692 ;;		___flneg
 13693 ;;		___fltol
 13694 ;;		___xxtofl
 13695 ;; This function is called by:
 13696 ;;		_Function_H_2
 13697 ;;		_loadFromEEPROM
 13698 ;;		_main
 13699 ;; This function uses a non-reentrant model
 13700 ;;
 13701                           
 13702                           	psect	text31
 13703  005CF4                     __ptext31:
 13704                           	opt stack 0
 13705  005CF4                     _calculate_pulse_length:
 13706                           	opt stack 22
 13707                           
 13708                           ;arpeggio.c: 155: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13709                           
 13710                           ;incstack = 0
 13711  005CF4  0E00               	movlw	0
 13712  005CF6  0100               	movlb	0	; () banked
 13713  005CF8  6F8B               	movwf	___fldiv@a& (0+255),b
 13714  005CFA  0E00               	movlw	0
 13715  005CFC  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 13716  005CFE  0E70               	movlw	112
 13717  005D00  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 13718  005D02  0E42               	movlw	66
 13719  005D04  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 13720  005D06  51FF               	movf	_BPM& (0+255),w,b
 13721  005D08  025E               	mulwf	_PPQN,c
 13722  005D0A  CFF3 F060          	movff	prodl,___xxtofl@val
 13723  005D0E  CFF4 F061          	movff	prodh,___xxtofl@val+1
 13724  005D12  0E00               	movlw	0
 13725  005D14  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 13726  005D16  0EFF               	movlw	-1
 13727  005D18  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 13728  005D1A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 13729  005D1C  0E01               	movlw	1
 13730  005D1E  EC29  F02F         	call	___xxtofl
 13731  005D22  C060  F087         	movff	?___xxtofl,___fldiv@b
 13732  005D26  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 13733  005D2A  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 13734  005D2E  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 13735  005D32  EC1A  F01C         	call	___fldiv	;wreg free
 13736  005D36  C087  F0C8         	movff	?___fldiv,_calculate_pulse_length$5808
 13737  005D3A  C088  F0C9         	movff	?___fldiv+1,_calculate_pulse_length$5808+1
 13738  005D3E  C089  F0CA         	movff	?___fldiv+2,_calculate_pulse_length$5808+2
 13739  005D42  C08A  F0CB         	movff	?___fldiv+3,_calculate_pulse_length$5808+3
 13740                           
 13741                           ;arpeggio.c: 155: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13742  005D46  0E00               	movlw	0
 13743  005D48  0100               	movlb	0	; () banked
 13744  005D4A  6F87               	movwf	___fldiv@b& (0+255),b
 13745  005D4C  0E00               	movlw	0
 13746  005D4E  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 13747  005D50  0E80               	movlw	128
 13748  005D52  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 13749  005D54  0E3F               	movlw	63
 13750  005D56  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 13751  005D58  C0C8  F08B         	movff	_calculate_pulse_length$5808,___fldiv@a
 13752  005D5C  C0C9  F08C         	movff	_calculate_pulse_length$5808+1,___fldiv@a+1
 13753  005D60  C0CA  F08D         	movff	_calculate_pulse_length$5808+2,___fldiv@a+2
 13754  005D64  C0CB  F08E         	movff	_calculate_pulse_length$5808+3,___fldiv@a+3
 13755  005D68  EC1A  F01C         	call	___fldiv	;wreg free
 13756  005D6C  C087  F0C4         	movff	?___fldiv,calculate_pulse_length@s_tick
 13757  005D70  C088  F0C5         	movff	?___fldiv+1,calculate_pulse_length@s_tick+1
 13758  005D74  C089  F0C6         	movff	?___fldiv+2,calculate_pulse_length@s_tick+2
 13759  005D78  C08A  F0C7         	movff	?___fldiv+3,calculate_pulse_length@s_tick+3
 13760                           
 13761                           ;arpeggio.c: 156: return (unsigned short) ((65535.0 - (s_tick * 20000000.0) / ( 4.0 * PR
      +                          ESCALER)) + 0.5);
 13762  005D7C  0E80               	movlw	128
 13763  005D7E  0100               	movlb	0	; () banked
 13764  005D80  6FA8               	movwf	___fladd@a& (0+255),b
 13765  005D82  0EFF               	movlw	255
 13766  005D84  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 13767  005D86  0E7F               	movlw	127
 13768  005D88  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 13769  005D8A  0E47               	movlw	71
 13770  005D8C  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 13771  005D8E  0E00               	movlw	0
 13772  005D90  6F72               	movwf	___flmul@a& (0+255),b
 13773  005D92  0E00               	movlw	0
 13774  005D94  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13775  005D96  0E80               	movlw	128
 13776  005D98  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13777  005D9A  0E40               	movlw	64
 13778  005D9C  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13779  005D9E  505D               	movf	_PRESCALER,w,c
 13780  005DA0  6F60               	movwf	___xxtofl@val& (0+255),b
 13781  005DA2  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 13782  005DA4  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 13783  005DA6  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 13784  005DA8  0E00               	movlw	0
 13785  005DAA  EC29  F02F         	call	___xxtofl
 13786  005DAE  C060  F06E         	movff	?___xxtofl,___flmul@b
 13787  005DB2  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 13788  005DB6  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 13789  005DBA  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 13790  005DBE  EC4E  F017         	call	___flmul	;wreg free
 13791  005DC2  C06E  F08B         	movff	?___flmul,___fldiv@a
 13792  005DC6  C06F  F08C         	movff	?___flmul+1,___fldiv@a+1
 13793  005DCA  C070  F08D         	movff	?___flmul+2,___fldiv@a+2
 13794  005DCE  C071  F08E         	movff	?___flmul+3,___fldiv@a+3
 13795  005DD2  0E80               	movlw	128
 13796  005DD4  0100               	movlb	0	; () banked
 13797  005DD6  6F72               	movwf	___flmul@a& (0+255),b
 13798  005DD8  0E96               	movlw	150
 13799  005DDA  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13800  005DDC  0E98               	movlw	152
 13801  005DDE  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13802  005DE0  0E4B               	movlw	75
 13803  005DE2  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13804  005DE4  C0C4  F06E         	movff	calculate_pulse_length@s_tick,___flmul@b
 13805  005DE8  C0C5  F06F         	movff	calculate_pulse_length@s_tick+1,___flmul@b+1
 13806  005DEC  C0C6  F070         	movff	calculate_pulse_length@s_tick+2,___flmul@b+2
 13807  005DF0  C0C7  F071         	movff	calculate_pulse_length@s_tick+3,___flmul@b+3
 13808  005DF4  EC4E  F017         	call	___flmul	;wreg free
 13809  005DF8  C06E  F087         	movff	?___flmul,___fldiv@b
 13810  005DFC  C06F  F088         	movff	?___flmul+1,___fldiv@b+1
 13811  005E00  C070  F089         	movff	?___flmul+2,___fldiv@b+2
 13812  005E04  C071  F08A         	movff	?___flmul+3,___fldiv@b+3
 13813  005E08  EC1A  F01C         	call	___fldiv	;wreg free
 13814  005E0C  C087  F0A0         	movff	?___fldiv,___flneg@f1
 13815  005E10  C088  F0A1         	movff	?___fldiv+1,___flneg@f1+1
 13816  005E14  C089  F0A2         	movff	?___fldiv+2,___flneg@f1+2
 13817  005E18  C08A  F0A3         	movff	?___fldiv+3,___flneg@f1+3
 13818  005E1C  EC98  F049         	call	___flneg	;wreg free
 13819  005E20  C0A0  F0A4         	movff	?___flneg,___fladd@b
 13820  005E24  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 13821  005E28  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 13822  005E2C  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 13823  005E30  ECF7  F018         	call	___fladd	;wreg free
 13824  005E34  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 13825  005E38  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 13826  005E3C  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 13827  005E40  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 13828  005E44  ECE3  F034         	call	___fltol	;wreg free
 13829  005E48  C0B8  F0C2         	movff	?___fltol,?_calculate_pulse_length
 13830  005E4C  C0B9  F0C3         	movff	?___fltol+1,?_calculate_pulse_length+1
 13831  005E50  0012               	return	
 13832  005E52                     __end_of_calculate_pulse_length:
 13833                           	opt stack 0
 13834                           tblptru	equ	0xFF8
 13835                           tblptrh	equ	0xFF7
 13836                           tblptrl	equ	0xFF6
 13837                           tablat	equ	0xFF5
 13838                           prodh	equ	0xFF4
 13839                           prodl	equ	0xFF3
 13840                           intcon	equ	0xFF2
 13841                           intcon2	equ	0xFF1
 13842                           postinc0	equ	0xFEE
 13843                           wreg	equ	0xFE8
 13844                           postdec1	equ	0xFE5
 13845                           fsr1l	equ	0xFE1
 13846                           indf2	equ	0xFDF
 13847                           postinc2	equ	0xFDE
 13848                           fsr2h	equ	0xFDA
 13849                           fsr2l	equ	0xFD9
 13850                           status	equ	0xFD8
 13851                           
 13852 ;; *************** function _exitLoad *****************
 13853 ;; Defined at:
 13854 ;;		line 268 in file "menu.c"
 13855 ;; Parameters:    Size  Location     Type
 13856 ;;		None
 13857 ;; Auto vars:     Size  Location     Type
 13858 ;;		None
 13859 ;; Return value:  Size  Location     Type
 13860 ;;                  1    wreg      void 
 13861 ;; Registers used:
 13862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13863 ;; Tracked objects:
 13864 ;;		On entry : 0/0
 13865 ;;		On exit  : 0/0
 13866 ;;		Unchanged: 0/0
 13867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13870 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13871 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13872 ;;Total ram usage:        2 bytes
 13873 ;; Hardware stack levels used:    1
 13874 ;; Hardware stack levels required when called:    9
 13875 ;; This function calls:
 13876 ;;		_Lcd_Print_String
 13877 ;;		_clear_row1
 13878 ;; This function is called by:
 13879 ;;		_Function_G_2
 13880 ;; This function uses a non-reentrant model
 13881 ;;
 13882                           
 13883                           	psect	text32
 13884  00908C                     __ptext32:
 13885                           	opt stack 0
 13886  00908C                     _exitLoad:
 13887                           	opt stack 18
 13888                           
 13889                           ;menu.c: 270: while(encoder_click == 0);
 13890                           
 13891                           ;incstack = 0
 13892  00908C  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13893  00908E  D7FE               	goto	_exitLoad
 13894                           
 13895                           ;menu.c: 271: clear_row1();
 13896  009090  EC5D  F04A         	call	_clear_row1	;wreg free
 13897                           
 13898                           ;menu.c: 272: Lcd_Print_String("Settings Loaded!");
 13899  009094  0E75               	movlw	low STR_22
 13900  009096  0100               	movlb	0	; () banked
 13901  009098  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 13902  00909A  0EFD               	movlw	high STR_22
 13903  00909C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13904  00909E  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 13905                           
 13906                           ;menu.c: 273: _delay((unsigned long)((500)*(20000000/4000.0)));
 13907  0090A2  0E0D               	movlw	13
 13908  0090A4  0100               	movlb	0	; () banked
 13909  0090A6  6F71               	movwf	(??_exitLoad+1)& (0+255),b
 13910  0090A8  0EAF               	movlw	175
 13911  0090AA  6F70               	movwf	??_exitLoad& (0+255),b
 13912  0090AC  0EB6               	movlw	182
 13913  0090AE                     u44897:
 13914  0090AE  2EE8               	decfsz	wreg,f,c
 13915  0090B0  D7FE               	bra	u44897
 13916  0090B2  2F70               	decfsz	??_exitLoad& (0+255),f,b
 13917  0090B4  D7FC               	bra	u44897
 13918  0090B6  2F71               	decfsz	(??_exitLoad+1)& (0+255),f,b
 13919  0090B8  D7FA               	bra	u44897
 13920  0090BA  F000               	nop	
 13921                           
 13922                           ;menu.c: 274: which_screen = MAIN_MENU;
 13923  0090BC  0E02               	movlw	2
 13924  0090BE  0100               	movlb	0	; () banked
 13925  0090C0  6FF9               	movwf	_which_screen& (0+255),b
 13926                           
 13927                           ; BSR set to: 0
 13928                           ;menu.c: 275: lcd_print_once = 0;
 13929  0090C2  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13930                           
 13931                           ; BSR set to: 0
 13932                           ;menu.c: 276: encoder_click = 0;
 13933  0090C4  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13934                           
 13935                           ; BSR set to: 0
 13936  0090C6  0012               	return		;funcret
 13937  0090C8                     __end_of_exitLoad:
 13938                           	opt stack 0
 13939                           tblptru	equ	0xFF8
 13940                           tblptrh	equ	0xFF7
 13941                           tblptrl	equ	0xFF6
 13942                           tablat	equ	0xFF5
 13943                           prodh	equ	0xFF4
 13944                           prodl	equ	0xFF3
 13945                           intcon	equ	0xFF2
 13946                           intcon2	equ	0xFF1
 13947                           postinc0	equ	0xFEE
 13948                           wreg	equ	0xFE8
 13949                           postdec1	equ	0xFE5
 13950                           fsr1l	equ	0xFE1
 13951                           indf2	equ	0xFDF
 13952                           postinc2	equ	0xFDE
 13953                           fsr2h	equ	0xFDA
 13954                           fsr2l	equ	0xFD9
 13955                           status	equ	0xFD8
 13956                           
 13957 ;; *************** function _Function_G_1 *****************
 13958 ;; Defined at:
 13959 ;;		line 860 in file "menu.c"
 13960 ;; Parameters:    Size  Location     Type
 13961 ;;		None
 13962 ;; Auto vars:     Size  Location     Type
 13963 ;;		None
 13964 ;; Return value:  Size  Location     Type
 13965 ;;                  1    wreg      void 
 13966 ;; Registers used:
 13967 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13968 ;; Tracked objects:
 13969 ;;		On entry : 0/0
 13970 ;;		On exit  : 0/0
 13971 ;;		Unchanged: 0/0
 13972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13975 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13976 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13977 ;;Total ram usage:        1 bytes
 13978 ;; Hardware stack levels used:    1
 13979 ;; Hardware stack levels required when called:   10
 13980 ;; This function calls:
 13981 ;;		_Busy_eep
 13982 ;;		_Lcd_Print_String
 13983 ;;		_Write_b_eep
 13984 ;;		___lbmod
 13985 ;;		___wmul
 13986 ;;		_clear_row1
 13987 ;;		_clear_row2
 13988 ;;		_eepromExit
 13989 ;;		_exitSave
 13990 ;;		_processEncoderBuxton
 13991 ;;		_saveToEEPROM
 13992 ;; This function is called by:
 13993 ;;		_Function_G
 13994 ;; This function uses a non-reentrant model
 13995 ;;
 13996                           
 13997                           	psect	text33
 13998  0072DE                     __ptext33:
 13999                           	opt stack 0
 14000  0072DE                     _Function_G_1:
 14001                           	opt stack 18
 14002                           
 14003                           ;menu.c: 862: which_screen = SAVES_MENU;
 14004                           
 14005                           ; BSR set to: 0
 14006                           ;incstack = 0
 14007  0072DE  0E17               	movlw	23
 14008  0072E0  0100               	movlb	0	; () banked
 14009  0072E2  6FF9               	movwf	_which_screen& (0+255),b
 14010                           
 14011                           ; BSR set to: 0
 14012                           ;menu.c: 863: encoder_click = 0;
 14013  0072E4  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14014                           
 14015                           ; BSR set to: 0
 14016                           ;menu.c: 864: lcd_print_once = 0;
 14017  0072E6  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14018                           
 14019                           ;menu.c: 866: while(encoder_click == 0) {
 14020  0072E8  D02C               	goto	l3588
 14021  0072EA                     
 14022                           ;menu.c: 867: processEncoderBuxton();
 14023                           
 14024                           ; BSR set to: 0
 14025  0072EA  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14026                           
 14027                           ;menu.c: 868: if (lcd_print_once == 0) {
 14028  0072EE  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14029  0072F0  D027               	goto	l3590
 14030                           
 14031                           ;menu.c: 869: clear_row1();
 14032  0072F2  EC5D  F04A         	call	_clear_row1	;wreg free
 14033                           
 14034                           ;menu.c: 870: Lcd_Print_String("Save #:");
 14035  0072F6  0EBB               	movlw	low STR_35
 14036  0072F8  0100               	movlb	0	; () banked
 14037  0072FA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14038  0072FC  0EFF               	movlw	high STR_35
 14039  0072FE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14040  007300  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 14041                           
 14042                           ;menu.c: 871: clear_row2();
 14043  007304  EC49  F04A         	call	_clear_row2	;wreg free
 14044                           
 14045                           ;menu.c: 872: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sav
      +                          esMenu.address]);
 14046  007308  C0DF  F060         	movff	_savesMenu,___lbmod@divisor
 14047  00730C  0100               	movlb	0	; () banked
 14048  00730E  51E1               	movf	(_savesMenu+2)& (0+255),w,b
 14049  007310  ECC8  F049         	call	___lbmod
 14050  007314  0100               	movlb	0	; () banked
 14051  007316  6FB4               	movwf	??_Function_G_1& (0+255),b
 14052  007318  51B4               	movf	??_Function_G_1& (0+255),w,b
 14053  00731A  25E0               	addwf	(_savesMenu+1)& (0+255),w,b
 14054  00731C  6F64               	movwf	___wmul@multiplier& (0+255),b
 14055  00731E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 14056  007320  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14057  007322  0E00               	movlw	0
 14058  007324  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14059  007326  0E11               	movlw	17
 14060  007328  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14061  00732A  EC71  F04A         	call	___wmul	;wreg free
 14062  00732E  0E9E               	movlw	low _LCD_STRINGS
 14063  007330  0100               	movlb	0	; () banked
 14064  007332  2564               	addwf	?___wmul& (0+255),w,b
 14065  007334  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14066  007336  0EF3               	movlw	high _LCD_STRINGS
 14067  007338  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14068  00733A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14069  00733C  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 14070  007340                     l3590:
 14071                           
 14072                           ;menu.c: 873: }
 14073                           ;menu.c: 874: lcd_print_once = 1;
 14074  007340  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14075  007342                     l3588:
 14076  007342  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14077  007344  D7D2               	goto	l3589
 14078                           
 14079                           ;menu.c: 875: }
 14080                           ;menu.c: 877: if(savesMenu.selector == 4){eepromExit();}
 14081  007346  0E04               	movlw	4
 14082  007348  0100               	movlb	0	; () banked
 14083  00734A  19E1               	xorwf	(_savesMenu+2)& (0+255),w,b
 14084  00734C  A4D8               	btfss	status,2,c
 14085  00734E  D003               	goto	l3592
 14086                           
 14087                           ; BSR set to: 0
 14088  007350  EC82  F048         	call	_eepromExit	;wreg free
 14089  007354  D011               	goto	l3593
 14090  007356                     l3592:
 14091                           
 14092                           ;menu.c: 878: else {
 14093                           ;menu.c: 880: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 14094  007356  EC3C  F04B         	call	_Busy_eep	;wreg free
 14095  00735A  0E00               	movlw	0
 14096  00735C  0100               	movlb	0	; () banked
 14097  00735E  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 14098  007360  0E00               	movlw	0
 14099  007362  6F60               	movwf	Write_b_eep@badd& (0+255),b
 14100  007364  29E1               	incf	(_savesMenu+2)& (0+255),w,b
 14101  007366  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 14102  007368  ECE7  F047         	call	_Write_b_eep	;wreg free
 14103                           
 14104                           ;menu.c: 881: saveToEEPROM(savesMenu.selector + 1);
 14105  00736C  0100               	movlb	0	; () banked
 14106  00736E  29E1               	incf	(_savesMenu+2)& (0+255),w,b
 14107  007370  EC41  F027         	call	_saveToEEPROM
 14108                           
 14109                           ;menu.c: 882: exitSave();
 14110  007374  EC64  F048         	call	_exitSave	;wreg free
 14111  007378                     l3593:
 14112                           
 14113                           ;menu.c: 883: }
 14114                           ;menu.c: 885: savesMenu.selector = 0;
 14115  007378  0E00               	movlw	0
 14116  00737A  0100               	movlb	0	; () banked
 14117  00737C  6FE1               	movwf	(_savesMenu+2)& (0+255),b
 14118                           
 14119                           ; BSR set to: 0
 14120  00737E  0012               	return		;funcret
 14121  007380                     __end_of_Function_G_1:
 14122                           	opt stack 0
 14123                           tblptru	equ	0xFF8
 14124                           tblptrh	equ	0xFF7
 14125                           tblptrl	equ	0xFF6
 14126                           tablat	equ	0xFF5
 14127                           prodh	equ	0xFF4
 14128                           prodl	equ	0xFF3
 14129                           intcon	equ	0xFF2
 14130                           intcon2	equ	0xFF1
 14131                           postinc0	equ	0xFEE
 14132                           wreg	equ	0xFE8
 14133                           postdec1	equ	0xFE5
 14134                           fsr1l	equ	0xFE1
 14135                           indf2	equ	0xFDF
 14136                           postinc2	equ	0xFDE
 14137                           fsr2h	equ	0xFDA
 14138                           fsr2l	equ	0xFD9
 14139                           status	equ	0xFD8
 14140                           
 14141 ;; *************** function _exitSave *****************
 14142 ;; Defined at:
 14143 ;;		line 255 in file "menu.c"
 14144 ;; Parameters:    Size  Location     Type
 14145 ;;		None
 14146 ;; Auto vars:     Size  Location     Type
 14147 ;;		None
 14148 ;; Return value:  Size  Location     Type
 14149 ;;                  1    wreg      void 
 14150 ;; Registers used:
 14151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14152 ;; Tracked objects:
 14153 ;;		On entry : 0/0
 14154 ;;		On exit  : 0/0
 14155 ;;		Unchanged: 0/0
 14156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14160 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14161 ;;Total ram usage:        2 bytes
 14162 ;; Hardware stack levels used:    1
 14163 ;; Hardware stack levels required when called:    9
 14164 ;; This function calls:
 14165 ;;		_Lcd_Print_String
 14166 ;;		_clear_row1
 14167 ;; This function is called by:
 14168 ;;		_Function_G_1
 14169 ;; This function uses a non-reentrant model
 14170 ;;
 14171                           
 14172                           	psect	text34
 14173  0090C8                     __ptext34:
 14174                           	opt stack 0
 14175  0090C8                     _exitSave:
 14176                           	opt stack 18
 14177                           
 14178                           ;menu.c: 257: while(encoder_click == 0);
 14179                           
 14180                           ; BSR set to: 0
 14181                           ;incstack = 0
 14182  0090C8  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14183  0090CA  D7FE               	goto	_exitSave
 14184                           
 14185                           ;menu.c: 258: clear_row1();
 14186  0090CC  EC5D  F04A         	call	_clear_row1	;wreg free
 14187                           
 14188                           ;menu.c: 259: Lcd_Print_String("Settings Saved!");
 14189  0090D0  0EFD               	movlw	low STR_21
 14190  0090D2  0100               	movlb	0	; () banked
 14191  0090D4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14192  0090D6  0EFD               	movlw	high STR_21
 14193  0090D8  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14194  0090DA  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 14195                           
 14196                           ;menu.c: 260: _delay((unsigned long)((500)*(20000000/4000.0)));
 14197  0090DE  0E0D               	movlw	13
 14198  0090E0  0100               	movlb	0	; () banked
 14199  0090E2  6F71               	movwf	(??_exitSave+1)& (0+255),b
 14200  0090E4  0EAF               	movlw	175
 14201  0090E6  6F70               	movwf	??_exitSave& (0+255),b
 14202  0090E8  0EB6               	movlw	182
 14203  0090EA                     u44907:
 14204  0090EA  2EE8               	decfsz	wreg,f,c
 14205  0090EC  D7FE               	bra	u44907
 14206  0090EE  2F70               	decfsz	??_exitSave& (0+255),f,b
 14207  0090F0  D7FC               	bra	u44907
 14208  0090F2  2F71               	decfsz	(??_exitSave+1)& (0+255),f,b
 14209  0090F4  D7FA               	bra	u44907
 14210  0090F6  F000               	nop	
 14211                           
 14212                           ;menu.c: 261: which_screen = MAIN_MENU;
 14213  0090F8  0E02               	movlw	2
 14214  0090FA  0100               	movlb	0	; () banked
 14215  0090FC  6FF9               	movwf	_which_screen& (0+255),b
 14216                           
 14217                           ; BSR set to: 0
 14218                           ;menu.c: 262: lcd_print_once = 0;
 14219  0090FE  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14220                           
 14221                           ; BSR set to: 0
 14222                           ;menu.c: 263: encoder_click = 0;
 14223  009100  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14224                           
 14225                           ; BSR set to: 0
 14226  009102  0012               	return		;funcret
 14227  009104                     __end_of_exitSave:
 14228                           	opt stack 0
 14229                           tblptru	equ	0xFF8
 14230                           tblptrh	equ	0xFF7
 14231                           tblptrl	equ	0xFF6
 14232                           tablat	equ	0xFF5
 14233                           prodh	equ	0xFF4
 14234                           prodl	equ	0xFF3
 14235                           intcon	equ	0xFF2
 14236                           intcon2	equ	0xFF1
 14237                           postinc0	equ	0xFEE
 14238                           wreg	equ	0xFE8
 14239                           postdec1	equ	0xFE5
 14240                           fsr1l	equ	0xFE1
 14241                           indf2	equ	0xFDF
 14242                           postinc2	equ	0xFDE
 14243                           fsr2h	equ	0xFDA
 14244                           fsr2l	equ	0xFD9
 14245                           status	equ	0xFD8
 14246                           
 14247 ;; *************** function _eepromExit *****************
 14248 ;; Defined at:
 14249 ;;		line 281 in file "menu.c"
 14250 ;; Parameters:    Size  Location     Type
 14251 ;;		None
 14252 ;; Auto vars:     Size  Location     Type
 14253 ;;		None
 14254 ;; Return value:  Size  Location     Type
 14255 ;;                  1    wreg      void 
 14256 ;; Registers used:
 14257 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14258 ;; Tracked objects:
 14259 ;;		On entry : 0/0
 14260 ;;		On exit  : 0/0
 14261 ;;		Unchanged: 0/0
 14262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14265 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14266 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14267 ;;Total ram usage:        2 bytes
 14268 ;; Hardware stack levels used:    1
 14269 ;; Hardware stack levels required when called:    9
 14270 ;; This function calls:
 14271 ;;		_Lcd_Print_String
 14272 ;;		_clear_row1
 14273 ;; This function is called by:
 14274 ;;		_Function_G_1
 14275 ;;		_Function_G_2
 14276 ;;		_Function_G
 14277 ;; This function uses a non-reentrant model
 14278 ;;
 14279                           
 14280                           	psect	text35
 14281  009104                     __ptext35:
 14282                           	opt stack 0
 14283  009104                     _eepromExit:
 14284                           	opt stack 19
 14285                           
 14286                           ;menu.c: 283: while(encoder_click == 0);
 14287                           
 14288                           ; BSR set to: 0
 14289                           ;incstack = 0
 14290  009104  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14291  009106  D7FE               	goto	_eepromExit
 14292                           
 14293                           ;menu.c: 284: clear_row1();
 14294  009108  EC5D  F04A         	call	_clear_row1	;wreg free
 14295                           
 14296                           ;menu.c: 285: Lcd_Print_String("Exit EEPROM!");
 14297  00910C  0E18               	movlw	low STR_23
 14298  00910E  0100               	movlb	0	; () banked
 14299  009110  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14300  009112  0EFF               	movlw	high STR_23
 14301  009114  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14302  009116  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 14303                           
 14304                           ;menu.c: 286: _delay((unsigned long)((500)*(20000000/4000.0)));
 14305  00911A  0E0D               	movlw	13
 14306  00911C  0100               	movlb	0	; () banked
 14307  00911E  6F71               	movwf	(??_eepromExit+1)& (0+255),b
 14308  009120  0EAF               	movlw	175
 14309  009122  6F70               	movwf	??_eepromExit& (0+255),b
 14310  009124  0EB6               	movlw	182
 14311  009126                     u44917:
 14312  009126  2EE8               	decfsz	wreg,f,c
 14313  009128  D7FE               	bra	u44917
 14314  00912A  2F70               	decfsz	??_eepromExit& (0+255),f,b
 14315  00912C  D7FC               	bra	u44917
 14316  00912E  2F71               	decfsz	(??_eepromExit+1)& (0+255),f,b
 14317  009130  D7FA               	bra	u44917
 14318  009132  F000               	nop	
 14319                           
 14320                           ;menu.c: 287: which_screen = MAIN_MENU;
 14321  009134  0E02               	movlw	2
 14322  009136  0100               	movlb	0	; () banked
 14323  009138  6FF9               	movwf	_which_screen& (0+255),b
 14324                           
 14325                           ; BSR set to: 0
 14326                           ;menu.c: 288: lcd_print_once = 0;
 14327  00913A  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14328                           
 14329                           ; BSR set to: 0
 14330                           ;menu.c: 289: encoder_click = 0;
 14331  00913C  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14332                           
 14333                           ; BSR set to: 0
 14334  00913E  0012               	return		;funcret
 14335  009140                     __end_of_eepromExit:
 14336                           	opt stack 0
 14337                           tblptru	equ	0xFF8
 14338                           tblptrh	equ	0xFF7
 14339                           tblptrl	equ	0xFF6
 14340                           tablat	equ	0xFF5
 14341                           prodh	equ	0xFF4
 14342                           prodl	equ	0xFF3
 14343                           intcon	equ	0xFF2
 14344                           intcon2	equ	0xFF1
 14345                           postinc0	equ	0xFEE
 14346                           wreg	equ	0xFE8
 14347                           postdec1	equ	0xFE5
 14348                           fsr1l	equ	0xFE1
 14349                           indf2	equ	0xFDF
 14350                           postinc2	equ	0xFDE
 14351                           fsr2h	equ	0xFDA
 14352                           fsr2l	equ	0xFD9
 14353                           status	equ	0xFD8
 14354                           
 14355 ;; *************** function _Function_F *****************
 14356 ;; Defined at:
 14357 ;;		line 834 in file "menu.c"
 14358 ;; Parameters:    Size  Location     Type
 14359 ;;		None
 14360 ;; Auto vars:     Size  Location     Type
 14361 ;;		None
 14362 ;; Return value:  Size  Location     Type
 14363 ;;                  1    wreg      void 
 14364 ;; Registers used:
 14365 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14366 ;; Tracked objects:
 14367 ;;		On entry : 0/0
 14368 ;;		On exit  : 0/0
 14369 ;;		Unchanged: 0/0
 14370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14375 ;;Total ram usage:        0 bytes
 14376 ;; Hardware stack levels used:    1
 14377 ;; Hardware stack levels required when called:    9
 14378 ;; This function calls:
 14379 ;;		_Lcd_Print_String
 14380 ;;		_Lcd_Set_Cursor
 14381 ;;		_clear_row2
 14382 ;;		_int2string
 14383 ;;		_processEncoderBuxton
 14384 ;;		_programChange
 14385 ;; This function is called by:
 14386 ;;		_menu_lcd
 14387 ;; This function uses a non-reentrant model
 14388 ;;
 14389                           
 14390                           	psect	text36
 14391  0086FA                     __ptext36:
 14392                           	opt stack 0
 14393  0086FA                     _Function_F:
 14394                           	opt stack 20
 14395                           
 14396                           ;menu.c: 836: which_screen = PROGRAM_CHANGE_MENU;
 14397                           
 14398                           ; BSR set to: 0
 14399                           ;incstack = 0
 14400  0086FA  0E08               	movlw	8
 14401  0086FC  0100               	movlb	0	; () banked
 14402  0086FE  6FF9               	movwf	_which_screen& (0+255),b
 14403                           
 14404                           ; BSR set to: 0
 14405                           ;menu.c: 837: lcd_print_once = 0;
 14406  008700  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14407                           
 14408                           ; BSR set to: 0
 14409                           ;menu.c: 839: programChangeMenu.selector = patch_number;
 14410  008702  C171  F146         	movff	_patch_number,_programChangeMenu+2
 14411                           
 14412                           ;menu.c: 841: while(encoder_click == 0) {
 14413  008706  D021               	goto	l3581
 14414  008708                     
 14415                           ;menu.c: 842: processEncoderBuxton();
 14416                           
 14417                           ; BSR set to: 0
 14418  008708  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14419                           
 14420                           ;menu.c: 843: if (lcd_print_once == 0) {
 14421  00870C  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14422  00870E  D009               	goto	l3583
 14423                           
 14424                           ;menu.c: 844: clear_row2();
 14425  008710  EC49  F04A         	call	_clear_row2	;wreg free
 14426                           
 14427                           ;menu.c: 845: Lcd_Print_String("Program #: ");
 14428  008714  0E4C               	movlw	low STR_34
 14429  008716  0100               	movlb	0	; () banked
 14430  008718  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14431  00871A  0EFF               	movlw	high STR_34
 14432  00871C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14433  00871E  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 14434  008722                     l3583:
 14435                           
 14436                           ;menu.c: 846: }
 14437                           ;menu.c: 847: lcd_print_once = 1;
 14438  008722  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14439                           
 14440                           ;menu.c: 850: int2string(programChangeMenu.selector);
 14441  008724  C146  F074         	movff	_programChangeMenu+2,int2string@number
 14442  008728  0100               	movlb	0	; () banked
 14443  00872A  6B75               	clrf	(int2string@number+1)& (0+255),b
 14444  00872C  EC52  F035         	call	_int2string	;wreg free
 14445                           
 14446                           ;menu.c: 851: Lcd_Set_Cursor(2,13);
 14447  008730  0E0D               	movlw	13
 14448  008732  0100               	movlb	0	; () banked
 14449  008734  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14450  008736  0E02               	movlw	2
 14451  008738  ECF7  F045         	call	_Lcd_Set_Cursor
 14452                           
 14453                           ;menu.c: 852: Lcd_Print_String(string2display);
 14454  00873C  0E82               	movlw	low _string2display
 14455  00873E  0100               	movlb	0	; () banked
 14456  008740  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14457  008742  0E01               	movlw	high _string2display
 14458  008744  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14459  008746  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 14460  00874A                     l3581:
 14461  00874A  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14462  00874C  D7DD               	goto	l3582
 14463                           
 14464                           ;menu.c: 853: }
 14465                           ;menu.c: 855: patch_number = programChangeMenu.selector;
 14466  00874E  C146  F171         	movff	_programChangeMenu+2,_patch_number
 14467                           
 14468                           ;menu.c: 856: programChange(channel, programChangeMenu.selector, 0x00);
 14469  008752  C146  F06B         	movff	_programChangeMenu+2,programChange@data1
 14470  008756  0E00               	movlw	0
 14471  008758  0100               	movlb	0	; () banked
 14472  00875A  6F6C               	movwf	programChange@data2& (0+255),b
 14473  00875C  51F6               	movf	_channel& (0+255),w,b
 14474  00875E  ECDF  F049         	call	_programChange
 14475  008762  0012               	return		;funcret
 14476  008764                     __end_of_Function_F:
 14477                           	opt stack 0
 14478                           tblptru	equ	0xFF8
 14479                           tblptrh	equ	0xFF7
 14480                           tblptrl	equ	0xFF6
 14481                           tablat	equ	0xFF5
 14482                           prodh	equ	0xFF4
 14483                           prodl	equ	0xFF3
 14484                           intcon	equ	0xFF2
 14485                           intcon2	equ	0xFF1
 14486                           postinc0	equ	0xFEE
 14487                           wreg	equ	0xFE8
 14488                           postdec1	equ	0xFE5
 14489                           fsr1l	equ	0xFE1
 14490                           indf2	equ	0xFDF
 14491                           postinc2	equ	0xFDE
 14492                           fsr2h	equ	0xFDA
 14493                           fsr2l	equ	0xFD9
 14494                           status	equ	0xFD8
 14495                           
 14496 ;; *************** function _programChange *****************
 14497 ;; Defined at:
 14498 ;;		line 166 in file "midi.c"
 14499 ;; Parameters:    Size  Location     Type
 14500 ;;  channel         1    wreg     unsigned char 
 14501 ;;  data1           1   11[BANK0 ] unsigned char 
 14502 ;;  data2           1   12[BANK0 ] unsigned char 
 14503 ;; Auto vars:     Size  Location     Type
 14504 ;;  channel         1   13[BANK0 ] unsigned char 
 14505 ;; Return value:  Size  Location     Type
 14506 ;;                  1    wreg      void 
 14507 ;; Registers used:
 14508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14509 ;; Tracked objects:
 14510 ;;		On entry : 0/0
 14511 ;;		On exit  : 0/0
 14512 ;;		Unchanged: 0/0
 14513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14514 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14515 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14517 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;Total ram usage:        3 bytes
 14519 ;; Hardware stack levels used:    1
 14520 ;; Hardware stack levels required when called:    6
 14521 ;; This function calls:
 14522 ;;		_sendOut
 14523 ;;		_sendUSB
 14524 ;; This function is called by:
 14525 ;;		_Function_F
 14526 ;; This function uses a non-reentrant model
 14527 ;;
 14528                           
 14529                           	psect	text37
 14530  0093BE                     __ptext37:
 14531                           	opt stack 0
 14532  0093BE                     _programChange:
 14533                           	opt stack 22
 14534                           
 14535                           ;incstack = 0
 14536                           ;programChange@channel stored from wreg
 14537  0093BE  0100               	movlb	0	; () banked
 14538  0093C0  6F6D               	movwf	programChange@channel& (0+255),b
 14539                           
 14540                           ;midi.c: 168: statusByte = channel | program_change;
 14541  0093C2  0100               	movlb	0	; () banked
 14542  0093C4  516D               	movf	programChange@channel& (0+255),w,b
 14543  0093C6  09C0               	iorlw	192
 14544  0093C8  6FF5               	movwf	_statusByte& (0+255),b
 14545                           
 14546                           ; BSR set to: 0
 14547                           ;midi.c: 171: sendUSB(statusByte, data1, data2);
 14548  0093CA  C06B  F060         	movff	programChange@data1,sendUSB@message2
 14549  0093CE  C06C  F061         	movff	programChange@data2,sendUSB@message3
 14550  0093D2  51F5               	movf	_statusByte& (0+255),w,b
 14551  0093D4  ECC0  F039         	call	_sendUSB
 14552                           
 14553                           ;midi.c: 174: sendOut(statusByte);
 14554  0093D8  0100               	movlb	0	; () banked
 14555  0093DA  51F5               	movf	_statusByte& (0+255),w,b
 14556  0093DC  ECD8  F04A         	call	_sendOut
 14557                           
 14558                           ;midi.c: 175: sendOut(data1);
 14559  0093E0  0100               	movlb	0	; () banked
 14560  0093E2  516B               	movf	programChange@data1& (0+255),w,b
 14561  0093E4  ECD8  F04A         	call	_sendOut
 14562  0093E8  0012               	return		;funcret
 14563  0093EA                     __end_of_programChange:
 14564                           	opt stack 0
 14565                           tblptru	equ	0xFF8
 14566                           tblptrh	equ	0xFF7
 14567                           tblptrl	equ	0xFF6
 14568                           tablat	equ	0xFF5
 14569                           prodh	equ	0xFF4
 14570                           prodl	equ	0xFF3
 14571                           intcon	equ	0xFF2
 14572                           intcon2	equ	0xFF1
 14573                           postinc0	equ	0xFEE
 14574                           wreg	equ	0xFE8
 14575                           postdec1	equ	0xFE5
 14576                           fsr1l	equ	0xFE1
 14577                           indf2	equ	0xFDF
 14578                           postinc2	equ	0xFDE
 14579                           fsr2h	equ	0xFDA
 14580                           fsr2l	equ	0xFD9
 14581                           status	equ	0xFD8
 14582                           
 14583 ;; *************** function _Function_E *****************
 14584 ;; Defined at:
 14585 ;;		line 815 in file "menu.c"
 14586 ;; Parameters:    Size  Location     Type
 14587 ;;		None
 14588 ;; Auto vars:     Size  Location     Type
 14589 ;;		None
 14590 ;; Return value:  Size  Location     Type
 14591 ;;                  1    wreg      void 
 14592 ;; Registers used:
 14593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14594 ;; Tracked objects:
 14595 ;;		On entry : 0/0
 14596 ;;		On exit  : 0/0
 14597 ;;		Unchanged: 0/0
 14598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14601 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14602 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;Total ram usage:        1 bytes
 14604 ;; Hardware stack levels used:    1
 14605 ;; Hardware stack levels required when called:    9
 14606 ;; This function calls:
 14607 ;;		_Function_E_1
 14608 ;;		_Function_E_2
 14609 ;;		_Lcd_Print_String
 14610 ;;		___lbmod
 14611 ;;		___wmul
 14612 ;;		_clear_row2
 14613 ;;		_processEncoderBuxton
 14614 ;; This function is called by:
 14615 ;;		_menu_lcd
 14616 ;; This function uses a non-reentrant model
 14617 ;;
 14618                           
 14619                           	psect	text38
 14620  0085AE                     __ptext38:
 14621                           	opt stack 0
 14622  0085AE                     _Function_E:
 14623                           	opt stack 20
 14624                           
 14625                           ;menu.c: 817: which_screen = MIDI_CHANNEL_MENU;
 14626                           
 14627                           ;incstack = 0
 14628  0085AE  0E07               	movlw	7
 14629  0085B0  0100               	movlb	0	; () banked
 14630  0085B2  6FF9               	movwf	_which_screen& (0+255),b
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;menu.c: 818: lcd_print_once = 0;
 14634  0085B4  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14635                           
 14636                           ;menu.c: 820: while(encoder_click == 0) {
 14637  0085B6  D025               	goto	l3572
 14638  0085B8                     
 14639                           ;menu.c: 821: processEncoderBuxton();
 14640                           
 14641                           ; BSR set to: 0
 14642  0085B8  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14643                           
 14644                           ;menu.c: 822: if (lcd_print_once == 0) {
 14645  0085BC  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14646  0085BE  D020               	goto	l3574
 14647                           
 14648                           ;menu.c: 823: clear_row2();
 14649  0085C0  EC49  F04A         	call	_clear_row2	;wreg free
 14650                           
 14651                           ;menu.c: 824: Lcd_Print_String(LCD_STRINGS[(midiChannelMenu.selector % midiChannelMenu.n
      +                          umber) + midiChannelMenu.address]);
 14652  0085C4  C147  F060         	movff	_midiChannelMenu,___lbmod@divisor
 14653  0085C8  0101               	movlb	1	; () banked
 14654  0085CA  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14655  0085CC  ECC8  F049         	call	___lbmod
 14656  0085D0  0100               	movlb	0	; () banked
 14657  0085D2  6F7A               	movwf	??_Function_E& (0+255),b
 14658  0085D4  517A               	movf	??_Function_E& (0+255),w,b
 14659  0085D6  0101               	movlb	1	; () banked
 14660  0085D8  2548               	addwf	(_midiChannelMenu+1)& (0+255),w,b
 14661  0085DA  0100               	movlb	0	; () banked
 14662  0085DC  6F64               	movwf	___wmul@multiplier& (0+255),b
 14663  0085DE  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 14664  0085E0  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14665  0085E2  0E00               	movlw	0
 14666  0085E4  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14667  0085E6  0E11               	movlw	17
 14668  0085E8  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14669  0085EA  EC71  F04A         	call	___wmul	;wreg free
 14670  0085EE  0E9E               	movlw	low _LCD_STRINGS
 14671  0085F0  0100               	movlb	0	; () banked
 14672  0085F2  2564               	addwf	?___wmul& (0+255),w,b
 14673  0085F4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14674  0085F6  0EF3               	movlw	high _LCD_STRINGS
 14675  0085F8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14676  0085FA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14677  0085FC  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 14678  008600                     l3574:
 14679                           
 14680                           ;menu.c: 825: }
 14681                           ;menu.c: 826: lcd_print_once = 1;
 14682  008600  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14683  008602                     l3572:
 14684  008602  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14685  008604  D7D9               	goto	l3573
 14686                           
 14687                           ;menu.c: 827: }
 14688                           ;menu.c: 829: if(midiChannelMenu.selector == 0) {Function_E_1();}
 14689  008606  0101               	movlb	1	; () banked
 14690  008608  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14691  00860A  B4D8               	btfsc	status,2,c
 14692                           
 14693                           ; BSR set to: 1
 14694  00860C  EC76  F047         	call	_Function_E_1	;wreg free
 14695                           
 14696                           ;menu.c: 830: if(midiChannelMenu.selector == 1) {Function_E_2();}
 14697  008610  0101               	movlb	1	; () banked
 14698  008612  0549               	decf	(_midiChannelMenu+2)& (0+255),w,b
 14699  008614  A4D8               	btfss	status,2,c
 14700  008616  0012               	return	
 14701                           
 14702                           ; BSR set to: 1
 14703  008618  EC4F  F047         	call	_Function_E_2	;wreg free
 14704  00861C  0012               	return	
 14705  00861E                     __end_of_Function_E:
 14706                           	opt stack 0
 14707                           tblptru	equ	0xFF8
 14708                           tblptrh	equ	0xFF7
 14709                           tblptrl	equ	0xFF6
 14710                           tablat	equ	0xFF5
 14711                           prodh	equ	0xFF4
 14712                           prodl	equ	0xFF3
 14713                           intcon	equ	0xFF2
 14714                           intcon2	equ	0xFF1
 14715                           postinc0	equ	0xFEE
 14716                           wreg	equ	0xFE8
 14717                           postdec1	equ	0xFE5
 14718                           fsr1l	equ	0xFE1
 14719                           indf2	equ	0xFDF
 14720                           postinc2	equ	0xFDE
 14721                           fsr2h	equ	0xFDA
 14722                           fsr2l	equ	0xFD9
 14723                           status	equ	0xFD8
 14724                           
 14725 ;; *************** function _Function_E_2 *****************
 14726 ;; Defined at:
 14727 ;;		line 796 in file "menu.c"
 14728 ;; Parameters:    Size  Location     Type
 14729 ;;		None
 14730 ;; Auto vars:     Size  Location     Type
 14731 ;;		None
 14732 ;; Return value:  Size  Location     Type
 14733 ;;                  1    wreg      void 
 14734 ;; Registers used:
 14735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14736 ;; Tracked objects:
 14737 ;;		On entry : 0/0
 14738 ;;		On exit  : 0/0
 14739 ;;		Unchanged: 0/0
 14740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14745 ;;Total ram usage:        0 bytes
 14746 ;; Hardware stack levels used:    1
 14747 ;; Hardware stack levels required when called:    8
 14748 ;; This function calls:
 14749 ;;		_Lcd_Print_String
 14750 ;;		_Lcd_Set_Cursor
 14751 ;;		_int2string
 14752 ;;		_processEncoderBuxton
 14753 ;; This function is called by:
 14754 ;;		_Function_E
 14755 ;; This function uses a non-reentrant model
 14756 ;;
 14757                           
 14758                           	psect	text39
 14759  008E9E                     __ptext39:
 14760                           	opt stack 0
 14761  008E9E                     _Function_E_2:
 14762                           	opt stack 20
 14763                           
 14764                           ;menu.c: 798: which_screen = DRUM_CH_MENU;
 14765                           
 14766                           ;incstack = 0
 14767  008E9E  0E15               	movlw	21
 14768  008EA0  0100               	movlb	0	; () banked
 14769  008EA2  6FF9               	movwf	_which_screen& (0+255),b
 14770                           
 14771                           ; BSR set to: 0
 14772                           ;menu.c: 799: lcd_print_once = 0;
 14773  008EA4  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14774                           
 14775                           ; BSR set to: 0
 14776                           ;menu.c: 800: encoder_click = 0;
 14777  008EA6  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14778                           
 14779                           ; BSR set to: 0
 14780                           ;menu.c: 801: drumChannelMenu.selector = drumchannel;
 14781  008EA8  C0FE  F140         	movff	_drumchannel,_drumChannelMenu+2
 14782                           
 14783                           ;menu.c: 803: while(encoder_click == 0) {
 14784  008EAC  D01A               	goto	l3566
 14785  008EAE                     
 14786                           ;menu.c: 804: processEncoderBuxton();
 14787                           
 14788                           ; BSR set to: 0
 14789  008EAE  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14790                           
 14791                           ;menu.c: 805: lcd_print_once = 1;
 14792  008EB2  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14793                           
 14794                           ;menu.c: 806: int2string((drumChannelMenu.selector) + 1);
 14795  008EB4  0E01               	movlw	1
 14796  008EB6  0101               	movlb	1	; () banked
 14797  008EB8  2540               	addwf	(_drumChannelMenu+2)& (0+255),w,b
 14798  008EBA  0100               	movlb	0	; () banked
 14799  008EBC  6F74               	movwf	int2string@number& (0+255),b
 14800  008EBE  6B75               	clrf	(int2string@number+1)& (0+255),b
 14801  008EC0  0E00               	movlw	0
 14802  008EC2  2375               	addwfc	(int2string@number+1)& (0+255),f,b
 14803  008EC4  EC52  F035         	call	_int2string	;wreg free
 14804                           
 14805                           ;menu.c: 807: Lcd_Set_Cursor(2,13);
 14806  008EC8  0E0D               	movlw	13
 14807  008ECA  0100               	movlb	0	; () banked
 14808  008ECC  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14809  008ECE  0E02               	movlw	2
 14810  008ED0  ECF7  F045         	call	_Lcd_Set_Cursor
 14811                           
 14812                           ;menu.c: 808: Lcd_Print_String(string2display);
 14813  008ED4  0E82               	movlw	low _string2display
 14814  008ED6  0100               	movlb	0	; () banked
 14815  008ED8  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14816  008EDA  0E01               	movlw	high _string2display
 14817  008EDC  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14818  008EDE  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 14819  008EE2                     l3566:
 14820  008EE2  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14821  008EE4  D7E4               	goto	l3567
 14822                           
 14823                           ;menu.c: 809: }
 14824                           ;menu.c: 811: drumchannel = drumChannelMenu.selector;
 14825  008EE6  C140  F0FE         	movff	_drumChannelMenu+2,_drumchannel
 14826  008EEA  0012               	return		;funcret
 14827  008EEC                     __end_of_Function_E_2:
 14828                           	opt stack 0
 14829                           tblptru	equ	0xFF8
 14830                           tblptrh	equ	0xFF7
 14831                           tblptrl	equ	0xFF6
 14832                           tablat	equ	0xFF5
 14833                           prodh	equ	0xFF4
 14834                           prodl	equ	0xFF3
 14835                           intcon	equ	0xFF2
 14836                           intcon2	equ	0xFF1
 14837                           postinc0	equ	0xFEE
 14838                           wreg	equ	0xFE8
 14839                           postdec1	equ	0xFE5
 14840                           fsr1l	equ	0xFE1
 14841                           indf2	equ	0xFDF
 14842                           postinc2	equ	0xFDE
 14843                           fsr2h	equ	0xFDA
 14844                           fsr2l	equ	0xFD9
 14845                           status	equ	0xFD8
 14846                           
 14847 ;; *************** function _Function_E_1 *****************
 14848 ;; Defined at:
 14849 ;;		line 775 in file "menu.c"
 14850 ;; Parameters:    Size  Location     Type
 14851 ;;		None
 14852 ;; Auto vars:     Size  Location     Type
 14853 ;;		None
 14854 ;; Return value:  Size  Location     Type
 14855 ;;                  1    wreg      void 
 14856 ;; Registers used:
 14857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14858 ;; Tracked objects:
 14859 ;;		On entry : 0/0
 14860 ;;		On exit  : 0/0
 14861 ;;		Unchanged: 0/0
 14862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;Total ram usage:        0 bytes
 14868 ;; Hardware stack levels used:    1
 14869 ;; Hardware stack levels required when called:    8
 14870 ;; This function calls:
 14871 ;;		_Lcd_Print_String
 14872 ;;		_Lcd_Set_Cursor
 14873 ;;		_int2string
 14874 ;;		_processEncoderBuxton
 14875 ;; This function is called by:
 14876 ;;		_Function_E
 14877 ;; This function uses a non-reentrant model
 14878 ;;
 14879                           
 14880                           	psect	text40
 14881  008EEC                     __ptext40:
 14882                           	opt stack 0
 14883  008EEC                     _Function_E_1:
 14884                           	opt stack 20
 14885                           
 14886                           ;menu.c: 777: which_screen = MAIN_CH_MENU;
 14887                           
 14888                           ;incstack = 0
 14889  008EEC  0E14               	movlw	20
 14890  008EEE  0100               	movlb	0	; () banked
 14891  008EF0  6FF9               	movwf	_which_screen& (0+255),b
 14892                           
 14893                           ; BSR set to: 0
 14894                           ;menu.c: 778: lcd_print_once = 0;
 14895  008EF2  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14896                           
 14897                           ; BSR set to: 0
 14898                           ;menu.c: 779: encoder_click = 0;
 14899  008EF4  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14900                           
 14901                           ; BSR set to: 0
 14902                           ;menu.c: 780: mainChannelMenu.selector = channel;
 14903  008EF6  C0F6  F143         	movff	_channel,_mainChannelMenu+2
 14904                           
 14905                           ;menu.c: 782: while(encoder_click == 0) {
 14906  008EFA  D01A               	goto	l3560
 14907  008EFC                     
 14908                           ;menu.c: 783: processEncoderBuxton();
 14909                           
 14910                           ; BSR set to: 0
 14911  008EFC  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14912                           
 14913                           ;menu.c: 784: lcd_print_once = 1;
 14914  008F00  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14915                           
 14916                           ;menu.c: 786: int2string((mainChannelMenu.selector) + 1);
 14917  008F02  0E01               	movlw	1
 14918  008F04  0101               	movlb	1	; () banked
 14919  008F06  2543               	addwf	(_mainChannelMenu+2)& (0+255),w,b
 14920  008F08  0100               	movlb	0	; () banked
 14921  008F0A  6F74               	movwf	int2string@number& (0+255),b
 14922  008F0C  6B75               	clrf	(int2string@number+1)& (0+255),b
 14923  008F0E  0E00               	movlw	0
 14924  008F10  2375               	addwfc	(int2string@number+1)& (0+255),f,b
 14925  008F12  EC52  F035         	call	_int2string	;wreg free
 14926                           
 14927                           ;menu.c: 788: Lcd_Set_Cursor(2,13);
 14928  008F16  0E0D               	movlw	13
 14929  008F18  0100               	movlb	0	; () banked
 14930  008F1A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14931  008F1C  0E02               	movlw	2
 14932  008F1E  ECF7  F045         	call	_Lcd_Set_Cursor
 14933                           
 14934                           ;menu.c: 789: Lcd_Print_String(string2display);
 14935  008F22  0E82               	movlw	low _string2display
 14936  008F24  0100               	movlb	0	; () banked
 14937  008F26  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14938  008F28  0E01               	movlw	high _string2display
 14939  008F2A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14940  008F2C  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 14941  008F30                     l3560:
 14942  008F30  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14943  008F32  D7E4               	goto	l3561
 14944                           
 14945                           ;menu.c: 790: }
 14946                           ;menu.c: 792: channel = mainChannelMenu.selector;
 14947  008F34  C143  F0F6         	movff	_mainChannelMenu+2,_channel
 14948  008F38  0012               	return		;funcret
 14949  008F3A                     __end_of_Function_E_1:
 14950                           	opt stack 0
 14951                           tblptru	equ	0xFF8
 14952                           tblptrh	equ	0xFF7
 14953                           tblptrl	equ	0xFF6
 14954                           tablat	equ	0xFF5
 14955                           prodh	equ	0xFF4
 14956                           prodl	equ	0xFF3
 14957                           intcon	equ	0xFF2
 14958                           intcon2	equ	0xFF1
 14959                           postinc0	equ	0xFEE
 14960                           wreg	equ	0xFE8
 14961                           postdec1	equ	0xFE5
 14962                           fsr1l	equ	0xFE1
 14963                           indf2	equ	0xFDF
 14964                           postinc2	equ	0xFDE
 14965                           fsr2h	equ	0xFDA
 14966                           fsr2l	equ	0xFD9
 14967                           status	equ	0xFD8
 14968                           
 14969 ;; *************** function _Function_D *****************
 14970 ;; Defined at:
 14971 ;;		line 752 in file "menu.c"
 14972 ;; Parameters:    Size  Location     Type
 14973 ;;		None
 14974 ;; Auto vars:     Size  Location     Type
 14975 ;;		None
 14976 ;; Return value:  Size  Location     Type
 14977 ;;                  1    wreg      void 
 14978 ;; Registers used:
 14979 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14980 ;; Tracked objects:
 14981 ;;		On entry : 0/0
 14982 ;;		On exit  : 0/0
 14983 ;;		Unchanged: 0/0
 14984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;Total ram usage:        1 bytes
 14990 ;; Hardware stack levels used:    1
 14991 ;; Hardware stack levels required when called:   10
 14992 ;; This function calls:
 14993 ;;		_Function_D_1
 14994 ;;		_Function_D_2
 14995 ;;		_Function_D_3
 14996 ;;		_Function_D_4
 14997 ;;		_Function_D_5
 14998 ;;		_Lcd_Print_String
 14999 ;;		___lbmod
 15000 ;;		___wmul
 15001 ;;		_clear_row2
 15002 ;;		_processEncoderBuxton
 15003 ;; This function is called by:
 15004 ;;		_menu_lcd
 15005 ;; This function uses a non-reentrant model
 15006 ;;
 15007                           
 15008                           	psect	text41
 15009  007A74                     __ptext41:
 15010                           	opt stack 0
 15011  007A74                     _Function_D:
 15012                           	opt stack 19
 15013                           
 15014                           ;menu.c: 754: which_screen = POTENTIOMETER_MENU;
 15015                           
 15016                           ;incstack = 0
 15017  007A74  0E06               	movlw	6
 15018  007A76  0100               	movlb	0	; () banked
 15019  007A78  6FF9               	movwf	_which_screen& (0+255),b
 15020                           
 15021                           ; BSR set to: 0
 15022                           ;menu.c: 755: lcd_print_once = 0;
 15023  007A7A  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15024                           
 15025                           ;menu.c: 757: while(encoder_click == 0) {
 15026  007A7C  D022               	goto	l3548
 15027  007A7E                     
 15028                           ;menu.c: 758: processEncoderBuxton();
 15029                           
 15030                           ; BSR set to: 0
 15031  007A7E  EC09  F000         	call	_processEncoderBuxton	;wreg free
 15032                           
 15033                           ;menu.c: 759: if (lcd_print_once == 0) {
 15034  007A82  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15035  007A84  D01D               	goto	l3550
 15036                           
 15037                           ;menu.c: 760: clear_row2();
 15038  007A86  EC49  F04A         	call	_clear_row2	;wreg free
 15039                           
 15040                           ;menu.c: 761: Lcd_Print_String(LCD_STRINGS[(potsMenu.selector % potsMenu.number) + potsM
      +                          enu.address]);
 15041  007A8A  C03E  F060         	movff	_potsMenu,___lbmod@divisor
 15042  007A8E  5040               	movf	_potsMenu+2,w,c
 15043  007A90  ECC8  F049         	call	___lbmod
 15044  007A94  0100               	movlb	0	; () banked
 15045  007A96  6FA0               	movwf	??_Function_D& (0+255),b
 15046  007A98  51A0               	movf	??_Function_D& (0+255),w,b
 15047  007A9A  243F               	addwf	_potsMenu+1,w,c
 15048  007A9C  6F64               	movwf	___wmul@multiplier& (0+255),b
 15049  007A9E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 15050  007AA0  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15051  007AA2  0E00               	movlw	0
 15052  007AA4  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15053  007AA6  0E11               	movlw	17
 15054  007AA8  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15055  007AAA  EC71  F04A         	call	___wmul	;wreg free
 15056  007AAE  0E9E               	movlw	low _LCD_STRINGS
 15057  007AB0  0100               	movlb	0	; () banked
 15058  007AB2  2564               	addwf	?___wmul& (0+255),w,b
 15059  007AB4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15060  007AB6  0EF3               	movlw	high _LCD_STRINGS
 15061  007AB8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15062  007ABA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15063  007ABC  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 15064  007AC0                     l3550:
 15065                           
 15066                           ;menu.c: 762: }
 15067                           ;menu.c: 763: lcd_print_once = 1;
 15068  007AC0  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15069  007AC2                     l3548:
 15070  007AC2  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15071  007AC4  D7DC               	goto	l3549
 15072                           
 15073                           ;menu.c: 764: }
 15074                           ;menu.c: 766: if(potsMenu.selector == 0) {Function_D_1();}
 15075  007AC6  5040               	movf	_potsMenu+2,w,c
 15076  007AC8  B4D8               	btfsc	status,2,c
 15077  007ACA  EC6F  F03C         	call	_Function_D_1	;wreg free
 15078                           
 15079                           ;menu.c: 767: if(potsMenu.selector == 1) {Function_D_2();}
 15080  007ACE  0440               	decf	_potsMenu+2,w,c
 15081  007AD0  B4D8               	btfsc	status,2,c
 15082  007AD2  ECB1  F044         	call	_Function_D_2	;wreg free
 15083                           
 15084                           ;menu.c: 768: if(potsMenu.selector == 2) {Function_D_3();}
 15085  007AD6  0E02               	movlw	2
 15086  007AD8  1840               	xorwf	_potsMenu+2,w,c
 15087  007ADA  B4D8               	btfsc	status,2,c
 15088  007ADC  EC77  F041         	call	_Function_D_3	;wreg free
 15089                           
 15090                           ;menu.c: 769: if(potsMenu.selector == 3) {Function_D_4();}
 15091  007AE0  0E03               	movlw	3
 15092  007AE2  1840               	xorwf	_potsMenu+2,w,c
 15093  007AE4  B4D8               	btfsc	status,2,c
 15094  007AE6  EC84  F03F         	call	_Function_D_4	;wreg free
 15095                           
 15096                           ;menu.c: 770: if(potsMenu.selector == 4) {Function_D_5();}
 15097  007AEA  0E04               	movlw	4
 15098  007AEC  1840               	xorwf	_potsMenu+2,w,c
 15099  007AEE  A4D8               	btfss	status,2,c
 15100  007AF0  0012               	return	
 15101  007AF2  EC45  F03F         	call	_Function_D_5	;wreg free
 15102  007AF6  0012               	return	
 15103  007AF8                     __end_of_Function_D:
 15104                           	opt stack 0
 15105                           tblptru	equ	0xFF8
 15106                           tblptrh	equ	0xFF7
 15107                           tblptrl	equ	0xFF6
 15108                           tablat	equ	0xFF5
 15109                           prodh	equ	0xFF4
 15110                           prodl	equ	0xFF3
 15111                           intcon	equ	0xFF2
 15112                           intcon2	equ	0xFF1
 15113                           postinc0	equ	0xFEE
 15114                           wreg	equ	0xFE8
 15115                           postdec1	equ	0xFE5
 15116                           fsr1l	equ	0xFE1
 15117                           indf2	equ	0xFDF
 15118                           postinc2	equ	0xFDE
 15119                           fsr2h	equ	0xFDA
 15120                           fsr2l	equ	0xFD9
 15121                           status	equ	0xFD8
 15122                           
 15123 ;; *************** function _Function_D_5 *****************
 15124 ;; Defined at:
 15125 ;;		line 726 in file "menu.c"
 15126 ;; Parameters:    Size  Location     Type
 15127 ;;		None
 15128 ;; Auto vars:     Size  Location     Type
 15129 ;;  array_index     1   29[BANK0 ] unsigned char 
 15130 ;; Return value:  Size  Location     Type
 15131 ;;                  1    wreg      void 
 15132 ;; Registers used:
 15133 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15134 ;; Tracked objects:
 15135 ;;		On entry : 0/0
 15136 ;;		On exit  : 0/0
 15137 ;;		Unchanged: 0/0
 15138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15141 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15142 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15143 ;;Total ram usage:        2 bytes
 15144 ;; Hardware stack levels used:    1
 15145 ;; Hardware stack levels required when called:    9
 15146 ;; This function calls:
 15147 ;;		_Lcd_Print_String
 15148 ;;		___lbmod
 15149 ;;		___wmul
 15150 ;;		_clear_row1
 15151 ;;		_clear_row2
 15152 ;;		_processEncoderBuxton
 15153 ;;		_setControllerNumbers
 15154 ;; This function is called by:
 15155 ;;		_Function_D
 15156 ;; This function uses a non-reentrant model
 15157 ;;
 15158                           
 15159                           	psect	text42
 15160  007E8A                     __ptext42:
 15161                           	opt stack 0
 15162  007E8A                     _Function_D_5:
 15163                           	opt stack 19
 15164                           
 15165                           ;menu.c: 728: which_screen = JOYSTICK_CC_MENU;
 15166                           
 15167                           ;incstack = 0
 15168  007E8A  0E13               	movlw	19
 15169  007E8C  0100               	movlb	0	; () banked
 15170  007E8E  6FF9               	movwf	_which_screen& (0+255),b
 15171                           
 15172                           ; BSR set to: 0
 15173                           ;menu.c: 730: lcd_print_once = 0;
 15174  007E90  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15175                           
 15176                           ; BSR set to: 0
 15177                           ;menu.c: 731: encoder_click = 0;
 15178  007E92  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15179                           
 15180                           ;menu.c: 733: while(encoder_click == 0) {
 15181  007E94  D02E               	goto	l3541
 15182  007E96                     
 15183                           ;menu.c: 734: processEncoderBuxton();
 15184                           
 15185                           ; BSR set to: 0
 15186  007E96  EC09  F000         	call	_processEncoderBuxton	;wreg free
 15187                           
 15188                           ;menu.c: 735: if (lcd_print_once == 0) {
 15189  007E9A  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15190  007E9C  D029               	goto	l3543
 15191                           
 15192                           ;menu.c: 736: clear_row1();
 15193  007E9E  EC5D  F04A         	call	_clear_row1	;wreg free
 15194                           
 15195                           ;menu.c: 737: Lcd_Print_String("Set Joystick CC#");
 15196  007EA2  0E97               	movlw	low STR_33
 15197  007EA4  0100               	movlb	0	; () banked
 15198  007EA6  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15199  007EA8  0EFD               	movlw	high STR_33
 15200  007EAA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15201  007EAC  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 15202                           
 15203                           ;menu.c: 738: clear_row2();
 15204  007EB0  EC49  F04A         	call	_clear_row2	;wreg free
 15205                           
 15206                           ;menu.c: 739: Lcd_Print_String(LCD_STRINGS[(joystickCCMenu.selector % joystickCCMenu.num
      +                          ber) + joystickCCMenu.address]);
 15207  007EB4  C14A  F060         	movff	_joystickCCMenu,___lbmod@divisor
 15208  007EB8  0101               	movlb	1	; () banked
 15209  007EBA  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15210  007EBC  ECC8  F049         	call	___lbmod
 15211  007EC0  0100               	movlb	0	; () banked
 15212  007EC2  6F7C               	movwf	??_Function_D_5& (0+255),b
 15213  007EC4  517C               	movf	??_Function_D_5& (0+255),w,b
 15214  007EC6  0101               	movlb	1	; () banked
 15215  007EC8  254B               	addwf	(_joystickCCMenu+1)& (0+255),w,b
 15216  007ECA  0100               	movlb	0	; () banked
 15217  007ECC  6F64               	movwf	___wmul@multiplier& (0+255),b
 15218  007ECE  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 15219  007ED0  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15220  007ED2  0E00               	movlw	0
 15221  007ED4  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15222  007ED6  0E11               	movlw	17
 15223  007ED8  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15224  007EDA  EC71  F04A         	call	___wmul	;wreg free
 15225  007EDE  0E9E               	movlw	low _LCD_STRINGS
 15226  007EE0  0100               	movlb	0	; () banked
 15227  007EE2  2564               	addwf	?___wmul& (0+255),w,b
 15228  007EE4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15229  007EE6  0EF3               	movlw	high _LCD_STRINGS
 15230  007EE8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15231  007EEA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15232  007EEC  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 15233  007EF0                     l3543:
 15234                           
 15235                           ;menu.c: 740: }
 15236                           ;menu.c: 741: lcd_print_once = 1;
 15237  007EF0  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15238  007EF2                     l3541:
 15239  007EF2  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15240  007EF4  D7D0               	goto	l3542
 15241                           
 15242                           ;menu.c: 742: }
 15243                           ;menu.c: 746: unsigned char array_index = (joystickCCMenu.selector) + 14;
 15244  007EF6  0101               	movlb	1	; () banked
 15245  007EF8  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15246  007EFA  0F0E               	addlw	14
 15247  007EFC  0100               	movlb	0	; () banked
 15248  007EFE  6F7D               	movwf	Function_D_5@array_index& (0+255),b
 15249                           
 15250                           ; BSR set to: 0
 15251                           ;menu.c: 747: setControllerNumbers(array_index);
 15252  007F00  517D               	movf	Function_D_5@array_index& (0+255),w,b
 15253  007F02  ECBE  F010         	call	_setControllerNumbers
 15254  007F06  0012               	return		;funcret
 15255  007F08                     __end_of_Function_D_5:
 15256                           	opt stack 0
 15257                           tblptru	equ	0xFF8
 15258                           tblptrh	equ	0xFF7
 15259                           tblptrl	equ	0xFF6
 15260                           tablat	equ	0xFF5
 15261                           prodh	equ	0xFF4
 15262                           prodl	equ	0xFF3
 15263                           intcon	equ	0xFF2
 15264                           intcon2	equ	0xFF1
 15265                           postinc0	equ	0xFEE
 15266                           wreg	equ	0xFE8
 15267                           postdec1	equ	0xFE5
 15268                           fsr1l	equ	0xFE1
 15269                           indf2	equ	0xFDF
 15270                           postinc2	equ	0xFDE
 15271                           fsr2h	equ	0xFDA
 15272                           fsr2l	equ	0xFD9
 15273                           status	equ	0xFD8
 15274                           
 15275 ;; *************** function _Function_D_4 *****************
 15276 ;; Defined at:
 15277 ;;		line 699 in file "menu.c"
 15278 ;; Parameters:    Size  Location     Type
 15279 ;;		None
 15280 ;; Auto vars:     Size  Location     Type
 15281 ;;  array_index     1   29[BANK0 ] unsigned char 
 15282 ;; Return value:  Size  Location     Type
 15283 ;;                  1    wreg      void 
 15284 ;; Registers used:
 15285 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15286 ;; Tracked objects:
 15287 ;;		On entry : 0/0
 15288 ;;		On exit  : 0/0
 15289 ;;		Unchanged: 0/0
 15290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15294 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15295 ;;Total ram usage:        2 bytes
 15296 ;; Hardware stack levels used:    1
 15297 ;; Hardware stack levels required when called:    9
 15298 ;; This function calls:
 15299 ;;		_Lcd_Print_String
 15300 ;;		___lbmod
 15301 ;;		___wmul
 15302 ;;		_clear_row1
 15303 ;;		_clear_row2
 15304 ;;		_processEncoderBuxton
 15305 ;;		_setControllerNumbers
 15306 ;; This function is called by:
 15307 ;;		_Function_D
 15308 ;; This function uses a non-reentrant model
 15309 ;;
 15310                           
 15311                           	psect	text43
 15312  007F08                     __ptext43:
 15313                           	opt stack 0
 15314  007F08                     _Function_D_4:
 15315                           	opt stack 19
 15316                           
 15317                           ;menu.c: 701: which_screen = SLIDEPOTS_CC_MENU;
 15318                           
 15319                           ;incstack = 0
 15320  007F08  0E12               	movlw	18
 15321  007F0A  0100               	movlb	0	; () banked
 15322  007F0C  6FF9               	movwf	_which_screen& (0+255),b
 15323                           
 15324                           ; BSR set to: 0
 15325                           ;menu.c: 703: lcd_print_once = 0;
 15326  007F0E  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15327                           
 15328                           ; BSR set to: 0
 15329                           ;menu.c: 704: encoder_click = 0;
 15330  007F10  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15331                           
 15332                           ;menu.c: 706: while(encoder_click == 0) {
 15333  007F12  D02E               	goto	l3534
 15334  007F14                     
 15335                           ;menu.c: 707: processEncoderBuxton();
 15336                           
 15337                           ; BSR set to: 0
 15338  007F14  EC09  F000         	call	_processEncoderBuxton	;wreg free
 15339                           
 15340                           ;menu.c: 708: if (lcd_print_once == 0) {
 15341  007F18  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15342  007F1A  D029               	goto	l3536
 15343                           
 15344                           ;menu.c: 709: clear_row1();
 15345  007F1C  EC5D  F04A         	call	_clear_row1	;wreg free
 15346                           
 15347                           ;menu.c: 710: Lcd_Print_String("Slidepots CC#:");
 15348  007F20  0E4D               	movlw	low STR_32
 15349  007F22  0100               	movlb	0	; () banked
 15350  007F24  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15351  007F26  0EFE               	movlw	high STR_32
 15352  007F28  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15353  007F2A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 15354                           
 15355                           ;menu.c: 711: clear_row2();
 15356  007F2E  EC49  F04A         	call	_clear_row2	;wreg free
 15357                           
 15358                           ;menu.c: 712: Lcd_Print_String(LCD_STRINGS[(slidepotsCCMenu.selector % slidepotsCCMenu.n
      +                          umber) + slidepotsCCMenu.address]);
 15359  007F32  C14D  F060         	movff	_slidepotsCCMenu,___lbmod@divisor
 15360  007F36  0101               	movlb	1	; () banked
 15361  007F38  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15362  007F3A  ECC8  F049         	call	___lbmod
 15363  007F3E  0100               	movlb	0	; () banked
 15364  007F40  6F7C               	movwf	??_Function_D_4& (0+255),b
 15365  007F42  517C               	movf	??_Function_D_4& (0+255),w,b
 15366  007F44  0101               	movlb	1	; () banked
 15367  007F46  254E               	addwf	(_slidepotsCCMenu+1)& (0+255),w,b
 15368  007F48  0100               	movlb	0	; () banked
 15369  007F4A  6F64               	movwf	___wmul@multiplier& (0+255),b
 15370  007F4C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 15371  007F4E  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15372  007F50  0E00               	movlw	0
 15373  007F52  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15374  007F54  0E11               	movlw	17
 15375  007F56  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15376  007F58  EC71  F04A         	call	___wmul	;wreg free
 15377  007F5C  0E9E               	movlw	low _LCD_STRINGS
 15378  007F5E  0100               	movlb	0	; () banked
 15379  007F60  2564               	addwf	?___wmul& (0+255),w,b
 15380  007F62  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15381  007F64  0EF3               	movlw	high _LCD_STRINGS
 15382  007F66  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15383  007F68  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15384  007F6A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 15385  007F6E                     l3536:
 15386                           
 15387                           ;menu.c: 713: }
 15388                           ;menu.c: 714: lcd_print_once = 1;
 15389  007F6E  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15390  007F70                     l3534:
 15391  007F70  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15392  007F72  D7D0               	goto	l3535
 15393                           
 15394                           ;menu.c: 715: }
 15395                           ;menu.c: 720: unsigned char array_index = (slidepotsCCMenu.selector) + 7;
 15396  007F74  0101               	movlb	1	; () banked
 15397  007F76  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15398  007F78  0F07               	addlw	7
 15399  007F7A  0100               	movlb	0	; () banked
 15400  007F7C  6F7D               	movwf	Function_D_4@array_index& (0+255),b
 15401                           
 15402                           ; BSR set to: 0
 15403                           ;menu.c: 721: setControllerNumbers(array_index);
 15404  007F7E  517D               	movf	Function_D_4@array_index& (0+255),w,b
 15405  007F80  ECBE  F010         	call	_setControllerNumbers
 15406  007F84  0012               	return		;funcret
 15407  007F86                     __end_of_Function_D_4:
 15408                           	opt stack 0
 15409                           tblptru	equ	0xFF8
 15410                           tblptrh	equ	0xFF7
 15411                           tblptrl	equ	0xFF6
 15412                           tablat	equ	0xFF5
 15413                           prodh	equ	0xFF4
 15414                           prodl	equ	0xFF3
 15415                           intcon	equ	0xFF2
 15416                           intcon2	equ	0xFF1
 15417                           postinc0	equ	0xFEE
 15418                           wreg	equ	0xFE8
 15419                           postdec1	equ	0xFE5
 15420                           fsr1l	equ	0xFE1
 15421                           indf2	equ	0xFDF
 15422                           postinc2	equ	0xFDE
 15423                           fsr2h	equ	0xFDA
 15424                           fsr2l	equ	0xFD9
 15425                           status	equ	0xFD8
 15426                           
 15427 ;; *************** function _Function_D_3 *****************
 15428 ;; Defined at:
 15429 ;;		line 675 in file "menu.c"
 15430 ;; Parameters:    Size  Location     Type
 15431 ;;		None
 15432 ;; Auto vars:     Size  Location     Type
 15433 ;;  array_index     1   29[BANK0 ] unsigned char 
 15434 ;; Return value:  Size  Location     Type
 15435 ;;                  1    wreg      void 
 15436 ;; Registers used:
 15437 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15438 ;; Tracked objects:
 15439 ;;		On entry : 0/0
 15440 ;;		On exit  : 0/0
 15441 ;;		Unchanged: 0/0
 15442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15445 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15446 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15447 ;;Total ram usage:        2 bytes
 15448 ;; Hardware stack levels used:    1
 15449 ;; Hardware stack levels required when called:    9
 15450 ;; This function calls:
 15451 ;;		_Lcd_Print_String
 15452 ;;		___lbmod
 15453 ;;		___wmul
 15454 ;;		_clear_row1
 15455 ;;		_clear_row2
 15456 ;;		_processEncoderBuxton
 15457 ;;		_setControllerNumbers
 15458 ;; This function is called by:
 15459 ;;		_Function_D
 15460 ;; This function uses a non-reentrant model
 15461 ;;
 15462                           
 15463                           	psect	text44
 15464  0082EE                     __ptext44:
 15465                           	opt stack 0
 15466  0082EE                     _Function_D_3:
 15467                           	opt stack 19
 15468                           
 15469                           ;menu.c: 677: which_screen = POTS_CC_MENU;
 15470                           
 15471                           ;incstack = 0
 15472  0082EE  0E11               	movlw	17
 15473  0082F0  0100               	movlb	0	; () banked
 15474  0082F2  6FF9               	movwf	_which_screen& (0+255),b
 15475                           
 15476                           ; BSR set to: 0
 15477                           ;menu.c: 679: lcd_print_once = 0;
 15478  0082F4  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15479                           
 15480                           ; BSR set to: 0
 15481                           ;menu.c: 680: encoder_click = 0;
 15482  0082F6  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15483                           
 15484                           ;menu.c: 682: while(encoder_click == 0) {
 15485  0082F8  D02E               	goto	l3527
 15486  0082FA                     
 15487                           ;menu.c: 683: processEncoderBuxton();
 15488                           
 15489                           ; BSR set to: 0
 15490  0082FA  EC09  F000         	call	_processEncoderBuxton	;wreg free
 15491                           
 15492                           ;menu.c: 684: if (lcd_print_once == 0) {
 15493  0082FE  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15494  008300  D029               	goto	l3529
 15495                           
 15496                           ;menu.c: 685: clear_row1();
 15497  008302  EC5D  F04A         	call	_clear_row1	;wreg free
 15498                           
 15499                           ;menu.c: 686: Lcd_Print_String("Set Pots CC#:");
 15500  008306  0EC4               	movlw	low STR_31
 15501  008308  0100               	movlb	0	; () banked
 15502  00830A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15503  00830C  0EFE               	movlw	high STR_31
 15504  00830E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15505  008310  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 15506                           
 15507                           ;menu.c: 687: clear_row2();
 15508  008314  EC49  F04A         	call	_clear_row2	;wreg free
 15509                           
 15510                           ;menu.c: 688: Lcd_Print_String(LCD_STRINGS[(potsCCMenu.selector % potsCCMenu.number) + p
      +                          otsCCMenu.address]);
 15511  008318  C150  F060         	movff	_potsCCMenu,___lbmod@divisor
 15512  00831C  0101               	movlb	1	; () banked
 15513  00831E  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 15514  008320  ECC8  F049         	call	___lbmod
 15515  008324  0100               	movlb	0	; () banked
 15516  008326  6F7C               	movwf	??_Function_D_3& (0+255),b
 15517  008328  517C               	movf	??_Function_D_3& (0+255),w,b
 15518  00832A  0101               	movlb	1	; () banked
 15519  00832C  2551               	addwf	(_potsCCMenu+1)& (0+255),w,b
 15520  00832E  0100               	movlb	0	; () banked
 15521  008330  6F64               	movwf	___wmul@multiplier& (0+255),b
 15522  008332  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 15523  008334  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15524  008336  0E00               	movlw	0
 15525  008338  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15526  00833A  0E11               	movlw	17
 15527  00833C  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15528  00833E  EC71  F04A         	call	___wmul	;wreg free
 15529  008342  0E9E               	movlw	low _LCD_STRINGS
 15530  008344  0100               	movlb	0	; () banked
 15531  008346  2564               	addwf	?___wmul& (0+255),w,b
 15532  008348  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15533  00834A  0EF3               	movlw	high _LCD_STRINGS
 15534  00834C  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15535  00834E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15536  008350  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 15537  008354                     l3529:
 15538                           
 15539                           ;menu.c: 689: }
 15540                           ;menu.c: 690: lcd_print_once = 1;
 15541  008354  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15542  008356                     l3527:
 15543  008356  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15544  008358  D7D0               	goto	l3528
 15545                           
 15546                           ;menu.c: 691: }
 15547                           ;menu.c: 693: unsigned char array_index = potsCCMenu.selector;
 15548  00835A  C152  F07D         	movff	_potsCCMenu+2,Function_D_3@array_index
 15549                           
 15550                           ;menu.c: 694: setControllerNumbers(array_index);
 15551  00835E  0100               	movlb	0	; () banked
 15552  008360  517D               	movf	Function_D_3@array_index& (0+255),w,b
 15553  008362  ECBE  F010         	call	_setControllerNumbers
 15554  008366  0012               	return		;funcret
 15555  008368                     __end_of_Function_D_3:
 15556                           	opt stack 0
 15557                           tblptru	equ	0xFF8
 15558                           tblptrh	equ	0xFF7
 15559                           tblptrl	equ	0xFF6
 15560                           tablat	equ	0xFF5
 15561                           prodh	equ	0xFF4
 15562                           prodl	equ	0xFF3
 15563                           intcon	equ	0xFF2
 15564                           intcon2	equ	0xFF1
 15565                           postinc0	equ	0xFEE
 15566                           wreg	equ	0xFE8
 15567                           postdec1	equ	0xFE5
 15568                           fsr1l	equ	0xFE1
 15569                           indf2	equ	0xFDF
 15570                           postinc2	equ	0xFDE
 15571                           fsr2h	equ	0xFDA
 15572                           fsr2l	equ	0xFD9
 15573                           status	equ	0xFD8
 15574                           
 15575 ;; *************** function _setControllerNumbers *****************
 15576 ;; Defined at:
 15577 ;;		line 125 in file "menu.c"
 15578 ;; Parameters:    Size  Location     Type
 15579 ;;  array_index     1    wreg     unsigned char 
 15580 ;; Auto vars:     Size  Location     Type
 15581 ;;  array_index     1   27[BANK0 ] unsigned char 
 15582 ;; Return value:  Size  Location     Type
 15583 ;;                  1    wreg      void 
 15584 ;; Registers used:
 15585 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15586 ;; Tracked objects:
 15587 ;;		On entry : 0/0
 15588 ;;		On exit  : 0/0
 15589 ;;		Unchanged: 0/0
 15590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15593 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15594 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15595 ;;Total ram usage:        2 bytes
 15596 ;; Hardware stack levels used:    1
 15597 ;; Hardware stack levels required when called:    8
 15598 ;; This function calls:
 15599 ;;		_Lcd_Print_String
 15600 ;;		_Lcd_Set_Cursor
 15601 ;;		_int2string
 15602 ;; This function is called by:
 15603 ;;		_Function_D_3
 15604 ;;		_Function_D_4
 15605 ;;		_Function_D_5
 15606 ;;		_initializeControllerNumbers
 15607 ;; This function uses a non-reentrant model
 15608 ;;
 15609                           
 15610                           	psect	text45
 15611  00217C                     __ptext45:
 15612                           	opt stack 0
 15613  00217C                     _setControllerNumbers:
 15614                           	opt stack 19
 15615                           
 15616                           ;incstack = 0
 15617                           ;setControllerNumbers@array_index stored from wreg
 15618  00217C  0100               	movlb	0	; () banked
 15619  00217E  6F7B               	movwf	setControllerNumbers@array_index& (0+255),b
 15620                           
 15621                           ;menu.c: 127: which_screen = BLANK;
 15622  002180  0E00               	movlw	0
 15623  002182  0100               	movlb	0	; () banked
 15624  002184  6FF9               	movwf	_which_screen& (0+255),b
 15625                           
 15626                           ; BSR set to: 0
 15627                           ;menu.c: 128: lcd_print_once = 0;
 15628  002186  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15629                           
 15630                           ; BSR set to: 0
 15631                           ;menu.c: 129: encoder_click = 0;
 15632  002188  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15633                           
 15634                           ;menu.c: 131: while(encoder_click == 0) {
 15635  00218A  D271               	goto	l3382
 15636  00218C                     l3355:
 15637                           
 15638                           ;menu.c: 136: if(lcd_print_once == 0) {
 15639  00218C  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15640  00218E  D1CF               	goto	l3376
 15641                           
 15642                           ;menu.c: 138: if (encoder_direction == 0x10) {
 15643  002190  0E10               	movlw	16
 15644  002192  0100               	movlb	0	; () banked
 15645  002194  19EB               	xorwf	_encoder_direction& (0+255),w,b
 15646  002196  A4D8               	btfss	status,2,c
 15647  002198  D075               	goto	l3357
 15648                           
 15649                           ; BSR set to: 0
 15650                           ;menu.c: 140: if(inputPotsArray[array_index].controller_resolution == 0){
 15651  00219A  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15652  00219C  0D03               	mullw	3
 15653  00219E  0EAC               	movlw	low _inputPotsArray
 15654  0021A0  24F3               	addwf	prodl,w,c
 15655  0021A2  6ED9               	movwf	fsr2l,c
 15656  0021A4  0E02               	movlw	high _inputPotsArray
 15657  0021A6  20F4               	addwfc	prodh,w,c
 15658  0021A8  6EDA               	movwf	fsr2h,c
 15659  0021AA  0102               	movlb	2	; () banked
 15660  0021AC  B0DF               	btfsc	indf2,0,c
 15661  0021AE  D03C               	goto	l3360
 15662                           
 15663                           ; BSR set to: 2
 15664                           ;menu.c: 141: if(inputPotsArray[array_index].controller_number < 119) {
 15665  0021B0  0100               	movlb	0	; () banked
 15666  0021B2  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15667  0021B4  0D03               	mullw	3
 15668  0021B6  0E01               	movlw	1
 15669  0021B8  26F3               	addwf	prodl,f,c
 15670  0021BA  0E00               	movlw	0
 15671  0021BC  22F4               	addwfc	prodh,f,c
 15672  0021BE  0EAC               	movlw	low _inputPotsArray
 15673  0021C0  24F3               	addwf	prodl,w,c
 15674  0021C2  6ED9               	movwf	fsr2l,c
 15675  0021C4  0E02               	movlw	high _inputPotsArray
 15676  0021C6  20F4               	addwfc	prodh,w,c
 15677  0021C8  6EDA               	movwf	fsr2h,c
 15678  0021CA  50DF               	movf	indf2,w,c
 15679  0021CC  0A80               	xorlw	128
 15680  0021CE  0F09               	addlw	-247
 15681  0021D0  B0D8               	btfsc	status,0,c
 15682  0021D2  D02A               	goto	l3360
 15683                           
 15684                           ; BSR set to: 0
 15685                           ;menu.c: 142: inputPotsArray[array_index].controller_number++;
 15686  0021D4  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15687  0021D6  0D03               	mullw	3
 15688  0021D8  0E01               	movlw	1
 15689  0021DA  26F3               	addwf	prodl,f,c
 15690  0021DC  0E00               	movlw	0
 15691  0021DE  22F4               	addwfc	prodh,f,c
 15692  0021E0  0EAC               	movlw	low _inputPotsArray
 15693  0021E2  24F3               	addwf	prodl,w,c
 15694  0021E4  6ED9               	movwf	fsr2l,c
 15695  0021E6  0E02               	movlw	high _inputPotsArray
 15696  0021E8  20F4               	addwfc	prodh,w,c
 15697  0021EA  6EDA               	movwf	fsr2h,c
 15698  0021EC  2ADF               	incf	indf2,f,c
 15699                           
 15700                           ;menu.c: 143: if(inputPotsArray[array_index].controller_number == 0){inputPotsArray[arra
      +                          y_index].controller_number = 64;}
 15701  0021EE  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15702  0021F0  0D03               	mullw	3
 15703  0021F2  0E01               	movlw	1
 15704  0021F4  26F3               	addwf	prodl,f,c
 15705  0021F6  0E00               	movlw	0
 15706  0021F8  22F4               	addwfc	prodh,f,c
 15707  0021FA  0EAC               	movlw	low _inputPotsArray
 15708  0021FC  24F3               	addwf	prodl,w,c
 15709  0021FE  6ED9               	movwf	fsr2l,c
 15710  002200  0E02               	movlw	high _inputPotsArray
 15711  002202  20F4               	addwfc	prodh,w,c
 15712  002204  6EDA               	movwf	fsr2h,c
 15713  002206  50DF               	movf	indf2,w,c
 15714  002208  A4D8               	btfss	status,2,c
 15715  00220A  D00E               	goto	l3360
 15716                           
 15717                           ; BSR set to: 0
 15718  00220C  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15719  00220E  0D03               	mullw	3
 15720  002210  0E01               	movlw	1
 15721  002212  26F3               	addwf	prodl,f,c
 15722  002214  0E00               	movlw	0
 15723  002216  22F4               	addwfc	prodh,f,c
 15724  002218  0EAC               	movlw	low _inputPotsArray
 15725  00221A  24F3               	addwf	prodl,w,c
 15726  00221C  6ED9               	movwf	fsr2l,c
 15727  00221E  0E02               	movlw	high _inputPotsArray
 15728  002220  20F4               	addwfc	prodh,w,c
 15729  002222  6EDA               	movwf	fsr2h,c
 15730  002224  0E40               	movlw	64
 15731  002226  6EDF               	movwf	indf2,c
 15732  002228                     l3360:
 15733                           
 15734                           ;menu.c: 144: }
 15735                           ;menu.c: 145: }
 15736                           ;menu.c: 147: if(inputPotsArray[array_index].controller_resolution == 1){
 15737                           
 15738                           ; BSR set to: 0
 15739                           
 15740                           ; BSR set to: 0
 15741  002228  0100               	movlb	0	; () banked
 15742  00222A  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15743  00222C  0D03               	mullw	3
 15744  00222E  0EAC               	movlw	low _inputPotsArray
 15745  002230  24F3               	addwf	prodl,w,c
 15746  002232  6ED9               	movwf	fsr2l,c
 15747  002234  0E02               	movlw	high _inputPotsArray
 15748  002236  20F4               	addwfc	prodh,w,c
 15749  002238  6EDA               	movwf	fsr2h,c
 15750  00223A  0102               	movlb	2	; () banked
 15751  00223C  A0DF               	btfss	indf2,0,c
 15752  00223E  D01F               	goto	l3362
 15753                           
 15754                           ; BSR set to: 2
 15755                           ;menu.c: 148: if(inputPotsArray[array_index].controller_number_two_byte < 31) {
 15756  002240  0100               	movlb	0	; () banked
 15757  002242  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15758  002244  0D03               	mullw	3
 15759  002246  0E02               	movlw	2
 15760  002248  26F3               	addwf	prodl,f,c
 15761  00224A  0E00               	movlw	0
 15762  00224C  22F4               	addwfc	prodh,f,c
 15763  00224E  0EAC               	movlw	low _inputPotsArray
 15764  002250  24F3               	addwf	prodl,w,c
 15765  002252  6ED9               	movwf	fsr2l,c
 15766  002254  0E02               	movlw	high _inputPotsArray
 15767  002256  20F4               	addwfc	prodh,w,c
 15768  002258  6EDA               	movwf	fsr2h,c
 15769  00225A  50DF               	movf	indf2,w,c
 15770  00225C  0A80               	xorlw	128
 15771  00225E  0F61               	addlw	-159
 15772  002260  B0D8               	btfsc	status,0,c
 15773  002262  D00D               	goto	l3362
 15774                           
 15775                           ; BSR set to: 0
 15776                           ;menu.c: 149: inputPotsArray[array_index].controller_number_two_byte++;
 15777  002264  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15778  002266  0D03               	mullw	3
 15779  002268  0E02               	movlw	2
 15780  00226A  26F3               	addwf	prodl,f,c
 15781  00226C  0E00               	movlw	0
 15782  00226E  22F4               	addwfc	prodh,f,c
 15783  002270  0EAC               	movlw	low _inputPotsArray
 15784  002272  24F3               	addwf	prodl,w,c
 15785  002274  6ED9               	movwf	fsr2l,c
 15786  002276  0E02               	movlw	high _inputPotsArray
 15787  002278  20F4               	addwfc	prodh,w,c
 15788  00227A  6EDA               	movwf	fsr2h,c
 15789  00227C  2ADF               	incf	indf2,f,c
 15790  00227E                     l3362:
 15791                           
 15792                           ;menu.c: 150: }
 15793                           ;menu.c: 151: }
 15794                           ;menu.c: 153: encoder_direction = 0x00;
 15795                           
 15796                           ; BSR set to: 0
 15797                           
 15798                           ; BSR set to: 0
 15799  00227E  0E00               	movlw	0
 15800  002280  0100               	movlb	0	; () banked
 15801  002282  6FEB               	movwf	_encoder_direction& (0+255),b
 15802  002284                     l3357:
 15803                           
 15804                           ; BSR set to: 0
 15805                           ;menu.c: 154: }
 15806                           ;menu.c: 158: if (encoder_direction == 0x20) {
 15807                           
 15808                           ; BSR set to: 0
 15809  002284  0E20               	movlw	32
 15810  002286  19EB               	xorwf	_encoder_direction& (0+255),w,b
 15811  002288  A4D8               	btfss	status,2,c
 15812  00228A  D0B2               	goto	l3363
 15813                           
 15814                           ; BSR set to: 0
 15815                           ;menu.c: 160: if(inputPotsArray[array_index].controller_resolution == 0){
 15816  00228C  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15817  00228E  0D03               	mullw	3
 15818  002290  0EAC               	movlw	low _inputPotsArray
 15819  002292  24F3               	addwf	prodl,w,c
 15820  002294  6ED9               	movwf	fsr2l,c
 15821  002296  0E02               	movlw	high _inputPotsArray
 15822  002298  20F4               	addwfc	prodh,w,c
 15823  00229A  6EDA               	movwf	fsr2h,c
 15824  00229C  0102               	movlb	2	; () banked
 15825  00229E  B0DF               	btfsc	indf2,0,c
 15826  0022A0  D079               	goto	l3368
 15827                           
 15828                           ; BSR set to: 2
 15829                           ;menu.c: 162: if(inputPotsArray[array_index].controller_number > -3) {
 15830  0022A2  0100               	movlb	0	; () banked
 15831  0022A4  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15832  0022A6  0D03               	mullw	3
 15833  0022A8  0E01               	movlw	1
 15834  0022AA  26F3               	addwf	prodl,f,c
 15835  0022AC  0E00               	movlw	0
 15836  0022AE  22F4               	addwfc	prodh,f,c
 15837  0022B0  0EAC               	movlw	low _inputPotsArray
 15838  0022B2  24F3               	addwf	prodl,w,c
 15839  0022B4  6ED9               	movwf	fsr2l,c
 15840  0022B6  0E02               	movlw	high _inputPotsArray
 15841  0022B8  20F4               	addwfc	prodh,w,c
 15842  0022BA  6EDA               	movwf	fsr2h,c
 15843  0022BC  50DF               	movf	indf2,w,c
 15844  0022BE  0A80               	xorlw	128
 15845  0022C0  0F82               	addlw	130
 15846  0022C2  A0D8               	btfss	status,0,c
 15847  0022C4  D00D               	goto	l3365
 15848                           
 15849                           ; BSR set to: 0
 15850                           ;menu.c: 163: inputPotsArray[array_index].controller_number--;
 15851  0022C6  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15852  0022C8  0D03               	mullw	3
 15853  0022CA  0E01               	movlw	1
 15854  0022CC  26F3               	addwf	prodl,f,c
 15855  0022CE  0E00               	movlw	0
 15856  0022D0  22F4               	addwfc	prodh,f,c
 15857  0022D2  0EAC               	movlw	low _inputPotsArray
 15858  0022D4  24F3               	addwf	prodl,w,c
 15859  0022D6  6ED9               	movwf	fsr2l,c
 15860  0022D8  0E02               	movlw	high _inputPotsArray
 15861  0022DA  20F4               	addwfc	prodh,w,c
 15862  0022DC  6EDA               	movwf	fsr2h,c
 15863  0022DE  06DF               	decf	indf2,f,c
 15864  0022E0                     l3365:
 15865                           
 15866                           ; BSR set to: 0
 15867                           ;menu.c: 164: }
 15868                           ;menu.c: 165: if(inputPotsArray[array_index].controller_number == 61) {inputPotsArray[ar
      +                          ray_index].controller_number = -3;}
 15869  0022E0  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15870  0022E2  0D03               	mullw	3
 15871  0022E4  0E01               	movlw	1
 15872  0022E6  26F3               	addwf	prodl,f,c
 15873  0022E8  0E00               	movlw	0
 15874  0022EA  22F4               	addwfc	prodh,f,c
 15875  0022EC  0EAC               	movlw	low _inputPotsArray
 15876  0022EE  24F3               	addwf	prodl,w,c
 15877  0022F0  6ED9               	movwf	fsr2l,c
 15878  0022F2  0E02               	movlw	high _inputPotsArray
 15879  0022F4  20F4               	addwfc	prodh,w,c
 15880  0022F6  6EDA               	movwf	fsr2h,c
 15881  0022F8  0E3D               	movlw	61
 15882  0022FA  18DE               	xorwf	postinc2,w,c
 15883  0022FC  A4D8               	btfss	status,2,c
 15884  0022FE  D00E               	goto	l3366
 15885                           
 15886                           ; BSR set to: 0
 15887  002300  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15888  002302  0D03               	mullw	3
 15889  002304  0E01               	movlw	1
 15890  002306  26F3               	addwf	prodl,f,c
 15891  002308  0E00               	movlw	0
 15892  00230A  22F4               	addwfc	prodh,f,c
 15893  00230C  0EAC               	movlw	low _inputPotsArray
 15894  00230E  24F3               	addwf	prodl,w,c
 15895  002310  6ED9               	movwf	fsr2l,c
 15896  002312  0E02               	movlw	high _inputPotsArray
 15897  002314  20F4               	addwfc	prodh,w,c
 15898  002316  6EDA               	movwf	fsr2h,c
 15899  002318  0EFD               	movlw	253
 15900  00231A  6EDF               	movwf	indf2,c
 15901  00231C                     l3366:
 15902                           
 15903                           ; BSR set to: 0
 15904                           ;menu.c: 166: if(inputPotsArray[array_index].controller_number == 62) {inputPotsArray[ar
      +                          ray_index].controller_number = -2;}
 15905  00231C  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15906  00231E  0D03               	mullw	3
 15907  002320  0E01               	movlw	1
 15908  002322  26F3               	addwf	prodl,f,c
 15909  002324  0E00               	movlw	0
 15910  002326  22F4               	addwfc	prodh,f,c
 15911  002328  0EAC               	movlw	low _inputPotsArray
 15912  00232A  24F3               	addwf	prodl,w,c
 15913  00232C  6ED9               	movwf	fsr2l,c
 15914  00232E  0E02               	movlw	high _inputPotsArray
 15915  002330  20F4               	addwfc	prodh,w,c
 15916  002332  6EDA               	movwf	fsr2h,c
 15917  002334  0E3E               	movlw	62
 15918  002336  18DE               	xorwf	postinc2,w,c
 15919  002338  A4D8               	btfss	status,2,c
 15920  00233A  D00E               	goto	l3367
 15921                           
 15922                           ; BSR set to: 0
 15923  00233C  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15924  00233E  0D03               	mullw	3
 15925  002340  0E01               	movlw	1
 15926  002342  26F3               	addwf	prodl,f,c
 15927  002344  0E00               	movlw	0
 15928  002346  22F4               	addwfc	prodh,f,c
 15929  002348  0EAC               	movlw	low _inputPotsArray
 15930  00234A  24F3               	addwf	prodl,w,c
 15931  00234C  6ED9               	movwf	fsr2l,c
 15932  00234E  0E02               	movlw	high _inputPotsArray
 15933  002350  20F4               	addwfc	prodh,w,c
 15934  002352  6EDA               	movwf	fsr2h,c
 15935  002354  0EFE               	movlw	254
 15936  002356  6EDF               	movwf	indf2,c
 15937  002358                     l3367:
 15938                           
 15939                           ; BSR set to: 0
 15940                           ;menu.c: 167: if(inputPotsArray[array_index].controller_number == 63) {inputPotsArray[ar
      +                          ray_index].controller_number = -1;}
 15941  002358  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15942  00235A  0D03               	mullw	3
 15943  00235C  0E01               	movlw	1
 15944  00235E  26F3               	addwf	prodl,f,c
 15945  002360  0E00               	movlw	0
 15946  002362  22F4               	addwfc	prodh,f,c
 15947  002364  0EAC               	movlw	low _inputPotsArray
 15948  002366  24F3               	addwf	prodl,w,c
 15949  002368  6ED9               	movwf	fsr2l,c
 15950  00236A  0E02               	movlw	high _inputPotsArray
 15951  00236C  20F4               	addwfc	prodh,w,c
 15952  00236E  6EDA               	movwf	fsr2h,c
 15953  002370  0E3F               	movlw	63
 15954  002372  18DE               	xorwf	postinc2,w,c
 15955  002374  A4D8               	btfss	status,2,c
 15956  002376  D00E               	goto	l3368
 15957                           
 15958                           ; BSR set to: 0
 15959  002378  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15960  00237A  0D03               	mullw	3
 15961  00237C  0E01               	movlw	1
 15962  00237E  26F3               	addwf	prodl,f,c
 15963  002380  0E00               	movlw	0
 15964  002382  22F4               	addwfc	prodh,f,c
 15965  002384  0EAC               	movlw	low _inputPotsArray
 15966  002386  24F3               	addwf	prodl,w,c
 15967  002388  6ED9               	movwf	fsr2l,c
 15968  00238A  0E02               	movlw	high _inputPotsArray
 15969  00238C  20F4               	addwfc	prodh,w,c
 15970  00238E  6EDA               	movwf	fsr2h,c
 15971  002390  0EFF               	movlw	255
 15972  002392  6EDF               	movwf	indf2,c
 15973  002394                     l3368:
 15974                           
 15975                           ;menu.c: 169: }
 15976                           ;menu.c: 171: if(inputPotsArray[array_index].controller_resolution == 1){
 15977                           
 15978                           ; BSR set to: 0
 15979  002394  0100               	movlb	0	; () banked
 15980  002396  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15981  002398  0D03               	mullw	3
 15982  00239A  0EAC               	movlw	low _inputPotsArray
 15983  00239C  24F3               	addwf	prodl,w,c
 15984  00239E  6ED9               	movwf	fsr2l,c
 15985  0023A0  0E02               	movlw	high _inputPotsArray
 15986  0023A2  20F4               	addwfc	prodh,w,c
 15987  0023A4  6EDA               	movwf	fsr2h,c
 15988  0023A6  0102               	movlb	2	; () banked
 15989  0023A8  A0DF               	btfss	indf2,0,c
 15990  0023AA  D01F               	goto	l3370
 15991                           
 15992                           ; BSR set to: 2
 15993                           ;menu.c: 173: if(inputPotsArray[array_index].controller_number_two_byte > -3) {
 15994  0023AC  0100               	movlb	0	; () banked
 15995  0023AE  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15996  0023B0  0D03               	mullw	3
 15997  0023B2  0E02               	movlw	2
 15998  0023B4  26F3               	addwf	prodl,f,c
 15999  0023B6  0E00               	movlw	0
 16000  0023B8  22F4               	addwfc	prodh,f,c
 16001  0023BA  0EAC               	movlw	low _inputPotsArray
 16002  0023BC  24F3               	addwf	prodl,w,c
 16003  0023BE  6ED9               	movwf	fsr2l,c
 16004  0023C0  0E02               	movlw	high _inputPotsArray
 16005  0023C2  20F4               	addwfc	prodh,w,c
 16006  0023C4  6EDA               	movwf	fsr2h,c
 16007  0023C6  50DF               	movf	indf2,w,c
 16008  0023C8  0A80               	xorlw	128
 16009  0023CA  0F82               	addlw	130
 16010  0023CC  A0D8               	btfss	status,0,c
 16011  0023CE  D00D               	goto	l3370
 16012                           
 16013                           ; BSR set to: 0
 16014                           ;menu.c: 174: inputPotsArray[array_index].controller_number_two_byte--;
 16015  0023D0  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16016  0023D2  0D03               	mullw	3
 16017  0023D4  0E02               	movlw	2
 16018  0023D6  26F3               	addwf	prodl,f,c
 16019  0023D8  0E00               	movlw	0
 16020  0023DA  22F4               	addwfc	prodh,f,c
 16021  0023DC  0EAC               	movlw	low _inputPotsArray
 16022  0023DE  24F3               	addwf	prodl,w,c
 16023  0023E0  6ED9               	movwf	fsr2l,c
 16024  0023E2  0E02               	movlw	high _inputPotsArray
 16025  0023E4  20F4               	addwfc	prodh,w,c
 16026  0023E6  6EDA               	movwf	fsr2h,c
 16027  0023E8  06DF               	decf	indf2,f,c
 16028  0023EA                     l3370:
 16029                           
 16030                           ;menu.c: 175: }
 16031                           ;menu.c: 177: }
 16032                           ;menu.c: 179: encoder_direction = 0x00;
 16033                           
 16034                           ; BSR set to: 0
 16035                           
 16036                           ; BSR set to: 0
 16037  0023EA  0E00               	movlw	0
 16038  0023EC  0100               	movlb	0	; () banked
 16039  0023EE  6FEB               	movwf	_encoder_direction& (0+255),b
 16040  0023F0                     l3363:
 16041                           
 16042                           ; BSR set to: 0
 16043                           ;menu.c: 180: }
 16044                           ;menu.c: 182: if(inputPotsArray[array_index].controller_resolution == 0){
 16045                           
 16046                           ; BSR set to: 0
 16047  0023F0  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16048  0023F2  0D03               	mullw	3
 16049  0023F4  0EAC               	movlw	low _inputPotsArray
 16050  0023F6  24F3               	addwf	prodl,w,c
 16051  0023F8  6ED9               	movwf	fsr2l,c
 16052  0023FA  0E02               	movlw	high _inputPotsArray
 16053  0023FC  20F4               	addwfc	prodh,w,c
 16054  0023FE  6EDA               	movwf	fsr2h,c
 16055  002400  0102               	movlb	2	; () banked
 16056  002402  B0DF               	btfsc	indf2,0,c
 16057  002404  D094               	goto	l3376
 16058                           
 16059                           ; BSR set to: 2
 16060                           ;menu.c: 184: if(inputPotsArray[array_index].controller_number >= 0) {
 16061  002406  0100               	movlb	0	; () banked
 16062  002408  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16063  00240A  0D03               	mullw	3
 16064  00240C  0E01               	movlw	1
 16065  00240E  26F3               	addwf	prodl,f,c
 16066  002410  0E00               	movlw	0
 16067  002412  22F4               	addwfc	prodh,f,c
 16068  002414  0EAC               	movlw	low _inputPotsArray
 16069  002416  24F3               	addwf	prodl,w,c
 16070  002418  6ED9               	movwf	fsr2l,c
 16071  00241A  0E02               	movlw	high _inputPotsArray
 16072  00241C  20F4               	addwfc	prodh,w,c
 16073  00241E  6EDA               	movwf	fsr2h,c
 16074  002420  0E00               	movlw	0
 16075  002422  BEDB               	btfsc	plusw2,7,c
 16076  002424  D02E               	goto	l3372
 16077                           
 16078                           ; BSR set to: 0
 16079                           ;menu.c: 186: int2string(inputPotsArray[array_index].controller_number);
 16080  002426  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16081  002428  0D03               	mullw	3
 16082  00242A  0E01               	movlw	1
 16083  00242C  26F3               	addwf	prodl,f,c
 16084  00242E  0E00               	movlw	0
 16085  002430  22F4               	addwfc	prodh,f,c
 16086  002432  0EAC               	movlw	low _inputPotsArray
 16087  002434  24F3               	addwf	prodl,w,c
 16088  002436  6ED9               	movwf	fsr2l,c
 16089  002438  0E02               	movlw	high _inputPotsArray
 16090  00243A  20F4               	addwfc	prodh,w,c
 16091  00243C  6EDA               	movwf	fsr2h,c
 16092  00243E  50DF               	movf	indf2,w,c
 16093  002440  6F74               	movwf	int2string@number& (0+255),b
 16094  002442  6B75               	clrf	(int2string@number+1)& (0+255),b
 16095  002444  BF74               	btfsc	int2string@number& (0+255),7,b
 16096  002446  0775               	decf	(int2string@number+1)& (0+255),f,b
 16097  002448  EC52  F035         	call	_int2string	;wreg free
 16098                           
 16099                           ;menu.c: 188: Lcd_Set_Cursor(2,7);
 16100  00244C  0E07               	movlw	7
 16101  00244E  0100               	movlb	0	; () banked
 16102  002450  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16103  002452  0E02               	movlw	2
 16104  002454  ECF7  F045         	call	_Lcd_Set_Cursor
 16105                           
 16106                           ;menu.c: 189: Lcd_Print_String("         ");
 16107  002458  0E6B               	movlw	low (STR_10+7)
 16108  00245A  0100               	movlb	0	; () banked
 16109  00245C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16110  00245E  0EFD               	movlw	high (STR_10+7)
 16111  002460  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16112  002462  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 16113                           
 16114                           ;menu.c: 190: Lcd_Set_Cursor(2,13);
 16115  002466  0E0D               	movlw	13
 16116  002468  0100               	movlb	0	; () banked
 16117  00246A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16118  00246C  0E02               	movlw	2
 16119  00246E  ECF7  F045         	call	_Lcd_Set_Cursor
 16120                           
 16121                           ;menu.c: 191: Lcd_Print_String(string2display);
 16122  002472  0E82               	movlw	low _string2display
 16123  002474  0100               	movlb	0	; () banked
 16124  002476  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16125  002478  0E01               	movlw	high _string2display
 16126  00247A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16127  00247C  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 16128                           
 16129                           ;menu.c: 192: }
 16130  002480  D056               	goto	l3376
 16131  002482                     l3372:
 16132                           
 16133                           ;menu.c: 193: else {
 16134                           ;menu.c: 194: if(inputPotsArray[array_index].controller_number == -1) {
 16135  002482  0100               	movlb	0	; () banked
 16136  002484  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16137  002486  0D03               	mullw	3
 16138  002488  0E01               	movlw	1
 16139  00248A  26F3               	addwf	prodl,f,c
 16140  00248C  0E00               	movlw	0
 16141  00248E  22F4               	addwfc	prodh,f,c
 16142  002490  0EAC               	movlw	low _inputPotsArray
 16143  002492  24F3               	addwf	prodl,w,c
 16144  002494  6ED9               	movwf	fsr2l,c
 16145  002496  0E02               	movlw	high _inputPotsArray
 16146  002498  20F4               	addwfc	prodh,w,c
 16147  00249A  6EDA               	movwf	fsr2h,c
 16148  00249C  28DE               	incf	postinc2,w,c
 16149  00249E  A4D8               	btfss	status,2,c
 16150  0024A0  D00C               	goto	l3374
 16151                           
 16152                           ; BSR set to: 0
 16153                           ;menu.c: 195: Lcd_Set_Cursor(2,7);
 16154  0024A2  0E07               	movlw	7
 16155  0024A4  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16156  0024A6  0E02               	movlw	2
 16157  0024A8  ECF7  F045         	call	_Lcd_Set_Cursor
 16158                           
 16159                           ;menu.c: 196: Lcd_Print_String("  VELOCITY");
 16160  0024AC  0E9E               	movlw	low STR_13
 16161  0024AE  0100               	movlb	0	; () banked
 16162  0024B0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16163  0024B2  0EFF               	movlw	high STR_13
 16164  0024B4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16165  0024B6  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 16166  0024BA                     l3374:
 16167                           
 16168                           ;menu.c: 197: }
 16169                           ;menu.c: 199: if(inputPotsArray[array_index].controller_number == -2) {
 16170  0024BA  0100               	movlb	0	; () banked
 16171  0024BC  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16172  0024BE  0D03               	mullw	3
 16173  0024C0  0E01               	movlw	1
 16174  0024C2  26F3               	addwf	prodl,f,c
 16175  0024C4  0E00               	movlw	0
 16176  0024C6  22F4               	addwfc	prodh,f,c
 16177  0024C8  0EAC               	movlw	low _inputPotsArray
 16178  0024CA  24F3               	addwf	prodl,w,c
 16179  0024CC  6ED9               	movwf	fsr2l,c
 16180  0024CE  0E02               	movlw	high _inputPotsArray
 16181  0024D0  20F4               	addwfc	prodh,w,c
 16182  0024D2  6EDA               	movwf	fsr2h,c
 16183  0024D4  0EFE               	movlw	254
 16184  0024D6  18DE               	xorwf	postinc2,w,c
 16185  0024D8  A4D8               	btfss	status,2,c
 16186  0024DA  D00C               	goto	l3375
 16187                           
 16188                           ; BSR set to: 0
 16189                           ;menu.c: 200: Lcd_Set_Cursor(2,7);
 16190  0024DC  0E07               	movlw	7
 16191  0024DE  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16192  0024E0  0E02               	movlw	2
 16193  0024E2  ECF7  F045         	call	_Lcd_Set_Cursor
 16194                           
 16195                           ;menu.c: 201: Lcd_Print_String(" PITCHBEND");
 16196  0024E6  0E88               	movlw	low STR_14
 16197  0024E8  0100               	movlb	0	; () banked
 16198  0024EA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16199  0024EC  0EFF               	movlw	high STR_14
 16200  0024EE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16201  0024F0  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 16202  0024F4                     l3375:
 16203                           
 16204                           ;menu.c: 202: }
 16205                           ;menu.c: 203: if(inputPotsArray[array_index].controller_number == -3) {
 16206  0024F4  0100               	movlb	0	; () banked
 16207  0024F6  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16208  0024F8  0D03               	mullw	3
 16209  0024FA  0E01               	movlw	1
 16210  0024FC  26F3               	addwf	prodl,f,c
 16211  0024FE  0E00               	movlw	0
 16212  002500  22F4               	addwfc	prodh,f,c
 16213  002502  0EAC               	movlw	low _inputPotsArray
 16214  002504  24F3               	addwf	prodl,w,c
 16215  002506  6ED9               	movwf	fsr2l,c
 16216  002508  0E02               	movlw	high _inputPotsArray
 16217  00250A  20F4               	addwfc	prodh,w,c
 16218  00250C  6EDA               	movwf	fsr2h,c
 16219  00250E  0EFD               	movlw	253
 16220  002510  18DE               	xorwf	postinc2,w,c
 16221  002512  A4D8               	btfss	status,2,c
 16222  002514  D00C               	goto	l3376
 16223                           
 16224                           ; BSR set to: 0
 16225                           ;menu.c: 204: Lcd_Set_Cursor(2,7);
 16226  002516  0E07               	movlw	7
 16227  002518  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16228  00251A  0E02               	movlw	2
 16229  00251C  ECF7  F045         	call	_Lcd_Set_Cursor
 16230                           
 16231                           ;menu.c: 205: Lcd_Print_String(" MOD.WHEEL");
 16232  002520  0E93               	movlw	low STR_15
 16233  002522  0100               	movlb	0	; () banked
 16234  002524  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16235  002526  0EFF               	movlw	high STR_15
 16236  002528  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16237  00252A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 16238  00252E                     l3376:
 16239                           
 16240                           ;menu.c: 206: }
 16241                           ;menu.c: 207: }
 16242                           ;menu.c: 208: }
 16243                           ;menu.c: 209: }
 16244                           ;menu.c: 211: if(inputPotsArray[array_index].controller_resolution == 1){
 16245  00252E  0100               	movlb	0	; () banked
 16246  002530  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16247  002532  0D03               	mullw	3
 16248  002534  0EAC               	movlw	low _inputPotsArray
 16249  002536  24F3               	addwf	prodl,w,c
 16250  002538  6ED9               	movwf	fsr2l,c
 16251  00253A  0E02               	movlw	high _inputPotsArray
 16252  00253C  20F4               	addwfc	prodh,w,c
 16253  00253E  6EDA               	movwf	fsr2h,c
 16254  002540  0102               	movlb	2	; () banked
 16255  002542  A0DF               	btfss	indf2,0,c
 16256  002544  D094               	goto	l3382
 16257                           
 16258                           ; BSR set to: 2
 16259                           ;menu.c: 213: if(inputPotsArray[array_index].controller_number_two_byte >= 0) {
 16260  002546  0100               	movlb	0	; () banked
 16261  002548  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16262  00254A  0D03               	mullw	3
 16263  00254C  0E02               	movlw	2
 16264  00254E  26F3               	addwf	prodl,f,c
 16265  002550  0E00               	movlw	0
 16266  002552  22F4               	addwfc	prodh,f,c
 16267  002554  0EAC               	movlw	low _inputPotsArray
 16268  002556  24F3               	addwf	prodl,w,c
 16269  002558  6ED9               	movwf	fsr2l,c
 16270  00255A  0E02               	movlw	high _inputPotsArray
 16271  00255C  20F4               	addwfc	prodh,w,c
 16272  00255E  6EDA               	movwf	fsr2h,c
 16273  002560  0E00               	movlw	0
 16274  002562  BEDB               	btfsc	plusw2,7,c
 16275  002564  D02E               	goto	l3378
 16276                           
 16277                           ; BSR set to: 0
 16278                           ;menu.c: 215: int2string(inputPotsArray[array_index].controller_number_two_byte);
 16279  002566  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16280  002568  0D03               	mullw	3
 16281  00256A  0E02               	movlw	2
 16282  00256C  26F3               	addwf	prodl,f,c
 16283  00256E  0E00               	movlw	0
 16284  002570  22F4               	addwfc	prodh,f,c
 16285  002572  0EAC               	movlw	low _inputPotsArray
 16286  002574  24F3               	addwf	prodl,w,c
 16287  002576  6ED9               	movwf	fsr2l,c
 16288  002578  0E02               	movlw	high _inputPotsArray
 16289  00257A  20F4               	addwfc	prodh,w,c
 16290  00257C  6EDA               	movwf	fsr2h,c
 16291  00257E  50DF               	movf	indf2,w,c
 16292  002580  6F74               	movwf	int2string@number& (0+255),b
 16293  002582  6B75               	clrf	(int2string@number+1)& (0+255),b
 16294  002584  BF74               	btfsc	int2string@number& (0+255),7,b
 16295  002586  0775               	decf	(int2string@number+1)& (0+255),f,b
 16296  002588  EC52  F035         	call	_int2string	;wreg free
 16297                           
 16298                           ;menu.c: 217: Lcd_Set_Cursor(2,7);
 16299  00258C  0E07               	movlw	7
 16300  00258E  0100               	movlb	0	; () banked
 16301  002590  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16302  002592  0E02               	movlw	2
 16303  002594  ECF7  F045         	call	_Lcd_Set_Cursor
 16304                           
 16305                           ;menu.c: 218: Lcd_Print_String("         ");
 16306  002598  0E6B               	movlw	low (STR_10+7)
 16307  00259A  0100               	movlb	0	; () banked
 16308  00259C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16309  00259E  0EFD               	movlw	high (STR_10+7)
 16310  0025A0  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16311  0025A2  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 16312                           
 16313                           ;menu.c: 219: Lcd_Set_Cursor(2,13);
 16314  0025A6  0E0D               	movlw	13
 16315  0025A8  0100               	movlb	0	; () banked
 16316  0025AA  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16317  0025AC  0E02               	movlw	2
 16318  0025AE  ECF7  F045         	call	_Lcd_Set_Cursor
 16319                           
 16320                           ;menu.c: 220: Lcd_Print_String(string2display);
 16321  0025B2  0E82               	movlw	low _string2display
 16322  0025B4  0100               	movlb	0	; () banked
 16323  0025B6  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16324  0025B8  0E01               	movlw	high _string2display
 16325  0025BA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16326  0025BC  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 16327                           
 16328                           ;menu.c: 221: }
 16329  0025C0  D056               	goto	l3382
 16330  0025C2                     l3378:
 16331                           
 16332                           ;menu.c: 222: else {
 16333                           ;menu.c: 223: if(inputPotsArray[array_index].controller_number_two_byte == -1) {
 16334  0025C2  0100               	movlb	0	; () banked
 16335  0025C4  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16336  0025C6  0D03               	mullw	3
 16337  0025C8  0E02               	movlw	2
 16338  0025CA  26F3               	addwf	prodl,f,c
 16339  0025CC  0E00               	movlw	0
 16340  0025CE  22F4               	addwfc	prodh,f,c
 16341  0025D0  0EAC               	movlw	low _inputPotsArray
 16342  0025D2  24F3               	addwf	prodl,w,c
 16343  0025D4  6ED9               	movwf	fsr2l,c
 16344  0025D6  0E02               	movlw	high _inputPotsArray
 16345  0025D8  20F4               	addwfc	prodh,w,c
 16346  0025DA  6EDA               	movwf	fsr2h,c
 16347  0025DC  28DE               	incf	postinc2,w,c
 16348  0025DE  A4D8               	btfss	status,2,c
 16349  0025E0  D00C               	goto	l3380
 16350                           
 16351                           ; BSR set to: 0
 16352                           ;menu.c: 224: Lcd_Set_Cursor(2,7);
 16353  0025E2  0E07               	movlw	7
 16354  0025E4  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16355  0025E6  0E02               	movlw	2
 16356  0025E8  ECF7  F045         	call	_Lcd_Set_Cursor
 16357                           
 16358                           ;menu.c: 225: Lcd_Print_String("  VELOCITY");
 16359  0025EC  0E9E               	movlw	low STR_13
 16360  0025EE  0100               	movlb	0	; () banked
 16361  0025F0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16362  0025F2  0EFF               	movlw	high STR_13
 16363  0025F4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16364  0025F6  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 16365  0025FA                     l3380:
 16366                           
 16367                           ;menu.c: 226: }
 16368                           ;menu.c: 228: if(inputPotsArray[array_index].controller_number_two_byte == -2) {
 16369  0025FA  0100               	movlb	0	; () banked
 16370  0025FC  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16371  0025FE  0D03               	mullw	3
 16372  002600  0E02               	movlw	2
 16373  002602  26F3               	addwf	prodl,f,c
 16374  002604  0E00               	movlw	0
 16375  002606  22F4               	addwfc	prodh,f,c
 16376  002608  0EAC               	movlw	low _inputPotsArray
 16377  00260A  24F3               	addwf	prodl,w,c
 16378  00260C  6ED9               	movwf	fsr2l,c
 16379  00260E  0E02               	movlw	high _inputPotsArray
 16380  002610  20F4               	addwfc	prodh,w,c
 16381  002612  6EDA               	movwf	fsr2h,c
 16382  002614  0EFE               	movlw	254
 16383  002616  18DE               	xorwf	postinc2,w,c
 16384  002618  A4D8               	btfss	status,2,c
 16385  00261A  D00C               	goto	l3381
 16386                           
 16387                           ; BSR set to: 0
 16388                           ;menu.c: 229: Lcd_Set_Cursor(2,7);
 16389  00261C  0E07               	movlw	7
 16390  00261E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16391  002620  0E02               	movlw	2
 16392  002622  ECF7  F045         	call	_Lcd_Set_Cursor
 16393                           
 16394                           ;menu.c: 230: Lcd_Print_String(" PITCHBEND");
 16395  002626  0E88               	movlw	low STR_14
 16396  002628  0100               	movlb	0	; () banked
 16397  00262A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16398  00262C  0EFF               	movlw	high STR_14
 16399  00262E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16400  002630  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 16401  002634                     l3381:
 16402                           
 16403                           ;menu.c: 231: }
 16404                           ;menu.c: 232: if(inputPotsArray[array_index].controller_number_two_byte == -3) {
 16405  002634  0100               	movlb	0	; () banked
 16406  002636  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16407  002638  0D03               	mullw	3
 16408  00263A  0E02               	movlw	2
 16409  00263C  26F3               	addwf	prodl,f,c
 16410  00263E  0E00               	movlw	0
 16411  002640  22F4               	addwfc	prodh,f,c
 16412  002642  0EAC               	movlw	low _inputPotsArray
 16413  002644  24F3               	addwf	prodl,w,c
 16414  002646  6ED9               	movwf	fsr2l,c
 16415  002648  0E02               	movlw	high _inputPotsArray
 16416  00264A  20F4               	addwfc	prodh,w,c
 16417  00264C  6EDA               	movwf	fsr2h,c
 16418  00264E  0EFD               	movlw	253
 16419  002650  18DE               	xorwf	postinc2,w,c
 16420  002652  A4D8               	btfss	status,2,c
 16421  002654  D00C               	goto	l3382
 16422                           
 16423                           ; BSR set to: 0
 16424                           ;menu.c: 233: Lcd_Set_Cursor(2,7);
 16425  002656  0E07               	movlw	7
 16426  002658  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16427  00265A  0E02               	movlw	2
 16428  00265C  ECF7  F045         	call	_Lcd_Set_Cursor
 16429                           
 16430                           ;menu.c: 234: Lcd_Print_String(" MOD.WHEEL");
 16431  002660  0E93               	movlw	low STR_15
 16432  002662  0100               	movlb	0	; () banked
 16433  002664  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16434  002666  0EFF               	movlw	high STR_15
 16435  002668  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16436  00266A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 16437  00266E                     l3382:
 16438  00266E  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 16439  002670  0012               	return	
 16440  002672  D58C               	goto	l3355
 16441  002674                     __end_of_setControllerNumbers:
 16442                           	opt stack 0
 16443                           tblptru	equ	0xFF8
 16444                           tblptrh	equ	0xFF7
 16445                           tblptrl	equ	0xFF6
 16446                           tablat	equ	0xFF5
 16447                           prodh	equ	0xFF4
 16448                           prodl	equ	0xFF3
 16449                           intcon	equ	0xFF2
 16450                           intcon2	equ	0xFF1
 16451                           postinc0	equ	0xFEE
 16452                           wreg	equ	0xFE8
 16453                           postdec1	equ	0xFE5
 16454                           fsr1l	equ	0xFE1
 16455                           indf2	equ	0xFDF
 16456                           postinc2	equ	0xFDE
 16457                           plusw2	equ	0xFDB
 16458                           fsr2h	equ	0xFDA
 16459                           fsr2l	equ	0xFD9
 16460                           status	equ	0xFD8
 16461                           
 16462 ;; *************** function _Function_D_2 *****************
 16463 ;; Defined at:
 16464 ;;		line 651 in file "menu.c"
 16465 ;; Parameters:    Size  Location     Type
 16466 ;;		None
 16467 ;; Auto vars:     Size  Location     Type
 16468 ;;		None
 16469 ;; Return value:  Size  Location     Type
 16470 ;;                  1    wreg      void 
 16471 ;; Registers used:
 16472 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16473 ;; Tracked objects:
 16474 ;;		On entry : 0/0
 16475 ;;		On exit  : 0/0
 16476 ;;		Unchanged: 0/0
 16477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16482 ;;Total ram usage:        0 bytes
 16483 ;; Hardware stack levels used:    1
 16484 ;; Hardware stack levels required when called:    8
 16485 ;; This function calls:
 16486 ;;		_Busy_eep
 16487 ;;		_Lcd_Print_String
 16488 ;;		_Lcd_Set_Cursor
 16489 ;;		_Write_b_eep
 16490 ;;		_calculate_alpha
 16491 ;;		_int2string
 16492 ;;		_processEncoderBuxton
 16493 ;; This function is called by:
 16494 ;;		_Function_D
 16495 ;; This function uses a non-reentrant model
 16496 ;;
 16497                           
 16498                           	psect	text46
 16499  008962                     __ptext46:
 16500                           	opt stack 0
 16501  008962                     _Function_D_2:
 16502                           	opt stack 20
 16503                           
 16504                           ;menu.c: 653: which_screen = POTS_ALPHA_MENU;
 16505                           
 16506                           ;incstack = 0
 16507  008962  0E10               	movlw	16
 16508  008964  0100               	movlb	0	; () banked
 16509  008966  6FF9               	movwf	_which_screen& (0+255),b
 16510                           
 16511                           ; BSR set to: 0
 16512                           ;menu.c: 654: lcd_print_once = 0;
 16513  008968  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16514                           
 16515                           ; BSR set to: 0
 16516                           ;menu.c: 655: encoder_click = 0;
 16517  00896A  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 16518                           
 16519                           ; BSR set to: 0
 16520                           ;menu.c: 657: potsAlphaMenu.selector = ema_integer;
 16521  00896C  C0FB  F155         	movff	_ema_integer,_potsAlphaMenu+2
 16522                           
 16523                           ;menu.c: 659: while(encoder_click == 0) {
 16524  008970  D016               	goto	l3521
 16525  008972                     
 16526                           ;menu.c: 660: processEncoderBuxton();
 16527                           
 16528                           ; BSR set to: 0
 16529  008972  EC09  F000         	call	_processEncoderBuxton	;wreg free
 16530                           
 16531                           ;menu.c: 661: lcd_print_once = 1;
 16532  008976  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16533                           
 16534                           ;menu.c: 663: int2string(potsAlphaMenu.selector);
 16535  008978  C155  F074         	movff	_potsAlphaMenu+2,int2string@number
 16536  00897C  0100               	movlb	0	; () banked
 16537  00897E  6B75               	clrf	(int2string@number+1)& (0+255),b
 16538  008980  EC52  F035         	call	_int2string	;wreg free
 16539                           
 16540                           ;menu.c: 664: Lcd_Set_Cursor(2,13);
 16541  008984  0E0D               	movlw	13
 16542  008986  0100               	movlb	0	; () banked
 16543  008988  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16544  00898A  0E02               	movlw	2
 16545  00898C  ECF7  F045         	call	_Lcd_Set_Cursor
 16546                           
 16547                           ;menu.c: 665: Lcd_Print_String(string2display);
 16548  008990  0E82               	movlw	low _string2display
 16549  008992  0100               	movlb	0	; () banked
 16550  008994  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16551  008996  0E01               	movlw	high _string2display
 16552  008998  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16553  00899A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 16554  00899E                     l3521:
 16555  00899E  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 16556  0089A0  D7E8               	goto	l3522
 16557                           
 16558                           ;menu.c: 666: }
 16559                           ;menu.c: 668: ema_integer = potsAlphaMenu.selector;
 16560  0089A2  C155  F0FB         	movff	_potsAlphaMenu+2,_ema_integer
 16561                           
 16562                           ;menu.c: 669: (Busy_eep(), Write_b_eep(0x03,ema_integer));
 16563  0089A6  EC3C  F04B         	call	_Busy_eep	;wreg free
 16564  0089AA  0E00               	movlw	0
 16565  0089AC  0100               	movlb	0	; () banked
 16566  0089AE  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 16567  0089B0  0E03               	movlw	3
 16568  0089B2  6F60               	movwf	Write_b_eep@badd& (0+255),b
 16569  0089B4  C0FB  F062         	movff	_ema_integer,Write_b_eep@bdat
 16570  0089B8  ECE7  F047         	call	_Write_b_eep	;wreg free
 16571                           
 16572                           ;menu.c: 670: calculate_alpha();
 16573  0089BC  EC9D  F047         	call	_calculate_alpha	;wreg free
 16574  0089C0  0012               	return		;funcret
 16575  0089C2                     __end_of_Function_D_2:
 16576                           	opt stack 0
 16577                           tblptru	equ	0xFF8
 16578                           tblptrh	equ	0xFF7
 16579                           tblptrl	equ	0xFF6
 16580                           tablat	equ	0xFF5
 16581                           prodh	equ	0xFF4
 16582                           prodl	equ	0xFF3
 16583                           intcon	equ	0xFF2
 16584                           intcon2	equ	0xFF1
 16585                           postinc0	equ	0xFEE
 16586                           wreg	equ	0xFE8
 16587                           postdec1	equ	0xFE5
 16588                           fsr1l	equ	0xFE1
 16589                           indf2	equ	0xFDF
 16590                           postinc2	equ	0xFDE
 16591                           plusw2	equ	0xFDB
 16592                           fsr2h	equ	0xFDA
 16593                           fsr2l	equ	0xFD9
 16594                           status	equ	0xFD8
 16595                           
 16596 ;; *************** function _calculate_alpha *****************
 16597 ;; Defined at:
 16598 ;;		line 24 in file "potentiometers.c"
 16599 ;; Parameters:    Size  Location     Type
 16600 ;;		None
 16601 ;; Auto vars:     Size  Location     Type
 16602 ;;		None
 16603 ;; Return value:  Size  Location     Type
 16604 ;;                  1    wreg      void 
 16605 ;; Registers used:
 16606 ;;		wreg, status,2, status,0, cstack
 16607 ;; Tracked objects:
 16608 ;;		On entry : 0/0
 16609 ;;		On exit  : 0/0
 16610 ;;		Unchanged: 0/0
 16611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16616 ;;Total ram usage:        0 bytes
 16617 ;; Hardware stack levels used:    1
 16618 ;; Hardware stack levels required when called:    6
 16619 ;; This function calls:
 16620 ;;		___fldiv
 16621 ;;		___xxtofl
 16622 ;; This function is called by:
 16623 ;;		_Function_D_2
 16624 ;;		_main
 16625 ;; This function uses a non-reentrant model
 16626 ;;
 16627                           
 16628                           	psect	text47
 16629  008F3A                     __ptext47:
 16630                           	opt stack 0
 16631  008F3A                     _calculate_alpha:
 16632                           	opt stack 21
 16633                           
 16634                           ;potentiometers.c: 25: (float)ema_alpha = (ema_integer / 100.0);
 16635                           
 16636                           ;incstack = 0
 16637  008F3A  0100               	movlb	0	; () banked
 16638  008F3C  51FB               	movf	_ema_integer& (0+255),w,b
 16639  008F3E  6F60               	movwf	___xxtofl@val& (0+255),b
 16640  008F40  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 16641  008F42  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 16642  008F44  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 16643  008F46  0E00               	movlw	0
 16644  008F48  EC29  F02F         	call	___xxtofl
 16645  008F4C  C060  F087         	movff	?___xxtofl,___fldiv@b
 16646  008F50  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 16647  008F54  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 16648  008F58  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 16649  008F5C  0E00               	movlw	0
 16650  008F5E  0100               	movlb	0	; () banked
 16651  008F60  6F8B               	movwf	___fldiv@a& (0+255),b
 16652  008F62  0E00               	movlw	0
 16653  008F64  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16654  008F66  0EC8               	movlw	200
 16655  008F68  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16656  008F6A  0E42               	movlw	66
 16657  008F6C  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16658  008F6E  EC1A  F01C         	call	___fldiv	;wreg free
 16659  008F72  C087  F104         	movff	?___fldiv,_ema_alpha
 16660  008F76  C088  F105         	movff	?___fldiv+1,_ema_alpha+1
 16661  008F7A  C089  F106         	movff	?___fldiv+2,_ema_alpha+2
 16662  008F7E  C08A  F107         	movff	?___fldiv+3,_ema_alpha+3
 16663  008F82  0012               	return		;funcret
 16664  008F84                     __end_of_calculate_alpha:
 16665                           	opt stack 0
 16666                           tblptru	equ	0xFF8
 16667                           tblptrh	equ	0xFF7
 16668                           tblptrl	equ	0xFF6
 16669                           tablat	equ	0xFF5
 16670                           prodh	equ	0xFF4
 16671                           prodl	equ	0xFF3
 16672                           intcon	equ	0xFF2
 16673                           intcon2	equ	0xFF1
 16674                           postinc0	equ	0xFEE
 16675                           wreg	equ	0xFE8
 16676                           postdec1	equ	0xFE5
 16677                           fsr1l	equ	0xFE1
 16678                           indf2	equ	0xFDF
 16679                           postinc2	equ	0xFDE
 16680                           plusw2	equ	0xFDB
 16681                           fsr2h	equ	0xFDA
 16682                           fsr2l	equ	0xFD9
 16683                           status	equ	0xFD8
 16684                           
 16685 ;; *************** function ___fldiv *****************
 16686 ;; Defined at:
 16687 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
 16688 ;; Parameters:    Size  Location     Type
 16689 ;;  b               4   39[BANK0 ] void 
 16690 ;;  a               4   43[BANK0 ] void 
 16691 ;; Auto vars:     Size  Location     Type
 16692 ;;  grs             4   58[BANK0 ] unsigned long 
 16693 ;;  rem             4   52[BANK0 ] unsigned long 
 16694 ;;  new_exp         2   56[BANK0 ] int 
 16695 ;;  aexp            1   63[BANK0 ] unsigned char 
 16696 ;;  bexp            1   62[BANK0 ] unsigned char 
 16697 ;;  sign            1   51[BANK0 ] unsigned char 
 16698 ;; Return value:  Size  Location     Type
 16699 ;;                  4   39[BANK0 ] unsigned char 
 16700 ;; Registers used:
 16701 ;;		wreg, status,2, status,0
 16702 ;; Tracked objects:
 16703 ;;		On entry : 0/0
 16704 ;;		On exit  : 0/0
 16705 ;;		Unchanged: 0/0
 16706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16707 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16709 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16710 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16711 ;;Total ram usage:       25 bytes
 16712 ;; Hardware stack levels used:    1
 16713 ;; Hardware stack levels required when called:    5
 16714 ;; This function calls:
 16715 ;;		Nothing
 16716 ;; This function is called by:
 16717 ;;		_calculate_alpha
 16718 ;;		_calculate_pulse_length
 16719 ;; This function uses a non-reentrant model
 16720 ;;
 16721                           
 16722                           	psect	text48
 16723  003834                     __ptext48:
 16724                           	opt stack 0
 16725  003834                     ___fldiv:
 16726                           	opt stack 22
 16727                           
 16728                           ;incstack = 0
 16729  003834  0100               	movlb	0	; () banked
 16730  003836  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16731  003838  0B80               	andlw	128
 16732  00383A  6F93               	movwf	___fldiv@sign& (0+255),b
 16733  00383C  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16734  00383E  258A               	addwf	(___fldiv@b+3)& (0+255),w,b
 16735  003840  6F9E               	movwf	___fldiv@bexp& (0+255),b
 16736                           
 16737                           ; BSR set to: 0
 16738  003842  BF89               	btfsc	(___fldiv@b+2)& (0+255),7,b
 16739                           
 16740                           ; BSR set to: 0
 16741  003844  819E               	bsf	___fldiv@bexp& (0+255),0,b
 16742                           
 16743                           ; BSR set to: 0
 16744                           
 16745                           ; BSR set to: 0
 16746  003846  519E               	movf	___fldiv@bexp& (0+255),w,b
 16747  003848  B4D8               	btfsc	status,2,c
 16748  00384A  D00D               	goto	l5921
 16749                           
 16750                           ; BSR set to: 0
 16751  00384C  299E               	incf	___fldiv@bexp& (0+255),w,b
 16752  00384E  A4D8               	btfss	status,2,c
 16753  003850  D008               	goto	l5922
 16754                           
 16755                           ; BSR set to: 0
 16756  003852  0E00               	movlw	0
 16757  003854  6F87               	movwf	___fldiv@b& (0+255),b
 16758  003856  0E00               	movlw	0
 16759  003858  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16760  00385A  0E00               	movlw	0
 16761  00385C  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16762  00385E  0E00               	movlw	0
 16763  003860  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16764  003862                     l5922:
 16765                           
 16766                           ; BSR set to: 0
 16767                           
 16768                           ; BSR set to: 0
 16769  003862  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 16770  003864  D006               	goto	L2
 16771  003866                     l5921:
 16772                           
 16773                           ; BSR set to: 0
 16774                           
 16775                           ; BSR set to: 0
 16776  003866  0E00               	movlw	0
 16777  003868  6F87               	movwf	___fldiv@b& (0+255),b
 16778  00386A  0E00               	movlw	0
 16779  00386C  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16780  00386E  0E00               	movlw	0
 16781  003870  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16782  003872                     L2:
 16783  003872  0E00               	movlw	0
 16784  003874  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16785                           
 16786                           ; BSR set to: 0
 16787                           
 16788                           ; BSR set to: 0
 16789  003876  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16790  003878  0B80               	andlw	128
 16791  00387A  1B93               	xorwf	___fldiv@sign& (0+255),f,b
 16792                           
 16793                           ; BSR set to: 0
 16794  00387C  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16795  00387E  258E               	addwf	(___fldiv@a+3)& (0+255),w,b
 16796  003880  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16797                           
 16798                           ; BSR set to: 0
 16799  003882  BF8D               	btfsc	(___fldiv@a+2)& (0+255),7,b
 16800                           
 16801                           ; BSR set to: 0
 16802  003884  819F               	bsf	___fldiv@aexp& (0+255),0,b
 16803                           
 16804                           ; BSR set to: 0
 16805                           
 16806                           ; BSR set to: 0
 16807  003886  519F               	movf	___fldiv@aexp& (0+255),w,b
 16808  003888  B4D8               	btfsc	status,2,c
 16809  00388A  D00D               	goto	l5925
 16810                           
 16811                           ; BSR set to: 0
 16812  00388C  299F               	incf	___fldiv@aexp& (0+255),w,b
 16813  00388E  A4D8               	btfss	status,2,c
 16814  003890  D008               	goto	l5926
 16815                           
 16816                           ; BSR set to: 0
 16817  003892  0E00               	movlw	0
 16818  003894  6F8B               	movwf	___fldiv@a& (0+255),b
 16819  003896  0E00               	movlw	0
 16820  003898  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16821  00389A  0E00               	movlw	0
 16822  00389C  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16823  00389E  0E00               	movlw	0
 16824  0038A0  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16825  0038A2                     l5926:
 16826                           
 16827                           ; BSR set to: 0
 16828                           
 16829                           ; BSR set to: 0
 16830  0038A2  8F8D               	bsf	(___fldiv@a+2)& (0+255),7,b
 16831  0038A4  D006               	goto	L3
 16832  0038A6                     l5925:
 16833                           
 16834                           ; BSR set to: 0
 16835                           
 16836                           ; BSR set to: 0
 16837  0038A6  0E00               	movlw	0
 16838  0038A8  6F8B               	movwf	___fldiv@a& (0+255),b
 16839  0038AA  0E00               	movlw	0
 16840  0038AC  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16841  0038AE  0E00               	movlw	0
 16842  0038B0  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16843  0038B2                     L3:
 16844  0038B2  0E00               	movlw	0
 16845  0038B4  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16846                           
 16847                           ; BSR set to: 0
 16848                           
 16849                           ; BSR set to: 0
 16850  0038B6  518B               	movf	___fldiv@a& (0+255),w,b
 16851  0038B8  118C               	iorwf	(___fldiv@a+1)& (0+255),w,b
 16852  0038BA  118D               	iorwf	(___fldiv@a+2)& (0+255),w,b
 16853  0038BC  118E               	iorwf	(___fldiv@a+3)& (0+255),w,b
 16854  0038BE  A4D8               	btfss	status,2,c
 16855  0038C0  D015               	goto	l5928
 16856                           
 16857                           ; BSR set to: 0
 16858  0038C2  0E00               	movlw	0
 16859  0038C4  6F87               	movwf	___fldiv@b& (0+255),b
 16860  0038C6  0E00               	movlw	0
 16861  0038C8  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16862  0038CA  0E00               	movlw	0
 16863  0038CC  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16864  0038CE  0E00               	movlw	0
 16865  0038D0  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16866                           
 16867                           ; BSR set to: 0
 16868  0038D2  0E80               	movlw	128
 16869  0038D4  1389               	iorwf	(___fldiv@b+2)& (0+255),f,b
 16870  0038D6  0E7F               	movlw	127
 16871  0038D8  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 16872                           
 16873                           ; BSR set to: 0
 16874  0038DA  C087  F087         	movff	___fldiv@b,?___fldiv
 16875  0038DE  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16876  0038E2  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16877  0038E6  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16878                           
 16879                           ; BSR set to: 0
 16880  0038EA  0012               	return	
 16881  0038EC                     l5928:
 16882                           
 16883                           ; BSR set to: 0
 16884                           
 16885                           ; BSR set to: 0
 16886  0038EC  519E               	movf	___fldiv@bexp& (0+255),w,b
 16887  0038EE  A4D8               	btfss	status,2,c
 16888  0038F0  D011               	goto	l5930
 16889                           
 16890                           ; BSR set to: 0
 16891  0038F2  0E00               	movlw	0
 16892  0038F4  6F87               	movwf	___fldiv@b& (0+255),b
 16893  0038F6  0E00               	movlw	0
 16894  0038F8  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16895  0038FA  0E00               	movlw	0
 16896  0038FC  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16897  0038FE  0E00               	movlw	0
 16898  003900  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16899                           
 16900                           ; BSR set to: 0
 16901  003902  C087  F087         	movff	___fldiv@b,?___fldiv
 16902  003906  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16903  00390A  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16904  00390E  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16905                           
 16906                           ; BSR set to: 0
 16907  003912  0012               	return	
 16908  003914                     l5930:
 16909                           
 16910                           ; BSR set to: 0
 16911                           
 16912                           ; BSR set to: 0
 16913  003914  519F               	movf	___fldiv@aexp& (0+255),w,b
 16914  003916  6F8F               	movwf	??___fldiv& (0+255),b
 16915  003918  6B90               	clrf	(??___fldiv+1)& (0+255),b
 16916  00391A  1F8F               	comf	??___fldiv& (0+255),f,b
 16917  00391C  1F90               	comf	(??___fldiv+1)& (0+255),f,b
 16918  00391E  4B8F               	infsnz	??___fldiv& (0+255),f,b
 16919  003920  2B90               	incf	(??___fldiv+1)& (0+255),f,b
 16920  003922  519E               	movf	___fldiv@bexp& (0+255),w,b
 16921  003924  6F91               	movwf	(??___fldiv+2)& (0+255),b
 16922  003926  6B92               	clrf	(??___fldiv+3)& (0+255),b
 16923  003928  518F               	movf	??___fldiv& (0+255),w,b
 16924  00392A  2791               	addwf	(??___fldiv+2)& (0+255),f,b
 16925  00392C  5190               	movf	(??___fldiv+1)& (0+255),w,b
 16926  00392E  2392               	addwfc	(??___fldiv+3)& (0+255),f,b
 16927  003930  0E7F               	movlw	127
 16928  003932  2591               	addwf	(??___fldiv+2)& (0+255),w,b
 16929  003934  6F98               	movwf	___fldiv@new_exp& (0+255),b
 16930  003936  0E00               	movlw	0
 16931  003938  2192               	addwfc	(??___fldiv+3)& (0+255),w,b
 16932  00393A  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 16933                           
 16934                           ; BSR set to: 0
 16935  00393C  C087  F094         	movff	___fldiv@b,___fldiv@rem
 16936  003940  C088  F095         	movff	___fldiv@b+1,___fldiv@rem+1
 16937  003944  C089  F096         	movff	___fldiv@b+2,___fldiv@rem+2
 16938  003948  C08A  F097         	movff	___fldiv@b+3,___fldiv@rem+3
 16939                           
 16940                           ; BSR set to: 0
 16941  00394C  0E00               	movlw	0
 16942  00394E  6F87               	movwf	___fldiv@b& (0+255),b
 16943  003950  0E00               	movlw	0
 16944  003952  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16945  003954  0E00               	movlw	0
 16946  003956  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16947  003958  0E00               	movlw	0
 16948  00395A  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16949                           
 16950                           ; BSR set to: 0
 16951  00395C  0E00               	movlw	0
 16952  00395E  6F9A               	movwf	___fldiv@grs& (0+255),b
 16953  003960  0E00               	movlw	0
 16954  003962  6F9B               	movwf	(___fldiv@grs+1)& (0+255),b
 16955  003964  0E00               	movlw	0
 16956  003966  6F9C               	movwf	(___fldiv@grs+2)& (0+255),b
 16957  003968  0E00               	movlw	0
 16958  00396A  6F9D               	movwf	(___fldiv@grs+3)& (0+255),b
 16959                           
 16960                           ; BSR set to: 0
 16961  00396C  0E00               	movlw	0
 16962  00396E  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16963  003970  D028               	goto	l5931
 16964  003972                     
 16965                           ; BSR set to: 0
 16966                           
 16967                           ; BSR set to: 0
 16968  003972  519F               	movf	___fldiv@aexp& (0+255),w,b
 16969  003974  B4D8               	btfsc	status,2,c
 16970  003976  D011               	goto	l5933
 16971                           
 16972                           ; BSR set to: 0
 16973  003978  90D8               	bcf	status,0,c
 16974  00397A  3794               	rlcf	___fldiv@rem& (0+255),f,b
 16975  00397C  3795               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 16976  00397E  3796               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 16977  003980  3797               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 16978  003982  90D8               	bcf	status,0,c
 16979  003984  3787               	rlcf	___fldiv@b& (0+255),f,b
 16980  003986  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 16981  003988  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 16982  00398A  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 16983                           
 16984                           ; BSR set to: 0
 16985  00398C  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 16986                           
 16987                           ; BSR set to: 0
 16988  00398E  8187               	bsf	___fldiv@b& (0+255),0,b
 16989                           
 16990                           ; BSR set to: 0
 16991  003990  90D8               	bcf	status,0,c
 16992  003992  379A               	rlcf	___fldiv@grs& (0+255),f,b
 16993  003994  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 16994  003996  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 16995  003998  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 16996  00399A                     l5933:
 16997                           
 16998                           ; BSR set to: 0
 16999                           
 17000                           ; BSR set to: 0
 17001  00399A  518B               	movf	___fldiv@a& (0+255),w,b
 17002  00399C  5D94               	subwf	___fldiv@rem& (0+255),w,b
 17003  00399E  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 17004  0039A0  5995               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 17005  0039A2  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 17006  0039A4  5996               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 17007  0039A6  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 17008  0039A8  5997               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 17009  0039AA  A0D8               	btfss	status,0,c
 17010  0039AC  D009               	goto	l5935
 17011                           
 17012                           ; BSR set to: 0
 17013  0039AE  8D9D               	bsf	(___fldiv@grs+3)& (0+255),6,b
 17014                           
 17015                           ; BSR set to: 0
 17016  0039B0  518B               	movf	___fldiv@a& (0+255),w,b
 17017  0039B2  5F94               	subwf	___fldiv@rem& (0+255),f,b
 17018  0039B4  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 17019  0039B6  5B95               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 17020  0039B8  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 17021  0039BA  5B96               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 17022  0039BC  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 17023  0039BE  5B97               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 17024  0039C0                     l5935:
 17025                           
 17026                           ; BSR set to: 0
 17027                           
 17028                           ; BSR set to: 0
 17029  0039C0  2B9F               	incf	___fldiv@aexp& (0+255),f,b
 17030  0039C2                     l5931:
 17031                           
 17032                           ; BSR set to: 0
 17033  0039C2  0E19               	movlw	25
 17034  0039C4  659F               	cpfsgt	___fldiv@aexp& (0+255),b
 17035  0039C6  D7D5               	goto	l5932
 17036                           
 17037                           ; BSR set to: 0
 17038                           
 17039                           ; BSR set to: 0
 17040  0039C8  5194               	movf	___fldiv@rem& (0+255),w,b
 17041  0039CA  1195               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 17042  0039CC  1196               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 17043  0039CE  1197               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 17044  0039D0  B4D8               	btfsc	status,2,c
 17045  0039D2  D011               	goto	l5938
 17046                           
 17047                           ; BSR set to: 0
 17048  0039D4  819A               	bsf	___fldiv@grs& (0+255),0,b
 17049                           
 17050                           ; BSR set to: 0
 17051  0039D6  D00F               	goto	l5938
 17052  0039D8                     
 17053                           ; BSR set to: 0
 17054                           
 17055                           ; BSR set to: 0
 17056  0039D8  90D8               	bcf	status,0,c
 17057  0039DA  3787               	rlcf	___fldiv@b& (0+255),f,b
 17058  0039DC  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 17059  0039DE  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 17060  0039E0  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 17061                           
 17062                           ; BSR set to: 0
 17063  0039E2  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 17064                           
 17065                           ; BSR set to: 0
 17066  0039E4  8187               	bsf	___fldiv@b& (0+255),0,b
 17067                           
 17068                           ; BSR set to: 0
 17069  0039E6  90D8               	bcf	status,0,c
 17070  0039E8  379A               	rlcf	___fldiv@grs& (0+255),f,b
 17071  0039EA  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 17072  0039EC  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 17073  0039EE  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 17074  0039F0  0798               	decf	___fldiv@new_exp& (0+255),f,b
 17075  0039F2  A0D8               	btfss	status,0,c
 17076  0039F4  0799               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 17077  0039F6                     l5938:
 17078                           
 17079                           ; BSR set to: 0
 17080                           
 17081                           ; BSR set to: 0
 17082  0039F6  AF89               	btfss	(___fldiv@b+2)& (0+255),7,b
 17083  0039F8  D7EF               	goto	l5939
 17084                           
 17085                           ; BSR set to: 0
 17086                           
 17087                           ; BSR set to: 0
 17088  0039FA  0E00               	movlw	0
 17089  0039FC  6F9F               	movwf	___fldiv@aexp& (0+255),b
 17090                           
 17091                           ; BSR set to: 0
 17092  0039FE  AF9D               	btfss	(___fldiv@grs+3)& (0+255),7,b
 17093  003A00  D016               	goto	l5945
 17094                           
 17095                           ; BSR set to: 0
 17096  003A02  0EFF               	movlw	255
 17097  003A04  159A               	andwf	___fldiv@grs& (0+255),w,b
 17098  003A06  6F8F               	movwf	??___fldiv& (0+255),b
 17099  003A08  0EFF               	movlw	255
 17100  003A0A  159B               	andwf	(___fldiv@grs+1)& (0+255),w,b
 17101  003A0C  6F90               	movwf	(??___fldiv+1)& (0+255),b
 17102  003A0E  0EFF               	movlw	255
 17103  003A10  159C               	andwf	(___fldiv@grs+2)& (0+255),w,b
 17104  003A12  6F91               	movwf	(??___fldiv+2)& (0+255),b
 17105  003A14  0E7F               	movlw	127
 17106  003A16  159D               	andwf	(___fldiv@grs+3)& (0+255),w,b
 17107  003A18  6F92               	movwf	(??___fldiv+3)& (0+255),b
 17108  003A1A  518F               	movf	??___fldiv& (0+255),w,b
 17109  003A1C  1190               	iorwf	(??___fldiv+1)& (0+255),w,b
 17110  003A1E  1191               	iorwf	(??___fldiv+2)& (0+255),w,b
 17111  003A20  1192               	iorwf	(??___fldiv+3)& (0+255),w,b
 17112  003A22  A4D8               	btfss	status,2,c
 17113  003A24  D002               	goto	u26290
 17114                           
 17115                           ; BSR set to: 0
 17116                           
 17117                           ; BSR set to: 0
 17118  003A26  A187               	btfss	___fldiv@b& (0+255),0,b
 17119  003A28  D002               	goto	l5945
 17120  003A2A                     u26290:
 17121                           
 17122                           ; BSR set to: 0
 17123  003A2A  0E01               	movlw	1
 17124  003A2C  6F9F               	movwf	___fldiv@aexp& (0+255),b
 17125  003A2E                     l5945:
 17126                           
 17127                           ; BSR set to: 0
 17128                           
 17129                           ; BSR set to: 0
 17130                           
 17131                           ; BSR set to: 0
 17132  003A2E  519F               	movf	___fldiv@aexp& (0+255),w,b
 17133  003A30  B4D8               	btfsc	status,2,c
 17134  003A32  D01F               	goto	l5947
 17135                           
 17136                           ; BSR set to: 0
 17137  003A34  0E01               	movlw	1
 17138  003A36  2787               	addwf	___fldiv@b& (0+255),f,b
 17139  003A38  0E00               	movlw	0
 17140  003A3A  2388               	addwfc	(___fldiv@b+1)& (0+255),f,b
 17141  003A3C  2389               	addwfc	(___fldiv@b+2)& (0+255),f,b
 17142  003A3E  238A               	addwfc	(___fldiv@b+3)& (0+255),f,b
 17143                           
 17144                           ; BSR set to: 0
 17145  003A40  A18A               	btfss	(___fldiv@b+3)& (0+255),0,b
 17146  003A42  D017               	goto	l5947
 17147                           
 17148                           ; BSR set to: 0
 17149  003A44  C087  F08F         	movff	___fldiv@b,??___fldiv
 17150  003A48  C088  F090         	movff	___fldiv@b+1,??___fldiv+1
 17151  003A4C  C089  F091         	movff	___fldiv@b+2,??___fldiv+2
 17152  003A50  C08A  F092         	movff	___fldiv@b+3,??___fldiv+3
 17153  003A54  3592               	rlcf	(??___fldiv+3)& (0+255),w,b
 17154  003A56  3392               	rrcf	(??___fldiv+3)& (0+255),f,b
 17155  003A58  3391               	rrcf	(??___fldiv+2)& (0+255),f,b
 17156  003A5A  3390               	rrcf	(??___fldiv+1)& (0+255),f,b
 17157  003A5C  338F               	rrcf	??___fldiv& (0+255),f,b
 17158  003A5E  C08F  F087         	movff	??___fldiv,___fldiv@b
 17159  003A62  C090  F088         	movff	??___fldiv+1,___fldiv@b+1
 17160  003A66  C091  F089         	movff	??___fldiv+2,___fldiv@b+2
 17161  003A6A  C092  F08A         	movff	??___fldiv+3,___fldiv@b+3
 17162                           
 17163                           ; BSR set to: 0
 17164  003A6E  4B98               	infsnz	___fldiv@new_exp& (0+255),f,b
 17165  003A70  2B99               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 17166  003A72                     l5947:
 17167                           
 17168                           ; BSR set to: 0
 17169                           
 17170                           ; BSR set to: 0
 17171                           
 17172                           ; BSR set to: 0
 17173  003A72  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 17174  003A74  D010               	goto	l5948
 17175  003A76  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 17176  003A78  E103               	bnz	u26320
 17177  003A7A  2998               	incf	___fldiv@new_exp& (0+255),w,b
 17178  003A7C  A0D8               	btfss	status,0,c
 17179  003A7E  D00B               	goto	l5948
 17180  003A80                     u26320:
 17181                           
 17182                           ; BSR set to: 0
 17183  003A80  0E00               	movlw	0
 17184  003A82  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 17185  003A84  6998               	setf	___fldiv@new_exp& (0+255),b
 17186  003A86  0E00               	movlw	0
 17187  003A88  6F87               	movwf	___fldiv@b& (0+255),b
 17188  003A8A  0E00               	movlw	0
 17189  003A8C  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17190  003A8E  0E00               	movlw	0
 17191  003A90  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17192  003A92  0E00               	movlw	0
 17193  003A94  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17194  003A96                     l5948:
 17195                           
 17196                           ; BSR set to: 0
 17197                           
 17198                           ; BSR set to: 0
 17199  003A96  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 17200  003A98  D005               	goto	u26330
 17201  003A9A  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 17202  003A9C  E111               	bnz	l17799
 17203  003A9E  0598               	decf	___fldiv@new_exp& (0+255),w,b
 17204  003AA0  B0D8               	btfsc	status,0,c
 17205  003AA2  D00E               	goto	l5949
 17206  003AA4                     u26330:
 17207                           
 17208                           ; BSR set to: 0
 17209  003AA4  0E00               	movlw	0
 17210  003AA6  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 17211  003AA8  0E00               	movlw	0
 17212  003AAA  6F98               	movwf	___fldiv@new_exp& (0+255),b
 17213  003AAC  0E00               	movlw	0
 17214  003AAE  6F87               	movwf	___fldiv@b& (0+255),b
 17215  003AB0  0E00               	movlw	0
 17216  003AB2  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17217  003AB4  0E00               	movlw	0
 17218  003AB6  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17219  003AB8  0E00               	movlw	0
 17220  003ABA  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17221  003ABC  0E00               	movlw	0
 17222  003ABE  6F93               	movwf	___fldiv@sign& (0+255),b
 17223  003AC0                     l5949:
 17224  003AC0                     l17799:
 17225                           
 17226                           ; BSR set to: 0
 17227  003AC0  C098  F09E         	movff	___fldiv@new_exp,___fldiv@bexp
 17228                           
 17229                           ; BSR set to: 0
 17230  003AC4  A19E               	btfss	___fldiv@bexp& (0+255),0,b
 17231  003AC6  D002               	goto	l5950
 17232                           
 17233                           ; BSR set to: 0
 17234  003AC8  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 17235  003ACA  D001               	goto	l5951
 17236  003ACC                     l5950:
 17237                           
 17238                           ; BSR set to: 0
 17239                           
 17240                           ; BSR set to: 0
 17241  003ACC  9F89               	bcf	(___fldiv@b+2)& (0+255),7,b
 17242  003ACE                     l5951:
 17243                           
 17244                           ; BSR set to: 0
 17245                           
 17246                           ; BSR set to: 0
 17247  003ACE  90D8               	bcf	status,0,c
 17248  003AD0  319E               	rrcf	___fldiv@bexp& (0+255),w,b
 17249  003AD2  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17250                           
 17251                           ; BSR set to: 0
 17252  003AD4  5193               	movf	___fldiv@sign& (0+255),w,b
 17253  003AD6  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 17254                           
 17255                           ; BSR set to: 0
 17256  003AD8  C087  F087         	movff	___fldiv@b,?___fldiv
 17257  003ADC  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 17258  003AE0  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 17259  003AE4  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 17260  003AE8  0012               	return	
 17261  003AEA                     __end_of___fldiv:
 17262                           	opt stack 0
 17263                           tblptru	equ	0xFF8
 17264                           tblptrh	equ	0xFF7
 17265                           tblptrl	equ	0xFF6
 17266                           tablat	equ	0xFF5
 17267                           prodh	equ	0xFF4
 17268                           prodl	equ	0xFF3
 17269                           intcon	equ	0xFF2
 17270                           intcon2	equ	0xFF1
 17271                           postinc0	equ	0xFEE
 17272                           wreg	equ	0xFE8
 17273                           postdec1	equ	0xFE5
 17274                           fsr1l	equ	0xFE1
 17275                           indf2	equ	0xFDF
 17276                           postinc2	equ	0xFDE
 17277                           plusw2	equ	0xFDB
 17278                           fsr2h	equ	0xFDA
 17279                           fsr2l	equ	0xFD9
 17280                           status	equ	0xFD8
 17281                           
 17282 ;; *************** function _Function_D_1 *****************
 17283 ;; Defined at:
 17284 ;;		line 622 in file "menu.c"
 17285 ;; Parameters:    Size  Location     Type
 17286 ;;		None
 17287 ;; Auto vars:     Size  Location     Type
 17288 ;;		None
 17289 ;; Return value:  Size  Location     Type
 17290 ;;                  1    wreg      void 
 17291 ;; Registers used:
 17292 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17293 ;; Tracked objects:
 17294 ;;		On entry : 0/0
 17295 ;;		On exit  : 0/0
 17296 ;;		Unchanged: 0/0
 17297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17300 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17301 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17302 ;;Total ram usage:        1 bytes
 17303 ;; Hardware stack levels used:    1
 17304 ;; Hardware stack levels required when called:    9
 17305 ;; This function calls:
 17306 ;;		_Lcd_Print_String
 17307 ;;		___lbmod
 17308 ;;		___wmul
 17309 ;;		_clear_row1
 17310 ;;		_clear_row2
 17311 ;;		_processEncoderBuxton
 17312 ;;		_setControllerResolution
 17313 ;; This function is called by:
 17314 ;;		_Function_D
 17315 ;; This function uses a non-reentrant model
 17316 ;;
 17317                           
 17318                           	psect	text49
 17319  0078DE                     __ptext49:
 17320                           	opt stack 0
 17321  0078DE                     _Function_D_1:
 17322                           	opt stack 19
 17323                           
 17324                           ;menu.c: 624: which_screen = POTS_RES_MENU;
 17325                           
 17326                           ; BSR set to: 0
 17327                           ;incstack = 0
 17328  0078DE  0E0F               	movlw	15
 17329  0078E0  0100               	movlb	0	; () banked
 17330  0078E2  6FF9               	movwf	_which_screen& (0+255),b
 17331                           
 17332                           ; BSR set to: 0
 17333                           ;menu.c: 625: lcd_print_once = 0;
 17334  0078E4  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17335                           
 17336                           ; BSR set to: 0
 17337                           ;menu.c: 626: encoder_click = 0;
 17338  0078E6  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17339                           
 17340                           ;menu.c: 628: potsResoMenu.selector = POT_MODE;
 17341  0078E8  0E00               	movlw	0
 17342  0078EA  B836               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17343  0078EC  0E01               	movlw	1
 17344  0078EE  0101               	movlb	1	; () banked
 17345  0078F0  6F58               	movwf	(_potsResoMenu+2)& (0+255),b
 17346                           
 17347                           ;menu.c: 630: while(encoder_click == 0) {
 17348  0078F2  D02E               	goto	l3514
 17349  0078F4                     
 17350                           ;menu.c: 631: processEncoderBuxton();
 17351                           
 17352                           ; BSR set to: 1
 17353  0078F4  EC09  F000         	call	_processEncoderBuxton	;wreg free
 17354                           
 17355                           ;menu.c: 632: if (lcd_print_once == 0) {
 17356  0078F8  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17357  0078FA  D029               	goto	l3516
 17358                           
 17359                           ;menu.c: 633: clear_row1();
 17360  0078FC  EC5D  F04A         	call	_clear_row1	;wreg free
 17361                           
 17362                           ;menu.c: 634: Lcd_Print_String("Pots Resolution:");
 17363  007900  0EA8               	movlw	low STR_30
 17364  007902  0100               	movlb	0	; () banked
 17365  007904  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17366  007906  0EFD               	movlw	high STR_30
 17367  007908  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17368  00790A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 17369                           
 17370                           ;menu.c: 635: clear_row2();
 17371  00790E  EC49  F04A         	call	_clear_row2	;wreg free
 17372                           
 17373                           ;menu.c: 636: Lcd_Print_String(LCD_STRINGS[(potsResoMenu.selector % potsResoMenu.number)
      +                           + potsResoMenu.address]);
 17374  007912  C156  F060         	movff	_potsResoMenu,___lbmod@divisor
 17375  007916  0101               	movlb	1	; () banked
 17376  007918  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 17377  00791A  ECC8  F049         	call	___lbmod
 17378  00791E  0100               	movlb	0	; () banked
 17379  007920  6F70               	movwf	??_Function_D_1& (0+255),b
 17380  007922  5170               	movf	??_Function_D_1& (0+255),w,b
 17381  007924  0101               	movlb	1	; () banked
 17382  007926  2557               	addwf	(_potsResoMenu+1)& (0+255),w,b
 17383  007928  0100               	movlb	0	; () banked
 17384  00792A  6F64               	movwf	___wmul@multiplier& (0+255),b
 17385  00792C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 17386  00792E  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17387  007930  0E00               	movlw	0
 17388  007932  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17389  007934  0E11               	movlw	17
 17390  007936  6F66               	movwf	___wmul@multiplicand& (0+255),b
 17391  007938  EC71  F04A         	call	___wmul	;wreg free
 17392  00793C  0E9E               	movlw	low _LCD_STRINGS
 17393  00793E  0100               	movlb	0	; () banked
 17394  007940  2564               	addwf	?___wmul& (0+255),w,b
 17395  007942  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17396  007944  0EF3               	movlw	high _LCD_STRINGS
 17397  007946  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 17398  007948  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17399  00794A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 17400  00794E                     l3516:
 17401                           
 17402                           ;menu.c: 637: }
 17403                           ;menu.c: 638: lcd_print_once = 1;
 17404  00794E  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17405  007950                     l3514:
 17406  007950  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17407  007952  D7D0               	goto	l3515
 17408                           
 17409                           ;menu.c: 639: }
 17410                           ;menu.c: 645: POT_MODE = potsResoMenu.selector;
 17411  007954  0101               	movlb	1	; () banked
 17412  007956  A158               	btfss	(_potsResoMenu+2)& (0+255),0,b
 17413  007958  D002               	goto	u33400
 17414  00795A  8836               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17415  00795C  D001               	goto	u33415
 17416  00795E                     u33400:
 17417  00795E  9836               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17418  007960                     u33415:
 17419                           
 17420                           ;menu.c: 646: setControllerResolution();
 17421  007960  ECF5  F049         	call	_setControllerResolution	;wreg free
 17422  007964  0012               	return		;funcret
 17423  007966                     __end_of_Function_D_1:
 17424                           	opt stack 0
 17425                           tblptru	equ	0xFF8
 17426                           tblptrh	equ	0xFF7
 17427                           tblptrl	equ	0xFF6
 17428                           tablat	equ	0xFF5
 17429                           prodh	equ	0xFF4
 17430                           prodl	equ	0xFF3
 17431                           intcon	equ	0xFF2
 17432                           intcon2	equ	0xFF1
 17433                           postinc0	equ	0xFEE
 17434                           wreg	equ	0xFE8
 17435                           postdec1	equ	0xFE5
 17436                           fsr1l	equ	0xFE1
 17437                           indf2	equ	0xFDF
 17438                           postinc2	equ	0xFDE
 17439                           plusw2	equ	0xFDB
 17440                           fsr2h	equ	0xFDA
 17441                           fsr2l	equ	0xFD9
 17442                           status	equ	0xFD8
 17443                           
 17444 ;; *************** function _setControllerResolution *****************
 17445 ;; Defined at:
 17446 ;;		line 115 in file "menu.c"
 17447 ;; Parameters:    Size  Location     Type
 17448 ;;		None
 17449 ;; Auto vars:     Size  Location     Type
 17450 ;;  i               1    0[BANK0 ] unsigned char 
 17451 ;; Return value:  Size  Location     Type
 17452 ;;                  1    wreg      void 
 17453 ;; Registers used:
 17454 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17455 ;; Tracked objects:
 17456 ;;		On entry : 0/0
 17457 ;;		On exit  : 0/0
 17458 ;;		Unchanged: 0/0
 17459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17463 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17464 ;;Total ram usage:        1 bytes
 17465 ;; Hardware stack levels used:    1
 17466 ;; Hardware stack levels required when called:    5
 17467 ;; This function calls:
 17468 ;;		Nothing
 17469 ;; This function is called by:
 17470 ;;		_Function_D_1
 17471 ;; This function uses a non-reentrant model
 17472 ;;
 17473                           
 17474                           	psect	text50
 17475  0093EA                     __ptext50:
 17476                           	opt stack 0
 17477  0093EA                     _setControllerResolution:
 17478                           	opt stack 22
 17479                           
 17480                           ;menu.c: 117: for(unsigned char i=0;i<16;i++){
 17481                           
 17482                           ;incstack = 0
 17483  0093EA  0E00               	movlw	0
 17484  0093EC  0100               	movlb	0	; () banked
 17485  0093EE  6F60               	movwf	setControllerResolution@i& (0+255),b
 17486  0093F0                     l18753:
 17487                           
 17488                           ; BSR set to: 0
 17489  0093F0  0E0F               	movlw	15
 17490  0093F2  6560               	cpfsgt	setControllerResolution@i& (0+255),b
 17491  0093F4  D001               	goto	l3349
 17492  0093F6  0012               	return	
 17493  0093F8                     l3349:
 17494                           
 17495                           ; BSR set to: 0
 17496                           ;menu.c: 119: inputPotsArray[i].controller_resolution = POT_MODE;
 17497                           
 17498                           ; BSR set to: 0
 17499  0093F8  5160               	movf	setControllerResolution@i& (0+255),w,b
 17500  0093FA  0D03               	mullw	3
 17501  0093FC  0EAC               	movlw	low _inputPotsArray
 17502  0093FE  24F3               	addwf	prodl,w,c
 17503  009400  6ED9               	movwf	fsr2l,c
 17504  009402  0E02               	movlw	high _inputPotsArray
 17505  009404  20F4               	addwfc	prodh,w,c
 17506  009406  6EDA               	movwf	fsr2h,c
 17507  009408  0102               	movlb	2	; () banked
 17508  00940A  90DF               	bcf	indf2,0,c
 17509  00940C  B836               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17510  00940E  80DF               	bsf	indf2,0,c
 17511  009410  0100               	movlb	0	; () banked
 17512  009412  2B60               	incf	setControllerResolution@i& (0+255),f,b
 17513  009414  D7ED               	goto	l18753
 17514  009416                     __end_of_setControllerResolution:
 17515                           	opt stack 0
 17516                           tblptru	equ	0xFF8
 17517                           tblptrh	equ	0xFF7
 17518                           tblptrl	equ	0xFF6
 17519                           tablat	equ	0xFF5
 17520                           prodh	equ	0xFF4
 17521                           prodl	equ	0xFF3
 17522                           intcon	equ	0xFF2
 17523                           intcon2	equ	0xFF1
 17524                           postinc0	equ	0xFEE
 17525                           wreg	equ	0xFE8
 17526                           postdec1	equ	0xFE5
 17527                           fsr1l	equ	0xFE1
 17528                           indf2	equ	0xFDF
 17529                           postinc2	equ	0xFDE
 17530                           plusw2	equ	0xFDB
 17531                           fsr2h	equ	0xFDA
 17532                           fsr2l	equ	0xFD9
 17533                           status	equ	0xFD8
 17534                           
 17535 ;; *************** function _Function_C *****************
 17536 ;; Defined at:
 17537 ;;		line 597 in file "menu.c"
 17538 ;; Parameters:    Size  Location     Type
 17539 ;;		None
 17540 ;; Auto vars:     Size  Location     Type
 17541 ;;		None
 17542 ;; Return value:  Size  Location     Type
 17543 ;;                  1    wreg      void 
 17544 ;; Registers used:
 17545 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17546 ;; Tracked objects:
 17547 ;;		On entry : 0/0
 17548 ;;		On exit  : 0/0
 17549 ;;		Unchanged: 0/0
 17550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17554 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17555 ;;Total ram usage:        1 bytes
 17556 ;; Hardware stack levels used:    1
 17557 ;; Hardware stack levels required when called:   10
 17558 ;; This function calls:
 17559 ;;		_Function_C_1
 17560 ;;		_Function_C_2
 17561 ;;		_Function_C_3
 17562 ;;		_Lcd_Print_String
 17563 ;;		___lbmod
 17564 ;;		___wmul
 17565 ;;		_clear_row2
 17566 ;;		_processEncoderBuxton
 17567 ;; This function is called by:
 17568 ;;		_menu_lcd
 17569 ;; This function uses a non-reentrant model
 17570 ;;
 17571                           
 17572                           	psect	text51
 17573  007966                     __ptext51:
 17574                           	opt stack 0
 17575  007966                     _Function_C:
 17576                           	opt stack 19
 17577                           
 17578                           ;menu.c: 599: which_screen = DRUM_MENU;
 17579                           
 17580                           ; BSR set to: 0
 17581                           ;incstack = 0
 17582  007966  0E05               	movlw	5
 17583  007968  0100               	movlb	0	; () banked
 17584  00796A  6FF9               	movwf	_which_screen& (0+255),b
 17585                           
 17586                           ; BSR set to: 0
 17587                           ;menu.c: 600: lcd_print_once = 0;
 17588  00796C  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17589                           
 17590                           ;menu.c: 602: drumMenu.selector = DRUM_MODE;
 17591  00796E  0E00               	movlw	0
 17592  007970  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17593  007972  0E01               	movlw	1
 17594  007974  6E43               	movwf	_drumMenu+2,c
 17595                           
 17596                           ;menu.c: 604: while(encoder_click == 0) {
 17597  007976  D022               	goto	l3502
 17598  007978                     
 17599                           ;menu.c: 605: processEncoderBuxton();
 17600                           
 17601                           ; BSR set to: 0
 17602  007978  EC09  F000         	call	_processEncoderBuxton	;wreg free
 17603                           
 17604                           ;menu.c: 606: if (lcd_print_once == 0) {
 17605  00797C  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17606  00797E  D01D               	goto	l3504
 17607                           
 17608                           ;menu.c: 607: clear_row2();
 17609  007980  EC49  F04A         	call	_clear_row2	;wreg free
 17610                           
 17611                           ;menu.c: 608: Lcd_Print_String(LCD_STRINGS[(drumMenu.selector % drumMenu.number) + drumM
      +                          enu.address]);
 17612  007984  C041  F060         	movff	_drumMenu,___lbmod@divisor
 17613  007988  5043               	movf	_drumMenu+2,w,c
 17614  00798A  ECC8  F049         	call	___lbmod
 17615  00798E  0100               	movlb	0	; () banked
 17616  007990  6F7C               	movwf	??_Function_C& (0+255),b
 17617  007992  517C               	movf	??_Function_C& (0+255),w,b
 17618  007994  2442               	addwf	_drumMenu+1,w,c
 17619  007996  6F64               	movwf	___wmul@multiplier& (0+255),b
 17620  007998  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 17621  00799A  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17622  00799C  0E00               	movlw	0
 17623  00799E  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17624  0079A0  0E11               	movlw	17
 17625  0079A2  6F66               	movwf	___wmul@multiplicand& (0+255),b
 17626  0079A4  EC71  F04A         	call	___wmul	;wreg free
 17627  0079A8  0E9E               	movlw	low _LCD_STRINGS
 17628  0079AA  0100               	movlb	0	; () banked
 17629  0079AC  2564               	addwf	?___wmul& (0+255),w,b
 17630  0079AE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17631  0079B0  0EF3               	movlw	high _LCD_STRINGS
 17632  0079B2  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 17633  0079B4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17634  0079B6  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 17635  0079BA                     l3504:
 17636                           
 17637                           ;menu.c: 610: }
 17638                           ;menu.c: 611: lcd_print_once = 1;
 17639  0079BA  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17640  0079BC                     l3502:
 17641  0079BC  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17642  0079BE  D7DC               	goto	l3503
 17643                           
 17644                           ;menu.c: 612: }
 17645                           ;menu.c: 614: if(drumMenu.selector == 0){DRUM_MODE = 0;}
 17646  0079C0  5043               	movf	_drumMenu+2,w,c
 17647  0079C2  B4D8               	btfsc	status,2,c
 17648  0079C4  9A32               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17649                           
 17650                           ;menu.c: 615: if(drumMenu.selector == 1){DRUM_MODE = 1;}
 17651  0079C6  0443               	decf	_drumMenu+2,w,c
 17652  0079C8  B4D8               	btfsc	status,2,c
 17653  0079CA  8A32               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17654                           
 17655                           ;menu.c: 616: if(drumMenu.selector == 2) {Function_C_1();}
 17656  0079CC  0E02               	movlw	2
 17657  0079CE  1843               	xorwf	_drumMenu+2,w,c
 17658  0079D0  B4D8               	btfsc	status,2,c
 17659  0079D2  ECDF  F03B         	call	_Function_C_1	;wreg free
 17660                           
 17661                           ;menu.c: 617: if(drumMenu.selector == 3) {Function_C_2();}
 17662  0079D6  0E03               	movlw	3
 17663  0079D8  1843               	xorwf	_drumMenu+2,w,c
 17664  0079DA  B4D8               	btfsc	status,2,c
 17665  0079DC  EC67  F030         	call	_Function_C_2	;wreg free
 17666                           
 17667                           ;menu.c: 618: if(drumMenu.selector == 4) {Function_C_3();}
 17668  0079E0  0E04               	movlw	4
 17669  0079E2  1843               	xorwf	_drumMenu+2,w,c
 17670  0079E4  A4D8               	btfss	status,2,c
 17671  0079E6  0012               	return	
 17672  0079E8  ECD3  F02F         	call	_Function_C_3	;wreg free
 17673  0079EC  0012               	return	
 17674  0079EE                     __end_of_Function_C:
 17675                           	opt stack 0
 17676                           tblptru	equ	0xFF8
 17677                           tblptrh	equ	0xFF7
 17678                           tblptrl	equ	0xFF6
 17679                           tablat	equ	0xFF5
 17680                           prodh	equ	0xFF4
 17681                           prodl	equ	0xFF3
 17682                           intcon	equ	0xFF2
 17683                           intcon2	equ	0xFF1
 17684                           postinc0	equ	0xFEE
 17685                           wreg	equ	0xFE8
 17686                           postdec1	equ	0xFE5
 17687                           fsr1l	equ	0xFE1
 17688                           indf2	equ	0xFDF
 17689                           postinc2	equ	0xFDE
 17690                           plusw2	equ	0xFDB
 17691                           fsr2h	equ	0xFDA
 17692                           fsr2l	equ	0xFD9
 17693                           status	equ	0xFD8
 17694                           
 17695 ;; *************** function _Function_C_3 *****************
 17696 ;; Defined at:
 17697 ;;		line 550 in file "menu.c"
 17698 ;; Parameters:    Size  Location     Type
 17699 ;;		None
 17700 ;; Auto vars:     Size  Location     Type
 17701 ;;  array_index     1   27[BANK0 ] unsigned char 
 17702 ;; Return value:  Size  Location     Type
 17703 ;;                  1    wreg      void 
 17704 ;; Registers used:
 17705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17706 ;; Tracked objects:
 17707 ;;		On entry : 0/0
 17708 ;;		On exit  : 0/0
 17709 ;;		Unchanged: 0/0
 17710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17714 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17715 ;;Total ram usage:        2 bytes
 17716 ;; Hardware stack levels used:    1
 17717 ;; Hardware stack levels required when called:    9
 17718 ;; This function calls:
 17719 ;;		_Lcd_Print_String
 17720 ;;		_Lcd_Set_Cursor
 17721 ;;		___lbmod
 17722 ;;		___wmul
 17723 ;;		_clear_row1
 17724 ;;		_clear_row2
 17725 ;;		_int2string
 17726 ;;		_processEncoderBuxton
 17727 ;; This function is called by:
 17728 ;;		_Function_C
 17729 ;; This function uses a non-reentrant model
 17730 ;;
 17731                           
 17732                           	psect	text52
 17733  005FA6                     __ptext52:
 17734                           	opt stack 0
 17735  005FA6                     _Function_C_3:
 17736                           	opt stack 19
 17737                           
 17738                           ;menu.c: 552: which_screen = DRUMS_CC_MENU;
 17739                           
 17740                           ;incstack = 0
 17741  005FA6  0E0E               	movlw	14
 17742  005FA8  0100               	movlb	0	; () banked
 17743  005FAA  6FF9               	movwf	_which_screen& (0+255),b
 17744                           
 17745                           ; BSR set to: 0
 17746                           ;menu.c: 553: lcd_print_once = 0;
 17747  005FAC  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17748                           
 17749                           ; BSR set to: 0
 17750                           ;menu.c: 554: encoder_click = 0;
 17751  005FAE  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17752                           
 17753                           ;menu.c: 556: while(encoder_click == 0) {
 17754  005FB0  D02E               	goto	l3487
 17755  005FB2                     
 17756                           ;menu.c: 557: processEncoderBuxton();
 17757                           
 17758                           ; BSR set to: 0
 17759  005FB2  EC09  F000         	call	_processEncoderBuxton	;wreg free
 17760                           
 17761                           ;menu.c: 558: if (lcd_print_once == 0) {
 17762  005FB6  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17763  005FB8  D029               	goto	l3489
 17764                           
 17765                           ;menu.c: 559: clear_row1();
 17766  005FBA  EC5D  F04A         	call	_clear_row1	;wreg free
 17767                           
 17768                           ;menu.c: 560: Lcd_Print_String("Set CC Number:");
 17769  005FBE  0E6B               	movlw	low STR_29
 17770  005FC0  0100               	movlb	0	; () banked
 17771  005FC2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17772  005FC4  0EFE               	movlw	high STR_29
 17773  005FC6  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17774  005FC8  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 17775                           
 17776                           ;menu.c: 561: clear_row2();
 17777  005FCC  EC49  F04A         	call	_clear_row2	;wreg free
 17778                           
 17779                           ;menu.c: 562: Lcd_Print_String(LCD_STRINGS[(drumCCMenu.selector % drumCCMenu.number) + d
      +                          rumCCMenu.address]);
 17780  005FD0  C159  F060         	movff	_drumCCMenu,___lbmod@divisor
 17781  005FD4  0101               	movlb	1	; () banked
 17782  005FD6  515B               	movf	(_drumCCMenu+2)& (0+255),w,b
 17783  005FD8  ECC8  F049         	call	___lbmod
 17784  005FDC  0100               	movlb	0	; () banked
 17785  005FDE  6F7A               	movwf	??_Function_C_3& (0+255),b
 17786  005FE0  517A               	movf	??_Function_C_3& (0+255),w,b
 17787  005FE2  0101               	movlb	1	; () banked
 17788  005FE4  255A               	addwf	(_drumCCMenu+1)& (0+255),w,b
 17789  005FE6  0100               	movlb	0	; () banked
 17790  005FE8  6F64               	movwf	___wmul@multiplier& (0+255),b
 17791  005FEA  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 17792  005FEC  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17793  005FEE  0E00               	movlw	0
 17794  005FF0  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17795  005FF2  0E11               	movlw	17
 17796  005FF4  6F66               	movwf	___wmul@multiplicand& (0+255),b
 17797  005FF6  EC71  F04A         	call	___wmul	;wreg free
 17798  005FFA  0E9E               	movlw	low _LCD_STRINGS
 17799  005FFC  0100               	movlb	0	; () banked
 17800  005FFE  2564               	addwf	?___wmul& (0+255),w,b
 17801  006000  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17802  006002  0EF3               	movlw	high _LCD_STRINGS
 17803  006004  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 17804  006006  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17805  006008  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 17806  00600C                     l3489:
 17807                           
 17808                           ;menu.c: 563: }
 17809                           ;menu.c: 564: lcd_print_once = 1;
 17810  00600C  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17811  00600E                     l3487:
 17812  00600E  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17813  006010  D7D0               	goto	l3488
 17814                           
 17815                           ;menu.c: 565: }
 17816                           ;menu.c: 567: which_screen = BLANK;
 17817  006012  0E00               	movlw	0
 17818  006014  0100               	movlb	0	; () banked
 17819  006016  6FF9               	movwf	_which_screen& (0+255),b
 17820                           
 17821                           ; BSR set to: 0
 17822                           ;menu.c: 568: lcd_print_once = 0;
 17823  006018  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17824                           
 17825                           ; BSR set to: 0
 17826                           ;menu.c: 569: encoder_click = 0;
 17827  00601A  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17828                           
 17829                           ; BSR set to: 0
 17830                           ;menu.c: 570: unsigned char array_index = drumCCMenu.selector;
 17831  00601C  C15B  F07B         	movff	_drumCCMenu+2,Function_C_3@array_index
 17832                           
 17833                           ;menu.c: 572: while(encoder_click == 0) {
 17834  006020  D053               	goto	l3493
 17835  006022                     l3492:
 17836                           
 17837                           ;menu.c: 574: if(lcd_print_once == 0) {
 17838  006022  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17839  006024  D051               	goto	l3493
 17840                           
 17841                           ;menu.c: 575: if (encoder_direction == 0x10) {
 17842  006026  0E10               	movlw	16
 17843  006028  0100               	movlb	0	; () banked
 17844  00602A  19EB               	xorwf	_encoder_direction& (0+255),w,b
 17845  00602C  A4D8               	btfss	status,2,c
 17846  00602E  D016               	goto	l3494
 17847                           
 17848                           ; BSR set to: 0
 17849                           ;menu.c: 576: if(DRUM_CC[array_index] < 127) {
 17850  006030  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17851  006032  0D01               	mullw	1
 17852  006034  0ED7               	movlw	low _DRUM_CC
 17853  006036  24F3               	addwf	prodl,w,c
 17854  006038  6ED9               	movwf	fsr2l,c
 17855  00603A  0E01               	movlw	high _DRUM_CC
 17856  00603C  20F4               	addwfc	prodh,w,c
 17857  00603E  6EDA               	movwf	fsr2h,c
 17858  006040  0E7F               	movlw	127
 17859  006042  60DF               	cpfslt	indf2,c
 17860  006044  D009               	goto	l3495
 17861                           
 17862                           ; BSR set to: 0
 17863                           ;menu.c: 577: DRUM_CC[array_index]++;
 17864  006046  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17865  006048  0D01               	mullw	1
 17866  00604A  0ED7               	movlw	low _DRUM_CC
 17867  00604C  24F3               	addwf	prodl,w,c
 17868  00604E  6ED9               	movwf	fsr2l,c
 17869  006050  0E01               	movlw	high _DRUM_CC
 17870  006052  20F4               	addwfc	prodh,w,c
 17871  006054  6EDA               	movwf	fsr2h,c
 17872  006056  2ADF               	incf	indf2,f,c
 17873  006058                     l3495:
 17874                           
 17875                           ; BSR set to: 0
 17876                           ;menu.c: 578: }
 17877                           ;menu.c: 579: encoder_direction = 0x00;
 17878                           
 17879                           ; BSR set to: 0
 17880  006058  0E00               	movlw	0
 17881  00605A  6FEB               	movwf	_encoder_direction& (0+255),b
 17882  00605C                     l3494:
 17883                           
 17884                           ; BSR set to: 0
 17885                           ;menu.c: 580: }
 17886                           ;menu.c: 582: if (encoder_direction == 0x20) {
 17887                           
 17888                           ; BSR set to: 0
 17889  00605C  0E20               	movlw	32
 17890  00605E  19EB               	xorwf	_encoder_direction& (0+255),w,b
 17891  006060  A4D8               	btfss	status,2,c
 17892  006062  D016               	goto	l3496
 17893                           
 17894                           ; BSR set to: 0
 17895                           ;menu.c: 583: if(DRUM_CC[array_index] > 0) {
 17896  006064  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17897  006066  0D01               	mullw	1
 17898  006068  0ED7               	movlw	low _DRUM_CC
 17899  00606A  24F3               	addwf	prodl,w,c
 17900  00606C  6ED9               	movwf	fsr2l,c
 17901  00606E  0E01               	movlw	high _DRUM_CC
 17902  006070  20F4               	addwfc	prodh,w,c
 17903  006072  6EDA               	movwf	fsr2h,c
 17904  006074  50DF               	movf	indf2,w,c
 17905  006076  B4D8               	btfsc	status,2,c
 17906  006078  D009               	goto	l3497
 17907                           
 17908                           ; BSR set to: 0
 17909                           ;menu.c: 584: DRUM_CC[array_index]--;
 17910  00607A  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17911  00607C  0D01               	mullw	1
 17912  00607E  0ED7               	movlw	low _DRUM_CC
 17913  006080  24F3               	addwf	prodl,w,c
 17914  006082  6ED9               	movwf	fsr2l,c
 17915  006084  0E01               	movlw	high _DRUM_CC
 17916  006086  20F4               	addwfc	prodh,w,c
 17917  006088  6EDA               	movwf	fsr2h,c
 17918  00608A  06DF               	decf	indf2,f,c
 17919  00608C                     l3497:
 17920                           
 17921                           ; BSR set to: 0
 17922                           ;menu.c: 585: }
 17923                           ;menu.c: 586: encoder_direction = 0x00;
 17924                           
 17925                           ; BSR set to: 0
 17926  00608C  0E00               	movlw	0
 17927  00608E  6FEB               	movwf	_encoder_direction& (0+255),b
 17928  006090                     l3496:
 17929                           
 17930                           ; BSR set to: 0
 17931                           ;menu.c: 587: }
 17932                           ;menu.c: 589: int2string(DRUM_CC[array_index]);
 17933                           
 17934                           ; BSR set to: 0
 17935  006090  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17936  006092  0D01               	mullw	1
 17937  006094  0ED7               	movlw	low _DRUM_CC
 17938  006096  24F3               	addwf	prodl,w,c
 17939  006098  6ED9               	movwf	fsr2l,c
 17940  00609A  0E01               	movlw	high _DRUM_CC
 17941  00609C  20F4               	addwfc	prodh,w,c
 17942  00609E  6EDA               	movwf	fsr2h,c
 17943  0060A0  50DF               	movf	indf2,w,c
 17944  0060A2  6F7A               	movwf	??_Function_C_3& (0+255),b
 17945  0060A4  517A               	movf	??_Function_C_3& (0+255),w,b
 17946  0060A6  6F74               	movwf	int2string@number& (0+255),b
 17947  0060A8  6B75               	clrf	(int2string@number+1)& (0+255),b
 17948  0060AA  EC52  F035         	call	_int2string	;wreg free
 17949                           
 17950                           ;menu.c: 590: Lcd_Set_Cursor(2,13);
 17951  0060AE  0E0D               	movlw	13
 17952  0060B0  0100               	movlb	0	; () banked
 17953  0060B2  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 17954  0060B4  0E02               	movlw	2
 17955  0060B6  ECF7  F045         	call	_Lcd_Set_Cursor
 17956                           
 17957                           ;menu.c: 591: Lcd_Print_String(string2display);
 17958  0060BA  0E82               	movlw	low _string2display
 17959  0060BC  0100               	movlb	0	; () banked
 17960  0060BE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17961  0060C0  0E01               	movlw	high _string2display
 17962  0060C2  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17963  0060C4  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 17964  0060C8                     l3493:
 17965  0060C8  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 17966  0060CA  0012               	return	
 17967  0060CC  D7AA               	goto	l3492
 17968  0060CE                     __end_of_Function_C_3:
 17969                           	opt stack 0
 17970                           tblptru	equ	0xFF8
 17971                           tblptrh	equ	0xFF7
 17972                           tblptrl	equ	0xFF6
 17973                           tablat	equ	0xFF5
 17974                           prodh	equ	0xFF4
 17975                           prodl	equ	0xFF3
 17976                           intcon	equ	0xFF2
 17977                           intcon2	equ	0xFF1
 17978                           postinc0	equ	0xFEE
 17979                           wreg	equ	0xFE8
 17980                           postdec1	equ	0xFE5
 17981                           fsr1l	equ	0xFE1
 17982                           indf2	equ	0xFDF
 17983                           postinc2	equ	0xFDE
 17984                           plusw2	equ	0xFDB
 17985                           fsr2h	equ	0xFDA
 17986                           fsr2l	equ	0xFD9
 17987                           status	equ	0xFD8
 17988                           
 17989 ;; *************** function _Function_C_2 *****************
 17990 ;; Defined at:
 17991 ;;		line 502 in file "menu.c"
 17992 ;; Parameters:    Size  Location     Type
 17993 ;;		None
 17994 ;; Auto vars:     Size  Location     Type
 17995 ;;  array_index     1   27[BANK0 ] unsigned char 
 17996 ;; Return value:  Size  Location     Type
 17997 ;;                  1    wreg      void 
 17998 ;; Registers used:
 17999 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18000 ;; Tracked objects:
 18001 ;;		On entry : 0/0
 18002 ;;		On exit  : 0/0
 18003 ;;		Unchanged: 0/0
 18004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18007 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18008 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18009 ;;Total ram usage:        2 bytes
 18010 ;; Hardware stack levels used:    1
 18011 ;; Hardware stack levels required when called:    9
 18012 ;; This function calls:
 18013 ;;		_Lcd_Print_String
 18014 ;;		_Lcd_Set_Cursor
 18015 ;;		___lbmod
 18016 ;;		___wmul
 18017 ;;		_clear_row1
 18018 ;;		_clear_row2
 18019 ;;		_int2string
 18020 ;;		_processEncoderBuxton
 18021 ;; This function is called by:
 18022 ;;		_Function_C
 18023 ;; This function uses a non-reentrant model
 18024 ;;
 18025                           
 18026                           	psect	text53
 18027  0060CE                     __ptext53:
 18028                           	opt stack 0
 18029  0060CE                     _Function_C_2:
 18030                           	opt stack 19
 18031                           
 18032                           ;menu.c: 504: which_screen = DRUMS_NN_MENU;
 18033                           
 18034                           ;incstack = 0
 18035  0060CE  0E0D               	movlw	13
 18036  0060D0  0100               	movlb	0	; () banked
 18037  0060D2  6FF9               	movwf	_which_screen& (0+255),b
 18038                           
 18039                           ; BSR set to: 0
 18040                           ;menu.c: 505: lcd_print_once = 0;
 18041  0060D4  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18042                           
 18043                           ; BSR set to: 0
 18044                           ;menu.c: 506: encoder_click = 0;
 18045  0060D6  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18046                           
 18047                           ;menu.c: 508: while(encoder_click == 0) {
 18048  0060D8  D02E               	goto	l3472
 18049  0060DA                     
 18050                           ;menu.c: 509: processEncoderBuxton();
 18051                           
 18052                           ; BSR set to: 0
 18053  0060DA  EC09  F000         	call	_processEncoderBuxton	;wreg free
 18054                           
 18055                           ;menu.c: 510: if (lcd_print_once == 0) {
 18056  0060DE  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18057  0060E0  D029               	goto	l3474
 18058                           
 18059                           ;menu.c: 511: clear_row1();
 18060  0060E2  EC5D  F04A         	call	_clear_row1	;wreg free
 18061                           
 18062                           ;menu.c: 512: Lcd_Print_String("Set Note Number:");
 18063  0060E6  0ECA               	movlw	low STR_28
 18064  0060E8  0100               	movlb	0	; () banked
 18065  0060EA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18066  0060EC  0EFD               	movlw	high STR_28
 18067  0060EE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18068  0060F0  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 18069                           
 18070                           ;menu.c: 513: clear_row2();
 18071  0060F4  EC49  F04A         	call	_clear_row2	;wreg free
 18072                           
 18073                           ;menu.c: 514: Lcd_Print_String(LCD_STRINGS[(drumNNMenu.selector % drumNNMenu.number) + d
      +                          rumNNMenu.address]);
 18074  0060F8  C15C  F060         	movff	_drumNNMenu,___lbmod@divisor
 18075  0060FC  0101               	movlb	1	; () banked
 18076  0060FE  515E               	movf	(_drumNNMenu+2)& (0+255),w,b
 18077  006100  ECC8  F049         	call	___lbmod
 18078  006104  0100               	movlb	0	; () banked
 18079  006106  6F7A               	movwf	??_Function_C_2& (0+255),b
 18080  006108  517A               	movf	??_Function_C_2& (0+255),w,b
 18081  00610A  0101               	movlb	1	; () banked
 18082  00610C  255D               	addwf	(_drumNNMenu+1)& (0+255),w,b
 18083  00610E  0100               	movlb	0	; () banked
 18084  006110  6F64               	movwf	___wmul@multiplier& (0+255),b
 18085  006112  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 18086  006114  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18087  006116  0E00               	movlw	0
 18088  006118  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18089  00611A  0E11               	movlw	17
 18090  00611C  6F66               	movwf	___wmul@multiplicand& (0+255),b
 18091  00611E  EC71  F04A         	call	___wmul	;wreg free
 18092  006122  0E9E               	movlw	low _LCD_STRINGS
 18093  006124  0100               	movlb	0	; () banked
 18094  006126  2564               	addwf	?___wmul& (0+255),w,b
 18095  006128  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18096  00612A  0EF3               	movlw	high _LCD_STRINGS
 18097  00612C  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 18098  00612E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18099  006130  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 18100  006134                     l3474:
 18101                           
 18102                           ;menu.c: 515: }
 18103                           ;menu.c: 516: lcd_print_once = 1;
 18104  006134  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18105  006136                     l3472:
 18106  006136  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 18107  006138  D7D0               	goto	l3473
 18108                           
 18109                           ;menu.c: 517: }
 18110                           ;menu.c: 519: which_screen = BLANK;
 18111  00613A  0E00               	movlw	0
 18112  00613C  0100               	movlb	0	; () banked
 18113  00613E  6FF9               	movwf	_which_screen& (0+255),b
 18114                           
 18115                           ; BSR set to: 0
 18116                           ;menu.c: 520: lcd_print_once = 0;
 18117  006140  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18118                           
 18119                           ; BSR set to: 0
 18120                           ;menu.c: 521: encoder_click = 0;
 18121  006142  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18122                           
 18123                           ; BSR set to: 0
 18124                           ;menu.c: 522: unsigned char array_index = drumNNMenu.selector;
 18125  006144  C15E  F07B         	movff	_drumNNMenu+2,Function_C_2@array_index
 18126                           
 18127                           ;menu.c: 524: while(encoder_click == 0) {
 18128  006148  D053               	goto	l3478
 18129  00614A                     l3477:
 18130                           
 18131                           ;menu.c: 526: if(lcd_print_once == 0) {
 18132  00614A  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18133  00614C  D051               	goto	l3478
 18134                           
 18135                           ;menu.c: 527: if (encoder_direction == 0x10) {
 18136  00614E  0E10               	movlw	16
 18137  006150  0100               	movlb	0	; () banked
 18138  006152  19EB               	xorwf	_encoder_direction& (0+255),w,b
 18139  006154  A4D8               	btfss	status,2,c
 18140  006156  D016               	goto	l3479
 18141                           
 18142                           ; BSR set to: 0
 18143                           ;menu.c: 528: if(DRUM_NOTE[array_index] < 81) {
 18144  006158  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18145  00615A  0D01               	mullw	1
 18146  00615C  0EDF               	movlw	low _DRUM_NOTE
 18147  00615E  24F3               	addwf	prodl,w,c
 18148  006160  6ED9               	movwf	fsr2l,c
 18149  006162  0E01               	movlw	high _DRUM_NOTE
 18150  006164  20F4               	addwfc	prodh,w,c
 18151  006166  6EDA               	movwf	fsr2h,c
 18152  006168  0E51               	movlw	81
 18153  00616A  60DF               	cpfslt	indf2,c
 18154  00616C  D009               	goto	l3480
 18155                           
 18156                           ; BSR set to: 0
 18157                           ;menu.c: 529: DRUM_NOTE[array_index]++;
 18158  00616E  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18159  006170  0D01               	mullw	1
 18160  006172  0EDF               	movlw	low _DRUM_NOTE
 18161  006174  24F3               	addwf	prodl,w,c
 18162  006176  6ED9               	movwf	fsr2l,c
 18163  006178  0E01               	movlw	high _DRUM_NOTE
 18164  00617A  20F4               	addwfc	prodh,w,c
 18165  00617C  6EDA               	movwf	fsr2h,c
 18166  00617E  2ADF               	incf	indf2,f,c
 18167  006180                     l3480:
 18168                           
 18169                           ; BSR set to: 0
 18170                           ;menu.c: 530: }
 18171                           ;menu.c: 531: encoder_direction = 0x00;
 18172                           
 18173                           ; BSR set to: 0
 18174  006180  0E00               	movlw	0
 18175  006182  6FEB               	movwf	_encoder_direction& (0+255),b
 18176  006184                     l3479:
 18177                           
 18178                           ; BSR set to: 0
 18179                           ;menu.c: 532: }
 18180                           ;menu.c: 534: if (encoder_direction == 0x20) {
 18181                           
 18182                           ; BSR set to: 0
 18183  006184  0E20               	movlw	32
 18184  006186  19EB               	xorwf	_encoder_direction& (0+255),w,b
 18185  006188  A4D8               	btfss	status,2,c
 18186  00618A  D016               	goto	l3481
 18187                           
 18188                           ; BSR set to: 0
 18189                           ;menu.c: 535: if(DRUM_NOTE[array_index] > 35) {
 18190  00618C  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18191  00618E  0D01               	mullw	1
 18192  006190  0EDF               	movlw	low _DRUM_NOTE
 18193  006192  24F3               	addwf	prodl,w,c
 18194  006194  6ED9               	movwf	fsr2l,c
 18195  006196  0E01               	movlw	high _DRUM_NOTE
 18196  006198  20F4               	addwfc	prodh,w,c
 18197  00619A  6EDA               	movwf	fsr2h,c
 18198  00619C  0E23               	movlw	35
 18199  00619E  64DF               	cpfsgt	indf2,c
 18200  0061A0  D009               	goto	l3482
 18201                           
 18202                           ; BSR set to: 0
 18203                           ;menu.c: 536: DRUM_NOTE[array_index]--;
 18204  0061A2  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18205  0061A4  0D01               	mullw	1
 18206  0061A6  0EDF               	movlw	low _DRUM_NOTE
 18207  0061A8  24F3               	addwf	prodl,w,c
 18208  0061AA  6ED9               	movwf	fsr2l,c
 18209  0061AC  0E01               	movlw	high _DRUM_NOTE
 18210  0061AE  20F4               	addwfc	prodh,w,c
 18211  0061B0  6EDA               	movwf	fsr2h,c
 18212  0061B2  06DF               	decf	indf2,f,c
 18213  0061B4                     l3482:
 18214                           
 18215                           ; BSR set to: 0
 18216                           ;menu.c: 537: }
 18217                           ;menu.c: 538: encoder_direction = 0x00;
 18218                           
 18219                           ; BSR set to: 0
 18220  0061B4  0E00               	movlw	0
 18221  0061B6  6FEB               	movwf	_encoder_direction& (0+255),b
 18222  0061B8                     l3481:
 18223                           
 18224                           ; BSR set to: 0
 18225                           ;menu.c: 539: }
 18226                           ;menu.c: 541: int2string(DRUM_NOTE[array_index]);
 18227                           
 18228                           ; BSR set to: 0
 18229  0061B8  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18230  0061BA  0D01               	mullw	1
 18231  0061BC  0EDF               	movlw	low _DRUM_NOTE
 18232  0061BE  24F3               	addwf	prodl,w,c
 18233  0061C0  6ED9               	movwf	fsr2l,c
 18234  0061C2  0E01               	movlw	high _DRUM_NOTE
 18235  0061C4  20F4               	addwfc	prodh,w,c
 18236  0061C6  6EDA               	movwf	fsr2h,c
 18237  0061C8  50DF               	movf	indf2,w,c
 18238  0061CA  6F7A               	movwf	??_Function_C_2& (0+255),b
 18239  0061CC  517A               	movf	??_Function_C_2& (0+255),w,b
 18240  0061CE  6F74               	movwf	int2string@number& (0+255),b
 18241  0061D0  6B75               	clrf	(int2string@number+1)& (0+255),b
 18242  0061D2  EC52  F035         	call	_int2string	;wreg free
 18243                           
 18244                           ;menu.c: 542: Lcd_Set_Cursor(2,13);
 18245  0061D6  0E0D               	movlw	13
 18246  0061D8  0100               	movlb	0	; () banked
 18247  0061DA  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 18248  0061DC  0E02               	movlw	2
 18249  0061DE  ECF7  F045         	call	_Lcd_Set_Cursor
 18250                           
 18251                           ;menu.c: 543: Lcd_Print_String(string2display);
 18252  0061E2  0E82               	movlw	low _string2display
 18253  0061E4  0100               	movlb	0	; () banked
 18254  0061E6  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18255  0061E8  0E01               	movlw	high _string2display
 18256  0061EA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18257  0061EC  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 18258  0061F0                     l3478:
 18259  0061F0  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 18260  0061F2  0012               	return	
 18261  0061F4  D7AA               	goto	l3477
 18262  0061F6                     __end_of_Function_C_2:
 18263                           	opt stack 0
 18264                           tblptru	equ	0xFF8
 18265                           tblptrh	equ	0xFF7
 18266                           tblptrl	equ	0xFF6
 18267                           tablat	equ	0xFF5
 18268                           prodh	equ	0xFF4
 18269                           prodl	equ	0xFF3
 18270                           intcon	equ	0xFF2
 18271                           intcon2	equ	0xFF1
 18272                           postinc0	equ	0xFEE
 18273                           wreg	equ	0xFE8
 18274                           postdec1	equ	0xFE5
 18275                           fsr1l	equ	0xFE1
 18276                           indf2	equ	0xFDF
 18277                           postinc2	equ	0xFDE
 18278                           plusw2	equ	0xFDB
 18279                           fsr2h	equ	0xFDA
 18280                           fsr2l	equ	0xFD9
 18281                           status	equ	0xFD8
 18282                           
 18283 ;; *************** function _int2string *****************
 18284 ;; Defined at:
 18285 ;;		line 86 in file "menu.c"
 18286 ;; Parameters:    Size  Location     Type
 18287 ;;  number          2   20[BANK0 ] int 
 18288 ;; Auto vars:     Size  Location     Type
 18289 ;;  number_to_di    2   24[BANK0 ] int 
 18290 ;; Return value:  Size  Location     Type
 18291 ;;                  1    wreg      void 
 18292 ;; Registers used:
 18293 ;;		wreg, status,2, status,0, cstack
 18294 ;; Tracked objects:
 18295 ;;		On entry : 0/0
 18296 ;;		On exit  : 0/0
 18297 ;;		Unchanged: 0/0
 18298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18299 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18300 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18301 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18302 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18303 ;;Total ram usage:        6 bytes
 18304 ;; Hardware stack levels used:    1
 18305 ;; Hardware stack levels required when called:    6
 18306 ;; This function calls:
 18307 ;;		___awdiv
 18308 ;;		___awmod
 18309 ;; This function is called by:
 18310 ;;		_setControllerNumbers
 18311 ;;		_Function_C_2
 18312 ;;		_Function_C_3
 18313 ;;		_Function_D_2
 18314 ;;		_Function_E_1
 18315 ;;		_Function_E_2
 18316 ;;		_Function_F
 18317 ;;		_Function_H_2
 18318 ;;		_Function_H_3
 18319 ;; This function uses a non-reentrant model
 18320 ;;
 18321                           
 18322                           	psect	text54
 18323  006AA4                     __ptext54:
 18324                           	opt stack 0
 18325  006AA4                     _int2string:
 18326                           	opt stack 21
 18327                           
 18328                           ;menu.c: 88: static __bit isNegative = 0;
 18329                           ;menu.c: 89: signed int number_to_display_temp = 0;
 18330                           
 18331                           ;incstack = 0
 18332  006AA4  0E00               	movlw	0
 18333  006AA6  0100               	movlb	0	; () banked
 18334  006AA8  6F79               	movwf	(int2string@number_to_display_temp+1)& (0+255),b
 18335  006AAA  0E00               	movlw	0
 18336  006AAC  6F78               	movwf	int2string@number_to_display_temp& (0+255),b
 18337                           
 18338                           ; BSR set to: 0
 18339                           ;menu.c: 91: if(number < 0) {
 18340  006AAE  AF75               	btfss	(int2string@number+1)& (0+255),7,b
 18341  006AB0  D00E               	goto	l3342
 18342                           
 18343                           ; BSR set to: 0
 18344                           ;menu.c: 92: isNegative = 1;
 18345  006AB2  8232               	bsf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18346                           
 18347                           ;menu.c: 93: number_to_display_temp = (0 - number);
 18348  006AB4  C074  F076         	movff	int2string@number,??_int2string
 18349  006AB8  C075  F077         	movff	int2string@number+1,??_int2string+1
 18350  006ABC  1F76               	comf	??_int2string& (0+255),f,b
 18351  006ABE  1F77               	comf	(??_int2string+1)& (0+255),f,b
 18352  006AC0  4B76               	infsnz	??_int2string& (0+255),f,b
 18353  006AC2  2B77               	incf	(??_int2string+1)& (0+255),f,b
 18354  006AC4  C076  F078         	movff	??_int2string,int2string@number_to_display_temp
 18355  006AC8  C077  F079         	movff	??_int2string+1,int2string@number_to_display_temp+1
 18356                           
 18357                           ;menu.c: 94: }
 18358  006ACC  D005               	goto	l3343
 18359  006ACE                     l3342:
 18360                           
 18361                           ; BSR set to: 0
 18362                           ;menu.c: 95: else {
 18363                           ;menu.c: 96: isNegative = 0;
 18364  006ACE  9232               	bcf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18365                           
 18366                           ;menu.c: 97: number_to_display_temp = number;
 18367  006AD0  C074  F078         	movff	int2string@number,int2string@number_to_display_temp
 18368  006AD4  C075  F079         	movff	int2string@number+1,int2string@number_to_display_temp+1
 18369  006AD8                     l3343:
 18370                           
 18371                           ; BSR set to: 0
 18372                           ;menu.c: 98: }
 18373                           ;menu.c: 101: if(isNegative) {
 18374  006AD8  A232               	btfss	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18375  006ADA  D002               	goto	l3344
 18376                           
 18377                           ; BSR set to: 0
 18378                           ;menu.c: 102: string2display[0] = '-';
 18379  006ADC  0E2D               	movlw	45
 18380  006ADE  D001               	goto	L4
 18381  006AE0                     l3344:
 18382                           
 18383                           ;menu.c: 104: else{string2display[0] = ' ';}
 18384                           
 18385                           ; BSR set to: 1
 18386  006AE0  0E20               	movlw	32
 18387  006AE2                     L4:
 18388  006AE2  0101               	movlb	1	; () banked
 18389  006AE4  6F82               	movwf	_string2display& (0+255),b
 18390                           
 18391                           ; BSR set to: 1
 18392                           ;menu.c: 107: string2display[1] = 48 + ((number_to_display_temp / 100) % 10);
 18393                           
 18394                           ; BSR set to: 1
 18395  006AE6  0E00               	movlw	0
 18396  006AE8  0100               	movlb	0	; () banked
 18397  006AEA  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18398  006AEC  0E64               	movlw	100
 18399  006AEE  6F62               	movwf	___awdiv@divisor& (0+255),b
 18400  006AF0  C078  F060         	movff	int2string@number_to_display_temp,___awdiv@dividend
 18401  006AF4  C079  F061         	movff	int2string@number_to_display_temp+1,___awdiv@dividend+1
 18402  006AF8  ECF7  F03C         	call	___awdiv	;wreg free
 18403  006AFC  C060  F06E         	movff	?___awdiv,___awmod@dividend
 18404  006B00  C061  F06F         	movff	?___awdiv+1,___awmod@dividend+1
 18405  006B04  0E00               	movlw	0
 18406  006B06  0100               	movlb	0	; () banked
 18407  006B08  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 18408  006B0A  0E0A               	movlw	10
 18409  006B0C  6F70               	movwf	___awmod@divisor& (0+255),b
 18410  006B0E  EC9E  F042         	call	___awmod	;wreg free
 18411  006B12  0100               	movlb	0	; () banked
 18412  006B14  516E               	movf	?___awmod& (0+255),w,b
 18413  006B16  0F30               	addlw	48
 18414  006B18  0101               	movlb	1	; () banked
 18415  006B1A  6F83               	movwf	(_string2display+1)& (0+255),b
 18416                           
 18417                           ; BSR set to: 1
 18418                           ;menu.c: 108: string2display[2] = 48 + ((number_to_display_temp / 10) % 10);
 18419  006B1C  0E00               	movlw	0
 18420  006B1E  0100               	movlb	0	; () banked
 18421  006B20  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18422  006B22  0E0A               	movlw	10
 18423  006B24  6F62               	movwf	___awdiv@divisor& (0+255),b
 18424  006B26  C078  F060         	movff	int2string@number_to_display_temp,___awdiv@dividend
 18425  006B2A  C079  F061         	movff	int2string@number_to_display_temp+1,___awdiv@dividend+1
 18426  006B2E  ECF7  F03C         	call	___awdiv	;wreg free
 18427  006B32  C060  F06E         	movff	?___awdiv,___awmod@dividend
 18428  006B36  C061  F06F         	movff	?___awdiv+1,___awmod@dividend+1
 18429  006B3A  0E00               	movlw	0
 18430  006B3C  0100               	movlb	0	; () banked
 18431  006B3E  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 18432  006B40  0E0A               	movlw	10
 18433  006B42  6F70               	movwf	___awmod@divisor& (0+255),b
 18434  006B44  EC9E  F042         	call	___awmod	;wreg free
 18435  006B48  0100               	movlb	0	; () banked
 18436  006B4A  516E               	movf	?___awmod& (0+255),w,b
 18437  006B4C  0F30               	addlw	48
 18438  006B4E  0101               	movlb	1	; () banked
 18439  006B50  6F84               	movwf	(_string2display+2)& (0+255),b
 18440                           
 18441                           ; BSR set to: 1
 18442                           ;menu.c: 109: string2display[3] = 48 + (number_to_display_temp % 10);
 18443  006B52  C078  F06E         	movff	int2string@number_to_display_temp,___awmod@dividend
 18444  006B56  C079  F06F         	movff	int2string@number_to_display_temp+1,___awmod@dividend+1
 18445  006B5A  0E00               	movlw	0
 18446  006B5C  0100               	movlb	0	; () banked
 18447  006B5E  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 18448  006B60  0E0A               	movlw	10
 18449  006B62  6F70               	movwf	___awmod@divisor& (0+255),b
 18450  006B64  EC9E  F042         	call	___awmod	;wreg free
 18451  006B68  0100               	movlb	0	; () banked
 18452  006B6A  516E               	movf	?___awmod& (0+255),w,b
 18453  006B6C  0F30               	addlw	48
 18454  006B6E  0101               	movlb	1	; () banked
 18455  006B70  6F85               	movwf	(_string2display+3)& (0+255),b
 18456                           
 18457                           ; BSR set to: 1
 18458                           ;menu.c: 110: string2display[4] = '\0';
 18459  006B72  0E00               	movlw	0
 18460  006B74  6F86               	movwf	(_string2display+4)& (0+255),b
 18461                           
 18462                           ; BSR set to: 1
 18463  006B76  0012               	return		;funcret
 18464  006B78                     __end_of_int2string:
 18465                           	opt stack 0
 18466                           tblptru	equ	0xFF8
 18467                           tblptrh	equ	0xFF7
 18468                           tblptrl	equ	0xFF6
 18469                           tablat	equ	0xFF5
 18470                           prodh	equ	0xFF4
 18471                           prodl	equ	0xFF3
 18472                           intcon	equ	0xFF2
 18473                           intcon2	equ	0xFF1
 18474                           postinc0	equ	0xFEE
 18475                           wreg	equ	0xFE8
 18476                           postdec1	equ	0xFE5
 18477                           fsr1l	equ	0xFE1
 18478                           indf2	equ	0xFDF
 18479                           postinc2	equ	0xFDE
 18480                           plusw2	equ	0xFDB
 18481                           fsr2h	equ	0xFDA
 18482                           fsr2l	equ	0xFD9
 18483                           status	equ	0xFD8
 18484                           
 18485 ;; *************** function ___awdiv *****************
 18486 ;; Defined at:
 18487 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 18488 ;; Parameters:    Size  Location     Type
 18489 ;;  dividend        2    0[BANK0 ] int 
 18490 ;;  divisor         2    2[BANK0 ] int 
 18491 ;; Auto vars:     Size  Location     Type
 18492 ;;  quotient        2    6[BANK0 ] int 
 18493 ;;  sign            1    5[BANK0 ] unsigned char 
 18494 ;;  counter         1    4[BANK0 ] unsigned char 
 18495 ;; Return value:  Size  Location     Type
 18496 ;;                  2    0[BANK0 ] int 
 18497 ;; Registers used:
 18498 ;;		wreg, status,2, status,0
 18499 ;; Tracked objects:
 18500 ;;		On entry : 0/0
 18501 ;;		On exit  : 0/0
 18502 ;;		Unchanged: 0/0
 18503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18504 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18505 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18507 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18508 ;;Total ram usage:        8 bytes
 18509 ;; Hardware stack levels used:    1
 18510 ;; Hardware stack levels required when called:    5
 18511 ;; This function calls:
 18512 ;;		Nothing
 18513 ;; This function is called by:
 18514 ;;		_int2string
 18515 ;; This function uses a non-reentrant model
 18516 ;;
 18517                           
 18518                           	psect	text55
 18519  0079EE                     __ptext55:
 18520                           	opt stack 0
 18521  0079EE                     ___awdiv:
 18522                           	opt stack 21
 18523                           
 18524                           ; BSR set to: 1
 18525                           ;incstack = 0
 18526  0079EE  0E00               	movlw	0
 18527  0079F0  0100               	movlb	0	; () banked
 18528  0079F2  6F65               	movwf	___awdiv@sign& (0+255),b
 18529                           
 18530                           ; BSR set to: 0
 18531  0079F4  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 18532  0079F6  D006               	goto	l5595
 18533                           
 18534                           ; BSR set to: 0
 18535  0079F8  6D62               	negf	___awdiv@divisor& (0+255),b
 18536  0079FA  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 18537  0079FC  B0D8               	btfsc	status,0,c
 18538  0079FE  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 18539                           
 18540                           ; BSR set to: 0
 18541  007A00  0E01               	movlw	1
 18542  007A02  6F65               	movwf	___awdiv@sign& (0+255),b
 18543  007A04                     l5595:
 18544                           
 18545                           ; BSR set to: 0
 18546                           
 18547                           ; BSR set to: 0
 18548  007A04  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 18549  007A06  D006               	goto	l5596
 18550                           
 18551                           ; BSR set to: 0
 18552  007A08  6D60               	negf	___awdiv@dividend& (0+255),b
 18553  007A0A  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 18554  007A0C  B0D8               	btfsc	status,0,c
 18555  007A0E  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 18556                           
 18557                           ; BSR set to: 0
 18558  007A10  0E01               	movlw	1
 18559  007A12  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 18560  007A14                     l5596:
 18561                           
 18562                           ; BSR set to: 0
 18563                           
 18564                           ; BSR set to: 0
 18565  007A14  0E00               	movlw	0
 18566  007A16  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 18567  007A18  0E00               	movlw	0
 18568  007A1A  6F66               	movwf	___awdiv@quotient& (0+255),b
 18569                           
 18570                           ; BSR set to: 0
 18571  007A1C  5162               	movf	___awdiv@divisor& (0+255),w,b
 18572  007A1E  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 18573  007A20  B4D8               	btfsc	status,2,c
 18574  007A22  D01C               	goto	l5603
 18575                           
 18576                           ; BSR set to: 0
 18577  007A24  0E01               	movlw	1
 18578  007A26  6F64               	movwf	___awdiv@counter& (0+255),b
 18579  007A28  D004               	goto	l5598
 18580  007A2A                     
 18581                           ; BSR set to: 0
 18582                           
 18583                           ; BSR set to: 0
 18584  007A2A  90D8               	bcf	status,0,c
 18585  007A2C  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 18586  007A2E  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 18587  007A30  2B64               	incf	___awdiv@counter& (0+255),f,b
 18588  007A32                     l5598:
 18589                           
 18590                           ; BSR set to: 0
 18591                           
 18592                           ; BSR set to: 0
 18593  007A32  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 18594  007A34  D7FA               	goto	l5599
 18595  007A36                     u26570:
 18596                           
 18597                           ; BSR set to: 0
 18598                           
 18599                           ; BSR set to: 0
 18600                           
 18601                           ; BSR set to: 0
 18602  007A36  90D8               	bcf	status,0,c
 18603  007A38  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 18604  007A3A  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 18605                           
 18606                           ; BSR set to: 0
 18607  007A3C  5162               	movf	___awdiv@divisor& (0+255),w,b
 18608  007A3E  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 18609  007A40  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 18610  007A42  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 18611  007A44  A0D8               	btfss	status,0,c
 18612  007A46  D005               	goto	l5602
 18613                           
 18614                           ; BSR set to: 0
 18615  007A48  5162               	movf	___awdiv@divisor& (0+255),w,b
 18616  007A4A  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 18617  007A4C  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 18618  007A4E  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 18619                           
 18620                           ; BSR set to: 0
 18621  007A50  8166               	bsf	___awdiv@quotient& (0+255),0,b
 18622  007A52                     l5602:
 18623                           
 18624                           ; BSR set to: 0
 18625                           
 18626                           ; BSR set to: 0
 18627  007A52  90D8               	bcf	status,0,c
 18628  007A54  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 18629  007A56  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 18630                           
 18631                           ; BSR set to: 0
 18632  007A58  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 18633  007A5A  D7ED               	goto	u26570
 18634  007A5C                     l5603:
 18635                           
 18636                           ; BSR set to: 0
 18637                           
 18638                           ; BSR set to: 0
 18639                           
 18640                           ; BSR set to: 0
 18641  007A5C  5165               	movf	___awdiv@sign& (0+255),w,b
 18642  007A5E  B4D8               	btfsc	status,2,c
 18643  007A60  D004               	goto	l5604
 18644                           
 18645                           ; BSR set to: 0
 18646  007A62  6D66               	negf	___awdiv@quotient& (0+255),b
 18647  007A64  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 18648  007A66  B0D8               	btfsc	status,0,c
 18649  007A68  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 18650  007A6A                     l5604:
 18651                           
 18652                           ; BSR set to: 0
 18653                           
 18654                           ; BSR set to: 0
 18655  007A6A  C066  F060         	movff	___awdiv@quotient,?___awdiv
 18656  007A6E  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 18657  007A72  0012               	return	
 18658  007A74                     __end_of___awdiv:
 18659                           	opt stack 0
 18660                           tblptru	equ	0xFF8
 18661                           tblptrh	equ	0xFF7
 18662                           tblptrl	equ	0xFF6
 18663                           tablat	equ	0xFF5
 18664                           prodh	equ	0xFF4
 18665                           prodl	equ	0xFF3
 18666                           intcon	equ	0xFF2
 18667                           intcon2	equ	0xFF1
 18668                           postinc0	equ	0xFEE
 18669                           wreg	equ	0xFE8
 18670                           postdec1	equ	0xFE5
 18671                           fsr1l	equ	0xFE1
 18672                           indf2	equ	0xFDF
 18673                           postinc2	equ	0xFDE
 18674                           plusw2	equ	0xFDB
 18675                           fsr2h	equ	0xFDA
 18676                           fsr2l	equ	0xFD9
 18677                           status	equ	0xFD8
 18678                           
 18679 ;; *************** function _Function_C_1 *****************
 18680 ;; Defined at:
 18681 ;;		line 479 in file "menu.c"
 18682 ;; Parameters:    Size  Location     Type
 18683 ;;		None
 18684 ;; Auto vars:     Size  Location     Type
 18685 ;;		None
 18686 ;; Return value:  Size  Location     Type
 18687 ;;                  1    wreg      void 
 18688 ;; Registers used:
 18689 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18690 ;; Tracked objects:
 18691 ;;		On entry : 0/0
 18692 ;;		On exit  : 0/0
 18693 ;;		Unchanged: 0/0
 18694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18698 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18699 ;;Total ram usage:        1 bytes
 18700 ;; Hardware stack levels used:    1
 18701 ;; Hardware stack levels required when called:    9
 18702 ;; This function calls:
 18703 ;;		_Lcd_Print_String
 18704 ;;		___lbmod
 18705 ;;		___wmul
 18706 ;;		_clear_row1
 18707 ;;		_clear_row2
 18708 ;;		_processEncoderBuxton
 18709 ;; This function is called by:
 18710 ;;		_Function_C
 18711 ;; This function uses a non-reentrant model
 18712 ;;
 18713                           
 18714                           	psect	text56
 18715  0077BE                     __ptext56:
 18716                           	opt stack 0
 18717  0077BE                     _Function_C_1:
 18718                           	opt stack 19
 18719                           
 18720                           ;menu.c: 481: which_screen = DRUMS_CC_TYPE_MENU;
 18721                           
 18722                           ; BSR set to: 0
 18723                           ;incstack = 0
 18724  0077BE  0E0C               	movlw	12
 18725  0077C0  0100               	movlb	0	; () banked
 18726  0077C2  6FF9               	movwf	_which_screen& (0+255),b
 18727                           
 18728                           ; BSR set to: 0
 18729                           ;menu.c: 482: lcd_print_once = 0;
 18730  0077C4  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18731                           
 18732                           ; BSR set to: 0
 18733                           ;menu.c: 483: encoder_click = 0;
 18734  0077C6  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18735                           
 18736                           ;menu.c: 485: drumCCTypeMenu.selector = CONTROL_MODE;
 18737  0077C8  0E00               	movlw	0
 18738  0077CA  B832               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18739  0077CC  0E01               	movlw	1
 18740  0077CE  0101               	movlb	1	; () banked
 18741  0077D0  6F61               	movwf	(_drumCCTypeMenu+2)& (0+255),b
 18742                           
 18743                           ;menu.c: 487: while(encoder_click == 0) {
 18744  0077D2  D02E               	goto	l3465
 18745  0077D4                     
 18746                           ;menu.c: 488: processEncoderBuxton();
 18747                           
 18748                           ; BSR set to: 1
 18749  0077D4  EC09  F000         	call	_processEncoderBuxton	;wreg free
 18750                           
 18751                           ;menu.c: 489: if (lcd_print_once == 0) {
 18752  0077D8  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18753  0077DA  D029               	goto	l3467
 18754                           
 18755                           ;menu.c: 490: clear_row1();
 18756  0077DC  EC5D  F04A         	call	_clear_row1	;wreg free
 18757                           
 18758                           ;menu.c: 491: Lcd_Print_String("Drum CC Mode:");
 18759  0077E0  0EE0               	movlw	low STR_27
 18760  0077E2  0100               	movlb	0	; () banked
 18761  0077E4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18762  0077E6  0EFE               	movlw	high STR_27
 18763  0077E8  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18764  0077EA  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 18765                           
 18766                           ;menu.c: 492: clear_row2();
 18767  0077EE  EC49  F04A         	call	_clear_row2	;wreg free
 18768                           
 18769                           ;menu.c: 493: Lcd_Print_String(LCD_STRINGS[(drumCCTypeMenu.selector % drumCCTypeMenu.num
      +                          ber) + drumCCTypeMenu.address]);
 18770  0077F2  C15F  F060         	movff	_drumCCTypeMenu,___lbmod@divisor
 18771  0077F6  0101               	movlb	1	; () banked
 18772  0077F8  5161               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18773  0077FA  ECC8  F049         	call	___lbmod
 18774  0077FE  0100               	movlb	0	; () banked
 18775  007800  6F70               	movwf	??_Function_C_1& (0+255),b
 18776  007802  5170               	movf	??_Function_C_1& (0+255),w,b
 18777  007804  0101               	movlb	1	; () banked
 18778  007806  2560               	addwf	(_drumCCTypeMenu+1)& (0+255),w,b
 18779  007808  0100               	movlb	0	; () banked
 18780  00780A  6F64               	movwf	___wmul@multiplier& (0+255),b
 18781  00780C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 18782  00780E  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18783  007810  0E00               	movlw	0
 18784  007812  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18785  007814  0E11               	movlw	17
 18786  007816  6F66               	movwf	___wmul@multiplicand& (0+255),b
 18787  007818  EC71  F04A         	call	___wmul	;wreg free
 18788  00781C  0E9E               	movlw	low _LCD_STRINGS
 18789  00781E  0100               	movlb	0	; () banked
 18790  007820  2564               	addwf	?___wmul& (0+255),w,b
 18791  007822  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18792  007824  0EF3               	movlw	high _LCD_STRINGS
 18793  007826  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 18794  007828  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18795  00782A  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 18796  00782E                     l3467:
 18797                           
 18798                           ;menu.c: 494: }
 18799                           ;menu.c: 495: lcd_print_once = 1;
 18800  00782E  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18801  007830                     l3465:
 18802  007830  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 18803  007832  D7D0               	goto	l3466
 18804                           
 18805                           ;menu.c: 496: }
 18806                           ;menu.c: 498: CONTROL_MODE = drumCCTypeMenu.selector % drumCCTypeMenu.number;
 18807  007834  C15F  F060         	movff	_drumCCTypeMenu,___lbmod@divisor
 18808  007838  0101               	movlb	1	; () banked
 18809  00783A  5161               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18810  00783C  ECC8  F049         	call	___lbmod
 18811  007840  0100               	movlb	0	; () banked
 18812  007842  6F70               	movwf	??_Function_C_1& (0+255),b
 18813  007844  3170               	rrcf	??_Function_C_1& (0+255),w,b
 18814  007846  A0D8               	btfss	status,0,c
 18815  007848  D002               	goto	u33200
 18816  00784A  8832               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18817  00784C  0012               	return	
 18818  00784E                     u33200:
 18819  00784E  9832               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18820  007850  0012               	return		;funcret
 18821  007852                     __end_of_Function_C_1:
 18822                           	opt stack 0
 18823                           tblptru	equ	0xFF8
 18824                           tblptrh	equ	0xFF7
 18825                           tblptrl	equ	0xFF6
 18826                           tablat	equ	0xFF5
 18827                           prodh	equ	0xFF4
 18828                           prodl	equ	0xFF3
 18829                           intcon	equ	0xFF2
 18830                           intcon2	equ	0xFF1
 18831                           postinc0	equ	0xFEE
 18832                           wreg	equ	0xFE8
 18833                           postdec1	equ	0xFE5
 18834                           fsr1l	equ	0xFE1
 18835                           indf2	equ	0xFDF
 18836                           postinc2	equ	0xFDE
 18837                           plusw2	equ	0xFDB
 18838                           fsr2h	equ	0xFDA
 18839                           fsr2l	equ	0xFD9
 18840                           status	equ	0xFD8
 18841                           
 18842 ;; *************** function _Function_B *****************
 18843 ;; Defined at:
 18844 ;;		line 460 in file "menu.c"
 18845 ;; Parameters:    Size  Location     Type
 18846 ;;		None
 18847 ;; Auto vars:     Size  Location     Type
 18848 ;;		None
 18849 ;; Return value:  Size  Location     Type
 18850 ;;                  1    wreg      void 
 18851 ;; Registers used:
 18852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18853 ;; Tracked objects:
 18854 ;;		On entry : 0/0
 18855 ;;		On exit  : 0/0
 18856 ;;		Unchanged: 0/0
 18857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18860 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18861 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18862 ;;Total ram usage:        1 bytes
 18863 ;; Hardware stack levels used:    1
 18864 ;; Hardware stack levels required when called:    9
 18865 ;; This function calls:
 18866 ;;		_Lcd_Print_String
 18867 ;;		___lbmod
 18868 ;;		___wmul
 18869 ;;		_clear_row2
 18870 ;;		_processEncoderBuxton
 18871 ;; This function is called by:
 18872 ;;		_menu_lcd
 18873 ;; This function uses a non-reentrant model
 18874 ;;
 18875                           
 18876                           	psect	text57
 18877  007D8A                     __ptext57:
 18878                           	opt stack 0
 18879  007D8A                     _Function_B:
 18880                           	opt stack 20
 18881                           
 18882                           ;menu.c: 462: which_screen = TRANSPOSE_MENU;
 18883                           
 18884                           ;incstack = 0
 18885  007D8A  0E04               	movlw	4
 18886  007D8C  0100               	movlb	0	; () banked
 18887  007D8E  6FF9               	movwf	_which_screen& (0+255),b
 18888                           
 18889                           ; BSR set to: 0
 18890                           ;menu.c: 463: lcd_print_once = 0;
 18891  007D90  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18892                           
 18893                           ;menu.c: 465: transposeMenu.selector = TRANSPOSE_MODE;
 18894  007D92  0E00               	movlw	0
 18895  007D94  BC35               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18896  007D96  0E01               	movlw	1
 18897  007D98  0101               	movlb	1	; () banked
 18898  007D9A  6F64               	movwf	(_transposeMenu+2)& (0+255),b
 18899                           
 18900                           ;menu.c: 467: while(encoder_click == 0) {
 18901  007D9C  D033               	goto	l3458
 18902  007D9E                     
 18903                           ;menu.c: 468: processEncoderBuxton();
 18904                           
 18905                           ; BSR set to: 1
 18906  007D9E  EC09  F000         	call	_processEncoderBuxton	;wreg free
 18907                           
 18908                           ;menu.c: 469: if (lcd_print_once == 0) {
 18909  007DA2  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18910  007DA4  D02E               	goto	u37205
 18911                           
 18912                           ;menu.c: 470: clear_row2();
 18913  007DA6  EC49  F04A         	call	_clear_row2	;wreg free
 18914                           
 18915                           ;menu.c: 471: Lcd_Print_String(LCD_STRINGS[(transposeMenu.selector % transposeMenu.numbe
      +                          r) + transposeMenu.address]);
 18916  007DAA  C162  F060         	movff	_transposeMenu,___lbmod@divisor
 18917  007DAE  0101               	movlb	1	; () banked
 18918  007DB0  5164               	movf	(_transposeMenu+2)& (0+255),w,b
 18919  007DB2  ECC8  F049         	call	___lbmod
 18920  007DB6  0100               	movlb	0	; () banked
 18921  007DB8  6F70               	movwf	??_Function_B& (0+255),b
 18922  007DBA  5170               	movf	??_Function_B& (0+255),w,b
 18923  007DBC  0101               	movlb	1	; () banked
 18924  007DBE  2563               	addwf	(_transposeMenu+1)& (0+255),w,b
 18925  007DC0  0100               	movlb	0	; () banked
 18926  007DC2  6F64               	movwf	___wmul@multiplier& (0+255),b
 18927  007DC4  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 18928  007DC6  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18929  007DC8  0E00               	movlw	0
 18930  007DCA  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18931  007DCC  0E11               	movlw	17
 18932  007DCE  6F66               	movwf	___wmul@multiplicand& (0+255),b
 18933  007DD0  EC71  F04A         	call	___wmul	;wreg free
 18934  007DD4  0E9E               	movlw	low _LCD_STRINGS
 18935  007DD6  0100               	movlb	0	; () banked
 18936  007DD8  2564               	addwf	?___wmul& (0+255),w,b
 18937  007DDA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18938  007DDC  0EF3               	movlw	high _LCD_STRINGS
 18939  007DDE  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 18940  007DE0  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18941  007DE2  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 18942                           
 18943                           ;menu.c: 472: TRANSPOSE_MODE = transposeMenu.selector % transposeMenu.number;
 18944  007DE6  C162  F060         	movff	_transposeMenu,___lbmod@divisor
 18945  007DEA  0101               	movlb	1	; () banked
 18946  007DEC  5164               	movf	(_transposeMenu+2)& (0+255),w,b
 18947  007DEE  ECC8  F049         	call	___lbmod
 18948  007DF2  0100               	movlb	0	; () banked
 18949  007DF4  6F70               	movwf	??_Function_B& (0+255),b
 18950  007DF6  3170               	rrcf	??_Function_B& (0+255),w,b
 18951  007DF8  A0D8               	btfss	status,0,c
 18952  007DFA  D002               	goto	u37190
 18953  007DFC  8C35               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18954  007DFE  D001               	goto	u37205
 18955  007E00                     u37190:
 18956  007E00  9C35               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18957  007E02                     u37205:
 18958                           
 18959                           ;menu.c: 473: }
 18960                           ;menu.c: 474: lcd_print_once = 1;
 18961  007E02  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18962  007E04                     l3458:
 18963  007E04  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 18964  007E06  0012               	return	
 18965  007E08  D7CA               	goto	l3459
 18966  007E0A                     __end_of_Function_B:
 18967                           	opt stack 0
 18968                           tblptru	equ	0xFF8
 18969                           tblptrh	equ	0xFF7
 18970                           tblptrl	equ	0xFF6
 18971                           tablat	equ	0xFF5
 18972                           prodh	equ	0xFF4
 18973                           prodl	equ	0xFF3
 18974                           intcon	equ	0xFF2
 18975                           intcon2	equ	0xFF1
 18976                           postinc0	equ	0xFEE
 18977                           wreg	equ	0xFE8
 18978                           postdec1	equ	0xFE5
 18979                           fsr1l	equ	0xFE1
 18980                           indf2	equ	0xFDF
 18981                           postinc2	equ	0xFDE
 18982                           plusw2	equ	0xFDB
 18983                           fsr2h	equ	0xFDA
 18984                           fsr2l	equ	0xFD9
 18985                           status	equ	0xFD8
 18986                           
 18987 ;; *************** function _Function_A *****************
 18988 ;; Defined at:
 18989 ;;		line 422 in file "menu.c"
 18990 ;; Parameters:    Size  Location     Type
 18991 ;;		None
 18992 ;; Auto vars:     Size  Location     Type
 18993 ;;		None
 18994 ;; Return value:  Size  Location     Type
 18995 ;;                  1    wreg      void 
 18996 ;; Registers used:
 18997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18998 ;; Tracked objects:
 18999 ;;		On entry : 0/0
 19000 ;;		On exit  : 0/0
 19001 ;;		Unchanged: 0/0
 19002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19005 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19006 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19007 ;;Total ram usage:        1 bytes
 19008 ;; Hardware stack levels used:    1
 19009 ;; Hardware stack levels required when called:   10
 19010 ;; This function calls:
 19011 ;;		_Function_A_1
 19012 ;;		_Function_A_2
 19013 ;;		_Function_A_3
 19014 ;;		_Lcd_Print_String
 19015 ;;		___lbmod
 19016 ;;		___wmul
 19017 ;;		_clear_row2
 19018 ;;		_processEncoderBuxton
 19019 ;; This function is called by:
 19020 ;;		_menu_lcd
 19021 ;; This function uses a non-reentrant model
 19022 ;;
 19023                           
 19024                           	psect	text58
 19025  007F86                     __ptext58:
 19026                           	opt stack 0
 19027  007F86                     _Function_A:
 19028                           	opt stack 19
 19029                           
 19030                           ;menu.c: 425: which_screen = KEYBOARD_MENU;
 19031                           
 19032                           ;incstack = 0
 19033  007F86  0E03               	movlw	3
 19034  007F88  0100               	movlb	0	; () banked
 19035  007F8A  6FF9               	movwf	_which_screen& (0+255),b
 19036                           
 19037                           ; BSR set to: 0
 19038                           ;menu.c: 426: lcd_print_once = 0;
 19039  007F8C  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19040                           
 19041                           ; BSR set to: 0
 19042                           ;menu.c: 428: keyboardMenu.selector = KEYBOARD_MODE;
 19043  007F8E  C0F2  F04C         	movff	_KEYBOARD_MODE,_keyboardMenu+2
 19044                           
 19045                           ;menu.c: 430: while(encoder_click == 0) {
 19046  007F92  D024               	goto	l3448
 19047  007F94                     
 19048                           ;menu.c: 431: processEncoderBuxton();
 19049                           
 19050                           ; BSR set to: 0
 19051  007F94  EC09  F000         	call	_processEncoderBuxton	;wreg free
 19052                           
 19053                           ;menu.c: 432: if (lcd_print_once == 0) {
 19054  007F98  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19055  007F9A  D01F               	goto	l3450
 19056                           
 19057                           ;menu.c: 433: clear_row2();
 19058  007F9C  EC49  F04A         	call	_clear_row2	;wreg free
 19059                           
 19060                           ;menu.c: 434: Lcd_Print_String(LCD_STRINGS[(keyboardMenu.selector % keyboardMenu.number)
      +                           + keyboardMenu.address]);
 19061  007FA0  C04A  F060         	movff	_keyboardMenu,___lbmod@divisor
 19062  007FA4  504C               	movf	_keyboardMenu+2,w,c
 19063  007FA6  ECC8  F049         	call	___lbmod
 19064  007FAA  0100               	movlb	0	; () banked
 19065  007FAC  6F71               	movwf	??_Function_A& (0+255),b
 19066  007FAE  5171               	movf	??_Function_A& (0+255),w,b
 19067  007FB0  244B               	addwf	_keyboardMenu+1,w,c
 19068  007FB2  6F64               	movwf	___wmul@multiplier& (0+255),b
 19069  007FB4  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 19070  007FB6  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19071  007FB8  0E00               	movlw	0
 19072  007FBA  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19073  007FBC  0E11               	movlw	17
 19074  007FBE  6F66               	movwf	___wmul@multiplicand& (0+255),b
 19075  007FC0  EC71  F04A         	call	___wmul	;wreg free
 19076  007FC4  0E9E               	movlw	low _LCD_STRINGS
 19077  007FC6  0100               	movlb	0	; () banked
 19078  007FC8  2564               	addwf	?___wmul& (0+255),w,b
 19079  007FCA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19080  007FCC  0EF3               	movlw	high _LCD_STRINGS
 19081  007FCE  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 19082  007FD0  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19083  007FD2  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 19084                           
 19085                           ;menu.c: 435: KEYBOARD_MODE = keyboardMenu.selector;
 19086  007FD6  C04C  F0F2         	movff	_keyboardMenu+2,_KEYBOARD_MODE
 19087  007FDA                     l3450:
 19088                           
 19089                           ;menu.c: 436: }
 19090                           ;menu.c: 437: lcd_print_once = 1;
 19091  007FDA  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19092  007FDC                     l3448:
 19093  007FDC  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 19094  007FDE  D7DA               	goto	l3449
 19095                           
 19096                           ;menu.c: 438: }
 19097                           ;menu.c: 440: lcd_print_once = 0;
 19098  007FE0  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19099                           
 19100                           ;menu.c: 443: if(keyboardMenu.selector == MODES) {
 19101  007FE2  0E03               	movlw	3
 19102  007FE4  184C               	xorwf	_keyboardMenu+2,w,c
 19103  007FE6  B4D8               	btfsc	status,2,c
 19104                           
 19105                           ;menu.c: 444: Function_A_1();
 19106  007FE8  EC7F  F040         	call	_Function_A_1	;wreg free
 19107                           
 19108                           ;menu.c: 445: }
 19109                           ;menu.c: 448: if(keyboardMenu.selector == TRIAD) {
 19110  007FEC  0E06               	movlw	6
 19111  007FEE  184C               	xorwf	_keyboardMenu+2,w,c
 19112  007FF0  B4D8               	btfsc	status,2,c
 19113                           
 19114                           ;menu.c: 449: Function_A_2();
 19115  007FF2  EC41  F040         	call	_Function_A_2	;wreg free
 19116                           
 19117                           ;menu.c: 451: }
 19118                           ;menu.c: 453: if(keyboardMenu.selector == SEVENTH){
 19119  007FF6  0E09               	movlw	9
 19120  007FF8  184C               	xorwf	_keyboardMenu+2,w,c
 19121  007FFA  A4D8               	btfss	status,2,c
 19122  007FFC  0012               	return	
 19123                           
 19124                           ;menu.c: 454: Function_A_3();
 19125  007FFE  EC7C  F03D         	call	_Function_A_3	;wreg free
 19126  008002  0012               	return	
 19127  008004                     __end_of_Function_A:
 19128                           	opt stack 0
 19129                           tblptru	equ	0xFF8
 19130                           tblptrh	equ	0xFF7
 19131                           tblptrl	equ	0xFF6
 19132                           tablat	equ	0xFF5
 19133                           prodh	equ	0xFF4
 19134                           prodl	equ	0xFF3
 19135                           intcon	equ	0xFF2
 19136                           intcon2	equ	0xFF1
 19137                           postinc0	equ	0xFEE
 19138                           wreg	equ	0xFE8
 19139                           postdec1	equ	0xFE5
 19140                           fsr1l	equ	0xFE1
 19141                           indf2	equ	0xFDF
 19142                           postinc2	equ	0xFDE
 19143                           plusw2	equ	0xFDB
 19144                           fsr2h	equ	0xFDA
 19145                           fsr2l	equ	0xFD9
 19146                           status	equ	0xFD8
 19147                           
 19148 ;; *************** function _Function_A_3 *****************
 19149 ;; Defined at:
 19150 ;;		line 401 in file "menu.c"
 19151 ;; Parameters:    Size  Location     Type
 19152 ;;		None
 19153 ;; Auto vars:     Size  Location     Type
 19154 ;;		None
 19155 ;; Return value:  Size  Location     Type
 19156 ;;                  1    wreg      void 
 19157 ;; Registers used:
 19158 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19159 ;; Tracked objects:
 19160 ;;		On entry : 0/0
 19161 ;;		On exit  : 0/0
 19162 ;;		Unchanged: 0/0
 19163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19167 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19168 ;;Total ram usage:        1 bytes
 19169 ;; Hardware stack levels used:    1
 19170 ;; Hardware stack levels required when called:    9
 19171 ;; This function calls:
 19172 ;;		_Lcd_Print_String
 19173 ;;		___lbmod
 19174 ;;		___wmul
 19175 ;;		_clear_row1
 19176 ;;		_clear_row2
 19177 ;;		_processEncoderBuxton
 19178 ;; This function is called by:
 19179 ;;		_Function_A
 19180 ;; This function uses a non-reentrant model
 19181 ;;
 19182                           
 19183                           	psect	text59
 19184  007AF8                     __ptext59:
 19185                           	opt stack 0
 19186  007AF8                     _Function_A_3:
 19187                           	opt stack 19
 19188                           
 19189                           ;menu.c: 402: KEYBOARD_MODE = SEVENTH;
 19190                           
 19191                           ;incstack = 0
 19192  007AF8  0E09               	movlw	9
 19193  007AFA  0100               	movlb	0	; () banked
 19194  007AFC  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19195                           
 19196                           ;menu.c: 403: which_screen = SEVENTHS_MENU;
 19197  007AFE  0E0B               	movlw	11
 19198  007B00  6FF9               	movwf	_which_screen& (0+255),b
 19199                           
 19200                           ; BSR set to: 0
 19201                           ;menu.c: 404: encoder_click = 0;
 19202  007B02  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19203                           
 19204                           ; BSR set to: 0
 19205                           ;menu.c: 406: seventhMenu.selector = which_seventh;
 19206  007B04  C0EF  F167         	movff	_which_seventh,_seventhMenu+2
 19207                           
 19208                           ;menu.c: 408: while(encoder_click == 0) {
 19209  007B08  D036               	goto	l3441
 19210  007B0A                     
 19211                           ; BSR set to: 0
 19212                           ;menu.c: 409: processEncoderBuxton();
 19213                           
 19214                           ; BSR set to: 0
 19215  007B0A  EC09  F000         	call	_processEncoderBuxton	;wreg free
 19216                           
 19217                           ;menu.c: 410: if (lcd_print_once == 0) {
 19218  007B0E  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19219  007B10  D029               	goto	l3443
 19220                           
 19221                           ;menu.c: 411: clear_row1();
 19222  007B12  EC5D  F04A         	call	_clear_row1	;wreg free
 19223                           
 19224                           ;menu.c: 412: Lcd_Print_String("Select Seventh:");
 19225  007B16  0E2D               	movlw	low STR_26
 19226  007B18  0100               	movlb	0	; () banked
 19227  007B1A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19228  007B1C  0EFE               	movlw	high STR_26
 19229  007B1E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19230  007B20  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 19231                           
 19232                           ;menu.c: 413: clear_row2();
 19233  007B24  EC49  F04A         	call	_clear_row2	;wreg free
 19234                           
 19235                           ;menu.c: 414: Lcd_Print_String(LCD_STRINGS[(seventhMenu.selector % seventhMenu.number) +
      +                           seventhMenu.address]);
 19236  007B28  C165  F060         	movff	_seventhMenu,___lbmod@divisor
 19237  007B2C  0101               	movlb	1	; () banked
 19238  007B2E  5167               	movf	(_seventhMenu+2)& (0+255),w,b
 19239  007B30  ECC8  F049         	call	___lbmod
 19240  007B34  0100               	movlb	0	; () banked
 19241  007B36  6F70               	movwf	??_Function_A_3& (0+255),b
 19242  007B38  5170               	movf	??_Function_A_3& (0+255),w,b
 19243  007B3A  0101               	movlb	1	; () banked
 19244  007B3C  2566               	addwf	(_seventhMenu+1)& (0+255),w,b
 19245  007B3E  0100               	movlb	0	; () banked
 19246  007B40  6F64               	movwf	___wmul@multiplier& (0+255),b
 19247  007B42  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 19248  007B44  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19249  007B46  0E00               	movlw	0
 19250  007B48  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19251  007B4A  0E11               	movlw	17
 19252  007B4C  6F66               	movwf	___wmul@multiplicand& (0+255),b
 19253  007B4E  EC71  F04A         	call	___wmul	;wreg free
 19254  007B52  0E9E               	movlw	low _LCD_STRINGS
 19255  007B54  0100               	movlb	0	; () banked
 19256  007B56  2564               	addwf	?___wmul& (0+255),w,b
 19257  007B58  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19258  007B5A  0EF3               	movlw	high _LCD_STRINGS
 19259  007B5C  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 19260  007B5E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19261  007B60  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 19262  007B64                     l3443:
 19263                           
 19264                           ;menu.c: 415: }
 19265                           ;menu.c: 416: which_seventh = seventhMenu.selector % seventhMenu.number;
 19266  007B64  C165  F060         	movff	_seventhMenu,___lbmod@divisor
 19267  007B68  0101               	movlb	1	; () banked
 19268  007B6A  5167               	movf	(_seventhMenu+2)& (0+255),w,b
 19269  007B6C  ECC8  F049         	call	___lbmod
 19270  007B70  0100               	movlb	0	; () banked
 19271  007B72  6FEF               	movwf	_which_seventh& (0+255),b
 19272                           
 19273                           ; BSR set to: 0
 19274                           ;menu.c: 417: lcd_print_once = 1;
 19275  007B74  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19276  007B76                     l3441:
 19277                           
 19278                           ; BSR set to: 0
 19279                           
 19280                           ; BSR set to: 0
 19281  007B76  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19282  007B78  0012               	return	
 19283  007B7A  D7C7               	goto	l3442
 19284  007B7C                     __end_of_Function_A_3:
 19285                           	opt stack 0
 19286                           tblptru	equ	0xFF8
 19287                           tblptrh	equ	0xFF7
 19288                           tblptrl	equ	0xFF6
 19289                           tablat	equ	0xFF5
 19290                           prodh	equ	0xFF4
 19291                           prodl	equ	0xFF3
 19292                           intcon	equ	0xFF2
 19293                           intcon2	equ	0xFF1
 19294                           postinc0	equ	0xFEE
 19295                           wreg	equ	0xFE8
 19296                           postdec1	equ	0xFE5
 19297                           fsr1l	equ	0xFE1
 19298                           indf2	equ	0xFDF
 19299                           postinc2	equ	0xFDE
 19300                           plusw2	equ	0xFDB
 19301                           fsr2h	equ	0xFDA
 19302                           fsr2l	equ	0xFD9
 19303                           status	equ	0xFD8
 19304                           
 19305 ;; *************** function _Function_A_2 *****************
 19306 ;; Defined at:
 19307 ;;		line 380 in file "menu.c"
 19308 ;; Parameters:    Size  Location     Type
 19309 ;;		None
 19310 ;; Auto vars:     Size  Location     Type
 19311 ;;		None
 19312 ;; Return value:  Size  Location     Type
 19313 ;;                  1    wreg      void 
 19314 ;; Registers used:
 19315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19316 ;; Tracked objects:
 19317 ;;		On entry : 0/0
 19318 ;;		On exit  : 0/0
 19319 ;;		Unchanged: 0/0
 19320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19323 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19324 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19325 ;;Total ram usage:        1 bytes
 19326 ;; Hardware stack levels used:    1
 19327 ;; Hardware stack levels required when called:    9
 19328 ;; This function calls:
 19329 ;;		_Lcd_Print_String
 19330 ;;		___lbmod
 19331 ;;		___wmul
 19332 ;;		_clear_row1
 19333 ;;		_clear_row2
 19334 ;;		_processEncoderBuxton
 19335 ;; This function is called by:
 19336 ;;		_Function_A
 19337 ;; This function uses a non-reentrant model
 19338 ;;
 19339                           
 19340                           	psect	text60
 19341  008082                     __ptext60:
 19342                           	opt stack 0
 19343  008082                     _Function_A_2:
 19344                           	opt stack 19
 19345                           
 19346                           ;menu.c: 381: KEYBOARD_MODE = TRIAD;
 19347                           
 19348                           ; BSR set to: 0
 19349                           ;incstack = 0
 19350  008082  0E06               	movlw	6
 19351  008084  0100               	movlb	0	; () banked
 19352  008086  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19353                           
 19354                           ;menu.c: 382: which_screen = TRIADS_MENU;
 19355  008088  0E0A               	movlw	10
 19356  00808A  6FF9               	movwf	_which_screen& (0+255),b
 19357                           
 19358                           ; BSR set to: 0
 19359                           ;menu.c: 383: encoder_click = 0;
 19360  00808C  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19361                           
 19362                           ; BSR set to: 0
 19363                           ;menu.c: 385: triadMenu.selector = which_triad;
 19364  00808E  C0F0  F046         	movff	_which_triad,_triadMenu+2
 19365                           
 19366                           ;menu.c: 387: while(encoder_click == 0) {
 19367  008092  D032               	goto	l3434
 19368  008094                     
 19369                           ; BSR set to: 0
 19370                           ;menu.c: 388: processEncoderBuxton();
 19371                           
 19372                           ; BSR set to: 0
 19373  008094  EC09  F000         	call	_processEncoderBuxton	;wreg free
 19374                           
 19375                           ;menu.c: 389: if (lcd_print_once == 0) {
 19376  008098  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19377  00809A  D026               	goto	l3436
 19378                           
 19379                           ;menu.c: 390: clear_row1();
 19380  00809C  EC5D  F04A         	call	_clear_row1	;wreg free
 19381                           
 19382                           ;menu.c: 391: Lcd_Print_String("Select Triad:");
 19383  0080A0  0ED2               	movlw	low STR_25
 19384  0080A2  0100               	movlb	0	; () banked
 19385  0080A4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19386  0080A6  0EFE               	movlw	high STR_25
 19387  0080A8  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19388  0080AA  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 19389                           
 19390                           ;menu.c: 392: clear_row2();
 19391  0080AE  EC49  F04A         	call	_clear_row2	;wreg free
 19392                           
 19393                           ;menu.c: 393: Lcd_Print_String(LCD_STRINGS[(triadMenu.selector % triadMenu.number) + tri
      +                          adMenu.address]);
 19394  0080B2  C044  F060         	movff	_triadMenu,___lbmod@divisor
 19395  0080B6  5046               	movf	_triadMenu+2,w,c
 19396  0080B8  ECC8  F049         	call	___lbmod
 19397  0080BC  0100               	movlb	0	; () banked
 19398  0080BE  6F70               	movwf	??_Function_A_2& (0+255),b
 19399  0080C0  5170               	movf	??_Function_A_2& (0+255),w,b
 19400  0080C2  2445               	addwf	_triadMenu+1,w,c
 19401  0080C4  6F64               	movwf	___wmul@multiplier& (0+255),b
 19402  0080C6  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 19403  0080C8  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19404  0080CA  0E00               	movlw	0
 19405  0080CC  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19406  0080CE  0E11               	movlw	17
 19407  0080D0  6F66               	movwf	___wmul@multiplicand& (0+255),b
 19408  0080D2  EC71  F04A         	call	___wmul	;wreg free
 19409  0080D6  0E9E               	movlw	low _LCD_STRINGS
 19410  0080D8  0100               	movlb	0	; () banked
 19411  0080DA  2564               	addwf	?___wmul& (0+255),w,b
 19412  0080DC  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19413  0080DE  0EF3               	movlw	high _LCD_STRINGS
 19414  0080E0  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 19415  0080E2  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19416  0080E4  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 19417  0080E8                     l3436:
 19418                           
 19419                           ;menu.c: 394: }
 19420                           ;menu.c: 395: which_triad = triadMenu.selector % triadMenu.number;
 19421  0080E8  C044  F060         	movff	_triadMenu,___lbmod@divisor
 19422  0080EC  5046               	movf	_triadMenu+2,w,c
 19423  0080EE  ECC8  F049         	call	___lbmod
 19424  0080F2  0100               	movlb	0	; () banked
 19425  0080F4  6FF0               	movwf	_which_triad& (0+255),b
 19426                           
 19427                           ; BSR set to: 0
 19428                           ;menu.c: 396: lcd_print_once = 1;
 19429  0080F6  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19430  0080F8                     l3434:
 19431                           
 19432                           ; BSR set to: 0
 19433                           
 19434                           ; BSR set to: 0
 19435  0080F8  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19436  0080FA  0012               	return	
 19437  0080FC  D7CB               	goto	l3435
 19438  0080FE                     __end_of_Function_A_2:
 19439                           	opt stack 0
 19440                           tblptru	equ	0xFF8
 19441                           tblptrh	equ	0xFF7
 19442                           tblptrl	equ	0xFF6
 19443                           tablat	equ	0xFF5
 19444                           prodh	equ	0xFF4
 19445                           prodl	equ	0xFF3
 19446                           intcon	equ	0xFF2
 19447                           intcon2	equ	0xFF1
 19448                           postinc0	equ	0xFEE
 19449                           wreg	equ	0xFE8
 19450                           postdec1	equ	0xFE5
 19451                           fsr1l	equ	0xFE1
 19452                           indf2	equ	0xFDF
 19453                           postinc2	equ	0xFDE
 19454                           plusw2	equ	0xFDB
 19455                           fsr2h	equ	0xFDA
 19456                           fsr2l	equ	0xFD9
 19457                           status	equ	0xFD8
 19458                           
 19459 ;; *************** function _Function_A_1 *****************
 19460 ;; Defined at:
 19461 ;;		line 358 in file "menu.c"
 19462 ;; Parameters:    Size  Location     Type
 19463 ;;		None
 19464 ;; Auto vars:     Size  Location     Type
 19465 ;;		None
 19466 ;; Return value:  Size  Location     Type
 19467 ;;                  1    wreg      void 
 19468 ;; Registers used:
 19469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19470 ;; Tracked objects:
 19471 ;;		On entry : 0/0
 19472 ;;		On exit  : 0/0
 19473 ;;		Unchanged: 0/0
 19474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19478 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19479 ;;Total ram usage:        1 bytes
 19480 ;; Hardware stack levels used:    1
 19481 ;; Hardware stack levels required when called:    9
 19482 ;; This function calls:
 19483 ;;		_Lcd_Print_String
 19484 ;;		___lbmod
 19485 ;;		___wmul
 19486 ;;		_clear_row1
 19487 ;;		_clear_row2
 19488 ;;		_processEncoderBuxton
 19489 ;; This function is called by:
 19490 ;;		_Function_A
 19491 ;; This function uses a non-reentrant model
 19492 ;;
 19493                           
 19494                           	psect	text61
 19495  0080FE                     __ptext61:
 19496                           	opt stack 0
 19497  0080FE                     _Function_A_1:
 19498                           	opt stack 19
 19499                           
 19500                           ;menu.c: 360: KEYBOARD_MODE = MODES;
 19501                           
 19502                           ; BSR set to: 0
 19503                           ;incstack = 0
 19504  0080FE  0E03               	movlw	3
 19505  008100  0100               	movlb	0	; () banked
 19506  008102  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19507                           
 19508                           ;menu.c: 361: which_screen = MODES_MENU;
 19509  008104  0E09               	movlw	9
 19510  008106  6FF9               	movwf	_which_screen& (0+255),b
 19511                           
 19512                           ; BSR set to: 0
 19513                           ;menu.c: 362: encoder_click = 0;
 19514  008108  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19515                           
 19516                           ; BSR set to: 0
 19517                           ;menu.c: 364: modeMenu.selector = which_mode;
 19518  00810A  C0F1  F049         	movff	_which_mode,_modeMenu+2
 19519                           
 19520                           ;menu.c: 366: while(encoder_click == 0) {
 19521  00810E  D032               	goto	l3427
 19522  008110                     
 19523                           ; BSR set to: 0
 19524                           ;menu.c: 367: processEncoderBuxton();
 19525                           
 19526                           ; BSR set to: 0
 19527  008110  EC09  F000         	call	_processEncoderBuxton	;wreg free
 19528                           
 19529                           ;menu.c: 368: if (lcd_print_once == 0) {
 19530  008114  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19531  008116  D026               	goto	l3429
 19532                           
 19533                           ;menu.c: 369: clear_row1();
 19534  008118  EC5D  F04A         	call	_clear_row1	;wreg free
 19535                           
 19536                           ;menu.c: 370: Lcd_Print_String("Enter Mode:");
 19537  00811C  0E58               	movlw	low STR_24
 19538  00811E  0100               	movlb	0	; () banked
 19539  008120  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19540  008122  0EFF               	movlw	high STR_24
 19541  008124  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19542  008126  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 19543                           
 19544                           ;menu.c: 371: clear_row2();
 19545  00812A  EC49  F04A         	call	_clear_row2	;wreg free
 19546                           
 19547                           ;menu.c: 372: Lcd_Print_String(LCD_STRINGS[(modeMenu.selector % modeMenu.number) + modeM
      +                          enu.address]);
 19548  00812E  C047  F060         	movff	_modeMenu,___lbmod@divisor
 19549  008132  5049               	movf	_modeMenu+2,w,c
 19550  008134  ECC8  F049         	call	___lbmod
 19551  008138  0100               	movlb	0	; () banked
 19552  00813A  6F70               	movwf	??_Function_A_1& (0+255),b
 19553  00813C  5170               	movf	??_Function_A_1& (0+255),w,b
 19554  00813E  2448               	addwf	_modeMenu+1,w,c
 19555  008140  6F64               	movwf	___wmul@multiplier& (0+255),b
 19556  008142  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 19557  008144  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19558  008146  0E00               	movlw	0
 19559  008148  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19560  00814A  0E11               	movlw	17
 19561  00814C  6F66               	movwf	___wmul@multiplicand& (0+255),b
 19562  00814E  EC71  F04A         	call	___wmul	;wreg free
 19563  008152  0E9E               	movlw	low _LCD_STRINGS
 19564  008154  0100               	movlb	0	; () banked
 19565  008156  2564               	addwf	?___wmul& (0+255),w,b
 19566  008158  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19567  00815A  0EF3               	movlw	high _LCD_STRINGS
 19568  00815C  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 19569  00815E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19570  008160  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 19571  008164                     l3429:
 19572                           
 19573                           ;menu.c: 373: }
 19574                           ;menu.c: 374: which_mode = modeMenu.selector % modeMenu.number;
 19575  008164  C047  F060         	movff	_modeMenu,___lbmod@divisor
 19576  008168  5049               	movf	_modeMenu+2,w,c
 19577  00816A  ECC8  F049         	call	___lbmod
 19578  00816E  0100               	movlb	0	; () banked
 19579  008170  6FF1               	movwf	_which_mode& (0+255),b
 19580                           
 19581                           ; BSR set to: 0
 19582                           ;menu.c: 375: lcd_print_once = 1;
 19583  008172  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19584  008174                     l3427:
 19585                           
 19586                           ; BSR set to: 0
 19587                           
 19588                           ; BSR set to: 0
 19589  008174  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19590  008176  0012               	return	
 19591  008178  D7CB               	goto	l3428
 19592  00817A                     __end_of_Function_A_1:
 19593                           	opt stack 0
 19594                           tblptru	equ	0xFF8
 19595                           tblptrh	equ	0xFF7
 19596                           tblptrl	equ	0xFF6
 19597                           tablat	equ	0xFF5
 19598                           prodh	equ	0xFF4
 19599                           prodl	equ	0xFF3
 19600                           intcon	equ	0xFF2
 19601                           intcon2	equ	0xFF1
 19602                           postinc0	equ	0xFEE
 19603                           wreg	equ	0xFE8
 19604                           postdec1	equ	0xFE5
 19605                           fsr1l	equ	0xFE1
 19606                           indf2	equ	0xFDF
 19607                           postinc2	equ	0xFDE
 19608                           plusw2	equ	0xFDB
 19609                           fsr2h	equ	0xFDA
 19610                           fsr2l	equ	0xFD9
 19611                           status	equ	0xFD8
 19612                           
 19613 ;; *************** function _processEncoderBuxton *****************
 19614 ;; Defined at:
 19615 ;;		line 51 in file "encoder.c"
 19616 ;; Parameters:    Size  Location     Type
 19617 ;;		None
 19618 ;; Auto vars:     Size  Location     Type
 19619 ;;		None
 19620 ;; Return value:  Size  Location     Type
 19621 ;;                  1    wreg      void 
 19622 ;; Registers used:
 19623 ;;		wreg, status,2, status,0
 19624 ;; Tracked objects:
 19625 ;;		On entry : 0/0
 19626 ;;		On exit  : 0/0
 19627 ;;		Unchanged: 0/0
 19628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19631 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19632 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19633 ;;Total ram usage:        7 bytes
 19634 ;; Hardware stack levels used:    1
 19635 ;; Hardware stack levels required when called:    5
 19636 ;; This function calls:
 19637 ;;		Nothing
 19638 ;; This function is called by:
 19639 ;;		_Function_A_1
 19640 ;;		_Function_A_2
 19641 ;;		_Function_A_3
 19642 ;;		_Function_A
 19643 ;;		_Function_B
 19644 ;;		_Function_C_1
 19645 ;;		_Function_C_2
 19646 ;;		_Function_C_3
 19647 ;;		_Function_C
 19648 ;;		_Function_D_1
 19649 ;;		_Function_D_2
 19650 ;;		_Function_D_3
 19651 ;;		_Function_D_4
 19652 ;;		_Function_D_5
 19653 ;;		_Function_D
 19654 ;;		_Function_E_1
 19655 ;;		_Function_E_2
 19656 ;;		_Function_E
 19657 ;;		_Function_F
 19658 ;;		_Function_G_1
 19659 ;;		_Function_G_2
 19660 ;;		_Function_G_4
 19661 ;;		_Function_G
 19662 ;;		_Function_H
 19663 ;;		_Function_H_1
 19664 ;;		_Function_H_2
 19665 ;;		_Function_H_3
 19666 ;;		_Function_H_4
 19667 ;;		_Function_H_5
 19668 ;;		_Function_H_6_1
 19669 ;;		_Function_H_6_2
 19670 ;;		_Function_H_6
 19671 ;;		_Function_H_7
 19672 ;;		_Function_H_8_1
 19673 ;;		_Function_H_8_2
 19674 ;;		_Function_H_8
 19675 ;;		_Function_H_9_1
 19676 ;;		_Function_H_9_2
 19677 ;;		_Function_H_9_3
 19678 ;;		_Function_H_9_4
 19679 ;;		_Function_H_9
 19680 ;;		_main
 19681 ;; This function uses a non-reentrant model
 19682 ;;
 19683                           
 19684                           	psect	text62
 19685  000012                     __ptext62:
 19686                           	opt stack 0
 19687  000012                     _processEncoderBuxton:
 19688                           	opt stack 25
 19689                           
 19690                           ;encoder.c: 53: if (encoder_direction == 0x00) {return;}
 19691                           
 19692                           ; BSR set to: 0
 19693                           ;incstack = 0
 19694  000012  0100               	movlb	0	; () banked
 19695  000014  51EB               	movf	_encoder_direction& (0+255),w,b
 19696  000016  B4D8               	btfsc	status,2,c
 19697  000018  0012               	return	
 19698                           
 19699                           ; BSR set to: 0
 19700                           ;encoder.c: 56: if (encoder_direction == 0x10) {
 19701                           
 19702                           ; BSR set to: 0
 19703                           
 19704                           ; BSR set to: 0
 19705  00001A  0E10               	movlw	16
 19706  00001C  19EB               	xorwf	_encoder_direction& (0+255),w,b
 19707  00001E  A4D8               	btfss	status,2,c
 19708  000020  D3A8               	goto	l886
 19709                           
 19710                           ; BSR set to: 0
 19711                           ;encoder.c: 58: lcd_print_once = 0;
 19712  000022  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19713                           
 19714                           ; BSR set to: 0
 19715                           ;encoder.c: 61: if (which_screen == MAIN_MENU) {
 19716  000024  0E02               	movlw	2
 19717  000026  19F9               	xorwf	_which_screen& (0+255),w,b
 19718  000028  A4D8               	btfss	status,2,c
 19719  00002A  D01E               	goto	l816
 19720                           
 19721                           ; BSR set to: 0
 19722                           ;encoder.c: 62: if(mainMenu.selector < mainMenu.number - 1){
 19723  00002C  0EFF               	movlw	255
 19724  00002E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19725  000030  0EFF               	movlw	255
 19726  000032  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19727  000034  0101               	movlb	1	; () banked
 19728  000036  5168               	movf	_mainMenu& (0+255),w,b
 19729  000038  0100               	movlb	0	; () banked
 19730  00003A  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19731  00003C  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19732  00003E  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19733  000040  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19734  000042  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19735  000044  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19736  000046  0101               	movlb	1	; () banked
 19737  000048  516A               	movf	(_mainMenu+2)& (0+255),w,b
 19738  00004A  0100               	movlb	0	; () banked
 19739  00004C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19740  00004E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19741  000050  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19742  000052  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19743  000054  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19744  000056  0A80               	xorlw	128
 19745  000058  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19746  00005A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19747  00005C  0A80               	xorlw	128
 19748  00005E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19749  000060  B0D8               	btfsc	status,0,c
 19750  000062  D002               	goto	l816
 19751                           
 19752                           ; BSR set to: 0
 19753                           ;encoder.c: 63: mainMenu.selector++;
 19754  000064  0101               	movlb	1	; () banked
 19755  000066  2B6A               	incf	(_mainMenu+2)& (0+255),f,b
 19756  000068                     l816:
 19757                           
 19758                           ;encoder.c: 64: }
 19759                           ;encoder.c: 65: }
 19760                           ;encoder.c: 66: if (which_screen == KEYBOARD_MENU) {
 19761                           
 19762                           ; BSR set to: 1
 19763                           
 19764                           ; BSR set to: 1
 19765  000068  0E03               	movlw	3
 19766  00006A  0100               	movlb	0	; () banked
 19767  00006C  19F9               	xorwf	_which_screen& (0+255),w,b
 19768  00006E  A4D8               	btfss	status,2,c
 19769  000070  D018               	goto	l818
 19770                           
 19771                           ; BSR set to: 0
 19772                           ;encoder.c: 67: if(keyboardMenu.selector < (keyboardMenu.number - 1)){
 19773  000072  0EFF               	movlw	255
 19774  000074  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19775  000076  0EFF               	movlw	255
 19776  000078  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19777  00007A  504A               	movf	_keyboardMenu,w,c
 19778  00007C  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19779  00007E  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19780  000080  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19781  000082  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19782  000084  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19783  000086  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19784  000088  504C               	movf	_keyboardMenu+2,w,c
 19785  00008A  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19786  00008C  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19787  00008E  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19788  000090  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19789  000092  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19790  000094  0A80               	xorlw	128
 19791  000096  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19792  000098  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19793  00009A  0A80               	xorlw	128
 19794  00009C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19795  00009E  A0D8               	btfss	status,0,c
 19796                           
 19797                           ; BSR set to: 0
 19798                           ;encoder.c: 68: keyboardMenu.selector++;
 19799  0000A0  2A4C               	incf	_keyboardMenu+2,f,c
 19800  0000A2                     l818:
 19801                           
 19802                           ; BSR set to: 0
 19803                           ;encoder.c: 69: }
 19804                           ;encoder.c: 70: }
 19805                           ;encoder.c: 71: if (which_screen == TRANSPOSE_MENU) {
 19806                           
 19807                           ; BSR set to: 0
 19808                           
 19809                           ; BSR set to: 0
 19810  0000A2  0E04               	movlw	4
 19811  0000A4  19F9               	xorwf	_which_screen& (0+255),w,b
 19812  0000A6  A4D8               	btfss	status,2,c
 19813  0000A8  D01E               	goto	l820
 19814                           
 19815                           ; BSR set to: 0
 19816                           ;encoder.c: 72: if(transposeMenu.selector < (transposeMenu.number - 1)){
 19817  0000AA  0EFF               	movlw	255
 19818  0000AC  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19819  0000AE  0EFF               	movlw	255
 19820  0000B0  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19821  0000B2  0101               	movlb	1	; () banked
 19822  0000B4  5162               	movf	_transposeMenu& (0+255),w,b
 19823  0000B6  0100               	movlb	0	; () banked
 19824  0000B8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19825  0000BA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19826  0000BC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19827  0000BE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19828  0000C0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19829  0000C2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19830  0000C4  0101               	movlb	1	; () banked
 19831  0000C6  5164               	movf	(_transposeMenu+2)& (0+255),w,b
 19832  0000C8  0100               	movlb	0	; () banked
 19833  0000CA  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19834  0000CC  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19835  0000CE  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19836  0000D0  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19837  0000D2  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19838  0000D4  0A80               	xorlw	128
 19839  0000D6  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19840  0000D8  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19841  0000DA  0A80               	xorlw	128
 19842  0000DC  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19843  0000DE  B0D8               	btfsc	status,0,c
 19844  0000E0  D002               	goto	l820
 19845                           
 19846                           ; BSR set to: 0
 19847                           ;encoder.c: 73: transposeMenu.selector++;
 19848  0000E2  0101               	movlb	1	; () banked
 19849  0000E4  2B64               	incf	(_transposeMenu+2)& (0+255),f,b
 19850  0000E6                     l820:
 19851                           
 19852                           ;encoder.c: 74: }
 19853                           ;encoder.c: 75: }
 19854                           ;encoder.c: 76: if (which_screen == DRUM_MENU) {
 19855                           
 19856                           ; BSR set to: 1
 19857                           
 19858                           ; BSR set to: 1
 19859  0000E6  0E05               	movlw	5
 19860  0000E8  0100               	movlb	0	; () banked
 19861  0000EA  19F9               	xorwf	_which_screen& (0+255),w,b
 19862  0000EC  A4D8               	btfss	status,2,c
 19863  0000EE  D018               	goto	l822
 19864                           
 19865                           ; BSR set to: 0
 19866                           ;encoder.c: 77: if(drumMenu.selector < (drumMenu.number - 1)){
 19867  0000F0  0EFF               	movlw	255
 19868  0000F2  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19869  0000F4  0EFF               	movlw	255
 19870  0000F6  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19871  0000F8  5041               	movf	_drumMenu,w,c
 19872  0000FA  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19873  0000FC  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19874  0000FE  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19875  000100  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19876  000102  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19877  000104  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19878  000106  5043               	movf	_drumMenu+2,w,c
 19879  000108  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19880  00010A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19881  00010C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19882  00010E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19883  000110  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19884  000112  0A80               	xorlw	128
 19885  000114  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19886  000116  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19887  000118  0A80               	xorlw	128
 19888  00011A  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19889  00011C  A0D8               	btfss	status,0,c
 19890                           
 19891                           ; BSR set to: 0
 19892                           ;encoder.c: 78: drumMenu.selector++;
 19893  00011E  2A43               	incf	_drumMenu+2,f,c
 19894  000120                     l822:
 19895                           
 19896                           ; BSR set to: 0
 19897                           ;encoder.c: 79: }
 19898                           ;encoder.c: 80: }
 19899                           ;encoder.c: 81: if (which_screen == POTENTIOMETER_MENU) {
 19900                           
 19901                           ; BSR set to: 0
 19902                           
 19903                           ; BSR set to: 0
 19904  000120  0E06               	movlw	6
 19905  000122  19F9               	xorwf	_which_screen& (0+255),w,b
 19906  000124  A4D8               	btfss	status,2,c
 19907  000126  D018               	goto	l824
 19908                           
 19909                           ; BSR set to: 0
 19910                           ;encoder.c: 82: if(potsMenu.selector < (potsMenu.number - 1)){
 19911  000128  0EFF               	movlw	255
 19912  00012A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19913  00012C  0EFF               	movlw	255
 19914  00012E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19915  000130  503E               	movf	_potsMenu,w,c
 19916  000132  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19917  000134  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19918  000136  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19919  000138  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19920  00013A  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19921  00013C  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19922  00013E  5040               	movf	_potsMenu+2,w,c
 19923  000140  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19924  000142  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19925  000144  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19926  000146  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19927  000148  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19928  00014A  0A80               	xorlw	128
 19929  00014C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19930  00014E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19931  000150  0A80               	xorlw	128
 19932  000152  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19933  000154  A0D8               	btfss	status,0,c
 19934                           
 19935                           ; BSR set to: 0
 19936                           ;encoder.c: 83: potsMenu.selector++;
 19937  000156  2A40               	incf	_potsMenu+2,f,c
 19938  000158                     l824:
 19939                           
 19940                           ; BSR set to: 0
 19941                           ;encoder.c: 84: }
 19942                           ;encoder.c: 85: }
 19943                           ;encoder.c: 86: if (which_screen == MIDI_CHANNEL_MENU) {
 19944                           
 19945                           ; BSR set to: 0
 19946                           
 19947                           ; BSR set to: 0
 19948  000158  0E07               	movlw	7
 19949  00015A  19F9               	xorwf	_which_screen& (0+255),w,b
 19950  00015C  A4D8               	btfss	status,2,c
 19951  00015E  D01E               	goto	l826
 19952                           
 19953                           ; BSR set to: 0
 19954                           ;encoder.c: 87: if(midiChannelMenu.selector < (midiChannelMenu.number - 1)){
 19955  000160  0EFF               	movlw	255
 19956  000162  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19957  000164  0EFF               	movlw	255
 19958  000166  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19959  000168  0101               	movlb	1	; () banked
 19960  00016A  5147               	movf	_midiChannelMenu& (0+255),w,b
 19961  00016C  0100               	movlb	0	; () banked
 19962  00016E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19963  000170  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19964  000172  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19965  000174  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19966  000176  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19967  000178  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19968  00017A  0101               	movlb	1	; () banked
 19969  00017C  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 19970  00017E  0100               	movlb	0	; () banked
 19971  000180  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19972  000182  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19973  000184  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19974  000186  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19975  000188  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19976  00018A  0A80               	xorlw	128
 19977  00018C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19978  00018E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19979  000190  0A80               	xorlw	128
 19980  000192  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19981  000194  B0D8               	btfsc	status,0,c
 19982  000196  D002               	goto	l826
 19983                           
 19984                           ; BSR set to: 0
 19985                           ;encoder.c: 88: midiChannelMenu.selector++;
 19986  000198  0101               	movlb	1	; () banked
 19987  00019A  2B49               	incf	(_midiChannelMenu+2)& (0+255),f,b
 19988  00019C                     l826:
 19989                           
 19990                           ;encoder.c: 89: }
 19991                           ;encoder.c: 90: }
 19992                           ;encoder.c: 92: if (which_screen == MODES_MENU) {
 19993                           
 19994                           ; BSR set to: 1
 19995                           
 19996                           ; BSR set to: 1
 19997  00019C  0E09               	movlw	9
 19998  00019E  0100               	movlb	0	; () banked
 19999  0001A0  19F9               	xorwf	_which_screen& (0+255),w,b
 20000  0001A2  A4D8               	btfss	status,2,c
 20001  0001A4  D018               	goto	l828
 20002                           
 20003                           ; BSR set to: 0
 20004                           ;encoder.c: 93: if(modeMenu.selector < (modeMenu.number - 1)){
 20005  0001A6  0EFF               	movlw	255
 20006  0001A8  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20007  0001AA  0EFF               	movlw	255
 20008  0001AC  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20009  0001AE  5047               	movf	_modeMenu,w,c
 20010  0001B0  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20011  0001B2  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20012  0001B4  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20013  0001B6  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20014  0001B8  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20015  0001BA  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20016  0001BC  5049               	movf	_modeMenu+2,w,c
 20017  0001BE  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20018  0001C0  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20019  0001C2  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20020  0001C4  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20021  0001C6  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20022  0001C8  0A80               	xorlw	128
 20023  0001CA  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20024  0001CC  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20025  0001CE  0A80               	xorlw	128
 20026  0001D0  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20027  0001D2  A0D8               	btfss	status,0,c
 20028                           
 20029                           ; BSR set to: 0
 20030                           ;encoder.c: 94: modeMenu.selector++;
 20031  0001D4  2A49               	incf	_modeMenu+2,f,c
 20032  0001D6                     l828:
 20033                           
 20034                           ; BSR set to: 0
 20035                           ;encoder.c: 95: }
 20036                           ;encoder.c: 96: }
 20037                           ;encoder.c: 97: if (which_screen == TRIADS_MENU) {
 20038                           
 20039                           ; BSR set to: 0
 20040                           
 20041                           ; BSR set to: 0
 20042  0001D6  0E0A               	movlw	10
 20043  0001D8  19F9               	xorwf	_which_screen& (0+255),w,b
 20044  0001DA  A4D8               	btfss	status,2,c
 20045  0001DC  D018               	goto	l830
 20046                           
 20047                           ; BSR set to: 0
 20048                           ;encoder.c: 98: if(triadMenu.selector < (triadMenu.number - 1)){
 20049  0001DE  0EFF               	movlw	255
 20050  0001E0  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20051  0001E2  0EFF               	movlw	255
 20052  0001E4  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20053  0001E6  5044               	movf	_triadMenu,w,c
 20054  0001E8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20055  0001EA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20056  0001EC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20057  0001EE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20058  0001F0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20059  0001F2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20060  0001F4  5046               	movf	_triadMenu+2,w,c
 20061  0001F6  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20062  0001F8  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20063  0001FA  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20064  0001FC  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20065  0001FE  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20066  000200  0A80               	xorlw	128
 20067  000202  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20068  000204  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20069  000206  0A80               	xorlw	128
 20070  000208  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20071  00020A  A0D8               	btfss	status,0,c
 20072                           
 20073                           ; BSR set to: 0
 20074                           ;encoder.c: 99: triadMenu.selector++;
 20075  00020C  2A46               	incf	_triadMenu+2,f,c
 20076  00020E                     l830:
 20077                           
 20078                           ; BSR set to: 0
 20079                           ;encoder.c: 100: }
 20080                           ;encoder.c: 101: }
 20081                           ;encoder.c: 102: if (which_screen == SEVENTHS_MENU) {
 20082                           
 20083                           ; BSR set to: 0
 20084                           
 20085                           ; BSR set to: 0
 20086  00020E  0E0B               	movlw	11
 20087  000210  19F9               	xorwf	_which_screen& (0+255),w,b
 20088  000212  A4D8               	btfss	status,2,c
 20089  000214  D01E               	goto	l832
 20090                           
 20091                           ; BSR set to: 0
 20092                           ;encoder.c: 103: if(seventhMenu.selector < (seventhMenu.number - 1)){
 20093  000216  0EFF               	movlw	255
 20094  000218  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20095  00021A  0EFF               	movlw	255
 20096  00021C  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20097  00021E  0101               	movlb	1	; () banked
 20098  000220  5165               	movf	_seventhMenu& (0+255),w,b
 20099  000222  0100               	movlb	0	; () banked
 20100  000224  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20101  000226  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20102  000228  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20103  00022A  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20104  00022C  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20105  00022E  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20106  000230  0101               	movlb	1	; () banked
 20107  000232  5167               	movf	(_seventhMenu+2)& (0+255),w,b
 20108  000234  0100               	movlb	0	; () banked
 20109  000236  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20110  000238  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20111  00023A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20112  00023C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20113  00023E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20114  000240  0A80               	xorlw	128
 20115  000242  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20116  000244  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20117  000246  0A80               	xorlw	128
 20118  000248  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20119  00024A  B0D8               	btfsc	status,0,c
 20120  00024C  D002               	goto	l832
 20121                           
 20122                           ; BSR set to: 0
 20123                           ;encoder.c: 104: seventhMenu.selector++;
 20124  00024E  0101               	movlb	1	; () banked
 20125  000250  2B67               	incf	(_seventhMenu+2)& (0+255),f,b
 20126  000252                     l832:
 20127                           
 20128                           ;encoder.c: 105: }
 20129                           ;encoder.c: 106: }
 20130                           ;encoder.c: 107: if (which_screen == DRUMS_CC_TYPE_MENU) {
 20131                           
 20132                           ; BSR set to: 1
 20133                           
 20134                           ; BSR set to: 1
 20135  000252  0E0C               	movlw	12
 20136  000254  0100               	movlb	0	; () banked
 20137  000256  19F9               	xorwf	_which_screen& (0+255),w,b
 20138  000258  A4D8               	btfss	status,2,c
 20139  00025A  D01E               	goto	l834
 20140                           
 20141                           ; BSR set to: 0
 20142                           ;encoder.c: 108: if(drumCCTypeMenu.selector < (drumCCTypeMenu.number - 1)){
 20143  00025C  0EFF               	movlw	255
 20144  00025E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20145  000260  0EFF               	movlw	255
 20146  000262  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20147  000264  0101               	movlb	1	; () banked
 20148  000266  515F               	movf	_drumCCTypeMenu& (0+255),w,b
 20149  000268  0100               	movlb	0	; () banked
 20150  00026A  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20151  00026C  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20152  00026E  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20153  000270  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20154  000272  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20155  000274  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20156  000276  0101               	movlb	1	; () banked
 20157  000278  5161               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 20158  00027A  0100               	movlb	0	; () banked
 20159  00027C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20160  00027E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20161  000280  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20162  000282  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20163  000284  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20164  000286  0A80               	xorlw	128
 20165  000288  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20166  00028A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20167  00028C  0A80               	xorlw	128
 20168  00028E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20169  000290  B0D8               	btfsc	status,0,c
 20170  000292  D002               	goto	l834
 20171                           
 20172                           ; BSR set to: 0
 20173                           ;encoder.c: 109: drumCCTypeMenu.selector++;
 20174  000294  0101               	movlb	1	; () banked
 20175  000296  2B61               	incf	(_drumCCTypeMenu+2)& (0+255),f,b
 20176  000298                     l834:
 20177                           
 20178                           ;encoder.c: 110: }
 20179                           ;encoder.c: 111: }
 20180                           ;encoder.c: 113: if (which_screen == DRUMS_NN_MENU) {
 20181                           
 20182                           ; BSR set to: 1
 20183                           
 20184                           ; BSR set to: 1
 20185  000298  0E0D               	movlw	13
 20186  00029A  0100               	movlb	0	; () banked
 20187  00029C  19F9               	xorwf	_which_screen& (0+255),w,b
 20188  00029E  A4D8               	btfss	status,2,c
 20189  0002A0  D01E               	goto	l836
 20190                           
 20191                           ; BSR set to: 0
 20192                           ;encoder.c: 114: if(drumNNMenu.selector < (drumNNMenu.number - 1)){
 20193  0002A2  0EFF               	movlw	255
 20194  0002A4  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20195  0002A6  0EFF               	movlw	255
 20196  0002A8  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20197  0002AA  0101               	movlb	1	; () banked
 20198  0002AC  515C               	movf	_drumNNMenu& (0+255),w,b
 20199  0002AE  0100               	movlb	0	; () banked
 20200  0002B0  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20201  0002B2  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20202  0002B4  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20203  0002B6  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20204  0002B8  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20205  0002BA  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20206  0002BC  0101               	movlb	1	; () banked
 20207  0002BE  515E               	movf	(_drumNNMenu+2)& (0+255),w,b
 20208  0002C0  0100               	movlb	0	; () banked
 20209  0002C2  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20210  0002C4  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20211  0002C6  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20212  0002C8  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20213  0002CA  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20214  0002CC  0A80               	xorlw	128
 20215  0002CE  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20216  0002D0  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20217  0002D2  0A80               	xorlw	128
 20218  0002D4  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20219  0002D6  B0D8               	btfsc	status,0,c
 20220  0002D8  D002               	goto	l836
 20221                           
 20222                           ; BSR set to: 0
 20223                           ;encoder.c: 115: drumNNMenu.selector++;
 20224  0002DA  0101               	movlb	1	; () banked
 20225  0002DC  2B5E               	incf	(_drumNNMenu+2)& (0+255),f,b
 20226  0002DE                     l836:
 20227                           
 20228                           ;encoder.c: 116: }
 20229                           ;encoder.c: 117: }
 20230                           ;encoder.c: 119: if (which_screen == DRUMS_CC_MENU) {
 20231                           
 20232                           ; BSR set to: 1
 20233                           
 20234                           ; BSR set to: 1
 20235  0002DE  0E0E               	movlw	14
 20236  0002E0  0100               	movlb	0	; () banked
 20237  0002E2  19F9               	xorwf	_which_screen& (0+255),w,b
 20238  0002E4  A4D8               	btfss	status,2,c
 20239  0002E6  D01E               	goto	l838
 20240                           
 20241                           ; BSR set to: 0
 20242                           ;encoder.c: 120: if(drumCCMenu.selector < (drumCCMenu.number - 1)){
 20243  0002E8  0EFF               	movlw	255
 20244  0002EA  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20245  0002EC  0EFF               	movlw	255
 20246  0002EE  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20247  0002F0  0101               	movlb	1	; () banked
 20248  0002F2  5159               	movf	_drumCCMenu& (0+255),w,b
 20249  0002F4  0100               	movlb	0	; () banked
 20250  0002F6  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20251  0002F8  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20252  0002FA  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20253  0002FC  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20254  0002FE  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20255  000300  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20256  000302  0101               	movlb	1	; () banked
 20257  000304  515B               	movf	(_drumCCMenu+2)& (0+255),w,b
 20258  000306  0100               	movlb	0	; () banked
 20259  000308  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20260  00030A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20261  00030C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20262  00030E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20263  000310  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20264  000312  0A80               	xorlw	128
 20265  000314  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20266  000316  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20267  000318  0A80               	xorlw	128
 20268  00031A  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20269  00031C  B0D8               	btfsc	status,0,c
 20270  00031E  D002               	goto	l838
 20271                           
 20272                           ; BSR set to: 0
 20273                           ;encoder.c: 121: drumCCMenu.selector++;
 20274  000320  0101               	movlb	1	; () banked
 20275  000322  2B5B               	incf	(_drumCCMenu+2)& (0+255),f,b
 20276  000324                     l838:
 20277                           
 20278                           ;encoder.c: 122: }
 20279                           ;encoder.c: 123: }
 20280                           ;encoder.c: 125: if (which_screen == POTS_RES_MENU) {
 20281                           
 20282                           ; BSR set to: 1
 20283                           
 20284                           ; BSR set to: 1
 20285  000324  0E0F               	movlw	15
 20286  000326  0100               	movlb	0	; () banked
 20287  000328  19F9               	xorwf	_which_screen& (0+255),w,b
 20288  00032A  A4D8               	btfss	status,2,c
 20289  00032C  D01E               	goto	l840
 20290                           
 20291                           ; BSR set to: 0
 20292                           ;encoder.c: 126: if(potsResoMenu.selector < (potsResoMenu.number - 1)){
 20293  00032E  0EFF               	movlw	255
 20294  000330  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20295  000332  0EFF               	movlw	255
 20296  000334  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20297  000336  0101               	movlb	1	; () banked
 20298  000338  5156               	movf	_potsResoMenu& (0+255),w,b
 20299  00033A  0100               	movlb	0	; () banked
 20300  00033C  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20301  00033E  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20302  000340  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20303  000342  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20304  000344  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20305  000346  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20306  000348  0101               	movlb	1	; () banked
 20307  00034A  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 20308  00034C  0100               	movlb	0	; () banked
 20309  00034E  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20310  000350  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20311  000352  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20312  000354  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20313  000356  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20314  000358  0A80               	xorlw	128
 20315  00035A  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20316  00035C  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20317  00035E  0A80               	xorlw	128
 20318  000360  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20319  000362  B0D8               	btfsc	status,0,c
 20320  000364  D002               	goto	l840
 20321                           
 20322                           ; BSR set to: 0
 20323                           ;encoder.c: 127: potsResoMenu.selector++;
 20324  000366  0101               	movlb	1	; () banked
 20325  000368  2B58               	incf	(_potsResoMenu+2)& (0+255),f,b
 20326  00036A                     l840:
 20327                           
 20328                           ;encoder.c: 128: }
 20329                           ;encoder.c: 129: }
 20330                           ;encoder.c: 131: if (which_screen == ENCODER_POLARITY_MENU) {
 20331                           
 20332                           ; BSR set to: 1
 20333                           
 20334                           ; BSR set to: 1
 20335  00036A  0E18               	movlw	24
 20336  00036C  0100               	movlb	0	; () banked
 20337  00036E  19F9               	xorwf	_which_screen& (0+255),w,b
 20338  000370  A4D8               	btfss	status,2,c
 20339  000372  D006               	goto	l842
 20340                           
 20341                           ; BSR set to: 0
 20342                           ;encoder.c: 135: if(encoderPolarityMenu.selector == 0){
 20343  000374  0101               	movlb	1	; () banked
 20344  000376  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 20345  000378  A4D8               	btfss	status,2,c
 20346  00037A  D002               	goto	l842
 20347                           
 20348                           ; BSR set to: 1
 20349                           ;encoder.c: 136: encoderPolarityMenu.selector = 1;
 20350  00037C  0E01               	movlw	1
 20351  00037E  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 20352  000380                     l842:
 20353                           
 20354                           ;encoder.c: 137: }
 20355                           ;encoder.c: 138: }
 20356                           ;encoder.c: 140: if (which_screen == POTS_ALPHA_MENU) {
 20357                           
 20358                           ; BSR set to: 1
 20359                           
 20360                           ; BSR set to: 1
 20361  000380  0E10               	movlw	16
 20362  000382  0100               	movlb	0	; () banked
 20363  000384  19F9               	xorwf	_which_screen& (0+255),w,b
 20364  000386  A4D8               	btfss	status,2,c
 20365  000388  D006               	goto	l844
 20366                           
 20367                           ; BSR set to: 0
 20368                           ;encoder.c: 141: if(potsAlphaMenu.selector <= 85){
 20369  00038A  0E56               	movlw	86
 20370  00038C  0101               	movlb	1	; () banked
 20371  00038E  6155               	cpfslt	(_potsAlphaMenu+2)& (0+255),b
 20372  000390  D002               	goto	l844
 20373                           
 20374                           ; BSR set to: 1
 20375                           ;encoder.c: 142: potsAlphaMenu.selector += 5;
 20376  000392  0E05               	movlw	5
 20377  000394  2755               	addwf	(_potsAlphaMenu+2)& (0+255),f,b
 20378  000396                     l844:
 20379                           
 20380                           ;encoder.c: 143: }
 20381                           ;encoder.c: 144: }
 20382                           ;encoder.c: 146: if (which_screen == POTS_CC_MENU) {
 20383                           
 20384                           ; BSR set to: 1
 20385  000396  0E11               	movlw	17
 20386  000398  0100               	movlb	0	; () banked
 20387  00039A  19F9               	xorwf	_which_screen& (0+255),w,b
 20388  00039C  A4D8               	btfss	status,2,c
 20389  00039E  D01E               	goto	l846
 20390                           
 20391                           ; BSR set to: 0
 20392                           ;encoder.c: 147: if(potsCCMenu.selector < (potsCCMenu.number - 1)){
 20393  0003A0  0EFF               	movlw	255
 20394  0003A2  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20395  0003A4  0EFF               	movlw	255
 20396  0003A6  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20397  0003A8  0101               	movlb	1	; () banked
 20398  0003AA  5150               	movf	_potsCCMenu& (0+255),w,b
 20399  0003AC  0100               	movlb	0	; () banked
 20400  0003AE  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20401  0003B0  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20402  0003B2  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20403  0003B4  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20404  0003B6  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20405  0003B8  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20406  0003BA  0101               	movlb	1	; () banked
 20407  0003BC  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 20408  0003BE  0100               	movlb	0	; () banked
 20409  0003C0  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20410  0003C2  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20411  0003C4  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20412  0003C6  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20413  0003C8  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20414  0003CA  0A80               	xorlw	128
 20415  0003CC  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20416  0003CE  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20417  0003D0  0A80               	xorlw	128
 20418  0003D2  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20419  0003D4  B0D8               	btfsc	status,0,c
 20420  0003D6  D002               	goto	l846
 20421                           
 20422                           ; BSR set to: 0
 20423                           ;encoder.c: 148: potsCCMenu.selector++;
 20424  0003D8  0101               	movlb	1	; () banked
 20425  0003DA  2B52               	incf	(_potsCCMenu+2)& (0+255),f,b
 20426  0003DC                     l846:
 20427                           
 20428                           ;encoder.c: 149: }
 20429                           ;encoder.c: 150: }
 20430                           ;encoder.c: 152: if (which_screen == SLIDEPOTS_CC_MENU) {
 20431                           
 20432                           ; BSR set to: 1
 20433                           
 20434                           ; BSR set to: 1
 20435  0003DC  0E12               	movlw	18
 20436  0003DE  0100               	movlb	0	; () banked
 20437  0003E0  19F9               	xorwf	_which_screen& (0+255),w,b
 20438  0003E2  A4D8               	btfss	status,2,c
 20439  0003E4  D01E               	goto	l848
 20440                           
 20441                           ; BSR set to: 0
 20442                           ;encoder.c: 153: if(slidepotsCCMenu.selector < (slidepotsCCMenu.number - 1)){
 20443  0003E6  0EFF               	movlw	255
 20444  0003E8  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20445  0003EA  0EFF               	movlw	255
 20446  0003EC  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20447  0003EE  0101               	movlb	1	; () banked
 20448  0003F0  514D               	movf	_slidepotsCCMenu& (0+255),w,b
 20449  0003F2  0100               	movlb	0	; () banked
 20450  0003F4  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20451  0003F6  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20452  0003F8  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20453  0003FA  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20454  0003FC  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20455  0003FE  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20456  000400  0101               	movlb	1	; () banked
 20457  000402  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 20458  000404  0100               	movlb	0	; () banked
 20459  000406  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20460  000408  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20461  00040A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20462  00040C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20463  00040E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20464  000410  0A80               	xorlw	128
 20465  000412  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20466  000414  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20467  000416  0A80               	xorlw	128
 20468  000418  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20469  00041A  B0D8               	btfsc	status,0,c
 20470  00041C  D002               	goto	l848
 20471                           
 20472                           ; BSR set to: 0
 20473                           ;encoder.c: 154: slidepotsCCMenu.selector++;
 20474  00041E  0101               	movlb	1	; () banked
 20475  000420  2B4F               	incf	(_slidepotsCCMenu+2)& (0+255),f,b
 20476  000422                     l848:
 20477                           
 20478                           ;encoder.c: 155: }
 20479                           ;encoder.c: 156: }
 20480                           ;encoder.c: 158: if (which_screen == PROGRAM_CHANGE_MENU) {
 20481                           
 20482                           ; BSR set to: 1
 20483                           
 20484                           ; BSR set to: 1
 20485  000422  0E08               	movlw	8
 20486  000424  0100               	movlb	0	; () banked
 20487  000426  19F9               	xorwf	_which_screen& (0+255),w,b
 20488  000428  A4D8               	btfss	status,2,c
 20489  00042A  D005               	goto	l850
 20490                           
 20491                           ; BSR set to: 0
 20492                           ;encoder.c: 159: if(programChangeMenu.selector < 127){
 20493  00042C  0E7F               	movlw	127
 20494  00042E  0101               	movlb	1	; () banked
 20495  000430  6146               	cpfslt	(_programChangeMenu+2)& (0+255),b
 20496  000432  D001               	goto	l850
 20497                           
 20498                           ; BSR set to: 1
 20499                           ;encoder.c: 160: programChangeMenu.selector++;
 20500  000434  2B46               	incf	(_programChangeMenu+2)& (0+255),f,b
 20501  000436                     l850:
 20502                           
 20503                           ;encoder.c: 161: }
 20504                           ;encoder.c: 162: }
 20505                           ;encoder.c: 164: if (which_screen == MAIN_CH_MENU) {
 20506                           
 20507                           ; BSR set to: 1
 20508                           
 20509                           ; BSR set to: 1
 20510  000436  0E14               	movlw	20
 20511  000438  0100               	movlb	0	; () banked
 20512  00043A  19F9               	xorwf	_which_screen& (0+255),w,b
 20513  00043C  A4D8               	btfss	status,2,c
 20514  00043E  D005               	goto	l852
 20515                           
 20516                           ; BSR set to: 0
 20517                           ;encoder.c: 165: if(mainChannelMenu.selector < 15){
 20518  000440  0E0F               	movlw	15
 20519  000442  0101               	movlb	1	; () banked
 20520  000444  6143               	cpfslt	(_mainChannelMenu+2)& (0+255),b
 20521  000446  D001               	goto	l852
 20522                           
 20523                           ; BSR set to: 1
 20524                           ;encoder.c: 166: mainChannelMenu.selector++;
 20525  000448  2B43               	incf	(_mainChannelMenu+2)& (0+255),f,b
 20526  00044A                     l852:
 20527                           
 20528                           ;encoder.c: 167: }
 20529                           ;encoder.c: 168: }
 20530                           ;encoder.c: 170: if (which_screen == DRUM_CH_MENU) {
 20531                           
 20532                           ; BSR set to: 1
 20533                           
 20534                           ; BSR set to: 1
 20535  00044A  0E15               	movlw	21
 20536  00044C  0100               	movlb	0	; () banked
 20537  00044E  19F9               	xorwf	_which_screen& (0+255),w,b
 20538  000450  A4D8               	btfss	status,2,c
 20539  000452  D005               	goto	l854
 20540                           
 20541                           ; BSR set to: 0
 20542                           ;encoder.c: 171: if(drumChannelMenu.selector < 15){
 20543  000454  0E0F               	movlw	15
 20544  000456  0101               	movlb	1	; () banked
 20545  000458  6140               	cpfslt	(_drumChannelMenu+2)& (0+255),b
 20546  00045A  D001               	goto	l854
 20547                           
 20548                           ; BSR set to: 1
 20549                           ;encoder.c: 172: drumChannelMenu.selector++;
 20550  00045C  2B40               	incf	(_drumChannelMenu+2)& (0+255),f,b
 20551  00045E                     l854:
 20552                           
 20553                           ;encoder.c: 173: }
 20554                           ;encoder.c: 174: }
 20555                           ;encoder.c: 175: if (which_screen == JOYSTICK_CC_MENU) {
 20556                           
 20557                           ; BSR set to: 1
 20558                           
 20559                           ; BSR set to: 1
 20560  00045E  0E13               	movlw	19
 20561  000460  0100               	movlb	0	; () banked
 20562  000462  19F9               	xorwf	_which_screen& (0+255),w,b
 20563  000464  A4D8               	btfss	status,2,c
 20564  000466  D01E               	goto	l856
 20565                           
 20566                           ; BSR set to: 0
 20567                           ;encoder.c: 176: if(joystickCCMenu.selector < (joystickCCMenu.number - 1)){
 20568  000468  0EFF               	movlw	255
 20569  00046A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20570  00046C  0EFF               	movlw	255
 20571  00046E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20572  000470  0101               	movlb	1	; () banked
 20573  000472  514A               	movf	_joystickCCMenu& (0+255),w,b
 20574  000474  0100               	movlb	0	; () banked
 20575  000476  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20576  000478  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20577  00047A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20578  00047C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20579  00047E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20580  000480  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20581  000482  0101               	movlb	1	; () banked
 20582  000484  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 20583  000486  0100               	movlb	0	; () banked
 20584  000488  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20585  00048A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20586  00048C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20587  00048E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20588  000490  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20589  000492  0A80               	xorlw	128
 20590  000494  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20591  000496  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20592  000498  0A80               	xorlw	128
 20593  00049A  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20594  00049C  B0D8               	btfsc	status,0,c
 20595  00049E  D002               	goto	l856
 20596                           
 20597                           ; BSR set to: 0
 20598                           ;encoder.c: 177: joystickCCMenu.selector++;
 20599  0004A0  0101               	movlb	1	; () banked
 20600  0004A2  2B4C               	incf	(_joystickCCMenu+2)& (0+255),f,b
 20601  0004A4                     l856:
 20602                           
 20603                           ;encoder.c: 178: }
 20604                           ;encoder.c: 179: }
 20605                           ;encoder.c: 180: if (which_screen == EEPROM_MENU) {
 20606                           
 20607                           ; BSR set to: 1
 20608                           
 20609                           ; BSR set to: 1
 20610  0004A4  0E16               	movlw	22
 20611  0004A6  0100               	movlb	0	; () banked
 20612  0004A8  19F9               	xorwf	_which_screen& (0+255),w,b
 20613  0004AA  A4D8               	btfss	status,2,c
 20614  0004AC  D01E               	goto	l858
 20615                           
 20616                           ; BSR set to: 0
 20617                           ;encoder.c: 181: if(eepromMenu.selector < (eepromMenu.number - 1)){
 20618  0004AE  0EFF               	movlw	255
 20619  0004B0  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20620  0004B2  0EFF               	movlw	255
 20621  0004B4  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20622  0004B6  0101               	movlb	1	; () banked
 20623  0004B8  513B               	movf	_eepromMenu& (0+255),w,b
 20624  0004BA  0100               	movlb	0	; () banked
 20625  0004BC  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20626  0004BE  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20627  0004C0  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20628  0004C2  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20629  0004C4  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20630  0004C6  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20631  0004C8  0101               	movlb	1	; () banked
 20632  0004CA  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 20633  0004CC  0100               	movlb	0	; () banked
 20634  0004CE  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20635  0004D0  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20636  0004D2  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20637  0004D4  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20638  0004D6  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20639  0004D8  0A80               	xorlw	128
 20640  0004DA  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20641  0004DC  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20642  0004DE  0A80               	xorlw	128
 20643  0004E0  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20644  0004E2  B0D8               	btfsc	status,0,c
 20645  0004E4  D002               	goto	l858
 20646                           
 20647                           ; BSR set to: 0
 20648                           ;encoder.c: 182: eepromMenu.selector++;
 20649  0004E6  0101               	movlb	1	; () banked
 20650  0004E8  2B3D               	incf	(_eepromMenu+2)& (0+255),f,b
 20651  0004EA                     l858:
 20652                           
 20653                           ;encoder.c: 183: }
 20654                           ;encoder.c: 184: }
 20655                           ;encoder.c: 185: if (which_screen == SAVES_MENU) {
 20656                           
 20657                           ; BSR set to: 1
 20658                           
 20659                           ; BSR set to: 1
 20660  0004EA  0E17               	movlw	23
 20661  0004EC  0100               	movlb	0	; () banked
 20662  0004EE  19F9               	xorwf	_which_screen& (0+255),w,b
 20663  0004F0  A4D8               	btfss	status,2,c
 20664  0004F2  D018               	goto	l860
 20665                           
 20666                           ; BSR set to: 0
 20667                           ;encoder.c: 186: if(savesMenu.selector < (savesMenu.number - 1)){
 20668  0004F4  0EFF               	movlw	255
 20669  0004F6  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20670  0004F8  0EFF               	movlw	255
 20671  0004FA  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20672  0004FC  51DF               	movf	_savesMenu& (0+255),w,b
 20673  0004FE  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20674  000500  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20675  000502  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20676  000504  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20677  000506  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20678  000508  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20679  00050A  51E1               	movf	(_savesMenu+2)& (0+255),w,b
 20680  00050C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20681  00050E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20682  000510  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20683  000512  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20684  000514  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20685  000516  0A80               	xorlw	128
 20686  000518  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20687  00051A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20688  00051C  0A80               	xorlw	128
 20689  00051E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20690  000520  A0D8               	btfss	status,0,c
 20691                           
 20692                           ; BSR set to: 0
 20693                           ;encoder.c: 187: savesMenu.selector++;
 20694  000522  2BE1               	incf	(_savesMenu+2)& (0+255),f,b
 20695  000524                     l860:
 20696                           
 20697                           ; BSR set to: 0
 20698                           ;encoder.c: 188: }
 20699                           ;encoder.c: 189: }
 20700                           ;encoder.c: 191: if (which_screen == ARPEGGIATOR_MENU) {
 20701                           
 20702                           ; BSR set to: 0
 20703                           
 20704                           ; BSR set to: 0
 20705  000524  0E19               	movlw	25
 20706  000526  19F9               	xorwf	_which_screen& (0+255),w,b
 20707  000528  A4D8               	btfss	status,2,c
 20708  00052A  D018               	goto	l862
 20709                           
 20710                           ; BSR set to: 0
 20711                           ;encoder.c: 192: if(arpeggiatorMenu.selector < (arpeggiatorMenu.number - 1)){
 20712  00052C  0EFF               	movlw	255
 20713  00052E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20714  000530  0EFF               	movlw	255
 20715  000532  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20716  000534  503B               	movf	_arpeggiatorMenu,w,c
 20717  000536  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20718  000538  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20719  00053A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20720  00053C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20721  00053E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20722  000540  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20723  000542  503D               	movf	_arpeggiatorMenu+2,w,c
 20724  000544  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20725  000546  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20726  000548  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20727  00054A  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20728  00054C  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20729  00054E  0A80               	xorlw	128
 20730  000550  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20731  000552  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20732  000554  0A80               	xorlw	128
 20733  000556  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20734  000558  A0D8               	btfss	status,0,c
 20735                           
 20736                           ; BSR set to: 0
 20737                           ;encoder.c: 193: arpeggiatorMenu.selector++;
 20738  00055A  2A3D               	incf	_arpeggiatorMenu+2,f,c
 20739  00055C                     l862:
 20740                           
 20741                           ; BSR set to: 0
 20742                           ;encoder.c: 194: }
 20743                           ;encoder.c: 195: }
 20744                           ;encoder.c: 197: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 20745                           
 20746                           ; BSR set to: 0
 20747                           
 20748                           ; BSR set to: 0
 20749  00055C  0E1A               	movlw	26
 20750  00055E  19F9               	xorwf	_which_screen& (0+255),w,b
 20751  000560  A4D8               	btfss	status,2,c
 20752  000562  D003               	goto	l863
 20753                           
 20754                           ; BSR set to: 0
 20755                           ;encoder.c: 198: arpeggiatorOnOffMenu.selector ^= 1;
 20756  000564  0E01               	movlw	1
 20757  000566  0101               	movlb	1	; () banked
 20758  000568  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 20759  00056A                     l863:
 20760                           
 20761                           ;encoder.c: 202: }
 20762                           ;encoder.c: 203: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 20763  00056A  0E1B               	movlw	27
 20764  00056C  0100               	movlb	0	; () banked
 20765  00056E  19F9               	xorwf	_which_screen& (0+255),w,b
 20766  000570  A4D8               	btfss	status,2,c
 20767  000572  D005               	goto	l865
 20768                           
 20769                           ; BSR set to: 0
 20770                           ;encoder.c: 204: if(arpeggiatorTempoMenu.selector < 250){
 20771  000574  0EFA               	movlw	250
 20772  000576  0101               	movlb	1	; () banked
 20773  000578  6134               	cpfslt	(_arpeggiatorTempoMenu+2)& (0+255),b
 20774  00057A  D001               	goto	l865
 20775                           
 20776                           ; BSR set to: 1
 20777                           ;encoder.c: 205: arpeggiatorTempoMenu.selector++;
 20778  00057C  2B34               	incf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 20779  00057E                     l865:
 20780                           
 20781                           ;encoder.c: 206: }
 20782                           ;encoder.c: 207: }
 20783                           ;encoder.c: 208: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 20784                           
 20785                           ; BSR set to: 1
 20786                           
 20787                           ; BSR set to: 1
 20788  00057E  0E1C               	movlw	28
 20789  000580  0100               	movlb	0	; () banked
 20790  000582  19F9               	xorwf	_which_screen& (0+255),w,b
 20791  000584  A4D8               	btfss	status,2,c
 20792  000586  D005               	goto	l867
 20793                           
 20794                           ; BSR set to: 0
 20795                           ;encoder.c: 209: if(arpeggiatorOctavesMenu.selector < 4){
 20796  000588  0E04               	movlw	4
 20797  00058A  0101               	movlb	1	; () banked
 20798  00058C  6131               	cpfslt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 20799  00058E  D001               	goto	l867
 20800                           
 20801                           ; BSR set to: 1
 20802                           ;encoder.c: 210: arpeggiatorOctavesMenu.selector++;
 20803  000590  2B31               	incf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 20804  000592                     l867:
 20805                           
 20806                           ;encoder.c: 211: }
 20807                           ;encoder.c: 212: }
 20808                           ;encoder.c: 213: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 20809                           
 20810                           ; BSR set to: 1
 20811                           
 20812                           ; BSR set to: 1
 20813  000592  0E1D               	movlw	29
 20814  000594  0100               	movlb	0	; () banked
 20815  000596  19F9               	xorwf	_which_screen& (0+255),w,b
 20816  000598  A4D8               	btfss	status,2,c
 20817  00059A  D01E               	goto	l869
 20818                           
 20819                           ; BSR set to: 0
 20820                           ;encoder.c: 214: if(arpeggiatorTypeMenu.selector < (arpeggiatorTypeMenu.number - 1)){
 20821  00059C  0EFF               	movlw	255
 20822  00059E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20823  0005A0  0EFF               	movlw	255
 20824  0005A2  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20825  0005A4  0101               	movlb	1	; () banked
 20826  0005A6  512C               	movf	_arpeggiatorTypeMenu& (0+255),w,b
 20827  0005A8  0100               	movlb	0	; () banked
 20828  0005AA  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20829  0005AC  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20830  0005AE  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20831  0005B0  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20832  0005B2  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20833  0005B4  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20834  0005B6  0101               	movlb	1	; () banked
 20835  0005B8  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 20836  0005BA  0100               	movlb	0	; () banked
 20837  0005BC  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20838  0005BE  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20839  0005C0  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20840  0005C2  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20841  0005C4  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20842  0005C6  0A80               	xorlw	128
 20843  0005C8  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20844  0005CA  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20845  0005CC  0A80               	xorlw	128
 20846  0005CE  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20847  0005D0  B0D8               	btfsc	status,0,c
 20848  0005D2  D002               	goto	l869
 20849                           
 20850                           ; BSR set to: 0
 20851                           ;encoder.c: 215: arpeggiatorTypeMenu.selector++;
 20852  0005D4  0101               	movlb	1	; () banked
 20853  0005D6  2B2E               	incf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 20854  0005D8                     l869:
 20855                           
 20856                           ;encoder.c: 216: }
 20857                           ;encoder.c: 217: }
 20858                           ;encoder.c: 218: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 20859                           
 20860                           ; BSR set to: 1
 20861                           
 20862                           ; BSR set to: 1
 20863  0005D8  0E1E               	movlw	30
 20864  0005DA  0100               	movlb	0	; () banked
 20865  0005DC  19F9               	xorwf	_which_screen& (0+255),w,b
 20866  0005DE  A4D8               	btfss	status,2,c
 20867  0005E0  D01E               	goto	l871
 20868                           
 20869                           ; BSR set to: 0
 20870                           ;encoder.c: 219: if(arpeggiatorNoteLengthMenu.selector < (arpeggiatorNoteLengthMenu.numb
      +                          er - 1)){
 20871  0005E2  0EFF               	movlw	255
 20872  0005E4  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20873  0005E6  0EFF               	movlw	255
 20874  0005E8  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20875  0005EA  0101               	movlb	1	; () banked
 20876  0005EC  5129               	movf	_arpeggiatorNoteLengthMenu& (0+255),w,b
 20877  0005EE  0100               	movlb	0	; () banked
 20878  0005F0  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20879  0005F2  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20880  0005F4  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20881  0005F6  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20882  0005F8  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20883  0005FA  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20884  0005FC  0101               	movlb	1	; () banked
 20885  0005FE  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 20886  000600  0100               	movlb	0	; () banked
 20887  000602  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20888  000604  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20889  000606  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20890  000608  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20891  00060A  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20892  00060C  0A80               	xorlw	128
 20893  00060E  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20894  000610  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20895  000612  0A80               	xorlw	128
 20896  000614  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20897  000616  B0D8               	btfsc	status,0,c
 20898  000618  D002               	goto	l871
 20899                           
 20900                           ; BSR set to: 0
 20901                           ;encoder.c: 220: arpeggiatorNoteLengthMenu.selector++;
 20902  00061A  0101               	movlb	1	; () banked
 20903  00061C  2B2B               	incf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 20904  00061E                     l871:
 20905                           
 20906                           ;encoder.c: 221: }
 20907                           ;encoder.c: 222: }
 20908                           ;encoder.c: 223: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 20909                           
 20910                           ; BSR set to: 1
 20911                           
 20912                           ; BSR set to: 1
 20913  00061E  0E1F               	movlw	31
 20914  000620  0100               	movlb	0	; () banked
 20915  000622  19F9               	xorwf	_which_screen& (0+255),w,b
 20916  000624  A4D8               	btfss	status,2,c
 20917  000626  D01E               	goto	l873
 20918                           
 20919                           ; BSR set to: 0
 20920                           ;encoder.c: 225: if(arpeggiatorLatchMenu.selector < (arpeggiatorLatchMenu.number - 1)){
 20921  000628  0EFF               	movlw	255
 20922  00062A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20923  00062C  0EFF               	movlw	255
 20924  00062E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20925  000630  0101               	movlb	1	; () banked
 20926  000632  5126               	movf	_arpeggiatorLatchMenu& (0+255),w,b
 20927  000634  0100               	movlb	0	; () banked
 20928  000636  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20929  000638  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20930  00063A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20931  00063C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20932  00063E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20933  000640  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20934  000642  0101               	movlb	1	; () banked
 20935  000644  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 20936  000646  0100               	movlb	0	; () banked
 20937  000648  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20938  00064A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20939  00064C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20940  00064E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20941  000650  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20942  000652  0A80               	xorlw	128
 20943  000654  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20944  000656  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20945  000658  0A80               	xorlw	128
 20946  00065A  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20947  00065C  B0D8               	btfsc	status,0,c
 20948  00065E  D002               	goto	l873
 20949                           
 20950                           ; BSR set to: 0
 20951                           ;encoder.c: 226: arpeggiatorLatchMenu.selector++;
 20952  000660  0101               	movlb	1	; () banked
 20953  000662  2B28               	incf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 20954  000664                     l873:
 20955                           
 20956                           ;encoder.c: 227: }
 20957                           ;encoder.c: 228: }
 20958                           ;encoder.c: 229: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 20959                           
 20960                           ; BSR set to: 1
 20961                           
 20962                           ; BSR set to: 1
 20963  000664  0E20               	movlw	32
 20964  000666  0100               	movlb	0	; () banked
 20965  000668  19F9               	xorwf	_which_screen& (0+255),w,b
 20966  00066A  A4D8               	btfss	status,2,c
 20967  00066C  D003               	goto	l874
 20968                           
 20969                           ; BSR set to: 0
 20970                           ;encoder.c: 230: arpeggiatorLatchOnOffMenu.selector ^= 1;
 20971  00066E  0E01               	movlw	1
 20972  000670  0101               	movlb	1	; () banked
 20973  000672  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 20974  000674                     l874:
 20975                           
 20976                           ;encoder.c: 231: }
 20977                           ;encoder.c: 232: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 20978  000674  0E21               	movlw	33
 20979  000676  0100               	movlb	0	; () banked
 20980  000678  19F9               	xorwf	_which_screen& (0+255),w,b
 20981  00067A  A4D8               	btfss	status,2,c
 20982  00067C  D003               	goto	l875
 20983                           
 20984                           ; BSR set to: 0
 20985                           ;encoder.c: 233: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 20986  00067E  0E01               	movlw	1
 20987  000680  0101               	movlb	1	; () banked
 20988  000682  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 20989  000684                     l875:
 20990                           
 20991                           ;encoder.c: 234: }
 20992                           ;encoder.c: 235: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 20993  000684  0E22               	movlw	34
 20994  000686  0100               	movlb	0	; () banked
 20995  000688  19F9               	xorwf	_which_screen& (0+255),w,b
 20996  00068A  A4D8               	btfss	status,2,c
 20997  00068C  D003               	goto	l876
 20998                           
 20999                           ; BSR set to: 0
 21000                           ;encoder.c: 236: arpeggiatorUnLatchModeMenu.selector ^= 1;
 21001  00068E  0E01               	movlw	1
 21002  000690  0101               	movlb	1	; () banked
 21003  000692  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 21004  000694                     l876:
 21005                           
 21006                           ;encoder.c: 237: }
 21007                           ;encoder.c: 238: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 21008  000694  0E23               	movlw	35
 21009  000696  0100               	movlb	0	; () banked
 21010  000698  19F9               	xorwf	_which_screen& (0+255),w,b
 21011  00069A  A4D8               	btfss	status,2,c
 21012  00069C  D01E               	goto	l878
 21013                           
 21014                           ; BSR set to: 0
 21015                           ;encoder.c: 239: if(arpeggiatorRandomizeSkipMenu.selector < (arpeggiatorRandomizeSkipMen
      +                          u.number - 1)){
 21016  00069E  0EFF               	movlw	255
 21017  0006A0  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21018  0006A2  0EFF               	movlw	255
 21019  0006A4  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21020  0006A6  0101               	movlb	1	; () banked
 21021  0006A8  511A               	movf	_arpeggiatorRandomizeSkipMenu& (0+255),w,b
 21022  0006AA  0100               	movlb	0	; () banked
 21023  0006AC  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21024  0006AE  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21025  0006B0  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21026  0006B2  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21027  0006B4  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21028  0006B6  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21029  0006B8  0101               	movlb	1	; () banked
 21030  0006BA  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 21031  0006BC  0100               	movlb	0	; () banked
 21032  0006BE  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21033  0006C0  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21034  0006C2  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21035  0006C4  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21036  0006C6  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21037  0006C8  0A80               	xorlw	128
 21038  0006CA  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21039  0006CC  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21040  0006CE  0A80               	xorlw	128
 21041  0006D0  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21042  0006D2  B0D8               	btfsc	status,0,c
 21043  0006D4  D002               	goto	l878
 21044                           
 21045                           ; BSR set to: 0
 21046                           ;encoder.c: 240: arpeggiatorRandomizeSkipMenu.selector++;
 21047  0006D6  0101               	movlb	1	; () banked
 21048  0006D8  2B1C               	incf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 21049  0006DA                     l878:
 21050                           
 21051                           ;encoder.c: 241: }
 21052                           ;encoder.c: 242: }
 21053                           ;encoder.c: 243: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 21054                           
 21055                           ; BSR set to: 1
 21056                           
 21057                           ; BSR set to: 1
 21058  0006DA  0E24               	movlw	36
 21059  0006DC  0100               	movlb	0	; () banked
 21060  0006DE  19F9               	xorwf	_which_screen& (0+255),w,b
 21061  0006E0  A4D8               	btfss	status,2,c
 21062  0006E2  D003               	goto	l879
 21063                           
 21064                           ; BSR set to: 0
 21065                           ;encoder.c: 244: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 21066  0006E4  0E01               	movlw	1
 21067  0006E6  0101               	movlb	1	; () banked
 21068  0006E8  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 21069  0006EA                     l879:
 21070                           
 21071                           ;encoder.c: 248: }
 21072                           ;encoder.c: 249: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 21073  0006EA  0E25               	movlw	37
 21074  0006EC  0100               	movlb	0	; () banked
 21075  0006EE  19F9               	xorwf	_which_screen& (0+255),w,b
 21076  0006F0  A4D8               	btfss	status,2,c
 21077  0006F2  D003               	goto	l880
 21078                           
 21079                           ; BSR set to: 0
 21080                           ;encoder.c: 250: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 21081  0006F4  0E01               	movlw	1
 21082  0006F6  0101               	movlb	1	; () banked
 21083  0006F8  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 21084  0006FA                     l880:
 21085                           
 21086                           ;encoder.c: 251: }
 21087                           ;encoder.c: 252: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 21088  0006FA  0E26               	movlw	38
 21089  0006FC  0100               	movlb	0	; () banked
 21090  0006FE  19F9               	xorwf	_which_screen& (0+255),w,b
 21091  000700  A4D8               	btfss	status,2,c
 21092  000702  D018               	goto	l882
 21093                           
 21094                           ; BSR set to: 0
 21095                           ;encoder.c: 253: if(arpeggiatorLastNoteModeMenu.selector < (arpeggiatorLastNoteModeMenu.
      +                          number - 1)){
 21096  000704  0EFF               	movlw	255
 21097  000706  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21098  000708  0EFF               	movlw	255
 21099  00070A  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21100  00070C  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 21101  00070E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21102  000710  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21103  000712  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21104  000714  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21105  000716  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21106  000718  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21107  00071A  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 21108  00071C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21109  00071E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21110  000720  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21111  000722  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21112  000724  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21113  000726  0A80               	xorlw	128
 21114  000728  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21115  00072A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21116  00072C  0A80               	xorlw	128
 21117  00072E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21118  000730  A0D8               	btfss	status,0,c
 21119                           
 21120                           ; BSR set to: 0
 21121                           ;encoder.c: 254: arpeggiatorLastNoteModeMenu.selector++;
 21122  000732  2BDE               	incf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 21123  000734                     l882:
 21124                           
 21125                           ; BSR set to: 0
 21126                           ;encoder.c: 255: }
 21127                           ;encoder.c: 256: }
 21128                           ;encoder.c: 257: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 21129                           
 21130                           ; BSR set to: 0
 21131                           
 21132                           ; BSR set to: 0
 21133  000734  0E27               	movlw	39
 21134  000736  19F9               	xorwf	_which_screen& (0+255),w,b
 21135  000738  A4D8               	btfss	status,2,c
 21136  00073A  D003               	goto	l883
 21137                           
 21138                           ; BSR set to: 0
 21139                           ;encoder.c: 258: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 21140  00073C  0E01               	movlw	1
 21141  00073E  0101               	movlb	1	; () banked
 21142  000740  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 21143  000742                     l883:
 21144                           
 21145                           ;encoder.c: 259: }
 21146                           ;encoder.c: 260: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 21147  000742  0E28               	movlw	40
 21148  000744  0100               	movlb	0	; () banked
 21149  000746  19F9               	xorwf	_which_screen& (0+255),w,b
 21150  000748  A4D8               	btfss	status,2,c
 21151  00074A  D003               	goto	l884
 21152                           
 21153                           ; BSR set to: 0
 21154                           ;encoder.c: 261: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 21155  00074C  0E01               	movlw	1
 21156  00074E  0101               	movlb	1	; () banked
 21157  000750  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 21158  000752                     l884:
 21159                           
 21160                           ;encoder.c: 262: }
 21161                           ;encoder.c: 263: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 21162  000752  0E29               	movlw	41
 21163  000754  0100               	movlb	0	; () banked
 21164  000756  19F9               	xorwf	_which_screen& (0+255),w,b
 21165  000758  A4D8               	btfss	status,2,c
 21166  00075A  D003               	goto	l885
 21167                           
 21168                           ; BSR set to: 0
 21169                           ;encoder.c: 264: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 21170  00075C  0E01               	movlw	1
 21171  00075E  0101               	movlb	1	; () banked
 21172  000760  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 21173  000762                     l885:
 21174                           
 21175                           ;encoder.c: 265: }
 21176                           ;encoder.c: 266: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 21177  000762  0E2A               	movlw	42
 21178  000764  0100               	movlb	0	; () banked
 21179  000766  19F9               	xorwf	_which_screen& (0+255),w,b
 21180  000768  A4D8               	btfss	status,2,c
 21181  00076A  D003               	goto	l886
 21182                           
 21183                           ; BSR set to: 0
 21184                           ;encoder.c: 267: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 21185  00076C  0E01               	movlw	1
 21186  00076E  0101               	movlb	1	; () banked
 21187  000770  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 21188  000772                     l886:
 21189                           
 21190                           ;encoder.c: 268: }
 21191                           ;encoder.c: 269: }
 21192                           ;encoder.c: 272: if (encoder_direction == 0x20) {
 21193                           
 21194                           ; BSR set to: 1
 21195  000772  0E20               	movlw	32
 21196  000774  0100               	movlb	0	; () banked
 21197  000776  19EB               	xorwf	_encoder_direction& (0+255),w,b
 21198  000778  A4D8               	btfss	status,2,c
 21199  00077A  D15F               	goto	l960
 21200                           
 21201                           ; BSR set to: 0
 21202                           ;encoder.c: 274: lcd_print_once = 0;
 21203  00077C  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 21204                           
 21205                           ; BSR set to: 0
 21206                           ;encoder.c: 277: if (which_screen == MAIN_MENU) {
 21207  00077E  0E02               	movlw	2
 21208  000780  19F9               	xorwf	_which_screen& (0+255),w,b
 21209  000782  A4D8               	btfss	status,2,c
 21210  000784  D004               	goto	l889
 21211                           
 21212                           ; BSR set to: 0
 21213                           ;encoder.c: 278: if(mainMenu.selector > 0){
 21214  000786  0101               	movlb	1	; () banked
 21215  000788  516A               	movf	(_mainMenu+2)& (0+255),w,b
 21216  00078A  A4D8               	btfss	status,2,c
 21217                           
 21218                           ; BSR set to: 1
 21219                           ;encoder.c: 279: mainMenu.selector--;
 21220  00078C  076A               	decf	(_mainMenu+2)& (0+255),f,b
 21221  00078E                     l889:
 21222                           
 21223                           ;encoder.c: 280: }
 21224                           ;encoder.c: 281: }
 21225                           ;encoder.c: 282: if (which_screen == KEYBOARD_MENU) {
 21226                           
 21227                           ; BSR set to: 1
 21228                           
 21229                           ; BSR set to: 1
 21230  00078E  0E03               	movlw	3
 21231  000790  0100               	movlb	0	; () banked
 21232  000792  19F9               	xorwf	_which_screen& (0+255),w,b
 21233  000794  A4D8               	btfss	status,2,c
 21234  000796  D003               	goto	l891
 21235                           
 21236                           ; BSR set to: 0
 21237                           ;encoder.c: 283: if(keyboardMenu.selector > 0){
 21238  000798  504C               	movf	_keyboardMenu+2,w,c
 21239  00079A  A4D8               	btfss	status,2,c
 21240                           
 21241                           ; BSR set to: 0
 21242                           ;encoder.c: 284: keyboardMenu.selector--;
 21243  00079C  064C               	decf	_keyboardMenu+2,f,c
 21244  00079E                     l891:
 21245                           
 21246                           ; BSR set to: 0
 21247                           ;encoder.c: 285: }
 21248                           ;encoder.c: 286: }
 21249                           ;encoder.c: 287: if (which_screen == TRANSPOSE_MENU) {
 21250                           
 21251                           ; BSR set to: 0
 21252                           
 21253                           ; BSR set to: 0
 21254  00079E  0E04               	movlw	4
 21255  0007A0  19F9               	xorwf	_which_screen& (0+255),w,b
 21256  0007A2  A4D8               	btfss	status,2,c
 21257  0007A4  D004               	goto	l893
 21258                           
 21259                           ; BSR set to: 0
 21260                           ;encoder.c: 288: if(transposeMenu.selector > 0){
 21261  0007A6  0101               	movlb	1	; () banked
 21262  0007A8  5164               	movf	(_transposeMenu+2)& (0+255),w,b
 21263  0007AA  A4D8               	btfss	status,2,c
 21264                           
 21265                           ; BSR set to: 1
 21266                           ;encoder.c: 289: transposeMenu.selector--;
 21267  0007AC  0764               	decf	(_transposeMenu+2)& (0+255),f,b
 21268  0007AE                     l893:
 21269                           
 21270                           ;encoder.c: 290: }
 21271                           ;encoder.c: 291: }
 21272                           ;encoder.c: 292: if (which_screen == DRUM_MENU) {
 21273                           
 21274                           ; BSR set to: 1
 21275                           
 21276                           ; BSR set to: 1
 21277  0007AE  0E05               	movlw	5
 21278  0007B0  0100               	movlb	0	; () banked
 21279  0007B2  19F9               	xorwf	_which_screen& (0+255),w,b
 21280  0007B4  A4D8               	btfss	status,2,c
 21281  0007B6  D003               	goto	l895
 21282                           
 21283                           ; BSR set to: 0
 21284                           ;encoder.c: 293: if(drumMenu.selector > 0){
 21285  0007B8  5043               	movf	_drumMenu+2,w,c
 21286  0007BA  A4D8               	btfss	status,2,c
 21287                           
 21288                           ; BSR set to: 0
 21289                           ;encoder.c: 294: drumMenu.selector--;
 21290  0007BC  0643               	decf	_drumMenu+2,f,c
 21291  0007BE                     l895:
 21292                           
 21293                           ; BSR set to: 0
 21294                           ;encoder.c: 295: }
 21295                           ;encoder.c: 296: }
 21296                           ;encoder.c: 297: if (which_screen == POTENTIOMETER_MENU) {
 21297                           
 21298                           ; BSR set to: 0
 21299                           
 21300                           ; BSR set to: 0
 21301  0007BE  0E06               	movlw	6
 21302  0007C0  19F9               	xorwf	_which_screen& (0+255),w,b
 21303  0007C2  A4D8               	btfss	status,2,c
 21304  0007C4  D003               	goto	l897
 21305                           
 21306                           ; BSR set to: 0
 21307                           ;encoder.c: 298: if(potsMenu.selector > 0){
 21308  0007C6  5040               	movf	_potsMenu+2,w,c
 21309  0007C8  A4D8               	btfss	status,2,c
 21310                           
 21311                           ; BSR set to: 0
 21312                           ;encoder.c: 299: potsMenu.selector--;
 21313  0007CA  0640               	decf	_potsMenu+2,f,c
 21314  0007CC                     l897:
 21315                           
 21316                           ; BSR set to: 0
 21317                           ;encoder.c: 300: }
 21318                           ;encoder.c: 301: }
 21319                           ;encoder.c: 302: if (which_screen == MIDI_CHANNEL_MENU) {
 21320                           
 21321                           ; BSR set to: 0
 21322                           
 21323                           ; BSR set to: 0
 21324  0007CC  0E07               	movlw	7
 21325  0007CE  19F9               	xorwf	_which_screen& (0+255),w,b
 21326  0007D0  A4D8               	btfss	status,2,c
 21327  0007D2  D004               	goto	l899
 21328                           
 21329                           ; BSR set to: 0
 21330                           ;encoder.c: 303: if(midiChannelMenu.selector > 0){
 21331  0007D4  0101               	movlb	1	; () banked
 21332  0007D6  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 21333  0007D8  A4D8               	btfss	status,2,c
 21334                           
 21335                           ; BSR set to: 1
 21336                           ;encoder.c: 304: midiChannelMenu.selector--;
 21337  0007DA  0749               	decf	(_midiChannelMenu+2)& (0+255),f,b
 21338  0007DC                     l899:
 21339                           
 21340                           ;encoder.c: 305: }
 21341                           ;encoder.c: 306: }
 21342                           ;encoder.c: 308: if (which_screen == MODES_MENU) {
 21343                           
 21344                           ; BSR set to: 1
 21345                           
 21346                           ; BSR set to: 1
 21347  0007DC  0E09               	movlw	9
 21348  0007DE  0100               	movlb	0	; () banked
 21349  0007E0  19F9               	xorwf	_which_screen& (0+255),w,b
 21350  0007E2  A4D8               	btfss	status,2,c
 21351  0007E4  D003               	goto	l901
 21352                           
 21353                           ; BSR set to: 0
 21354                           ;encoder.c: 309: if(modeMenu.selector > 0){
 21355  0007E6  5049               	movf	_modeMenu+2,w,c
 21356  0007E8  A4D8               	btfss	status,2,c
 21357                           
 21358                           ; BSR set to: 0
 21359                           ;encoder.c: 310: modeMenu.selector--;
 21360  0007EA  0649               	decf	_modeMenu+2,f,c
 21361  0007EC                     l901:
 21362                           
 21363                           ; BSR set to: 0
 21364                           ;encoder.c: 311: }
 21365                           ;encoder.c: 312: }
 21366                           ;encoder.c: 314: if (which_screen == TRIADS_MENU) {
 21367                           
 21368                           ; BSR set to: 0
 21369                           
 21370                           ; BSR set to: 0
 21371  0007EC  0E0A               	movlw	10
 21372  0007EE  19F9               	xorwf	_which_screen& (0+255),w,b
 21373  0007F0  A4D8               	btfss	status,2,c
 21374  0007F2  D003               	goto	l903
 21375                           
 21376                           ; BSR set to: 0
 21377                           ;encoder.c: 315: if(triadMenu.selector > 0){
 21378  0007F4  5046               	movf	_triadMenu+2,w,c
 21379  0007F6  A4D8               	btfss	status,2,c
 21380                           
 21381                           ; BSR set to: 0
 21382                           ;encoder.c: 316: triadMenu.selector--;
 21383  0007F8  0646               	decf	_triadMenu+2,f,c
 21384  0007FA                     l903:
 21385                           
 21386                           ; BSR set to: 0
 21387                           ;encoder.c: 317: }
 21388                           ;encoder.c: 318: }
 21389                           ;encoder.c: 319: if (which_screen == SEVENTHS_MENU) {
 21390                           
 21391                           ; BSR set to: 0
 21392                           
 21393                           ; BSR set to: 0
 21394  0007FA  0E0B               	movlw	11
 21395  0007FC  19F9               	xorwf	_which_screen& (0+255),w,b
 21396  0007FE  A4D8               	btfss	status,2,c
 21397  000800  D004               	goto	l905
 21398                           
 21399                           ; BSR set to: 0
 21400                           ;encoder.c: 320: if(seventhMenu.selector > 0){
 21401  000802  0101               	movlb	1	; () banked
 21402  000804  5167               	movf	(_seventhMenu+2)& (0+255),w,b
 21403  000806  A4D8               	btfss	status,2,c
 21404                           
 21405                           ; BSR set to: 1
 21406                           ;encoder.c: 321: seventhMenu.selector--;
 21407  000808  0767               	decf	(_seventhMenu+2)& (0+255),f,b
 21408  00080A                     l905:
 21409                           
 21410                           ;encoder.c: 322: }
 21411                           ;encoder.c: 323: }
 21412                           ;encoder.c: 324: if (which_screen == DRUMS_CC_TYPE_MENU) {
 21413                           
 21414                           ; BSR set to: 1
 21415                           
 21416                           ; BSR set to: 1
 21417  00080A  0E0C               	movlw	12
 21418  00080C  0100               	movlb	0	; () banked
 21419  00080E  19F9               	xorwf	_which_screen& (0+255),w,b
 21420  000810  A4D8               	btfss	status,2,c
 21421  000812  D004               	goto	l907
 21422                           
 21423                           ; BSR set to: 0
 21424                           ;encoder.c: 325: if(drumCCTypeMenu.selector > 0){
 21425  000814  0101               	movlb	1	; () banked
 21426  000816  5161               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 21427  000818  A4D8               	btfss	status,2,c
 21428                           
 21429                           ; BSR set to: 1
 21430                           ;encoder.c: 326: drumCCTypeMenu.selector--;
 21431  00081A  0761               	decf	(_drumCCTypeMenu+2)& (0+255),f,b
 21432  00081C                     l907:
 21433                           
 21434                           ;encoder.c: 327: }
 21435                           ;encoder.c: 328: }
 21436                           ;encoder.c: 330: if (which_screen == DRUMS_NN_MENU) {
 21437                           
 21438                           ; BSR set to: 1
 21439                           
 21440                           ; BSR set to: 1
 21441  00081C  0E0D               	movlw	13
 21442  00081E  0100               	movlb	0	; () banked
 21443  000820  19F9               	xorwf	_which_screen& (0+255),w,b
 21444  000822  A4D8               	btfss	status,2,c
 21445  000824  D004               	goto	l909
 21446                           
 21447                           ; BSR set to: 0
 21448                           ;encoder.c: 331: if(drumNNMenu.selector > 0){
 21449  000826  0101               	movlb	1	; () banked
 21450  000828  515E               	movf	(_drumNNMenu+2)& (0+255),w,b
 21451  00082A  A4D8               	btfss	status,2,c
 21452                           
 21453                           ; BSR set to: 1
 21454                           ;encoder.c: 332: drumNNMenu.selector--;
 21455  00082C  075E               	decf	(_drumNNMenu+2)& (0+255),f,b
 21456  00082E                     l909:
 21457                           
 21458                           ;encoder.c: 333: }
 21459                           ;encoder.c: 334: }
 21460                           ;encoder.c: 336: if (which_screen == DRUMS_CC_MENU) {
 21461                           
 21462                           ; BSR set to: 1
 21463                           
 21464                           ; BSR set to: 1
 21465  00082E  0E0E               	movlw	14
 21466  000830  0100               	movlb	0	; () banked
 21467  000832  19F9               	xorwf	_which_screen& (0+255),w,b
 21468  000834  A4D8               	btfss	status,2,c
 21469  000836  D004               	goto	l911
 21470                           
 21471                           ; BSR set to: 0
 21472                           ;encoder.c: 337: if(drumCCMenu.selector > 0){
 21473  000838  0101               	movlb	1	; () banked
 21474  00083A  515B               	movf	(_drumCCMenu+2)& (0+255),w,b
 21475  00083C  A4D8               	btfss	status,2,c
 21476                           
 21477                           ; BSR set to: 1
 21478                           ;encoder.c: 338: drumCCMenu.selector--;
 21479  00083E  075B               	decf	(_drumCCMenu+2)& (0+255),f,b
 21480  000840                     l911:
 21481                           
 21482                           ;encoder.c: 339: }
 21483                           ;encoder.c: 340: }
 21484                           ;encoder.c: 342: if (which_screen == POTS_RES_MENU) {
 21485                           
 21486                           ; BSR set to: 1
 21487                           
 21488                           ; BSR set to: 1
 21489  000840  0E0F               	movlw	15
 21490  000842  0100               	movlb	0	; () banked
 21491  000844  19F9               	xorwf	_which_screen& (0+255),w,b
 21492  000846  A4D8               	btfss	status,2,c
 21493  000848  D004               	goto	l913
 21494                           
 21495                           ; BSR set to: 0
 21496                           ;encoder.c: 343: if(potsResoMenu.selector > 0){
 21497  00084A  0101               	movlb	1	; () banked
 21498  00084C  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 21499  00084E  A4D8               	btfss	status,2,c
 21500                           
 21501                           ; BSR set to: 1
 21502                           ;encoder.c: 344: potsResoMenu.selector--;
 21503  000850  0758               	decf	(_potsResoMenu+2)& (0+255),f,b
 21504  000852                     l913:
 21505                           
 21506                           ;encoder.c: 345: }
 21507                           ;encoder.c: 346: }
 21508                           ;encoder.c: 348: if (which_screen == ENCODER_POLARITY_MENU) {
 21509                           
 21510                           ; BSR set to: 1
 21511                           
 21512                           ; BSR set to: 1
 21513  000852  0E18               	movlw	24
 21514  000854  0100               	movlb	0	; () banked
 21515  000856  19F9               	xorwf	_which_screen& (0+255),w,b
 21516  000858  A4D8               	btfss	status,2,c
 21517  00085A  D006               	goto	l915
 21518                           
 21519                           ; BSR set to: 0
 21520                           ;encoder.c: 349: if(encoderPolarityMenu.selector == 1){
 21521  00085C  0101               	movlb	1	; () banked
 21522  00085E  053A               	decf	(_encoderPolarityMenu+2)& (0+255),w,b
 21523  000860  A4D8               	btfss	status,2,c
 21524  000862  D002               	goto	l915
 21525                           
 21526                           ; BSR set to: 1
 21527                           ;encoder.c: 350: encoderPolarityMenu.selector = 0;
 21528  000864  0E00               	movlw	0
 21529  000866  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 21530  000868                     l915:
 21531                           
 21532                           ;encoder.c: 351: }
 21533                           ;encoder.c: 352: }
 21534                           ;encoder.c: 354: if (which_screen == POTS_ALPHA_MENU) {
 21535                           
 21536                           ; BSR set to: 1
 21537                           
 21538                           ; BSR set to: 1
 21539  000868  0E10               	movlw	16
 21540  00086A  0100               	movlb	0	; () banked
 21541  00086C  19F9               	xorwf	_which_screen& (0+255),w,b
 21542  00086E  A4D8               	btfss	status,2,c
 21543  000870  D006               	goto	l917
 21544                           
 21545                           ; BSR set to: 0
 21546                           ;encoder.c: 355: if(potsAlphaMenu.selector >= 15){
 21547  000872  0E0E               	movlw	14
 21548  000874  0101               	movlb	1	; () banked
 21549  000876  6555               	cpfsgt	(_potsAlphaMenu+2)& (0+255),b
 21550  000878  D002               	goto	l917
 21551                           
 21552                           ; BSR set to: 1
 21553                           ;encoder.c: 356: potsAlphaMenu.selector -= 5;
 21554  00087A  0E05               	movlw	5
 21555  00087C  5F55               	subwf	(_potsAlphaMenu+2)& (0+255),f,b
 21556  00087E                     l917:
 21557                           
 21558                           ;encoder.c: 361: if(potsCCMenu.selector > -2){
 21559                           
 21560                           ; BSR set to: 1
 21561  00087E  0E11               	movlw	17
 21562  000880  0100               	movlb	0	; () banked
 21563  000882  19F9               	xorwf	_which_screen& (0+255),w,b
 21564  000884  A4D8               	btfss	status,2,c
 21565  000886  D002               	goto	l919
 21566                           
 21567                           ; BSR set to: 0
 21568                           ;encoder.c: 362: potsCCMenu.selector--;
 21569  000888  0101               	movlb	1	; () banked
 21570  00088A  0752               	decf	(_potsCCMenu+2)& (0+255),f,b
 21571  00088C                     l919:
 21572                           
 21573                           ;encoder.c: 367: if(slidepotsCCMenu.selector > -2){
 21574                           
 21575                           ; BSR set to: 1
 21576                           
 21577                           ; BSR set to: 1
 21578  00088C  0E12               	movlw	18
 21579  00088E  0100               	movlb	0	; () banked
 21580  000890  19F9               	xorwf	_which_screen& (0+255),w,b
 21581  000892  A4D8               	btfss	status,2,c
 21582  000894  D002               	goto	l921
 21583                           
 21584                           ; BSR set to: 0
 21585                           ;encoder.c: 368: slidepotsCCMenu.selector--;
 21586  000896  0101               	movlb	1	; () banked
 21587  000898  074F               	decf	(_slidepotsCCMenu+2)& (0+255),f,b
 21588  00089A                     l921:
 21589                           
 21590                           ;encoder.c: 369: }
 21591                           ;encoder.c: 370: }
 21592                           ;encoder.c: 371: if (which_screen == PROGRAM_CHANGE_MENU) {
 21593                           
 21594                           ; BSR set to: 1
 21595                           
 21596                           ; BSR set to: 1
 21597  00089A  0E08               	movlw	8
 21598  00089C  0100               	movlb	0	; () banked
 21599  00089E  19F9               	xorwf	_which_screen& (0+255),w,b
 21600  0008A0  A4D8               	btfss	status,2,c
 21601  0008A2  D004               	goto	l923
 21602                           
 21603                           ; BSR set to: 0
 21604                           ;encoder.c: 372: if(programChangeMenu.selector > 0){
 21605  0008A4  0101               	movlb	1	; () banked
 21606  0008A6  5146               	movf	(_programChangeMenu+2)& (0+255),w,b
 21607  0008A8  A4D8               	btfss	status,2,c
 21608                           
 21609                           ; BSR set to: 1
 21610                           ;encoder.c: 373: programChangeMenu.selector--;
 21611  0008AA  0746               	decf	(_programChangeMenu+2)& (0+255),f,b
 21612  0008AC                     l923:
 21613                           
 21614                           ;encoder.c: 374: }
 21615                           ;encoder.c: 375: }
 21616                           ;encoder.c: 377: if (which_screen == MAIN_CH_MENU) {
 21617                           
 21618                           ; BSR set to: 1
 21619                           
 21620                           ; BSR set to: 1
 21621  0008AC  0E14               	movlw	20
 21622  0008AE  0100               	movlb	0	; () banked
 21623  0008B0  19F9               	xorwf	_which_screen& (0+255),w,b
 21624  0008B2  A4D8               	btfss	status,2,c
 21625  0008B4  D004               	goto	l925
 21626                           
 21627                           ; BSR set to: 0
 21628                           ;encoder.c: 378: if(mainChannelMenu.selector > 0){
 21629  0008B6  0101               	movlb	1	; () banked
 21630  0008B8  5143               	movf	(_mainChannelMenu+2)& (0+255),w,b
 21631  0008BA  A4D8               	btfss	status,2,c
 21632                           
 21633                           ; BSR set to: 1
 21634                           ;encoder.c: 379: mainChannelMenu.selector--;
 21635  0008BC  0743               	decf	(_mainChannelMenu+2)& (0+255),f,b
 21636  0008BE                     l925:
 21637                           
 21638                           ;encoder.c: 380: }
 21639                           ;encoder.c: 381: }
 21640                           ;encoder.c: 383: if (which_screen == DRUM_CH_MENU) {
 21641                           
 21642                           ; BSR set to: 1
 21643                           
 21644                           ; BSR set to: 1
 21645  0008BE  0E15               	movlw	21
 21646  0008C0  0100               	movlb	0	; () banked
 21647  0008C2  19F9               	xorwf	_which_screen& (0+255),w,b
 21648  0008C4  A4D8               	btfss	status,2,c
 21649  0008C6  D004               	goto	l927
 21650                           
 21651                           ; BSR set to: 0
 21652                           ;encoder.c: 384: if(drumChannelMenu.selector > 0){
 21653  0008C8  0101               	movlb	1	; () banked
 21654  0008CA  5140               	movf	(_drumChannelMenu+2)& (0+255),w,b
 21655  0008CC  A4D8               	btfss	status,2,c
 21656                           
 21657                           ; BSR set to: 1
 21658                           ;encoder.c: 385: drumChannelMenu.selector--;
 21659  0008CE  0740               	decf	(_drumChannelMenu+2)& (0+255),f,b
 21660  0008D0                     l927:
 21661                           
 21662                           ;encoder.c: 390: if(joystickCCMenu.selector > -2){
 21663                           
 21664                           ; BSR set to: 1
 21665                           
 21666                           ; BSR set to: 1
 21667  0008D0  0E13               	movlw	19
 21668  0008D2  0100               	movlb	0	; () banked
 21669  0008D4  19F9               	xorwf	_which_screen& (0+255),w,b
 21670  0008D6  A4D8               	btfss	status,2,c
 21671  0008D8  D002               	goto	l929
 21672                           
 21673                           ; BSR set to: 0
 21674                           ;encoder.c: 391: joystickCCMenu.selector--;
 21675  0008DA  0101               	movlb	1	; () banked
 21676  0008DC  074C               	decf	(_joystickCCMenu+2)& (0+255),f,b
 21677  0008DE                     l929:
 21678                           
 21679                           ;encoder.c: 392: }
 21680                           ;encoder.c: 393: }
 21681                           ;encoder.c: 394: if (which_screen == EEPROM_MENU) {
 21682                           
 21683                           ; BSR set to: 1
 21684                           
 21685                           ; BSR set to: 1
 21686  0008DE  0E16               	movlw	22
 21687  0008E0  0100               	movlb	0	; () banked
 21688  0008E2  19F9               	xorwf	_which_screen& (0+255),w,b
 21689  0008E4  A4D8               	btfss	status,2,c
 21690  0008E6  D004               	goto	l931
 21691                           
 21692                           ; BSR set to: 0
 21693                           ;encoder.c: 395: if(eepromMenu.selector > 0){
 21694  0008E8  0101               	movlb	1	; () banked
 21695  0008EA  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 21696  0008EC  A4D8               	btfss	status,2,c
 21697                           
 21698                           ; BSR set to: 1
 21699                           ;encoder.c: 396: eepromMenu.selector--;
 21700  0008EE  073D               	decf	(_eepromMenu+2)& (0+255),f,b
 21701  0008F0                     l931:
 21702                           
 21703                           ;encoder.c: 397: }
 21704                           ;encoder.c: 398: }
 21705                           ;encoder.c: 399: if (which_screen == SAVES_MENU) {
 21706                           
 21707                           ; BSR set to: 1
 21708                           
 21709                           ; BSR set to: 1
 21710  0008F0  0E17               	movlw	23
 21711  0008F2  0100               	movlb	0	; () banked
 21712  0008F4  19F9               	xorwf	_which_screen& (0+255),w,b
 21713  0008F6  A4D8               	btfss	status,2,c
 21714  0008F8  D003               	goto	l933
 21715                           
 21716                           ; BSR set to: 0
 21717                           ;encoder.c: 400: if(savesMenu.selector > 0){
 21718  0008FA  51E1               	movf	(_savesMenu+2)& (0+255),w,b
 21719  0008FC  A4D8               	btfss	status,2,c
 21720                           
 21721                           ; BSR set to: 0
 21722                           ;encoder.c: 401: savesMenu.selector--;
 21723  0008FE  07E1               	decf	(_savesMenu+2)& (0+255),f,b
 21724  000900                     l933:
 21725                           
 21726                           ; BSR set to: 0
 21727                           ;encoder.c: 402: }
 21728                           ;encoder.c: 403: }
 21729                           ;encoder.c: 404: if (which_screen == ARPEGGIATOR_MENU) {
 21730                           
 21731                           ; BSR set to: 0
 21732                           
 21733                           ; BSR set to: 0
 21734  000900  0E19               	movlw	25
 21735  000902  19F9               	xorwf	_which_screen& (0+255),w,b
 21736  000904  A4D8               	btfss	status,2,c
 21737  000906  D003               	goto	l935
 21738                           
 21739                           ; BSR set to: 0
 21740                           ;encoder.c: 405: if(arpeggiatorMenu.selector > 0){
 21741  000908  503D               	movf	_arpeggiatorMenu+2,w,c
 21742  00090A  A4D8               	btfss	status,2,c
 21743                           
 21744                           ; BSR set to: 0
 21745                           ;encoder.c: 406: arpeggiatorMenu.selector--;
 21746  00090C  063D               	decf	_arpeggiatorMenu+2,f,c
 21747  00090E                     l935:
 21748                           
 21749                           ; BSR set to: 0
 21750                           ;encoder.c: 407: }
 21751                           ;encoder.c: 408: }
 21752                           ;encoder.c: 409: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 21753                           
 21754                           ; BSR set to: 0
 21755                           
 21756                           ; BSR set to: 0
 21757  00090E  0E1A               	movlw	26
 21758  000910  19F9               	xorwf	_which_screen& (0+255),w,b
 21759  000912  A4D8               	btfss	status,2,c
 21760  000914  D003               	goto	l936
 21761                           
 21762                           ; BSR set to: 0
 21763                           ;encoder.c: 410: arpeggiatorOnOffMenu.selector ^= 1;
 21764  000916  0E01               	movlw	1
 21765  000918  0101               	movlb	1	; () banked
 21766  00091A  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 21767  00091C                     l936:
 21768                           
 21769                           ;encoder.c: 414: }
 21770                           ;encoder.c: 415: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 21771  00091C  0E1B               	movlw	27
 21772  00091E  0100               	movlb	0	; () banked
 21773  000920  19F9               	xorwf	_which_screen& (0+255),w,b
 21774  000922  A4D8               	btfss	status,2,c
 21775  000924  D005               	goto	l938
 21776                           
 21777                           ; BSR set to: 0
 21778                           ;encoder.c: 416: if(arpeggiatorTempoMenu.selector > 25){
 21779  000926  0E19               	movlw	25
 21780  000928  0101               	movlb	1	; () banked
 21781  00092A  6534               	cpfsgt	(_arpeggiatorTempoMenu+2)& (0+255),b
 21782  00092C  D001               	goto	l938
 21783                           
 21784                           ; BSR set to: 1
 21785                           ;encoder.c: 417: arpeggiatorTempoMenu.selector--;
 21786  00092E  0734               	decf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 21787  000930                     l938:
 21788                           
 21789                           ;encoder.c: 418: }
 21790                           ;encoder.c: 419: }
 21791                           ;encoder.c: 420: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 21792                           
 21793                           ; BSR set to: 1
 21794                           
 21795                           ; BSR set to: 1
 21796  000930  0E1C               	movlw	28
 21797  000932  0100               	movlb	0	; () banked
 21798  000934  19F9               	xorwf	_which_screen& (0+255),w,b
 21799  000936  A4D8               	btfss	status,2,c
 21800  000938  D005               	goto	l940
 21801                           
 21802                           ; BSR set to: 0
 21803                           ;encoder.c: 421: if(arpeggiatorOctavesMenu.selector > 1){
 21804  00093A  0E01               	movlw	1
 21805  00093C  0101               	movlb	1	; () banked
 21806  00093E  6531               	cpfsgt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 21807  000940  D001               	goto	l940
 21808                           
 21809                           ; BSR set to: 1
 21810                           ;encoder.c: 422: arpeggiatorOctavesMenu.selector--;
 21811  000942  0731               	decf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 21812  000944                     l940:
 21813                           
 21814                           ;encoder.c: 423: }
 21815                           ;encoder.c: 424: }
 21816                           ;encoder.c: 425: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 21817                           
 21818                           ; BSR set to: 1
 21819                           
 21820                           ; BSR set to: 1
 21821  000944  0E1D               	movlw	29
 21822  000946  0100               	movlb	0	; () banked
 21823  000948  19F9               	xorwf	_which_screen& (0+255),w,b
 21824  00094A  A4D8               	btfss	status,2,c
 21825  00094C  D004               	goto	l942
 21826                           
 21827                           ; BSR set to: 0
 21828                           ;encoder.c: 426: if(arpeggiatorTypeMenu.selector > 0){
 21829  00094E  0101               	movlb	1	; () banked
 21830  000950  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 21831  000952  A4D8               	btfss	status,2,c
 21832                           
 21833                           ; BSR set to: 1
 21834                           ;encoder.c: 427: arpeggiatorTypeMenu.selector--;
 21835  000954  072E               	decf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 21836  000956                     l942:
 21837                           
 21838                           ;encoder.c: 428: }
 21839                           ;encoder.c: 429: }
 21840                           ;encoder.c: 430: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 21841                           
 21842                           ; BSR set to: 1
 21843                           
 21844                           ; BSR set to: 1
 21845  000956  0E1E               	movlw	30
 21846  000958  0100               	movlb	0	; () banked
 21847  00095A  19F9               	xorwf	_which_screen& (0+255),w,b
 21848  00095C  A4D8               	btfss	status,2,c
 21849  00095E  D004               	goto	l944
 21850                           
 21851                           ; BSR set to: 0
 21852                           ;encoder.c: 431: if(arpeggiatorNoteLengthMenu.selector > 0){
 21853  000960  0101               	movlb	1	; () banked
 21854  000962  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 21855  000964  A4D8               	btfss	status,2,c
 21856                           
 21857                           ; BSR set to: 1
 21858                           ;encoder.c: 432: arpeggiatorNoteLengthMenu.selector--;
 21859  000966  072B               	decf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 21860  000968                     l944:
 21861                           
 21862                           ;encoder.c: 433: }
 21863                           ;encoder.c: 434: }
 21864                           ;encoder.c: 435: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 21865                           
 21866                           ; BSR set to: 1
 21867                           
 21868                           ; BSR set to: 1
 21869  000968  0E1F               	movlw	31
 21870  00096A  0100               	movlb	0	; () banked
 21871  00096C  19F9               	xorwf	_which_screen& (0+255),w,b
 21872  00096E  A4D8               	btfss	status,2,c
 21873  000970  D004               	goto	l946
 21874                           
 21875                           ; BSR set to: 0
 21876                           ;encoder.c: 437: if(arpeggiatorLatchMenu.selector > 0){
 21877  000972  0101               	movlb	1	; () banked
 21878  000974  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 21879  000976  A4D8               	btfss	status,2,c
 21880                           
 21881                           ; BSR set to: 1
 21882                           ;encoder.c: 438: arpeggiatorLatchMenu.selector--;
 21883  000978  0728               	decf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 21884  00097A                     l946:
 21885                           
 21886                           ;encoder.c: 439: }
 21887                           ;encoder.c: 440: }
 21888                           ;encoder.c: 441: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 21889                           
 21890                           ; BSR set to: 1
 21891                           
 21892                           ; BSR set to: 1
 21893  00097A  0E20               	movlw	32
 21894  00097C  0100               	movlb	0	; () banked
 21895  00097E  19F9               	xorwf	_which_screen& (0+255),w,b
 21896  000980  A4D8               	btfss	status,2,c
 21897  000982  D003               	goto	l947
 21898                           
 21899                           ; BSR set to: 0
 21900                           ;encoder.c: 442: arpeggiatorLatchOnOffMenu.selector ^= 1;
 21901  000984  0E01               	movlw	1
 21902  000986  0101               	movlb	1	; () banked
 21903  000988  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 21904  00098A                     l947:
 21905                           
 21906                           ;encoder.c: 443: }
 21907                           ;encoder.c: 444: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 21908  00098A  0E21               	movlw	33
 21909  00098C  0100               	movlb	0	; () banked
 21910  00098E  19F9               	xorwf	_which_screen& (0+255),w,b
 21911  000990  A4D8               	btfss	status,2,c
 21912  000992  D003               	goto	l948
 21913                           
 21914                           ; BSR set to: 0
 21915                           ;encoder.c: 445: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 21916  000994  0E01               	movlw	1
 21917  000996  0101               	movlb	1	; () banked
 21918  000998  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 21919  00099A                     l948:
 21920                           
 21921                           ;encoder.c: 446: }
 21922                           ;encoder.c: 447: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 21923  00099A  0E22               	movlw	34
 21924  00099C  0100               	movlb	0	; () banked
 21925  00099E  19F9               	xorwf	_which_screen& (0+255),w,b
 21926  0009A0  A4D8               	btfss	status,2,c
 21927  0009A2  D003               	goto	l949
 21928                           
 21929                           ; BSR set to: 0
 21930                           ;encoder.c: 448: arpeggiatorUnLatchModeMenu.selector ^= 1;
 21931  0009A4  0E01               	movlw	1
 21932  0009A6  0101               	movlb	1	; () banked
 21933  0009A8  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 21934  0009AA                     l949:
 21935                           
 21936                           ;encoder.c: 449: }
 21937                           ;encoder.c: 450: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 21938  0009AA  0E23               	movlw	35
 21939  0009AC  0100               	movlb	0	; () banked
 21940  0009AE  19F9               	xorwf	_which_screen& (0+255),w,b
 21941  0009B0  A4D8               	btfss	status,2,c
 21942  0009B2  D004               	goto	l951
 21943                           
 21944                           ; BSR set to: 0
 21945                           ;encoder.c: 451: if(arpeggiatorRandomizeSkipMenu.selector > 0){
 21946  0009B4  0101               	movlb	1	; () banked
 21947  0009B6  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 21948  0009B8  A4D8               	btfss	status,2,c
 21949                           
 21950                           ; BSR set to: 1
 21951                           ;encoder.c: 452: arpeggiatorRandomizeSkipMenu.selector--;
 21952  0009BA  071C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 21953  0009BC                     l951:
 21954                           
 21955                           ;encoder.c: 453: }
 21956                           ;encoder.c: 454: }
 21957                           ;encoder.c: 455: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 21958                           
 21959                           ; BSR set to: 1
 21960                           
 21961                           ; BSR set to: 1
 21962  0009BC  0E24               	movlw	36
 21963  0009BE  0100               	movlb	0	; () banked
 21964  0009C0  19F9               	xorwf	_which_screen& (0+255),w,b
 21965  0009C2  A4D8               	btfss	status,2,c
 21966  0009C4  D003               	goto	l952
 21967                           
 21968                           ; BSR set to: 0
 21969                           ;encoder.c: 456: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 21970  0009C6  0E01               	movlw	1
 21971  0009C8  0101               	movlb	1	; () banked
 21972  0009CA  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 21973  0009CC                     l952:
 21974                           
 21975                           ;encoder.c: 460: }
 21976                           ;encoder.c: 461: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 21977  0009CC  0E25               	movlw	37
 21978  0009CE  0100               	movlb	0	; () banked
 21979  0009D0  19F9               	xorwf	_which_screen& (0+255),w,b
 21980  0009D2  A4D8               	btfss	status,2,c
 21981  0009D4  D003               	goto	l953
 21982                           
 21983                           ; BSR set to: 0
 21984                           ;encoder.c: 462: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 21985  0009D6  0E01               	movlw	1
 21986  0009D8  0101               	movlb	1	; () banked
 21987  0009DA  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 21988  0009DC                     l953:
 21989                           
 21990                           ;encoder.c: 463: }
 21991                           ;encoder.c: 464: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 21992  0009DC  0E26               	movlw	38
 21993  0009DE  0100               	movlb	0	; () banked
 21994  0009E0  19F9               	xorwf	_which_screen& (0+255),w,b
 21995  0009E2  A4D8               	btfss	status,2,c
 21996  0009E4  D003               	goto	l955
 21997                           
 21998                           ; BSR set to: 0
 21999                           ;encoder.c: 465: if(arpeggiatorLastNoteModeMenu.selector > 0){
 22000  0009E6  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 22001  0009E8  A4D8               	btfss	status,2,c
 22002                           
 22003                           ; BSR set to: 0
 22004                           ;encoder.c: 466: arpeggiatorLastNoteModeMenu.selector--;
 22005  0009EA  07DE               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 22006  0009EC                     l955:
 22007                           
 22008                           ; BSR set to: 0
 22009                           ;encoder.c: 467: }
 22010                           ;encoder.c: 468: }
 22011                           ;encoder.c: 469: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 22012                           
 22013                           ; BSR set to: 0
 22014                           
 22015                           ; BSR set to: 0
 22016  0009EC  0E27               	movlw	39
 22017  0009EE  19F9               	xorwf	_which_screen& (0+255),w,b
 22018  0009F0  A4D8               	btfss	status,2,c
 22019  0009F2  D003               	goto	l956
 22020                           
 22021                           ; BSR set to: 0
 22022                           ;encoder.c: 470: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 22023  0009F4  0E01               	movlw	1
 22024  0009F6  0101               	movlb	1	; () banked
 22025  0009F8  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 22026  0009FA                     l956:
 22027                           
 22028                           ;encoder.c: 471: }
 22029                           ;encoder.c: 472: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 22030  0009FA  0E28               	movlw	40
 22031  0009FC  0100               	movlb	0	; () banked
 22032  0009FE  19F9               	xorwf	_which_screen& (0+255),w,b
 22033  000A00  A4D8               	btfss	status,2,c
 22034  000A02  D003               	goto	l957
 22035                           
 22036                           ; BSR set to: 0
 22037                           ;encoder.c: 473: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 22038  000A04  0E01               	movlw	1
 22039  000A06  0101               	movlb	1	; () banked
 22040  000A08  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 22041  000A0A                     l957:
 22042                           
 22043                           ;encoder.c: 474: }
 22044                           ;encoder.c: 475: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22045  000A0A  0E29               	movlw	41
 22046  000A0C  0100               	movlb	0	; () banked
 22047  000A0E  19F9               	xorwf	_which_screen& (0+255),w,b
 22048  000A10  A4D8               	btfss	status,2,c
 22049  000A12  D003               	goto	l958
 22050                           
 22051                           ; BSR set to: 0
 22052                           ;encoder.c: 476: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22053  000A14  0E01               	movlw	1
 22054  000A16  0101               	movlb	1	; () banked
 22055  000A18  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22056  000A1A                     l958:
 22057                           
 22058                           ;encoder.c: 477: }
 22059                           ;encoder.c: 478: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22060  000A1A  0E29               	movlw	41
 22061  000A1C  0100               	movlb	0	; () banked
 22062  000A1E  19F9               	xorwf	_which_screen& (0+255),w,b
 22063  000A20  A4D8               	btfss	status,2,c
 22064  000A22  D003               	goto	l959
 22065                           
 22066                           ; BSR set to: 0
 22067                           ;encoder.c: 479: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22068  000A24  0E01               	movlw	1
 22069  000A26  0101               	movlb	1	; () banked
 22070  000A28  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22071  000A2A                     l959:
 22072                           
 22073                           ;encoder.c: 480: }
 22074                           ;encoder.c: 481: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 22075  000A2A  0E2A               	movlw	42
 22076  000A2C  0100               	movlb	0	; () banked
 22077  000A2E  19F9               	xorwf	_which_screen& (0+255),w,b
 22078  000A30  A4D8               	btfss	status,2,c
 22079  000A32  D003               	goto	l960
 22080                           
 22081                           ; BSR set to: 0
 22082                           ;encoder.c: 482: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 22083  000A34  0E01               	movlw	1
 22084  000A36  0101               	movlb	1	; () banked
 22085  000A38  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 22086  000A3A                     l960:
 22087                           
 22088                           ;encoder.c: 483: }
 22089                           ;encoder.c: 484: }
 22090                           ;encoder.c: 486: encoder_direction = 0x00;
 22091                           
 22092                           ; BSR set to: 1
 22093                           
 22094                           ; BSR set to: 1
 22095  000A3A  0E00               	movlw	0
 22096  000A3C  0100               	movlb	0	; () banked
 22097  000A3E  6FEB               	movwf	_encoder_direction& (0+255),b
 22098                           
 22099                           ; BSR set to: 0
 22100  000A40  0012               	return		;funcret
 22101  000A42                     __end_of_processEncoderBuxton:
 22102                           	opt stack 0
 22103                           tblptru	equ	0xFF8
 22104                           tblptrh	equ	0xFF7
 22105                           tblptrl	equ	0xFF6
 22106                           tablat	equ	0xFF5
 22107                           prodh	equ	0xFF4
 22108                           prodl	equ	0xFF3
 22109                           intcon	equ	0xFF2
 22110                           intcon2	equ	0xFF1
 22111                           postinc0	equ	0xFEE
 22112                           wreg	equ	0xFE8
 22113                           postdec1	equ	0xFE5
 22114                           fsr1l	equ	0xFE1
 22115                           indf2	equ	0xFDF
 22116                           postinc2	equ	0xFDE
 22117                           plusw2	equ	0xFDB
 22118                           fsr2h	equ	0xFDA
 22119                           fsr2l	equ	0xFD9
 22120                           status	equ	0xFD8
 22121                           
 22122 ;; *************** function _clear_row2 *****************
 22123 ;; Defined at:
 22124 ;;		line 79 in file "menu.c"
 22125 ;; Parameters:    Size  Location     Type
 22126 ;;		None
 22127 ;; Auto vars:     Size  Location     Type
 22128 ;;		None
 22129 ;; Return value:  Size  Location     Type
 22130 ;;                  1    wreg      void 
 22131 ;; Registers used:
 22132 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 22133 ;; Tracked objects:
 22134 ;;		On entry : 0/0
 22135 ;;		On exit  : 0/0
 22136 ;;		Unchanged: 0/0
 22137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22142 ;;Total ram usage:        0 bytes
 22143 ;; Hardware stack levels used:    1
 22144 ;; Hardware stack levels required when called:    8
 22145 ;; This function calls:
 22146 ;;		_Lcd_Print_String
 22147 ;;		_Lcd_Set_Cursor
 22148 ;; This function is called by:
 22149 ;;		_Function_A_1
 22150 ;;		_Function_A_2
 22151 ;;		_Function_A_3
 22152 ;;		_Function_A
 22153 ;;		_Function_B
 22154 ;;		_Function_C_1
 22155 ;;		_Function_C_2
 22156 ;;		_Function_C_3
 22157 ;;		_Function_C
 22158 ;;		_Function_D_1
 22159 ;;		_Function_D_3
 22160 ;;		_Function_D_4
 22161 ;;		_Function_D_5
 22162 ;;		_Function_D
 22163 ;;		_Function_E
 22164 ;;		_Function_F
 22165 ;;		_Function_G_1
 22166 ;;		_Function_G_2
 22167 ;;		_Function_G_3
 22168 ;;		_Function_G_4
 22169 ;;		_Function_G
 22170 ;;		_Function_H
 22171 ;;		_Function_H_1
 22172 ;;		_Function_H_2
 22173 ;;		_Function_H_3
 22174 ;;		_Function_H_4
 22175 ;;		_Function_H_5
 22176 ;;		_Function_H_6_1
 22177 ;;		_Function_H_6_2
 22178 ;;		_Function_H_6
 22179 ;;		_Function_H_7
 22180 ;;		_Function_H_8_1
 22181 ;;		_Function_H_8_2
 22182 ;;		_Function_H_8
 22183 ;;		_Function_H_9_1
 22184 ;;		_Function_H_9_2
 22185 ;;		_Function_H_9_3
 22186 ;;		_Function_H_9_4
 22187 ;;		_Function_H_9
 22188 ;; This function uses a non-reentrant model
 22189 ;;
 22190                           
 22191                           	psect	text63
 22192  009492                     __ptext63:
 22193                           	opt stack 0
 22194  009492                     _clear_row2:
 22195                           	opt stack 20
 22196                           
 22197                           ;menu.c: 80: Lcd_Set_Cursor(2,1);
 22198                           
 22199                           ; BSR set to: 0
 22200                           ;incstack = 0
 22201  009492  0E01               	movlw	1
 22202  009494  0100               	movlb	0	; () banked
 22203  009496  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 22204  009498  0E02               	movlw	2
 22205  00949A  ECF7  F045         	call	_Lcd_Set_Cursor
 22206                           
 22207                           ;menu.c: 81: Lcd_Print_String("                ");
 22208  00949E  0E64               	movlw	low STR_10
 22209  0094A0  0100               	movlb	0	; () banked
 22210  0094A2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 22211  0094A4  0EFD               	movlw	high STR_10
 22212  0094A6  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 22213  0094A8  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 22214                           
 22215                           ;menu.c: 82: Lcd_Set_Cursor(2,1);
 22216  0094AC  0E01               	movlw	1
 22217  0094AE  0100               	movlb	0	; () banked
 22218  0094B0  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 22219  0094B2  0E02               	movlw	2
 22220  0094B4  ECF7  F045         	call	_Lcd_Set_Cursor
 22221  0094B8  0012               	return		;funcret
 22222  0094BA                     __end_of_clear_row2:
 22223                           	opt stack 0
 22224                           tblptru	equ	0xFF8
 22225                           tblptrh	equ	0xFF7
 22226                           tblptrl	equ	0xFF6
 22227                           tablat	equ	0xFF5
 22228                           prodh	equ	0xFF4
 22229                           prodl	equ	0xFF3
 22230                           intcon	equ	0xFF2
 22231                           intcon2	equ	0xFF1
 22232                           postinc0	equ	0xFEE
 22233                           wreg	equ	0xFE8
 22234                           postdec1	equ	0xFE5
 22235                           fsr1l	equ	0xFE1
 22236                           indf2	equ	0xFDF
 22237                           postinc2	equ	0xFDE
 22238                           plusw2	equ	0xFDB
 22239                           fsr2h	equ	0xFDA
 22240                           fsr2l	equ	0xFD9
 22241                           status	equ	0xFD8
 22242                           
 22243 ;; *************** function _clear_row1 *****************
 22244 ;; Defined at:
 22245 ;;		line 72 in file "menu.c"
 22246 ;; Parameters:    Size  Location     Type
 22247 ;;		None
 22248 ;; Auto vars:     Size  Location     Type
 22249 ;;		None
 22250 ;; Return value:  Size  Location     Type
 22251 ;;                  1    wreg      void 
 22252 ;; Registers used:
 22253 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 22254 ;; Tracked objects:
 22255 ;;		On entry : 0/0
 22256 ;;		On exit  : 0/0
 22257 ;;		Unchanged: 0/0
 22258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22263 ;;Total ram usage:        0 bytes
 22264 ;; Hardware stack levels used:    1
 22265 ;; Hardware stack levels required when called:    8
 22266 ;; This function calls:
 22267 ;;		_Lcd_Print_String
 22268 ;;		_Lcd_Set_Cursor
 22269 ;; This function is called by:
 22270 ;;		_exitFunction
 22271 ;;		_exitSave
 22272 ;;		_exitLoad
 22273 ;;		_eepromExit
 22274 ;;		_Function_A_1
 22275 ;;		_Function_A_2
 22276 ;;		_Function_A_3
 22277 ;;		_Function_C_1
 22278 ;;		_Function_C_2
 22279 ;;		_Function_C_3
 22280 ;;		_Function_D_1
 22281 ;;		_Function_D_3
 22282 ;;		_Function_D_4
 22283 ;;		_Function_D_5
 22284 ;;		_Function_G_1
 22285 ;;		_Function_G_2
 22286 ;;		_Function_G_3
 22287 ;;		_Function_G_4
 22288 ;;		_Function_H_4
 22289 ;;		_Function_H_5
 22290 ;;		_Function_H_6_1
 22291 ;;		_Function_H_6_2
 22292 ;;		_Function_H_7
 22293 ;;		_Function_H_8_1
 22294 ;;		_Function_H_9_1
 22295 ;;		_Function_H_9_2
 22296 ;;		_Function_H_9_3
 22297 ;;		_Function_H_9_4
 22298 ;;		_Function_H_9
 22299 ;; This function uses a non-reentrant model
 22300 ;;
 22301                           
 22302                           	psect	text64
 22303  0094BA                     __ptext64:
 22304                           	opt stack 0
 22305  0094BA                     _clear_row1:
 22306                           	opt stack 20
 22307                           
 22308                           ;menu.c: 73: Lcd_Set_Cursor(1,1);
 22309                           
 22310                           ;incstack = 0
 22311  0094BA  0E01               	movlw	1
 22312  0094BC  0100               	movlb	0	; () banked
 22313  0094BE  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 22314  0094C0  0E01               	movlw	1
 22315  0094C2  ECF7  F045         	call	_Lcd_Set_Cursor
 22316                           
 22317                           ;menu.c: 74: Lcd_Print_String("                ");
 22318  0094C6  0E64               	movlw	low STR_10
 22319  0094C8  0100               	movlb	0	; () banked
 22320  0094CA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 22321  0094CC  0EFD               	movlw	high STR_10
 22322  0094CE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 22323  0094D0  ECBD  F040         	call	_Lcd_Print_String	;wreg free
 22324                           
 22325                           ;menu.c: 75: Lcd_Set_Cursor(1,1);
 22326  0094D4  0E01               	movlw	1
 22327  0094D6  0100               	movlb	0	; () banked
 22328  0094D8  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 22329  0094DA  0E01               	movlw	1
 22330  0094DC  ECF7  F045         	call	_Lcd_Set_Cursor
 22331  0094E0  0012               	return		;funcret
 22332  0094E2                     __end_of_clear_row1:
 22333                           	opt stack 0
 22334                           tblptru	equ	0xFF8
 22335                           tblptrh	equ	0xFF7
 22336                           tblptrl	equ	0xFF6
 22337                           tablat	equ	0xFF5
 22338                           prodh	equ	0xFF4
 22339                           prodl	equ	0xFF3
 22340                           intcon	equ	0xFF2
 22341                           intcon2	equ	0xFF1
 22342                           postinc0	equ	0xFEE
 22343                           wreg	equ	0xFE8
 22344                           postdec1	equ	0xFE5
 22345                           fsr1l	equ	0xFE1
 22346                           indf2	equ	0xFDF
 22347                           postinc2	equ	0xFDE
 22348                           plusw2	equ	0xFDB
 22349                           fsr2h	equ	0xFDA
 22350                           fsr2l	equ	0xFD9
 22351                           status	equ	0xFD8
 22352                           
 22353 ;; *************** function _Lcd_Set_Cursor *****************
 22354 ;; Defined at:
 22355 ;;		line 59 in file "lcd.c"
 22356 ;; Parameters:    Size  Location     Type
 22357 ;;  a               1    wreg     unsigned char 
 22358 ;;  b               1    3[BANK0 ] unsigned char 
 22359 ;; Auto vars:     Size  Location     Type
 22360 ;;  a               1    4[BANK0 ] unsigned char 
 22361 ;;  temp            1    7[BANK0 ] unsigned char 
 22362 ;;  y               1    6[BANK0 ] unsigned char 
 22363 ;;  z               1    5[BANK0 ] unsigned char 
 22364 ;; Return value:  Size  Location     Type
 22365 ;;                  1    wreg      void 
 22366 ;; Registers used:
 22367 ;;		wreg, status,2, status,0, cstack
 22368 ;; Tracked objects:
 22369 ;;		On entry : 0/0
 22370 ;;		On exit  : 0/0
 22371 ;;		Unchanged: 0/0
 22372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22373 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22374 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22376 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22377 ;;Total ram usage:        5 bytes
 22378 ;; Hardware stack levels used:    1
 22379 ;; Hardware stack levels required when called:    7
 22380 ;; This function calls:
 22381 ;;		_Lcd_Cmd
 22382 ;; This function is called by:
 22383 ;;		_clear_row1
 22384 ;;		_clear_row2
 22385 ;;		_setControllerNumbers
 22386 ;;		_menu_lcd
 22387 ;;		_Function_C_2
 22388 ;;		_Function_C_3
 22389 ;;		_Function_D_2
 22390 ;;		_Function_E_1
 22391 ;;		_Function_E_2
 22392 ;;		_Function_F
 22393 ;;		_Function_H_2
 22394 ;;		_Function_H_3
 22395 ;; This function uses a non-reentrant model
 22396 ;;
 22397                           
 22398                           	psect	text65
 22399  008BEE                     __ptext65:
 22400                           	opt stack 0
 22401  008BEE                     _Lcd_Set_Cursor:
 22402                           	opt stack 20
 22403                           
 22404                           ;incstack = 0
 22405                           ;Lcd_Set_Cursor@a stored from wreg
 22406  008BEE  0100               	movlb	0	; () banked
 22407  008BF0  6F64               	movwf	Lcd_Set_Cursor@a& (0+255),b
 22408                           
 22409                           ;lcd.c: 61: char temp,z,y;
 22410                           ;lcd.c: 62: if(a== 1)
 22411  008BF2  0100               	movlb	0	; () banked
 22412  008BF4  0564               	decf	Lcd_Set_Cursor@a& (0+255),w,b
 22413  008BF6  A4D8               	btfss	status,2,c
 22414  008BF8  D011               	goto	l36
 22415                           
 22416                           ; BSR set to: 0
 22417                           ;lcd.c: 63: {
 22418                           ;lcd.c: 64: temp = 0x80 + b - 1;
 22419  008BFA  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 22420  008BFC  0F7F               	addlw	127
 22421  008BFE  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 22422                           
 22423                           ;lcd.c: 65: z = temp>>4;
 22424  008C00  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 22425  008C02  0B0F               	andlw	15
 22426  008C04  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 22427                           
 22428                           ;lcd.c: 66: y = temp & 0x0F;
 22429  008C06  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 22430  008C08  0B0F               	andlw	15
 22431  008C0A  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 22432                           
 22433                           ; BSR set to: 0
 22434                           ;lcd.c: 67: Lcd_Cmd(z);
 22435  008C0C  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 22436  008C0E  EC85  F04A         	call	_Lcd_Cmd
 22437                           
 22438                           ;lcd.c: 68: Lcd_Cmd(y);
 22439  008C12  0100               	movlb	0	; () banked
 22440  008C14  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 22441  008C16  EC85  F04A         	call	_Lcd_Cmd
 22442                           
 22443                           ;lcd.c: 69: }
 22444  008C1A  0012               	return	
 22445  008C1C                     l36:
 22446                           
 22447                           ;lcd.c: 70: else if(a== 2)
 22448  008C1C  0E02               	movlw	2
 22449  008C1E  0100               	movlb	0	; () banked
 22450  008C20  1964               	xorwf	Lcd_Set_Cursor@a& (0+255),w,b
 22451  008C22  A4D8               	btfss	status,2,c
 22452  008C24  0012               	return	
 22453                           
 22454                           ; BSR set to: 0
 22455                           ;lcd.c: 71: {
 22456                           ;lcd.c: 72: temp = 0xC0 + b - 1;
 22457  008C26  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 22458  008C28  0FBF               	addlw	191
 22459  008C2A  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 22460                           
 22461                           ;lcd.c: 73: z = temp>>4;
 22462  008C2C  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 22463  008C2E  0B0F               	andlw	15
 22464  008C30  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 22465                           
 22466                           ;lcd.c: 74: y = temp & 0x0F;
 22467  008C32  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 22468  008C34  0B0F               	andlw	15
 22469  008C36  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 22470                           
 22471                           ; BSR set to: 0
 22472                           ;lcd.c: 75: Lcd_Cmd(z);
 22473  008C38  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 22474  008C3A  EC85  F04A         	call	_Lcd_Cmd
 22475                           
 22476                           ;lcd.c: 76: Lcd_Cmd(y);
 22477  008C3E  0100               	movlb	0	; () banked
 22478  008C40  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 22479  008C42  EC85  F04A         	call	_Lcd_Cmd
 22480  008C46  0012               	return	
 22481  008C48                     __end_of_Lcd_Set_Cursor:
 22482                           	opt stack 0
 22483                           tblptru	equ	0xFF8
 22484                           tblptrh	equ	0xFF7
 22485                           tblptrl	equ	0xFF6
 22486                           tablat	equ	0xFF5
 22487                           prodh	equ	0xFF4
 22488                           prodl	equ	0xFF3
 22489                           intcon	equ	0xFF2
 22490                           intcon2	equ	0xFF1
 22491                           postinc0	equ	0xFEE
 22492                           wreg	equ	0xFE8
 22493                           postdec1	equ	0xFE5
 22494                           fsr1l	equ	0xFE1
 22495                           indf2	equ	0xFDF
 22496                           postinc2	equ	0xFDE
 22497                           plusw2	equ	0xFDB
 22498                           fsr2h	equ	0xFDA
 22499                           fsr2l	equ	0xFD9
 22500                           status	equ	0xFD8
 22501                           
 22502 ;; *************** function _Lcd_Print_String *****************
 22503 ;; Defined at:
 22504 ;;		line 114 in file "lcd.c"
 22505 ;; Parameters:    Size  Location     Type
 22506 ;;  a               2   10[BANK0 ] PTR unsigned char 
 22507 ;;		 -> STR_74(16), STR_73(12), STR_72(10), STR_71(12), 
 22508 ;;		 -> STR_70(10), STR_69(12), STR_68(10), STR_67(12), 
 22509 ;;		 -> STR_66(10), STR_65(12), STR_64(13), STR_63(15), 
 22510 ;;		 -> STR_62(15), STR_61(16), STR_59(14), STR_57(12), 
 22511 ;;		 -> STR_56(15), STR_54(14), STR_52(15), STR_51(17), 
 22512 ;;		 -> STR_50(9), STR_49(10), STR_48(13), STR_47(13), 
 22513 ;;		 -> STR_46(17), STR_45(14), STR_44(14), STR_42(15), 
 22514 ;;		 -> STR_40(16), STR_39(17), STR_38(13), STR_37(17), 
 22515 ;;		 -> STR_36(8), STR_35(8), STR_34(12), STR_33(17), 
 22516 ;;		 -> STR_32(15), STR_31(14), STR_30(17), STR_29(15), 
 22517 ;;		 -> STR_28(17), STR_27(14), STR_26(16), STR_25(14), 
 22518 ;;		 -> STR_24(12), LCD_STRINGS(2397), STR_23(13), STR_22(17), 
 22519 ;;		 -> STR_21(16), STR_20(5), STR_19(11), STR_18(11), 
 22520 ;;		 -> STR_17(11), STR_16(10), STR_15(11), STR_14(11), 
 22521 ;;		 -> STR_13(11), STR_12(10), string2display(5), STR_11(17), 
 22522 ;;		 -> STR_10(17), 
 22523 ;; Auto vars:     Size  Location     Type
 22524 ;;  i               2   14[BANK0 ] int 
 22525 ;; Return value:  Size  Location     Type
 22526 ;;                  1    wreg      void 
 22527 ;; Registers used:
 22528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 22529 ;; Tracked objects:
 22530 ;;		On entry : 0/0
 22531 ;;		On exit  : 0/0
 22532 ;;		Unchanged: 0/0
 22533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22534 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22535 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22536 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22537 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22538 ;;Total ram usage:        6 bytes
 22539 ;; Hardware stack levels used:    1
 22540 ;; Hardware stack levels required when called:    7
 22541 ;; This function calls:
 22542 ;;		_Lcd_Print_Char
 22543 ;; This function is called by:
 22544 ;;		_clear_row1
 22545 ;;		_clear_row2
 22546 ;;		_setControllerNumbers
 22547 ;;		_exitFunction
 22548 ;;		_exitSave
 22549 ;;		_exitLoad
 22550 ;;		_eepromExit
 22551 ;;		_menu_lcd
 22552 ;;		_Function_A_1
 22553 ;;		_Function_A_2
 22554 ;;		_Function_A_3
 22555 ;;		_Function_A
 22556 ;;		_Function_B
 22557 ;;		_Function_C_1
 22558 ;;		_Function_C_2
 22559 ;;		_Function_C_3
 22560 ;;		_Function_C
 22561 ;;		_Function_D_1
 22562 ;;		_Function_D_2
 22563 ;;		_Function_D_3
 22564 ;;		_Function_D_4
 22565 ;;		_Function_D_5
 22566 ;;		_Function_D
 22567 ;;		_Function_E_1
 22568 ;;		_Function_E_2
 22569 ;;		_Function_E
 22570 ;;		_Function_F
 22571 ;;		_Function_G_1
 22572 ;;		_Function_G_2
 22573 ;;		_Function_G_3
 22574 ;;		_Function_G_4
 22575 ;;		_Function_G
 22576 ;;		_Function_H
 22577 ;;		_Function_H_1
 22578 ;;		_Function_H_2
 22579 ;;		_Function_H_3
 22580 ;;		_Function_H_4
 22581 ;;		_Function_H_5
 22582 ;;		_Function_H_6_1
 22583 ;;		_Function_H_6_2
 22584 ;;		_Function_H_6
 22585 ;;		_Function_H_7
 22586 ;;		_Function_H_8_1
 22587 ;;		_Function_H_8_2
 22588 ;;		_Function_H_8
 22589 ;;		_Function_H_9_1
 22590 ;;		_Function_H_9_2
 22591 ;;		_Function_H_9_3
 22592 ;;		_Function_H_9_4
 22593 ;;		_Function_H_9
 22594 ;; This function uses a non-reentrant model
 22595 ;;
 22596                           
 22597                           	psect	text66
 22598  00817A                     __ptext66:
 22599                           	opt stack 0
 22600  00817A                     _Lcd_Print_String:
 22601                           	opt stack 20
 22602                           
 22603                           ;lcd.c: 116: int i;
 22604                           ;lcd.c: 117: for(i=0;a[i]!='\0';i++)
 22605                           
 22606                           ;incstack = 0
 22607  00817A  0E00               	movlw	0
 22608  00817C  0100               	movlb	0	; () banked
 22609  00817E  6F6F               	movwf	(Lcd_Print_String@i+1)& (0+255),b
 22610  008180  0E00               	movlw	0
 22611  008182  6F6E               	movwf	Lcd_Print_String@i& (0+255),b
 22612  008184  D01D               	goto	l54
 22613  008186                     
 22614                           ;lcd.c: 118: Lcd_Print_Char(a[i]);
 22615                           
 22616                           ; BSR set to: 0
 22617  008186  0100               	movlb	0	; () banked
 22618  008188  516E               	movf	Lcd_Print_String@i& (0+255),w,b
 22619  00818A  256A               	addwf	Lcd_Print_String@a& (0+255),w,b
 22620  00818C  6F6C               	movwf	??_Lcd_Print_String& (0+255),b
 22621  00818E  516F               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 22622  008190  216B               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 22623  008192  6F6D               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 22624  008194  C06C  FFF6         	movff	??_Lcd_Print_String,tblptrl
 22625  008198  C06D  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 22626  00819C  0E00               	movlw	low (__mediumconst shr (0+16))
 22627  00819E  6EF8               	movwf	tblptru,c
 22628  0081A0  0E0C               	movlw	(high __ramtop+-1)
 22629  0081A2  64F7               	cpfsgt	tblptrh,c
 22630  0081A4  D003               	bra	u24737
 22631  0081A6  0008               	tblrd		*
 22632  0081A8  50F5               	movf	tablat,w,c
 22633  0081AA  D005               	bra	u24730
 22634  0081AC                     u24737:
 22635  0081AC  CFF6 FFE1          	movff	tblptrl,fsr1l
 22636  0081B0  CFF7 FFE2          	movff	tblptrh,fsr1h
 22637  0081B4  50E7               	movf	indf1,w,c
 22638  0081B6                     u24730:
 22639  0081B6  ECBE  F03D         	call	_Lcd_Print_Char
 22640  0081BA  0100               	movlb	0	; () banked
 22641  0081BC  4B6E               	infsnz	Lcd_Print_String@i& (0+255),f,b
 22642  0081BE  2B6F               	incf	(Lcd_Print_String@i+1)& (0+255),f,b
 22643  0081C0                     l54:
 22644                           
 22645                           ; BSR set to: 0
 22646                           
 22647                           ; BSR set to: 0
 22648  0081C0  516E               	movf	Lcd_Print_String@i& (0+255),w,b
 22649  0081C2  256A               	addwf	Lcd_Print_String@a& (0+255),w,b
 22650  0081C4  6F6C               	movwf	??_Lcd_Print_String& (0+255),b
 22651  0081C6  516F               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 22652  0081C8  216B               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 22653  0081CA  6F6D               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 22654  0081CC  C06C  FFF6         	movff	??_Lcd_Print_String,tblptrl
 22655  0081D0  C06D  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 22656  0081D4  0E00               	movlw	low (__mediumconst shr (0+16))
 22657  0081D6  6EF8               	movwf	tblptru,c
 22658  0081D8  0E0C               	movlw	(high __ramtop+-1)
 22659  0081DA  64F7               	cpfsgt	tblptrh,c
 22660  0081DC  D003               	bra	u24747
 22661  0081DE  0008               	tblrd		*
 22662  0081E0  50F5               	movf	tablat,w,c
 22663  0081E2  D005               	bra	u24740
 22664  0081E4                     u24747:
 22665  0081E4  CFF6 FFE1          	movff	tblptrl,fsr1l
 22666  0081E8  CFF7 FFE2          	movff	tblptrh,fsr1h
 22667  0081EC  50E7               	movf	indf1,w,c
 22668  0081EE                     u24740:
 22669  0081EE  0900               	iorlw	0
 22670  0081F0  B4D8               	btfsc	status,2,c
 22671  0081F2  0012               	return	
 22672  0081F4  D7C8               	goto	l55
 22673  0081F6                     __end_of_Lcd_Print_String:
 22674                           	opt stack 0
 22675                           tblptru	equ	0xFF8
 22676                           tblptrh	equ	0xFF7
 22677                           tblptrl	equ	0xFF6
 22678                           tablat	equ	0xFF5
 22679                           prodh	equ	0xFF4
 22680                           prodl	equ	0xFF3
 22681                           intcon	equ	0xFF2
 22682                           intcon2	equ	0xFF1
 22683                           postinc0	equ	0xFEE
 22684                           wreg	equ	0xFE8
 22685                           indf1	equ	0xFE7
 22686                           postdec1	equ	0xFE5
 22687                           fsr1h	equ	0xFE2
 22688                           fsr1l	equ	0xFE1
 22689                           indf2	equ	0xFDF
 22690                           postinc2	equ	0xFDE
 22691                           plusw2	equ	0xFDB
 22692                           fsr2h	equ	0xFDA
 22693                           fsr2l	equ	0xFD9
 22694                           status	equ	0xFD8
 22695                           
 22696 ;; *************** function _Lcd_Print_Char *****************
 22697 ;; Defined at:
 22698 ;;		line 98 in file "lcd.c"
 22699 ;; Parameters:    Size  Location     Type
 22700 ;;  data            1    wreg     unsigned char 
 22701 ;; Auto vars:     Size  Location     Type
 22702 ;;  data            1    3[BANK0 ] unsigned char 
 22703 ;;  i               2    6[BANK0 ] int 
 22704 ;;  i               2    4[BANK0 ] int 
 22705 ;;  Upper_Nibble    1    2[BANK0 ] unsigned char 
 22706 ;;  Lower_Nibble    1    1[BANK0 ] unsigned char 
 22707 ;; Return value:  Size  Location     Type
 22708 ;;                  1    wreg      void 
 22709 ;; Registers used:
 22710 ;;		wreg, status,2, status,0, cstack
 22711 ;; Tracked objects:
 22712 ;;		On entry : 0/0
 22713 ;;		On exit  : 0/0
 22714 ;;		Unchanged: 0/0
 22715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22717 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22719 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22720 ;;Total ram usage:        7 bytes
 22721 ;; Hardware stack levels used:    1
 22722 ;; Hardware stack levels required when called:    6
 22723 ;; This function calls:
 22724 ;;		_Lcd_SetBit
 22725 ;; This function is called by:
 22726 ;;		_Lcd_Print_String
 22727 ;; This function uses a non-reentrant model
 22728 ;;
 22729                           
 22730                           	psect	text67
 22731  007B7C                     __ptext67:
 22732                           	opt stack 0
 22733  007B7C                     _Lcd_Print_Char:
 22734                           	opt stack 20
 22735                           
 22736                           ;incstack = 0
 22737                           ;Lcd_Print_Char@data stored from wreg
 22738  007B7C  0100               	movlb	0	; () banked
 22739  007B7E  6F63               	movwf	Lcd_Print_Char@data& (0+255),b
 22740                           
 22741                           ;lcd.c: 100: char Lower_Nibble,Upper_Nibble;
 22742                           ;lcd.c: 101: Lower_Nibble = data&0x0F;
 22743  007B80  0100               	movlb	0	; () banked
 22744  007B82  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 22745  007B84  0B0F               	andlw	15
 22746  007B86  6F61               	movwf	Lcd_Print_Char@Lower_Nibble& (0+255),b
 22747                           
 22748                           ;lcd.c: 102: Upper_Nibble = data&0xF0;
 22749  007B88  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 22750  007B8A  0BF0               	andlw	240
 22751  007B8C  6F62               	movwf	Lcd_Print_Char@Upper_Nibble& (0+255),b
 22752                           
 22753                           ; BSR set to: 0
 22754                           ;lcd.c: 103: RE0 = 1;
 22755  007B8E  8084               	bsf	3972,0,c	;volatile
 22756                           
 22757                           ; BSR set to: 0
 22758                           ;lcd.c: 104: Lcd_SetBit(Upper_Nibble>>4);
 22759  007B90  3962               	swapf	Lcd_Print_Char@Upper_Nibble& (0+255),w,b
 22760  007B92  0B0F               	andlw	15
 22761  007B94  ECB0  F049         	call	_Lcd_SetBit
 22762                           
 22763                           ;lcd.c: 105: RE1 = 1;
 22764  007B98  8284               	bsf	3972,1,c	;volatile
 22765                           
 22766                           ;lcd.c: 106: for(int i=2130483; i<=0; i--) __nop();
 22767  007B9A  0E82               	movlw	130
 22768  007B9C  0100               	movlb	0	; () banked
 22769  007B9E  6F65               	movwf	(Lcd_Print_Char@i+1)& (0+255),b
 22770  007BA0  0E33               	movlw	51
 22771  007BA2  6F64               	movwf	Lcd_Print_Char@i& (0+255),b
 22772                           
 22773                           ; BSR set to: 0
 22774  007BA4  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 22775  007BA6  D003               	goto	l47
 22776  007BA8  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 22777  007BAA  E10D               	bnz	l48
 22778  007BAC  D009               	goto	L5
 22779  007BAE                     l47:
 22780                           
 22781                           ; BSR set to: 0
 22782  007BAE  F000               	nop	
 22783  007BB0  0100               	movlb	0	; () banked
 22784  007BB2  0764               	decf	Lcd_Print_Char@i& (0+255),f,b
 22785  007BB4  A0D8               	btfss	status,0,c
 22786  007BB6  0765               	decf	(Lcd_Print_Char@i+1)& (0+255),f,b
 22787                           
 22788                           ; BSR set to: 0
 22789  007BB8  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 22790  007BBA  D7F9               	goto	l47
 22791  007BBC  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 22792  007BBE  E103               	bnz	u23180
 22793  007BC0                     L5:
 22794  007BC0  0564               	decf	Lcd_Print_Char@i& (0+255),w,b
 22795  007BC2  A0D8               	btfss	status,0,c
 22796  007BC4  D7F4               	goto	l47
 22797  007BC6                     u23180:
 22798  007BC6                     l48:
 22799                           
 22800                           ; BSR set to: 0
 22801                           ;lcd.c: 107: RE1 = 0;
 22802  007BC6  9284               	bcf	3972,1,c	;volatile
 22803                           
 22804                           ; BSR set to: 0
 22805                           ;lcd.c: 108: Lcd_SetBit(Lower_Nibble);
 22806  007BC8  5161               	movf	Lcd_Print_Char@Lower_Nibble& (0+255),w,b
 22807  007BCA  ECB0  F049         	call	_Lcd_SetBit
 22808                           
 22809                           ;lcd.c: 109: RE1 = 1;
 22810  007BCE  8284               	bsf	3972,1,c	;volatile
 22811                           
 22812                           ;lcd.c: 110: for(int i=2130483; i<=0; i--) __nop();
 22813  007BD0  0E82               	movlw	130
 22814  007BD2  0100               	movlb	0	; () banked
 22815  007BD4  6F67               	movwf	(Lcd_Print_Char@i_57+1)& (0+255),b
 22816  007BD6  0E33               	movlw	51
 22817  007BD8  6F66               	movwf	Lcd_Print_Char@i_57& (0+255),b
 22818                           
 22819                           ; BSR set to: 0
 22820  007BDA  BF67               	btfsc	(Lcd_Print_Char@i_57+1)& (0+255),7,b
 22821  007BDC  D003               	goto	l49
 22822  007BDE  5167               	movf	(Lcd_Print_Char@i_57+1)& (0+255),w,b
 22823  007BE0  E10D               	bnz	l50
 22824  007BE2  D009               	goto	L6
 22825  007BE4                     l49:
 22826                           
 22827                           ; BSR set to: 0
 22828  007BE4  F000               	nop	
 22829  007BE6  0100               	movlb	0	; () banked
 22830  007BE8  0766               	decf	Lcd_Print_Char@i_57& (0+255),f,b
 22831  007BEA  A0D8               	btfss	status,0,c
 22832  007BEC  0767               	decf	(Lcd_Print_Char@i_57+1)& (0+255),f,b
 22833                           
 22834                           ; BSR set to: 0
 22835  007BEE  BF67               	btfsc	(Lcd_Print_Char@i_57+1)& (0+255),7,b
 22836  007BF0  D7F9               	goto	l49
 22837  007BF2  5167               	movf	(Lcd_Print_Char@i_57+1)& (0+255),w,b
 22838  007BF4  E103               	bnz	u23200
 22839  007BF6                     L6:
 22840  007BF6  0566               	decf	Lcd_Print_Char@i_57& (0+255),w,b
 22841  007BF8  A0D8               	btfss	status,0,c
 22842  007BFA  D7F4               	goto	l49
 22843  007BFC                     u23200:
 22844  007BFC                     l50:
 22845                           
 22846                           ; BSR set to: 0
 22847                           ;lcd.c: 111: RE1 = 0;
 22848  007BFC  9284               	bcf	3972,1,c	;volatile
 22849                           
 22850                           ; BSR set to: 0
 22851  007BFE  0012               	return		;funcret
 22852  007C00                     __end_of_Lcd_Print_Char:
 22853                           	opt stack 0
 22854                           tblptru	equ	0xFF8
 22855                           tblptrh	equ	0xFF7
 22856                           tblptrl	equ	0xFF6
 22857                           tablat	equ	0xFF5
 22858                           prodh	equ	0xFF4
 22859                           prodl	equ	0xFF3
 22860                           intcon	equ	0xFF2
 22861                           intcon2	equ	0xFF1
 22862                           postinc0	equ	0xFEE
 22863                           wreg	equ	0xFE8
 22864                           indf1	equ	0xFE7
 22865                           postdec1	equ	0xFE5
 22866                           fsr1h	equ	0xFE2
 22867                           fsr1l	equ	0xFE1
 22868                           indf2	equ	0xFDF
 22869                           postinc2	equ	0xFDE
 22870                           plusw2	equ	0xFDB
 22871                           fsr2h	equ	0xFDA
 22872                           fsr2l	equ	0xFD9
 22873                           status	equ	0xFD8
 22874                           
 22875 ;; *************** function ___lbmod *****************
 22876 ;; Defined at:
 22877 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbmod.c"
 22878 ;; Parameters:    Size  Location     Type
 22879 ;;  dividend        1    wreg     unsigned char 
 22880 ;;  divisor         1    0[BANK0 ] unsigned char 
 22881 ;; Auto vars:     Size  Location     Type
 22882 ;;  dividend        1    1[BANK0 ] unsigned char 
 22883 ;;  rem             1    3[BANK0 ] unsigned char 
 22884 ;;  counter         1    2[BANK0 ] unsigned char 
 22885 ;; Return value:  Size  Location     Type
 22886 ;;                  1    wreg      unsigned char 
 22887 ;; Registers used:
 22888 ;;		wreg, status,2, status,0
 22889 ;; Tracked objects:
 22890 ;;		On entry : 0/0
 22891 ;;		On exit  : 0/0
 22892 ;;		Unchanged: 0/0
 22893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22894 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22895 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22897 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22898 ;;Total ram usage:        4 bytes
 22899 ;; Hardware stack levels used:    1
 22900 ;; Hardware stack levels required when called:    5
 22901 ;; This function calls:
 22902 ;;		Nothing
 22903 ;; This function is called by:
 22904 ;;		_menu_lcd
 22905 ;;		_Function_A_1
 22906 ;;		_Function_A_2
 22907 ;;		_Function_A_3
 22908 ;;		_Function_A
 22909 ;;		_Function_B
 22910 ;;		_Function_C_1
 22911 ;;		_Function_C_2
 22912 ;;		_Function_C_3
 22913 ;;		_Function_C
 22914 ;;		_Function_D_1
 22915 ;;		_Function_D_3
 22916 ;;		_Function_D_4
 22917 ;;		_Function_D_5
 22918 ;;		_Function_D
 22919 ;;		_Function_E
 22920 ;;		_Function_G_1
 22921 ;;		_Function_G_2
 22922 ;;		_Function_G_4
 22923 ;;		_Function_G
 22924 ;;		_Function_H
 22925 ;;		_Function_H_4
 22926 ;;		_Function_H_5
 22927 ;;		_Function_H_6
 22928 ;;		_Function_H_8
 22929 ;;		_Function_H_9_1
 22930 ;;		_Function_H_9_2
 22931 ;;		_Function_H_9_3
 22932 ;;		_Function_H_9_4
 22933 ;;		_Function_H_9
 22934 ;; This function uses a non-reentrant model
 22935 ;;
 22936                           
 22937                           	psect	text68
 22938  009390                     __ptext68:
 22939                           	opt stack 0
 22940  009390                     ___lbmod:
 22941                           	opt stack 24
 22942                           
 22943                           ; BSR set to: 0
 22944                           ;incstack = 0
 22945                           ;___lbmod@dividend stored from wreg
 22946  009390  0100               	movlb	0	; () banked
 22947  009392  6F61               	movwf	___lbmod@dividend& (0+255),b
 22948  009394  0E08               	movlw	8
 22949  009396  0100               	movlb	0	; () banked
 22950  009398  6F62               	movwf	___lbmod@counter& (0+255),b
 22951  00939A  0E00               	movlw	0
 22952  00939C  6F63               	movwf	___lbmod@rem& (0+255),b
 22953  00939E                     
 22954                           ; BSR set to: 0
 22955                           
 22956                           ; BSR set to: 0
 22957  00939E  90D8               	bcf	status,0,c
 22958  0093A0  3561               	rlcf	___lbmod@dividend& (0+255),w,b
 22959  0093A2  3563               	rlcf	___lbmod@rem& (0+255),w,b
 22960  0093A4  6F63               	movwf	___lbmod@rem& (0+255),b
 22961                           
 22962                           ; BSR set to: 0
 22963  0093A6  90D8               	bcf	status,0,c
 22964  0093A8  3761               	rlcf	___lbmod@dividend& (0+255),f,b
 22965                           
 22966                           ; BSR set to: 0
 22967  0093AA  5160               	movf	___lbmod@divisor& (0+255),w,b
 22968  0093AC  5D63               	subwf	___lbmod@rem& (0+255),w,b
 22969  0093AE  A0D8               	btfss	status,0,c
 22970  0093B0  D002               	goto	l5767
 22971                           
 22972                           ; BSR set to: 0
 22973  0093B2  5160               	movf	___lbmod@divisor& (0+255),w,b
 22974  0093B4  5F63               	subwf	___lbmod@rem& (0+255),f,b
 22975  0093B6                     l5767:
 22976                           
 22977                           ; BSR set to: 0
 22978                           
 22979                           ; BSR set to: 0
 22980  0093B6  2F62               	decfsz	___lbmod@counter& (0+255),f,b
 22981  0093B8  D7F2               	goto	l5766
 22982                           
 22983                           ; BSR set to: 0
 22984                           
 22985                           ; BSR set to: 0
 22986  0093BA  5163               	movf	___lbmod@rem& (0+255),w,b
 22987  0093BC  0012               	return	
 22988  0093BE                     __end_of___lbmod:
 22989                           	opt stack 0
 22990                           tblptru	equ	0xFF8
 22991                           tblptrh	equ	0xFF7
 22992                           tblptrl	equ	0xFF6
 22993                           tablat	equ	0xFF5
 22994                           prodh	equ	0xFF4
 22995                           prodl	equ	0xFF3
 22996                           intcon	equ	0xFF2
 22997                           intcon2	equ	0xFF1
 22998                           postinc0	equ	0xFEE
 22999                           wreg	equ	0xFE8
 23000                           indf1	equ	0xFE7
 23001                           postdec1	equ	0xFE5
 23002                           fsr1h	equ	0xFE2
 23003                           fsr1l	equ	0xFE1
 23004                           indf2	equ	0xFDF
 23005                           postinc2	equ	0xFDE
 23006                           plusw2	equ	0xFDB
 23007                           fsr2h	equ	0xFDA
 23008                           fsr2l	equ	0xFD9
 23009                           status	equ	0xFD8
 23010                           
 23011 ;; *************** function _initializeSaveSlotsOnce *****************
 23012 ;; Defined at:
 23013 ;;		line 28 in file "eeprom.c"
 23014 ;; Parameters:    Size  Location     Type
 23015 ;;		None
 23016 ;; Auto vars:     Size  Location     Type
 23017 ;;  initializeSl    1   84[BANK0 ] unsigned char 
 23018 ;; Return value:  Size  Location     Type
 23019 ;;                  1    wreg      void 
 23020 ;; Registers used:
 23021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23022 ;; Tracked objects:
 23023 ;;		On entry : 0/0
 23024 ;;		On exit  : 0/0
 23025 ;;		Unchanged: 0/0
 23026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23030 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23031 ;;Total ram usage:        1 bytes
 23032 ;; Hardware stack levels used:    1
 23033 ;; Hardware stack levels required when called:    7
 23034 ;; This function calls:
 23035 ;;		_Busy_eep
 23036 ;;		_Read_b_eep
 23037 ;;		_Write_b_eep
 23038 ;;		_saveToEEPROM
 23039 ;; This function is called by:
 23040 ;;		_main
 23041 ;; This function uses a non-reentrant model
 23042 ;;
 23043                           
 23044                           	psect	text69
 23045  008F84                     __ptext69:
 23046                           	opt stack 0
 23047  008F84                     _initializeSaveSlotsOnce:
 23048                           	opt stack 23
 23049                           
 23050                           ;eeprom.c: 30: unsigned char initializeSlotsOnce = Read_b_eep(0x01);
 23051                           
 23052                           ; BSR set to: 0
 23053                           ;incstack = 0
 23054  008F84  0E00               	movlw	0
 23055  008F86  0100               	movlb	0	; () banked
 23056  008F88  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 23057  008F8A  0E01               	movlw	1
 23058  008F8C  6F60               	movwf	Read_b_eep@badd& (0+255),b
 23059  008F8E  ECF5  F04A         	call	_Read_b_eep	;wreg free
 23060  008F92  0100               	movlb	0	; () banked
 23061  008F94  6FB4               	movwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),b
 23062                           
 23063                           ; BSR set to: 0
 23064                           ;eeprom.c: 32: if (initializeSlotsOnce == 0x24) {
 23065  008F96  0E24               	movlw	36
 23066  008F98  19B4               	xorwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),w,b
 23067  008F9A  A4D8               	btfss	status,2,c
 23068  008F9C  0012               	return	
 23069                           
 23070                           ; BSR set to: 0
 23071                           ;eeprom.c: 33: saveToEEPROM(SLOT1);
 23072  008F9E  0E01               	movlw	1
 23073  008FA0  EC41  F027         	call	_saveToEEPROM
 23074                           
 23075                           ;eeprom.c: 34: saveToEEPROM(SLOT2);
 23076  008FA4  0E02               	movlw	2
 23077  008FA6  EC41  F027         	call	_saveToEEPROM
 23078                           
 23079                           ;eeprom.c: 35: saveToEEPROM(SLOT3);
 23080  008FAA  0E03               	movlw	3
 23081  008FAC  EC41  F027         	call	_saveToEEPROM
 23082                           
 23083                           ;eeprom.c: 36: saveToEEPROM(SLOT4);
 23084  008FB0  0E04               	movlw	4
 23085  008FB2  EC41  F027         	call	_saveToEEPROM
 23086                           
 23087                           ;eeprom.c: 37: (Busy_eep(), Write_b_eep(0x01,0x48));
 23088  008FB6  EC3C  F04B         	call	_Busy_eep	;wreg free
 23089  008FBA  0E00               	movlw	0
 23090  008FBC  0100               	movlb	0	; () banked
 23091  008FBE  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 23092  008FC0  0E01               	movlw	1
 23093  008FC2  6F60               	movwf	Write_b_eep@badd& (0+255),b
 23094  008FC4  0E48               	movlw	72
 23095  008FC6  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 23096  008FC8  ECE7  F047         	call	_Write_b_eep	;wreg free
 23097  008FCC  0012               	return	
 23098  008FCE                     __end_of_initializeSaveSlotsOnce:
 23099                           	opt stack 0
 23100                           tblptru	equ	0xFF8
 23101                           tblptrh	equ	0xFF7
 23102                           tblptrl	equ	0xFF6
 23103                           tablat	equ	0xFF5
 23104                           prodh	equ	0xFF4
 23105                           prodl	equ	0xFF3
 23106                           intcon	equ	0xFF2
 23107                           intcon2	equ	0xFF1
 23108                           postinc0	equ	0xFEE
 23109                           wreg	equ	0xFE8
 23110                           indf1	equ	0xFE7
 23111                           postdec1	equ	0xFE5
 23112                           fsr1h	equ	0xFE2
 23113                           fsr1l	equ	0xFE1
 23114                           indf2	equ	0xFDF
 23115                           postinc2	equ	0xFDE
 23116                           plusw2	equ	0xFDB
 23117                           fsr2h	equ	0xFDA
 23118                           fsr2l	equ	0xFD9
 23119                           status	equ	0xFD8
 23120                           
 23121 ;; *************** function _saveToEEPROM *****************
 23122 ;; Defined at:
 23123 ;;		line 194 in file "eeprom.c"
 23124 ;; Parameters:    Size  Location     Type
 23125 ;;  slotNumber      1    wreg     unsigned char 
 23126 ;; Auto vars:     Size  Location     Type
 23127 ;;  slotNumber      1   81[BANK0 ] unsigned char 
 23128 ;;  byte_count      2   82[BANK0 ] unsigned int 
 23129 ;;  to_save        75    4[BANK0 ] unsigned char [75]
 23130 ;;  baseAddress     2   79[BANK0 ] unsigned int 
 23131 ;; Return value:  Size  Location     Type
 23132 ;;                  1    wreg      void 
 23133 ;; Registers used:
 23134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23135 ;; Tracked objects:
 23136 ;;		On entry : 0/0
 23137 ;;		On exit  : 0/0
 23138 ;;		Unchanged: 0/0
 23139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23141 ;;      Locals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23143 ;;      Totals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23144 ;;Total ram usage:       80 bytes
 23145 ;; Hardware stack levels used:    1
 23146 ;; Hardware stack levels required when called:    6
 23147 ;; This function calls:
 23148 ;;		_Busy_eep
 23149 ;;		_Write_b_eep
 23150 ;; This function is called by:
 23151 ;;		_Function_G_1
 23152 ;;		_initializeSaveSlotsOnce
 23153 ;; This function uses a non-reentrant model
 23154 ;;
 23155                           
 23156                           	psect	text70
 23157  004E82                     __ptext70:
 23158                           	opt stack 0
 23159  004E82                     _saveToEEPROM:
 23160                           	opt stack 21
 23161                           
 23162                           ;incstack = 0
 23163                           ;saveToEEPROM@slotNumber stored from wreg
 23164  004E82  0100               	movlb	0	; () banked
 23165  004E84  6FB1               	movwf	saveToEEPROM@slotNumber& (0+255),b
 23166                           
 23167                           ;eeprom.c: 196: unsigned int baseAddress = 0;
 23168  004E86  0E00               	movlw	0
 23169  004E88  0100               	movlb	0	; () banked
 23170  004E8A  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23171  004E8C  0E00               	movlw	0
 23172  004E8E  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23173                           
 23174                           ; BSR set to: 0
 23175                           ;eeprom.c: 199: if (slotNumber == SLOT1) {baseAddress = 128;}
 23176  004E90  05B1               	decf	saveToEEPROM@slotNumber& (0+255),w,b
 23177  004E92  A4D8               	btfss	status,2,c
 23178  004E94  D004               	goto	l4288
 23179                           
 23180                           ; BSR set to: 0
 23181  004E96  0E00               	movlw	0
 23182  004E98  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23183  004E9A  0E80               	movlw	128
 23184  004E9C  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23185  004E9E                     l4288:
 23186                           
 23187                           ; BSR set to: 0
 23188                           ;eeprom.c: 200: if (slotNumber == SLOT2) {baseAddress = 256;}
 23189                           
 23190                           ; BSR set to: 0
 23191  004E9E  0E02               	movlw	2
 23192  004EA0  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 23193  004EA2  A4D8               	btfss	status,2,c
 23194  004EA4  D004               	goto	l4289
 23195                           
 23196                           ; BSR set to: 0
 23197  004EA6  0E01               	movlw	1
 23198  004EA8  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23199  004EAA  0E00               	movlw	0
 23200  004EAC  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23201  004EAE                     l4289:
 23202                           
 23203                           ; BSR set to: 0
 23204                           ;eeprom.c: 201: if (slotNumber == SLOT3) {baseAddress = 384;}
 23205                           
 23206                           ; BSR set to: 0
 23207  004EAE  0E03               	movlw	3
 23208  004EB0  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 23209  004EB2  A4D8               	btfss	status,2,c
 23210  004EB4  D004               	goto	l4290
 23211                           
 23212                           ; BSR set to: 0
 23213  004EB6  0E01               	movlw	1
 23214  004EB8  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23215  004EBA  0E80               	movlw	128
 23216  004EBC  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23217  004EBE                     l4290:
 23218                           
 23219                           ; BSR set to: 0
 23220                           ;eeprom.c: 202: if (slotNumber == SLOT4) {baseAddress = 512;}
 23221                           
 23222                           ; BSR set to: 0
 23223  004EBE  0E04               	movlw	4
 23224  004EC0  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 23225  004EC2  A4D8               	btfss	status,2,c
 23226  004EC4  D004               	goto	l4291
 23227                           
 23228                           ; BSR set to: 0
 23229  004EC6  0E02               	movlw	2
 23230  004EC8  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23231  004ECA  0E00               	movlw	0
 23232  004ECC  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23233  004ECE                     l4291:
 23234                           
 23235                           ; BSR set to: 0
 23236                           ;eeprom.c: 205: unsigned char to_save[75];
 23237                           ;eeprom.c: 210: to_save[0] = KEYBOARD_MODE;
 23238                           
 23239                           ; BSR set to: 0
 23240  004ECE  C0F2  F064         	movff	_KEYBOARD_MODE,saveToEEPROM@to_save
 23241                           
 23242                           ; BSR set to: 0
 23243                           ;eeprom.c: 211: to_save[1] = which_mode;
 23244  004ED2  C0F1  F065         	movff	_which_mode,saveToEEPROM@to_save+1
 23245                           
 23246                           ; BSR set to: 0
 23247                           ;eeprom.c: 212: to_save[2] = which_triad;
 23248  004ED6  C0F0  F066         	movff	_which_triad,saveToEEPROM@to_save+2
 23249                           
 23250                           ; BSR set to: 0
 23251                           ;eeprom.c: 213: to_save[3] = which_seventh;
 23252  004EDA  C0EF  F067         	movff	_which_seventh,saveToEEPROM@to_save+3
 23253                           
 23254                           ;eeprom.c: 216: to_save[4] = TRANSPOSE_MODE;
 23255  004EDE  0E00               	movlw	0
 23256  004EE0  BC35               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 23257  004EE2  0E01               	movlw	1
 23258  004EE4  6F68               	movwf	(saveToEEPROM@to_save+4)& (0+255),b
 23259                           
 23260                           ;eeprom.c: 219: to_save[5] = DRUM_MODE;
 23261  004EE6  0E00               	movlw	0
 23262  004EE8  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 23263  004EEA  0E01               	movlw	1
 23264  004EEC  6F69               	movwf	(saveToEEPROM@to_save+5)& (0+255),b
 23265                           
 23266                           ;eeprom.c: 220: to_save[6] = CONTROL_MODE;
 23267  004EEE  0E00               	movlw	0
 23268  004EF0  B832               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 23269  004EF2  0E01               	movlw	1
 23270  004EF4  6F6A               	movwf	(saveToEEPROM@to_save+6)& (0+255),b
 23271                           
 23272                           ; BSR set to: 0
 23273                           ;eeprom.c: 223: to_save[7] = DRUM_NOTE[0];
 23274  004EF6  C1DF  F06B         	movff	_DRUM_NOTE,saveToEEPROM@to_save+7
 23275                           
 23276                           ; BSR set to: 0
 23277                           ;eeprom.c: 224: to_save[8] = DRUM_NOTE[1];
 23278  004EFA  C1E0  F06C         	movff	_DRUM_NOTE+1,saveToEEPROM@to_save+8
 23279                           
 23280                           ; BSR set to: 0
 23281                           ;eeprom.c: 225: to_save[9] = DRUM_NOTE[2];
 23282  004EFE  C1E1  F06D         	movff	_DRUM_NOTE+2,saveToEEPROM@to_save+9
 23283                           
 23284                           ; BSR set to: 0
 23285                           ;eeprom.c: 226: to_save[10] = DRUM_NOTE[3];
 23286  004F02  C1E2  F06E         	movff	_DRUM_NOTE+3,saveToEEPROM@to_save+10
 23287                           
 23288                           ; BSR set to: 0
 23289                           ;eeprom.c: 227: to_save[11] = DRUM_NOTE[4];
 23290  004F06  C1E3  F06F         	movff	_DRUM_NOTE+4,saveToEEPROM@to_save+11
 23291                           
 23292                           ; BSR set to: 0
 23293                           ;eeprom.c: 228: to_save[12] = DRUM_NOTE[5];
 23294  004F0A  C1E4  F070         	movff	_DRUM_NOTE+5,saveToEEPROM@to_save+12
 23295                           
 23296                           ; BSR set to: 0
 23297                           ;eeprom.c: 229: to_save[13] = DRUM_NOTE[6];
 23298  004F0E  C1E5  F071         	movff	_DRUM_NOTE+6,saveToEEPROM@to_save+13
 23299                           
 23300                           ; BSR set to: 0
 23301                           ;eeprom.c: 230: to_save[14] = DRUM_NOTE[7];
 23302  004F12  C1E6  F072         	movff	_DRUM_NOTE+7,saveToEEPROM@to_save+14
 23303                           
 23304                           ; BSR set to: 0
 23305                           ;eeprom.c: 233: to_save[15] = DRUM_CC[0];
 23306  004F16  C1D7  F073         	movff	_DRUM_CC,saveToEEPROM@to_save+15
 23307                           
 23308                           ; BSR set to: 0
 23309                           ;eeprom.c: 234: to_save[16] = DRUM_CC[1];
 23310  004F1A  C1D8  F074         	movff	_DRUM_CC+1,saveToEEPROM@to_save+16
 23311                           
 23312                           ; BSR set to: 0
 23313                           ;eeprom.c: 235: to_save[17] = DRUM_CC[2];
 23314  004F1E  C1D9  F075         	movff	_DRUM_CC+2,saveToEEPROM@to_save+17
 23315                           
 23316                           ; BSR set to: 0
 23317                           ;eeprom.c: 236: to_save[18] = DRUM_CC[3];
 23318  004F22  C1DA  F076         	movff	_DRUM_CC+3,saveToEEPROM@to_save+18
 23319                           
 23320                           ; BSR set to: 0
 23321                           ;eeprom.c: 237: to_save[19] = DRUM_CC[4];
 23322  004F26  C1DB  F077         	movff	_DRUM_CC+4,saveToEEPROM@to_save+19
 23323                           
 23324                           ; BSR set to: 0
 23325                           ;eeprom.c: 238: to_save[20] = DRUM_CC[5];
 23326  004F2A  C1DC  F078         	movff	_DRUM_CC+5,saveToEEPROM@to_save+20
 23327                           
 23328                           ; BSR set to: 0
 23329                           ;eeprom.c: 239: to_save[21] = DRUM_CC[6];
 23330  004F2E  C1DD  F079         	movff	_DRUM_CC+6,saveToEEPROM@to_save+21
 23331                           
 23332                           ; BSR set to: 0
 23333                           ;eeprom.c: 240: to_save[22] = DRUM_CC[7];
 23334  004F32  C1DE  F07A         	movff	_DRUM_CC+7,saveToEEPROM@to_save+22
 23335                           
 23336                           ;eeprom.c: 243: to_save[23] = POT_MODE;
 23337  004F36  0E00               	movlw	0
 23338  004F38  B836               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 23339  004F3A  0E01               	movlw	1
 23340  004F3C  6F7B               	movwf	(saveToEEPROM@to_save+23)& (0+255),b
 23341                           
 23342                           ; BSR set to: 0
 23343                           ;eeprom.c: 246: to_save[24] = inputPotsArray[0].controller_number;
 23344  004F3E  C2AD  F07C         	movff	_inputPotsArray+1,saveToEEPROM@to_save+24
 23345                           
 23346                           ; BSR set to: 0
 23347                           ;eeprom.c: 247: to_save[25] = inputPotsArray[0].controller_number_two_byte;
 23348  004F42  C2AE  F07D         	movff	_inputPotsArray+2,saveToEEPROM@to_save+25
 23349                           
 23350                           ; BSR set to: 0
 23351                           ;eeprom.c: 249: to_save[26] = inputPotsArray[1].controller_number;
 23352  004F46  C2B0  F07E         	movff	_inputPotsArray+4,saveToEEPROM@to_save+26
 23353                           
 23354                           ; BSR set to: 0
 23355                           ;eeprom.c: 250: to_save[27] = inputPotsArray[1].controller_number_two_byte;
 23356  004F4A  C2B1  F07F         	movff	_inputPotsArray+5,saveToEEPROM@to_save+27
 23357                           
 23358                           ; BSR set to: 0
 23359                           ;eeprom.c: 252: to_save[28] = inputPotsArray[2].controller_number;
 23360  004F4E  C2B3  F080         	movff	_inputPotsArray+7,saveToEEPROM@to_save+28
 23361                           
 23362                           ; BSR set to: 0
 23363                           ;eeprom.c: 253: to_save[29] = inputPotsArray[2].controller_number_two_byte;
 23364  004F52  C2B4  F081         	movff	_inputPotsArray+8,saveToEEPROM@to_save+29
 23365                           
 23366                           ; BSR set to: 0
 23367                           ;eeprom.c: 255: to_save[30] = inputPotsArray[3].controller_number;
 23368  004F56  C2B6  F082         	movff	_inputPotsArray+10,saveToEEPROM@to_save+30
 23369                           
 23370                           ; BSR set to: 0
 23371                           ;eeprom.c: 256: to_save[31] = inputPotsArray[3].controller_number_two_byte;
 23372  004F5A  C2B7  F083         	movff	_inputPotsArray+11,saveToEEPROM@to_save+31
 23373                           
 23374                           ; BSR set to: 0
 23375                           ;eeprom.c: 258: to_save[32] = inputPotsArray[4].controller_number;
 23376  004F5E  C2B9  F084         	movff	_inputPotsArray+13,saveToEEPROM@to_save+32
 23377                           
 23378                           ; BSR set to: 0
 23379                           ;eeprom.c: 259: to_save[33] = inputPotsArray[4].controller_number_two_byte;
 23380  004F62  C2BA  F085         	movff	_inputPotsArray+14,saveToEEPROM@to_save+33
 23381                           
 23382                           ; BSR set to: 0
 23383                           ;eeprom.c: 261: to_save[34] = inputPotsArray[5].controller_number;
 23384  004F66  C2BC  F086         	movff	_inputPotsArray+16,saveToEEPROM@to_save+34
 23385                           
 23386                           ; BSR set to: 0
 23387                           ;eeprom.c: 262: to_save[35] = inputPotsArray[5].controller_number_two_byte;
 23388  004F6A  C2BD  F087         	movff	_inputPotsArray+17,saveToEEPROM@to_save+35
 23389                           
 23390                           ; BSR set to: 0
 23391                           ;eeprom.c: 264: to_save[36] = inputPotsArray[6].controller_number;
 23392  004F6E  C2BF  F088         	movff	_inputPotsArray+19,saveToEEPROM@to_save+36
 23393                           
 23394                           ; BSR set to: 0
 23395                           ;eeprom.c: 265: to_save[37] = inputPotsArray[6].controller_number_two_byte;
 23396  004F72  C2C0  F089         	movff	_inputPotsArray+20,saveToEEPROM@to_save+37
 23397                           
 23398                           ; BSR set to: 0
 23399                           ;eeprom.c: 269: to_save[38] = inputPotsArray[7].controller_number;
 23400  004F76  C2C2  F08A         	movff	_inputPotsArray+22,saveToEEPROM@to_save+38
 23401                           
 23402                           ; BSR set to: 0
 23403                           ;eeprom.c: 270: to_save[39] = inputPotsArray[7].controller_number_two_byte;
 23404  004F7A  C2C3  F08B         	movff	_inputPotsArray+23,saveToEEPROM@to_save+39
 23405                           
 23406                           ; BSR set to: 0
 23407                           ;eeprom.c: 272: to_save[40] = inputPotsArray[8].controller_number;
 23408  004F7E  C2C5  F08C         	movff	_inputPotsArray+25,saveToEEPROM@to_save+40
 23409                           
 23410                           ; BSR set to: 0
 23411                           ;eeprom.c: 273: to_save[41] = inputPotsArray[8].controller_number_two_byte;
 23412  004F82  C2C6  F08D         	movff	_inputPotsArray+26,saveToEEPROM@to_save+41
 23413                           
 23414                           ; BSR set to: 0
 23415                           ;eeprom.c: 275: to_save[42] = inputPotsArray[9].controller_number;
 23416  004F86  C2C8  F08E         	movff	_inputPotsArray+28,saveToEEPROM@to_save+42
 23417                           
 23418                           ; BSR set to: 0
 23419                           ;eeprom.c: 276: to_save[43] = inputPotsArray[9].controller_number_two_byte;
 23420  004F8A  C2C9  F08F         	movff	_inputPotsArray+29,saveToEEPROM@to_save+43
 23421                           
 23422                           ; BSR set to: 0
 23423                           ;eeprom.c: 278: to_save[44] = inputPotsArray[10].controller_number;
 23424  004F8E  C2CB  F090         	movff	_inputPotsArray+31,saveToEEPROM@to_save+44
 23425                           
 23426                           ; BSR set to: 0
 23427                           ;eeprom.c: 279: to_save[45] = inputPotsArray[10].controller_number_two_byte;
 23428  004F92  C2CC  F091         	movff	_inputPotsArray+32,saveToEEPROM@to_save+45
 23429                           
 23430                           ; BSR set to: 0
 23431                           ;eeprom.c: 281: to_save[46] = inputPotsArray[11].controller_number;
 23432  004F96  C2CE  F092         	movff	_inputPotsArray+34,saveToEEPROM@to_save+46
 23433                           
 23434                           ; BSR set to: 0
 23435                           ;eeprom.c: 282: to_save[47] = inputPotsArray[11].controller_number_two_byte;
 23436  004F9A  C2CF  F093         	movff	_inputPotsArray+35,saveToEEPROM@to_save+47
 23437                           
 23438                           ; BSR set to: 0
 23439                           ;eeprom.c: 284: to_save[48] = inputPotsArray[12].controller_number;
 23440  004F9E  C2D1  F094         	movff	_inputPotsArray+37,saveToEEPROM@to_save+48
 23441                           
 23442                           ; BSR set to: 0
 23443                           ;eeprom.c: 285: to_save[49] = inputPotsArray[12].controller_number_two_byte;
 23444  004FA2  C2D2  F095         	movff	_inputPotsArray+38,saveToEEPROM@to_save+49
 23445                           
 23446                           ; BSR set to: 0
 23447                           ;eeprom.c: 287: to_save[50] = inputPotsArray[13].controller_number;
 23448  004FA6  C2D4  F096         	movff	_inputPotsArray+40,saveToEEPROM@to_save+50
 23449                           
 23450                           ; BSR set to: 0
 23451                           ;eeprom.c: 288: to_save[51] = inputPotsArray[13].controller_number_two_byte;
 23452  004FAA  C2D5  F097         	movff	_inputPotsArray+41,saveToEEPROM@to_save+51
 23453                           
 23454                           ; BSR set to: 0
 23455                           ;eeprom.c: 290: to_save[52] = inputPotsArray[14].controller_number;
 23456  004FAE  C2D7  F098         	movff	_inputPotsArray+43,saveToEEPROM@to_save+52
 23457                           
 23458                           ; BSR set to: 0
 23459                           ;eeprom.c: 291: to_save[53] = inputPotsArray[14].controller_number_two_byte;
 23460  004FB2  C2D8  F099         	movff	_inputPotsArray+44,saveToEEPROM@to_save+53
 23461                           
 23462                           ; BSR set to: 0
 23463                           ;eeprom.c: 293: to_save[54] = inputPotsArray[15].controller_number;
 23464  004FB6  C2DA  F09A         	movff	_inputPotsArray+46,saveToEEPROM@to_save+54
 23465                           
 23466                           ; BSR set to: 0
 23467                           ;eeprom.c: 294: to_save[55] = inputPotsArray[15].controller_number_two_byte;
 23468  004FBA  C2DB  F09B         	movff	_inputPotsArray+47,saveToEEPROM@to_save+55
 23469                           
 23470                           ; BSR set to: 0
 23471                           ;eeprom.c: 298: to_save[56] = channel;
 23472  004FBE  C0F6  F09C         	movff	_channel,saveToEEPROM@to_save+56
 23473                           
 23474                           ; BSR set to: 0
 23475                           ;eeprom.c: 299: to_save[57] = drumchannel;
 23476  004FC2  C0FE  F09D         	movff	_drumchannel,saveToEEPROM@to_save+57
 23477                           
 23478                           ; BSR set to: 0
 23479                           ;eeprom.c: 302: to_save[58] = octave;
 23480  004FC6  C0FC  F09E         	movff	_octave,saveToEEPROM@to_save+58
 23481                           
 23482                           ; BSR set to: 0
 23483                           ;eeprom.c: 303: to_save[59] = semitone;
 23484  004FCA  C0F3  F09F         	movff	_semitone,saveToEEPROM@to_save+59
 23485                           
 23486                           ; BSR set to: 0
 23487                           ;eeprom.c: 306: to_save[60] = patch_number;
 23488  004FCE  C171  F0A0         	movff	_patch_number,saveToEEPROM@to_save+60
 23489                           
 23490                           ;eeprom.c: 309: to_save[61] = ARPEGGIO_ON;
 23491  004FD2  0E00               	movlw	0
 23492  004FD4  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 23493  004FD6  0E01               	movlw	1
 23494  004FD8  6FA1               	movwf	(saveToEEPROM@to_save+61)& (0+255),b
 23495                           
 23496                           ; BSR set to: 0
 23497                           ;eeprom.c: 310: to_save[62] = BPM;
 23498  004FDA  C0FF  F0A2         	movff	_BPM,saveToEEPROM@to_save+62
 23499                           
 23500                           ; BSR set to: 0
 23501                           ;eeprom.c: 311: to_save[63] = OCTAVES;
 23502  004FDE  C0F8  F0A3         	movff	_OCTAVES,saveToEEPROM@to_save+63
 23503                           
 23504                           ; BSR set to: 0
 23505                           ;eeprom.c: 312: to_save[64] = ARPEGGIO_TYPE;
 23506  004FE2  C0EA  F0A4         	movff	_ARPEGGIO_TYPE,saveToEEPROM@to_save+64
 23507                           
 23508                           ; BSR set to: 0
 23509                           ;eeprom.c: 313: to_save[65] = NOTE_LENGTH_PULSES;
 23510  004FE6  C0F7  F0A5         	movff	_NOTE_LENGTH_PULSES,saveToEEPROM@to_save+65
 23511                           
 23512                           ;eeprom.c: 314: to_save[66] = LATCH;
 23513  004FEA  0E00               	movlw	0
 23514  004FEC  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 23515  004FEE  0E01               	movlw	1
 23516  004FF0  6FA6               	movwf	(saveToEEPROM@to_save+66)& (0+255),b
 23517                           
 23518                           ;eeprom.c: 315: to_save[67] = AUTO_LATCH;
 23519  004FF2  0E00               	movlw	0
 23520  004FF4  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 23521  004FF6  0E01               	movlw	1
 23522  004FF8  6FA7               	movwf	(saveToEEPROM@to_save+67)& (0+255),b
 23523                           
 23524                           ;eeprom.c: 316: to_save[68] = UN_LATCH_MODE;
 23525  004FFA  0E00               	movlw	0
 23526  004FFC  B035               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23527  004FFE  0E01               	movlw	1
 23528  005000  6FA8               	movwf	(saveToEEPROM@to_save+68)& (0+255),b
 23529                           
 23530                           ;eeprom.c: 317: to_save[69] = AUTO_RANDOMIZE;
 23531  005002  0E00               	movlw	0
 23532  005004  BA34               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 23533  005006  0E01               	movlw	1
 23534  005008  6FA9               	movwf	(saveToEEPROM@to_save+69)& (0+255),b
 23535                           
 23536                           ;eeprom.c: 318: to_save[70] = skipFirstLast;
 23537  00500A  0E00               	movlw	0
 23538  00500C  B834               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 23539  00500E  0E01               	movlw	1
 23540  005010  6FAA               	movwf	(saveToEEPROM@to_save+70)& (0+255),b
 23541                           
 23542                           ;eeprom.c: 319: to_save[71] = LAST_NOTE_MODE_KEY_PRESS;
 23543  005012  0E00               	movlw	0
 23544  005014  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 23545  005016  0E01               	movlw	1
 23546  005018  6FAB               	movwf	(saveToEEPROM@to_save+71)& (0+255),b
 23547                           
 23548                           ;eeprom.c: 320: to_save[72] = LAST_NOTE_MODE_KEY_RELEASE;
 23549  00501A  0E00               	movlw	0
 23550  00501C  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 23551  00501E  0E01               	movlw	1
 23552  005020  6FAC               	movwf	(saveToEEPROM@to_save+72)& (0+255),b
 23553                           
 23554                           ;eeprom.c: 321: to_save[73] = LAST_NOTE_MODE_TRANSPOSE;
 23555  005022  0E00               	movlw	0
 23556  005024  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 23557  005026  0E01               	movlw	1
 23558  005028  6FAD               	movwf	(saveToEEPROM@to_save+73)& (0+255),b
 23559                           
 23560                           ;eeprom.c: 322: to_save[74] = LAST_NOTE_MODE_RESET;
 23561  00502A  0E00               	movlw	0
 23562  00502C  BE33               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 23563  00502E  0E01               	movlw	1
 23564  005030  6FAE               	movwf	(saveToEEPROM@to_save+74)& (0+255),b
 23565                           
 23566                           ;eeprom.c: 325: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 23567  005032  0E00               	movlw	0
 23568  005034  6FB3               	movwf	(saveToEEPROM@byte_count+1)& (0+255),b
 23569  005036  0E00               	movlw	0
 23570  005038  6FB2               	movwf	saveToEEPROM@byte_count& (0+255),b
 23571  00503A                     l19061:
 23572                           
 23573                           ; BSR set to: 0
 23574  00503A  51B3               	movf	(saveToEEPROM@byte_count+1)& (0+255),w,b
 23575  00503C  E11B               	bnz	l4294
 23576  00503E  0E4B               	movlw	75
 23577  005040  5DB2               	subwf	saveToEEPROM@byte_count& (0+255),w,b
 23578  005042  B0D8               	btfsc	status,0,c
 23579  005044  0012               	return	
 23580                           
 23581                           ; BSR set to: 0
 23582                           ;eeprom.c: 326: (Busy_eep(), Write_b_eep((byte_count + baseAddress),to_save[byte_count])
      +                          );
 23583                           
 23584                           ; BSR set to: 0
 23585                           
 23586                           ; BSR set to: 0
 23587  005046  EC3C  F04B         	call	_Busy_eep	;wreg free
 23588  00504A  0100               	movlb	0	; () banked
 23589  00504C  51AF               	movf	saveToEEPROM@baseAddress& (0+255),w,b
 23590  00504E  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 23591  005050  6F60               	movwf	Write_b_eep@badd& (0+255),b
 23592  005052  51B0               	movf	(saveToEEPROM@baseAddress+1)& (0+255),w,b
 23593  005054  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 23594  005056  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 23595  005058  0E64               	movlw	low saveToEEPROM@to_save
 23596  00505A  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 23597  00505C  6ED9               	movwf	fsr2l,c
 23598  00505E  0E00               	movlw	high saveToEEPROM@to_save
 23599  005060  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 23600  005062  6EDA               	movwf	fsr2h,c
 23601  005064  50DF               	movf	indf2,w,c
 23602  005066  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 23603  005068  ECE7  F047         	call	_Write_b_eep	;wreg free
 23604  00506C  0100               	movlb	0	; () banked
 23605  00506E  4BB2               	infsnz	saveToEEPROM@byte_count& (0+255),f,b
 23606  005070  2BB3               	incf	(saveToEEPROM@byte_count+1)& (0+255),f,b
 23607  005072  D7E3               	goto	l19061
 23608  005074                     l4294:
 23609                           
 23610                           ; BSR set to: 0
 23611  005074  0012               	return		;funcret
 23612  005076                     __end_of_saveToEEPROM:
 23613                           	opt stack 0
 23614                           tblptru	equ	0xFF8
 23615                           tblptrh	equ	0xFF7
 23616                           tblptrl	equ	0xFF6
 23617                           tablat	equ	0xFF5
 23618                           prodh	equ	0xFF4
 23619                           prodl	equ	0xFF3
 23620                           intcon	equ	0xFF2
 23621                           intcon2	equ	0xFF1
 23622                           postinc0	equ	0xFEE
 23623                           wreg	equ	0xFE8
 23624                           indf1	equ	0xFE7
 23625                           postdec1	equ	0xFE5
 23626                           fsr1h	equ	0xFE2
 23627                           fsr1l	equ	0xFE1
 23628                           indf2	equ	0xFDF
 23629                           postinc2	equ	0xFDE
 23630                           plusw2	equ	0xFDB
 23631                           fsr2h	equ	0xFDA
 23632                           fsr2l	equ	0xFD9
 23633                           status	equ	0xFD8
 23634                           
 23635 ;; *************** function _Write_b_eep *****************
 23636 ;; Defined at:
 23637 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\write_B.c"
 23638 ;; Parameters:    Size  Location     Type
 23639 ;;  badd            2    0[BANK0 ] unsigned int 
 23640 ;;  bdat            1    2[BANK0 ] unsigned char 
 23641 ;; Auto vars:     Size  Location     Type
 23642 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 23643 ;; Return value:  Size  Location     Type
 23644 ;;                  1    wreg      void 
 23645 ;; Registers used:
 23646 ;;		wreg, status,2, status,0
 23647 ;; Tracked objects:
 23648 ;;		On entry : 0/0
 23649 ;;		On exit  : 0/0
 23650 ;;		Unchanged: 0/0
 23651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23652 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23653 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23655 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23656 ;;Total ram usage:        4 bytes
 23657 ;; Hardware stack levels used:    1
 23658 ;; Hardware stack levels required when called:    5
 23659 ;; This function calls:
 23660 ;;		Nothing
 23661 ;; This function is called by:
 23662 ;;		_Function_D_2
 23663 ;;		_Function_G_1
 23664 ;;		_Function_G_2
 23665 ;;		_Function_G_3
 23666 ;;		_Function_G_4
 23667 ;;		_initializeSaveSlotsOnce
 23668 ;;		_saveToEEPROM
 23669 ;; This function uses a non-reentrant model
 23670 ;;
 23671                           
 23672                           	psect	text71
 23673  008FCE                     __ptext71:
 23674                           	opt stack 0
 23675  008FCE                     _Write_b_eep:
 23676                           	opt stack 22
 23677                           
 23678                           ; BSR set to: 0
 23679                           ;incstack = 0
 23680  008FCE  0E00               	movlw	0
 23681  008FD0  0100               	movlb	0	; () banked
 23682  008FD2  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 23683                           
 23684                           ; BSR set to: 0
 23685  008FD4  5161               	movf	(Write_b_eep@badd+1)& (0+255),w,b
 23686  008FD6  0B03               	andlw	3
 23687  008FD8  6EAA               	movwf	4010,c	;volatile
 23688                           
 23689                           ; BSR set to: 0
 23690  008FDA  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 23691                           
 23692                           ; BSR set to: 0
 23693  008FDE  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 23694                           
 23695                           ; BSR set to: 0
 23696  008FE2  9EA6               	bcf	4006,7,c	;volsfr
 23697                           
 23698                           ; BSR set to: 0
 23699  008FE4  9CA6               	bcf	4006,6,c	;volsfr
 23700                           
 23701                           ; BSR set to: 0
 23702  008FE6  84A6               	bsf	4006,2,c	;volsfr
 23703                           
 23704                           ; BSR set to: 0
 23705  008FE8  0E00               	movlw	0
 23706  008FEA  BEF2               	btfsc	intcon,7,c	;volatile
 23707  008FEC  0E01               	movlw	1
 23708  008FEE  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 23709                           
 23710                           ; BSR set to: 0
 23711  008FF0  9EF2               	bcf	intcon,7,c	;volatile
 23712                           
 23713                           ; BSR set to: 0
 23714  008FF2  0E55               	movlw	85
 23715  008FF4  6EA7               	movwf	4007,c	;volsfr
 23716                           
 23717                           ; BSR set to: 0
 23718  008FF6  0EAA               	movlw	170
 23719  008FF8  6EA7               	movwf	4007,c	;volsfr
 23720                           
 23721                           ; BSR set to: 0
 23722  008FFA  82A6               	bsf	4006,1,c	;volsfr
 23723  008FFC                     
 23724                           ; BSR set to: 0
 23725  008FFC  B2A6               	btfsc	4006,1,c	;volsfr
 23726  008FFE  D7FE               	goto	l5425
 23727  009000  0100               	movlb	0	; () banked
 23728  009002  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 23729  009004  D002               	bra	u28665
 23730  009006  9EF2               	bcf	intcon,7,c	;volatile
 23731  009008  D001               	bra	u28666
 23732  00900A                     u28665:
 23733  00900A  8EF2               	bsf	intcon,7,c	;volatile
 23734  00900C                     u28666:
 23735  00900C  94A6               	bcf	4006,2,c	;volsfr
 23736  00900E  0012               	return		;funcret
 23737  009010                     __end_of_Write_b_eep:
 23738                           	opt stack 0
 23739                           tblptru	equ	0xFF8
 23740                           tblptrh	equ	0xFF7
 23741                           tblptrl	equ	0xFF6
 23742                           tablat	equ	0xFF5
 23743                           prodh	equ	0xFF4
 23744                           prodl	equ	0xFF3
 23745                           intcon	equ	0xFF2
 23746                           intcon2	equ	0xFF1
 23747                           postinc0	equ	0xFEE
 23748                           wreg	equ	0xFE8
 23749                           indf1	equ	0xFE7
 23750                           postdec1	equ	0xFE5
 23751                           fsr1h	equ	0xFE2
 23752                           fsr1l	equ	0xFE1
 23753                           indf2	equ	0xFDF
 23754                           postinc2	equ	0xFDE
 23755                           plusw2	equ	0xFDB
 23756                           fsr2h	equ	0xFDA
 23757                           fsr2l	equ	0xFD9
 23758                           status	equ	0xFD8
 23759                           
 23760 ;; *************** function _Busy_eep *****************
 23761 ;; Defined at:
 23762 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\busy_eep.c"
 23763 ;; Parameters:    Size  Location     Type
 23764 ;;		None
 23765 ;; Auto vars:     Size  Location     Type
 23766 ;;		None
 23767 ;; Return value:  Size  Location     Type
 23768 ;;                  1    wreg      void 
 23769 ;; Registers used:
 23770 ;;		None
 23771 ;; Tracked objects:
 23772 ;;		On entry : 0/0
 23773 ;;		On exit  : 0/0
 23774 ;;		Unchanged: 0/0
 23775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23780 ;;Total ram usage:        0 bytes
 23781 ;; Hardware stack levels used:    1
 23782 ;; Hardware stack levels required when called:    5
 23783 ;; This function calls:
 23784 ;;		Nothing
 23785 ;; This function is called by:
 23786 ;;		_Function_D_2
 23787 ;;		_Function_G_1
 23788 ;;		_Function_G_2
 23789 ;;		_Function_G_3
 23790 ;;		_Function_G_4
 23791 ;;		_initializeSaveSlotsOnce
 23792 ;;		_saveToEEPROM
 23793 ;; This function uses a non-reentrant model
 23794 ;;
 23795                           
 23796                           	psect	text72
 23797  009678                     __ptext72:
 23798                           	opt stack 0
 23799  009678                     _Busy_eep:
 23800                           	opt stack 22
 23801                           
 23802                           ;incstack = 0
 23803  009678  B2A6               	btfsc	4006,1,c	;volsfr
 23804  00967A  D7FE               	goto	_Busy_eep
 23805  00967C  0012               	return	
 23806  00967E                     __end_of_Busy_eep:
 23807                           	opt stack 0
 23808                           tblptru	equ	0xFF8
 23809                           tblptrh	equ	0xFF7
 23810                           tblptrl	equ	0xFF6
 23811                           tablat	equ	0xFF5
 23812                           prodh	equ	0xFF4
 23813                           prodl	equ	0xFF3
 23814                           intcon	equ	0xFF2
 23815                           intcon2	equ	0xFF1
 23816                           postinc0	equ	0xFEE
 23817                           wreg	equ	0xFE8
 23818                           indf1	equ	0xFE7
 23819                           postdec1	equ	0xFE5
 23820                           fsr1h	equ	0xFE2
 23821                           fsr1l	equ	0xFE1
 23822                           indf2	equ	0xFDF
 23823                           postinc2	equ	0xFDE
 23824                           plusw2	equ	0xFDB
 23825                           fsr2h	equ	0xFDA
 23826                           fsr2l	equ	0xFD9
 23827                           status	equ	0xFD8
 23828                           
 23829 ;; *************** function _Read_b_eep *****************
 23830 ;; Defined at:
 23831 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\read_B.c"
 23832 ;; Parameters:    Size  Location     Type
 23833 ;;  badd            2    0[BANK0 ] unsigned int 
 23834 ;; Auto vars:     Size  Location     Type
 23835 ;;		None
 23836 ;; Return value:  Size  Location     Type
 23837 ;;                  1    wreg      unsigned char 
 23838 ;; Registers used:
 23839 ;;		wreg, status,2, status,0
 23840 ;; Tracked objects:
 23841 ;;		On entry : 0/0
 23842 ;;		On exit  : 0/0
 23843 ;;		Unchanged: 0/0
 23844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23845 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23849 ;;Total ram usage:        2 bytes
 23850 ;; Hardware stack levels used:    1
 23851 ;; Hardware stack levels required when called:    5
 23852 ;; This function calls:
 23853 ;;		Nothing
 23854 ;; This function is called by:
 23855 ;;		_initializeSaveSlotsOnce
 23856 ;;		_selectSlotOnBoot
 23857 ;;		_loadFromEEPROM
 23858 ;;		_main
 23859 ;; This function uses a non-reentrant model
 23860 ;;
 23861                           
 23862                           	psect	text73
 23863  0095EA                     __ptext73:
 23864                           	opt stack 0
 23865  0095EA                     _Read_b_eep:
 23866                           	opt stack 23
 23867                           
 23868                           ;incstack = 0
 23869  0095EA  0100               	movlb	0	; () banked
 23870  0095EC  5161               	movf	(Read_b_eep@badd+1)& (0+255),w,b
 23871  0095EE  0B03               	andlw	3
 23872  0095F0  6EAA               	movwf	4010,c	;volatile
 23873                           
 23874                           ; BSR set to: 0
 23875  0095F2  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 23876                           
 23877                           ; BSR set to: 0
 23878  0095F6  9CA6               	bcf	4006,6,c	;volsfr
 23879                           
 23880                           ; BSR set to: 0
 23881  0095F8  9EA6               	bcf	4006,7,c	;volsfr
 23882                           
 23883                           ; BSR set to: 0
 23884  0095FA  80A6               	bsf	4006,0,c	;volsfr
 23885                           
 23886                           ; BSR set to: 0
 23887  0095FC  F000               	nop	
 23888  0095FE  F000               	nop	
 23889  009600  50A8               	movf	4008,w,c	;volatile
 23890  009602  0012               	return	
 23891  009604                     __end_of_Read_b_eep:
 23892                           	opt stack 0
 23893                           tblptru	equ	0xFF8
 23894                           tblptrh	equ	0xFF7
 23895                           tblptrl	equ	0xFF6
 23896                           tablat	equ	0xFF5
 23897                           prodh	equ	0xFF4
 23898                           prodl	equ	0xFF3
 23899                           intcon	equ	0xFF2
 23900                           intcon2	equ	0xFF1
 23901                           postinc0	equ	0xFEE
 23902                           wreg	equ	0xFE8
 23903                           indf1	equ	0xFE7
 23904                           postdec1	equ	0xFE5
 23905                           fsr1h	equ	0xFE2
 23906                           fsr1l	equ	0xFE1
 23907                           indf2	equ	0xFDF
 23908                           postinc2	equ	0xFDE
 23909                           plusw2	equ	0xFDB
 23910                           fsr2h	equ	0xFDA
 23911                           fsr2l	equ	0xFD9
 23912                           status	equ	0xFD8
 23913                           
 23914 ;; *************** function _initializeMenuArray *****************
 23915 ;; Defined at:
 23916 ;;		line 27 in file "menu.c"
 23917 ;; Parameters:    Size  Location     Type
 23918 ;;		None
 23919 ;; Auto vars:     Size  Location     Type
 23920 ;;  i               1   12[BANK0 ] unsigned char 
 23921 ;;  NumberOfElem    1   11[BANK0 ] unsigned char 
 23922 ;; Return value:  Size  Location     Type
 23923 ;;                  1    wreg      void 
 23924 ;; Registers used:
 23925 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23926 ;; Tracked objects:
 23927 ;;		On entry : 0/0
 23928 ;;		On exit  : 0/0
 23929 ;;		Unchanged: 0/0
 23930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23932 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23934 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23935 ;;Total ram usage:        3 bytes
 23936 ;; Hardware stack levels used:    1
 23937 ;; Hardware stack levels required when called:    6
 23938 ;; This function calls:
 23939 ;;		___wmul
 23940 ;; This function is called by:
 23941 ;;		_main
 23942 ;; This function uses a non-reentrant model
 23943 ;;
 23944                           
 23945                           	psect	text74
 23946  004C80                     __ptext74:
 23947                           	opt stack 0
 23948  004C80                     _initializeMenuArray:
 23949                           	opt stack 24
 23950                           
 23951                           ;menu.c: 30: unsigned char NumberOfElements = sizeof(menuArray)/sizeof(menuArray[0]);
 23952                           
 23953                           ;incstack = 0
 23954  004C80  0E23               	movlw	35
 23955  004C82  0100               	movlb	0	; () banked
 23956  004C84  6F6B               	movwf	initializeMenuArray@NumberOfElements& (0+255),b
 23957                           
 23958                           ;menu.c: 33: for(unsigned char i = 1;i<NumberOfElements;i++) {
 23959  004C86  0E01               	movlw	1
 23960  004C88  6F6C               	movwf	initializeMenuArray@i& (0+255),b
 23961  004C8A  D03C               	goto	l3328
 23962  004C8C                     
 23963                           ; BSR set to: 0
 23964                           ;menu.c: 34: menuArray[i].address = menuArray[i-1].address + menuArray[i-1].number;
 23965                           
 23966                           ; BSR set to: 0
 23967  004C8C  516C               	movf	initializeMenuArray@i& (0+255),w,b
 23968  004C8E  0D03               	mullw	3
 23969  004C90  0E01               	movlw	1
 23970  004C92  26F3               	addwf	prodl,f,c
 23971  004C94  0E00               	movlw	0
 23972  004C96  22F4               	addwfc	prodh,f,c
 23973  004C98  0E00               	movlw	low _menuArray
 23974  004C9A  24F3               	addwf	prodl,w,c
 23975  004C9C  6ED9               	movwf	fsr2l,c
 23976  004C9E  0E03               	movlw	high _menuArray
 23977  004CA0  20F4               	addwfc	prodh,w,c
 23978  004CA2  6EDA               	movwf	fsr2h,c
 23979  004CA4  0EFF               	movlw	255
 23980  004CA6  256C               	addwf	initializeMenuArray@i& (0+255),w,b
 23981  004CA8  6F64               	movwf	___wmul@multiplier& (0+255),b
 23982  004CAA  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 23983  004CAC  0EFF               	movlw	255
 23984  004CAE  2365               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 23985  004CB0  0E00               	movlw	0
 23986  004CB2  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23987  004CB4  0E03               	movlw	3
 23988  004CB6  6F66               	movwf	___wmul@multiplicand& (0+255),b
 23989  004CB8  EC71  F04A         	call	___wmul	;wreg free
 23990  004CBC  0E00               	movlw	low _menuArray
 23991  004CBE  0100               	movlb	0	; () banked
 23992  004CC0  2564               	addwf	?___wmul& (0+255),w,b
 23993  004CC2  6EE1               	movwf	fsr1l,c
 23994  004CC4  0E03               	movlw	high _menuArray
 23995  004CC6  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 23996  004CC8  6EE2               	movwf	fsr1h,c
 23997  004CCA  50E7               	movf	indf1,w,c
 23998  004CCC  6F6A               	movwf	??_initializeMenuArray& (0+255),b
 23999  004CCE  0EFF               	movlw	255
 24000  004CD0  256C               	addwf	initializeMenuArray@i& (0+255),w,b
 24001  004CD2  6F64               	movwf	___wmul@multiplier& (0+255),b
 24002  004CD4  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 24003  004CD6  0EFF               	movlw	255
 24004  004CD8  2365               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 24005  004CDA  0E00               	movlw	0
 24006  004CDC  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24007  004CDE  0E03               	movlw	3
 24008  004CE0  6F66               	movwf	___wmul@multiplicand& (0+255),b
 24009  004CE2  EC71  F04A         	call	___wmul	;wreg free
 24010  004CE6  0E01               	movlw	1
 24011  004CE8  0100               	movlb	0	; () banked
 24012  004CEA  2764               	addwf	?___wmul& (0+255),f,b
 24013  004CEC  0E00               	movlw	0
 24014  004CEE  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 24015  004CF0  0E00               	movlw	low _menuArray
 24016  004CF2  2564               	addwf	?___wmul& (0+255),w,b
 24017  004CF4  6EE1               	movwf	fsr1l,c
 24018  004CF6  0E03               	movlw	high _menuArray
 24019  004CF8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 24020  004CFA  6EE2               	movwf	fsr1h,c
 24021  004CFC  50E7               	movf	indf1,w,c
 24022  004CFE  256A               	addwf	??_initializeMenuArray& (0+255),w,b
 24023  004D00  6EDF               	movwf	indf2,c
 24024                           
 24025                           ; BSR set to: 0
 24026  004D02  2B6C               	incf	initializeMenuArray@i& (0+255),f,b
 24027  004D04                     l3328:
 24028                           
 24029                           ; BSR set to: 0
 24030                           
 24031                           ; BSR set to: 0
 24032  004D04  516B               	movf	initializeMenuArray@NumberOfElements& (0+255),w,b
 24033  004D06  5D6C               	subwf	initializeMenuArray@i& (0+255),w,b
 24034  004D08  A0D8               	btfss	status,0,c
 24035  004D0A  D7C0               	goto	l3329
 24036                           
 24037                           ; BSR set to: 0
 24038                           ;menu.c: 35: }
 24039                           ;menu.c: 38: mainMenu = menuArray[0];
 24040  004D0C  C300  F168         	movff	_menuArray,_mainMenu
 24041  004D10  C301  F169         	movff	_menuArray+1,_mainMenu+1
 24042  004D14  C302  F16A         	movff	_menuArray+2,_mainMenu+2
 24043                           
 24044                           ;menu.c: 39: keyboardMenu = menuArray[1];
 24045  004D18  C303  F04A         	movff	_menuArray+3,_keyboardMenu
 24046  004D1C  C304  F04B         	movff	_menuArray+4,_keyboardMenu+1
 24047  004D20  C305  F04C         	movff	_menuArray+5,_keyboardMenu+2
 24048                           
 24049                           ;menu.c: 40: modeMenu = menuArray[2];
 24050  004D24  C306  F047         	movff	_menuArray+6,_modeMenu
 24051  004D28  C307  F048         	movff	_menuArray+7,_modeMenu+1
 24052  004D2C  C308  F049         	movff	_menuArray+8,_modeMenu+2
 24053                           
 24054                           ;menu.c: 41: triadMenu = menuArray[3];
 24055  004D30  C309  F044         	movff	_menuArray+9,_triadMenu
 24056  004D34  C30A  F045         	movff	_menuArray+10,_triadMenu+1
 24057  004D38  C30B  F046         	movff	_menuArray+11,_triadMenu+2
 24058                           
 24059                           ;menu.c: 42: seventhMenu = menuArray[4];
 24060  004D3C  C30C  F165         	movff	_menuArray+12,_seventhMenu
 24061  004D40  C30D  F166         	movff	_menuArray+13,_seventhMenu+1
 24062  004D44  C30E  F167         	movff	_menuArray+14,_seventhMenu+2
 24063                           
 24064                           ;menu.c: 43: transposeMenu = menuArray[5];
 24065  004D48  C30F  F162         	movff	_menuArray+15,_transposeMenu
 24066  004D4C  C310  F163         	movff	_menuArray+16,_transposeMenu+1
 24067  004D50  C311  F164         	movff	_menuArray+17,_transposeMenu+2
 24068                           
 24069                           ;menu.c: 44: drumMenu = menuArray[6];
 24070  004D54  C312  F041         	movff	_menuArray+18,_drumMenu
 24071  004D58  C313  F042         	movff	_menuArray+19,_drumMenu+1
 24072  004D5C  C314  F043         	movff	_menuArray+20,_drumMenu+2
 24073                           
 24074                           ;menu.c: 45: drumCCTypeMenu = menuArray[7];
 24075  004D60  C315  F15F         	movff	_menuArray+21,_drumCCTypeMenu
 24076  004D64  C316  F160         	movff	_menuArray+22,_drumCCTypeMenu+1
 24077  004D68  C317  F161         	movff	_menuArray+23,_drumCCTypeMenu+2
 24078                           
 24079                           ;menu.c: 46: drumNNMenu = menuArray[8];
 24080  004D6C  C318  F15C         	movff	_menuArray+24,_drumNNMenu
 24081  004D70  C319  F15D         	movff	_menuArray+25,_drumNNMenu+1
 24082  004D74  C31A  F15E         	movff	_menuArray+26,_drumNNMenu+2
 24083                           
 24084                           ;menu.c: 47: drumCCMenu = menuArray[9];
 24085  004D78  C31B  F159         	movff	_menuArray+27,_drumCCMenu
 24086  004D7C  C31C  F15A         	movff	_menuArray+28,_drumCCMenu+1
 24087  004D80  C31D  F15B         	movff	_menuArray+29,_drumCCMenu+2
 24088                           
 24089                           ;menu.c: 48: potsMenu = menuArray[10];
 24090  004D84  C31E  F03E         	movff	_menuArray+30,_potsMenu
 24091  004D88  C31F  F03F         	movff	_menuArray+31,_potsMenu+1
 24092  004D8C  C320  F040         	movff	_menuArray+32,_potsMenu+2
 24093                           
 24094                           ;menu.c: 49: potsResoMenu = menuArray[11];
 24095  004D90  C321  F156         	movff	_menuArray+33,_potsResoMenu
 24096  004D94  C322  F157         	movff	_menuArray+34,_potsResoMenu+1
 24097  004D98  C323  F158         	movff	_menuArray+35,_potsResoMenu+2
 24098                           
 24099                           ;menu.c: 50: potsCCMenu = menuArray[12];
 24100  004D9C  C324  F150         	movff	_menuArray+36,_potsCCMenu
 24101  004DA0  C325  F151         	movff	_menuArray+37,_potsCCMenu+1
 24102  004DA4  C326  F152         	movff	_menuArray+38,_potsCCMenu+2
 24103                           
 24104                           ;menu.c: 51: slidepotsCCMenu = menuArray[13];
 24105  004DA8  C327  F14D         	movff	_menuArray+39,_slidepotsCCMenu
 24106  004DAC  C328  F14E         	movff	_menuArray+40,_slidepotsCCMenu+1
 24107  004DB0  C329  F14F         	movff	_menuArray+41,_slidepotsCCMenu+2
 24108                           
 24109                           ;menu.c: 52: joystickCCMenu = menuArray[14];
 24110  004DB4  C32A  F14A         	movff	_menuArray+42,_joystickCCMenu
 24111  004DB8  C32B  F14B         	movff	_menuArray+43,_joystickCCMenu+1
 24112  004DBC  C32C  F14C         	movff	_menuArray+44,_joystickCCMenu+2
 24113                           
 24114                           ;menu.c: 53: midiChannelMenu = menuArray[15];
 24115  004DC0  C32D  F147         	movff	_menuArray+45,_midiChannelMenu
 24116  004DC4  C32E  F148         	movff	_menuArray+46,_midiChannelMenu+1
 24117  004DC8  C32F  F149         	movff	_menuArray+47,_midiChannelMenu+2
 24118                           
 24119                           ;menu.c: 54: eepromMenu = menuArray[16];
 24120  004DCC  C330  F13B         	movff	_menuArray+48,_eepromMenu
 24121  004DD0  C331  F13C         	movff	_menuArray+49,_eepromMenu+1
 24122  004DD4  C332  F13D         	movff	_menuArray+50,_eepromMenu+2
 24123                           
 24124                           ;menu.c: 55: savesMenu = menuArray[17];
 24125  004DD8  C333  F0DF         	movff	_menuArray+51,_savesMenu
 24126  004DDC  C334  F0E0         	movff	_menuArray+52,_savesMenu+1
 24127  004DE0  C335  F0E1         	movff	_menuArray+53,_savesMenu+2
 24128                           
 24129                           ;menu.c: 56: encoderPolarityMenu = menuArray[18];
 24130  004DE4  C336  F138         	movff	_menuArray+54,_encoderPolarityMenu
 24131  004DE8  C337  F139         	movff	_menuArray+55,_encoderPolarityMenu+1
 24132  004DEC  C338  F13A         	movff	_menuArray+56,_encoderPolarityMenu+2
 24133                           
 24134                           ;menu.c: 57: arpeggiatorMenu = menuArray[19];
 24135  004DF0  C339  F03B         	movff	_menuArray+57,_arpeggiatorMenu
 24136  004DF4  C33A  F03C         	movff	_menuArray+58,_arpeggiatorMenu+1
 24137  004DF8  C33B  F03D         	movff	_menuArray+59,_arpeggiatorMenu+2
 24138                           
 24139                           ;menu.c: 58: arpeggiatorOnOffMenu = menuArray[20];
 24140  004DFC  C33C  F135         	movff	_menuArray+60,_arpeggiatorOnOffMenu
 24141  004E00  C33D  F136         	movff	_menuArray+61,_arpeggiatorOnOffMenu+1
 24142  004E04  C33E  F137         	movff	_menuArray+62,_arpeggiatorOnOffMenu+2
 24143                           
 24144                           ;menu.c: 59: arpeggiatorTypeMenu = menuArray[21];
 24145  004E08  C33F  F12C         	movff	_menuArray+63,_arpeggiatorTypeMenu
 24146  004E0C  C340  F12D         	movff	_menuArray+64,_arpeggiatorTypeMenu+1
 24147  004E10  C341  F12E         	movff	_menuArray+65,_arpeggiatorTypeMenu+2
 24148                           
 24149                           ;menu.c: 60: arpeggiatorNoteLengthMenu = menuArray[22];
 24150  004E14  C342  F129         	movff	_menuArray+66,_arpeggiatorNoteLengthMenu
 24151  004E18  C343  F12A         	movff	_menuArray+67,_arpeggiatorNoteLengthMenu+1
 24152  004E1C  C344  F12B         	movff	_menuArray+68,_arpeggiatorNoteLengthMenu+2
 24153                           
 24154                           ;menu.c: 61: arpeggiatorLatchMenu = menuArray[23];
 24155  004E20  C345  F126         	movff	_menuArray+69,_arpeggiatorLatchMenu
 24156  004E24  C346  F127         	movff	_menuArray+70,_arpeggiatorLatchMenu+1
 24157  004E28  C347  F128         	movff	_menuArray+71,_arpeggiatorLatchMenu+2
 24158                           
 24159                           ;menu.c: 62: arpeggiatorLatchOnOffMenu = menuArray[24];
 24160  004E2C  C348  F123         	movff	_menuArray+72,_arpeggiatorLatchOnOffMenu
 24161  004E30  C349  F124         	movff	_menuArray+73,_arpeggiatorLatchOnOffMenu+1
 24162  004E34  C34A  F125         	movff	_menuArray+74,_arpeggiatorLatchOnOffMenu+2
 24163                           
 24164                           ;menu.c: 63: arpeggiatorAutoLatchOnOffMenu = menuArray[25];
 24165  004E38  C34B  F120         	movff	_menuArray+75,_arpeggiatorAutoLatchOnOffMenu
 24166  004E3C  C34C  F121         	movff	_menuArray+76,_arpeggiatorAutoLatchOnOffMenu+1
 24167  004E40  C34D  F122         	movff	_menuArray+77,_arpeggiatorAutoLatchOnOffMenu+2
 24168                           
 24169                           ;menu.c: 64: arpeggiatorUnLatchModeMenu = menuArray[26];
 24170  004E44  C34E  F11D         	movff	_menuArray+78,_arpeggiatorUnLatchModeMenu
 24171  004E48  C34F  F11E         	movff	_menuArray+79,_arpeggiatorUnLatchModeMenu+1
 24172  004E4C  C350  F11F         	movff	_menuArray+80,_arpeggiatorUnLatchModeMenu+2
 24173                           
 24174                           ;menu.c: 65: arpeggiatorRandomizeSkipMenu = menuArray[27];
 24175  004E50  C351  F11A         	movff	_menuArray+81,_arpeggiatorRandomizeSkipMenu
 24176  004E54  C352  F11B         	movff	_menuArray+82,_arpeggiatorRandomizeSkipMenu+1
 24177  004E58  C353  F11C         	movff	_menuArray+83,_arpeggiatorRandomizeSkipMenu+2
 24178                           
 24179                           ;menu.c: 66: arpeggiatorRandomizeTypeMenu = menuArray[28];
 24180  004E5C  C354  F117         	movff	_menuArray+84,_arpeggiatorRandomizeTypeMenu
 24181  004E60  C355  F118         	movff	_menuArray+85,_arpeggiatorRandomizeTypeMenu+1
 24182  004E64  C356  F119         	movff	_menuArray+86,_arpeggiatorRandomizeTypeMenu+2
 24183                           
 24184                           ;menu.c: 67: arpeggiatorSkipFirstLastMenu = menuArray[29];
 24185  004E68  C357  F114         	movff	_menuArray+87,_arpeggiatorSkipFirstLastMenu
 24186  004E6C  C358  F115         	movff	_menuArray+88,_arpeggiatorSkipFirstLastMenu+1
 24187  004E70  C359  F116         	movff	_menuArray+89,_arpeggiatorSkipFirstLastMenu+2
 24188                           
 24189                           ;menu.c: 68: arpeggiatorLastNoteModeMenu = menuArray[30];
 24190  004E74  C35A  F0DC         	movff	_menuArray+90,_arpeggiatorLastNoteModeMenu
 24191  004E78  C35B  F0DD         	movff	_menuArray+91,_arpeggiatorLastNoteModeMenu+1
 24192  004E7C  C35C  F0DE         	movff	_menuArray+92,_arpeggiatorLastNoteModeMenu+2
 24193                           
 24194                           ; BSR set to: 0
 24195  004E80  0012               	return		;funcret
 24196  004E82                     __end_of_initializeMenuArray:
 24197                           	opt stack 0
 24198                           tblptru	equ	0xFF8
 24199                           tblptrh	equ	0xFF7
 24200                           tblptrl	equ	0xFF6
 24201                           tablat	equ	0xFF5
 24202                           prodh	equ	0xFF4
 24203                           prodl	equ	0xFF3
 24204                           intcon	equ	0xFF2
 24205                           intcon2	equ	0xFF1
 24206                           postinc0	equ	0xFEE
 24207                           wreg	equ	0xFE8
 24208                           indf1	equ	0xFE7
 24209                           postdec1	equ	0xFE5
 24210                           fsr1h	equ	0xFE2
 24211                           fsr1l	equ	0xFE1
 24212                           indf2	equ	0xFDF
 24213                           postinc2	equ	0xFDE
 24214                           plusw2	equ	0xFDB
 24215                           fsr2h	equ	0xFDA
 24216                           fsr2l	equ	0xFD9
 24217                           status	equ	0xFD8
 24218                           
 24219 ;; *************** function _displayTest *****************
 24220 ;; Defined at:
 24221 ;;		line 31 in file "segment.c"
 24222 ;; Parameters:    Size  Location     Type
 24223 ;;		None
 24224 ;; Auto vars:     Size  Location     Type
 24225 ;;		None
 24226 ;; Return value:  Size  Location     Type
 24227 ;;                  1    wreg      void 
 24228 ;; Registers used:
 24229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24230 ;; Tracked objects:
 24231 ;;		On entry : 0/0
 24232 ;;		On exit  : 0/0
 24233 ;;		Unchanged: 0/0
 24234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24237 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24238 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24239 ;;Total ram usage:        2 bytes
 24240 ;; Hardware stack levels used:    1
 24241 ;; Hardware stack levels required when called:    6
 24242 ;; This function calls:
 24243 ;;		_strcpy
 24244 ;; This function is called by:
 24245 ;;		_main
 24246 ;; This function uses a non-reentrant model
 24247 ;;
 24248                           
 24249                           	psect	text75
 24250  008004                     __ptext75:
 24251                           	opt stack 0
 24252  008004                     _displayTest:
 24253                           	opt stack 24
 24254                           
 24255                           ;segment.c: 37: DISPLAY_MODE = 1;
 24256                           
 24257                           ; BSR set to: 0
 24258                           ;incstack = 0
 24259  008004  0E01               	movlw	1
 24260  008006  6E5A               	movwf	_DISPLAY_MODE,c
 24261                           
 24262                           ;segment.c: 38: strcpy(string_to_display,"tESt");
 24263  008008  0EEE               	movlw	low _string_to_display
 24264  00800A  0100               	movlb	0	; () banked
 24265  00800C  6F60               	movwf	strcpy@to& (0+255),b
 24266  00800E  0E01               	movlw	high _string_to_display
 24267  008010  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24268  008012  0ED7               	movlw	low STR_8
 24269  008014  6F62               	movwf	strcpy@from& (0+255),b
 24270  008016  0EFF               	movlw	high STR_8
 24271  008018  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24272  00801A  EC66  F049         	call	_strcpy	;wreg free
 24273                           
 24274                           ;segment.c: 40: _delay((unsigned long)((500)*(20000000/4000.0)));
 24275  00801E  0E0D               	movlw	13
 24276  008020  0100               	movlb	0	; () banked
 24277  008022  6F67               	movwf	(??_displayTest+1)& (0+255),b
 24278  008024  0EAF               	movlw	175
 24279  008026  6F66               	movwf	??_displayTest& (0+255),b
 24280  008028  0EB6               	movlw	182
 24281  00802A                     u44927:
 24282  00802A  2EE8               	decfsz	wreg,f,c
 24283  00802C  D7FE               	bra	u44927
 24284  00802E  2F66               	decfsz	??_displayTest& (0+255),f,b
 24285  008030  D7FC               	bra	u44927
 24286  008032  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 24287  008034  D7FA               	bra	u44927
 24288  008036  F000               	nop	
 24289                           
 24290                           ;segment.c: 42: DISPLAY_MODE = 0;
 24291  008038  0E00               	movlw	0
 24292  00803A  6E5A               	movwf	_DISPLAY_MODE,c
 24293                           
 24294                           ;segment.c: 43: DIGIT_MODE = 0;
 24295  00803C  0E00               	movlw	0
 24296  00803E  6E59               	movwf	_DIGIT_MODE,c
 24297                           
 24298                           ;segment.c: 44: number_to_display = 8888;
 24299  008040  0E22               	movlw	34
 24300  008042  6E5C               	movwf	_number_to_display+1,c
 24301  008044  0EB8               	movlw	184
 24302  008046  6E5B               	movwf	_number_to_display,c
 24303                           
 24304                           ;segment.c: 45: light_decimal_points = 1;
 24305  008048  8C36               	bsf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 24306                           
 24307                           ;segment.c: 46: _delay((unsigned long)((1000)*(20000000/4000.0)));
 24308  00804A  0E1A               	movlw	26
 24309  00804C  0100               	movlb	0	; () banked
 24310  00804E  6F67               	movwf	(??_displayTest+1)& (0+255),b
 24311  008050  0E5E               	movlw	94
 24312  008052  6F66               	movwf	??_displayTest& (0+255),b
 24313  008054  0E6E               	movlw	110
 24314  008056                     u44937:
 24315  008056  2EE8               	decfsz	wreg,f,c
 24316  008058  D7FE               	bra	u44937
 24317  00805A  2F66               	decfsz	??_displayTest& (0+255),f,b
 24318  00805C  D7FC               	bra	u44937
 24319  00805E  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 24320  008060  D7FA               	bra	u44937
 24321  008062  F000               	nop	
 24322                           
 24323                           ;segment.c: 47: light_decimal_points = 0;
 24324  008064  9C36               	bcf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 24325                           
 24326                           ;segment.c: 49: DISPLAY_MODE = 1;
 24327  008066  0E01               	movlw	1
 24328  008068  6E5A               	movwf	_DISPLAY_MODE,c
 24329                           
 24330                           ;segment.c: 50: strcpy(string_to_display,"    ");
 24331  00806A  0EEE               	movlw	low _string_to_display
 24332  00806C  0100               	movlb	0	; () banked
 24333  00806E  6F60               	movwf	strcpy@to& (0+255),b
 24334  008070  0E01               	movlw	high _string_to_display
 24335  008072  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24336  008074  0E70               	movlw	low (STR_10+12)
 24337  008076  6F62               	movwf	strcpy@from& (0+255),b
 24338  008078  0EFD               	movlw	high (STR_10+12)
 24339  00807A  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24340  00807C  EC66  F049         	call	_strcpy	;wreg free
 24341  008080  0012               	return		;funcret
 24342  008082                     __end_of_displayTest:
 24343                           	opt stack 0
 24344                           tblptru	equ	0xFF8
 24345                           tblptrh	equ	0xFF7
 24346                           tblptrl	equ	0xFF6
 24347                           tablat	equ	0xFF5
 24348                           prodh	equ	0xFF4
 24349                           prodl	equ	0xFF3
 24350                           intcon	equ	0xFF2
 24351                           intcon2	equ	0xFF1
 24352                           postinc0	equ	0xFEE
 24353                           wreg	equ	0xFE8
 24354                           indf1	equ	0xFE7
 24355                           postdec1	equ	0xFE5
 24356                           fsr1h	equ	0xFE2
 24357                           fsr1l	equ	0xFE1
 24358                           indf2	equ	0xFDF
 24359                           postinc2	equ	0xFDE
 24360                           plusw2	equ	0xFDB
 24361                           fsr2h	equ	0xFDA
 24362                           fsr2l	equ	0xFD9
 24363                           status	equ	0xFD8
 24364                           
 24365 ;; *************** function _digitalInputs *****************
 24366 ;; Defined at:
 24367 ;;		line 289 in file "main.c"
 24368 ;; Parameters:    Size  Location     Type
 24369 ;;		None
 24370 ;; Auto vars:     Size  Location     Type
 24371 ;;		None
 24372 ;; Return value:  Size  Location     Type
 24373 ;;                  1    wreg      void 
 24374 ;; Registers used:
 24375 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24376 ;; Tracked objects:
 24377 ;;		On entry : 0/0
 24378 ;;		On exit  : 0/0
 24379 ;;		Unchanged: 0/0
 24380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24385 ;;Total ram usage:        0 bytes
 24386 ;; Hardware stack levels used:    1
 24387 ;; Hardware stack levels required when called:   14
 24388 ;; This function calls:
 24389 ;;		_buttonInputsSerial
 24390 ;;		_keyboardTranspose
 24391 ;;		_processDrumpad
 24392 ;;		_processKeyboard
 24393 ;;		_processOctave
 24394 ;; This function is called by:
 24395 ;;		_main
 24396 ;; This function uses a non-reentrant model
 24397 ;;
 24398                           
 24399                           	psect	text76
 24400  008DA6                     __ptext76:
 24401                           	opt stack 0
 24402  008DA6                     _digitalInputs:
 24403                           	opt stack 16
 24404                           
 24405                           ;main.c: 291: buttonInputsSerial();
 24406                           
 24407                           ;incstack = 0
 24408  008DA6  EC39  F041         	call	_buttonInputsSerial	;wreg free
 24409                           
 24410                           ;main.c: 294: if(button_state_now != button_state_last) {
 24411  008DAA  0100               	movlb	0	; () banked
 24412  008DAC  51D4               	movf	_button_state_last& (0+255),w,b
 24413  008DAE  19D8               	xorwf	_button_state_now& (0+255),w,b
 24414  008DB0  E10A               	bnz	u38020
 24415  008DB2  51D5               	movf	(_button_state_last+1)& (0+255),w,b
 24416  008DB4  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 24417  008DB6  E107               	bnz	u38020
 24418  008DB8  51D6               	movf	(_button_state_last+2)& (0+255),w,b
 24419  008DBA  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 24420  008DBC  E104               	bnz	u38020
 24421  008DBE  51D7               	movf	(_button_state_last+3)& (0+255),w,b
 24422  008DC0  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 24423  008DC2  B4D8               	btfsc	status,2,c
 24424  008DC4  D00E               	goto	l4788
 24425  008DC6                     u38020:
 24426                           
 24427                           ; BSR set to: 0
 24428                           ;main.c: 295: processOctave();
 24429  008DC6  EC96  F01A         	call	_processOctave	;wreg free
 24430                           
 24431                           ;main.c: 296: keyboardTranspose();
 24432  008DCA  EC74  F021         	call	_keyboardTranspose	;wreg free
 24433                           
 24434                           ;main.c: 297: processKeyboard();
 24435  008DCE  EC47  F043         	call	_processKeyboard	;wreg free
 24436                           
 24437                           ;main.c: 298: button_state_last = button_state_now;
 24438  008DD2  C0D8  F0D4         	movff	_button_state_now,_button_state_last
 24439  008DD6  C0D9  F0D5         	movff	_button_state_now+1,_button_state_last+1
 24440  008DDA  C0DA  F0D6         	movff	_button_state_now+2,_button_state_last+2
 24441  008DDE  C0DB  F0D7         	movff	_button_state_now+3,_button_state_last+3
 24442  008DE2                     l4788:
 24443                           
 24444                           ;main.c: 299: }
 24445                           ;main.c: 302: if(drum_button_state_now != drum_button_state_last) {
 24446  008DE2  0100               	movlb	0	; () banked
 24447  008DE4  51ED               	movf	_drum_button_state_last& (0+255),w,b
 24448  008DE6  19EE               	xorwf	_drum_button_state_now& (0+255),w,b
 24449  008DE8  B4D8               	btfsc	status,2,c
 24450  008DEA  0012               	return	
 24451                           
 24452                           ; BSR set to: 0
 24453                           ;main.c: 303: processOctave();
 24454  008DEC  EC96  F01A         	call	_processOctave	;wreg free
 24455                           
 24456                           ;main.c: 304: processDrumpad();
 24457  008DF0  EC33  F00E         	call	_processDrumpad	;wreg free
 24458                           
 24459                           ;main.c: 305: drum_button_state_last = drum_button_state_now;
 24460  008DF4  C0EE  F0ED         	movff	_drum_button_state_now,_drum_button_state_last
 24461  008DF8  0012               	return	
 24462  008DFA                     __end_of_digitalInputs:
 24463                           	opt stack 0
 24464                           tblptru	equ	0xFF8
 24465                           tblptrh	equ	0xFF7
 24466                           tblptrl	equ	0xFF6
 24467                           tablat	equ	0xFF5
 24468                           prodh	equ	0xFF4
 24469                           prodl	equ	0xFF3
 24470                           intcon	equ	0xFF2
 24471                           intcon2	equ	0xFF1
 24472                           postinc0	equ	0xFEE
 24473                           wreg	equ	0xFE8
 24474                           indf1	equ	0xFE7
 24475                           postdec1	equ	0xFE5
 24476                           fsr1h	equ	0xFE2
 24477                           fsr1l	equ	0xFE1
 24478                           indf2	equ	0xFDF
 24479                           postinc2	equ	0xFDE
 24480                           plusw2	equ	0xFDB
 24481                           fsr2h	equ	0xFDA
 24482                           fsr2l	equ	0xFD9
 24483                           status	equ	0xFD8
 24484                           
 24485 ;; *************** function _processOctave *****************
 24486 ;; Defined at:
 24487 ;;		line 275 in file "octave.c"
 24488 ;; Parameters:    Size  Location     Type
 24489 ;;		None
 24490 ;; Auto vars:     Size  Location     Type
 24491 ;;		None
 24492 ;; Return value:  Size  Location     Type
 24493 ;;                  1    wreg      void 
 24494 ;; Registers used:
 24495 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24496 ;; Tracked objects:
 24497 ;;		On entry : 0/0
 24498 ;;		On exit  : 0/0
 24499 ;;		Unchanged: 0/0
 24500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24503 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24504 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24505 ;;Total ram usage:        2 bytes
 24506 ;; Hardware stack levels used:    1
 24507 ;; Hardware stack levels required when called:   13
 24508 ;; This function calls:
 24509 ;;		___awmod
 24510 ;;		___wmul
 24511 ;;		_doTheLatch
 24512 ;;		_doTheUnLatch
 24513 ;;		_key_press_release_note_off
 24514 ;;		_printThisNumber
 24515 ;;		_random_pitches
 24516 ;;		_random_pitches_non_repeating
 24517 ;;		_resetArpeggio
 24518 ;;		_strcpy
 24519 ;;		_wait_one_pulse
 24520 ;; This function is called by:
 24521 ;;		_digitalInputs
 24522 ;; This function uses a non-reentrant model
 24523 ;;
 24524                           
 24525                           	psect	text77
 24526  00352C                     __ptext77:
 24527                           	opt stack 0
 24528  00352C                     _processOctave:
 24529                           	opt stack 16
 24530                           
 24531                           ;octave.c: 280: if(ARPEGGIO_ON == 1) {
 24532                           
 24533                           ;incstack = 0
 24534  00352C  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 24535  00352E  D045               	goto	l2793
 24536                           
 24537                           ;octave.c: 284: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x01))
 24538  003530  0100               	movlb	0	; () banked
 24539  003532  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24540                           
 24541                           ; BSR set to: 0
 24542  003534  A1EE               	btfss	_drum_button_state_now& (0+255),0,b
 24543  003536  D002               	goto	l2788
 24544                           
 24545                           ; BSR set to: 0
 24546                           ;octave.c: 285: {
 24547                           ;octave.c: 292: doTheLatch();
 24548  003538  ECB9  F04A         	call	_doTheLatch	;wreg free
 24549  00353C                     l2788:
 24550                           
 24551                           ;octave.c: 293: }
 24552                           ;octave.c: 297: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x02)) {
 24553  00353C  0100               	movlb	0	; () banked
 24554  00353E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24555                           
 24556                           ; BSR set to: 0
 24557  003540  A3EE               	btfss	_drum_button_state_now& (0+255),1,b
 24558  003542  D002               	goto	l2789
 24559                           
 24560                           ; BSR set to: 0
 24561                           ;octave.c: 299: doTheUnLatch();
 24562  003544  EC3B  F028         	call	_doTheUnLatch	;wreg free
 24563  003548                     l2789:
 24564                           
 24565                           ;octave.c: 378: }
 24566                           ;octave.c: 382: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x04)){
 24567  003548  0100               	movlb	0	; () banked
 24568  00354A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24569                           
 24570                           ; BSR set to: 0
 24571  00354C  A5EE               	btfss	_drum_button_state_now& (0+255),2,b
 24572  00354E  D018               	goto	l2790
 24573                           
 24574                           ; BSR set to: 0
 24575                           ;octave.c: 385: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 24576  003550  0E05               	movlw	5
 24577  003552  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 24578  003554  B4D8               	btfsc	status,2,c
 24579                           
 24580                           ; BSR set to: 0
 24581  003556  EC6D  F045         	call	_random_pitches	;wreg free
 24582                           
 24583                           ;octave.c: 386: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING){random_pitches_non_repeating()
      +                          ;}
 24584  00355A  0E04               	movlw	4
 24585  00355C  0100               	movlb	0	; () banked
 24586  00355E  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 24587  003560  B4D8               	btfsc	status,2,c
 24588                           
 24589                           ; BSR set to: 0
 24590  003562  EC00  F03E         	call	_random_pitches_non_repeating	;wreg free
 24591                           
 24592                           ;octave.c: 388: DISPLAY_MODE = 1;
 24593  003566  0E01               	movlw	1
 24594  003568  6E5A               	movwf	_DISPLAY_MODE,c
 24595                           
 24596                           ;octave.c: 389: strcpy(string_to_display, "rAnd");
 24597  00356A  0EEE               	movlw	low _string_to_display
 24598  00356C  0100               	movlb	0	; () banked
 24599  00356E  6F60               	movwf	strcpy@to& (0+255),b
 24600  003570  0E01               	movlw	high _string_to_display
 24601  003572  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24602  003574  0EEB               	movlw	low STR_6
 24603  003576  6F62               	movwf	strcpy@from& (0+255),b
 24604  003578  0EFF               	movlw	high STR_6
 24605  00357A  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24606  00357C  EC66  F049         	call	_strcpy	;wreg free
 24607  003580                     l2790:
 24608                           
 24609                           ;octave.c: 391: }
 24610                           ;octave.c: 395: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x08)){
 24611  003580  0100               	movlb	0	; () banked
 24612  003582  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24613                           
 24614                           ; BSR set to: 0
 24615  003584  A7EE               	btfss	_drum_button_state_now& (0+255),3,b
 24616  003586  D019               	goto	l2793
 24617                           
 24618                           ; BSR set to: 0
 24619                           ;octave.c: 398: wait_one_pulse(LAST_NOTE_MODE_RESET);
 24620  003588  0E00               	movlw	0
 24621  00358A  BE33               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 24622  00358C  0E01               	movlw	1
 24623  00358E  EC0B  F04A         	call	_wait_one_pulse
 24624                           
 24625                           ;octave.c: 399: note_off_was_sent = 1;
 24626  003592  8233               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24627                           
 24628                           ;octave.c: 400: key_press_release_note_off();
 24629  003594  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 24630                           
 24631                           ;octave.c: 403: resetArpeggio();
 24632  003598  ECA0  F048         	call	_resetArpeggio	;wreg free
 24633                           
 24634                           ;octave.c: 406: TIMER_OVERFLOWS = 0;
 24635  00359C  0E00               	movlw	0
 24636  00359E  6E54               	movwf	_TIMER_OVERFLOWS,c
 24637                           
 24638                           ;octave.c: 408: DISPLAY_MODE = 1;
 24639  0035A0  0E01               	movlw	1
 24640  0035A2  6E5A               	movwf	_DISPLAY_MODE,c
 24641                           
 24642                           ;octave.c: 409: strcpy(string_to_display, "rSEt");
 24643  0035A4  0EEE               	movlw	low _string_to_display
 24644  0035A6  0100               	movlb	0	; () banked
 24645  0035A8  6F60               	movwf	strcpy@to& (0+255),b
 24646  0035AA  0E01               	movlw	high _string_to_display
 24647  0035AC  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24648  0035AE  0EF5               	movlw	low STR_7
 24649  0035B0  6F62               	movwf	strcpy@from& (0+255),b
 24650  0035B2  0EFF               	movlw	high STR_7
 24651  0035B4  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24652  0035B6  EC66  F049         	call	_strcpy	;wreg free
 24653  0035BA                     l2793:
 24654                           
 24655                           ;octave.c: 410: }
 24656                           ;octave.c: 411: }
 24657                           ;octave.c: 414: if(button_state_now == 0x04000000){
 24658  0035BA  0E04               	movlw	4
 24659  0035BC  0100               	movlb	0	; () banked
 24660  0035BE  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 24661  0035C0  11D8               	iorwf	_button_state_now& (0+255),w,b
 24662  0035C2  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 24663  0035C4  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 24664  0035C6  A4D8               	btfss	status,2,c
 24665  0035C8  D03D               	goto	l2795
 24666                           
 24667                           ; BSR set to: 0
 24668                           ;octave.c: 415: if ((octave * 12 + semitone) <= 60) {
 24669  0035CA  C0F3  F08C         	movff	_semitone,??_processOctave
 24670  0035CE  6B8D               	clrf	(??_processOctave+1)& (0+255),b
 24671  0035D0  BF8C               	btfsc	??_processOctave& (0+255),7,b
 24672  0035D2  078D               	decf	(??_processOctave+1)& (0+255),f,b
 24673  0035D4  51FC               	movf	_octave& (0+255),w,b
 24674  0035D6  6F64               	movwf	___wmul@multiplier& (0+255),b
 24675  0035D8  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 24676  0035DA  BF64               	btfsc	___wmul@multiplier& (0+255),7,b
 24677  0035DC  0765               	decf	(___wmul@multiplier+1)& (0+255),f,b
 24678  0035DE  0E00               	movlw	0
 24679  0035E0  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24680  0035E2  0E0C               	movlw	12
 24681  0035E4  6F66               	movwf	___wmul@multiplicand& (0+255),b
 24682  0035E6  EC71  F04A         	call	___wmul	;wreg free
 24683  0035EA  0100               	movlb	0	; () banked
 24684  0035EC  518C               	movf	??_processOctave& (0+255),w,b
 24685  0035EE  2764               	addwf	?___wmul& (0+255),f,b
 24686  0035F0  518D               	movf	(??_processOctave+1)& (0+255),w,b
 24687  0035F2  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 24688  0035F4  BF65               	btfsc	(?___wmul+1)& (0+255),7,b
 24689  0035F6  D006               	goto	u36280
 24690  0035F8  5165               	movf	(?___wmul+1)& (0+255),w,b
 24691  0035FA  E124               	bnz	l22425
 24692  0035FC  0E3D               	movlw	61
 24693  0035FE  5D64               	subwf	?___wmul& (0+255),w,b
 24694  003600  B0D8               	btfsc	status,0,c
 24695  003602  D020               	goto	l2795
 24696  003604                     u36280:
 24697                           
 24698                           ; BSR set to: 0
 24699                           ;octave.c: 418: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 24700  003604  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 24701  003606  D00E               	goto	l2796
 24702                           
 24703                           ; BSR set to: 0
 24704  003608  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 24705  00360A  B4D8               	btfsc	status,2,c
 24706  00360C  D00B               	goto	l2796
 24707                           
 24708                           ; BSR set to: 0
 24709                           ;octave.c: 421: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 24710  00360E  0E00               	movlw	0
 24711  003610  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 24712  003612  0E01               	movlw	1
 24713  003614  EC0B  F04A         	call	_wait_one_pulse
 24714                           
 24715                           ;octave.c: 425: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24716  003618  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24717  00361A  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 24718                           
 24719                           ;octave.c: 428: suppress_note_off = 1;
 24720  00361E  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 24721                           
 24722                           ;octave.c: 430: flag1 = 1;
 24723  003620  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 24724                           
 24725                           ;octave.c: 431: flag2 = 1;
 24726  003622  8E32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 24727  003624                     l2796:
 24728                           
 24729                           ;octave.c: 432: }
 24730                           ;octave.c: 434: octave++;
 24731  003624  0100               	movlb	0	; () banked
 24732  003626  2BFC               	incf	_octave& (0+255),f,b
 24733                           
 24734                           ; BSR set to: 0
 24735                           ;octave.c: 435: if (octave > 7) {octave = 7;}
 24736  003628  51FC               	movf	_octave& (0+255),w,b
 24737  00362A  0A80               	xorlw	128
 24738  00362C  0F78               	addlw	-136
 24739  00362E  A0D8               	btfss	status,0,c
 24740  003630  D002               	goto	l2798
 24741                           
 24742                           ; BSR set to: 0
 24743  003632  0E07               	movlw	7
 24744  003634  6FFC               	movwf	_octave& (0+255),b
 24745  003636                     l2798:
 24746                           
 24747                           ; BSR set to: 0
 24748                           ;octave.c: 437: printThisNumber(octave);
 24749                           
 24750                           ; BSR set to: 0
 24751  003636  51FC               	movf	_octave& (0+255),w,b
 24752  003638  6F60               	movwf	printThisNumber@n& (0+255),b
 24753  00363A  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 24754  00363C  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 24755  00363E  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 24756  003640  EC16  F04B         	call	_printThisNumber	;wreg free
 24757  003644                     l2795:
 24758  003644                     l22425:
 24759                           
 24760                           ;octave.c: 438: }
 24761                           ;octave.c: 439: }
 24762                           ;octave.c: 442: if(button_state_now == 0x02000000){
 24763  003644  0E02               	movlw	2
 24764  003646  0100               	movlb	0	; () banked
 24765  003648  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 24766  00364A  11D8               	iorwf	_button_state_now& (0+255),w,b
 24767  00364C  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 24768  00364E  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 24769  003650  A4D8               	btfss	status,2,c
 24770  003652  D03A               	goto	l2800
 24771                           
 24772                           ; BSR set to: 0
 24773                           ;octave.c: 443: if ((octave * 12 + semitone) >= 12) {
 24774  003654  C0F3  F08C         	movff	_semitone,??_processOctave
 24775  003658  6B8D               	clrf	(??_processOctave+1)& (0+255),b
 24776  00365A  BF8C               	btfsc	??_processOctave& (0+255),7,b
 24777  00365C  078D               	decf	(??_processOctave+1)& (0+255),f,b
 24778  00365E  51FC               	movf	_octave& (0+255),w,b
 24779  003660  6F64               	movwf	___wmul@multiplier& (0+255),b
 24780  003662  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 24781  003664  BF64               	btfsc	___wmul@multiplier& (0+255),7,b
 24782  003666  0765               	decf	(___wmul@multiplier+1)& (0+255),f,b
 24783  003668  0E00               	movlw	0
 24784  00366A  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24785  00366C  0E0C               	movlw	12
 24786  00366E  6F66               	movwf	___wmul@multiplicand& (0+255),b
 24787  003670  EC71  F04A         	call	___wmul	;wreg free
 24788  003674  0100               	movlb	0	; () banked
 24789  003676  518C               	movf	??_processOctave& (0+255),w,b
 24790  003678  2764               	addwf	?___wmul& (0+255),f,b
 24791  00367A  518D               	movf	(??_processOctave+1)& (0+255),w,b
 24792  00367C  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 24793  00367E  BF65               	btfsc	(?___wmul+1)& (0+255),7,b
 24794  003680  D023               	goto	l2800
 24795  003682  5165               	movf	(?___wmul+1)& (0+255),w,b
 24796  003684  E104               	bnz	u36340
 24797  003686  0E0C               	movlw	12
 24798  003688  5D64               	subwf	?___wmul& (0+255),w,b
 24799  00368A  A0D8               	btfss	status,0,c
 24800  00368C  D01D               	goto	l2800
 24801  00368E                     u36340:
 24802                           
 24803                           ; BSR set to: 0
 24804                           ;octave.c: 446: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 24805  00368E  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 24806  003690  D00E               	goto	l2801
 24807                           
 24808                           ; BSR set to: 0
 24809  003692  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 24810  003694  B4D8               	btfsc	status,2,c
 24811  003696  D00B               	goto	l2801
 24812                           
 24813                           ; BSR set to: 0
 24814                           ;octave.c: 449: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 24815  003698  0E00               	movlw	0
 24816  00369A  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 24817  00369C  0E01               	movlw	1
 24818  00369E  EC0B  F04A         	call	_wait_one_pulse
 24819                           
 24820                           ;octave.c: 453: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24821  0036A2  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24822  0036A4  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 24823                           
 24824                           ;octave.c: 456: suppress_note_off = 1;
 24825  0036A8  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 24826                           
 24827                           ;octave.c: 458: flag1 = 1;
 24828  0036AA  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 24829                           
 24830                           ;octave.c: 460: flag2 = 1;
 24831  0036AC  8E32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 24832  0036AE                     l2801:
 24833                           
 24834                           ;octave.c: 461: }
 24835                           ;octave.c: 463: octave--;
 24836  0036AE  0100               	movlb	0	; () banked
 24837  0036B0  07FC               	decf	_octave& (0+255),f,b
 24838                           
 24839                           ; BSR set to: 0
 24840                           ;octave.c: 464: if (octave < 0) {octave = 0;}
 24841  0036B2  AFFC               	btfss	_octave& (0+255),7,b
 24842  0036B4  D002               	goto	l2803
 24843                           
 24844                           ; BSR set to: 0
 24845  0036B6  0E00               	movlw	0
 24846  0036B8  6FFC               	movwf	_octave& (0+255),b
 24847  0036BA                     l2803:
 24848                           
 24849                           ; BSR set to: 0
 24850                           ;octave.c: 466: printThisNumber(octave);
 24851                           
 24852                           ; BSR set to: 0
 24853  0036BA  51FC               	movf	_octave& (0+255),w,b
 24854  0036BC  6F60               	movwf	printThisNumber@n& (0+255),b
 24855  0036BE  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 24856  0036C0  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 24857  0036C2  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 24858  0036C4  EC16  F04B         	call	_printThisNumber	;wreg free
 24859  0036C8                     l2800:
 24860                           
 24861                           ;octave.c: 468: }
 24862                           ;octave.c: 469: }
 24863                           ;octave.c: 475: if(button_state_now == (0x04000000 | 0x08000000)){
 24864  0036C8  0E0C               	movlw	12
 24865  0036CA  0100               	movlb	0	; () banked
 24866  0036CC  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 24867  0036CE  11D8               	iorwf	_button_state_now& (0+255),w,b
 24868  0036D0  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 24869  0036D2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 24870  0036D4  A4D8               	btfss	status,2,c
 24871  0036D6  D053               	goto	l2805
 24872                           
 24873                           ; BSR set to: 0
 24874                           ;octave.c: 477: if ((octave * 12 + semitone) < 72) {
 24875  0036D8  C0F3  F08C         	movff	_semitone,??_processOctave
 24876  0036DC  6B8D               	clrf	(??_processOctave+1)& (0+255),b
 24877  0036DE  BF8C               	btfsc	??_processOctave& (0+255),7,b
 24878  0036E0  078D               	decf	(??_processOctave+1)& (0+255),f,b
 24879  0036E2  51FC               	movf	_octave& (0+255),w,b
 24880  0036E4  6F64               	movwf	___wmul@multiplier& (0+255),b
 24881  0036E6  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 24882  0036E8  BF64               	btfsc	___wmul@multiplier& (0+255),7,b
 24883  0036EA  0765               	decf	(___wmul@multiplier+1)& (0+255),f,b
 24884  0036EC  0E00               	movlw	0
 24885  0036EE  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24886  0036F0  0E0C               	movlw	12
 24887  0036F2  6F66               	movwf	___wmul@multiplicand& (0+255),b
 24888  0036F4  EC71  F04A         	call	___wmul	;wreg free
 24889  0036F8  0100               	movlb	0	; () banked
 24890  0036FA  518C               	movf	??_processOctave& (0+255),w,b
 24891  0036FC  2764               	addwf	?___wmul& (0+255),f,b
 24892  0036FE  518D               	movf	(??_processOctave+1)& (0+255),w,b
 24893  003700  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 24894  003702  BF65               	btfsc	(?___wmul+1)& (0+255),7,b
 24895  003704  D006               	goto	u36400
 24896  003706  5165               	movf	(?___wmul+1)& (0+255),w,b
 24897  003708  E13A               	bnz	l22487
 24898  00370A  0E48               	movlw	72
 24899  00370C  5D64               	subwf	?___wmul& (0+255),w,b
 24900  00370E  B0D8               	btfsc	status,0,c
 24901  003710  D036               	goto	l2805
 24902  003712                     u36400:
 24903                           
 24904                           ; BSR set to: 0
 24905                           ;octave.c: 480: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 24906  003712  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 24907  003714  D00E               	goto	l2806
 24908                           
 24909                           ; BSR set to: 0
 24910  003716  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 24911  003718  B4D8               	btfsc	status,2,c
 24912  00371A  D00B               	goto	l2806
 24913                           
 24914                           ; BSR set to: 0
 24915                           ;octave.c: 483: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 24916  00371C  0E00               	movlw	0
 24917  00371E  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 24918  003720  0E01               	movlw	1
 24919  003722  EC0B  F04A         	call	_wait_one_pulse
 24920                           
 24921                           ;octave.c: 487: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24922  003726  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24923  003728  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 24924                           
 24925                           ;octave.c: 490: suppress_note_off = 1;
 24926  00372C  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 24927                           
 24928                           ;octave.c: 492: flag1 = 1;
 24929  00372E  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 24930                           
 24931                           ;octave.c: 493: flag2 = 1;
 24932  003730  8E32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 24933  003732                     l2806:
 24934                           
 24935                           ;octave.c: 494: }
 24936                           ;octave.c: 496: if (TRANSPOSE_MODE == 0) {
 24937  003732  BC35               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 24938  003734  D009               	goto	l2809
 24939                           
 24940                           ;octave.c: 497: semitone++;
 24941  003736  0100               	movlb	0	; () banked
 24942  003738  2BF3               	incf	_semitone& (0+255),f,b
 24943                           
 24944                           ; BSR set to: 0
 24945                           ;octave.c: 498: if (semitone > 12) {semitone = 12;}
 24946  00373A  51F3               	movf	_semitone& (0+255),w,b
 24947  00373C  0A80               	xorlw	128
 24948  00373E  0F73               	addlw	-141
 24949  003740  A0D8               	btfss	status,0,c
 24950  003742  D002               	goto	l2809
 24951                           
 24952                           ; BSR set to: 0
 24953  003744  0E0C               	movlw	12
 24954  003746  6FF3               	movwf	_semitone& (0+255),b
 24955  003748                     l2809:
 24956                           
 24957                           ;octave.c: 499: }
 24958                           ;octave.c: 501: if (TRANSPOSE_MODE == 1) {
 24959                           
 24960                           ; BSR set to: 0
 24961                           
 24962                           ; BSR set to: 0
 24963  003748  AC35               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 24964  00374A  D011               	goto	l2810
 24965                           
 24966                           ;octave.c: 502: semitone = (semitone +=7) % 12;
 24967  00374C  0E07               	movlw	7
 24968  00374E  0100               	movlb	0	; () banked
 24969  003750  27F3               	addwf	_semitone& (0+255),f,b
 24970  003752  51F3               	movf	_semitone& (0+255),w,b
 24971  003754  6F6E               	movwf	___awmod@dividend& (0+255),b
 24972  003756  6B6F               	clrf	(___awmod@dividend+1)& (0+255),b
 24973  003758  BF6E               	btfsc	___awmod@dividend& (0+255),7,b
 24974  00375A  076F               	decf	(___awmod@dividend+1)& (0+255),f,b
 24975  00375C  0E00               	movlw	0
 24976  00375E  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 24977  003760  0E0C               	movlw	12
 24978  003762  6F70               	movwf	___awmod@divisor& (0+255),b
 24979  003764  EC9E  F042         	call	___awmod	;wreg free
 24980  003768  0100               	movlb	0	; () banked
 24981  00376A  516E               	movf	?___awmod& (0+255),w,b
 24982  00376C  6FF3               	movwf	_semitone& (0+255),b
 24983  00376E                     l2810:
 24984                           
 24985                           ;octave.c: 503: }
 24986                           ;octave.c: 505: printThisNumber(semitone);
 24987                           
 24988                           ; BSR set to: 0
 24989  00376E  0100               	movlb	0	; () banked
 24990  003770  51F3               	movf	_semitone& (0+255),w,b
 24991  003772  6F60               	movwf	printThisNumber@n& (0+255),b
 24992  003774  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 24993  003776  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 24994  003778  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 24995  00377A  EC16  F04B         	call	_printThisNumber	;wreg free
 24996  00377E                     l2805:
 24997  00377E                     l22487:
 24998                           
 24999                           ;octave.c: 506: }
 25000                           ;octave.c: 507: }
 25001                           ;octave.c: 510: if(button_state_now == (0x02000000 | 0x08000000)){
 25002  00377E  0E0A               	movlw	10
 25003  003780  0100               	movlb	0	; () banked
 25004  003782  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 25005  003784  11D8               	iorwf	_button_state_now& (0+255),w,b
 25006  003786  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 25007  003788  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 25008  00378A  A4D8               	btfss	status,2,c
 25009  00378C  0012               	return	
 25010                           
 25011                           ; BSR set to: 0
 25012                           ;octave.c: 512: if ((octave * 12 + semitone) > 0 ) {
 25013  00378E  C0F3  F08C         	movff	_semitone,??_processOctave
 25014  003792  6B8D               	clrf	(??_processOctave+1)& (0+255),b
 25015  003794  BF8C               	btfsc	??_processOctave& (0+255),7,b
 25016  003796  078D               	decf	(??_processOctave+1)& (0+255),f,b
 25017  003798  51FC               	movf	_octave& (0+255),w,b
 25018  00379A  6F64               	movwf	___wmul@multiplier& (0+255),b
 25019  00379C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 25020  00379E  BF64               	btfsc	___wmul@multiplier& (0+255),7,b
 25021  0037A0  0765               	decf	(___wmul@multiplier+1)& (0+255),f,b
 25022  0037A2  0E00               	movlw	0
 25023  0037A4  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 25024  0037A6  0E0C               	movlw	12
 25025  0037A8  6F66               	movwf	___wmul@multiplicand& (0+255),b
 25026  0037AA  EC71  F04A         	call	___wmul	;wreg free
 25027  0037AE  0100               	movlb	0	; () banked
 25028  0037B0  518C               	movf	??_processOctave& (0+255),w,b
 25029  0037B2  2764               	addwf	?___wmul& (0+255),f,b
 25030  0037B4  518D               	movf	(??_processOctave+1)& (0+255),w,b
 25031  0037B6  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 25032  0037B8  BF65               	btfsc	(?___wmul+1)& (0+255),7,b
 25033  0037BA  0012               	return	
 25034  0037BC  5165               	movf	(?___wmul+1)& (0+255),w,b
 25035  0037BE  E103               	bnz	u36480
 25036  0037C0  0564               	decf	?___wmul& (0+255),w,b
 25037  0037C2  A0D8               	btfss	status,0,c
 25038  0037C4  0012               	return	
 25039  0037C6                     u36480:
 25040                           
 25041                           ; BSR set to: 0
 25042                           ;octave.c: 516: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 25043  0037C6  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 25044  0037C8  D00E               	goto	l2813
 25045                           
 25046                           ; BSR set to: 0
 25047  0037CA  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25048  0037CC  B4D8               	btfsc	status,2,c
 25049  0037CE  D00B               	goto	l2813
 25050                           
 25051                           ; BSR set to: 0
 25052                           ;octave.c: 519: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 25053  0037D0  0E00               	movlw	0
 25054  0037D2  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 25055  0037D4  0E01               	movlw	1
 25056  0037D6  EC0B  F04A         	call	_wait_one_pulse
 25057                           
 25058                           ;octave.c: 523: if(note_off_was_sent == 0) {key_press_release_note_off();}
 25059  0037DA  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 25060  0037DC  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 25061                           
 25062                           ;octave.c: 526: suppress_note_off = 1;
 25063  0037E0  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 25064                           
 25065                           ;octave.c: 528: flag1 = 1;
 25066  0037E2  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 25067                           
 25068                           ;octave.c: 529: flag2 = 1;
 25069  0037E4  8E32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 25070  0037E6                     l2813:
 25071                           
 25072                           ;octave.c: 530: }
 25073                           ;octave.c: 532: if (TRANSPOSE_MODE == 0) {
 25074  0037E6  BC35               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 25075  0037E8  D009               	goto	l2816
 25076                           
 25077                           ;octave.c: 533: semitone--;
 25078  0037EA  0100               	movlb	0	; () banked
 25079  0037EC  07F3               	decf	_semitone& (0+255),f,b
 25080                           
 25081                           ; BSR set to: 0
 25082                           ;octave.c: 534: if (semitone < -12) {semitone = -12;}
 25083  0037EE  51F3               	movf	_semitone& (0+255),w,b
 25084  0037F0  0A80               	xorlw	128
 25085  0037F2  0F8C               	addlw	140
 25086  0037F4  B0D8               	btfsc	status,0,c
 25087  0037F6  D002               	goto	l2816
 25088                           
 25089                           ; BSR set to: 0
 25090  0037F8  0EF4               	movlw	244
 25091  0037FA  6FF3               	movwf	_semitone& (0+255),b
 25092  0037FC                     l2816:
 25093                           
 25094                           ;octave.c: 535: }
 25095                           ;octave.c: 537: if (TRANSPOSE_MODE == 1) {
 25096                           
 25097                           ; BSR set to: 0
 25098                           
 25099                           ; BSR set to: 0
 25100  0037FC  AC35               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 25101  0037FE  D011               	goto	l2817
 25102                           
 25103                           ;octave.c: 538: semitone = (semitone -=7) % 12;
 25104  003800  0EF9               	movlw	249
 25105  003802  0100               	movlb	0	; () banked
 25106  003804  27F3               	addwf	_semitone& (0+255),f,b
 25107  003806  51F3               	movf	_semitone& (0+255),w,b
 25108  003808  6F6E               	movwf	___awmod@dividend& (0+255),b
 25109  00380A  6B6F               	clrf	(___awmod@dividend+1)& (0+255),b
 25110  00380C  BF6E               	btfsc	___awmod@dividend& (0+255),7,b
 25111  00380E  076F               	decf	(___awmod@dividend+1)& (0+255),f,b
 25112  003810  0E00               	movlw	0
 25113  003812  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 25114  003814  0E0C               	movlw	12
 25115  003816  6F70               	movwf	___awmod@divisor& (0+255),b
 25116  003818  EC9E  F042         	call	___awmod	;wreg free
 25117  00381C  0100               	movlb	0	; () banked
 25118  00381E  516E               	movf	?___awmod& (0+255),w,b
 25119  003820  6FF3               	movwf	_semitone& (0+255),b
 25120  003822                     l2817:
 25121                           
 25122                           ;octave.c: 539: }
 25123                           ;octave.c: 541: printThisNumber(semitone);
 25124                           
 25125                           ; BSR set to: 0
 25126  003822  0100               	movlb	0	; () banked
 25127  003824  51F3               	movf	_semitone& (0+255),w,b
 25128  003826  6F60               	movwf	printThisNumber@n& (0+255),b
 25129  003828  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 25130  00382A  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 25131  00382C  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 25132  00382E  EC16  F04B         	call	_printThisNumber	;wreg free
 25133  003832  0012               	return	
 25134  003834                     __end_of_processOctave:
 25135                           	opt stack 0
 25136                           tblptru	equ	0xFF8
 25137                           tblptrh	equ	0xFF7
 25138                           tblptrl	equ	0xFF6
 25139                           tablat	equ	0xFF5
 25140                           prodh	equ	0xFF4
 25141                           prodl	equ	0xFF3
 25142                           intcon	equ	0xFF2
 25143                           intcon2	equ	0xFF1
 25144                           postinc0	equ	0xFEE
 25145                           wreg	equ	0xFE8
 25146                           indf1	equ	0xFE7
 25147                           postdec1	equ	0xFE5
 25148                           fsr1h	equ	0xFE2
 25149                           fsr1l	equ	0xFE1
 25150                           indf2	equ	0xFDF
 25151                           postinc2	equ	0xFDE
 25152                           plusw2	equ	0xFDB
 25153                           fsr2h	equ	0xFDA
 25154                           fsr2l	equ	0xFD9
 25155                           status	equ	0xFD8
 25156                           
 25157 ;; *************** function _doTheUnLatch *****************
 25158 ;; Defined at:
 25159 ;;		line 195 in file "octave.c"
 25160 ;; Parameters:    Size  Location     Type
 25161 ;;		None
 25162 ;; Auto vars:     Size  Location     Type
 25163 ;;		None
 25164 ;; Return value:  Size  Location     Type
 25165 ;;                  1    wreg      void 
 25166 ;; Registers used:
 25167 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25168 ;; Tracked objects:
 25169 ;;		On entry : 0/0
 25170 ;;		On exit  : 0/0
 25171 ;;		Unchanged: 0/0
 25172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25175 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25176 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25177 ;;Total ram usage:        4 bytes
 25178 ;; Hardware stack levels used:    1
 25179 ;; Hardware stack levels required when called:   12
 25180 ;; This function calls:
 25181 ;;		_playThisNote
 25182 ;;		_playThisNote8
 25183 ;;		_playThisNotePentatonic
 25184 ;;		_strcpy
 25185 ;; This function is called by:
 25186 ;;		_processOctave
 25187 ;;		_Function_H_6_1
 25188 ;; This function uses a non-reentrant model
 25189 ;;
 25190                           
 25191                           	psect	text78
 25192  005076                     __ptext78:
 25193                           	opt stack 0
 25194  005076                     _doTheUnLatch:
 25195                           	opt stack 14
 25196                           
 25197                           ;octave.c: 197: LATCH = 0;
 25198                           
 25199                           ;incstack = 0
 25200  005076  9235               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 25201                           
 25202                           ;octave.c: 198: ON_OFF = 0;
 25203  005078  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25204                           
 25205                           ;octave.c: 202: if(NUM_NOTES_PRESSED > 0) {
 25206  00507A  0100               	movlb	0	; () banked
 25207  00507C  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25208  00507E  B4D8               	btfsc	status,2,c
 25209  005080  D07F               	goto	l2755
 25210                           
 25211                           ; BSR set to: 0
 25212                           ;octave.c: 204: static __bit once;
 25213                           ;octave.c: 206: parallel = 25;
 25214  005082  0E19               	movlw	25
 25215  005084  6FE6               	movwf	_parallel& (0+255),b
 25216                           
 25217                           ;octave.c: 209: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_M
      +                          ODE == SEVENTH){
 25218  005086  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 25219  005088  B4D8               	btfsc	status,2,c
 25220  00508A  D008               	goto	u28260
 25221                           
 25222                           ; BSR set to: 0
 25223  00508C  0E06               	movlw	6
 25224  00508E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25225  005090  B4D8               	btfsc	status,2,c
 25226  005092  D004               	goto	u28260
 25227                           
 25228                           ; BSR set to: 0
 25229  005094  0E09               	movlw	9
 25230  005096  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25231  005098  A4D8               	btfss	status,2,c
 25232  00509A  D03E               	goto	l2767
 25233  00509C                     u28260:
 25234                           
 25235                           ; BSR set to: 0
 25236                           ;octave.c: 211: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == RANDOM) || (ARPEGG
      +                          IO_TYPE == RANDOM_NON_REPEATING) && (once == 0)){
 25237                           
 25238                           ; BSR set to: 0
 25239  00509C  0E06               	movlw	6
 25240  00509E  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 25241  0050A0  B4D8               	btfsc	status,2,c
 25242  0050A2  D009               	goto	u28300
 25243                           
 25244                           ; BSR set to: 0
 25245  0050A4  0E05               	movlw	5
 25246  0050A6  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 25247  0050A8  B4D8               	btfsc	status,2,c
 25248  0050AA  D005               	goto	u28300
 25249                           
 25250                           ; BSR set to: 0
 25251  0050AC  0E04               	movlw	4
 25252  0050AE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 25253  0050B0  B4D8               	btfsc	status,2,c
 25254                           
 25255                           ; BSR set to: 0
 25256  0050B2  B432               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25257  0050B4  D005               	goto	l2761
 25258  0050B6                     u28300:
 25259                           
 25260                           ; BSR set to: 0
 25261                           ;octave.c: 212: playThisNote(ARPEGGIO[0]);
 25262                           
 25263                           ; BSR set to: 0
 25264  0050B6  0101               	movlb	1	; () banked
 25265  0050B8  5172               	movf	_ARPEGGIO& (0+255),w,b
 25266  0050BA  EC0D  F032         	call	_playThisNote
 25267                           
 25268                           ;octave.c: 213: once = 1;
 25269  0050BE  8432               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25270  0050C0                     l2761:
 25271                           
 25272                           ;octave.c: 214: }
 25273                           ;octave.c: 215: if((ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYPE == UP_DOWN) && (once == 0)){
 25274  0050C0  0100               	movlb	0	; () banked
 25275  0050C2  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 25276  0050C4  B4D8               	btfsc	status,2,c
 25277  0050C6  D005               	goto	u28330
 25278                           
 25279                           ; BSR set to: 0
 25280  0050C8  0E02               	movlw	2
 25281  0050CA  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 25282  0050CC  B4D8               	btfsc	status,2,c
 25283                           
 25284                           ; BSR set to: 0
 25285  0050CE  B432               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25286  0050D0  D005               	goto	l2764
 25287  0050D2                     u28330:
 25288                           
 25289                           ; BSR set to: 0
 25290                           ;octave.c: 216: playThisNote(ARPEGGIO_SORTED[0]);
 25291                           
 25292                           ; BSR set to: 0
 25293  0050D2  0102               	movlb	2	; () banked
 25294  0050D4  519C               	movf	_ARPEGGIO_SORTED& (0+255),w,b
 25295  0050D6  EC0D  F032         	call	_playThisNote
 25296                           
 25297                           ;octave.c: 217: once = 1;
 25298  0050DA  8432               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25299  0050DC                     l2764:
 25300                           
 25301                           ;octave.c: 218: }
 25302                           ;octave.c: 219: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP) && (once == 0))
      +                          {
 25303  0050DC  0100               	movlb	0	; () banked
 25304  0050DE  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 25305  0050E0  B4D8               	btfsc	status,2,c
 25306  0050E2  D005               	goto	u28360
 25307                           
 25308                           ; BSR set to: 0
 25309  0050E4  0E03               	movlw	3
 25310  0050E6  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 25311  0050E8  B4D8               	btfsc	status,2,c
 25312                           
 25313                           ; BSR set to: 0
 25314  0050EA  B432               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25315  0050EC  D015               	goto	l2767
 25316  0050EE                     u28360:
 25317                           
 25318                           ; BSR set to: 0
 25319                           ;octave.c: 220: playThisNote(ARPEGGIO_SORTED[NUM_NOTES_PRESSED - 1]);
 25320                           
 25321                           ; BSR set to: 0
 25322  0050EE  0EFF               	movlw	255
 25323  0050F0  6F88               	movwf	??_doTheUnLatch& (0+255),b
 25324  0050F2  0EFF               	movlw	255
 25325  0050F4  6F89               	movwf	(??_doTheUnLatch+1)& (0+255),b
 25326  0050F6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25327  0050F8  6F8A               	movwf	(??_doTheUnLatch+2)& (0+255),b
 25328  0050FA  6B8B               	clrf	(??_doTheUnLatch+3)& (0+255),b
 25329  0050FC  5188               	movf	??_doTheUnLatch& (0+255),w,b
 25330  0050FE  278A               	addwf	(??_doTheUnLatch+2)& (0+255),f,b
 25331  005100  5189               	movf	(??_doTheUnLatch+1)& (0+255),w,b
 25332  005102  238B               	addwfc	(??_doTheUnLatch+3)& (0+255),f,b
 25333  005104  0E9C               	movlw	low _ARPEGGIO_SORTED
 25334  005106  258A               	addwf	(??_doTheUnLatch+2)& (0+255),w,b
 25335  005108  6ED9               	movwf	fsr2l,c
 25336  00510A  0E02               	movlw	high _ARPEGGIO_SORTED
 25337  00510C  218B               	addwfc	(??_doTheUnLatch+3)& (0+255),w,b
 25338  00510E  6EDA               	movwf	fsr2h,c
 25339  005110  50DF               	movf	indf2,w,c
 25340  005112  EC0D  F032         	call	_playThisNote
 25341                           
 25342                           ;octave.c: 221: once = 1;
 25343  005116  8432               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25344  005118                     l2767:
 25345                           
 25346                           ;octave.c: 222: }
 25347                           ;octave.c: 223: }
 25348                           ;octave.c: 225: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_MO
      +                          DE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_TR
      +                          IAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MIN
      +                          OR
 25349  005118  0100               	movlb	0	; () banked
 25350  00511A  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 25351  00511C  B4D8               	btfsc	status,2,c
 25352  00511E  D019               	goto	u28440
 25353                           
 25354                           ; BSR set to: 0
 25355  005120  0E02               	movlw	2
 25356  005122  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25357  005124  B4D8               	btfsc	status,2,c
 25358  005126  D015               	goto	u28440
 25359                           
 25360                           ; BSR set to: 0
 25361  005128  0E03               	movlw	3
 25362  00512A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25363  00512C  B4D8               	btfsc	status,2,c
 25364  00512E  D011               	goto	u28440
 25365                           
 25366                           ; BSR set to: 0
 25367  005130  0E07               	movlw	7
 25368  005132  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25369  005134  B4D8               	btfsc	status,2,c
 25370  005136  D00D               	goto	u28440
 25371                           
 25372                           ; BSR set to: 0
 25373  005138  0E08               	movlw	8
 25374  00513A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25375  00513C  B4D8               	btfsc	status,2,c
 25376  00513E  D009               	goto	u28440
 25377                           
 25378                           ; BSR set to: 0
 25379  005140  0E0A               	movlw	10
 25380  005142  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25381  005144  B4D8               	btfsc	status,2,c
 25382  005146  D005               	goto	u28440
 25383                           
 25384                           ; BSR set to: 0
 25385  005148  0E0B               	movlw	11
 25386  00514A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25387  00514C  B4D8               	btfsc	status,2,c
 25388                           
 25389                           ; BSR set to: 0
 25390  00514E  B432               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25391  005150  D006               	goto	l2770
 25392  005152                     u28440:
 25393                           
 25394                           ; BSR set to: 0
 25395                           ;octave.c: 226: playThisNote8(0,0);
 25396                           
 25397                           ; BSR set to: 0
 25398  005152  0E00               	movlw	0
 25399  005154  6F7F               	movwf	playThisNote8@index& (0+255),b
 25400  005156  0E00               	movlw	0
 25401  005158  EC3A  F013         	call	_playThisNote8
 25402                           
 25403                           ;octave.c: 227: once = 1;
 25404  00515C  8432               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25405  00515E                     l2770:
 25406                           
 25407                           ;octave.c: 228: }
 25408                           ;octave.c: 230: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC_
      +                          MINOR) && (once == 0)){
 25409  00515E  0E04               	movlw	4
 25410  005160  0100               	movlb	0	; () banked
 25411  005162  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25412  005164  B4D8               	btfsc	status,2,c
 25413  005166  D005               	goto	u28470
 25414                           
 25415                           ; BSR set to: 0
 25416  005168  0E05               	movlw	5
 25417  00516A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25418  00516C  B4D8               	btfsc	status,2,c
 25419                           
 25420                           ; BSR set to: 0
 25421  00516E  B432               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25422  005170  D006               	goto	l2773
 25423  005172                     u28470:
 25424                           
 25425                           ; BSR set to: 0
 25426                           ;octave.c: 231: playThisNotePentatonic(0,0);
 25427                           
 25428                           ; BSR set to: 0
 25429  005172  0E00               	movlw	0
 25430  005174  6F77               	movwf	playThisNotePentatonic@index& (0+255),b
 25431  005176  0E00               	movlw	0
 25432  005178  ECE7  F029         	call	_playThisNotePentatonic
 25433                           
 25434                           ;octave.c: 232: once = 1;
 25435  00517C  8432               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25436  00517E                     l2773:
 25437                           
 25438                           ;octave.c: 233: }
 25439                           ;octave.c: 235: once = 0;
 25440  00517E  9432               	bcf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25441  005180                     l2755:
 25442                           
 25443                           ;octave.c: 236: }
 25444                           ;octave.c: 239: if((UN_LATCH_MODE == 1) && (latch_was_pressed == 1) && (NUM_NOTES_PRESSE
      +                          D > 1)){
 25445  005180  B035               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 25446  005182  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 25447  005184  D010               	goto	l2776
 25448  005186  0E01               	movlw	1
 25449  005188  0100               	movlb	0	; () banked
 25450  00518A  65E5               	cpfsgt	_NUM_NOTES_PRESSED& (0+255),b
 25451  00518C  D00C               	goto	l2776
 25452                           
 25453                           ; BSR set to: 0
 25454                           ;octave.c: 240: DISPLAY_MODE = 1;
 25455  00518E  0E01               	movlw	1
 25456  005190  6E5A               	movwf	_DISPLAY_MODE,c
 25457                           
 25458                           ; BSR set to: 0
 25459                           ;octave.c: 241: strcpy(string_to_display, " dEL");
 25460  005192  0EEE               	movlw	low _string_to_display
 25461  005194  6F60               	movwf	strcpy@to& (0+255),b
 25462  005196  0E01               	movlw	high _string_to_display
 25463  005198  6F61               	movwf	(strcpy@to+1)& (0+255),b
 25464  00519A  0EE1               	movlw	low STR_2
 25465  00519C  6F62               	movwf	strcpy@from& (0+255),b
 25466  00519E  0EFF               	movlw	high STR_2
 25467  0051A0  6F63               	movwf	(strcpy@from+1)& (0+255),b
 25468  0051A2  EC66  F049         	call	_strcpy	;wreg free
 25469  0051A6                     l2776:
 25470                           
 25471                           ;octave.c: 242: }
 25472                           ;octave.c: 246: if((UN_LATCH_MODE == 1) && (NUM_NOTES_PRESSED == 1)){
 25473  0051A6  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 25474  0051A8  D010               	goto	l2777
 25475  0051AA  0100               	movlb	0	; () banked
 25476  0051AC  05E5               	decf	_NUM_NOTES_PRESSED& (0+255),w,b
 25477  0051AE  A4D8               	btfss	status,2,c
 25478  0051B0  D00C               	goto	l2777
 25479                           
 25480                           ; BSR set to: 0
 25481                           ;octave.c: 247: DISPLAY_MODE = 1;
 25482  0051B2  0E01               	movlw	1
 25483  0051B4  6E5A               	movwf	_DISPLAY_MODE,c
 25484                           
 25485                           ; BSR set to: 0
 25486                           ;octave.c: 248: strcpy(string_to_display, "LaSt");
 25487  0051B6  0EEE               	movlw	low _string_to_display
 25488  0051B8  6F60               	movwf	strcpy@to& (0+255),b
 25489  0051BA  0E01               	movlw	high _string_to_display
 25490  0051BC  6F61               	movwf	(strcpy@to+1)& (0+255),b
 25491  0051BE  0EFA               	movlw	low STR_3
 25492  0051C0  6F62               	movwf	strcpy@from& (0+255),b
 25493  0051C2  0EFF               	movlw	high STR_3
 25494  0051C4  6F63               	movwf	(strcpy@from+1)& (0+255),b
 25495  0051C6  EC66  F049         	call	_strcpy	;wreg free
 25496  0051CA                     l2777:
 25497                           
 25498                           ;octave.c: 249: }
 25499                           ;octave.c: 253: if((AUTO_LATCH == 1) && (latch_was_pressed == 1) && ((UN_LATCH_MODE == 0
      +                          ) || (UN_LATCH_MODE == 1)) && (NUM_NOTES_PRESSED == 0)){
 25500  0051CA  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 25501  0051CC  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 25502  0051CE  D018               	goto	l2778
 25503  0051D0  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 25504  0051D2  D002               	goto	u28560
 25505  0051D4  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 25506  0051D6  D014               	goto	l2778
 25507  0051D8                     u28560:
 25508  0051D8  0100               	movlb	0	; () banked
 25509  0051DA  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25510  0051DC  A4D8               	btfss	status,2,c
 25511  0051DE  D010               	goto	l2778
 25512                           
 25513                           ; BSR set to: 0
 25514                           ;octave.c: 254: NUM_NOTES_PRESSED = 0;
 25515  0051E0  0E00               	movlw	0
 25516  0051E2  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 25517                           
 25518                           ;octave.c: 255: ARRAY_INDEX = 0;
 25519  0051E4  0E00               	movlw	0
 25520  0051E6  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 25521                           
 25522                           ;octave.c: 257: DISPLAY_MODE = 1;
 25523  0051E8  0E01               	movlw	1
 25524  0051EA  6E5A               	movwf	_DISPLAY_MODE,c
 25525                           
 25526                           ; BSR set to: 0
 25527                           ;octave.c: 258: strcpy(string_to_display, "Auto");
 25528  0051EC  0EEE               	movlw	low _string_to_display
 25529  0051EE  6F60               	movwf	strcpy@to& (0+255),b
 25530  0051F0  0E01               	movlw	high _string_to_display
 25531  0051F2  6F61               	movwf	(strcpy@to+1)& (0+255),b
 25532  0051F4  0EF0               	movlw	low STR_4
 25533  0051F6  6F62               	movwf	strcpy@from& (0+255),b
 25534  0051F8  0EFF               	movlw	high STR_4
 25535  0051FA  6F63               	movwf	(strcpy@from+1)& (0+255),b
 25536  0051FC  EC66  F049         	call	_strcpy	;wreg free
 25537  005200                     l2778:
 25538                           
 25539                           ;octave.c: 259: }
 25540                           ;octave.c: 266: if((LATCH == 0) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (NU
      +                          M_NOTES_PRESSED == 0)){
 25541  005200  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 25542  005202  0012               	return	
 25543  005204  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 25544  005206  D002               	goto	u28600
 25545  005208  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 25546  00520A  0012               	return	
 25547  00520C                     u28600:
 25548  00520C  0100               	movlb	0	; () banked
 25549  00520E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25550  005210  A4D8               	btfss	status,2,c
 25551  005212  0012               	return	
 25552                           
 25553                           ; BSR set to: 0
 25554                           ;octave.c: 267: NUM_NOTES_PRESSED = 0;
 25555  005214  0E00               	movlw	0
 25556  005216  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 25557                           
 25558                           ;octave.c: 268: ARRAY_INDEX = 0;
 25559  005218  0E00               	movlw	0
 25560  00521A  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 25561                           
 25562                           ;octave.c: 269: DISPLAY_MODE = 1;
 25563  00521C  0E01               	movlw	1
 25564  00521E  6E5A               	movwf	_DISPLAY_MODE,c
 25565                           
 25566                           ; BSR set to: 0
 25567                           ;octave.c: 270: strcpy(string_to_display, " oFF");
 25568  005220  0EEE               	movlw	low _string_to_display
 25569  005222  6F60               	movwf	strcpy@to& (0+255),b
 25570  005224  0E01               	movlw	high _string_to_display
 25571  005226  6F61               	movwf	(strcpy@to+1)& (0+255),b
 25572  005228  0EDC               	movlw	low STR_5
 25573  00522A  6F62               	movwf	strcpy@from& (0+255),b
 25574  00522C  0EFF               	movlw	high STR_5
 25575  00522E  6F63               	movwf	(strcpy@from+1)& (0+255),b
 25576  005230  EC66  F049         	call	_strcpy	;wreg free
 25577  005234  0012               	return	
 25578  005236                     __end_of_doTheUnLatch:
 25579                           	opt stack 0
 25580                           tblptru	equ	0xFF8
 25581                           tblptrh	equ	0xFF7
 25582                           tblptrl	equ	0xFF6
 25583                           tablat	equ	0xFF5
 25584                           prodh	equ	0xFF4
 25585                           prodl	equ	0xFF3
 25586                           intcon	equ	0xFF2
 25587                           intcon2	equ	0xFF1
 25588                           postinc0	equ	0xFEE
 25589                           wreg	equ	0xFE8
 25590                           indf1	equ	0xFE7
 25591                           postdec1	equ	0xFE5
 25592                           fsr1h	equ	0xFE2
 25593                           fsr1l	equ	0xFE1
 25594                           indf2	equ	0xFDF
 25595                           postinc2	equ	0xFDE
 25596                           plusw2	equ	0xFDB
 25597                           fsr2h	equ	0xFDA
 25598                           fsr2l	equ	0xFD9
 25599                           status	equ	0xFD8
 25600                           
 25601 ;; *************** function _doTheLatch *****************
 25602 ;; Defined at:
 25603 ;;		line 188 in file "octave.c"
 25604 ;; Parameters:    Size  Location     Type
 25605 ;;		None
 25606 ;; Auto vars:     Size  Location     Type
 25607 ;;		None
 25608 ;; Return value:  Size  Location     Type
 25609 ;;                  1    wreg      void 
 25610 ;; Registers used:
 25611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25612 ;; Tracked objects:
 25613 ;;		On entry : 0/0
 25614 ;;		On exit  : 0/0
 25615 ;;		Unchanged: 0/0
 25616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25621 ;;Total ram usage:        0 bytes
 25622 ;; Hardware stack levels used:    1
 25623 ;; Hardware stack levels required when called:    6
 25624 ;; This function calls:
 25625 ;;		_strcpy
 25626 ;; This function is called by:
 25627 ;;		_processOctave
 25628 ;;		_Function_H_6_1
 25629 ;; This function uses a non-reentrant model
 25630 ;;
 25631                           
 25632                           	psect	text79
 25633  009572                     __ptext79:
 25634                           	opt stack 0
 25635  009572                     _doTheLatch:
 25636                           	opt stack 20
 25637                           
 25638                           ;octave.c: 189: LATCH = 1;
 25639                           
 25640                           ;incstack = 0
 25641  009572  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 25642                           
 25643                           ;octave.c: 190: latch_was_pressed = 1;
 25644  009574  8C34               	bsf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 25645                           
 25646                           ;octave.c: 191: DISPLAY_MODE = 1;
 25647  009576  0E01               	movlw	1
 25648  009578  6E5A               	movwf	_DISPLAY_MODE,c
 25649                           
 25650                           ;octave.c: 192: strcpy(string_to_display, "HoLd");
 25651  00957A  0EEE               	movlw	low _string_to_display
 25652  00957C  0100               	movlb	0	; () banked
 25653  00957E  6F60               	movwf	strcpy@to& (0+255),b
 25654  009580  0E01               	movlw	high _string_to_display
 25655  009582  6F61               	movwf	(strcpy@to+1)& (0+255),b
 25656  009584  0EE6               	movlw	low STR_1
 25657  009586  6F62               	movwf	strcpy@from& (0+255),b
 25658  009588  0EFF               	movlw	high STR_1
 25659  00958A  6F63               	movwf	(strcpy@from+1)& (0+255),b
 25660  00958C  EC66  F049         	call	_strcpy	;wreg free
 25661  009590  0012               	return		;funcret
 25662  009592                     __end_of_doTheLatch:
 25663                           	opt stack 0
 25664                           tblptru	equ	0xFF8
 25665                           tblptrh	equ	0xFF7
 25666                           tblptrl	equ	0xFF6
 25667                           tablat	equ	0xFF5
 25668                           prodh	equ	0xFF4
 25669                           prodl	equ	0xFF3
 25670                           intcon	equ	0xFF2
 25671                           intcon2	equ	0xFF1
 25672                           postinc0	equ	0xFEE
 25673                           wreg	equ	0xFE8
 25674                           indf1	equ	0xFE7
 25675                           postdec1	equ	0xFE5
 25676                           fsr1h	equ	0xFE2
 25677                           fsr1l	equ	0xFE1
 25678                           indf2	equ	0xFDF
 25679                           postinc2	equ	0xFDE
 25680                           plusw2	equ	0xFDB
 25681                           fsr2h	equ	0xFDA
 25682                           fsr2l	equ	0xFD9
 25683                           status	equ	0xFD8
 25684                           
 25685 ;; *************** function _strcpy *****************
 25686 ;; Defined at:
 25687 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
 25688 ;; Parameters:    Size  Location     Type
 25689 ;;  to              2    0[BANK0 ] PTR unsigned char 
 25690 ;;		 -> string_to_display(5), 
 25691 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 25692 ;;		 -> STR_60(5), STR_58(5), STR_55(5), STR_53(5), 
 25693 ;;		 -> STR_43(5), STR_41(5), STR_9(5), STR_8(5), 
 25694 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
 25695 ;;		 -> STR_3(5), STR_2(5), STR_1(5), 
 25696 ;; Auto vars:     Size  Location     Type
 25697 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 25698 ;;		 -> string_to_display(5), 
 25699 ;; Return value:  Size  Location     Type
 25700 ;;                  2    0[BANK0 ] PTR unsigned char 
 25701 ;; Registers used:
 25702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 25703 ;; Tracked objects:
 25704 ;;		On entry : 0/0
 25705 ;;		On exit  : 0/0
 25706 ;;		Unchanged: 0/0
 25707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25708 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25709 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25711 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25712 ;;Total ram usage:        6 bytes
 25713 ;; Hardware stack levels used:    1
 25714 ;; Hardware stack levels required when called:    5
 25715 ;; This function calls:
 25716 ;;		Nothing
 25717 ;; This function is called by:
 25718 ;;		_doTheLatch
 25719 ;;		_doTheUnLatch
 25720 ;;		_processOctave
 25721 ;;		_displayTest
 25722 ;;		_Function_H_1
 25723 ;;		_Function_H_6_2
 25724 ;;		_Function_H_7
 25725 ;; This function uses a non-reentrant model
 25726 ;;
 25727                           
 25728                           	psect	text80
 25729  0092CC                     __ptext80:
 25730                           	opt stack 0
 25731  0092CC                     _strcpy:
 25732                           	opt stack 22
 25733                           
 25734                           ;incstack = 0
 25735  0092CC  C060  F064         	movff	strcpy@to,strcpy@cp
 25736  0092D0  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 25737  0092D4  D005               	goto	l5983
 25738  0092D6  0100               	movlb	0	; () banked
 25739  0092D8  4B64               	infsnz	strcpy@cp& (0+255),f,b
 25740  0092DA  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 25741  0092DC  4B62               	infsnz	strcpy@from& (0+255),f,b
 25742  0092DE  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 25743  0092E0                     l5983:
 25744                           
 25745                           ; BSR set to: 0
 25746  0092E0  C062  FFF6         	movff	strcpy@from,tblptrl
 25747  0092E4  C063  FFF7         	movff	strcpy@from+1,tblptrh
 25748  0092E8                     	if	0	;tblptru may be non-zero
 25749  0092E8                     	endif
 25750  0092E8                     	if	0	;tblptru may be non-zero
 25751  0092E8                     	endif
 25752  0092E8  C064  FFD9         	movff	strcpy@cp,fsr2l
 25753  0092EC  C065  FFDA         	movff	strcpy@cp+1,fsr2h
 25754  0092F0  0008               	tblrd		*
 25755  0092F2  CFF5 FFDF          	movff	tablat,indf2
 25756  0092F6  50DF               	movf	indf2,w,c
 25757  0092F8  B4D8               	btfsc	status,2,c
 25758  0092FA  0012               	return	
 25759  0092FC  D7EC               	goto	l5984
 25760  0092FE                     __end_of_strcpy:
 25761                           	opt stack 0
 25762                           tblptru	equ	0xFF8
 25763                           tblptrh	equ	0xFF7
 25764                           tblptrl	equ	0xFF6
 25765                           tablat	equ	0xFF5
 25766                           prodh	equ	0xFF4
 25767                           prodl	equ	0xFF3
 25768                           intcon	equ	0xFF2
 25769                           intcon2	equ	0xFF1
 25770                           postinc0	equ	0xFEE
 25771                           wreg	equ	0xFE8
 25772                           indf1	equ	0xFE7
 25773                           postdec1	equ	0xFE5
 25774                           fsr1h	equ	0xFE2
 25775                           fsr1l	equ	0xFE1
 25776                           indf2	equ	0xFDF
 25777                           postinc2	equ	0xFDE
 25778                           plusw2	equ	0xFDB
 25779                           fsr2h	equ	0xFDA
 25780                           fsr2l	equ	0xFD9
 25781                           status	equ	0xFD8
 25782                           
 25783 ;; *************** function ___wmul *****************
 25784 ;; Defined at:
 25785 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 25786 ;; Parameters:    Size  Location     Type
 25787 ;;  multiplier      2    4[BANK0 ] unsigned int 
 25788 ;;  multiplicand    2    6[BANK0 ] unsigned int 
 25789 ;; Auto vars:     Size  Location     Type
 25790 ;;  product         2    8[BANK0 ] unsigned int 
 25791 ;; Return value:  Size  Location     Type
 25792 ;;                  2    4[BANK0 ] unsigned int 
 25793 ;; Registers used:
 25794 ;;		wreg, status,2, status,0, prodl, prodh
 25795 ;; Tracked objects:
 25796 ;;		On entry : 0/0
 25797 ;;		On exit  : 0/0
 25798 ;;		Unchanged: 0/0
 25799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25800 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25801 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25803 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25804 ;;Total ram usage:        6 bytes
 25805 ;; Hardware stack levels used:    1
 25806 ;; Hardware stack levels required when called:    5
 25807 ;; This function calls:
 25808 ;;		Nothing
 25809 ;; This function is called by:
 25810 ;;		_processOctave
 25811 ;;		_initializeMenuArray
 25812 ;;		_menu_lcd
 25813 ;;		_Function_A_1
 25814 ;;		_Function_A_2
 25815 ;;		_Function_A_3
 25816 ;;		_Function_A
 25817 ;;		_Function_B
 25818 ;;		_Function_C_1
 25819 ;;		_Function_C_2
 25820 ;;		_Function_C_3
 25821 ;;		_Function_C
 25822 ;;		_Function_D_1
 25823 ;;		_Function_D_3
 25824 ;;		_Function_D_4
 25825 ;;		_Function_D_5
 25826 ;;		_Function_D
 25827 ;;		_Function_E
 25828 ;;		_Function_G_1
 25829 ;;		_Function_G_2
 25830 ;;		_Function_G_4
 25831 ;;		_Function_G
 25832 ;;		_Function_H
 25833 ;;		_Function_H_4
 25834 ;;		_Function_H_5
 25835 ;;		_Function_H_6
 25836 ;;		_Function_H_8
 25837 ;;		_Function_H_9_1
 25838 ;;		_Function_H_9_2
 25839 ;;		_Function_H_9_3
 25840 ;;		_Function_H_9_4
 25841 ;;		_Function_H_9
 25842 ;; This function uses a non-reentrant model
 25843 ;;
 25844                           
 25845                           	psect	text81
 25846  0094E2                     __ptext81:
 25847                           	opt stack 0
 25848  0094E2                     ___wmul:
 25849                           	opt stack 24
 25850                           
 25851                           ;incstack = 0
 25852  0094E2  0100               	movlb	0	; () banked
 25853  0094E4  5164               	movf	___wmul@multiplier& (0+255),w,b
 25854  0094E6  0366               	mulwf	___wmul@multiplicand& (0+255),b
 25855  0094E8  CFF3 F068          	movff	prodl,___wmul@product
 25856  0094EC  CFF4 F069          	movff	prodh,___wmul@product+1
 25857  0094F0  5164               	movf	___wmul@multiplier& (0+255),w,b
 25858  0094F2  0367               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 25859  0094F4  50F3               	movf	prodl,w,c
 25860  0094F6  2769               	addwf	(___wmul@product+1)& (0+255),f,b
 25861  0094F8  5165               	movf	(___wmul@multiplier+1)& (0+255),w,b
 25862  0094FA  0366               	mulwf	___wmul@multiplicand& (0+255),b
 25863  0094FC  50F3               	movf	prodl,w,c
 25864  0094FE  2769               	addwf	(___wmul@product+1)& (0+255),f,b
 25865                           
 25866                           ; BSR set to: 0
 25867  009500  C068  F064         	movff	___wmul@product,?___wmul
 25868  009504  C069  F065         	movff	___wmul@product+1,?___wmul+1
 25869  009508  0012               	return	
 25870  00950A                     __end_of___wmul:
 25871                           	opt stack 0
 25872                           tblptru	equ	0xFF8
 25873                           tblptrh	equ	0xFF7
 25874                           tblptrl	equ	0xFF6
 25875                           tablat	equ	0xFF5
 25876                           prodh	equ	0xFF4
 25877                           prodl	equ	0xFF3
 25878                           intcon	equ	0xFF2
 25879                           intcon2	equ	0xFF1
 25880                           postinc0	equ	0xFEE
 25881                           wreg	equ	0xFE8
 25882                           indf1	equ	0xFE7
 25883                           postdec1	equ	0xFE5
 25884                           fsr1h	equ	0xFE2
 25885                           fsr1l	equ	0xFE1
 25886                           indf2	equ	0xFDF
 25887                           postinc2	equ	0xFDE
 25888                           plusw2	equ	0xFDB
 25889                           fsr2h	equ	0xFDA
 25890                           fsr2l	equ	0xFD9
 25891                           status	equ	0xFD8
 25892                           
 25893 ;; *************** function _processKeyboard *****************
 25894 ;; Defined at:
 25895 ;;		line 23 in file "keyboard.c"
 25896 ;; Parameters:    Size  Location     Type
 25897 ;;		None
 25898 ;; Auto vars:     Size  Location     Type
 25899 ;;		None
 25900 ;; Return value:  Size  Location     Type
 25901 ;;                  1    wreg      void 
 25902 ;; Registers used:
 25903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25904 ;; Tracked objects:
 25905 ;;		On entry : 0/0
 25906 ;;		On exit  : 0/0
 25907 ;;		Unchanged: 0/0
 25908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25913 ;;Total ram usage:        0 bytes
 25914 ;; Hardware stack levels used:    1
 25915 ;; Hardware stack levels required when called:   13
 25916 ;; This function calls:
 25917 ;;		_keyboard_all_note_efficient
 25918 ;;		_keyboard_eight_note_efficient
 25919 ;;		_keyboard_sharps_only_efficient
 25920 ;; This function is called by:
 25921 ;;		_digitalInputs
 25922 ;; This function uses a non-reentrant model
 25923 ;;
 25924                           
 25925                           	psect	text82
 25926  00868E                     __ptext82:
 25927                           	opt stack 0
 25928  00868E                     _processKeyboard:
 25929                           	opt stack 16
 25930                           
 25931                           ;keyboard.c: 25: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_
      +                          MODE == SEVENTH) {keyboard_all_note_efficient();}
 25932                           
 25933                           ; BSR set to: 0
 25934                           ;incstack = 0
 25935  00868E  0100               	movlb	0	; () banked
 25936  008690  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 25937  008692  B4D8               	btfsc	status,2,c
 25938  008694  D007               	goto	u34310
 25939                           
 25940                           ; BSR set to: 0
 25941  008696  0E06               	movlw	6
 25942  008698  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25943  00869A  B4D8               	btfsc	status,2,c
 25944  00869C  D003               	goto	u34310
 25945                           
 25946                           ; BSR set to: 0
 25947  00869E  0E09               	movlw	9
 25948  0086A0  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25949  0086A2  B4D8               	btfsc	status,2,c
 25950  0086A4                     u34310:
 25951                           
 25952                           ; BSR set to: 0
 25953                           
 25954                           ; BSR set to: 0
 25955  0086A4  ECA6  F00B         	call	_keyboard_all_note_efficient	;wreg free
 25956                           
 25957                           ;keyboard.c: 27: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_M
      +                          ODE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_T
      +                          RIAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MI
      +                          NOR
 25958  0086A8  0100               	movlb	0	; () banked
 25959  0086AA  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 25960  0086AC  B4D8               	btfsc	status,2,c
 25961  0086AE  D017               	goto	u34380
 25962                           
 25963                           ; BSR set to: 0
 25964  0086B0  0E02               	movlw	2
 25965  0086B2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25966  0086B4  B4D8               	btfsc	status,2,c
 25967  0086B6  D013               	goto	u34380
 25968                           
 25969                           ; BSR set to: 0
 25970  0086B8  0E03               	movlw	3
 25971  0086BA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25972  0086BC  B4D8               	btfsc	status,2,c
 25973  0086BE  D00F               	goto	u34380
 25974                           
 25975                           ; BSR set to: 0
 25976  0086C0  0E07               	movlw	7
 25977  0086C2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25978  0086C4  B4D8               	btfsc	status,2,c
 25979  0086C6  D00B               	goto	u34380
 25980                           
 25981                           ; BSR set to: 0
 25982  0086C8  0E08               	movlw	8
 25983  0086CA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25984  0086CC  B4D8               	btfsc	status,2,c
 25985  0086CE  D007               	goto	u34380
 25986                           
 25987                           ; BSR set to: 0
 25988  0086D0  0E0A               	movlw	10
 25989  0086D2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25990  0086D4  B4D8               	btfsc	status,2,c
 25991  0086D6  D003               	goto	u34380
 25992                           
 25993                           ; BSR set to: 0
 25994  0086D8  0E0B               	movlw	11
 25995  0086DA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25996  0086DC  B4D8               	btfsc	status,2,c
 25997  0086DE                     u34380:
 25998                           
 25999                           ; BSR set to: 0
 26000                           
 26001                           ; BSR set to: 0
 26002  0086DE  EC4D  F015         	call	_keyboard_eight_note_efficient	;wreg free
 26003                           
 26004                           ;keyboard.c: 30: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC
      +                          _MINOR)) {keyboard_sharps_only_efficient();}
 26005  0086E2  0E04               	movlw	4
 26006  0086E4  0100               	movlb	0	; () banked
 26007  0086E6  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26008  0086E8  B4D8               	btfsc	status,2,c
 26009  0086EA  D004               	goto	u34400
 26010                           
 26011                           ; BSR set to: 0
 26012  0086EC  0E05               	movlw	5
 26013  0086EE  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26014  0086F0  A4D8               	btfss	status,2,c
 26015  0086F2  0012               	return	
 26016  0086F4                     u34400:
 26017                           
 26018                           ; BSR set to: 0
 26019                           
 26020                           ; BSR set to: 0
 26021  0086F4  EC75  F01D         	call	_keyboard_sharps_only_efficient	;wreg free
 26022  0086F8  0012               	return	
 26023  0086FA                     __end_of_processKeyboard:
 26024                           	opt stack 0
 26025                           tblptru	equ	0xFF8
 26026                           tblptrh	equ	0xFF7
 26027                           tblptrl	equ	0xFF6
 26028                           tablat	equ	0xFF5
 26029                           prodh	equ	0xFF4
 26030                           prodl	equ	0xFF3
 26031                           intcon	equ	0xFF2
 26032                           intcon2	equ	0xFF1
 26033                           postinc0	equ	0xFEE
 26034                           wreg	equ	0xFE8
 26035                           indf1	equ	0xFE7
 26036                           postdec1	equ	0xFE5
 26037                           fsr1h	equ	0xFE2
 26038                           fsr1l	equ	0xFE1
 26039                           indf2	equ	0xFDF
 26040                           postinc2	equ	0xFDE
 26041                           plusw2	equ	0xFDB
 26042                           fsr2h	equ	0xFDA
 26043                           fsr2l	equ	0xFD9
 26044                           status	equ	0xFD8
 26045                           
 26046 ;; *************** function _keyboard_sharps_only_efficient *****************
 26047 ;; Defined at:
 26048 ;;		line 140 in file "keyboard.c"
 26049 ;; Parameters:    Size  Location     Type
 26050 ;;		None
 26051 ;; Auto vars:     Size  Location     Type
 26052 ;;  index           1   30[BANK0 ] unsigned char 
 26053 ;;  pitch           1   29[BANK0 ] unsigned char 
 26054 ;; Return value:  Size  Location     Type
 26055 ;;                  1    wreg      void 
 26056 ;; Registers used:
 26057 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26058 ;; Tracked objects:
 26059 ;;		On entry : 0/0
 26060 ;;		On exit  : 0/0
 26061 ;;		Unchanged: 0/0
 26062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 26063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26064 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26066 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26067 ;;Total ram usage:        2 bytes
 26068 ;; Hardware stack levels used:    1
 26069 ;; Hardware stack levels required when called:   11
 26070 ;; This function calls:
 26071 ;;		_playThisNotePentatonic
 26072 ;; This function is called by:
 26073 ;;		_processKeyboard
 26074 ;; This function uses a non-reentrant model
 26075 ;;
 26076                           
 26077                           	psect	text83
 26078  003AEA                     __ptext83:
 26079                           	opt stack 0
 26080  003AEA                     _keyboard_sharps_only_efficient:
 26081                           	opt stack 17
 26082                           
 26083                           ;keyboard.c: 142: unsigned char pitch;
 26084                           ;keyboard.c: 143: unsigned char index;
 26085                           ;keyboard.c: 146: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2){
 26086                           
 26087                           ;incstack = 0
 26088  003AEA  0100               	movlb	0	; () banked
 26089  003AEC  B3D8               	btfsc	_button_state_now& (0+255),1,b
 26090                           
 26091                           ; BSR set to: 0
 26092  003AEE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26093  003AF0  D00E               	goto	l1358
 26094                           
 26095                           ; BSR set to: 0
 26096  003AF2  B3D0               	btfsc	_keyboard& (0+255),1,b
 26097  003AF4  D00C               	goto	l1358
 26098                           
 26099                           ; BSR set to: 0
 26100                           ;keyboard.c: 147: pitch = Cs;
 26101  003AF6  0E01               	movlw	1
 26102  003AF8  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26103                           
 26104                           ;keyboard.c: 148: index = 0;
 26105  003AFA  0E00               	movlw	0
 26106  003AFC  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26107                           
 26108                           ; BSR set to: 0
 26109                           ;keyboard.c: 149: ON_OFF = 1;
 26110  003AFE  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26111                           
 26112                           ; BSR set to: 0
 26113                           ;keyboard.c: 150: playThisNotePentatonic(pitch, index);
 26114  003B00  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26115  003B04  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26116  003B06  ECE7  F029         	call	_playThisNotePentatonic
 26117                           
 26118                           ;keyboard.c: 151: keyboard.SW2 = 1;
 26119  003B0A  0100               	movlb	0	; () banked
 26120  003B0C  83D0               	bsf	_keyboard& (0+255),1,b
 26121  003B0E                     l1358:
 26122                           
 26123                           ; BSR set to: 0
 26124                           ;keyboard.c: 152: }
 26125                           ;keyboard.c: 153: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4){
 26126                           
 26127                           ; BSR set to: 0
 26128  003B0E  B7D8               	btfsc	_button_state_now& (0+255),3,b
 26129                           
 26130                           ; BSR set to: 0
 26131  003B10  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26132  003B12  D00E               	goto	l1359
 26133                           
 26134                           ; BSR set to: 0
 26135  003B14  B7D0               	btfsc	_keyboard& (0+255),3,b
 26136  003B16  D00C               	goto	l1359
 26137                           
 26138                           ; BSR set to: 0
 26139                           ;keyboard.c: 154: pitch = Ds;
 26140  003B18  0E03               	movlw	3
 26141  003B1A  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26142                           
 26143                           ;keyboard.c: 155: index = 1;
 26144  003B1C  0E01               	movlw	1
 26145  003B1E  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26146                           
 26147                           ; BSR set to: 0
 26148                           ;keyboard.c: 156: ON_OFF = 1;
 26149  003B20  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26150                           
 26151                           ; BSR set to: 0
 26152                           ;keyboard.c: 157: playThisNotePentatonic(pitch, index);
 26153  003B22  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26154  003B26  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26155  003B28  ECE7  F029         	call	_playThisNotePentatonic
 26156                           
 26157                           ;keyboard.c: 158: keyboard.SW4 = 1;
 26158  003B2C  0100               	movlb	0	; () banked
 26159  003B2E  87D0               	bsf	_keyboard& (0+255),3,b
 26160  003B30                     l1359:
 26161                           
 26162                           ; BSR set to: 0
 26163                           ;keyboard.c: 159: }
 26164                           ;keyboard.c: 160: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7){
 26165                           
 26166                           ; BSR set to: 0
 26167  003B30  BDD8               	btfsc	_button_state_now& (0+255),6,b
 26168                           
 26169                           ; BSR set to: 0
 26170  003B32  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26171  003B34  D00E               	goto	l1360
 26172                           
 26173                           ; BSR set to: 0
 26174  003B36  BDD0               	btfsc	_keyboard& (0+255),6,b
 26175  003B38  D00C               	goto	l1360
 26176                           
 26177                           ; BSR set to: 0
 26178                           ;keyboard.c: 161: pitch = Fs;
 26179  003B3A  0E06               	movlw	6
 26180  003B3C  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26181                           
 26182                           ;keyboard.c: 162: index = 2;
 26183  003B3E  0E02               	movlw	2
 26184  003B40  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26185                           
 26186                           ; BSR set to: 0
 26187                           ;keyboard.c: 163: ON_OFF = 1;
 26188  003B42  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26189                           
 26190                           ; BSR set to: 0
 26191                           ;keyboard.c: 164: playThisNotePentatonic(pitch, index);
 26192  003B44  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26193  003B48  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26194  003B4A  ECE7  F029         	call	_playThisNotePentatonic
 26195                           
 26196                           ;keyboard.c: 165: keyboard.SW7 = 1;
 26197  003B4E  0100               	movlb	0	; () banked
 26198  003B50  8DD0               	bsf	_keyboard& (0+255),6,b
 26199  003B52                     l1360:
 26200                           
 26201                           ; BSR set to: 0
 26202                           ;keyboard.c: 166: }
 26203                           ;keyboard.c: 167: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9){
 26204                           
 26205                           ; BSR set to: 0
 26206  003B52  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 26207                           
 26208                           ; BSR set to: 0
 26209  003B54  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26210  003B56  D00E               	goto	l1361
 26211                           
 26212                           ; BSR set to: 0
 26213  003B58  B1D1               	btfsc	(_keyboard+1)& (0+255),0,b
 26214  003B5A  D00C               	goto	l1361
 26215                           
 26216                           ; BSR set to: 0
 26217                           ;keyboard.c: 168: pitch = Gs;
 26218  003B5C  0E08               	movlw	8
 26219  003B5E  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26220                           
 26221                           ;keyboard.c: 169: index = 3;
 26222  003B60  0E03               	movlw	3
 26223  003B62  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26224                           
 26225                           ; BSR set to: 0
 26226                           ;keyboard.c: 170: ON_OFF = 1;
 26227  003B64  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26228                           
 26229                           ; BSR set to: 0
 26230                           ;keyboard.c: 171: playThisNotePentatonic(pitch, index);
 26231  003B66  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26232  003B6A  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26233  003B6C  ECE7  F029         	call	_playThisNotePentatonic
 26234                           
 26235                           ;keyboard.c: 172: keyboard.SW9 = 1;
 26236  003B70  0100               	movlb	0	; () banked
 26237  003B72  81D1               	bsf	(_keyboard+1)& (0+255),0,b
 26238  003B74                     l1361:
 26239                           
 26240                           ; BSR set to: 0
 26241                           ;keyboard.c: 173: }
 26242                           ;keyboard.c: 174: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11){
 26243                           
 26244                           ; BSR set to: 0
 26245  003B74  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 26246                           
 26247                           ; BSR set to: 0
 26248  003B76  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26249  003B78  D00E               	goto	l1362
 26250                           
 26251                           ; BSR set to: 0
 26252  003B7A  B5D1               	btfsc	(_keyboard+1)& (0+255),2,b
 26253  003B7C  D00C               	goto	l1362
 26254                           
 26255                           ; BSR set to: 0
 26256                           ;keyboard.c: 175: pitch = As;
 26257  003B7E  0E0A               	movlw	10
 26258  003B80  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26259                           
 26260                           ;keyboard.c: 176: index = 4;
 26261  003B82  0E04               	movlw	4
 26262  003B84  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26263                           
 26264                           ; BSR set to: 0
 26265                           ;keyboard.c: 177: ON_OFF = 1;
 26266  003B86  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26267                           
 26268                           ; BSR set to: 0
 26269                           ;keyboard.c: 178: playThisNotePentatonic(pitch, index);
 26270  003B88  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26271  003B8C  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26272  003B8E  ECE7  F029         	call	_playThisNotePentatonic
 26273                           
 26274                           ;keyboard.c: 179: keyboard.SW11 = 1;
 26275  003B92  0100               	movlb	0	; () banked
 26276  003B94  85D1               	bsf	(_keyboard+1)& (0+255),2,b
 26277  003B96                     l1362:
 26278                           
 26279                           ; BSR set to: 0
 26280                           ;keyboard.c: 180: }
 26281                           ;keyboard.c: 182: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14){
 26282                           
 26283                           ; BSR set to: 0
 26284  003B96  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 26285                           
 26286                           ; BSR set to: 0
 26287  003B98  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26288  003B9A  D00E               	goto	l1363
 26289                           
 26290                           ; BSR set to: 0
 26291  003B9C  BBD1               	btfsc	(_keyboard+1)& (0+255),5,b
 26292  003B9E  D00C               	goto	l1363
 26293                           
 26294                           ; BSR set to: 0
 26295                           ;keyboard.c: 183: pitch = C2s;
 26296  003BA0  0E0D               	movlw	13
 26297  003BA2  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26298                           
 26299                           ;keyboard.c: 184: index = 5;
 26300  003BA4  0E05               	movlw	5
 26301  003BA6  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26302                           
 26303                           ; BSR set to: 0
 26304                           ;keyboard.c: 185: ON_OFF = 1;
 26305  003BA8  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26306                           
 26307                           ; BSR set to: 0
 26308                           ;keyboard.c: 186: playThisNotePentatonic(pitch, index);
 26309  003BAA  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26310  003BAE  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26311  003BB0  ECE7  F029         	call	_playThisNotePentatonic
 26312                           
 26313                           ;keyboard.c: 187: keyboard.SW14 = 1;
 26314  003BB4  0100               	movlb	0	; () banked
 26315  003BB6  8BD1               	bsf	(_keyboard+1)& (0+255),5,b
 26316  003BB8                     l1363:
 26317                           
 26318                           ; BSR set to: 0
 26319                           ;keyboard.c: 188: }
 26320                           ;keyboard.c: 189: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16){
 26321                           
 26322                           ; BSR set to: 0
 26323  003BB8  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 26324                           
 26325                           ; BSR set to: 0
 26326  003BBA  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26327  003BBC  D00E               	goto	l1364
 26328                           
 26329                           ; BSR set to: 0
 26330  003BBE  BFD1               	btfsc	(_keyboard+1)& (0+255),7,b
 26331  003BC0  D00C               	goto	l1364
 26332                           
 26333                           ; BSR set to: 0
 26334                           ;keyboard.c: 190: pitch = D2s;
 26335  003BC2  0E0F               	movlw	15
 26336  003BC4  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26337                           
 26338                           ;keyboard.c: 191: index = 6;
 26339  003BC6  0E06               	movlw	6
 26340  003BC8  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26341                           
 26342                           ; BSR set to: 0
 26343                           ;keyboard.c: 192: ON_OFF = 1;
 26344  003BCA  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26345                           
 26346                           ; BSR set to: 0
 26347                           ;keyboard.c: 193: playThisNotePentatonic(pitch, index);
 26348  003BCC  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26349  003BD0  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26350  003BD2  ECE7  F029         	call	_playThisNotePentatonic
 26351                           
 26352                           ;keyboard.c: 194: keyboard.SW16 = 1;
 26353  003BD6  0100               	movlb	0	; () banked
 26354  003BD8  8FD1               	bsf	(_keyboard+1)& (0+255),7,b
 26355  003BDA                     l1364:
 26356                           
 26357                           ; BSR set to: 0
 26358                           ;keyboard.c: 195: }
 26359                           ;keyboard.c: 196: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19){
 26360                           
 26361                           ; BSR set to: 0
 26362  003BDA  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 26363                           
 26364                           ; BSR set to: 0
 26365  003BDC  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26366  003BDE  D00E               	goto	l1365
 26367                           
 26368                           ; BSR set to: 0
 26369  003BE0  B5D2               	btfsc	(_keyboard+2)& (0+255),2,b
 26370  003BE2  D00C               	goto	l1365
 26371                           
 26372                           ; BSR set to: 0
 26373                           ;keyboard.c: 197: pitch = F2s;
 26374  003BE4  0E12               	movlw	18
 26375  003BE6  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26376                           
 26377                           ;keyboard.c: 198: index = 7;
 26378  003BE8  0E07               	movlw	7
 26379  003BEA  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26380                           
 26381                           ; BSR set to: 0
 26382                           ;keyboard.c: 199: ON_OFF = 1;
 26383  003BEC  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26384                           
 26385                           ; BSR set to: 0
 26386                           ;keyboard.c: 200: playThisNotePentatonic(pitch, index);
 26387  003BEE  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26388  003BF2  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26389  003BF4  ECE7  F029         	call	_playThisNotePentatonic
 26390                           
 26391                           ;keyboard.c: 201: keyboard.SW19 = 1;
 26392  003BF8  0100               	movlb	0	; () banked
 26393  003BFA  85D2               	bsf	(_keyboard+2)& (0+255),2,b
 26394  003BFC                     l1365:
 26395                           
 26396                           ; BSR set to: 0
 26397                           ;keyboard.c: 202: }
 26398                           ;keyboard.c: 203: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21){
 26399                           
 26400                           ; BSR set to: 0
 26401  003BFC  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 26402                           
 26403                           ; BSR set to: 0
 26404  003BFE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26405  003C00  D00E               	goto	l1366
 26406                           
 26407                           ; BSR set to: 0
 26408  003C02  B9D2               	btfsc	(_keyboard+2)& (0+255),4,b
 26409  003C04  D00C               	goto	l1366
 26410                           
 26411                           ; BSR set to: 0
 26412                           ;keyboard.c: 204: pitch = G2s;
 26413  003C06  0E14               	movlw	20
 26414  003C08  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26415                           
 26416                           ;keyboard.c: 205: index = 8;
 26417  003C0A  0E08               	movlw	8
 26418  003C0C  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26419                           
 26420                           ; BSR set to: 0
 26421                           ;keyboard.c: 206: ON_OFF = 1;
 26422  003C0E  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26423                           
 26424                           ; BSR set to: 0
 26425                           ;keyboard.c: 207: playThisNotePentatonic(pitch, index);
 26426  003C10  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26427  003C14  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26428  003C16  ECE7  F029         	call	_playThisNotePentatonic
 26429                           
 26430                           ;keyboard.c: 208: keyboard.SW21 = 1;
 26431  003C1A  0100               	movlb	0	; () banked
 26432  003C1C  89D2               	bsf	(_keyboard+2)& (0+255),4,b
 26433  003C1E                     l1366:
 26434                           
 26435                           ; BSR set to: 0
 26436                           ;keyboard.c: 209: }
 26437                           ;keyboard.c: 210: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23){
 26438                           
 26439                           ; BSR set to: 0
 26440  003C1E  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 26441                           
 26442                           ; BSR set to: 0
 26443  003C20  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26444  003C22  D00E               	goto	l1367
 26445                           
 26446                           ; BSR set to: 0
 26447  003C24  BDD2               	btfsc	(_keyboard+2)& (0+255),6,b
 26448  003C26  D00C               	goto	l1367
 26449                           
 26450                           ; BSR set to: 0
 26451                           ;keyboard.c: 211: pitch = A2s;
 26452  003C28  0E16               	movlw	22
 26453  003C2A  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26454                           
 26455                           ;keyboard.c: 212: index = 9;
 26456  003C2C  0E09               	movlw	9
 26457  003C2E  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26458                           
 26459                           ; BSR set to: 0
 26460                           ;keyboard.c: 213: ON_OFF = 1;
 26461  003C30  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26462                           
 26463                           ; BSR set to: 0
 26464                           ;keyboard.c: 214: playThisNotePentatonic(pitch, index);
 26465  003C32  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26466  003C36  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26467  003C38  ECE7  F029         	call	_playThisNotePentatonic
 26468                           
 26469                           ;keyboard.c: 215: keyboard.SW23 = 1;
 26470  003C3C  0100               	movlb	0	; () banked
 26471  003C3E  8DD2               	bsf	(_keyboard+2)& (0+255),6,b
 26472  003C40                     l1367:
 26473                           
 26474                           ; BSR set to: 0
 26475                           ;keyboard.c: 216: }
 26476                           ;keyboard.c: 219: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 26477                           
 26478                           ; BSR set to: 0
 26479  003C40  B3D4               	btfsc	_button_state_last& (0+255),1,b
 26480                           
 26481                           ; BSR set to: 0
 26482  003C42  B3D8               	btfsc	_button_state_now& (0+255),1,b
 26483  003C44  D00E               	goto	l1368
 26484                           
 26485                           ; BSR set to: 0
 26486  003C46  A3D0               	btfss	_keyboard& (0+255),1,b
 26487  003C48  D00C               	goto	l1368
 26488                           
 26489                           ; BSR set to: 0
 26490                           ;keyboard.c: 220: pitch = Cs;
 26491  003C4A  0E01               	movlw	1
 26492  003C4C  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26493                           
 26494                           ;keyboard.c: 221: index = 0;
 26495  003C4E  0E00               	movlw	0
 26496  003C50  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26497                           
 26498                           ; BSR set to: 0
 26499                           ;keyboard.c: 222: ON_OFF = 0;
 26500  003C52  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26501                           
 26502                           ; BSR set to: 0
 26503                           ;keyboard.c: 223: playThisNotePentatonic(pitch, index);
 26504  003C54  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26505  003C58  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26506  003C5A  ECE7  F029         	call	_playThisNotePentatonic
 26507                           
 26508                           ;keyboard.c: 224: keyboard.SW2 = 0;
 26509  003C5E  0100               	movlb	0	; () banked
 26510  003C60  93D0               	bcf	_keyboard& (0+255),1,b
 26511  003C62                     l1368:
 26512                           
 26513                           ; BSR set to: 0
 26514                           ;keyboard.c: 225: }
 26515                           ;keyboard.c: 226: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 26516                           
 26517                           ; BSR set to: 0
 26518  003C62  B7D4               	btfsc	_button_state_last& (0+255),3,b
 26519                           
 26520                           ; BSR set to: 0
 26521  003C64  B7D8               	btfsc	_button_state_now& (0+255),3,b
 26522  003C66  D00E               	goto	l1369
 26523                           
 26524                           ; BSR set to: 0
 26525  003C68  A7D0               	btfss	_keyboard& (0+255),3,b
 26526  003C6A  D00C               	goto	l1369
 26527                           
 26528                           ; BSR set to: 0
 26529                           ;keyboard.c: 227: pitch = Ds;
 26530  003C6C  0E03               	movlw	3
 26531  003C6E  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26532                           
 26533                           ;keyboard.c: 228: index = 1;
 26534  003C70  0E01               	movlw	1
 26535  003C72  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26536                           
 26537                           ; BSR set to: 0
 26538                           ;keyboard.c: 229: ON_OFF = 0;
 26539  003C74  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26540                           
 26541                           ; BSR set to: 0
 26542                           ;keyboard.c: 230: playThisNotePentatonic(pitch, index);
 26543  003C76  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26544  003C7A  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26545  003C7C  ECE7  F029         	call	_playThisNotePentatonic
 26546                           
 26547                           ;keyboard.c: 231: keyboard.SW4 = 0;
 26548  003C80  0100               	movlb	0	; () banked
 26549  003C82  97D0               	bcf	_keyboard& (0+255),3,b
 26550  003C84                     l1369:
 26551                           
 26552                           ; BSR set to: 0
 26553                           ;keyboard.c: 232: }
 26554                           ;keyboard.c: 233: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 26555                           
 26556                           ; BSR set to: 0
 26557  003C84  BDD4               	btfsc	_button_state_last& (0+255),6,b
 26558                           
 26559                           ; BSR set to: 0
 26560  003C86  BDD8               	btfsc	_button_state_now& (0+255),6,b
 26561  003C88  D00E               	goto	l1370
 26562                           
 26563                           ; BSR set to: 0
 26564  003C8A  ADD0               	btfss	_keyboard& (0+255),6,b
 26565  003C8C  D00C               	goto	l1370
 26566                           
 26567                           ; BSR set to: 0
 26568                           ;keyboard.c: 234: pitch = Fs;
 26569  003C8E  0E06               	movlw	6
 26570  003C90  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26571                           
 26572                           ;keyboard.c: 235: index = 2;
 26573  003C92  0E02               	movlw	2
 26574  003C94  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26575                           
 26576                           ; BSR set to: 0
 26577                           ;keyboard.c: 236: ON_OFF = 0;
 26578  003C96  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26579                           
 26580                           ; BSR set to: 0
 26581                           ;keyboard.c: 237: playThisNotePentatonic(pitch, index);
 26582  003C98  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26583  003C9C  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26584  003C9E  ECE7  F029         	call	_playThisNotePentatonic
 26585                           
 26586                           ;keyboard.c: 238: keyboard.SW7 = 0;
 26587  003CA2  0100               	movlb	0	; () banked
 26588  003CA4  9DD0               	bcf	_keyboard& (0+255),6,b
 26589  003CA6                     l1370:
 26590                           
 26591                           ; BSR set to: 0
 26592                           ;keyboard.c: 239: }
 26593                           ;keyboard.c: 240: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 26594                           
 26595                           ; BSR set to: 0
 26596  003CA6  B1D5               	btfsc	(_button_state_last+1)& (0+255),0,b
 26597                           
 26598                           ; BSR set to: 0
 26599  003CA8  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 26600  003CAA  D00E               	goto	l1371
 26601                           
 26602                           ; BSR set to: 0
 26603  003CAC  A1D1               	btfss	(_keyboard+1)& (0+255),0,b
 26604  003CAE  D00C               	goto	l1371
 26605                           
 26606                           ; BSR set to: 0
 26607                           ;keyboard.c: 241: pitch = Gs;
 26608  003CB0  0E08               	movlw	8
 26609  003CB2  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26610                           
 26611                           ;keyboard.c: 242: index = 3;
 26612  003CB4  0E03               	movlw	3
 26613  003CB6  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26614                           
 26615                           ; BSR set to: 0
 26616                           ;keyboard.c: 243: ON_OFF = 0;
 26617  003CB8  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26618                           
 26619                           ; BSR set to: 0
 26620                           ;keyboard.c: 244: playThisNotePentatonic(pitch, index);
 26621  003CBA  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26622  003CBE  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26623  003CC0  ECE7  F029         	call	_playThisNotePentatonic
 26624                           
 26625                           ;keyboard.c: 245: keyboard.SW9 = 0;
 26626  003CC4  0100               	movlb	0	; () banked
 26627  003CC6  91D1               	bcf	(_keyboard+1)& (0+255),0,b
 26628  003CC8                     l1371:
 26629                           
 26630                           ; BSR set to: 0
 26631                           ;keyboard.c: 246: }
 26632                           ;keyboard.c: 247: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 26633                           
 26634                           ; BSR set to: 0
 26635  003CC8  B5D5               	btfsc	(_button_state_last+1)& (0+255),2,b
 26636                           
 26637                           ; BSR set to: 0
 26638  003CCA  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 26639  003CCC  D00E               	goto	l1372
 26640                           
 26641                           ; BSR set to: 0
 26642  003CCE  A5D1               	btfss	(_keyboard+1)& (0+255),2,b
 26643  003CD0  D00C               	goto	l1372
 26644                           
 26645                           ; BSR set to: 0
 26646                           ;keyboard.c: 248: pitch = As;
 26647  003CD2  0E0A               	movlw	10
 26648  003CD4  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26649                           
 26650                           ;keyboard.c: 249: index = 4;
 26651  003CD6  0E04               	movlw	4
 26652  003CD8  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26653                           
 26654                           ; BSR set to: 0
 26655                           ;keyboard.c: 250: ON_OFF = 0;
 26656  003CDA  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26657                           
 26658                           ; BSR set to: 0
 26659                           ;keyboard.c: 251: playThisNotePentatonic(pitch, index);
 26660  003CDC  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26661  003CE0  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26662  003CE2  ECE7  F029         	call	_playThisNotePentatonic
 26663                           
 26664                           ;keyboard.c: 252: keyboard.SW11 = 0;
 26665  003CE6  0100               	movlb	0	; () banked
 26666  003CE8  95D1               	bcf	(_keyboard+1)& (0+255),2,b
 26667  003CEA                     l1372:
 26668                           
 26669                           ; BSR set to: 0
 26670                           ;keyboard.c: 253: }
 26671                           ;keyboard.c: 256: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 26672                           
 26673                           ; BSR set to: 0
 26674  003CEA  BBD5               	btfsc	(_button_state_last+1)& (0+255),5,b
 26675                           
 26676                           ; BSR set to: 0
 26677  003CEC  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 26678  003CEE  D00E               	goto	l1373
 26679                           
 26680                           ; BSR set to: 0
 26681  003CF0  ABD1               	btfss	(_keyboard+1)& (0+255),5,b
 26682  003CF2  D00C               	goto	l1373
 26683                           
 26684                           ; BSR set to: 0
 26685                           ;keyboard.c: 257: pitch = C2s;
 26686  003CF4  0E0D               	movlw	13
 26687  003CF6  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26688                           
 26689                           ;keyboard.c: 258: index = 5;
 26690  003CF8  0E05               	movlw	5
 26691  003CFA  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26692                           
 26693                           ; BSR set to: 0
 26694                           ;keyboard.c: 259: ON_OFF = 0;
 26695  003CFC  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26696                           
 26697                           ; BSR set to: 0
 26698                           ;keyboard.c: 260: playThisNotePentatonic(pitch, index);
 26699  003CFE  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26700  003D02  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26701  003D04  ECE7  F029         	call	_playThisNotePentatonic
 26702                           
 26703                           ;keyboard.c: 261: keyboard.SW14 = 0;
 26704  003D08  0100               	movlb	0	; () banked
 26705  003D0A  9BD1               	bcf	(_keyboard+1)& (0+255),5,b
 26706  003D0C                     l1373:
 26707                           
 26708                           ; BSR set to: 0
 26709                           ;keyboard.c: 262: }
 26710                           ;keyboard.c: 263: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 26711                           
 26712                           ; BSR set to: 0
 26713  003D0C  BFD5               	btfsc	(_button_state_last+1)& (0+255),7,b
 26714                           
 26715                           ; BSR set to: 0
 26716  003D0E  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 26717  003D10  D00E               	goto	l1374
 26718                           
 26719                           ; BSR set to: 0
 26720  003D12  AFD1               	btfss	(_keyboard+1)& (0+255),7,b
 26721  003D14  D00C               	goto	l1374
 26722                           
 26723                           ; BSR set to: 0
 26724                           ;keyboard.c: 264: pitch = D2s;
 26725  003D16  0E0F               	movlw	15
 26726  003D18  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26727                           
 26728                           ;keyboard.c: 265: index = 6;
 26729  003D1A  0E06               	movlw	6
 26730  003D1C  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26731                           
 26732                           ; BSR set to: 0
 26733                           ;keyboard.c: 266: ON_OFF = 0;
 26734  003D1E  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26735                           
 26736                           ; BSR set to: 0
 26737                           ;keyboard.c: 267: playThisNotePentatonic(pitch, index);
 26738  003D20  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26739  003D24  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26740  003D26  ECE7  F029         	call	_playThisNotePentatonic
 26741                           
 26742                           ;keyboard.c: 268: keyboard.SW16 = 0;
 26743  003D2A  0100               	movlb	0	; () banked
 26744  003D2C  9FD1               	bcf	(_keyboard+1)& (0+255),7,b
 26745  003D2E                     l1374:
 26746                           
 26747                           ; BSR set to: 0
 26748                           ;keyboard.c: 269: }
 26749                           ;keyboard.c: 270: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 26750                           
 26751                           ; BSR set to: 0
 26752  003D2E  B5D6               	btfsc	(_button_state_last+2)& (0+255),2,b
 26753                           
 26754                           ; BSR set to: 0
 26755  003D30  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 26756  003D32  D00E               	goto	l1375
 26757                           
 26758                           ; BSR set to: 0
 26759  003D34  A5D2               	btfss	(_keyboard+2)& (0+255),2,b
 26760  003D36  D00C               	goto	l1375
 26761                           
 26762                           ; BSR set to: 0
 26763                           ;keyboard.c: 271: pitch = F2s;
 26764  003D38  0E12               	movlw	18
 26765  003D3A  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26766                           
 26767                           ;keyboard.c: 272: index = 7;
 26768  003D3C  0E07               	movlw	7
 26769  003D3E  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26770                           
 26771                           ; BSR set to: 0
 26772                           ;keyboard.c: 273: ON_OFF = 0;
 26773  003D40  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26774                           
 26775                           ; BSR set to: 0
 26776                           ;keyboard.c: 274: playThisNotePentatonic(pitch, index);
 26777  003D42  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26778  003D46  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26779  003D48  ECE7  F029         	call	_playThisNotePentatonic
 26780                           
 26781                           ;keyboard.c: 275: keyboard.SW19 = 0;
 26782  003D4C  0100               	movlb	0	; () banked
 26783  003D4E  95D2               	bcf	(_keyboard+2)& (0+255),2,b
 26784  003D50                     l1375:
 26785                           
 26786                           ; BSR set to: 0
 26787                           ;keyboard.c: 276: }
 26788                           ;keyboard.c: 277: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 26789                           
 26790                           ; BSR set to: 0
 26791  003D50  B9D6               	btfsc	(_button_state_last+2)& (0+255),4,b
 26792                           
 26793                           ; BSR set to: 0
 26794  003D52  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 26795  003D54  D00E               	goto	l1376
 26796                           
 26797                           ; BSR set to: 0
 26798  003D56  A9D2               	btfss	(_keyboard+2)& (0+255),4,b
 26799  003D58  D00C               	goto	l1376
 26800                           
 26801                           ; BSR set to: 0
 26802                           ;keyboard.c: 278: pitch = G2s;
 26803  003D5A  0E14               	movlw	20
 26804  003D5C  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26805                           
 26806                           ;keyboard.c: 279: index = 8;
 26807  003D5E  0E08               	movlw	8
 26808  003D60  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26809                           
 26810                           ; BSR set to: 0
 26811                           ;keyboard.c: 280: ON_OFF = 0;
 26812  003D62  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26813                           
 26814                           ; BSR set to: 0
 26815                           ;keyboard.c: 281: playThisNotePentatonic(pitch, index);
 26816  003D64  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26817  003D68  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26818  003D6A  ECE7  F029         	call	_playThisNotePentatonic
 26819                           
 26820                           ;keyboard.c: 282: keyboard.SW21 = 0;
 26821  003D6E  0100               	movlb	0	; () banked
 26822  003D70  99D2               	bcf	(_keyboard+2)& (0+255),4,b
 26823  003D72                     l1376:
 26824                           
 26825                           ; BSR set to: 0
 26826                           ;keyboard.c: 283: }
 26827                           ;keyboard.c: 284: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 26828                           
 26829                           ; BSR set to: 0
 26830  003D72  ADD6               	btfss	(_button_state_last+2)& (0+255),6,b
 26831  003D74  0012               	return	
 26832                           
 26833                           ; BSR set to: 0
 26834  003D76  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 26835  003D78  0012               	return	
 26836                           
 26837                           ; BSR set to: 0
 26838  003D7A  ADD2               	btfss	(_keyboard+2)& (0+255),6,b
 26839  003D7C  0012               	return	
 26840                           
 26841                           ; BSR set to: 0
 26842                           ;keyboard.c: 285: pitch = A2s;
 26843  003D7E  0E16               	movlw	22
 26844  003D80  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26845                           
 26846                           ;keyboard.c: 286: index = 9;
 26847  003D82  0E09               	movlw	9
 26848  003D84  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26849                           
 26850                           ; BSR set to: 0
 26851                           ;keyboard.c: 287: ON_OFF = 0;
 26852  003D86  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26853                           
 26854                           ; BSR set to: 0
 26855                           ;keyboard.c: 288: playThisNotePentatonic(pitch, index);
 26856  003D88  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26857  003D8C  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26858  003D8E  ECE7  F029         	call	_playThisNotePentatonic
 26859                           
 26860                           ;keyboard.c: 289: keyboard.SW23 = 0;
 26861  003D92  0100               	movlb	0	; () banked
 26862  003D94  9DD2               	bcf	(_keyboard+2)& (0+255),6,b
 26863  003D96  0012               	return	
 26864  003D98                     __end_of_keyboard_sharps_only_efficient:
 26865                           	opt stack 0
 26866                           tblptru	equ	0xFF8
 26867                           tblptrh	equ	0xFF7
 26868                           tblptrl	equ	0xFF6
 26869                           tablat	equ	0xFF5
 26870                           prodh	equ	0xFF4
 26871                           prodl	equ	0xFF3
 26872                           intcon	equ	0xFF2
 26873                           intcon2	equ	0xFF1
 26874                           postinc0	equ	0xFEE
 26875                           wreg	equ	0xFE8
 26876                           indf1	equ	0xFE7
 26877                           postdec1	equ	0xFE5
 26878                           fsr1h	equ	0xFE2
 26879                           fsr1l	equ	0xFE1
 26880                           indf2	equ	0xFDF
 26881                           postinc2	equ	0xFDE
 26882                           plusw2	equ	0xFDB
 26883                           fsr2h	equ	0xFDA
 26884                           fsr2l	equ	0xFD9
 26885                           status	equ	0xFD8
 26886                           
 26887 ;; *************** function _playThisNotePentatonic *****************
 26888 ;; Defined at:
 26889 ;;		line 33 in file "keyboard.c"
 26890 ;; Parameters:    Size  Location     Type
 26891 ;;  pitch           1    wreg     unsigned char 
 26892 ;;  index           1   23[BANK0 ] unsigned char 
 26893 ;; Auto vars:     Size  Location     Type
 26894 ;;  pitch           1    0[COMRAM] unsigned char 
 26895 ;;  temp_pitch      1   28[BANK0 ] unsigned char 
 26896 ;; Return value:  Size  Location     Type
 26897 ;;                  1    wreg      void 
 26898 ;; Registers used:
 26899 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26900 ;; Tracked objects:
 26901 ;;		On entry : 0/0
 26902 ;;		On exit  : 0/0
 26903 ;;		Unchanged: 0/0
 26904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 26905 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26907 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26908 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26909 ;;Total ram usage:        6 bytes
 26910 ;; Hardware stack levels used:    1
 26911 ;; Hardware stack levels required when called:   10
 26912 ;; This function calls:
 26913 ;;		_add_notes_to_arpeggio
 26914 ;;		_delete_notes_from_arpeggio
 26915 ;;		_finish_arpeggio_setup
 26916 ;;		_key_press_release_note_off
 26917 ;;		_noteOff
 26918 ;;		_noteOn
 26919 ;;		_wait_one_pulse
 26920 ;; This function is called by:
 26921 ;;		_keyboard_sharps_only_efficient
 26922 ;;		_doTheUnLatch
 26923 ;; This function uses a non-reentrant model
 26924 ;;
 26925                           
 26926                           	psect	text84
 26927  0053CE                     __ptext84:
 26928                           	opt stack 0
 26929  0053CE                     _playThisNotePentatonic:
 26930                           	opt stack 15
 26931                           
 26932                           ;keyboard.c: 35: if(ARPEGGIO_ON == 0){
 26933                           
 26934                           ; BSR set to: 0
 26935                           ;incstack = 0
 26936  0053CE  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 26937  0053D0  D054               	goto	l1341
 26938                           
 26939                           ;keyboard.c: 37: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 26940  0053D2  0E04               	movlw	4
 26941  0053D4  0100               	movlb	0	; () banked
 26942  0053D6  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26943  0053D8  A4D8               	btfss	status,2,c
 26944  0053DA  D025               	goto	l1338
 26945                           
 26946                           ; BSR set to: 0
 26947                           ;keyboard.c: 38: if(ON_OFF == 1) {noteOn(channel,pentatonic_major_key[index],velocity);}
 26948  0053DC  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26949  0053DE  D010               	goto	l1337
 26950                           
 26951                           ; BSR set to: 0
 26952  0053E0  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 26953  0053E2  0D01               	mullw	1
 26954  0053E4  0E92               	movlw	low _pentatonic_major_key
 26955  0053E6  24F3               	addwf	prodl,w,c
 26956  0053E8  6EF6               	movwf	tblptrl,c
 26957  0053EA  0EF3               	movlw	high _pentatonic_major_key
 26958  0053EC  20F4               	addwfc	prodh,w,c
 26959  0053EE  6EF7               	movwf	tblptrh,c
 26960  0053F0                     	if	0	;There are less than 3 active tblptr bytes
 26961  0053F0                     	endif
 26962  0053F0  0008               	tblrd		*
 26963  0053F2  CFF5 F06E          	movff	tablat,noteOn@pitch
 26964  0053F6  C0FD  F06F         	movff	_velocity,noteOn@velocity
 26965  0053FA  51F6               	movf	_channel& (0+255),w,b
 26966  0053FC  ECE1  F044         	call	_noteOn
 26967  005400                     l1337:
 26968                           
 26969                           ;keyboard.c: 39: if(ON_OFF == 0) {noteOff(channel,pentatonic_major_key[index],velocity);
      +                          }
 26970  005400  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26971  005402  D011               	goto	l1338
 26972  005404  0100               	movlb	0	; () banked
 26973  005406  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 26974  005408  0D01               	mullw	1
 26975  00540A  0E92               	movlw	low _pentatonic_major_key
 26976  00540C  24F3               	addwf	prodl,w,c
 26977  00540E  6EF6               	movwf	tblptrl,c
 26978  005410  0EF3               	movlw	high _pentatonic_major_key
 26979  005412  20F4               	addwfc	prodh,w,c
 26980  005414  6EF7               	movwf	tblptrh,c
 26981  005416                     	if	0	;There are less than 3 active tblptr bytes
 26982  005416                     	endif
 26983  005416  0008               	tblrd		*
 26984  005418  CFF5 F06B          	movff	tablat,noteOff@pitch
 26985  00541C  C0FD  F06C         	movff	_velocity,noteOff@velocity
 26986  005420  51F6               	movf	_channel& (0+255),w,b
 26987  005422  EC08  F048         	call	_noteOff
 26988  005426                     l1338:
 26989                           
 26990                           ;keyboard.c: 40: }
 26991                           ;keyboard.c: 42: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 26992  005426  0E05               	movlw	5
 26993  005428  0100               	movlb	0	; () banked
 26994  00542A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26995  00542C  A4D8               	btfss	status,2,c
 26996  00542E  D025               	goto	l1341
 26997                           
 26998                           ; BSR set to: 0
 26999                           ;keyboard.c: 43: if(ON_OFF == 1) {noteOn(channel,pentatonic_minor_key[index],velocity);}
 27000  005430  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27001  005432  D010               	goto	l1340
 27002                           
 27003                           ; BSR set to: 0
 27004  005434  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 27005  005436  0D01               	mullw	1
 27006  005438  0E87               	movlw	low _pentatonic_minor_key
 27007  00543A  24F3               	addwf	prodl,w,c
 27008  00543C  6EF6               	movwf	tblptrl,c
 27009  00543E  0EF3               	movlw	high _pentatonic_minor_key
 27010  005440  20F4               	addwfc	prodh,w,c
 27011  005442  6EF7               	movwf	tblptrh,c
 27012  005444                     	if	0	;There are less than 3 active tblptr bytes
 27013  005444                     	endif
 27014  005444  0008               	tblrd		*
 27015  005446  CFF5 F06E          	movff	tablat,noteOn@pitch
 27016  00544A  C0FD  F06F         	movff	_velocity,noteOn@velocity
 27017  00544E  51F6               	movf	_channel& (0+255),w,b
 27018  005450  ECE1  F044         	call	_noteOn
 27019  005454                     l1340:
 27020                           
 27021                           ;keyboard.c: 44: if(ON_OFF == 0) {noteOff(channel,pentatonic_minor_key[index],velocity);
      +                          }
 27022  005454  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27023  005456  D011               	goto	l1341
 27024  005458  0100               	movlb	0	; () banked
 27025  00545A  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 27026  00545C  0D01               	mullw	1
 27027  00545E  0E87               	movlw	low _pentatonic_minor_key
 27028  005460  24F3               	addwf	prodl,w,c
 27029  005462  6EF6               	movwf	tblptrl,c
 27030  005464  0EF3               	movlw	high _pentatonic_minor_key
 27031  005466  20F4               	addwfc	prodh,w,c
 27032  005468  6EF7               	movwf	tblptrh,c
 27033  00546A                     	if	0	;There are less than 3 active tblptr bytes
 27034  00546A                     	endif
 27035  00546A  0008               	tblrd		*
 27036  00546C  CFF5 F06B          	movff	tablat,noteOff@pitch
 27037  005470  C0FD  F06C         	movff	_velocity,noteOff@velocity
 27038  005474  51F6               	movf	_channel& (0+255),w,b
 27039  005476  EC08  F048         	call	_noteOff
 27040  00547A                     l1341:
 27041                           
 27042                           ;keyboard.c: 45: }
 27043                           ;keyboard.c: 46: }
 27044                           ;keyboard.c: 49: if(ARPEGGIO_ON == 1){
 27045  00547A  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27046  00547C  0012               	return	
 27047                           
 27048                           ;keyboard.c: 51: unsigned char temp_pitch;
 27049                           ;keyboard.c: 53: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 27050  00547E  0E04               	movlw	4
 27051  005480  0100               	movlb	0	; () banked
 27052  005482  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27053  005484  A4D8               	btfss	status,2,c
 27054  005486  D00B               	goto	l1343
 27055                           
 27056                           ; BSR set to: 0
 27057                           ;keyboard.c: 54: temp_pitch = pentatonic_major_key[index];
 27058  005488  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 27059  00548A  0D01               	mullw	1
 27060  00548C  0E92               	movlw	low _pentatonic_major_key
 27061  00548E  24F3               	addwf	prodl,w,c
 27062  005490  6EF6               	movwf	tblptrl,c
 27063  005492  0EF3               	movlw	high _pentatonic_major_key
 27064  005494  20F4               	addwfc	prodh,w,c
 27065  005496  6EF7               	movwf	tblptrh,c
 27066  005498                     	if	0	;There are less than 3 active tblptr bytes
 27067  005498                     	endif
 27068  005498  0008               	tblrd		*
 27069  00549A  CFF5 F07C          	movff	tablat,playThisNotePentatonic@temp_pitch
 27070  00549E                     l1343:
 27071                           
 27072                           ; BSR set to: 0
 27073                           ;keyboard.c: 55: }
 27074                           ;keyboard.c: 57: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 27075                           
 27076                           ; BSR set to: 0
 27077  00549E  0E05               	movlw	5
 27078  0054A0  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27079  0054A2  A4D8               	btfss	status,2,c
 27080  0054A4  D00B               	goto	l1344
 27081                           
 27082                           ; BSR set to: 0
 27083                           ;keyboard.c: 58: temp_pitch = pentatonic_minor_key[index];
 27084  0054A6  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 27085  0054A8  0D01               	mullw	1
 27086  0054AA  0E87               	movlw	low _pentatonic_minor_key
 27087  0054AC  24F3               	addwf	prodl,w,c
 27088  0054AE  6EF6               	movwf	tblptrl,c
 27089  0054B0  0EF3               	movlw	high _pentatonic_minor_key
 27090  0054B2  20F4               	addwfc	prodh,w,c
 27091  0054B4  6EF7               	movwf	tblptrh,c
 27092  0054B6                     	if	0	;There are less than 3 active tblptr bytes
 27093  0054B6                     	endif
 27094  0054B6  0008               	tblrd		*
 27095  0054B8  CFF5 F07C          	movff	tablat,playThisNotePentatonic@temp_pitch
 27096  0054BC                     l1344:
 27097                           
 27098                           ; BSR set to: 0
 27099                           ;keyboard.c: 59: }
 27100                           ;keyboard.c: 61: if(ON_OFF == 1) {
 27101                           
 27102                           ; BSR set to: 0
 27103  0054BC  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27104  0054BE  D019               	goto	l1345
 27105                           
 27106                           ; BSR set to: 0
 27107                           ;keyboard.c: 64: TMR0ON = 0;
 27108  0054C0  9ED5               	bcf	4053,7,c	;volatile
 27109                           
 27110                           ;keyboard.c: 66: parallel = temp_pitch;
 27111  0054C2  C07C  F0E6         	movff	playThisNotePentatonic@temp_pitch,_parallel
 27112                           
 27113                           ; BSR set to: 0
 27114                           ;keyboard.c: 69: if(NUM_NOTES_PRESSED > 0){
 27115  0054C6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 27116  0054C8  B4D8               	btfsc	status,2,c
 27117  0054CA  D00A               	goto	l1346
 27118                           
 27119                           ; BSR set to: 0
 27120                           ;keyboard.c: 70: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 27121  0054CC  0E00               	movlw	0
 27122  0054CE  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 27123  0054D0  0E01               	movlw	1
 27124  0054D2  EC0B  F04A         	call	_wait_one_pulse
 27125                           
 27126                           ;keyboard.c: 71: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27127  0054D6  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27128  0054D8  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 27129                           
 27130                           ;keyboard.c: 72: TIMER_OVERFLOWS = 0;
 27131  0054DC  0E00               	movlw	0
 27132  0054DE  6E54               	movwf	_TIMER_OVERFLOWS,c
 27133  0054E0                     l1346:
 27134                           
 27135                           ;keyboard.c: 73: }
 27136                           ;keyboard.c: 75: add_notes_to_arpeggio(temp_pitch);
 27137  0054E0  0100               	movlb	0	; () banked
 27138  0054E2  517C               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 27139  0054E4  EC8F  F032         	call	_add_notes_to_arpeggio
 27140                           
 27141                           ;keyboard.c: 87: if(LATCH == 0) {latch_was_pressed = 0;}
 27142  0054E8  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 27143  0054EA  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27144                           
 27145                           ;keyboard.c: 90: finish_arpeggio_setup();
 27146  0054EC  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 27147                           
 27148                           ;keyboard.c: 93: TMR0ON = 1;
 27149  0054F0  8ED5               	bsf	4053,7,c	;volatile
 27150  0054F2                     l1345:
 27151                           
 27152                           ;keyboard.c: 94: }
 27153                           ;keyboard.c: 96: if((ON_OFF == 0) && (LATCH == 0)) {
 27154  0054F2  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27155  0054F4  0012               	return	
 27156  0054F6  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 27157  0054F8  0012               	return	
 27158                           
 27159                           ;keyboard.c: 99: TMR0ON = 0;
 27160  0054FA  9ED5               	bcf	4053,7,c	;volatile
 27161                           
 27162                           ;keyboard.c: 102: if(NUM_NOTES_PRESSED > 0){
 27163  0054FC  0100               	movlb	0	; () banked
 27164  0054FE  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 27165  005500  B4D8               	btfsc	status,2,c
 27166  005502  D00A               	goto	l1350
 27167                           
 27168                           ; BSR set to: 0
 27169                           ;keyboard.c: 103: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 27170  005504  0E00               	movlw	0
 27171  005506  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 27172  005508  0E01               	movlw	1
 27173  00550A  EC0B  F04A         	call	_wait_one_pulse
 27174                           
 27175                           ;keyboard.c: 104: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27176  00550E  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27177  005510  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 27178                           
 27179                           ;keyboard.c: 105: TIMER_OVERFLOWS = 0;
 27180  005514  0E00               	movlw	0
 27181  005516  6E54               	movwf	_TIMER_OVERFLOWS,c
 27182  005518                     l1350:
 27183                           
 27184                           ;keyboard.c: 106: }
 27185                           ;keyboard.c: 108: delete_notes_from_arpeggio(temp_pitch);
 27186  005518  0100               	movlb	0	; () banked
 27187  00551A  517C               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 27188  00551C  EC7F  F049         	call	_delete_notes_from_arpeggio
 27189                           
 27190                           ;keyboard.c: 118: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 27191  005520  C0E6  F078         	movff	_parallel,??_playThisNotePentatonic
 27192  005524  0100               	movlb	0	; () banked
 27193  005526  6B79               	clrf	(??_playThisNotePentatonic+1)& (0+255),b
 27194  005528  BF78               	btfsc	??_playThisNotePentatonic& (0+255),7,b
 27195  00552A  0779               	decf	(??_playThisNotePentatonic+1)& (0+255),f,b
 27196  00552C  517C               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 27197  00552E  6F7A               	movwf	(??_playThisNotePentatonic+2)& (0+255),b
 27198  005530  6B7B               	clrf	(??_playThisNotePentatonic+3)& (0+255),b
 27199  005532  5178               	movf	??_playThisNotePentatonic& (0+255),w,b
 27200  005534  197A               	xorwf	(??_playThisNotePentatonic+2)& (0+255),w,b
 27201  005536  E106               	bnz	l17185
 27202  005538  5179               	movf	(??_playThisNotePentatonic+1)& (0+255),w,b
 27203  00553A  197B               	xorwf	(??_playThisNotePentatonic+3)& (0+255),w,b
 27204  00553C  A4D8               	btfss	status,2,c
 27205  00553E  D002               	goto	l1352
 27206                           
 27207                           ; BSR set to: 0
 27208  005540  0E00               	movlw	0
 27209  005542  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 27210  005544                     l1352:
 27211  005544                     l17185:
 27212                           
 27213                           ; BSR set to: 0
 27214                           ;keyboard.c: 121: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 27215  005544  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 27216                           
 27217                           ; BSR set to: 0
 27218  005546  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27219  005548  D001               	goto	l1353
 27220                           
 27221                           ; BSR set to: 0
 27222                           ;keyboard.c: 122: LATCH = 1;
 27223  00554A  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 27224  00554C                     l1353:
 27225                           
 27226                           ; BSR set to: 0
 27227                           ;keyboard.c: 123: }
 27228                           ;keyboard.c: 126: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 27229  00554C  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27230                           
 27231                           ; BSR set to: 0
 27232  00554E  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27233  005550  D004               	goto	l1354
 27234                           
 27235                           ; BSR set to: 0
 27236                           ;keyboard.c: 127: NUM_NOTES_PRESSED = 0;
 27237  005552  0E00               	movlw	0
 27238  005554  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 27239                           
 27240                           ;keyboard.c: 128: ARRAY_INDEX = 0;
 27241  005556  0E00               	movlw	0
 27242  005558  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 27243  00555A                     l1354:
 27244                           
 27245                           ; BSR set to: 0
 27246                           ;keyboard.c: 129: }
 27247                           ;keyboard.c: 132: finish_arpeggio_setup();
 27248                           
 27249                           ; BSR set to: 0
 27250  00555A  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 27251                           
 27252                           ;keyboard.c: 135: TMR0ON = 1;
 27253  00555E  8ED5               	bsf	4053,7,c	;volatile
 27254  005560  0012               	return	
 27255  005562                     __end_of_playThisNotePentatonic:
 27256                           	opt stack 0
 27257                           tblptru	equ	0xFF8
 27258                           tblptrh	equ	0xFF7
 27259                           tblptrl	equ	0xFF6
 27260                           tablat	equ	0xFF5
 27261                           prodh	equ	0xFF4
 27262                           prodl	equ	0xFF3
 27263                           intcon	equ	0xFF2
 27264                           intcon2	equ	0xFF1
 27265                           postinc0	equ	0xFEE
 27266                           wreg	equ	0xFE8
 27267                           indf1	equ	0xFE7
 27268                           postdec1	equ	0xFE5
 27269                           fsr1h	equ	0xFE2
 27270                           fsr1l	equ	0xFE1
 27271                           indf2	equ	0xFDF
 27272                           postinc2	equ	0xFDE
 27273                           plusw2	equ	0xFDB
 27274                           fsr2h	equ	0xFDA
 27275                           fsr2l	equ	0xFD9
 27276                           status	equ	0xFD8
 27277                           
 27278 ;; *************** function _keyboard_eight_note_efficient *****************
 27279 ;; Defined at:
 27280 ;;		line 1354 in file "keyboard.c"
 27281 ;; Parameters:    Size  Location     Type
 27282 ;;		None
 27283 ;; Auto vars:     Size  Location     Type
 27284 ;;  index           1   41[BANK0 ] unsigned char 
 27285 ;;  pitch           1   40[BANK0 ] unsigned char 
 27286 ;; Return value:  Size  Location     Type
 27287 ;;                  1    wreg      void 
 27288 ;; Registers used:
 27289 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27290 ;; Tracked objects:
 27291 ;;		On entry : 0/0
 27292 ;;		On exit  : 0/0
 27293 ;;		Unchanged: 0/0
 27294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27296 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27298 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27299 ;;Total ram usage:        2 bytes
 27300 ;; Hardware stack levels used:    1
 27301 ;; Hardware stack levels required when called:   12
 27302 ;; This function calls:
 27303 ;;		_playThisNote8
 27304 ;; This function is called by:
 27305 ;;		_processKeyboard
 27306 ;; This function uses a non-reentrant model
 27307 ;;
 27308                           
 27309                           	psect	text85
 27310  002A9A                     __ptext85:
 27311                           	opt stack 0
 27312  002A9A                     _keyboard_eight_note_efficient:
 27313                           	opt stack 16
 27314                           
 27315                           ;keyboard.c: 1356: unsigned char pitch;
 27316                           ;keyboard.c: 1357: unsigned char index;
 27317                           ;keyboard.c: 1360: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW1){
 27318                           
 27319                           ;incstack = 0
 27320  002A9A  0100               	movlb	0	; () banked
 27321  002A9C  B1D8               	btfsc	_button_state_now& (0+255),0,b
 27322                           
 27323                           ; BSR set to: 0
 27324  002A9E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27325  002AA0  D00E               	goto	l1679
 27326                           
 27327                           ; BSR set to: 0
 27328  002AA2  B1D0               	btfsc	_keyboard& (0+255),0,b
 27329  002AA4  D00C               	goto	l1679
 27330                           
 27331                           ; BSR set to: 0
 27332                           ;keyboard.c: 1361: pitch = C;
 27333  002AA6  0E00               	movlw	0
 27334  002AA8  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27335                           
 27336                           ;keyboard.c: 1362: index = 0;
 27337  002AAA  0E00               	movlw	0
 27338  002AAC  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27339                           
 27340                           ; BSR set to: 0
 27341                           ;keyboard.c: 1363: ON_OFF = 1;
 27342  002AAE  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27343                           
 27344                           ; BSR set to: 0
 27345                           ;keyboard.c: 1364: playThisNote8(pitch, index);
 27346  002AB0  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27347  002AB4  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27348  002AB6  EC3A  F013         	call	_playThisNote8
 27349                           
 27350                           ;keyboard.c: 1365: keyboard.SW1 = 1;
 27351  002ABA  0100               	movlb	0	; () banked
 27352  002ABC  81D0               	bsf	_keyboard& (0+255),0,b
 27353  002ABE                     l1679:
 27354                           
 27355                           ; BSR set to: 0
 27356                           ;keyboard.c: 1366: }
 27357                           ;keyboard.c: 1367: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW3){
 27358                           
 27359                           ; BSR set to: 0
 27360  002ABE  B5D8               	btfsc	_button_state_now& (0+255),2,b
 27361                           
 27362                           ; BSR set to: 0
 27363  002AC0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27364  002AC2  D00E               	goto	l1680
 27365                           
 27366                           ; BSR set to: 0
 27367  002AC4  B5D0               	btfsc	_keyboard& (0+255),2,b
 27368  002AC6  D00C               	goto	l1680
 27369                           
 27370                           ; BSR set to: 0
 27371                           ;keyboard.c: 1368: pitch = D;
 27372  002AC8  0E02               	movlw	2
 27373  002ACA  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27374                           
 27375                           ;keyboard.c: 1369: index = 1;
 27376  002ACC  0E01               	movlw	1
 27377  002ACE  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27378                           
 27379                           ; BSR set to: 0
 27380                           ;keyboard.c: 1370: ON_OFF = 1;
 27381  002AD0  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27382                           
 27383                           ; BSR set to: 0
 27384                           ;keyboard.c: 1371: playThisNote8(pitch, index);
 27385  002AD2  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27386  002AD6  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27387  002AD8  EC3A  F013         	call	_playThisNote8
 27388                           
 27389                           ;keyboard.c: 1372: keyboard.SW3 = 1;
 27390  002ADC  0100               	movlb	0	; () banked
 27391  002ADE  85D0               	bsf	_keyboard& (0+255),2,b
 27392  002AE0                     l1680:
 27393                           
 27394                           ; BSR set to: 0
 27395                           ;keyboard.c: 1373: }
 27396                           ;keyboard.c: 1374: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW5){
 27397                           
 27398                           ; BSR set to: 0
 27399  002AE0  B9D8               	btfsc	_button_state_now& (0+255),4,b
 27400                           
 27401                           ; BSR set to: 0
 27402  002AE2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27403  002AE4  D00E               	goto	l1681
 27404                           
 27405                           ; BSR set to: 0
 27406  002AE6  B9D0               	btfsc	_keyboard& (0+255),4,b
 27407  002AE8  D00C               	goto	l1681
 27408                           
 27409                           ; BSR set to: 0
 27410                           ;keyboard.c: 1375: pitch = E;
 27411  002AEA  0E04               	movlw	4
 27412  002AEC  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27413                           
 27414                           ;keyboard.c: 1376: index = 2;
 27415  002AEE  0E02               	movlw	2
 27416  002AF0  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27417                           
 27418                           ; BSR set to: 0
 27419                           ;keyboard.c: 1377: ON_OFF = 1;
 27420  002AF2  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27421                           
 27422                           ; BSR set to: 0
 27423                           ;keyboard.c: 1378: playThisNote8(pitch, index);
 27424  002AF4  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27425  002AF8  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27426  002AFA  EC3A  F013         	call	_playThisNote8
 27427                           
 27428                           ;keyboard.c: 1379: keyboard.SW5 = 5;
 27429  002AFE  0100               	movlb	0	; () banked
 27430  002B00  89D0               	bsf	_keyboard& (0+255),4,b
 27431  002B02                     l1681:
 27432                           
 27433                           ; BSR set to: 0
 27434                           ;keyboard.c: 1380: }
 27435                           ;keyboard.c: 1381: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW6){
 27436                           
 27437                           ; BSR set to: 0
 27438  002B02  BBD8               	btfsc	_button_state_now& (0+255),5,b
 27439                           
 27440                           ; BSR set to: 0
 27441  002B04  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27442  002B06  D00E               	goto	l1682
 27443                           
 27444                           ; BSR set to: 0
 27445  002B08  BBD0               	btfsc	_keyboard& (0+255),5,b
 27446  002B0A  D00C               	goto	l1682
 27447                           
 27448                           ; BSR set to: 0
 27449                           ;keyboard.c: 1382: pitch = F;
 27450  002B0C  0E05               	movlw	5
 27451  002B0E  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27452                           
 27453                           ;keyboard.c: 1383: index = 3;
 27454  002B10  0E03               	movlw	3
 27455  002B12  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27456                           
 27457                           ; BSR set to: 0
 27458                           ;keyboard.c: 1384: ON_OFF = 1;
 27459  002B14  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27460                           
 27461                           ; BSR set to: 0
 27462                           ;keyboard.c: 1385: playThisNote8(pitch, index);
 27463  002B16  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27464  002B1A  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27465  002B1C  EC3A  F013         	call	_playThisNote8
 27466                           
 27467                           ;keyboard.c: 1386: keyboard.SW6 = 1;
 27468  002B20  0100               	movlb	0	; () banked
 27469  002B22  8BD0               	bsf	_keyboard& (0+255),5,b
 27470  002B24                     l1682:
 27471                           
 27472                           ; BSR set to: 0
 27473                           ;keyboard.c: 1387: }
 27474                           ;keyboard.c: 1388: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW8){
 27475                           
 27476                           ; BSR set to: 0
 27477  002B24  BFD8               	btfsc	_button_state_now& (0+255),7,b
 27478                           
 27479                           ; BSR set to: 0
 27480  002B26  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27481  002B28  D00E               	goto	l1683
 27482                           
 27483                           ; BSR set to: 0
 27484  002B2A  BFD0               	btfsc	_keyboard& (0+255),7,b
 27485  002B2C  D00C               	goto	l1683
 27486                           
 27487                           ; BSR set to: 0
 27488                           ;keyboard.c: 1389: pitch = G;
 27489  002B2E  0E07               	movlw	7
 27490  002B30  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27491                           
 27492                           ;keyboard.c: 1390: index = 4;
 27493  002B32  0E04               	movlw	4
 27494  002B34  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27495                           
 27496                           ; BSR set to: 0
 27497                           ;keyboard.c: 1391: ON_OFF = 1;
 27498  002B36  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27499                           
 27500                           ; BSR set to: 0
 27501                           ;keyboard.c: 1392: playThisNote8(pitch, index);
 27502  002B38  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27503  002B3C  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27504  002B3E  EC3A  F013         	call	_playThisNote8
 27505                           
 27506                           ;keyboard.c: 1393: keyboard.SW8 = 1;
 27507  002B42  0100               	movlb	0	; () banked
 27508  002B44  8FD0               	bsf	_keyboard& (0+255),7,b
 27509  002B46                     l1683:
 27510                           
 27511                           ; BSR set to: 0
 27512                           ;keyboard.c: 1394: }
 27513                           ;keyboard.c: 1395: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW10){
 27514                           
 27515                           ; BSR set to: 0
 27516  002B46  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 27517                           
 27518                           ; BSR set to: 0
 27519  002B48  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27520  002B4A  D00E               	goto	l1684
 27521                           
 27522                           ; BSR set to: 0
 27523  002B4C  B3D1               	btfsc	(_keyboard+1)& (0+255),1,b
 27524  002B4E  D00C               	goto	l1684
 27525                           
 27526                           ; BSR set to: 0
 27527                           ;keyboard.c: 1396: pitch = A;
 27528  002B50  0E09               	movlw	9
 27529  002B52  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27530                           
 27531                           ;keyboard.c: 1397: index = 5;
 27532  002B54  0E05               	movlw	5
 27533  002B56  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27534                           
 27535                           ; BSR set to: 0
 27536                           ;keyboard.c: 1398: ON_OFF = 1;
 27537  002B58  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27538                           
 27539                           ; BSR set to: 0
 27540                           ;keyboard.c: 1399: playThisNote8(pitch, index);
 27541  002B5A  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27542  002B5E  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27543  002B60  EC3A  F013         	call	_playThisNote8
 27544                           
 27545                           ;keyboard.c: 1400: keyboard.SW10 = 1;
 27546  002B64  0100               	movlb	0	; () banked
 27547  002B66  83D1               	bsf	(_keyboard+1)& (0+255),1,b
 27548  002B68                     l1684:
 27549                           
 27550                           ; BSR set to: 0
 27551                           ;keyboard.c: 1401: }
 27552                           ;keyboard.c: 1402: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW12){
 27553                           
 27554                           ; BSR set to: 0
 27555  002B68  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 27556                           
 27557                           ; BSR set to: 0
 27558  002B6A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27559  002B6C  D00E               	goto	l1685
 27560                           
 27561                           ; BSR set to: 0
 27562  002B6E  B7D1               	btfsc	(_keyboard+1)& (0+255),3,b
 27563  002B70  D00C               	goto	l1685
 27564                           
 27565                           ; BSR set to: 0
 27566                           ;keyboard.c: 1403: pitch = B;
 27567  002B72  0E0B               	movlw	11
 27568  002B74  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27569                           
 27570                           ;keyboard.c: 1404: index = 6;
 27571  002B76  0E06               	movlw	6
 27572  002B78  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27573                           
 27574                           ; BSR set to: 0
 27575                           ;keyboard.c: 1405: ON_OFF = 1;
 27576  002B7A  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27577                           
 27578                           ; BSR set to: 0
 27579                           ;keyboard.c: 1406: playThisNote8(pitch, index);
 27580  002B7C  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27581  002B80  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27582  002B82  EC3A  F013         	call	_playThisNote8
 27583                           
 27584                           ;keyboard.c: 1407: keyboard.SW12 = 1;
 27585  002B86  0100               	movlb	0	; () banked
 27586  002B88  87D1               	bsf	(_keyboard+1)& (0+255),3,b
 27587  002B8A                     l1685:
 27588                           
 27589                           ; BSR set to: 0
 27590                           ;keyboard.c: 1408: }
 27591                           ;keyboard.c: 1409: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW13){
 27592                           
 27593                           ; BSR set to: 0
 27594  002B8A  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 27595                           
 27596                           ; BSR set to: 0
 27597  002B8C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27598  002B8E  D00E               	goto	l1686
 27599                           
 27600                           ; BSR set to: 0
 27601  002B90  B9D1               	btfsc	(_keyboard+1)& (0+255),4,b
 27602  002B92  D00C               	goto	l1686
 27603                           
 27604                           ; BSR set to: 0
 27605                           ;keyboard.c: 1410: pitch = C2;
 27606  002B94  0E0C               	movlw	12
 27607  002B96  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27608                           
 27609                           ;keyboard.c: 1411: index = 7;
 27610  002B98  0E07               	movlw	7
 27611  002B9A  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27612                           
 27613                           ; BSR set to: 0
 27614                           ;keyboard.c: 1412: ON_OFF = 1;
 27615  002B9C  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27616                           
 27617                           ; BSR set to: 0
 27618                           ;keyboard.c: 1413: playThisNote8(pitch, index);
 27619  002B9E  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27620  002BA2  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27621  002BA4  EC3A  F013         	call	_playThisNote8
 27622                           
 27623                           ;keyboard.c: 1414: keyboard.SW13 = 1;
 27624  002BA8  0100               	movlb	0	; () banked
 27625  002BAA  89D1               	bsf	(_keyboard+1)& (0+255),4,b
 27626  002BAC                     l1686:
 27627                           
 27628                           ; BSR set to: 0
 27629                           ;keyboard.c: 1415: }
 27630                           ;keyboard.c: 1416: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW15){
 27631                           
 27632                           ; BSR set to: 0
 27633  002BAC  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 27634                           
 27635                           ; BSR set to: 0
 27636  002BAE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27637  002BB0  D00E               	goto	l1687
 27638                           
 27639                           ; BSR set to: 0
 27640  002BB2  BDD1               	btfsc	(_keyboard+1)& (0+255),6,b
 27641  002BB4  D00C               	goto	l1687
 27642                           
 27643                           ; BSR set to: 0
 27644                           ;keyboard.c: 1417: pitch = D2;
 27645  002BB6  0E0E               	movlw	14
 27646  002BB8  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27647                           
 27648                           ;keyboard.c: 1418: index = 8;
 27649  002BBA  0E08               	movlw	8
 27650  002BBC  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27651                           
 27652                           ; BSR set to: 0
 27653                           ;keyboard.c: 1419: ON_OFF = 1;
 27654  002BBE  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27655                           
 27656                           ; BSR set to: 0
 27657                           ;keyboard.c: 1420: playThisNote8(pitch, index);
 27658  002BC0  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27659  002BC4  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27660  002BC6  EC3A  F013         	call	_playThisNote8
 27661                           
 27662                           ;keyboard.c: 1421: keyboard.SW15 = 1;
 27663  002BCA  0100               	movlb	0	; () banked
 27664  002BCC  8DD1               	bsf	(_keyboard+1)& (0+255),6,b
 27665  002BCE                     l1687:
 27666                           
 27667                           ; BSR set to: 0
 27668                           ;keyboard.c: 1422: }
 27669                           ;keyboard.c: 1423: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW17){
 27670                           
 27671                           ; BSR set to: 0
 27672  002BCE  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 27673                           
 27674                           ; BSR set to: 0
 27675  002BD0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27676  002BD2  D00E               	goto	l1688
 27677                           
 27678                           ; BSR set to: 0
 27679  002BD4  B1D2               	btfsc	(_keyboard+2)& (0+255),0,b
 27680  002BD6  D00C               	goto	l1688
 27681                           
 27682                           ; BSR set to: 0
 27683                           ;keyboard.c: 1424: pitch = E2;
 27684  002BD8  0E10               	movlw	16
 27685  002BDA  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27686                           
 27687                           ;keyboard.c: 1425: index = 9;
 27688  002BDC  0E09               	movlw	9
 27689  002BDE  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27690                           
 27691                           ; BSR set to: 0
 27692                           ;keyboard.c: 1426: ON_OFF = 1;
 27693  002BE0  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27694                           
 27695                           ; BSR set to: 0
 27696                           ;keyboard.c: 1427: playThisNote8(pitch, index);
 27697  002BE2  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27698  002BE6  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27699  002BE8  EC3A  F013         	call	_playThisNote8
 27700                           
 27701                           ;keyboard.c: 1428: keyboard.SW17 = 1;
 27702  002BEC  0100               	movlb	0	; () banked
 27703  002BEE  81D2               	bsf	(_keyboard+2)& (0+255),0,b
 27704  002BF0                     l1688:
 27705                           
 27706                           ; BSR set to: 0
 27707                           ;keyboard.c: 1429: }
 27708                           ;keyboard.c: 1430: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW18){
 27709                           
 27710                           ; BSR set to: 0
 27711  002BF0  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 27712                           
 27713                           ; BSR set to: 0
 27714  002BF2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27715  002BF4  D00E               	goto	l1689
 27716                           
 27717                           ; BSR set to: 0
 27718  002BF6  B3D2               	btfsc	(_keyboard+2)& (0+255),1,b
 27719  002BF8  D00C               	goto	l1689
 27720                           
 27721                           ; BSR set to: 0
 27722                           ;keyboard.c: 1431: pitch = F2;
 27723  002BFA  0E11               	movlw	17
 27724  002BFC  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27725                           
 27726                           ;keyboard.c: 1432: index = 10;
 27727  002BFE  0E0A               	movlw	10
 27728  002C00  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27729                           
 27730                           ; BSR set to: 0
 27731                           ;keyboard.c: 1433: ON_OFF = 1;
 27732  002C02  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27733                           
 27734                           ; BSR set to: 0
 27735                           ;keyboard.c: 1434: playThisNote8(pitch, index);
 27736  002C04  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27737  002C08  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27738  002C0A  EC3A  F013         	call	_playThisNote8
 27739                           
 27740                           ;keyboard.c: 1435: keyboard.SW18 = 1;
 27741  002C0E  0100               	movlb	0	; () banked
 27742  002C10  83D2               	bsf	(_keyboard+2)& (0+255),1,b
 27743  002C12                     l1689:
 27744                           
 27745                           ; BSR set to: 0
 27746                           ;keyboard.c: 1436: }
 27747                           ;keyboard.c: 1437: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW20){
 27748                           
 27749                           ; BSR set to: 0
 27750  002C12  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 27751                           
 27752                           ; BSR set to: 0
 27753  002C14  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27754  002C16  D00E               	goto	l1690
 27755                           
 27756                           ; BSR set to: 0
 27757  002C18  B7D2               	btfsc	(_keyboard+2)& (0+255),3,b
 27758  002C1A  D00C               	goto	l1690
 27759                           
 27760                           ; BSR set to: 0
 27761                           ;keyboard.c: 1438: pitch = G2;
 27762  002C1C  0E13               	movlw	19
 27763  002C1E  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27764                           
 27765                           ;keyboard.c: 1439: index = 11;
 27766  002C20  0E0B               	movlw	11
 27767  002C22  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27768                           
 27769                           ; BSR set to: 0
 27770                           ;keyboard.c: 1440: ON_OFF = 1;
 27771  002C24  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27772                           
 27773                           ; BSR set to: 0
 27774                           ;keyboard.c: 1441: playThisNote8(pitch, index);
 27775  002C26  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27776  002C2A  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27777  002C2C  EC3A  F013         	call	_playThisNote8
 27778                           
 27779                           ;keyboard.c: 1442: keyboard.SW20 = 1;
 27780  002C30  0100               	movlb	0	; () banked
 27781  002C32  87D2               	bsf	(_keyboard+2)& (0+255),3,b
 27782  002C34                     l1690:
 27783                           
 27784                           ; BSR set to: 0
 27785                           ;keyboard.c: 1443: }
 27786                           ;keyboard.c: 1444: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW22){
 27787                           
 27788                           ; BSR set to: 0
 27789  002C34  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 27790                           
 27791                           ; BSR set to: 0
 27792  002C36  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27793  002C38  D00E               	goto	l1691
 27794                           
 27795                           ; BSR set to: 0
 27796  002C3A  BBD2               	btfsc	(_keyboard+2)& (0+255),5,b
 27797  002C3C  D00C               	goto	l1691
 27798                           
 27799                           ; BSR set to: 0
 27800                           ;keyboard.c: 1445: pitch = A2;
 27801  002C3E  0E15               	movlw	21
 27802  002C40  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27803                           
 27804                           ;keyboard.c: 1446: index = 12;
 27805  002C42  0E0C               	movlw	12
 27806  002C44  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27807                           
 27808                           ; BSR set to: 0
 27809                           ;keyboard.c: 1447: ON_OFF = 1;
 27810  002C46  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27811                           
 27812                           ; BSR set to: 0
 27813                           ;keyboard.c: 1448: playThisNote8(pitch, index);
 27814  002C48  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27815  002C4C  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27816  002C4E  EC3A  F013         	call	_playThisNote8
 27817                           
 27818                           ;keyboard.c: 1449: keyboard.SW22 = 1;
 27819  002C52  0100               	movlb	0	; () banked
 27820  002C54  8BD2               	bsf	(_keyboard+2)& (0+255),5,b
 27821  002C56                     l1691:
 27822                           
 27823                           ; BSR set to: 0
 27824                           ;keyboard.c: 1450: }
 27825                           ;keyboard.c: 1451: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW24){
 27826                           
 27827                           ; BSR set to: 0
 27828  002C56  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 27829                           
 27830                           ; BSR set to: 0
 27831  002C58  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27832  002C5A  D00E               	goto	l1692
 27833                           
 27834                           ; BSR set to: 0
 27835  002C5C  BFD2               	btfsc	(_keyboard+2)& (0+255),7,b
 27836  002C5E  D00C               	goto	l1692
 27837                           
 27838                           ; BSR set to: 0
 27839                           ;keyboard.c: 1452: pitch = B2;
 27840  002C60  0E17               	movlw	23
 27841  002C62  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27842                           
 27843                           ;keyboard.c: 1453: index = 13;
 27844  002C64  0E0D               	movlw	13
 27845  002C66  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27846                           
 27847                           ; BSR set to: 0
 27848                           ;keyboard.c: 1454: ON_OFF = 1;
 27849  002C68  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27850                           
 27851                           ; BSR set to: 0
 27852                           ;keyboard.c: 1455: playThisNote8(pitch, index);
 27853  002C6A  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27854  002C6E  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27855  002C70  EC3A  F013         	call	_playThisNote8
 27856                           
 27857                           ;keyboard.c: 1456: keyboard.SW24 = 1;
 27858  002C74  0100               	movlb	0	; () banked
 27859  002C76  8FD2               	bsf	(_keyboard+2)& (0+255),7,b
 27860  002C78                     l1692:
 27861                           
 27862                           ; BSR set to: 0
 27863                           ;keyboard.c: 1457: }
 27864                           ;keyboard.c: 1458: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW25){
 27865                           
 27866                           ; BSR set to: 0
 27867  002C78  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 27868                           
 27869                           ; BSR set to: 0
 27870  002C7A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27871  002C7C  D00E               	goto	l1693
 27872                           
 27873                           ; BSR set to: 0
 27874  002C7E  B1D3               	btfsc	(_keyboard+3)& (0+255),0,b
 27875  002C80  D00C               	goto	l1693
 27876                           
 27877                           ; BSR set to: 0
 27878                           ;keyboard.c: 1459: pitch = C3;
 27879  002C82  0E18               	movlw	24
 27880  002C84  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27881                           
 27882                           ;keyboard.c: 1460: index = 14;
 27883  002C86  0E0E               	movlw	14
 27884  002C88  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27885                           
 27886                           ; BSR set to: 0
 27887                           ;keyboard.c: 1461: ON_OFF = 1;
 27888  002C8A  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27889                           
 27890                           ; BSR set to: 0
 27891                           ;keyboard.c: 1462: playThisNote8(pitch, index);
 27892  002C8C  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27893  002C90  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27894  002C92  EC3A  F013         	call	_playThisNote8
 27895                           
 27896                           ;keyboard.c: 1463: keyboard.SW25 = 1;
 27897  002C96  0100               	movlb	0	; () banked
 27898  002C98  81D3               	bsf	(_keyboard+3)& (0+255),0,b
 27899  002C9A                     l1693:
 27900                           
 27901                           ; BSR set to: 0
 27902                           ;keyboard.c: 1464: }
 27903                           ;keyboard.c: 1467: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x00000
      +                          001) == 0) && keyboard.SW1) {
 27904                           
 27905                           ; BSR set to: 0
 27906  002C9A  B1D4               	btfsc	_button_state_last& (0+255),0,b
 27907                           
 27908                           ; BSR set to: 0
 27909  002C9C  B1D8               	btfsc	_button_state_now& (0+255),0,b
 27910  002C9E  D00E               	goto	l1694
 27911                           
 27912                           ; BSR set to: 0
 27913  002CA0  A1D0               	btfss	_keyboard& (0+255),0,b
 27914  002CA2  D00C               	goto	l1694
 27915                           
 27916                           ; BSR set to: 0
 27917                           ;keyboard.c: 1468: pitch = C;
 27918  002CA4  0E00               	movlw	0
 27919  002CA6  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27920                           
 27921                           ;keyboard.c: 1469: index = 0;
 27922  002CA8  0E00               	movlw	0
 27923  002CAA  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27924                           
 27925                           ; BSR set to: 0
 27926                           ;keyboard.c: 1470: ON_OFF = 0;
 27927  002CAC  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27928                           
 27929                           ; BSR set to: 0
 27930                           ;keyboard.c: 1471: playThisNote8(pitch, index);
 27931  002CAE  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27932  002CB2  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27933  002CB4  EC3A  F013         	call	_playThisNote8
 27934                           
 27935                           ;keyboard.c: 1472: keyboard.SW1 = 0;
 27936  002CB8  0100               	movlb	0	; () banked
 27937  002CBA  91D0               	bcf	_keyboard& (0+255),0,b
 27938  002CBC                     l1694:
 27939                           
 27940                           ; BSR set to: 0
 27941                           ;keyboard.c: 1473: }
 27942                           ;keyboard.c: 1474: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x00000
      +                          004) == 0) && keyboard.SW3) {
 27943                           
 27944                           ; BSR set to: 0
 27945  002CBC  B5D4               	btfsc	_button_state_last& (0+255),2,b
 27946                           
 27947                           ; BSR set to: 0
 27948  002CBE  B5D8               	btfsc	_button_state_now& (0+255),2,b
 27949  002CC0  D00E               	goto	l1695
 27950                           
 27951                           ; BSR set to: 0
 27952  002CC2  A5D0               	btfss	_keyboard& (0+255),2,b
 27953  002CC4  D00C               	goto	l1695
 27954                           
 27955                           ; BSR set to: 0
 27956                           ;keyboard.c: 1475: pitch = D;
 27957  002CC6  0E02               	movlw	2
 27958  002CC8  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27959                           
 27960                           ;keyboard.c: 1476: index = 1;
 27961  002CCA  0E01               	movlw	1
 27962  002CCC  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27963                           
 27964                           ; BSR set to: 0
 27965                           ;keyboard.c: 1477: ON_OFF = 0;
 27966  002CCE  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27967                           
 27968                           ; BSR set to: 0
 27969                           ;keyboard.c: 1478: playThisNote8(pitch, index);
 27970  002CD0  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27971  002CD4  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27972  002CD6  EC3A  F013         	call	_playThisNote8
 27973                           
 27974                           ;keyboard.c: 1479: keyboard.SW3 = 0;
 27975  002CDA  0100               	movlb	0	; () banked
 27976  002CDC  95D0               	bcf	_keyboard& (0+255),2,b
 27977  002CDE                     l1695:
 27978                           
 27979                           ; BSR set to: 0
 27980                           ;keyboard.c: 1480: }
 27981                           ;keyboard.c: 1481: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x00000
      +                          010) == 0) && keyboard.SW5) {
 27982                           
 27983                           ; BSR set to: 0
 27984  002CDE  B9D4               	btfsc	_button_state_last& (0+255),4,b
 27985                           
 27986                           ; BSR set to: 0
 27987  002CE0  B9D8               	btfsc	_button_state_now& (0+255),4,b
 27988  002CE2  D00E               	goto	l1696
 27989                           
 27990                           ; BSR set to: 0
 27991  002CE4  A9D0               	btfss	_keyboard& (0+255),4,b
 27992  002CE6  D00C               	goto	l1696
 27993                           
 27994                           ; BSR set to: 0
 27995                           ;keyboard.c: 1482: pitch = E;
 27996  002CE8  0E04               	movlw	4
 27997  002CEA  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27998                           
 27999                           ;keyboard.c: 1483: index = 2;
 28000  002CEC  0E02               	movlw	2
 28001  002CEE  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28002                           
 28003                           ; BSR set to: 0
 28004                           ;keyboard.c: 1484: ON_OFF = 0;
 28005  002CF0  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28006                           
 28007                           ; BSR set to: 0
 28008                           ;keyboard.c: 1485: playThisNote8(pitch, index);
 28009  002CF2  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28010  002CF6  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28011  002CF8  EC3A  F013         	call	_playThisNote8
 28012                           
 28013                           ;keyboard.c: 1486: keyboard.SW5 = 0;
 28014  002CFC  0100               	movlb	0	; () banked
 28015  002CFE  99D0               	bcf	_keyboard& (0+255),4,b
 28016  002D00                     l1696:
 28017                           
 28018                           ; BSR set to: 0
 28019                           ;keyboard.c: 1487: }
 28020                           ;keyboard.c: 1488: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x00000
      +                          020) == 0) && keyboard.SW6) {
 28021                           
 28022                           ; BSR set to: 0
 28023  002D00  BBD4               	btfsc	_button_state_last& (0+255),5,b
 28024                           
 28025                           ; BSR set to: 0
 28026  002D02  BBD8               	btfsc	_button_state_now& (0+255),5,b
 28027  002D04  D00E               	goto	l1697
 28028                           
 28029                           ; BSR set to: 0
 28030  002D06  ABD0               	btfss	_keyboard& (0+255),5,b
 28031  002D08  D00C               	goto	l1697
 28032                           
 28033                           ; BSR set to: 0
 28034                           ;keyboard.c: 1489: pitch = F;
 28035  002D0A  0E05               	movlw	5
 28036  002D0C  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28037                           
 28038                           ;keyboard.c: 1490: index = 3;
 28039  002D0E  0E03               	movlw	3
 28040  002D10  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28041                           
 28042                           ; BSR set to: 0
 28043                           ;keyboard.c: 1491: ON_OFF = 0;
 28044  002D12  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28045                           
 28046                           ; BSR set to: 0
 28047                           ;keyboard.c: 1492: playThisNote8(pitch, index);
 28048  002D14  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28049  002D18  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28050  002D1A  EC3A  F013         	call	_playThisNote8
 28051                           
 28052                           ;keyboard.c: 1493: keyboard.SW6 = 0;
 28053  002D1E  0100               	movlb	0	; () banked
 28054  002D20  9BD0               	bcf	_keyboard& (0+255),5,b
 28055  002D22                     l1697:
 28056                           
 28057                           ; BSR set to: 0
 28058                           ;keyboard.c: 1494: }
 28059                           ;keyboard.c: 1495: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x00000
      +                          080) == 0) && keyboard.SW8) {
 28060                           
 28061                           ; BSR set to: 0
 28062  002D22  BFD4               	btfsc	_button_state_last& (0+255),7,b
 28063                           
 28064                           ; BSR set to: 0
 28065  002D24  BFD8               	btfsc	_button_state_now& (0+255),7,b
 28066  002D26  D00E               	goto	l1698
 28067                           
 28068                           ; BSR set to: 0
 28069  002D28  AFD0               	btfss	_keyboard& (0+255),7,b
 28070  002D2A  D00C               	goto	l1698
 28071                           
 28072                           ; BSR set to: 0
 28073                           ;keyboard.c: 1496: pitch = G;
 28074  002D2C  0E07               	movlw	7
 28075  002D2E  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28076                           
 28077                           ;keyboard.c: 1497: index = 4;
 28078  002D30  0E04               	movlw	4
 28079  002D32  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28080                           
 28081                           ; BSR set to: 0
 28082                           ;keyboard.c: 1498: ON_OFF = 0;
 28083  002D34  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28084                           
 28085                           ; BSR set to: 0
 28086                           ;keyboard.c: 1499: playThisNote8(pitch, index);
 28087  002D36  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28088  002D3A  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28089  002D3C  EC3A  F013         	call	_playThisNote8
 28090                           
 28091                           ;keyboard.c: 1500: keyboard.SW8 = 0;
 28092  002D40  0100               	movlb	0	; () banked
 28093  002D42  9FD0               	bcf	_keyboard& (0+255),7,b
 28094  002D44                     l1698:
 28095                           
 28096                           ; BSR set to: 0
 28097                           ;keyboard.c: 1501: }
 28098                           ;keyboard.c: 1502: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x00000
      +                          200) == 0) && keyboard.SW10) {
 28099                           
 28100                           ; BSR set to: 0
 28101  002D44  B3D5               	btfsc	(_button_state_last+1)& (0+255),1,b
 28102                           
 28103                           ; BSR set to: 0
 28104  002D46  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 28105  002D48  D00E               	goto	l1699
 28106                           
 28107                           ; BSR set to: 0
 28108  002D4A  A3D1               	btfss	(_keyboard+1)& (0+255),1,b
 28109  002D4C  D00C               	goto	l1699
 28110                           
 28111                           ; BSR set to: 0
 28112                           ;keyboard.c: 1503: pitch = A;
 28113  002D4E  0E09               	movlw	9
 28114  002D50  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28115                           
 28116                           ;keyboard.c: 1504: index = 5;
 28117  002D52  0E05               	movlw	5
 28118  002D54  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28119                           
 28120                           ; BSR set to: 0
 28121                           ;keyboard.c: 1505: ON_OFF = 0;
 28122  002D56  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28123                           
 28124                           ; BSR set to: 0
 28125                           ;keyboard.c: 1506: playThisNote8(pitch, index);
 28126  002D58  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28127  002D5C  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28128  002D5E  EC3A  F013         	call	_playThisNote8
 28129                           
 28130                           ;keyboard.c: 1507: keyboard.SW10 = 10;
 28131  002D62  0100               	movlb	0	; () banked
 28132  002D64  93D1               	bcf	(_keyboard+1)& (0+255),1,b
 28133  002D66                     l1699:
 28134                           
 28135                           ; BSR set to: 0
 28136                           ;keyboard.c: 1508: }
 28137                           ;keyboard.c: 1509: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x00000
      +                          800) == 0) && keyboard.SW12) {
 28138                           
 28139                           ; BSR set to: 0
 28140  002D66  B7D5               	btfsc	(_button_state_last+1)& (0+255),3,b
 28141                           
 28142                           ; BSR set to: 0
 28143  002D68  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 28144  002D6A  D00E               	goto	l1700
 28145                           
 28146                           ; BSR set to: 0
 28147  002D6C  A7D1               	btfss	(_keyboard+1)& (0+255),3,b
 28148  002D6E  D00C               	goto	l1700
 28149                           
 28150                           ; BSR set to: 0
 28151                           ;keyboard.c: 1510: pitch = B;
 28152  002D70  0E0B               	movlw	11
 28153  002D72  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28154                           
 28155                           ;keyboard.c: 1511: index = 6;
 28156  002D74  0E06               	movlw	6
 28157  002D76  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28158                           
 28159                           ; BSR set to: 0
 28160                           ;keyboard.c: 1512: ON_OFF = 0;
 28161  002D78  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28162                           
 28163                           ; BSR set to: 0
 28164                           ;keyboard.c: 1513: playThisNote8(pitch, index);
 28165  002D7A  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28166  002D7E  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28167  002D80  EC3A  F013         	call	_playThisNote8
 28168                           
 28169                           ;keyboard.c: 1514: keyboard.SW12 = 0;
 28170  002D84  0100               	movlb	0	; () banked
 28171  002D86  97D1               	bcf	(_keyboard+1)& (0+255),3,b
 28172  002D88                     l1700:
 28173                           
 28174                           ; BSR set to: 0
 28175                           ;keyboard.c: 1515: }
 28176                           ;keyboard.c: 1516: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x00001
      +                          000) == 0) && keyboard.SW13) {
 28177                           
 28178                           ; BSR set to: 0
 28179  002D88  B9D5               	btfsc	(_button_state_last+1)& (0+255),4,b
 28180                           
 28181                           ; BSR set to: 0
 28182  002D8A  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 28183  002D8C  D00E               	goto	l1701
 28184                           
 28185                           ; BSR set to: 0
 28186  002D8E  A9D1               	btfss	(_keyboard+1)& (0+255),4,b
 28187  002D90  D00C               	goto	l1701
 28188                           
 28189                           ; BSR set to: 0
 28190                           ;keyboard.c: 1517: pitch = C2;
 28191  002D92  0E0C               	movlw	12
 28192  002D94  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28193                           
 28194                           ;keyboard.c: 1518: index = 7;
 28195  002D96  0E07               	movlw	7
 28196  002D98  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28197                           
 28198                           ; BSR set to: 0
 28199                           ;keyboard.c: 1519: ON_OFF = 0;
 28200  002D9A  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28201                           
 28202                           ; BSR set to: 0
 28203                           ;keyboard.c: 1520: playThisNote8(pitch, index);
 28204  002D9C  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28205  002DA0  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28206  002DA2  EC3A  F013         	call	_playThisNote8
 28207                           
 28208                           ;keyboard.c: 1521: keyboard.SW13 = 0;
 28209  002DA6  0100               	movlb	0	; () banked
 28210  002DA8  99D1               	bcf	(_keyboard+1)& (0+255),4,b
 28211  002DAA                     l1701:
 28212                           
 28213                           ; BSR set to: 0
 28214                           ;keyboard.c: 1522: }
 28215                           ;keyboard.c: 1523: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x00004
      +                          000) == 0) && keyboard.SW15) {
 28216                           
 28217                           ; BSR set to: 0
 28218  002DAA  BDD5               	btfsc	(_button_state_last+1)& (0+255),6,b
 28219                           
 28220                           ; BSR set to: 0
 28221  002DAC  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 28222  002DAE  D00E               	goto	l1702
 28223                           
 28224                           ; BSR set to: 0
 28225  002DB0  ADD1               	btfss	(_keyboard+1)& (0+255),6,b
 28226  002DB2  D00C               	goto	l1702
 28227                           
 28228                           ; BSR set to: 0
 28229                           ;keyboard.c: 1524: pitch = D2;
 28230  002DB4  0E0E               	movlw	14
 28231  002DB6  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28232                           
 28233                           ;keyboard.c: 1525: index = 8;
 28234  002DB8  0E08               	movlw	8
 28235  002DBA  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28236                           
 28237                           ; BSR set to: 0
 28238                           ;keyboard.c: 1526: ON_OFF = 0;
 28239  002DBC  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28240                           
 28241                           ; BSR set to: 0
 28242                           ;keyboard.c: 1527: playThisNote8(pitch, index);
 28243  002DBE  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28244  002DC2  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28245  002DC4  EC3A  F013         	call	_playThisNote8
 28246                           
 28247                           ;keyboard.c: 1528: keyboard.SW15 = 0;
 28248  002DC8  0100               	movlb	0	; () banked
 28249  002DCA  9DD1               	bcf	(_keyboard+1)& (0+255),6,b
 28250  002DCC                     l1702:
 28251                           
 28252                           ; BSR set to: 0
 28253                           ;keyboard.c: 1529: }
 28254                           ;keyboard.c: 1530: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x00010
      +                          000) == 0) && keyboard.SW17) {
 28255                           
 28256                           ; BSR set to: 0
 28257  002DCC  B1D6               	btfsc	(_button_state_last+2)& (0+255),0,b
 28258                           
 28259                           ; BSR set to: 0
 28260  002DCE  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 28261  002DD0  D00E               	goto	l1703
 28262                           
 28263                           ; BSR set to: 0
 28264  002DD2  A1D2               	btfss	(_keyboard+2)& (0+255),0,b
 28265  002DD4  D00C               	goto	l1703
 28266                           
 28267                           ; BSR set to: 0
 28268                           ;keyboard.c: 1531: pitch = E2;
 28269  002DD6  0E10               	movlw	16
 28270  002DD8  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28271                           
 28272                           ;keyboard.c: 1532: index = 9;
 28273  002DDA  0E09               	movlw	9
 28274  002DDC  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28275                           
 28276                           ; BSR set to: 0
 28277                           ;keyboard.c: 1533: ON_OFF = 0;
 28278  002DDE  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28279                           
 28280                           ; BSR set to: 0
 28281                           ;keyboard.c: 1534: playThisNote8(pitch, index);
 28282  002DE0  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28283  002DE4  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28284  002DE6  EC3A  F013         	call	_playThisNote8
 28285                           
 28286                           ;keyboard.c: 1535: keyboard.SW17 = 0;
 28287  002DEA  0100               	movlb	0	; () banked
 28288  002DEC  91D2               	bcf	(_keyboard+2)& (0+255),0,b
 28289  002DEE                     l1703:
 28290                           
 28291                           ; BSR set to: 0
 28292                           ;keyboard.c: 1536: }
 28293                           ;keyboard.c: 1537: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x00020
      +                          000) == 0) && keyboard.SW18) {
 28294                           
 28295                           ; BSR set to: 0
 28296  002DEE  B3D6               	btfsc	(_button_state_last+2)& (0+255),1,b
 28297                           
 28298                           ; BSR set to: 0
 28299  002DF0  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 28300  002DF2  D00E               	goto	l1704
 28301                           
 28302                           ; BSR set to: 0
 28303  002DF4  A3D2               	btfss	(_keyboard+2)& (0+255),1,b
 28304  002DF6  D00C               	goto	l1704
 28305                           
 28306                           ; BSR set to: 0
 28307                           ;keyboard.c: 1538: pitch = F2;
 28308  002DF8  0E11               	movlw	17
 28309  002DFA  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28310                           
 28311                           ;keyboard.c: 1539: index = 10;
 28312  002DFC  0E0A               	movlw	10
 28313  002DFE  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28314                           
 28315                           ; BSR set to: 0
 28316                           ;keyboard.c: 1540: ON_OFF = 0;
 28317  002E00  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28318                           
 28319                           ; BSR set to: 0
 28320                           ;keyboard.c: 1541: playThisNote8(pitch, index);
 28321  002E02  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28322  002E06  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28323  002E08  EC3A  F013         	call	_playThisNote8
 28324                           
 28325                           ;keyboard.c: 1542: keyboard.SW18 = 0;
 28326  002E0C  0100               	movlb	0	; () banked
 28327  002E0E  93D2               	bcf	(_keyboard+2)& (0+255),1,b
 28328  002E10                     l1704:
 28329                           
 28330                           ; BSR set to: 0
 28331                           ;keyboard.c: 1543: }
 28332                           ;keyboard.c: 1544: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x00080
      +                          000) == 0) && keyboard.SW20) {
 28333                           
 28334                           ; BSR set to: 0
 28335  002E10  B7D6               	btfsc	(_button_state_last+2)& (0+255),3,b
 28336                           
 28337                           ; BSR set to: 0
 28338  002E12  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 28339  002E14  D00E               	goto	l1705
 28340                           
 28341                           ; BSR set to: 0
 28342  002E16  A7D2               	btfss	(_keyboard+2)& (0+255),3,b
 28343  002E18  D00C               	goto	l1705
 28344                           
 28345                           ; BSR set to: 0
 28346                           ;keyboard.c: 1545: pitch = G2;
 28347  002E1A  0E13               	movlw	19
 28348  002E1C  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28349                           
 28350                           ;keyboard.c: 1546: index = 11;
 28351  002E1E  0E0B               	movlw	11
 28352  002E20  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28353                           
 28354                           ; BSR set to: 0
 28355                           ;keyboard.c: 1547: ON_OFF = 0;
 28356  002E22  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28357                           
 28358                           ; BSR set to: 0
 28359                           ;keyboard.c: 1548: playThisNote8(pitch, index);
 28360  002E24  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28361  002E28  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28362  002E2A  EC3A  F013         	call	_playThisNote8
 28363                           
 28364                           ;keyboard.c: 1549: keyboard.SW20 = 0;
 28365  002E2E  0100               	movlb	0	; () banked
 28366  002E30  97D2               	bcf	(_keyboard+2)& (0+255),3,b
 28367  002E32                     l1705:
 28368                           
 28369                           ; BSR set to: 0
 28370                           ;keyboard.c: 1550: }
 28371                           ;keyboard.c: 1551: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x00200
      +                          000) == 0) && keyboard.SW22) {
 28372                           
 28373                           ; BSR set to: 0
 28374  002E32  BBD6               	btfsc	(_button_state_last+2)& (0+255),5,b
 28375                           
 28376                           ; BSR set to: 0
 28377  002E34  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 28378  002E36  D00E               	goto	l1706
 28379                           
 28380                           ; BSR set to: 0
 28381  002E38  ABD2               	btfss	(_keyboard+2)& (0+255),5,b
 28382  002E3A  D00C               	goto	l1706
 28383                           
 28384                           ; BSR set to: 0
 28385                           ;keyboard.c: 1552: pitch = A2;
 28386  002E3C  0E15               	movlw	21
 28387  002E3E  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28388                           
 28389                           ;keyboard.c: 1553: index = 12;
 28390  002E40  0E0C               	movlw	12
 28391  002E42  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28392                           
 28393                           ; BSR set to: 0
 28394                           ;keyboard.c: 1554: ON_OFF = 0;
 28395  002E44  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28396                           
 28397                           ; BSR set to: 0
 28398                           ;keyboard.c: 1555: playThisNote8(pitch, index);
 28399  002E46  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28400  002E4A  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28401  002E4C  EC3A  F013         	call	_playThisNote8
 28402                           
 28403                           ;keyboard.c: 1556: keyboard.SW22 = 0;
 28404  002E50  0100               	movlb	0	; () banked
 28405  002E52  9BD2               	bcf	(_keyboard+2)& (0+255),5,b
 28406  002E54                     l1706:
 28407                           
 28408                           ; BSR set to: 0
 28409                           ;keyboard.c: 1557: }
 28410                           ;keyboard.c: 1558: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x00800
      +                          000) == 0) && keyboard.SW24) {
 28411                           
 28412                           ; BSR set to: 0
 28413  002E54  BFD6               	btfsc	(_button_state_last+2)& (0+255),7,b
 28414                           
 28415                           ; BSR set to: 0
 28416  002E56  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 28417  002E58  D00E               	goto	l1707
 28418                           
 28419                           ; BSR set to: 0
 28420  002E5A  AFD2               	btfss	(_keyboard+2)& (0+255),7,b
 28421  002E5C  D00C               	goto	l1707
 28422                           
 28423                           ; BSR set to: 0
 28424                           ;keyboard.c: 1559: pitch = B2;
 28425  002E5E  0E17               	movlw	23
 28426  002E60  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28427                           
 28428                           ;keyboard.c: 1560: index = 13;
 28429  002E62  0E0D               	movlw	13
 28430  002E64  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28431                           
 28432                           ; BSR set to: 0
 28433                           ;keyboard.c: 1561: ON_OFF = 0;
 28434  002E66  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28435                           
 28436                           ; BSR set to: 0
 28437                           ;keyboard.c: 1562: playThisNote8(pitch, index);
 28438  002E68  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28439  002E6C  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28440  002E6E  EC3A  F013         	call	_playThisNote8
 28441                           
 28442                           ;keyboard.c: 1563: keyboard.SW24 = 0;
 28443  002E72  0100               	movlb	0	; () banked
 28444  002E74  9FD2               	bcf	(_keyboard+2)& (0+255),7,b
 28445  002E76                     l1707:
 28446                           
 28447                           ; BSR set to: 0
 28448                           ;keyboard.c: 1564: }
 28449                           ;keyboard.c: 1565: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x01000
      +                          000) == 0) && keyboard.SW25) {
 28450                           
 28451                           ; BSR set to: 0
 28452  002E76  A1D7               	btfss	(_button_state_last+3)& (0+255),0,b
 28453  002E78  0012               	return	
 28454                           
 28455                           ; BSR set to: 0
 28456  002E7A  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 28457  002E7C  0012               	return	
 28458                           
 28459                           ; BSR set to: 0
 28460  002E7E  A1D3               	btfss	(_keyboard+3)& (0+255),0,b
 28461  002E80  0012               	return	
 28462                           
 28463                           ; BSR set to: 0
 28464                           ;keyboard.c: 1566: pitch = C;
 28465  002E82  0E00               	movlw	0
 28466  002E84  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28467                           
 28468                           ;keyboard.c: 1567: index = 14;
 28469  002E86  0E0E               	movlw	14
 28470  002E88  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28471                           
 28472                           ; BSR set to: 0
 28473                           ;keyboard.c: 1568: ON_OFF = 0;
 28474  002E8A  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28475                           
 28476                           ; BSR set to: 0
 28477                           ;keyboard.c: 1569: playThisNote8(pitch, index);
 28478  002E8C  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28479  002E90  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28480  002E92  EC3A  F013         	call	_playThisNote8
 28481                           
 28482                           ;keyboard.c: 1570: keyboard.SW25 = 0;
 28483  002E96  0100               	movlb	0	; () banked
 28484  002E98  91D3               	bcf	(_keyboard+3)& (0+255),0,b
 28485  002E9A  0012               	return	
 28486  002E9C                     __end_of_keyboard_eight_note_efficient:
 28487                           	opt stack 0
 28488                           tblptru	equ	0xFF8
 28489                           tblptrh	equ	0xFF7
 28490                           tblptrl	equ	0xFF6
 28491                           tablat	equ	0xFF5
 28492                           prodh	equ	0xFF4
 28493                           prodl	equ	0xFF3
 28494                           intcon	equ	0xFF2
 28495                           intcon2	equ	0xFF1
 28496                           postinc0	equ	0xFEE
 28497                           wreg	equ	0xFE8
 28498                           indf1	equ	0xFE7
 28499                           postdec1	equ	0xFE5
 28500                           fsr1h	equ	0xFE2
 28501                           fsr1l	equ	0xFE1
 28502                           indf2	equ	0xFDF
 28503                           postinc2	equ	0xFDE
 28504                           plusw2	equ	0xFDB
 28505                           fsr2h	equ	0xFDA
 28506                           fsr2l	equ	0xFD9
 28507                           status	equ	0xFD8
 28508                           
 28509 ;; *************** function _playThisNote8 *****************
 28510 ;; Defined at:
 28511 ;;		line 893 in file "keyboard.c"
 28512 ;; Parameters:    Size  Location     Type
 28513 ;;  pitch           1    wreg     unsigned char 
 28514 ;;  index           1   31[BANK0 ] unsigned char 
 28515 ;; Auto vars:     Size  Location     Type
 28516 ;;  pitch           1   36[BANK0 ] unsigned char 
 28517 ;;  temp_pitch      1   37[BANK0 ] unsigned char 
 28518 ;;  mode_p          2   38[BANK0 ] PTR unsigned char 
 28519 ;;		 -> locrian_key(15), aeolian_key(15), mixolydian_key(15), lydian_key(15), 
 28520 ;;		 -> phrygian_key(15), dorian_key(15), ionian_key(15), 
 28521 ;; Return value:  Size  Location     Type
 28522 ;;                  1    wreg      void 
 28523 ;; Registers used:
 28524 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28525 ;; Tracked objects:
 28526 ;;		On entry : 0/0
 28527 ;;		On exit  : 0/0
 28528 ;;		Unchanged: 0/0
 28529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 28530 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28531 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28532 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28533 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28534 ;;Total ram usage:        9 bytes
 28535 ;; Hardware stack levels used:    1
 28536 ;; Hardware stack levels required when called:   11
 28537 ;; This function calls:
 28538 ;;		_add_notes_to_arpeggio
 28539 ;;		_delete_notes_from_arpeggio
 28540 ;;		_finish_arpeggio_setup
 28541 ;;		_key_press_release_note_off
 28542 ;;		_noteOff
 28543 ;;		_noteOn
 28544 ;;		_playDiatonicSeventhMajor
 28545 ;;		_playDiatonicSeventhMinor
 28546 ;;		_playDiatonicTriadMajor
 28547 ;;		_playDiatonicTriadMinor
 28548 ;;		_wait_one_pulse
 28549 ;; This function is called by:
 28550 ;;		_keyboard_eight_note_efficient
 28551 ;;		_doTheUnLatch
 28552 ;; This function uses a non-reentrant model
 28553 ;;
 28554                           
 28555                           	psect	text86
 28556  002674                     __ptext86:
 28557                           	opt stack 0
 28558  002674                     _playThisNote8:
 28559                           	opt stack 14
 28560                           
 28561                           ; BSR set to: 0
 28562                           ;incstack = 0
 28563                           ;playThisNote8@pitch stored from wreg
 28564  002674  0100               	movlb	0	; () banked
 28565  002676  6F84               	movwf	playThisNote8@pitch& (0+255),b
 28566                           
 28567                           ;keyboard.c: 895: unsigned char *mode_p;
 28568                           ;keyboard.c: 898: switch (which_mode) {
 28569  002678  D01E               	goto	l1515
 28570  00267A                     
 28571                           ;keyboard.c: 900: mode_p = ionian_key;
 28572  00267A  0E55               	movlw	low _ionian_key
 28573  00267C  0100               	movlb	0	; () banked
 28574  00267E  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28575  002680  0EFD               	movlw	high _ionian_key
 28576  002682  D017               	goto	L12
 28577  002684                     
 28578                           ; BSR set to: 0
 28579                           ;keyboard.c: 903: mode_p = dorian_key;
 28580                           
 28581                           ; BSR set to: 0
 28582  002684  0E46               	movlw	low _dorian_key
 28583  002686  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28584  002688  0EFD               	movlw	high _dorian_key
 28585  00268A  D013               	goto	L12
 28586  00268C                     
 28587                           ; BSR set to: 0
 28588                           ;keyboard.c: 906: mode_p = phrygian_key;
 28589                           
 28590                           ; BSR set to: 0
 28591  00268C  0E37               	movlw	low _phrygian_key
 28592  00268E  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28593  002690  0EFD               	movlw	high _phrygian_key
 28594  002692  D00F               	goto	L12
 28595  002694                     
 28596                           ; BSR set to: 0
 28597                           ;keyboard.c: 909: mode_p = lydian_key;
 28598                           
 28599                           ; BSR set to: 0
 28600  002694  0E28               	movlw	low _lydian_key
 28601  002696  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28602  002698  0EFD               	movlw	high _lydian_key
 28603  00269A  D00B               	goto	L12
 28604  00269C                     
 28605                           ; BSR set to: 0
 28606                           ;keyboard.c: 912: mode_p = mixolydian_key;
 28607                           
 28608                           ; BSR set to: 0
 28609  00269C  0E19               	movlw	low _mixolydian_key
 28610  00269E  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28611  0026A0  0EFD               	movlw	high _mixolydian_key
 28612  0026A2  D007               	goto	L12
 28613  0026A4                     
 28614                           ; BSR set to: 0
 28615                           ;keyboard.c: 915: mode_p = aeolian_key;
 28616                           
 28617                           ; BSR set to: 0
 28618  0026A4  0E0A               	movlw	low _aeolian_key
 28619  0026A6  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28620  0026A8  0EFD               	movlw	high _aeolian_key
 28621  0026AA  D003               	goto	L12
 28622  0026AC                     
 28623                           ; BSR set to: 0
 28624                           ;keyboard.c: 918: mode_p = locrian_key;
 28625                           
 28626                           ; BSR set to: 0
 28627  0026AC  0EFB               	movlw	low _locrian_key
 28628  0026AE  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28629  0026B0  0EFC               	movlw	high _locrian_key
 28630  0026B2                     L12:
 28631  0026B2  6F87               	movwf	(playThisNote8@mode_p+1)& (0+255),b
 28632                           
 28633                           ; BSR set to: 0
 28634                           ;keyboard.c: 922: }
 28635                           
 28636                           ; BSR set to: 0
 28637                           ;keyboard.c: 921: break;
 28638                           
 28639                           ;keyboard.c: 920: default:
 28640                           
 28641                           ;keyboard.c: 919: break;
 28642  0026B4  D017               	goto	l1517
 28643  0026B6                     l1515:
 28644                           
 28645                           ; BSR set to: 0
 28646  0026B6  0100               	movlb	0	; () banked
 28647  0026B8  51F1               	movf	_which_mode& (0+255),w,b
 28648                           
 28649                           ; Switch size 1, requested type "space"
 28650                           ; Number of cases is 7, Range of values is 0 to 6
 28651                           ; switch strategies available:
 28652                           ; Name         Instructions Cycles
 28653                           ; simple_byte           22    12 (average)
 28654                           ;	Chosen strategy is simple_byte
 28655  0026BA  0A00               	xorlw	0	; case 0
 28656  0026BC  B4D8               	btfsc	status,2,c
 28657  0026BE  D7DD               	goto	l1516
 28658  0026C0  0A01               	xorlw	1	; case 1
 28659  0026C2  B4D8               	btfsc	status,2,c
 28660  0026C4  D7DF               	goto	l1518
 28661  0026C6  0A03               	xorlw	3	; case 2
 28662  0026C8  B4D8               	btfsc	status,2,c
 28663  0026CA  D7E0               	goto	l1519
 28664  0026CC  0A01               	xorlw	1	; case 3
 28665  0026CE  B4D8               	btfsc	status,2,c
 28666  0026D0  D7E1               	goto	l1520
 28667  0026D2  0A07               	xorlw	7	; case 4
 28668  0026D4  B4D8               	btfsc	status,2,c
 28669  0026D6  D7E2               	goto	l1521
 28670  0026D8  0A01               	xorlw	1	; case 5
 28671  0026DA  B4D8               	btfsc	status,2,c
 28672  0026DC  D7E3               	goto	l1522
 28673  0026DE  0A03               	xorlw	3	; case 6
 28674  0026E0  B4D8               	btfsc	status,2,c
 28675  0026E2  D7E4               	goto	l1523
 28676  0026E4                     l1517:
 28677                           
 28678                           ; BSR set to: 0
 28679                           ;keyboard.c: 925: if(ARPEGGIO_ON == 0){
 28680  0026E4  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28681  0026E6  D0D0               	goto	l1538
 28682                           
 28683                           ; BSR set to: 0
 28684                           ;keyboard.c: 927: if(KEYBOARD_MODE == MAJOR) {
 28685  0026E8  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 28686  0026EA  A4D8               	btfss	status,2,c
 28687  0026EC  D025               	goto	l1528
 28688                           
 28689                           ; BSR set to: 0
 28690                           ;keyboard.c: 928: if(ON_OFF == 1) {noteOn(channel,major_key[index],velocity);}
 28691  0026EE  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28692  0026F0  D010               	goto	l1527
 28693                           
 28694                           ; BSR set to: 0
 28695  0026F2  517F               	movf	playThisNote8@index& (0+255),w,b
 28696  0026F4  0D01               	mullw	1
 28697  0026F6  0E78               	movlw	low _major_key
 28698  0026F8  24F3               	addwf	prodl,w,c
 28699  0026FA  6EF6               	movwf	tblptrl,c
 28700  0026FC  0EF3               	movlw	high _major_key
 28701  0026FE  20F4               	addwfc	prodh,w,c
 28702  002700  6EF7               	movwf	tblptrh,c
 28703  002702                     	if	0	;There are less than 3 active tblptr bytes
 28704  002702                     	endif
 28705  002702  0008               	tblrd		*
 28706  002704  CFF5 F06E          	movff	tablat,noteOn@pitch
 28707  002708  C0FD  F06F         	movff	_velocity,noteOn@velocity
 28708  00270C  51F6               	movf	_channel& (0+255),w,b
 28709  00270E  ECE1  F044         	call	_noteOn
 28710  002712                     l1527:
 28711                           
 28712                           ;keyboard.c: 929: if(ON_OFF == 0) {noteOff(channel,major_key[index],velocity);}
 28713  002712  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28714  002714  D011               	goto	l1528
 28715  002716  0100               	movlb	0	; () banked
 28716  002718  517F               	movf	playThisNote8@index& (0+255),w,b
 28717  00271A  0D01               	mullw	1
 28718  00271C  0E78               	movlw	low _major_key
 28719  00271E  24F3               	addwf	prodl,w,c
 28720  002720  6EF6               	movwf	tblptrl,c
 28721  002722  0EF3               	movlw	high _major_key
 28722  002724  20F4               	addwfc	prodh,w,c
 28723  002726  6EF7               	movwf	tblptrh,c
 28724  002728                     	if	0	;There are less than 3 active tblptr bytes
 28725  002728                     	endif
 28726  002728  0008               	tblrd		*
 28727  00272A  CFF5 F06B          	movff	tablat,noteOff@pitch
 28728  00272E  C0FD  F06C         	movff	_velocity,noteOff@velocity
 28729  002732  51F6               	movf	_channel& (0+255),w,b
 28730  002734  EC08  F048         	call	_noteOff
 28731  002738                     l1528:
 28732                           
 28733                           ;keyboard.c: 930: }
 28734                           ;keyboard.c: 932: if(KEYBOARD_MODE == MINOR) {
 28735  002738  0E02               	movlw	2
 28736  00273A  0100               	movlb	0	; () banked
 28737  00273C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28738  00273E  A4D8               	btfss	status,2,c
 28739  002740  D025               	goto	l1531
 28740                           
 28741                           ; BSR set to: 0
 28742                           ;keyboard.c: 933: if(ON_OFF == 1) {noteOn(channel,minor_key[index],velocity);}
 28743  002742  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28744  002744  D010               	goto	l1530
 28745                           
 28746                           ; BSR set to: 0
 28747  002746  517F               	movf	playThisNote8@index& (0+255),w,b
 28748  002748  0D01               	mullw	1
 28749  00274A  0E69               	movlw	low _minor_key
 28750  00274C  24F3               	addwf	prodl,w,c
 28751  00274E  6EF6               	movwf	tblptrl,c
 28752  002750  0EF3               	movlw	high _minor_key
 28753  002752  20F4               	addwfc	prodh,w,c
 28754  002754  6EF7               	movwf	tblptrh,c
 28755  002756                     	if	0	;There are less than 3 active tblptr bytes
 28756  002756                     	endif
 28757  002756  0008               	tblrd		*
 28758  002758  CFF5 F06E          	movff	tablat,noteOn@pitch
 28759  00275C  C0FD  F06F         	movff	_velocity,noteOn@velocity
 28760  002760  51F6               	movf	_channel& (0+255),w,b
 28761  002762  ECE1  F044         	call	_noteOn
 28762  002766                     l1530:
 28763                           
 28764                           ;keyboard.c: 934: if(ON_OFF == 0) {noteOff(channel,minor_key[index],velocity);}
 28765  002766  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28766  002768  D011               	goto	l1531
 28767  00276A  0100               	movlb	0	; () banked
 28768  00276C  517F               	movf	playThisNote8@index& (0+255),w,b
 28769  00276E  0D01               	mullw	1
 28770  002770  0E69               	movlw	low _minor_key
 28771  002772  24F3               	addwf	prodl,w,c
 28772  002774  6EF6               	movwf	tblptrl,c
 28773  002776  0EF3               	movlw	high _minor_key
 28774  002778  20F4               	addwfc	prodh,w,c
 28775  00277A  6EF7               	movwf	tblptrh,c
 28776  00277C                     	if	0	;There are less than 3 active tblptr bytes
 28777  00277C                     	endif
 28778  00277C  0008               	tblrd		*
 28779  00277E  CFF5 F06B          	movff	tablat,noteOff@pitch
 28780  002782  C0FD  F06C         	movff	_velocity,noteOff@velocity
 28781  002786  51F6               	movf	_channel& (0+255),w,b
 28782  002788  EC08  F048         	call	_noteOff
 28783  00278C                     l1531:
 28784                           
 28785                           ;keyboard.c: 935: }
 28786                           ;keyboard.c: 937: if(KEYBOARD_MODE == MODES) {
 28787  00278C  0E03               	movlw	3
 28788  00278E  0100               	movlb	0	; () banked
 28789  002790  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28790  002792  A4D8               	btfss	status,2,c
 28791  002794  D079               	goto	l1538
 28792                           
 28793                           ; BSR set to: 0
 28794                           ;keyboard.c: 938: if(index == 0) {
 28795  002796  517F               	movf	playThisNote8@index& (0+255),w,b
 28796  002798  A4D8               	btfss	status,2,c
 28797  00279A  D031               	goto	l1535
 28798                           
 28799                           ; BSR set to: 0
 28800                           ;keyboard.c: 939: if(ON_OFF == 1) {noteOn(channel,mode_p[index],velocity);}
 28801  00279C  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28802  00279E  D016               	goto	l1534
 28803                           
 28804                           ; BSR set to: 0
 28805  0027A0  517F               	movf	playThisNote8@index& (0+255),w,b
 28806  0027A2  0D01               	mullw	1
 28807  0027A4  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28808  0027A8  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28809  0027AC  50F3               	movf	prodl,w,c
 28810  0027AE  2780               	addwf	??_playThisNote8& (0+255),f,b
 28811  0027B0  50F4               	movf	prodh,w,c
 28812  0027B2  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28813  0027B4  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28814  0027B8  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28815  0027BC                     	if	0	;tblptru may be non-zero
 28816  0027BC                     	endif
 28817  0027BC                     	if	0	;tblptru may be non-zero
 28818  0027BC                     	endif
 28819  0027BC  0008               	tblrd		*
 28820  0027BE  CFF5 F06E          	movff	tablat,noteOn@pitch
 28821  0027C2  C0FD  F06F         	movff	_velocity,noteOn@velocity
 28822  0027C6  51F6               	movf	_channel& (0+255),w,b
 28823  0027C8  ECE1  F044         	call	_noteOn
 28824  0027CC                     l1534:
 28825                           
 28826                           ;keyboard.c: 940: if(ON_OFF == 0) {noteOff(channel,mode_p[index],velocity);}
 28827  0027CC  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28828  0027CE  D017               	goto	l1535
 28829  0027D0  0100               	movlb	0	; () banked
 28830  0027D2  517F               	movf	playThisNote8@index& (0+255),w,b
 28831  0027D4  0D01               	mullw	1
 28832  0027D6  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28833  0027DA  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28834  0027DE  50F3               	movf	prodl,w,c
 28835  0027E0  2780               	addwf	??_playThisNote8& (0+255),f,b
 28836  0027E2  50F4               	movf	prodh,w,c
 28837  0027E4  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28838  0027E6  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28839  0027EA  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28840  0027EE                     	if	0	;tblptru may be non-zero
 28841  0027EE                     	endif
 28842  0027EE                     	if	0	;tblptru may be non-zero
 28843  0027EE                     	endif
 28844  0027EE  0008               	tblrd		*
 28845  0027F0  CFF5 F06B          	movff	tablat,noteOff@pitch
 28846  0027F4  C0FD  F06C         	movff	_velocity,noteOff@velocity
 28847  0027F8  51F6               	movf	_channel& (0+255),w,b
 28848  0027FA  EC08  F048         	call	_noteOff
 28849  0027FE                     l1535:
 28850                           
 28851                           ;keyboard.c: 941: }
 28852                           ;keyboard.c: 942: if(index > 0) {
 28853  0027FE  0100               	movlb	0	; () banked
 28854  002800  517F               	movf	playThisNote8@index& (0+255),w,b
 28855  002802  B4D8               	btfsc	status,2,c
 28856  002804  D041               	goto	l1538
 28857                           
 28858                           ; BSR set to: 0
 28859                           ;keyboard.c: 943: if(ON_OFF == 1) {noteOn(channel,mode_p[0] + mode_p[index],velocity);}
 28860  002806  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28861  002808  D01E               	goto	l1537
 28862                           
 28863                           ; BSR set to: 0
 28864  00280A  517F               	movf	playThisNote8@index& (0+255),w,b
 28865  00280C  0D01               	mullw	1
 28866  00280E  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28867  002812  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28868  002816  50F3               	movf	prodl,w,c
 28869  002818  2780               	addwf	??_playThisNote8& (0+255),f,b
 28870  00281A  50F4               	movf	prodh,w,c
 28871  00281C  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28872  00281E  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28873  002822  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28874  002826                     	if	0	;tblptru may be non-zero
 28875  002826                     	endif
 28876  002826                     	if	0	;tblptru may be non-zero
 28877  002826                     	endif
 28878  002826  0008               	tblrd		*
 28879  002828  CFF5 F082          	movff	tablat,??_playThisNote8+2
 28880  00282C  C086  FFF6         	movff	playThisNote8@mode_p,tblptrl
 28881  002830  C087  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 28882  002834                     	if	0	;tblptru may be non-zero
 28883  002834                     	endif
 28884  002834                     	if	0	;tblptru may be non-zero
 28885  002834                     	endif
 28886  002834  0008               	tblrd		*
 28887  002836  50F5               	movf	tablat,w,c
 28888  002838  2582               	addwf	(??_playThisNote8+2)& (0+255),w,b
 28889  00283A  6F6E               	movwf	noteOn@pitch& (0+255),b
 28890  00283C  C0FD  F06F         	movff	_velocity,noteOn@velocity
 28891  002840  51F6               	movf	_channel& (0+255),w,b
 28892  002842  ECE1  F044         	call	_noteOn
 28893  002846                     l1537:
 28894                           
 28895                           ;keyboard.c: 944: if(ON_OFF == 0) {noteOff(channel,mode_p[0] + mode_p[index],velocity);}
 28896  002846  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28897  002848  D01F               	goto	l1538
 28898  00284A  0100               	movlb	0	; () banked
 28899  00284C  517F               	movf	playThisNote8@index& (0+255),w,b
 28900  00284E  0D01               	mullw	1
 28901  002850  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28902  002854  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28903  002858  50F3               	movf	prodl,w,c
 28904  00285A  2780               	addwf	??_playThisNote8& (0+255),f,b
 28905  00285C  50F4               	movf	prodh,w,c
 28906  00285E  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28907  002860  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28908  002864  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28909  002868                     	if	0	;tblptru may be non-zero
 28910  002868                     	endif
 28911  002868                     	if	0	;tblptru may be non-zero
 28912  002868                     	endif
 28913  002868  0008               	tblrd		*
 28914  00286A  CFF5 F082          	movff	tablat,??_playThisNote8+2
 28915  00286E  C086  FFF6         	movff	playThisNote8@mode_p,tblptrl
 28916  002872  C087  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 28917  002876                     	if	0	;tblptru may be non-zero
 28918  002876                     	endif
 28919  002876                     	if	0	;tblptru may be non-zero
 28920  002876                     	endif
 28921  002876  0008               	tblrd		*
 28922  002878  50F5               	movf	tablat,w,c
 28923  00287A  2582               	addwf	(??_playThisNote8+2)& (0+255),w,b
 28924  00287C  6F6B               	movwf	noteOff@pitch& (0+255),b
 28925  00287E  C0FD  F06C         	movff	_velocity,noteOff@velocity
 28926  002882  51F6               	movf	_channel& (0+255),w,b
 28927  002884  EC08  F048         	call	_noteOff
 28928  002888                     l1538:
 28929                           
 28930                           ;keyboard.c: 945: }
 28931                           ;keyboard.c: 946: }
 28932                           ;keyboard.c: 947: }
 28933                           ;keyboard.c: 950: if(ARPEGGIO_ON == 1){
 28934  002888  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28935  00288A  D0DE               	goto	l1552
 28936                           
 28937                           ;keyboard.c: 952: unsigned char temp_pitch;
 28938                           ;keyboard.c: 954: if(KEYBOARD_MODE == MAJOR) {
 28939  00288C  0100               	movlb	0	; () banked
 28940  00288E  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 28941  002890  A4D8               	btfss	status,2,c
 28942  002892  D00B               	goto	l1540
 28943                           
 28944                           ; BSR set to: 0
 28945                           ;keyboard.c: 955: temp_pitch = major_key[index];
 28946  002894  517F               	movf	playThisNote8@index& (0+255),w,b
 28947  002896  0D01               	mullw	1
 28948  002898  0E78               	movlw	low _major_key
 28949  00289A  24F3               	addwf	prodl,w,c
 28950  00289C  6EF6               	movwf	tblptrl,c
 28951  00289E  0EF3               	movlw	high _major_key
 28952  0028A0  20F4               	addwfc	prodh,w,c
 28953  0028A2  6EF7               	movwf	tblptrh,c
 28954  0028A4                     	if	0	;There are less than 3 active tblptr bytes
 28955  0028A4                     	endif
 28956  0028A4  0008               	tblrd		*
 28957  0028A6  CFF5 F085          	movff	tablat,playThisNote8@temp_pitch
 28958  0028AA                     l1540:
 28959                           
 28960                           ; BSR set to: 0
 28961                           ;keyboard.c: 956: }
 28962                           ;keyboard.c: 958: if(KEYBOARD_MODE == MINOR) {
 28963                           
 28964                           ; BSR set to: 0
 28965  0028AA  0E02               	movlw	2
 28966  0028AC  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28967  0028AE  A4D8               	btfss	status,2,c
 28968  0028B0  D00B               	goto	l1541
 28969                           
 28970                           ; BSR set to: 0
 28971                           ;keyboard.c: 959: temp_pitch = minor_key[index];
 28972  0028B2  517F               	movf	playThisNote8@index& (0+255),w,b
 28973  0028B4  0D01               	mullw	1
 28974  0028B6  0E69               	movlw	low _minor_key
 28975  0028B8  24F3               	addwf	prodl,w,c
 28976  0028BA  6EF6               	movwf	tblptrl,c
 28977  0028BC  0EF3               	movlw	high _minor_key
 28978  0028BE  20F4               	addwfc	prodh,w,c
 28979  0028C0  6EF7               	movwf	tblptrh,c
 28980  0028C2                     	if	0	;There are less than 3 active tblptr bytes
 28981  0028C2                     	endif
 28982  0028C2  0008               	tblrd		*
 28983  0028C4  CFF5 F085          	movff	tablat,playThisNote8@temp_pitch
 28984  0028C8                     l1541:
 28985                           
 28986                           ; BSR set to: 0
 28987                           ;keyboard.c: 960: }
 28988                           ;keyboard.c: 962: if(KEYBOARD_MODE == MODES) {
 28989                           
 28990                           ; BSR set to: 0
 28991  0028C8  0E03               	movlw	3
 28992  0028CA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28993  0028CC  A4D8               	btfss	status,2,c
 28994  0028CE  D030               	goto	l1544
 28995                           
 28996                           ; BSR set to: 0
 28997                           ;keyboard.c: 963: if(index == 0){temp_pitch = mode_p[index];}
 28998  0028D0  517F               	movf	playThisNote8@index& (0+255),w,b
 28999  0028D2  A4D8               	btfss	status,2,c
 29000  0028D4  D011               	goto	l1543
 29001                           
 29002                           ; BSR set to: 0
 29003  0028D6  517F               	movf	playThisNote8@index& (0+255),w,b
 29004  0028D8  0D01               	mullw	1
 29005  0028DA  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 29006  0028DE  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 29007  0028E2  50F3               	movf	prodl,w,c
 29008  0028E4  2780               	addwf	??_playThisNote8& (0+255),f,b
 29009  0028E6  50F4               	movf	prodh,w,c
 29010  0028E8  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 29011  0028EA  C080  FFF6         	movff	??_playThisNote8,tblptrl
 29012  0028EE  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 29013  0028F2                     	if	0	;tblptru may be non-zero
 29014  0028F2                     	endif
 29015  0028F2                     	if	0	;tblptru may be non-zero
 29016  0028F2                     	endif
 29017  0028F2  0008               	tblrd		*
 29018  0028F4  CFF5 F085          	movff	tablat,playThisNote8@temp_pitch
 29019  0028F8                     l1543:
 29020                           
 29021                           ; BSR set to: 0
 29022                           ;keyboard.c: 964: if(index > 0){temp_pitch = (mode_p[0] + mode_p[index]);}
 29023                           
 29024                           ; BSR set to: 0
 29025  0028F8  517F               	movf	playThisNote8@index& (0+255),w,b
 29026  0028FA  B4D8               	btfsc	status,2,c
 29027  0028FC  D019               	goto	l1544
 29028                           
 29029                           ; BSR set to: 0
 29030  0028FE  517F               	movf	playThisNote8@index& (0+255),w,b
 29031  002900  0D01               	mullw	1
 29032  002902  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 29033  002906  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 29034  00290A  50F3               	movf	prodl,w,c
 29035  00290C  2780               	addwf	??_playThisNote8& (0+255),f,b
 29036  00290E  50F4               	movf	prodh,w,c
 29037  002910  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 29038  002912  C080  FFF6         	movff	??_playThisNote8,tblptrl
 29039  002916  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 29040  00291A                     	if	0	;tblptru may be non-zero
 29041  00291A                     	endif
 29042  00291A                     	if	0	;tblptru may be non-zero
 29043  00291A                     	endif
 29044  00291A  0008               	tblrd		*
 29045  00291C  CFF5 F082          	movff	tablat,??_playThisNote8+2
 29046  002920  C086  FFF6         	movff	playThisNote8@mode_p,tblptrl
 29047  002924  C087  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 29048  002928                     	if	0	;tblptru may be non-zero
 29049  002928                     	endif
 29050  002928                     	if	0	;tblptru may be non-zero
 29051  002928                     	endif
 29052  002928  0008               	tblrd		*
 29053  00292A  50F5               	movf	tablat,w,c
 29054  00292C  2582               	addwf	(??_playThisNote8+2)& (0+255),w,b
 29055  00292E  6F85               	movwf	playThisNote8@temp_pitch& (0+255),b
 29056  002930                     l1544:
 29057                           
 29058                           ; BSR set to: 0
 29059                           ;keyboard.c: 965: }
 29060                           ;keyboard.c: 967: if(ON_OFF == 1) {
 29061                           
 29062                           ; BSR set to: 0
 29063                           
 29064                           ; BSR set to: 0
 29065  002930  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29066  002932  D024               	goto	l1545
 29067                           
 29068                           ; BSR set to: 0
 29069                           ;keyboard.c: 970: TMR0ON = 0;
 29070  002934  9ED5               	bcf	4053,7,c	;volatile
 29071                           
 29072                           ;keyboard.c: 972: parallel = temp_pitch;
 29073  002936  C085  F0E6         	movff	playThisNote8@temp_pitch,_parallel
 29074                           
 29075                           ; BSR set to: 0
 29076                           ;keyboard.c: 975: if(NUM_NOTES_PRESSED > 0){
 29077  00293A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 29078  00293C  B4D8               	btfsc	status,2,c
 29079  00293E  D00A               	goto	l1546
 29080                           
 29081                           ; BSR set to: 0
 29082                           ;keyboard.c: 976: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 29083  002940  0E00               	movlw	0
 29084  002942  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 29085  002944  0E01               	movlw	1
 29086  002946  EC0B  F04A         	call	_wait_one_pulse
 29087                           
 29088                           ;keyboard.c: 977: if(note_off_was_sent == 0) {key_press_release_note_off();}
 29089  00294A  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 29090  00294C  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 29091                           
 29092                           ;keyboard.c: 978: TIMER_OVERFLOWS = 0;
 29093  002950  0E00               	movlw	0
 29094  002952  6E54               	movwf	_TIMER_OVERFLOWS,c
 29095  002954                     l1546:
 29096                           
 29097                           ;keyboard.c: 979: }
 29098                           ;keyboard.c: 982: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MOD
      +                          E == MODES)){
 29099  002954  0100               	movlb	0	; () banked
 29100  002956  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 29101  002958  B4D8               	btfsc	status,2,c
 29102  00295A  D008               	goto	u25440
 29103                           
 29104                           ; BSR set to: 0
 29105  00295C  0E02               	movlw	2
 29106  00295E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29107  002960  B4D8               	btfsc	status,2,c
 29108  002962  D004               	goto	u25440
 29109                           
 29110                           ; BSR set to: 0
 29111  002964  0E03               	movlw	3
 29112  002966  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29113  002968  A4D8               	btfss	status,2,c
 29114  00296A  D003               	goto	l1548
 29115  00296C                     u25440:
 29116                           
 29117                           ; BSR set to: 0
 29118                           ;keyboard.c: 983: add_notes_to_arpeggio(temp_pitch);
 29119                           
 29120                           ; BSR set to: 0
 29121  00296C  5185               	movf	playThisNote8@temp_pitch& (0+255),w,b
 29122  00296E  EC8F  F032         	call	_add_notes_to_arpeggio
 29123  002972                     l1548:
 29124                           
 29125                           ;keyboard.c: 984: }
 29126                           ;keyboard.c: 987: if(LATCH == 0) {latch_was_pressed = 0;}
 29127  002972  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 29128  002974  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29129                           
 29130                           ;keyboard.c: 990: finish_arpeggio_setup();
 29131  002976  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 29132                           
 29133                           ;keyboard.c: 993: TMR0ON = 1;
 29134  00297A  8ED5               	bsf	4053,7,c	;volatile
 29135  00297C                     l1545:
 29136                           
 29137                           ;keyboard.c: 994: }
 29138                           ;keyboard.c: 996: if((ON_OFF == 0) && (LATCH == 0)) {
 29139  00297C  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29140  00297E  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 29141  002980  D063               	goto	l1552
 29142                           
 29143                           ;keyboard.c: 999: TMR0ON = 0;
 29144  002982  9ED5               	bcf	4053,7,c	;volatile
 29145                           
 29146                           ;keyboard.c: 1002: if(NUM_NOTES_PRESSED > 0){
 29147  002984  0100               	movlb	0	; () banked
 29148  002986  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 29149  002988  B4D8               	btfsc	status,2,c
 29150  00298A  D00A               	goto	l1553
 29151                           
 29152                           ; BSR set to: 0
 29153                           ;keyboard.c: 1003: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 29154  00298C  0E00               	movlw	0
 29155  00298E  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 29156  002990  0E01               	movlw	1
 29157  002992  EC0B  F04A         	call	_wait_one_pulse
 29158                           
 29159                           ;keyboard.c: 1004: if(note_off_was_sent == 0) {key_press_release_note_off();}
 29160  002996  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 29161  002998  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 29162                           
 29163                           ;keyboard.c: 1005: TIMER_OVERFLOWS = 0;
 29164  00299C  0E00               	movlw	0
 29165  00299E  6E54               	movwf	_TIMER_OVERFLOWS,c
 29166  0029A0                     l1553:
 29167                           
 29168                           ;keyboard.c: 1006: }
 29169                           ;keyboard.c: 1009: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MO
      +                          DE == MODES)){
 29170  0029A0  0100               	movlb	0	; () banked
 29171  0029A2  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 29172  0029A4  B4D8               	btfsc	status,2,c
 29173  0029A6  D008               	goto	u25520
 29174                           
 29175                           ; BSR set to: 0
 29176  0029A8  0E02               	movlw	2
 29177  0029AA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29178  0029AC  B4D8               	btfsc	status,2,c
 29179  0029AE  D004               	goto	u25520
 29180                           
 29181                           ; BSR set to: 0
 29182  0029B0  0E03               	movlw	3
 29183  0029B2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29184  0029B4  A4D8               	btfss	status,2,c
 29185  0029B6  D003               	goto	l1555
 29186  0029B8                     u25520:
 29187                           
 29188                           ; BSR set to: 0
 29189                           ;keyboard.c: 1010: delete_notes_from_arpeggio(temp_pitch);
 29190                           
 29191                           ; BSR set to: 0
 29192  0029B8  5185               	movf	playThisNote8@temp_pitch& (0+255),w,b
 29193  0029BA  EC7F  F049         	call	_delete_notes_from_arpeggio
 29194  0029BE                     l1555:
 29195                           
 29196                           ;keyboard.c: 1011: }
 29197                           ;keyboard.c: 1013: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 29198  0029BE  C0E6  F080         	movff	_parallel,??_playThisNote8
 29199  0029C2  0100               	movlb	0	; () banked
 29200  0029C4  6B81               	clrf	(??_playThisNote8+1)& (0+255),b
 29201  0029C6  BF80               	btfsc	??_playThisNote8& (0+255),7,b
 29202  0029C8  0781               	decf	(??_playThisNote8+1)& (0+255),f,b
 29203  0029CA  5185               	movf	playThisNote8@temp_pitch& (0+255),w,b
 29204  0029CC  6F82               	movwf	(??_playThisNote8+2)& (0+255),b
 29205  0029CE  6B83               	clrf	(??_playThisNote8+3)& (0+255),b
 29206  0029D0  5180               	movf	??_playThisNote8& (0+255),w,b
 29207  0029D2  1982               	xorwf	(??_playThisNote8+2)& (0+255),w,b
 29208  0029D4  E106               	bnz	l17423
 29209  0029D6  5181               	movf	(??_playThisNote8+1)& (0+255),w,b
 29210  0029D8  1983               	xorwf	(??_playThisNote8+3)& (0+255),w,b
 29211  0029DA  A4D8               	btfss	status,2,c
 29212  0029DC  D002               	goto	l1558
 29213                           
 29214                           ; BSR set to: 0
 29215  0029DE  0E00               	movlw	0
 29216  0029E0  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29217  0029E2                     l1558:
 29218  0029E2                     l17423:
 29219                           
 29220                           ; BSR set to: 0
 29221                           ;keyboard.c: 1018: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 29222  0029E2  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 29223                           
 29224                           ; BSR set to: 0
 29225  0029E4  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29226  0029E6  D001               	goto	l1559
 29227                           
 29228                           ; BSR set to: 0
 29229                           ;keyboard.c: 1019: LATCH = 1;
 29230  0029E8  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 29231  0029EA                     l1559:
 29232                           
 29233                           ; BSR set to: 0
 29234                           ;keyboard.c: 1020: }
 29235                           ;keyboard.c: 1025: if(((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_M
      +                          ODE == MODES)) && (UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 29236                           
 29237                           ; BSR set to: 0
 29238  0029EA  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 29239  0029EC  B4D8               	btfsc	status,2,c
 29240  0029EE  D008               	goto	u25580
 29241                           
 29242                           ; BSR set to: 0
 29243  0029F0  0E02               	movlw	2
 29244  0029F2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29245  0029F4  B4D8               	btfsc	status,2,c
 29246  0029F6  D004               	goto	u25580
 29247                           
 29248                           ; BSR set to: 0
 29249  0029F8  0E03               	movlw	3
 29250  0029FA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29251  0029FC  A4D8               	btfss	status,2,c
 29252  0029FE  D007               	goto	l1560
 29253  002A00                     u25580:
 29254                           
 29255                           ; BSR set to: 0
 29256  002A00  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29257                           
 29258                           ; BSR set to: 0
 29259  002A02  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29260  002A04  D004               	goto	l1560
 29261                           
 29262                           ; BSR set to: 0
 29263                           ;keyboard.c: 1026: NUM_NOTES_PRESSED = 0;
 29264  002A06  0E00               	movlw	0
 29265  002A08  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29266                           
 29267                           ;keyboard.c: 1027: ARRAY_INDEX = 0;
 29268  002A0A  0E00               	movlw	0
 29269  002A0C  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 29270  002A0E                     l1560:
 29271                           
 29272                           ; BSR set to: 0
 29273                           ;keyboard.c: 1028: }
 29274                           ;keyboard.c: 1031: if((KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) | (KEYBOARD_MODE == DIATON
      +                          IC_TRIAD_MINOR) | (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) |(KEYBOARD_MODE == DIATONIC_7TH_
      +                          MINOR) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_pressed == 1)){
 29275                           
 29276                           ; BSR set to: 0
 29277  002A0E  0E07               	movlw	7
 29278  002A10  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29279  002A12  B4D8               	btfsc	status,2,c
 29280  002A14  D00C               	goto	u25640
 29281                           
 29282                           ; BSR set to: 0
 29283  002A16  0E08               	movlw	8
 29284  002A18  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29285  002A1A  B4D8               	btfsc	status,2,c
 29286  002A1C  D008               	goto	u25640
 29287                           
 29288                           ; BSR set to: 0
 29289  002A1E  0E0A               	movlw	10
 29290  002A20  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29291  002A22  B4D8               	btfsc	status,2,c
 29292  002A24  D004               	goto	u25640
 29293                           
 29294                           ; BSR set to: 0
 29295  002A26  0E0B               	movlw	11
 29296  002A28  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29297  002A2A  A4D8               	btfss	status,2,c
 29298  002A2C  D00A               	goto	l1563
 29299  002A2E                     u25640:
 29300                           
 29301                           ; BSR set to: 0
 29302  002A2E  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29303  002A30  D002               	goto	u25660
 29304                           
 29305                           ; BSR set to: 0
 29306  002A32  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29307  002A34  D006               	goto	l1563
 29308  002A36                     u25660:
 29309                           
 29310                           ; BSR set to: 0
 29311  002A36  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29312  002A38  D004               	goto	l1563
 29313                           
 29314                           ; BSR set to: 0
 29315                           ;keyboard.c: 1032: NUM_NOTES_PRESSED = 0;
 29316  002A3A  0E00               	movlw	0
 29317  002A3C  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29318                           
 29319                           ;keyboard.c: 1033: ARRAY_INDEX = 0;
 29320  002A3E  0E00               	movlw	0
 29321  002A40  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 29322  002A42                     l1563:
 29323                           
 29324                           ; BSR set to: 0
 29325                           ;keyboard.c: 1034: }
 29326                           ;keyboard.c: 1037: finish_arpeggio_setup();
 29327                           
 29328                           ; BSR set to: 0
 29329  002A42  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 29330                           
 29331                           ;keyboard.c: 1040: TMR0ON = 1;
 29332  002A46  8ED5               	bsf	4053,7,c	;volatile
 29333  002A48                     l1552:
 29334                           
 29335                           ;keyboard.c: 1041: }
 29336                           ;keyboard.c: 1042: }
 29337                           ;keyboard.c: 1044: if(KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) {
 29338  002A48  0E07               	movlw	7
 29339  002A4A  0100               	movlb	0	; () banked
 29340  002A4C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29341  002A4E  A4D8               	btfss	status,2,c
 29342  002A50  D005               	goto	l1568
 29343                           
 29344                           ; BSR set to: 0
 29345                           ;keyboard.c: 1045: playDiatonicTriadMajor(pitch, index);
 29346  002A52  C07F  F077         	movff	playThisNote8@index,playDiatonicTriadMajor@index
 29347  002A56  5184               	movf	playThisNote8@pitch& (0+255),w,b
 29348  002A58  EC7A  F02B         	call	_playDiatonicTriadMajor
 29349  002A5C                     l1568:
 29350                           
 29351                           ;keyboard.c: 1046: }
 29352                           ;keyboard.c: 1047: if(KEYBOARD_MODE == DIATONIC_TRIAD_MINOR) {
 29353  002A5C  0E08               	movlw	8
 29354  002A5E  0100               	movlb	0	; () banked
 29355  002A60  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29356  002A62  A4D8               	btfss	status,2,c
 29357  002A64  D005               	goto	l1569
 29358                           
 29359                           ; BSR set to: 0
 29360                           ;keyboard.c: 1048: playDiatonicTriadMinor(pitch, index);
 29361  002A66  C07F  F077         	movff	playThisNote8@index,playDiatonicTriadMinor@index
 29362  002A6A  5184               	movf	playThisNote8@pitch& (0+255),w,b
 29363  002A6C  ECC7  F022         	call	_playDiatonicTriadMinor
 29364  002A70                     l1569:
 29365                           
 29366                           ;keyboard.c: 1049: }
 29367                           ;keyboard.c: 1050: if(KEYBOARD_MODE == DIATONIC_7TH_MAJOR) {
 29368  002A70  0E0A               	movlw	10
 29369  002A72  0100               	movlb	0	; () banked
 29370  002A74  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29371  002A76  A4D8               	btfss	status,2,c
 29372  002A78  D005               	goto	l1570
 29373                           
 29374                           ; BSR set to: 0
 29375                           ;keyboard.c: 1051: playDiatonicSeventhMajor(pitch, index);
 29376  002A7A  C07F  F077         	movff	playThisNote8@index,playDiatonicSeventhMajor@index
 29377  002A7E  5184               	movf	playThisNote8@pitch& (0+255),w,b
 29378  002A80  ECB1  F02A         	call	_playDiatonicSeventhMajor
 29379  002A84                     l1570:
 29380                           
 29381                           ;keyboard.c: 1052: }
 29382                           ;keyboard.c: 1053: if(KEYBOARD_MODE == DIATONIC_7TH_MINOR) {
 29383  002A84  0E0B               	movlw	11
 29384  002A86  0100               	movlb	0	; () banked
 29385  002A88  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29386  002A8A  A4D8               	btfss	status,2,c
 29387  002A8C  0012               	return	
 29388                           
 29389                           ; BSR set to: 0
 29390                           ;keyboard.c: 1054: playDiatonicSeventhMinor(pitch, index);
 29391  002A8E  C07F  F077         	movff	playThisNote8@index,playDiatonicSeventhMinor@index
 29392  002A92  5184               	movf	playThisNote8@pitch& (0+255),w,b
 29393  002A94  ECF6  F023         	call	_playDiatonicSeventhMinor
 29394  002A98  0012               	return	
 29395  002A9A                     __end_of_playThisNote8:
 29396                           	opt stack 0
 29397                           tblptru	equ	0xFF8
 29398                           tblptrh	equ	0xFF7
 29399                           tblptrl	equ	0xFF6
 29400                           tablat	equ	0xFF5
 29401                           prodh	equ	0xFF4
 29402                           prodl	equ	0xFF3
 29403                           intcon	equ	0xFF2
 29404                           intcon2	equ	0xFF1
 29405                           postinc0	equ	0xFEE
 29406                           wreg	equ	0xFE8
 29407                           indf1	equ	0xFE7
 29408                           postdec1	equ	0xFE5
 29409                           fsr1h	equ	0xFE2
 29410                           fsr1l	equ	0xFE1
 29411                           indf2	equ	0xFDF
 29412                           postinc2	equ	0xFDE
 29413                           plusw2	equ	0xFDB
 29414                           fsr2h	equ	0xFDA
 29415                           fsr2l	equ	0xFD9
 29416                           status	equ	0xFD8
 29417                           
 29418 ;; *************** function _playDiatonicTriadMinor *****************
 29419 ;; Defined at:
 29420 ;;		line 1198 in file "keyboard.c"
 29421 ;; Parameters:    Size  Location     Type
 29422 ;;  pitch           1    wreg     unsigned char 
 29423 ;;  index           1   23[BANK0 ] unsigned char 
 29424 ;; Auto vars:     Size  Location     Type
 29425 ;;  pitch           1   28[BANK0 ] unsigned char 
 29426 ;;  i               1   30[BANK0 ] unsigned char 
 29427 ;;  i               1   29[BANK0 ] unsigned char 
 29428 ;; Return value:  Size  Location     Type
 29429 ;;                  1    wreg      void 
 29430 ;; Registers used:
 29431 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29432 ;; Tracked objects:
 29433 ;;		On entry : 0/0
 29434 ;;		On exit  : 0/0
 29435 ;;		Unchanged: 0/0
 29436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 29437 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29438 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29439 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29440 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29441 ;;Total ram usage:        8 bytes
 29442 ;; Hardware stack levels used:    1
 29443 ;; Hardware stack levels required when called:   10
 29444 ;; This function calls:
 29445 ;;		_finish_arpeggio_setup
 29446 ;;		_key_press_release_note_off
 29447 ;;		_noteOff
 29448 ;;		_noteOn
 29449 ;;		_wait_one_pulse
 29450 ;; This function is called by:
 29451 ;;		_playThisNote8
 29452 ;; This function uses a non-reentrant model
 29453 ;;
 29454                           
 29455                           	psect	text87
 29456  00458E                     __ptext87:
 29457                           	opt stack 0
 29458  00458E                     _playDiatonicTriadMinor:
 29459                           	opt stack 14
 29460                           
 29461                           ;incstack = 0
 29462                           ;playDiatonicTriadMinor@pitch stored from wreg
 29463  00458E  0100               	movlb	0	; () banked
 29464  004590  6F7C               	movwf	playDiatonicTriadMinor@pitch& (0+255),b
 29465                           
 29466                           ;keyboard.c: 1201: if(ARPEGGIO_ON == 0){
 29467  004592  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 29468  004594  D08B               	goto	u24010
 29469                           
 29470                           ;keyboard.c: 1202: for(unsigned char i = 0; i<3; i++){
 29471  004596  0E00               	movlw	0
 29472  004598  0100               	movlb	0	; () banked
 29473  00459A  6F7D               	movwf	playDiatonicTriadMinor@i& (0+255),b
 29474  00459C                     l16783:
 29475                           
 29476                           ; BSR set to: 0
 29477  00459C  0E02               	movlw	2
 29478  00459E  657D               	cpfsgt	playDiatonicTriadMinor@i& (0+255),b
 29479  0045A0  D001               	goto	l1622
 29480  0045A2  D084               	goto	u24010
 29481  0045A4                     l1622:
 29482                           
 29483                           ; BSR set to: 0
 29484                           ;keyboard.c: 1203: if(i==0){
 29485                           
 29486                           ; BSR set to: 0
 29487  0045A4  517D               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 29488  0045A6  A4D8               	btfss	status,2,c
 29489  0045A8  D025               	goto	l1626
 29490                           
 29491                           ; BSR set to: 0
 29492                           ;keyboard.c: 1204: if(ON_OFF == 1) {noteOn(channel,diatonic_minor[index][0],velocity);}
 29493  0045AA  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29494  0045AC  D010               	goto	l1625
 29495                           
 29496                           ; BSR set to: 0
 29497  0045AE  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29498  0045B0  0D03               	mullw	3
 29499  0045B2  0EE3               	movlw	low _diatonic_minor
 29500  0045B4  24F3               	addwf	prodl,w,c
 29501  0045B6  6EF6               	movwf	tblptrl,c
 29502  0045B8  0EF2               	movlw	high _diatonic_minor
 29503  0045BA  20F4               	addwfc	prodh,w,c
 29504  0045BC  6EF7               	movwf	tblptrh,c
 29505  0045BE                     	if	0	;There are less than 3 active tblptr bytes
 29506  0045BE                     	endif
 29507  0045BE  0008               	tblrd		*
 29508  0045C0  CFF5 F06E          	movff	tablat,noteOn@pitch
 29509  0045C4  C0FD  F06F         	movff	_velocity,noteOn@velocity
 29510  0045C8  51F6               	movf	_channel& (0+255),w,b
 29511  0045CA  ECE1  F044         	call	_noteOn
 29512  0045CE                     l1625:
 29513                           
 29514                           ;keyboard.c: 1205: if(ON_OFF == 0) {noteOff(channel,diatonic_minor[index][0],velocity);}
 29515  0045CE  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29516  0045D0  D011               	goto	l1626
 29517  0045D2  0100               	movlb	0	; () banked
 29518  0045D4  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29519  0045D6  0D03               	mullw	3
 29520  0045D8  0EE3               	movlw	low _diatonic_minor
 29521  0045DA  24F3               	addwf	prodl,w,c
 29522  0045DC  6EF6               	movwf	tblptrl,c
 29523  0045DE  0EF2               	movlw	high _diatonic_minor
 29524  0045E0  20F4               	addwfc	prodh,w,c
 29525  0045E2  6EF7               	movwf	tblptrh,c
 29526  0045E4                     	if	0	;There are less than 3 active tblptr bytes
 29527  0045E4                     	endif
 29528  0045E4  0008               	tblrd		*
 29529  0045E6  CFF5 F06B          	movff	tablat,noteOff@pitch
 29530  0045EA  C0FD  F06C         	movff	_velocity,noteOff@velocity
 29531  0045EE  51F6               	movf	_channel& (0+255),w,b
 29532  0045F0  EC08  F048         	call	_noteOff
 29533  0045F4                     l1626:
 29534                           
 29535                           ;keyboard.c: 1206: }
 29536                           ;keyboard.c: 1207: if(i>0){
 29537  0045F4  0100               	movlb	0	; () banked
 29538  0045F6  517D               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 29539  0045F8  B4D8               	btfsc	status,2,c
 29540  0045FA  D055               	goto	l1629
 29541                           
 29542                           ; BSR set to: 0
 29543                           ;keyboard.c: 1208: if(ON_OFF == 1) noteOn(channel,diatonic_minor[index][0] + diatonic_mi
      +                          nor[index][i],velocity);
 29544  0045FC  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29545  0045FE  D028               	goto	l1628
 29546                           
 29547                           ; BSR set to: 0
 29548  004600  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29549  004602  0D03               	mullw	3
 29550  004604  0EE3               	movlw	low _diatonic_minor
 29551  004606  6F78               	movwf	??_playDiatonicTriadMinor& (0+255),b
 29552  004608  0EF2               	movlw	high _diatonic_minor
 29553  00460A  6F79               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 29554  00460C  50F3               	movf	prodl,w,c
 29555  00460E  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29556  004610  50F4               	movf	prodh,w,c
 29557  004612  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29558  004614  517D               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 29559  004616  0D01               	mullw	1
 29560  004618  50F3               	movf	prodl,w,c
 29561  00461A  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29562  00461C  50F4               	movf	prodh,w,c
 29563  00461E  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29564  004620  C078  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 29565  004624  C079  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 29566  004628                     	if	0	;tblptru may be non-zero
 29567  004628                     	endif
 29568  004628                     	if	0	;tblptru may be non-zero
 29569  004628                     	endif
 29570  004628  0008               	tblrd		*
 29571  00462A  CFF5 F07A          	movff	tablat,??_playDiatonicTriadMinor+2
 29572  00462E  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29573  004630  0D03               	mullw	3
 29574  004632  0EE3               	movlw	low _diatonic_minor
 29575  004634  24F3               	addwf	prodl,w,c
 29576  004636  6EF6               	movwf	tblptrl,c
 29577  004638  0EF2               	movlw	high _diatonic_minor
 29578  00463A  20F4               	addwfc	prodh,w,c
 29579  00463C  6EF7               	movwf	tblptrh,c
 29580  00463E                     	if	0	;There are less than 3 active tblptr bytes
 29581  00463E                     	endif
 29582  00463E  0008               	tblrd		*
 29583  004640  50F5               	movf	tablat,w,c
 29584  004642  257A               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 29585  004644  6F6E               	movwf	noteOn@pitch& (0+255),b
 29586  004646  C0FD  F06F         	movff	_velocity,noteOn@velocity
 29587  00464A  51F6               	movf	_channel& (0+255),w,b
 29588  00464C  ECE1  F044         	call	_noteOn
 29589  004650                     l1628:
 29590                           
 29591                           ;keyboard.c: 1209: if(ON_OFF == 0) noteOff(channel,diatonic_minor[index][0] + diatonic_m
      +                          inor[index][i],velocity);
 29592  004650  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29593  004652  D029               	goto	l1629
 29594  004654  0100               	movlb	0	; () banked
 29595  004656  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29596  004658  0D03               	mullw	3
 29597  00465A  0EE3               	movlw	low _diatonic_minor
 29598  00465C  6F78               	movwf	??_playDiatonicTriadMinor& (0+255),b
 29599  00465E  0EF2               	movlw	high _diatonic_minor
 29600  004660  6F79               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 29601  004662  50F3               	movf	prodl,w,c
 29602  004664  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29603  004666  50F4               	movf	prodh,w,c
 29604  004668  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29605  00466A  517D               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 29606  00466C  0D01               	mullw	1
 29607  00466E  50F3               	movf	prodl,w,c
 29608  004670  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29609  004672  50F4               	movf	prodh,w,c
 29610  004674  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29611  004676  C078  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 29612  00467A  C079  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 29613  00467E                     	if	0	;tblptru may be non-zero
 29614  00467E                     	endif
 29615  00467E                     	if	0	;tblptru may be non-zero
 29616  00467E                     	endif
 29617  00467E  0008               	tblrd		*
 29618  004680  CFF5 F07A          	movff	tablat,??_playDiatonicTriadMinor+2
 29619  004684  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29620  004686  0D03               	mullw	3
 29621  004688  0EE3               	movlw	low _diatonic_minor
 29622  00468A  24F3               	addwf	prodl,w,c
 29623  00468C  6EF6               	movwf	tblptrl,c
 29624  00468E  0EF2               	movlw	high _diatonic_minor
 29625  004690  20F4               	addwfc	prodh,w,c
 29626  004692  6EF7               	movwf	tblptrh,c
 29627  004694                     	if	0	;There are less than 3 active tblptr bytes
 29628  004694                     	endif
 29629  004694  0008               	tblrd		*
 29630  004696  50F5               	movf	tablat,w,c
 29631  004698  257A               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 29632  00469A  6F6B               	movwf	noteOff@pitch& (0+255),b
 29633  00469C  C0FD  F06C         	movff	_velocity,noteOff@velocity
 29634  0046A0  51F6               	movf	_channel& (0+255),w,b
 29635  0046A2  EC08  F048         	call	_noteOff
 29636  0046A6                     l1629:
 29637  0046A6  0100               	movlb	0	; () banked
 29638  0046A8  2B7D               	incf	playDiatonicTriadMinor@i& (0+255),f,b
 29639  0046AA  D778               	goto	l16783
 29640  0046AC                     u24010:
 29641                           
 29642                           ;keyboard.c: 1210: }
 29643                           ;keyboard.c: 1211: }
 29644                           ;keyboard.c: 1212: }
 29645                           ;keyboard.c: 1215: if(ARPEGGIO_ON == 1){
 29646                           
 29647                           ; BSR set to: 0
 29648  0046AC  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 29649  0046AE  0012               	return	
 29650                           
 29651                           ;keyboard.c: 1216: if(ON_OFF == 1) {
 29652  0046B0  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29653  0046B2  D066               	goto	l1631
 29654                           
 29655                           ;keyboard.c: 1218: TMR0ON = 0;
 29656  0046B4  9ED5               	bcf	4053,7,c	;volatile
 29657                           
 29658                           ;keyboard.c: 1220: parallel = pitch;
 29659  0046B6  C07C  F0E6         	movff	playDiatonicTriadMinor@pitch,_parallel
 29660                           
 29661                           ;keyboard.c: 1223: if(NUM_NOTES_PRESSED > 0){
 29662  0046BA  0100               	movlb	0	; () banked
 29663  0046BC  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 29664  0046BE  B4D8               	btfsc	status,2,c
 29665  0046C0  D00A               	goto	l1632
 29666                           
 29667                           ; BSR set to: 0
 29668                           ;keyboard.c: 1224: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 29669  0046C2  0E00               	movlw	0
 29670  0046C4  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 29671  0046C6  0E01               	movlw	1
 29672  0046C8  EC0B  F04A         	call	_wait_one_pulse
 29673                           
 29674                           ;keyboard.c: 1225: if(note_off_was_sent == 0) {key_press_release_note_off();}
 29675  0046CC  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 29676  0046CE  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 29677                           
 29678                           ;keyboard.c: 1226: TIMER_OVERFLOWS = 0;
 29679  0046D2  0E00               	movlw	0
 29680  0046D4  6E54               	movwf	_TIMER_OVERFLOWS,c
 29681  0046D6                     l1632:
 29682                           
 29683                           ;keyboard.c: 1227: }
 29684                           ;keyboard.c: 1229: for(unsigned char i = 0; i<3; i++){
 29685  0046D6  0E00               	movlw	0
 29686  0046D8  0100               	movlb	0	; () banked
 29687  0046DA  6F7E               	movwf	playDiatonicTriadMinor@i_1689& (0+255),b
 29688  0046DC                     l16827:
 29689                           
 29690                           ; BSR set to: 0
 29691  0046DC  0E02               	movlw	2
 29692  0046DE  657E               	cpfsgt	playDiatonicTriadMinor@i_1689& (0+255),b
 29693  0046E0  D001               	goto	l1634
 29694  0046E2  D046               	goto	u24090
 29695  0046E4                     l1634:
 29696                           
 29697                           ; BSR set to: 0
 29698                           ;keyboard.c: 1230: if(i==0){ARPEGGIO[i] = diatonic_minor[index][0];}
 29699                           
 29700                           ; BSR set to: 0
 29701  0046E4  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29702  0046E6  A4D8               	btfss	status,2,c
 29703  0046E8  D013               	goto	l1636
 29704                           
 29705                           ; BSR set to: 0
 29706  0046EA  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29707  0046EC  0D03               	mullw	3
 29708  0046EE  0EE3               	movlw	low _diatonic_minor
 29709  0046F0  24F3               	addwf	prodl,w,c
 29710  0046F2  6EF6               	movwf	tblptrl,c
 29711  0046F4  0EF2               	movlw	high _diatonic_minor
 29712  0046F6  20F4               	addwfc	prodh,w,c
 29713  0046F8  6EF7               	movwf	tblptrh,c
 29714  0046FA                     	if	0	;There are less than 3 active tblptr bytes
 29715  0046FA                     	endif
 29716  0046FA  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29717  0046FC  0D01               	mullw	1
 29718  0046FE  0E72               	movlw	low _ARPEGGIO
 29719  004700  24F3               	addwf	prodl,w,c
 29720  004702  6ED9               	movwf	fsr2l,c
 29721  004704  0E01               	movlw	high _ARPEGGIO
 29722  004706  20F4               	addwfc	prodh,w,c
 29723  004708  6EDA               	movwf	fsr2h,c
 29724  00470A  0008               	tblrd		*
 29725  00470C  CFF5 FFDF          	movff	tablat,indf2
 29726  004710                     l1636:
 29727                           
 29728                           ; BSR set to: 0
 29729                           ;keyboard.c: 1231: if(i>0){ARPEGGIO[i] = diatonic_minor[index][0] + diatonic_minor[index
      +                          ][i];}
 29730                           
 29731                           ; BSR set to: 0
 29732  004710  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29733  004712  B4D8               	btfsc	status,2,c
 29734  004714  D02B               	goto	l1637
 29735                           
 29736                           ; BSR set to: 0
 29737  004716  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29738  004718  0D01               	mullw	1
 29739  00471A  0E72               	movlw	low _ARPEGGIO
 29740  00471C  24F3               	addwf	prodl,w,c
 29741  00471E  6ED9               	movwf	fsr2l,c
 29742  004720  0E01               	movlw	high _ARPEGGIO
 29743  004722  20F4               	addwfc	prodh,w,c
 29744  004724  6EDA               	movwf	fsr2h,c
 29745  004726  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29746  004728  0D03               	mullw	3
 29747  00472A  0EE3               	movlw	low _diatonic_minor
 29748  00472C  6F78               	movwf	??_playDiatonicTriadMinor& (0+255),b
 29749  00472E  0EF2               	movlw	high _diatonic_minor
 29750  004730  6F79               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 29751  004732  50F3               	movf	prodl,w,c
 29752  004734  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29753  004736  50F4               	movf	prodh,w,c
 29754  004738  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29755  00473A  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29756  00473C  0D01               	mullw	1
 29757  00473E  50F3               	movf	prodl,w,c
 29758  004740  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29759  004742  50F4               	movf	prodh,w,c
 29760  004744  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29761  004746  C078  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 29762  00474A  C079  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 29763  00474E                     	if	0	;tblptru may be non-zero
 29764  00474E                     	endif
 29765  00474E                     	if	0	;tblptru may be non-zero
 29766  00474E                     	endif
 29767  00474E  0008               	tblrd		*
 29768  004750  CFF5 F07A          	movff	tablat,??_playDiatonicTriadMinor+2
 29769  004754  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29770  004756  0D03               	mullw	3
 29771  004758  0EE3               	movlw	low _diatonic_minor
 29772  00475A  24F3               	addwf	prodl,w,c
 29773  00475C  6EF6               	movwf	tblptrl,c
 29774  00475E  0EF2               	movlw	high _diatonic_minor
 29775  004760  20F4               	addwfc	prodh,w,c
 29776  004762  6EF7               	movwf	tblptrh,c
 29777  004764                     	if	0	;There are less than 3 active tblptr bytes
 29778  004764                     	endif
 29779  004764  0008               	tblrd		*
 29780  004766  50F5               	movf	tablat,w,c
 29781  004768  257A               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 29782  00476A  6EDF               	movwf	indf2,c
 29783  00476C                     l1637:
 29784                           
 29785                           ; BSR set to: 0
 29786                           
 29787                           ; BSR set to: 0
 29788  00476C  2B7E               	incf	playDiatonicTriadMinor@i_1689& (0+255),f,b
 29789  00476E  D7B6               	goto	l16827
 29790  004770                     u24090:
 29791                           
 29792                           ; BSR set to: 0
 29793                           ;keyboard.c: 1232: }
 29794                           ;keyboard.c: 1234: NUM_NOTES_PRESSED = 3;
 29795                           
 29796                           ; BSR set to: 0
 29797  004770  0E03               	movlw	3
 29798  004772  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29799                           
 29800                           ; BSR set to: 0
 29801                           ;keyboard.c: 1237: if(LATCH == 0) {latch_was_pressed = 0;}
 29802  004774  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 29803                           
 29804                           ; BSR set to: 0
 29805  004776  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29806                           
 29807                           ; BSR set to: 0
 29808                           ;keyboard.c: 1240: finish_arpeggio_setup();
 29809                           
 29810                           ; BSR set to: 0
 29811  004778  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 29812                           
 29813                           ;keyboard.c: 1242: TMR0ON = 1;
 29814  00477C  8ED5               	bsf	4053,7,c	;volatile
 29815                           
 29816                           ;keyboard.c: 1244: return;
 29817  00477E  0012               	return	
 29818  004780                     l1631:
 29819                           
 29820                           ;keyboard.c: 1245: }
 29821                           ;keyboard.c: 1247: if((ON_OFF == 0) && (LATCH == 0)) {
 29822  004780  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29823  004782  0012               	return	
 29824  004784  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 29825  004786  0012               	return	
 29826                           
 29827                           ;keyboard.c: 1249: if(NUM_NOTES_PRESSED > 0){
 29828  004788  0100               	movlb	0	; () banked
 29829  00478A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 29830  00478C  B4D8               	btfsc	status,2,c
 29831  00478E  D00A               	goto	l1641
 29832                           
 29833                           ; BSR set to: 0
 29834                           ;keyboard.c: 1250: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 29835  004790  0E00               	movlw	0
 29836  004792  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 29837  004794  0E01               	movlw	1
 29838  004796  EC0B  F04A         	call	_wait_one_pulse
 29839                           
 29840                           ;keyboard.c: 1251: if(note_off_was_sent == 0) {key_press_release_note_off();}
 29841  00479A  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 29842  00479C  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 29843                           
 29844                           ;keyboard.c: 1252: TIMER_OVERFLOWS = 0;
 29845  0047A0  0E00               	movlw	0
 29846  0047A2  6E54               	movwf	_TIMER_OVERFLOWS,c
 29847  0047A4                     l1641:
 29848                           
 29849                           ;keyboard.c: 1253: }
 29850                           ;keyboard.c: 1255: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 29851  0047A4  C0E6  F078         	movff	_parallel,??_playDiatonicTriadMinor
 29852  0047A8  0100               	movlb	0	; () banked
 29853  0047AA  6B79               	clrf	(??_playDiatonicTriadMinor+1)& (0+255),b
 29854  0047AC  BF78               	btfsc	??_playDiatonicTriadMinor& (0+255),7,b
 29855  0047AE  0779               	decf	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29856  0047B0  517C               	movf	playDiatonicTriadMinor@pitch& (0+255),w,b
 29857  0047B2  6F7A               	movwf	(??_playDiatonicTriadMinor+2)& (0+255),b
 29858  0047B4  6B7B               	clrf	(??_playDiatonicTriadMinor+3)& (0+255),b
 29859  0047B6  5178               	movf	??_playDiatonicTriadMinor& (0+255),w,b
 29860  0047B8  197A               	xorwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 29861  0047BA  E106               	bnz	l16871
 29862  0047BC  5179               	movf	(??_playDiatonicTriadMinor+1)& (0+255),w,b
 29863  0047BE  197B               	xorwf	(??_playDiatonicTriadMinor+3)& (0+255),w,b
 29864  0047C0  A4D8               	btfss	status,2,c
 29865  0047C2  D002               	goto	l1643
 29866                           
 29867                           ; BSR set to: 0
 29868  0047C4  0E00               	movlw	0
 29869  0047C6  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29870  0047C8                     l1643:
 29871  0047C8                     l16871:
 29872                           
 29873                           ; BSR set to: 0
 29874                           ;keyboard.c: 1257: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 29875  0047C8  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 29876                           
 29877                           ; BSR set to: 0
 29878  0047CA  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29879  0047CC  D001               	goto	l1644
 29880                           
 29881                           ; BSR set to: 0
 29882                           ;keyboard.c: 1258: LATCH = 1;
 29883  0047CE  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 29884  0047D0                     l1644:
 29885                           
 29886                           ; BSR set to: 0
 29887                           ;keyboard.c: 1259: }
 29888                           ;keyboard.c: 1262: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 29889  0047D0  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29890  0047D2  D002               	goto	u24190
 29891                           
 29892                           ; BSR set to: 0
 29893  0047D4  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29894  0047D6  D006               	goto	l1645
 29895  0047D8                     u24190:
 29896                           
 29897                           ; BSR set to: 0
 29898  0047D8  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29899  0047DA  D004               	goto	l1645
 29900                           
 29901                           ; BSR set to: 0
 29902                           ;keyboard.c: 1263: NUM_NOTES_PRESSED = 0;
 29903  0047DC  0E00               	movlw	0
 29904  0047DE  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29905                           
 29906                           ;keyboard.c: 1264: ARRAY_INDEX = 0;
 29907  0047E0  0E00               	movlw	0
 29908  0047E2  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 29909  0047E4                     l1645:
 29910                           
 29911                           ; BSR set to: 0
 29912                           ;keyboard.c: 1265: }
 29913                           ;keyboard.c: 1268: finish_arpeggio_setup();
 29914                           
 29915                           ; BSR set to: 0
 29916  0047E4  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 29917                           
 29918                           ;keyboard.c: 1269: TMR0ON = 1;
 29919  0047E8  8ED5               	bsf	4053,7,c	;volatile
 29920                           
 29921                           ;keyboard.c: 1271: return;
 29922  0047EA  0012               	return	
 29923  0047EC                     __end_of_playDiatonicTriadMinor:
 29924                           	opt stack 0
 29925                           tblptru	equ	0xFF8
 29926                           tblptrh	equ	0xFF7
 29927                           tblptrl	equ	0xFF6
 29928                           tablat	equ	0xFF5
 29929                           prodh	equ	0xFF4
 29930                           prodl	equ	0xFF3
 29931                           intcon	equ	0xFF2
 29932                           intcon2	equ	0xFF1
 29933                           postinc0	equ	0xFEE
 29934                           wreg	equ	0xFE8
 29935                           indf1	equ	0xFE7
 29936                           postdec1	equ	0xFE5
 29937                           fsr1h	equ	0xFE2
 29938                           fsr1l	equ	0xFE1
 29939                           indf2	equ	0xFDF
 29940                           postinc2	equ	0xFDE
 29941                           plusw2	equ	0xFDB
 29942                           fsr2h	equ	0xFDA
 29943                           fsr2l	equ	0xFD9
 29944                           status	equ	0xFD8
 29945                           
 29946 ;; *************** function _playDiatonicTriadMajor *****************
 29947 ;; Defined at:
 29948 ;;		line 1058 in file "keyboard.c"
 29949 ;; Parameters:    Size  Location     Type
 29950 ;;  pitch           1    wreg     unsigned char 
 29951 ;;  index           1   23[BANK0 ] unsigned char 
 29952 ;; Auto vars:     Size  Location     Type
 29953 ;;  pitch           1   30[BANK0 ] unsigned char 
 29954 ;;  i               1   29[BANK0 ] unsigned char 
 29955 ;;  i               1   28[BANK0 ] unsigned char 
 29956 ;; Return value:  Size  Location     Type
 29957 ;;                  1    wreg      void 
 29958 ;; Registers used:
 29959 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29960 ;; Tracked objects:
 29961 ;;		On entry : 0/0
 29962 ;;		On exit  : 0/0
 29963 ;;		Unchanged: 0/0
 29964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 29965 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29966 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29967 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29968 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29969 ;;Total ram usage:        8 bytes
 29970 ;; Hardware stack levels used:    1
 29971 ;; Hardware stack levels required when called:   10
 29972 ;; This function calls:
 29973 ;;		_finish_arpeggio_setup
 29974 ;;		_key_press_release_note_off
 29975 ;;		_noteOff
 29976 ;;		_noteOn
 29977 ;;		_wait_one_pulse
 29978 ;; This function is called by:
 29979 ;;		_playThisNote8
 29980 ;; This function uses a non-reentrant model
 29981 ;;
 29982                           
 29983                           	psect	text88
 29984  0056F4                     __ptext88:
 29985                           	opt stack 0
 29986  0056F4                     _playDiatonicTriadMajor:
 29987                           	opt stack 14
 29988                           
 29989                           ;incstack = 0
 29990                           ;playDiatonicTriadMajor@pitch stored from wreg
 29991  0056F4  0100               	movlb	0	; () banked
 29992  0056F6  6F7E               	movwf	playDiatonicTriadMajor@pitch& (0+255),b
 29993                           
 29994                           ;keyboard.c: 1061: if(ARPEGGIO_ON == 0){
 29995  0056F8  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 29996  0056FA  D049               	goto	u23750
 29997                           
 29998                           ;keyboard.c: 1062: for(unsigned char i = 0; i<3; i++){
 29999  0056FC  0E00               	movlw	0
 30000  0056FE  0100               	movlb	0	; () banked
 30001  005700  6F7C               	movwf	playDiatonicTriadMajor@i& (0+255),b
 30002  005702                     l16697:
 30003                           
 30004                           ; BSR set to: 0
 30005  005702  0E02               	movlw	2
 30006  005704  657C               	cpfsgt	playDiatonicTriadMajor@i& (0+255),b
 30007  005706  D001               	goto	l1576
 30008  005708  D042               	goto	u23750
 30009  00570A                     l1576:
 30010                           
 30011                           ; BSR set to: 0
 30012                           ;keyboard.c: 1063: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_major[index][i],velo
      +                          city);}
 30013  00570A  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30014  00570C  D01D               	goto	l1578
 30015                           
 30016                           ; BSR set to: 0
 30017  00570E  5177               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 30018  005710  0D03               	mullw	3
 30019  005712  0E10               	movlw	low _diatonic_major
 30020  005714  6F78               	movwf	??_playDiatonicTriadMajor& (0+255),b
 30021  005716  0EF3               	movlw	high _diatonic_major
 30022  005718  6F79               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 30023  00571A  50F3               	movf	prodl,w,c
 30024  00571C  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 30025  00571E  50F4               	movf	prodh,w,c
 30026  005720  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30027  005722  517C               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 30028  005724  0D01               	mullw	1
 30029  005726  50F3               	movf	prodl,w,c
 30030  005728  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 30031  00572A  50F4               	movf	prodh,w,c
 30032  00572C  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30033  00572E  C078  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 30034  005732  C079  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 30035  005736                     	if	0	;tblptru may be non-zero
 30036  005736                     	endif
 30037  005736                     	if	0	;tblptru may be non-zero
 30038  005736                     	endif
 30039  005736  0008               	tblrd		*
 30040  005738  50F5               	movf	tablat,w,c
 30041  00573A  257E               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 30042  00573C  6F6E               	movwf	noteOn@pitch& (0+255),b
 30043  00573E  C0FD  F06F         	movff	_velocity,noteOn@velocity
 30044  005742  51F6               	movf	_channel& (0+255),w,b
 30045  005744  ECE1  F044         	call	_noteOn
 30046  005748                     l1578:
 30047                           
 30048                           ;keyboard.c: 1064: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_major[index][i],vel
      +                          ocity);}
 30049  005748  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30050  00574A  D01E               	goto	l1579
 30051  00574C  0100               	movlb	0	; () banked
 30052  00574E  5177               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 30053  005750  0D03               	mullw	3
 30054  005752  0E10               	movlw	low _diatonic_major
 30055  005754  6F78               	movwf	??_playDiatonicTriadMajor& (0+255),b
 30056  005756  0EF3               	movlw	high _diatonic_major
 30057  005758  6F79               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 30058  00575A  50F3               	movf	prodl,w,c
 30059  00575C  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 30060  00575E  50F4               	movf	prodh,w,c
 30061  005760  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30062  005762  517C               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 30063  005764  0D01               	mullw	1
 30064  005766  50F3               	movf	prodl,w,c
 30065  005768  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 30066  00576A  50F4               	movf	prodh,w,c
 30067  00576C  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30068  00576E  C078  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 30069  005772  C079  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 30070  005776                     	if	0	;tblptru may be non-zero
 30071  005776                     	endif
 30072  005776                     	if	0	;tblptru may be non-zero
 30073  005776                     	endif
 30074  005776  0008               	tblrd		*
 30075  005778  50F5               	movf	tablat,w,c
 30076  00577A  257E               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 30077  00577C  6F6B               	movwf	noteOff@pitch& (0+255),b
 30078  00577E  C0FD  F06C         	movff	_velocity,noteOff@velocity
 30079  005782  51F6               	movf	_channel& (0+255),w,b
 30080  005784  EC08  F048         	call	_noteOff
 30081  005788                     l1579:
 30082  005788  0100               	movlb	0	; () banked
 30083  00578A  2B7C               	incf	playDiatonicTriadMajor@i& (0+255),f,b
 30084  00578C  D7BA               	goto	l16697
 30085  00578E                     u23750:
 30086                           
 30087                           ;keyboard.c: 1065: }
 30088                           ;keyboard.c: 1066: }
 30089                           ;keyboard.c: 1069: if(ARPEGGIO_ON == 1){
 30090                           
 30091                           ; BSR set to: 0
 30092  00578E  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30093  005790  0012               	return	
 30094                           
 30095                           ;keyboard.c: 1070: if(ON_OFF == 1) {
 30096  005792  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30097  005794  D041               	goto	l1581
 30098                           
 30099                           ;keyboard.c: 1072: TMR0ON = 0;
 30100  005796  9ED5               	bcf	4053,7,c	;volatile
 30101                           
 30102                           ;keyboard.c: 1074: parallel = pitch;
 30103  005798  C07E  F0E6         	movff	playDiatonicTriadMajor@pitch,_parallel
 30104                           
 30105                           ;keyboard.c: 1077: if(NUM_NOTES_PRESSED > 0){
 30106  00579C  0100               	movlb	0	; () banked
 30107  00579E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30108  0057A0  B4D8               	btfsc	status,2,c
 30109  0057A2  D00A               	goto	l1582
 30110                           
 30111                           ; BSR set to: 0
 30112                           ;keyboard.c: 1078: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 30113  0057A4  0E00               	movlw	0
 30114  0057A6  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 30115  0057A8  0E01               	movlw	1
 30116  0057AA  EC0B  F04A         	call	_wait_one_pulse
 30117                           
 30118                           ;keyboard.c: 1079: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30119  0057AE  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30120  0057B0  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 30121                           
 30122                           ;keyboard.c: 1080: TIMER_OVERFLOWS = 0;
 30123  0057B4  0E00               	movlw	0
 30124  0057B6  6E54               	movwf	_TIMER_OVERFLOWS,c
 30125  0057B8                     l1582:
 30126                           
 30127                           ;keyboard.c: 1081: }
 30128                           ;keyboard.c: 1083: for(unsigned char i = 0; i<3; i++){
 30129  0057B8  0E00               	movlw	0
 30130  0057BA  0100               	movlb	0	; () banked
 30131  0057BC  6F7D               	movwf	playDiatonicTriadMajor@i_1679& (0+255),b
 30132  0057BE                     l16727:
 30133                           
 30134                           ; BSR set to: 0
 30135  0057BE  0E02               	movlw	2
 30136  0057C0  657D               	cpfsgt	playDiatonicTriadMajor@i_1679& (0+255),b
 30137  0057C2  D001               	goto	l1584
 30138  0057C4  D022               	goto	u23810
 30139  0057C6                     l1584:
 30140                           
 30141                           ; BSR set to: 0
 30142                           ;keyboard.c: 1084: ARPEGGIO[i] = pitch + diatonic_major[index][i];
 30143                           
 30144                           ; BSR set to: 0
 30145  0057C6  517D               	movf	playDiatonicTriadMajor@i_1679& (0+255),w,b
 30146  0057C8  0D01               	mullw	1
 30147  0057CA  0E72               	movlw	low _ARPEGGIO
 30148  0057CC  24F3               	addwf	prodl,w,c
 30149  0057CE  6ED9               	movwf	fsr2l,c
 30150  0057D0  0E01               	movlw	high _ARPEGGIO
 30151  0057D2  20F4               	addwfc	prodh,w,c
 30152  0057D4  6EDA               	movwf	fsr2h,c
 30153  0057D6  5177               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 30154  0057D8  0D03               	mullw	3
 30155  0057DA  0E10               	movlw	low _diatonic_major
 30156  0057DC  6F78               	movwf	??_playDiatonicTriadMajor& (0+255),b
 30157  0057DE  0EF3               	movlw	high _diatonic_major
 30158  0057E0  6F79               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 30159  0057E2  50F3               	movf	prodl,w,c
 30160  0057E4  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 30161  0057E6  50F4               	movf	prodh,w,c
 30162  0057E8  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30163  0057EA  517D               	movf	playDiatonicTriadMajor@i_1679& (0+255),w,b
 30164  0057EC  0D01               	mullw	1
 30165  0057EE  50F3               	movf	prodl,w,c
 30166  0057F0  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 30167  0057F2  50F4               	movf	prodh,w,c
 30168  0057F4  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30169  0057F6  C078  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 30170  0057FA  C079  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 30171  0057FE                     	if	0	;tblptru may be non-zero
 30172  0057FE                     	endif
 30173  0057FE                     	if	0	;tblptru may be non-zero
 30174  0057FE                     	endif
 30175  0057FE  0008               	tblrd		*
 30176  005800  50F5               	movf	tablat,w,c
 30177  005802  257E               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 30178  005804  6EDF               	movwf	indf2,c
 30179                           
 30180                           ; BSR set to: 0
 30181  005806  2B7D               	incf	playDiatonicTriadMajor@i_1679& (0+255),f,b
 30182  005808  D7DA               	goto	l16727
 30183  00580A                     u23810:
 30184                           
 30185                           ; BSR set to: 0
 30186                           ;keyboard.c: 1085: }
 30187                           ;keyboard.c: 1087: NUM_NOTES_PRESSED = 3;
 30188                           
 30189                           ; BSR set to: 0
 30190  00580A  0E03               	movlw	3
 30191  00580C  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30192                           
 30193                           ; BSR set to: 0
 30194                           ;keyboard.c: 1090: if(LATCH == 0) {latch_was_pressed = 0;}
 30195  00580E  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 30196                           
 30197                           ; BSR set to: 0
 30198  005810  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30199                           
 30200                           ; BSR set to: 0
 30201                           ;keyboard.c: 1093: finish_arpeggio_setup();
 30202                           
 30203                           ; BSR set to: 0
 30204  005812  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 30205                           
 30206                           ;keyboard.c: 1095: TMR0ON = 1;
 30207  005816  8ED5               	bsf	4053,7,c	;volatile
 30208  005818                     l1581:
 30209                           
 30210                           ;keyboard.c: 1096: }
 30211                           ;keyboard.c: 1098: if((ON_OFF == 0) && (LATCH == 0)) {
 30212  005818  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30213  00581A  0012               	return	
 30214  00581C  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 30215  00581E  0012               	return	
 30216                           
 30217                           ;keyboard.c: 1100: if(NUM_NOTES_PRESSED > 0){
 30218  005820  0100               	movlb	0	; () banked
 30219  005822  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30220  005824  B4D8               	btfsc	status,2,c
 30221  005826  D00A               	goto	l1588
 30222                           
 30223                           ; BSR set to: 0
 30224                           ;keyboard.c: 1101: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 30225  005828  0E00               	movlw	0
 30226  00582A  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 30227  00582C  0E01               	movlw	1
 30228  00582E  EC0B  F04A         	call	_wait_one_pulse
 30229                           
 30230                           ;keyboard.c: 1102: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30231  005832  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30232  005834  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 30233                           
 30234                           ;keyboard.c: 1103: TIMER_OVERFLOWS = 0;
 30235  005838  0E00               	movlw	0
 30236  00583A  6E54               	movwf	_TIMER_OVERFLOWS,c
 30237  00583C                     l1588:
 30238                           
 30239                           ;keyboard.c: 1104: }
 30240                           ;keyboard.c: 1106: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 30241  00583C  C0E6  F078         	movff	_parallel,??_playDiatonicTriadMajor
 30242  005840  0100               	movlb	0	; () banked
 30243  005842  6B79               	clrf	(??_playDiatonicTriadMajor+1)& (0+255),b
 30244  005844  BF78               	btfsc	??_playDiatonicTriadMajor& (0+255),7,b
 30245  005846  0779               	decf	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30246  005848  517E               	movf	playDiatonicTriadMajor@pitch& (0+255),w,b
 30247  00584A  6F7A               	movwf	(??_playDiatonicTriadMajor+2)& (0+255),b
 30248  00584C  6B7B               	clrf	(??_playDiatonicTriadMajor+3)& (0+255),b
 30249  00584E  5178               	movf	??_playDiatonicTriadMajor& (0+255),w,b
 30250  005850  197A               	xorwf	(??_playDiatonicTriadMajor+2)& (0+255),w,b
 30251  005852  E106               	bnz	l16765
 30252  005854  5179               	movf	(??_playDiatonicTriadMajor+1)& (0+255),w,b
 30253  005856  197B               	xorwf	(??_playDiatonicTriadMajor+3)& (0+255),w,b
 30254  005858  A4D8               	btfss	status,2,c
 30255  00585A  D002               	goto	l1590
 30256                           
 30257                           ; BSR set to: 0
 30258  00585C  0E00               	movlw	0
 30259  00585E  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30260  005860                     l1590:
 30261  005860                     l16765:
 30262                           
 30263                           ; BSR set to: 0
 30264                           ;keyboard.c: 1108: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 30265  005860  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 30266                           
 30267                           ; BSR set to: 0
 30268  005862  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30269  005864  D001               	goto	l1591
 30270                           
 30271                           ; BSR set to: 0
 30272                           ;keyboard.c: 1109: LATCH = 1;
 30273  005866  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 30274  005868                     l1591:
 30275                           
 30276                           ; BSR set to: 0
 30277                           ;keyboard.c: 1110: }
 30278                           ;keyboard.c: 1113: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 30279  005868  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30280  00586A  D002               	goto	u23910
 30281                           
 30282                           ; BSR set to: 0
 30283  00586C  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30284  00586E  D006               	goto	l1592
 30285  005870                     u23910:
 30286                           
 30287                           ; BSR set to: 0
 30288  005870  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30289  005872  D004               	goto	l1592
 30290                           
 30291                           ; BSR set to: 0
 30292                           ;keyboard.c: 1114: NUM_NOTES_PRESSED = 0;
 30293  005874  0E00               	movlw	0
 30294  005876  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30295                           
 30296                           ;keyboard.c: 1115: ARRAY_INDEX = 0;
 30297  005878  0E00               	movlw	0
 30298  00587A  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 30299  00587C                     l1592:
 30300                           
 30301                           ; BSR set to: 0
 30302                           ;keyboard.c: 1116: }
 30303                           ;keyboard.c: 1119: finish_arpeggio_setup();
 30304                           
 30305                           ; BSR set to: 0
 30306  00587C  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 30307                           
 30308                           ;keyboard.c: 1120: TMR0ON = 1;
 30309  005880  8ED5               	bsf	4053,7,c	;volatile
 30310  005882  0012               	return	
 30311  005884                     __end_of_playDiatonicTriadMajor:
 30312                           	opt stack 0
 30313                           tblptru	equ	0xFF8
 30314                           tblptrh	equ	0xFF7
 30315                           tblptrl	equ	0xFF6
 30316                           tablat	equ	0xFF5
 30317                           prodh	equ	0xFF4
 30318                           prodl	equ	0xFF3
 30319                           intcon	equ	0xFF2
 30320                           intcon2	equ	0xFF1
 30321                           postinc0	equ	0xFEE
 30322                           wreg	equ	0xFE8
 30323                           indf1	equ	0xFE7
 30324                           postdec1	equ	0xFE5
 30325                           fsr1h	equ	0xFE2
 30326                           fsr1l	equ	0xFE1
 30327                           indf2	equ	0xFDF
 30328                           postinc2	equ	0xFDE
 30329                           plusw2	equ	0xFDB
 30330                           fsr2h	equ	0xFDA
 30331                           fsr2l	equ	0xFD9
 30332                           status	equ	0xFD8
 30333                           
 30334 ;; *************** function _playDiatonicSeventhMinor *****************
 30335 ;; Defined at:
 30336 ;;		line 1276 in file "keyboard.c"
 30337 ;; Parameters:    Size  Location     Type
 30338 ;;  pitch           1    wreg     unsigned char 
 30339 ;;  index           1   23[BANK0 ] unsigned char 
 30340 ;; Auto vars:     Size  Location     Type
 30341 ;;  pitch           1   28[BANK0 ] unsigned char 
 30342 ;;  i               1   30[BANK0 ] unsigned char 
 30343 ;;  i               1   29[BANK0 ] unsigned char 
 30344 ;; Return value:  Size  Location     Type
 30345 ;;                  1    wreg      void 
 30346 ;; Registers used:
 30347 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30348 ;; Tracked objects:
 30349 ;;		On entry : 0/0
 30350 ;;		On exit  : 0/0
 30351 ;;		Unchanged: 0/0
 30352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 30353 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30354 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30355 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30356 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30357 ;;Total ram usage:        8 bytes
 30358 ;; Hardware stack levels used:    1
 30359 ;; Hardware stack levels required when called:   10
 30360 ;; This function calls:
 30361 ;;		_finish_arpeggio_setup
 30362 ;;		_key_press_release_note_off
 30363 ;;		_noteOff
 30364 ;;		_noteOn
 30365 ;;		_wait_one_pulse
 30366 ;; This function is called by:
 30367 ;;		_playThisNote8
 30368 ;; This function uses a non-reentrant model
 30369 ;;
 30370                           
 30371                           	psect	text89
 30372  0047EC                     __ptext89:
 30373                           	opt stack 0
 30374  0047EC                     _playDiatonicSeventhMinor:
 30375                           	opt stack 14
 30376                           
 30377                           ;incstack = 0
 30378                           ;playDiatonicSeventhMinor@pitch stored from wreg
 30379  0047EC  0100               	movlb	0	; () banked
 30380  0047EE  6F7C               	movwf	playDiatonicSeventhMinor@pitch& (0+255),b
 30381                           
 30382                           ;keyboard.c: 1279: if(ARPEGGIO_ON == 0){
 30383  0047F0  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30384  0047F2  D08B               	goto	u24510
 30385                           
 30386                           ;keyboard.c: 1280: for(unsigned char i = 0; i<4; i++){
 30387  0047F4  0E00               	movlw	0
 30388  0047F6  0100               	movlb	0	; () banked
 30389  0047F8  6F7D               	movwf	playDiatonicSeventhMinor@i& (0+255),b
 30390  0047FA                     l16979:
 30391                           
 30392                           ; BSR set to: 0
 30393  0047FA  0E03               	movlw	3
 30394  0047FC  657D               	cpfsgt	playDiatonicSeventhMinor@i& (0+255),b
 30395  0047FE  D001               	goto	l1651
 30396  004800  D084               	goto	u24510
 30397  004802                     l1651:
 30398                           
 30399                           ; BSR set to: 0
 30400                           ;keyboard.c: 1281: if(i==0){
 30401                           
 30402                           ; BSR set to: 0
 30403  004802  517D               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 30404  004804  A4D8               	btfss	status,2,c
 30405  004806  D025               	goto	l1655
 30406                           
 30407                           ; BSR set to: 0
 30408                           ;keyboard.c: 1282: if(ON_OFF == 1) {noteOn(channel,diatonic_seventh_minor[index][0],velo
      +                          city);}
 30409  004808  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30410  00480A  D010               	goto	l1654
 30411                           
 30412                           ; BSR set to: 0
 30413  00480C  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30414  00480E  0D04               	mullw	4
 30415  004810  0E6B               	movlw	low _diatonic_seventh_minor
 30416  004812  24F3               	addwf	prodl,w,c
 30417  004814  6EF6               	movwf	tblptrl,c
 30418  004816  0EF2               	movlw	high _diatonic_seventh_minor
 30419  004818  20F4               	addwfc	prodh,w,c
 30420  00481A  6EF7               	movwf	tblptrh,c
 30421  00481C                     	if	0	;There are less than 3 active tblptr bytes
 30422  00481C                     	endif
 30423  00481C  0008               	tblrd		*
 30424  00481E  CFF5 F06E          	movff	tablat,noteOn@pitch
 30425  004822  C0FD  F06F         	movff	_velocity,noteOn@velocity
 30426  004826  51F6               	movf	_channel& (0+255),w,b
 30427  004828  ECE1  F044         	call	_noteOn
 30428  00482C                     l1654:
 30429                           
 30430                           ;keyboard.c: 1283: if(ON_OFF == 0) {noteOff(channel,diatonic_seventh_minor[index][0],vel
      +                          ocity);}
 30431  00482C  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30432  00482E  D011               	goto	l1655
 30433  004830  0100               	movlb	0	; () banked
 30434  004832  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30435  004834  0D04               	mullw	4
 30436  004836  0E6B               	movlw	low _diatonic_seventh_minor
 30437  004838  24F3               	addwf	prodl,w,c
 30438  00483A  6EF6               	movwf	tblptrl,c
 30439  00483C  0EF2               	movlw	high _diatonic_seventh_minor
 30440  00483E  20F4               	addwfc	prodh,w,c
 30441  004840  6EF7               	movwf	tblptrh,c
 30442  004842                     	if	0	;There are less than 3 active tblptr bytes
 30443  004842                     	endif
 30444  004842  0008               	tblrd		*
 30445  004844  CFF5 F06B          	movff	tablat,noteOff@pitch
 30446  004848  C0FD  F06C         	movff	_velocity,noteOff@velocity
 30447  00484C  51F6               	movf	_channel& (0+255),w,b
 30448  00484E  EC08  F048         	call	_noteOff
 30449  004852                     l1655:
 30450                           
 30451                           ;keyboard.c: 1284: }
 30452                           ;keyboard.c: 1285: if(i>0){
 30453  004852  0100               	movlb	0	; () banked
 30454  004854  517D               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 30455  004856  B4D8               	btfsc	status,2,c
 30456  004858  D055               	goto	l1658
 30457                           
 30458                           ; BSR set to: 0
 30459                           ;keyboard.c: 1286: if(ON_OFF == 1) noteOn(channel,diatonic_seventh_minor[index][0] + dia
      +                          tonic_seventh_minor[index][i],velocity);
 30460  00485A  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30461  00485C  D028               	goto	l1657
 30462                           
 30463                           ; BSR set to: 0
 30464  00485E  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30465  004860  0D04               	mullw	4
 30466  004862  0E6B               	movlw	low _diatonic_seventh_minor
 30467  004864  6F78               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 30468  004866  0EF2               	movlw	high _diatonic_seventh_minor
 30469  004868  6F79               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 30470  00486A  50F3               	movf	prodl,w,c
 30471  00486C  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30472  00486E  50F4               	movf	prodh,w,c
 30473  004870  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30474  004872  517D               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 30475  004874  0D01               	mullw	1
 30476  004876  50F3               	movf	prodl,w,c
 30477  004878  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30478  00487A  50F4               	movf	prodh,w,c
 30479  00487C  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30480  00487E  C078  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 30481  004882  C079  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 30482  004886                     	if	0	;tblptru may be non-zero
 30483  004886                     	endif
 30484  004886                     	if	0	;tblptru may be non-zero
 30485  004886                     	endif
 30486  004886  0008               	tblrd		*
 30487  004888  CFF5 F07A          	movff	tablat,??_playDiatonicSeventhMinor+2
 30488  00488C  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30489  00488E  0D04               	mullw	4
 30490  004890  0E6B               	movlw	low _diatonic_seventh_minor
 30491  004892  24F3               	addwf	prodl,w,c
 30492  004894  6EF6               	movwf	tblptrl,c
 30493  004896  0EF2               	movlw	high _diatonic_seventh_minor
 30494  004898  20F4               	addwfc	prodh,w,c
 30495  00489A  6EF7               	movwf	tblptrh,c
 30496  00489C                     	if	0	;There are less than 3 active tblptr bytes
 30497  00489C                     	endif
 30498  00489C  0008               	tblrd		*
 30499  00489E  50F5               	movf	tablat,w,c
 30500  0048A0  257A               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 30501  0048A2  6F6E               	movwf	noteOn@pitch& (0+255),b
 30502  0048A4  C0FD  F06F         	movff	_velocity,noteOn@velocity
 30503  0048A8  51F6               	movf	_channel& (0+255),w,b
 30504  0048AA  ECE1  F044         	call	_noteOn
 30505  0048AE                     l1657:
 30506                           
 30507                           ;keyboard.c: 1287: if(ON_OFF == 0) noteOff(channel,diatonic_seventh_minor[index][0] + di
      +                          atonic_seventh_minor[index][i],velocity);
 30508  0048AE  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30509  0048B0  D029               	goto	l1658
 30510  0048B2  0100               	movlb	0	; () banked
 30511  0048B4  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30512  0048B6  0D04               	mullw	4
 30513  0048B8  0E6B               	movlw	low _diatonic_seventh_minor
 30514  0048BA  6F78               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 30515  0048BC  0EF2               	movlw	high _diatonic_seventh_minor
 30516  0048BE  6F79               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 30517  0048C0  50F3               	movf	prodl,w,c
 30518  0048C2  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30519  0048C4  50F4               	movf	prodh,w,c
 30520  0048C6  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30521  0048C8  517D               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 30522  0048CA  0D01               	mullw	1
 30523  0048CC  50F3               	movf	prodl,w,c
 30524  0048CE  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30525  0048D0  50F4               	movf	prodh,w,c
 30526  0048D2  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30527  0048D4  C078  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 30528  0048D8  C079  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 30529  0048DC                     	if	0	;tblptru may be non-zero
 30530  0048DC                     	endif
 30531  0048DC                     	if	0	;tblptru may be non-zero
 30532  0048DC                     	endif
 30533  0048DC  0008               	tblrd		*
 30534  0048DE  CFF5 F07A          	movff	tablat,??_playDiatonicSeventhMinor+2
 30535  0048E2  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30536  0048E4  0D04               	mullw	4
 30537  0048E6  0E6B               	movlw	low _diatonic_seventh_minor
 30538  0048E8  24F3               	addwf	prodl,w,c
 30539  0048EA  6EF6               	movwf	tblptrl,c
 30540  0048EC  0EF2               	movlw	high _diatonic_seventh_minor
 30541  0048EE  20F4               	addwfc	prodh,w,c
 30542  0048F0  6EF7               	movwf	tblptrh,c
 30543  0048F2                     	if	0	;There are less than 3 active tblptr bytes
 30544  0048F2                     	endif
 30545  0048F2  0008               	tblrd		*
 30546  0048F4  50F5               	movf	tablat,w,c
 30547  0048F6  257A               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 30548  0048F8  6F6B               	movwf	noteOff@pitch& (0+255),b
 30549  0048FA  C0FD  F06C         	movff	_velocity,noteOff@velocity
 30550  0048FE  51F6               	movf	_channel& (0+255),w,b
 30551  004900  EC08  F048         	call	_noteOff
 30552  004904                     l1658:
 30553  004904  0100               	movlb	0	; () banked
 30554  004906  2B7D               	incf	playDiatonicSeventhMinor@i& (0+255),f,b
 30555  004908  D778               	goto	l16979
 30556  00490A                     u24510:
 30557                           
 30558                           ;keyboard.c: 1288: }
 30559                           ;keyboard.c: 1289: }
 30560                           ;keyboard.c: 1290: }
 30561                           ;keyboard.c: 1293: if(ARPEGGIO_ON == 1){
 30562                           
 30563                           ; BSR set to: 0
 30564  00490A  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30565  00490C  0012               	return	
 30566                           
 30567                           ;keyboard.c: 1295: if(ON_OFF == 1) {
 30568  00490E  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30569  004910  D065               	goto	l1660
 30570                           
 30571                           ;keyboard.c: 1297: TMR0ON = 0;
 30572  004912  9ED5               	bcf	4053,7,c	;volatile
 30573                           
 30574                           ;keyboard.c: 1299: parallel = pitch;
 30575  004914  C07C  F0E6         	movff	playDiatonicSeventhMinor@pitch,_parallel
 30576                           
 30577                           ;keyboard.c: 1302: if(NUM_NOTES_PRESSED > 0){
 30578  004918  0100               	movlb	0	; () banked
 30579  00491A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30580  00491C  B4D8               	btfsc	status,2,c
 30581  00491E  D00A               	goto	l1661
 30582                           
 30583                           ; BSR set to: 0
 30584                           ;keyboard.c: 1303: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 30585  004920  0E00               	movlw	0
 30586  004922  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 30587  004924  0E01               	movlw	1
 30588  004926  EC0B  F04A         	call	_wait_one_pulse
 30589                           
 30590                           ;keyboard.c: 1304: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30591  00492A  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30592  00492C  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 30593                           
 30594                           ;keyboard.c: 1305: TIMER_OVERFLOWS = 0;
 30595  004930  0E00               	movlw	0
 30596  004932  6E54               	movwf	_TIMER_OVERFLOWS,c
 30597  004934                     l1661:
 30598                           
 30599                           ;keyboard.c: 1306: }
 30600                           ;keyboard.c: 1308: for(unsigned char i = 0; i<4; i++){
 30601  004934  0E00               	movlw	0
 30602  004936  0100               	movlb	0	; () banked
 30603  004938  6F7E               	movwf	playDiatonicSeventhMinor@i_1694& (0+255),b
 30604  00493A                     l17023:
 30605                           
 30606                           ; BSR set to: 0
 30607  00493A  0E03               	movlw	3
 30608  00493C  657E               	cpfsgt	playDiatonicSeventhMinor@i_1694& (0+255),b
 30609  00493E  D001               	goto	l1663
 30610  004940  D046               	goto	u24590
 30611  004942                     l1663:
 30612                           
 30613                           ; BSR set to: 0
 30614                           ;keyboard.c: 1309: if(i==0){ARPEGGIO[i] = diatonic_seventh_minor[index][0];}
 30615                           
 30616                           ; BSR set to: 0
 30617  004942  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30618  004944  A4D8               	btfss	status,2,c
 30619  004946  D013               	goto	l1665
 30620                           
 30621                           ; BSR set to: 0
 30622  004948  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30623  00494A  0D04               	mullw	4
 30624  00494C  0E6B               	movlw	low _diatonic_seventh_minor
 30625  00494E  24F3               	addwf	prodl,w,c
 30626  004950  6EF6               	movwf	tblptrl,c
 30627  004952  0EF2               	movlw	high _diatonic_seventh_minor
 30628  004954  20F4               	addwfc	prodh,w,c
 30629  004956  6EF7               	movwf	tblptrh,c
 30630  004958                     	if	0	;There are less than 3 active tblptr bytes
 30631  004958                     	endif
 30632  004958  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30633  00495A  0D01               	mullw	1
 30634  00495C  0E72               	movlw	low _ARPEGGIO
 30635  00495E  24F3               	addwf	prodl,w,c
 30636  004960  6ED9               	movwf	fsr2l,c
 30637  004962  0E01               	movlw	high _ARPEGGIO
 30638  004964  20F4               	addwfc	prodh,w,c
 30639  004966  6EDA               	movwf	fsr2h,c
 30640  004968  0008               	tblrd		*
 30641  00496A  CFF5 FFDF          	movff	tablat,indf2
 30642  00496E                     l1665:
 30643                           
 30644                           ; BSR set to: 0
 30645                           ;keyboard.c: 1310: if(i>0){ARPEGGIO[i] = diatonic_seventh_minor[index][0] + diatonic_sev
      +                          enth_minor[index][i];}
 30646                           
 30647                           ; BSR set to: 0
 30648  00496E  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30649  004970  B4D8               	btfsc	status,2,c
 30650  004972  D02B               	goto	l1666
 30651                           
 30652                           ; BSR set to: 0
 30653  004974  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30654  004976  0D01               	mullw	1
 30655  004978  0E72               	movlw	low _ARPEGGIO
 30656  00497A  24F3               	addwf	prodl,w,c
 30657  00497C  6ED9               	movwf	fsr2l,c
 30658  00497E  0E01               	movlw	high _ARPEGGIO
 30659  004980  20F4               	addwfc	prodh,w,c
 30660  004982  6EDA               	movwf	fsr2h,c
 30661  004984  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30662  004986  0D04               	mullw	4
 30663  004988  0E6B               	movlw	low _diatonic_seventh_minor
 30664  00498A  6F78               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 30665  00498C  0EF2               	movlw	high _diatonic_seventh_minor
 30666  00498E  6F79               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 30667  004990  50F3               	movf	prodl,w,c
 30668  004992  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30669  004994  50F4               	movf	prodh,w,c
 30670  004996  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30671  004998  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30672  00499A  0D01               	mullw	1
 30673  00499C  50F3               	movf	prodl,w,c
 30674  00499E  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30675  0049A0  50F4               	movf	prodh,w,c
 30676  0049A2  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30677  0049A4  C078  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 30678  0049A8  C079  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 30679  0049AC                     	if	0	;tblptru may be non-zero
 30680  0049AC                     	endif
 30681  0049AC                     	if	0	;tblptru may be non-zero
 30682  0049AC                     	endif
 30683  0049AC  0008               	tblrd		*
 30684  0049AE  CFF5 F07A          	movff	tablat,??_playDiatonicSeventhMinor+2
 30685  0049B2  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30686  0049B4  0D04               	mullw	4
 30687  0049B6  0E6B               	movlw	low _diatonic_seventh_minor
 30688  0049B8  24F3               	addwf	prodl,w,c
 30689  0049BA  6EF6               	movwf	tblptrl,c
 30690  0049BC  0EF2               	movlw	high _diatonic_seventh_minor
 30691  0049BE  20F4               	addwfc	prodh,w,c
 30692  0049C0  6EF7               	movwf	tblptrh,c
 30693  0049C2                     	if	0	;There are less than 3 active tblptr bytes
 30694  0049C2                     	endif
 30695  0049C2  0008               	tblrd		*
 30696  0049C4  50F5               	movf	tablat,w,c
 30697  0049C6  257A               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 30698  0049C8  6EDF               	movwf	indf2,c
 30699  0049CA                     l1666:
 30700                           
 30701                           ; BSR set to: 0
 30702                           
 30703                           ; BSR set to: 0
 30704  0049CA  2B7E               	incf	playDiatonicSeventhMinor@i_1694& (0+255),f,b
 30705  0049CC  D7B6               	goto	l17023
 30706  0049CE                     u24590:
 30707                           
 30708                           ; BSR set to: 0
 30709                           ;keyboard.c: 1311: }
 30710                           ;keyboard.c: 1313: NUM_NOTES_PRESSED = 4;
 30711                           
 30712                           ; BSR set to: 0
 30713  0049CE  0E04               	movlw	4
 30714  0049D0  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30715                           
 30716                           ; BSR set to: 0
 30717                           ;keyboard.c: 1316: if(LATCH == 0) {latch_was_pressed = 0;}
 30718  0049D2  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 30719                           
 30720                           ; BSR set to: 0
 30721  0049D4  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30722                           
 30723                           ; BSR set to: 0
 30724                           ;keyboard.c: 1319: finish_arpeggio_setup();
 30725                           
 30726                           ; BSR set to: 0
 30727  0049D6  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 30728                           
 30729                           ;keyboard.c: 1321: TMR0ON = 1;
 30730  0049DA  8ED5               	bsf	4053,7,c	;volatile
 30731  0049DC                     l1660:
 30732                           
 30733                           ;keyboard.c: 1322: }
 30734                           ;keyboard.c: 1324: if((ON_OFF == 0) && (LATCH == 0)) {
 30735  0049DC  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30736  0049DE  0012               	return	
 30737  0049E0  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 30738  0049E2  0012               	return	
 30739                           
 30740                           ;keyboard.c: 1326: if(NUM_NOTES_PRESSED > 0){
 30741  0049E4  0100               	movlb	0	; () banked
 30742  0049E6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30743  0049E8  B4D8               	btfsc	status,2,c
 30744  0049EA  D00A               	goto	l1669
 30745                           
 30746                           ; BSR set to: 0
 30747                           ;keyboard.c: 1327: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 30748  0049EC  0E00               	movlw	0
 30749  0049EE  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 30750  0049F0  0E01               	movlw	1
 30751  0049F2  EC0B  F04A         	call	_wait_one_pulse
 30752                           
 30753                           ;keyboard.c: 1328: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30754  0049F6  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30755  0049F8  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 30756                           
 30757                           ;keyboard.c: 1329: TIMER_OVERFLOWS = 0;
 30758  0049FC  0E00               	movlw	0
 30759  0049FE  6E54               	movwf	_TIMER_OVERFLOWS,c
 30760  004A00                     l1669:
 30761                           
 30762                           ;keyboard.c: 1330: }
 30763                           ;keyboard.c: 1332: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 30764  004A00  C0E6  F078         	movff	_parallel,??_playDiatonicSeventhMinor
 30765  004A04  0100               	movlb	0	; () banked
 30766  004A06  6B79               	clrf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 30767  004A08  BF78               	btfsc	??_playDiatonicSeventhMinor& (0+255),7,b
 30768  004A0A  0779               	decf	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30769  004A0C  517C               	movf	playDiatonicSeventhMinor@pitch& (0+255),w,b
 30770  004A0E  6F7A               	movwf	(??_playDiatonicSeventhMinor+2)& (0+255),b
 30771  004A10  6B7B               	clrf	(??_playDiatonicSeventhMinor+3)& (0+255),b
 30772  004A12  5178               	movf	??_playDiatonicSeventhMinor& (0+255),w,b
 30773  004A14  197A               	xorwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 30774  004A16  E106               	bnz	l17067
 30775  004A18  5179               	movf	(??_playDiatonicSeventhMinor+1)& (0+255),w,b
 30776  004A1A  197B               	xorwf	(??_playDiatonicSeventhMinor+3)& (0+255),w,b
 30777  004A1C  A4D8               	btfss	status,2,c
 30778  004A1E  D002               	goto	l1671
 30779                           
 30780                           ; BSR set to: 0
 30781  004A20  0E00               	movlw	0
 30782  004A22  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30783  004A24                     l1671:
 30784  004A24                     l17067:
 30785                           
 30786                           ; BSR set to: 0
 30787                           ;keyboard.c: 1334: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 30788  004A24  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 30789                           
 30790                           ; BSR set to: 0
 30791  004A26  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30792  004A28  D001               	goto	l1672
 30793                           
 30794                           ; BSR set to: 0
 30795                           ;keyboard.c: 1335: LATCH = 1;
 30796  004A2A  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 30797  004A2C                     l1672:
 30798                           
 30799                           ; BSR set to: 0
 30800                           ;keyboard.c: 1336: }
 30801                           ;keyboard.c: 1339: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 30802  004A2C  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30803  004A2E  D002               	goto	u24690
 30804                           
 30805                           ; BSR set to: 0
 30806  004A30  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30807  004A32  D006               	goto	l1673
 30808  004A34                     u24690:
 30809                           
 30810                           ; BSR set to: 0
 30811  004A34  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30812  004A36  D004               	goto	l1673
 30813                           
 30814                           ; BSR set to: 0
 30815                           ;keyboard.c: 1340: NUM_NOTES_PRESSED = 0;
 30816  004A38  0E00               	movlw	0
 30817  004A3A  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30818                           
 30819                           ;keyboard.c: 1341: ARRAY_INDEX = 0;
 30820  004A3C  0E00               	movlw	0
 30821  004A3E  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 30822  004A40                     l1673:
 30823                           
 30824                           ; BSR set to: 0
 30825                           ;keyboard.c: 1342: }
 30826                           ;keyboard.c: 1345: finish_arpeggio_setup();
 30827                           
 30828                           ; BSR set to: 0
 30829  004A40  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 30830                           
 30831                           ;keyboard.c: 1346: TMR0ON = 1;
 30832  004A44  8ED5               	bsf	4053,7,c	;volatile
 30833                           
 30834                           ;keyboard.c: 1348: return;
 30835  004A46  0012               	return	
 30836  004A48                     __end_of_playDiatonicSeventhMinor:
 30837                           	opt stack 0
 30838                           tblptru	equ	0xFF8
 30839                           tblptrh	equ	0xFF7
 30840                           tblptrl	equ	0xFF6
 30841                           tablat	equ	0xFF5
 30842                           prodh	equ	0xFF4
 30843                           prodl	equ	0xFF3
 30844                           intcon	equ	0xFF2
 30845                           intcon2	equ	0xFF1
 30846                           postinc0	equ	0xFEE
 30847                           wreg	equ	0xFE8
 30848                           indf1	equ	0xFE7
 30849                           postdec1	equ	0xFE5
 30850                           fsr1h	equ	0xFE2
 30851                           fsr1l	equ	0xFE1
 30852                           indf2	equ	0xFDF
 30853                           postinc2	equ	0xFDE
 30854                           plusw2	equ	0xFDB
 30855                           fsr2h	equ	0xFDA
 30856                           fsr2l	equ	0xFD9
 30857                           status	equ	0xFD8
 30858                           
 30859 ;; *************** function _playDiatonicSeventhMajor *****************
 30860 ;; Defined at:
 30861 ;;		line 1126 in file "keyboard.c"
 30862 ;; Parameters:    Size  Location     Type
 30863 ;;  pitch           1    wreg     unsigned char 
 30864 ;;  index           1   23[BANK0 ] unsigned char 
 30865 ;; Auto vars:     Size  Location     Type
 30866 ;;  pitch           1   30[BANK0 ] unsigned char 
 30867 ;;  i               1   29[BANK0 ] unsigned char 
 30868 ;;  i               1   28[BANK0 ] unsigned char 
 30869 ;; Return value:  Size  Location     Type
 30870 ;;                  1    wreg      void 
 30871 ;; Registers used:
 30872 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30873 ;; Tracked objects:
 30874 ;;		On entry : 0/0
 30875 ;;		On exit  : 0/0
 30876 ;;		Unchanged: 0/0
 30877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 30878 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30879 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30880 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30881 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30882 ;;Total ram usage:        8 bytes
 30883 ;; Hardware stack levels used:    1
 30884 ;; Hardware stack levels required when called:   10
 30885 ;; This function calls:
 30886 ;;		_finish_arpeggio_setup
 30887 ;;		_key_press_release_note_off
 30888 ;;		_noteOff
 30889 ;;		_noteOn
 30890 ;;		_wait_one_pulse
 30891 ;; This function is called by:
 30892 ;;		_playThisNote8
 30893 ;; This function uses a non-reentrant model
 30894 ;;
 30895                           
 30896                           	psect	text90
 30897  005562                     __ptext90:
 30898                           	opt stack 0
 30899  005562                     _playDiatonicSeventhMajor:
 30900                           	opt stack 14
 30901                           
 30902                           ;incstack = 0
 30903                           ;playDiatonicSeventhMajor@pitch stored from wreg
 30904  005562  0100               	movlb	0	; () banked
 30905  005564  6F7E               	movwf	playDiatonicSeventhMajor@pitch& (0+255),b
 30906                           
 30907                           ;keyboard.c: 1129: if(ARPEGGIO_ON == 0){
 30908  005566  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30909  005568  D049               	goto	u24250
 30910                           
 30911                           ;keyboard.c: 1130: for(unsigned char i = 0; i<4; i++){
 30912  00556A  0E00               	movlw	0
 30913  00556C  0100               	movlb	0	; () banked
 30914  00556E  6F7C               	movwf	playDiatonicSeventhMajor@i& (0+255),b
 30915  005570                     l16891:
 30916                           
 30917                           ; BSR set to: 0
 30918  005570  0E03               	movlw	3
 30919  005572  657C               	cpfsgt	playDiatonicSeventhMajor@i& (0+255),b
 30920  005574  D001               	goto	l1599
 30921  005576  D042               	goto	u24250
 30922  005578                     l1599:
 30923                           
 30924                           ; BSR set to: 0
 30925                           ;keyboard.c: 1132: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_seventh_major[index]
      +                          [i],velocity);}
 30926  005578  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30927  00557A  D01D               	goto	l1601
 30928                           
 30929                           ; BSR set to: 0
 30930  00557C  5177               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 30931  00557E  0D04               	mullw	4
 30932  005580  0EA7               	movlw	low _diatonic_seventh_major
 30933  005582  6F78               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 30934  005584  0EF2               	movlw	high _diatonic_seventh_major
 30935  005586  6F79               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 30936  005588  50F3               	movf	prodl,w,c
 30937  00558A  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30938  00558C  50F4               	movf	prodh,w,c
 30939  00558E  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30940  005590  517C               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 30941  005592  0D01               	mullw	1
 30942  005594  50F3               	movf	prodl,w,c
 30943  005596  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30944  005598  50F4               	movf	prodh,w,c
 30945  00559A  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30946  00559C  C078  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 30947  0055A0  C079  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 30948  0055A4                     	if	0	;tblptru may be non-zero
 30949  0055A4                     	endif
 30950  0055A4                     	if	0	;tblptru may be non-zero
 30951  0055A4                     	endif
 30952  0055A4  0008               	tblrd		*
 30953  0055A6  50F5               	movf	tablat,w,c
 30954  0055A8  257E               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 30955  0055AA  6F6E               	movwf	noteOn@pitch& (0+255),b
 30956  0055AC  C0FD  F06F         	movff	_velocity,noteOn@velocity
 30957  0055B0  51F6               	movf	_channel& (0+255),w,b
 30958  0055B2  ECE1  F044         	call	_noteOn
 30959  0055B6                     l1601:
 30960                           
 30961                           ;keyboard.c: 1133: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_seventh_major[index
      +                          ][i],velocity);}
 30962  0055B6  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30963  0055B8  D01E               	goto	l1602
 30964  0055BA  0100               	movlb	0	; () banked
 30965  0055BC  5177               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 30966  0055BE  0D04               	mullw	4
 30967  0055C0  0EA7               	movlw	low _diatonic_seventh_major
 30968  0055C2  6F78               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 30969  0055C4  0EF2               	movlw	high _diatonic_seventh_major
 30970  0055C6  6F79               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 30971  0055C8  50F3               	movf	prodl,w,c
 30972  0055CA  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30973  0055CC  50F4               	movf	prodh,w,c
 30974  0055CE  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30975  0055D0  517C               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 30976  0055D2  0D01               	mullw	1
 30977  0055D4  50F3               	movf	prodl,w,c
 30978  0055D6  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30979  0055D8  50F4               	movf	prodh,w,c
 30980  0055DA  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30981  0055DC  C078  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 30982  0055E0  C079  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 30983  0055E4                     	if	0	;tblptru may be non-zero
 30984  0055E4                     	endif
 30985  0055E4                     	if	0	;tblptru may be non-zero
 30986  0055E4                     	endif
 30987  0055E4  0008               	tblrd		*
 30988  0055E6  50F5               	movf	tablat,w,c
 30989  0055E8  257E               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 30990  0055EA  6F6B               	movwf	noteOff@pitch& (0+255),b
 30991  0055EC  C0FD  F06C         	movff	_velocity,noteOff@velocity
 30992  0055F0  51F6               	movf	_channel& (0+255),w,b
 30993  0055F2  EC08  F048         	call	_noteOff
 30994  0055F6                     l1602:
 30995  0055F6  0100               	movlb	0	; () banked
 30996  0055F8  2B7C               	incf	playDiatonicSeventhMajor@i& (0+255),f,b
 30997  0055FA  D7BA               	goto	l16891
 30998  0055FC                     u24250:
 30999                           
 31000                           ;keyboard.c: 1134: }
 31001                           ;keyboard.c: 1135: }
 31002                           ;keyboard.c: 1138: if(ARPEGGIO_ON == 1){
 31003                           
 31004                           ; BSR set to: 0
 31005  0055FC  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31006  0055FE  0012               	return	
 31007                           
 31008                           ;keyboard.c: 1139: if(ON_OFF == 1) {
 31009  005600  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31010  005602  D042               	goto	l1604
 31011                           
 31012                           ;keyboard.c: 1141: TMR0ON = 0;
 31013  005604  9ED5               	bcf	4053,7,c	;volatile
 31014                           
 31015                           ;keyboard.c: 1143: parallel = pitch;
 31016  005606  C07E  F0E6         	movff	playDiatonicSeventhMajor@pitch,_parallel
 31017                           
 31018                           ;keyboard.c: 1146: if(NUM_NOTES_PRESSED > 0){
 31019  00560A  0100               	movlb	0	; () banked
 31020  00560C  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 31021  00560E  B4D8               	btfsc	status,2,c
 31022  005610  D00A               	goto	l1605
 31023                           
 31024                           ; BSR set to: 0
 31025                           ;keyboard.c: 1147: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 31026  005612  0E00               	movlw	0
 31027  005614  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 31028  005616  0E01               	movlw	1
 31029  005618  EC0B  F04A         	call	_wait_one_pulse
 31030                           
 31031                           ;keyboard.c: 1148: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31032  00561C  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31033  00561E  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 31034                           
 31035                           ;keyboard.c: 1149: TIMER_OVERFLOWS = 0;
 31036  005622  0E00               	movlw	0
 31037  005624  6E54               	movwf	_TIMER_OVERFLOWS,c
 31038  005626                     l1605:
 31039                           
 31040                           ;keyboard.c: 1150: }
 31041                           ;keyboard.c: 1152: for(unsigned char i = 0; i<4; i++){
 31042  005626  0E00               	movlw	0
 31043  005628  0100               	movlb	0	; () banked
 31044  00562A  6F7D               	movwf	playDiatonicSeventhMajor@i_1684& (0+255),b
 31045  00562C                     l16921:
 31046                           
 31047                           ; BSR set to: 0
 31048  00562C  0E03               	movlw	3
 31049  00562E  657D               	cpfsgt	playDiatonicSeventhMajor@i_1684& (0+255),b
 31050  005630  D001               	goto	l1607
 31051  005632  D022               	goto	u24310
 31052  005634                     l1607:
 31053                           
 31054                           ; BSR set to: 0
 31055                           ;keyboard.c: 1153: ARPEGGIO[i] = pitch + diatonic_seventh_major[index][i];
 31056                           
 31057                           ; BSR set to: 0
 31058  005634  517D               	movf	playDiatonicSeventhMajor@i_1684& (0+255),w,b
 31059  005636  0D01               	mullw	1
 31060  005638  0E72               	movlw	low _ARPEGGIO
 31061  00563A  24F3               	addwf	prodl,w,c
 31062  00563C  6ED9               	movwf	fsr2l,c
 31063  00563E  0E01               	movlw	high _ARPEGGIO
 31064  005640  20F4               	addwfc	prodh,w,c
 31065  005642  6EDA               	movwf	fsr2h,c
 31066  005644  5177               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 31067  005646  0D04               	mullw	4
 31068  005648  0EA7               	movlw	low _diatonic_seventh_major
 31069  00564A  6F78               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 31070  00564C  0EF2               	movlw	high _diatonic_seventh_major
 31071  00564E  6F79               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 31072  005650  50F3               	movf	prodl,w,c
 31073  005652  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 31074  005654  50F4               	movf	prodh,w,c
 31075  005656  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 31076  005658  517D               	movf	playDiatonicSeventhMajor@i_1684& (0+255),w,b
 31077  00565A  0D01               	mullw	1
 31078  00565C  50F3               	movf	prodl,w,c
 31079  00565E  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 31080  005660  50F4               	movf	prodh,w,c
 31081  005662  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 31082  005664  C078  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 31083  005668  C079  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 31084  00566C                     	if	0	;tblptru may be non-zero
 31085  00566C                     	endif
 31086  00566C                     	if	0	;tblptru may be non-zero
 31087  00566C                     	endif
 31088  00566C  0008               	tblrd		*
 31089  00566E  50F5               	movf	tablat,w,c
 31090  005670  257E               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 31091  005672  6EDF               	movwf	indf2,c
 31092                           
 31093                           ; BSR set to: 0
 31094  005674  2B7D               	incf	playDiatonicSeventhMajor@i_1684& (0+255),f,b
 31095  005676  D7DA               	goto	l16921
 31096  005678                     u24310:
 31097                           
 31098                           ; BSR set to: 0
 31099                           ;keyboard.c: 1154: }
 31100                           ;keyboard.c: 1156: NUM_NOTES_PRESSED = 4;
 31101                           
 31102                           ; BSR set to: 0
 31103  005678  0E04               	movlw	4
 31104  00567A  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 31105                           
 31106                           ; BSR set to: 0
 31107                           ;keyboard.c: 1159: if(LATCH == 0) {latch_was_pressed = 0;}
 31108  00567C  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 31109                           
 31110                           ; BSR set to: 0
 31111  00567E  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31112                           
 31113                           ; BSR set to: 0
 31114                           ;keyboard.c: 1162: finish_arpeggio_setup();
 31115                           
 31116                           ; BSR set to: 0
 31117  005680  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 31118                           
 31119                           ;keyboard.c: 1164: TMR0ON = 1;
 31120  005684  8ED5               	bsf	4053,7,c	;volatile
 31121                           
 31122                           ;keyboard.c: 1166: return;
 31123  005686  0012               	return	
 31124  005688                     l1604:
 31125                           
 31126                           ;keyboard.c: 1167: }
 31127                           ;keyboard.c: 1169: if((ON_OFF == 0) && (LATCH == 0)) {
 31128  005688  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31129  00568A  0012               	return	
 31130  00568C  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 31131  00568E  0012               	return	
 31132                           
 31133                           ;keyboard.c: 1171: if(NUM_NOTES_PRESSED > 0){
 31134  005690  0100               	movlb	0	; () banked
 31135  005692  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 31136  005694  B4D8               	btfsc	status,2,c
 31137  005696  D00A               	goto	l1612
 31138                           
 31139                           ; BSR set to: 0
 31140                           ;keyboard.c: 1172: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 31141  005698  0E00               	movlw	0
 31142  00569A  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 31143  00569C  0E01               	movlw	1
 31144  00569E  EC0B  F04A         	call	_wait_one_pulse
 31145                           
 31146                           ;keyboard.c: 1173: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31147  0056A2  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31148  0056A4  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 31149                           
 31150                           ;keyboard.c: 1174: TIMER_OVERFLOWS = 0;
 31151  0056A8  0E00               	movlw	0
 31152  0056AA  6E54               	movwf	_TIMER_OVERFLOWS,c
 31153  0056AC                     l1612:
 31154                           
 31155                           ;keyboard.c: 1175: }
 31156                           ;keyboard.c: 1177: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 31157  0056AC  C0E6  F078         	movff	_parallel,??_playDiatonicSeventhMajor
 31158  0056B0  0100               	movlb	0	; () banked
 31159  0056B2  6B79               	clrf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 31160  0056B4  BF78               	btfsc	??_playDiatonicSeventhMajor& (0+255),7,b
 31161  0056B6  0779               	decf	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 31162  0056B8  517E               	movf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 31163  0056BA  6F7A               	movwf	(??_playDiatonicSeventhMajor+2)& (0+255),b
 31164  0056BC  6B7B               	clrf	(??_playDiatonicSeventhMajor+3)& (0+255),b
 31165  0056BE  5178               	movf	??_playDiatonicSeventhMajor& (0+255),w,b
 31166  0056C0  197A               	xorwf	(??_playDiatonicSeventhMajor+2)& (0+255),w,b
 31167  0056C2  E106               	bnz	l16959
 31168  0056C4  5179               	movf	(??_playDiatonicSeventhMajor+1)& (0+255),w,b
 31169  0056C6  197B               	xorwf	(??_playDiatonicSeventhMajor+3)& (0+255),w,b
 31170  0056C8  A4D8               	btfss	status,2,c
 31171  0056CA  D002               	goto	l1614
 31172                           
 31173                           ; BSR set to: 0
 31174  0056CC  0E00               	movlw	0
 31175  0056CE  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 31176  0056D0                     l1614:
 31177  0056D0                     l16959:
 31178                           
 31179                           ; BSR set to: 0
 31180                           ;keyboard.c: 1179: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 31181  0056D0  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 31182                           
 31183                           ; BSR set to: 0
 31184  0056D2  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31185  0056D4  D001               	goto	l1615
 31186                           
 31187                           ; BSR set to: 0
 31188                           ;keyboard.c: 1180: LATCH = 1;
 31189  0056D6  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 31190  0056D8                     l1615:
 31191                           
 31192                           ; BSR set to: 0
 31193                           ;keyboard.c: 1181: }
 31194                           ;keyboard.c: 1184: if(((UN_LATCH_MODE == 0 | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1))){
 31195  0056D8  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31196  0056DA  D002               	goto	u24410
 31197                           
 31198                           ; BSR set to: 0
 31199  0056DC  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31200  0056DE  D006               	goto	l1616
 31201  0056E0                     u24410:
 31202                           
 31203                           ; BSR set to: 0
 31204  0056E0  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31205  0056E2  D004               	goto	l1616
 31206                           
 31207                           ; BSR set to: 0
 31208                           ;keyboard.c: 1185: NUM_NOTES_PRESSED = 0;
 31209  0056E4  0E00               	movlw	0
 31210  0056E6  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 31211                           
 31212                           ;keyboard.c: 1186: ARRAY_INDEX = 0;
 31213  0056E8  0E00               	movlw	0
 31214  0056EA  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 31215  0056EC                     l1616:
 31216                           
 31217                           ; BSR set to: 0
 31218                           ;keyboard.c: 1187: }
 31219                           ;keyboard.c: 1190: finish_arpeggio_setup();
 31220                           
 31221                           ; BSR set to: 0
 31222  0056EC  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 31223                           
 31224                           ;keyboard.c: 1191: TMR0ON = 1;
 31225  0056F0  8ED5               	bsf	4053,7,c	;volatile
 31226                           
 31227                           ;keyboard.c: 1193: return;
 31228  0056F2  0012               	return	
 31229  0056F4                     __end_of_playDiatonicSeventhMajor:
 31230                           	opt stack 0
 31231                           tblptru	equ	0xFF8
 31232                           tblptrh	equ	0xFF7
 31233                           tblptrl	equ	0xFF6
 31234                           tablat	equ	0xFF5
 31235                           prodh	equ	0xFF4
 31236                           prodl	equ	0xFF3
 31237                           intcon	equ	0xFF2
 31238                           intcon2	equ	0xFF1
 31239                           postinc0	equ	0xFEE
 31240                           wreg	equ	0xFE8
 31241                           indf1	equ	0xFE7
 31242                           postdec1	equ	0xFE5
 31243                           fsr1h	equ	0xFE2
 31244                           fsr1l	equ	0xFE1
 31245                           indf2	equ	0xFDF
 31246                           postinc2	equ	0xFDE
 31247                           plusw2	equ	0xFDB
 31248                           fsr2h	equ	0xFDA
 31249                           fsr2l	equ	0xFD9
 31250                           status	equ	0xFD8
 31251                           
 31252 ;; *************** function _keyboard_all_note_efficient *****************
 31253 ;; Defined at:
 31254 ;;		line 581 in file "keyboard.c"
 31255 ;; Parameters:    Size  Location     Type
 31256 ;;		None
 31257 ;; Auto vars:     Size  Location     Type
 31258 ;;  pitch           1   37[BANK0 ] unsigned char 
 31259 ;; Return value:  Size  Location     Type
 31260 ;;                  1    wreg      void 
 31261 ;; Registers used:
 31262 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31263 ;; Tracked objects:
 31264 ;;		On entry : 0/0
 31265 ;;		On exit  : 0/0
 31266 ;;		Unchanged: 0/0
 31267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 31268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31271 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31272 ;;Total ram usage:        1 bytes
 31273 ;; Hardware stack levels used:    1
 31274 ;; Hardware stack levels required when called:   12
 31275 ;; This function calls:
 31276 ;;		_playThisNote
 31277 ;; This function is called by:
 31278 ;;		_processKeyboard
 31279 ;; This function uses a non-reentrant model
 31280 ;;
 31281                           
 31282                           	psect	text91
 31283  00174C                     __ptext91:
 31284                           	opt stack 0
 31285  00174C                     _keyboard_all_note_efficient:
 31286                           	opt stack 16
 31287                           
 31288                           ;keyboard.c: 583: unsigned char pitch;
 31289                           ;keyboard.c: 586: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW1) {
 31290                           
 31291                           ;incstack = 0
 31292  00174C  0100               	movlb	0	; () banked
 31293  00174E  B1D8               	btfsc	_button_state_now& (0+255),0,b
 31294                           
 31295                           ; BSR set to: 0
 31296  001750  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31297  001752  D00A               	goto	l1462
 31298                           
 31299                           ; BSR set to: 0
 31300  001754  B1D0               	btfsc	_keyboard& (0+255),0,b
 31301  001756  D008               	goto	l1462
 31302                           
 31303                           ; BSR set to: 0
 31304                           ;keyboard.c: 587: pitch = C;
 31305  001758  0E00               	movlw	0
 31306  00175A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31307                           
 31308                           ; BSR set to: 0
 31309                           ;keyboard.c: 588: ON_OFF = 1;
 31310  00175C  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31311                           
 31312                           ; BSR set to: 0
 31313                           ;keyboard.c: 589: playThisNote(pitch);
 31314  00175E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31315  001760  EC0D  F032         	call	_playThisNote
 31316                           
 31317                           ;keyboard.c: 590: keyboard.SW1 = 1;
 31318  001764  0100               	movlb	0	; () banked
 31319  001766  81D0               	bsf	_keyboard& (0+255),0,b
 31320  001768                     l1462:
 31321                           
 31322                           ; BSR set to: 0
 31323                           ;keyboard.c: 591: }
 31324                           ;keyboard.c: 593: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2) {
 31325                           
 31326                           ; BSR set to: 0
 31327  001768  B3D8               	btfsc	_button_state_now& (0+255),1,b
 31328                           
 31329                           ; BSR set to: 0
 31330  00176A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31331  00176C  D00A               	goto	l1463
 31332                           
 31333                           ; BSR set to: 0
 31334  00176E  B3D0               	btfsc	_keyboard& (0+255),1,b
 31335  001770  D008               	goto	l1463
 31336                           
 31337                           ; BSR set to: 0
 31338                           ;keyboard.c: 594: pitch = Cs;
 31339  001772  0E01               	movlw	1
 31340  001774  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31341                           
 31342                           ; BSR set to: 0
 31343                           ;keyboard.c: 595: ON_OFF = 1;
 31344  001776  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31345                           
 31346                           ; BSR set to: 0
 31347                           ;keyboard.c: 596: playThisNote(pitch);
 31348  001778  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31349  00177A  EC0D  F032         	call	_playThisNote
 31350                           
 31351                           ;keyboard.c: 597: keyboard.SW2 = 1;
 31352  00177E  0100               	movlb	0	; () banked
 31353  001780  83D0               	bsf	_keyboard& (0+255),1,b
 31354  001782                     l1463:
 31355                           
 31356                           ; BSR set to: 0
 31357                           ;keyboard.c: 598: }
 31358                           ;keyboard.c: 600: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW3) {
 31359                           
 31360                           ; BSR set to: 0
 31361  001782  B5D8               	btfsc	_button_state_now& (0+255),2,b
 31362                           
 31363                           ; BSR set to: 0
 31364  001784  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31365  001786  D00A               	goto	l1464
 31366                           
 31367                           ; BSR set to: 0
 31368  001788  B5D0               	btfsc	_keyboard& (0+255),2,b
 31369  00178A  D008               	goto	l1464
 31370                           
 31371                           ; BSR set to: 0
 31372                           ;keyboard.c: 601: pitch = D;
 31373  00178C  0E02               	movlw	2
 31374  00178E  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31375                           
 31376                           ; BSR set to: 0
 31377                           ;keyboard.c: 602: ON_OFF = 1;
 31378  001790  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31379                           
 31380                           ; BSR set to: 0
 31381                           ;keyboard.c: 603: playThisNote(pitch);
 31382  001792  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31383  001794  EC0D  F032         	call	_playThisNote
 31384                           
 31385                           ;keyboard.c: 604: keyboard.SW3 = 1;
 31386  001798  0100               	movlb	0	; () banked
 31387  00179A  85D0               	bsf	_keyboard& (0+255),2,b
 31388  00179C                     l1464:
 31389                           
 31390                           ; BSR set to: 0
 31391                           ;keyboard.c: 605: }
 31392                           ;keyboard.c: 606: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4) {
 31393                           
 31394                           ; BSR set to: 0
 31395  00179C  B7D8               	btfsc	_button_state_now& (0+255),3,b
 31396                           
 31397                           ; BSR set to: 0
 31398  00179E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31399  0017A0  D00A               	goto	l1465
 31400                           
 31401                           ; BSR set to: 0
 31402  0017A2  B7D0               	btfsc	_keyboard& (0+255),3,b
 31403  0017A4  D008               	goto	l1465
 31404                           
 31405                           ; BSR set to: 0
 31406                           ;keyboard.c: 607: pitch = Ds;
 31407  0017A6  0E03               	movlw	3
 31408  0017A8  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31409                           
 31410                           ; BSR set to: 0
 31411                           ;keyboard.c: 608: ON_OFF = 1;
 31412  0017AA  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31413                           
 31414                           ; BSR set to: 0
 31415                           ;keyboard.c: 609: playThisNote(pitch);
 31416  0017AC  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31417  0017AE  EC0D  F032         	call	_playThisNote
 31418                           
 31419                           ;keyboard.c: 610: keyboard.SW4 = 1;
 31420  0017B2  0100               	movlb	0	; () banked
 31421  0017B4  87D0               	bsf	_keyboard& (0+255),3,b
 31422  0017B6                     l1465:
 31423                           
 31424                           ; BSR set to: 0
 31425                           ;keyboard.c: 611: }
 31426                           ;keyboard.c: 612: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW5) {
 31427                           
 31428                           ; BSR set to: 0
 31429  0017B6  B9D8               	btfsc	_button_state_now& (0+255),4,b
 31430                           
 31431                           ; BSR set to: 0
 31432  0017B8  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31433  0017BA  D00A               	goto	l1466
 31434                           
 31435                           ; BSR set to: 0
 31436  0017BC  B9D0               	btfsc	_keyboard& (0+255),4,b
 31437  0017BE  D008               	goto	l1466
 31438                           
 31439                           ; BSR set to: 0
 31440                           ;keyboard.c: 613: pitch = E;
 31441  0017C0  0E04               	movlw	4
 31442  0017C2  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31443                           
 31444                           ; BSR set to: 0
 31445                           ;keyboard.c: 614: ON_OFF = 1;
 31446  0017C4  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31447                           
 31448                           ; BSR set to: 0
 31449                           ;keyboard.c: 615: playThisNote(pitch);
 31450  0017C6  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31451  0017C8  EC0D  F032         	call	_playThisNote
 31452                           
 31453                           ;keyboard.c: 616: keyboard.SW5 = 1;
 31454  0017CC  0100               	movlb	0	; () banked
 31455  0017CE  89D0               	bsf	_keyboard& (0+255),4,b
 31456  0017D0                     l1466:
 31457                           
 31458                           ; BSR set to: 0
 31459                           ;keyboard.c: 617: }
 31460                           ;keyboard.c: 618: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW6) {
 31461                           
 31462                           ; BSR set to: 0
 31463  0017D0  BBD8               	btfsc	_button_state_now& (0+255),5,b
 31464                           
 31465                           ; BSR set to: 0
 31466  0017D2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31467  0017D4  D00A               	goto	l1467
 31468                           
 31469                           ; BSR set to: 0
 31470  0017D6  BBD0               	btfsc	_keyboard& (0+255),5,b
 31471  0017D8  D008               	goto	l1467
 31472                           
 31473                           ; BSR set to: 0
 31474                           ;keyboard.c: 619: pitch = F;
 31475  0017DA  0E05               	movlw	5
 31476  0017DC  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31477                           
 31478                           ; BSR set to: 0
 31479                           ;keyboard.c: 620: ON_OFF = 1;
 31480  0017DE  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31481                           
 31482                           ; BSR set to: 0
 31483                           ;keyboard.c: 621: playThisNote(pitch);
 31484  0017E0  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31485  0017E2  EC0D  F032         	call	_playThisNote
 31486                           
 31487                           ;keyboard.c: 622: keyboard.SW6 = 1;
 31488  0017E6  0100               	movlb	0	; () banked
 31489  0017E8  8BD0               	bsf	_keyboard& (0+255),5,b
 31490  0017EA                     l1467:
 31491                           
 31492                           ; BSR set to: 0
 31493                           ;keyboard.c: 623: }
 31494                           ;keyboard.c: 624: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7) {
 31495                           
 31496                           ; BSR set to: 0
 31497  0017EA  BDD8               	btfsc	_button_state_now& (0+255),6,b
 31498                           
 31499                           ; BSR set to: 0
 31500  0017EC  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31501  0017EE  D00A               	goto	l1468
 31502                           
 31503                           ; BSR set to: 0
 31504  0017F0  BDD0               	btfsc	_keyboard& (0+255),6,b
 31505  0017F2  D008               	goto	l1468
 31506                           
 31507                           ; BSR set to: 0
 31508                           ;keyboard.c: 625: pitch = Fs;
 31509  0017F4  0E06               	movlw	6
 31510  0017F6  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31511                           
 31512                           ; BSR set to: 0
 31513                           ;keyboard.c: 626: ON_OFF = 1;
 31514  0017F8  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31515                           
 31516                           ; BSR set to: 0
 31517                           ;keyboard.c: 627: playThisNote(pitch);
 31518  0017FA  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31519  0017FC  EC0D  F032         	call	_playThisNote
 31520                           
 31521                           ;keyboard.c: 628: keyboard.SW7 = 1;
 31522  001800  0100               	movlb	0	; () banked
 31523  001802  8DD0               	bsf	_keyboard& (0+255),6,b
 31524  001804                     l1468:
 31525                           
 31526                           ; BSR set to: 0
 31527                           ;keyboard.c: 629: }
 31528                           ;keyboard.c: 630: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW8) {
 31529                           
 31530                           ; BSR set to: 0
 31531  001804  BFD8               	btfsc	_button_state_now& (0+255),7,b
 31532                           
 31533                           ; BSR set to: 0
 31534  001806  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31535  001808  D00A               	goto	l1469
 31536                           
 31537                           ; BSR set to: 0
 31538  00180A  BFD0               	btfsc	_keyboard& (0+255),7,b
 31539  00180C  D008               	goto	l1469
 31540                           
 31541                           ; BSR set to: 0
 31542                           ;keyboard.c: 631: pitch = G;
 31543  00180E  0E07               	movlw	7
 31544  001810  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31545                           
 31546                           ; BSR set to: 0
 31547                           ;keyboard.c: 632: ON_OFF = 1;
 31548  001812  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31549                           
 31550                           ; BSR set to: 0
 31551                           ;keyboard.c: 633: playThisNote(pitch);
 31552  001814  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31553  001816  EC0D  F032         	call	_playThisNote
 31554                           
 31555                           ;keyboard.c: 634: keyboard.SW8 = 1;
 31556  00181A  0100               	movlb	0	; () banked
 31557  00181C  8FD0               	bsf	_keyboard& (0+255),7,b
 31558  00181E                     l1469:
 31559                           
 31560                           ; BSR set to: 0
 31561                           ;keyboard.c: 635: }
 31562                           ;keyboard.c: 636: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9) {
 31563                           
 31564                           ; BSR set to: 0
 31565  00181E  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 31566                           
 31567                           ; BSR set to: 0
 31568  001820  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31569  001822  D00A               	goto	l1470
 31570                           
 31571                           ; BSR set to: 0
 31572  001824  B1D1               	btfsc	(_keyboard+1)& (0+255),0,b
 31573  001826  D008               	goto	l1470
 31574                           
 31575                           ; BSR set to: 0
 31576                           ;keyboard.c: 637: pitch = Gs;
 31577  001828  0E08               	movlw	8
 31578  00182A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31579                           
 31580                           ; BSR set to: 0
 31581                           ;keyboard.c: 638: ON_OFF = 1;
 31582  00182C  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31583                           
 31584                           ; BSR set to: 0
 31585                           ;keyboard.c: 639: playThisNote(pitch);
 31586  00182E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31587  001830  EC0D  F032         	call	_playThisNote
 31588                           
 31589                           ;keyboard.c: 640: keyboard.SW9 = 1;
 31590  001834  0100               	movlb	0	; () banked
 31591  001836  81D1               	bsf	(_keyboard+1)& (0+255),0,b
 31592  001838                     l1470:
 31593                           
 31594                           ; BSR set to: 0
 31595                           ;keyboard.c: 641: }
 31596                           ;keyboard.c: 642: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW10) {
 31597                           
 31598                           ; BSR set to: 0
 31599  001838  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 31600                           
 31601                           ; BSR set to: 0
 31602  00183A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31603  00183C  D00A               	goto	l1471
 31604                           
 31605                           ; BSR set to: 0
 31606  00183E  B3D1               	btfsc	(_keyboard+1)& (0+255),1,b
 31607  001840  D008               	goto	l1471
 31608                           
 31609                           ; BSR set to: 0
 31610                           ;keyboard.c: 643: pitch = A;
 31611  001842  0E09               	movlw	9
 31612  001844  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31613                           
 31614                           ; BSR set to: 0
 31615                           ;keyboard.c: 644: ON_OFF = 1;
 31616  001846  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31617                           
 31618                           ; BSR set to: 0
 31619                           ;keyboard.c: 645: playThisNote(pitch);
 31620  001848  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31621  00184A  EC0D  F032         	call	_playThisNote
 31622                           
 31623                           ;keyboard.c: 646: keyboard.SW10 = 1;
 31624  00184E  0100               	movlb	0	; () banked
 31625  001850  83D1               	bsf	(_keyboard+1)& (0+255),1,b
 31626  001852                     l1471:
 31627                           
 31628                           ; BSR set to: 0
 31629                           ;keyboard.c: 647: }
 31630                           ;keyboard.c: 648: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11) {
 31631                           
 31632                           ; BSR set to: 0
 31633  001852  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 31634                           
 31635                           ; BSR set to: 0
 31636  001854  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31637  001856  D00A               	goto	l1472
 31638                           
 31639                           ; BSR set to: 0
 31640  001858  B5D1               	btfsc	(_keyboard+1)& (0+255),2,b
 31641  00185A  D008               	goto	l1472
 31642                           
 31643                           ; BSR set to: 0
 31644                           ;keyboard.c: 649: pitch = As;
 31645  00185C  0E0A               	movlw	10
 31646  00185E  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31647                           
 31648                           ; BSR set to: 0
 31649                           ;keyboard.c: 650: ON_OFF = 1;
 31650  001860  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31651                           
 31652                           ; BSR set to: 0
 31653                           ;keyboard.c: 651: playThisNote(pitch);
 31654  001862  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31655  001864  EC0D  F032         	call	_playThisNote
 31656                           
 31657                           ;keyboard.c: 652: keyboard.SW11 = 1;
 31658  001868  0100               	movlb	0	; () banked
 31659  00186A  85D1               	bsf	(_keyboard+1)& (0+255),2,b
 31660  00186C                     l1472:
 31661                           
 31662                           ; BSR set to: 0
 31663                           ;keyboard.c: 653: }
 31664                           ;keyboard.c: 654: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW12) {
 31665                           
 31666                           ; BSR set to: 0
 31667  00186C  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 31668                           
 31669                           ; BSR set to: 0
 31670  00186E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31671  001870  D00A               	goto	l1473
 31672                           
 31673                           ; BSR set to: 0
 31674  001872  B7D1               	btfsc	(_keyboard+1)& (0+255),3,b
 31675  001874  D008               	goto	l1473
 31676                           
 31677                           ; BSR set to: 0
 31678                           ;keyboard.c: 655: pitch = B;
 31679  001876  0E0B               	movlw	11
 31680  001878  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31681                           
 31682                           ; BSR set to: 0
 31683                           ;keyboard.c: 656: ON_OFF = 1;
 31684  00187A  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31685                           
 31686                           ; BSR set to: 0
 31687                           ;keyboard.c: 657: playThisNote(pitch);
 31688  00187C  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31689  00187E  EC0D  F032         	call	_playThisNote
 31690                           
 31691                           ;keyboard.c: 658: keyboard.SW12 = 1;
 31692  001882  0100               	movlb	0	; () banked
 31693  001884  87D1               	bsf	(_keyboard+1)& (0+255),3,b
 31694  001886                     l1473:
 31695                           
 31696                           ; BSR set to: 0
 31697                           ;keyboard.c: 659: }
 31698                           ;keyboard.c: 660: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW13) {
 31699                           
 31700                           ; BSR set to: 0
 31701  001886  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 31702                           
 31703                           ; BSR set to: 0
 31704  001888  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31705  00188A  D00A               	goto	l1474
 31706                           
 31707                           ; BSR set to: 0
 31708  00188C  B9D1               	btfsc	(_keyboard+1)& (0+255),4,b
 31709  00188E  D008               	goto	l1474
 31710                           
 31711                           ; BSR set to: 0
 31712                           ;keyboard.c: 661: pitch = C2;
 31713  001890  0E0C               	movlw	12
 31714  001892  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31715                           
 31716                           ; BSR set to: 0
 31717                           ;keyboard.c: 662: ON_OFF = 1;
 31718  001894  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31719                           
 31720                           ; BSR set to: 0
 31721                           ;keyboard.c: 663: playThisNote(pitch);
 31722  001896  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31723  001898  EC0D  F032         	call	_playThisNote
 31724                           
 31725                           ;keyboard.c: 664: keyboard.SW13 = 1;
 31726  00189C  0100               	movlb	0	; () banked
 31727  00189E  89D1               	bsf	(_keyboard+1)& (0+255),4,b
 31728  0018A0                     l1474:
 31729                           
 31730                           ; BSR set to: 0
 31731                           ;keyboard.c: 665: }
 31732                           ;keyboard.c: 666: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14) {
 31733                           
 31734                           ; BSR set to: 0
 31735  0018A0  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 31736                           
 31737                           ; BSR set to: 0
 31738  0018A2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31739  0018A4  D00A               	goto	l1475
 31740                           
 31741                           ; BSR set to: 0
 31742  0018A6  BBD1               	btfsc	(_keyboard+1)& (0+255),5,b
 31743  0018A8  D008               	goto	l1475
 31744                           
 31745                           ; BSR set to: 0
 31746                           ;keyboard.c: 667: pitch = C2s;
 31747  0018AA  0E0D               	movlw	13
 31748  0018AC  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31749                           
 31750                           ; BSR set to: 0
 31751                           ;keyboard.c: 668: ON_OFF = 1;
 31752  0018AE  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31753                           
 31754                           ; BSR set to: 0
 31755                           ;keyboard.c: 669: playThisNote(pitch);
 31756  0018B0  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31757  0018B2  EC0D  F032         	call	_playThisNote
 31758                           
 31759                           ;keyboard.c: 670: keyboard.SW14 = 1;
 31760  0018B6  0100               	movlb	0	; () banked
 31761  0018B8  8BD1               	bsf	(_keyboard+1)& (0+255),5,b
 31762  0018BA                     l1475:
 31763                           
 31764                           ; BSR set to: 0
 31765                           ;keyboard.c: 671: }
 31766                           ;keyboard.c: 672: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW15) {
 31767                           
 31768                           ; BSR set to: 0
 31769  0018BA  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 31770                           
 31771                           ; BSR set to: 0
 31772  0018BC  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31773  0018BE  D00A               	goto	l1476
 31774                           
 31775                           ; BSR set to: 0
 31776  0018C0  BDD1               	btfsc	(_keyboard+1)& (0+255),6,b
 31777  0018C2  D008               	goto	l1476
 31778                           
 31779                           ; BSR set to: 0
 31780                           ;keyboard.c: 673: pitch = D2;
 31781  0018C4  0E0E               	movlw	14
 31782  0018C6  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31783                           
 31784                           ; BSR set to: 0
 31785                           ;keyboard.c: 674: ON_OFF = 1;
 31786  0018C8  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31787                           
 31788                           ; BSR set to: 0
 31789                           ;keyboard.c: 675: playThisNote(pitch);
 31790  0018CA  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31791  0018CC  EC0D  F032         	call	_playThisNote
 31792                           
 31793                           ;keyboard.c: 676: keyboard.SW15 = 1;
 31794  0018D0  0100               	movlb	0	; () banked
 31795  0018D2  8DD1               	bsf	(_keyboard+1)& (0+255),6,b
 31796  0018D4                     l1476:
 31797                           
 31798                           ; BSR set to: 0
 31799                           ;keyboard.c: 677: }
 31800                           ;keyboard.c: 678: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16) {
 31801                           
 31802                           ; BSR set to: 0
 31803  0018D4  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 31804                           
 31805                           ; BSR set to: 0
 31806  0018D6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31807  0018D8  D00A               	goto	l1477
 31808                           
 31809                           ; BSR set to: 0
 31810  0018DA  BFD1               	btfsc	(_keyboard+1)& (0+255),7,b
 31811  0018DC  D008               	goto	l1477
 31812                           
 31813                           ; BSR set to: 0
 31814                           ;keyboard.c: 679: pitch = D2s;
 31815  0018DE  0E0F               	movlw	15
 31816  0018E0  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31817                           
 31818                           ; BSR set to: 0
 31819                           ;keyboard.c: 680: ON_OFF = 1;
 31820  0018E2  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31821                           
 31822                           ; BSR set to: 0
 31823                           ;keyboard.c: 681: playThisNote(pitch);
 31824  0018E4  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31825  0018E6  EC0D  F032         	call	_playThisNote
 31826                           
 31827                           ;keyboard.c: 682: keyboard.SW16 = 1;
 31828  0018EA  0100               	movlb	0	; () banked
 31829  0018EC  8FD1               	bsf	(_keyboard+1)& (0+255),7,b
 31830  0018EE                     l1477:
 31831                           
 31832                           ; BSR set to: 0
 31833                           ;keyboard.c: 683: }
 31834                           ;keyboard.c: 684: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW17) {
 31835                           
 31836                           ; BSR set to: 0
 31837  0018EE  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 31838                           
 31839                           ; BSR set to: 0
 31840  0018F0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31841  0018F2  D00A               	goto	l1478
 31842                           
 31843                           ; BSR set to: 0
 31844  0018F4  B1D2               	btfsc	(_keyboard+2)& (0+255),0,b
 31845  0018F6  D008               	goto	l1478
 31846                           
 31847                           ; BSR set to: 0
 31848                           ;keyboard.c: 685: pitch = E2;
 31849  0018F8  0E10               	movlw	16
 31850  0018FA  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31851                           
 31852                           ; BSR set to: 0
 31853                           ;keyboard.c: 686: ON_OFF = 1;
 31854  0018FC  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31855                           
 31856                           ; BSR set to: 0
 31857                           ;keyboard.c: 687: playThisNote(pitch);
 31858  0018FE  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31859  001900  EC0D  F032         	call	_playThisNote
 31860                           
 31861                           ;keyboard.c: 688: keyboard.SW17 = 1;
 31862  001904  0100               	movlb	0	; () banked
 31863  001906  81D2               	bsf	(_keyboard+2)& (0+255),0,b
 31864  001908                     l1478:
 31865                           
 31866                           ; BSR set to: 0
 31867                           ;keyboard.c: 689: }
 31868                           ;keyboard.c: 690: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW18) {
 31869                           
 31870                           ; BSR set to: 0
 31871  001908  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 31872                           
 31873                           ; BSR set to: 0
 31874  00190A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31875  00190C  D00A               	goto	l1479
 31876                           
 31877                           ; BSR set to: 0
 31878  00190E  B3D2               	btfsc	(_keyboard+2)& (0+255),1,b
 31879  001910  D008               	goto	l1479
 31880                           
 31881                           ; BSR set to: 0
 31882                           ;keyboard.c: 691: pitch = F2;
 31883  001912  0E11               	movlw	17
 31884  001914  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31885                           
 31886                           ; BSR set to: 0
 31887                           ;keyboard.c: 692: ON_OFF = 1;
 31888  001916  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31889                           
 31890                           ; BSR set to: 0
 31891                           ;keyboard.c: 693: playThisNote(pitch);
 31892  001918  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31893  00191A  EC0D  F032         	call	_playThisNote
 31894                           
 31895                           ;keyboard.c: 694: keyboard.SW18 = 1;
 31896  00191E  0100               	movlb	0	; () banked
 31897  001920  83D2               	bsf	(_keyboard+2)& (0+255),1,b
 31898  001922                     l1479:
 31899                           
 31900                           ; BSR set to: 0
 31901                           ;keyboard.c: 695: }
 31902                           ;keyboard.c: 696: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19) {
 31903                           
 31904                           ; BSR set to: 0
 31905  001922  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 31906                           
 31907                           ; BSR set to: 0
 31908  001924  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31909  001926  D00A               	goto	l1480
 31910                           
 31911                           ; BSR set to: 0
 31912  001928  B5D2               	btfsc	(_keyboard+2)& (0+255),2,b
 31913  00192A  D008               	goto	l1480
 31914                           
 31915                           ; BSR set to: 0
 31916                           ;keyboard.c: 697: pitch = F2s;
 31917  00192C  0E12               	movlw	18
 31918  00192E  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31919                           
 31920                           ; BSR set to: 0
 31921                           ;keyboard.c: 698: ON_OFF = 1;
 31922  001930  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31923                           
 31924                           ; BSR set to: 0
 31925                           ;keyboard.c: 699: playThisNote(pitch);
 31926  001932  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31927  001934  EC0D  F032         	call	_playThisNote
 31928                           
 31929                           ;keyboard.c: 700: keyboard.SW19 = 1;
 31930  001938  0100               	movlb	0	; () banked
 31931  00193A  85D2               	bsf	(_keyboard+2)& (0+255),2,b
 31932  00193C                     l1480:
 31933                           
 31934                           ; BSR set to: 0
 31935                           ;keyboard.c: 701: }
 31936                           ;keyboard.c: 702: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW20) {
 31937                           
 31938                           ; BSR set to: 0
 31939  00193C  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 31940                           
 31941                           ; BSR set to: 0
 31942  00193E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31943  001940  D00A               	goto	l1481
 31944                           
 31945                           ; BSR set to: 0
 31946  001942  B7D2               	btfsc	(_keyboard+2)& (0+255),3,b
 31947  001944  D008               	goto	l1481
 31948                           
 31949                           ; BSR set to: 0
 31950                           ;keyboard.c: 703: pitch = G2;
 31951  001946  0E13               	movlw	19
 31952  001948  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31953                           
 31954                           ; BSR set to: 0
 31955                           ;keyboard.c: 704: ON_OFF = 1;
 31956  00194A  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31957                           
 31958                           ; BSR set to: 0
 31959                           ;keyboard.c: 705: playThisNote(pitch);
 31960  00194C  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31961  00194E  EC0D  F032         	call	_playThisNote
 31962                           
 31963                           ;keyboard.c: 706: keyboard.SW20 = 1;
 31964  001952  0100               	movlb	0	; () banked
 31965  001954  87D2               	bsf	(_keyboard+2)& (0+255),3,b
 31966  001956                     l1481:
 31967                           
 31968                           ; BSR set to: 0
 31969                           ;keyboard.c: 707: }
 31970                           ;keyboard.c: 708: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21) {
 31971                           
 31972                           ; BSR set to: 0
 31973  001956  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 31974                           
 31975                           ; BSR set to: 0
 31976  001958  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31977  00195A  D00A               	goto	l1482
 31978                           
 31979                           ; BSR set to: 0
 31980  00195C  B9D2               	btfsc	(_keyboard+2)& (0+255),4,b
 31981  00195E  D008               	goto	l1482
 31982                           
 31983                           ; BSR set to: 0
 31984                           ;keyboard.c: 709: pitch = G2s;
 31985  001960  0E14               	movlw	20
 31986  001962  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31987                           
 31988                           ; BSR set to: 0
 31989                           ;keyboard.c: 710: ON_OFF = 1;
 31990  001964  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31991                           
 31992                           ; BSR set to: 0
 31993                           ;keyboard.c: 711: playThisNote(pitch);
 31994  001966  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31995  001968  EC0D  F032         	call	_playThisNote
 31996                           
 31997                           ;keyboard.c: 712: keyboard.SW21 = 1;
 31998  00196C  0100               	movlb	0	; () banked
 31999  00196E  89D2               	bsf	(_keyboard+2)& (0+255),4,b
 32000  001970                     l1482:
 32001                           
 32002                           ; BSR set to: 0
 32003                           ;keyboard.c: 713: }
 32004                           ;keyboard.c: 714: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW22) {
 32005                           
 32006                           ; BSR set to: 0
 32007  001970  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 32008                           
 32009                           ; BSR set to: 0
 32010  001972  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 32011  001974  D00A               	goto	l1483
 32012                           
 32013                           ; BSR set to: 0
 32014  001976  BBD2               	btfsc	(_keyboard+2)& (0+255),5,b
 32015  001978  D008               	goto	l1483
 32016                           
 32017                           ; BSR set to: 0
 32018                           ;keyboard.c: 715: pitch = A2;
 32019  00197A  0E15               	movlw	21
 32020  00197C  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32021                           
 32022                           ; BSR set to: 0
 32023                           ;keyboard.c: 716: ON_OFF = 1;
 32024  00197E  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32025                           
 32026                           ; BSR set to: 0
 32027                           ;keyboard.c: 717: playThisNote(pitch);
 32028  001980  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32029  001982  EC0D  F032         	call	_playThisNote
 32030                           
 32031                           ;keyboard.c: 718: keyboard.SW22 = 1;
 32032  001986  0100               	movlb	0	; () banked
 32033  001988  8BD2               	bsf	(_keyboard+2)& (0+255),5,b
 32034  00198A                     l1483:
 32035                           
 32036                           ; BSR set to: 0
 32037                           ;keyboard.c: 719: }
 32038                           ;keyboard.c: 720: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23) {
 32039                           
 32040                           ; BSR set to: 0
 32041  00198A  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 32042                           
 32043                           ; BSR set to: 0
 32044  00198C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 32045  00198E  D00A               	goto	l1484
 32046                           
 32047                           ; BSR set to: 0
 32048  001990  BDD2               	btfsc	(_keyboard+2)& (0+255),6,b
 32049  001992  D008               	goto	l1484
 32050                           
 32051                           ; BSR set to: 0
 32052                           ;keyboard.c: 721: pitch = A2s;
 32053  001994  0E16               	movlw	22
 32054  001996  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32055                           
 32056                           ; BSR set to: 0
 32057                           ;keyboard.c: 722: ON_OFF = 1;
 32058  001998  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32059                           
 32060                           ; BSR set to: 0
 32061                           ;keyboard.c: 723: playThisNote(pitch);
 32062  00199A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32063  00199C  EC0D  F032         	call	_playThisNote
 32064                           
 32065                           ;keyboard.c: 724: keyboard.SW23 = 1;
 32066  0019A0  0100               	movlb	0	; () banked
 32067  0019A2  8DD2               	bsf	(_keyboard+2)& (0+255),6,b
 32068  0019A4                     l1484:
 32069                           
 32070                           ; BSR set to: 0
 32071                           ;keyboard.c: 725: }
 32072                           ;keyboard.c: 726: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW24) {
 32073                           
 32074                           ; BSR set to: 0
 32075  0019A4  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 32076                           
 32077                           ; BSR set to: 0
 32078  0019A6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 32079  0019A8  D00A               	goto	l1485
 32080                           
 32081                           ; BSR set to: 0
 32082  0019AA  BFD2               	btfsc	(_keyboard+2)& (0+255),7,b
 32083  0019AC  D008               	goto	l1485
 32084                           
 32085                           ; BSR set to: 0
 32086                           ;keyboard.c: 727: pitch = B2;
 32087  0019AE  0E17               	movlw	23
 32088  0019B0  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32089                           
 32090                           ; BSR set to: 0
 32091                           ;keyboard.c: 728: ON_OFF = 1;
 32092  0019B2  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32093                           
 32094                           ; BSR set to: 0
 32095                           ;keyboard.c: 729: playThisNote(pitch);
 32096  0019B4  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32097  0019B6  EC0D  F032         	call	_playThisNote
 32098                           
 32099                           ;keyboard.c: 730: keyboard.SW24 = 1;
 32100  0019BA  0100               	movlb	0	; () banked
 32101  0019BC  8FD2               	bsf	(_keyboard+2)& (0+255),7,b
 32102  0019BE                     l1485:
 32103                           
 32104                           ; BSR set to: 0
 32105                           ;keyboard.c: 731: }
 32106                           ;keyboard.c: 732: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW25) {
 32107                           
 32108                           ; BSR set to: 0
 32109  0019BE  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 32110                           
 32111                           ; BSR set to: 0
 32112  0019C0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 32113  0019C2  D00A               	goto	l1486
 32114                           
 32115                           ; BSR set to: 0
 32116  0019C4  B1D3               	btfsc	(_keyboard+3)& (0+255),0,b
 32117  0019C6  D008               	goto	l1486
 32118                           
 32119                           ; BSR set to: 0
 32120                           ;keyboard.c: 733: pitch = C3;
 32121  0019C8  0E18               	movlw	24
 32122  0019CA  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32123                           
 32124                           ; BSR set to: 0
 32125                           ;keyboard.c: 734: ON_OFF = 1;
 32126  0019CC  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32127                           
 32128                           ; BSR set to: 0
 32129                           ;keyboard.c: 735: playThisNote(pitch);
 32130  0019CE  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32131  0019D0  EC0D  F032         	call	_playThisNote
 32132                           
 32133                           ;keyboard.c: 736: keyboard.SW25 = 1;
 32134  0019D4  0100               	movlb	0	; () banked
 32135  0019D6  81D3               	bsf	(_keyboard+3)& (0+255),0,b
 32136  0019D8                     l1486:
 32137                           
 32138                           ; BSR set to: 0
 32139                           ;keyboard.c: 737: }
 32140                           ;keyboard.c: 740: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x000000
      +                          01) == 0) && keyboard.SW1) {
 32141                           
 32142                           ; BSR set to: 0
 32143  0019D8  B1D4               	btfsc	_button_state_last& (0+255),0,b
 32144                           
 32145                           ; BSR set to: 0
 32146  0019DA  B1D8               	btfsc	_button_state_now& (0+255),0,b
 32147  0019DC  D00A               	goto	l1487
 32148                           
 32149                           ; BSR set to: 0
 32150  0019DE  A1D0               	btfss	_keyboard& (0+255),0,b
 32151  0019E0  D008               	goto	l1487
 32152                           
 32153                           ; BSR set to: 0
 32154                           ;keyboard.c: 741: pitch = C;
 32155  0019E2  0E00               	movlw	0
 32156  0019E4  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32157                           
 32158                           ; BSR set to: 0
 32159                           ;keyboard.c: 742: ON_OFF = 0;
 32160  0019E6  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32161                           
 32162                           ; BSR set to: 0
 32163                           ;keyboard.c: 743: playThisNote(pitch);
 32164  0019E8  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32165  0019EA  EC0D  F032         	call	_playThisNote
 32166                           
 32167                           ;keyboard.c: 744: keyboard.SW1 = 0;
 32168  0019EE  0100               	movlb	0	; () banked
 32169  0019F0  91D0               	bcf	_keyboard& (0+255),0,b
 32170  0019F2                     l1487:
 32171                           
 32172                           ; BSR set to: 0
 32173                           ;keyboard.c: 745: }
 32174                           ;keyboard.c: 746: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 32175                           
 32176                           ; BSR set to: 0
 32177  0019F2  B3D4               	btfsc	_button_state_last& (0+255),1,b
 32178                           
 32179                           ; BSR set to: 0
 32180  0019F4  B3D8               	btfsc	_button_state_now& (0+255),1,b
 32181  0019F6  D00A               	goto	l1488
 32182                           
 32183                           ; BSR set to: 0
 32184  0019F8  A3D0               	btfss	_keyboard& (0+255),1,b
 32185  0019FA  D008               	goto	l1488
 32186                           
 32187                           ; BSR set to: 0
 32188                           ;keyboard.c: 747: pitch = Cs;
 32189  0019FC  0E01               	movlw	1
 32190  0019FE  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32191                           
 32192                           ; BSR set to: 0
 32193                           ;keyboard.c: 748: ON_OFF = 0;
 32194  001A00  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32195                           
 32196                           ; BSR set to: 0
 32197                           ;keyboard.c: 749: playThisNote(pitch);
 32198  001A02  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32199  001A04  EC0D  F032         	call	_playThisNote
 32200                           
 32201                           ;keyboard.c: 750: keyboard.SW2 = 0;
 32202  001A08  0100               	movlb	0	; () banked
 32203  001A0A  93D0               	bcf	_keyboard& (0+255),1,b
 32204  001A0C                     l1488:
 32205                           
 32206                           ; BSR set to: 0
 32207                           ;keyboard.c: 751: }
 32208                           ;keyboard.c: 752: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x000000
      +                          04) == 0) && keyboard.SW3) {
 32209                           
 32210                           ; BSR set to: 0
 32211  001A0C  B5D4               	btfsc	_button_state_last& (0+255),2,b
 32212                           
 32213                           ; BSR set to: 0
 32214  001A0E  B5D8               	btfsc	_button_state_now& (0+255),2,b
 32215  001A10  D00A               	goto	l1489
 32216                           
 32217                           ; BSR set to: 0
 32218  001A12  A5D0               	btfss	_keyboard& (0+255),2,b
 32219  001A14  D008               	goto	l1489
 32220                           
 32221                           ; BSR set to: 0
 32222                           ;keyboard.c: 753: pitch = D;
 32223  001A16  0E02               	movlw	2
 32224  001A18  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32225                           
 32226                           ; BSR set to: 0
 32227                           ;keyboard.c: 754: ON_OFF = 0;
 32228  001A1A  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32229                           
 32230                           ; BSR set to: 0
 32231                           ;keyboard.c: 755: playThisNote(pitch);
 32232  001A1C  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32233  001A1E  EC0D  F032         	call	_playThisNote
 32234                           
 32235                           ;keyboard.c: 756: keyboard.SW3 = 0;
 32236  001A22  0100               	movlb	0	; () banked
 32237  001A24  95D0               	bcf	_keyboard& (0+255),2,b
 32238  001A26                     l1489:
 32239                           
 32240                           ; BSR set to: 0
 32241                           ;keyboard.c: 757: }
 32242                           ;keyboard.c: 758: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 32243                           
 32244                           ; BSR set to: 0
 32245  001A26  B7D4               	btfsc	_button_state_last& (0+255),3,b
 32246                           
 32247                           ; BSR set to: 0
 32248  001A28  B7D8               	btfsc	_button_state_now& (0+255),3,b
 32249  001A2A  D00A               	goto	l1490
 32250                           
 32251                           ; BSR set to: 0
 32252  001A2C  A7D0               	btfss	_keyboard& (0+255),3,b
 32253  001A2E  D008               	goto	l1490
 32254                           
 32255                           ; BSR set to: 0
 32256                           ;keyboard.c: 759: pitch = Ds;
 32257  001A30  0E03               	movlw	3
 32258  001A32  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32259                           
 32260                           ; BSR set to: 0
 32261                           ;keyboard.c: 760: ON_OFF = 0;
 32262  001A34  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32263                           
 32264                           ; BSR set to: 0
 32265                           ;keyboard.c: 761: playThisNote(pitch);
 32266  001A36  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32267  001A38  EC0D  F032         	call	_playThisNote
 32268                           
 32269                           ;keyboard.c: 762: keyboard.SW4 = 0;
 32270  001A3C  0100               	movlb	0	; () banked
 32271  001A3E  97D0               	bcf	_keyboard& (0+255),3,b
 32272  001A40                     l1490:
 32273                           
 32274                           ; BSR set to: 0
 32275                           ;keyboard.c: 763: }
 32276                           ;keyboard.c: 764: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x000000
      +                          10) == 0) && keyboard.SW5) {
 32277                           
 32278                           ; BSR set to: 0
 32279  001A40  B9D4               	btfsc	_button_state_last& (0+255),4,b
 32280                           
 32281                           ; BSR set to: 0
 32282  001A42  B9D8               	btfsc	_button_state_now& (0+255),4,b
 32283  001A44  D00A               	goto	l1491
 32284                           
 32285                           ; BSR set to: 0
 32286  001A46  A9D0               	btfss	_keyboard& (0+255),4,b
 32287  001A48  D008               	goto	l1491
 32288                           
 32289                           ; BSR set to: 0
 32290                           ;keyboard.c: 765: pitch = E;
 32291  001A4A  0E04               	movlw	4
 32292  001A4C  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32293                           
 32294                           ; BSR set to: 0
 32295                           ;keyboard.c: 766: ON_OFF = 0;
 32296  001A4E  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32297                           
 32298                           ; BSR set to: 0
 32299                           ;keyboard.c: 767: playThisNote(pitch);
 32300  001A50  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32301  001A52  EC0D  F032         	call	_playThisNote
 32302                           
 32303                           ;keyboard.c: 768: keyboard.SW5 = 0;
 32304  001A56  0100               	movlb	0	; () banked
 32305  001A58  99D0               	bcf	_keyboard& (0+255),4,b
 32306  001A5A                     l1491:
 32307                           
 32308                           ; BSR set to: 0
 32309                           ;keyboard.c: 769: }
 32310                           ;keyboard.c: 770: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x000000
      +                          20) == 0) && keyboard.SW6) {
 32311                           
 32312                           ; BSR set to: 0
 32313  001A5A  BBD4               	btfsc	_button_state_last& (0+255),5,b
 32314                           
 32315                           ; BSR set to: 0
 32316  001A5C  BBD8               	btfsc	_button_state_now& (0+255),5,b
 32317  001A5E  D00A               	goto	l1492
 32318                           
 32319                           ; BSR set to: 0
 32320  001A60  ABD0               	btfss	_keyboard& (0+255),5,b
 32321  001A62  D008               	goto	l1492
 32322                           
 32323                           ; BSR set to: 0
 32324                           ;keyboard.c: 771: pitch = F;
 32325  001A64  0E05               	movlw	5
 32326  001A66  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32327                           
 32328                           ; BSR set to: 0
 32329                           ;keyboard.c: 772: ON_OFF = 0;
 32330  001A68  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32331                           
 32332                           ; BSR set to: 0
 32333                           ;keyboard.c: 773: playThisNote(pitch);
 32334  001A6A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32335  001A6C  EC0D  F032         	call	_playThisNote
 32336                           
 32337                           ;keyboard.c: 774: keyboard.SW6 = 0;
 32338  001A70  0100               	movlb	0	; () banked
 32339  001A72  9BD0               	bcf	_keyboard& (0+255),5,b
 32340  001A74                     l1492:
 32341                           
 32342                           ; BSR set to: 0
 32343                           ;keyboard.c: 775: }
 32344                           ;keyboard.c: 776: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 32345                           
 32346                           ; BSR set to: 0
 32347  001A74  BDD4               	btfsc	_button_state_last& (0+255),6,b
 32348                           
 32349                           ; BSR set to: 0
 32350  001A76  BDD8               	btfsc	_button_state_now& (0+255),6,b
 32351  001A78  D00A               	goto	l1493
 32352                           
 32353                           ; BSR set to: 0
 32354  001A7A  ADD0               	btfss	_keyboard& (0+255),6,b
 32355  001A7C  D008               	goto	l1493
 32356                           
 32357                           ; BSR set to: 0
 32358                           ;keyboard.c: 777: pitch = Fs;
 32359  001A7E  0E06               	movlw	6
 32360  001A80  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32361                           
 32362                           ; BSR set to: 0
 32363                           ;keyboard.c: 778: ON_OFF = 0;
 32364  001A82  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32365                           
 32366                           ; BSR set to: 0
 32367                           ;keyboard.c: 779: playThisNote(pitch);
 32368  001A84  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32369  001A86  EC0D  F032         	call	_playThisNote
 32370                           
 32371                           ;keyboard.c: 780: keyboard.SW7 = 0;
 32372  001A8A  0100               	movlb	0	; () banked
 32373  001A8C  9DD0               	bcf	_keyboard& (0+255),6,b
 32374  001A8E                     l1493:
 32375                           
 32376                           ; BSR set to: 0
 32377                           ;keyboard.c: 781: }
 32378                           ;keyboard.c: 782: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x000000
      +                          80) == 0) && keyboard.SW8) {
 32379                           
 32380                           ; BSR set to: 0
 32381  001A8E  BFD4               	btfsc	_button_state_last& (0+255),7,b
 32382                           
 32383                           ; BSR set to: 0
 32384  001A90  BFD8               	btfsc	_button_state_now& (0+255),7,b
 32385  001A92  D00A               	goto	l1494
 32386                           
 32387                           ; BSR set to: 0
 32388  001A94  AFD0               	btfss	_keyboard& (0+255),7,b
 32389  001A96  D008               	goto	l1494
 32390                           
 32391                           ; BSR set to: 0
 32392                           ;keyboard.c: 783: pitch = G;
 32393  001A98  0E07               	movlw	7
 32394  001A9A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32395                           
 32396                           ; BSR set to: 0
 32397                           ;keyboard.c: 784: ON_OFF = 0;
 32398  001A9C  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32399                           
 32400                           ; BSR set to: 0
 32401                           ;keyboard.c: 785: playThisNote(pitch);
 32402  001A9E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32403  001AA0  EC0D  F032         	call	_playThisNote
 32404                           
 32405                           ;keyboard.c: 786: keyboard.SW8 = 0;
 32406  001AA4  0100               	movlb	0	; () banked
 32407  001AA6  9FD0               	bcf	_keyboard& (0+255),7,b
 32408  001AA8                     l1494:
 32409                           
 32410                           ; BSR set to: 0
 32411                           ;keyboard.c: 787: }
 32412                           ;keyboard.c: 788: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 32413                           
 32414                           ; BSR set to: 0
 32415  001AA8  B1D5               	btfsc	(_button_state_last+1)& (0+255),0,b
 32416                           
 32417                           ; BSR set to: 0
 32418  001AAA  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 32419  001AAC  D00A               	goto	l1495
 32420                           
 32421                           ; BSR set to: 0
 32422  001AAE  A1D1               	btfss	(_keyboard+1)& (0+255),0,b
 32423  001AB0  D008               	goto	l1495
 32424                           
 32425                           ; BSR set to: 0
 32426                           ;keyboard.c: 789: pitch = Gs;
 32427  001AB2  0E08               	movlw	8
 32428  001AB4  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32429                           
 32430                           ; BSR set to: 0
 32431                           ;keyboard.c: 790: ON_OFF = 0;
 32432  001AB6  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32433                           
 32434                           ; BSR set to: 0
 32435                           ;keyboard.c: 791: playThisNote(pitch);
 32436  001AB8  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32437  001ABA  EC0D  F032         	call	_playThisNote
 32438                           
 32439                           ;keyboard.c: 792: keyboard.SW9 = 0;
 32440  001ABE  0100               	movlb	0	; () banked
 32441  001AC0  91D1               	bcf	(_keyboard+1)& (0+255),0,b
 32442  001AC2                     l1495:
 32443                           
 32444                           ; BSR set to: 0
 32445                           ;keyboard.c: 793: }
 32446                           ;keyboard.c: 794: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x000002
      +                          00) == 0) && keyboard.SW10) {
 32447                           
 32448                           ; BSR set to: 0
 32449  001AC2  B3D5               	btfsc	(_button_state_last+1)& (0+255),1,b
 32450                           
 32451                           ; BSR set to: 0
 32452  001AC4  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 32453  001AC6  D00A               	goto	l1496
 32454                           
 32455                           ; BSR set to: 0
 32456  001AC8  A3D1               	btfss	(_keyboard+1)& (0+255),1,b
 32457  001ACA  D008               	goto	l1496
 32458                           
 32459                           ; BSR set to: 0
 32460                           ;keyboard.c: 795: pitch = A;
 32461  001ACC  0E09               	movlw	9
 32462  001ACE  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32463                           
 32464                           ; BSR set to: 0
 32465                           ;keyboard.c: 796: ON_OFF = 0;
 32466  001AD0  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32467                           
 32468                           ; BSR set to: 0
 32469                           ;keyboard.c: 797: playThisNote(pitch);
 32470  001AD2  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32471  001AD4  EC0D  F032         	call	_playThisNote
 32472                           
 32473                           ;keyboard.c: 798: keyboard.SW10 = 0;
 32474  001AD8  0100               	movlb	0	; () banked
 32475  001ADA  93D1               	bcf	(_keyboard+1)& (0+255),1,b
 32476  001ADC                     l1496:
 32477                           
 32478                           ; BSR set to: 0
 32479                           ;keyboard.c: 799: }
 32480                           ;keyboard.c: 800: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 32481                           
 32482                           ; BSR set to: 0
 32483  001ADC  B5D5               	btfsc	(_button_state_last+1)& (0+255),2,b
 32484                           
 32485                           ; BSR set to: 0
 32486  001ADE  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 32487  001AE0  D00A               	goto	l1497
 32488                           
 32489                           ; BSR set to: 0
 32490  001AE2  A5D1               	btfss	(_keyboard+1)& (0+255),2,b
 32491  001AE4  D008               	goto	l1497
 32492                           
 32493                           ; BSR set to: 0
 32494                           ;keyboard.c: 801: pitch = As;
 32495  001AE6  0E0A               	movlw	10
 32496  001AE8  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32497                           
 32498                           ; BSR set to: 0
 32499                           ;keyboard.c: 802: ON_OFF = 0;
 32500  001AEA  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32501                           
 32502                           ; BSR set to: 0
 32503                           ;keyboard.c: 803: playThisNote(pitch);
 32504  001AEC  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32505  001AEE  EC0D  F032         	call	_playThisNote
 32506                           
 32507                           ;keyboard.c: 804: keyboard.SW11 = 0;
 32508  001AF2  0100               	movlb	0	; () banked
 32509  001AF4  95D1               	bcf	(_keyboard+1)& (0+255),2,b
 32510  001AF6                     l1497:
 32511                           
 32512                           ; BSR set to: 0
 32513                           ;keyboard.c: 805: }
 32514                           ;keyboard.c: 806: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x000008
      +                          00) == 0) && keyboard.SW12) {
 32515                           
 32516                           ; BSR set to: 0
 32517  001AF6  B7D5               	btfsc	(_button_state_last+1)& (0+255),3,b
 32518                           
 32519                           ; BSR set to: 0
 32520  001AF8  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 32521  001AFA  D00A               	goto	l1498
 32522                           
 32523                           ; BSR set to: 0
 32524  001AFC  A7D1               	btfss	(_keyboard+1)& (0+255),3,b
 32525  001AFE  D008               	goto	l1498
 32526                           
 32527                           ; BSR set to: 0
 32528                           ;keyboard.c: 807: pitch = B;
 32529  001B00  0E0B               	movlw	11
 32530  001B02  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32531                           
 32532                           ; BSR set to: 0
 32533                           ;keyboard.c: 808: ON_OFF = 0;
 32534  001B04  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32535                           
 32536                           ; BSR set to: 0
 32537                           ;keyboard.c: 809: playThisNote(pitch);
 32538  001B06  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32539  001B08  EC0D  F032         	call	_playThisNote
 32540                           
 32541                           ;keyboard.c: 810: keyboard.SW12 = 0;
 32542  001B0C  0100               	movlb	0	; () banked
 32543  001B0E  97D1               	bcf	(_keyboard+1)& (0+255),3,b
 32544  001B10                     l1498:
 32545                           
 32546                           ; BSR set to: 0
 32547                           ;keyboard.c: 811: }
 32548                           ;keyboard.c: 812: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x000010
      +                          00) == 0) && keyboard.SW13) {
 32549                           
 32550                           ; BSR set to: 0
 32551  001B10  B9D5               	btfsc	(_button_state_last+1)& (0+255),4,b
 32552                           
 32553                           ; BSR set to: 0
 32554  001B12  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 32555  001B14  D00A               	goto	l1499
 32556                           
 32557                           ; BSR set to: 0
 32558  001B16  A9D1               	btfss	(_keyboard+1)& (0+255),4,b
 32559  001B18  D008               	goto	l1499
 32560                           
 32561                           ; BSR set to: 0
 32562                           ;keyboard.c: 813: pitch = C2;
 32563  001B1A  0E0C               	movlw	12
 32564  001B1C  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32565                           
 32566                           ; BSR set to: 0
 32567                           ;keyboard.c: 814: ON_OFF = 0;
 32568  001B1E  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32569                           
 32570                           ; BSR set to: 0
 32571                           ;keyboard.c: 815: playThisNote(pitch);
 32572  001B20  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32573  001B22  EC0D  F032         	call	_playThisNote
 32574                           
 32575                           ;keyboard.c: 816: keyboard.SW13 = 0;
 32576  001B26  0100               	movlb	0	; () banked
 32577  001B28  99D1               	bcf	(_keyboard+1)& (0+255),4,b
 32578  001B2A                     l1499:
 32579                           
 32580                           ; BSR set to: 0
 32581                           ;keyboard.c: 817: }
 32582                           ;keyboard.c: 818: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 32583                           
 32584                           ; BSR set to: 0
 32585  001B2A  BBD5               	btfsc	(_button_state_last+1)& (0+255),5,b
 32586                           
 32587                           ; BSR set to: 0
 32588  001B2C  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 32589  001B2E  D00A               	goto	l1500
 32590                           
 32591                           ; BSR set to: 0
 32592  001B30  ABD1               	btfss	(_keyboard+1)& (0+255),5,b
 32593  001B32  D008               	goto	l1500
 32594                           
 32595                           ; BSR set to: 0
 32596                           ;keyboard.c: 819: pitch = C2s;
 32597  001B34  0E0D               	movlw	13
 32598  001B36  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32599                           
 32600                           ; BSR set to: 0
 32601                           ;keyboard.c: 820: ON_OFF = 0;
 32602  001B38  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32603                           
 32604                           ; BSR set to: 0
 32605                           ;keyboard.c: 821: playThisNote(pitch);
 32606  001B3A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32607  001B3C  EC0D  F032         	call	_playThisNote
 32608                           
 32609                           ;keyboard.c: 822: keyboard.SW14 = 0;
 32610  001B40  0100               	movlb	0	; () banked
 32611  001B42  9BD1               	bcf	(_keyboard+1)& (0+255),5,b
 32612  001B44                     l1500:
 32613                           
 32614                           ; BSR set to: 0
 32615                           ;keyboard.c: 823: }
 32616                           ;keyboard.c: 824: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x000040
      +                          00) == 0) && keyboard.SW15) {
 32617                           
 32618                           ; BSR set to: 0
 32619  001B44  BDD5               	btfsc	(_button_state_last+1)& (0+255),6,b
 32620                           
 32621                           ; BSR set to: 0
 32622  001B46  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 32623  001B48  D00A               	goto	l1501
 32624                           
 32625                           ; BSR set to: 0
 32626  001B4A  ADD1               	btfss	(_keyboard+1)& (0+255),6,b
 32627  001B4C  D008               	goto	l1501
 32628                           
 32629                           ; BSR set to: 0
 32630                           ;keyboard.c: 825: pitch = D2;
 32631  001B4E  0E0E               	movlw	14
 32632  001B50  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32633                           
 32634                           ; BSR set to: 0
 32635                           ;keyboard.c: 826: ON_OFF = 0;
 32636  001B52  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32637                           
 32638                           ; BSR set to: 0
 32639                           ;keyboard.c: 827: playThisNote(pitch);
 32640  001B54  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32641  001B56  EC0D  F032         	call	_playThisNote
 32642                           
 32643                           ;keyboard.c: 828: keyboard.SW15 = 0;
 32644  001B5A  0100               	movlb	0	; () banked
 32645  001B5C  9DD1               	bcf	(_keyboard+1)& (0+255),6,b
 32646  001B5E                     l1501:
 32647                           
 32648                           ; BSR set to: 0
 32649                           ;keyboard.c: 829: }
 32650                           ;keyboard.c: 830: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 32651                           
 32652                           ; BSR set to: 0
 32653  001B5E  BFD5               	btfsc	(_button_state_last+1)& (0+255),7,b
 32654                           
 32655                           ; BSR set to: 0
 32656  001B60  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 32657  001B62  D00A               	goto	l1502
 32658                           
 32659                           ; BSR set to: 0
 32660  001B64  AFD1               	btfss	(_keyboard+1)& (0+255),7,b
 32661  001B66  D008               	goto	l1502
 32662                           
 32663                           ; BSR set to: 0
 32664                           ;keyboard.c: 831: pitch = D2s;
 32665  001B68  0E0F               	movlw	15
 32666  001B6A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32667                           
 32668                           ; BSR set to: 0
 32669                           ;keyboard.c: 832: ON_OFF = 0;
 32670  001B6C  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32671                           
 32672                           ; BSR set to: 0
 32673                           ;keyboard.c: 833: playThisNote(pitch);
 32674  001B6E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32675  001B70  EC0D  F032         	call	_playThisNote
 32676                           
 32677                           ;keyboard.c: 834: keyboard.SW16 = 0;
 32678  001B74  0100               	movlb	0	; () banked
 32679  001B76  9FD1               	bcf	(_keyboard+1)& (0+255),7,b
 32680  001B78                     l1502:
 32681                           
 32682                           ; BSR set to: 0
 32683                           ;keyboard.c: 835: }
 32684                           ;keyboard.c: 836: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x000100
      +                          00) == 0) && keyboard.SW17) {
 32685                           
 32686                           ; BSR set to: 0
 32687  001B78  B1D6               	btfsc	(_button_state_last+2)& (0+255),0,b
 32688                           
 32689                           ; BSR set to: 0
 32690  001B7A  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 32691  001B7C  D00A               	goto	l1503
 32692                           
 32693                           ; BSR set to: 0
 32694  001B7E  A1D2               	btfss	(_keyboard+2)& (0+255),0,b
 32695  001B80  D008               	goto	l1503
 32696                           
 32697                           ; BSR set to: 0
 32698                           ;keyboard.c: 837: pitch = E2;
 32699  001B82  0E10               	movlw	16
 32700  001B84  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32701                           
 32702                           ; BSR set to: 0
 32703                           ;keyboard.c: 838: ON_OFF = 0;
 32704  001B86  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32705                           
 32706                           ; BSR set to: 0
 32707                           ;keyboard.c: 839: playThisNote(pitch);
 32708  001B88  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32709  001B8A  EC0D  F032         	call	_playThisNote
 32710                           
 32711                           ;keyboard.c: 840: keyboard.SW17 = 0;
 32712  001B8E  0100               	movlb	0	; () banked
 32713  001B90  91D2               	bcf	(_keyboard+2)& (0+255),0,b
 32714  001B92                     l1503:
 32715                           
 32716                           ; BSR set to: 0
 32717                           ;keyboard.c: 841: }
 32718                           ;keyboard.c: 842: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x000200
      +                          00) == 0) && keyboard.SW18) {
 32719                           
 32720                           ; BSR set to: 0
 32721  001B92  B3D6               	btfsc	(_button_state_last+2)& (0+255),1,b
 32722                           
 32723                           ; BSR set to: 0
 32724  001B94  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 32725  001B96  D00A               	goto	l1504
 32726                           
 32727                           ; BSR set to: 0
 32728  001B98  A3D2               	btfss	(_keyboard+2)& (0+255),1,b
 32729  001B9A  D008               	goto	l1504
 32730                           
 32731                           ; BSR set to: 0
 32732                           ;keyboard.c: 843: pitch = F2;
 32733  001B9C  0E11               	movlw	17
 32734  001B9E  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32735                           
 32736                           ; BSR set to: 0
 32737                           ;keyboard.c: 844: ON_OFF = 0;
 32738  001BA0  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32739                           
 32740                           ; BSR set to: 0
 32741                           ;keyboard.c: 845: playThisNote(pitch);
 32742  001BA2  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32743  001BA4  EC0D  F032         	call	_playThisNote
 32744                           
 32745                           ;keyboard.c: 846: keyboard.SW18 = 0;
 32746  001BA8  0100               	movlb	0	; () banked
 32747  001BAA  93D2               	bcf	(_keyboard+2)& (0+255),1,b
 32748  001BAC                     l1504:
 32749                           
 32750                           ; BSR set to: 0
 32751                           ;keyboard.c: 847: }
 32752                           ;keyboard.c: 848: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 32753                           
 32754                           ; BSR set to: 0
 32755  001BAC  B5D6               	btfsc	(_button_state_last+2)& (0+255),2,b
 32756                           
 32757                           ; BSR set to: 0
 32758  001BAE  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 32759  001BB0  D00A               	goto	l1505
 32760                           
 32761                           ; BSR set to: 0
 32762  001BB2  A5D2               	btfss	(_keyboard+2)& (0+255),2,b
 32763  001BB4  D008               	goto	l1505
 32764                           
 32765                           ; BSR set to: 0
 32766                           ;keyboard.c: 849: pitch = F2s;
 32767  001BB6  0E12               	movlw	18
 32768  001BB8  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32769                           
 32770                           ; BSR set to: 0
 32771                           ;keyboard.c: 850: ON_OFF = 0;
 32772  001BBA  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32773                           
 32774                           ; BSR set to: 0
 32775                           ;keyboard.c: 851: playThisNote(pitch);
 32776  001BBC  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32777  001BBE  EC0D  F032         	call	_playThisNote
 32778                           
 32779                           ;keyboard.c: 852: keyboard.SW19 = 0;
 32780  001BC2  0100               	movlb	0	; () banked
 32781  001BC4  95D2               	bcf	(_keyboard+2)& (0+255),2,b
 32782  001BC6                     l1505:
 32783                           
 32784                           ; BSR set to: 0
 32785                           ;keyboard.c: 853: }
 32786                           ;keyboard.c: 854: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x000800
      +                          00) == 0) && keyboard.SW20) {
 32787                           
 32788                           ; BSR set to: 0
 32789  001BC6  B7D6               	btfsc	(_button_state_last+2)& (0+255),3,b
 32790                           
 32791                           ; BSR set to: 0
 32792  001BC8  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 32793  001BCA  D00A               	goto	l1506
 32794                           
 32795                           ; BSR set to: 0
 32796  001BCC  A7D2               	btfss	(_keyboard+2)& (0+255),3,b
 32797  001BCE  D008               	goto	l1506
 32798                           
 32799                           ; BSR set to: 0
 32800                           ;keyboard.c: 855: pitch = G2;
 32801  001BD0  0E13               	movlw	19
 32802  001BD2  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32803                           
 32804                           ; BSR set to: 0
 32805                           ;keyboard.c: 856: ON_OFF = 0;
 32806  001BD4  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32807                           
 32808                           ; BSR set to: 0
 32809                           ;keyboard.c: 857: playThisNote(pitch);
 32810  001BD6  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32811  001BD8  EC0D  F032         	call	_playThisNote
 32812                           
 32813                           ;keyboard.c: 858: keyboard.SW20 = 0;
 32814  001BDC  0100               	movlb	0	; () banked
 32815  001BDE  97D2               	bcf	(_keyboard+2)& (0+255),3,b
 32816  001BE0                     l1506:
 32817                           
 32818                           ; BSR set to: 0
 32819                           ;keyboard.c: 859: }
 32820                           ;keyboard.c: 860: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 32821                           
 32822                           ; BSR set to: 0
 32823  001BE0  B9D6               	btfsc	(_button_state_last+2)& (0+255),4,b
 32824                           
 32825                           ; BSR set to: 0
 32826  001BE2  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 32827  001BE4  D00A               	goto	l1507
 32828                           
 32829                           ; BSR set to: 0
 32830  001BE6  A9D2               	btfss	(_keyboard+2)& (0+255),4,b
 32831  001BE8  D008               	goto	l1507
 32832                           
 32833                           ; BSR set to: 0
 32834                           ;keyboard.c: 861: pitch = G2s;
 32835  001BEA  0E14               	movlw	20
 32836  001BEC  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32837                           
 32838                           ; BSR set to: 0
 32839                           ;keyboard.c: 862: ON_OFF = 0;
 32840  001BEE  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32841                           
 32842                           ; BSR set to: 0
 32843                           ;keyboard.c: 863: playThisNote(pitch);
 32844  001BF0  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32845  001BF2  EC0D  F032         	call	_playThisNote
 32846                           
 32847                           ;keyboard.c: 864: keyboard.SW21 = 0;
 32848  001BF6  0100               	movlb	0	; () banked
 32849  001BF8  99D2               	bcf	(_keyboard+2)& (0+255),4,b
 32850  001BFA                     l1507:
 32851                           
 32852                           ; BSR set to: 0
 32853                           ;keyboard.c: 865: }
 32854                           ;keyboard.c: 866: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x002000
      +                          00) == 0) && keyboard.SW22) {
 32855                           
 32856                           ; BSR set to: 0
 32857  001BFA  BBD6               	btfsc	(_button_state_last+2)& (0+255),5,b
 32858                           
 32859                           ; BSR set to: 0
 32860  001BFC  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 32861  001BFE  D00A               	goto	l1508
 32862                           
 32863                           ; BSR set to: 0
 32864  001C00  ABD2               	btfss	(_keyboard+2)& (0+255),5,b
 32865  001C02  D008               	goto	l1508
 32866                           
 32867                           ; BSR set to: 0
 32868                           ;keyboard.c: 867: pitch = A2;
 32869  001C04  0E15               	movlw	21
 32870  001C06  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32871                           
 32872                           ; BSR set to: 0
 32873                           ;keyboard.c: 868: ON_OFF = 0;
 32874  001C08  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32875                           
 32876                           ; BSR set to: 0
 32877                           ;keyboard.c: 869: playThisNote(pitch);
 32878  001C0A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32879  001C0C  EC0D  F032         	call	_playThisNote
 32880                           
 32881                           ;keyboard.c: 870: keyboard.SW22 = 0;
 32882  001C10  0100               	movlb	0	; () banked
 32883  001C12  9BD2               	bcf	(_keyboard+2)& (0+255),5,b
 32884  001C14                     l1508:
 32885                           
 32886                           ; BSR set to: 0
 32887                           ;keyboard.c: 871: }
 32888                           ;keyboard.c: 872: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 32889                           
 32890                           ; BSR set to: 0
 32891  001C14  BDD6               	btfsc	(_button_state_last+2)& (0+255),6,b
 32892                           
 32893                           ; BSR set to: 0
 32894  001C16  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 32895  001C18  D00A               	goto	l1509
 32896                           
 32897                           ; BSR set to: 0
 32898  001C1A  ADD2               	btfss	(_keyboard+2)& (0+255),6,b
 32899  001C1C  D008               	goto	l1509
 32900                           
 32901                           ; BSR set to: 0
 32902                           ;keyboard.c: 873: pitch = A2s;
 32903  001C1E  0E16               	movlw	22
 32904  001C20  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32905                           
 32906                           ; BSR set to: 0
 32907                           ;keyboard.c: 874: ON_OFF = 0;
 32908  001C22  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32909                           
 32910                           ; BSR set to: 0
 32911                           ;keyboard.c: 875: playThisNote(pitch);
 32912  001C24  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32913  001C26  EC0D  F032         	call	_playThisNote
 32914                           
 32915                           ;keyboard.c: 876: keyboard.SW23 = 0;
 32916  001C2A  0100               	movlb	0	; () banked
 32917  001C2C  9DD2               	bcf	(_keyboard+2)& (0+255),6,b
 32918  001C2E                     l1509:
 32919                           
 32920                           ; BSR set to: 0
 32921                           ;keyboard.c: 877: }
 32922                           ;keyboard.c: 878: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x008000
      +                          00) == 0) && keyboard.SW24) {
 32923                           
 32924                           ; BSR set to: 0
 32925  001C2E  BFD6               	btfsc	(_button_state_last+2)& (0+255),7,b
 32926                           
 32927                           ; BSR set to: 0
 32928  001C30  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 32929  001C32  D00A               	goto	l1510
 32930                           
 32931                           ; BSR set to: 0
 32932  001C34  AFD2               	btfss	(_keyboard+2)& (0+255),7,b
 32933  001C36  D008               	goto	l1510
 32934                           
 32935                           ; BSR set to: 0
 32936                           ;keyboard.c: 879: pitch = B2;
 32937  001C38  0E17               	movlw	23
 32938  001C3A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32939                           
 32940                           ; BSR set to: 0
 32941                           ;keyboard.c: 880: ON_OFF = 0;
 32942  001C3C  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32943                           
 32944                           ; BSR set to: 0
 32945                           ;keyboard.c: 881: playThisNote(pitch);
 32946  001C3E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32947  001C40  EC0D  F032         	call	_playThisNote
 32948                           
 32949                           ;keyboard.c: 882: keyboard.SW24 = 0;
 32950  001C44  0100               	movlb	0	; () banked
 32951  001C46  9FD2               	bcf	(_keyboard+2)& (0+255),7,b
 32952  001C48                     l1510:
 32953                           
 32954                           ; BSR set to: 0
 32955                           ;keyboard.c: 883: }
 32956                           ;keyboard.c: 884: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x010000
      +                          00) == 0) && keyboard.SW25) {
 32957                           
 32958                           ; BSR set to: 0
 32959  001C48  A1D7               	btfss	(_button_state_last+3)& (0+255),0,b
 32960  001C4A  0012               	return	
 32961                           
 32962                           ; BSR set to: 0
 32963  001C4C  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 32964  001C4E  0012               	return	
 32965                           
 32966                           ; BSR set to: 0
 32967  001C50  A1D3               	btfss	(_keyboard+3)& (0+255),0,b
 32968  001C52  0012               	return	
 32969                           
 32970                           ; BSR set to: 0
 32971                           ;keyboard.c: 885: pitch = C3;
 32972  001C54  0E18               	movlw	24
 32973  001C56  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32974                           
 32975                           ; BSR set to: 0
 32976                           ;keyboard.c: 886: ON_OFF = 0;
 32977  001C58  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32978                           
 32979                           ; BSR set to: 0
 32980                           ;keyboard.c: 887: playThisNote(pitch);
 32981  001C5A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32982  001C5C  EC0D  F032         	call	_playThisNote
 32983                           
 32984                           ;keyboard.c: 888: keyboard.SW25 = 0;
 32985  001C60  0100               	movlb	0	; () banked
 32986  001C62  91D3               	bcf	(_keyboard+3)& (0+255),0,b
 32987  001C64  0012               	return	
 32988  001C66                     __end_of_keyboard_all_note_efficient:
 32989                           	opt stack 0
 32990                           tblptru	equ	0xFF8
 32991                           tblptrh	equ	0xFF7
 32992                           tblptrl	equ	0xFF6
 32993                           tablat	equ	0xFF5
 32994                           prodh	equ	0xFF4
 32995                           prodl	equ	0xFF3
 32996                           intcon	equ	0xFF2
 32997                           intcon2	equ	0xFF1
 32998                           postinc0	equ	0xFEE
 32999                           wreg	equ	0xFE8
 33000                           indf1	equ	0xFE7
 33001                           postdec1	equ	0xFE5
 33002                           fsr1h	equ	0xFE2
 33003                           fsr1l	equ	0xFE1
 33004                           indf2	equ	0xFDF
 33005                           postinc2	equ	0xFDE
 33006                           plusw2	equ	0xFDB
 33007                           fsr2h	equ	0xFDA
 33008                           fsr2l	equ	0xFD9
 33009                           status	equ	0xFD8
 33010                           
 33011 ;; *************** function _playThisNote *****************
 33012 ;; Defined at:
 33013 ;;		line 484 in file "keyboard.c"
 33014 ;; Parameters:    Size  Location     Type
 33015 ;;  pitch           1    wreg     unsigned char 
 33016 ;; Auto vars:     Size  Location     Type
 33017 ;;  pitch           1   36[BANK0 ] unsigned char 
 33018 ;; Return value:  Size  Location     Type
 33019 ;;                  1    wreg      void 
 33020 ;; Registers used:
 33021 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33022 ;; Tracked objects:
 33023 ;;		On entry : 0/0
 33024 ;;		On exit  : 0/0
 33025 ;;		Unchanged: 0/0
 33026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33029 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33030 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33031 ;;Total ram usage:        5 bytes
 33032 ;; Hardware stack levels used:    1
 33033 ;; Hardware stack levels required when called:   11
 33034 ;; This function calls:
 33035 ;;		_add_notes_to_arpeggio
 33036 ;;		_delete_notes_from_arpeggio
 33037 ;;		_finish_arpeggio_setup
 33038 ;;		_key_press_release_note_off
 33039 ;;		_noteOff
 33040 ;;		_noteOn
 33041 ;;		_playSeventh
 33042 ;;		_playTriad
 33043 ;;		_wait_one_pulse
 33044 ;; This function is called by:
 33045 ;;		_keyboard_all_note_efficient
 33046 ;;		_doTheUnLatch
 33047 ;; This function uses a non-reentrant model
 33048 ;;
 33049                           
 33050                           	psect	text92
 33051  00641A                     __ptext92:
 33052                           	opt stack 0
 33053  00641A                     _playThisNote:
 33054                           	opt stack 14
 33055                           
 33056                           ; BSR set to: 0
 33057                           ;incstack = 0
 33058                           ;playThisNote@pitch stored from wreg
 33059  00641A  0100               	movlb	0	; () banked
 33060  00641C  6F84               	movwf	playThisNote@pitch& (0+255),b
 33061                           
 33062                           ;keyboard.c: 486: if(KEYBOARD_MODE == CHROMATIC) {
 33063  00641E  0100               	movlb	0	; () banked
 33064  006420  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 33065  006422  A4D8               	btfss	status,2,c
 33066  006424  D06B               	goto	l1452
 33067                           
 33068                           ; BSR set to: 0
 33069                           ;keyboard.c: 489: if(ARPEGGIO_ON == 0){
 33070  006426  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33071  006428  D013               	goto	l1445
 33072                           
 33073                           ; BSR set to: 0
 33074                           ;keyboard.c: 490: if(ON_OFF == 1) {noteOn(channel,pitch,velocity);}
 33075  00642A  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33076  00642C  D007               	goto	l1444
 33077                           
 33078                           ; BSR set to: 0
 33079  00642E  C084  F06E         	movff	playThisNote@pitch,noteOn@pitch
 33080  006432  C0FD  F06F         	movff	_velocity,noteOn@velocity
 33081  006436  51F6               	movf	_channel& (0+255),w,b
 33082  006438  ECE1  F044         	call	_noteOn
 33083  00643C                     l1444:
 33084                           
 33085                           ;keyboard.c: 491: if(ON_OFF == 0) {noteOff(channel,pitch,velocity);}
 33086  00643C  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33087  00643E  D008               	goto	l1445
 33088  006440  C084  F06B         	movff	playThisNote@pitch,noteOff@pitch
 33089  006444  C0FD  F06C         	movff	_velocity,noteOff@velocity
 33090  006448  0100               	movlb	0	; () banked
 33091  00644A  51F6               	movf	_channel& (0+255),w,b
 33092  00644C  EC08  F048         	call	_noteOff
 33093  006450                     l1445:
 33094                           
 33095                           ;keyboard.c: 492: }
 33096                           ;keyboard.c: 495: if(ARPEGGIO_ON == 1){
 33097  006450  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33098  006452  D054               	goto	l1452
 33099                           
 33100                           ;keyboard.c: 497: if(ON_OFF == 1){
 33101  006454  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33102  006456  D01B               	goto	l1447
 33103                           
 33104                           ;keyboard.c: 500: TMR0ON = 0;
 33105  006458  9ED5               	bcf	4053,7,c	;volatile
 33106                           
 33107                           ;keyboard.c: 502: parallel = pitch;
 33108  00645A  C084  F0E6         	movff	playThisNote@pitch,_parallel
 33109                           
 33110                           ;keyboard.c: 505: if(NUM_NOTES_PRESSED > 0){
 33111  00645E  0100               	movlb	0	; () banked
 33112  006460  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33113  006462  B4D8               	btfsc	status,2,c
 33114  006464  D00A               	goto	l1448
 33115                           
 33116                           ; BSR set to: 0
 33117                           ;keyboard.c: 506: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 33118  006466  0E00               	movlw	0
 33119  006468  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 33120  00646A  0E01               	movlw	1
 33121  00646C  EC0B  F04A         	call	_wait_one_pulse
 33122                           
 33123                           ;keyboard.c: 507: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33124  006470  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33125  006472  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 33126                           
 33127                           ;keyboard.c: 508: TIMER_OVERFLOWS = 0;
 33128  006476  0E00               	movlw	0
 33129  006478  6E54               	movwf	_TIMER_OVERFLOWS,c
 33130  00647A                     l1448:
 33131                           
 33132                           ;keyboard.c: 509: }
 33133                           ;keyboard.c: 512: add_notes_to_arpeggio(pitch);
 33134  00647A  0100               	movlb	0	; () banked
 33135  00647C  5184               	movf	playThisNote@pitch& (0+255),w,b
 33136  00647E  EC8F  F032         	call	_add_notes_to_arpeggio
 33137                           
 33138                           ;keyboard.c: 515: if(LATCH == 0) {
 33139  006482  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 33140                           
 33141                           ;keyboard.c: 516: latch_was_pressed = 0;
 33142  006484  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33143                           
 33144                           ;keyboard.c: 517: }
 33145                           ;keyboard.c: 520: finish_arpeggio_setup();
 33146  006486  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 33147                           
 33148                           ;keyboard.c: 523: TMR0ON = 1;
 33149  00648A  8ED5               	bsf	4053,7,c	;volatile
 33150                           
 33151                           ;keyboard.c: 525: return;
 33152  00648C  0012               	return	
 33153  00648E                     l1447:
 33154                           
 33155                           ;keyboard.c: 526: }
 33156                           ;keyboard.c: 529: if((ON_OFF == 0) && (LATCH == 0)){
 33157  00648E  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33158  006490  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 33159  006492  D034               	goto	l1452
 33160                           
 33161                           ;keyboard.c: 532: TMR0ON = 0;
 33162  006494  9ED5               	bcf	4053,7,c	;volatile
 33163                           
 33164                           ;keyboard.c: 535: if(NUM_NOTES_PRESSED > 0){
 33165  006496  0100               	movlb	0	; () banked
 33166  006498  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33167  00649A  B4D8               	btfsc	status,2,c
 33168  00649C  D00A               	goto	l1453
 33169                           
 33170                           ; BSR set to: 0
 33171                           ;keyboard.c: 536: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 33172  00649E  0E00               	movlw	0
 33173  0064A0  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 33174  0064A2  0E01               	movlw	1
 33175  0064A4  EC0B  F04A         	call	_wait_one_pulse
 33176                           
 33177                           ;keyboard.c: 537: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33178  0064A8  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33179  0064AA  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 33180                           
 33181                           ;keyboard.c: 538: TIMER_OVERFLOWS = 0;
 33182  0064AE  0E00               	movlw	0
 33183  0064B0  6E54               	movwf	_TIMER_OVERFLOWS,c
 33184  0064B2                     l1453:
 33185                           
 33186                           ;keyboard.c: 539: }
 33187                           ;keyboard.c: 542: delete_notes_from_arpeggio(pitch);
 33188  0064B2  0100               	movlb	0	; () banked
 33189  0064B4  5184               	movf	playThisNote@pitch& (0+255),w,b
 33190  0064B6  EC7F  F049         	call	_delete_notes_from_arpeggio
 33191                           
 33192                           ;keyboard.c: 545: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 33193  0064BA  C0E6  F080         	movff	_parallel,??_playThisNote
 33194  0064BE  0100               	movlb	0	; () banked
 33195  0064C0  6B81               	clrf	(??_playThisNote+1)& (0+255),b
 33196  0064C2  BF80               	btfsc	??_playThisNote& (0+255),7,b
 33197  0064C4  0781               	decf	(??_playThisNote+1)& (0+255),f,b
 33198  0064C6  5184               	movf	playThisNote@pitch& (0+255),w,b
 33199  0064C8  6F82               	movwf	(??_playThisNote+2)& (0+255),b
 33200  0064CA  6B83               	clrf	(??_playThisNote+3)& (0+255),b
 33201  0064CC  5180               	movf	??_playThisNote& (0+255),w,b
 33202  0064CE  1982               	xorwf	(??_playThisNote+2)& (0+255),w,b
 33203  0064D0  E106               	bnz	l17259
 33204  0064D2  5181               	movf	(??_playThisNote+1)& (0+255),w,b
 33205  0064D4  1983               	xorwf	(??_playThisNote+3)& (0+255),w,b
 33206  0064D6  A4D8               	btfss	status,2,c
 33207  0064D8  D002               	goto	l1455
 33208                           
 33209                           ; BSR set to: 0
 33210  0064DA  0E00               	movlw	0
 33211  0064DC  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33212  0064DE                     l1455:
 33213  0064DE                     l17259:
 33214                           
 33215                           ; BSR set to: 0
 33216                           ;keyboard.c: 550: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 33217  0064DE  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 33218                           
 33219                           ; BSR set to: 0
 33220  0064E0  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33221  0064E2  D001               	goto	l1456
 33222                           
 33223                           ; BSR set to: 0
 33224                           ;keyboard.c: 551: LATCH = 1;
 33225  0064E4  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 33226  0064E6                     l1456:
 33227                           
 33228                           ; BSR set to: 0
 33229                           ;keyboard.c: 552: }
 33230                           ;keyboard.c: 555: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 33231  0064E6  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 33232                           
 33233                           ; BSR set to: 0
 33234  0064E8  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33235  0064EA  D004               	goto	l1457
 33236                           
 33237                           ; BSR set to: 0
 33238                           ;keyboard.c: 556: NUM_NOTES_PRESSED = 0;
 33239  0064EC  0E00               	movlw	0
 33240  0064EE  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33241                           
 33242                           ;keyboard.c: 557: ARRAY_INDEX = 0;
 33243  0064F0  0E00               	movlw	0
 33244  0064F2  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 33245  0064F4                     l1457:
 33246                           
 33247                           ; BSR set to: 0
 33248                           ;keyboard.c: 558: }
 33249                           ;keyboard.c: 561: finish_arpeggio_setup();
 33250                           
 33251                           ; BSR set to: 0
 33252  0064F4  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 33253                           
 33254                           ;keyboard.c: 564: TMR0ON = 1;
 33255  0064F8  8ED5               	bsf	4053,7,c	;volatile
 33256                           
 33257                           ;keyboard.c: 566: return;
 33258  0064FA  0012               	return	
 33259  0064FC                     l1452:
 33260                           
 33261                           ;keyboard.c: 567: }
 33262                           ;keyboard.c: 568: }
 33263                           ;keyboard.c: 569: }
 33264                           ;keyboard.c: 571: if(KEYBOARD_MODE == TRIAD) {
 33265  0064FC  0E06               	movlw	6
 33266  0064FE  0100               	movlb	0	; () banked
 33267  006500  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 33268  006502  A4D8               	btfss	status,2,c
 33269  006504  D003               	goto	l1458
 33270                           
 33271                           ; BSR set to: 0
 33272                           ;keyboard.c: 572: playTriad(pitch);
 33273  006506  5184               	movf	playThisNote@pitch& (0+255),w,b
 33274  006508  EC09  F02D         	call	_playTriad
 33275  00650C                     l1458:
 33276                           
 33277                           ;keyboard.c: 573: }
 33278                           ;keyboard.c: 575: if(KEYBOARD_MODE == SEVENTH) {
 33279  00650C  0E09               	movlw	9
 33280  00650E  0100               	movlb	0	; () banked
 33281  006510  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 33282  006512  A4D8               	btfss	status,2,c
 33283  006514  0012               	return	
 33284                           
 33285                           ; BSR set to: 0
 33286                           ;keyboard.c: 576: playSeventh(pitch);
 33287  006516  5184               	movf	playThisNote@pitch& (0+255),w,b
 33288  006518  EC42  F02C         	call	_playSeventh
 33289  00651C  0012               	return	
 33290  00651E                     __end_of_playThisNote:
 33291                           	opt stack 0
 33292                           tblptru	equ	0xFF8
 33293                           tblptrh	equ	0xFF7
 33294                           tblptrl	equ	0xFF6
 33295                           tablat	equ	0xFF5
 33296                           prodh	equ	0xFF4
 33297                           prodl	equ	0xFF3
 33298                           intcon	equ	0xFF2
 33299                           intcon2	equ	0xFF1
 33300                           postinc0	equ	0xFEE
 33301                           wreg	equ	0xFE8
 33302                           indf1	equ	0xFE7
 33303                           postdec1	equ	0xFE5
 33304                           fsr1h	equ	0xFE2
 33305                           fsr1l	equ	0xFE1
 33306                           indf2	equ	0xFDF
 33307                           postinc2	equ	0xFDE
 33308                           plusw2	equ	0xFDB
 33309                           fsr2h	equ	0xFDA
 33310                           fsr2l	equ	0xFD9
 33311                           status	equ	0xFD8
 33312                           
 33313 ;; *************** function _playTriad *****************
 33314 ;; Defined at:
 33315 ;;		line 293 in file "keyboard.c"
 33316 ;; Parameters:    Size  Location     Type
 33317 ;;  pitch           1    wreg     unsigned char 
 33318 ;; Auto vars:     Size  Location     Type
 33319 ;;  pitch           1   31[BANK0 ] unsigned char 
 33320 ;;  i               1   30[BANK0 ] unsigned char 
 33321 ;;  i               1   29[BANK0 ] unsigned char 
 33322 ;;  triad_p         2   27[BANK0 ] PTR unsigned char 
 33323 ;;		 -> diminished_triad(3), augmented_triad(3), minor_triad(3), major_triad(3), 
 33324 ;; Return value:  Size  Location     Type
 33325 ;;                  1    wreg      void 
 33326 ;; Registers used:
 33327 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33328 ;; Tracked objects:
 33329 ;;		On entry : 0/0
 33330 ;;		On exit  : 0/0
 33331 ;;		Unchanged: 0/0
 33332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33334 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33335 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33336 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33337 ;;Total ram usage:        9 bytes
 33338 ;; Hardware stack levels used:    1
 33339 ;; Hardware stack levels required when called:   10
 33340 ;; This function calls:
 33341 ;;		_finish_arpeggio_setup
 33342 ;;		_key_press_release_note_off
 33343 ;;		_noteOff
 33344 ;;		_noteOn
 33345 ;;		_wait_one_pulse
 33346 ;; This function is called by:
 33347 ;;		_playThisNote
 33348 ;; This function uses a non-reentrant model
 33349 ;;
 33350                           
 33351                           	psect	text93
 33352  005A12                     __ptext93:
 33353                           	opt stack 0
 33354  005A12                     _playTriad:
 33355                           	opt stack 14
 33356                           
 33357                           ;incstack = 0
 33358                           ;playTriad@pitch stored from wreg
 33359  005A12  0100               	movlb	0	; () banked
 33360  005A14  6F7F               	movwf	playTriad@pitch& (0+255),b
 33361                           
 33362                           ;keyboard.c: 295: unsigned char *triad_p;
 33363                           ;keyboard.c: 299: switch (which_triad) {
 33364  005A16  D012               	goto	l1381
 33365  005A18                     
 33366                           ;keyboard.c: 301: triad_p = major_triad;
 33367  005A18  0EFC               	movlw	low _major_triad
 33368  005A1A  0100               	movlb	0	; () banked
 33369  005A1C  6F7B               	movwf	playTriad@triad_p& (0+255),b
 33370  005A1E  0E01               	movlw	high _major_triad
 33371  005A20  D00B               	goto	L15
 33372  005A22                     
 33373                           ; BSR set to: 0
 33374                           ;keyboard.c: 304: triad_p = minor_triad;
 33375                           
 33376                           ; BSR set to: 0
 33377  005A22  0EF9               	movlw	low _minor_triad
 33378  005A24  6F7B               	movwf	playTriad@triad_p& (0+255),b
 33379  005A26  0E01               	movlw	high _minor_triad
 33380  005A28  D007               	goto	L15
 33381  005A2A                     
 33382                           ; BSR set to: 0
 33383                           ;keyboard.c: 307: triad_p = augmented_triad;
 33384                           
 33385                           ; BSR set to: 0
 33386  005A2A  0EF6               	movlw	low _augmented_triad
 33387  005A2C  6F7B               	movwf	playTriad@triad_p& (0+255),b
 33388  005A2E  0E01               	movlw	high _augmented_triad
 33389  005A30  D003               	goto	L15
 33390  005A32                     
 33391                           ; BSR set to: 0
 33392                           ;keyboard.c: 310: triad_p = diminished_triad;
 33393                           
 33394                           ; BSR set to: 0
 33395  005A32  0EF3               	movlw	low _diminished_triad
 33396  005A34  6F7B               	movwf	playTriad@triad_p& (0+255),b
 33397  005A36  0E01               	movlw	high _diminished_triad
 33398  005A38                     L15:
 33399  005A38  6F7C               	movwf	(playTriad@triad_p+1)& (0+255),b
 33400                           
 33401                           ; BSR set to: 0
 33402                           ;keyboard.c: 314: }
 33403                           
 33404                           ; BSR set to: 0
 33405                           ;keyboard.c: 313: break;
 33406                           
 33407                           ;keyboard.c: 312: default:
 33408                           
 33409                           ;keyboard.c: 311: break;
 33410  005A3A  D00E               	goto	l1383
 33411  005A3C                     l1381:
 33412                           
 33413                           ; BSR set to: 0
 33414  005A3C  0100               	movlb	0	; () banked
 33415  005A3E  51F0               	movf	_which_triad& (0+255),w,b
 33416                           
 33417                           ; Switch size 1, requested type "space"
 33418                           ; Number of cases is 4, Range of values is 0 to 3
 33419                           ; switch strategies available:
 33420                           ; Name         Instructions Cycles
 33421                           ; simple_byte           13     7 (average)
 33422                           ;	Chosen strategy is simple_byte
 33423  005A40  0A00               	xorlw	0	; case 0
 33424  005A42  B4D8               	btfsc	status,2,c
 33425  005A44  D7E9               	goto	l1382
 33426  005A46  0A01               	xorlw	1	; case 1
 33427  005A48  B4D8               	btfsc	status,2,c
 33428  005A4A  D7EB               	goto	l1384
 33429  005A4C  0A03               	xorlw	3	; case 2
 33430  005A4E  B4D8               	btfsc	status,2,c
 33431  005A50  D7EC               	goto	l1385
 33432  005A52  0A01               	xorlw	1	; case 3
 33433  005A54  B4D8               	btfsc	status,2,c
 33434  005A56  D7ED               	goto	l1386
 33435  005A58                     l1383:
 33436                           
 33437                           ; BSR set to: 0
 33438                           ;keyboard.c: 317: if(ARPEGGIO_ON == 0){
 33439  005A58  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33440  005A5A  D02E               	goto	u23310
 33441                           
 33442                           ; BSR set to: 0
 33443                           ;keyboard.c: 318: for(unsigned char i = 0; i<3; i++){
 33444  005A5C  0E00               	movlw	0
 33445  005A5E  6F7D               	movwf	playTriad@i& (0+255),b
 33446  005A60                     l16507:
 33447                           
 33448                           ; BSR set to: 0
 33449  005A60  0E02               	movlw	2
 33450  005A62  657D               	cpfsgt	playTriad@i& (0+255),b
 33451  005A64  D001               	goto	l1389
 33452  005A66  D028               	goto	u23310
 33453  005A68                     l1389:
 33454                           
 33455                           ; BSR set to: 0
 33456                           ;keyboard.c: 319: if(ON_OFF == 1) {noteOn(channel,triad_p[i] + pitch,velocity);}
 33457  005A68  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33458  005A6A  D010               	goto	l1391
 33459                           
 33460                           ; BSR set to: 0
 33461  005A6C  517D               	movf	playTriad@i& (0+255),w,b
 33462  005A6E  0D01               	mullw	1
 33463  005A70  50F3               	movf	prodl,w,c
 33464  005A72  257B               	addwf	playTriad@triad_p& (0+255),w,b
 33465  005A74  6ED9               	movwf	fsr2l,c
 33466  005A76  50F4               	movf	prodh,w,c
 33467  005A78  217C               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 33468  005A7A  6EDA               	movwf	fsr2h,c
 33469  005A7C  50DF               	movf	indf2,w,c
 33470  005A7E  257F               	addwf	playTriad@pitch& (0+255),w,b
 33471  005A80  6F6E               	movwf	noteOn@pitch& (0+255),b
 33472  005A82  C0FD  F06F         	movff	_velocity,noteOn@velocity
 33473  005A86  51F6               	movf	_channel& (0+255),w,b
 33474  005A88  ECE1  F044         	call	_noteOn
 33475  005A8C                     l1391:
 33476                           
 33477                           ;keyboard.c: 320: if(ON_OFF == 0) {noteOff(channel,triad_p[i] + pitch,velocity);}
 33478  005A8C  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33479  005A8E  D011               	goto	l1392
 33480  005A90  0100               	movlb	0	; () banked
 33481  005A92  517D               	movf	playTriad@i& (0+255),w,b
 33482  005A94  0D01               	mullw	1
 33483  005A96  50F3               	movf	prodl,w,c
 33484  005A98  257B               	addwf	playTriad@triad_p& (0+255),w,b
 33485  005A9A  6ED9               	movwf	fsr2l,c
 33486  005A9C  50F4               	movf	prodh,w,c
 33487  005A9E  217C               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 33488  005AA0  6EDA               	movwf	fsr2h,c
 33489  005AA2  50DF               	movf	indf2,w,c
 33490  005AA4  257F               	addwf	playTriad@pitch& (0+255),w,b
 33491  005AA6  6F6B               	movwf	noteOff@pitch& (0+255),b
 33492  005AA8  C0FD  F06C         	movff	_velocity,noteOff@velocity
 33493  005AAC  51F6               	movf	_channel& (0+255),w,b
 33494  005AAE  EC08  F048         	call	_noteOff
 33495  005AB2                     l1392:
 33496  005AB2  0100               	movlb	0	; () banked
 33497  005AB4  2B7D               	incf	playTriad@i& (0+255),f,b
 33498  005AB6  D7D4               	goto	l16507
 33499  005AB8                     u23310:
 33500                           
 33501                           ; BSR set to: 0
 33502                           ;keyboard.c: 321: }
 33503                           ;keyboard.c: 322: }
 33504                           ;keyboard.c: 325: if(ARPEGGIO_ON == 1){
 33505                           
 33506                           ; BSR set to: 0
 33507  005AB8  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33508  005ABA  0012               	return	
 33509                           
 33510                           ; BSR set to: 0
 33511                           ;keyboard.c: 326: if(ON_OFF == 1) {
 33512  005ABC  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33513  005ABE  D034               	goto	l1394
 33514                           
 33515                           ; BSR set to: 0
 33516                           ;keyboard.c: 328: TMR0ON = 0;
 33517  005AC0  9ED5               	bcf	4053,7,c	;volatile
 33518                           
 33519                           ;keyboard.c: 331: parallel = pitch;
 33520  005AC2  C07F  F0E6         	movff	playTriad@pitch,_parallel
 33521                           
 33522                           ; BSR set to: 0
 33523                           ;keyboard.c: 334: if(NUM_NOTES_PRESSED > 0){
 33524  005AC6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33525  005AC8  B4D8               	btfsc	status,2,c
 33526  005ACA  D00A               	goto	l1395
 33527                           
 33528                           ; BSR set to: 0
 33529                           ;keyboard.c: 335: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 33530  005ACC  0E00               	movlw	0
 33531  005ACE  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 33532  005AD0  0E01               	movlw	1
 33533  005AD2  EC0B  F04A         	call	_wait_one_pulse
 33534                           
 33535                           ;keyboard.c: 336: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33536  005AD6  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33537  005AD8  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 33538                           
 33539                           ;keyboard.c: 337: TIMER_OVERFLOWS = 0;
 33540  005ADC  0E00               	movlw	0
 33541  005ADE  6E54               	movwf	_TIMER_OVERFLOWS,c
 33542  005AE0                     l1395:
 33543                           
 33544                           ;keyboard.c: 338: }
 33545                           ;keyboard.c: 340: for(unsigned char i = 0; i<3; i++){
 33546  005AE0  0E00               	movlw	0
 33547  005AE2  0100               	movlb	0	; () banked
 33548  005AE4  6F7E               	movwf	playTriad@i_1657& (0+255),b
 33549  005AE6                     l16537:
 33550                           
 33551                           ; BSR set to: 0
 33552  005AE6  0E02               	movlw	2
 33553  005AE8  657E               	cpfsgt	playTriad@i_1657& (0+255),b
 33554  005AEA  D001               	goto	l1397
 33555  005AEC  D015               	goto	u23370
 33556  005AEE                     l1397:
 33557                           
 33558                           ; BSR set to: 0
 33559                           ;keyboard.c: 341: ARPEGGIO[i] = triad_p[i] + pitch;
 33560                           
 33561                           ; BSR set to: 0
 33562  005AEE  517E               	movf	playTriad@i_1657& (0+255),w,b
 33563  005AF0  0D01               	mullw	1
 33564  005AF2  0E72               	movlw	low _ARPEGGIO
 33565  005AF4  24F3               	addwf	prodl,w,c
 33566  005AF6  6ED9               	movwf	fsr2l,c
 33567  005AF8  0E01               	movlw	high _ARPEGGIO
 33568  005AFA  20F4               	addwfc	prodh,w,c
 33569  005AFC  6EDA               	movwf	fsr2h,c
 33570  005AFE  517E               	movf	playTriad@i_1657& (0+255),w,b
 33571  005B00  0D01               	mullw	1
 33572  005B02  50F3               	movf	prodl,w,c
 33573  005B04  257B               	addwf	playTriad@triad_p& (0+255),w,b
 33574  005B06  6EE1               	movwf	fsr1l,c
 33575  005B08  50F4               	movf	prodh,w,c
 33576  005B0A  217C               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 33577  005B0C  6EE2               	movwf	fsr1h,c
 33578  005B0E  50E7               	movf	indf1,w,c
 33579  005B10  257F               	addwf	playTriad@pitch& (0+255),w,b
 33580  005B12  6EDF               	movwf	indf2,c
 33581                           
 33582                           ; BSR set to: 0
 33583  005B14  2B7E               	incf	playTriad@i_1657& (0+255),f,b
 33584  005B16  D7E7               	goto	l16537
 33585  005B18                     u23370:
 33586                           
 33587                           ; BSR set to: 0
 33588                           ;keyboard.c: 342: }
 33589                           ;keyboard.c: 344: NUM_NOTES_PRESSED = 3;
 33590                           
 33591                           ; BSR set to: 0
 33592  005B18  0E03               	movlw	3
 33593  005B1A  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33594                           
 33595                           ; BSR set to: 0
 33596                           ;keyboard.c: 348: if(LATCH == 0) {latch_was_pressed = 0;}
 33597  005B1C  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 33598                           
 33599                           ; BSR set to: 0
 33600  005B1E  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33601                           
 33602                           ; BSR set to: 0
 33603                           ;keyboard.c: 350: finish_arpeggio_setup();
 33604                           
 33605                           ; BSR set to: 0
 33606  005B20  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 33607                           
 33608                           ;keyboard.c: 351: TMR0ON = 1;
 33609  005B24  8ED5               	bsf	4053,7,c	;volatile
 33610                           
 33611                           ;keyboard.c: 353: return;
 33612  005B26  0012               	return	
 33613  005B28                     l1394:
 33614                           
 33615                           ; BSR set to: 0
 33616                           ;keyboard.c: 354: }
 33617                           ;keyboard.c: 356: if((ON_OFF == 0) && (LATCH == 0)) {
 33618  005B28  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33619  005B2A  0012               	return	
 33620                           
 33621                           ; BSR set to: 0
 33622  005B2C  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 33623  005B2E  0012               	return	
 33624                           
 33625                           ; BSR set to: 0
 33626                           ;keyboard.c: 358: if(NUM_NOTES_PRESSED > 0){
 33627  005B30  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33628  005B32  B4D8               	btfsc	status,2,c
 33629  005B34  D00A               	goto	l1402
 33630                           
 33631                           ; BSR set to: 0
 33632                           ;keyboard.c: 359: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 33633  005B36  0E00               	movlw	0
 33634  005B38  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 33635  005B3A  0E01               	movlw	1
 33636  005B3C  EC0B  F04A         	call	_wait_one_pulse
 33637                           
 33638                           ;keyboard.c: 360: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33639  005B40  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33640  005B42  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 33641                           
 33642                           ;keyboard.c: 361: TIMER_OVERFLOWS = 0;
 33643  005B46  0E00               	movlw	0
 33644  005B48  6E54               	movwf	_TIMER_OVERFLOWS,c
 33645  005B4A                     l1402:
 33646                           
 33647                           ;keyboard.c: 362: }
 33648                           ;keyboard.c: 365: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 33649  005B4A  C0E6  F077         	movff	_parallel,??_playTriad
 33650  005B4E  0100               	movlb	0	; () banked
 33651  005B50  6B78               	clrf	(??_playTriad+1)& (0+255),b
 33652  005B52  BF77               	btfsc	??_playTriad& (0+255),7,b
 33653  005B54  0778               	decf	(??_playTriad+1)& (0+255),f,b
 33654  005B56  517F               	movf	playTriad@pitch& (0+255),w,b
 33655  005B58  6F79               	movwf	(??_playTriad+2)& (0+255),b
 33656  005B5A  6B7A               	clrf	(??_playTriad+3)& (0+255),b
 33657  005B5C  5177               	movf	??_playTriad& (0+255),w,b
 33658  005B5E  1979               	xorwf	(??_playTriad+2)& (0+255),w,b
 33659  005B60  E106               	bnz	l16575
 33660  005B62  5178               	movf	(??_playTriad+1)& (0+255),w,b
 33661  005B64  197A               	xorwf	(??_playTriad+3)& (0+255),w,b
 33662  005B66  A4D8               	btfss	status,2,c
 33663  005B68  D002               	goto	l1404
 33664                           
 33665                           ; BSR set to: 0
 33666  005B6A  0E00               	movlw	0
 33667  005B6C  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33668  005B6E                     l1404:
 33669  005B6E                     l16575:
 33670                           
 33671                           ; BSR set to: 0
 33672                           ;keyboard.c: 370: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 33673  005B6E  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 33674                           
 33675                           ; BSR set to: 0
 33676  005B70  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33677  005B72  D001               	goto	l1405
 33678                           
 33679                           ; BSR set to: 0
 33680                           ;keyboard.c: 371: LATCH = 1;
 33681  005B74  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 33682  005B76                     l1405:
 33683                           
 33684                           ; BSR set to: 0
 33685                           ;keyboard.c: 372: }
 33686                           ;keyboard.c: 375: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1)){
 33687  005B76  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 33688  005B78  D002               	goto	u23470
 33689                           
 33690                           ; BSR set to: 0
 33691  005B7A  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 33692  005B7C  D006               	goto	l1406
 33693  005B7E                     u23470:
 33694                           
 33695                           ; BSR set to: 0
 33696  005B7E  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33697  005B80  D004               	goto	l1406
 33698                           
 33699                           ; BSR set to: 0
 33700                           ;keyboard.c: 376: NUM_NOTES_PRESSED = 0;
 33701  005B82  0E00               	movlw	0
 33702  005B84  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33703                           
 33704                           ;keyboard.c: 377: ARRAY_INDEX = 0;
 33705  005B86  0E00               	movlw	0
 33706  005B88  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 33707  005B8A                     l1406:
 33708                           
 33709                           ; BSR set to: 0
 33710                           ;keyboard.c: 378: }
 33711                           ;keyboard.c: 380: finish_arpeggio_setup();
 33712                           
 33713                           ; BSR set to: 0
 33714  005B8A  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 33715                           
 33716                           ;keyboard.c: 381: TMR0ON = 1;
 33717  005B8E  8ED5               	bsf	4053,7,c	;volatile
 33718                           
 33719                           ;keyboard.c: 382: return;
 33720  005B90  0012               	return	
 33721  005B92                     __end_of_playTriad:
 33722                           	opt stack 0
 33723                           tblptru	equ	0xFF8
 33724                           tblptrh	equ	0xFF7
 33725                           tblptrl	equ	0xFF6
 33726                           tablat	equ	0xFF5
 33727                           prodh	equ	0xFF4
 33728                           prodl	equ	0xFF3
 33729                           intcon	equ	0xFF2
 33730                           intcon2	equ	0xFF1
 33731                           postinc0	equ	0xFEE
 33732                           wreg	equ	0xFE8
 33733                           indf1	equ	0xFE7
 33734                           postdec1	equ	0xFE5
 33735                           fsr1h	equ	0xFE2
 33736                           fsr1l	equ	0xFE1
 33737                           indf2	equ	0xFDF
 33738                           postinc2	equ	0xFDE
 33739                           plusw2	equ	0xFDB
 33740                           fsr2h	equ	0xFDA
 33741                           fsr2l	equ	0xFD9
 33742                           status	equ	0xFD8
 33743                           
 33744 ;; *************** function _playSeventh *****************
 33745 ;; Defined at:
 33746 ;;		line 387 in file "keyboard.c"
 33747 ;; Parameters:    Size  Location     Type
 33748 ;;  pitch           1    wreg     unsigned char 
 33749 ;; Auto vars:     Size  Location     Type
 33750 ;;  pitch           1   31[BANK0 ] unsigned char 
 33751 ;;  i               1   30[BANK0 ] unsigned char 
 33752 ;;  i               1   29[BANK0 ] unsigned char 
 33753 ;;  seventh_p       2   27[BANK0 ] PTR unsigned char 
 33754 ;;		 -> diminished_7th(4), half_diminished_7th(4), minor_7th(4), major_7th(4), 
 33755 ;;		 -> dominant_7th(4), 
 33756 ;; Return value:  Size  Location     Type
 33757 ;;                  1    wreg      void 
 33758 ;; Registers used:
 33759 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33760 ;; Tracked objects:
 33761 ;;		On entry : 0/0
 33762 ;;		On exit  : 0/0
 33763 ;;		Unchanged: 0/0
 33764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33766 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33767 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33768 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33769 ;;Total ram usage:        9 bytes
 33770 ;; Hardware stack levels used:    1
 33771 ;; Hardware stack levels required when called:   10
 33772 ;; This function calls:
 33773 ;;		_finish_arpeggio_setup
 33774 ;;		_key_press_release_note_off
 33775 ;;		_noteOff
 33776 ;;		_noteOn
 33777 ;;		_wait_one_pulse
 33778 ;; This function is called by:
 33779 ;;		_playThisNote
 33780 ;; This function uses a non-reentrant model
 33781 ;;
 33782                           
 33783                           	psect	text94
 33784  005884                     __ptext94:
 33785                           	opt stack 0
 33786  005884                     _playSeventh:
 33787                           	opt stack 14
 33788                           
 33789                           ;incstack = 0
 33790                           ;playSeventh@pitch stored from wreg
 33791  005884  0100               	movlb	0	; () banked
 33792  005886  6F7F               	movwf	playSeventh@pitch& (0+255),b
 33793                           
 33794                           ;keyboard.c: 389: unsigned char *seventh_p;
 33795                           ;keyboard.c: 392: switch (which_seventh) {
 33796  005888  D016               	goto	l1411
 33797  00588A                     
 33798                           ;keyboard.c: 394: seventh_p = dominant_7th;
 33799  00588A  0EF8               	movlw	low _dominant_7th
 33800  00588C  0100               	movlb	0	; () banked
 33801  00588E  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33802  005890  0E02               	movlw	high _dominant_7th
 33803  005892  D00F               	goto	L19
 33804  005894                     
 33805                           ; BSR set to: 0
 33806                           ;keyboard.c: 397: seventh_p = major_7th;
 33807                           
 33808                           ; BSR set to: 0
 33809  005894  0EF4               	movlw	low _major_7th
 33810  005896  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33811  005898  0E02               	movlw	high _major_7th
 33812  00589A  D00B               	goto	L19
 33813  00589C                     
 33814                           ; BSR set to: 0
 33815                           ;keyboard.c: 400: seventh_p = minor_7th;
 33816                           
 33817                           ; BSR set to: 0
 33818  00589C  0EF0               	movlw	low _minor_7th
 33819  00589E  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33820  0058A0  0E02               	movlw	high _minor_7th
 33821  0058A2  D007               	goto	L19
 33822  0058A4                     
 33823                           ; BSR set to: 0
 33824                           ;keyboard.c: 403: seventh_p = half_diminished_7th;
 33825                           
 33826                           ; BSR set to: 0
 33827  0058A4  0EEC               	movlw	low _half_diminished_7th
 33828  0058A6  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33829  0058A8  0E02               	movlw	high _half_diminished_7th
 33830  0058AA  D003               	goto	L19
 33831  0058AC                     
 33832                           ; BSR set to: 0
 33833                           ;keyboard.c: 406: seventh_p = diminished_7th;
 33834                           
 33835                           ; BSR set to: 0
 33836  0058AC  0EE8               	movlw	low _diminished_7th
 33837  0058AE  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33838  0058B0  0E02               	movlw	high _diminished_7th
 33839  0058B2                     L19:
 33840  0058B2  6F7C               	movwf	(playSeventh@seventh_p+1)& (0+255),b
 33841                           
 33842                           ; BSR set to: 0
 33843                           ;keyboard.c: 410: }
 33844                           
 33845                           ; BSR set to: 0
 33846                           ;keyboard.c: 409: break;
 33847                           
 33848                           ;keyboard.c: 408: default:
 33849                           
 33850                           ;keyboard.c: 407: break;
 33851  0058B4  D011               	goto	l1413
 33852  0058B6                     l1411:
 33853                           
 33854                           ; BSR set to: 0
 33855  0058B6  0100               	movlb	0	; () banked
 33856  0058B8  51EF               	movf	_which_seventh& (0+255),w,b
 33857                           
 33858                           ; Switch size 1, requested type "space"
 33859                           ; Number of cases is 5, Range of values is 0 to 4
 33860                           ; switch strategies available:
 33861                           ; Name         Instructions Cycles
 33862                           ; simple_byte           16     9 (average)
 33863                           ;	Chosen strategy is simple_byte
 33864  0058BA  0A00               	xorlw	0	; case 0
 33865  0058BC  B4D8               	btfsc	status,2,c
 33866  0058BE  D7E5               	goto	l1412
 33867  0058C0  0A01               	xorlw	1	; case 1
 33868  0058C2  B4D8               	btfsc	status,2,c
 33869  0058C4  D7E7               	goto	l1414
 33870  0058C6  0A03               	xorlw	3	; case 2
 33871  0058C8  B4D8               	btfsc	status,2,c
 33872  0058CA  D7E8               	goto	l1415
 33873  0058CC  0A01               	xorlw	1	; case 3
 33874  0058CE  B4D8               	btfsc	status,2,c
 33875  0058D0  D7E9               	goto	l1416
 33876  0058D2  0A07               	xorlw	7	; case 4
 33877  0058D4  B4D8               	btfsc	status,2,c
 33878  0058D6  D7EA               	goto	l1417
 33879  0058D8                     l1413:
 33880                           
 33881                           ; BSR set to: 0
 33882                           ;keyboard.c: 413: if(ARPEGGIO_ON == 0){
 33883  0058D8  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33884  0058DA  D02E               	goto	u23530
 33885                           
 33886                           ; BSR set to: 0
 33887                           ;keyboard.c: 414: for(unsigned char i = 0; i<4; i++){
 33888  0058DC  0E00               	movlw	0
 33889  0058DE  6F7D               	movwf	playSeventh@i& (0+255),b
 33890  0058E0                     l16609:
 33891                           
 33892                           ; BSR set to: 0
 33893  0058E0  0E03               	movlw	3
 33894  0058E2  657D               	cpfsgt	playSeventh@i& (0+255),b
 33895  0058E4  D001               	goto	l1420
 33896  0058E6  D028               	goto	u23530
 33897  0058E8                     l1420:
 33898                           
 33899                           ; BSR set to: 0
 33900                           ;keyboard.c: 415: if(ON_OFF == 1) {noteOn(channel,seventh_p[i] + pitch,velocity);}
 33901  0058E8  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33902  0058EA  D010               	goto	l1422
 33903                           
 33904                           ; BSR set to: 0
 33905  0058EC  517D               	movf	playSeventh@i& (0+255),w,b
 33906  0058EE  0D01               	mullw	1
 33907  0058F0  50F3               	movf	prodl,w,c
 33908  0058F2  257B               	addwf	playSeventh@seventh_p& (0+255),w,b
 33909  0058F4  6ED9               	movwf	fsr2l,c
 33910  0058F6  50F4               	movf	prodh,w,c
 33911  0058F8  217C               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 33912  0058FA  6EDA               	movwf	fsr2h,c
 33913  0058FC  50DF               	movf	indf2,w,c
 33914  0058FE  257F               	addwf	playSeventh@pitch& (0+255),w,b
 33915  005900  6F6E               	movwf	noteOn@pitch& (0+255),b
 33916  005902  C0FD  F06F         	movff	_velocity,noteOn@velocity
 33917  005906  51F6               	movf	_channel& (0+255),w,b
 33918  005908  ECE1  F044         	call	_noteOn
 33919  00590C                     l1422:
 33920                           
 33921                           ;keyboard.c: 416: if(ON_OFF == 0) {noteOff(channel,seventh_p[i] + pitch,velocity);}
 33922  00590C  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33923  00590E  D011               	goto	l1423
 33924  005910  0100               	movlb	0	; () banked
 33925  005912  517D               	movf	playSeventh@i& (0+255),w,b
 33926  005914  0D01               	mullw	1
 33927  005916  50F3               	movf	prodl,w,c
 33928  005918  257B               	addwf	playSeventh@seventh_p& (0+255),w,b
 33929  00591A  6ED9               	movwf	fsr2l,c
 33930  00591C  50F4               	movf	prodh,w,c
 33931  00591E  217C               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 33932  005920  6EDA               	movwf	fsr2h,c
 33933  005922  50DF               	movf	indf2,w,c
 33934  005924  257F               	addwf	playSeventh@pitch& (0+255),w,b
 33935  005926  6F6B               	movwf	noteOff@pitch& (0+255),b
 33936  005928  C0FD  F06C         	movff	_velocity,noteOff@velocity
 33937  00592C  51F6               	movf	_channel& (0+255),w,b
 33938  00592E  EC08  F048         	call	_noteOff
 33939  005932                     l1423:
 33940  005932  0100               	movlb	0	; () banked
 33941  005934  2B7D               	incf	playSeventh@i& (0+255),f,b
 33942  005936  D7D4               	goto	l16609
 33943  005938                     u23530:
 33944                           
 33945                           ; BSR set to: 0
 33946                           ;keyboard.c: 417: }
 33947                           ;keyboard.c: 418: }
 33948                           ;keyboard.c: 421: if(ARPEGGIO_ON == 1){
 33949                           
 33950                           ; BSR set to: 0
 33951  005938  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33952  00593A  0012               	return	
 33953                           
 33954                           ; BSR set to: 0
 33955                           ;keyboard.c: 423: if(ON_OFF == 1) {
 33956  00593C  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33957  00593E  D034               	goto	l1425
 33958                           
 33959                           ; BSR set to: 0
 33960                           ;keyboard.c: 425: TMR0ON = 0;
 33961  005940  9ED5               	bcf	4053,7,c	;volatile
 33962                           
 33963                           ;keyboard.c: 428: parallel = pitch;
 33964  005942  C07F  F0E6         	movff	playSeventh@pitch,_parallel
 33965                           
 33966                           ; BSR set to: 0
 33967                           ;keyboard.c: 431: if(NUM_NOTES_PRESSED > 0){
 33968  005946  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33969  005948  B4D8               	btfsc	status,2,c
 33970  00594A  D00A               	goto	l1426
 33971                           
 33972                           ; BSR set to: 0
 33973                           ;keyboard.c: 432: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 33974  00594C  0E00               	movlw	0
 33975  00594E  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 33976  005950  0E01               	movlw	1
 33977  005952  EC0B  F04A         	call	_wait_one_pulse
 33978                           
 33979                           ;keyboard.c: 433: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33980  005956  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33981  005958  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 33982                           
 33983                           ;keyboard.c: 434: TIMER_OVERFLOWS = 0;
 33984  00595C  0E00               	movlw	0
 33985  00595E  6E54               	movwf	_TIMER_OVERFLOWS,c
 33986  005960                     l1426:
 33987                           
 33988                           ;keyboard.c: 435: }
 33989                           ;keyboard.c: 437: for(unsigned char i = 0; i<4; i++){
 33990  005960  0E00               	movlw	0
 33991  005962  0100               	movlb	0	; () banked
 33992  005964  6F7E               	movwf	playSeventh@i_1662& (0+255),b
 33993  005966                     l16639:
 33994                           
 33995                           ; BSR set to: 0
 33996  005966  0E03               	movlw	3
 33997  005968  657E               	cpfsgt	playSeventh@i_1662& (0+255),b
 33998  00596A  D001               	goto	l1428
 33999  00596C  D015               	goto	u23590
 34000  00596E                     l1428:
 34001                           
 34002                           ; BSR set to: 0
 34003                           ;keyboard.c: 438: ARPEGGIO[i] = seventh_p[i] + pitch;
 34004                           
 34005                           ; BSR set to: 0
 34006  00596E  517E               	movf	playSeventh@i_1662& (0+255),w,b
 34007  005970  0D01               	mullw	1
 34008  005972  0E72               	movlw	low _ARPEGGIO
 34009  005974  24F3               	addwf	prodl,w,c
 34010  005976  6ED9               	movwf	fsr2l,c
 34011  005978  0E01               	movlw	high _ARPEGGIO
 34012  00597A  20F4               	addwfc	prodh,w,c
 34013  00597C  6EDA               	movwf	fsr2h,c
 34014  00597E  517E               	movf	playSeventh@i_1662& (0+255),w,b
 34015  005980  0D01               	mullw	1
 34016  005982  50F3               	movf	prodl,w,c
 34017  005984  257B               	addwf	playSeventh@seventh_p& (0+255),w,b
 34018  005986  6EE1               	movwf	fsr1l,c
 34019  005988  50F4               	movf	prodh,w,c
 34020  00598A  217C               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 34021  00598C  6EE2               	movwf	fsr1h,c
 34022  00598E  50E7               	movf	indf1,w,c
 34023  005990  257F               	addwf	playSeventh@pitch& (0+255),w,b
 34024  005992  6EDF               	movwf	indf2,c
 34025                           
 34026                           ; BSR set to: 0
 34027  005994  2B7E               	incf	playSeventh@i_1662& (0+255),f,b
 34028  005996  D7E7               	goto	l16639
 34029  005998                     u23590:
 34030                           
 34031                           ; BSR set to: 0
 34032                           ;keyboard.c: 439: }
 34033                           ;keyboard.c: 441: NUM_NOTES_PRESSED = 4;
 34034                           
 34035                           ; BSR set to: 0
 34036  005998  0E04               	movlw	4
 34037  00599A  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 34038                           
 34039                           ; BSR set to: 0
 34040                           ;keyboard.c: 444: if(LATCH == 0) {latch_was_pressed = 0;}
 34041  00599C  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 34042                           
 34043                           ; BSR set to: 0
 34044  00599E  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 34045                           
 34046                           ; BSR set to: 0
 34047                           ;keyboard.c: 446: finish_arpeggio_setup();
 34048                           
 34049                           ; BSR set to: 0
 34050  0059A0  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 34051                           
 34052                           ;keyboard.c: 447: TMR0ON = 1;
 34053  0059A4  8ED5               	bsf	4053,7,c	;volatile
 34054                           
 34055                           ;keyboard.c: 449: return;
 34056  0059A6  0012               	return	
 34057  0059A8                     l1425:
 34058                           
 34059                           ; BSR set to: 0
 34060                           ;keyboard.c: 450: }
 34061                           ;keyboard.c: 452: if((ON_OFF == 0) && (LATCH == 0)) {
 34062  0059A8  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 34063  0059AA  0012               	return	
 34064                           
 34065                           ; BSR set to: 0
 34066  0059AC  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 34067  0059AE  0012               	return	
 34068                           
 34069                           ; BSR set to: 0
 34070                           ;keyboard.c: 454: if(NUM_NOTES_PRESSED > 0){
 34071  0059B0  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34072  0059B2  B4D8               	btfsc	status,2,c
 34073  0059B4  D00A               	goto	l1433
 34074                           
 34075                           ; BSR set to: 0
 34076                           ;keyboard.c: 455: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 34077  0059B6  0E00               	movlw	0
 34078  0059B8  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 34079  0059BA  0E01               	movlw	1
 34080  0059BC  EC0B  F04A         	call	_wait_one_pulse
 34081                           
 34082                           ;keyboard.c: 456: if(note_off_was_sent == 0) {key_press_release_note_off();}
 34083  0059C0  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 34084  0059C2  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 34085                           
 34086                           ;keyboard.c: 457: TIMER_OVERFLOWS = 0;
 34087  0059C6  0E00               	movlw	0
 34088  0059C8  6E54               	movwf	_TIMER_OVERFLOWS,c
 34089  0059CA                     l1433:
 34090                           
 34091                           ;keyboard.c: 458: }
 34092                           ;keyboard.c: 461: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 34093  0059CA  C0E6  F077         	movff	_parallel,??_playSeventh
 34094  0059CE  0100               	movlb	0	; () banked
 34095  0059D0  6B78               	clrf	(??_playSeventh+1)& (0+255),b
 34096  0059D2  BF77               	btfsc	??_playSeventh& (0+255),7,b
 34097  0059D4  0778               	decf	(??_playSeventh+1)& (0+255),f,b
 34098  0059D6  517F               	movf	playSeventh@pitch& (0+255),w,b
 34099  0059D8  6F79               	movwf	(??_playSeventh+2)& (0+255),b
 34100  0059DA  6B7A               	clrf	(??_playSeventh+3)& (0+255),b
 34101  0059DC  5177               	movf	??_playSeventh& (0+255),w,b
 34102  0059DE  1979               	xorwf	(??_playSeventh+2)& (0+255),w,b
 34103  0059E0  E106               	bnz	l16677
 34104  0059E2  5178               	movf	(??_playSeventh+1)& (0+255),w,b
 34105  0059E4  197A               	xorwf	(??_playSeventh+3)& (0+255),w,b
 34106  0059E6  A4D8               	btfss	status,2,c
 34107  0059E8  D002               	goto	l1435
 34108                           
 34109                           ; BSR set to: 0
 34110  0059EA  0E00               	movlw	0
 34111  0059EC  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 34112  0059EE                     l1435:
 34113  0059EE                     l16677:
 34114                           
 34115                           ; BSR set to: 0
 34116                           ;keyboard.c: 466: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 34117  0059EE  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 34118                           
 34119                           ; BSR set to: 0
 34120  0059F0  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 34121  0059F2  D001               	goto	l1436
 34122                           
 34123                           ; BSR set to: 0
 34124                           ;keyboard.c: 467: LATCH = 1;
 34125  0059F4  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 34126  0059F6                     l1436:
 34127                           
 34128                           ; BSR set to: 0
 34129                           ;keyboard.c: 468: }
 34130                           ;keyboard.c: 471: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1)){
 34131  0059F6  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 34132  0059F8  D002               	goto	u23690
 34133                           
 34134                           ; BSR set to: 0
 34135  0059FA  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 34136  0059FC  D006               	goto	l1437
 34137  0059FE                     u23690:
 34138                           
 34139                           ; BSR set to: 0
 34140  0059FE  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 34141  005A00  D004               	goto	l1437
 34142                           
 34143                           ; BSR set to: 0
 34144                           ;keyboard.c: 472: NUM_NOTES_PRESSED = 0;
 34145  005A02  0E00               	movlw	0
 34146  005A04  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 34147                           
 34148                           ;keyboard.c: 473: ARRAY_INDEX = 0;
 34149  005A06  0E00               	movlw	0
 34150  005A08  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 34151  005A0A                     l1437:
 34152                           
 34153                           ; BSR set to: 0
 34154                           ;keyboard.c: 474: }
 34155                           ;keyboard.c: 476: finish_arpeggio_setup();
 34156                           
 34157                           ; BSR set to: 0
 34158  005A0A  ECC9  F04A         	call	_finish_arpeggio_setup	;wreg free
 34159                           
 34160                           ;keyboard.c: 477: TMR0ON = 1;
 34161  005A0E  8ED5               	bsf	4053,7,c	;volatile
 34162                           
 34163                           ;keyboard.c: 479: return;
 34164  005A10  0012               	return	
 34165  005A12                     __end_of_playSeventh:
 34166                           	opt stack 0
 34167                           tblptru	equ	0xFF8
 34168                           tblptrh	equ	0xFF7
 34169                           tblptrl	equ	0xFF6
 34170                           tablat	equ	0xFF5
 34171                           prodh	equ	0xFF4
 34172                           prodl	equ	0xFF3
 34173                           intcon	equ	0xFF2
 34174                           intcon2	equ	0xFF1
 34175                           postinc0	equ	0xFEE
 34176                           wreg	equ	0xFE8
 34177                           indf1	equ	0xFE7
 34178                           postdec1	equ	0xFE5
 34179                           fsr1h	equ	0xFE2
 34180                           fsr1l	equ	0xFE1
 34181                           indf2	equ	0xFDF
 34182                           postinc2	equ	0xFDE
 34183                           plusw2	equ	0xFDB
 34184                           fsr2h	equ	0xFDA
 34185                           fsr2l	equ	0xFD9
 34186                           status	equ	0xFD8
 34187                           
 34188 ;; *************** function _noteOn *****************
 34189 ;; Defined at:
 34190 ;;		line 83 in file "midi.c"
 34191 ;; Parameters:    Size  Location     Type
 34192 ;;  channel         1    wreg     unsigned char 
 34193 ;;  pitch           1   14[BANK0 ] unsigned char 
 34194 ;;  velocity        1   15[BANK0 ] unsigned char 
 34195 ;; Auto vars:     Size  Location     Type
 34196 ;;  channel         1   16[BANK0 ] unsigned char 
 34197 ;; Return value:  Size  Location     Type
 34198 ;;                  1    wreg      void 
 34199 ;; Registers used:
 34200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34201 ;; Tracked objects:
 34202 ;;		On entry : 0/0
 34203 ;;		On exit  : 0/0
 34204 ;;		Unchanged: 0/0
 34205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34206 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34209 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34210 ;;Total ram usage:        3 bytes
 34211 ;; Hardware stack levels used:    1
 34212 ;; Hardware stack levels required when called:    7
 34213 ;; This function calls:
 34214 ;;		_noteOff
 34215 ;;		_sendOut
 34216 ;;		_sendUSB
 34217 ;; This function is called by:
 34218 ;;		_playThisNotePentatonic
 34219 ;;		_playTriad
 34220 ;;		_playSeventh
 34221 ;;		_playThisNote
 34222 ;;		_playThisNote8
 34223 ;;		_playDiatonicTriadMajor
 34224 ;;		_playDiatonicSeventhMajor
 34225 ;;		_playDiatonicTriadMinor
 34226 ;;		_playDiatonicSeventhMinor
 34227 ;;		_keyboard_all_note
 34228 ;;		_keyboard_eight_note
 34229 ;; This function uses a non-reentrant model
 34230 ;;
 34231                           
 34232                           	psect	text95
 34233  0089C2                     __ptext95:
 34234                           	opt stack 0
 34235  0089C2                     _noteOn:
 34236                           	opt stack 17
 34237                           
 34238                           ;incstack = 0
 34239                           ;noteOn@channel stored from wreg
 34240  0089C2  0100               	movlb	0	; () banked
 34241  0089C4  6F70               	movwf	noteOn@channel& (0+255),b
 34242                           
 34243                           ;midi.c: 85: noteNumber = pitch + semitone + ((octave + 1) * 12);
 34244  0089C6  0100               	movlb	0	; () banked
 34245  0089C8  29FC               	incf	_octave& (0+255),w,b
 34246  0089CA  0D0C               	mullw	12
 34247  0089CC  50F3               	movf	prodl,w,c
 34248  0089CE  256E               	addwf	noteOn@pitch& (0+255),w,b
 34249  0089D0  25F3               	addwf	_semitone& (0+255),w,b
 34250  0089D2  6FF4               	movwf	_noteNumber& (0+255),b
 34251                           
 34252                           ; BSR set to: 0
 34253                           ;midi.c: 86: statusByte = channel | note_on;
 34254  0089D4  5170               	movf	noteOn@channel& (0+255),w,b
 34255  0089D6  0990               	iorlw	144
 34256  0089D8  6FF5               	movwf	_statusByte& (0+255),b
 34257                           
 34258                           ; BSR set to: 0
 34259                           ;midi.c: 89: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 34260  0089DA  516F               	movf	noteOn@velocity& (0+255),w,b
 34261  0089DC  A4D8               	btfss	status,2,c
 34262  0089DE  D008               	goto	l451
 34263                           
 34264                           ; BSR set to: 0
 34265  0089E0  C06E  F06B         	movff	noteOn@pitch,noteOff@pitch
 34266  0089E4  C06F  F06C         	movff	noteOn@velocity,noteOff@velocity
 34267  0089E8  5170               	movf	noteOn@channel& (0+255),w,b
 34268  0089EA  EC08  F048         	call	_noteOff
 34269  0089EE  0012               	return	
 34270  0089F0                     l451:
 34271                           
 34272                           ;midi.c: 92: sendUSB(statusByte, noteNumber, velocity);
 34273  0089F0  C0F4  F060         	movff	_noteNumber,sendUSB@message2
 34274  0089F4  C06F  F061         	movff	noteOn@velocity,sendUSB@message3
 34275  0089F8  0100               	movlb	0	; () banked
 34276  0089FA  51F5               	movf	_statusByte& (0+255),w,b
 34277  0089FC  ECC0  F039         	call	_sendUSB
 34278                           
 34279                           ;midi.c: 95: if(velocity > 0) {
 34280  008A00  0100               	movlb	0	; () banked
 34281  008A02  516F               	movf	noteOn@velocity& (0+255),w,b
 34282  008A04  B4D8               	btfsc	status,2,c
 34283  008A06  D00B               	goto	l453
 34284                           
 34285                           ; BSR set to: 0
 34286                           ;midi.c: 96: sendOut(statusByte);
 34287  008A08  51F5               	movf	_statusByte& (0+255),w,b
 34288  008A0A  ECD8  F04A         	call	_sendOut
 34289                           
 34290                           ;midi.c: 97: sendOut(noteNumber);
 34291  008A0E  0100               	movlb	0	; () banked
 34292  008A10  51F4               	movf	_noteNumber& (0+255),w,b
 34293  008A12  ECD8  F04A         	call	_sendOut
 34294                           
 34295                           ;midi.c: 98: sendOut(velocity);
 34296  008A16  0100               	movlb	0	; () banked
 34297  008A18  516F               	movf	noteOn@velocity& (0+255),w,b
 34298  008A1A  ECD8  F04A         	call	_sendOut
 34299  008A1E                     l453:
 34300                           
 34301                           ;midi.c: 99: }
 34302                           ;midi.c: 101: note_off_was_sent = 0;
 34303  008A1E  9233               	bcf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 34304  008A20  0012               	return		;funcret
 34305  008A22                     __end_of_noteOn:
 34306                           	opt stack 0
 34307                           tblptru	equ	0xFF8
 34308                           tblptrh	equ	0xFF7
 34309                           tblptrl	equ	0xFF6
 34310                           tablat	equ	0xFF5
 34311                           prodh	equ	0xFF4
 34312                           prodl	equ	0xFF3
 34313                           intcon	equ	0xFF2
 34314                           intcon2	equ	0xFF1
 34315                           postinc0	equ	0xFEE
 34316                           wreg	equ	0xFE8
 34317                           indf1	equ	0xFE7
 34318                           postdec1	equ	0xFE5
 34319                           fsr1h	equ	0xFE2
 34320                           fsr1l	equ	0xFE1
 34321                           indf2	equ	0xFDF
 34322                           postinc2	equ	0xFDE
 34323                           plusw2	equ	0xFDB
 34324                           fsr2h	equ	0xFDA
 34325                           fsr2l	equ	0xFD9
 34326                           status	equ	0xFD8
 34327                           
 34328 ;; *************** function _finish_arpeggio_setup *****************
 34329 ;; Defined at:
 34330 ;;		line 98 in file "arpeggio.c"
 34331 ;; Parameters:    Size  Location     Type
 34332 ;;		None
 34333 ;; Auto vars:     Size  Location     Type
 34334 ;;		None
 34335 ;; Return value:  Size  Location     Type
 34336 ;;                  1    wreg      void 
 34337 ;; Registers used:
 34338 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34339 ;; Tracked objects:
 34340 ;;		On entry : 0/0
 34341 ;;		On exit  : 0/0
 34342 ;;		Unchanged: 0/0
 34343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34348 ;;Total ram usage:        0 bytes
 34349 ;; Hardware stack levels used:    1
 34350 ;; Hardware stack levels required when called:    9
 34351 ;; This function calls:
 34352 ;;		_resetArpeggio
 34353 ;;		_setupArpeggio
 34354 ;; This function is called by:
 34355 ;;		_playThisNotePentatonic
 34356 ;;		_playTriad
 34357 ;;		_playSeventh
 34358 ;;		_playThisNote
 34359 ;;		_playThisNote8
 34360 ;;		_playDiatonicTriadMajor
 34361 ;;		_playDiatonicSeventhMajor
 34362 ;;		_playDiatonicTriadMinor
 34363 ;;		_playDiatonicSeventhMinor
 34364 ;; This function uses a non-reentrant model
 34365 ;;
 34366                           
 34367                           	psect	text96
 34368  009592                     __ptext96:
 34369                           	opt stack 0
 34370  009592                     _finish_arpeggio_setup:
 34371                           	opt stack 15
 34372                           
 34373                           ;arpeggio.c: 101: if((ON_OFF == 1) && (RESET_ON_KEY_PRESS == 1)){resetArpeggio();}
 34374                           
 34375                           ;incstack = 0
 34376  009592  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 34377  009594  A635               	btfss	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
 34378  009596  D002               	goto	l5209
 34379  009598  ECA0  F048         	call	_resetArpeggio	;wreg free
 34380  00959C                     l5209:
 34381                           
 34382                           ;arpeggio.c: 102: if((ON_OFF == 0) && (RESET_ON_KEY_RELEASE == 1)){resetArpeggio();}
 34383  00959C  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 34384  00959E  A435               	btfss	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
 34385  0095A0  D002               	goto	l5210
 34386  0095A2  ECA0  F048         	call	_resetArpeggio	;wreg free
 34387  0095A6                     l5210:
 34388                           
 34389                           ;arpeggio.c: 105: setupArpeggio();
 34390  0095A6  ECFB  F040         	call	_setupArpeggio	;wreg free
 34391                           
 34392                           ;arpeggio.c: 107: TIMER_OVERFLOWS = 0;
 34393  0095AA  0E00               	movlw	0
 34394  0095AC  6E54               	movwf	_TIMER_OVERFLOWS,c
 34395  0095AE  0012               	return		;funcret
 34396  0095B0                     __end_of_finish_arpeggio_setup:
 34397                           	opt stack 0
 34398                           tblptru	equ	0xFF8
 34399                           tblptrh	equ	0xFF7
 34400                           tblptrl	equ	0xFF6
 34401                           tablat	equ	0xFF5
 34402                           prodh	equ	0xFF4
 34403                           prodl	equ	0xFF3
 34404                           intcon	equ	0xFF2
 34405                           intcon2	equ	0xFF1
 34406                           postinc0	equ	0xFEE
 34407                           wreg	equ	0xFE8
 34408                           indf1	equ	0xFE7
 34409                           postdec1	equ	0xFE5
 34410                           fsr1h	equ	0xFE2
 34411                           fsr1l	equ	0xFE1
 34412                           indf2	equ	0xFDF
 34413                           postinc2	equ	0xFDE
 34414                           plusw2	equ	0xFDB
 34415                           fsr2h	equ	0xFDA
 34416                           fsr2l	equ	0xFD9
 34417                           status	equ	0xFD8
 34418                           
 34419 ;; *************** function _setupArpeggio *****************
 34420 ;; Defined at:
 34421 ;;		line 181 in file "arpeggio.c"
 34422 ;; Parameters:    Size  Location     Type
 34423 ;;		None
 34424 ;; Auto vars:     Size  Location     Type
 34425 ;;		None
 34426 ;; Return value:  Size  Location     Type
 34427 ;;                  1    wreg      void 
 34428 ;; Registers used:
 34429 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34430 ;; Tracked objects:
 34431 ;;		On entry : 0/0
 34432 ;;		On exit  : 0/0
 34433 ;;		Unchanged: 0/0
 34434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34439 ;;Total ram usage:        0 bytes
 34440 ;; Hardware stack levels used:    1
 34441 ;; Hardware stack levels required when called:    8
 34442 ;; This function calls:
 34443 ;;		_copy_array
 34444 ;;		_random_pitches
 34445 ;;		_random_pitches_non_repeating
 34446 ;; This function is called by:
 34447 ;;		_Function_H_4
 34448 ;;		_finish_arpeggio_setup
 34449 ;; This function uses a non-reentrant model
 34450 ;;
 34451                           
 34452                           	psect	text97
 34453  0081F6                     __ptext97:
 34454                           	opt stack 0
 34455  0081F6                     _setupArpeggio:
 34456                           	opt stack 15
 34457                           
 34458                           ;arpeggio.c: 186: if(NUM_NOTES_PRESSED == 0){return;}
 34459                           
 34460                           ;incstack = 0
 34461  0081F6  0100               	movlb	0	; () banked
 34462  0081F8  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34463  0081FA  B4D8               	btfsc	status,2,c
 34464  0081FC  0012               	return	
 34465                           
 34466                           ; BSR set to: 0
 34467                           ;arpeggio.c: 189: copy_array();
 34468                           
 34469                           ; BSR set to: 0
 34470                           
 34471                           ; BSR set to: 0
 34472  0081FE  EC80  F044         	call	_copy_array	;wreg free
 34473                           
 34474                           ;arpeggio.c: 192: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 34475  008202  0E05               	movlw	5
 34476  008204  0100               	movlb	0	; () banked
 34477  008206  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34478  008208  B4D8               	btfsc	status,2,c
 34479                           
 34480                           ; BSR set to: 0
 34481  00820A  EC6D  F045         	call	_random_pitches	;wreg free
 34482                           
 34483                           ;arpeggio.c: 193: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {random_pitches_non_repeatin
      +                          g();}
 34484  00820E  0E04               	movlw	4
 34485  008210  0100               	movlb	0	; () banked
 34486  008212  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34487  008214  B4D8               	btfsc	status,2,c
 34488                           
 34489                           ; BSR set to: 0
 34490  008216  EC00  F03E         	call	_random_pitches_non_repeating	;wreg free
 34491                           
 34492                           ;arpeggio.c: 202: if(ARPEGGIO_TYPE == AS_PRESSED){arpeggioPtr = ARPEGGIO;}
 34493  00821A  0E06               	movlw	6
 34494  00821C  0100               	movlb	0	; () banked
 34495  00821E  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34496  008220  A4D8               	btfss	status,2,c
 34497  008222  D004               	goto	l5243
 34498                           
 34499                           ; BSR set to: 0
 34500  008224  0E72               	movlw	low _ARPEGGIO
 34501  008226  6E4F               	movwf	_arpeggioPtr,c
 34502  008228  0E01               	movlw	high _ARPEGGIO
 34503  00822A  6E50               	movwf	_arpeggioPtr+1,c
 34504  00822C                     l5243:
 34505                           
 34506                           ; BSR set to: 0
 34507                           ;arpeggio.c: 203: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN){arpeggioPtr = ARPEG
      +                          GIO_SORTED;}
 34508                           
 34509                           ; BSR set to: 0
 34510  00822C  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 34511  00822E  B4D8               	btfsc	status,2,c
 34512  008230  D004               	goto	u22750
 34513                           
 34514                           ; BSR set to: 0
 34515  008232  0E02               	movlw	2
 34516  008234  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34517  008236  A4D8               	btfss	status,2,c
 34518  008238  D004               	goto	l5244
 34519  00823A                     u22750:
 34520                           
 34521                           ; BSR set to: 0
 34522                           
 34523                           ; BSR set to: 0
 34524  00823A  0E9C               	movlw	low _ARPEGGIO_SORTED
 34525  00823C  6E4F               	movwf	_arpeggioPtr,c
 34526  00823E  0E02               	movlw	high _ARPEGGIO_SORTED
 34527  008240  6E50               	movwf	_arpeggioPtr+1,c
 34528  008242                     l5244:
 34529                           
 34530                           ; BSR set to: 0
 34531                           ;arpeggio.c: 204: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP){arpeggioPtr = ARP
      +                          EGGIO_SORTED;}
 34532  008242  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 34533  008244  B4D8               	btfsc	status,2,c
 34534  008246  D004               	goto	u22770
 34535                           
 34536                           ; BSR set to: 0
 34537  008248  0E03               	movlw	3
 34538  00824A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34539  00824C  A4D8               	btfss	status,2,c
 34540  00824E  D004               	goto	l5247
 34541  008250                     u22770:
 34542                           
 34543                           ; BSR set to: 0
 34544                           
 34545                           ; BSR set to: 0
 34546  008250  0E9C               	movlw	low _ARPEGGIO_SORTED
 34547  008252  6E4F               	movwf	_arpeggioPtr,c
 34548  008254  0E02               	movlw	high _ARPEGGIO_SORTED
 34549  008256  6E50               	movwf	_arpeggioPtr+1,c
 34550  008258                     l5247:
 34551                           
 34552                           ; BSR set to: 0
 34553                           ;arpeggio.c: 205: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){ar
      +                          peggioPtr = ARPEGGIO_RANDOM;}
 34554  008258  0E05               	movlw	5
 34555  00825A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34556  00825C  B4D8               	btfsc	status,2,c
 34557  00825E  D004               	goto	u22790
 34558                           
 34559                           ; BSR set to: 0
 34560  008260  0E04               	movlw	4
 34561  008262  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34562  008264  A4D8               	btfss	status,2,c
 34563  008266  0012               	return	
 34564  008268                     u22790:
 34565                           
 34566                           ; BSR set to: 0
 34567                           
 34568                           ; BSR set to: 0
 34569  008268  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34570  00826A  6E4F               	movwf	_arpeggioPtr,c
 34571  00826C  0E02               	movlw	high _ARPEGGIO_RANDOM
 34572  00826E  6E50               	movwf	_arpeggioPtr+1,c
 34573  008270  0012               	return	
 34574  008272                     __end_of_setupArpeggio:
 34575                           	opt stack 0
 34576                           tblptru	equ	0xFF8
 34577                           tblptrh	equ	0xFF7
 34578                           tblptrl	equ	0xFF6
 34579                           tablat	equ	0xFF5
 34580                           prodh	equ	0xFF4
 34581                           prodl	equ	0xFF3
 34582                           intcon	equ	0xFF2
 34583                           intcon2	equ	0xFF1
 34584                           postinc0	equ	0xFEE
 34585                           wreg	equ	0xFE8
 34586                           indf1	equ	0xFE7
 34587                           postdec1	equ	0xFE5
 34588                           fsr1h	equ	0xFE2
 34589                           fsr1l	equ	0xFE1
 34590                           indf2	equ	0xFDF
 34591                           postinc2	equ	0xFDE
 34592                           plusw2	equ	0xFDB
 34593                           fsr2h	equ	0xFDA
 34594                           fsr2l	equ	0xFD9
 34595                           status	equ	0xFD8
 34596                           
 34597 ;; *************** function _random_pitches_non_repeating *****************
 34598 ;; Defined at:
 34599 ;;		line 263 in file "arpeggio.c"
 34600 ;; Parameters:    Size  Location     Type
 34601 ;;		None
 34602 ;; Auto vars:     Size  Location     Type
 34603 ;;  randomIndex     1   21[BANK0 ] unsigned char 
 34604 ;;  temp            1   20[BANK0 ] unsigned char 
 34605 ;;  i               1   22[BANK0 ] unsigned char 
 34606 ;; Return value:  Size  Location     Type
 34607 ;;                  1    wreg      void 
 34608 ;; Registers used:
 34609 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34610 ;; Tracked objects:
 34611 ;;		On entry : 0/0
 34612 ;;		On exit  : 0/0
 34613 ;;		Unchanged: 0/0
 34614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34616 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34618 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34619 ;;Total ram usage:        3 bytes
 34620 ;; Hardware stack levels used:    1
 34621 ;; Hardware stack levels required when called:    7
 34622 ;; This function calls:
 34623 ;;		___awmod
 34624 ;;		_rand
 34625 ;; This function is called by:
 34626 ;;		_processOctave
 34627 ;;		_setupArpeggio
 34628 ;; This function uses a non-reentrant model
 34629 ;;
 34630                           
 34631                           	psect	text98
 34632  007C00                     __ptext98:
 34633                           	opt stack 0
 34634  007C00                     _random_pitches_non_repeating:
 34635                           	opt stack 15
 34636                           
 34637                           ;arpeggio.c: 265: if(NUM_NOTES_PRESSED == 0){return;}
 34638                           
 34639                           ; BSR set to: 0
 34640                           ;incstack = 0
 34641  007C00  0100               	movlb	0	; () banked
 34642  007C02  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34643  007C04  B4D8               	btfsc	status,2,c
 34644  007C06  0012               	return	
 34645                           
 34646                           ; BSR set to: 0
 34647                           ;arpeggio.c: 267: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++) {
 34648                           
 34649                           ; BSR set to: 0
 34650                           
 34651                           ; BSR set to: 0
 34652  007C08  0E00               	movlw	0
 34653  007C0A  6F76               	movwf	random_pitches_non_repeating@i& (0+255),b
 34654  007C0C  D036               	goto	l5285
 34655  007C0E                     
 34656                           ; BSR set to: 0
 34657                           ;arpeggio.c: 268: unsigned char temp = ARPEGGIO_RANDOM[i];
 34658                           
 34659                           ; BSR set to: 0
 34660  007C0E  5176               	movf	random_pitches_non_repeating@i& (0+255),w,b
 34661  007C10  0D01               	mullw	1
 34662  007C12  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34663  007C14  24F3               	addwf	prodl,w,c
 34664  007C16  6ED9               	movwf	fsr2l,c
 34665  007C18  0E02               	movlw	high _ARPEGGIO_RANDOM
 34666  007C1A  20F4               	addwfc	prodh,w,c
 34667  007C1C  6EDA               	movwf	fsr2h,c
 34668  007C1E  50DF               	movf	indf2,w,c
 34669  007C20  6F74               	movwf	random_pitches_non_repeating@temp& (0+255),b
 34670                           
 34671                           ; BSR set to: 0
 34672                           ;arpeggio.c: 269: unsigned char randomIndex = rand() % NUM_NOTES_PRESSED;
 34673  007C22  EC9B  F045         	call	_rand	;wreg free
 34674  007C26  C06C  F06E         	movff	?_rand,___awmod@dividend
 34675  007C2A  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
 34676  007C2E  C0E5  F070         	movff	_NUM_NOTES_PRESSED,___awmod@divisor
 34677  007C32  0100               	movlb	0	; () banked
 34678  007C34  6B71               	clrf	(___awmod@divisor+1)& (0+255),b
 34679  007C36  EC9E  F042         	call	___awmod	;wreg free
 34680  007C3A  0100               	movlb	0	; () banked
 34681  007C3C  516E               	movf	?___awmod& (0+255),w,b
 34682  007C3E  6F75               	movwf	random_pitches_non_repeating@randomIndex& (0+255),b
 34683                           
 34684                           ; BSR set to: 0
 34685                           ;arpeggio.c: 270: ARPEGGIO_RANDOM[i] = ARPEGGIO_RANDOM[randomIndex];
 34686  007C40  5175               	movf	random_pitches_non_repeating@randomIndex& (0+255),w,b
 34687  007C42  0D01               	mullw	1
 34688  007C44  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34689  007C46  24F3               	addwf	prodl,w,c
 34690  007C48  6ED9               	movwf	fsr2l,c
 34691  007C4A  0E02               	movlw	high _ARPEGGIO_RANDOM
 34692  007C4C  20F4               	addwfc	prodh,w,c
 34693  007C4E  6EDA               	movwf	fsr2h,c
 34694  007C50  5176               	movf	random_pitches_non_repeating@i& (0+255),w,b
 34695  007C52  0D01               	mullw	1
 34696  007C54  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34697  007C56  24F3               	addwf	prodl,w,c
 34698  007C58  6EE1               	movwf	fsr1l,c
 34699  007C5A  0E02               	movlw	high _ARPEGGIO_RANDOM
 34700  007C5C  20F4               	addwfc	prodh,w,c
 34701  007C5E  6EE2               	movwf	fsr1h,c
 34702  007C60  CFDF FFE7          	movff	indf2,indf1
 34703                           
 34704                           ; BSR set to: 0
 34705                           ;arpeggio.c: 271: ARPEGGIO_RANDOM[randomIndex] = temp;
 34706  007C64  5175               	movf	random_pitches_non_repeating@randomIndex& (0+255),w,b
 34707  007C66  0D01               	mullw	1
 34708  007C68  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34709  007C6A  24F3               	addwf	prodl,w,c
 34710  007C6C  6ED9               	movwf	fsr2l,c
 34711  007C6E  0E02               	movlw	high _ARPEGGIO_RANDOM
 34712  007C70  20F4               	addwfc	prodh,w,c
 34713  007C72  6EDA               	movwf	fsr2h,c
 34714  007C74  C074  FFDF         	movff	random_pitches_non_repeating@temp,indf2
 34715                           
 34716                           ; BSR set to: 0
 34717  007C78  2B76               	incf	random_pitches_non_repeating@i& (0+255),f,b
 34718  007C7A                     l5285:
 34719                           
 34720                           ; BSR set to: 0
 34721                           
 34722                           ; BSR set to: 0
 34723  007C7A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34724  007C7C  5D76               	subwf	random_pitches_non_repeating@i& (0+255),w,b
 34725  007C7E  B0D8               	btfsc	status,0,c
 34726  007C80  0012               	return	
 34727  007C82  D7C5               	goto	l5286
 34728  007C84                     __end_of_random_pitches_non_repeating:
 34729                           	opt stack 0
 34730                           tblptru	equ	0xFF8
 34731                           tblptrh	equ	0xFF7
 34732                           tblptrl	equ	0xFF6
 34733                           tablat	equ	0xFF5
 34734                           prodh	equ	0xFF4
 34735                           prodl	equ	0xFF3
 34736                           intcon	equ	0xFF2
 34737                           intcon2	equ	0xFF1
 34738                           postinc0	equ	0xFEE
 34739                           wreg	equ	0xFE8
 34740                           indf1	equ	0xFE7
 34741                           postdec1	equ	0xFE5
 34742                           fsr1h	equ	0xFE2
 34743                           fsr1l	equ	0xFE1
 34744                           indf2	equ	0xFDF
 34745                           postinc2	equ	0xFDE
 34746                           plusw2	equ	0xFDB
 34747                           fsr2h	equ	0xFDA
 34748                           fsr2l	equ	0xFD9
 34749                           status	equ	0xFD8
 34750                           
 34751 ;; *************** function _random_pitches *****************
 34752 ;; Defined at:
 34753 ;;		line 252 in file "arpeggio.c"
 34754 ;; Parameters:    Size  Location     Type
 34755 ;;		None
 34756 ;; Auto vars:     Size  Location     Type
 34757 ;;  random_array    1   20[BANK0 ] unsigned char 
 34758 ;;  i               1   21[BANK0 ] unsigned char 
 34759 ;; Return value:  Size  Location     Type
 34760 ;;                  1    wreg      void 
 34761 ;; Registers used:
 34762 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34763 ;; Tracked objects:
 34764 ;;		On entry : 0/0
 34765 ;;		On exit  : 0/0
 34766 ;;		Unchanged: 0/0
 34767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34769 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34771 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34772 ;;Total ram usage:        2 bytes
 34773 ;; Hardware stack levels used:    1
 34774 ;; Hardware stack levels required when called:    7
 34775 ;; This function calls:
 34776 ;;		___awmod
 34777 ;;		_rand
 34778 ;; This function is called by:
 34779 ;;		_processOctave
 34780 ;;		_setupArpeggio
 34781 ;; This function uses a non-reentrant model
 34782 ;;
 34783                           
 34784                           	psect	text99
 34785  008ADA                     __ptext99:
 34786                           	opt stack 0
 34787  008ADA                     _random_pitches:
 34788                           	opt stack 15
 34789                           
 34790                           ;arpeggio.c: 254: if(NUM_NOTES_PRESSED == 0){return;}
 34791                           
 34792                           ; BSR set to: 0
 34793                           ;incstack = 0
 34794  008ADA  0100               	movlb	0	; () banked
 34795  008ADC  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34796  008ADE  B4D8               	btfsc	status,2,c
 34797  008AE0  0012               	return	
 34798                           
 34799                           ; BSR set to: 0
 34800                           ;arpeggio.c: 256: for (unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 34801                           
 34802                           ; BSR set to: 0
 34803                           
 34804                           ; BSR set to: 0
 34805  008AE2  0E00               	movlw	0
 34806  008AE4  6F75               	movwf	random_pitches@i& (0+255),b
 34807  008AE6  D022               	goto	l5278
 34808  008AE8                     
 34809                           ; BSR set to: 0
 34810                           ;arpeggio.c: 257: unsigned char random_array_index = rand() % (NUM_NOTES_PRESSED);
 34811                           
 34812                           ; BSR set to: 0
 34813  008AE8  EC9B  F045         	call	_rand	;wreg free
 34814  008AEC  C06C  F06E         	movff	?_rand,___awmod@dividend
 34815  008AF0  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
 34816  008AF4  C0E5  F070         	movff	_NUM_NOTES_PRESSED,___awmod@divisor
 34817  008AF8  0100               	movlb	0	; () banked
 34818  008AFA  6B71               	clrf	(___awmod@divisor+1)& (0+255),b
 34819  008AFC  EC9E  F042         	call	___awmod	;wreg free
 34820  008B00  0100               	movlb	0	; () banked
 34821  008B02  516E               	movf	?___awmod& (0+255),w,b
 34822  008B04  6F74               	movwf	random_pitches@random_array_index& (0+255),b
 34823                           
 34824                           ; BSR set to: 0
 34825                           ;arpeggio.c: 258: ARPEGGIO_RANDOM[i] = ARPEGGIO[random_array_index];
 34826  008B06  5174               	movf	random_pitches@random_array_index& (0+255),w,b
 34827  008B08  0D01               	mullw	1
 34828  008B0A  0E72               	movlw	low _ARPEGGIO
 34829  008B0C  24F3               	addwf	prodl,w,c
 34830  008B0E  6ED9               	movwf	fsr2l,c
 34831  008B10  0E01               	movlw	high _ARPEGGIO
 34832  008B12  20F4               	addwfc	prodh,w,c
 34833  008B14  6EDA               	movwf	fsr2h,c
 34834  008B16  5175               	movf	random_pitches@i& (0+255),w,b
 34835  008B18  0D01               	mullw	1
 34836  008B1A  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34837  008B1C  24F3               	addwf	prodl,w,c
 34838  008B1E  6EE1               	movwf	fsr1l,c
 34839  008B20  0E02               	movlw	high _ARPEGGIO_RANDOM
 34840  008B22  20F4               	addwfc	prodh,w,c
 34841  008B24  6EE2               	movwf	fsr1h,c
 34842  008B26  CFDF FFE7          	movff	indf2,indf1
 34843                           
 34844                           ; BSR set to: 0
 34845  008B2A  2B75               	incf	random_pitches@i& (0+255),f,b
 34846  008B2C                     l5278:
 34847                           
 34848                           ; BSR set to: 0
 34849                           
 34850                           ; BSR set to: 0
 34851  008B2C  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34852  008B2E  5D75               	subwf	random_pitches@i& (0+255),w,b
 34853  008B30  B0D8               	btfsc	status,0,c
 34854  008B32  0012               	return	
 34855  008B34  D7D9               	goto	l5279
 34856  008B36                     __end_of_random_pitches:
 34857                           	opt stack 0
 34858                           tblptru	equ	0xFF8
 34859                           tblptrh	equ	0xFF7
 34860                           tblptrl	equ	0xFF6
 34861                           tablat	equ	0xFF5
 34862                           prodh	equ	0xFF4
 34863                           prodl	equ	0xFF3
 34864                           intcon	equ	0xFF2
 34865                           intcon2	equ	0xFF1
 34866                           postinc0	equ	0xFEE
 34867                           wreg	equ	0xFE8
 34868                           indf1	equ	0xFE7
 34869                           postdec1	equ	0xFE5
 34870                           fsr1h	equ	0xFE2
 34871                           fsr1l	equ	0xFE1
 34872                           indf2	equ	0xFDF
 34873                           postinc2	equ	0xFDE
 34874                           plusw2	equ	0xFDB
 34875                           fsr2h	equ	0xFDA
 34876                           fsr2l	equ	0xFD9
 34877                           status	equ	0xFD8
 34878                           
 34879 ;; *************** function _rand *****************
 34880 ;; Defined at:
 34881 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 34882 ;; Parameters:    Size  Location     Type
 34883 ;;		None
 34884 ;; Auto vars:     Size  Location     Type
 34885 ;;		None
 34886 ;; Return value:  Size  Location     Type
 34887 ;;                  2   12[BANK0 ] int 
 34888 ;; Registers used:
 34889 ;;		wreg, status,2, status,0, cstack
 34890 ;; Tracked objects:
 34891 ;;		On entry : 0/0
 34892 ;;		On exit  : 0/0
 34893 ;;		Unchanged: 0/0
 34894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34895 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34899 ;;Total ram usage:        2 bytes
 34900 ;; Hardware stack levels used:    1
 34901 ;; Hardware stack levels required when called:    6
 34902 ;; This function calls:
 34903 ;;		___lmul
 34904 ;; This function is called by:
 34905 ;;		_random_pitches
 34906 ;;		_random_pitches_non_repeating
 34907 ;; This function uses a non-reentrant model
 34908 ;;
 34909                           
 34910                           	psect	text100
 34911  008B36                     __ptext100:
 34912                           	opt stack 0
 34913  008B36                     _rand:
 34914                           	opt stack 15
 34915                           
 34916                           ; BSR set to: 0
 34917                           ;incstack = 0
 34918  008B36  C1E7  F060         	movff	_randx,___lmul@multiplier
 34919  008B3A  C1E8  F061         	movff	_randx+1,___lmul@multiplier+1
 34920  008B3E  C1E9  F062         	movff	_randx+2,___lmul@multiplier+2
 34921  008B42  C1EA  F063         	movff	_randx+3,___lmul@multiplier+3
 34922  008B46  0E6D               	movlw	109
 34923  008B48  0100               	movlb	0	; () banked
 34924  008B4A  6F64               	movwf	___lmul@multiplicand& (0+255),b
 34925  008B4C  0E4E               	movlw	78
 34926  008B4E  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 34927  008B50  0EC6               	movlw	198
 34928  008B52  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 34929  008B54  0E41               	movlw	65
 34930  008B56  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 34931  008B58  EC51  F046         	call	___lmul	;wreg free
 34932  008B5C  C060  F1E7         	movff	?___lmul,_randx
 34933  008B60  C061  F1E8         	movff	?___lmul+1,_randx+1
 34934  008B64  C062  F1E9         	movff	?___lmul+2,_randx+2
 34935  008B68  C063  F1EA         	movff	?___lmul+3,_randx+3
 34936  008B6C  0E39               	movlw	57
 34937  008B6E  0101               	movlb	1	; () banked
 34938  008B70  27E7               	addwf	_randx& (0+255),f,b
 34939  008B72  0E30               	movlw	48
 34940  008B74  23E8               	addwfc	(_randx+1)& (0+255),f,b
 34941  008B76  0E00               	movlw	0
 34942  008B78  23E9               	addwfc	(_randx+2)& (0+255),f,b
 34943  008B7A  0E00               	movlw	0
 34944  008B7C  23EA               	addwfc	(_randx+3)& (0+255),f,b
 34945                           
 34946                           ; BSR set to: 1
 34947  008B7E  0EFF               	movlw	255
 34948  008B80  15E9               	andwf	(_randx+2)& (0+255),w,b
 34949  008B82  0100               	movlb	0	; () banked
 34950  008B84  6F6C               	movwf	?_rand& (0+255),b
 34951  008B86  0E7F               	movlw	127
 34952  008B88  0101               	movlb	1	; () banked
 34953  008B8A  15EA               	andwf	(_randx+3)& (0+255),w,b
 34954  008B8C  0100               	movlb	0	; () banked
 34955  008B8E  6F6D               	movwf	(?_rand+1)& (0+255),b
 34956  008B90  0012               	return	
 34957  008B92                     __end_of_rand:
 34958                           	opt stack 0
 34959                           tblptru	equ	0xFF8
 34960                           tblptrh	equ	0xFF7
 34961                           tblptrl	equ	0xFF6
 34962                           tablat	equ	0xFF5
 34963                           prodh	equ	0xFF4
 34964                           prodl	equ	0xFF3
 34965                           intcon	equ	0xFF2
 34966                           intcon2	equ	0xFF1
 34967                           postinc0	equ	0xFEE
 34968                           wreg	equ	0xFE8
 34969                           indf1	equ	0xFE7
 34970                           postdec1	equ	0xFE5
 34971                           fsr1h	equ	0xFE2
 34972                           fsr1l	equ	0xFE1
 34973                           indf2	equ	0xFDF
 34974                           postinc2	equ	0xFDE
 34975                           plusw2	equ	0xFDB
 34976                           fsr2h	equ	0xFDA
 34977                           fsr2l	equ	0xFD9
 34978                           status	equ	0xFD8
 34979                           
 34980 ;; *************** function ___awmod *****************
 34981 ;; Defined at:
 34982 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 34983 ;; Parameters:    Size  Location     Type
 34984 ;;  dividend        2   14[BANK0 ] int 
 34985 ;;  divisor         2   16[BANK0 ] int 
 34986 ;; Auto vars:     Size  Location     Type
 34987 ;;  sign            1   19[BANK0 ] unsigned char 
 34988 ;;  counter         1   18[BANK0 ] unsigned char 
 34989 ;; Return value:  Size  Location     Type
 34990 ;;                  2   14[BANK0 ] int 
 34991 ;; Registers used:
 34992 ;;		wreg, status,2, status,0
 34993 ;; Tracked objects:
 34994 ;;		On entry : 0/0
 34995 ;;		On exit  : 0/0
 34996 ;;		Unchanged: 0/0
 34997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34998 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34999 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35001 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35002 ;;Total ram usage:        6 bytes
 35003 ;; Hardware stack levels used:    1
 35004 ;; Hardware stack levels required when called:    5
 35005 ;; This function calls:
 35006 ;;		Nothing
 35007 ;; This function is called by:
 35008 ;;		_processOctave
 35009 ;;		_int2string
 35010 ;;		_random_pitches
 35011 ;;		_random_pitches_non_repeating
 35012 ;; This function uses a non-reentrant model
 35013 ;;
 35014                           
 35015                           	psect	text101
 35016  00853C                     __ptext101:
 35017                           	opt stack 0
 35018  00853C                     ___awmod:
 35019                           	opt stack 16
 35020                           
 35021                           ; BSR set to: 0
 35022                           ;incstack = 0
 35023  00853C  0E00               	movlw	0
 35024  00853E  0100               	movlb	0	; () banked
 35025  008540  6F73               	movwf	___awmod@sign& (0+255),b
 35026                           
 35027                           ; BSR set to: 0
 35028  008542  AF6F               	btfss	(___awmod@dividend+1)& (0+255),7,b
 35029  008544  D006               	goto	l5608
 35030                           
 35031                           ; BSR set to: 0
 35032  008546  6D6E               	negf	___awmod@dividend& (0+255),b
 35033  008548  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
 35034  00854A  B0D8               	btfsc	status,0,c
 35035  00854C  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
 35036                           
 35037                           ; BSR set to: 0
 35038  00854E  0E01               	movlw	1
 35039  008550  6F73               	movwf	___awmod@sign& (0+255),b
 35040  008552                     l5608:
 35041                           
 35042                           ; BSR set to: 0
 35043                           
 35044                           ; BSR set to: 0
 35045  008552  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
 35046  008554  D004               	goto	l5609
 35047                           
 35048                           ; BSR set to: 0
 35049  008556  6D70               	negf	___awmod@divisor& (0+255),b
 35050  008558  1F71               	comf	(___awmod@divisor+1)& (0+255),f,b
 35051  00855A  B0D8               	btfsc	status,0,c
 35052  00855C  2B71               	incf	(___awmod@divisor+1)& (0+255),f,b
 35053  00855E                     l5609:
 35054                           
 35055                           ; BSR set to: 0
 35056                           
 35057                           ; BSR set to: 0
 35058  00855E  5170               	movf	___awmod@divisor& (0+255),w,b
 35059  008560  1171               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 35060  008562  B4D8               	btfsc	status,2,c
 35061  008564  D018               	goto	l5616
 35062                           
 35063                           ; BSR set to: 0
 35064  008566  0E01               	movlw	1
 35065  008568  6F72               	movwf	___awmod@counter& (0+255),b
 35066  00856A  D004               	goto	l5611
 35067  00856C                     
 35068                           ; BSR set to: 0
 35069                           
 35070                           ; BSR set to: 0
 35071  00856C  90D8               	bcf	status,0,c
 35072  00856E  3770               	rlcf	___awmod@divisor& (0+255),f,b
 35073  008570  3771               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 35074  008572  2B72               	incf	___awmod@counter& (0+255),f,b
 35075  008574                     l5611:
 35076                           
 35077                           ; BSR set to: 0
 35078                           
 35079                           ; BSR set to: 0
 35080  008574  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
 35081  008576  D7FA               	goto	l5612
 35082  008578                     u22490:
 35083                           
 35084                           ; BSR set to: 0
 35085                           
 35086                           ; BSR set to: 0
 35087                           
 35088                           ; BSR set to: 0
 35089  008578  5170               	movf	___awmod@divisor& (0+255),w,b
 35090  00857A  5D6E               	subwf	___awmod@dividend& (0+255),w,b
 35091  00857C  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
 35092  00857E  596F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 35093  008580  A0D8               	btfss	status,0,c
 35094  008582  D004               	goto	l5615
 35095                           
 35096                           ; BSR set to: 0
 35097  008584  5170               	movf	___awmod@divisor& (0+255),w,b
 35098  008586  5F6E               	subwf	___awmod@dividend& (0+255),f,b
 35099  008588  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
 35100  00858A  5B6F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 35101  00858C                     l5615:
 35102                           
 35103                           ; BSR set to: 0
 35104                           
 35105                           ; BSR set to: 0
 35106  00858C  90D8               	bcf	status,0,c
 35107  00858E  3371               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 35108  008590  3370               	rrcf	___awmod@divisor& (0+255),f,b
 35109                           
 35110                           ; BSR set to: 0
 35111  008592  2F72               	decfsz	___awmod@counter& (0+255),f,b
 35112  008594  D7F1               	goto	u22490
 35113  008596                     l5616:
 35114                           
 35115                           ; BSR set to: 0
 35116                           
 35117                           ; BSR set to: 0
 35118                           
 35119                           ; BSR set to: 0
 35120  008596  5173               	movf	___awmod@sign& (0+255),w,b
 35121  008598  B4D8               	btfsc	status,2,c
 35122  00859A  D004               	goto	l5617
 35123                           
 35124                           ; BSR set to: 0
 35125  00859C  6D6E               	negf	___awmod@dividend& (0+255),b
 35126  00859E  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
 35127  0085A0  B0D8               	btfsc	status,0,c
 35128  0085A2  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
 35129  0085A4                     l5617:
 35130                           
 35131                           ; BSR set to: 0
 35132                           
 35133                           ; BSR set to: 0
 35134  0085A4  C06E  F06E         	movff	___awmod@dividend,?___awmod
 35135  0085A8  C06F  F06F         	movff	___awmod@dividend+1,?___awmod+1
 35136  0085AC  0012               	return	
 35137  0085AE                     __end_of___awmod:
 35138                           	opt stack 0
 35139                           tblptru	equ	0xFF8
 35140                           tblptrh	equ	0xFF7
 35141                           tblptrl	equ	0xFF6
 35142                           tablat	equ	0xFF5
 35143                           prodh	equ	0xFF4
 35144                           prodl	equ	0xFF3
 35145                           intcon	equ	0xFF2
 35146                           intcon2	equ	0xFF1
 35147                           postinc0	equ	0xFEE
 35148                           wreg	equ	0xFE8
 35149                           indf1	equ	0xFE7
 35150                           postdec1	equ	0xFE5
 35151                           fsr1h	equ	0xFE2
 35152                           fsr1l	equ	0xFE1
 35153                           indf2	equ	0xFDF
 35154                           postinc2	equ	0xFDE
 35155                           plusw2	equ	0xFDB
 35156                           fsr2h	equ	0xFDA
 35157                           fsr2l	equ	0xFD9
 35158                           status	equ	0xFD8
 35159                           
 35160 ;; *************** function _copy_array *****************
 35161 ;; Defined at:
 35162 ;;		line 208 in file "arpeggio.c"
 35163 ;; Parameters:    Size  Location     Type
 35164 ;;		None
 35165 ;; Auto vars:     Size  Location     Type
 35166 ;;  i               1    0[BANK0 ] unsigned char 
 35167 ;; Return value:  Size  Location     Type
 35168 ;;                  1    wreg      void 
 35169 ;; Registers used:
 35170 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 35171 ;; Tracked objects:
 35172 ;;		On entry : 0/0
 35173 ;;		On exit  : 0/0
 35174 ;;		Unchanged: 0/0
 35175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35179 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35180 ;;Total ram usage:        1 bytes
 35181 ;; Hardware stack levels used:    1
 35182 ;; Hardware stack levels required when called:    5
 35183 ;; This function calls:
 35184 ;;		Nothing
 35185 ;; This function is called by:
 35186 ;;		_setupArpeggio
 35187 ;; This function uses a non-reentrant model
 35188 ;;
 35189                           
 35190                           	psect	text102
 35191  008900                     __ptext102:
 35192                           	opt stack 0
 35193  008900                     _copy_array:
 35194                           	opt stack 17
 35195                           
 35196                           ;arpeggio.c: 210: if(NUM_NOTES_PRESSED == 0){return;}
 35197                           
 35198                           ; BSR set to: 0
 35199                           ;incstack = 0
 35200  008900  0100               	movlb	0	; () banked
 35201  008902  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35202  008904  B4D8               	btfsc	status,2,c
 35203  008906  0012               	return	
 35204                           
 35205                           ; BSR set to: 0
 35206                           ;arpeggio.c: 213: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 35207                           
 35208                           ; BSR set to: 0
 35209                           
 35210                           ; BSR set to: 0
 35211  008908  0E00               	movlw	0
 35212  00890A  6F60               	movwf	copy_array@i& (0+255),b
 35213  00890C  D025               	goto	l5257
 35214  00890E                     
 35215                           ; BSR set to: 0
 35216                           ;arpeggio.c: 214: ARPEGGIO_SORTED[i] = ARPEGGIO[i];
 35217                           
 35218                           ; BSR set to: 0
 35219  00890E  5160               	movf	copy_array@i& (0+255),w,b
 35220  008910  0D01               	mullw	1
 35221  008912  0E72               	movlw	low _ARPEGGIO
 35222  008914  24F3               	addwf	prodl,w,c
 35223  008916  6ED9               	movwf	fsr2l,c
 35224  008918  0E01               	movlw	high _ARPEGGIO
 35225  00891A  20F4               	addwfc	prodh,w,c
 35226  00891C  6EDA               	movwf	fsr2h,c
 35227  00891E  5160               	movf	copy_array@i& (0+255),w,b
 35228  008920  0D01               	mullw	1
 35229  008922  0E9C               	movlw	low _ARPEGGIO_SORTED
 35230  008924  24F3               	addwf	prodl,w,c
 35231  008926  6EE1               	movwf	fsr1l,c
 35232  008928  0E02               	movlw	high _ARPEGGIO_SORTED
 35233  00892A  20F4               	addwfc	prodh,w,c
 35234  00892C  6EE2               	movwf	fsr1h,c
 35235  00892E  CFDF FFE7          	movff	indf2,indf1
 35236                           
 35237                           ;arpeggio.c: 215: ARPEGGIO_RANDOM[i] = ARPEGGIO[i];
 35238  008932  5160               	movf	copy_array@i& (0+255),w,b
 35239  008934  0D01               	mullw	1
 35240  008936  0E72               	movlw	low _ARPEGGIO
 35241  008938  24F3               	addwf	prodl,w,c
 35242  00893A  6ED9               	movwf	fsr2l,c
 35243  00893C  0E01               	movlw	high _ARPEGGIO
 35244  00893E  20F4               	addwfc	prodh,w,c
 35245  008940  6EDA               	movwf	fsr2h,c
 35246  008942  5160               	movf	copy_array@i& (0+255),w,b
 35247  008944  0D01               	mullw	1
 35248  008946  0E8C               	movlw	low _ARPEGGIO_RANDOM
 35249  008948  24F3               	addwf	prodl,w,c
 35250  00894A  6EE1               	movwf	fsr1l,c
 35251  00894C  0E02               	movlw	high _ARPEGGIO_RANDOM
 35252  00894E  20F4               	addwfc	prodh,w,c
 35253  008950  6EE2               	movwf	fsr1h,c
 35254  008952  CFDF FFE7          	movff	indf2,indf1
 35255                           
 35256                           ; BSR set to: 0
 35257  008956  2B60               	incf	copy_array@i& (0+255),f,b
 35258  008958                     l5257:
 35259                           
 35260                           ; BSR set to: 0
 35261                           
 35262                           ; BSR set to: 0
 35263  008958  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35264  00895A  5D60               	subwf	copy_array@i& (0+255),w,b
 35265  00895C  B0D8               	btfsc	status,0,c
 35266  00895E  0012               	return	
 35267  008960  D7D6               	goto	l5258
 35268  008962                     __end_of_copy_array:
 35269                           	opt stack 0
 35270                           tblptru	equ	0xFF8
 35271                           tblptrh	equ	0xFF7
 35272                           tblptrl	equ	0xFF6
 35273                           tablat	equ	0xFF5
 35274                           prodh	equ	0xFF4
 35275                           prodl	equ	0xFF3
 35276                           intcon	equ	0xFF2
 35277                           intcon2	equ	0xFF1
 35278                           postinc0	equ	0xFEE
 35279                           wreg	equ	0xFE8
 35280                           indf1	equ	0xFE7
 35281                           postdec1	equ	0xFE5
 35282                           fsr1h	equ	0xFE2
 35283                           fsr1l	equ	0xFE1
 35284                           indf2	equ	0xFDF
 35285                           postinc2	equ	0xFDE
 35286                           plusw2	equ	0xFDB
 35287                           fsr2h	equ	0xFDA
 35288                           fsr2l	equ	0xFD9
 35289                           status	equ	0xFD8
 35290                           
 35291 ;; *************** function _resetArpeggio *****************
 35292 ;; Defined at:
 35293 ;;		line 160 in file "arpeggio.c"
 35294 ;; Parameters:    Size  Location     Type
 35295 ;;		None
 35296 ;; Auto vars:     Size  Location     Type
 35297 ;;		None
 35298 ;; Return value:  Size  Location     Type
 35299 ;;                  1    wreg      void 
 35300 ;; Registers used:
 35301 ;;		wreg, status,2, status,0
 35302 ;; Tracked objects:
 35303 ;;		On entry : 0/0
 35304 ;;		On exit  : 0/0
 35305 ;;		Unchanged: 0/0
 35306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35311 ;;Total ram usage:        0 bytes
 35312 ;; Hardware stack levels used:    1
 35313 ;; Hardware stack levels required when called:    5
 35314 ;; This function calls:
 35315 ;;		Nothing
 35316 ;; This function is called by:
 35317 ;;		_processOctave
 35318 ;;		_finish_arpeggio_setup
 35319 ;; This function uses a non-reentrant model
 35320 ;;
 35321                           
 35322                           	psect	text103
 35323  009140                     __ptext103:
 35324                           	opt stack 0
 35325  009140                     _resetArpeggio:
 35326                           	opt stack 18
 35327                           
 35328                           ;arpeggio.c: 162: which_note = 0;
 35329                           
 35330                           ; BSR set to: 0
 35331                           ;incstack = 0
 35332  009140  0E00               	movlw	0
 35333  009142  6E57               	movwf	_which_note,c
 35334                           
 35335                           ;arpeggio.c: 163: which_octave = 0;
 35336  009144  0E00               	movlw	0
 35337  009146  6E56               	movwf	_which_octave,c
 35338                           
 35339                           ;arpeggio.c: 164: last_note = 0;
 35340  009148  0E00               	movlw	0
 35341  00914A  0100               	movlb	0	; () banked
 35342  00914C  6FE8               	movwf	_last_note& (0+255),b
 35343                           
 35344                           ;arpeggio.c: 165: last_octave = 0;
 35345  00914E  0E00               	movlw	0
 35346  009150  6E55               	movwf	_last_octave,c
 35347                           
 35348                           ; BSR set to: 0
 35349                           ;arpeggio.c: 166: overflow = 0;
 35350  009152  9633               	bcf	_overflow/(0+8),_overflow& (0+7),c
 35351                           
 35352                           ; BSR set to: 0
 35353                           ;arpeggio.c: 167: octave_overflow = 0;
 35354  009154  9433               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 35355                           
 35356                           ; BSR set to: 0
 35357                           ;arpeggio.c: 170: if(ARPEGGIO_TYPE == UP_DOWN && startingDirection == DOWN){
 35358  009156  0E02               	movlw	2
 35359  009158  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 35360  00915A  A4D8               	btfss	status,2,c
 35361  00915C  D005               	goto	l5234
 35362                           
 35363                           ; BSR set to: 0
 35364  00915E  05E9               	decf	_startingDirection& (0+255),w,b
 35365  009160  A4D8               	btfss	status,2,c
 35366  009162  D002               	goto	l5234
 35367                           
 35368                           ; BSR set to: 0
 35369                           ;arpeggio.c: 171: ARPEGGIO_TYPE = DOWN_UP;
 35370  009164  0E03               	movlw	3
 35371  009166  6FEA               	movwf	_ARPEGGIO_TYPE& (0+255),b
 35372  009168                     l5234:
 35373                           
 35374                           ; BSR set to: 0
 35375                           ;arpeggio.c: 172: }
 35376                           ;arpeggio.c: 174: if(ARPEGGIO_TYPE == DOWN_UP && startingDirection == UP){
 35377                           
 35378                           ; BSR set to: 0
 35379  009168  0E03               	movlw	3
 35380  00916A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 35381  00916C  A4D8               	btfss	status,2,c
 35382  00916E  0012               	return	
 35383                           
 35384                           ; BSR set to: 0
 35385  009170  51E9               	movf	_startingDirection& (0+255),w,b
 35386  009172  A4D8               	btfss	status,2,c
 35387  009174  0012               	return	
 35388                           
 35389                           ; BSR set to: 0
 35390                           ;arpeggio.c: 175: ARPEGGIO_TYPE = UP_DOWN;
 35391  009176  0E02               	movlw	2
 35392  009178  6FEA               	movwf	_ARPEGGIO_TYPE& (0+255),b
 35393  00917A  0012               	return	
 35394  00917C                     __end_of_resetArpeggio:
 35395                           	opt stack 0
 35396                           tblptru	equ	0xFF8
 35397                           tblptrh	equ	0xFF7
 35398                           tblptrl	equ	0xFF6
 35399                           tablat	equ	0xFF5
 35400                           prodh	equ	0xFF4
 35401                           prodl	equ	0xFF3
 35402                           intcon	equ	0xFF2
 35403                           intcon2	equ	0xFF1
 35404                           postinc0	equ	0xFEE
 35405                           wreg	equ	0xFE8
 35406                           indf1	equ	0xFE7
 35407                           postdec1	equ	0xFE5
 35408                           fsr1h	equ	0xFE2
 35409                           fsr1l	equ	0xFE1
 35410                           indf2	equ	0xFDF
 35411                           postinc2	equ	0xFDE
 35412                           plusw2	equ	0xFDB
 35413                           fsr2h	equ	0xFDA
 35414                           fsr2l	equ	0xFD9
 35415                           status	equ	0xFD8
 35416                           
 35417 ;; *************** function _delete_notes_from_arpeggio *****************
 35418 ;; Defined at:
 35419 ;;		line 63 in file "arpeggio.c"
 35420 ;; Parameters:    Size  Location     Type
 35421 ;;  pitch           1    wreg     unsigned char 
 35422 ;; Auto vars:     Size  Location     Type
 35423 ;;  pitch           1    9[BANK0 ] unsigned char 
 35424 ;;  INDEX_TO_SHI    1   10[BANK0 ] char 
 35425 ;; Return value:  Size  Location     Type
 35426 ;;                  1    wreg      void 
 35427 ;; Registers used:
 35428 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35429 ;; Tracked objects:
 35430 ;;		On entry : 0/0
 35431 ;;		On exit  : 0/0
 35432 ;;		Unchanged: 0/0
 35433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35435 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35438 ;;Total ram usage:        2 bytes
 35439 ;; Hardware stack levels used:    1
 35440 ;; Hardware stack levels required when called:    6
 35441 ;; This function calls:
 35442 ;;		_findArrayIndex
 35443 ;;		_rotateArrayLeft
 35444 ;; This function is called by:
 35445 ;;		_playThisNotePentatonic
 35446 ;;		_playThisNote
 35447 ;;		_playThisNote8
 35448 ;; This function uses a non-reentrant model
 35449 ;;
 35450                           
 35451                           	psect	text104
 35452  0092FE                     __ptext104:
 35453                           	opt stack 0
 35454  0092FE                     _delete_notes_from_arpeggio:
 35455                           	opt stack 18
 35456                           
 35457                           ; BSR set to: 0
 35458                           ;incstack = 0
 35459                           ;delete_notes_from_arpeggio@pitch stored from wreg
 35460  0092FE  0100               	movlb	0	; () banked
 35461  009300  6F69               	movwf	delete_notes_from_arpeggio@pitch& (0+255),b
 35462                           
 35463                           ;arpeggio.c: 66: signed char INDEX_TO_SHIFT_LEFT_AT = findArrayIndex(pitch);
 35464  009302  0100               	movlb	0	; () banked
 35465  009304  5169               	movf	delete_notes_from_arpeggio@pitch& (0+255),w,b
 35466  009306  ECBE  F048         	call	_findArrayIndex
 35467  00930A  0100               	movlb	0	; () banked
 35468  00930C  6F6A               	movwf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),b
 35469                           
 35470                           ; BSR set to: 0
 35471                           ;arpeggio.c: 77: rotateArrayLeft(INDEX_TO_SHIFT_LEFT_AT);
 35472  00930E  516A               	movf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),w,b
 35473  009310  ECF0  F041         	call	_rotateArrayLeft
 35474                           
 35475                           ;arpeggio.c: 80: if(NUM_NOTES_PRESSED > 0) {NUM_NOTES_PRESSED--;}
 35476  009314  0100               	movlb	0	; () banked
 35477  009316  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35478  009318  A4D8               	btfss	status,2,c
 35479                           
 35480                           ; BSR set to: 0
 35481  00931A  07E5               	decf	_NUM_NOTES_PRESSED& (0+255),f,b
 35482                           
 35483                           ; BSR set to: 0
 35484                           ;arpeggio.c: 85: if(NUM_NOTES_PRESSED == 0) {ARRAY_INDEX = 0;}
 35485                           
 35486                           ; BSR set to: 0
 35487  00931C  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35488  00931E  A4D8               	btfss	status,2,c
 35489  009320  D002               	goto	l5204
 35490                           
 35491                           ; BSR set to: 0
 35492  009322  0E00               	movlw	0
 35493  009324  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 35494  009326                     l5204:
 35495                           
 35496                           ; BSR set to: 0
 35497                           ;arpeggio.c: 88: if(ARRAY_INDEX > 0){ARRAY_INDEX--;}
 35498  009326  51E4               	movf	_ARRAY_INDEX& (0+255),w,b
 35499  009328  B4D8               	btfsc	status,2,c
 35500  00932A  0012               	return	
 35501                           
 35502                           ; BSR set to: 0
 35503  00932C  07E4               	decf	_ARRAY_INDEX& (0+255),f,b
 35504  00932E  0012               	return	
 35505  009330                     __end_of_delete_notes_from_arpeggio:
 35506                           	opt stack 0
 35507                           tblptru	equ	0xFF8
 35508                           tblptrh	equ	0xFF7
 35509                           tblptrl	equ	0xFF6
 35510                           tablat	equ	0xFF5
 35511                           prodh	equ	0xFF4
 35512                           prodl	equ	0xFF3
 35513                           intcon	equ	0xFF2
 35514                           intcon2	equ	0xFF1
 35515                           postinc0	equ	0xFEE
 35516                           wreg	equ	0xFE8
 35517                           indf1	equ	0xFE7
 35518                           postdec1	equ	0xFE5
 35519                           fsr1h	equ	0xFE2
 35520                           fsr1l	equ	0xFE1
 35521                           indf2	equ	0xFDF
 35522                           postinc2	equ	0xFDE
 35523                           plusw2	equ	0xFDB
 35524                           fsr2h	equ	0xFDA
 35525                           fsr2l	equ	0xFD9
 35526                           status	equ	0xFD8
 35527                           
 35528 ;; *************** function _findArrayIndex *****************
 35529 ;; Defined at:
 35530 ;;		line 514 in file "arpeggio.c"
 35531 ;; Parameters:    Size  Location     Type
 35532 ;;  pitch_of_key    1    wreg     unsigned char 
 35533 ;; Auto vars:     Size  Location     Type
 35534 ;;  pitch_of_key    1    1[BANK0 ] unsigned char 
 35535 ;;  i               1    2[BANK0 ] unsigned char 
 35536 ;; Return value:  Size  Location     Type
 35537 ;;                  1    wreg      char 
 35538 ;; Registers used:
 35539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 35540 ;; Tracked objects:
 35541 ;;		On entry : 0/0
 35542 ;;		On exit  : 0/0
 35543 ;;		Unchanged: 0/0
 35544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35546 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35548 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35549 ;;Total ram usage:        3 bytes
 35550 ;; Hardware stack levels used:    1
 35551 ;; Hardware stack levels required when called:    5
 35552 ;; This function calls:
 35553 ;;		Nothing
 35554 ;; This function is called by:
 35555 ;;		_delete_notes_from_arpeggio
 35556 ;; This function uses a non-reentrant model
 35557 ;;
 35558                           
 35559                           	psect	text105
 35560  00917C                     __ptext105:
 35561                           	opt stack 0
 35562  00917C                     _findArrayIndex:
 35563                           	opt stack 18
 35564                           
 35565                           ; BSR set to: 0
 35566                           ;incstack = 0
 35567                           ;findArrayIndex@pitch_of_key_release stored from wreg
 35568  00917C  0100               	movlb	0	; () banked
 35569  00917E  6F61               	movwf	findArrayIndex@pitch_of_key_release& (0+255),b
 35570                           
 35571                           ;arpeggio.c: 516: for (unsigned char i=0;i<MAX_NUM_NOTES;i++){
 35572  009180  0E00               	movlw	0
 35573  009182  0100               	movlb	0	; () banked
 35574  009184  6F62               	movwf	findArrayIndex@i& (0+255),b
 35575  009186                     l16399:
 35576                           
 35577                           ; BSR set to: 0
 35578  009186  0E9D               	movlw	low _MAX_NUM_NOTES
 35579  009188  6EF6               	movwf	tblptrl,c
 35580  00918A                     	if	1	;There is more than 1 active tblptr byte
 35581  00918A  0EF3               	movlw	high _MAX_NUM_NOTES
 35582  00918C  6EF7               	movwf	tblptrh,c
 35583  00918E                     	endif
 35584  00918E                     	if	0	;There are less than 3 active tblptr bytes
 35585  00918E                     	endif
 35586  00918E  0009               	tblrd		*+
 35587  009190  50F5               	movf	tablat,w,c
 35588  009192  5D62               	subwf	findArrayIndex@i& (0+255),w,b
 35589  009194  B0D8               	btfsc	status,0,c
 35590  009196  0012               	return	
 35591                           
 35592                           ; BSR set to: 0
 35593                           ;arpeggio.c: 517: if(ARPEGGIO[i] == pitch_of_key_release){return i;}
 35594                           
 35595                           ; BSR set to: 0
 35596                           
 35597                           ; BSR set to: 0
 35598  009198  5162               	movf	findArrayIndex@i& (0+255),w,b
 35599  00919A  0D01               	mullw	1
 35600  00919C  0E72               	movlw	low _ARPEGGIO
 35601  00919E  24F3               	addwf	prodl,w,c
 35602  0091A0  6ED9               	movwf	fsr2l,c
 35603  0091A2  0E01               	movlw	high _ARPEGGIO
 35604  0091A4  20F4               	addwfc	prodh,w,c
 35605  0091A6  6EDA               	movwf	fsr2h,c
 35606  0091A8  5161               	movf	findArrayIndex@pitch_of_key_release& (0+255),w,b
 35607  0091AA  18DE               	xorwf	postinc2,w,c
 35608  0091AC  A4D8               	btfss	status,2,c
 35609  0091AE  D002               	goto	l16409
 35610                           
 35611                           ; BSR set to: 0
 35612  0091B0  5162               	movf	findArrayIndex@i& (0+255),w,b
 35613                           
 35614                           ; BSR set to: 0
 35615  0091B2  0012               	return	
 35616  0091B4                     l16409:
 35617                           
 35618                           ; BSR set to: 0
 35619                           
 35620                           ; BSR set to: 0
 35621                           
 35622                           ;arpeggio.c: 518: else{;}
 35623                           
 35624                           ; BSR set to: 0
 35625                           
 35626                           ; BSR set to: 0
 35627  0091B4  2B62               	incf	findArrayIndex@i& (0+255),f,b
 35628  0091B6  D7E7               	goto	l16399
 35629  0091B8                     __end_of_findArrayIndex:
 35630                           	opt stack 0
 35631                           tblptru	equ	0xFF8
 35632                           tblptrh	equ	0xFF7
 35633                           tblptrl	equ	0xFF6
 35634                           tablat	equ	0xFF5
 35635                           prodh	equ	0xFF4
 35636                           prodl	equ	0xFF3
 35637                           intcon	equ	0xFF2
 35638                           intcon2	equ	0xFF1
 35639                           postinc0	equ	0xFEE
 35640                           wreg	equ	0xFE8
 35641                           indf1	equ	0xFE7
 35642                           postdec1	equ	0xFE5
 35643                           fsr1h	equ	0xFE2
 35644                           fsr1l	equ	0xFE1
 35645                           indf2	equ	0xFDF
 35646                           postinc2	equ	0xFDE
 35647                           plusw2	equ	0xFDB
 35648                           fsr2h	equ	0xFDA
 35649                           fsr2l	equ	0xFD9
 35650                           status	equ	0xFD8
 35651                           
 35652 ;; *************** function _add_notes_to_arpeggio *****************
 35653 ;; Defined at:
 35654 ;;		line 39 in file "arpeggio.c"
 35655 ;; Parameters:    Size  Location     Type
 35656 ;;  pitch           1    wreg     unsigned char 
 35657 ;; Auto vars:     Size  Location     Type
 35658 ;;  pitch           1   16[BANK0 ] unsigned char 
 35659 ;; Return value:  Size  Location     Type
 35660 ;;                  1    wreg      void 
 35661 ;; Registers used:
 35662 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35663 ;; Tracked objects:
 35664 ;;		On entry : 0/0
 35665 ;;		On exit  : 0/0
 35666 ;;		Unchanged: 0/0
 35667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35670 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35671 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35672 ;;Total ram usage:        8 bytes
 35673 ;; Hardware stack levels used:    1
 35674 ;; Hardware stack levels required when called:    6
 35675 ;; This function calls:
 35676 ;;		_rotateArrayLeft
 35677 ;; This function is called by:
 35678 ;;		_playThisNotePentatonic
 35679 ;;		_playThisNote
 35680 ;;		_playThisNote8
 35681 ;; This function uses a non-reentrant model
 35682 ;;
 35683                           
 35684                           	psect	text106
 35685  00651E                     __ptext106:
 35686                           	opt stack 0
 35687  00651E                     _add_notes_to_arpeggio:
 35688                           	opt stack 18
 35689                           
 35690                           ; BSR set to: 0
 35691                           ;incstack = 0
 35692                           ;add_notes_to_arpeggio@pitch stored from wreg
 35693  00651E  0100               	movlb	0	; () banked
 35694  006520  6F70               	movwf	add_notes_to_arpeggio@pitch& (0+255),b
 35695                           
 35696                           ;arpeggio.c: 43: if(ARRAY_INDEX > (MAX_NUM_NOTES - 1)){
 35697  006522  0100               	movlb	0	; () banked
 35698  006524  51E4               	movf	_ARRAY_INDEX& (0+255),w,b
 35699  006526  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 35700  006528  6B6A               	clrf	(??_add_notes_to_arpeggio+1)& (0+255),b
 35701  00652A  0EFF               	movlw	255
 35702  00652C  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 35703  00652E  0EFF               	movlw	255
 35704  006530  6F6C               	movwf	(??_add_notes_to_arpeggio+3)& (0+255),b
 35705  006532  0E9D               	movlw	low _MAX_NUM_NOTES
 35706  006534  6EF6               	movwf	tblptrl,c
 35707  006536                     	if	1	;There is more than 1 active tblptr byte
 35708  006536  0EF3               	movlw	high _MAX_NUM_NOTES
 35709  006538  6EF7               	movwf	tblptrh,c
 35710  00653A                     	endif
 35711  00653A                     	if	0	;There are less than 3 active tblptr bytes
 35712  00653A                     	endif
 35713  00653A  0008               	tblrd		*
 35714  00653C  50F5               	movf	tablat,w,c
 35715  00653E  6F6D               	movwf	(??_add_notes_to_arpeggio+4)& (0+255),b
 35716  006540  6B6E               	clrf	(??_add_notes_to_arpeggio+5)& (0+255),b
 35717  006542  516B               	movf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 35718  006544  276D               	addwf	(??_add_notes_to_arpeggio+4)& (0+255),f,b
 35719  006546  516C               	movf	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 35720  006548  236E               	addwfc	(??_add_notes_to_arpeggio+5)& (0+255),f,b
 35721  00654A  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 35722  00654C  5D6D               	subwf	(??_add_notes_to_arpeggio+4)& (0+255),w,b
 35723  00654E  516E               	movf	(??_add_notes_to_arpeggio+5)& (0+255),w,b
 35724  006550  0A80               	xorlw	128
 35725  006552  6F6F               	movwf	(??_add_notes_to_arpeggio+6)& (0+255),b
 35726  006554  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 35727  006556  0A80               	xorlw	128
 35728  006558  596F               	subwfb	(??_add_notes_to_arpeggio+6)& (0+255),w,b
 35729  00655A  B0D8               	btfsc	status,0,c
 35730  00655C  D025               	goto	l5197
 35731                           
 35732                           ; BSR set to: 0
 35733                           ;arpeggio.c: 44: ARRAY_INDEX = MAX_NUM_NOTES - 1;
 35734  00655E  0E9D               	movlw	low _MAX_NUM_NOTES
 35735  006560  6EF6               	movwf	tblptrl,c
 35736  006562                     	if	1	;There is more than 1 active tblptr byte
 35737  006562  0EF3               	movlw	high _MAX_NUM_NOTES
 35738  006564  6EF7               	movwf	tblptrh,c
 35739  006566                     	endif
 35740  006566                     	if	0	;There are less than 3 active tblptr bytes
 35741  006566                     	endif
 35742  006566  0008               	tblrd		*
 35743  006568  CFF5 F069          	movff	tablat,??_add_notes_to_arpeggio
 35744  00656C  0569               	decf	??_add_notes_to_arpeggio& (0+255),w,b
 35745  00656E  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 35746                           
 35747                           ; BSR set to: 0
 35748                           ;arpeggio.c: 45: rotateArrayLeft(0);
 35749  006570  0E00               	movlw	0
 35750  006572  ECF0  F041         	call	_rotateArrayLeft
 35751                           
 35752                           ;arpeggio.c: 46: ARPEGGIO[MAX_NUM_NOTES - 1] = pitch;
 35753  006576  0EFF               	movlw	255
 35754  006578  0100               	movlb	0	; () banked
 35755  00657A  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 35756  00657C  0EFF               	movlw	255
 35757  00657E  6F6A               	movwf	(??_add_notes_to_arpeggio+1)& (0+255),b
 35758  006580  0E9D               	movlw	low _MAX_NUM_NOTES
 35759  006582  6EF6               	movwf	tblptrl,c
 35760  006584                     	if	1	;There is more than 1 active tblptr byte
 35761  006584  0EF3               	movlw	high _MAX_NUM_NOTES
 35762  006586  6EF7               	movwf	tblptrh,c
 35763  006588                     	endif
 35764  006588                     	if	0	;There are less than 3 active tblptr bytes
 35765  006588                     	endif
 35766  006588  0008               	tblrd		*
 35767  00658A  50F5               	movf	tablat,w,c
 35768  00658C  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 35769  00658E  6B6C               	clrf	(??_add_notes_to_arpeggio+3)& (0+255),b
 35770  006590  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 35771  006592  276B               	addwf	(??_add_notes_to_arpeggio+2)& (0+255),f,b
 35772  006594  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 35773  006596  236C               	addwfc	(??_add_notes_to_arpeggio+3)& (0+255),f,b
 35774  006598  0E72               	movlw	low _ARPEGGIO
 35775  00659A  256B               	addwf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 35776  00659C  6ED9               	movwf	fsr2l,c
 35777  00659E  0E01               	movlw	high _ARPEGGIO
 35778  0065A0  216C               	addwfc	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 35779  0065A2  6EDA               	movwf	fsr2h,c
 35780  0065A4  C070  FFDF         	movff	add_notes_to_arpeggio@pitch,indf2
 35781  0065A8                     l5197:
 35782                           
 35783                           ; BSR set to: 0
 35784                           ;arpeggio.c: 47: }
 35785                           ;arpeggio.c: 49: if(ARRAY_INDEX <= (MAX_NUM_NOTES - 1)){
 35786                           
 35787                           ; BSR set to: 0
 35788  0065A8  51E4               	movf	_ARRAY_INDEX& (0+255),w,b
 35789  0065AA  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 35790  0065AC  6B6A               	clrf	(??_add_notes_to_arpeggio+1)& (0+255),b
 35791  0065AE  0EFF               	movlw	255
 35792  0065B0  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 35793  0065B2  0EFF               	movlw	255
 35794  0065B4  6F6C               	movwf	(??_add_notes_to_arpeggio+3)& (0+255),b
 35795  0065B6  0E9D               	movlw	low _MAX_NUM_NOTES
 35796  0065B8  6EF6               	movwf	tblptrl,c
 35797  0065BA                     	if	1	;There is more than 1 active tblptr byte
 35798  0065BA  0EF3               	movlw	high _MAX_NUM_NOTES
 35799  0065BC  6EF7               	movwf	tblptrh,c
 35800  0065BE                     	endif
 35801  0065BE                     	if	0	;There are less than 3 active tblptr bytes
 35802  0065BE                     	endif
 35803  0065BE  0008               	tblrd		*
 35804  0065C0  50F5               	movf	tablat,w,c
 35805  0065C2  6F6D               	movwf	(??_add_notes_to_arpeggio+4)& (0+255),b
 35806  0065C4  6B6E               	clrf	(??_add_notes_to_arpeggio+5)& (0+255),b
 35807  0065C6  516B               	movf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 35808  0065C8  276D               	addwf	(??_add_notes_to_arpeggio+4)& (0+255),f,b
 35809  0065CA  516C               	movf	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 35810  0065CC  236E               	addwfc	(??_add_notes_to_arpeggio+5)& (0+255),f,b
 35811  0065CE  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 35812  0065D0  5D6D               	subwf	(??_add_notes_to_arpeggio+4)& (0+255),w,b
 35813  0065D2  516E               	movf	(??_add_notes_to_arpeggio+5)& (0+255),w,b
 35814  0065D4  0A80               	xorlw	128
 35815  0065D6  6F6F               	movwf	(??_add_notes_to_arpeggio+6)& (0+255),b
 35816  0065D8  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 35817  0065DA  0A80               	xorlw	128
 35818  0065DC  596F               	subwfb	(??_add_notes_to_arpeggio+6)& (0+255),w,b
 35819  0065DE  A0D8               	btfss	status,0,c
 35820  0065E0  D00B               	goto	l5198
 35821                           
 35822                           ; BSR set to: 0
 35823                           ;arpeggio.c: 51: ARPEGGIO[ARRAY_INDEX] = pitch;
 35824  0065E2  51E4               	movf	_ARRAY_INDEX& (0+255),w,b
 35825  0065E4  0D01               	mullw	1
 35826  0065E6  0E72               	movlw	low _ARPEGGIO
 35827  0065E8  24F3               	addwf	prodl,w,c
 35828  0065EA  6ED9               	movwf	fsr2l,c
 35829  0065EC  0E01               	movlw	high _ARPEGGIO
 35830  0065EE  20F4               	addwfc	prodh,w,c
 35831  0065F0  6EDA               	movwf	fsr2h,c
 35832  0065F2  C070  FFDF         	movff	add_notes_to_arpeggio@pitch,indf2
 35833                           
 35834                           ; BSR set to: 0
 35835                           ;arpeggio.c: 53: ARRAY_INDEX++;
 35836  0065F6  2BE4               	incf	_ARRAY_INDEX& (0+255),f,b
 35837  0065F8                     l5198:
 35838                           
 35839                           ; BSR set to: 0
 35840                           ;arpeggio.c: 54: }
 35841                           ;arpeggio.c: 57: NUM_NOTES_PRESSED++;
 35842                           
 35843                           ; BSR set to: 0
 35844  0065F8  2BE5               	incf	_NUM_NOTES_PRESSED& (0+255),f,b
 35845                           
 35846                           ; BSR set to: 0
 35847                           ;arpeggio.c: 59: if(NUM_NOTES_PRESSED > MAX_NUM_NOTES){NUM_NOTES_PRESSED = MAX_NUM_NOTES
      +                          ;}
 35848  0065FA  0E9D               	movlw	low _MAX_NUM_NOTES
 35849  0065FC  6EF6               	movwf	tblptrl,c
 35850  0065FE                     	if	1	;There is more than 1 active tblptr byte
 35851  0065FE  0EF3               	movlw	high _MAX_NUM_NOTES
 35852  006600  6EF7               	movwf	tblptrh,c
 35853  006602                     	endif
 35854  006602                     	if	0	;There are less than 3 active tblptr bytes
 35855  006602                     	endif
 35856  006602  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35857  006604  0009               	tblrd		*+
 35858  006606  5CF5               	subwf	tablat,w,c
 35859  006608  B0D8               	btfsc	status,0,c
 35860  00660A  0012               	return	
 35861                           
 35862                           ; BSR set to: 0
 35863  00660C  0E9D               	movlw	low _MAX_NUM_NOTES
 35864  00660E  6EF6               	movwf	tblptrl,c
 35865  006610                     	if	1	;There is more than 1 active tblptr byte
 35866  006610  0EF3               	movlw	high _MAX_NUM_NOTES
 35867  006612  6EF7               	movwf	tblptrh,c
 35868  006614                     	endif
 35869  006614                     	if	0	;There are less than 3 active tblptr bytes
 35870  006614                     	endif
 35871  006614  0008               	tblrd		*
 35872  006616  CFF5 F0E5          	movff	tablat,_NUM_NOTES_PRESSED
 35873  00661A  0012               	return	
 35874  00661C                     __end_of_add_notes_to_arpeggio:
 35875                           	opt stack 0
 35876                           tblptru	equ	0xFF8
 35877                           tblptrh	equ	0xFF7
 35878                           tblptrl	equ	0xFF6
 35879                           tablat	equ	0xFF5
 35880                           prodh	equ	0xFF4
 35881                           prodl	equ	0xFF3
 35882                           intcon	equ	0xFF2
 35883                           intcon2	equ	0xFF1
 35884                           postinc0	equ	0xFEE
 35885                           wreg	equ	0xFE8
 35886                           indf1	equ	0xFE7
 35887                           postdec1	equ	0xFE5
 35888                           fsr1h	equ	0xFE2
 35889                           fsr1l	equ	0xFE1
 35890                           indf2	equ	0xFDF
 35891                           postinc2	equ	0xFDE
 35892                           plusw2	equ	0xFDB
 35893                           fsr2h	equ	0xFDA
 35894                           fsr2l	equ	0xFD9
 35895                           status	equ	0xFD8
 35896                           
 35897 ;; *************** function _rotateArrayLeft *****************
 35898 ;; Defined at:
 35899 ;;		line 582 in file "arpeggio.c"
 35900 ;; Parameters:    Size  Location     Type
 35901 ;;  array_index     1    wreg     unsigned char 
 35902 ;; Auto vars:     Size  Location     Type
 35903 ;;  array_index     1    7[BANK0 ] unsigned char 
 35904 ;;  i               1    8[BANK0 ] unsigned char 
 35905 ;; Return value:  Size  Location     Type
 35906 ;;                  1    wreg      void 
 35907 ;; Registers used:
 35908 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 35909 ;; Tracked objects:
 35910 ;;		On entry : 0/0
 35911 ;;		On exit  : 0/0
 35912 ;;		Unchanged: 0/0
 35913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35915 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35916 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35917 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35918 ;;Total ram usage:        9 bytes
 35919 ;; Hardware stack levels used:    1
 35920 ;; Hardware stack levels required when called:    5
 35921 ;; This function calls:
 35922 ;;		Nothing
 35923 ;; This function is called by:
 35924 ;;		_add_notes_to_arpeggio
 35925 ;;		_delete_notes_from_arpeggio
 35926 ;; This function uses a non-reentrant model
 35927 ;;
 35928                           
 35929                           	psect	text107
 35930  0083E0                     __ptext107:
 35931                           	opt stack 0
 35932  0083E0                     _rotateArrayLeft:
 35933                           	opt stack 18
 35934                           
 35935                           ; BSR set to: 0
 35936                           ;incstack = 0
 35937                           ;rotateArrayLeft@array_index stored from wreg
 35938  0083E0  0100               	movlb	0	; () banked
 35939  0083E2  6F67               	movwf	rotateArrayLeft@array_index& (0+255),b
 35940                           
 35941                           ;arpeggio.c: 605: for(unsigned char i=array_index; i < (MAX_NUM_NOTES - 1) ;i++)
 35942  0083E4  C067  F068         	movff	rotateArrayLeft@array_index,rotateArrayLeft@i
 35943  0083E8  0EFF               	movlw	255
 35944  0083EA  0100               	movlb	0	; () banked
 35945  0083EC  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 35946  0083EE  0EFF               	movlw	255
 35947  0083F0  6F61               	movwf	(??_rotateArrayLeft+1)& (0+255),b
 35948  0083F2  0E9D               	movlw	low _MAX_NUM_NOTES
 35949  0083F4  6EF6               	movwf	tblptrl,c
 35950  0083F6                     	if	1	;There is more than 1 active tblptr byte
 35951  0083F6  0EF3               	movlw	high _MAX_NUM_NOTES
 35952  0083F8  6EF7               	movwf	tblptrh,c
 35953  0083FA                     	endif
 35954  0083FA                     	if	0	;There are less than 3 active tblptr bytes
 35955  0083FA                     	endif
 35956  0083FA  0008               	tblrd		*
 35957  0083FC  50F5               	movf	tablat,w,c
 35958  0083FE  6F62               	movwf	(??_rotateArrayLeft+2)& (0+255),b
 35959  008400  6B63               	clrf	(??_rotateArrayLeft+3)& (0+255),b
 35960  008402  5160               	movf	??_rotateArrayLeft& (0+255),w,b
 35961  008404  2762               	addwf	(??_rotateArrayLeft+2)& (0+255),f,b
 35962  008406  5161               	movf	(??_rotateArrayLeft+1)& (0+255),w,b
 35963  008408  2363               	addwfc	(??_rotateArrayLeft+3)& (0+255),f,b
 35964  00840A  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 35965  00840C  6F64               	movwf	(??_rotateArrayLeft+4)& (0+255),b
 35966  00840E  6B65               	clrf	(??_rotateArrayLeft+5)& (0+255),b
 35967  008410  5162               	movf	(??_rotateArrayLeft+2)& (0+255),w,b
 35968  008412  5D64               	subwf	(??_rotateArrayLeft+4)& (0+255),w,b
 35969  008414  5165               	movf	(??_rotateArrayLeft+5)& (0+255),w,b
 35970  008416  0A80               	xorlw	128
 35971  008418  6F66               	movwf	(??_rotateArrayLeft+6)& (0+255),b
 35972  00841A  5163               	movf	(??_rotateArrayLeft+3)& (0+255),w,b
 35973  00841C  0A80               	xorlw	128
 35974  00841E  5966               	subwfb	(??_rotateArrayLeft+6)& (0+255),w,b
 35975  008420  B0D8               	btfsc	status,0,c
 35976  008422  0012               	return	
 35977                           
 35978                           ; BSR set to: 0
 35979                           ;arpeggio.c: 606: {
 35980                           ;arpeggio.c: 607: ARPEGGIO[i]=ARPEGGIO[i+1];
 35981                           
 35982                           ; BSR set to: 0
 35983                           
 35984                           ; BSR set to: 0
 35985  008424  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 35986  008426  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 35987  008428  6B61               	clrf	(??_rotateArrayLeft+1)& (0+255),b
 35988  00842A  0E01               	movlw	1
 35989  00842C  2760               	addwf	??_rotateArrayLeft& (0+255),f,b
 35990  00842E  0E00               	movlw	0
 35991  008430  2361               	addwfc	(??_rotateArrayLeft+1)& (0+255),f,b
 35992  008432  0E72               	movlw	low _ARPEGGIO
 35993  008434  2560               	addwf	??_rotateArrayLeft& (0+255),w,b
 35994  008436  6ED9               	movwf	fsr2l,c
 35995  008438  0E01               	movlw	high _ARPEGGIO
 35996  00843A  2161               	addwfc	(??_rotateArrayLeft+1)& (0+255),w,b
 35997  00843C  6EDA               	movwf	fsr2h,c
 35998  00843E  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 35999  008440  0D01               	mullw	1
 36000  008442  0E72               	movlw	low _ARPEGGIO
 36001  008444  24F3               	addwf	prodl,w,c
 36002  008446  6EE1               	movwf	fsr1l,c
 36003  008448  0E01               	movlw	high _ARPEGGIO
 36004  00844A  20F4               	addwfc	prodh,w,c
 36005  00844C  6EE2               	movwf	fsr1h,c
 36006  00844E  CFDF FFE7          	movff	indf2,indf1
 36007                           
 36008                           ; BSR set to: 0
 36009  008452  2B68               	incf	rotateArrayLeft@i& (0+255),f,b
 36010                           
 36011                           ; BSR set to: 0
 36012  008454  0EFF               	movlw	255
 36013  008456  D7CA               	goto	L20
 36014  008458                     __end_of_rotateArrayLeft:
 36015                           	opt stack 0
 36016                           tblptru	equ	0xFF8
 36017                           tblptrh	equ	0xFF7
 36018                           tblptrl	equ	0xFF6
 36019                           tablat	equ	0xFF5
 36020                           prodh	equ	0xFF4
 36021                           prodl	equ	0xFF3
 36022                           intcon	equ	0xFF2
 36023                           intcon2	equ	0xFF1
 36024                           postinc0	equ	0xFEE
 36025                           wreg	equ	0xFE8
 36026                           indf1	equ	0xFE7
 36027                           postdec1	equ	0xFE5
 36028                           fsr1h	equ	0xFE2
 36029                           fsr1l	equ	0xFE1
 36030                           indf2	equ	0xFDF
 36031                           postinc2	equ	0xFDE
 36032                           plusw2	equ	0xFDB
 36033                           fsr2h	equ	0xFDA
 36034                           fsr2l	equ	0xFD9
 36035                           status	equ	0xFD8
 36036                           
 36037 ;; *************** function _processDrumpad *****************
 36038 ;; Defined at:
 36039 ;;		line 21 in file "drum.c"
 36040 ;; Parameters:    Size  Location     Type
 36041 ;;		None
 36042 ;; Auto vars:     Size  Location     Type
 36043 ;;		None
 36044 ;; Return value:  Size  Location     Type
 36045 ;;                  1    wreg      void 
 36046 ;; Registers used:
 36047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36048 ;; Tracked objects:
 36049 ;;		On entry : 0/0
 36050 ;;		On exit  : 0/0
 36051 ;;		Unchanged: 0/0
 36052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36057 ;;Total ram usage:        0 bytes
 36058 ;; Hardware stack levels used:    1
 36059 ;; Hardware stack levels required when called:    8
 36060 ;; This function calls:
 36061 ;;		_controlChange
 36062 ;;		_noteOffDrum
 36063 ;;		_noteOnDrum
 36064 ;; This function is called by:
 36065 ;;		_digitalInputs
 36066 ;; This function uses a non-reentrant model
 36067 ;;
 36068                           
 36069                           	psect	text108
 36070  001C66                     __ptext108:
 36071                           	opt stack 0
 36072  001C66                     _processDrumpad:
 36073                           	opt stack 21
 36074                           
 36075                           ;drum.c: 25: if((drum_button_state_now & 0x01) && !(button_state_now & 0x08000000) && !d
      +                          rum.SW1){
 36076                           
 36077                           ; BSR set to: 0
 36078                           ;incstack = 0
 36079  001C66  0100               	movlb	0	; () banked
 36080  001C68  B1EE               	btfsc	_drum_button_state_now& (0+255),0,b
 36081                           
 36082                           ; BSR set to: 0
 36083  001C6A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36084  001C6C  D033               	goto	l2297
 36085                           
 36086                           ; BSR set to: 0
 36087  001C6E  B1EC               	btfsc	_drum& (0+255),0,b
 36088  001C70  D031               	goto	l2297
 36089                           
 36090                           ; BSR set to: 0
 36091                           ;drum.c: 26: drum.SW1 = 1;
 36092  001C72  81EC               	bsf	_drum& (0+255),0,b
 36093                           
 36094                           ;drum.c: 27: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[0],velocity);}
 36095  001C74  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36096  001C76  D007               	goto	l2298
 36097                           
 36098                           ; BSR set to: 0
 36099  001C78  C1DF  F06E         	movff	_DRUM_NOTE,noteOnDrum@pitch
 36100  001C7C  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36101  001C80  51FE               	movf	_drumchannel& (0+255),w,b
 36102  001C82  EC7D  F046         	call	_noteOnDrum
 36103  001C86                     l2298:
 36104                           
 36105                           ;drum.c: 28: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          127);}
 36106  001C86  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36107  001C88  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36108  001C8A  D008               	goto	l2299
 36109  001C8C  C1D7  F06B         	movff	_DRUM_CC,controlChange@controllerNumber
 36110  001C90  0E7F               	movlw	127
 36111  001C92  0100               	movlb	0	; () banked
 36112  001C94  6F6C               	movwf	controlChange@value& (0+255),b
 36113  001C96  51F6               	movf	_channel& (0+255),w,b
 36114  001C98  EC4C  F049         	call	_controlChange
 36115  001C9C                     l2299:
 36116                           
 36117                           ;drum.c: 29: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 0) {controlChan
      +                          ge(channel,DRUM_CC[0], 127);}
 36118  001C9C  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36119  001C9E  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36120  001CA0  D00A               	goto	l2300
 36121  001CA2  0100               	movlb	0	; () banked
 36122  001CA4  B1E3               	btfsc	_toggle_state& (0+255),0,b
 36123  001CA6  D007               	goto	l2300
 36124                           
 36125                           ; BSR set to: 0
 36126  001CA8  C1D7  F06B         	movff	_DRUM_CC,controlChange@controllerNumber
 36127  001CAC  0E7F               	movlw	127
 36128  001CAE  6F6C               	movwf	controlChange@value& (0+255),b
 36129  001CB0  51F6               	movf	_channel& (0+255),w,b
 36130  001CB2  EC4C  F049         	call	_controlChange
 36131  001CB6                     l2300:
 36132                           
 36133                           ;drum.c: 30: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 1) {controlChan
      +                          ge(channel,DRUM_CC[0], 0);}
 36134  001CB6  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36135  001CB8  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36136  001CBA  D00A               	goto	l2301
 36137  001CBC  0100               	movlb	0	; () banked
 36138  001CBE  A1E3               	btfss	_toggle_state& (0+255),0,b
 36139  001CC0  D007               	goto	l2301
 36140                           
 36141                           ; BSR set to: 0
 36142  001CC2  C1D7  F06B         	movff	_DRUM_CC,controlChange@controllerNumber
 36143  001CC6  0E00               	movlw	0
 36144  001CC8  6F6C               	movwf	controlChange@value& (0+255),b
 36145  001CCA  51F6               	movf	_channel& (0+255),w,b
 36146  001CCC  EC4C  F049         	call	_controlChange
 36147  001CD0                     l2301:
 36148                           
 36149                           ;drum.c: 31: toggle_state.T1 ^= 1;
 36150  001CD0  0100               	movlb	0	; () banked
 36151  001CD2  71E3               	btg	_toggle_state& (0+255),0,b
 36152  001CD4                     l2297:
 36153                           
 36154                           ; BSR set to: 0
 36155                           ;drum.c: 32: }
 36156                           ;drum.c: 33: if(((drum_button_state_now) & 0x02) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW2) {
 36157                           
 36158                           ; BSR set to: 0
 36159  001CD4  B3EE               	btfsc	_drum_button_state_now& (0+255),1,b
 36160                           
 36161                           ; BSR set to: 0
 36162  001CD6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36163  001CD8  D033               	goto	l2302
 36164                           
 36165                           ; BSR set to: 0
 36166  001CDA  B3EC               	btfsc	_drum& (0+255),1,b
 36167  001CDC  D031               	goto	l2302
 36168                           
 36169                           ; BSR set to: 0
 36170                           ;drum.c: 34: drum.SW2 = 1;
 36171  001CDE  83EC               	bsf	_drum& (0+255),1,b
 36172                           
 36173                           ;drum.c: 35: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[1],velocity);}
 36174  001CE0  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36175  001CE2  D007               	goto	l2303
 36176                           
 36177                           ; BSR set to: 0
 36178  001CE4  C1E0  F06E         	movff	_DRUM_NOTE+1,noteOnDrum@pitch
 36179  001CE8  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36180  001CEC  51FE               	movf	_drumchannel& (0+255),w,b
 36181  001CEE  EC7D  F046         	call	_noteOnDrum
 36182  001CF2                     l2303:
 36183                           
 36184                           ;drum.c: 36: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          127);}
 36185  001CF2  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36186  001CF4  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36187  001CF6  D008               	goto	l2304
 36188  001CF8  C1D8  F06B         	movff	_DRUM_CC+1,controlChange@controllerNumber
 36189  001CFC  0E7F               	movlw	127
 36190  001CFE  0100               	movlb	0	; () banked
 36191  001D00  6F6C               	movwf	controlChange@value& (0+255),b
 36192  001D02  51F6               	movf	_channel& (0+255),w,b
 36193  001D04  EC4C  F049         	call	_controlChange
 36194  001D08                     l2304:
 36195                           
 36196                           ;drum.c: 37: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 0) {controlChan
      +                          ge(channel,DRUM_CC[1], 127);}
 36197  001D08  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36198  001D0A  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36199  001D0C  D00A               	goto	l2305
 36200  001D0E  0100               	movlb	0	; () banked
 36201  001D10  B3E3               	btfsc	_toggle_state& (0+255),1,b
 36202  001D12  D007               	goto	l2305
 36203                           
 36204                           ; BSR set to: 0
 36205  001D14  C1D8  F06B         	movff	_DRUM_CC+1,controlChange@controllerNumber
 36206  001D18  0E7F               	movlw	127
 36207  001D1A  6F6C               	movwf	controlChange@value& (0+255),b
 36208  001D1C  51F6               	movf	_channel& (0+255),w,b
 36209  001D1E  EC4C  F049         	call	_controlChange
 36210  001D22                     l2305:
 36211                           
 36212                           ;drum.c: 38: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 1) {controlChan
      +                          ge(channel,DRUM_CC[1], 0);}
 36213  001D22  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36214  001D24  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36215  001D26  D00A               	goto	l2306
 36216  001D28  0100               	movlb	0	; () banked
 36217  001D2A  A3E3               	btfss	_toggle_state& (0+255),1,b
 36218  001D2C  D007               	goto	l2306
 36219                           
 36220                           ; BSR set to: 0
 36221  001D2E  C1D8  F06B         	movff	_DRUM_CC+1,controlChange@controllerNumber
 36222  001D32  0E00               	movlw	0
 36223  001D34  6F6C               	movwf	controlChange@value& (0+255),b
 36224  001D36  51F6               	movf	_channel& (0+255),w,b
 36225  001D38  EC4C  F049         	call	_controlChange
 36226  001D3C                     l2306:
 36227                           
 36228                           ;drum.c: 39: toggle_state.T2 ^= 1;
 36229  001D3C  0100               	movlb	0	; () banked
 36230  001D3E  73E3               	btg	_toggle_state& (0+255),1,b
 36231  001D40                     l2302:
 36232                           
 36233                           ; BSR set to: 0
 36234                           ;drum.c: 40: }
 36235                           ;drum.c: 41: if(((drum_button_state_now) & 0x04) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW3) {
 36236                           
 36237                           ; BSR set to: 0
 36238  001D40  B5EE               	btfsc	_drum_button_state_now& (0+255),2,b
 36239                           
 36240                           ; BSR set to: 0
 36241  001D42  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36242  001D44  D033               	goto	l2307
 36243                           
 36244                           ; BSR set to: 0
 36245  001D46  B5EC               	btfsc	_drum& (0+255),2,b
 36246  001D48  D031               	goto	l2307
 36247                           
 36248                           ; BSR set to: 0
 36249                           ;drum.c: 42: drum.SW3 = 1;
 36250  001D4A  85EC               	bsf	_drum& (0+255),2,b
 36251                           
 36252                           ;drum.c: 43: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[2],velocity);}
 36253  001D4C  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36254  001D4E  D007               	goto	l2308
 36255                           
 36256                           ; BSR set to: 0
 36257  001D50  C1E1  F06E         	movff	_DRUM_NOTE+2,noteOnDrum@pitch
 36258  001D54  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36259  001D58  51FE               	movf	_drumchannel& (0+255),w,b
 36260  001D5A  EC7D  F046         	call	_noteOnDrum
 36261  001D5E                     l2308:
 36262                           
 36263                           ;drum.c: 44: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2], 
      +                          127);}
 36264  001D5E  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36265  001D60  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36266  001D62  D008               	goto	l2309
 36267  001D64  C1D9  F06B         	movff	_DRUM_CC+2,controlChange@controllerNumber
 36268  001D68  0E7F               	movlw	127
 36269  001D6A  0100               	movlb	0	; () banked
 36270  001D6C  6F6C               	movwf	controlChange@value& (0+255),b
 36271  001D6E  51F6               	movf	_channel& (0+255),w,b
 36272  001D70  EC4C  F049         	call	_controlChange
 36273  001D74                     l2309:
 36274                           
 36275                           ;drum.c: 45: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 0) {controlChan
      +                          ge(channel,DRUM_CC[2], 127);}
 36276  001D74  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36277  001D76  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36278  001D78  D00A               	goto	l2310
 36279  001D7A  0100               	movlb	0	; () banked
 36280  001D7C  B5E3               	btfsc	_toggle_state& (0+255),2,b
 36281  001D7E  D007               	goto	l2310
 36282                           
 36283                           ; BSR set to: 0
 36284  001D80  C1D9  F06B         	movff	_DRUM_CC+2,controlChange@controllerNumber
 36285  001D84  0E7F               	movlw	127
 36286  001D86  6F6C               	movwf	controlChange@value& (0+255),b
 36287  001D88  51F6               	movf	_channel& (0+255),w,b
 36288  001D8A  EC4C  F049         	call	_controlChange
 36289  001D8E                     l2310:
 36290                           
 36291                           ;drum.c: 46: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 1) {controlChan
      +                          ge(channel,DRUM_CC[2], 0);}
 36292  001D8E  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36293  001D90  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36294  001D92  D00A               	goto	l2311
 36295  001D94  0100               	movlb	0	; () banked
 36296  001D96  A5E3               	btfss	_toggle_state& (0+255),2,b
 36297  001D98  D007               	goto	l2311
 36298                           
 36299                           ; BSR set to: 0
 36300  001D9A  C1D9  F06B         	movff	_DRUM_CC+2,controlChange@controllerNumber
 36301  001D9E  0E00               	movlw	0
 36302  001DA0  6F6C               	movwf	controlChange@value& (0+255),b
 36303  001DA2  51F6               	movf	_channel& (0+255),w,b
 36304  001DA4  EC4C  F049         	call	_controlChange
 36305  001DA8                     l2311:
 36306                           
 36307                           ;drum.c: 47: toggle_state.T3 ^= 1;
 36308  001DA8  0100               	movlb	0	; () banked
 36309  001DAA  75E3               	btg	_toggle_state& (0+255),2,b
 36310  001DAC                     l2307:
 36311                           
 36312                           ; BSR set to: 0
 36313                           ;drum.c: 48: }
 36314                           ;drum.c: 49: if(((drum_button_state_now) & 0x08) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW4) {
 36315                           
 36316                           ; BSR set to: 0
 36317  001DAC  B7EE               	btfsc	_drum_button_state_now& (0+255),3,b
 36318                           
 36319                           ; BSR set to: 0
 36320  001DAE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36321  001DB0  D033               	goto	l2312
 36322                           
 36323                           ; BSR set to: 0
 36324  001DB2  B7EC               	btfsc	_drum& (0+255),3,b
 36325  001DB4  D031               	goto	l2312
 36326                           
 36327                           ; BSR set to: 0
 36328                           ;drum.c: 50: drum.SW4 = 1;
 36329  001DB6  87EC               	bsf	_drum& (0+255),3,b
 36330                           
 36331                           ;drum.c: 51: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[3],velocity);}
 36332  001DB8  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36333  001DBA  D007               	goto	l2313
 36334                           
 36335                           ; BSR set to: 0
 36336  001DBC  C1E2  F06E         	movff	_DRUM_NOTE+3,noteOnDrum@pitch
 36337  001DC0  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36338  001DC4  51FE               	movf	_drumchannel& (0+255),w,b
 36339  001DC6  EC7D  F046         	call	_noteOnDrum
 36340  001DCA                     l2313:
 36341                           
 36342                           ;drum.c: 52: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3], 
      +                          127);}
 36343  001DCA  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36344  001DCC  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36345  001DCE  D008               	goto	l2314
 36346  001DD0  C1DA  F06B         	movff	_DRUM_CC+3,controlChange@controllerNumber
 36347  001DD4  0E7F               	movlw	127
 36348  001DD6  0100               	movlb	0	; () banked
 36349  001DD8  6F6C               	movwf	controlChange@value& (0+255),b
 36350  001DDA  51F6               	movf	_channel& (0+255),w,b
 36351  001DDC  EC4C  F049         	call	_controlChange
 36352  001DE0                     l2314:
 36353                           
 36354                           ;drum.c: 53: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 0) {controlChan
      +                          ge(channel,DRUM_CC[3], 127);}
 36355  001DE0  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36356  001DE2  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36357  001DE4  D00A               	goto	l2315
 36358  001DE6  0100               	movlb	0	; () banked
 36359  001DE8  B7E3               	btfsc	_toggle_state& (0+255),3,b
 36360  001DEA  D007               	goto	l2315
 36361                           
 36362                           ; BSR set to: 0
 36363  001DEC  C1DA  F06B         	movff	_DRUM_CC+3,controlChange@controllerNumber
 36364  001DF0  0E7F               	movlw	127
 36365  001DF2  6F6C               	movwf	controlChange@value& (0+255),b
 36366  001DF4  51F6               	movf	_channel& (0+255),w,b
 36367  001DF6  EC4C  F049         	call	_controlChange
 36368  001DFA                     l2315:
 36369                           
 36370                           ;drum.c: 54: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 1) {controlChan
      +                          ge(channel,DRUM_CC[3], 0);}
 36371  001DFA  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36372  001DFC  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36373  001DFE  D00A               	goto	l2316
 36374  001E00  0100               	movlb	0	; () banked
 36375  001E02  A7E3               	btfss	_toggle_state& (0+255),3,b
 36376  001E04  D007               	goto	l2316
 36377                           
 36378                           ; BSR set to: 0
 36379  001E06  C1DA  F06B         	movff	_DRUM_CC+3,controlChange@controllerNumber
 36380  001E0A  0E00               	movlw	0
 36381  001E0C  6F6C               	movwf	controlChange@value& (0+255),b
 36382  001E0E  51F6               	movf	_channel& (0+255),w,b
 36383  001E10  EC4C  F049         	call	_controlChange
 36384  001E14                     l2316:
 36385                           
 36386                           ;drum.c: 55: toggle_state.T4 ^= 1;
 36387  001E14  0100               	movlb	0	; () banked
 36388  001E16  77E3               	btg	_toggle_state& (0+255),3,b
 36389  001E18                     l2312:
 36390                           
 36391                           ; BSR set to: 0
 36392                           ;drum.c: 56: }
 36393                           ;drum.c: 57: if(((drum_button_state_now) & 0x10) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW5){
 36394                           
 36395                           ; BSR set to: 0
 36396  001E18  B9EE               	btfsc	_drum_button_state_now& (0+255),4,b
 36397                           
 36398                           ; BSR set to: 0
 36399  001E1A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36400  001E1C  D033               	goto	l2317
 36401                           
 36402                           ; BSR set to: 0
 36403  001E1E  B9EC               	btfsc	_drum& (0+255),4,b
 36404  001E20  D031               	goto	l2317
 36405                           
 36406                           ; BSR set to: 0
 36407                           ;drum.c: 58: drum.SW5 = 1;
 36408  001E22  89EC               	bsf	_drum& (0+255),4,b
 36409                           
 36410                           ;drum.c: 59: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[4],velocity);}
 36411  001E24  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36412  001E26  D007               	goto	l2318
 36413                           
 36414                           ; BSR set to: 0
 36415  001E28  C1E3  F06E         	movff	_DRUM_NOTE+4,noteOnDrum@pitch
 36416  001E2C  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36417  001E30  51FE               	movf	_drumchannel& (0+255),w,b
 36418  001E32  EC7D  F046         	call	_noteOnDrum
 36419  001E36                     l2318:
 36420                           
 36421                           ;drum.c: 60: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4], 
      +                          127);}
 36422  001E36  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36423  001E38  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36424  001E3A  D008               	goto	l2319
 36425  001E3C  C1DB  F06B         	movff	_DRUM_CC+4,controlChange@controllerNumber
 36426  001E40  0E7F               	movlw	127
 36427  001E42  0100               	movlb	0	; () banked
 36428  001E44  6F6C               	movwf	controlChange@value& (0+255),b
 36429  001E46  51F6               	movf	_channel& (0+255),w,b
 36430  001E48  EC4C  F049         	call	_controlChange
 36431  001E4C                     l2319:
 36432                           
 36433                           ;drum.c: 61: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 0) {controlChan
      +                          ge(channel,DRUM_CC[4], 127);}
 36434  001E4C  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36435  001E4E  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36436  001E50  D00A               	goto	l2320
 36437  001E52  0100               	movlb	0	; () banked
 36438  001E54  B1E3               	btfsc	_toggle_state& (0+255),0,b
 36439  001E56  D007               	goto	l2320
 36440                           
 36441                           ; BSR set to: 0
 36442  001E58  C1DB  F06B         	movff	_DRUM_CC+4,controlChange@controllerNumber
 36443  001E5C  0E7F               	movlw	127
 36444  001E5E  6F6C               	movwf	controlChange@value& (0+255),b
 36445  001E60  51F6               	movf	_channel& (0+255),w,b
 36446  001E62  EC4C  F049         	call	_controlChange
 36447  001E66                     l2320:
 36448                           
 36449                           ;drum.c: 62: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 1) {controlChan
      +                          ge(channel,DRUM_CC[4], 0);}
 36450  001E66  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36451  001E68  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36452  001E6A  D00A               	goto	l2321
 36453  001E6C  0100               	movlb	0	; () banked
 36454  001E6E  A1E3               	btfss	_toggle_state& (0+255),0,b
 36455  001E70  D007               	goto	l2321
 36456                           
 36457                           ; BSR set to: 0
 36458  001E72  C1DB  F06B         	movff	_DRUM_CC+4,controlChange@controllerNumber
 36459  001E76  0E00               	movlw	0
 36460  001E78  6F6C               	movwf	controlChange@value& (0+255),b
 36461  001E7A  51F6               	movf	_channel& (0+255),w,b
 36462  001E7C  EC4C  F049         	call	_controlChange
 36463  001E80                     l2321:
 36464                           
 36465                           ;drum.c: 63: toggle_state.T5 ^= 1;
 36466  001E80  0100               	movlb	0	; () banked
 36467  001E82  79E3               	btg	_toggle_state& (0+255),4,b
 36468  001E84                     l2317:
 36469                           
 36470                           ; BSR set to: 0
 36471                           ;drum.c: 64: }
 36472                           ;drum.c: 65: if(((drum_button_state_now) & 0x20) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW6) {
 36473                           
 36474                           ; BSR set to: 0
 36475  001E84  BBEE               	btfsc	_drum_button_state_now& (0+255),5,b
 36476                           
 36477                           ; BSR set to: 0
 36478  001E86  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36479  001E88  D033               	goto	l2322
 36480                           
 36481                           ; BSR set to: 0
 36482  001E8A  BBEC               	btfsc	_drum& (0+255),5,b
 36483  001E8C  D031               	goto	l2322
 36484                           
 36485                           ; BSR set to: 0
 36486                           ;drum.c: 66: drum.SW6 = 1;
 36487  001E8E  8BEC               	bsf	_drum& (0+255),5,b
 36488                           
 36489                           ;drum.c: 67: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[5],velocity);}
 36490  001E90  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36491  001E92  D007               	goto	l2323
 36492                           
 36493                           ; BSR set to: 0
 36494  001E94  C1E4  F06E         	movff	_DRUM_NOTE+5,noteOnDrum@pitch
 36495  001E98  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36496  001E9C  51FE               	movf	_drumchannel& (0+255),w,b
 36497  001E9E  EC7D  F046         	call	_noteOnDrum
 36498  001EA2                     l2323:
 36499                           
 36500                           ;drum.c: 68: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5], 
      +                          127);}
 36501  001EA2  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36502  001EA4  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36503  001EA6  D008               	goto	l2324
 36504  001EA8  C1DC  F06B         	movff	_DRUM_CC+5,controlChange@controllerNumber
 36505  001EAC  0E7F               	movlw	127
 36506  001EAE  0100               	movlb	0	; () banked
 36507  001EB0  6F6C               	movwf	controlChange@value& (0+255),b
 36508  001EB2  51F6               	movf	_channel& (0+255),w,b
 36509  001EB4  EC4C  F049         	call	_controlChange
 36510  001EB8                     l2324:
 36511                           
 36512                           ;drum.c: 69: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 0) {controlChan
      +                          ge(channel,DRUM_CC[5], 127);}
 36513  001EB8  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36514  001EBA  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36515  001EBC  D00A               	goto	l2325
 36516  001EBE  0100               	movlb	0	; () banked
 36517  001EC0  B3E3               	btfsc	_toggle_state& (0+255),1,b
 36518  001EC2  D007               	goto	l2325
 36519                           
 36520                           ; BSR set to: 0
 36521  001EC4  C1DC  F06B         	movff	_DRUM_CC+5,controlChange@controllerNumber
 36522  001EC8  0E7F               	movlw	127
 36523  001ECA  6F6C               	movwf	controlChange@value& (0+255),b
 36524  001ECC  51F6               	movf	_channel& (0+255),w,b
 36525  001ECE  EC4C  F049         	call	_controlChange
 36526  001ED2                     l2325:
 36527                           
 36528                           ;drum.c: 70: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 1) {controlChan
      +                          ge(channel,DRUM_CC[5], 0);}
 36529  001ED2  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36530  001ED4  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36531  001ED6  D00A               	goto	l2326
 36532  001ED8  0100               	movlb	0	; () banked
 36533  001EDA  A3E3               	btfss	_toggle_state& (0+255),1,b
 36534  001EDC  D007               	goto	l2326
 36535                           
 36536                           ; BSR set to: 0
 36537  001EDE  C1DC  F06B         	movff	_DRUM_CC+5,controlChange@controllerNumber
 36538  001EE2  0E00               	movlw	0
 36539  001EE4  6F6C               	movwf	controlChange@value& (0+255),b
 36540  001EE6  51F6               	movf	_channel& (0+255),w,b
 36541  001EE8  EC4C  F049         	call	_controlChange
 36542  001EEC                     l2326:
 36543                           
 36544                           ;drum.c: 71: toggle_state.T6 ^= 1;
 36545  001EEC  0100               	movlb	0	; () banked
 36546  001EEE  7BE3               	btg	_toggle_state& (0+255),5,b
 36547  001EF0                     l2322:
 36548                           
 36549                           ; BSR set to: 0
 36550                           ;drum.c: 72: }
 36551                           ;drum.c: 73: if(((drum_button_state_now) & 0x40) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW7) {
 36552                           
 36553                           ; BSR set to: 0
 36554  001EF0  BDEE               	btfsc	_drum_button_state_now& (0+255),6,b
 36555                           
 36556                           ; BSR set to: 0
 36557  001EF2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36558  001EF4  D033               	goto	l2327
 36559                           
 36560                           ; BSR set to: 0
 36561  001EF6  BDEC               	btfsc	_drum& (0+255),6,b
 36562  001EF8  D031               	goto	l2327
 36563                           
 36564                           ; BSR set to: 0
 36565                           ;drum.c: 74: drum.SW7 = 1;
 36566  001EFA  8DEC               	bsf	_drum& (0+255),6,b
 36567                           
 36568                           ;drum.c: 75: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[6],velocity);}
 36569  001EFC  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36570  001EFE  D007               	goto	l2328
 36571                           
 36572                           ; BSR set to: 0
 36573  001F00  C1E5  F06E         	movff	_DRUM_NOTE+6,noteOnDrum@pitch
 36574  001F04  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36575  001F08  51FE               	movf	_drumchannel& (0+255),w,b
 36576  001F0A  EC7D  F046         	call	_noteOnDrum
 36577  001F0E                     l2328:
 36578                           
 36579                           ;drum.c: 76: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6], 
      +                          127);}
 36580  001F0E  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36581  001F10  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36582  001F12  D008               	goto	l2329
 36583  001F14  C1DD  F06B         	movff	_DRUM_CC+6,controlChange@controllerNumber
 36584  001F18  0E7F               	movlw	127
 36585  001F1A  0100               	movlb	0	; () banked
 36586  001F1C  6F6C               	movwf	controlChange@value& (0+255),b
 36587  001F1E  51F6               	movf	_channel& (0+255),w,b
 36588  001F20  EC4C  F049         	call	_controlChange
 36589  001F24                     l2329:
 36590                           
 36591                           ;drum.c: 77: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 0) {controlChan
      +                          ge(channel,DRUM_CC[6], 127);}
 36592  001F24  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36593  001F26  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36594  001F28  D00A               	goto	l2330
 36595  001F2A  0100               	movlb	0	; () banked
 36596  001F2C  B5E3               	btfsc	_toggle_state& (0+255),2,b
 36597  001F2E  D007               	goto	l2330
 36598                           
 36599                           ; BSR set to: 0
 36600  001F30  C1DD  F06B         	movff	_DRUM_CC+6,controlChange@controllerNumber
 36601  001F34  0E7F               	movlw	127
 36602  001F36  6F6C               	movwf	controlChange@value& (0+255),b
 36603  001F38  51F6               	movf	_channel& (0+255),w,b
 36604  001F3A  EC4C  F049         	call	_controlChange
 36605  001F3E                     l2330:
 36606                           
 36607                           ;drum.c: 78: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 1) {controlChan
      +                          ge(channel,DRUM_CC[6], 0);}
 36608  001F3E  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36609  001F40  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36610  001F42  D00A               	goto	l2331
 36611  001F44  0100               	movlb	0	; () banked
 36612  001F46  A5E3               	btfss	_toggle_state& (0+255),2,b
 36613  001F48  D007               	goto	l2331
 36614                           
 36615                           ; BSR set to: 0
 36616  001F4A  C1DD  F06B         	movff	_DRUM_CC+6,controlChange@controllerNumber
 36617  001F4E  0E00               	movlw	0
 36618  001F50  6F6C               	movwf	controlChange@value& (0+255),b
 36619  001F52  51F6               	movf	_channel& (0+255),w,b
 36620  001F54  EC4C  F049         	call	_controlChange
 36621  001F58                     l2331:
 36622                           
 36623                           ;drum.c: 79: toggle_state.T7 ^= 1;
 36624  001F58  0100               	movlb	0	; () banked
 36625  001F5A  7DE3               	btg	_toggle_state& (0+255),6,b
 36626  001F5C                     l2327:
 36627                           
 36628                           ; BSR set to: 0
 36629                           ;drum.c: 80: }
 36630                           ;drum.c: 81: if(((drum_button_state_now) & 0x80) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW8) {
 36631                           
 36632                           ; BSR set to: 0
 36633  001F5C  BFEE               	btfsc	_drum_button_state_now& (0+255),7,b
 36634                           
 36635                           ; BSR set to: 0
 36636  001F5E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36637  001F60  D033               	goto	l2332
 36638                           
 36639                           ; BSR set to: 0
 36640  001F62  BFEC               	btfsc	_drum& (0+255),7,b
 36641  001F64  D031               	goto	l2332
 36642                           
 36643                           ; BSR set to: 0
 36644                           ;drum.c: 82: drum.SW8 = 1;
 36645  001F66  8FEC               	bsf	_drum& (0+255),7,b
 36646                           
 36647                           ;drum.c: 83: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[7],velocity);}
 36648  001F68  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36649  001F6A  D007               	goto	l2333
 36650                           
 36651                           ; BSR set to: 0
 36652  001F6C  C1E6  F06E         	movff	_DRUM_NOTE+7,noteOnDrum@pitch
 36653  001F70  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36654  001F74  51FE               	movf	_drumchannel& (0+255),w,b
 36655  001F76  EC7D  F046         	call	_noteOnDrum
 36656  001F7A                     l2333:
 36657                           
 36658                           ;drum.c: 84: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7], 
      +                          127);}
 36659  001F7A  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36660  001F7C  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36661  001F7E  D008               	goto	l2334
 36662  001F80  C1DE  F06B         	movff	_DRUM_CC+7,controlChange@controllerNumber
 36663  001F84  0E7F               	movlw	127
 36664  001F86  0100               	movlb	0	; () banked
 36665  001F88  6F6C               	movwf	controlChange@value& (0+255),b
 36666  001F8A  51F6               	movf	_channel& (0+255),w,b
 36667  001F8C  EC4C  F049         	call	_controlChange
 36668  001F90                     l2334:
 36669                           
 36670                           ;drum.c: 85: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 0) {controlChan
      +                          ge(channel,DRUM_CC[7], 127);}
 36671  001F90  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36672  001F92  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36673  001F94  D00A               	goto	l2335
 36674  001F96  0100               	movlb	0	; () banked
 36675  001F98  B7E3               	btfsc	_toggle_state& (0+255),3,b
 36676  001F9A  D007               	goto	l2335
 36677                           
 36678                           ; BSR set to: 0
 36679  001F9C  C1DE  F06B         	movff	_DRUM_CC+7,controlChange@controllerNumber
 36680  001FA0  0E7F               	movlw	127
 36681  001FA2  6F6C               	movwf	controlChange@value& (0+255),b
 36682  001FA4  51F6               	movf	_channel& (0+255),w,b
 36683  001FA6  EC4C  F049         	call	_controlChange
 36684  001FAA                     l2335:
 36685                           
 36686                           ;drum.c: 86: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 1) {controlChan
      +                          ge(channel,DRUM_CC[7], 0);}
 36687  001FAA  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36688  001FAC  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36689  001FAE  D00A               	goto	l2336
 36690  001FB0  0100               	movlb	0	; () banked
 36691  001FB2  A7E3               	btfss	_toggle_state& (0+255),3,b
 36692  001FB4  D007               	goto	l2336
 36693                           
 36694                           ; BSR set to: 0
 36695  001FB6  C1DE  F06B         	movff	_DRUM_CC+7,controlChange@controllerNumber
 36696  001FBA  0E00               	movlw	0
 36697  001FBC  6F6C               	movwf	controlChange@value& (0+255),b
 36698  001FBE  51F6               	movf	_channel& (0+255),w,b
 36699  001FC0  EC4C  F049         	call	_controlChange
 36700  001FC4                     l2336:
 36701                           
 36702                           ;drum.c: 87: toggle_state.T8 ^= 1;
 36703  001FC4  0100               	movlb	0	; () banked
 36704  001FC6  7FE3               	btg	_toggle_state& (0+255),7,b
 36705  001FC8                     l2332:
 36706                           
 36707                           ; BSR set to: 0
 36708                           ;drum.c: 88: }
 36709                           ;drum.c: 91: if(((drum_button_state_last & 0x01)) && ((drum_button_state_now & 0x01) == 
      +                          0) && drum.SW1) {
 36710                           
 36711                           ; BSR set to: 0
 36712  001FC8  B1ED               	btfsc	_drum_button_state_last& (0+255),0,b
 36713                           
 36714                           ; BSR set to: 0
 36715  001FCA  B1EE               	btfsc	_drum_button_state_now& (0+255),0,b
 36716  001FCC  D017               	goto	l2339
 36717                           
 36718                           ; BSR set to: 0
 36719  001FCE  A1EC               	btfss	_drum& (0+255),0,b
 36720  001FD0  D015               	goto	l2339
 36721                           
 36722                           ; BSR set to: 0
 36723                           ;drum.c: 92: drum.SW1 = 0;
 36724  001FD2  91EC               	bcf	_drum& (0+255),0,b
 36725                           
 36726                           ;drum.c: 93: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[0],velocity);}
 36727  001FD4  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36728  001FD6  D007               	goto	l2338
 36729                           
 36730                           ; BSR set to: 0
 36731  001FD8  C1DF  F06B         	movff	_DRUM_NOTE,noteOffDrum@pitch
 36732  001FDC  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36733  001FE0  51FE               	movf	_drumchannel& (0+255),w,b
 36734  001FE2  ECFA  F048         	call	_noteOffDrum
 36735  001FE6                     l2338:
 36736                           
 36737                           ;drum.c: 94: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          0);}
 36738  001FE6  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36739  001FE8  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36740  001FEA  D008               	goto	l2339
 36741  001FEC  C1D7  F06B         	movff	_DRUM_CC,controlChange@controllerNumber
 36742  001FF0  0E00               	movlw	0
 36743  001FF2  0100               	movlb	0	; () banked
 36744  001FF4  6F6C               	movwf	controlChange@value& (0+255),b
 36745  001FF6  51F6               	movf	_channel& (0+255),w,b
 36746  001FF8  EC4C  F049         	call	_controlChange
 36747  001FFC                     l2339:
 36748                           
 36749                           ;drum.c: 95: }
 36750                           ;drum.c: 96: if(((drum_button_state_last & 0x02)) && ((drum_button_state_now & 0x02) == 
      +                          0) && drum.SW2) {
 36751  001FFC  0100               	movlb	0	; () banked
 36752  001FFE  B3ED               	btfsc	_drum_button_state_last& (0+255),1,b
 36753                           
 36754                           ; BSR set to: 0
 36755  002000  B3EE               	btfsc	_drum_button_state_now& (0+255),1,b
 36756  002002  D017               	goto	l2342
 36757                           
 36758                           ; BSR set to: 0
 36759  002004  A3EC               	btfss	_drum& (0+255),1,b
 36760  002006  D015               	goto	l2342
 36761                           
 36762                           ; BSR set to: 0
 36763                           ;drum.c: 97: drum.SW2 = 0;
 36764  002008  93EC               	bcf	_drum& (0+255),1,b
 36765                           
 36766                           ;drum.c: 98: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[1],velocity);}
 36767  00200A  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36768  00200C  D007               	goto	l2341
 36769                           
 36770                           ; BSR set to: 0
 36771  00200E  C1E0  F06B         	movff	_DRUM_NOTE+1,noteOffDrum@pitch
 36772  002012  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36773  002016  51FE               	movf	_drumchannel& (0+255),w,b
 36774  002018  ECFA  F048         	call	_noteOffDrum
 36775  00201C                     l2341:
 36776                           
 36777                           ;drum.c: 99: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          0);}
 36778  00201C  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36779  00201E  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36780  002020  D008               	goto	l2342
 36781  002022  C1D8  F06B         	movff	_DRUM_CC+1,controlChange@controllerNumber
 36782  002026  0E00               	movlw	0
 36783  002028  0100               	movlb	0	; () banked
 36784  00202A  6F6C               	movwf	controlChange@value& (0+255),b
 36785  00202C  51F6               	movf	_channel& (0+255),w,b
 36786  00202E  EC4C  F049         	call	_controlChange
 36787  002032                     l2342:
 36788                           
 36789                           ;drum.c: 100: }
 36790                           ;drum.c: 101: if(((drum_button_state_last & 0x04)) && ((drum_button_state_now & 0x04) ==
      +                           0) && drum.SW3) {
 36791  002032  0100               	movlb	0	; () banked
 36792  002034  B5ED               	btfsc	_drum_button_state_last& (0+255),2,b
 36793                           
 36794                           ; BSR set to: 0
 36795  002036  B5EE               	btfsc	_drum_button_state_now& (0+255),2,b
 36796  002038  D017               	goto	l2345
 36797                           
 36798                           ; BSR set to: 0
 36799  00203A  A5EC               	btfss	_drum& (0+255),2,b
 36800  00203C  D015               	goto	l2345
 36801                           
 36802                           ; BSR set to: 0
 36803                           ;drum.c: 102: drum.SW3 = 0;
 36804  00203E  95EC               	bcf	_drum& (0+255),2,b
 36805                           
 36806                           ;drum.c: 103: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[2],velocity);}
 36807  002040  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36808  002042  D007               	goto	l2344
 36809                           
 36810                           ; BSR set to: 0
 36811  002044  C1E1  F06B         	movff	_DRUM_NOTE+2,noteOffDrum@pitch
 36812  002048  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36813  00204C  51FE               	movf	_drumchannel& (0+255),w,b
 36814  00204E  ECFA  F048         	call	_noteOffDrum
 36815  002052                     l2344:
 36816                           
 36817                           ;drum.c: 104: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2],
      +                           0);}
 36818  002052  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36819  002054  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36820  002056  D008               	goto	l2345
 36821  002058  C1D9  F06B         	movff	_DRUM_CC+2,controlChange@controllerNumber
 36822  00205C  0E00               	movlw	0
 36823  00205E  0100               	movlb	0	; () banked
 36824  002060  6F6C               	movwf	controlChange@value& (0+255),b
 36825  002062  51F6               	movf	_channel& (0+255),w,b
 36826  002064  EC4C  F049         	call	_controlChange
 36827  002068                     l2345:
 36828                           
 36829                           ;drum.c: 105: }
 36830                           ;drum.c: 106: if(((drum_button_state_last & 0x08)) && ((drum_button_state_now & 0x08) ==
      +                           0) && drum.SW4) {
 36831  002068  0100               	movlb	0	; () banked
 36832  00206A  B7ED               	btfsc	_drum_button_state_last& (0+255),3,b
 36833                           
 36834                           ; BSR set to: 0
 36835  00206C  B7EE               	btfsc	_drum_button_state_now& (0+255),3,b
 36836  00206E  D017               	goto	l2348
 36837                           
 36838                           ; BSR set to: 0
 36839  002070  A7EC               	btfss	_drum& (0+255),3,b
 36840  002072  D015               	goto	l2348
 36841                           
 36842                           ; BSR set to: 0
 36843                           ;drum.c: 107: drum.SW4 = 0;
 36844  002074  97EC               	bcf	_drum& (0+255),3,b
 36845                           
 36846                           ;drum.c: 108: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[3],velocity);}
 36847  002076  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36848  002078  D007               	goto	l2347
 36849                           
 36850                           ; BSR set to: 0
 36851  00207A  C1E2  F06B         	movff	_DRUM_NOTE+3,noteOffDrum@pitch
 36852  00207E  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36853  002082  51FE               	movf	_drumchannel& (0+255),w,b
 36854  002084  ECFA  F048         	call	_noteOffDrum
 36855  002088                     l2347:
 36856                           
 36857                           ;drum.c: 109: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3],
      +                           0);}
 36858  002088  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36859  00208A  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36860  00208C  D008               	goto	l2348
 36861  00208E  C1DA  F06B         	movff	_DRUM_CC+3,controlChange@controllerNumber
 36862  002092  0E00               	movlw	0
 36863  002094  0100               	movlb	0	; () banked
 36864  002096  6F6C               	movwf	controlChange@value& (0+255),b
 36865  002098  51F6               	movf	_channel& (0+255),w,b
 36866  00209A  EC4C  F049         	call	_controlChange
 36867  00209E                     l2348:
 36868                           
 36869                           ;drum.c: 110: }
 36870                           ;drum.c: 111: if(((drum_button_state_last & 0x10)) && ((drum_button_state_now & 0x10) ==
      +                           0) && drum.SW5) {
 36871  00209E  0100               	movlb	0	; () banked
 36872  0020A0  B9ED               	btfsc	_drum_button_state_last& (0+255),4,b
 36873                           
 36874                           ; BSR set to: 0
 36875  0020A2  B9EE               	btfsc	_drum_button_state_now& (0+255),4,b
 36876  0020A4  D017               	goto	l2351
 36877                           
 36878                           ; BSR set to: 0
 36879  0020A6  A9EC               	btfss	_drum& (0+255),4,b
 36880  0020A8  D015               	goto	l2351
 36881                           
 36882                           ; BSR set to: 0
 36883                           ;drum.c: 112: drum.SW5 = 0;
 36884  0020AA  99EC               	bcf	_drum& (0+255),4,b
 36885                           
 36886                           ;drum.c: 113: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[4],velocity);}
 36887  0020AC  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36888  0020AE  D007               	goto	l2350
 36889                           
 36890                           ; BSR set to: 0
 36891  0020B0  C1E3  F06B         	movff	_DRUM_NOTE+4,noteOffDrum@pitch
 36892  0020B4  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36893  0020B8  51FE               	movf	_drumchannel& (0+255),w,b
 36894  0020BA  ECFA  F048         	call	_noteOffDrum
 36895  0020BE                     l2350:
 36896                           
 36897                           ;drum.c: 114: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4],
      +                           0);}
 36898  0020BE  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36899  0020C0  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36900  0020C2  D008               	goto	l2351
 36901  0020C4  C1DB  F06B         	movff	_DRUM_CC+4,controlChange@controllerNumber
 36902  0020C8  0E00               	movlw	0
 36903  0020CA  0100               	movlb	0	; () banked
 36904  0020CC  6F6C               	movwf	controlChange@value& (0+255),b
 36905  0020CE  51F6               	movf	_channel& (0+255),w,b
 36906  0020D0  EC4C  F049         	call	_controlChange
 36907  0020D4                     l2351:
 36908                           
 36909                           ;drum.c: 115: }
 36910                           ;drum.c: 116: if(((drum_button_state_last & 0x20)) && ((drum_button_state_now & 0x20) ==
      +                           0) && drum.SW6) {
 36911  0020D4  0100               	movlb	0	; () banked
 36912  0020D6  BBED               	btfsc	_drum_button_state_last& (0+255),5,b
 36913                           
 36914                           ; BSR set to: 0
 36915  0020D8  BBEE               	btfsc	_drum_button_state_now& (0+255),5,b
 36916  0020DA  D017               	goto	l2354
 36917                           
 36918                           ; BSR set to: 0
 36919  0020DC  ABEC               	btfss	_drum& (0+255),5,b
 36920  0020DE  D015               	goto	l2354
 36921                           
 36922                           ; BSR set to: 0
 36923                           ;drum.c: 117: drum.SW6 = 0;
 36924  0020E0  9BEC               	bcf	_drum& (0+255),5,b
 36925                           
 36926                           ;drum.c: 118: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[5],velocity);}
 36927  0020E2  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36928  0020E4  D007               	goto	l2353
 36929                           
 36930                           ; BSR set to: 0
 36931  0020E6  C1E4  F06B         	movff	_DRUM_NOTE+5,noteOffDrum@pitch
 36932  0020EA  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36933  0020EE  51FE               	movf	_drumchannel& (0+255),w,b
 36934  0020F0  ECFA  F048         	call	_noteOffDrum
 36935  0020F4                     l2353:
 36936                           
 36937                           ;drum.c: 119: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5],
      +                           0);}
 36938  0020F4  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36939  0020F6  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36940  0020F8  D008               	goto	l2354
 36941  0020FA  C1DC  F06B         	movff	_DRUM_CC+5,controlChange@controllerNumber
 36942  0020FE  0E00               	movlw	0
 36943  002100  0100               	movlb	0	; () banked
 36944  002102  6F6C               	movwf	controlChange@value& (0+255),b
 36945  002104  51F6               	movf	_channel& (0+255),w,b
 36946  002106  EC4C  F049         	call	_controlChange
 36947  00210A                     l2354:
 36948                           
 36949                           ;drum.c: 120: }
 36950                           ;drum.c: 121: if(((drum_button_state_last & 0x40)) && ((drum_button_state_now & 0x40) ==
      +                           0) && drum.SW7) {
 36951  00210A  0100               	movlb	0	; () banked
 36952  00210C  BDED               	btfsc	_drum_button_state_last& (0+255),6,b
 36953                           
 36954                           ; BSR set to: 0
 36955  00210E  BDEE               	btfsc	_drum_button_state_now& (0+255),6,b
 36956  002110  D017               	goto	l2357
 36957                           
 36958                           ; BSR set to: 0
 36959  002112  ADEC               	btfss	_drum& (0+255),6,b
 36960  002114  D015               	goto	l2357
 36961                           
 36962                           ; BSR set to: 0
 36963                           ;drum.c: 122: drum.SW7 = 0;
 36964  002116  9DEC               	bcf	_drum& (0+255),6,b
 36965                           
 36966                           ;drum.c: 123: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[6],velocity);}
 36967  002118  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36968  00211A  D007               	goto	l2356
 36969                           
 36970                           ; BSR set to: 0
 36971  00211C  C1E5  F06B         	movff	_DRUM_NOTE+6,noteOffDrum@pitch
 36972  002120  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36973  002124  51FE               	movf	_drumchannel& (0+255),w,b
 36974  002126  ECFA  F048         	call	_noteOffDrum
 36975  00212A                     l2356:
 36976                           
 36977                           ;drum.c: 124: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6],
      +                           0);}
 36978  00212A  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36979  00212C  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36980  00212E  D008               	goto	l2357
 36981  002130  C1DD  F06B         	movff	_DRUM_CC+6,controlChange@controllerNumber
 36982  002134  0E00               	movlw	0
 36983  002136  0100               	movlb	0	; () banked
 36984  002138  6F6C               	movwf	controlChange@value& (0+255),b
 36985  00213A  51F6               	movf	_channel& (0+255),w,b
 36986  00213C  EC4C  F049         	call	_controlChange
 36987  002140                     l2357:
 36988                           
 36989                           ;drum.c: 125: }
 36990                           ;drum.c: 126: if(((drum_button_state_last & 0x80)) && ((drum_button_state_now & 0x80) ==
      +                           0) && drum.SW8) {
 36991  002140  0100               	movlb	0	; () banked
 36992  002142  AFED               	btfss	_drum_button_state_last& (0+255),7,b
 36993  002144  0012               	return	
 36994                           
 36995                           ; BSR set to: 0
 36996  002146  BFEE               	btfsc	_drum_button_state_now& (0+255),7,b
 36997  002148  0012               	return	
 36998                           
 36999                           ; BSR set to: 0
 37000  00214A  AFEC               	btfss	_drum& (0+255),7,b
 37001  00214C  0012               	return	
 37002                           
 37003                           ; BSR set to: 0
 37004                           ;drum.c: 127: drum.SW8 = 0;
 37005  00214E  9FEC               	bcf	_drum& (0+255),7,b
 37006                           
 37007                           ;drum.c: 128: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[7],velocity);}
 37008  002150  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 37009  002152  D007               	goto	l2359
 37010                           
 37011                           ; BSR set to: 0
 37012  002154  C1E6  F06B         	movff	_DRUM_NOTE+7,noteOffDrum@pitch
 37013  002158  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 37014  00215C  51FE               	movf	_drumchannel& (0+255),w,b
 37015  00215E  ECFA  F048         	call	_noteOffDrum
 37016  002162                     l2359:
 37017                           
 37018                           ;drum.c: 129: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7],
      +                           0);}
 37019  002162  B832               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 37020  002164  0012               	return	
 37021  002166  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 37022  002168  0012               	return	
 37023  00216A  C1DE  F06B         	movff	_DRUM_CC+7,controlChange@controllerNumber
 37024  00216E  0E00               	movlw	0
 37025  002170  0100               	movlb	0	; () banked
 37026  002172  6F6C               	movwf	controlChange@value& (0+255),b
 37027  002174  51F6               	movf	_channel& (0+255),w,b
 37028  002176  EC4C  F049         	call	_controlChange
 37029  00217A  0012               	return	
 37030  00217C                     __end_of_processDrumpad:
 37031                           	opt stack 0
 37032                           tblptru	equ	0xFF8
 37033                           tblptrh	equ	0xFF7
 37034                           tblptrl	equ	0xFF6
 37035                           tablat	equ	0xFF5
 37036                           prodh	equ	0xFF4
 37037                           prodl	equ	0xFF3
 37038                           intcon	equ	0xFF2
 37039                           intcon2	equ	0xFF1
 37040                           postinc0	equ	0xFEE
 37041                           wreg	equ	0xFE8
 37042                           indf1	equ	0xFE7
 37043                           postdec1	equ	0xFE5
 37044                           fsr1h	equ	0xFE2
 37045                           fsr1l	equ	0xFE1
 37046                           indf2	equ	0xFDF
 37047                           postinc2	equ	0xFDE
 37048                           plusw2	equ	0xFDB
 37049                           fsr2h	equ	0xFDA
 37050                           fsr2l	equ	0xFD9
 37051                           status	equ	0xFD8
 37052                           
 37053 ;; *************** function _noteOnDrum *****************
 37054 ;; Defined at:
 37055 ;;		line 120 in file "midi.c"
 37056 ;; Parameters:    Size  Location     Type
 37057 ;;  channel         1    wreg     unsigned char 
 37058 ;;  pitch           1   14[BANK0 ] unsigned char 
 37059 ;;  velocity        1   15[BANK0 ] unsigned char 
 37060 ;; Auto vars:     Size  Location     Type
 37061 ;;  channel         1   16[BANK0 ] unsigned char 
 37062 ;; Return value:  Size  Location     Type
 37063 ;;                  1    wreg      void 
 37064 ;; Registers used:
 37065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37066 ;; Tracked objects:
 37067 ;;		On entry : 0/0
 37068 ;;		On exit  : 0/0
 37069 ;;		Unchanged: 0/0
 37070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37071 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37072 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37074 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37075 ;;Total ram usage:        3 bytes
 37076 ;; Hardware stack levels used:    1
 37077 ;; Hardware stack levels required when called:    7
 37078 ;; This function calls:
 37079 ;;		_noteOff
 37080 ;;		_sendOut
 37081 ;;		_sendUSB
 37082 ;; This function is called by:
 37083 ;;		_processDrumpad
 37084 ;; This function uses a non-reentrant model
 37085 ;;
 37086                           
 37087                           	psect	text109
 37088  008CFA                     __ptext109:
 37089                           	opt stack 0
 37090  008CFA                     _noteOnDrum:
 37091                           	opt stack 21
 37092                           
 37093                           ;incstack = 0
 37094                           ;noteOnDrum@channel stored from wreg
 37095  008CFA  0100               	movlb	0	; () banked
 37096  008CFC  6F70               	movwf	noteOnDrum@channel& (0+255),b
 37097                           
 37098                           ;midi.c: 122: noteNumber = pitch;
 37099  008CFE  C06E  F0F4         	movff	noteOnDrum@pitch,_noteNumber
 37100                           
 37101                           ;midi.c: 123: statusByte = channel | note_on;
 37102  008D02  0100               	movlb	0	; () banked
 37103  008D04  5170               	movf	noteOnDrum@channel& (0+255),w,b
 37104  008D06  0990               	iorlw	144
 37105  008D08  6FF5               	movwf	_statusByte& (0+255),b
 37106                           
 37107                           ; BSR set to: 0
 37108                           ;midi.c: 125: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 37109  008D0A  516F               	movf	noteOnDrum@velocity& (0+255),w,b
 37110  008D0C  A4D8               	btfss	status,2,c
 37111  008D0E  D008               	goto	l459
 37112                           
 37113                           ; BSR set to: 0
 37114  008D10  C06E  F06B         	movff	noteOnDrum@pitch,noteOff@pitch
 37115  008D14  C06F  F06C         	movff	noteOnDrum@velocity,noteOff@velocity
 37116  008D18  5170               	movf	noteOnDrum@channel& (0+255),w,b
 37117  008D1A  EC08  F048         	call	_noteOff
 37118  008D1E  0012               	return	
 37119  008D20                     l459:
 37120                           
 37121                           ;midi.c: 128: sendUSB(statusByte, noteNumber, velocity);
 37122  008D20  C0F4  F060         	movff	_noteNumber,sendUSB@message2
 37123  008D24  C06F  F061         	movff	noteOnDrum@velocity,sendUSB@message3
 37124  008D28  0100               	movlb	0	; () banked
 37125  008D2A  51F5               	movf	_statusByte& (0+255),w,b
 37126  008D2C  ECC0  F039         	call	_sendUSB
 37127                           
 37128                           ;midi.c: 131: if(velocity > 0) {
 37129  008D30  0100               	movlb	0	; () banked
 37130  008D32  516F               	movf	noteOnDrum@velocity& (0+255),w,b
 37131  008D34  B4D8               	btfsc	status,2,c
 37132  008D36  0012               	return	
 37133                           
 37134                           ; BSR set to: 0
 37135                           ;midi.c: 132: sendOut(statusByte);
 37136  008D38  51F5               	movf	_statusByte& (0+255),w,b
 37137  008D3A  ECD8  F04A         	call	_sendOut
 37138                           
 37139                           ;midi.c: 133: sendOut(noteNumber);
 37140  008D3E  0100               	movlb	0	; () banked
 37141  008D40  51F4               	movf	_noteNumber& (0+255),w,b
 37142  008D42  ECD8  F04A         	call	_sendOut
 37143                           
 37144                           ;midi.c: 134: sendOut(velocity);
 37145  008D46  0100               	movlb	0	; () banked
 37146  008D48  516F               	movf	noteOnDrum@velocity& (0+255),w,b
 37147  008D4A  ECD8  F04A         	call	_sendOut
 37148  008D4E  0012               	return	
 37149  008D50                     __end_of_noteOnDrum:
 37150                           	opt stack 0
 37151                           tblptru	equ	0xFF8
 37152                           tblptrh	equ	0xFF7
 37153                           tblptrl	equ	0xFF6
 37154                           tablat	equ	0xFF5
 37155                           prodh	equ	0xFF4
 37156                           prodl	equ	0xFF3
 37157                           intcon	equ	0xFF2
 37158                           intcon2	equ	0xFF1
 37159                           postinc0	equ	0xFEE
 37160                           wreg	equ	0xFE8
 37161                           indf1	equ	0xFE7
 37162                           postdec1	equ	0xFE5
 37163                           fsr1h	equ	0xFE2
 37164                           fsr1l	equ	0xFE1
 37165                           indf2	equ	0xFDF
 37166                           postinc2	equ	0xFDE
 37167                           plusw2	equ	0xFDB
 37168                           fsr2h	equ	0xFDA
 37169                           fsr2l	equ	0xFD9
 37170                           status	equ	0xFD8
 37171                           
 37172 ;; *************** function _noteOffDrum *****************
 37173 ;; Defined at:
 37174 ;;		line 105 in file "midi.c"
 37175 ;; Parameters:    Size  Location     Type
 37176 ;;  channel         1    wreg     unsigned char 
 37177 ;;  pitch           1   11[BANK0 ] unsigned char 
 37178 ;;  velocity        1   12[BANK0 ] unsigned char 
 37179 ;; Auto vars:     Size  Location     Type
 37180 ;;  channel         1   13[BANK0 ] unsigned char 
 37181 ;; Return value:  Size  Location     Type
 37182 ;;                  1    wreg      void 
 37183 ;; Registers used:
 37184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37185 ;; Tracked objects:
 37186 ;;		On entry : 0/0
 37187 ;;		On exit  : 0/0
 37188 ;;		Unchanged: 0/0
 37189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37190 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37193 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37194 ;;Total ram usage:        3 bytes
 37195 ;; Hardware stack levels used:    1
 37196 ;; Hardware stack levels required when called:    6
 37197 ;; This function calls:
 37198 ;;		_sendOut
 37199 ;;		_sendUSB
 37200 ;; This function is called by:
 37201 ;;		_processDrumpad
 37202 ;; This function uses a non-reentrant model
 37203 ;;
 37204                           
 37205                           	psect	text110
 37206  0091F4                     __ptext110:
 37207                           	opt stack 0
 37208  0091F4                     _noteOffDrum:
 37209                           	opt stack 22
 37210                           
 37211                           ;incstack = 0
 37212                           ;noteOffDrum@channel stored from wreg
 37213  0091F4  0100               	movlb	0	; () banked
 37214  0091F6  6F6D               	movwf	noteOffDrum@channel& (0+255),b
 37215                           
 37216                           ;midi.c: 107: noteNumber = pitch;
 37217  0091F8  C06B  F0F4         	movff	noteOffDrum@pitch,_noteNumber
 37218                           
 37219                           ;midi.c: 108: statusByte = channel | note_off;
 37220  0091FC  0100               	movlb	0	; () banked
 37221  0091FE  516D               	movf	noteOffDrum@channel& (0+255),w,b
 37222  009200  0980               	iorlw	128
 37223  009202  6FF5               	movwf	_statusByte& (0+255),b
 37224                           
 37225                           ; BSR set to: 0
 37226                           ;midi.c: 111: sendUSB(statusByte, noteNumber, velocity);
 37227  009204  C0F4  F060         	movff	_noteNumber,sendUSB@message2
 37228  009208  C06C  F061         	movff	noteOffDrum@velocity,sendUSB@message3
 37229  00920C  51F5               	movf	_statusByte& (0+255),w,b
 37230  00920E  ECC0  F039         	call	_sendUSB
 37231                           
 37232                           ;midi.c: 114: sendOut(statusByte);
 37233  009212  0100               	movlb	0	; () banked
 37234  009214  51F5               	movf	_statusByte& (0+255),w,b
 37235  009216  ECD8  F04A         	call	_sendOut
 37236                           
 37237                           ;midi.c: 115: sendOut(noteNumber);
 37238  00921A  0100               	movlb	0	; () banked
 37239  00921C  51F4               	movf	_noteNumber& (0+255),w,b
 37240  00921E  ECD8  F04A         	call	_sendOut
 37241                           
 37242                           ;midi.c: 116: sendOut(velocity);
 37243  009222  0100               	movlb	0	; () banked
 37244  009224  516C               	movf	noteOffDrum@velocity& (0+255),w,b
 37245  009226  ECD8  F04A         	call	_sendOut
 37246  00922A  0012               	return		;funcret
 37247  00922C                     __end_of_noteOffDrum:
 37248                           	opt stack 0
 37249                           tblptru	equ	0xFF8
 37250                           tblptrh	equ	0xFF7
 37251                           tblptrl	equ	0xFF6
 37252                           tablat	equ	0xFF5
 37253                           prodh	equ	0xFF4
 37254                           prodl	equ	0xFF3
 37255                           intcon	equ	0xFF2
 37256                           intcon2	equ	0xFF1
 37257                           postinc0	equ	0xFEE
 37258                           wreg	equ	0xFE8
 37259                           indf1	equ	0xFE7
 37260                           postdec1	equ	0xFE5
 37261                           fsr1h	equ	0xFE2
 37262                           fsr1l	equ	0xFE1
 37263                           indf2	equ	0xFDF
 37264                           postinc2	equ	0xFDE
 37265                           plusw2	equ	0xFDB
 37266                           fsr2h	equ	0xFDA
 37267                           fsr2l	equ	0xFD9
 37268                           status	equ	0xFD8
 37269                           
 37270 ;; *************** function _keyboardTranspose *****************
 37271 ;; Defined at:
 37272 ;;		line 28 in file "octave.c"
 37273 ;; Parameters:    Size  Location     Type
 37274 ;;		None
 37275 ;; Auto vars:     Size  Location     Type
 37276 ;;		None
 37277 ;; Return value:  Size  Location     Type
 37278 ;;                  1    wreg      void 
 37279 ;; Registers used:
 37280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37281 ;; Tracked objects:
 37282 ;;		On entry : 0/0
 37283 ;;		On exit  : 0/0
 37284 ;;		Unchanged: 0/0
 37285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37290 ;;Total ram usage:        0 bytes
 37291 ;; Hardware stack levels used:    1
 37292 ;; Hardware stack levels required when called:    8
 37293 ;; This function calls:
 37294 ;;		_key_press_release_note_off
 37295 ;;		_printThisNumber
 37296 ;;		_wait_one_pulse
 37297 ;; This function is called by:
 37298 ;;		_digitalInputs
 37299 ;; This function uses a non-reentrant model
 37300 ;;
 37301                           
 37302                           	psect	text111
 37303  0042E8                     __ptext111:
 37304                           	opt stack 0
 37305  0042E8                     _keyboardTranspose:
 37306                           	opt stack 21
 37307                           
 37308                           ;octave.c: 30: static signed char semitone_temp;
 37309                           ;octave.c: 31: static __bit keyPress;
 37310                           ;octave.c: 33: if(button_state_now == (0x08000000 | 0x00000001))
 37311                           
 37312                           ;incstack = 0
 37313  0042E8  0100               	movlb	0	; () banked
 37314  0042EA  05D8               	decf	_button_state_now& (0+255),w,b
 37315  0042EC  E109               	bnz	l22175
 37316  0042EE  0E08               	movlw	8
 37317  0042F0  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37318  0042F2  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37319  0042F4  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37320  0042F6  A4D8               	btfss	status,2,c
 37321  0042F8  D003               	goto	l2719
 37322                           
 37323                           ; BSR set to: 0
 37324                           ;octave.c: 34: {
 37325                           ;octave.c: 35: semitone_temp = -12;
 37326  0042FA  0EF4               	movlw	244
 37327  0042FC  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37328                           
 37329                           ; BSR set to: 0
 37330                           ;octave.c: 36: keyPress = 1;
 37331  0042FE  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37332  004300                     l2719:
 37333  004300                     l22175:
 37334                           
 37335                           ; BSR set to: 0
 37336                           ;octave.c: 37: }
 37337                           ;octave.c: 38: if(button_state_now == (0x08000000 | 0x00000002))
 37338  004300  0E02               	movlw	2
 37339  004302  19D8               	xorwf	_button_state_now& (0+255),w,b
 37340  004304  E109               	bnz	l22181
 37341  004306  0E08               	movlw	8
 37342  004308  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37343  00430A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37344  00430C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37345  00430E  A4D8               	btfss	status,2,c
 37346  004310  D003               	goto	l2720
 37347                           
 37348                           ; BSR set to: 0
 37349                           ;octave.c: 39: {
 37350                           ;octave.c: 40: semitone_temp = -11;
 37351  004312  0EF5               	movlw	245
 37352  004314  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37353                           
 37354                           ; BSR set to: 0
 37355                           ;octave.c: 41: keyPress = 1;
 37356  004316  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37357  004318                     l2720:
 37358  004318                     l22181:
 37359                           
 37360                           ; BSR set to: 0
 37361                           ;octave.c: 42: }
 37362                           ;octave.c: 43: if(button_state_now == (0x08000000 | 0x00000004))
 37363  004318  0E04               	movlw	4
 37364  00431A  19D8               	xorwf	_button_state_now& (0+255),w,b
 37365  00431C  E109               	bnz	l22187
 37366  00431E  0E08               	movlw	8
 37367  004320  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37368  004322  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37369  004324  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37370  004326  A4D8               	btfss	status,2,c
 37371  004328  D003               	goto	l2721
 37372                           
 37373                           ; BSR set to: 0
 37374                           ;octave.c: 44: {
 37375                           ;octave.c: 45: semitone_temp = -10;
 37376  00432A  0EF6               	movlw	246
 37377  00432C  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37378                           
 37379                           ; BSR set to: 0
 37380                           ;octave.c: 46: keyPress = 1;
 37381  00432E  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37382  004330                     l2721:
 37383  004330                     l22187:
 37384                           
 37385                           ; BSR set to: 0
 37386                           ;octave.c: 47: }
 37387                           ;octave.c: 48: if(button_state_now == (0x08000000 | 0x00000008))
 37388  004330  0E08               	movlw	8
 37389  004332  19D8               	xorwf	_button_state_now& (0+255),w,b
 37390  004334  E109               	bnz	l22193
 37391  004336  0E08               	movlw	8
 37392  004338  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37393  00433A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37394  00433C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37395  00433E  A4D8               	btfss	status,2,c
 37396  004340  D003               	goto	l2722
 37397                           
 37398                           ; BSR set to: 0
 37399                           ;octave.c: 49: {
 37400                           ;octave.c: 50: semitone_temp = -9;
 37401  004342  0EF7               	movlw	247
 37402  004344  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37403                           
 37404                           ; BSR set to: 0
 37405                           ;octave.c: 51: keyPress = 1;
 37406  004346  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37407  004348                     l2722:
 37408  004348                     l22193:
 37409                           
 37410                           ; BSR set to: 0
 37411                           ;octave.c: 52: }
 37412                           ;octave.c: 53: if(button_state_now == (0x08000000 | 0x00000010))
 37413  004348  0E10               	movlw	16
 37414  00434A  19D8               	xorwf	_button_state_now& (0+255),w,b
 37415  00434C  E109               	bnz	l22199
 37416  00434E  0E08               	movlw	8
 37417  004350  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37418  004352  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37419  004354  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37420  004356  A4D8               	btfss	status,2,c
 37421  004358  D003               	goto	l2723
 37422                           
 37423                           ; BSR set to: 0
 37424                           ;octave.c: 54: {
 37425                           ;octave.c: 55: semitone_temp = -8;
 37426  00435A  0EF8               	movlw	248
 37427  00435C  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37428                           
 37429                           ; BSR set to: 0
 37430                           ;octave.c: 56: keyPress = 1;
 37431  00435E  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37432  004360                     l2723:
 37433  004360                     l22199:
 37434                           
 37435                           ; BSR set to: 0
 37436                           ;octave.c: 57: }
 37437                           ;octave.c: 58: if(button_state_now == (0x08000000 | 0x00000020))
 37438  004360  0E20               	movlw	32
 37439  004362  19D8               	xorwf	_button_state_now& (0+255),w,b
 37440  004364  E109               	bnz	l22205
 37441  004366  0E08               	movlw	8
 37442  004368  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37443  00436A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37444  00436C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37445  00436E  A4D8               	btfss	status,2,c
 37446  004370  D003               	goto	l2724
 37447                           
 37448                           ; BSR set to: 0
 37449                           ;octave.c: 59: {
 37450                           ;octave.c: 60: semitone_temp = -7;
 37451  004372  0EF9               	movlw	249
 37452  004374  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37453                           
 37454                           ; BSR set to: 0
 37455                           ;octave.c: 61: keyPress = 1;
 37456  004376  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37457  004378                     l2724:
 37458  004378                     l22205:
 37459                           
 37460                           ; BSR set to: 0
 37461                           ;octave.c: 62: }
 37462                           ;octave.c: 63: if(button_state_now == (0x08000000 | 0x00000040))
 37463  004378  0E40               	movlw	64
 37464  00437A  19D8               	xorwf	_button_state_now& (0+255),w,b
 37465  00437C  E109               	bnz	l22211
 37466  00437E  0E08               	movlw	8
 37467  004380  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37468  004382  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37469  004384  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37470  004386  A4D8               	btfss	status,2,c
 37471  004388  D003               	goto	l2725
 37472                           
 37473                           ; BSR set to: 0
 37474                           ;octave.c: 64: {
 37475                           ;octave.c: 65: semitone_temp = -6;
 37476  00438A  0EFA               	movlw	250
 37477  00438C  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37478                           
 37479                           ; BSR set to: 0
 37480                           ;octave.c: 66: keyPress = 1;
 37481  00438E  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37482  004390                     l2725:
 37483  004390                     l22211:
 37484                           
 37485                           ; BSR set to: 0
 37486                           ;octave.c: 67: }
 37487                           ;octave.c: 68: if(button_state_now == (0x08000000 | 0x00000080))
 37488  004390  0E80               	movlw	128
 37489  004392  19D8               	xorwf	_button_state_now& (0+255),w,b
 37490  004394  E109               	bnz	l22217
 37491  004396  0E08               	movlw	8
 37492  004398  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37493  00439A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37494  00439C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37495  00439E  A4D8               	btfss	status,2,c
 37496  0043A0  D003               	goto	l2726
 37497                           
 37498                           ; BSR set to: 0
 37499                           ;octave.c: 69: {
 37500                           ;octave.c: 70: semitone_temp = -5;
 37501  0043A2  0EFB               	movlw	251
 37502  0043A4  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37503                           
 37504                           ; BSR set to: 0
 37505                           ;octave.c: 71: keyPress = 1;
 37506  0043A6  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37507  0043A8                     l2726:
 37508  0043A8                     l22217:
 37509                           
 37510                           ; BSR set to: 0
 37511                           ;octave.c: 72: }
 37512                           ;octave.c: 73: if(button_state_now == (0x08000000 | 0x00000100))
 37513  0043A8  05D9               	decf	(_button_state_now+1)& (0+255),w,b
 37514  0043AA  E109               	bnz	l22223
 37515  0043AC  0E08               	movlw	8
 37516  0043AE  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37517  0043B0  11D8               	iorwf	_button_state_now& (0+255),w,b
 37518  0043B2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37519  0043B4  A4D8               	btfss	status,2,c
 37520  0043B6  D003               	goto	l2727
 37521                           
 37522                           ; BSR set to: 0
 37523                           ;octave.c: 74: {
 37524                           ;octave.c: 75: semitone_temp = -4;
 37525  0043B8  0EFC               	movlw	252
 37526  0043BA  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37527                           
 37528                           ; BSR set to: 0
 37529                           ;octave.c: 76: keyPress = 1;
 37530  0043BC  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37531  0043BE                     l2727:
 37532  0043BE                     l22223:
 37533                           
 37534                           ; BSR set to: 0
 37535                           ;octave.c: 77: }
 37536                           ;octave.c: 78: if(button_state_now == (0x08000000 | 0x00000200))
 37537  0043BE  0E02               	movlw	2
 37538  0043C0  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37539  0043C2  E109               	bnz	l22229
 37540  0043C4  0E08               	movlw	8
 37541  0043C6  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37542  0043C8  11D8               	iorwf	_button_state_now& (0+255),w,b
 37543  0043CA  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37544  0043CC  A4D8               	btfss	status,2,c
 37545  0043CE  D003               	goto	l2728
 37546                           
 37547                           ; BSR set to: 0
 37548                           ;octave.c: 79: {
 37549                           ;octave.c: 80: semitone_temp = -3;
 37550  0043D0  0EFD               	movlw	253
 37551  0043D2  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37552                           
 37553                           ; BSR set to: 0
 37554                           ;octave.c: 81: keyPress = 1;
 37555  0043D4  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37556  0043D6                     l2728:
 37557  0043D6                     l22229:
 37558                           
 37559                           ; BSR set to: 0
 37560                           ;octave.c: 82: }
 37561                           ;octave.c: 83: if(button_state_now == (0x08000000 | 0x00000400))
 37562  0043D6  0E04               	movlw	4
 37563  0043D8  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37564  0043DA  E109               	bnz	l22235
 37565  0043DC  0E08               	movlw	8
 37566  0043DE  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37567  0043E0  11D8               	iorwf	_button_state_now& (0+255),w,b
 37568  0043E2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37569  0043E4  A4D8               	btfss	status,2,c
 37570  0043E6  D003               	goto	l2729
 37571                           
 37572                           ; BSR set to: 0
 37573                           ;octave.c: 84: {
 37574                           ;octave.c: 85: semitone_temp = -2;
 37575  0043E8  0EFE               	movlw	254
 37576  0043EA  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37577                           
 37578                           ; BSR set to: 0
 37579                           ;octave.c: 86: keyPress = 1;
 37580  0043EC  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37581  0043EE                     l2729:
 37582  0043EE                     l22235:
 37583                           
 37584                           ; BSR set to: 0
 37585                           ;octave.c: 87: }
 37586                           ;octave.c: 88: if(button_state_now == (0x08000000 | 0x00000800))
 37587  0043EE  0E08               	movlw	8
 37588  0043F0  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37589  0043F2  E108               	bnz	l22239
 37590  0043F4  0E08               	movlw	8
 37591  0043F6  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37592  0043F8  11D8               	iorwf	_button_state_now& (0+255),w,b
 37593  0043FA  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37594  0043FC  A4D8               	btfss	status,2,c
 37595  0043FE  D002               	goto	l2730
 37596                           
 37597                           ; BSR set to: 0
 37598                           ;octave.c: 89: {
 37599                           ;octave.c: 90: semitone_temp = -1;
 37600  004400  6853               	setf	keyboardTranspose@semitone_temp,c
 37601                           
 37602                           ;octave.c: 91: keyPress = 1;
 37603  004402  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37604  004404                     l2730:
 37605  004404                     l22239:
 37606                           
 37607                           ; BSR set to: 0
 37608                           ;octave.c: 92: }
 37609                           ;octave.c: 93: if(button_state_now == (0x08000000 | 0x00001000))
 37610  004404  0E10               	movlw	16
 37611  004406  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37612  004408  E109               	bnz	l22245
 37613  00440A  0E08               	movlw	8
 37614  00440C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37615  00440E  11D8               	iorwf	_button_state_now& (0+255),w,b
 37616  004410  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37617  004412  A4D8               	btfss	status,2,c
 37618  004414  D003               	goto	l2731
 37619                           
 37620                           ; BSR set to: 0
 37621                           ;octave.c: 94: {
 37622                           ;octave.c: 95: semitone_temp = 0;
 37623  004416  0E00               	movlw	0
 37624  004418  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37625                           
 37626                           ; BSR set to: 0
 37627                           ;octave.c: 96: keyPress = 1;
 37628  00441A  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37629  00441C                     l2731:
 37630  00441C                     l22245:
 37631                           
 37632                           ; BSR set to: 0
 37633                           ;octave.c: 97: }
 37634                           ;octave.c: 98: if(button_state_now == (0x08000000 | 0x00002000))
 37635  00441C  0E20               	movlw	32
 37636  00441E  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37637  004420  E109               	bnz	l22251
 37638  004422  0E08               	movlw	8
 37639  004424  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37640  004426  11D8               	iorwf	_button_state_now& (0+255),w,b
 37641  004428  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37642  00442A  A4D8               	btfss	status,2,c
 37643  00442C  D003               	goto	l2732
 37644                           
 37645                           ; BSR set to: 0
 37646                           ;octave.c: 99: {
 37647                           ;octave.c: 100: semitone_temp = 1;
 37648  00442E  0E01               	movlw	1
 37649  004430  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37650                           
 37651                           ; BSR set to: 0
 37652                           ;octave.c: 101: keyPress = 1;
 37653  004432  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37654  004434                     l2732:
 37655  004434                     l22251:
 37656                           
 37657                           ; BSR set to: 0
 37658                           ;octave.c: 102: }
 37659                           ;octave.c: 103: if(button_state_now == (0x08000000 | 0x00004000))
 37660  004434  0E40               	movlw	64
 37661  004436  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37662  004438  E109               	bnz	l22257
 37663  00443A  0E08               	movlw	8
 37664  00443C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37665  00443E  11D8               	iorwf	_button_state_now& (0+255),w,b
 37666  004440  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37667  004442  A4D8               	btfss	status,2,c
 37668  004444  D003               	goto	l2733
 37669                           
 37670                           ; BSR set to: 0
 37671                           ;octave.c: 104: {
 37672                           ;octave.c: 105: semitone_temp = 2;
 37673  004446  0E02               	movlw	2
 37674  004448  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37675                           
 37676                           ; BSR set to: 0
 37677                           ;octave.c: 106: keyPress = 1;
 37678  00444A  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37679  00444C                     l2733:
 37680  00444C                     l22257:
 37681                           
 37682                           ; BSR set to: 0
 37683                           ;octave.c: 107: }
 37684                           ;octave.c: 108: if(button_state_now == (0x08000000 | 0x00008000))
 37685  00444C  0E80               	movlw	128
 37686  00444E  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37687  004450  E109               	bnz	l22263
 37688  004452  0E08               	movlw	8
 37689  004454  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37690  004456  11D8               	iorwf	_button_state_now& (0+255),w,b
 37691  004458  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37692  00445A  A4D8               	btfss	status,2,c
 37693  00445C  D003               	goto	l2734
 37694                           
 37695                           ; BSR set to: 0
 37696                           ;octave.c: 109: {
 37697                           ;octave.c: 110: semitone_temp = 3;
 37698  00445E  0E03               	movlw	3
 37699  004460  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37700                           
 37701                           ; BSR set to: 0
 37702                           ;octave.c: 111: keyPress = 1;
 37703  004462  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37704  004464                     l2734:
 37705  004464                     l22263:
 37706                           
 37707                           ; BSR set to: 0
 37708                           ;octave.c: 112: }
 37709                           ;octave.c: 113: if(button_state_now == (0x08000000 | 0x00010000))
 37710  004464  05DA               	decf	(_button_state_now+2)& (0+255),w,b
 37711  004466  E109               	bnz	l22269
 37712  004468  0E08               	movlw	8
 37713  00446A  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37714  00446C  11D8               	iorwf	_button_state_now& (0+255),w,b
 37715  00446E  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37716  004470  A4D8               	btfss	status,2,c
 37717  004472  D003               	goto	l2735
 37718                           
 37719                           ; BSR set to: 0
 37720                           ;octave.c: 114: {
 37721                           ;octave.c: 115: semitone_temp = 4;
 37722  004474  0E04               	movlw	4
 37723  004476  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37724                           
 37725                           ; BSR set to: 0
 37726                           ;octave.c: 116: keyPress = 1;
 37727  004478  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37728  00447A                     l2735:
 37729  00447A                     l22269:
 37730                           
 37731                           ; BSR set to: 0
 37732                           ;octave.c: 117: }
 37733                           ;octave.c: 118: if(button_state_now == (0x08000000 | 0x00020000))
 37734  00447A  0E02               	movlw	2
 37735  00447C  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37736  00447E  E109               	bnz	l22275
 37737  004480  0E08               	movlw	8
 37738  004482  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37739  004484  11D8               	iorwf	_button_state_now& (0+255),w,b
 37740  004486  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37741  004488  A4D8               	btfss	status,2,c
 37742  00448A  D003               	goto	l2736
 37743                           
 37744                           ; BSR set to: 0
 37745                           ;octave.c: 119: {
 37746                           ;octave.c: 120: semitone_temp = 5;
 37747  00448C  0E05               	movlw	5
 37748  00448E  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37749                           
 37750                           ; BSR set to: 0
 37751                           ;octave.c: 121: keyPress = 1;
 37752  004490  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37753  004492                     l2736:
 37754  004492                     l22275:
 37755                           
 37756                           ; BSR set to: 0
 37757                           ;octave.c: 122: }
 37758                           ;octave.c: 123: if(button_state_now == (0x08000000 | 0x00040000))
 37759  004492  0E04               	movlw	4
 37760  004494  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37761  004496  E109               	bnz	l22281
 37762  004498  0E08               	movlw	8
 37763  00449A  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37764  00449C  11D8               	iorwf	_button_state_now& (0+255),w,b
 37765  00449E  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37766  0044A0  A4D8               	btfss	status,2,c
 37767  0044A2  D003               	goto	l2737
 37768                           
 37769                           ; BSR set to: 0
 37770                           ;octave.c: 124: {
 37771                           ;octave.c: 125: semitone_temp = 6;
 37772  0044A4  0E06               	movlw	6
 37773  0044A6  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37774                           
 37775                           ; BSR set to: 0
 37776                           ;octave.c: 126: keyPress = 1;
 37777  0044A8  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37778  0044AA                     l2737:
 37779  0044AA                     l22281:
 37780                           
 37781                           ; BSR set to: 0
 37782                           ;octave.c: 127: }
 37783                           ;octave.c: 128: if(button_state_now == (0x08000000 | 0x00080000))
 37784  0044AA  0E08               	movlw	8
 37785  0044AC  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37786  0044AE  E109               	bnz	l22287
 37787  0044B0  0E08               	movlw	8
 37788  0044B2  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37789  0044B4  11D8               	iorwf	_button_state_now& (0+255),w,b
 37790  0044B6  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37791  0044B8  A4D8               	btfss	status,2,c
 37792  0044BA  D003               	goto	l2738
 37793                           
 37794                           ; BSR set to: 0
 37795                           ;octave.c: 129: {
 37796                           ;octave.c: 130: semitone_temp = 7;
 37797  0044BC  0E07               	movlw	7
 37798  0044BE  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37799                           
 37800                           ; BSR set to: 0
 37801                           ;octave.c: 131: keyPress = 1;
 37802  0044C0  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37803  0044C2                     l2738:
 37804  0044C2                     l22287:
 37805                           
 37806                           ; BSR set to: 0
 37807                           ;octave.c: 132: }
 37808                           ;octave.c: 133: if(button_state_now == (0x08000000 | 0x00100000))
 37809  0044C2  0E10               	movlw	16
 37810  0044C4  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37811  0044C6  E109               	bnz	l22293
 37812  0044C8  0E08               	movlw	8
 37813  0044CA  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37814  0044CC  11D8               	iorwf	_button_state_now& (0+255),w,b
 37815  0044CE  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37816  0044D0  A4D8               	btfss	status,2,c
 37817  0044D2  D003               	goto	l2739
 37818                           
 37819                           ; BSR set to: 0
 37820                           ;octave.c: 134: {
 37821                           ;octave.c: 135: semitone_temp = 8;
 37822  0044D4  0E08               	movlw	8
 37823  0044D6  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37824                           
 37825                           ; BSR set to: 0
 37826                           ;octave.c: 136: keyPress = 1;
 37827  0044D8  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37828  0044DA                     l2739:
 37829  0044DA                     l22293:
 37830                           
 37831                           ; BSR set to: 0
 37832                           ;octave.c: 137: }
 37833                           ;octave.c: 138: if(button_state_now == (0x08000000 | 0x00200000))
 37834  0044DA  0E20               	movlw	32
 37835  0044DC  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37836  0044DE  E109               	bnz	l22299
 37837  0044E0  0E08               	movlw	8
 37838  0044E2  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37839  0044E4  11D8               	iorwf	_button_state_now& (0+255),w,b
 37840  0044E6  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37841  0044E8  A4D8               	btfss	status,2,c
 37842  0044EA  D003               	goto	l2740
 37843                           
 37844                           ; BSR set to: 0
 37845                           ;octave.c: 139: {
 37846                           ;octave.c: 140: semitone_temp = 9;
 37847  0044EC  0E09               	movlw	9
 37848  0044EE  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37849                           
 37850                           ; BSR set to: 0
 37851                           ;octave.c: 141: keyPress = 1;
 37852  0044F0  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37853  0044F2                     l2740:
 37854  0044F2                     l22299:
 37855                           
 37856                           ; BSR set to: 0
 37857                           ;octave.c: 142: }
 37858                           ;octave.c: 143: if(button_state_now == (0x08000000 | 0x00400000))
 37859  0044F2  0E40               	movlw	64
 37860  0044F4  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37861  0044F6  E109               	bnz	l22305
 37862  0044F8  0E08               	movlw	8
 37863  0044FA  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37864  0044FC  11D8               	iorwf	_button_state_now& (0+255),w,b
 37865  0044FE  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37866  004500  A4D8               	btfss	status,2,c
 37867  004502  D003               	goto	l2741
 37868                           
 37869                           ; BSR set to: 0
 37870                           ;octave.c: 144: {
 37871                           ;octave.c: 145: semitone_temp = 10;
 37872  004504  0E0A               	movlw	10
 37873  004506  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37874                           
 37875                           ; BSR set to: 0
 37876                           ;octave.c: 146: keyPress = 1;
 37877  004508  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37878  00450A                     l2741:
 37879  00450A                     l22305:
 37880                           
 37881                           ; BSR set to: 0
 37882                           ;octave.c: 147: }
 37883                           ;octave.c: 148: if(button_state_now == (0x08000000 | 0x00800000))
 37884  00450A  0E80               	movlw	128
 37885  00450C  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37886  00450E  E109               	bnz	l22311
 37887  004510  0E08               	movlw	8
 37888  004512  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37889  004514  11D8               	iorwf	_button_state_now& (0+255),w,b
 37890  004516  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37891  004518  A4D8               	btfss	status,2,c
 37892  00451A  D003               	goto	l2742
 37893                           
 37894                           ; BSR set to: 0
 37895                           ;octave.c: 149: {
 37896                           ;octave.c: 150: semitone_temp = 11;
 37897  00451C  0E0B               	movlw	11
 37898  00451E  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37899                           
 37900                           ; BSR set to: 0
 37901                           ;octave.c: 151: keyPress = 1;
 37902  004520  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37903  004522                     l2742:
 37904  004522                     l22311:
 37905                           
 37906                           ; BSR set to: 0
 37907                           ;octave.c: 152: }
 37908                           ;octave.c: 153: if(button_state_now == (0x08000000 | 0x01000000))
 37909  004522  0E09               	movlw	9
 37910  004524  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37911  004526  11D8               	iorwf	_button_state_now& (0+255),w,b
 37912  004528  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37913  00452A  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37914  00452C  A4D8               	btfss	status,2,c
 37915  00452E  D003               	goto	l2743
 37916                           
 37917                           ; BSR set to: 0
 37918                           ;octave.c: 154: {
 37919                           ;octave.c: 155: semitone_temp = 12;
 37920  004530  0E0C               	movlw	12
 37921  004532  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37922                           
 37923                           ; BSR set to: 0
 37924                           ;octave.c: 156: keyPress = 1;
 37925  004534  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37926  004536                     l2743:
 37927                           
 37928                           ; BSR set to: 0
 37929                           ;octave.c: 157: }
 37930                           ;octave.c: 159: if(keyPress == 1) {
 37931                           
 37932                           ; BSR set to: 0
 37933  004536  A632               	btfss	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37934  004538  0012               	return	
 37935                           
 37936                           ; BSR set to: 0
 37937                           ;octave.c: 162: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 37938  00453A  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 37939  00453C  D00E               	goto	l2745
 37940                           
 37941                           ; BSR set to: 0
 37942  00453E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 37943  004540  B4D8               	btfsc	status,2,c
 37944  004542  D00B               	goto	l2745
 37945                           
 37946                           ; BSR set to: 0
 37947                           ;octave.c: 165: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 37948  004544  0E00               	movlw	0
 37949  004546  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 37950  004548  0E01               	movlw	1
 37951  00454A  EC0B  F04A         	call	_wait_one_pulse
 37952                           
 37953                           ;octave.c: 169: if(note_off_was_sent == 0) {key_press_release_note_off();}
 37954  00454E  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 37955  004550  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 37956                           
 37957                           ;octave.c: 172: suppress_note_off = 1;
 37958  004554  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 37959                           
 37960                           ;octave.c: 174: flag1 = 1;
 37961  004556  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 37962                           
 37963                           ;octave.c: 176: flag2 = 1;
 37964  004558  8E32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 37965  00455A                     l2745:
 37966                           
 37967                           ;octave.c: 177: }
 37968                           ;octave.c: 180: if (semitone_temp > 12) {semitone_temp = 12;}
 37969  00455A  5053               	movf	keyboardTranspose@semitone_temp,w,c
 37970  00455C  0A80               	xorlw	128
 37971  00455E  0F73               	addlw	-141
 37972  004560  A0D8               	btfss	status,0,c
 37973  004562  D002               	goto	l2747
 37974  004564  0E0C               	movlw	12
 37975  004566  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37976  004568                     l2747:
 37977                           
 37978                           ;octave.c: 181: if (semitone_temp < -12) {semitone_temp = -12;}
 37979  004568  5053               	movf	keyboardTranspose@semitone_temp,w,c
 37980  00456A  0A80               	xorlw	128
 37981  00456C  0F8C               	addlw	140
 37982  00456E  B0D8               	btfsc	status,0,c
 37983  004570  D002               	goto	l2748
 37984  004572  0EF4               	movlw	244
 37985  004574  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37986  004576                     l2748:
 37987                           
 37988                           ;octave.c: 182: semitone = semitone_temp;
 37989  004576  C053  F0F3         	movff	keyboardTranspose@semitone_temp,_semitone
 37990                           
 37991                           ;octave.c: 183: printThisNumber(semitone);
 37992  00457A  0100               	movlb	0	; () banked
 37993  00457C  51F3               	movf	_semitone& (0+255),w,b
 37994  00457E  6F60               	movwf	printThisNumber@n& (0+255),b
 37995  004580  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 37996  004582  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 37997  004584  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 37998  004586  EC16  F04B         	call	_printThisNumber	;wreg free
 37999                           
 38000                           ;octave.c: 184: keyPress = 0;
 38001  00458A  9632               	bcf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 38002  00458C  0012               	return	
 38003  00458E                     __end_of_keyboardTranspose:
 38004                           	opt stack 0
 38005                           tblptru	equ	0xFF8
 38006                           tblptrh	equ	0xFF7
 38007                           tblptrl	equ	0xFF6
 38008                           tablat	equ	0xFF5
 38009                           prodh	equ	0xFF4
 38010                           prodl	equ	0xFF3
 38011                           intcon	equ	0xFF2
 38012                           intcon2	equ	0xFF1
 38013                           postinc0	equ	0xFEE
 38014                           wreg	equ	0xFE8
 38015                           indf1	equ	0xFE7
 38016                           postdec1	equ	0xFE5
 38017                           fsr1h	equ	0xFE2
 38018                           fsr1l	equ	0xFE1
 38019                           indf2	equ	0xFDF
 38020                           postinc2	equ	0xFDE
 38021                           plusw2	equ	0xFDB
 38022                           fsr2h	equ	0xFDA
 38023                           fsr2l	equ	0xFD9
 38024                           status	equ	0xFD8
 38025                           
 38026 ;; *************** function _wait_one_pulse *****************
 38027 ;; Defined at:
 38028 ;;		line 20 in file "arpeggio.c"
 38029 ;; Parameters:    Size  Location     Type
 38030 ;;  mode            1    wreg     unsigned char 
 38031 ;; Auto vars:     Size  Location     Type
 38032 ;;  mode            1    0[BANK0 ] unsigned char 
 38033 ;; Return value:  Size  Location     Type
 38034 ;;                  1    wreg      void 
 38035 ;; Registers used:
 38036 ;;		wreg, status,2
 38037 ;; Tracked objects:
 38038 ;;		On entry : 0/0
 38039 ;;		On exit  : 0/0
 38040 ;;		Unchanged: 0/0
 38041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38045 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38046 ;;Total ram usage:        1 bytes
 38047 ;; Hardware stack levels used:    1
 38048 ;; Hardware stack levels required when called:    5
 38049 ;; This function calls:
 38050 ;;		Nothing
 38051 ;; This function is called by:
 38052 ;;		_playThisNotePentatonic
 38053 ;;		_playTriad
 38054 ;;		_playSeventh
 38055 ;;		_playThisNote
 38056 ;;		_playThisNote8
 38057 ;;		_playDiatonicTriadMajor
 38058 ;;		_playDiatonicSeventhMajor
 38059 ;;		_playDiatonicTriadMinor
 38060 ;;		_playDiatonicSeventhMinor
 38061 ;;		_keyboardTranspose
 38062 ;;		_processOctave
 38063 ;; This function uses a non-reentrant model
 38064 ;;
 38065                           
 38066                           	psect	text112
 38067  009416                     __ptext112:
 38068                           	opt stack 0
 38069  009416                     _wait_one_pulse:
 38070                           	opt stack 19
 38071                           
 38072                           ;incstack = 0
 38073                           ;wait_one_pulse@mode stored from wreg
 38074  009416  0100               	movlb	0	; () banked
 38075  009418  6F60               	movwf	wait_one_pulse@mode& (0+255),b
 38076                           
 38077                           ;arpeggio.c: 22: lastNoteMode = mode;
 38078  00941A  0100               	movlb	0	; () banked
 38079  00941C  A160               	btfss	wait_one_pulse@mode& (0+255),0,b
 38080  00941E  D002               	goto	u22860
 38081  009420  8634               	bsf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 38082  009422  D001               	goto	u22875
 38083  009424                     u22860:
 38084  009424  9634               	bcf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 38085  009426                     u22875:
 38086                           
 38087                           ;arpeggio.c: 25: if(lastNoteMode == 0) {
 38088  009426  B634               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 38089  009428  D004               	goto	l5189
 38090                           
 38091                           ;arpeggio.c: 26: finishLastNote = 0;
 38092  00942A  9C33               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 38093                           
 38094                           ;arpeggio.c: 27: TIMER_OVERFLOWS = 0;
 38095  00942C  0E00               	movlw	0
 38096  00942E  6E54               	movwf	_TIMER_OVERFLOWS,c
 38097                           
 38098                           ;arpeggio.c: 28: return;
 38099  009430  0012               	return	
 38100  009432                     l5189:
 38101                           
 38102                           ;arpeggio.c: 29: }
 38103                           ;arpeggio.c: 32: if(lastNoteMode == 1) {
 38104  009432  A634               	btfss	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 38105  009434  0012               	return	
 38106                           
 38107                           ;arpeggio.c: 33: finishLastNote = 1;
 38108  009436  8C33               	bsf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 38109                           
 38110                           ;arpeggio.c: 34: TMR0ON = 1;
 38111  009438  8ED5               	bsf	4053,7,c	;volatile
 38112  00943A  AC33               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 38113  00943C  0012               	return	
 38114  00943E  D7FD               	goto	l5193
 38115  009440                     __end_of_wait_one_pulse:
 38116                           	opt stack 0
 38117                           tblptru	equ	0xFF8
 38118                           tblptrh	equ	0xFF7
 38119                           tblptrl	equ	0xFF6
 38120                           tablat	equ	0xFF5
 38121                           prodh	equ	0xFF4
 38122                           prodl	equ	0xFF3
 38123                           intcon	equ	0xFF2
 38124                           intcon2	equ	0xFF1
 38125                           postinc0	equ	0xFEE
 38126                           wreg	equ	0xFE8
 38127                           indf1	equ	0xFE7
 38128                           postdec1	equ	0xFE5
 38129                           fsr1h	equ	0xFE2
 38130                           fsr1l	equ	0xFE1
 38131                           indf2	equ	0xFDF
 38132                           postinc2	equ	0xFDE
 38133                           plusw2	equ	0xFDB
 38134                           fsr2h	equ	0xFDA
 38135                           fsr2l	equ	0xFD9
 38136                           status	equ	0xFD8
 38137                           
 38138 ;; *************** function _printThisNumber *****************
 38139 ;; Defined at:
 38140 ;;		line 21 in file "octave.c"
 38141 ;; Parameters:    Size  Location     Type
 38142 ;;  n               2    0[BANK0 ] int 
 38143 ;; Auto vars:     Size  Location     Type
 38144 ;;		None
 38145 ;; Return value:  Size  Location     Type
 38146 ;;                  1    wreg      void 
 38147 ;; Registers used:
 38148 ;;		wreg, status,2
 38149 ;; Tracked objects:
 38150 ;;		On entry : 0/0
 38151 ;;		On exit  : 0/0
 38152 ;;		Unchanged: 0/0
 38153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38154 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38157 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38158 ;;Total ram usage:        2 bytes
 38159 ;; Hardware stack levels used:    1
 38160 ;; Hardware stack levels required when called:    5
 38161 ;; This function calls:
 38162 ;;		Nothing
 38163 ;; This function is called by:
 38164 ;;		_keyboardTranspose
 38165 ;;		_processOctave
 38166 ;; This function uses a non-reentrant model
 38167 ;;
 38168                           
 38169                           	psect	text113
 38170  00962C                     __ptext113:
 38171                           	opt stack 0
 38172  00962C                     _printThisNumber:
 38173                           	opt stack 23
 38174                           
 38175                           ;octave.c: 22: DISPLAY_MODE = 0;
 38176                           
 38177                           ;incstack = 0
 38178  00962C  0E00               	movlw	0
 38179  00962E  6E5A               	movwf	_DISPLAY_MODE,c
 38180                           
 38181                           ;octave.c: 23: DIGIT_MODE = 0;
 38182  009630  0E00               	movlw	0
 38183  009632  6E59               	movwf	_DIGIT_MODE,c
 38184                           
 38185                           ;octave.c: 24: number_to_display = n;
 38186  009634  C060  F05B         	movff	printThisNumber@n,_number_to_display
 38187  009638  C061  F05C         	movff	printThisNumber@n+1,_number_to_display+1
 38188  00963C  0012               	return		;funcret
 38189  00963E                     __end_of_printThisNumber:
 38190                           	opt stack 0
 38191                           tblptru	equ	0xFF8
 38192                           tblptrh	equ	0xFF7
 38193                           tblptrl	equ	0xFF6
 38194                           tablat	equ	0xFF5
 38195                           prodh	equ	0xFF4
 38196                           prodl	equ	0xFF3
 38197                           intcon	equ	0xFF2
 38198                           intcon2	equ	0xFF1
 38199                           postinc0	equ	0xFEE
 38200                           wreg	equ	0xFE8
 38201                           indf1	equ	0xFE7
 38202                           postdec1	equ	0xFE5
 38203                           fsr1h	equ	0xFE2
 38204                           fsr1l	equ	0xFE1
 38205                           indf2	equ	0xFDF
 38206                           postinc2	equ	0xFDE
 38207                           plusw2	equ	0xFDB
 38208                           fsr2h	equ	0xFDA
 38209                           fsr2l	equ	0xFD9
 38210                           status	equ	0xFD8
 38211                           
 38212 ;; *************** function _key_press_release_note_off *****************
 38213 ;; Defined at:
 38214 ;;		line 110 in file "arpeggio.c"
 38215 ;; Parameters:    Size  Location     Type
 38216 ;;		None
 38217 ;; Auto vars:     Size  Location     Type
 38218 ;;		None
 38219 ;; Return value:  Size  Location     Type
 38220 ;;                  1    wreg      void 
 38221 ;; Registers used:
 38222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 38223 ;; Tracked objects:
 38224 ;;		On entry : 0/0
 38225 ;;		On exit  : 0/0
 38226 ;;		Unchanged: 0/0
 38227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38232 ;;Total ram usage:        0 bytes
 38233 ;; Hardware stack levels used:    1
 38234 ;; Hardware stack levels required when called:    7
 38235 ;; This function calls:
 38236 ;;		_noteOff
 38237 ;; This function is called by:
 38238 ;;		_playThisNotePentatonic
 38239 ;;		_playTriad
 38240 ;;		_playSeventh
 38241 ;;		_playThisNote
 38242 ;;		_playThisNote8
 38243 ;;		_playDiatonicTriadMajor
 38244 ;;		_playDiatonicSeventhMajor
 38245 ;;		_playDiatonicTriadMinor
 38246 ;;		_playDiatonicSeventhMinor
 38247 ;;		_keyboardTranspose
 38248 ;;		_processOctave
 38249 ;; This function uses a non-reentrant model
 38250 ;;
 38251                           
 38252                           	psect	text114
 38253  005B92                     __ptext114:
 38254                           	opt stack 0
 38255  005B92                     _key_press_release_note_off:
 38256                           	opt stack 17
 38257                           
 38258                           ;arpeggio.c: 113: if((startingDirection == UP) && (ARPEGGIO_TYPE == DOWN_UP)){stored_oct
      +                          ave += (OCTAVES - 1);}
 38259                           
 38260                           ;incstack = 0
 38261  005B92  0100               	movlb	0	; () banked
 38262  005B94  51E9               	movf	_startingDirection& (0+255),w,b
 38263  005B96  A4D8               	btfss	status,2,c
 38264  005B98  D006               	goto	l5214
 38265                           
 38266                           ; BSR set to: 0
 38267  005B9A  0E03               	movlw	3
 38268  005B9C  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 38269  005B9E  A4D8               	btfss	status,2,c
 38270  005BA0  D002               	goto	l5214
 38271                           
 38272                           ; BSR set to: 0
 38273  005BA2  05F8               	decf	_OCTAVES& (0+255),w,b
 38274  005BA4  27E7               	addwf	_stored_octave& (0+255),f,b
 38275  005BA6                     l5214:
 38276                           
 38277                           ; BSR set to: 0
 38278                           ;arpeggio.c: 115: if((startingDirection == DOWN) && (ARPEGGIO_TYPE == UP_DOWN)){stored_o
      +                          ctave -= (OCTAVES - 1);}
 38279  005BA6  05E9               	decf	_startingDirection& (0+255),w,b
 38280  005BA8  A4D8               	btfss	status,2,c
 38281  005BAA  D006               	goto	l5215
 38282                           
 38283                           ; BSR set to: 0
 38284  005BAC  0E02               	movlw	2
 38285  005BAE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 38286  005BB0  A4D8               	btfss	status,2,c
 38287  005BB2  D002               	goto	l5215
 38288                           
 38289                           ; BSR set to: 0
 38290  005BB4  05F8               	decf	_OCTAVES& (0+255),w,b
 38291  005BB6  5FE7               	subwf	_stored_octave& (0+255),f,b
 38292  005BB8                     l5215:
 38293                           
 38294                           ; BSR set to: 0
 38295                           ;arpeggio.c: 117: TMR0ON = 0;
 38296                           
 38297                           ; BSR set to: 0
 38298  005BB8  9ED5               	bcf	4053,7,c	;volatile
 38299                           
 38300                           ; BSR set to: 0
 38301                           ;arpeggio.c: 120: static signed char temp;
 38302                           ;arpeggio.c: 121: temp = last_note;
 38303  005BBA  C0E8  F0E2         	movff	_last_note,key_press_release_note_off@temp
 38304                           
 38305                           ; BSR set to: 0
 38306                           ;arpeggio.c: 124: if((last_note != 0)){
 38307  005BBE  51E8               	movf	_last_note& (0+255),w,b
 38308  005BC0  B4D8               	btfsc	status,2,c
 38309  005BC2  D076               	goto	l5218
 38310                           
 38311                           ; BSR set to: 0
 38312                           ;arpeggio.c: 125: if(stored_octave == -3){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           3)) * 12), velocity);}
 38313  005BC4  0EFD               	movlw	253
 38314  005BC6  19E7               	xorwf	_stored_octave& (0+255),w,b
 38315  005BC8  A4D8               	btfss	status,2,c
 38316  005BCA  D00E               	goto	l5219
 38317                           
 38318                           ; BSR set to: 0
 38319  005BCC  51F8               	movf	_OCTAVES& (0+255),w,b
 38320  005BCE  0FFD               	addlw	253
 38321  005BD0  0800               	sublw	0
 38322  005BD2  25F8               	addwf	_OCTAVES& (0+255),w,b
 38323  005BD4  0D0C               	mullw	12
 38324  005BD6  50F3               	movf	prodl,w,c
 38325  005BD8  0800               	sublw	0
 38326  005BDA  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38327  005BDC  6F6B               	movwf	noteOff@pitch& (0+255),b
 38328  005BDE  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38329  005BE2  51F6               	movf	_channel& (0+255),w,b
 38330  005BE4  EC08  F048         	call	_noteOff
 38331  005BE8                     l5219:
 38332                           
 38333                           ;arpeggio.c: 126: if(stored_octave == -2){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           2)) * 12), velocity);}
 38334  005BE8  0EFE               	movlw	254
 38335  005BEA  0100               	movlb	0	; () banked
 38336  005BEC  19E7               	xorwf	_stored_octave& (0+255),w,b
 38337  005BEE  A4D8               	btfss	status,2,c
 38338  005BF0  D00E               	goto	l5220
 38339                           
 38340                           ; BSR set to: 0
 38341  005BF2  51F8               	movf	_OCTAVES& (0+255),w,b
 38342  005BF4  0FFE               	addlw	254
 38343  005BF6  0800               	sublw	0
 38344  005BF8  25F8               	addwf	_OCTAVES& (0+255),w,b
 38345  005BFA  0D0C               	mullw	12
 38346  005BFC  50F3               	movf	prodl,w,c
 38347  005BFE  0800               	sublw	0
 38348  005C00  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38349  005C02  6F6B               	movwf	noteOff@pitch& (0+255),b
 38350  005C04  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38351  005C08  51F6               	movf	_channel& (0+255),w,b
 38352  005C0A  EC08  F048         	call	_noteOff
 38353  005C0E                     l5220:
 38354                           
 38355                           ;arpeggio.c: 127: if(stored_octave == -1){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           1)) * 12), velocity);}
 38356  005C0E  0100               	movlb	0	; () banked
 38357  005C10  29E7               	incf	_stored_octave& (0+255),w,b
 38358  005C12  A4D8               	btfss	status,2,c
 38359  005C14  D00D               	goto	l5221
 38360                           
 38361                           ; BSR set to: 0
 38362  005C16  05F8               	decf	_OCTAVES& (0+255),w,b
 38363  005C18  0800               	sublw	0
 38364  005C1A  25F8               	addwf	_OCTAVES& (0+255),w,b
 38365  005C1C  0D0C               	mullw	12
 38366  005C1E  50F3               	movf	prodl,w,c
 38367  005C20  0800               	sublw	0
 38368  005C22  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38369  005C24  6F6B               	movwf	noteOff@pitch& (0+255),b
 38370  005C26  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38371  005C2A  51F6               	movf	_channel& (0+255),w,b
 38372  005C2C  EC08  F048         	call	_noteOff
 38373  005C30                     l5221:
 38374                           
 38375                           ;arpeggio.c: 129: if(stored_octave == 0){
 38376  005C30  0100               	movlb	0	; () banked
 38377  005C32  51E7               	movf	_stored_octave& (0+255),w,b
 38378  005C34  A4D8               	btfss	status,2,c
 38379  005C36  D007               	goto	l5222
 38380                           
 38381                           ; BSR set to: 0
 38382                           ;arpeggio.c: 130: noteOff(channel, temp, velocity);
 38383  005C38  C0E2  F06B         	movff	key_press_release_note_off@temp,noteOff@pitch
 38384  005C3C  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38385  005C40  51F6               	movf	_channel& (0+255),w,b
 38386  005C42  EC08  F048         	call	_noteOff
 38387  005C46                     l5222:
 38388                           
 38389                           ;arpeggio.c: 131: }
 38390                           ;arpeggio.c: 133: if(stored_octave == 1){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          1)) * 12), velocity);}
 38391  005C46  0100               	movlb	0	; () banked
 38392  005C48  05E7               	decf	_stored_octave& (0+255),w,b
 38393  005C4A  A4D8               	btfss	status,2,c
 38394  005C4C  D00C               	goto	l5223
 38395                           
 38396                           ; BSR set to: 0
 38397  005C4E  05F8               	decf	_OCTAVES& (0+255),w,b
 38398  005C50  0800               	sublw	0
 38399  005C52  25F8               	addwf	_OCTAVES& (0+255),w,b
 38400  005C54  0D0C               	mullw	12
 38401  005C56  50F3               	movf	prodl,w,c
 38402  005C58  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38403  005C5A  6F6B               	movwf	noteOff@pitch& (0+255),b
 38404  005C5C  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38405  005C60  51F6               	movf	_channel& (0+255),w,b
 38406  005C62  EC08  F048         	call	_noteOff
 38407  005C66                     l5223:
 38408                           
 38409                           ;arpeggio.c: 134: if(stored_octave == 2){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          2)) * 12), velocity);}
 38410  005C66  0E02               	movlw	2
 38411  005C68  0100               	movlb	0	; () banked
 38412  005C6A  19E7               	xorwf	_stored_octave& (0+255),w,b
 38413  005C6C  A4D8               	btfss	status,2,c
 38414  005C6E  D00D               	goto	l5224
 38415                           
 38416                           ; BSR set to: 0
 38417  005C70  51F8               	movf	_OCTAVES& (0+255),w,b
 38418  005C72  0FFE               	addlw	254
 38419  005C74  0800               	sublw	0
 38420  005C76  25F8               	addwf	_OCTAVES& (0+255),w,b
 38421  005C78  0D0C               	mullw	12
 38422  005C7A  50F3               	movf	prodl,w,c
 38423  005C7C  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38424  005C7E  6F6B               	movwf	noteOff@pitch& (0+255),b
 38425  005C80  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38426  005C84  51F6               	movf	_channel& (0+255),w,b
 38427  005C86  EC08  F048         	call	_noteOff
 38428  005C8A                     l5224:
 38429                           
 38430                           ;arpeggio.c: 135: if(stored_octave == 3){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          3)) * 12), velocity);}
 38431  005C8A  0E03               	movlw	3
 38432  005C8C  0100               	movlb	0	; () banked
 38433  005C8E  19E7               	xorwf	_stored_octave& (0+255),w,b
 38434  005C90  A4D8               	btfss	status,2,c
 38435  005C92  D00D               	goto	l5225
 38436                           
 38437                           ; BSR set to: 0
 38438  005C94  51F8               	movf	_OCTAVES& (0+255),w,b
 38439  005C96  0FFD               	addlw	253
 38440  005C98  0800               	sublw	0
 38441  005C9A  25F8               	addwf	_OCTAVES& (0+255),w,b
 38442  005C9C  0D0C               	mullw	12
 38443  005C9E  50F3               	movf	prodl,w,c
 38444  005CA0  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38445  005CA2  6F6B               	movwf	noteOff@pitch& (0+255),b
 38446  005CA4  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38447  005CA8  51F6               	movf	_channel& (0+255),w,b
 38448  005CAA  EC08  F048         	call	_noteOff
 38449  005CAE                     l5225:
 38450                           
 38451                           ;arpeggio.c: 137: note_off_was_sent = 1;
 38452  005CAE  8233               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38453  005CB0                     l5218:
 38454                           
 38455                           ;arpeggio.c: 138: }
 38456                           ;arpeggio.c: 141: if((last_note == 0) && (note_off_was_sent == 0) && (keyboard.SW1 == 1)
      +                          ){noteOff(channel, stored_octave * 12, velocity);note_off_was_sent = 1;}
 38457  005CB0  0100               	movlb	0	; () banked
 38458  005CB2  51E8               	movf	_last_note& (0+255),w,b
 38459  005CB4  B4D8               	btfsc	status,2,c
 38460                           
 38461                           ; BSR set to: 0
 38462  005CB6  B233               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38463  005CB8  D00C               	goto	l5226
 38464                           
 38465                           ; BSR set to: 0
 38466  005CBA  A1D0               	btfss	_keyboard& (0+255),0,b
 38467  005CBC  D00A               	goto	l5226
 38468                           
 38469                           ; BSR set to: 0
 38470  005CBE  51E7               	movf	_stored_octave& (0+255),w,b
 38471  005CC0  0D0C               	mullw	12
 38472  005CC2  CFF3 F06B          	movff	prodl,noteOff@pitch
 38473  005CC6  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38474  005CCA  51F6               	movf	_channel& (0+255),w,b
 38475  005CCC  EC08  F048         	call	_noteOff
 38476  005CD0  8233               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38477  005CD2                     l5226:
 38478                           
 38479                           ;arpeggio.c: 142: if((last_note == 0) && (note_off_was_sent == 0)){noteOff(channel, stor
      +                          ed_octave * 12, velocity);note_off_was_sent = 1;}
 38480  005CD2  0100               	movlb	0	; () banked
 38481  005CD4  51E8               	movf	_last_note& (0+255),w,b
 38482  005CD6  B4D8               	btfsc	status,2,c
 38483                           
 38484                           ; BSR set to: 0
 38485  005CD8  B233               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38486  005CDA  D00A               	goto	l5227
 38487                           
 38488                           ; BSR set to: 0
 38489  005CDC  51E7               	movf	_stored_octave& (0+255),w,b
 38490  005CDE  0D0C               	mullw	12
 38491  005CE0  CFF3 F06B          	movff	prodl,noteOff@pitch
 38492  005CE4  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38493  005CE8  51F6               	movf	_channel& (0+255),w,b
 38494  005CEA  EC08  F048         	call	_noteOff
 38495  005CEE  8233               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38496  005CF0                     l5227:
 38497                           
 38498                           ;arpeggio.c: 144: TMR0ON = 1;
 38499  005CF0  8ED5               	bsf	4053,7,c	;volatile
 38500  005CF2  0012               	return		;funcret
 38501  005CF4                     __end_of_key_press_release_note_off:
 38502                           	opt stack 0
 38503                           tblptru	equ	0xFF8
 38504                           tblptrh	equ	0xFF7
 38505                           tblptrl	equ	0xFF6
 38506                           tablat	equ	0xFF5
 38507                           prodh	equ	0xFF4
 38508                           prodl	equ	0xFF3
 38509                           intcon	equ	0xFF2
 38510                           intcon2	equ	0xFF1
 38511                           postinc0	equ	0xFEE
 38512                           wreg	equ	0xFE8
 38513                           indf1	equ	0xFE7
 38514                           postdec1	equ	0xFE5
 38515                           fsr1h	equ	0xFE2
 38516                           fsr1l	equ	0xFE1
 38517                           indf2	equ	0xFDF
 38518                           postinc2	equ	0xFDE
 38519                           plusw2	equ	0xFDB
 38520                           fsr2h	equ	0xFDA
 38521                           fsr2l	equ	0xFD9
 38522                           status	equ	0xFD8
 38523                           
 38524 ;; *************** function _noteOff *****************
 38525 ;; Defined at:
 38526 ;;		line 66 in file "midi.c"
 38527 ;; Parameters:    Size  Location     Type
 38528 ;;  channel         1    wreg     unsigned char 
 38529 ;;  pitch           1   11[BANK0 ] unsigned char 
 38530 ;;  velocity        1   12[BANK0 ] unsigned char 
 38531 ;; Auto vars:     Size  Location     Type
 38532 ;;  channel         1   13[BANK0 ] unsigned char 
 38533 ;; Return value:  Size  Location     Type
 38534 ;;                  1    wreg      void 
 38535 ;; Registers used:
 38536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 38537 ;; Tracked objects:
 38538 ;;		On entry : 0/0
 38539 ;;		On exit  : 0/0
 38540 ;;		Unchanged: 0/0
 38541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38542 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38545 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38546 ;;Total ram usage:        3 bytes
 38547 ;; Hardware stack levels used:    1
 38548 ;; Hardware stack levels required when called:    6
 38549 ;; This function calls:
 38550 ;;		_sendOut
 38551 ;;		_sendUSB
 38552 ;; This function is called by:
 38553 ;;		_noteOn
 38554 ;;		_noteOnDrum
 38555 ;;		_playThisNotePentatonic
 38556 ;;		_playTriad
 38557 ;;		_playSeventh
 38558 ;;		_playThisNote
 38559 ;;		_playThisNote8
 38560 ;;		_playDiatonicTriadMajor
 38561 ;;		_playDiatonicSeventhMajor
 38562 ;;		_playDiatonicTriadMinor
 38563 ;;		_playDiatonicSeventhMinor
 38564 ;;		_key_press_release_note_off
 38565 ;;		_keyboard_all_note
 38566 ;;		_keyboard_eight_note
 38567 ;; This function uses a non-reentrant model
 38568 ;;
 38569                           
 38570                           	psect	text115
 38571  009010                     __ptext115:
 38572                           	opt stack 0
 38573  009010                     _noteOff:
 38574                           	opt stack 17
 38575                           
 38576                           ;incstack = 0
 38577                           ;noteOff@channel stored from wreg
 38578  009010  0100               	movlb	0	; () banked
 38579  009012  6F6D               	movwf	noteOff@channel& (0+255),b
 38580                           
 38581                           ;midi.c: 68: noteNumber = pitch + semitone + ((octave + 1)* 12);
 38582  009014  0100               	movlb	0	; () banked
 38583  009016  29FC               	incf	_octave& (0+255),w,b
 38584  009018  0D0C               	mullw	12
 38585  00901A  50F3               	movf	prodl,w,c
 38586  00901C  256B               	addwf	noteOff@pitch& (0+255),w,b
 38587  00901E  25F3               	addwf	_semitone& (0+255),w,b
 38588  009020  6FF4               	movwf	_noteNumber& (0+255),b
 38589                           
 38590                           ; BSR set to: 0
 38591                           ;midi.c: 69: statusByte = channel | note_off;
 38592  009022  516D               	movf	noteOff@channel& (0+255),w,b
 38593  009024  0980               	iorlw	128
 38594  009026  6FF5               	movwf	_statusByte& (0+255),b
 38595                           
 38596                           ; BSR set to: 0
 38597                           ;midi.c: 73: sendUSB(statusByte, noteNumber, velocity);
 38598  009028  C0F4  F060         	movff	_noteNumber,sendUSB@message2
 38599  00902C  C06C  F061         	movff	noteOff@velocity,sendUSB@message3
 38600  009030  51F5               	movf	_statusByte& (0+255),w,b
 38601  009032  ECC0  F039         	call	_sendUSB
 38602                           
 38603                           ;midi.c: 76: sendOut(statusByte);
 38604  009036  0100               	movlb	0	; () banked
 38605  009038  51F5               	movf	_statusByte& (0+255),w,b
 38606  00903A  ECD8  F04A         	call	_sendOut
 38607                           
 38608                           ;midi.c: 77: sendOut(noteNumber);
 38609  00903E  0100               	movlb	0	; () banked
 38610  009040  51F4               	movf	_noteNumber& (0+255),w,b
 38611  009042  ECD8  F04A         	call	_sendOut
 38612                           
 38613                           ;midi.c: 78: sendOut(velocity);
 38614  009046  0100               	movlb	0	; () banked
 38615  009048  516C               	movf	noteOff@velocity& (0+255),w,b
 38616  00904A  ECD8  F04A         	call	_sendOut
 38617  00904E  0012               	return		;funcret
 38618  009050                     __end_of_noteOff:
 38619                           	opt stack 0
 38620                           tblptru	equ	0xFF8
 38621                           tblptrh	equ	0xFF7
 38622                           tblptrl	equ	0xFF6
 38623                           tablat	equ	0xFF5
 38624                           prodh	equ	0xFF4
 38625                           prodl	equ	0xFF3
 38626                           intcon	equ	0xFF2
 38627                           intcon2	equ	0xFF1
 38628                           postinc0	equ	0xFEE
 38629                           wreg	equ	0xFE8
 38630                           indf1	equ	0xFE7
 38631                           postdec1	equ	0xFE5
 38632                           fsr1h	equ	0xFE2
 38633                           fsr1l	equ	0xFE1
 38634                           indf2	equ	0xFDF
 38635                           postinc2	equ	0xFDE
 38636                           plusw2	equ	0xFDB
 38637                           fsr2h	equ	0xFDA
 38638                           fsr2l	equ	0xFD9
 38639                           status	equ	0xFD8
 38640                           
 38641 ;; *************** function _buttonInputsSerial *****************
 38642 ;; Defined at:
 38643 ;;		line 264 in file "main.c"
 38644 ;; Parameters:    Size  Location     Type
 38645 ;;		None
 38646 ;; Auto vars:     Size  Location     Type
 38647 ;;  i               1    5[BANK0 ] unsigned char 
 38648 ;;  i               1    4[BANK0 ] unsigned char 
 38649 ;; Return value:  Size  Location     Type
 38650 ;;                  1    wreg      void 
 38651 ;; Registers used:
 38652 ;;		wreg, status,2, status,0, cstack
 38653 ;; Tracked objects:
 38654 ;;		On entry : 0/0
 38655 ;;		On exit  : 0/0
 38656 ;;		Unchanged: 0/0
 38657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38659 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38660 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38661 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38662 ;;Total ram usage:        6 bytes
 38663 ;; Hardware stack levels used:    1
 38664 ;; Hardware stack levels required when called:    6
 38665 ;; This function calls:
 38666 ;;		_clock
 38667 ;;		_load
 38668 ;; This function is called by:
 38669 ;;		_digitalInputs
 38670 ;; This function uses a non-reentrant model
 38671 ;;
 38672                           
 38673                           	psect	text116
 38674  008272                     __ptext116:
 38675                           	opt stack 0
 38676  008272                     _buttonInputsSerial:
 38677                           	opt stack 23
 38678                           
 38679                           ;main.c: 266: button_state_now = 0;
 38680                           
 38681                           ;incstack = 0
 38682  008272  0E00               	movlw	0
 38683  008274  0100               	movlb	0	; () banked
 38684  008276  6FD8               	movwf	_button_state_now& (0+255),b
 38685  008278  0E00               	movlw	0
 38686  00827A  6FD9               	movwf	(_button_state_now+1)& (0+255),b
 38687  00827C  0E00               	movlw	0
 38688  00827E  6FDA               	movwf	(_button_state_now+2)& (0+255),b
 38689  008280  0E00               	movlw	0
 38690  008282  6FDB               	movwf	(_button_state_now+3)& (0+255),b
 38691                           
 38692                           ;main.c: 267: drum_button_state_now = 0;
 38693  008284  0E00               	movlw	0
 38694  008286  6FEE               	movwf	_drum_button_state_now& (0+255),b
 38695                           
 38696                           ; BSR set to: 0
 38697                           ;main.c: 268: load();
 38698  008288  EC3F  F04B         	call	_load	;wreg free
 38699                           
 38700                           ;main.c: 271: for (unsigned char i = 0;i<12;i++){
 38701  00828C  0E00               	movlw	0
 38702  00828E  0100               	movlb	0	; () banked
 38703  008290  6F64               	movwf	buttonInputsSerial@i& (0+255),b
 38704  008292                     l23061:
 38705                           
 38706                           ; BSR set to: 0
 38707  008292  0E0B               	movlw	11
 38708  008294  6564               	cpfsgt	buttonInputsSerial@i& (0+255),b
 38709  008296  D001               	goto	l4778
 38710  008298  D009               	goto	u37710
 38711  00829A                     l4778:
 38712                           
 38713                           ; BSR set to: 0
 38714                           ;main.c: 272: drum_button_state_now = (drum_button_state_now << 1) | (RC4);
 38715                           
 38716                           ; BSR set to: 0
 38717  00829A  90D8               	bcf	status,0,c
 38718  00829C  B882               	btfsc	3970,4,c	;volatile
 38719  00829E  80D8               	bsf	status,0,c
 38720  0082A0  37EE               	rlcf	_drum_button_state_now& (0+255),f,b
 38721                           
 38722                           ; BSR set to: 0
 38723                           ;main.c: 273: clock();
 38724  0082A2  EC42  F04B         	call	_clock	;wreg free
 38725  0082A6  0100               	movlb	0	; () banked
 38726  0082A8  2B64               	incf	buttonInputsSerial@i& (0+255),f,b
 38727  0082AA  D7F3               	goto	l23061
 38728  0082AC                     u37710:
 38729                           
 38730                           ; BSR set to: 0
 38731                           ;main.c: 274: }
 38732                           ;main.c: 277: for (unsigned char i = 0;i<28;i++){
 38733                           
 38734                           ; BSR set to: 0
 38735  0082AC  0E00               	movlw	0
 38736  0082AE  6F65               	movwf	buttonInputsSerial@i_4383& (0+255),b
 38737  0082B0                     l23075:
 38738                           
 38739                           ; BSR set to: 0
 38740  0082B0  0E1B               	movlw	27
 38741  0082B2  6565               	cpfsgt	buttonInputsSerial@i_4383& (0+255),b
 38742  0082B4  D001               	goto	l4780
 38743  0082B6  0012               	return	
 38744  0082B8                     l4780:
 38745                           
 38746                           ; BSR set to: 0
 38747                           ;main.c: 278: button_state_now = (button_state_now << 1) | (RC4);
 38748                           
 38749                           ; BSR set to: 0
 38750  0082B8  90D8               	bcf	status,0,c
 38751  0082BA  35D8               	rlcf	_button_state_now& (0+255),w,b
 38752  0082BC  6F60               	movwf	??_buttonInputsSerial& (0+255),b
 38753  0082BE  35D9               	rlcf	(_button_state_now+1)& (0+255),w,b
 38754  0082C0  6F61               	movwf	(??_buttonInputsSerial+1)& (0+255),b
 38755  0082C2  35DA               	rlcf	(_button_state_now+2)& (0+255),w,b
 38756  0082C4  6F62               	movwf	(??_buttonInputsSerial+2)& (0+255),b
 38757  0082C6  35DB               	rlcf	(_button_state_now+3)& (0+255),w,b
 38758  0082C8  6F63               	movwf	(??_buttonInputsSerial+3)& (0+255),b
 38759  0082CA  A882               	btfss	3970,4,c	;volatile
 38760  0082CC  D002               	goto	u37730
 38761  0082CE  0E01               	movlw	1
 38762  0082D0  D001               	goto	u37740
 38763  0082D2                     u37730:
 38764  0082D2  0E00               	movlw	0
 38765  0082D4                     u37740:
 38766  0082D4  1160               	iorwf	??_buttonInputsSerial& (0+255),w,b
 38767  0082D6  6FD8               	movwf	_button_state_now& (0+255),b
 38768  0082D8  5161               	movf	(??_buttonInputsSerial+1)& (0+255),w,b
 38769  0082DA  6FD9               	movwf	(_button_state_now+1)& (0+255),b
 38770  0082DC  5162               	movf	(??_buttonInputsSerial+2)& (0+255),w,b
 38771  0082DE  6FDA               	movwf	(_button_state_now+2)& (0+255),b
 38772  0082E0  5163               	movf	(??_buttonInputsSerial+3)& (0+255),w,b
 38773  0082E2  6FDB               	movwf	(_button_state_now+3)& (0+255),b
 38774                           
 38775                           ; BSR set to: 0
 38776                           ;main.c: 279: clock();
 38777  0082E4  EC42  F04B         	call	_clock	;wreg free
 38778  0082E8  0100               	movlb	0	; () banked
 38779  0082EA  2B65               	incf	buttonInputsSerial@i_4383& (0+255),f,b
 38780  0082EC  D7E1               	goto	l23075
 38781  0082EE                     __end_of_buttonInputsSerial:
 38782                           	opt stack 0
 38783                           tblptru	equ	0xFF8
 38784                           tblptrh	equ	0xFF7
 38785                           tblptrl	equ	0xFF6
 38786                           tablat	equ	0xFF5
 38787                           prodh	equ	0xFF4
 38788                           prodl	equ	0xFF3
 38789                           intcon	equ	0xFF2
 38790                           intcon2	equ	0xFF1
 38791                           postinc0	equ	0xFEE
 38792                           wreg	equ	0xFE8
 38793                           indf1	equ	0xFE7
 38794                           postdec1	equ	0xFE5
 38795                           fsr1h	equ	0xFE2
 38796                           fsr1l	equ	0xFE1
 38797                           indf2	equ	0xFDF
 38798                           postinc2	equ	0xFDE
 38799                           plusw2	equ	0xFDB
 38800                           fsr2h	equ	0xFDA
 38801                           fsr2l	equ	0xFD9
 38802                           status	equ	0xFD8
 38803                           
 38804 ;; *************** function _load *****************
 38805 ;; Defined at:
 38806 ;;		line 251 in file "main.c"
 38807 ;; Parameters:    Size  Location     Type
 38808 ;;		None
 38809 ;; Auto vars:     Size  Location     Type
 38810 ;;		None
 38811 ;; Return value:  Size  Location     Type
 38812 ;;                  1    wreg      void 
 38813 ;; Registers used:
 38814 ;;		None
 38815 ;; Tracked objects:
 38816 ;;		On entry : 0/0
 38817 ;;		On exit  : 0/0
 38818 ;;		Unchanged: 0/0
 38819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38824 ;;Total ram usage:        0 bytes
 38825 ;; Hardware stack levels used:    1
 38826 ;; Hardware stack levels required when called:    5
 38827 ;; This function calls:
 38828 ;;		Nothing
 38829 ;; This function is called by:
 38830 ;;		_buttonInputsSerial
 38831 ;; This function uses a non-reentrant model
 38832 ;;
 38833                           
 38834                           	psect	text117
 38835  00967E                     __ptext117:
 38836                           	opt stack 0
 38837  00967E                     _load:
 38838                           	opt stack 23
 38839                           
 38840                           ;main.c: 252: RB1 = 0;
 38841                           
 38842                           ; BSR set to: 0
 38843                           ;incstack = 0
 38844  00967E  9281               	bcf	3969,1,c	;volatile
 38845                           
 38846                           ;main.c: 254: RB1 = 1;
 38847  009680  8281               	bsf	3969,1,c	;volatile
 38848  009682  0012               	return		;funcret
 38849  009684                     __end_of_load:
 38850                           	opt stack 0
 38851                           tblptru	equ	0xFF8
 38852                           tblptrh	equ	0xFF7
 38853                           tblptrl	equ	0xFF6
 38854                           tablat	equ	0xFF5
 38855                           prodh	equ	0xFF4
 38856                           prodl	equ	0xFF3
 38857                           intcon	equ	0xFF2
 38858                           intcon2	equ	0xFF1
 38859                           postinc0	equ	0xFEE
 38860                           wreg	equ	0xFE8
 38861                           indf1	equ	0xFE7
 38862                           postdec1	equ	0xFE5
 38863                           fsr1h	equ	0xFE2
 38864                           fsr1l	equ	0xFE1
 38865                           indf2	equ	0xFDF
 38866                           postinc2	equ	0xFDE
 38867                           plusw2	equ	0xFDB
 38868                           fsr2h	equ	0xFDA
 38869                           fsr2l	equ	0xFD9
 38870                           status	equ	0xFD8
 38871                           
 38872 ;; *************** function _clock *****************
 38873 ;; Defined at:
 38874 ;;		line 258 in file "main.c"
 38875 ;; Parameters:    Size  Location     Type
 38876 ;;		None
 38877 ;; Auto vars:     Size  Location     Type
 38878 ;;		None
 38879 ;; Return value:  Size  Location     Type
 38880 ;;                  1    wreg      void 
 38881 ;; Registers used:
 38882 ;;		None
 38883 ;; Tracked objects:
 38884 ;;		On entry : 0/0
 38885 ;;		On exit  : 0/0
 38886 ;;		Unchanged: 0/0
 38887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38892 ;;Total ram usage:        0 bytes
 38893 ;; Hardware stack levels used:    1
 38894 ;; Hardware stack levels required when called:    5
 38895 ;; This function calls:
 38896 ;;		Nothing
 38897 ;; This function is called by:
 38898 ;;		_buttonInputsSerial
 38899 ;; This function uses a non-reentrant model
 38900 ;;
 38901                           
 38902                           	psect	text118
 38903  009684                     __ptext118:
 38904                           	opt stack 0
 38905  009684                     _clock:
 38906                           	opt stack 23
 38907                           
 38908                           ;main.c: 259: RC5 = 1;
 38909                           
 38910                           ;incstack = 0
 38911  009684  8A82               	bsf	3970,5,c	;volatile
 38912                           
 38913                           ;main.c: 260: RC5 = 0;
 38914  009686  9A82               	bcf	3970,5,c	;volatile
 38915  009688  0012               	return		;funcret
 38916  00968A                     __end_of_clock:
 38917                           	opt stack 0
 38918                           tblptru	equ	0xFF8
 38919                           tblptrh	equ	0xFF7
 38920                           tblptrl	equ	0xFF6
 38921                           tablat	equ	0xFF5
 38922                           prodh	equ	0xFF4
 38923                           prodl	equ	0xFF3
 38924                           intcon	equ	0xFF2
 38925                           intcon2	equ	0xFF1
 38926                           postinc0	equ	0xFEE
 38927                           wreg	equ	0xFE8
 38928                           indf1	equ	0xFE7
 38929                           postdec1	equ	0xFE5
 38930                           fsr1h	equ	0xFE2
 38931                           fsr1l	equ	0xFE1
 38932                           indf2	equ	0xFDF
 38933                           postinc2	equ	0xFDE
 38934                           plusw2	equ	0xFDB
 38935                           fsr2h	equ	0xFDA
 38936                           fsr2l	equ	0xFD9
 38937                           status	equ	0xFD8
 38938                           
 38939 ;; *************** function _analogInputs *****************
 38940 ;; Defined at:
 38941 ;;		line 284 in file "main.c"
 38942 ;; Parameters:    Size  Location     Type
 38943 ;;		None
 38944 ;; Auto vars:     Size  Location     Type
 38945 ;;		None
 38946 ;; Return value:  Size  Location     Type
 38947 ;;                  1    wreg      void 
 38948 ;; Registers used:
 38949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 38950 ;; Tracked objects:
 38951 ;;		On entry : 0/0
 38952 ;;		On exit  : 0/0
 38953 ;;		Unchanged: 0/0
 38954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38959 ;;Total ram usage:        0 bytes
 38960 ;; Hardware stack levels used:    1
 38961 ;; Hardware stack levels required when called:    9
 38962 ;; This function calls:
 38963 ;;		_readPotentiometers
 38964 ;; This function is called by:
 38965 ;;		_main
 38966 ;; This function uses a non-reentrant model
 38967 ;;
 38968                           
 38969                           	psect	text119
 38970  00968A                     __ptext119:
 38971                           	opt stack 0
 38972  00968A                     _analogInputs:
 38973                           	opt stack 21
 38974                           
 38975                           ;main.c: 285: readPotentiometers();
 38976                           
 38977                           ;incstack = 0
 38978  00968A  ECA6  F008         	call	_readPotentiometers	;wreg free
 38979  00968E  0012               	return		;funcret
 38980  009690                     __end_of_analogInputs:
 38981                           	opt stack 0
 38982                           tblptru	equ	0xFF8
 38983                           tblptrh	equ	0xFF7
 38984                           tblptrl	equ	0xFF6
 38985                           tablat	equ	0xFF5
 38986                           prodh	equ	0xFF4
 38987                           prodl	equ	0xFF3
 38988                           intcon	equ	0xFF2
 38989                           intcon2	equ	0xFF1
 38990                           postinc0	equ	0xFEE
 38991                           wreg	equ	0xFE8
 38992                           indf1	equ	0xFE7
 38993                           postdec1	equ	0xFE5
 38994                           fsr1h	equ	0xFE2
 38995                           fsr1l	equ	0xFE1
 38996                           indf2	equ	0xFDF
 38997                           postinc2	equ	0xFDE
 38998                           plusw2	equ	0xFDB
 38999                           fsr2h	equ	0xFDA
 39000                           fsr2l	equ	0xFD9
 39001                           status	equ	0xFD8
 39002                           
 39003 ;; *************** function _readPotentiometers *****************
 39004 ;; Defined at:
 39005 ;;		line 34 in file "potentiometers.c"
 39006 ;; Parameters:    Size  Location     Type
 39007 ;;		None
 39008 ;; Auto vars:     Size  Location     Type
 39009 ;;  i               1  109[BANK0 ] unsigned char 
 39010 ;;  i               1  107[BANK0 ] unsigned char 
 39011 ;;  i               1  108[BANK0 ] unsigned char 
 39012 ;; Return value:  Size  Location     Type
 39013 ;;                  1    wreg      void 
 39014 ;; Registers used:
 39015 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 39016 ;; Tracked objects:
 39017 ;;		On entry : 0/0
 39018 ;;		On exit  : 0/0
 39019 ;;		Unchanged: 0/0
 39020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39022 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39023 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39024 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39025 ;;Total ram usage:       12 bytes
 39026 ;; Hardware stack levels used:    1
 39027 ;; Hardware stack levels required when called:    8
 39028 ;; This function calls:
 39029 ;;		_ADC_Read
 39030 ;;		___fladd
 39031 ;;		___flmul
 39032 ;;		___flneg
 39033 ;;		___fltol
 39034 ;;		___xxtofl
 39035 ;;		_map
 39036 ;;		_processPotentiometers
 39037 ;; This function is called by:
 39038 ;;		_analogInputs
 39039 ;; This function uses a non-reentrant model
 39040 ;;
 39041                           
 39042                           	psect	text120
 39043  00114C                     __ptext120:
 39044                           	opt stack 0
 39045  00114C                     _readPotentiometers:
 39046                           	opt stack 21
 39047                           
 39048                           ;potentiometers.c: 36: static __bit FIRST_READING;
 39049                           ;potentiometers.c: 40: for(unsigned char i=0;i<16;i++){
 39050                           
 39051                           ;incstack = 0
 39052  00114C  0E00               	movlw	0
 39053  00114E  0100               	movlb	0	; () banked
 39054  001150  6FCC               	movwf	readPotentiometers@i& (0+255),b
 39055  001152                     l22963:
 39056                           
 39057                           ; BSR set to: 0
 39058  001152  0E0F               	movlw	15
 39059  001154  65CC               	cpfsgt	readPotentiometers@i& (0+255),b
 39060  001156  D001               	goto	l3877
 39061  001158  D028               	goto	u37510
 39062  00115A                     l3877:
 39063                           
 39064                           ; BSR set to: 0
 39065                           ;potentiometers.c: 42: potentiometer_raw[i] = ADC_Read(i);
 39066                           
 39067                           ; BSR set to: 0
 39068  00115A  51CC               	movf	readPotentiometers@i& (0+255),w,b
 39069  00115C  EC16  F049         	call	_ADC_Read
 39070  001160  0100               	movlb	0	; () banked
 39071  001162  51CC               	movf	readPotentiometers@i& (0+255),w,b
 39072  001164  0D02               	mullw	2
 39073  001166  0E60               	movlw	low _potentiometer_raw
 39074  001168  24F3               	addwf	prodl,w,c
 39075  00116A  6ED9               	movwf	fsr2l,c
 39076  00116C  0E02               	movlw	high _potentiometer_raw
 39077  00116E  20F4               	addwfc	prodh,w,c
 39078  001170  6EDA               	movwf	fsr2h,c
 39079  001172  C060  FFDE         	movff	?_ADC_Read,postinc2
 39080  001176  C061  FFDD         	movff	?_ADC_Read+1,postdec2
 39081                           
 39082                           ; BSR set to: 0
 39083                           ;potentiometers.c: 51: if (FIRST_READING == 0) {
 39084  00117A  B032               	btfsc	readPotentiometers@FIRST_READING/(0+8),readPotentiometers@FIRST_READING& (0+7),c
 39085  00117C  D014               	goto	l3879
 39086                           
 39087                           ; BSR set to: 0
 39088                           ;potentiometers.c: 52: ema_sum[i] = potentiometer_raw[i];
 39089  00117E  51CC               	movf	readPotentiometers@i& (0+255),w,b
 39090  001180  0D02               	mullw	2
 39091  001182  0E60               	movlw	low _potentiometer_raw
 39092  001184  24F3               	addwf	prodl,w,c
 39093  001186  6ED9               	movwf	fsr2l,c
 39094  001188  0E02               	movlw	high _potentiometer_raw
 39095  00118A  20F4               	addwfc	prodh,w,c
 39096  00118C  6EDA               	movwf	fsr2h,c
 39097  00118E  51CC               	movf	readPotentiometers@i& (0+255),w,b
 39098  001190  0D02               	mullw	2
 39099  001192  0E40               	movlw	low _ema_sum
 39100  001194  24F3               	addwf	prodl,w,c
 39101  001196  6EE1               	movwf	fsr1l,c
 39102  001198  0E02               	movlw	high _ema_sum
 39103  00119A  20F4               	addwfc	prodh,w,c
 39104  00119C  6EE2               	movwf	fsr1h,c
 39105  00119E  CFDE FFE6          	movff	postinc2,postinc1
 39106  0011A2  CFDD FFE5          	movff	postdec2,postdec1
 39107  0011A6                     l3879:
 39108                           
 39109                           ; BSR set to: 0
 39110                           
 39111                           ; BSR set to: 0
 39112  0011A6  2BCC               	incf	readPotentiometers@i& (0+255),f,b
 39113  0011A8  D7D4               	goto	l22963
 39114  0011AA                     u37510:
 39115                           
 39116                           ; BSR set to: 0
 39117                           ;potentiometers.c: 53: }
 39118                           ;potentiometers.c: 54: }
 39119                           ;potentiometers.c: 57: for(unsigned char i=0;i<16;i++){
 39120                           
 39121                           ; BSR set to: 0
 39122  0011AA  0E00               	movlw	0
 39123  0011AC  6FCB               	movwf	readPotentiometers@i_3358& (0+255),b
 39124  0011AE                     l22979:
 39125                           
 39126                           ; BSR set to: 0
 39127  0011AE  0E0F               	movlw	15
 39128  0011B0  65CB               	cpfsgt	readPotentiometers@i_3358& (0+255),b
 39129  0011B2  D001               	goto	l3880
 39130  0011B4  D09D               	goto	u37530
 39131  0011B6                     l3880:
 39132                           
 39133                           ; BSR set to: 0
 39134                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 39135                           
 39136                           ; BSR set to: 0
 39137  0011B6  51CB               	movf	readPotentiometers@i_3358& (0+255),w,b
 39138  0011B8  0D02               	mullw	2
 39139  0011BA  0E40               	movlw	low _ema_sum
 39140  0011BC  24F3               	addwf	prodl,w,c
 39141  0011BE  6ED9               	movwf	fsr2l,c
 39142  0011C0  0E02               	movlw	high _ema_sum
 39143  0011C2  20F4               	addwfc	prodh,w,c
 39144  0011C4  6EDA               	movwf	fsr2h,c
 39145  0011C6  CFDE F060          	movff	postinc2,___xxtofl@val
 39146  0011CA  CFDD F061          	movff	postdec2,___xxtofl@val+1
 39147  0011CE  0E00               	movlw	0
 39148  0011D0  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 39149  0011D2  0EFF               	movlw	-1
 39150  0011D4  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 39151  0011D6  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 39152  0011D8  0E01               	movlw	1
 39153  0011DA  EC29  F02F         	call	___xxtofl
 39154  0011DE  C060  F072         	movff	?___xxtofl,___flmul@a
 39155  0011E2  C061  F073         	movff	?___xxtofl+1,___flmul@a+1
 39156  0011E6  C062  F074         	movff	?___xxtofl+2,___flmul@a+2
 39157  0011EA  C063  F075         	movff	?___xxtofl+3,___flmul@a+3
 39158  0011EE  0E00               	movlw	0
 39159  0011F0  0100               	movlb	0	; () banked
 39160  0011F2  6FA8               	movwf	___fladd@a& (0+255),b
 39161  0011F4  0E00               	movlw	0
 39162  0011F6  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 39163  0011F8  0E80               	movlw	128
 39164  0011FA  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 39165  0011FC  0E3F               	movlw	63
 39166  0011FE  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 39167  001200  C104  F0A0         	movff	_ema_alpha,___flneg@f1
 39168  001204  C105  F0A1         	movff	_ema_alpha+1,___flneg@f1+1
 39169  001208  C106  F0A2         	movff	_ema_alpha+2,___flneg@f1+2
 39170  00120C  C107  F0A3         	movff	_ema_alpha+3,___flneg@f1+3
 39171  001210  EC98  F049         	call	___flneg	;wreg free
 39172  001214  C0A0  F0A4         	movff	?___flneg,___fladd@b
 39173  001218  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 39174  00121C  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 39175  001220  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 39176  001224  ECF7  F018         	call	___fladd	;wreg free
 39177  001228  C0A4  F06E         	movff	?___fladd,___flmul@b
 39178  00122C  C0A5  F06F         	movff	?___fladd+1,___flmul@b+1
 39179  001230  C0A6  F070         	movff	?___fladd+2,___flmul@b+2
 39180  001234  C0A7  F071         	movff	?___fladd+3,___flmul@b+3
 39181  001238  EC4E  F017         	call	___flmul	;wreg free
 39182  00123C  C06E  F0C7         	movff	?___flmul,_readPotentiometers$5807
 39183  001240  C06F  F0C8         	movff	?___flmul+1,_readPotentiometers$5807+1
 39184  001244  C070  F0C9         	movff	?___flmul+2,_readPotentiometers$5807+2
 39185  001248  C071  F0CA         	movff	?___flmul+3,_readPotentiometers$5807+3
 39186                           
 39187                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 39188  00124C  C0C7  F0A8         	movff	_readPotentiometers$5807,___fladd@a
 39189  001250  C0C8  F0A9         	movff	_readPotentiometers$5807+1,___fladd@a+1
 39190  001254  C0C9  F0AA         	movff	_readPotentiometers$5807+2,___fladd@a+2
 39191  001258  C0CA  F0AB         	movff	_readPotentiometers$5807+3,___fladd@a+3
 39192  00125C  C104  F072         	movff	_ema_alpha,___flmul@a
 39193  001260  C105  F073         	movff	_ema_alpha+1,___flmul@a+1
 39194  001264  C106  F074         	movff	_ema_alpha+2,___flmul@a+2
 39195  001268  C107  F075         	movff	_ema_alpha+3,___flmul@a+3
 39196  00126C  0100               	movlb	0	; () banked
 39197  00126E  51CB               	movf	readPotentiometers@i_3358& (0+255),w,b
 39198  001270  0D02               	mullw	2
 39199  001272  0E60               	movlw	low _potentiometer_raw
 39200  001274  24F3               	addwf	prodl,w,c
 39201  001276  6ED9               	movwf	fsr2l,c
 39202  001278  0E02               	movlw	high _potentiometer_raw
 39203  00127A  20F4               	addwfc	prodh,w,c
 39204  00127C  6EDA               	movwf	fsr2h,c
 39205  00127E  CFDE F060          	movff	postinc2,___xxtofl@val
 39206  001282  CFDD F061          	movff	postdec2,___xxtofl@val+1
 39207  001286  0E00               	movlw	0
 39208  001288  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 39209  00128A  0EFF               	movlw	-1
 39210  00128C  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 39211  00128E  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 39212  001290  0E01               	movlw	1
 39213  001292  EC29  F02F         	call	___xxtofl
 39214  001296  C060  F06E         	movff	?___xxtofl,___flmul@b
 39215  00129A  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 39216  00129E  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 39217  0012A2  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 39218  0012A6  EC4E  F017         	call	___flmul	;wreg free
 39219  0012AA  C06E  F0A4         	movff	?___flmul,___fladd@b
 39220  0012AE  C06F  F0A5         	movff	?___flmul+1,___fladd@b+1
 39221  0012B2  C070  F0A6         	movff	?___flmul+2,___fladd@b+2
 39222  0012B6  C071  F0A7         	movff	?___flmul+3,___fladd@b+3
 39223  0012BA  ECF7  F018         	call	___fladd	;wreg free
 39224  0012BE  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 39225  0012C2  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 39226  0012C6  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 39227  0012CA  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 39228  0012CE  ECE3  F034         	call	___fltol	;wreg free
 39229  0012D2  0100               	movlb	0	; () banked
 39230  0012D4  51CB               	movf	readPotentiometers@i_3358& (0+255),w,b
 39231  0012D6  0D02               	mullw	2
 39232  0012D8  0E40               	movlw	low _ema_sum
 39233  0012DA  24F3               	addwf	prodl,w,c
 39234  0012DC  6ED9               	movwf	fsr2l,c
 39235  0012DE  0E02               	movlw	high _ema_sum
 39236  0012E0  20F4               	addwfc	prodh,w,c
 39237  0012E2  6EDA               	movwf	fsr2h,c
 39238  0012E4  C0B8  FFDE         	movff	?___fltol,postinc2
 39239  0012E8  C0B9  FFDD         	movff	?___fltol+1,postdec2
 39240                           
 39241                           ; BSR set to: 0
 39242  0012EC  2BCB               	incf	readPotentiometers@i_3358& (0+255),f,b
 39243  0012EE  D75F               	goto	l22979
 39244  0012F0                     u37530:
 39245                           
 39246                           ; BSR set to: 0
 39247                           ;potentiometers.c: 59: }
 39248                           ;potentiometers.c: 64: for(unsigned char i = 0; i<16; i++){
 39249                           
 39250                           ; BSR set to: 0
 39251  0012F0  0E00               	movlw	0
 39252  0012F2  6FCD               	movwf	readPotentiometers@i_3359& (0+255),b
 39253  0012F4                     l22991:
 39254                           
 39255                           ; BSR set to: 0
 39256  0012F4  0E0F               	movlw	15
 39257  0012F6  65CD               	cpfsgt	readPotentiometers@i_3359& (0+255),b
 39258  0012F8  D001               	goto	l3882
 39259  0012FA  D226               	goto	u37690
 39260  0012FC                     l3882:
 39261                           
 39262                           ; BSR set to: 0
 39263                           ;potentiometers.c: 74: static unsigned long count;
 39264                           ;potentiometers.c: 75: count++;
 39265                           
 39266                           ; BSR set to: 0
 39267  0012FC  0E01               	movlw	1
 39268  0012FE  0102               	movlb	2	; () banked
 39269  001300  2780               	addwf	readPotentiometers@count& (0+255),f,b
 39270  001302  0E00               	movlw	0
 39271  001304  2381               	addwfc	(readPotentiometers@count+1)& (0+255),f,b
 39272  001306  2382               	addwfc	(readPotentiometers@count+2)& (0+255),f,b
 39273  001308  2383               	addwfc	(readPotentiometers@count+3)& (0+255),f,b
 39274                           
 39275                           ; BSR set to: 2
 39276                           ;potentiometers.c: 78: if (FIRST_READING == 0) {potentiometer_filtered_last[i] = ema_sum
      +                          [i];}
 39277  00130A  B032               	btfsc	readPotentiometers@FIRST_READING/(0+8),readPotentiometers@FIRST_READING& (0+7),c
 39278  00130C  D015               	goto	l3886
 39279                           
 39280                           ; BSR set to: 2
 39281  00130E  0100               	movlb	0	; () banked
 39282  001310  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39283  001312  0D02               	mullw	2
 39284  001314  0E40               	movlw	low _ema_sum
 39285  001316  24F3               	addwf	prodl,w,c
 39286  001318  6ED9               	movwf	fsr2l,c
 39287  00131A  0E02               	movlw	high _ema_sum
 39288  00131C  20F4               	addwfc	prodh,w,c
 39289  00131E  6EDA               	movwf	fsr2h,c
 39290  001320  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39291  001322  0D02               	mullw	2
 39292  001324  0E00               	movlw	low _potentiometer_filtered_last
 39293  001326  24F3               	addwf	prodl,w,c
 39294  001328  6EE1               	movwf	fsr1l,c
 39295  00132A  0E02               	movlw	high _potentiometer_filtered_last
 39296  00132C  20F4               	addwfc	prodh,w,c
 39297  00132E  6EE2               	movwf	fsr1h,c
 39298  001330  CFDE FFE6          	movff	postinc2,postinc1
 39299  001334  CFDD FFE5          	movff	postdec2,postdec1
 39300  001338                     l3886:
 39301                           
 39302                           ;potentiometers.c: 80: if (((int)(ema_sum[i] - potentiometer_filtered_last[i]) >= HYST_V
      +                          AL) || ((int)(potentiometer_filtered_last[i] - ema_sum[i]) >= HYST_VAL)) {
 39303                           
 39304                           ; BSR set to: 0
 39305  001338  0100               	movlb	0	; () banked
 39306  00133A  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39307  00133C  0D02               	mullw	2
 39308  00133E  0E40               	movlw	low _ema_sum
 39309  001340  24F3               	addwf	prodl,w,c
 39310  001342  6ED9               	movwf	fsr2l,c
 39311  001344  0E02               	movlw	high _ema_sum
 39312  001346  20F4               	addwfc	prodh,w,c
 39313  001348  6EDA               	movwf	fsr2h,c
 39314  00134A  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 39315  00134E  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 39316  001352  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39317  001354  0D02               	mullw	2
 39318  001356  0E00               	movlw	low _potentiometer_filtered_last
 39319  001358  24F3               	addwf	prodl,w,c
 39320  00135A  6ED9               	movwf	fsr2l,c
 39321  00135C  0E02               	movlw	high _potentiometer_filtered_last
 39322  00135E  20F4               	addwfc	prodh,w,c
 39323  001360  6EDA               	movwf	fsr2h,c
 39324  001362  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 39325  001366  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 39326  00136A  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 39327  00136C  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 39328  00136E  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 39329  001370  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 39330  001372  51C2               	movf	??_readPotentiometers& (0+255),w,b
 39331  001374  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 39332  001376  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 39333  001378  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 39334  00137A  0101               	movlb	1	; () banked
 39335  00137C  51EB               	movf	_HYST_VAL& (0+255),w,b
 39336  00137E  0100               	movlb	0	; () banked
 39337  001380  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 39338  001382  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 39339  001384  0A80               	xorlw	128
 39340  001386  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 39341  001388  0101               	movlb	1	; () banked
 39342  00138A  51EC               	movf	(_HYST_VAL+1)& (0+255),w,b
 39343  00138C  0A80               	xorlw	128
 39344  00138E  0100               	movlb	0	; () banked
 39345  001390  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 39346  001392  B0D8               	btfsc	status,0,c
 39347  001394  D02E               	goto	u37570
 39348                           
 39349                           ; BSR set to: 0
 39350  001396  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39351  001398  0D02               	mullw	2
 39352  00139A  0E00               	movlw	low _potentiometer_filtered_last
 39353  00139C  24F3               	addwf	prodl,w,c
 39354  00139E  6ED9               	movwf	fsr2l,c
 39355  0013A0  0E02               	movlw	high _potentiometer_filtered_last
 39356  0013A2  20F4               	addwfc	prodh,w,c
 39357  0013A4  6EDA               	movwf	fsr2h,c
 39358  0013A6  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 39359  0013AA  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 39360  0013AE  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39361  0013B0  0D02               	mullw	2
 39362  0013B2  0E40               	movlw	low _ema_sum
 39363  0013B4  24F3               	addwf	prodl,w,c
 39364  0013B6  6ED9               	movwf	fsr2l,c
 39365  0013B8  0E02               	movlw	high _ema_sum
 39366  0013BA  20F4               	addwfc	prodh,w,c
 39367  0013BC  6EDA               	movwf	fsr2h,c
 39368  0013BE  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 39369  0013C2  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 39370  0013C6  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 39371  0013C8  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 39372  0013CA  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 39373  0013CC  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 39374  0013CE  51C2               	movf	??_readPotentiometers& (0+255),w,b
 39375  0013D0  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 39376  0013D2  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 39377  0013D4  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 39378  0013D6  0101               	movlb	1	; () banked
 39379  0013D8  51EB               	movf	_HYST_VAL& (0+255),w,b
 39380  0013DA  0100               	movlb	0	; () banked
 39381  0013DC  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 39382  0013DE  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 39383  0013E0  0A80               	xorlw	128
 39384  0013E2  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 39385  0013E4  0101               	movlb	1	; () banked
 39386  0013E6  51EC               	movf	(_HYST_VAL+1)& (0+255),w,b
 39387  0013E8  0A80               	xorlw	128
 39388  0013EA  0100               	movlb	0	; () banked
 39389  0013EC  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 39390  0013EE  A0D8               	btfss	status,0,c
 39391  0013F0  D196               	goto	l3887
 39392  0013F2                     u37570:
 39393                           
 39394                           ; BSR set to: 0
 39395                           ;potentiometers.c: 82: if((i==iterator_focus) || (iterator_focus==255)) {count = 0; coun
      +                          t_ISR = 0;}
 39396                           
 39397                           ; BSR set to: 0
 39398  0013F2  51FA               	movf	_iterator_focus& (0+255),w,b
 39399  0013F4  19CD               	xorwf	readPotentiometers@i_3359& (0+255),w,b
 39400  0013F6  B4D8               	btfsc	status,2,c
 39401  0013F8  D003               	goto	u37590
 39402                           
 39403                           ; BSR set to: 0
 39404  0013FA  29FA               	incf	_iterator_focus& (0+255),w,b
 39405  0013FC  A4D8               	btfss	status,2,c
 39406  0013FE  D011               	goto	l3890
 39407  001400                     u37590:
 39408                           
 39409                           ; BSR set to: 0
 39410                           
 39411                           ; BSR set to: 0
 39412  001400  0E00               	movlw	0
 39413  001402  0102               	movlb	2	; () banked
 39414  001404  6F80               	movwf	readPotentiometers@count& (0+255),b
 39415  001406  0E00               	movlw	0
 39416  001408  6F81               	movwf	(readPotentiometers@count+1)& (0+255),b
 39417  00140A  0E00               	movlw	0
 39418  00140C  6F82               	movwf	(readPotentiometers@count+2)& (0+255),b
 39419  00140E  0E00               	movlw	0
 39420  001410  6F83               	movwf	(readPotentiometers@count+3)& (0+255),b
 39421  001412  0E00               	movlw	0
 39422  001414  6F84               	movwf	_count_ISR& (0+255),b
 39423  001416  0E00               	movlw	0
 39424  001418  6F85               	movwf	(_count_ISR+1)& (0+255),b
 39425  00141A  0E00               	movlw	0
 39426  00141C  6F86               	movwf	(_count_ISR+2)& (0+255),b
 39427  00141E  0E00               	movlw	0
 39428  001420  6F87               	movwf	(_count_ISR+3)& (0+255),b
 39429  001422                     l3890:
 39430                           
 39431                           ;potentiometers.c: 84: HYST_VAL = 8;
 39432  001422  0E00               	movlw	0
 39433  001424  0101               	movlb	1	; () banked
 39434  001426  6FEC               	movwf	(_HYST_VAL+1)& (0+255),b
 39435  001428  0E08               	movlw	8
 39436  00142A  6FEB               	movwf	_HYST_VAL& (0+255),b
 39437                           
 39438                           ; BSR set to: 1
 39439                           ;potentiometers.c: 91: if(iterator_focus == 255) {iterator_focus = i;}
 39440  00142C  0100               	movlb	0	; () banked
 39441  00142E  29FA               	incf	_iterator_focus& (0+255),w,b
 39442  001430  B4D8               	btfsc	status,2,c
 39443                           
 39444                           ; BSR set to: 0
 39445  001432  C0CD  F0FA         	movff	readPotentiometers@i_3359,_iterator_focus
 39446                           
 39447                           ; BSR set to: 0
 39448                           ;potentiometers.c: 92: potentiometer_filtered_now[i] = ema_sum[i];
 39449                           
 39450                           ; BSR set to: 0
 39451  001436  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39452  001438  0D02               	mullw	2
 39453  00143A  0E40               	movlw	low _ema_sum
 39454  00143C  24F3               	addwf	prodl,w,c
 39455  00143E  6ED9               	movwf	fsr2l,c
 39456  001440  0E02               	movlw	high _ema_sum
 39457  001442  20F4               	addwfc	prodh,w,c
 39458  001444  6EDA               	movwf	fsr2h,c
 39459  001446  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39460  001448  0D02               	mullw	2
 39461  00144A  0E20               	movlw	low _potentiometer_filtered_now
 39462  00144C  24F3               	addwf	prodl,w,c
 39463  00144E  6EE1               	movwf	fsr1l,c
 39464  001450  0E02               	movlw	high _potentiometer_filtered_now
 39465  001452  20F4               	addwfc	prodh,w,c
 39466  001454  6EE2               	movwf	fsr1h,c
 39467  001456  CFDE FFE6          	movff	postinc2,postinc1
 39468  00145A  CFDD FFE5          	movff	postdec2,postdec1
 39469                           
 39470                           ; BSR set to: 0
 39471                           ;potentiometers.c: 95: if(inputPotsArray[i].controller_resolution == 0) {
 39472  00145E  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39473  001460  0D03               	mullw	3
 39474  001462  0EAC               	movlw	low _inputPotsArray
 39475  001464  24F3               	addwf	prodl,w,c
 39476  001466  6ED9               	movwf	fsr2l,c
 39477  001468  0E02               	movlw	high _inputPotsArray
 39478  00146A  20F4               	addwfc	prodh,w,c
 39479  00146C  6EDA               	movwf	fsr2h,c
 39480  00146E  0102               	movlb	2	; () banked
 39481  001470  B0DF               	btfsc	indf2,0,c
 39482  001472  D097               	goto	l3896
 39483                           
 39484                           ; BSR set to: 2
 39485                           ;potentiometers.c: 96: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i]
      +                          , 0, 0x3F50, 0, 0x3FFF);
 39486  001474  0100               	movlb	0	; () banked
 39487  001476  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39488  001478  0D02               	mullw	2
 39489  00147A  0E20               	movlw	low _potentiometer_filtered_now
 39490  00147C  24F3               	addwf	prodl,w,c
 39491  00147E  6ED9               	movwf	fsr2l,c
 39492  001480  0E02               	movlw	high _potentiometer_filtered_now
 39493  001482  20F4               	addwfc	prodh,w,c
 39494  001484  6EDA               	movwf	fsr2h,c
 39495  001486  CFDE F07A          	movff	postinc2,map@x
 39496  00148A  CFDD F07B          	movff	postdec2,map@x+1
 39497  00148E  0E00               	movlw	0
 39498  001490  BF7B               	btfsc	(map@x+1)& (0+255),7,b
 39499  001492  0EFF               	movlw	-1
 39500  001494  6F7C               	movwf	(map@x+2)& (0+255),b
 39501  001496  6F7D               	movwf	(map@x+3)& (0+255),b
 39502  001498  0E00               	movlw	0
 39503  00149A  6F7E               	movwf	map@in_min& (0+255),b
 39504  00149C  0E00               	movlw	0
 39505  00149E  6F7F               	movwf	(map@in_min+1)& (0+255),b
 39506  0014A0  0E00               	movlw	0
 39507  0014A2  6F80               	movwf	(map@in_min+2)& (0+255),b
 39508  0014A4  0E00               	movlw	0
 39509  0014A6  6F81               	movwf	(map@in_min+3)& (0+255),b
 39510  0014A8  0E50               	movlw	80
 39511  0014AA  6F82               	movwf	map@in_max& (0+255),b
 39512  0014AC  0E3F               	movlw	63
 39513  0014AE  6F83               	movwf	(map@in_max+1)& (0+255),b
 39514  0014B0  0E00               	movlw	0
 39515  0014B2  6F84               	movwf	(map@in_max+2)& (0+255),b
 39516  0014B4  0E00               	movlw	0
 39517  0014B6  6F85               	movwf	(map@in_max+3)& (0+255),b
 39518  0014B8  0E00               	movlw	0
 39519  0014BA  6F86               	movwf	map@out_min& (0+255),b
 39520  0014BC  0E00               	movlw	0
 39521  0014BE  6F87               	movwf	(map@out_min+1)& (0+255),b
 39522  0014C0  0E00               	movlw	0
 39523  0014C2  6F88               	movwf	(map@out_min+2)& (0+255),b
 39524  0014C4  0E00               	movlw	0
 39525  0014C6  6F89               	movwf	(map@out_min+3)& (0+255),b
 39526  0014C8  0EFF               	movlw	255
 39527  0014CA  6F8A               	movwf	map@out_max& (0+255),b
 39528  0014CC  0E3F               	movlw	63
 39529  0014CE  6F8B               	movwf	(map@out_max+1)& (0+255),b
 39530  0014D0  0E00               	movlw	0
 39531  0014D2  6F8C               	movwf	(map@out_max+2)& (0+255),b
 39532  0014D4  0E00               	movlw	0
 39533  0014D6  6F8D               	movwf	(map@out_max+3)& (0+255),b
 39534  0014D8  ECFF  F033         	call	_map	;wreg free
 39535  0014DC  0100               	movlb	0	; () banked
 39536  0014DE  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39537  0014E0  0D02               	mullw	2
 39538  0014E2  0E20               	movlw	low _potentiometer_filtered_now
 39539  0014E4  24F3               	addwf	prodl,w,c
 39540  0014E6  6ED9               	movwf	fsr2l,c
 39541  0014E8  0E02               	movlw	high _potentiometer_filtered_now
 39542  0014EA  20F4               	addwfc	prodh,w,c
 39543  0014EC  6EDA               	movwf	fsr2h,c
 39544  0014EE  C07A  FFDE         	movff	?_map,postinc2
 39545  0014F2  C07B  FFDD         	movff	?_map+1,postdec2
 39546                           
 39547                           ; BSR set to: 0
 39548                           ;potentiometers.c: 97: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] >> 
      +                          3;
 39549  0014F6  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39550  0014F8  0D02               	mullw	2
 39551  0014FA  0E20               	movlw	low _potentiometer_filtered_now
 39552  0014FC  24F3               	addwf	prodl,w,c
 39553  0014FE  6ED9               	movwf	fsr2l,c
 39554  001500  0E02               	movlw	high _potentiometer_filtered_now
 39555  001502  20F4               	addwfc	prodh,w,c
 39556  001504  6EDA               	movwf	fsr2h,c
 39557  001506  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 39558  00150A  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 39559  00150E  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 39560  001510  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 39561  001512  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 39562  001514  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 39563  001516  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 39564  001518  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 39565  00151A  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 39566  00151C  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 39567  00151E  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 39568  001520  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39569  001522  0D02               	mullw	2
 39570  001524  0E20               	movlw	low _potentiometer_filtered_now
 39571  001526  24F3               	addwf	prodl,w,c
 39572  001528  6ED9               	movwf	fsr2l,c
 39573  00152A  0E02               	movlw	high _potentiometer_filtered_now
 39574  00152C  20F4               	addwfc	prodh,w,c
 39575  00152E  6EDA               	movwf	fsr2h,c
 39576  001530  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 39577  001534  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 39578                           
 39579                           ; BSR set to: 0
 39580                           ;potentiometers.c: 98: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now[
      +                          i] = 0;}
 39581  001538  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39582  00153A  0D02               	mullw	2
 39583  00153C  0E20               	movlw	low _potentiometer_filtered_now
 39584  00153E  24F3               	addwf	prodl,w,c
 39585  001540  6ED9               	movwf	fsr2l,c
 39586  001542  0E02               	movlw	high _potentiometer_filtered_now
 39587  001544  20F4               	addwfc	prodh,w,c
 39588  001546  6EDA               	movwf	fsr2h,c
 39589  001548  0E01               	movlw	1
 39590  00154A  AEDB               	btfss	plusw2,7,c
 39591  00154C  D00C               	goto	l3895
 39592                           
 39593                           ; BSR set to: 0
 39594  00154E  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39595  001550  0D02               	mullw	2
 39596  001552  0E20               	movlw	low _potentiometer_filtered_now
 39597  001554  24F3               	addwf	prodl,w,c
 39598  001556  6ED9               	movwf	fsr2l,c
 39599  001558  0E02               	movlw	high _potentiometer_filtered_now
 39600  00155A  20F4               	addwfc	prodh,w,c
 39601  00155C  6EDA               	movwf	fsr2h,c
 39602  00155E  0E00               	movlw	0
 39603  001560  6EDE               	movwf	postinc2,c
 39604  001562  0E00               	movlw	0
 39605  001564  6EDD               	movwf	postdec2,c
 39606  001566                     l3895:
 39607                           
 39608                           ; BSR set to: 0
 39609                           ;potentiometers.c: 99: if(potentiometer_filtered_now[i] > 127){potentiometer_filtered_no
      +                          w[i] = 127;}
 39610  001566  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39611  001568  0D02               	mullw	2
 39612  00156A  0E20               	movlw	low _potentiometer_filtered_now
 39613  00156C  24F3               	addwf	prodl,w,c
 39614  00156E  6ED9               	movwf	fsr2l,c
 39615  001570  0E02               	movlw	high _potentiometer_filtered_now
 39616  001572  20F4               	addwfc	prodh,w,c
 39617  001574  6EDA               	movwf	fsr2h,c
 39618  001576  0E01               	movlw	1
 39619  001578  BEDB               	btfsc	plusw2,7,c
 39620  00157A  D013               	goto	l3896
 39621  00157C  0E01               	movlw	1
 39622  00157E  50DB               	movf	plusw2,w,c
 39623  001580  E104               	bnz	u37630
 39624  001582  0E80               	movlw	128
 39625  001584  5CDE               	subwf	postinc2,w,c
 39626  001586  A0D8               	btfss	status,0,c
 39627  001588  D00C               	goto	l3896
 39628  00158A                     u37630:
 39629                           
 39630                           ; BSR set to: 0
 39631  00158A  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39632  00158C  0D02               	mullw	2
 39633  00158E  0E20               	movlw	low _potentiometer_filtered_now
 39634  001590  24F3               	addwf	prodl,w,c
 39635  001592  6ED9               	movwf	fsr2l,c
 39636  001594  0E02               	movlw	high _potentiometer_filtered_now
 39637  001596  20F4               	addwfc	prodh,w,c
 39638  001598  6EDA               	movwf	fsr2h,c
 39639  00159A  0E7F               	movlw	127
 39640  00159C  6EDE               	movwf	postinc2,c
 39641  00159E  0E00               	movlw	0
 39642  0015A0  6EDD               	movwf	postdec2,c
 39643  0015A2                     l3896:
 39644                           
 39645                           ;potentiometers.c: 100: }
 39646                           ;potentiometers.c: 103: if(inputPotsArray[i].controller_resolution == 1) {
 39647                           
 39648                           ; BSR set to: 0
 39649  0015A2  0100               	movlb	0	; () banked
 39650  0015A4  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39651  0015A6  0D03               	mullw	3
 39652  0015A8  0EAC               	movlw	low _inputPotsArray
 39653  0015AA  24F3               	addwf	prodl,w,c
 39654  0015AC  6ED9               	movwf	fsr2l,c
 39655  0015AE  0E02               	movlw	high _inputPotsArray
 39656  0015B0  20F4               	addwfc	prodh,w,c
 39657  0015B2  6EDA               	movwf	fsr2h,c
 39658  0015B4  0102               	movlb	2	; () banked
 39659  0015B6  A0DF               	btfss	indf2,0,c
 39660  0015B8  D095               	goto	l3899
 39661                           
 39662                           ; BSR set to: 2
 39663                           ;potentiometers.c: 104: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] <<
      +                           4;
 39664  0015BA  0100               	movlb	0	; () banked
 39665  0015BC  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39666  0015BE  0D02               	mullw	2
 39667  0015C0  0E20               	movlw	low _potentiometer_filtered_now
 39668  0015C2  24F3               	addwf	prodl,w,c
 39669  0015C4  6ED9               	movwf	fsr2l,c
 39670  0015C6  0E02               	movlw	high _potentiometer_filtered_now
 39671  0015C8  20F4               	addwfc	prodh,w,c
 39672  0015CA  6EDA               	movwf	fsr2h,c
 39673  0015CC  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 39674  0015D0  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 39675  0015D4  3BC2               	swapf	??_readPotentiometers& (0+255),f,b
 39676  0015D6  3BC3               	swapf	(??_readPotentiometers+1)& (0+255),f,b
 39677  0015D8  0EF0               	movlw	240
 39678  0015DA  17C3               	andwf	(??_readPotentiometers+1)& (0+255),f,b
 39679  0015DC  51C2               	movf	??_readPotentiometers& (0+255),w,b
 39680  0015DE  0B0F               	andlw	15
 39681  0015E0  13C3               	iorwf	(??_readPotentiometers+1)& (0+255),f,b
 39682  0015E2  0EF0               	movlw	240
 39683  0015E4  17C2               	andwf	??_readPotentiometers& (0+255),f,b
 39684  0015E6  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39685  0015E8  0D02               	mullw	2
 39686  0015EA  0E20               	movlw	low _potentiometer_filtered_now
 39687  0015EC  24F3               	addwf	prodl,w,c
 39688  0015EE  6ED9               	movwf	fsr2l,c
 39689  0015F0  0E02               	movlw	high _potentiometer_filtered_now
 39690  0015F2  20F4               	addwfc	prodh,w,c
 39691  0015F4  6EDA               	movwf	fsr2h,c
 39692  0015F6  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 39693  0015FA  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 39694                           
 39695                           ; BSR set to: 0
 39696                           ;potentiometers.c: 105: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i
      +                          ], 0x50, 0x3F00, 0, 0x3FFF);
 39697  0015FE  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39698  001600  0D02               	mullw	2
 39699  001602  0E20               	movlw	low _potentiometer_filtered_now
 39700  001604  24F3               	addwf	prodl,w,c
 39701  001606  6ED9               	movwf	fsr2l,c
 39702  001608  0E02               	movlw	high _potentiometer_filtered_now
 39703  00160A  20F4               	addwfc	prodh,w,c
 39704  00160C  6EDA               	movwf	fsr2h,c
 39705  00160E  CFDE F07A          	movff	postinc2,map@x
 39706  001612  CFDD F07B          	movff	postdec2,map@x+1
 39707  001616  0E00               	movlw	0
 39708  001618  BF7B               	btfsc	(map@x+1)& (0+255),7,b
 39709  00161A  0EFF               	movlw	-1
 39710  00161C  6F7C               	movwf	(map@x+2)& (0+255),b
 39711  00161E  6F7D               	movwf	(map@x+3)& (0+255),b
 39712  001620  0E50               	movlw	80
 39713  001622  6F7E               	movwf	map@in_min& (0+255),b
 39714  001624  0E00               	movlw	0
 39715  001626  6F7F               	movwf	(map@in_min+1)& (0+255),b
 39716  001628  0E00               	movlw	0
 39717  00162A  6F80               	movwf	(map@in_min+2)& (0+255),b
 39718  00162C  0E00               	movlw	0
 39719  00162E  6F81               	movwf	(map@in_min+3)& (0+255),b
 39720  001630  0E00               	movlw	0
 39721  001632  6F82               	movwf	map@in_max& (0+255),b
 39722  001634  0E3F               	movlw	63
 39723  001636  6F83               	movwf	(map@in_max+1)& (0+255),b
 39724  001638  0E00               	movlw	0
 39725  00163A  6F84               	movwf	(map@in_max+2)& (0+255),b
 39726  00163C  0E00               	movlw	0
 39727  00163E  6F85               	movwf	(map@in_max+3)& (0+255),b
 39728  001640  0E00               	movlw	0
 39729  001642  6F86               	movwf	map@out_min& (0+255),b
 39730  001644  0E00               	movlw	0
 39731  001646  6F87               	movwf	(map@out_min+1)& (0+255),b
 39732  001648  0E00               	movlw	0
 39733  00164A  6F88               	movwf	(map@out_min+2)& (0+255),b
 39734  00164C  0E00               	movlw	0
 39735  00164E  6F89               	movwf	(map@out_min+3)& (0+255),b
 39736  001650  0EFF               	movlw	255
 39737  001652  6F8A               	movwf	map@out_max& (0+255),b
 39738  001654  0E3F               	movlw	63
 39739  001656  6F8B               	movwf	(map@out_max+1)& (0+255),b
 39740  001658  0E00               	movlw	0
 39741  00165A  6F8C               	movwf	(map@out_max+2)& (0+255),b
 39742  00165C  0E00               	movlw	0
 39743  00165E  6F8D               	movwf	(map@out_max+3)& (0+255),b
 39744  001660  ECFF  F033         	call	_map	;wreg free
 39745  001664  0100               	movlb	0	; () banked
 39746  001666  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39747  001668  0D02               	mullw	2
 39748  00166A  0E20               	movlw	low _potentiometer_filtered_now
 39749  00166C  24F3               	addwf	prodl,w,c
 39750  00166E  6ED9               	movwf	fsr2l,c
 39751  001670  0E02               	movlw	high _potentiometer_filtered_now
 39752  001672  20F4               	addwfc	prodh,w,c
 39753  001674  6EDA               	movwf	fsr2h,c
 39754  001676  C07A  FFDE         	movff	?_map,postinc2
 39755  00167A  C07B  FFDD         	movff	?_map+1,postdec2
 39756                           
 39757                           ; BSR set to: 0
 39758                           ;potentiometers.c: 107: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now
      +                          [i] = 0;}
 39759  00167E  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39760  001680  0D02               	mullw	2
 39761  001682  0E20               	movlw	low _potentiometer_filtered_now
 39762  001684  24F3               	addwf	prodl,w,c
 39763  001686  6ED9               	movwf	fsr2l,c
 39764  001688  0E02               	movlw	high _potentiometer_filtered_now
 39765  00168A  20F4               	addwfc	prodh,w,c
 39766  00168C  6EDA               	movwf	fsr2h,c
 39767  00168E  0E01               	movlw	1
 39768  001690  AEDB               	btfss	plusw2,7,c
 39769  001692  D00C               	goto	l3898
 39770                           
 39771                           ; BSR set to: 0
 39772  001694  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39773  001696  0D02               	mullw	2
 39774  001698  0E20               	movlw	low _potentiometer_filtered_now
 39775  00169A  24F3               	addwf	prodl,w,c
 39776  00169C  6ED9               	movwf	fsr2l,c
 39777  00169E  0E02               	movlw	high _potentiometer_filtered_now
 39778  0016A0  20F4               	addwfc	prodh,w,c
 39779  0016A2  6EDA               	movwf	fsr2h,c
 39780  0016A4  0E00               	movlw	0
 39781  0016A6  6EDE               	movwf	postinc2,c
 39782  0016A8  0E00               	movlw	0
 39783  0016AA  6EDD               	movwf	postdec2,c
 39784  0016AC                     l3898:
 39785                           
 39786                           ; BSR set to: 0
 39787                           ;potentiometers.c: 108: if(potentiometer_filtered_now[i] > 0x3FFF){potentiometer_filtere
      +                          d_now[i] = 0x3FFF;}
 39788  0016AC  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39789  0016AE  0D02               	mullw	2
 39790  0016B0  0E20               	movlw	low _potentiometer_filtered_now
 39791  0016B2  24F3               	addwf	prodl,w,c
 39792  0016B4  6ED9               	movwf	fsr2l,c
 39793  0016B6  0E02               	movlw	high _potentiometer_filtered_now
 39794  0016B8  20F4               	addwfc	prodh,w,c
 39795  0016BA  6EDA               	movwf	fsr2h,c
 39796  0016BC  0E01               	movlw	1
 39797  0016BE  BEDB               	btfsc	plusw2,7,c
 39798  0016C0  D011               	goto	l3899
 39799  0016C2  52DE               	movf	postinc2,f,c
 39800  0016C4  0E40               	movlw	64
 39801  0016C6  5CDE               	subwf	postinc2,w,c
 39802  0016C8  A0D8               	btfss	status,0,c
 39803  0016CA  D00C               	goto	l3899
 39804                           
 39805                           ; BSR set to: 0
 39806  0016CC  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39807  0016CE  0D02               	mullw	2
 39808  0016D0  0E20               	movlw	low _potentiometer_filtered_now
 39809  0016D2  24F3               	addwf	prodl,w,c
 39810  0016D4  6ED9               	movwf	fsr2l,c
 39811  0016D6  0E02               	movlw	high _potentiometer_filtered_now
 39812  0016D8  20F4               	addwfc	prodh,w,c
 39813  0016DA  6EDA               	movwf	fsr2h,c
 39814  0016DC  0EFF               	movlw	255
 39815  0016DE  6EDE               	movwf	postinc2,c
 39816  0016E0  0E3F               	movlw	63
 39817  0016E2  6EDD               	movwf	postdec2,c
 39818  0016E4                     l3899:
 39819                           
 39820                           ;potentiometers.c: 109: }
 39821                           ;potentiometers.c: 116: if(i==iterator_focus) {processPotentiometers(iterator_focus);}
 39822                           
 39823                           ; BSR set to: 0
 39824                           
 39825                           ; BSR set to: 0
 39826  0016E4  0100               	movlb	0	; () banked
 39827  0016E6  51FA               	movf	_iterator_focus& (0+255),w,b
 39828  0016E8  19CD               	xorwf	readPotentiometers@i_3359& (0+255),w,b
 39829  0016EA  A4D8               	btfss	status,2,c
 39830  0016EC  D003               	goto	l3900
 39831                           
 39832                           ; BSR set to: 0
 39833  0016EE  51FA               	movf	_iterator_focus& (0+255),w,b
 39834  0016F0  ECCC  F01E         	call	_processPotentiometers
 39835  0016F4                     l3900:
 39836                           
 39837                           ;potentiometers.c: 117: potentiometer_filtered_last[i] = ema_sum[i];
 39838  0016F4  0100               	movlb	0	; () banked
 39839  0016F6  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39840  0016F8  0D02               	mullw	2
 39841  0016FA  0E40               	movlw	low _ema_sum
 39842  0016FC  24F3               	addwf	prodl,w,c
 39843  0016FE  6ED9               	movwf	fsr2l,c
 39844  001700  0E02               	movlw	high _ema_sum
 39845  001702  20F4               	addwfc	prodh,w,c
 39846  001704  6EDA               	movwf	fsr2h,c
 39847  001706  51CD               	movf	readPotentiometers@i_3359& (0+255),w,b
 39848  001708  0D02               	mullw	2
 39849  00170A  0E00               	movlw	low _potentiometer_filtered_last
 39850  00170C  24F3               	addwf	prodl,w,c
 39851  00170E  6EE1               	movwf	fsr1l,c
 39852  001710  0E02               	movlw	high _potentiometer_filtered_last
 39853  001712  20F4               	addwfc	prodh,w,c
 39854  001714  6EE2               	movwf	fsr1h,c
 39855  001716  CFDE FFE6          	movff	postinc2,postinc1
 39856  00171A  CFDD FFE5          	movff	postdec2,postdec1
 39857  00171E                     l3887:
 39858                           
 39859                           ; BSR set to: 0
 39860                           ;potentiometers.c: 119: }
 39861                           ;potentiometers.c: 123: if (count_ISR >= number_of_interrupts) {
 39862                           
 39863                           ; BSR set to: 0
 39864  00171E  0102               	movlb	2	; () banked
 39865  001720  5188               	movf	_number_of_interrupts& (0+255),w,b
 39866  001722  5D84               	subwf	_count_ISR& (0+255),w,b
 39867  001724  5189               	movf	(_number_of_interrupts+1)& (0+255),w,b
 39868  001726  5985               	subwfb	(_count_ISR+1)& (0+255),w,b
 39869  001728  518A               	movf	(_number_of_interrupts+2)& (0+255),w,b
 39870  00172A  5986               	subwfb	(_count_ISR+2)& (0+255),w,b
 39871  00172C  518B               	movf	(_number_of_interrupts+3)& (0+255),w,b
 39872  00172E  5987               	subwfb	(_count_ISR+3)& (0+255),w,b
 39873  001730  A0D8               	btfss	status,0,c
 39874  001732  D007               	goto	l3901
 39875                           
 39876                           ; BSR set to: 2
 39877                           ;potentiometers.c: 125: HYST_VAL = 16;
 39878  001734  0E00               	movlw	0
 39879  001736  0101               	movlb	1	; () banked
 39880  001738  6FEC               	movwf	(_HYST_VAL+1)& (0+255),b
 39881  00173A  0E10               	movlw	16
 39882  00173C  6FEB               	movwf	_HYST_VAL& (0+255),b
 39883                           
 39884                           ; BSR set to: 1
 39885                           ;potentiometers.c: 132: iterator_focus = 255;
 39886  00173E  0100               	movlb	0	; () banked
 39887  001740  69FA               	setf	_iterator_focus& (0+255),b
 39888  001742                     l3901:
 39889                           
 39890                           ; BSR set to: 0
 39891  001742  0100               	movlb	0	; () banked
 39892  001744  2BCD               	incf	readPotentiometers@i_3359& (0+255),f,b
 39893  001746  D5D6               	goto	l22991
 39894  001748                     u37690:
 39895                           
 39896                           ; BSR set to: 0
 39897                           ;potentiometers.c: 133: }
 39898                           ;potentiometers.c: 134: }
 39899                           ;potentiometers.c: 136: FIRST_READING = 1;
 39900  001748  8032               	bsf	readPotentiometers@FIRST_READING/(0+8),readPotentiometers@FIRST_READING& (0+7),c
 39901                           
 39902                           ; BSR set to: 0
 39903  00174A  0012               	return		;funcret
 39904  00174C                     __end_of_readPotentiometers:
 39905                           	opt stack 0
 39906                           tblptru	equ	0xFF8
 39907                           tblptrh	equ	0xFF7
 39908                           tblptrl	equ	0xFF6
 39909                           tablat	equ	0xFF5
 39910                           prodh	equ	0xFF4
 39911                           prodl	equ	0xFF3
 39912                           intcon	equ	0xFF2
 39913                           intcon2	equ	0xFF1
 39914                           postinc0	equ	0xFEE
 39915                           wreg	equ	0xFE8
 39916                           indf1	equ	0xFE7
 39917                           postinc1	equ	0xFE6
 39918                           postdec1	equ	0xFE5
 39919                           fsr1h	equ	0xFE2
 39920                           fsr1l	equ	0xFE1
 39921                           indf2	equ	0xFDF
 39922                           postinc2	equ	0xFDE
 39923                           postdec2	equ	0xFDD
 39924                           plusw2	equ	0xFDB
 39925                           fsr2h	equ	0xFDA
 39926                           fsr2l	equ	0xFD9
 39927                           status	equ	0xFD8
 39928                           
 39929 ;; *************** function _processPotentiometers *****************
 39930 ;; Defined at:
 39931 ;;		line 140 in file "potentiometers.c"
 39932 ;; Parameters:    Size  Location     Type
 39933 ;;  i               1    wreg     unsigned char 
 39934 ;; Auto vars:     Size  Location     Type
 39935 ;;  i               1   19[BANK0 ] unsigned char 
 39936 ;;  highByte        1   18[BANK0 ] unsigned char 
 39937 ;;  lowByte         1   17[BANK0 ] unsigned char 
 39938 ;; Return value:  Size  Location     Type
 39939 ;;                  1    wreg      void 
 39940 ;; Registers used:
 39941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 39942 ;; Tracked objects:
 39943 ;;		On entry : 0/0
 39944 ;;		On exit  : 0/0
 39945 ;;		Unchanged: 0/0
 39946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39948 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39949 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39950 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39951 ;;Total ram usage:        6 bytes
 39952 ;; Hardware stack levels used:    1
 39953 ;; Hardware stack levels required when called:    7
 39954 ;; This function calls:
 39955 ;;		_controlChange
 39956 ;;		_pitchBend
 39957 ;; This function is called by:
 39958 ;;		_readPotentiometers
 39959 ;; This function uses a non-reentrant model
 39960 ;;
 39961                           
 39962                           	psect	text121
 39963  003D98                     __ptext121:
 39964                           	opt stack 0
 39965  003D98                     _processPotentiometers:
 39966                           	opt stack 21
 39967                           
 39968                           ; BSR set to: 0
 39969                           ;incstack = 0
 39970                           ;processPotentiometers@i stored from wreg
 39971  003D98  0100               	movlb	0	; () banked
 39972  003D9A  6F73               	movwf	processPotentiometers@i& (0+255),b
 39973                           
 39974                           ;potentiometers.c: 145: number_to_display = potentiometer_filtered_now[i];
 39975  003D9C  0100               	movlb	0	; () banked
 39976  003D9E  5173               	movf	processPotentiometers@i& (0+255),w,b
 39977  003DA0  0D02               	mullw	2
 39978  003DA2  0E20               	movlw	low _potentiometer_filtered_now
 39979  003DA4  24F3               	addwf	prodl,w,c
 39980  003DA6  6ED9               	movwf	fsr2l,c
 39981  003DA8  0E02               	movlw	high _potentiometer_filtered_now
 39982  003DAA  20F4               	addwfc	prodh,w,c
 39983  003DAC  6EDA               	movwf	fsr2h,c
 39984  003DAE  CFDE F05B          	movff	postinc2,_number_to_display
 39985  003DB2  CFDD F05C          	movff	postdec2,_number_to_display+1
 39986                           
 39987                           ;potentiometers.c: 149: if (inputPotsArray[i].controller_resolution == 0){
 39988  003DB6  5173               	movf	processPotentiometers@i& (0+255),w,b
 39989  003DB8  0D03               	mullw	3
 39990  003DBA  0EAC               	movlw	low _inputPotsArray
 39991  003DBC  24F3               	addwf	prodl,w,c
 39992  003DBE  6ED9               	movwf	fsr2l,c
 39993  003DC0  0E02               	movlw	high _inputPotsArray
 39994  003DC2  20F4               	addwfc	prodh,w,c
 39995  003DC4  6EDA               	movwf	fsr2h,c
 39996  003DC6  0102               	movlb	2	; () banked
 39997  003DC8  B0DF               	btfsc	indf2,0,c
 39998  003DCA  D088               	goto	l3909
 39999                           
 40000                           ; BSR set to: 2
 40001                           ;potentiometers.c: 152: DISPLAY_MODE = 0;
 40002  003DCC  0E00               	movlw	0
 40003  003DCE  6E5A               	movwf	_DISPLAY_MODE,c
 40004                           
 40005                           ;potentiometers.c: 153: DIGIT_MODE = 0;
 40006  003DD0  0E00               	movlw	0
 40007  003DD2  6E59               	movwf	_DIGIT_MODE,c
 40008                           
 40009                           ; BSR set to: 2
 40010                           ;potentiometers.c: 157: if(inputPotsArray[i].controller_number >= 0) {
 40011  003DD4  0100               	movlb	0	; () banked
 40012  003DD6  5173               	movf	processPotentiometers@i& (0+255),w,b
 40013  003DD8  0D03               	mullw	3
 40014  003DDA  0E01               	movlw	1
 40015  003DDC  26F3               	addwf	prodl,f,c
 40016  003DDE  0E00               	movlw	0
 40017  003DE0  22F4               	addwfc	prodh,f,c
 40018  003DE2  0EAC               	movlw	low _inputPotsArray
 40019  003DE4  24F3               	addwf	prodl,w,c
 40020  003DE6  6ED9               	movwf	fsr2l,c
 40021  003DE8  0E02               	movlw	high _inputPotsArray
 40022  003DEA  20F4               	addwfc	prodh,w,c
 40023  003DEC  6EDA               	movwf	fsr2h,c
 40024  003DEE  0E00               	movlw	0
 40025  003DF0  BEDB               	btfsc	plusw2,7,c
 40026  003DF2  D01B               	goto	l3906
 40027                           
 40028                           ; BSR set to: 0
 40029                           ;potentiometers.c: 158: controlChange(channel, inputPotsArray[i].controller_number, pote
      +                          ntiometer_filtered_now[i]);
 40030  003DF4  5173               	movf	processPotentiometers@i& (0+255),w,b
 40031  003DF6  0D03               	mullw	3
 40032  003DF8  0E01               	movlw	1
 40033  003DFA  26F3               	addwf	prodl,f,c
 40034  003DFC  0E00               	movlw	0
 40035  003DFE  22F4               	addwfc	prodh,f,c
 40036  003E00  0EAC               	movlw	low _inputPotsArray
 40037  003E02  24F3               	addwf	prodl,w,c
 40038  003E04  6ED9               	movwf	fsr2l,c
 40039  003E06  0E02               	movlw	high _inputPotsArray
 40040  003E08  20F4               	addwfc	prodh,w,c
 40041  003E0A  6EDA               	movwf	fsr2h,c
 40042  003E0C  50DF               	movf	indf2,w,c
 40043  003E0E  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40044  003E10  5173               	movf	processPotentiometers@i& (0+255),w,b
 40045  003E12  0D02               	mullw	2
 40046  003E14  0E20               	movlw	low _potentiometer_filtered_now
 40047  003E16  24F3               	addwf	prodl,w,c
 40048  003E18  6ED9               	movwf	fsr2l,c
 40049  003E1A  0E02               	movlw	high _potentiometer_filtered_now
 40050  003E1C  20F4               	addwfc	prodh,w,c
 40051  003E1E  6EDA               	movwf	fsr2h,c
 40052  003E20  50DF               	movf	indf2,w,c
 40053  003E22  6F6C               	movwf	controlChange@value& (0+255),b
 40054  003E24  51F6               	movf	_channel& (0+255),w,b
 40055  003E26  EC4C  F049         	call	_controlChange
 40056  003E2A                     l3906:
 40057                           
 40058                           ;potentiometers.c: 159: }
 40059                           ;potentiometers.c: 162: if(inputPotsArray[i].controller_number == -1) {
 40060  003E2A  0100               	movlb	0	; () banked
 40061  003E2C  5173               	movf	processPotentiometers@i& (0+255),w,b
 40062  003E2E  0D03               	mullw	3
 40063  003E30  0E01               	movlw	1
 40064  003E32  26F3               	addwf	prodl,f,c
 40065  003E34  0E00               	movlw	0
 40066  003E36  22F4               	addwfc	prodh,f,c
 40067  003E38  0EAC               	movlw	low _inputPotsArray
 40068  003E3A  24F3               	addwf	prodl,w,c
 40069  003E3C  6ED9               	movwf	fsr2l,c
 40070  003E3E  0E02               	movlw	high _inputPotsArray
 40071  003E40  20F4               	addwfc	prodh,w,c
 40072  003E42  6EDA               	movwf	fsr2h,c
 40073  003E44  28DE               	incf	postinc2,w,c
 40074  003E46  A4D8               	btfss	status,2,c
 40075  003E48  D00A               	goto	l3907
 40076                           
 40077                           ; BSR set to: 0
 40078                           ;potentiometers.c: 163: velocity = potentiometer_filtered_now[i];
 40079  003E4A  5173               	movf	processPotentiometers@i& (0+255),w,b
 40080  003E4C  0D02               	mullw	2
 40081  003E4E  0E20               	movlw	low _potentiometer_filtered_now
 40082  003E50  24F3               	addwf	prodl,w,c
 40083  003E52  6ED9               	movwf	fsr2l,c
 40084  003E54  0E02               	movlw	high _potentiometer_filtered_now
 40085  003E56  20F4               	addwfc	prodh,w,c
 40086  003E58  6EDA               	movwf	fsr2h,c
 40087  003E5A  50DF               	movf	indf2,w,c
 40088  003E5C  6FFD               	movwf	_velocity& (0+255),b
 40089  003E5E                     l3907:
 40090                           
 40091                           ; BSR set to: 0
 40092                           ;potentiometers.c: 164: }
 40093                           ;potentiometers.c: 166: if(inputPotsArray[i].controller_number == -2) {
 40094  003E5E  5173               	movf	processPotentiometers@i& (0+255),w,b
 40095  003E60  0D03               	mullw	3
 40096  003E62  0E01               	movlw	1
 40097  003E64  26F3               	addwf	prodl,f,c
 40098  003E66  0E00               	movlw	0
 40099  003E68  22F4               	addwfc	prodh,f,c
 40100  003E6A  0EAC               	movlw	low _inputPotsArray
 40101  003E6C  24F3               	addwf	prodl,w,c
 40102  003E6E  6ED9               	movwf	fsr2l,c
 40103  003E70  0E02               	movlw	high _inputPotsArray
 40104  003E72  20F4               	addwfc	prodh,w,c
 40105  003E74  6EDA               	movwf	fsr2h,c
 40106  003E76  0EFE               	movlw	254
 40107  003E78  18DE               	xorwf	postinc2,w,c
 40108  003E7A  A4D8               	btfss	status,2,c
 40109  003E7C  D00F               	goto	l3908
 40110                           
 40111                           ; BSR set to: 0
 40112                           ;potentiometers.c: 167: pitchBend(channel, 0x00, potentiometer_filtered_now[i]);
 40113  003E7E  0E00               	movlw	0
 40114  003E80  6F6B               	movwf	pitchBend@lowByte& (0+255),b
 40115  003E82  5173               	movf	processPotentiometers@i& (0+255),w,b
 40116  003E84  0D02               	mullw	2
 40117  003E86  0E20               	movlw	low _potentiometer_filtered_now
 40118  003E88  24F3               	addwf	prodl,w,c
 40119  003E8A  6ED9               	movwf	fsr2l,c
 40120  003E8C  0E02               	movlw	high _potentiometer_filtered_now
 40121  003E8E  20F4               	addwfc	prodh,w,c
 40122  003E90  6EDA               	movwf	fsr2h,c
 40123  003E92  50DF               	movf	indf2,w,c
 40124  003E94  6F6C               	movwf	pitchBend@highByte& (0+255),b
 40125  003E96  51F6               	movf	_channel& (0+255),w,b
 40126  003E98  EC32  F049         	call	_pitchBend
 40127  003E9C                     l3908:
 40128                           
 40129                           ;potentiometers.c: 168: }
 40130                           ;potentiometers.c: 171: if(inputPotsArray[i].controller_number == -3) {
 40131  003E9C  0100               	movlb	0	; () banked
 40132  003E9E  5173               	movf	processPotentiometers@i& (0+255),w,b
 40133  003EA0  0D03               	mullw	3
 40134  003EA2  0E01               	movlw	1
 40135  003EA4  26F3               	addwf	prodl,f,c
 40136  003EA6  0E00               	movlw	0
 40137  003EA8  22F4               	addwfc	prodh,f,c
 40138  003EAA  0EAC               	movlw	low _inputPotsArray
 40139  003EAC  24F3               	addwf	prodl,w,c
 40140  003EAE  6ED9               	movwf	fsr2l,c
 40141  003EB0  0E02               	movlw	high _inputPotsArray
 40142  003EB2  20F4               	addwfc	prodh,w,c
 40143  003EB4  6EDA               	movwf	fsr2h,c
 40144  003EB6  0EFD               	movlw	253
 40145  003EB8  18DE               	xorwf	postinc2,w,c
 40146  003EBA  A4D8               	btfss	status,2,c
 40147  003EBC  D00F               	goto	l3909
 40148                           
 40149                           ; BSR set to: 0
 40150                           ;potentiometers.c: 172: controlChange(channel, modulation_wheel_MSB, potentiometer_filte
      +                          red_now[i]);
 40151  003EBE  0E01               	movlw	1
 40152  003EC0  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40153  003EC2  5173               	movf	processPotentiometers@i& (0+255),w,b
 40154  003EC4  0D02               	mullw	2
 40155  003EC6  0E20               	movlw	low _potentiometer_filtered_now
 40156  003EC8  24F3               	addwf	prodl,w,c
 40157  003ECA  6ED9               	movwf	fsr2l,c
 40158  003ECC  0E02               	movlw	high _potentiometer_filtered_now
 40159  003ECE  20F4               	addwfc	prodh,w,c
 40160  003ED0  6EDA               	movwf	fsr2h,c
 40161  003ED2  50DF               	movf	indf2,w,c
 40162  003ED4  6F6C               	movwf	controlChange@value& (0+255),b
 40163  003ED6  51F6               	movf	_channel& (0+255),w,b
 40164  003ED8  EC4C  F049         	call	_controlChange
 40165  003EDC                     l3909:
 40166                           
 40167                           ;potentiometers.c: 173: }
 40168                           ;potentiometers.c: 174: }
 40169                           ;potentiometers.c: 177: if (inputPotsArray[i].controller_resolution == 1){
 40170  003EDC  0100               	movlb	0	; () banked
 40171  003EDE  5173               	movf	processPotentiometers@i& (0+255),w,b
 40172  003EE0  0D03               	mullw	3
 40173  003EE2  0EAC               	movlw	low _inputPotsArray
 40174  003EE4  24F3               	addwf	prodl,w,c
 40175  003EE6  6ED9               	movwf	fsr2l,c
 40176  003EE8  0E02               	movlw	high _inputPotsArray
 40177  003EEA  20F4               	addwfc	prodh,w,c
 40178  003EEC  6EDA               	movwf	fsr2h,c
 40179  003EEE  0102               	movlb	2	; () banked
 40180  003EF0  A0DF               	btfss	indf2,0,c
 40181  003EF2  0012               	return	
 40182                           
 40183                           ; BSR set to: 2
 40184                           ;potentiometers.c: 180: DISPLAY_MODE = 0;
 40185  003EF4  0E00               	movlw	0
 40186  003EF6  6E5A               	movwf	_DISPLAY_MODE,c
 40187                           
 40188                           ;potentiometers.c: 181: DIGIT_MODE = 2;
 40189  003EF8  0E02               	movlw	2
 40190  003EFA  6E59               	movwf	_DIGIT_MODE,c
 40191                           
 40192                           ; BSR set to: 2
 40193                           ;potentiometers.c: 185: unsigned char lowByte = (potentiometer_filtered_now[i]) & 0x7F;
 40194  003EFC  0100               	movlb	0	; () banked
 40195  003EFE  5173               	movf	processPotentiometers@i& (0+255),w,b
 40196  003F00  0D02               	mullw	2
 40197  003F02  0E20               	movlw	low _potentiometer_filtered_now
 40198  003F04  24F3               	addwf	prodl,w,c
 40199  003F06  6ED9               	movwf	fsr2l,c
 40200  003F08  0E02               	movlw	high _potentiometer_filtered_now
 40201  003F0A  20F4               	addwfc	prodh,w,c
 40202  003F0C  6EDA               	movwf	fsr2h,c
 40203  003F0E  50DF               	movf	indf2,w,c
 40204  003F10  0B7F               	andlw	127
 40205  003F12  6F71               	movwf	processPotentiometers@lowByte& (0+255),b
 40206                           
 40207                           ; BSR set to: 0
 40208                           ;potentiometers.c: 186: unsigned char highByte = (potentiometer_filtered_now[i] >> 7) & 
      +                          0x7F;
 40209  003F14  5173               	movf	processPotentiometers@i& (0+255),w,b
 40210  003F16  0D02               	mullw	2
 40211  003F18  0E20               	movlw	low _potentiometer_filtered_now
 40212  003F1A  24F3               	addwf	prodl,w,c
 40213  003F1C  6ED9               	movwf	fsr2l,c
 40214  003F1E  0E02               	movlw	high _potentiometer_filtered_now
 40215  003F20  20F4               	addwfc	prodh,w,c
 40216  003F22  6EDA               	movwf	fsr2h,c
 40217  003F24  CFDE F06E          	movff	postinc2,??_processPotentiometers
 40218  003F28  CFDD F06F          	movff	postdec2,??_processPotentiometers+1
 40219  003F2C  0E07               	movlw	7
 40220  003F2E  6F70               	movwf	(??_processPotentiometers+2)& (0+255),b
 40221  003F30                     u34125:
 40222  003F30  356F               	rlcf	(??_processPotentiometers+1)& (0+255),w,b
 40223  003F32  336F               	rrcf	(??_processPotentiometers+1)& (0+255),f,b
 40224  003F34  336E               	rrcf	??_processPotentiometers& (0+255),f,b
 40225  003F36  2F70               	decfsz	(??_processPotentiometers+2)& (0+255),f,b
 40226  003F38  D7FB               	goto	u34125
 40227  003F3A  516E               	movf	??_processPotentiometers& (0+255),w,b
 40228  003F3C  0B7F               	andlw	127
 40229  003F3E  6F72               	movwf	processPotentiometers@highByte& (0+255),b
 40230                           
 40231                           ; BSR set to: 0
 40232                           ;potentiometers.c: 189: if(inputPotsArray[i].controller_number_two_byte >= 0) {
 40233  003F40  5173               	movf	processPotentiometers@i& (0+255),w,b
 40234  003F42  0D03               	mullw	3
 40235  003F44  0E02               	movlw	2
 40236  003F46  26F3               	addwf	prodl,f,c
 40237  003F48  0E00               	movlw	0
 40238  003F4A  22F4               	addwfc	prodh,f,c
 40239  003F4C  0EAC               	movlw	low _inputPotsArray
 40240  003F4E  24F3               	addwf	prodl,w,c
 40241  003F50  6ED9               	movwf	fsr2l,c
 40242  003F52  0E02               	movlw	high _inputPotsArray
 40243  003F54  20F4               	addwfc	prodh,w,c
 40244  003F56  6EDA               	movwf	fsr2h,c
 40245  003F58  0E00               	movlw	0
 40246  003F5A  BEDB               	btfsc	plusw2,7,c
 40247  003F5C  D028               	goto	l3911
 40248                           
 40249                           ; BSR set to: 0
 40250                           ;potentiometers.c: 190: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte, highByte);
 40251  003F5E  5173               	movf	processPotentiometers@i& (0+255),w,b
 40252  003F60  0D03               	mullw	3
 40253  003F62  0E02               	movlw	2
 40254  003F64  26F3               	addwf	prodl,f,c
 40255  003F66  0E00               	movlw	0
 40256  003F68  22F4               	addwfc	prodh,f,c
 40257  003F6A  0EAC               	movlw	low _inputPotsArray
 40258  003F6C  24F3               	addwf	prodl,w,c
 40259  003F6E  6ED9               	movwf	fsr2l,c
 40260  003F70  0E02               	movlw	high _inputPotsArray
 40261  003F72  20F4               	addwfc	prodh,w,c
 40262  003F74  6EDA               	movwf	fsr2h,c
 40263  003F76  50DF               	movf	indf2,w,c
 40264  003F78  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40265  003F7A  C072  F06C         	movff	processPotentiometers@highByte,controlChange@value
 40266  003F7E  51F6               	movf	_channel& (0+255),w,b
 40267  003F80  EC4C  F049         	call	_controlChange
 40268                           
 40269                           ;potentiometers.c: 191: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte + 32, lowByte);
 40270  003F84  0100               	movlb	0	; () banked
 40271  003F86  5173               	movf	processPotentiometers@i& (0+255),w,b
 40272  003F88  0D03               	mullw	3
 40273  003F8A  0E02               	movlw	2
 40274  003F8C  26F3               	addwf	prodl,f,c
 40275  003F8E  0E00               	movlw	0
 40276  003F90  22F4               	addwfc	prodh,f,c
 40277  003F92  0EAC               	movlw	low _inputPotsArray
 40278  003F94  24F3               	addwf	prodl,w,c
 40279  003F96  6ED9               	movwf	fsr2l,c
 40280  003F98  0E02               	movlw	high _inputPotsArray
 40281  003F9A  20F4               	addwfc	prodh,w,c
 40282  003F9C  6EDA               	movwf	fsr2h,c
 40283  003F9E  50DF               	movf	indf2,w,c
 40284  003FA0  0F20               	addlw	32
 40285  003FA2  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40286  003FA4  C071  F06C         	movff	processPotentiometers@lowByte,controlChange@value
 40287  003FA8  51F6               	movf	_channel& (0+255),w,b
 40288  003FAA  EC4C  F049         	call	_controlChange
 40289  003FAE                     l3911:
 40290                           
 40291                           ;potentiometers.c: 192: }
 40292                           ;potentiometers.c: 194: if(inputPotsArray[i].controller_number_two_byte == -1) {
 40293  003FAE  0100               	movlb	0	; () banked
 40294  003FB0  5173               	movf	processPotentiometers@i& (0+255),w,b
 40295  003FB2  0D03               	mullw	3
 40296  003FB4  0E02               	movlw	2
 40297  003FB6  26F3               	addwf	prodl,f,c
 40298  003FB8  0E00               	movlw	0
 40299  003FBA  22F4               	addwfc	prodh,f,c
 40300  003FBC  0EAC               	movlw	low _inputPotsArray
 40301  003FBE  24F3               	addwf	prodl,w,c
 40302  003FC0  6ED9               	movwf	fsr2l,c
 40303  003FC2  0E02               	movlw	high _inputPotsArray
 40304  003FC4  20F4               	addwfc	prodh,w,c
 40305  003FC6  6EDA               	movwf	fsr2h,c
 40306  003FC8  28DE               	incf	postinc2,w,c
 40307  003FCA  B4D8               	btfsc	status,2,c
 40308                           
 40309                           ; BSR set to: 0
 40310                           ;potentiometers.c: 195: velocity = highByte;
 40311  003FCC  C072  F0FD         	movff	processPotentiometers@highByte,_velocity
 40312                           
 40313                           ; BSR set to: 0
 40314                           ;potentiometers.c: 196: }
 40315                           ;potentiometers.c: 198: if(inputPotsArray[i].controller_number_two_byte == -2) {
 40316                           
 40317                           ; BSR set to: 0
 40318  003FD0  5173               	movf	processPotentiometers@i& (0+255),w,b
 40319  003FD2  0D03               	mullw	3
 40320  003FD4  0E02               	movlw	2
 40321  003FD6  26F3               	addwf	prodl,f,c
 40322  003FD8  0E00               	movlw	0
 40323  003FDA  22F4               	addwfc	prodh,f,c
 40324  003FDC  0EAC               	movlw	low _inputPotsArray
 40325  003FDE  24F3               	addwf	prodl,w,c
 40326  003FE0  6ED9               	movwf	fsr2l,c
 40327  003FE2  0E02               	movlw	high _inputPotsArray
 40328  003FE4  20F4               	addwfc	prodh,w,c
 40329  003FE6  6EDA               	movwf	fsr2h,c
 40330  003FE8  0EFE               	movlw	254
 40331  003FEA  18DE               	xorwf	postinc2,w,c
 40332  003FEC  A4D8               	btfss	status,2,c
 40333  003FEE  D007               	goto	l3913
 40334                           
 40335                           ; BSR set to: 0
 40336                           ;potentiometers.c: 199: pitchBend(channel, lowByte, highByte);
 40337  003FF0  C071  F06B         	movff	processPotentiometers@lowByte,pitchBend@lowByte
 40338  003FF4  C072  F06C         	movff	processPotentiometers@highByte,pitchBend@highByte
 40339  003FF8  51F6               	movf	_channel& (0+255),w,b
 40340  003FFA  EC32  F049         	call	_pitchBend
 40341  003FFE                     l3913:
 40342                           
 40343                           ;potentiometers.c: 200: }
 40344                           ;potentiometers.c: 202: if(inputPotsArray[i].controller_number_two_byte == -3) {
 40345  003FFE  0100               	movlb	0	; () banked
 40346  004000  5173               	movf	processPotentiometers@i& (0+255),w,b
 40347  004002  0D03               	mullw	3
 40348  004004  0E02               	movlw	2
 40349  004006  26F3               	addwf	prodl,f,c
 40350  004008  0E00               	movlw	0
 40351  00400A  22F4               	addwfc	prodh,f,c
 40352  00400C  0EAC               	movlw	low _inputPotsArray
 40353  00400E  24F3               	addwf	prodl,w,c
 40354  004010  6ED9               	movwf	fsr2l,c
 40355  004012  0E02               	movlw	high _inputPotsArray
 40356  004014  20F4               	addwfc	prodh,w,c
 40357  004016  6EDA               	movwf	fsr2h,c
 40358  004018  0EFD               	movlw	253
 40359  00401A  18DE               	xorwf	postinc2,w,c
 40360  00401C  A4D8               	btfss	status,2,c
 40361  00401E  0012               	return	
 40362                           
 40363                           ; BSR set to: 0
 40364                           ;potentiometers.c: 203: controlChange(channel, modulation_wheel_MSB, highByte);
 40365  004020  0E01               	movlw	1
 40366  004022  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40367  004024  C072  F06C         	movff	processPotentiometers@highByte,controlChange@value
 40368  004028  51F6               	movf	_channel& (0+255),w,b
 40369  00402A  EC4C  F049         	call	_controlChange
 40370                           
 40371                           ;potentiometers.c: 204: controlChange(channel, modulation_wheel_MSB + 32, lowByte);
 40372  00402E  0E21               	movlw	33
 40373  004030  0100               	movlb	0	; () banked
 40374  004032  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40375  004034  C071  F06C         	movff	processPotentiometers@lowByte,controlChange@value
 40376  004038  51F6               	movf	_channel& (0+255),w,b
 40377  00403A  EC4C  F049         	call	_controlChange
 40378  00403E  0012               	return	
 40379  004040                     __end_of_processPotentiometers:
 40380                           	opt stack 0
 40381                           tblptru	equ	0xFF8
 40382                           tblptrh	equ	0xFF7
 40383                           tblptrl	equ	0xFF6
 40384                           tablat	equ	0xFF5
 40385                           prodh	equ	0xFF4
 40386                           prodl	equ	0xFF3
 40387                           intcon	equ	0xFF2
 40388                           intcon2	equ	0xFF1
 40389                           postinc0	equ	0xFEE
 40390                           wreg	equ	0xFE8
 40391                           indf1	equ	0xFE7
 40392                           postinc1	equ	0xFE6
 40393                           postdec1	equ	0xFE5
 40394                           fsr1h	equ	0xFE2
 40395                           fsr1l	equ	0xFE1
 40396                           indf2	equ	0xFDF
 40397                           postinc2	equ	0xFDE
 40398                           postdec2	equ	0xFDD
 40399                           plusw2	equ	0xFDB
 40400                           fsr2h	equ	0xFDA
 40401                           fsr2l	equ	0xFD9
 40402                           status	equ	0xFD8
 40403                           
 40404 ;; *************** function _pitchBend *****************
 40405 ;; Defined at:
 40406 ;;		line 153 in file "midi.c"
 40407 ;; Parameters:    Size  Location     Type
 40408 ;;  channel         1    wreg     unsigned char 
 40409 ;;  lowByte         1   11[BANK0 ] unsigned char 
 40410 ;;  highByte        1   12[BANK0 ] unsigned char 
 40411 ;; Auto vars:     Size  Location     Type
 40412 ;;  channel         1   13[BANK0 ] unsigned char 
 40413 ;; Return value:  Size  Location     Type
 40414 ;;                  1    wreg      void 
 40415 ;; Registers used:
 40416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 40417 ;; Tracked objects:
 40418 ;;		On entry : 0/0
 40419 ;;		On exit  : 0/0
 40420 ;;		Unchanged: 0/0
 40421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40422 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40425 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40426 ;;Total ram usage:        3 bytes
 40427 ;; Hardware stack levels used:    1
 40428 ;; Hardware stack levels required when called:    6
 40429 ;; This function calls:
 40430 ;;		_sendOut
 40431 ;;		_sendUSB
 40432 ;; This function is called by:
 40433 ;;		_processPotentiometers
 40434 ;; This function uses a non-reentrant model
 40435 ;;
 40436                           
 40437                           	psect	text122
 40438  009264                     __ptext122:
 40439                           	opt stack 0
 40440  009264                     _pitchBend:
 40441                           	opt stack 21
 40442                           
 40443                           ;incstack = 0
 40444                           ;pitchBend@channel stored from wreg
 40445  009264  0100               	movlb	0	; () banked
 40446  009266  6F6D               	movwf	pitchBend@channel& (0+255),b
 40447                           
 40448                           ;midi.c: 155: statusByte = channel | pitch_bend;
 40449  009268  0100               	movlb	0	; () banked
 40450  00926A  516D               	movf	pitchBend@channel& (0+255),w,b
 40451  00926C  09E0               	iorlw	224
 40452  00926E  6FF5               	movwf	_statusByte& (0+255),b
 40453                           
 40454                           ; BSR set to: 0
 40455                           ;midi.c: 158: sendUSB(statusByte, lowByte, highByte);
 40456  009270  C06B  F060         	movff	pitchBend@lowByte,sendUSB@message2
 40457  009274  C06C  F061         	movff	pitchBend@highByte,sendUSB@message3
 40458  009278  51F5               	movf	_statusByte& (0+255),w,b
 40459  00927A  ECC0  F039         	call	_sendUSB
 40460                           
 40461                           ;midi.c: 161: sendOut(statusByte);
 40462  00927E  0100               	movlb	0	; () banked
 40463  009280  51F5               	movf	_statusByte& (0+255),w,b
 40464  009282  ECD8  F04A         	call	_sendOut
 40465                           
 40466                           ;midi.c: 162: sendOut(lowByte);
 40467  009286  0100               	movlb	0	; () banked
 40468  009288  516B               	movf	pitchBend@lowByte& (0+255),w,b
 40469  00928A  ECD8  F04A         	call	_sendOut
 40470                           
 40471                           ;midi.c: 163: sendOut(highByte);
 40472  00928E  0100               	movlb	0	; () banked
 40473  009290  516C               	movf	pitchBend@highByte& (0+255),w,b
 40474  009292  ECD8  F04A         	call	_sendOut
 40475  009296  0012               	return		;funcret
 40476  009298                     __end_of_pitchBend:
 40477                           	opt stack 0
 40478                           tblptru	equ	0xFF8
 40479                           tblptrh	equ	0xFF7
 40480                           tblptrl	equ	0xFF6
 40481                           tablat	equ	0xFF5
 40482                           prodh	equ	0xFF4
 40483                           prodl	equ	0xFF3
 40484                           intcon	equ	0xFF2
 40485                           intcon2	equ	0xFF1
 40486                           postinc0	equ	0xFEE
 40487                           wreg	equ	0xFE8
 40488                           indf1	equ	0xFE7
 40489                           postinc1	equ	0xFE6
 40490                           postdec1	equ	0xFE5
 40491                           fsr1h	equ	0xFE2
 40492                           fsr1l	equ	0xFE1
 40493                           indf2	equ	0xFDF
 40494                           postinc2	equ	0xFDE
 40495                           postdec2	equ	0xFDD
 40496                           plusw2	equ	0xFDB
 40497                           fsr2h	equ	0xFDA
 40498                           fsr2l	equ	0xFD9
 40499                           status	equ	0xFD8
 40500                           
 40501 ;; *************** function _controlChange *****************
 40502 ;; Defined at:
 40503 ;;		line 139 in file "midi.c"
 40504 ;; Parameters:    Size  Location     Type
 40505 ;;  channel         1    wreg     unsigned char 
 40506 ;;  controllerNu    1   11[BANK0 ] unsigned char 
 40507 ;;  value           1   12[BANK0 ] unsigned char 
 40508 ;; Auto vars:     Size  Location     Type
 40509 ;;  channel         1   13[BANK0 ] unsigned char 
 40510 ;; Return value:  Size  Location     Type
 40511 ;;                  1    wreg      void 
 40512 ;; Registers used:
 40513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 40514 ;; Tracked objects:
 40515 ;;		On entry : 0/0
 40516 ;;		On exit  : 0/0
 40517 ;;		Unchanged: 0/0
 40518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40519 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40522 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40523 ;;Total ram usage:        3 bytes
 40524 ;; Hardware stack levels used:    1
 40525 ;; Hardware stack levels required when called:    6
 40526 ;; This function calls:
 40527 ;;		_sendOut
 40528 ;;		_sendUSB
 40529 ;; This function is called by:
 40530 ;;		_processDrumpad
 40531 ;;		_processPotentiometers
 40532 ;;		_panic_button
 40533 ;; This function uses a non-reentrant model
 40534 ;;
 40535                           
 40536                           	psect	text123
 40537  009298                     __ptext123:
 40538                           	opt stack 0
 40539  009298                     _controlChange:
 40540                           	opt stack 23
 40541                           
 40542                           ;incstack = 0
 40543                           ;controlChange@channel stored from wreg
 40544  009298  0100               	movlb	0	; () banked
 40545  00929A  6F6D               	movwf	controlChange@channel& (0+255),b
 40546                           
 40547                           ;midi.c: 141: statusByte = channel | control_change;
 40548  00929C  0100               	movlb	0	; () banked
 40549  00929E  516D               	movf	controlChange@channel& (0+255),w,b
 40550  0092A0  09B0               	iorlw	176
 40551  0092A2  6FF5               	movwf	_statusByte& (0+255),b
 40552                           
 40553                           ; BSR set to: 0
 40554                           ;midi.c: 144: sendUSB(statusByte, controllerNumber, value);
 40555  0092A4  C06B  F060         	movff	controlChange@controllerNumber,sendUSB@message2
 40556  0092A8  C06C  F061         	movff	controlChange@value,sendUSB@message3
 40557  0092AC  51F5               	movf	_statusByte& (0+255),w,b
 40558  0092AE  ECC0  F039         	call	_sendUSB
 40559                           
 40560                           ;midi.c: 147: sendOut(statusByte);
 40561  0092B2  0100               	movlb	0	; () banked
 40562  0092B4  51F5               	movf	_statusByte& (0+255),w,b
 40563  0092B6  ECD8  F04A         	call	_sendOut
 40564                           
 40565                           ;midi.c: 148: sendOut(controllerNumber);
 40566  0092BA  0100               	movlb	0	; () banked
 40567  0092BC  516B               	movf	controlChange@controllerNumber& (0+255),w,b
 40568  0092BE  ECD8  F04A         	call	_sendOut
 40569                           
 40570                           ;midi.c: 149: sendOut(value);
 40571  0092C2  0100               	movlb	0	; () banked
 40572  0092C4  516C               	movf	controlChange@value& (0+255),w,b
 40573  0092C6  ECD8  F04A         	call	_sendOut
 40574  0092CA  0012               	return		;funcret
 40575  0092CC                     __end_of_controlChange:
 40576                           	opt stack 0
 40577                           tblptru	equ	0xFF8
 40578                           tblptrh	equ	0xFF7
 40579                           tblptrl	equ	0xFF6
 40580                           tablat	equ	0xFF5
 40581                           prodh	equ	0xFF4
 40582                           prodl	equ	0xFF3
 40583                           intcon	equ	0xFF2
 40584                           intcon2	equ	0xFF1
 40585                           postinc0	equ	0xFEE
 40586                           wreg	equ	0xFE8
 40587                           indf1	equ	0xFE7
 40588                           postinc1	equ	0xFE6
 40589                           postdec1	equ	0xFE5
 40590                           fsr1h	equ	0xFE2
 40591                           fsr1l	equ	0xFE1
 40592                           indf2	equ	0xFDF
 40593                           postinc2	equ	0xFDE
 40594                           postdec2	equ	0xFDD
 40595                           plusw2	equ	0xFDB
 40596                           fsr2h	equ	0xFDA
 40597                           fsr2l	equ	0xFD9
 40598                           status	equ	0xFD8
 40599                           
 40600 ;; *************** function _sendUSB *****************
 40601 ;; Defined at:
 40602 ;;		line 32 in file "midi.c"
 40603 ;; Parameters:    Size  Location     Type
 40604 ;;  message1        1    wreg     unsigned char 
 40605 ;;  message2        1    0[BANK0 ] unsigned char 
 40606 ;;  message3        1    1[BANK0 ] unsigned char 
 40607 ;; Auto vars:     Size  Location     Type
 40608 ;;  message1        1    5[BANK0 ] unsigned char 
 40609 ;;  ii              1   10[BANK0 ] unsigned char 
 40610 ;;  i               1    9[BANK0 ] unsigned char 
 40611 ;;  midiMessage     3    6[BANK0 ] unsigned char [3]
 40612 ;; Return value:  Size  Location     Type
 40613 ;;                  1    wreg      void 
 40614 ;; Registers used:
 40615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 40616 ;; Tracked objects:
 40617 ;;		On entry : 0/0
 40618 ;;		On exit  : 0/0
 40619 ;;		Unchanged: 0/0
 40620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40621 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40622 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40623 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40624 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40625 ;;Total ram usage:       11 bytes
 40626 ;; Hardware stack levels used:    1
 40627 ;; Hardware stack levels required when called:    5
 40628 ;; This function calls:
 40629 ;;		Nothing
 40630 ;; This function is called by:
 40631 ;;		_noteOff
 40632 ;;		_noteOn
 40633 ;;		_noteOffDrum
 40634 ;;		_noteOnDrum
 40635 ;;		_controlChange
 40636 ;;		_pitchBend
 40637 ;;		_programChange
 40638 ;; This function uses a non-reentrant model
 40639 ;;
 40640                           
 40641                           	psect	text124
 40642  007380                     __ptext124:
 40643                           	opt stack 0
 40644  007380                     _sendUSB:
 40645                           	opt stack 23
 40646                           
 40647                           ;incstack = 0
 40648                           ;sendUSB@message1 stored from wreg
 40649  007380  0100               	movlb	0	; () banked
 40650  007382  6F65               	movwf	sendUSB@message1& (0+255),b
 40651                           
 40652                           ;midi.c: 34: unsigned char midiMessage[3];
 40653                           ;midi.c: 36: midiMessage[0]=message1;
 40654  007384  C065  F066         	movff	sendUSB@message1,sendUSB@midiMessage
 40655                           
 40656                           ;midi.c: 37: midiMessage[1]=message2;
 40657  007388  C060  F067         	movff	sendUSB@message2,sendUSB@midiMessage+1
 40658                           
 40659                           ;midi.c: 38: midiMessage[2]=message3;
 40660  00738C  C061  F068         	movff	sendUSB@message3,sendUSB@midiMessage+2
 40661                           
 40662                           ;midi.c: 40: RA5 = 0;
 40663  007390  9A80               	bcf	3968,5,c	;volatile
 40664                           
 40665                           ;midi.c: 41: RB2 = 1;
 40666  007392  8481               	bsf	3969,2,c	;volatile
 40667                           
 40668                           ;midi.c: 42: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40669  007394  0E53               	movlw	83
 40670  007396                     u44947:
 40671  007396  2EE8               	decfsz	wreg,f,c
 40672  007398  D7FE               	bra	u44947
 40673  00739A  F000               	nop	
 40674                           
 40675                           ;midi.c: 44: for(unsigned char i=0;i<3;i++){
 40676  00739C  0E00               	movlw	0
 40677  00739E  0100               	movlb	0	; () banked
 40678  0073A0  6F69               	movwf	sendUSB@i& (0+255),b
 40679  0073A2                     l16119:
 40680                           
 40681                           ; BSR set to: 0
 40682  0073A2  0E02               	movlw	2
 40683  0073A4  6569               	cpfsgt	sendUSB@i& (0+255),b
 40684  0073A6  D001               	goto	l441
 40685  0073A8  D036               	goto	u22590
 40686  0073AA                     l441:
 40687                           
 40688                           ; BSR set to: 0
 40689                           ;midi.c: 45: for(unsigned char ii=0;ii<8;ii++){
 40690                           
 40691                           ; BSR set to: 0
 40692  0073AA  0E00               	movlw	0
 40693  0073AC  6F6A               	movwf	sendUSB@ii& (0+255),b
 40694  0073AE                     l16125:
 40695                           
 40696                           ; BSR set to: 0
 40697  0073AE  0E07               	movlw	7
 40698  0073B0  656A               	cpfsgt	sendUSB@ii& (0+255),b
 40699  0073B2  D001               	goto	l443
 40700  0073B4  D02E               	goto	u22580
 40701  0073B6                     l443:
 40702                           
 40703                           ; BSR set to: 0
 40704                           ;midi.c: 48: RE2 = !!(midiMessage[i] & (1 << ii));
 40705                           
 40706                           ; BSR set to: 0
 40707  0073B6  5169               	movf	sendUSB@i& (0+255),w,b
 40708  0073B8  0D01               	mullw	1
 40709  0073BA  0E66               	movlw	low sendUSB@midiMessage
 40710  0073BC  24F3               	addwf	prodl,w,c
 40711  0073BE  6ED9               	movwf	fsr2l,c
 40712  0073C0  0E00               	movlw	high sendUSB@midiMessage
 40713  0073C2  20F4               	addwfc	prodh,w,c
 40714  0073C4  6EDA               	movwf	fsr2h,c
 40715  0073C6  50DF               	movf	indf2,w,c
 40716  0073C8  6F62               	movwf	??_sendUSB& (0+255),b
 40717  0073CA  C06A  F063         	movff	sendUSB@ii,??_sendUSB+1
 40718  0073CE  0E01               	movlw	1
 40719  0073D0  6F64               	movwf	(??_sendUSB+2)& (0+255),b
 40720  0073D2  2B63               	incf	(??_sendUSB+1)& (0+255),f,b
 40721  0073D4  D002               	goto	u22554
 40722  0073D6                     u22555:
 40723  0073D6  90D8               	bcf	status,0,c
 40724  0073D8  3764               	rlcf	(??_sendUSB+2)& (0+255),f,b
 40725  0073DA                     u22554:
 40726  0073DA  2F63               	decfsz	(??_sendUSB+1)& (0+255),f,b
 40727  0073DC  D7FC               	goto	u22555
 40728  0073DE  0100               	movlb	0	; () banked
 40729  0073E0  5164               	movf	(??_sendUSB+2)& (0+255),w,b
 40730  0073E2  1562               	andwf	??_sendUSB& (0+255),w,b
 40731  0073E4  0900               	iorlw	0
 40732  0073E6  B4D8               	btfsc	status,2,c
 40733  0073E8  D002               	goto	u22560
 40734  0073EA  8484               	bsf	3972,2,c	;volatile
 40735  0073EC  D001               	goto	u22575
 40736  0073EE                     u22560:
 40737  0073EE  9484               	bcf	3972,2,c	;volatile
 40738  0073F0                     u22575:
 40739                           
 40740                           ;midi.c: 50: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40741  0073F0  0E53               	movlw	83
 40742  0073F2                     u44957:
 40743  0073F2  2EE8               	decfsz	wreg,f,c
 40744  0073F4  D7FE               	bra	u44957
 40745  0073F6  F000               	nop	
 40746                           
 40747                           ;midi.c: 52: RA5 = 1;
 40748  0073F8  8A80               	bsf	3968,5,c	;volatile
 40749                           
 40750                           ;midi.c: 53: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40751  0073FA  0E53               	movlw	83
 40752  0073FC                     u44967:
 40753  0073FC  2EE8               	decfsz	wreg,f,c
 40754  0073FE  D7FE               	bra	u44967
 40755  007400  F000               	nop	
 40756                           
 40757                           ;midi.c: 55: RA5 = 0;
 40758  007402  9A80               	bcf	3968,5,c	;volatile
 40759                           
 40760                           ;midi.c: 56: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40761  007404  0E53               	movlw	83
 40762  007406                     u44977:
 40763  007406  2EE8               	decfsz	wreg,f,c
 40764  007408  D7FE               	bra	u44977
 40765  00740A  F000               	nop	
 40766  00740C  0100               	movlb	0	; () banked
 40767  00740E  2B6A               	incf	sendUSB@ii& (0+255),f,b
 40768  007410  D7CE               	goto	l16125
 40769  007412                     u22580:
 40770                           
 40771                           ; BSR set to: 0
 40772                           
 40773                           ; BSR set to: 0
 40774  007412  2B69               	incf	sendUSB@i& (0+255),f,b
 40775  007414  D7C6               	goto	l16119
 40776  007416                     u22590:
 40777                           
 40778                           ; BSR set to: 0
 40779                           ;midi.c: 57: }
 40780                           ;midi.c: 58: }
 40781                           ;midi.c: 60: RB2 = 0;
 40782  007416  9481               	bcf	3969,2,c	;volatile
 40783                           
 40784                           ; BSR set to: 0
 40785                           ;midi.c: 61: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40786  007418  0E53               	movlw	83
 40787  00741A                     u44987:
 40788  00741A  2EE8               	decfsz	wreg,f,c
 40789  00741C  D7FE               	bra	u44987
 40790  00741E  F000               	nop	
 40791  007420  0012               	return		;funcret
 40792  007422                     __end_of_sendUSB:
 40793                           	opt stack 0
 40794                           tblptru	equ	0xFF8
 40795                           tblptrh	equ	0xFF7
 40796                           tblptrl	equ	0xFF6
 40797                           tablat	equ	0xFF5
 40798                           prodh	equ	0xFF4
 40799                           prodl	equ	0xFF3
 40800                           intcon	equ	0xFF2
 40801                           intcon2	equ	0xFF1
 40802                           postinc0	equ	0xFEE
 40803                           wreg	equ	0xFE8
 40804                           indf1	equ	0xFE7
 40805                           postinc1	equ	0xFE6
 40806                           postdec1	equ	0xFE5
 40807                           fsr1h	equ	0xFE2
 40808                           fsr1l	equ	0xFE1
 40809                           indf2	equ	0xFDF
 40810                           postinc2	equ	0xFDE
 40811                           postdec2	equ	0xFDD
 40812                           plusw2	equ	0xFDB
 40813                           fsr2h	equ	0xFDA
 40814                           fsr2l	equ	0xFD9
 40815                           status	equ	0xFD8
 40816                           
 40817 ;; *************** function _sendOut *****************
 40818 ;; Defined at:
 40819 ;;		line 22 in file "midi.c"
 40820 ;; Parameters:    Size  Location     Type
 40821 ;;  a               1    wreg     unsigned char 
 40822 ;; Auto vars:     Size  Location     Type
 40823 ;;  a               1    0[BANK0 ] unsigned char 
 40824 ;; Return value:  Size  Location     Type
 40825 ;;                  1    wreg      void 
 40826 ;; Registers used:
 40827 ;;		wreg, status,2, cstack
 40828 ;; Tracked objects:
 40829 ;;		On entry : 0/0
 40830 ;;		On exit  : 0/0
 40831 ;;		Unchanged: 0/0
 40832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40836 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40837 ;;Total ram usage:        1 bytes
 40838 ;; Hardware stack levels used:    1
 40839 ;; Hardware stack levels required when called:    5
 40840 ;; This function calls:
 40841 ;;		Nothing
 40842 ;; This function is called by:
 40843 ;;		_noteOff
 40844 ;;		_noteOn
 40845 ;;		_noteOffDrum
 40846 ;;		_noteOnDrum
 40847 ;;		_controlChange
 40848 ;;		_pitchBend
 40849 ;;		_programChange
 40850 ;; This function uses a non-reentrant model
 40851 ;;
 40852                           
 40853                           	psect	text125
 40854  0095B0                     __ptext125:
 40855                           	opt stack 0
 40856  0095B0                     _sendOut:
 40857                           	opt stack 23
 40858                           
 40859                           ;incstack = 0
 40860                           ;sendOut@a stored from wreg
 40861  0095B0  0100               	movlb	0	; () banked
 40862  0095B2  6F60               	movwf	sendOut@a& (0+255),b
 40863                           
 40864                           ;midi.c: 24: TXREG = a;
 40865  0095B4  C060  FFAD         	movff	sendOut@a,4013	;volatile
 40866  0095B8  A89E               	btfss	3998,4,c	;volatile
 40867  0095BA  D7FE               	goto	l436
 40868                           
 40869                           ;midi.c: 26: TXIF = 0;
 40870  0095BC  989E               	bcf	3998,4,c	;volatile
 40871                           
 40872                           ;midi.c: 27: _delay((unsigned long)((320)*(20000000/4000000.0)));
 40873  0095BE  0EE4               	movlw	228
 40874  0095C0                     u44997:
 40875  0095C0  D000               	nop2	
 40876  0095C2  D000               	nop2	
 40877  0095C4  2EE8               	decfsz	wreg,f,c
 40878  0095C6  D7FC               	bra	u44997
 40879  0095C8  D000               	nop2	
 40880  0095CA  D000               	nop2	
 40881  0095CC  0012               	return		;funcret
 40882  0095CE                     __end_of_sendOut:
 40883                           	opt stack 0
 40884                           tblptru	equ	0xFF8
 40885                           tblptrh	equ	0xFF7
 40886                           tblptrl	equ	0xFF6
 40887                           tablat	equ	0xFF5
 40888                           prodh	equ	0xFF4
 40889                           prodl	equ	0xFF3
 40890                           intcon	equ	0xFF2
 40891                           intcon2	equ	0xFF1
 40892                           postinc0	equ	0xFEE
 40893                           wreg	equ	0xFE8
 40894                           indf1	equ	0xFE7
 40895                           postinc1	equ	0xFE6
 40896                           postdec1	equ	0xFE5
 40897                           fsr1h	equ	0xFE2
 40898                           fsr1l	equ	0xFE1
 40899                           indf2	equ	0xFDF
 40900                           postinc2	equ	0xFDE
 40901                           postdec2	equ	0xFDD
 40902                           plusw2	equ	0xFDB
 40903                           fsr2h	equ	0xFDA
 40904                           fsr2l	equ	0xFD9
 40905                           status	equ	0xFD8
 40906                           
 40907 ;; *************** function _map *****************
 40908 ;; Defined at:
 40909 ;;		line 29 in file "potentiometers.c"
 40910 ;; Parameters:    Size  Location     Type
 40911 ;;  x               4   26[BANK0 ] long 
 40912 ;;  in_min          4   30[BANK0 ] long 
 40913 ;;  in_max          4   34[BANK0 ] long 
 40914 ;;  out_min         4   38[BANK0 ] long 
 40915 ;;  out_max         4   42[BANK0 ] long 
 40916 ;; Auto vars:     Size  Location     Type
 40917 ;;		None
 40918 ;; Return value:  Size  Location     Type
 40919 ;;                  4   26[BANK0 ] long 
 40920 ;; Registers used:
 40921 ;;		wreg, status,2, status,0, cstack
 40922 ;; Tracked objects:
 40923 ;;		On entry : 0/0
 40924 ;;		On exit  : 0/0
 40925 ;;		Unchanged: 0/0
 40926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40927 ;;      Params:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40929 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40930 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40931 ;;Total ram usage:       32 bytes
 40932 ;; Hardware stack levels used:    1
 40933 ;; Hardware stack levels required when called:    6
 40934 ;; This function calls:
 40935 ;;		___aldiv
 40936 ;;		___lmul
 40937 ;; This function is called by:
 40938 ;;		_readPotentiometers
 40939 ;; This function uses a non-reentrant model
 40940 ;;
 40941                           
 40942                           	psect	text126
 40943  0067FE                     __ptext126:
 40944                           	opt stack 0
 40945  0067FE                     _map:
 40946                           	opt stack 22
 40947                           
 40948                           ;potentiometers.c: 30: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + o
      +                          ut_min;
 40949                           
 40950                           ;incstack = 0
 40951  0067FE  C07E  F08E         	movff	map@in_min,??_map
 40952  006802  C07F  F08F         	movff	map@in_min+1,??_map+1
 40953  006806  C080  F090         	movff	map@in_min+2,??_map+2
 40954  00680A  C081  F091         	movff	map@in_min+3,??_map+3
 40955  00680E  0100               	movlb	0	; () banked
 40956  006810  1F8E               	comf	??_map& (0+255),f,b
 40957  006812  1F8F               	comf	(??_map+1)& (0+255),f,b
 40958  006814  1F90               	comf	(??_map+2)& (0+255),f,b
 40959  006816  1F91               	comf	(??_map+3)& (0+255),f,b
 40960  006818  2B8E               	incf	??_map& (0+255),f,b
 40961  00681A  0E00               	movlw	0
 40962  00681C  238F               	addwfc	(??_map+1)& (0+255),f,b
 40963  00681E  2390               	addwfc	(??_map+2)& (0+255),f,b
 40964  006820  2391               	addwfc	(??_map+3)& (0+255),f,b
 40965  006822  517A               	movf	map@x& (0+255),w,b
 40966  006824  258E               	addwf	??_map& (0+255),w,b
 40967  006826  6F60               	movwf	___lmul@multiplier& (0+255),b
 40968  006828  517B               	movf	(map@x+1)& (0+255),w,b
 40969  00682A  218F               	addwfc	(??_map+1)& (0+255),w,b
 40970  00682C  6F61               	movwf	(___lmul@multiplier+1)& (0+255),b
 40971  00682E  517C               	movf	(map@x+2)& (0+255),w,b
 40972  006830  2190               	addwfc	(??_map+2)& (0+255),w,b
 40973  006832  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
 40974  006834  517D               	movf	(map@x+3)& (0+255),w,b
 40975  006836  2191               	addwfc	(??_map+3)& (0+255),w,b
 40976  006838  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
 40977  00683A  C086  F092         	movff	map@out_min,??_map+4
 40978  00683E  C087  F093         	movff	map@out_min+1,??_map+5
 40979  006842  C088  F094         	movff	map@out_min+2,??_map+6
 40980  006846  C089  F095         	movff	map@out_min+3,??_map+7
 40981  00684A  1F92               	comf	(??_map+4)& (0+255),f,b
 40982  00684C  1F93               	comf	(??_map+5)& (0+255),f,b
 40983  00684E  1F94               	comf	(??_map+6)& (0+255),f,b
 40984  006850  1F95               	comf	(??_map+7)& (0+255),f,b
 40985  006852  2B92               	incf	(??_map+4)& (0+255),f,b
 40986  006854  0E00               	movlw	0
 40987  006856  2393               	addwfc	(??_map+5)& (0+255),f,b
 40988  006858  2394               	addwfc	(??_map+6)& (0+255),f,b
 40989  00685A  2395               	addwfc	(??_map+7)& (0+255),f,b
 40990  00685C  518A               	movf	map@out_max& (0+255),w,b
 40991  00685E  2592               	addwf	(??_map+4)& (0+255),w,b
 40992  006860  6F64               	movwf	___lmul@multiplicand& (0+255),b
 40993  006862  518B               	movf	(map@out_max+1)& (0+255),w,b
 40994  006864  2193               	addwfc	(??_map+5)& (0+255),w,b
 40995  006866  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 40996  006868  518C               	movf	(map@out_max+2)& (0+255),w,b
 40997  00686A  2194               	addwfc	(??_map+6)& (0+255),w,b
 40998  00686C  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 40999  00686E  518D               	movf	(map@out_max+3)& (0+255),w,b
 41000  006870  2195               	addwfc	(??_map+7)& (0+255),w,b
 41001  006872  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 41002  006874  EC51  F046         	call	___lmul	;wreg free
 41003  006878  C060  F06C         	movff	?___lmul,___aldiv@dividend
 41004  00687C  C061  F06D         	movff	?___lmul+1,___aldiv@dividend+1
 41005  006880  C062  F06E         	movff	?___lmul+2,___aldiv@dividend+2
 41006  006884  C063  F06F         	movff	?___lmul+3,___aldiv@dividend+3
 41007  006888  C07E  F096         	movff	map@in_min,??_map+8
 41008  00688C  C07F  F097         	movff	map@in_min+1,??_map+9
 41009  006890  C080  F098         	movff	map@in_min+2,??_map+10
 41010  006894  C081  F099         	movff	map@in_min+3,??_map+11
 41011  006898  0100               	movlb	0	; () banked
 41012  00689A  1F96               	comf	(??_map+8)& (0+255),f,b
 41013  00689C  1F97               	comf	(??_map+9)& (0+255),f,b
 41014  00689E  1F98               	comf	(??_map+10)& (0+255),f,b
 41015  0068A0  1F99               	comf	(??_map+11)& (0+255),f,b
 41016  0068A2  2B96               	incf	(??_map+8)& (0+255),f,b
 41017  0068A4  0E00               	movlw	0
 41018  0068A6  2397               	addwfc	(??_map+9)& (0+255),f,b
 41019  0068A8  2398               	addwfc	(??_map+10)& (0+255),f,b
 41020  0068AA  2399               	addwfc	(??_map+11)& (0+255),f,b
 41021  0068AC  5182               	movf	map@in_max& (0+255),w,b
 41022  0068AE  2596               	addwf	(??_map+8)& (0+255),w,b
 41023  0068B0  6F70               	movwf	___aldiv@divisor& (0+255),b
 41024  0068B2  5183               	movf	(map@in_max+1)& (0+255),w,b
 41025  0068B4  2197               	addwfc	(??_map+9)& (0+255),w,b
 41026  0068B6  6F71               	movwf	(___aldiv@divisor+1)& (0+255),b
 41027  0068B8  5184               	movf	(map@in_max+2)& (0+255),w,b
 41028  0068BA  2198               	addwfc	(??_map+10)& (0+255),w,b
 41029  0068BC  6F72               	movwf	(___aldiv@divisor+2)& (0+255),b
 41030  0068BE  5185               	movf	(map@in_max+3)& (0+255),w,b
 41031  0068C0  2199               	addwfc	(??_map+11)& (0+255),w,b
 41032  0068C2  6F73               	movwf	(___aldiv@divisor+3)& (0+255),b
 41033  0068C4  ECBC  F035         	call	___aldiv	;wreg free
 41034  0068C8  0100               	movlb	0	; () banked
 41035  0068CA  5186               	movf	map@out_min& (0+255),w,b
 41036  0068CC  256C               	addwf	?___aldiv& (0+255),w,b
 41037  0068CE  6F7A               	movwf	?_map& (0+255),b
 41038  0068D0  5187               	movf	(map@out_min+1)& (0+255),w,b
 41039  0068D2  216D               	addwfc	(?___aldiv+1)& (0+255),w,b
 41040  0068D4  6F7B               	movwf	(?_map+1)& (0+255),b
 41041  0068D6  5188               	movf	(map@out_min+2)& (0+255),w,b
 41042  0068D8  216E               	addwfc	(?___aldiv+2)& (0+255),w,b
 41043  0068DA  6F7C               	movwf	(?_map+2)& (0+255),b
 41044  0068DC  5189               	movf	(map@out_min+3)& (0+255),w,b
 41045  0068DE  216F               	addwfc	(?___aldiv+3)& (0+255),w,b
 41046  0068E0  6F7D               	movwf	(?_map+3)& (0+255),b
 41047  0068E2  0012               	return	
 41048  0068E4                     __end_of_map:
 41049                           	opt stack 0
 41050                           tblptru	equ	0xFF8
 41051                           tblptrh	equ	0xFF7
 41052                           tblptrl	equ	0xFF6
 41053                           tablat	equ	0xFF5
 41054                           prodh	equ	0xFF4
 41055                           prodl	equ	0xFF3
 41056                           intcon	equ	0xFF2
 41057                           intcon2	equ	0xFF1
 41058                           postinc0	equ	0xFEE
 41059                           wreg	equ	0xFE8
 41060                           indf1	equ	0xFE7
 41061                           postinc1	equ	0xFE6
 41062                           postdec1	equ	0xFE5
 41063                           fsr1h	equ	0xFE2
 41064                           fsr1l	equ	0xFE1
 41065                           indf2	equ	0xFDF
 41066                           postinc2	equ	0xFDE
 41067                           postdec2	equ	0xFDD
 41068                           plusw2	equ	0xFDB
 41069                           fsr2h	equ	0xFDA
 41070                           fsr2l	equ	0xFD9
 41071                           status	equ	0xFD8
 41072                           
 41073 ;; *************** function ___lmul *****************
 41074 ;; Defined at:
 41075 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 41076 ;; Parameters:    Size  Location     Type
 41077 ;;  multiplier      4    0[BANK0 ] unsigned long 
 41078 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 41079 ;; Auto vars:     Size  Location     Type
 41080 ;;  product         4    8[BANK0 ] unsigned long 
 41081 ;; Return value:  Size  Location     Type
 41082 ;;                  4    0[BANK0 ] unsigned long 
 41083 ;; Registers used:
 41084 ;;		wreg, status,2, status,0
 41085 ;; Tracked objects:
 41086 ;;		On entry : 0/0
 41087 ;;		On exit  : 0/0
 41088 ;;		Unchanged: 0/0
 41089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41090 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41091 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41093 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41094 ;;Total ram usage:       12 bytes
 41095 ;; Hardware stack levels used:    1
 41096 ;; Hardware stack levels required when called:    5
 41097 ;; This function calls:
 41098 ;;		Nothing
 41099 ;; This function is called by:
 41100 ;;		_map
 41101 ;;		_rand
 41102 ;; This function uses a non-reentrant model
 41103 ;;
 41104                           
 41105                           	psect	text127
 41106  008CA2                     __ptext127:
 41107                           	opt stack 0
 41108  008CA2                     ___lmul:
 41109                           	opt stack 15
 41110                           
 41111                           ; BSR set to: 0
 41112                           ;incstack = 0
 41113  008CA2  0E00               	movlw	0
 41114  008CA4  0100               	movlb	0	; () banked
 41115  008CA6  6F68               	movwf	___lmul@product& (0+255),b
 41116  008CA8  0E00               	movlw	0
 41117  008CAA  6F69               	movwf	(___lmul@product+1)& (0+255),b
 41118  008CAC  0E00               	movlw	0
 41119  008CAE  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 41120  008CB0  0E00               	movlw	0
 41121  008CB2  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 41122  008CB4                     
 41123                           ; BSR set to: 0
 41124                           
 41125                           ; BSR set to: 0
 41126  008CB4  A160               	btfss	___lmul@multiplier& (0+255),0,b
 41127  008CB6  D008               	goto	l5440
 41128                           
 41129                           ; BSR set to: 0
 41130  008CB8  5164               	movf	___lmul@multiplicand& (0+255),w,b
 41131  008CBA  2768               	addwf	___lmul@product& (0+255),f,b
 41132  008CBC  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 41133  008CBE  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 41134  008CC0  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 41135  008CC2  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 41136  008CC4  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 41137  008CC6  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 41138  008CC8                     l5440:
 41139                           
 41140                           ; BSR set to: 0
 41141                           
 41142                           ; BSR set to: 0
 41143  008CC8  90D8               	bcf	status,0,c
 41144  008CCA  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 41145  008CCC  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 41146  008CCE  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 41147  008CD0  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 41148                           
 41149                           ; BSR set to: 0
 41150  008CD2  90D8               	bcf	status,0,c
 41151  008CD4  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 41152  008CD6  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 41153  008CD8  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 41154  008CDA  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 41155  008CDC  5160               	movf	___lmul@multiplier& (0+255),w,b
 41156  008CDE  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 41157  008CE0  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 41158  008CE2  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 41159  008CE4  A4D8               	btfss	status,2,c
 41160  008CE6  D7E6               	goto	l5439
 41161                           
 41162                           ; BSR set to: 0
 41163  008CE8  C068  F060         	movff	___lmul@product,?___lmul
 41164  008CEC  C069  F061         	movff	___lmul@product+1,?___lmul+1
 41165  008CF0  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 41166  008CF4  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 41167                           
 41168                           ; BSR set to: 0
 41169  008CF8  0012               	return		;funcret
 41170  008CFA                     __end_of___lmul:
 41171                           	opt stack 0
 41172                           tblptru	equ	0xFF8
 41173                           tblptrh	equ	0xFF7
 41174                           tblptrl	equ	0xFF6
 41175                           tablat	equ	0xFF5
 41176                           prodh	equ	0xFF4
 41177                           prodl	equ	0xFF3
 41178                           intcon	equ	0xFF2
 41179                           intcon2	equ	0xFF1
 41180                           postinc0	equ	0xFEE
 41181                           wreg	equ	0xFE8
 41182                           indf1	equ	0xFE7
 41183                           postinc1	equ	0xFE6
 41184                           postdec1	equ	0xFE5
 41185                           fsr1h	equ	0xFE2
 41186                           fsr1l	equ	0xFE1
 41187                           indf2	equ	0xFDF
 41188                           postinc2	equ	0xFDE
 41189                           postdec2	equ	0xFDD
 41190                           plusw2	equ	0xFDB
 41191                           fsr2h	equ	0xFDA
 41192                           fsr2l	equ	0xFD9
 41193                           status	equ	0xFD8
 41194                           
 41195 ;; *************** function ___aldiv *****************
 41196 ;; Defined at:
 41197 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 41198 ;; Parameters:    Size  Location     Type
 41199 ;;  dividend        4   12[BANK0 ] long 
 41200 ;;  divisor         4   16[BANK0 ] long 
 41201 ;; Auto vars:     Size  Location     Type
 41202 ;;  quotient        4   22[BANK0 ] long 
 41203 ;;  sign            1   21[BANK0 ] unsigned char 
 41204 ;;  counter         1   20[BANK0 ] unsigned char 
 41205 ;; Return value:  Size  Location     Type
 41206 ;;                  4   12[BANK0 ] long 
 41207 ;; Registers used:
 41208 ;;		wreg, status,2, status,0
 41209 ;; Tracked objects:
 41210 ;;		On entry : 0/0
 41211 ;;		On exit  : 0/0
 41212 ;;		Unchanged: 0/0
 41213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41214 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41215 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41217 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41218 ;;Total ram usage:       14 bytes
 41219 ;; Hardware stack levels used:    1
 41220 ;; Hardware stack levels required when called:    5
 41221 ;; This function calls:
 41222 ;;		Nothing
 41223 ;; This function is called by:
 41224 ;;		_map
 41225 ;; This function uses a non-reentrant model
 41226 ;;
 41227                           
 41228                           	psect	text128
 41229  006B78                     __ptext128:
 41230                           	opt stack 0
 41231  006B78                     ___aldiv:
 41232                           	opt stack 22
 41233                           
 41234                           ; BSR set to: 0
 41235                           ;incstack = 0
 41236  006B78  0E00               	movlw	0
 41237  006B7A  0100               	movlb	0	; () banked
 41238  006B7C  6F75               	movwf	___aldiv@sign& (0+255),b
 41239                           
 41240                           ; BSR set to: 0
 41241  006B7E  AF73               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 41242  006B80  D00A               	goto	l5483
 41243                           
 41244                           ; BSR set to: 0
 41245  006B82  1F73               	comf	(___aldiv@divisor+3)& (0+255),f,b
 41246  006B84  1F72               	comf	(___aldiv@divisor+2)& (0+255),f,b
 41247  006B86  1F71               	comf	(___aldiv@divisor+1)& (0+255),f,b
 41248  006B88  6D70               	negf	___aldiv@divisor& (0+255),b
 41249  006B8A  0E00               	movlw	0
 41250  006B8C  2371               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 41251  006B8E  2372               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 41252  006B90  2373               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 41253                           
 41254                           ; BSR set to: 0
 41255  006B92  0E01               	movlw	1
 41256  006B94  6F75               	movwf	___aldiv@sign& (0+255),b
 41257  006B96                     l5483:
 41258                           
 41259                           ; BSR set to: 0
 41260                           
 41261                           ; BSR set to: 0
 41262  006B96  AF6F               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 41263  006B98  D00A               	goto	l5484
 41264                           
 41265                           ; BSR set to: 0
 41266  006B9A  1F6F               	comf	(___aldiv@dividend+3)& (0+255),f,b
 41267  006B9C  1F6E               	comf	(___aldiv@dividend+2)& (0+255),f,b
 41268  006B9E  1F6D               	comf	(___aldiv@dividend+1)& (0+255),f,b
 41269  006BA0  6D6C               	negf	___aldiv@dividend& (0+255),b
 41270  006BA2  0E00               	movlw	0
 41271  006BA4  236D               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 41272  006BA6  236E               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 41273  006BA8  236F               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 41274                           
 41275                           ; BSR set to: 0
 41276  006BAA  0E01               	movlw	1
 41277  006BAC  1B75               	xorwf	___aldiv@sign& (0+255),f,b
 41278  006BAE                     l5484:
 41279                           
 41280                           ; BSR set to: 0
 41281                           
 41282                           ; BSR set to: 0
 41283  006BAE  0E00               	movlw	0
 41284  006BB0  6F76               	movwf	___aldiv@quotient& (0+255),b
 41285  006BB2  0E00               	movlw	0
 41286  006BB4  6F77               	movwf	(___aldiv@quotient+1)& (0+255),b
 41287  006BB6  0E00               	movlw	0
 41288  006BB8  6F78               	movwf	(___aldiv@quotient+2)& (0+255),b
 41289  006BBA  0E00               	movlw	0
 41290  006BBC  6F79               	movwf	(___aldiv@quotient+3)& (0+255),b
 41291                           
 41292                           ; BSR set to: 0
 41293  006BBE  5170               	movf	___aldiv@divisor& (0+255),w,b
 41294  006BC0  1171               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 41295  006BC2  1172               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 41296  006BC4  1173               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 41297  006BC6  B4D8               	btfsc	status,2,c
 41298  006BC8  D02A               	goto	l5491
 41299                           
 41300                           ; BSR set to: 0
 41301  006BCA  0E01               	movlw	1
 41302  006BCC  6F74               	movwf	___aldiv@counter& (0+255),b
 41303  006BCE  D006               	goto	l5486
 41304  006BD0                     
 41305                           ; BSR set to: 0
 41306                           
 41307                           ; BSR set to: 0
 41308  006BD0  90D8               	bcf	status,0,c
 41309  006BD2  3770               	rlcf	___aldiv@divisor& (0+255),f,b
 41310  006BD4  3771               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 41311  006BD6  3772               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 41312  006BD8  3773               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 41313  006BDA  2B74               	incf	___aldiv@counter& (0+255),f,b
 41314  006BDC                     l5486:
 41315                           
 41316                           ; BSR set to: 0
 41317                           
 41318                           ; BSR set to: 0
 41319  006BDC  AF73               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 41320  006BDE  D7F8               	goto	l5487
 41321  006BE0                     u29960:
 41322                           
 41323                           ; BSR set to: 0
 41324                           
 41325                           ; BSR set to: 0
 41326                           
 41327                           ; BSR set to: 0
 41328  006BE0  90D8               	bcf	status,0,c
 41329  006BE2  3776               	rlcf	___aldiv@quotient& (0+255),f,b
 41330  006BE4  3777               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 41331  006BE6  3778               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 41332  006BE8  3779               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 41333                           
 41334                           ; BSR set to: 0
 41335  006BEA  5170               	movf	___aldiv@divisor& (0+255),w,b
 41336  006BEC  5D6C               	subwf	___aldiv@dividend& (0+255),w,b
 41337  006BEE  5171               	movf	(___aldiv@divisor+1)& (0+255),w,b
 41338  006BF0  596D               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 41339  006BF2  5172               	movf	(___aldiv@divisor+2)& (0+255),w,b
 41340  006BF4  596E               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 41341  006BF6  5173               	movf	(___aldiv@divisor+3)& (0+255),w,b
 41342  006BF8  596F               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 41343  006BFA  A0D8               	btfss	status,0,c
 41344  006BFC  D009               	goto	l5490
 41345                           
 41346                           ; BSR set to: 0
 41347  006BFE  5170               	movf	___aldiv@divisor& (0+255),w,b
 41348  006C00  5F6C               	subwf	___aldiv@dividend& (0+255),f,b
 41349  006C02  5171               	movf	(___aldiv@divisor+1)& (0+255),w,b
 41350  006C04  5B6D               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 41351  006C06  5172               	movf	(___aldiv@divisor+2)& (0+255),w,b
 41352  006C08  5B6E               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 41353  006C0A  5173               	movf	(___aldiv@divisor+3)& (0+255),w,b
 41354  006C0C  5B6F               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 41355                           
 41356                           ; BSR set to: 0
 41357  006C0E  8176               	bsf	___aldiv@quotient& (0+255),0,b
 41358  006C10                     l5490:
 41359                           
 41360                           ; BSR set to: 0
 41361                           
 41362                           ; BSR set to: 0
 41363  006C10  90D8               	bcf	status,0,c
 41364  006C12  3373               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 41365  006C14  3372               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 41366  006C16  3371               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 41367  006C18  3370               	rrcf	___aldiv@divisor& (0+255),f,b
 41368                           
 41369                           ; BSR set to: 0
 41370  006C1A  2F74               	decfsz	___aldiv@counter& (0+255),f,b
 41371  006C1C  D7E1               	goto	u29960
 41372  006C1E                     l5491:
 41373                           
 41374                           ; BSR set to: 0
 41375                           
 41376                           ; BSR set to: 0
 41377                           
 41378                           ; BSR set to: 0
 41379  006C1E  5175               	movf	___aldiv@sign& (0+255),w,b
 41380  006C20  B4D8               	btfsc	status,2,c
 41381  006C22  D008               	goto	l5492
 41382                           
 41383                           ; BSR set to: 0
 41384  006C24  1F79               	comf	(___aldiv@quotient+3)& (0+255),f,b
 41385  006C26  1F78               	comf	(___aldiv@quotient+2)& (0+255),f,b
 41386  006C28  1F77               	comf	(___aldiv@quotient+1)& (0+255),f,b
 41387  006C2A  6D76               	negf	___aldiv@quotient& (0+255),b
 41388  006C2C  0E00               	movlw	0
 41389  006C2E  2377               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 41390  006C30  2378               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 41391  006C32  2379               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 41392  006C34                     l5492:
 41393                           
 41394                           ; BSR set to: 0
 41395                           
 41396                           ; BSR set to: 0
 41397  006C34  C076  F06C         	movff	___aldiv@quotient,?___aldiv
 41398  006C38  C077  F06D         	movff	___aldiv@quotient+1,?___aldiv+1
 41399  006C3C  C078  F06E         	movff	___aldiv@quotient+2,?___aldiv+2
 41400  006C40  C079  F06F         	movff	___aldiv@quotient+3,?___aldiv+3
 41401  006C44  0012               	return	
 41402  006C46                     __end_of___aldiv:
 41403                           	opt stack 0
 41404                           tblptru	equ	0xFF8
 41405                           tblptrh	equ	0xFF7
 41406                           tblptrl	equ	0xFF6
 41407                           tablat	equ	0xFF5
 41408                           prodh	equ	0xFF4
 41409                           prodl	equ	0xFF3
 41410                           intcon	equ	0xFF2
 41411                           intcon2	equ	0xFF1
 41412                           postinc0	equ	0xFEE
 41413                           wreg	equ	0xFE8
 41414                           indf1	equ	0xFE7
 41415                           postinc1	equ	0xFE6
 41416                           postdec1	equ	0xFE5
 41417                           fsr1h	equ	0xFE2
 41418                           fsr1l	equ	0xFE1
 41419                           indf2	equ	0xFDF
 41420                           postinc2	equ	0xFDE
 41421                           postdec2	equ	0xFDD
 41422                           plusw2	equ	0xFDB
 41423                           fsr2h	equ	0xFDA
 41424                           fsr2l	equ	0xFD9
 41425                           status	equ	0xFD8
 41426                           
 41427 ;; *************** function ___xxtofl *****************
 41428 ;; Defined at:
 41429 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
 41430 ;; Parameters:    Size  Location     Type
 41431 ;;  sign            1    wreg     unsigned char 
 41432 ;;  val             4    0[BANK0 ] long 
 41433 ;; Auto vars:     Size  Location     Type
 41434 ;;  sign            1    8[BANK0 ] unsigned char 
 41435 ;;  arg             4   10[BANK0 ] unsigned long 
 41436 ;;  exp             1    9[BANK0 ] unsigned char 
 41437 ;; Return value:  Size  Location     Type
 41438 ;;                  4    0[BANK0 ] unsigned char 
 41439 ;; Registers used:
 41440 ;;		wreg, status,2, status,0
 41441 ;; Tracked objects:
 41442 ;;		On entry : 0/0
 41443 ;;		On exit  : 0/0
 41444 ;;		Unchanged: 0/0
 41445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41446 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41447 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41448 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41449 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41450 ;;Total ram usage:       14 bytes
 41451 ;; Hardware stack levels used:    1
 41452 ;; Hardware stack levels required when called:    5
 41453 ;; This function calls:
 41454 ;;		Nothing
 41455 ;; This function is called by:
 41456 ;;		_calculate_alpha
 41457 ;;		_readPotentiometers
 41458 ;;		_calculate_pulse_length
 41459 ;; This function uses a non-reentrant model
 41460 ;;
 41461                           
 41462                           	psect	text129
 41463  005E52                     __ptext129:
 41464                           	opt stack 0
 41465  005E52                     ___xxtofl:
 41466                           	opt stack 22
 41467                           
 41468                           ; BSR set to: 0
 41469                           ;incstack = 0
 41470                           ;___xxtofl@sign stored from wreg
 41471  005E52  0100               	movlb	0	; () banked
 41472  005E54  6F68               	movwf	___xxtofl@sign& (0+255),b
 41473  005E56  0100               	movlb	0	; () banked
 41474  005E58  5168               	movf	___xxtofl@sign& (0+255),w,b
 41475  005E5A  A4D8               	btfss	status,2,c
 41476                           
 41477                           ; BSR set to: 0
 41478  005E5C  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 41479  005E5E  D01A               	goto	l5989
 41480                           
 41481                           ; BSR set to: 0
 41482  005E60  C060  F064         	movff	___xxtofl@val,??___xxtofl
 41483  005E64  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 41484  005E68  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 41485  005E6C  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 41486  005E70  1F64               	comf	??___xxtofl& (0+255),f,b
 41487  005E72  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 41488  005E74  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 41489  005E76  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 41490  005E78  2B64               	incf	??___xxtofl& (0+255),f,b
 41491  005E7A  0E00               	movlw	0
 41492  005E7C  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 41493  005E7E  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 41494  005E80  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 41495  005E82  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 41496  005E86  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 41497  005E8A  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 41498  005E8E  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 41499  005E92  D008               	goto	l5990
 41500  005E94                     l5989:
 41501                           
 41502                           ; BSR set to: 0
 41503  005E94  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 41504  005E98  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 41505  005E9C  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 41506  005EA0  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 41507  005EA4                     l5990:
 41508                           
 41509                           ; BSR set to: 0
 41510                           
 41511                           ; BSR set to: 0
 41512  005EA4  5160               	movf	___xxtofl@val& (0+255),w,b
 41513  005EA6  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 41514  005EA8  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 41515  005EAA  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 41516  005EAC  A4D8               	btfss	status,2,c
 41517  005EAE  D009               	goto	l5991
 41518                           
 41519                           ; BSR set to: 0
 41520  005EB0  0E00               	movlw	0
 41521  005EB2  6F60               	movwf	?___xxtofl& (0+255),b
 41522  005EB4  0E00               	movlw	0
 41523  005EB6  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 41524  005EB8  0E00               	movlw	0
 41525  005EBA  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 41526  005EBC  0E00               	movlw	0
 41527  005EBE  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 41528                           
 41529                           ; BSR set to: 0
 41530  005EC0  0012               	return	
 41531  005EC2                     l5991:
 41532                           
 41533                           ; BSR set to: 0
 41534                           
 41535                           ; BSR set to: 0
 41536  005EC2  0E96               	movlw	150
 41537  005EC4  6F69               	movwf	___xxtofl@exp& (0+255),b
 41538  005EC6  D006               	goto	l5993
 41539  005EC8                     
 41540                           ; BSR set to: 0
 41541                           
 41542                           ; BSR set to: 0
 41543  005EC8  2B69               	incf	___xxtofl@exp& (0+255),f,b
 41544  005ECA  90D8               	bcf	status,0,c
 41545  005ECC  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 41546  005ECE  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 41547  005ED0  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 41548  005ED2  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 41549  005ED4                     l5993:
 41550                           
 41551                           ; BSR set to: 0
 41552                           
 41553                           ; BSR set to: 0
 41554  005ED4  0E00               	movlw	0
 41555  005ED6  156A               	andwf	___xxtofl@arg& (0+255),w,b
 41556  005ED8  6F64               	movwf	??___xxtofl& (0+255),b
 41557  005EDA  0E00               	movlw	0
 41558  005EDC  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 41559  005EDE  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 41560  005EE0  0E00               	movlw	0
 41561  005EE2  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 41562  005EE4  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 41563  005EE6  0EFE               	movlw	254
 41564  005EE8  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 41565  005EEA  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 41566  005EEC  5164               	movf	??___xxtofl& (0+255),w,b
 41567  005EEE  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 41568  005EF0  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 41569  005EF2  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 41570  005EF4  B4D8               	btfsc	status,2,c
 41571  005EF6  D00D               	goto	l5996
 41572  005EF8  D7E7               	goto	l5994
 41573  005EFA                     
 41574                           ; BSR set to: 0
 41575                           
 41576                           ; BSR set to: 0
 41577  005EFA  2B69               	incf	___xxtofl@exp& (0+255),f,b
 41578                           
 41579                           ; BSR set to: 0
 41580  005EFC  0E01               	movlw	1
 41581  005EFE  276A               	addwf	___xxtofl@arg& (0+255),f,b
 41582  005F00  0E00               	movlw	0
 41583  005F02  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 41584  005F04  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 41585  005F06  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 41586                           
 41587                           ; BSR set to: 0
 41588  005F08  90D8               	bcf	status,0,c
 41589  005F0A  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 41590  005F0C  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 41591  005F0E  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 41592  005F10  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 41593  005F12                     l5996:
 41594                           
 41595                           ; BSR set to: 0
 41596  005F12  0E00               	movlw	0
 41597  005F14  156A               	andwf	___xxtofl@arg& (0+255),w,b
 41598  005F16  6F64               	movwf	??___xxtofl& (0+255),b
 41599  005F18  0E00               	movlw	0
 41600  005F1A  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 41601  005F1C  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 41602  005F1E  0E00               	movlw	0
 41603  005F20  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 41604  005F22  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 41605  005F24  0EFF               	movlw	255
 41606  005F26  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 41607  005F28  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 41608  005F2A  5164               	movf	??___xxtofl& (0+255),w,b
 41609  005F2C  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 41610  005F2E  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 41611  005F30  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 41612  005F32  B4D8               	btfsc	status,2,c
 41613  005F34  D007               	goto	l5999
 41614  005F36  D7E1               	goto	l5997
 41615  005F38                     
 41616                           ; BSR set to: 0
 41617                           
 41618                           ; BSR set to: 0
 41619  005F38  0769               	decf	___xxtofl@exp& (0+255),f,b
 41620  005F3A  90D8               	bcf	status,0,c
 41621  005F3C  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 41622  005F3E  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 41623  005F40  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 41624  005F42  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 41625  005F44                     l5999:
 41626                           
 41627                           ; BSR set to: 0
 41628                           
 41629                           ; BSR set to: 0
 41630  005F44  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 41631  005F46  D003               	goto	u26740
 41632                           
 41633                           ; BSR set to: 0
 41634  005F48  0E02               	movlw	2
 41635  005F4A  6169               	cpfslt	___xxtofl@exp& (0+255),b
 41636  005F4C  D7F5               	goto	l6000
 41637  005F4E                     u26740:
 41638                           
 41639                           ; BSR set to: 0
 41640                           
 41641                           ; BSR set to: 0
 41642  005F4E  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 41643  005F50  D008               	goto	l6004
 41644                           
 41645                           ; BSR set to: 0
 41646  005F52  0EFF               	movlw	255
 41647  005F54  176A               	andwf	___xxtofl@arg& (0+255),f,b
 41648  005F56  0EFF               	movlw	255
 41649  005F58  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 41650  005F5A  0E7F               	movlw	127
 41651  005F5C  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 41652  005F5E  0EFF               	movlw	255
 41653  005F60  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 41654  005F62                     l6004:
 41655                           
 41656                           ; BSR set to: 0
 41657  005F62  90D8               	bcf	status,0,c
 41658  005F64  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 41659  005F66  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 41660  005F6A  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 41661  005F6C  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 41662  005F6E  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 41663  005F70  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 41664  005F74  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 41665  005F76  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 41666  005F78  6B64               	clrf	??___xxtofl& (0+255),b
 41667  005F7A  5164               	movf	??___xxtofl& (0+255),w,b
 41668  005F7C  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 41669  005F7E  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 41670  005F80  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 41671  005F82  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 41672  005F84  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 41673  005F86  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 41674  005F88  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 41675                           
 41676                           ; BSR set to: 0
 41677  005F8A  5168               	movf	___xxtofl@sign& (0+255),w,b
 41678  005F8C  A4D8               	btfss	status,2,c
 41679                           
 41680                           ; BSR set to: 0
 41681  005F8E  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 41682  005F90  D001               	goto	l6005
 41683                           
 41684                           ; BSR set to: 0
 41685  005F92  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 41686  005F94                     l6005:
 41687                           
 41688                           ; BSR set to: 0
 41689                           
 41690                           ; BSR set to: 0
 41691  005F94  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 41692  005F98  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 41693  005F9C  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 41694  005FA0  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 41695  005FA4  0012               	return	
 41696  005FA6                     __end_of___xxtofl:
 41697                           	opt stack 0
 41698                           tblptru	equ	0xFF8
 41699                           tblptrh	equ	0xFF7
 41700                           tblptrl	equ	0xFF6
 41701                           tablat	equ	0xFF5
 41702                           prodh	equ	0xFF4
 41703                           prodl	equ	0xFF3
 41704                           intcon	equ	0xFF2
 41705                           intcon2	equ	0xFF1
 41706                           postinc0	equ	0xFEE
 41707                           wreg	equ	0xFE8
 41708                           indf1	equ	0xFE7
 41709                           postinc1	equ	0xFE6
 41710                           postdec1	equ	0xFE5
 41711                           fsr1h	equ	0xFE2
 41712                           fsr1l	equ	0xFE1
 41713                           indf2	equ	0xFDF
 41714                           postinc2	equ	0xFDE
 41715                           postdec2	equ	0xFDD
 41716                           plusw2	equ	0xFDB
 41717                           fsr2h	equ	0xFDA
 41718                           fsr2l	equ	0xFD9
 41719                           status	equ	0xFD8
 41720                           
 41721 ;; *************** function ___fltol *****************
 41722 ;; Defined at:
 41723 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
 41724 ;; Parameters:    Size  Location     Type
 41725 ;;  f1              4   88[BANK0 ] unsigned char 
 41726 ;; Auto vars:     Size  Location     Type
 41727 ;;  exp1            1   97[BANK0 ] unsigned char 
 41728 ;;  sign1           1   96[BANK0 ] unsigned char 
 41729 ;; Return value:  Size  Location     Type
 41730 ;;                  4   88[BANK0 ] long 
 41731 ;; Registers used:
 41732 ;;		wreg, status,2, status,0
 41733 ;; Tracked objects:
 41734 ;;		On entry : 0/0
 41735 ;;		On exit  : 0/0
 41736 ;;		Unchanged: 0/0
 41737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41738 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41739 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41740 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41741 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41742 ;;Total ram usage:       10 bytes
 41743 ;; Hardware stack levels used:    1
 41744 ;; Hardware stack levels required when called:    5
 41745 ;; This function calls:
 41746 ;;		Nothing
 41747 ;; This function is called by:
 41748 ;;		_readPotentiometers
 41749 ;;		_calculate_pulse_length
 41750 ;; This function uses a non-reentrant model
 41751 ;;
 41752                           
 41753                           	psect	text130
 41754  0069C6                     __ptext130:
 41755                           	opt stack 0
 41756  0069C6                     ___fltol:
 41757                           	opt stack 22
 41758                           
 41759                           ; BSR set to: 0
 41760                           ;incstack = 0
 41761  0069C6  0100               	movlb	0	; () banked
 41762  0069C8  35BA               	rlcf	(___fltol@f1+2)& (0+255),w,b
 41763  0069CA  35BB               	rlcf	(___fltol@f1+3)& (0+255),w,b
 41764  0069CC  6FC1               	movwf	___fltol@exp1& (0+255),b
 41765  0069CE  51C1               	movf	___fltol@exp1& (0+255),w,b
 41766  0069D0  A4D8               	btfss	status,2,c
 41767  0069D2  D009               	goto	l5657
 41768                           
 41769                           ; BSR set to: 0
 41770  0069D4  0E00               	movlw	0
 41771  0069D6  6FB8               	movwf	?___fltol& (0+255),b
 41772  0069D8  0E00               	movlw	0
 41773  0069DA  6FB9               	movwf	(?___fltol+1)& (0+255),b
 41774  0069DC  0E00               	movlw	0
 41775  0069DE  6FBA               	movwf	(?___fltol+2)& (0+255),b
 41776  0069E0  0E00               	movlw	0
 41777  0069E2  6FBB               	movwf	(?___fltol+3)& (0+255),b
 41778                           
 41779                           ; BSR set to: 0
 41780  0069E4  0012               	return	
 41781  0069E6                     l5657:
 41782                           
 41783                           ; BSR set to: 0
 41784                           
 41785                           ; BSR set to: 0
 41786  0069E6  C0B8  F0BC         	movff	___fltol@f1,??___fltol
 41787  0069EA  C0B9  F0BD         	movff	___fltol@f1+1,??___fltol+1
 41788  0069EE  C0BA  F0BE         	movff	___fltol@f1+2,??___fltol+2
 41789  0069F2  C0BB  F0BF         	movff	___fltol@f1+3,??___fltol+3
 41790  0069F6  0E20               	movlw	32
 41791  0069F8  D005               	goto	u26620
 41792  0069FA                     u26625:
 41793  0069FA  90D8               	bcf	status,0,c
 41794  0069FC  33BF               	rrcf	(??___fltol+3)& (0+255),f,b
 41795  0069FE  33BE               	rrcf	(??___fltol+2)& (0+255),f,b
 41796  006A00  33BD               	rrcf	(??___fltol+1)& (0+255),f,b
 41797  006A02  33BC               	rrcf	??___fltol& (0+255),f,b
 41798  006A04                     u26620:
 41799  006A04  2EE8               	decfsz	wreg,f,c
 41800  006A06  D7F9               	goto	u26625
 41801  006A08  51BC               	movf	??___fltol& (0+255),w,b
 41802  006A0A  6FC0               	movwf	___fltol@sign1& (0+255),b
 41803                           
 41804                           ; BSR set to: 0
 41805  006A0C  8FBA               	bsf	(___fltol@f1+2)& (0+255),7,b
 41806                           
 41807                           ; BSR set to: 0
 41808  006A0E  0EFF               	movlw	255
 41809  006A10  17B8               	andwf	___fltol@f1& (0+255),f,b
 41810  006A12  0EFF               	movlw	255
 41811  006A14  17B9               	andwf	(___fltol@f1+1)& (0+255),f,b
 41812  006A16  0EFF               	movlw	255
 41813  006A18  17BA               	andwf	(___fltol@f1+2)& (0+255),f,b
 41814  006A1A  0E00               	movlw	0
 41815  006A1C  17BB               	andwf	(___fltol@f1+3)& (0+255),f,b
 41816                           
 41817                           ; BSR set to: 0
 41818  006A1E  0E96               	movlw	150
 41819  006A20  5FC1               	subwf	___fltol@exp1& (0+255),f,b
 41820                           
 41821                           ; BSR set to: 0
 41822  006A22  AFC1               	btfss	___fltol@exp1& (0+255),7,b
 41823  006A24  D016               	goto	l5659
 41824                           
 41825                           ; BSR set to: 0
 41826  006A26  51C1               	movf	___fltol@exp1& (0+255),w,b
 41827  006A28  0A80               	xorlw	128
 41828  006A2A  0F97               	addlw	151
 41829  006A2C  B0D8               	btfsc	status,0,c
 41830  006A2E  D009               	goto	l5660
 41831                           
 41832                           ; BSR set to: 0
 41833  006A30  0E00               	movlw	0
 41834  006A32  6FB8               	movwf	?___fltol& (0+255),b
 41835  006A34  0E00               	movlw	0
 41836  006A36  6FB9               	movwf	(?___fltol+1)& (0+255),b
 41837  006A38  0E00               	movlw	0
 41838  006A3A  6FBA               	movwf	(?___fltol+2)& (0+255),b
 41839  006A3C  0E00               	movlw	0
 41840  006A3E  6FBB               	movwf	(?___fltol+3)& (0+255),b
 41841                           
 41842                           ; BSR set to: 0
 41843  006A40  0012               	return	
 41844  006A42                     l5660:
 41845                           
 41846                           ; BSR set to: 0
 41847                           
 41848                           ; BSR set to: 0
 41849                           
 41850                           ; BSR set to: 0
 41851  006A42  90D8               	bcf	status,0,c
 41852  006A44  33BB               	rrcf	(___fltol@f1+3)& (0+255),f,b
 41853  006A46  33BA               	rrcf	(___fltol@f1+2)& (0+255),f,b
 41854  006A48  33B9               	rrcf	(___fltol@f1+1)& (0+255),f,b
 41855  006A4A  33B8               	rrcf	___fltol@f1& (0+255),f,b
 41856                           
 41857                           ; BSR set to: 0
 41858  006A4C  3FC1               	incfsz	___fltol@exp1& (0+255),f,b
 41859  006A4E  D7F9               	goto	l5660
 41860                           
 41861                           ; BSR set to: 0
 41862  006A50  D015               	goto	u26660
 41863  006A52                     l5659:
 41864                           
 41865                           ; BSR set to: 0
 41866                           
 41867                           ; BSR set to: 0
 41868  006A52  0E1F               	movlw	31
 41869  006A54  65C1               	cpfsgt	___fltol@exp1& (0+255),b
 41870  006A56  D00F               	goto	l5665
 41871                           
 41872                           ; BSR set to: 0
 41873  006A58  0E00               	movlw	0
 41874  006A5A  6FB8               	movwf	?___fltol& (0+255),b
 41875  006A5C  0E00               	movlw	0
 41876  006A5E  6FB9               	movwf	(?___fltol+1)& (0+255),b
 41877  006A60  0E00               	movlw	0
 41878  006A62  6FBA               	movwf	(?___fltol+2)& (0+255),b
 41879  006A64  0E00               	movlw	0
 41880  006A66  6FBB               	movwf	(?___fltol+3)& (0+255),b
 41881                           
 41882                           ; BSR set to: 0
 41883  006A68  0012               	return	
 41884  006A6A                     
 41885                           ; BSR set to: 0
 41886                           
 41887                           ; BSR set to: 0
 41888  006A6A  90D8               	bcf	status,0,c
 41889  006A6C  37B8               	rlcf	___fltol@f1& (0+255),f,b
 41890  006A6E  37B9               	rlcf	(___fltol@f1+1)& (0+255),f,b
 41891  006A70  37BA               	rlcf	(___fltol@f1+2)& (0+255),f,b
 41892  006A72  37BB               	rlcf	(___fltol@f1+3)& (0+255),f,b
 41893  006A74  07C1               	decf	___fltol@exp1& (0+255),f,b
 41894  006A76                     l5665:
 41895                           
 41896                           ; BSR set to: 0
 41897                           
 41898                           ; BSR set to: 0
 41899  006A76  51C1               	movf	___fltol@exp1& (0+255),w,b
 41900  006A78  A4D8               	btfss	status,2,c
 41901  006A7A  D7F7               	goto	l5666
 41902  006A7C                     u26660:
 41903                           
 41904                           ; BSR set to: 0
 41905                           
 41906                           ; BSR set to: 0
 41907                           
 41908                           ; BSR set to: 0
 41909  006A7C  51C0               	movf	___fltol@sign1& (0+255),w,b
 41910  006A7E  B4D8               	btfsc	status,2,c
 41911  006A80  D008               	goto	l5668
 41912                           
 41913                           ; BSR set to: 0
 41914  006A82  1FBB               	comf	(___fltol@f1+3)& (0+255),f,b
 41915  006A84  1FBA               	comf	(___fltol@f1+2)& (0+255),f,b
 41916  006A86  1FB9               	comf	(___fltol@f1+1)& (0+255),f,b
 41917  006A88  6DB8               	negf	___fltol@f1& (0+255),b
 41918  006A8A  0E00               	movlw	0
 41919  006A8C  23B9               	addwfc	(___fltol@f1+1)& (0+255),f,b
 41920  006A8E  23BA               	addwfc	(___fltol@f1+2)& (0+255),f,b
 41921  006A90  23BB               	addwfc	(___fltol@f1+3)& (0+255),f,b
 41922  006A92                     l5668:
 41923                           
 41924                           ; BSR set to: 0
 41925                           
 41926                           ; BSR set to: 0
 41927  006A92  C0B8  F0B8         	movff	___fltol@f1,?___fltol
 41928  006A96  C0B9  F0B9         	movff	___fltol@f1+1,?___fltol+1
 41929  006A9A  C0BA  F0BA         	movff	___fltol@f1+2,?___fltol+2
 41930  006A9E  C0BB  F0BB         	movff	___fltol@f1+3,?___fltol+3
 41931  006AA2  0012               	return	
 41932  006AA4                     __end_of___fltol:
 41933                           	opt stack 0
 41934                           tblptru	equ	0xFF8
 41935                           tblptrh	equ	0xFF7
 41936                           tblptrl	equ	0xFF6
 41937                           tablat	equ	0xFF5
 41938                           prodh	equ	0xFF4
 41939                           prodl	equ	0xFF3
 41940                           intcon	equ	0xFF2
 41941                           intcon2	equ	0xFF1
 41942                           postinc0	equ	0xFEE
 41943                           wreg	equ	0xFE8
 41944                           indf1	equ	0xFE7
 41945                           postinc1	equ	0xFE6
 41946                           postdec1	equ	0xFE5
 41947                           fsr1h	equ	0xFE2
 41948                           fsr1l	equ	0xFE1
 41949                           indf2	equ	0xFDF
 41950                           postinc2	equ	0xFDE
 41951                           postdec2	equ	0xFDD
 41952                           plusw2	equ	0xFDB
 41953                           fsr2h	equ	0xFDA
 41954                           fsr2l	equ	0xFD9
 41955                           status	equ	0xFD8
 41956                           
 41957 ;; *************** function ___flneg *****************
 41958 ;; Defined at:
 41959 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
 41960 ;; Parameters:    Size  Location     Type
 41961 ;;  f1              4   64[BANK0 ] long 
 41962 ;; Auto vars:     Size  Location     Type
 41963 ;;		None
 41964 ;; Return value:  Size  Location     Type
 41965 ;;                  4   64[BANK0 ] long 
 41966 ;; Registers used:
 41967 ;;		wreg, status,2, status,0
 41968 ;; Tracked objects:
 41969 ;;		On entry : 0/0
 41970 ;;		On exit  : 0/0
 41971 ;;		Unchanged: 0/0
 41972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41973 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41976 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41977 ;;Total ram usage:        4 bytes
 41978 ;; Hardware stack levels used:    1
 41979 ;; Hardware stack levels required when called:    5
 41980 ;; This function calls:
 41981 ;;		Nothing
 41982 ;; This function is called by:
 41983 ;;		_readPotentiometers
 41984 ;;		_calculate_pulse_length
 41985 ;; This function uses a non-reentrant model
 41986 ;;
 41987                           
 41988                           	psect	text131
 41989  009330                     __ptext131:
 41990                           	opt stack 0
 41991  009330                     ___flneg:
 41992                           	opt stack 22
 41993                           
 41994                           ; BSR set to: 0
 41995                           ;incstack = 0
 41996  009330  0100               	movlb	0	; () banked
 41997  009332  51A0               	movf	___flneg@f1& (0+255),w,b
 41998  009334  11A1               	iorwf	(___flneg@f1+1)& (0+255),w,b
 41999  009336  11A2               	iorwf	(___flneg@f1+2)& (0+255),w,b
 42000  009338  11A3               	iorwf	(___flneg@f1+3)& (0+255),w,b
 42001  00933A  B4D8               	btfsc	status,2,c
 42002  00933C  D008               	goto	l5634
 42003                           
 42004                           ; BSR set to: 0
 42005  00933E  0E00               	movlw	0
 42006  009340  1BA0               	xorwf	___flneg@f1& (0+255),f,b
 42007  009342  0E00               	movlw	0
 42008  009344  1BA1               	xorwf	(___flneg@f1+1)& (0+255),f,b
 42009  009346  0E00               	movlw	0
 42010  009348  1BA2               	xorwf	(___flneg@f1+2)& (0+255),f,b
 42011  00934A  0E80               	movlw	128
 42012  00934C  1BA3               	xorwf	(___flneg@f1+3)& (0+255),f,b
 42013  00934E                     l5634:
 42014                           
 42015                           ; BSR set to: 0
 42016                           
 42017                           ; BSR set to: 0
 42018  00934E  C0A0  F0A0         	movff	___flneg@f1,?___flneg
 42019  009352  C0A1  F0A1         	movff	___flneg@f1+1,?___flneg+1
 42020  009356  C0A2  F0A2         	movff	___flneg@f1+2,?___flneg+2
 42021  00935A  C0A3  F0A3         	movff	___flneg@f1+3,?___flneg+3
 42022  00935E  0012               	return	
 42023  009360                     __end_of___flneg:
 42024                           	opt stack 0
 42025                           tblptru	equ	0xFF8
 42026                           tblptrh	equ	0xFF7
 42027                           tblptrl	equ	0xFF6
 42028                           tablat	equ	0xFF5
 42029                           prodh	equ	0xFF4
 42030                           prodl	equ	0xFF3
 42031                           intcon	equ	0xFF2
 42032                           intcon2	equ	0xFF1
 42033                           postinc0	equ	0xFEE
 42034                           wreg	equ	0xFE8
 42035                           indf1	equ	0xFE7
 42036                           postinc1	equ	0xFE6
 42037                           postdec1	equ	0xFE5
 42038                           fsr1h	equ	0xFE2
 42039                           fsr1l	equ	0xFE1
 42040                           indf2	equ	0xFDF
 42041                           postinc2	equ	0xFDE
 42042                           postdec2	equ	0xFDD
 42043                           plusw2	equ	0xFDB
 42044                           fsr2h	equ	0xFDA
 42045                           fsr2l	equ	0xFD9
 42046                           status	equ	0xFD8
 42047                           
 42048 ;; *************** function ___flmul *****************
 42049 ;; Defined at:
 42050 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
 42051 ;; Parameters:    Size  Location     Type
 42052 ;;  b               4   14[BANK0 ] long 
 42053 ;;  a               4   18[BANK0 ] long 
 42054 ;; Auto vars:     Size  Location     Type
 42055 ;;  prod            4   33[BANK0 ] struct .
 42056 ;;  grs             4   27[BANK0 ] unsigned long 
 42057 ;;  temp            2   37[BANK0 ] struct .
 42058 ;;  bexp            1   32[BANK0 ] unsigned char 
 42059 ;;  aexp            1   31[BANK0 ] unsigned char 
 42060 ;;  sign            1   26[BANK0 ] unsigned char 
 42061 ;; Return value:  Size  Location     Type
 42062 ;;                  4   14[BANK0 ] unsigned char 
 42063 ;; Registers used:
 42064 ;;		wreg, status,2, status,0, prodl, prodh
 42065 ;; Tracked objects:
 42066 ;;		On entry : 0/0
 42067 ;;		On exit  : 0/0
 42068 ;;		Unchanged: 0/0
 42069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42070 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42071 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42072 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42073 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42074 ;;Total ram usage:       25 bytes
 42075 ;; Hardware stack levels used:    1
 42076 ;; Hardware stack levels required when called:    5
 42077 ;; This function calls:
 42078 ;;		Nothing
 42079 ;; This function is called by:
 42080 ;;		_readPotentiometers
 42081 ;;		_calculate_pulse_length
 42082 ;; This function uses a non-reentrant model
 42083 ;;
 42084                           
 42085                           	psect	text132
 42086  002E9C                     __ptext132:
 42087                           	opt stack 0
 42088  002E9C                     ___flmul:
 42089                           	opt stack 22
 42090                           
 42091                           ; BSR set to: 0
 42092                           ;incstack = 0
 42093  002E9C  0100               	movlb	0	; () banked
 42094  002E9E  5171               	movf	(___flmul@b+3)& (0+255),w,b
 42095  002EA0  0B80               	andlw	128
 42096  002EA2  6F7A               	movwf	___flmul@sign& (0+255),b
 42097  002EA4  5171               	movf	(___flmul@b+3)& (0+255),w,b
 42098  002EA6  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 42099  002EA8  6F80               	movwf	___flmul@bexp& (0+255),b
 42100                           
 42101                           ; BSR set to: 0
 42102  002EAA  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 42103                           
 42104                           ; BSR set to: 0
 42105  002EAC  8180               	bsf	___flmul@bexp& (0+255),0,b
 42106                           
 42107                           ; BSR set to: 0
 42108                           
 42109                           ; BSR set to: 0
 42110  002EAE  5180               	movf	___flmul@bexp& (0+255),w,b
 42111  002EB0  B4D8               	btfsc	status,2,c
 42112  002EB2  D00D               	goto	l5955
 42113                           
 42114                           ; BSR set to: 0
 42115  002EB4  2980               	incf	___flmul@bexp& (0+255),w,b
 42116  002EB6  A4D8               	btfss	status,2,c
 42117  002EB8  D008               	goto	l5956
 42118                           
 42119                           ; BSR set to: 0
 42120  002EBA  0E00               	movlw	0
 42121  002EBC  6F6E               	movwf	___flmul@b& (0+255),b
 42122  002EBE  0E00               	movlw	0
 42123  002EC0  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 42124  002EC2  0E00               	movlw	0
 42125  002EC4  6F70               	movwf	(___flmul@b+2)& (0+255),b
 42126  002EC6  0E00               	movlw	0
 42127  002EC8  6F71               	movwf	(___flmul@b+3)& (0+255),b
 42128  002ECA                     l5956:
 42129                           
 42130                           ; BSR set to: 0
 42131                           
 42132                           ; BSR set to: 0
 42133  002ECA  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 42134  002ECC  D008               	goto	l5957
 42135  002ECE                     l5955:
 42136                           
 42137                           ; BSR set to: 0
 42138                           
 42139                           ; BSR set to: 0
 42140  002ECE  0E00               	movlw	0
 42141  002ED0  6F6E               	movwf	___flmul@b& (0+255),b
 42142  002ED2  0E00               	movlw	0
 42143  002ED4  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 42144  002ED6  0E00               	movlw	0
 42145  002ED8  6F70               	movwf	(___flmul@b+2)& (0+255),b
 42146  002EDA  0E00               	movlw	0
 42147  002EDC  6F71               	movwf	(___flmul@b+3)& (0+255),b
 42148  002EDE                     l5957:
 42149                           
 42150                           ; BSR set to: 0
 42151                           
 42152                           ; BSR set to: 0
 42153  002EDE  5175               	movf	(___flmul@a+3)& (0+255),w,b
 42154  002EE0  0B80               	andlw	128
 42155  002EE2  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 42156                           
 42157                           ; BSR set to: 0
 42158  002EE4  5175               	movf	(___flmul@a+3)& (0+255),w,b
 42159  002EE6  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 42160  002EE8  6F7F               	movwf	___flmul@aexp& (0+255),b
 42161                           
 42162                           ; BSR set to: 0
 42163  002EEA  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 42164                           
 42165                           ; BSR set to: 0
 42166  002EEC  817F               	bsf	___flmul@aexp& (0+255),0,b
 42167                           
 42168                           ; BSR set to: 0
 42169                           
 42170                           ; BSR set to: 0
 42171  002EEE  517F               	movf	___flmul@aexp& (0+255),w,b
 42172  002EF0  B4D8               	btfsc	status,2,c
 42173  002EF2  D00D               	goto	l5959
 42174                           
 42175                           ; BSR set to: 0
 42176  002EF4  297F               	incf	___flmul@aexp& (0+255),w,b
 42177  002EF6  A4D8               	btfss	status,2,c
 42178  002EF8  D008               	goto	l5960
 42179                           
 42180                           ; BSR set to: 0
 42181  002EFA  0E00               	movlw	0
 42182  002EFC  6F72               	movwf	___flmul@a& (0+255),b
 42183  002EFE  0E00               	movlw	0
 42184  002F00  6F73               	movwf	(___flmul@a+1)& (0+255),b
 42185  002F02  0E00               	movlw	0
 42186  002F04  6F74               	movwf	(___flmul@a+2)& (0+255),b
 42187  002F06  0E00               	movlw	0
 42188  002F08  6F75               	movwf	(___flmul@a+3)& (0+255),b
 42189  002F0A                     l5960:
 42190                           
 42191                           ; BSR set to: 0
 42192                           
 42193                           ; BSR set to: 0
 42194  002F0A  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 42195  002F0C  D008               	goto	l5961
 42196  002F0E                     l5959:
 42197                           
 42198                           ; BSR set to: 0
 42199                           
 42200                           ; BSR set to: 0
 42201  002F0E  0E00               	movlw	0
 42202  002F10  6F72               	movwf	___flmul@a& (0+255),b
 42203  002F12  0E00               	movlw	0
 42204  002F14  6F73               	movwf	(___flmul@a+1)& (0+255),b
 42205  002F16  0E00               	movlw	0
 42206  002F18  6F74               	movwf	(___flmul@a+2)& (0+255),b
 42207  002F1A  0E00               	movlw	0
 42208  002F1C  6F75               	movwf	(___flmul@a+3)& (0+255),b
 42209  002F1E                     l5961:
 42210                           
 42211                           ; BSR set to: 0
 42212  002F1E  517F               	movf	___flmul@aexp& (0+255),w,b
 42213  002F20  B4D8               	btfsc	status,2,c
 42214  002F22  D003               	goto	u26420
 42215                           
 42216                           ; BSR set to: 0
 42217  002F24  5180               	movf	___flmul@bexp& (0+255),w,b
 42218  002F26  A4D8               	btfss	status,2,c
 42219  002F28  D009               	goto	l5962
 42220  002F2A                     u26420:
 42221                           
 42222                           ; BSR set to: 0
 42223                           
 42224                           ; BSR set to: 0
 42225  002F2A  0E00               	movlw	0
 42226  002F2C  6F6E               	movwf	?___flmul& (0+255),b
 42227  002F2E  0E00               	movlw	0
 42228  002F30  6F6F               	movwf	(?___flmul+1)& (0+255),b
 42229  002F32  0E00               	movlw	0
 42230  002F34  6F70               	movwf	(?___flmul+2)& (0+255),b
 42231  002F36  0E00               	movlw	0
 42232  002F38  6F71               	movwf	(?___flmul+3)& (0+255),b
 42233                           
 42234                           ; BSR set to: 0
 42235  002F3A  0012               	return	
 42236  002F3C                     l5962:
 42237                           
 42238                           ; BSR set to: 0
 42239                           
 42240                           ; BSR set to: 0
 42241  002F3C  5174               	movf	(___flmul@a+2)& (0+255),w,b
 42242  002F3E  036E               	mulwf	___flmul@b& (0+255),b
 42243  002F40  CFF3 F085          	movff	prodl,___flmul@temp
 42244  002F44  CFF4 F086          	movff	prodh,___flmul@temp+1
 42245                           
 42246                           ; BSR set to: 0
 42247  002F48  5185               	movf	___flmul@temp& (0+255),w,b
 42248  002F4A  6F7B               	movwf	___flmul@grs& (0+255),b
 42249  002F4C  6B7C               	clrf	(___flmul@grs+1)& (0+255),b
 42250  002F4E  6B7D               	clrf	(___flmul@grs+2)& (0+255),b
 42251  002F50  6B7E               	clrf	(___flmul@grs+3)& (0+255),b
 42252                           
 42253                           ; BSR set to: 0
 42254  002F52  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42255  002F54  6F81               	movwf	___flmul@prod& (0+255),b
 42256  002F56  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 42257  002F58  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 42258  002F5A  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 42259  002F5C  5173               	movf	(___flmul@a+1)& (0+255),w,b
 42260  002F5E  036F               	mulwf	(___flmul@b+1)& (0+255),b
 42261  002F60  CFF3 F085          	movff	prodl,___flmul@temp
 42262  002F64  CFF4 F086          	movff	prodh,___flmul@temp+1
 42263                           
 42264                           ; BSR set to: 0
 42265  002F68  5185               	movf	___flmul@temp& (0+255),w,b
 42266  002F6A  277B               	addwf	___flmul@grs& (0+255),f,b
 42267  002F6C  0E00               	movlw	0
 42268  002F6E  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42269  002F70  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42270  002F72  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42271                           
 42272                           ; BSR set to: 0
 42273  002F74  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42274  002F76  2781               	addwf	___flmul@prod& (0+255),f,b
 42275  002F78  0E00               	movlw	0
 42276  002F7A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42277  002F7C  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42278  002F7E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42279  002F80  5172               	movf	___flmul@a& (0+255),w,b
 42280  002F82  0370               	mulwf	(___flmul@b+2)& (0+255),b
 42281  002F84  CFF3 F085          	movff	prodl,___flmul@temp
 42282  002F88  CFF4 F086          	movff	prodh,___flmul@temp+1
 42283                           
 42284                           ; BSR set to: 0
 42285  002F8C  5185               	movf	___flmul@temp& (0+255),w,b
 42286  002F8E  277B               	addwf	___flmul@grs& (0+255),f,b
 42287  002F90  0E00               	movlw	0
 42288  002F92  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42289  002F94  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42290  002F96  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42291                           
 42292                           ; BSR set to: 0
 42293  002F98  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42294  002F9A  2781               	addwf	___flmul@prod& (0+255),f,b
 42295  002F9C  0E00               	movlw	0
 42296  002F9E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42297  002FA0  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42298  002FA2  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42299                           
 42300                           ; BSR set to: 0
 42301  002FA4  C07D  F07E         	movff	___flmul@grs+2,___flmul@grs+3
 42302  002FA8  C07C  F07D         	movff	___flmul@grs+1,___flmul@grs+2
 42303  002FAC  C07B  F07C         	movff	___flmul@grs,___flmul@grs+1
 42304  002FB0  6B7B               	clrf	___flmul@grs& (0+255),b
 42305                           
 42306                           ; BSR set to: 0
 42307  002FB2  5172               	movf	___flmul@a& (0+255),w,b
 42308  002FB4  036F               	mulwf	(___flmul@b+1)& (0+255),b
 42309  002FB6  CFF3 F085          	movff	prodl,___flmul@temp
 42310  002FBA  CFF4 F086          	movff	prodh,___flmul@temp+1
 42311                           
 42312                           ; BSR set to: 0
 42313  002FBE  5185               	movf	___flmul@temp& (0+255),w,b
 42314  002FC0  277B               	addwf	___flmul@grs& (0+255),f,b
 42315  002FC2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42316  002FC4  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42317  002FC6  0E00               	movlw	0
 42318  002FC8  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42319  002FCA  0E00               	movlw	0
 42320  002FCC  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42321                           
 42322                           ; BSR set to: 0
 42323  002FCE  5173               	movf	(___flmul@a+1)& (0+255),w,b
 42324  002FD0  036E               	mulwf	___flmul@b& (0+255),b
 42325  002FD2  CFF3 F085          	movff	prodl,___flmul@temp
 42326  002FD6  CFF4 F086          	movff	prodh,___flmul@temp+1
 42327                           
 42328                           ; BSR set to: 0
 42329  002FDA  5185               	movf	___flmul@temp& (0+255),w,b
 42330  002FDC  277B               	addwf	___flmul@grs& (0+255),f,b
 42331  002FDE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42332  002FE0  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42333  002FE2  0E00               	movlw	0
 42334  002FE4  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42335  002FE6  0E00               	movlw	0
 42336  002FE8  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42337                           
 42338                           ; BSR set to: 0
 42339  002FEA  C07D  F07E         	movff	___flmul@grs+2,___flmul@grs+3
 42340  002FEE  C07C  F07D         	movff	___flmul@grs+1,___flmul@grs+2
 42341  002FF2  C07B  F07C         	movff	___flmul@grs,___flmul@grs+1
 42342  002FF6  6B7B               	clrf	___flmul@grs& (0+255),b
 42343  002FF8  5172               	movf	___flmul@a& (0+255),w,b
 42344  002FFA  036E               	mulwf	___flmul@b& (0+255),b
 42345  002FFC  CFF3 F085          	movff	prodl,___flmul@temp
 42346  003000  CFF4 F086          	movff	prodh,___flmul@temp+1
 42347                           
 42348                           ; BSR set to: 0
 42349  003004  5185               	movf	___flmul@temp& (0+255),w,b
 42350  003006  277B               	addwf	___flmul@grs& (0+255),f,b
 42351  003008  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42352  00300A  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42353  00300C  0E00               	movlw	0
 42354  00300E  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42355  003010  0E00               	movlw	0
 42356  003012  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42357                           
 42358                           ; BSR set to: 0
 42359  003014  5174               	movf	(___flmul@a+2)& (0+255),w,b
 42360  003016  036F               	mulwf	(___flmul@b+1)& (0+255),b
 42361  003018  CFF3 F085          	movff	prodl,___flmul@temp
 42362  00301C  CFF4 F086          	movff	prodh,___flmul@temp+1
 42363  003020  5185               	movf	___flmul@temp& (0+255),w,b
 42364  003022  2781               	addwf	___flmul@prod& (0+255),f,b
 42365  003024  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42366  003026  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42367  003028  0E00               	movlw	0
 42368  00302A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42369  00302C  0E00               	movlw	0
 42370  00302E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42371                           
 42372                           ; BSR set to: 0
 42373  003030  5173               	movf	(___flmul@a+1)& (0+255),w,b
 42374  003032  0370               	mulwf	(___flmul@b+2)& (0+255),b
 42375  003034  CFF3 F085          	movff	prodl,___flmul@temp
 42376  003038  CFF4 F086          	movff	prodh,___flmul@temp+1
 42377                           
 42378                           ; BSR set to: 0
 42379  00303C  5185               	movf	___flmul@temp& (0+255),w,b
 42380  00303E  2781               	addwf	___flmul@prod& (0+255),f,b
 42381  003040  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42382  003042  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42383  003044  0E00               	movlw	0
 42384  003046  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42385  003048  0E00               	movlw	0
 42386  00304A  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42387  00304C  5174               	movf	(___flmul@a+2)& (0+255),w,b
 42388  00304E  0370               	mulwf	(___flmul@b+2)& (0+255),b
 42389  003050  CFF3 F085          	movff	prodl,___flmul@temp
 42390  003054  CFF4 F086          	movff	prodh,___flmul@temp+1
 42391                           
 42392                           ; BSR set to: 0
 42393  003058  5185               	movf	___flmul@temp& (0+255),w,b
 42394  00305A  6F76               	movwf	??___flmul& (0+255),b
 42395  00305C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42396  00305E  6F77               	movwf	(??___flmul+1)& (0+255),b
 42397  003060  6B78               	clrf	(??___flmul+2)& (0+255),b
 42398  003062  6B79               	clrf	(??___flmul+3)& (0+255),b
 42399  003064  C078  F079         	movff	??___flmul+2,??___flmul+3
 42400  003068  C077  F078         	movff	??___flmul+1,??___flmul+2
 42401  00306C  C076  F077         	movff	??___flmul,??___flmul+1
 42402  003070  6B76               	clrf	??___flmul& (0+255),b
 42403  003072  5176               	movf	??___flmul& (0+255),w,b
 42404  003074  2781               	addwf	___flmul@prod& (0+255),f,b
 42405  003076  5177               	movf	(??___flmul+1)& (0+255),w,b
 42406  003078  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42407  00307A  5178               	movf	(??___flmul+2)& (0+255),w,b
 42408  00307C  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42409  00307E  5179               	movf	(??___flmul+3)& (0+255),w,b
 42410  003080  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42411                           
 42412                           ; BSR set to: 0
 42413  003082  C07B  F076         	movff	___flmul@grs,??___flmul
 42414  003086  C07C  F077         	movff	___flmul@grs+1,??___flmul+1
 42415  00308A  C07D  F078         	movff	___flmul@grs+2,??___flmul+2
 42416  00308E  C07E  F079         	movff	___flmul@grs+3,??___flmul+3
 42417  003092  0E19               	movlw	25
 42418  003094  D005               	goto	u26430
 42419  003096                     u26435:
 42420  003096  90D8               	bcf	status,0,c
 42421  003098  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 42422  00309A  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 42423  00309C  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 42424  00309E  3376               	rrcf	??___flmul& (0+255),f,b
 42425  0030A0                     u26430:
 42426  0030A0  2EE8               	decfsz	wreg,f,c
 42427  0030A2  D7F9               	goto	u26435
 42428  0030A4  5176               	movf	??___flmul& (0+255),w,b
 42429  0030A6  2781               	addwf	___flmul@prod& (0+255),f,b
 42430  0030A8  5177               	movf	(??___flmul+1)& (0+255),w,b
 42431  0030AA  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42432  0030AC  5178               	movf	(??___flmul+2)& (0+255),w,b
 42433  0030AE  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42434  0030B0  5179               	movf	(??___flmul+3)& (0+255),w,b
 42435  0030B2  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42436                           
 42437                           ; BSR set to: 0
 42438  0030B4  C07D  F07E         	movff	___flmul@grs+2,___flmul@grs+3
 42439  0030B8  C07C  F07D         	movff	___flmul@grs+1,___flmul@grs+2
 42440  0030BC  C07B  F07C         	movff	___flmul@grs,___flmul@grs+1
 42441  0030C0  6B7B               	clrf	___flmul@grs& (0+255),b
 42442                           
 42443                           ; BSR set to: 0
 42444  0030C2  517F               	movf	___flmul@aexp& (0+255),w,b
 42445  0030C4  C080  F076         	movff	___flmul@bexp,??___flmul
 42446  0030C8  6B77               	clrf	(??___flmul+1)& (0+255),b
 42447  0030CA  2776               	addwf	??___flmul& (0+255),f,b
 42448  0030CC  0E00               	movlw	0
 42449  0030CE  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 42450  0030D0  0E82               	movlw	130
 42451  0030D2  2576               	addwf	??___flmul& (0+255),w,b
 42452  0030D4  6F85               	movwf	___flmul@temp& (0+255),b
 42453  0030D6  0EFF               	movlw	255
 42454  0030D8  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 42455  0030DA  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 42456  0030DC  D00F               	goto	l5966
 42457  0030DE                     
 42458                           ; BSR set to: 0
 42459                           
 42460                           ; BSR set to: 0
 42461  0030DE  90D8               	bcf	status,0,c
 42462  0030E0  3781               	rlcf	___flmul@prod& (0+255),f,b
 42463  0030E2  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 42464  0030E4  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 42465  0030E6  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 42466                           
 42467                           ; BSR set to: 0
 42468  0030E8  BF7E               	btfsc	(___flmul@grs+3)& (0+255),7,b
 42469                           
 42470                           ; BSR set to: 0
 42471  0030EA  8181               	bsf	___flmul@prod& (0+255),0,b
 42472                           
 42473                           ; BSR set to: 0
 42474  0030EC  90D8               	bcf	status,0,c
 42475  0030EE  377B               	rlcf	___flmul@grs& (0+255),f,b
 42476  0030F0  377C               	rlcf	(___flmul@grs+1)& (0+255),f,b
 42477  0030F2  377D               	rlcf	(___flmul@grs+2)& (0+255),f,b
 42478  0030F4  377E               	rlcf	(___flmul@grs+3)& (0+255),f,b
 42479  0030F6  0785               	decf	___flmul@temp& (0+255),f,b
 42480  0030F8  A0D8               	btfss	status,0,c
 42481  0030FA  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 42482  0030FC                     l5966:
 42483                           
 42484                           ; BSR set to: 0
 42485                           
 42486                           ; BSR set to: 0
 42487  0030FC  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 42488  0030FE  D7EF               	goto	l5967
 42489                           
 42490                           ; BSR set to: 0
 42491                           
 42492                           ; BSR set to: 0
 42493  003100  0E00               	movlw	0
 42494  003102  6F7F               	movwf	___flmul@aexp& (0+255),b
 42495                           
 42496                           ; BSR set to: 0
 42497  003104  AF7E               	btfss	(___flmul@grs+3)& (0+255),7,b
 42498  003106  D016               	goto	l5973
 42499                           
 42500                           ; BSR set to: 0
 42501  003108  0EFF               	movlw	255
 42502  00310A  157B               	andwf	___flmul@grs& (0+255),w,b
 42503  00310C  6F76               	movwf	??___flmul& (0+255),b
 42504  00310E  0EFF               	movlw	255
 42505  003110  157C               	andwf	(___flmul@grs+1)& (0+255),w,b
 42506  003112  6F77               	movwf	(??___flmul+1)& (0+255),b
 42507  003114  0EFF               	movlw	255
 42508  003116  157D               	andwf	(___flmul@grs+2)& (0+255),w,b
 42509  003118  6F78               	movwf	(??___flmul+2)& (0+255),b
 42510  00311A  0E7F               	movlw	127
 42511  00311C  157E               	andwf	(___flmul@grs+3)& (0+255),w,b
 42512  00311E  6F79               	movwf	(??___flmul+3)& (0+255),b
 42513  003120  5176               	movf	??___flmul& (0+255),w,b
 42514  003122  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 42515  003124  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 42516  003126  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 42517  003128  A4D8               	btfss	status,2,c
 42518  00312A  D002               	goto	u26480
 42519                           
 42520                           ; BSR set to: 0
 42521                           
 42522                           ; BSR set to: 0
 42523  00312C  A181               	btfss	___flmul@prod& (0+255),0,b
 42524  00312E  D002               	goto	l5973
 42525  003130                     u26480:
 42526                           
 42527                           ; BSR set to: 0
 42528  003130  0E01               	movlw	1
 42529  003132  6F7F               	movwf	___flmul@aexp& (0+255),b
 42530  003134                     l5973:
 42531                           
 42532                           ; BSR set to: 0
 42533                           
 42534                           ; BSR set to: 0
 42535                           
 42536                           ; BSR set to: 0
 42537  003134  517F               	movf	___flmul@aexp& (0+255),w,b
 42538  003136  B4D8               	btfsc	status,2,c
 42539  003138  D01F               	goto	l5975
 42540                           
 42541                           ; BSR set to: 0
 42542  00313A  0E01               	movlw	1
 42543  00313C  2781               	addwf	___flmul@prod& (0+255),f,b
 42544  00313E  0E00               	movlw	0
 42545  003140  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42546  003142  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42547  003144  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42548                           
 42549                           ; BSR set to: 0
 42550  003146  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 42551  003148  D017               	goto	l5975
 42552                           
 42553                           ; BSR set to: 0
 42554  00314A  C081  F076         	movff	___flmul@prod,??___flmul
 42555  00314E  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 42556  003152  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 42557  003156  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 42558  00315A  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 42559  00315C  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 42560  00315E  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 42561  003160  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 42562  003162  3376               	rrcf	??___flmul& (0+255),f,b
 42563  003164  C076  F081         	movff	??___flmul,___flmul@prod
 42564  003168  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 42565  00316C  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 42566  003170  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 42567                           
 42568                           ; BSR set to: 0
 42569  003174  4B85               	infsnz	___flmul@temp& (0+255),f,b
 42570  003176  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 42571  003178                     l5975:
 42572                           
 42573                           ; BSR set to: 0
 42574                           
 42575                           ; BSR set to: 0
 42576                           
 42577                           ; BSR set to: 0
 42578  003178  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 42579  00317A  D00D               	goto	l5976
 42580  00317C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42581  00317E  E103               	bnz	u26510
 42582  003180  2985               	incf	___flmul@temp& (0+255),w,b
 42583  003182  A0D8               	btfss	status,0,c
 42584  003184  D008               	goto	l5976
 42585  003186                     u26510:
 42586                           
 42587                           ; BSR set to: 0
 42588  003186  0E00               	movlw	0
 42589  003188  6F81               	movwf	___flmul@prod& (0+255),b
 42590  00318A  0E00               	movlw	0
 42591  00318C  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 42592  00318E  0E80               	movlw	128
 42593  003190  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 42594  003192  0E7F               	movlw	127
 42595  003194  D020               	goto	L21
 42596  003196                     l5976:
 42597                           
 42598                           ; BSR set to: 0
 42599                           
 42600                           ; BSR set to: 0
 42601  003196  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 42602  003198  D005               	goto	u26520
 42603  00319A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42604  00319C  E10E               	bnz	l5978
 42605  00319E  0585               	decf	___flmul@temp& (0+255),w,b
 42606  0031A0  B0D8               	btfsc	status,0,c
 42607  0031A2  D00B               	goto	l5978
 42608  0031A4                     u26520:
 42609                           
 42610                           ; BSR set to: 0
 42611  0031A4  0E00               	movlw	0
 42612  0031A6  6F81               	movwf	___flmul@prod& (0+255),b
 42613  0031A8  0E00               	movlw	0
 42614  0031AA  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 42615  0031AC  0E00               	movlw	0
 42616  0031AE  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 42617  0031B0  0E00               	movlw	0
 42618  0031B2  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 42619  0031B4  0E00               	movlw	0
 42620  0031B6  6F7A               	movwf	___flmul@sign& (0+255),b
 42621  0031B8  D00F               	goto	l5979
 42622  0031BA                     l5978:
 42623                           
 42624                           ; BSR set to: 0
 42625  0031BA  C085  F080         	movff	___flmul@temp,___flmul@bexp
 42626                           
 42627                           ; BSR set to: 0
 42628  0031BE  0EFF               	movlw	255
 42629  0031C0  1781               	andwf	___flmul@prod& (0+255),f,b
 42630  0031C2  0EFF               	movlw	255
 42631  0031C4  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 42632  0031C6  0E7F               	movlw	127
 42633  0031C8  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 42634  0031CA  0E00               	movlw	0
 42635  0031CC  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 42636                           
 42637                           ; BSR set to: 0
 42638  0031CE  B180               	btfsc	___flmul@bexp& (0+255),0,b
 42639                           
 42640                           ; BSR set to: 0
 42641  0031D0  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 42642                           
 42643                           ; BSR set to: 0
 42644                           
 42645                           ; BSR set to: 0
 42646  0031D2  90D8               	bcf	status,0,c
 42647  0031D4  3180               	rrcf	___flmul@bexp& (0+255),w,b
 42648  0031D6                     L21:
 42649  0031D6  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 42650  0031D8                     l5979:
 42651                           
 42652                           ; BSR set to: 0
 42653                           
 42654                           ; BSR set to: 0
 42655                           
 42656                           ; BSR set to: 0
 42657  0031D8  517A               	movf	___flmul@sign& (0+255),w,b
 42658  0031DA  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 42659                           
 42660                           ; BSR set to: 0
 42661  0031DC  C081  F06E         	movff	___flmul@prod,?___flmul
 42662  0031E0  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 42663  0031E4  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 42664  0031E8  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 42665  0031EC  0012               	return	
 42666  0031EE                     __end_of___flmul:
 42667                           	opt stack 0
 42668                           tblptru	equ	0xFF8
 42669                           tblptrh	equ	0xFF7
 42670                           tblptrl	equ	0xFF6
 42671                           tablat	equ	0xFF5
 42672                           prodh	equ	0xFF4
 42673                           prodl	equ	0xFF3
 42674                           intcon	equ	0xFF2
 42675                           intcon2	equ	0xFF1
 42676                           postinc0	equ	0xFEE
 42677                           wreg	equ	0xFE8
 42678                           indf1	equ	0xFE7
 42679                           postinc1	equ	0xFE6
 42680                           postdec1	equ	0xFE5
 42681                           fsr1h	equ	0xFE2
 42682                           fsr1l	equ	0xFE1
 42683                           indf2	equ	0xFDF
 42684                           postinc2	equ	0xFDE
 42685                           postdec2	equ	0xFDD
 42686                           plusw2	equ	0xFDB
 42687                           fsr2h	equ	0xFDA
 42688                           fsr2l	equ	0xFD9
 42689                           status	equ	0xFD8
 42690                           
 42691 ;; *************** function ___fladd *****************
 42692 ;; Defined at:
 42693 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 42694 ;; Parameters:    Size  Location     Type
 42695 ;;  b               4   68[BANK0 ] unsigned char 
 42696 ;;  a               4   72[BANK0 ] unsigned char 
 42697 ;; Auto vars:     Size  Location     Type
 42698 ;;  grs             1   87[BANK0 ] unsigned char 
 42699 ;;  bexp            1   86[BANK0 ] unsigned char 
 42700 ;;  aexp            1   85[BANK0 ] unsigned char 
 42701 ;;  signs           1   84[BANK0 ] unsigned char 
 42702 ;; Return value:  Size  Location     Type
 42703 ;;                  4   68[BANK0 ] unsigned char 
 42704 ;; Registers used:
 42705 ;;		wreg, status,2, status,0
 42706 ;; Tracked objects:
 42707 ;;		On entry : 0/0
 42708 ;;		On exit  : 0/0
 42709 ;;		Unchanged: 0/0
 42710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42711 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42712 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42713 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42714 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42715 ;;Total ram usage:       20 bytes
 42716 ;; Hardware stack levels used:    1
 42717 ;; Hardware stack levels required when called:    5
 42718 ;; This function calls:
 42719 ;;		Nothing
 42720 ;; This function is called by:
 42721 ;;		_readPotentiometers
 42722 ;;		_calculate_pulse_length
 42723 ;; This function uses a non-reentrant model
 42724 ;;
 42725                           
 42726                           	psect	text133
 42727  0031EE                     __ptext133:
 42728                           	opt stack 0
 42729  0031EE                     ___fladd:
 42730                           	opt stack 22
 42731                           
 42732                           ; BSR set to: 0
 42733                           ;incstack = 0
 42734  0031EE  0100               	movlb	0	; () banked
 42735  0031F0  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 42736  0031F2  0B80               	andlw	128
 42737  0031F4  6FB4               	movwf	___fladd@signs& (0+255),b
 42738  0031F6  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 42739  0031F8  25A7               	addwf	(___fladd@b+3)& (0+255),w,b
 42740  0031FA  6FB6               	movwf	___fladd@bexp& (0+255),b
 42741                           
 42742                           ; BSR set to: 0
 42743  0031FC  BFA6               	btfsc	(___fladd@b+2)& (0+255),7,b
 42744                           
 42745                           ; BSR set to: 0
 42746  0031FE  81B6               	bsf	___fladd@bexp& (0+255),0,b
 42747                           
 42748                           ; BSR set to: 0
 42749                           
 42750                           ; BSR set to: 0
 42751  003200  51B6               	movf	___fladd@bexp& (0+255),w,b
 42752  003202  B4D8               	btfsc	status,2,c
 42753  003204  D00D               	goto	l5864
 42754                           
 42755                           ; BSR set to: 0
 42756  003206  29B6               	incf	___fladd@bexp& (0+255),w,b
 42757  003208  A4D8               	btfss	status,2,c
 42758  00320A  D008               	goto	l5865
 42759                           
 42760                           ; BSR set to: 0
 42761  00320C  0E00               	movlw	0
 42762  00320E  6FA4               	movwf	___fladd@b& (0+255),b
 42763  003210  0E00               	movlw	0
 42764  003212  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 42765  003214  0E00               	movlw	0
 42766  003216  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 42767  003218  0E00               	movlw	0
 42768  00321A  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 42769  00321C                     l5865:
 42770                           
 42771                           ; BSR set to: 0
 42772                           
 42773                           ; BSR set to: 0
 42774  00321C  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 42775  00321E  D006               	goto	L22
 42776  003220                     l5864:
 42777                           
 42778                           ; BSR set to: 0
 42779                           
 42780                           ; BSR set to: 0
 42781  003220  0E00               	movlw	0
 42782  003222  6FA4               	movwf	___fladd@b& (0+255),b
 42783  003224  0E00               	movlw	0
 42784  003226  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 42785  003228  0E00               	movlw	0
 42786  00322A  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 42787  00322C                     L22:
 42788  00322C  0E00               	movlw	0
 42789  00322E  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 42790                           
 42791                           ; BSR set to: 0
 42792                           
 42793                           ; BSR set to: 0
 42794  003230  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 42795  003232  0B80               	andlw	128
 42796  003234  6FB5               	movwf	___fladd@aexp& (0+255),b
 42797                           
 42798                           ; BSR set to: 0
 42799  003236  51B4               	movf	___fladd@signs& (0+255),w,b
 42800  003238  19B5               	xorwf	___fladd@aexp& (0+255),w,b
 42801  00323A  A4D8               	btfss	status,2,c
 42802                           
 42803                           ; BSR set to: 0
 42804  00323C  8DB4               	bsf	___fladd@signs& (0+255),6,b
 42805                           
 42806                           ; BSR set to: 0
 42807                           
 42808                           ; BSR set to: 0
 42809  00323E  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 42810  003240  25AB               	addwf	(___fladd@a+3)& (0+255),w,b
 42811  003242  6FB5               	movwf	___fladd@aexp& (0+255),b
 42812                           
 42813                           ; BSR set to: 0
 42814  003244  BFAA               	btfsc	(___fladd@a+2)& (0+255),7,b
 42815                           
 42816                           ; BSR set to: 0
 42817  003246  81B5               	bsf	___fladd@aexp& (0+255),0,b
 42818                           
 42819                           ; BSR set to: 0
 42820                           
 42821                           ; BSR set to: 0
 42822  003248  51B5               	movf	___fladd@aexp& (0+255),w,b
 42823  00324A  B4D8               	btfsc	status,2,c
 42824  00324C  D00D               	goto	l5869
 42825                           
 42826                           ; BSR set to: 0
 42827  00324E  29B5               	incf	___fladd@aexp& (0+255),w,b
 42828  003250  A4D8               	btfss	status,2,c
 42829  003252  D008               	goto	l5870
 42830                           
 42831                           ; BSR set to: 0
 42832  003254  0E00               	movlw	0
 42833  003256  6FA8               	movwf	___fladd@a& (0+255),b
 42834  003258  0E00               	movlw	0
 42835  00325A  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 42836  00325C  0E00               	movlw	0
 42837  00325E  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 42838  003260  0E00               	movlw	0
 42839  003262  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 42840  003264                     l5870:
 42841                           
 42842                           ; BSR set to: 0
 42843                           
 42844                           ; BSR set to: 0
 42845  003264  8FAA               	bsf	(___fladd@a+2)& (0+255),7,b
 42846  003266  D006               	goto	L23
 42847  003268                     l5869:
 42848                           
 42849                           ; BSR set to: 0
 42850                           
 42851                           ; BSR set to: 0
 42852  003268  0E00               	movlw	0
 42853  00326A  6FA8               	movwf	___fladd@a& (0+255),b
 42854  00326C  0E00               	movlw	0
 42855  00326E  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 42856  003270  0E00               	movlw	0
 42857  003272  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 42858  003274                     L23:
 42859  003274  0E00               	movlw	0
 42860  003276  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 42861                           
 42862                           ; BSR set to: 0
 42863                           
 42864                           ; BSR set to: 0
 42865  003278  51B6               	movf	___fladd@bexp& (0+255),w,b
 42866  00327A  5DB5               	subwf	___fladd@aexp& (0+255),w,b
 42867  00327C  B0D8               	btfsc	status,0,c
 42868  00327E  D022               	goto	l5872
 42869                           
 42870                           ; BSR set to: 0
 42871  003280  ADB4               	btfss	___fladd@signs& (0+255),6,b
 42872  003282  D002               	goto	l5873
 42873                           
 42874                           ; BSR set to: 0
 42875  003284  0E80               	movlw	128
 42876  003286  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 42877  003288                     l5873:
 42878                           
 42879                           ; BSR set to: 0
 42880                           
 42881                           ; BSR set to: 0
 42882  003288  C0B6  F0B7         	movff	___fladd@bexp,___fladd@grs
 42883                           
 42884                           ; BSR set to: 0
 42885  00328C  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 42886                           
 42887                           ; BSR set to: 0
 42888  003290  C0B7  F0B5         	movff	___fladd@grs,___fladd@aexp
 42889                           
 42890                           ; BSR set to: 0
 42891  003294  C0A4  F0B7         	movff	___fladd@b,___fladd@grs
 42892                           
 42893                           ; BSR set to: 0
 42894  003298  C0A8  F0A4         	movff	___fladd@a,___fladd@b
 42895                           
 42896                           ; BSR set to: 0
 42897  00329C  C0B7  F0A8         	movff	___fladd@grs,___fladd@a
 42898                           
 42899                           ; BSR set to: 0
 42900  0032A0  C0A5  F0B7         	movff	___fladd@b+1,___fladd@grs
 42901                           
 42902                           ; BSR set to: 0
 42903  0032A4  C0A9  F0A5         	movff	___fladd@a+1,___fladd@b+1
 42904                           
 42905                           ; BSR set to: 0
 42906  0032A8  C0B7  F0A9         	movff	___fladd@grs,___fladd@a+1
 42907                           
 42908                           ; BSR set to: 0
 42909  0032AC  C0A6  F0B7         	movff	___fladd@b+2,___fladd@grs
 42910                           
 42911                           ; BSR set to: 0
 42912  0032B0  C0AA  F0A6         	movff	___fladd@a+2,___fladd@b+2
 42913                           
 42914                           ; BSR set to: 0
 42915  0032B4  C0B7  F0AA         	movff	___fladd@grs,___fladd@a+2
 42916                           
 42917                           ; BSR set to: 0
 42918  0032B8  C0A7  F0B7         	movff	___fladd@b+3,___fladd@grs
 42919                           
 42920                           ; BSR set to: 0
 42921  0032BC  C0AB  F0A7         	movff	___fladd@a+3,___fladd@b+3
 42922                           
 42923                           ; BSR set to: 0
 42924  0032C0  C0B7  F0AB         	movff	___fladd@grs,___fladd@a+3
 42925  0032C4                     l5872:
 42926                           
 42927                           ; BSR set to: 0
 42928                           
 42929                           ; BSR set to: 0
 42930  0032C4  0E00               	movlw	0
 42931  0032C6  6FB7               	movwf	___fladd@grs& (0+255),b
 42932                           
 42933                           ; BSR set to: 0
 42934  0032C8  51B6               	movf	___fladd@bexp& (0+255),w,b
 42935  0032CA  6FAC               	movwf	??___fladd& (0+255),b
 42936  0032CC  6BAD               	clrf	(??___fladd+1)& (0+255),b
 42937  0032CE  1FAC               	comf	??___fladd& (0+255),f,b
 42938  0032D0  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 42939  0032D2  4BAC               	infsnz	??___fladd& (0+255),f,b
 42940  0032D4  2BAD               	incf	(??___fladd+1)& (0+255),f,b
 42941  0032D6  51B5               	movf	___fladd@aexp& (0+255),w,b
 42942  0032D8  6FAE               	movwf	(??___fladd+2)& (0+255),b
 42943  0032DA  6BAF               	clrf	(??___fladd+3)& (0+255),b
 42944  0032DC  51AC               	movf	??___fladd& (0+255),w,b
 42945  0032DE  27AE               	addwf	(??___fladd+2)& (0+255),f,b
 42946  0032E0  51AD               	movf	(??___fladd+1)& (0+255),w,b
 42947  0032E2  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 42948  0032E4  BFAF               	btfsc	(??___fladd+3)& (0+255),7,b
 42949  0032E6  D02C               	goto	l5876
 42950  0032E8  51AF               	movf	(??___fladd+3)& (0+255),w,b
 42951  0032EA  E104               	bnz	u25820
 42952  0032EC  0E1A               	movlw	26
 42953  0032EE  5DAE               	subwf	(??___fladd+2)& (0+255),w,b
 42954  0032F0  A0D8               	btfss	status,0,c
 42955  0032F2  D026               	goto	l5876
 42956  0032F4                     u25820:
 42957                           
 42958                           ; BSR set to: 0
 42959  0032F4  51A4               	movf	___fladd@b& (0+255),w,b
 42960  0032F6  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 42961  0032F8  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 42962  0032FA  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 42963  0032FC  B4D8               	btfsc	status,2,c
 42964  0032FE  D002               	goto	u25830
 42965  003300  0E01               	movlw	1
 42966  003302  D001               	goto	u25840
 42967  003304                     u25830:
 42968  003304  0E00               	movlw	0
 42969  003306                     u25840:
 42970  003306  6FB7               	movwf	___fladd@grs& (0+255),b
 42971                           
 42972                           ; BSR set to: 0
 42973  003308  0E00               	movlw	0
 42974  00330A  6FA4               	movwf	___fladd@b& (0+255),b
 42975  00330C  0E00               	movlw	0
 42976  00330E  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 42977  003310  0E00               	movlw	0
 42978  003312  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 42979  003314  0E00               	movlw	0
 42980  003316  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 42981                           
 42982                           ; BSR set to: 0
 42983  003318  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 42984  00331C  D015               	goto	u25870
 42985  00331E                     l5877:
 42986                           
 42987                           ; BSR set to: 0
 42988  00331E  A1B7               	btfss	___fladd@grs& (0+255),0,b
 42989  003320  D005               	goto	l5878
 42990                           
 42991                           ; BSR set to: 0
 42992  003322  90D8               	bcf	status,0,c
 42993  003324  31B7               	rrcf	___fladd@grs& (0+255),w,b
 42994  003326  0901               	iorlw	1
 42995  003328  6FB7               	movwf	___fladd@grs& (0+255),b
 42996  00332A  D002               	goto	l5879
 42997  00332C                     l5878:
 42998                           
 42999                           ; BSR set to: 0
 43000                           
 43001                           ; BSR set to: 0
 43002  00332C  90D8               	bcf	status,0,c
 43003  00332E  33B7               	rrcf	___fladd@grs& (0+255),f,b
 43004  003330                     l5879:
 43005                           
 43006                           ; BSR set to: 0
 43007                           
 43008                           ; BSR set to: 0
 43009  003330  B1A4               	btfsc	___fladd@b& (0+255),0,b
 43010                           
 43011                           ; BSR set to: 0
 43012  003332  8FB7               	bsf	___fladd@grs& (0+255),7,b
 43013                           
 43014                           ; BSR set to: 0
 43015                           
 43016                           ; BSR set to: 0
 43017  003334  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 43018  003336  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 43019  003338  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 43020  00333A  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 43021  00333C  33A4               	rrcf	___fladd@b& (0+255),f,b
 43022                           
 43023                           ; BSR set to: 0
 43024  00333E  2BB6               	incf	___fladd@bexp& (0+255),f,b
 43025  003340                     l5876:
 43026                           
 43027                           ; BSR set to: 0
 43028  003340  51B5               	movf	___fladd@aexp& (0+255),w,b
 43029  003342  5DB6               	subwf	___fladd@bexp& (0+255),w,b
 43030  003344  A0D8               	btfss	status,0,c
 43031  003346  D7EB               	goto	l5877
 43032  003348                     u25870:
 43033                           
 43034                           ; BSR set to: 0
 43035                           
 43036                           ; BSR set to: 0
 43037  003348  BDB4               	btfsc	___fladd@signs& (0+255),6,b
 43038  00334A  D029               	goto	l5882
 43039                           
 43040                           ; BSR set to: 0
 43041  00334C  51B6               	movf	___fladd@bexp& (0+255),w,b
 43042  00334E  A4D8               	btfss	status,2,c
 43043  003350  D009               	goto	l5883
 43044                           
 43045                           ; BSR set to: 0
 43046  003352  0E00               	movlw	0
 43047  003354  6FA4               	movwf	?___fladd& (0+255),b
 43048  003356  0E00               	movlw	0
 43049  003358  6FA5               	movwf	(?___fladd+1)& (0+255),b
 43050  00335A  0E00               	movlw	0
 43051  00335C  6FA6               	movwf	(?___fladd+2)& (0+255),b
 43052  00335E  0E00               	movlw	0
 43053  003360  6FA7               	movwf	(?___fladd+3)& (0+255),b
 43054                           
 43055                           ; BSR set to: 0
 43056  003362  0012               	return	
 43057  003364                     l5883:
 43058                           
 43059                           ; BSR set to: 0
 43060                           
 43061                           ; BSR set to: 0
 43062  003364  51A8               	movf	___fladd@a& (0+255),w,b
 43063  003366  27A4               	addwf	___fladd@b& (0+255),f,b
 43064  003368  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 43065  00336A  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 43066  00336C  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 43067  00336E  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 43068  003370  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 43069  003372  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 43070                           
 43071                           ; BSR set to: 0
 43072  003374  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 43073  003376  D083               	goto	u26000
 43074                           
 43075                           ; BSR set to: 0
 43076  003378  A1B7               	btfss	___fladd@grs& (0+255),0,b
 43077  00337A  D006               	goto	l5886
 43078                           
 43079                           ; BSR set to: 0
 43080  00337C  90D8               	bcf	status,0,c
 43081  00337E  33B7               	rrcf	___fladd@grs& (0+255),f,b
 43082  003380  51B7               	movf	___fladd@grs& (0+255),w,b
 43083  003382  0901               	iorlw	1
 43084  003384  6FB7               	movwf	___fladd@grs& (0+255),b
 43085  003386  D002               	goto	l5887
 43086  003388                     l5886:
 43087                           
 43088                           ; BSR set to: 0
 43089                           
 43090                           ; BSR set to: 0
 43091  003388  90D8               	bcf	status,0,c
 43092  00338A  33B7               	rrcf	___fladd@grs& (0+255),f,b
 43093  00338C                     l5887:
 43094                           
 43095                           ; BSR set to: 0
 43096                           
 43097                           ; BSR set to: 0
 43098  00338C  B1A4               	btfsc	___fladd@b& (0+255),0,b
 43099                           
 43100                           ; BSR set to: 0
 43101  00338E  8FB7               	bsf	___fladd@grs& (0+255),7,b
 43102                           
 43103                           ; BSR set to: 0
 43104                           
 43105                           ; BSR set to: 0
 43106  003390  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 43107  003392  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 43108  003394  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 43109  003396  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 43110  003398  33A4               	rrcf	___fladd@b& (0+255),f,b
 43111                           
 43112                           ; BSR set to: 0
 43113  00339A  2BB6               	incf	___fladd@bexp& (0+255),f,b
 43114                           
 43115                           ; BSR set to: 0
 43116  00339C  D070               	goto	u26000
 43117  00339E                     l5882:
 43118                           
 43119                           ; BSR set to: 0
 43120                           
 43121                           ; BSR set to: 0
 43122  00339E  51A8               	movf	___fladd@a& (0+255),w,b
 43123  0033A0  5DA4               	subwf	___fladd@b& (0+255),w,b
 43124  0033A2  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 43125  0033A4  59A5               	subwfb	(___fladd@b+1)& (0+255),w,b
 43126  0033A6  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 43127  0033A8  59A6               	subwfb	(___fladd@b+2)& (0+255),w,b
 43128  0033AA  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 43129  0033AC  0A80               	xorlw	128
 43130  0033AE  6FAC               	movwf	??___fladd& (0+255),b
 43131  0033B0  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 43132  0033B2  0A80               	xorlw	128
 43133  0033B4  59AC               	subwfb	??___fladd& (0+255),w,b
 43134  0033B6  B0D8               	btfsc	status,0,c
 43135  0033B8  D036               	goto	l5890
 43136                           
 43137                           ; BSR set to: 0
 43138  0033BA  C0A4  F0AC         	movff	___fladd@b,??___fladd
 43139  0033BE  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 43140  0033C2  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 43141  0033C6  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 43142  0033CA  1FAC               	comf	??___fladd& (0+255),f,b
 43143  0033CC  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 43144  0033CE  1FAE               	comf	(??___fladd+2)& (0+255),f,b
 43145  0033D0  1FAF               	comf	(??___fladd+3)& (0+255),f,b
 43146  0033D2  2BAC               	incf	??___fladd& (0+255),f,b
 43147  0033D4  0E00               	movlw	0
 43148  0033D6  23AD               	addwfc	(??___fladd+1)& (0+255),f,b
 43149  0033D8  23AE               	addwfc	(??___fladd+2)& (0+255),f,b
 43150  0033DA  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 43151  0033DC  51A8               	movf	___fladd@a& (0+255),w,b
 43152  0033DE  25AC               	addwf	??___fladd& (0+255),w,b
 43153  0033E0  6FB0               	movwf	(??___fladd+4)& (0+255),b
 43154  0033E2  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 43155  0033E4  21AD               	addwfc	(??___fladd+1)& (0+255),w,b
 43156  0033E6  6FB1               	movwf	(??___fladd+5)& (0+255),b
 43157  0033E8  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 43158  0033EA  21AE               	addwfc	(??___fladd+2)& (0+255),w,b
 43159  0033EC  6FB2               	movwf	(??___fladd+6)& (0+255),b
 43160  0033EE  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 43161  0033F0  21AF               	addwfc	(??___fladd+3)& (0+255),w,b
 43162  0033F2  6FB3               	movwf	(??___fladd+7)& (0+255),b
 43163  0033F4  0EFF               	movlw	255
 43164  0033F6  25B0               	addwf	(??___fladd+4)& (0+255),w,b
 43165  0033F8  6FA4               	movwf	___fladd@b& (0+255),b
 43166  0033FA  0EFF               	movlw	255
 43167  0033FC  21B1               	addwfc	(??___fladd+5)& (0+255),w,b
 43168  0033FE  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 43169  003400  0EFF               	movlw	255
 43170  003402  21B2               	addwfc	(??___fladd+6)& (0+255),w,b
 43171  003404  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 43172  003406  0EFF               	movlw	255
 43173  003408  21B3               	addwfc	(??___fladd+7)& (0+255),w,b
 43174  00340A  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 43175  00340C  0E80               	movlw	128
 43176  00340E  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 43177                           
 43178                           ; BSR set to: 0
 43179  003410  6DB7               	negf	___fladd@grs& (0+255),b
 43180                           
 43181                           ; BSR set to: 0
 43182  003412  51B7               	movf	___fladd@grs& (0+255),w,b
 43183  003414  A4D8               	btfss	status,2,c
 43184  003416  D00F               	goto	l5892
 43185                           
 43186                           ; BSR set to: 0
 43187  003418  0E01               	movlw	1
 43188  00341A  27A4               	addwf	___fladd@b& (0+255),f,b
 43189  00341C  0E00               	movlw	0
 43190  00341E  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 43191  003420  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 43192  003422  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 43193                           
 43194                           ; BSR set to: 0
 43195  003424  D008               	goto	l5892
 43196  003426                     l5890:
 43197                           
 43198                           ; BSR set to: 0
 43199                           
 43200                           ; BSR set to: 0
 43201  003426  51A8               	movf	___fladd@a& (0+255),w,b
 43202  003428  5FA4               	subwf	___fladd@b& (0+255),f,b
 43203  00342A  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 43204  00342C  5BA5               	subwfb	(___fladd@b+1)& (0+255),f,b
 43205  00342E  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 43206  003430  5BA6               	subwfb	(___fladd@b+2)& (0+255),f,b
 43207  003432  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 43208  003434  5BA7               	subwfb	(___fladd@b+3)& (0+255),f,b
 43209  003436                     l5892:
 43210                           
 43211                           ; BSR set to: 0
 43212  003436  51A4               	movf	___fladd@b& (0+255),w,b
 43213  003438  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 43214  00343A  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 43215  00343C  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 43216  00343E  A4D8               	btfss	status,2,c
 43217  003440  D01C               	goto	l5899
 43218                           
 43219                           ; BSR set to: 0
 43220  003442  51B7               	movf	___fladd@grs& (0+255),w,b
 43221  003444  A4D8               	btfss	status,2,c
 43222  003446  D019               	goto	l5899
 43223                           
 43224                           ; BSR set to: 0
 43225  003448  0E00               	movlw	0
 43226  00344A  6FA4               	movwf	?___fladd& (0+255),b
 43227  00344C  0E00               	movlw	0
 43228  00344E  6FA5               	movwf	(?___fladd+1)& (0+255),b
 43229  003450  0E00               	movlw	0
 43230  003452  6FA6               	movwf	(?___fladd+2)& (0+255),b
 43231  003454  0E00               	movlw	0
 43232  003456  6FA7               	movwf	(?___fladd+3)& (0+255),b
 43233                           
 43234                           ; BSR set to: 0
 43235  003458  0012               	return	
 43236  00345A                     
 43237                           ; BSR set to: 0
 43238                           
 43239                           ; BSR set to: 0
 43240  00345A  90D8               	bcf	status,0,c
 43241  00345C  37A4               	rlcf	___fladd@b& (0+255),f,b
 43242  00345E  37A5               	rlcf	(___fladd@b+1)& (0+255),f,b
 43243  003460  37A6               	rlcf	(___fladd@b+2)& (0+255),f,b
 43244  003462  37A7               	rlcf	(___fladd@b+3)& (0+255),f,b
 43245                           
 43246                           ; BSR set to: 0
 43247  003464  BFB7               	btfsc	___fladd@grs& (0+255),7,b
 43248                           
 43249                           ; BSR set to: 0
 43250  003466  81A4               	bsf	___fladd@b& (0+255),0,b
 43251                           
 43252                           ; BSR set to: 0
 43253                           
 43254                           ; BSR set to: 0
 43255  003468  A1B7               	btfss	___fladd@grs& (0+255),0,b
 43256  00346A  D002               	goto	l5897
 43257                           
 43258                           ; BSR set to: 0
 43259  00346C  80D8               	bsf	status,0,c
 43260  00346E  D001               	goto	L24
 43261  003470                     l5897:
 43262                           
 43263                           ; BSR set to: 0
 43264                           
 43265                           ; BSR set to: 0
 43266  003470  90D8               	bcf	status,0,c
 43267  003472                     L24:
 43268  003472  37B7               	rlcf	___fladd@grs& (0+255),f,b
 43269                           
 43270                           ; BSR set to: 0
 43271                           
 43272                           ; BSR set to: 0
 43273  003474  51B6               	movf	___fladd@bexp& (0+255),w,b
 43274  003476  A4D8               	btfss	status,2,c
 43275                           
 43276                           ; BSR set to: 0
 43277  003478  07B6               	decf	___fladd@bexp& (0+255),f,b
 43278  00347A                     l5899:
 43279                           
 43280                           ; BSR set to: 0
 43281                           
 43282                           ; BSR set to: 0
 43283                           
 43284                           ; BSR set to: 0
 43285  00347A  AFA6               	btfss	(___fladd@b+2)& (0+255),7,b
 43286  00347C  D7EE               	goto	l5895
 43287  00347E                     u26000:
 43288                           
 43289                           ; BSR set to: 0
 43290                           
 43291                           ; BSR set to: 0
 43292                           
 43293                           ; BSR set to: 0
 43294  00347E  0E00               	movlw	0
 43295  003480  6FB5               	movwf	___fladd@aexp& (0+255),b
 43296                           
 43297                           ; BSR set to: 0
 43298  003482  AFB7               	btfss	___fladd@grs& (0+255),7,b
 43299  003484  D00A               	goto	l5904
 43300                           
 43301                           ; BSR set to: 0
 43302  003486  C0B7  F0AC         	movff	___fladd@grs,??___fladd
 43303  00348A  0E7F               	movlw	127
 43304  00348C  17AC               	andwf	??___fladd& (0+255),f,b
 43305  00348E  A4D8               	btfss	status,2,c
 43306  003490  D002               	goto	u26030
 43307                           
 43308                           ; BSR set to: 0
 43309                           
 43310                           ; BSR set to: 0
 43311  003492  A1A4               	btfss	___fladd@b& (0+255),0,b
 43312  003494  D002               	goto	l5904
 43313  003496                     u26030:
 43314                           
 43315                           ; BSR set to: 0
 43316  003496  0E01               	movlw	1
 43317  003498  6FB5               	movwf	___fladd@aexp& (0+255),b
 43318  00349A                     l5904:
 43319                           
 43320                           ; BSR set to: 0
 43321                           
 43322                           ; BSR set to: 0
 43323                           
 43324                           ; BSR set to: 0
 43325  00349A  51B5               	movf	___fladd@aexp& (0+255),w,b
 43326  00349C  B4D8               	btfsc	status,2,c
 43327  00349E  D020               	goto	l5907
 43328                           
 43329                           ; BSR set to: 0
 43330  0034A0  0E01               	movlw	1
 43331  0034A2  27A4               	addwf	___fladd@b& (0+255),f,b
 43332  0034A4  0E00               	movlw	0
 43333  0034A6  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 43334  0034A8  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 43335  0034AA  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 43336                           
 43337                           ; BSR set to: 0
 43338  0034AC  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 43339  0034AE  D018               	goto	l5907
 43340                           
 43341                           ; BSR set to: 0
 43342  0034B0  C0A4  F0AC         	movff	___fladd@b,??___fladd
 43343  0034B4  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 43344  0034B8  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 43345  0034BC  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 43346  0034C0  35AF               	rlcf	(??___fladd+3)& (0+255),w,b
 43347  0034C2  33AF               	rrcf	(??___fladd+3)& (0+255),f,b
 43348  0034C4  33AE               	rrcf	(??___fladd+2)& (0+255),f,b
 43349  0034C6  33AD               	rrcf	(??___fladd+1)& (0+255),f,b
 43350  0034C8  33AC               	rrcf	??___fladd& (0+255),f,b
 43351  0034CA  C0AC  F0A4         	movff	??___fladd,___fladd@b
 43352  0034CE  C0AD  F0A5         	movff	??___fladd+1,___fladd@b+1
 43353  0034D2  C0AE  F0A6         	movff	??___fladd+2,___fladd@b+2
 43354  0034D6  C0AF  F0A7         	movff	??___fladd+3,___fladd@b+3
 43355  0034DA  29B6               	incf	___fladd@bexp& (0+255),w,b
 43356  0034DC  A4D8               	btfss	status,2,c
 43357                           
 43358                           ; BSR set to: 0
 43359  0034DE  2BB6               	incf	___fladd@bexp& (0+255),f,b
 43360  0034E0                     l5907:
 43361                           
 43362                           ; BSR set to: 0
 43363                           
 43364                           ; BSR set to: 0
 43365                           
 43366                           ; BSR set to: 0
 43367                           
 43368                           ; BSR set to: 0
 43369  0034E0  29B6               	incf	___fladd@bexp& (0+255),w,b
 43370  0034E2  B4D8               	btfsc	status,2,c
 43371  0034E4  D003               	goto	u26080
 43372                           
 43373                           ; BSR set to: 0
 43374  0034E6  51B6               	movf	___fladd@bexp& (0+255),w,b
 43375  0034E8  A4D8               	btfss	status,2,c
 43376  0034EA  D00D               	goto	l5911
 43377  0034EC                     u26080:
 43378                           
 43379                           ; BSR set to: 0
 43380                           
 43381                           ; BSR set to: 0
 43382  0034EC  0E00               	movlw	0
 43383  0034EE  6FA4               	movwf	___fladd@b& (0+255),b
 43384  0034F0  0E00               	movlw	0
 43385  0034F2  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 43386  0034F4  0E00               	movlw	0
 43387  0034F6  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 43388  0034F8  0E00               	movlw	0
 43389  0034FA  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 43390  0034FC  51B6               	movf	___fladd@bexp& (0+255),w,b
 43391  0034FE  A4D8               	btfss	status,2,c
 43392  003500  D002               	goto	l5911
 43393                           
 43394                           ; BSR set to: 0
 43395  003502  0E00               	movlw	0
 43396  003504  6FB4               	movwf	___fladd@signs& (0+255),b
 43397  003506                     l5911:
 43398                           
 43399                           ; BSR set to: 0
 43400                           
 43401                           ; BSR set to: 0
 43402                           
 43403                           ; BSR set to: 0
 43404  003506  A1B6               	btfss	___fladd@bexp& (0+255),0,b
 43405  003508  D002               	goto	l5912
 43406                           
 43407                           ; BSR set to: 0
 43408  00350A  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 43409  00350C  D001               	goto	l5913
 43410  00350E                     l5912:
 43411                           
 43412                           ; BSR set to: 0
 43413                           
 43414                           ; BSR set to: 0
 43415  00350E  9FA6               	bcf	(___fladd@b+2)& (0+255),7,b
 43416  003510                     l5913:
 43417                           
 43418                           ; BSR set to: 0
 43419                           
 43420                           ; BSR set to: 0
 43421  003510  90D8               	bcf	status,0,c
 43422  003512  31B6               	rrcf	___fladd@bexp& (0+255),w,b
 43423  003514  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 43424                           
 43425                           ; BSR set to: 0
 43426  003516  BFB4               	btfsc	___fladd@signs& (0+255),7,b
 43427                           
 43428                           ; BSR set to: 0
 43429  003518  8FA7               	bsf	(___fladd@b+3)& (0+255),7,b
 43430                           
 43431                           ; BSR set to: 0
 43432                           
 43433                           ; BSR set to: 0
 43434  00351A  C0A4  F0A4         	movff	___fladd@b,?___fladd
 43435  00351E  C0A5  F0A5         	movff	___fladd@b+1,?___fladd+1
 43436  003522  C0A6  F0A6         	movff	___fladd@b+2,?___fladd+2
 43437  003526  C0A7  F0A7         	movff	___fladd@b+3,?___fladd+3
 43438  00352A  0012               	return	
 43439  00352C                     __end_of___fladd:
 43440                           	opt stack 0
 43441                           tblptru	equ	0xFF8
 43442                           tblptrh	equ	0xFF7
 43443                           tblptrl	equ	0xFF6
 43444                           tablat	equ	0xFF5
 43445                           prodh	equ	0xFF4
 43446                           prodl	equ	0xFF3
 43447                           intcon	equ	0xFF2
 43448                           intcon2	equ	0xFF1
 43449                           postinc0	equ	0xFEE
 43450                           wreg	equ	0xFE8
 43451                           indf1	equ	0xFE7
 43452                           postinc1	equ	0xFE6
 43453                           postdec1	equ	0xFE5
 43454                           fsr1h	equ	0xFE2
 43455                           fsr1l	equ	0xFE1
 43456                           indf2	equ	0xFDF
 43457                           postinc2	equ	0xFDE
 43458                           postdec2	equ	0xFDD
 43459                           plusw2	equ	0xFDB
 43460                           fsr2h	equ	0xFDA
 43461                           fsr2l	equ	0xFD9
 43462                           status	equ	0xFD8
 43463                           
 43464 ;; *************** function _ADC_Read *****************
 43465 ;; Defined at:
 43466 ;;		line 35 in file "adc.c"
 43467 ;; Parameters:    Size  Location     Type
 43468 ;;  adc_channel     1    wreg     unsigned char 
 43469 ;; Auto vars:     Size  Location     Type
 43470 ;;  adc_channel     1    4[BANK0 ] unsigned char 
 43471 ;; Return value:  Size  Location     Type
 43472 ;;                  2    0[BANK0 ] unsigned int 
 43473 ;; Registers used:
 43474 ;;		wreg, status,2, status,0
 43475 ;; Tracked objects:
 43476 ;;		On entry : 0/0
 43477 ;;		On exit  : 0/0
 43478 ;;		Unchanged: 0/0
 43479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43480 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43482 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43483 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43484 ;;Total ram usage:        5 bytes
 43485 ;; Hardware stack levels used:    1
 43486 ;; Hardware stack levels required when called:    5
 43487 ;; This function calls:
 43488 ;;		Nothing
 43489 ;; This function is called by:
 43490 ;;		_readPotentiometers
 43491 ;; This function uses a non-reentrant model
 43492 ;;
 43493                           
 43494                           	psect	text134
 43495  00922C                     __ptext134:
 43496                           	opt stack 0
 43497  00922C                     _ADC_Read:
 43498                           	opt stack 23
 43499                           
 43500                           ; BSR set to: 0
 43501                           ;incstack = 0
 43502                           ;ADC_Read@adc_channel stored from wreg
 43503  00922C  0100               	movlb	0	; () banked
 43504  00922E  6F64               	movwf	ADC_Read@adc_channel& (0+255),b
 43505                           
 43506                           ;adc.c: 52: adc_channel &= 0x0F;
 43507  009230  0E0F               	movlw	15
 43508  009232  0100               	movlb	0	; () banked
 43509  009234  1764               	andwf	ADC_Read@adc_channel& (0+255),f,b
 43510                           
 43511                           ;adc.c: 53: ADCON0 &= 0x00000001;
 43512  009236  0E01               	movlw	1
 43513  009238  16C2               	andwf	4034,f,c	;volatile
 43514                           
 43515                           ;adc.c: 54: PORTA = (adc_channel << 1);
 43516  00923A  5164               	movf	ADC_Read@adc_channel& (0+255),w,b
 43517  00923C  2564               	addwf	ADC_Read@adc_channel& (0+255),w,b
 43518  00923E  6E80               	movwf	3968,c	;volatile
 43519                           
 43520                           ; BSR set to: 0
 43521                           ;adc.c: 56: _delay((unsigned long)((20)*(20000000/4000000.0)));
 43522  009240  0E21               	movlw	33
 43523  009242                     u45007:
 43524  009242  2EE8               	decfsz	wreg,f,c
 43525  009244  D7FE               	bra	u45007
 43526  009246  F000               	nop	
 43527                           
 43528                           ;adc.c: 57: GO_nDONE = 1;
 43529  009248  82C2               	bsf	4034,1,c	;volatile
 43530  00924A  B2C2               	btfsc	4034,1,c	;volatile
 43531  00924C  D7FE               	goto	l88
 43532                           
 43533                           ;adc.c: 59: return ((ADRESH<<8)+ADRESL);
 43534  00924E  50C4               	movf	4036,w,c	;volatile
 43535  009250  0100               	movlb	0	; () banked
 43536  009252  6F63               	movwf	(??_ADC_Read+1)& (0+255),b
 43537  009254  6B62               	clrf	??_ADC_Read& (0+255),b
 43538  009256  50C3               	movf	4035,w,c	;volatile
 43539  009258  2562               	addwf	??_ADC_Read& (0+255),w,b
 43540  00925A  6F60               	movwf	?_ADC_Read& (0+255),b
 43541  00925C  0E00               	movlw	0
 43542  00925E  2163               	addwfc	(??_ADC_Read+1)& (0+255),w,b
 43543  009260  6F61               	movwf	(?_ADC_Read+1)& (0+255),b
 43544  009262  0012               	return	
 43545  009264                     __end_of_ADC_Read:
 43546                           	opt stack 0
 43547                           tblptru	equ	0xFF8
 43548                           tblptrh	equ	0xFF7
 43549                           tblptrl	equ	0xFF6
 43550                           tablat	equ	0xFF5
 43551                           prodh	equ	0xFF4
 43552                           prodl	equ	0xFF3
 43553                           intcon	equ	0xFF2
 43554                           intcon2	equ	0xFF1
 43555                           postinc0	equ	0xFEE
 43556                           wreg	equ	0xFE8
 43557                           indf1	equ	0xFE7
 43558                           postinc1	equ	0xFE6
 43559                           postdec1	equ	0xFE5
 43560                           fsr1h	equ	0xFE2
 43561                           fsr1l	equ	0xFE1
 43562                           indf2	equ	0xFDF
 43563                           postinc2	equ	0xFDE
 43564                           postdec2	equ	0xFDD
 43565                           plusw2	equ	0xFDB
 43566                           fsr2h	equ	0xFDA
 43567                           fsr2l	equ	0xFD9
 43568                           status	equ	0xFD8
 43569                           
 43570 ;; *************** function _Lcd_Start *****************
 43571 ;; Defined at:
 43572 ;;		line 80 in file "lcd.c"
 43573 ;; Parameters:    Size  Location     Type
 43574 ;;		None
 43575 ;; Auto vars:     Size  Location     Type
 43576 ;;  i               2    4[BANK0 ] int 
 43577 ;; Return value:  Size  Location     Type
 43578 ;;                  1    wreg      void 
 43579 ;; Registers used:
 43580 ;;		wreg, status,2, status,0, cstack
 43581 ;; Tracked objects:
 43582 ;;		On entry : 0/0
 43583 ;;		On exit  : 0/0
 43584 ;;		Unchanged: 0/0
 43585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43587 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43588 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43589 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43590 ;;Total ram usage:        3 bytes
 43591 ;; Hardware stack levels used:    1
 43592 ;; Hardware stack levels required when called:    7
 43593 ;; This function calls:
 43594 ;;		_Lcd_Cmd
 43595 ;;		_Lcd_SetBit
 43596 ;; This function is called by:
 43597 ;;		_main
 43598 ;; This function uses a non-reentrant model
 43599 ;;
 43600                           
 43601                           	psect	text135
 43602  007852                     __ptext135:
 43603                           	opt stack 0
 43604  007852                     _Lcd_Start:
 43605                           	opt stack 23
 43606                           
 43607                           ;lcd.c: 82: Lcd_SetBit(0x00);
 43608                           
 43609                           ; BSR set to: 0
 43610                           ;incstack = 0
 43611  007852  0E00               	movlw	0
 43612  007854  ECB0  F049         	call	_Lcd_SetBit
 43613                           
 43614                           ;lcd.c: 83: for(int i=1065244; i<=0; i--) __nop();
 43615  007858  0E41               	movlw	65
 43616  00785A  0100               	movlb	0	; () banked
 43617  00785C  6F65               	movwf	(Lcd_Start@i+1)& (0+255),b
 43618  00785E  0E1C               	movlw	28
 43619  007860  6F64               	movwf	Lcd_Start@i& (0+255),b
 43620  007862                     l23175:
 43621                           
 43622                           ; BSR set to: 0
 43623  007862  BF65               	btfsc	(Lcd_Start@i+1)& (0+255),7,b
 43624  007864  D005               	goto	l42
 43625  007866  5165               	movf	(Lcd_Start@i+1)& (0+255),w,b
 43626  007868  E109               	bnz	l23183
 43627  00786A  0564               	decf	Lcd_Start@i& (0+255),w,b
 43628  00786C  B0D8               	btfsc	status,0,c
 43629  00786E  D006               	goto	u37900
 43630  007870                     l42:
 43631                           
 43632                           ; BSR set to: 0
 43633  007870  F000               	nop	
 43634  007872  0100               	movlb	0	; () banked
 43635  007874  0764               	decf	Lcd_Start@i& (0+255),f,b
 43636  007876  A0D8               	btfss	status,0,c
 43637  007878  0765               	decf	(Lcd_Start@i+1)& (0+255),f,b
 43638  00787A  D7F3               	goto	l23175
 43639  00787C                     u37900:
 43640  00787C                     l23183:
 43641                           
 43642                           ; BSR set to: 0
 43643                           ;lcd.c: 84: Lcd_Cmd(0x03);
 43644  00787C  0E03               	movlw	3
 43645  00787E  EC85  F04A         	call	_Lcd_Cmd
 43646                           
 43647                           ;lcd.c: 85: _delay((unsigned long)((5)*(20000000/4000.0)));
 43648  007882  0E21               	movlw	33
 43649  007884  0100               	movlb	0	; () banked
 43650  007886  6F63               	movwf	??_Lcd_Start& (0+255),b
 43651  007888  0E76               	movlw	118
 43652  00788A                     u45017:
 43653  00788A  2EE8               	decfsz	wreg,f,c
 43654  00788C  D7FE               	bra	u45017
 43655  00788E  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 43656  007890  D7FC               	bra	u45017
 43657  007892  F000               	nop	
 43658                           
 43659                           ;lcd.c: 86: Lcd_Cmd(0x03);
 43660  007894  0E03               	movlw	3
 43661  007896  EC85  F04A         	call	_Lcd_Cmd
 43662                           
 43663                           ;lcd.c: 87: _delay((unsigned long)((11)*(20000000/4000.0)));
 43664  00789A  0E48               	movlw	72
 43665  00789C  0100               	movlb	0	; () banked
 43666  00789E  6F63               	movwf	??_Lcd_Start& (0+255),b
 43667  0078A0  0E6C               	movlw	108
 43668  0078A2                     u45027:
 43669  0078A2  2EE8               	decfsz	wreg,f,c
 43670  0078A4  D7FE               	bra	u45027
 43671  0078A6  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 43672  0078A8  D7FC               	bra	u45027
 43673  0078AA  F000               	nop	
 43674                           
 43675                           ;lcd.c: 88: Lcd_Cmd(0x03);
 43676  0078AC  0E03               	movlw	3
 43677  0078AE  EC85  F04A         	call	_Lcd_Cmd
 43678                           
 43679                           ;lcd.c: 89: Lcd_Cmd(0x02);
 43680  0078B2  0E02               	movlw	2
 43681  0078B4  EC85  F04A         	call	_Lcd_Cmd
 43682                           
 43683                           ;lcd.c: 90: Lcd_Cmd(0x02);
 43684  0078B8  0E02               	movlw	2
 43685  0078BA  EC85  F04A         	call	_Lcd_Cmd
 43686                           
 43687                           ;lcd.c: 91: Lcd_Cmd(0x08);
 43688  0078BE  0E08               	movlw	8
 43689  0078C0  EC85  F04A         	call	_Lcd_Cmd
 43690                           
 43691                           ;lcd.c: 92: Lcd_Cmd(0x00);
 43692  0078C4  0E00               	movlw	0
 43693  0078C6  EC85  F04A         	call	_Lcd_Cmd
 43694                           
 43695                           ;lcd.c: 93: Lcd_Cmd(0x0C);
 43696  0078CA  0E0C               	movlw	12
 43697  0078CC  EC85  F04A         	call	_Lcd_Cmd
 43698                           
 43699                           ;lcd.c: 94: Lcd_Cmd(0x00);
 43700  0078D0  0E00               	movlw	0
 43701  0078D2  EC85  F04A         	call	_Lcd_Cmd
 43702                           
 43703                           ;lcd.c: 95: Lcd_Cmd(0x06);
 43704  0078D6  0E06               	movlw	6
 43705  0078D8  EC85  F04A         	call	_Lcd_Cmd
 43706  0078DC  0012               	return		;funcret
 43707  0078DE                     __end_of_Lcd_Start:
 43708                           	opt stack 0
 43709                           tblptru	equ	0xFF8
 43710                           tblptrh	equ	0xFF7
 43711                           tblptrl	equ	0xFF6
 43712                           tablat	equ	0xFF5
 43713                           prodh	equ	0xFF4
 43714                           prodl	equ	0xFF3
 43715                           intcon	equ	0xFF2
 43716                           intcon2	equ	0xFF1
 43717                           postinc0	equ	0xFEE
 43718                           wreg	equ	0xFE8
 43719                           indf1	equ	0xFE7
 43720                           postinc1	equ	0xFE6
 43721                           postdec1	equ	0xFE5
 43722                           fsr1h	equ	0xFE2
 43723                           fsr1l	equ	0xFE1
 43724                           indf2	equ	0xFDF
 43725                           postinc2	equ	0xFDE
 43726                           postdec2	equ	0xFDD
 43727                           plusw2	equ	0xFDB
 43728                           fsr2h	equ	0xFDA
 43729                           fsr2l	equ	0xFD9
 43730                           status	equ	0xFD8
 43731                           
 43732 ;; *************** function _Lcd_Cmd *****************
 43733 ;; Defined at:
 43734 ;;		line 44 in file "lcd.c"
 43735 ;; Parameters:    Size  Location     Type
 43736 ;;  a               1    wreg     unsigned char 
 43737 ;; Auto vars:     Size  Location     Type
 43738 ;;  a               1    2[BANK0 ] unsigned char 
 43739 ;; Return value:  Size  Location     Type
 43740 ;;                  1    wreg      void 
 43741 ;; Registers used:
 43742 ;;		wreg, status,2, cstack
 43743 ;; Tracked objects:
 43744 ;;		On entry : 0/0
 43745 ;;		On exit  : 0/0
 43746 ;;		Unchanged: 0/0
 43747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43749 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43750 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43751 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43752 ;;Total ram usage:        2 bytes
 43753 ;; Hardware stack levels used:    1
 43754 ;; Hardware stack levels required when called:    6
 43755 ;; This function calls:
 43756 ;;		_Lcd_SetBit
 43757 ;; This function is called by:
 43758 ;;		_Lcd_Clear
 43759 ;;		_Lcd_Set_Cursor
 43760 ;;		_Lcd_Start
 43761 ;; This function uses a non-reentrant model
 43762 ;;
 43763                           
 43764                           	psect	text136
 43765  00950A                     __ptext136:
 43766                           	opt stack 0
 43767  00950A                     _Lcd_Cmd:
 43768                           	opt stack 20
 43769                           
 43770                           ;incstack = 0
 43771                           ;Lcd_Cmd@a stored from wreg
 43772  00950A  0100               	movlb	0	; () banked
 43773  00950C  6F62               	movwf	Lcd_Cmd@a& (0+255),b
 43774                           
 43775                           ;lcd.c: 46: RE0 = 0;
 43776  00950E  9084               	bcf	3972,0,c	;volatile
 43777                           
 43778                           ;lcd.c: 47: Lcd_SetBit(a);
 43779  009510  0100               	movlb	0	; () banked
 43780  009512  5162               	movf	Lcd_Cmd@a& (0+255),w,b
 43781  009514  ECB0  F049         	call	_Lcd_SetBit
 43782                           
 43783                           ;lcd.c: 48: RE1 = 1;
 43784  009518  8284               	bsf	3972,1,c	;volatile
 43785                           
 43786                           ;lcd.c: 49: _delay((unsigned long)((4)*(20000000/4000.0)));
 43787  00951A  0E1A               	movlw	26
 43788  00951C  0100               	movlb	0	; () banked
 43789  00951E  6F61               	movwf	??_Lcd_Cmd& (0+255),b
 43790  009520  0EF8               	movlw	248
 43791  009522                     u45037:
 43792  009522  2EE8               	decfsz	wreg,f,c
 43793  009524  D7FE               	bra	u45037
 43794  009526  2F61               	decfsz	??_Lcd_Cmd& (0+255),f,b
 43795  009528  D7FC               	bra	u45037
 43796  00952A  F000               	nop	
 43797                           
 43798                           ;lcd.c: 50: RE1 = 0;
 43799  00952C  9284               	bcf	3972,1,c	;volatile
 43800  00952E  0012               	return		;funcret
 43801  009530                     __end_of_Lcd_Cmd:
 43802                           	opt stack 0
 43803                           tblptru	equ	0xFF8
 43804                           tblptrh	equ	0xFF7
 43805                           tblptrl	equ	0xFF6
 43806                           tablat	equ	0xFF5
 43807                           prodh	equ	0xFF4
 43808                           prodl	equ	0xFF3
 43809                           intcon	equ	0xFF2
 43810                           intcon2	equ	0xFF1
 43811                           postinc0	equ	0xFEE
 43812                           wreg	equ	0xFE8
 43813                           indf1	equ	0xFE7
 43814                           postinc1	equ	0xFE6
 43815                           postdec1	equ	0xFE5
 43816                           fsr1h	equ	0xFE2
 43817                           fsr1l	equ	0xFE1
 43818                           indf2	equ	0xFDF
 43819                           postinc2	equ	0xFDE
 43820                           postdec2	equ	0xFDD
 43821                           plusw2	equ	0xFDB
 43822                           fsr2h	equ	0xFDA
 43823                           fsr2l	equ	0xFD9
 43824                           status	equ	0xFD8
 43825                           
 43826 ;; *************** function _Lcd_SetBit *****************
 43827 ;; Defined at:
 43828 ;;		line 21 in file "lcd.c"
 43829 ;; Parameters:    Size  Location     Type
 43830 ;;  data_bit        1    wreg     unsigned char 
 43831 ;; Auto vars:     Size  Location     Type
 43832 ;;  data_bit        1    0[BANK0 ] unsigned char 
 43833 ;; Return value:  Size  Location     Type
 43834 ;;                  1    wreg      void 
 43835 ;; Registers used:
 43836 ;;		wreg
 43837 ;; Tracked objects:
 43838 ;;		On entry : 0/0
 43839 ;;		On exit  : 0/0
 43840 ;;		Unchanged: 0/0
 43841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43845 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43846 ;;Total ram usage:        1 bytes
 43847 ;; Hardware stack levels used:    1
 43848 ;; Hardware stack levels required when called:    5
 43849 ;; This function calls:
 43850 ;;		Nothing
 43851 ;; This function is called by:
 43852 ;;		_Lcd_Cmd
 43853 ;;		_Lcd_Start
 43854 ;;		_Lcd_Print_Char
 43855 ;; This function uses a non-reentrant model
 43856 ;;
 43857                           
 43858                           	psect	text137
 43859  009360                     __ptext137:
 43860                           	opt stack 0
 43861  009360                     _Lcd_SetBit:
 43862                           	opt stack 20
 43863                           
 43864                           ;incstack = 0
 43865                           ;Lcd_SetBit@data_bit stored from wreg
 43866  009360  0100               	movlb	0	; () banked
 43867  009362  6F60               	movwf	Lcd_SetBit@data_bit& (0+255),b
 43868                           
 43869                           ;lcd.c: 23: if(data_bit& 1)
 43870  009364  0100               	movlb	0	; () banked
 43871  009366  A160               	btfss	Lcd_SetBit@data_bit& (0+255),0,b
 43872  009368  D002               	goto	l19
 43873                           
 43874                           ; BSR set to: 0
 43875                           ;lcd.c: 24: RD4 = 1;
 43876  00936A  8883               	bsf	3971,4,c	;volatile
 43877  00936C  D001               	goto	l20
 43878  00936E                     l19:
 43879                           
 43880                           ; BSR set to: 0
 43881                           ;lcd.c: 25: else
 43882                           ;lcd.c: 26: RD4 = 0;
 43883  00936E  9883               	bcf	3971,4,c	;volatile
 43884  009370                     l20:
 43885                           
 43886                           ; BSR set to: 0
 43887                           ;lcd.c: 28: if(data_bit& 2)
 43888                           
 43889                           ; BSR set to: 0
 43890  009370  A360               	btfss	Lcd_SetBit@data_bit& (0+255),1,b
 43891  009372  D002               	goto	l21
 43892                           
 43893                           ; BSR set to: 0
 43894                           ;lcd.c: 29: RD5 = 1;
 43895  009374  8A83               	bsf	3971,5,c	;volatile
 43896  009376  D001               	goto	l22
 43897  009378                     l21:
 43898                           
 43899                           ; BSR set to: 0
 43900                           ;lcd.c: 30: else
 43901                           ;lcd.c: 31: RD5 = 0;
 43902  009378  9A83               	bcf	3971,5,c	;volatile
 43903  00937A                     l22:
 43904                           
 43905                           ; BSR set to: 0
 43906                           ;lcd.c: 33: if(data_bit& 4)
 43907                           
 43908                           ; BSR set to: 0
 43909  00937A  A560               	btfss	Lcd_SetBit@data_bit& (0+255),2,b
 43910  00937C  D002               	goto	l23
 43911                           
 43912                           ; BSR set to: 0
 43913                           ;lcd.c: 34: RD6 = 1;
 43914  00937E  8C83               	bsf	3971,6,c	;volatile
 43915  009380  D001               	goto	l24
 43916  009382                     l23:
 43917                           
 43918                           ; BSR set to: 0
 43919                           ;lcd.c: 35: else
 43920                           ;lcd.c: 36: RD6 = 0;
 43921  009382  9C83               	bcf	3971,6,c	;volatile
 43922  009384                     l24:
 43923                           
 43924                           ; BSR set to: 0
 43925                           ;lcd.c: 38: if(data_bit& 8)
 43926                           
 43927                           ; BSR set to: 0
 43928  009384  A760               	btfss	Lcd_SetBit@data_bit& (0+255),3,b
 43929  009386  D002               	goto	l25
 43930                           
 43931                           ; BSR set to: 0
 43932                           ;lcd.c: 39: RD7 = 1;
 43933  009388  8E83               	bsf	3971,7,c	;volatile
 43934  00938A  0012               	return	
 43935  00938C                     l25:
 43936                           
 43937                           ; BSR set to: 0
 43938                           ;lcd.c: 40: else
 43939                           ;lcd.c: 41: RD7 = 0;
 43940  00938C  9E83               	bcf	3971,7,c	;volatile
 43941  00938E  0012               	return	
 43942  009390                     __end_of_Lcd_SetBit:
 43943                           	opt stack 0
 43944                           tblptru	equ	0xFF8
 43945                           tblptrh	equ	0xFF7
 43946                           tblptrl	equ	0xFF6
 43947                           tablat	equ	0xFF5
 43948                           prodh	equ	0xFF4
 43949                           prodl	equ	0xFF3
 43950                           intcon	equ	0xFF2
 43951                           intcon2	equ	0xFF1
 43952                           postinc0	equ	0xFEE
 43953                           wreg	equ	0xFE8
 43954                           indf1	equ	0xFE7
 43955                           postinc1	equ	0xFE6
 43956                           postdec1	equ	0xFE5
 43957                           fsr1h	equ	0xFE2
 43958                           fsr1l	equ	0xFE1
 43959                           indf2	equ	0xFDF
 43960                           postinc2	equ	0xFDE
 43961                           postdec2	equ	0xFDD
 43962                           plusw2	equ	0xFDB
 43963                           fsr2h	equ	0xFDA
 43964                           fsr2l	equ	0xFD9
 43965                           status	equ	0xFD8
 43966                           
 43967 ;; *************** function _ADC_Initialize *****************
 43968 ;; Defined at:
 43969 ;;		line 22 in file "adc.c"
 43970 ;; Parameters:    Size  Location     Type
 43971 ;;		None
 43972 ;; Auto vars:     Size  Location     Type
 43973 ;;		None
 43974 ;; Return value:  Size  Location     Type
 43975 ;;                  1    wreg      void 
 43976 ;; Registers used:
 43977 ;;		wreg, status,2
 43978 ;; Tracked objects:
 43979 ;;		On entry : 0/0
 43980 ;;		On exit  : 0/0
 43981 ;;		Unchanged: 0/0
 43982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43987 ;;Total ram usage:        0 bytes
 43988 ;; Hardware stack levels used:    1
 43989 ;; Hardware stack levels required when called:    5
 43990 ;; This function calls:
 43991 ;;		Nothing
 43992 ;; This function is called by:
 43993 ;;		_main
 43994 ;; This function uses a non-reentrant model
 43995 ;;
 43996                           
 43997                           	psect	text138
 43998  009604                     __ptext138:
 43999                           	opt stack 0
 44000  009604                     _ADC_Initialize:
 44001                           	opt stack 25
 44002                           
 44003                           ;adc.c: 24: CMCON = 0x7;
 44004                           
 44005                           ; BSR set to: 0
 44006                           ;incstack = 0
 44007  009604  0E07               	movlw	7
 44008  009606  6EB4               	movwf	4020,c	;volatile
 44009                           
 44010                           ;adc.c: 25: ADCON0 = 0b00000000;
 44011  009608  0E00               	movlw	0
 44012  00960A  6EC2               	movwf	4034,c	;volatile
 44013                           
 44014                           ;adc.c: 26: ADCON1 = 0b00001110;
 44015  00960C  0E0E               	movlw	14
 44016  00960E  6EC1               	movwf	4033,c	;volatile
 44017                           
 44018                           ;adc.c: 27: ADCON2 = 0b10000010;
 44019  009610  0E82               	movlw	130
 44020  009612  6EC0               	movwf	4032,c	;volatile
 44021                           
 44022                           ;adc.c: 31: ADON = 1;
 44023  009614  80C2               	bsf	4034,0,c	;volatile
 44024  009616  0012               	return		;funcret
 44025  009618                     __end_of_ADC_Initialize:
 44026                           	opt stack 0
 44027                           tblptru	equ	0xFF8
 44028                           tblptrh	equ	0xFF7
 44029                           tblptrl	equ	0xFF6
 44030                           tablat	equ	0xFF5
 44031                           prodh	equ	0xFF4
 44032                           prodl	equ	0xFF3
 44033                           intcon	equ	0xFF2
 44034                           intcon2	equ	0xFF1
 44035                           postinc0	equ	0xFEE
 44036                           wreg	equ	0xFE8
 44037                           indf1	equ	0xFE7
 44038                           postinc1	equ	0xFE6
 44039                           postdec1	equ	0xFE5
 44040                           fsr1h	equ	0xFE2
 44041                           fsr1l	equ	0xFE1
 44042                           indf2	equ	0xFDF
 44043                           postinc2	equ	0xFDE
 44044                           postdec2	equ	0xFDD
 44045                           plusw2	equ	0xFDB
 44046                           fsr2h	equ	0xFDA
 44047                           fsr2l	equ	0xFD9
 44048                           status	equ	0xFD8
 44049                           
 44050 ;; *************** function _ISR *****************
 44051 ;; Defined at:
 44052 ;;		line 310 in file "main.c"
 44053 ;; Parameters:    Size  Location     Type
 44054 ;;		None
 44055 ;; Auto vars:     Size  Location     Type
 44056 ;;		None
 44057 ;; Return value:  Size  Location     Type
 44058 ;;                  1    wreg      void 
 44059 ;; Registers used:
 44060 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 44061 ;; Tracked objects:
 44062 ;;		On entry : 0/0
 44063 ;;		On exit  : 0/0
 44064 ;;		Unchanged: 0/0
 44065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44068 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44069 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44070 ;;Total ram usage:       20 bytes
 44071 ;; Hardware stack levels used:    1
 44072 ;; Hardware stack levels required when called:    4
 44073 ;; This function calls:
 44074 ;;		_display
 44075 ;;		_encoderInputsBuxton
 44076 ;;		_playArpeggio
 44077 ;;		i2___lbmod
 44078 ;;		i2_printThisNumber
 44079 ;; This function is called by:
 44080 ;;		Interrupt level 2
 44081 ;; This function uses a non-reentrant model
 44082 ;;
 44083                           
 44084                           	psect	intcode
 44085  000008                     __pintcode:
 44086                           	opt stack 0
 44087  000008                     _ISR:
 44088                           	opt stack 14
 44089                           
 44090                           ;incstack = 0
 44091  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 44092  00000A  ED1B  F029         	call	int_func,f	;refresh shadow registers
 44093                           tblptru	equ	0xFF8
 44094                           tblptrh	equ	0xFF7
 44095                           tblptrl	equ	0xFF6
 44096                           tablat	equ	0xFF5
 44097                           prodh	equ	0xFF4
 44098                           prodl	equ	0xFF3
 44099                           intcon	equ	0xFF2
 44100                           intcon2	equ	0xFF1
 44101                           postinc0	equ	0xFEE
 44102                           wreg	equ	0xFE8
 44103                           indf1	equ	0xFE7
 44104                           postinc1	equ	0xFE6
 44105                           postdec1	equ	0xFE5
 44106                           fsr1h	equ	0xFE2
 44107                           fsr1l	equ	0xFE1
 44108                           indf2	equ	0xFDF
 44109                           postinc2	equ	0xFDE
 44110                           postdec2	equ	0xFDD
 44111                           plusw2	equ	0xFDB
 44112                           fsr2h	equ	0xFDA
 44113                           fsr2l	equ	0xFD9
 44114                           status	equ	0xFD8
 44115                           
 44116                           	psect	intcode_body
 44117  005236                     __pintcode_body:
 44118                           	opt stack 14
 44119  005236                     int_func:
 44120                           	opt stack 14
 44121  005236  0006               	pop		; remove dummy address from shadow register refresh
 44122  005238  CFFA F020          	movff	pclath,??_ISR+2
 44123  00523C  CFFB F021          	movff	pclatu,??_ISR+3
 44124  005240  CFE9 F022          	movff	fsr0l,??_ISR+4
 44125  005244  CFEA F023          	movff	fsr0h,??_ISR+5
 44126  005248  CFE1 F024          	movff	fsr1l,??_ISR+6
 44127  00524C  CFE2 F025          	movff	fsr1h,??_ISR+7
 44128  005250  CFD9 F026          	movff	fsr2l,??_ISR+8
 44129  005254  CFDA F027          	movff	fsr2h,??_ISR+9
 44130  005258  CFF3 F028          	movff	prodl,??_ISR+10
 44131  00525C  CFF4 F029          	movff	prodh,??_ISR+11
 44132  005260  CFF6 F02A          	movff	tblptrl,??_ISR+12
 44133  005264  CFF7 F02B          	movff	tblptrh,??_ISR+13
 44134  005268  CFF8 F02C          	movff	tblptru,??_ISR+14
 44135  00526C  CFF5 F02D          	movff	tablat,??_ISR+15
 44136  005270  C05F  F02E         	movff	btemp,??_ISR+16
 44137  005274  C060  F02F         	movff	btemp+1,??_ISR+17
 44138  005278  C061  F030         	movff	btemp+2,??_ISR+18
 44139  00527C  C062  F031         	movff	btemp+3,??_ISR+19
 44140                           
 44141                           ;main.c: 313: if(TMR2IF==1){
 44142  005280  A29E               	btfss	3998,1,c	;volatile
 44143  005282  D00C               	goto	i2l4795
 44144                           
 44145                           ;main.c: 314: display();
 44146  005284  EC0C  F04B         	call	_display	;wreg free
 44147                           
 44148                           ;main.c: 315: count_ISR++;
 44149  005288  0E01               	movlw	1
 44150  00528A  0102               	movlb	2	; () banked
 44151  00528C  2784               	addwf	_count_ISR& (0+255),f,b
 44152  00528E  0E00               	movlw	0
 44153  005290  2385               	addwfc	(_count_ISR+1)& (0+255),f,b
 44154  005292  2386               	addwfc	(_count_ISR+2)& (0+255),f,b
 44155  005294  2387               	addwfc	(_count_ISR+3)& (0+255),f,b
 44156                           
 44157                           ; BSR set to: 2
 44158                           ;main.c: 317: TMR2 = 0x83;
 44159  005296  0E83               	movlw	131
 44160  005298  6ECC               	movwf	4044,c	;volatile
 44161                           
 44162                           ; BSR set to: 2
 44163                           ;main.c: 318: TMR2IF = 0;
 44164  00529A  929E               	bcf	3998,1,c	;volatile
 44165  00529C                     i2l4795:
 44166                           
 44167                           ;main.c: 319: }
 44168                           ;main.c: 322: if(INT0IF==1) {
 44169                           
 44170                           ; BSR set to: 2
 44171  00529C  A2F2               	btfss	intcon,1,c	;volatile
 44172  00529E  D00B               	goto	i2l4796
 44173                           
 44174                           ;main.c: 323: _delay((unsigned long)((10)*(20000000/4000.0)));
 44175  0052A0  0E41               	movlw	65
 44176  0052A2  6E1E               	movwf	??_ISR& (0+255),c
 44177  0052A4  0EEE               	movlw	238
 44178  0052A6                     i2u4504_47:
 44179  0052A6  2EE8               	decfsz	wreg,f,c
 44180  0052A8  D7FE               	bra	i2u4504_47
 44181  0052AA  2E1E               	decfsz	??_ISR& (0+255),f,c
 44182  0052AC  D7FC               	bra	i2u4504_47
 44183  0052AE  D000               	nop2	
 44184                           
 44185                           ;main.c: 324: if(RB0 == 0){encoder_click = 1;}
 44186  0052B0  A081               	btfss	3969,0,c	;volatile
 44187  0052B2  8036               	bsf	_encoder_click/(0+8),_encoder_click& (0+7),c
 44188                           
 44189                           ;main.c: 325: INT0IF = 0;
 44190  0052B4  92F2               	bcf	intcon,1,c	;volatile
 44191  0052B6                     i2l4796:
 44192                           
 44193                           ;main.c: 326: }
 44194                           ;main.c: 329: if(RBIF==1) {
 44195  0052B6  A0F2               	btfss	intcon,0,c	;volatile
 44196  0052B8  D003               	goto	i2l4798
 44197                           
 44198                           ;main.c: 330: encoderInputsBuxton();
 44199  0052BA  EC05  F03F         	call	_encoderInputsBuxton	;wreg free
 44200                           
 44201                           ;main.c: 332: RBIF = 0;
 44202  0052BE  90F2               	bcf	intcon,0,c	;volatile
 44203  0052C0                     i2l4798:
 44204                           
 44205                           ;main.c: 333: }
 44206                           ;main.c: 337: if(TMR0IF==1) {
 44207  0052C0  A4F2               	btfss	intcon,2,c	;volatile
 44208  0052C2  D05F               	goto	i2l4799
 44209                           
 44210                           ;main.c: 339: TMR0IE = 0;
 44211  0052C4  9AF2               	bcf	intcon,5,c	;volatile
 44212                           
 44213                           ;main.c: 342: if((finishLastNote == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 44214  0052C6  BC33               	btfsc	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 44215  0052C8  D040               	goto	i2l4806
 44216  0052CA  C0F7  F001         	movff	_NOTE_LENGTH_PULSES,i2___lbmod@divisor
 44217  0052CE  5054               	movf	_TIMER_OVERFLOWS,w,c
 44218  0052D0  EC20  F04A         	call	i2___lbmod
 44219  0052D4  0900               	iorlw	0
 44220  0052D6  A4D8               	btfss	status,2,c
 44221  0052D8  D038               	goto	i2l4806
 44222                           
 44223                           ;main.c: 345: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYP
      +                          E == DOWN) || (ARPEGGIO_TYPE == UP_DOWN) || (ARPEGGIO_TYPE == DOWN_UP)){
 44224  0052DA  0E06               	movlw	6
 44225  0052DC  0100               	movlb	0	; () banked
 44226  0052DE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44227  0052E0  B4D8               	btfsc	status,2,c
 44228  0052E2  D00D               	goto	i2u4460_40
 44229                           
 44230                           ; BSR set to: 0
 44231  0052E4  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 44232  0052E6  B4D8               	btfsc	status,2,c
 44233  0052E8  D00A               	goto	i2u4460_40
 44234                           
 44235                           ; BSR set to: 0
 44236  0052EA  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 44237  0052EC  B4D8               	btfsc	status,2,c
 44238  0052EE  D007               	goto	i2u4460_40
 44239                           
 44240                           ; BSR set to: 0
 44241  0052F0  0E02               	movlw	2
 44242  0052F2  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44243  0052F4  B4D8               	btfsc	status,2,c
 44244  0052F6  D003               	goto	i2u4460_40
 44245                           
 44246                           ; BSR set to: 0
 44247  0052F8  0E03               	movlw	3
 44248  0052FA  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44249  0052FC  B4D8               	btfsc	status,2,c
 44250  0052FE                     i2u4460_40:
 44251                           
 44252                           ; BSR set to: 0
 44253                           ;main.c: 346: stored_octave = which_octave;
 44254  0052FE  C056  F0E7         	movff	_which_octave,_stored_octave
 44255                           
 44256                           ; BSR set to: 0
 44257                           ;main.c: 347: }
 44258                           ;main.c: 361: if(ARPEGGIO_ON == 1){
 44259  005302  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 44260                           
 44261                           ; BSR set to: 0
 44262                           ;main.c: 362: if(DISPLAY_STEP_NUMBER == 1) {printThisNumber((NUM_NOTES_PRESSED * 100) + 
      +                          (which_note + 1));}
 44263  005304  AC32               	btfss	_DISPLAY_STEP_NUMBER/(0+8),_DISPLAY_STEP_NUMBER& (0+7),c
 44264  005306  D011               	goto	i2l4805
 44265                           
 44266                           ; BSR set to: 0
 44267  005308  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44268  00530A  0D64               	mullw	100
 44269  00530C  5057               	movf	_which_note,w,c
 44270  00530E  6E1E               	movwf	??_ISR& (0+255),c
 44271  005310  6A1F               	clrf	(??_ISR+1)& (0+255),c
 44272  005312  50F3               	movf	prodl,w,c
 44273  005314  261E               	addwf	??_ISR,f,c
 44274  005316  50F4               	movf	prodh,w,c
 44275  005318  221F               	addwfc	??_ISR+1,f,c
 44276  00531A  0E01               	movlw	1
 44277  00531C  241E               	addwf	??_ISR,w,c
 44278  00531E  6E01               	movwf	i2printThisNumber@n,c
 44279  005320  0E00               	movlw	0
 44280  005322  201F               	addwfc	??_ISR+1,w,c
 44281  005324  6E02               	movwf	i2printThisNumber@n+1,c
 44282  005326  EC1F  F04B         	call	i2_printThisNumber	;wreg free
 44283  00532A                     i2l4805:
 44284                           
 44285                           ;main.c: 363: }
 44286                           ;main.c: 365: playArpeggio();
 44287  00532A  EC21  F005         	call	_playArpeggio	;wreg free
 44288                           
 44289                           ;main.c: 368: suppress_note_on = 0;
 44290  00532E  9A33               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 44291                           
 44292                           ;main.c: 369: suppress_note_off = 0;
 44293  005330  9833               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 44294                           
 44295                           ;main.c: 370: flag1 = 0;
 44296  005332  9033               	bcf	_flag1/(0+8),_flag1& (0+7),c
 44297                           
 44298                           ;main.c: 371: flag2 = 0;
 44299  005334  9E32               	bcf	_flag2/(0+8),_flag2& (0+7),c
 44300                           
 44301                           ;main.c: 374: if((ARPEGGIO_TYPE == RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) {
 44302  005336  0E05               	movlw	5
 44303  005338  0100               	movlb	0	; () banked
 44304  00533A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44305  00533C  B4D8               	btfsc	status,2,c
 44306  00533E  D003               	goto	i2u4464_40
 44307                           
 44308                           ; BSR set to: 0
 44309  005340  0E04               	movlw	4
 44310  005342  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44311  005344  B4D8               	btfsc	status,2,c
 44312  005346                     i2u4464_40:
 44313                           
 44314                           ; BSR set to: 0
 44315                           ;main.c: 375: stored_octave = which_octave;
 44316  005346  C056  F0E7         	movff	_which_octave,_stored_octave
 44317  00534A                     i2l4806:
 44318                           
 44319                           ;main.c: 376: }
 44320                           ;main.c: 377: }
 44321                           ;main.c: 398: if(lastNoteMode == 1){
 44322                           
 44323                           ; BSR set to: 0
 44324  00534A  B634               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 44325                           
 44326                           ;main.c: 399: if((finishLastNote == 1) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 44327  00534C  AC33               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 44328  00534E  D00B               	goto	i2l4810
 44329  005350  C0F7  F001         	movff	_NOTE_LENGTH_PULSES,i2___lbmod@divisor
 44330  005354  5054               	movf	_TIMER_OVERFLOWS,w,c
 44331  005356  EC20  F04A         	call	i2___lbmod
 44332  00535A  0900               	iorlw	0
 44333  00535C  A4D8               	btfss	status,2,c
 44334  00535E  D003               	goto	i2l4810
 44335                           
 44336                           ;main.c: 408: finishLastNote = 0;
 44337  005360  9C33               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 44338                           
 44339                           ;main.c: 411: TIMER_OVERFLOWS = NOTE_LENGTH_PULSES;
 44340  005362  C0F7  F054         	movff	_NOTE_LENGTH_PULSES,_TIMER_OVERFLOWS
 44341  005366                     i2l4810:
 44342                           
 44343                           ;main.c: 412: }
 44344                           ;main.c: 413: }
 44345                           ;main.c: 415: TIMER_OVERFLOWS++;
 44346  005366  2A54               	incf	_TIMER_OVERFLOWS,f,c
 44347                           
 44348                           ;main.c: 417: if(TIMER_OVERFLOWS >= (NOTE_LENGTH_PULSES)){TIMER_OVERFLOWS = 0;}
 44349  005368  0100               	movlb	0	; () banked
 44350  00536A  51F7               	movf	_NOTE_LENGTH_PULSES& (0+255),w,b
 44351  00536C  5C54               	subwf	_TIMER_OVERFLOWS,w,c
 44352  00536E  A0D8               	btfss	status,0,c
 44353  005370  D002               	goto	i2l4811
 44354                           
 44355                           ; BSR set to: 0
 44356  005372  0E00               	movlw	0
 44357  005374  6E54               	movwf	_TIMER_OVERFLOWS,c
 44358  005376                     i2l4811:
 44359                           
 44360                           ; BSR set to: 0
 44361                           ;main.c: 419: TMR0 = TIMER_PRELOAD;
 44362                           
 44363                           ; BSR set to: 0
 44364  005376  C16D  FFD6         	movff	_TIMER_PRELOAD,4054	;volatile
 44365  00537A  C16E  FFD7         	movff	_TIMER_PRELOAD+1,4055	;volatile
 44366                           
 44367                           ; BSR set to: 0
 44368                           ;main.c: 420: TMR0IF = 0;
 44369  00537E  94F2               	bcf	intcon,2,c	;volatile
 44370                           
 44371                           ; BSR set to: 0
 44372                           ;main.c: 421: TMR0IE = 1;
 44373  005380  8AF2               	bsf	intcon,5,c	;volatile
 44374  005382                     i2l4799:
 44375                           
 44376                           ; BSR set to: 0
 44377  005382  C031  F062         	movff	??_ISR+19,btemp+3
 44378  005386  C030  F061         	movff	??_ISR+18,btemp+2
 44379  00538A  C02F  F060         	movff	??_ISR+17,btemp+1
 44380  00538E  C02E  F05F         	movff	??_ISR+16,btemp
 44381  005392  C02D  FFF5         	movff	??_ISR+15,tablat
 44382  005396  C02C  FFF8         	movff	??_ISR+14,tblptru
 44383  00539A  C02B  FFF7         	movff	??_ISR+13,tblptrh
 44384  00539E  C02A  FFF6         	movff	??_ISR+12,tblptrl
 44385  0053A2  C029  FFF4         	movff	??_ISR+11,prodh
 44386  0053A6  C028  FFF3         	movff	??_ISR+10,prodl
 44387  0053AA  C027  FFDA         	movff	??_ISR+9,fsr2h
 44388  0053AE  C026  FFD9         	movff	??_ISR+8,fsr2l
 44389  0053B2  C025  FFE2         	movff	??_ISR+7,fsr1h
 44390  0053B6  C024  FFE1         	movff	??_ISR+6,fsr1l
 44391  0053BA  C023  FFEA         	movff	??_ISR+5,fsr0h
 44392  0053BE  C022  FFE9         	movff	??_ISR+4,fsr0l
 44393  0053C2  C021  FFFB         	movff	??_ISR+3,pclatu
 44394  0053C6  C020  FFFA         	movff	??_ISR+2,pclath
 44395  0053CA  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 44396  0053CC  0011               	retfie		f
 44397  0053CE                     __end_of_ISR:
 44398                           	opt stack 0
 44399                           pclatu	equ	0xFFB
 44400                           pclath	equ	0xFFA
 44401                           tblptru	equ	0xFF8
 44402                           tblptrh	equ	0xFF7
 44403                           tblptrl	equ	0xFF6
 44404                           tablat	equ	0xFF5
 44405                           prodh	equ	0xFF4
 44406                           prodl	equ	0xFF3
 44407                           intcon	equ	0xFF2
 44408                           intcon2	equ	0xFF1
 44409                           postinc0	equ	0xFEE
 44410                           fsr0h	equ	0xFEA
 44411                           fsr0l	equ	0xFE9
 44412                           wreg	equ	0xFE8
 44413                           indf1	equ	0xFE7
 44414                           postinc1	equ	0xFE6
 44415                           postdec1	equ	0xFE5
 44416                           fsr1h	equ	0xFE2
 44417                           fsr1l	equ	0xFE1
 44418                           indf2	equ	0xFDF
 44419                           postinc2	equ	0xFDE
 44420                           postdec2	equ	0xFDD
 44421                           plusw2	equ	0xFDB
 44422                           fsr2h	equ	0xFDA
 44423                           fsr2l	equ	0xFD9
 44424                           status	equ	0xFD8
 44425                           
 44426 ;; *************** function i2_printThisNumber *****************
 44427 ;; Defined at:
 44428 ;;		line 21 in file "octave.c"
 44429 ;; Parameters:    Size  Location     Type
 44430 ;;  n               2    0[COMRAM] int 
 44431 ;; Auto vars:     Size  Location     Type
 44432 ;;		None
 44433 ;; Return value:  Size  Location     Type
 44434 ;;                  1    wreg      void 
 44435 ;; Registers used:
 44436 ;;		wreg, status,2
 44437 ;; Tracked objects:
 44438 ;;		On entry : 0/0
 44439 ;;		On exit  : 0/0
 44440 ;;		Unchanged: 0/0
 44441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44442 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44445 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44446 ;;Total ram usage:        2 bytes
 44447 ;; Hardware stack levels used:    1
 44448 ;; This function calls:
 44449 ;;		Nothing
 44450 ;; This function is called by:
 44451 ;;		_ISR
 44452 ;; This function uses a non-reentrant model
 44453 ;;
 44454                           
 44455                           	psect	text140
 44456  00963E                     __ptext140:
 44457                           	opt stack 0
 44458  00963E                     i2_printThisNumber:
 44459                           	opt stack 17
 44460                           
 44461                           ;octave.c: 22: DISPLAY_MODE = 0;
 44462                           
 44463                           ;incstack = 0
 44464  00963E  0E00               	movlw	0
 44465  009640  6E5A               	movwf	_DISPLAY_MODE,c
 44466                           
 44467                           ;octave.c: 23: DIGIT_MODE = 0;
 44468  009642  0E00               	movlw	0
 44469  009644  6E59               	movwf	_DIGIT_MODE,c
 44470                           
 44471                           ;octave.c: 24: number_to_display = n;
 44472  009646  C001  F05B         	movff	i2printThisNumber@n,_number_to_display
 44473  00964A  C002  F05C         	movff	i2printThisNumber@n+1,_number_to_display+1
 44474  00964E  0012               	return		;funcret
 44475  009650                     __end_ofi2_printThisNumber:
 44476                           	opt stack 0
 44477                           pclatu	equ	0xFFB
 44478                           pclath	equ	0xFFA
 44479                           tblptru	equ	0xFF8
 44480                           tblptrh	equ	0xFF7
 44481                           tblptrl	equ	0xFF6
 44482                           tablat	equ	0xFF5
 44483                           prodh	equ	0xFF4
 44484                           prodl	equ	0xFF3
 44485                           intcon	equ	0xFF2
 44486                           intcon2	equ	0xFF1
 44487                           postinc0	equ	0xFEE
 44488                           fsr0h	equ	0xFEA
 44489                           fsr0l	equ	0xFE9
 44490                           wreg	equ	0xFE8
 44491                           indf1	equ	0xFE7
 44492                           postinc1	equ	0xFE6
 44493                           postdec1	equ	0xFE5
 44494                           fsr1h	equ	0xFE2
 44495                           fsr1l	equ	0xFE1
 44496                           indf2	equ	0xFDF
 44497                           postinc2	equ	0xFDE
 44498                           postdec2	equ	0xFDD
 44499                           plusw2	equ	0xFDB
 44500                           fsr2h	equ	0xFDA
 44501                           fsr2l	equ	0xFD9
 44502                           status	equ	0xFD8
 44503                           
 44504 ;; *************** function i2___lbmod *****************
 44505 ;; Defined at:
 44506 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbmod.c"
 44507 ;; Parameters:    Size  Location     Type
 44508 ;;  dividend        1    wreg     unsigned char 
 44509 ;;  divisor         1    0[COMRAM] unsigned char 
 44510 ;; Auto vars:     Size  Location     Type
 44511 ;;  dividend        1    1[COMRAM] unsigned char 
 44512 ;;  __lbmod         1    3[COMRAM] unsigned char 
 44513 ;;  __lbmod         1    2[COMRAM] unsigned char 
 44514 ;; Return value:  Size  Location     Type
 44515 ;;                  1    wreg      unsigned char 
 44516 ;; Registers used:
 44517 ;;		wreg, status,2, status,0
 44518 ;; Tracked objects:
 44519 ;;		On entry : 0/0
 44520 ;;		On exit  : 0/0
 44521 ;;		Unchanged: 0/0
 44522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44523 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44524 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44526 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44527 ;;Total ram usage:        4 bytes
 44528 ;; Hardware stack levels used:    1
 44529 ;; This function calls:
 44530 ;;		Nothing
 44531 ;; This function is called by:
 44532 ;;		_ISR
 44533 ;; This function uses a non-reentrant model
 44534 ;;
 44535                           
 44536                           	psect	text141
 44537  009440                     __ptext141:
 44538                           	opt stack 0
 44539  009440                     i2___lbmod:
 44540                           	opt stack 17
 44541                           
 44542                           ;incstack = 0
 44543                           ;i2___lbmod@dividend stored from wreg
 44544  009440  6E02               	movwf	i2___lbmod@dividend,c
 44545  009442  0E08               	movlw	8
 44546  009444  6E03               	movwf	i2___lbmod@counter,c
 44547  009446  0E00               	movlw	0
 44548  009448  6E04               	movwf	i2___lbmod@rem,c
 44549  00944A  90D8               	bcf	status,0,c
 44550  00944C  3402               	rlcf	i2___lbmod@dividend,w,c
 44551  00944E  3404               	rlcf	i2___lbmod@rem,w,c
 44552  009450  6E04               	movwf	i2___lbmod@rem,c
 44553  009452  90D8               	bcf	status,0,c
 44554  009454  3602               	rlcf	i2___lbmod@dividend,f,c
 44555  009456  5001               	movf	i2___lbmod@divisor,w,c
 44556  009458  5C04               	subwf	i2___lbmod@rem,w,c
 44557  00945A  A0D8               	btfss	status,0,c
 44558  00945C  D002               	goto	i2l5767
 44559  00945E  5001               	movf	i2___lbmod@divisor,w,c
 44560  009460  5E04               	subwf	i2___lbmod@rem,f,c
 44561  009462                     i2l5767:
 44562  009462  2E03               	decfsz	i2___lbmod@counter,f,c
 44563  009464  D7F2               	goto	i2l5766
 44564  009466  5004               	movf	i2___lbmod@rem,w,c
 44565  009468  0012               	return	
 44566  00946A                     __end_ofi2___lbmod:
 44567                           	opt stack 0
 44568                           pclatu	equ	0xFFB
 44569                           pclath	equ	0xFFA
 44570                           tblptru	equ	0xFF8
 44571                           tblptrh	equ	0xFF7
 44572                           tblptrl	equ	0xFF6
 44573                           tablat	equ	0xFF5
 44574                           prodh	equ	0xFF4
 44575                           prodl	equ	0xFF3
 44576                           intcon	equ	0xFF2
 44577                           intcon2	equ	0xFF1
 44578                           postinc0	equ	0xFEE
 44579                           fsr0h	equ	0xFEA
 44580                           fsr0l	equ	0xFE9
 44581                           wreg	equ	0xFE8
 44582                           indf1	equ	0xFE7
 44583                           postinc1	equ	0xFE6
 44584                           postdec1	equ	0xFE5
 44585                           fsr1h	equ	0xFE2
 44586                           fsr1l	equ	0xFE1
 44587                           indf2	equ	0xFDF
 44588                           postinc2	equ	0xFDE
 44589                           postdec2	equ	0xFDD
 44590                           plusw2	equ	0xFDB
 44591                           fsr2h	equ	0xFDA
 44592                           fsr2l	equ	0xFD9
 44593                           status	equ	0xFD8
 44594                           
 44595 ;; *************** function _playArpeggio *****************
 44596 ;; Defined at:
 44597 ;;		line 275 in file "arpeggio.c"
 44598 ;; Parameters:    Size  Location     Type
 44599 ;;		None
 44600 ;; Auto vars:     Size  Location     Type
 44601 ;;		None
 44602 ;; Return value:  Size  Location     Type
 44603 ;;                  1    wreg      void 
 44604 ;; Registers used:
 44605 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 44606 ;; Tracked objects:
 44607 ;;		On entry : 0/0
 44608 ;;		On exit  : 0/0
 44609 ;;		Unchanged: 0/0
 44610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44613 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44614 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44615 ;;Total ram usage:        6 bytes
 44616 ;; Hardware stack levels used:    1
 44617 ;; Hardware stack levels required when called:    3
 44618 ;; This function calls:
 44619 ;;		_sort_pitches
 44620 ;;		i2___awmod
 44621 ;;		i2_noteOff
 44622 ;;		i2_noteOn
 44623 ;;		i2_rand
 44624 ;;		i2_random_pitches
 44625 ;;		i2_random_pitches_non_repeating
 44626 ;; This function is called by:
 44627 ;;		_ISR
 44628 ;; This function uses a non-reentrant model
 44629 ;;
 44630                           
 44631                           	psect	text142
 44632  000A42                     __ptext142:
 44633                           	opt stack 0
 44634  000A42                     _playArpeggio:
 44635                           	opt stack 14
 44636                           
 44637                           ;arpeggio.c: 278: if(NUM_NOTES_PRESSED == 0){return;}
 44638                           
 44639                           ;incstack = 0
 44640  000A42  0100               	movlb	0	; () banked
 44641  000A44  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44642  000A46  B4D8               	btfsc	status,2,c
 44643  000A48  0012               	return	
 44644                           
 44645                           ; BSR set to: 0
 44646                           ;arpeggio.c: 286: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE == A
      +                          S_PRESSED) {
 44647                           
 44648                           ; BSR set to: 0
 44649                           
 44650                           ; BSR set to: 0
 44651  000A4A  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 44652  000A4C  B4D8               	btfsc	status,2,c
 44653  000A4E  D008               	goto	i2u3807_40
 44654                           
 44655                           ; BSR set to: 0
 44656  000A50  0E02               	movlw	2
 44657  000A52  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44658  000A54  B4D8               	btfsc	status,2,c
 44659  000A56  D004               	goto	i2u3807_40
 44660                           
 44661                           ; BSR set to: 0
 44662  000A58  0E06               	movlw	6
 44663  000A5A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44664  000A5C  A4D8               	btfss	status,2,c
 44665  000A5E  D0B8               	goto	i2l5307
 44666  000A60                     i2u3807_40:
 44667                           
 44668                           ; BSR set to: 0
 44669                           ;arpeggio.c: 288: if(startingDirection == UP){
 44670                           
 44671                           ; BSR set to: 0
 44672  000A60  51E9               	movf	_startingDirection& (0+255),w,b
 44673  000A62  B4D8               	btfsc	status,2,c
 44674                           
 44675                           ; BSR set to: 0
 44676                           ;arpeggio.c: 290: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 44677  000A64  A633               	btfss	_overflow/(0+8),_overflow& (0+7),c
 44678  000A66  D026               	goto	i2l5296
 44679                           
 44680                           ; BSR set to: 0
 44681  000A68  5056               	movf	_which_octave,w,c
 44682  000A6A  0A80               	xorlw	128
 44683  000A6C  0F7F               	addlw	-129
 44684  000A6E  B0D8               	btfsc	status,0,c
 44685                           
 44686                           ; BSR set to: 0
 44687  000A70  B433               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44688  000A72  D020               	goto	i2l5296
 44689                           
 44690                           ; BSR set to: 0
 44691  000A74  B033               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 44692  000A76  D01E               	goto	i2l5296
 44693                           
 44694                           ; BSR set to: 0
 44695                           ;arpeggio.c: 293: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - 1) * 12),velocity);
 44696  000A78  0EFF               	movlw	255
 44697  000A7A  6E18               	movwf	??_playArpeggio& (0+255),c
 44698  000A7C  0EFF               	movlw	255
 44699  000A7E  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44700  000A80  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44701  000A82  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44702  000A84  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44703  000A86  5018               	movf	??_playArpeggio,w,c
 44704  000A88  261A               	addwf	??_playArpeggio+2,f,c
 44705  000A8A  5019               	movf	??_playArpeggio+1,w,c
 44706  000A8C  221B               	addwfc	??_playArpeggio+3,f,c
 44707  000A8E  501A               	movf	??_playArpeggio+2,w,c
 44708  000A90  244F               	addwf	_arpeggioPtr,w,c
 44709  000A92  6ED9               	movwf	fsr2l,c
 44710  000A94  501B               	movf	??_playArpeggio+3,w,c
 44711  000A96  2050               	addwfc	_arpeggioPtr+1,w,c
 44712  000A98  6EDA               	movwf	fsr2h,c
 44713  000A9A  50DF               	movf	indf2,w,c
 44714  000A9C  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44715  000A9E  0456               	decf	_which_octave,w,c
 44716  000AA0  0D0C               	mullw	12
 44717  000AA2  50F3               	movf	prodl,w,c
 44718  000AA4  241C               	addwf	??_playArpeggio+4,w,c
 44719  000AA6  6E0C               	movwf	i2noteOff@pitch,c
 44720  000AA8  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44721  000AAC  51F6               	movf	_channel& (0+255),w,b
 44722  000AAE  ECDC  F048         	call	i2_noteOff
 44723                           
 44724                           ;arpeggio.c: 294: overflow = 0;
 44725  000AB2  9633               	bcf	_overflow/(0+8),_overflow& (0+7),c
 44726  000AB4                     i2l5296:
 44727                           
 44728                           ;arpeggio.c: 295: }
 44729                           ;arpeggio.c: 296: }
 44730                           ;arpeggio.c: 298: if(startingDirection == DOWN){
 44731  000AB4  0100               	movlb	0	; () banked
 44732  000AB6  05E9               	decf	_startingDirection& (0+255),w,b
 44733  000AB8  B4D8               	btfsc	status,2,c
 44734                           
 44735                           ; BSR set to: 0
 44736                           ;arpeggio.c: 300: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 44737  000ABA  A633               	btfss	_overflow/(0+8),_overflow& (0+7),c
 44738  000ABC  D028               	goto	i2l5298
 44739                           
 44740                           ; BSR set to: 0
 44741  000ABE  5056               	movf	_which_octave,w,c
 44742  000AC0  0A80               	xorlw	128
 44743  000AC2  0F7F               	addlw	-129
 44744  000AC4  B0D8               	btfsc	status,0,c
 44745                           
 44746                           ; BSR set to: 0
 44747  000AC6  B433               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44748  000AC8  D022               	goto	i2l5298
 44749                           
 44750                           ; BSR set to: 0
 44751  000ACA  B033               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 44752  000ACC  D020               	goto	i2l5298
 44753                           
 44754                           ; BSR set to: 0
 44755                           ;arpeggio.c: 301: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - OCTAVES) * 12),velocity);
 44756  000ACE  0EFF               	movlw	255
 44757  000AD0  6E18               	movwf	??_playArpeggio& (0+255),c
 44758  000AD2  0EFF               	movlw	255
 44759  000AD4  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44760  000AD6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44761  000AD8  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44762  000ADA  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44763  000ADC  5018               	movf	??_playArpeggio,w,c
 44764  000ADE  261A               	addwf	??_playArpeggio+2,f,c
 44765  000AE0  5019               	movf	??_playArpeggio+1,w,c
 44766  000AE2  221B               	addwfc	??_playArpeggio+3,f,c
 44767  000AE4  501A               	movf	??_playArpeggio+2,w,c
 44768  000AE6  244F               	addwf	_arpeggioPtr,w,c
 44769  000AE8  6ED9               	movwf	fsr2l,c
 44770  000AEA  501B               	movf	??_playArpeggio+3,w,c
 44771  000AEC  2050               	addwfc	_arpeggioPtr+1,w,c
 44772  000AEE  6EDA               	movwf	fsr2h,c
 44773  000AF0  50DF               	movf	indf2,w,c
 44774  000AF2  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44775  000AF4  51F8               	movf	_OCTAVES& (0+255),w,b
 44776  000AF6  0800               	sublw	0
 44777  000AF8  2456               	addwf	_which_octave,w,c
 44778  000AFA  0D0C               	mullw	12
 44779  000AFC  50F3               	movf	prodl,w,c
 44780  000AFE  241C               	addwf	??_playArpeggio+4,w,c
 44781  000B00  6E0C               	movwf	i2noteOff@pitch,c
 44782  000B02  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44783  000B06  51F6               	movf	_channel& (0+255),w,b
 44784  000B08  ECDC  F048         	call	i2_noteOff
 44785                           
 44786                           ;arpeggio.c: 302: overflow = 0;
 44787  000B0C  9633               	bcf	_overflow/(0+8),_overflow& (0+7),c
 44788  000B0E                     i2l5298:
 44789                           
 44790                           ;arpeggio.c: 303: }
 44791                           ;arpeggio.c: 304: }
 44792                           ;arpeggio.c: 306: if(octave_overflow == 1){
 44793  000B0E  A433               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44794  000B10  D05F               	goto	i2l5307
 44795                           
 44796                           ;arpeggio.c: 307: if(startingDirection == UP) {
 44797  000B12  0100               	movlb	0	; () banked
 44798  000B14  51E9               	movf	_startingDirection& (0+255),w,b
 44799  000B16  A4D8               	btfss	status,2,c
 44800  000B18  D020               	goto	i2l5300
 44801                           
 44802                           ; BSR set to: 0
 44803                           ;arpeggio.c: 309: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + ((OCTAVES - 1) * 12),velocity);}
 44804  000B1A  BE32               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 44805  000B1C  D01D               	goto	i2l5301
 44806                           
 44807                           ; BSR set to: 0
 44808  000B1E  0EFF               	movlw	255
 44809  000B20  6E18               	movwf	??_playArpeggio& (0+255),c
 44810  000B22  0EFF               	movlw	255
 44811  000B24  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44812  000B26  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44813  000B28  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44814  000B2A  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44815  000B2C  5018               	movf	??_playArpeggio,w,c
 44816  000B2E  261A               	addwf	??_playArpeggio+2,f,c
 44817  000B30  5019               	movf	??_playArpeggio+1,w,c
 44818  000B32  221B               	addwfc	??_playArpeggio+3,f,c
 44819  000B34  501A               	movf	??_playArpeggio+2,w,c
 44820  000B36  244F               	addwf	_arpeggioPtr,w,c
 44821  000B38  6ED9               	movwf	fsr2l,c
 44822  000B3A  501B               	movf	??_playArpeggio+3,w,c
 44823  000B3C  2050               	addwfc	_arpeggioPtr+1,w,c
 44824  000B3E  6EDA               	movwf	fsr2h,c
 44825  000B40  50DF               	movf	indf2,w,c
 44826  000B42  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44827  000B44  05F8               	decf	_OCTAVES& (0+255),w,b
 44828  000B46  0D0C               	mullw	12
 44829  000B48  50F3               	movf	prodl,w,c
 44830  000B4A  241C               	addwf	??_playArpeggio+4,w,c
 44831  000B4C  6E0C               	movwf	i2noteOff@pitch,c
 44832  000B4E  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44833  000B52  51F6               	movf	_channel& (0+255),w,b
 44834  000B54  ECDC  F048         	call	i2_noteOff
 44835  000B58                     i2l5301:
 44836                           
 44837                           ;arpeggio.c: 310: octave_overflow = 0;
 44838  000B58  9433               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44839  000B5A                     i2l5300:
 44840                           
 44841                           ;arpeggio.c: 311: }
 44842                           ;arpeggio.c: 313: if(startingDirection == DOWN){
 44843  000B5A  0100               	movlb	0	; () banked
 44844  000B5C  05E9               	decf	_startingDirection& (0+255),w,b
 44845  000B5E  A4D8               	btfss	status,2,c
 44846  000B60  D01B               	goto	i2l5302
 44847                           
 44848                           ; BSR set to: 0
 44849                           ;arpeggio.c: 315: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )),velocity);}
 44850  000B62  BE32               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 44851  000B64  D018               	goto	i2l5303
 44852                           
 44853                           ; BSR set to: 0
 44854  000B66  0EFF               	movlw	255
 44855  000B68  6E18               	movwf	??_playArpeggio& (0+255),c
 44856  000B6A  0EFF               	movlw	255
 44857  000B6C  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44858  000B6E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44859  000B70  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44860  000B72  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44861  000B74  5018               	movf	??_playArpeggio,w,c
 44862  000B76  261A               	addwf	??_playArpeggio+2,f,c
 44863  000B78  5019               	movf	??_playArpeggio+1,w,c
 44864  000B7A  221B               	addwfc	??_playArpeggio+3,f,c
 44865  000B7C  501A               	movf	??_playArpeggio+2,w,c
 44866  000B7E  244F               	addwf	_arpeggioPtr,w,c
 44867  000B80  6ED9               	movwf	fsr2l,c
 44868  000B82  501B               	movf	??_playArpeggio+3,w,c
 44869  000B84  2050               	addwfc	_arpeggioPtr+1,w,c
 44870  000B86  6EDA               	movwf	fsr2h,c
 44871  000B88  50DF               	movf	indf2,w,c
 44872  000B8A  6E0C               	movwf	i2noteOff@pitch,c
 44873  000B8C  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44874  000B90  51F6               	movf	_channel& (0+255),w,b
 44875  000B92  ECDC  F048         	call	i2_noteOff
 44876  000B96                     i2l5303:
 44877                           
 44878                           ;arpeggio.c: 316: octave_overflow = 0;
 44879  000B96  9433               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44880  000B98                     i2l5302:
 44881                           
 44882                           ;arpeggio.c: 317: }
 44883                           ;arpeggio.c: 321: if(skipFirstLast == 1){
 44884  000B98  A834               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 44885  000B9A  D013               	goto	i2l5306
 44886                           
 44887                           ;arpeggio.c: 322: if(NUM_NOTES_PRESSED > 1){
 44888  000B9C  0E01               	movlw	1
 44889  000B9E  0100               	movlb	0	; () banked
 44890  000BA0  65E5               	cpfsgt	_NUM_NOTES_PRESSED& (0+255),b
 44891  000BA2  D003               	goto	i2l5305
 44892                           
 44893                           ; BSR set to: 0
 44894                           ;arpeggio.c: 323: which_note = 1;
 44895  000BA4  0E01               	movlw	1
 44896  000BA6  6E57               	movwf	_which_note,c
 44897                           
 44898                           ; BSR set to: 0
 44899                           ;arpeggio.c: 324: suppress_note_off = 1;
 44900  000BA8  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 44901  000BAA                     i2l5305:
 44902                           
 44903                           ; BSR set to: 0
 44904                           ;arpeggio.c: 325: }
 44905                           ;arpeggio.c: 329: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 44906                           
 44907                           ; BSR set to: 0
 44908  000BAA  05E5               	decf	_NUM_NOTES_PRESSED& (0+255),w,b
 44909  000BAC  A4D8               	btfss	status,2,c
 44910  000BAE  D009               	goto	i2l5306
 44911                           
 44912                           ; BSR set to: 0
 44913  000BB0  0E01               	movlw	1
 44914  000BB2  65F8               	cpfsgt	_OCTAVES& (0+255),b
 44915  000BB4  D006               	goto	i2l5306
 44916                           
 44917                           ; BSR set to: 0
 44918                           ;arpeggio.c: 330: flag1 = 1;
 44919  000BB6  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 44920                           
 44921                           ; BSR set to: 0
 44922                           ;arpeggio.c: 332: which_note = 0;
 44923  000BB8  0E00               	movlw	0
 44924  000BBA  6E57               	movwf	_which_note,c
 44925                           
 44926                           ; BSR set to: 0
 44927                           ;arpeggio.c: 333: which_octave--;
 44928  000BBC  0656               	decf	_which_octave,f,c
 44929                           
 44930                           ; BSR set to: 0
 44931                           ;arpeggio.c: 334: stored_octave = which_octave;
 44932  000BBE  C056  F0E7         	movff	_which_octave,_stored_octave
 44933  000BC2                     i2l5306:
 44934                           
 44935                           ;arpeggio.c: 335: }
 44936                           ;arpeggio.c: 336: }
 44937                           ;arpeggio.c: 339: if(ARPEGGIO_TYPE == UP_DOWN) {ARPEGGIO_TYPE = DOWN_UP;}
 44938                           
 44939                           ; BSR set to: 0
 44940                           
 44941                           ; BSR set to: 0
 44942  000BC2  0E02               	movlw	2
 44943  000BC4  0100               	movlb	0	; () banked
 44944  000BC6  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44945  000BC8  A4D8               	btfss	status,2,c
 44946  000BCA  D002               	goto	i2l5307
 44947                           
 44948                           ; BSR set to: 0
 44949  000BCC  0E03               	movlw	3
 44950  000BCE  6FEA               	movwf	_ARPEGGIO_TYPE& (0+255),b
 44951  000BD0                     i2l5307:
 44952                           
 44953                           ;arpeggio.c: 340: }
 44954                           ;arpeggio.c: 341: }
 44955                           ;arpeggio.c: 344: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP) {
 44956                           
 44957                           ; BSR set to: 0
 44958                           
 44959                           ; BSR set to: 0
 44960                           
 44961                           ; BSR set to: 0
 44962  000BD0  0100               	movlb	0	; () banked
 44963  000BD2  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 44964  000BD4  B4D8               	btfsc	status,2,c
 44965  000BD6  D004               	goto	i2u3829_40
 44966                           
 44967                           ; BSR set to: 0
 44968  000BD8  0E03               	movlw	3
 44969  000BDA  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44970  000BDC  A4D8               	btfss	status,2,c
 44971  000BDE  D0BF               	goto	i2l5323
 44972  000BE0                     i2u3829_40:
 44973                           
 44974                           ; BSR set to: 0
 44975                           ;arpeggio.c: 346: if(startingDirection == UP){
 44976                           
 44977                           ; BSR set to: 0
 44978  000BE0  51E9               	movf	_startingDirection& (0+255),w,b
 44979  000BE2  B4D8               	btfsc	status,2,c
 44980                           
 44981                           ; BSR set to: 0
 44982                           ;arpeggio.c: 348: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 44983  000BE4  A633               	btfss	_overflow/(0+8),_overflow& (0+7),c
 44984  000BE6  D024               	goto	i2l5312
 44985                           
 44986                           ; BSR set to: 0
 44987  000BE8  BE56               	btfsc	_which_octave,7,c
 44988                           
 44989                           ; BSR set to: 0
 44990  000BEA  B433               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44991  000BEC  D021               	goto	i2l5312
 44992                           
 44993                           ; BSR set to: 0
 44994  000BEE  B033               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 44995  000BF0  D01F               	goto	i2l5312
 44996                           
 44997                           ; BSR set to: 0
 44998                           ;arpeggio.c: 349: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((OCTAVES +
      +                           which_octave) * 12),velocity);
 44999  000BF2  0EFF               	movlw	255
 45000  000BF4  6E18               	movwf	??_playArpeggio& (0+255),c
 45001  000BF6  0EFF               	movlw	255
 45002  000BF8  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45003  000BFA  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45004  000BFC  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45005  000BFE  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45006  000C00  5018               	movf	??_playArpeggio,w,c
 45007  000C02  261A               	addwf	??_playArpeggio+2,f,c
 45008  000C04  5019               	movf	??_playArpeggio+1,w,c
 45009  000C06  221B               	addwfc	??_playArpeggio+3,f,c
 45010  000C08  501A               	movf	??_playArpeggio+2,w,c
 45011  000C0A  244F               	addwf	_arpeggioPtr,w,c
 45012  000C0C  6ED9               	movwf	fsr2l,c
 45013  000C0E  501B               	movf	??_playArpeggio+3,w,c
 45014  000C10  2050               	addwfc	_arpeggioPtr+1,w,c
 45015  000C12  6EDA               	movwf	fsr2h,c
 45016  000C14  50DF               	movf	indf2,w,c
 45017  000C16  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45018  000C18  5056               	movf	_which_octave,w,c
 45019  000C1A  25F8               	addwf	_OCTAVES& (0+255),w,b
 45020  000C1C  0D0C               	mullw	12
 45021  000C1E  50F3               	movf	prodl,w,c
 45022  000C20  241C               	addwf	??_playArpeggio+4,w,c
 45023  000C22  6E0C               	movwf	i2noteOff@pitch,c
 45024  000C24  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45025  000C28  51F6               	movf	_channel& (0+255),w,b
 45026  000C2A  ECDC  F048         	call	i2_noteOff
 45027                           
 45028                           ;arpeggio.c: 350: overflow = 0;
 45029  000C2E  9633               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45030  000C30                     i2l5312:
 45031                           
 45032                           ;arpeggio.c: 351: }
 45033                           ;arpeggio.c: 352: }
 45034                           ;arpeggio.c: 354: if(startingDirection == DOWN) {
 45035  000C30  0100               	movlb	0	; () banked
 45036  000C32  05E9               	decf	_startingDirection& (0+255),w,b
 45037  000C34  B4D8               	btfsc	status,2,c
 45038                           
 45039                           ; BSR set to: 0
 45040                           ;arpeggio.c: 356: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45041  000C36  A633               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45042  000C38  D023               	goto	i2l5314
 45043                           
 45044                           ; BSR set to: 0
 45045  000C3A  BE56               	btfsc	_which_octave,7,c
 45046                           
 45047                           ; BSR set to: 0
 45048  000C3C  B433               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45049  000C3E  D020               	goto	i2l5314
 45050                           
 45051                           ; BSR set to: 0
 45052  000C40  B033               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45053  000C42  D01E               	goto	i2l5314
 45054                           
 45055                           ; BSR set to: 0
 45056                           ;arpeggio.c: 357: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave + 1) * 12),velocity);
 45057  000C44  0EFF               	movlw	255
 45058  000C46  6E18               	movwf	??_playArpeggio& (0+255),c
 45059  000C48  0EFF               	movlw	255
 45060  000C4A  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45061  000C4C  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45062  000C4E  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45063  000C50  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45064  000C52  5018               	movf	??_playArpeggio,w,c
 45065  000C54  261A               	addwf	??_playArpeggio+2,f,c
 45066  000C56  5019               	movf	??_playArpeggio+1,w,c
 45067  000C58  221B               	addwfc	??_playArpeggio+3,f,c
 45068  000C5A  501A               	movf	??_playArpeggio+2,w,c
 45069  000C5C  244F               	addwf	_arpeggioPtr,w,c
 45070  000C5E  6ED9               	movwf	fsr2l,c
 45071  000C60  501B               	movf	??_playArpeggio+3,w,c
 45072  000C62  2050               	addwfc	_arpeggioPtr+1,w,c
 45073  000C64  6EDA               	movwf	fsr2h,c
 45074  000C66  50DF               	movf	indf2,w,c
 45075  000C68  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45076  000C6A  2856               	incf	_which_octave,w,c
 45077  000C6C  0D0C               	mullw	12
 45078  000C6E  50F3               	movf	prodl,w,c
 45079  000C70  241C               	addwf	??_playArpeggio+4,w,c
 45080  000C72  6E0C               	movwf	i2noteOff@pitch,c
 45081  000C74  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45082  000C78  51F6               	movf	_channel& (0+255),w,b
 45083  000C7A  ECDC  F048         	call	i2_noteOff
 45084                           
 45085                           ;arpeggio.c: 358: overflow = 0;
 45086  000C7E  9633               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45087  000C80                     i2l5314:
 45088                           
 45089                           ;arpeggio.c: 359: }
 45090                           ;arpeggio.c: 360: }
 45091                           ;arpeggio.c: 362: if(octave_overflow == 1){
 45092  000C80  A433               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45093  000C82  D06D               	goto	i2l5323
 45094                           
 45095                           ;arpeggio.c: 364: if(startingDirection == UP){
 45096  000C84  0100               	movlb	0	; () banked
 45097  000C86  51E9               	movf	_startingDirection& (0+255),w,b
 45098  000C88  A4D8               	btfss	status,2,c
 45099  000C8A  D024               	goto	i2l5316
 45100                           
 45101                           ; BSR set to: 0
 45102                           ;arpeggio.c: 366: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + OCTAVES) * 12),velocity);}
 45103  000C8C  BE32               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45104  000C8E  D021               	goto	i2l5317
 45105                           
 45106                           ; BSR set to: 0
 45107  000C90  0EFF               	movlw	255
 45108  000C92  6E18               	movwf	??_playArpeggio& (0+255),c
 45109  000C94  0EFF               	movlw	255
 45110  000C96  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45111  000C98  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45112  000C9A  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45113  000C9C  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45114  000C9E  5018               	movf	??_playArpeggio,w,c
 45115  000CA0  261A               	addwf	??_playArpeggio+2,f,c
 45116  000CA2  5019               	movf	??_playArpeggio+1,w,c
 45117  000CA4  221B               	addwfc	??_playArpeggio+3,f,c
 45118  000CA6  501A               	movf	??_playArpeggio+2,w,c
 45119  000CA8  244F               	addwf	_arpeggioPtr,w,c
 45120  000CAA  6ED9               	movwf	fsr2l,c
 45121  000CAC  501B               	movf	??_playArpeggio+3,w,c
 45122  000CAE  2050               	addwfc	_arpeggioPtr+1,w,c
 45123  000CB0  6EDA               	movwf	fsr2h,c
 45124  000CB2  50DF               	movf	indf2,w,c
 45125  000CB4  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45126  000CB6  51F8               	movf	_OCTAVES& (0+255),w,b
 45127  000CB8  0D01               	mullw	1
 45128  000CBA  50F3               	movf	prodl,w,c
 45129  000CBC  0800               	sublw	0
 45130  000CBE  25F8               	addwf	_OCTAVES& (0+255),w,b
 45131  000CC0  0D0C               	mullw	12
 45132  000CC2  50F3               	movf	prodl,w,c
 45133  000CC4  241C               	addwf	??_playArpeggio+4,w,c
 45134  000CC6  6E0C               	movwf	i2noteOff@pitch,c
 45135  000CC8  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45136  000CCC  51F6               	movf	_channel& (0+255),w,b
 45137  000CCE  ECDC  F048         	call	i2_noteOff
 45138  000CD2                     i2l5317:
 45139                           
 45140                           ;arpeggio.c: 367: octave_overflow = 0;
 45141  000CD2  9433               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45142  000CD4                     i2l5316:
 45143                           
 45144                           ;arpeggio.c: 368: }
 45145                           ;arpeggio.c: 370: if(startingDirection == DOWN){
 45146  000CD4  0100               	movlb	0	; () banked
 45147  000CD6  05E9               	decf	_startingDirection& (0+255),w,b
 45148  000CD8  A4D8               	btfss	status,2,c
 45149  000CDA  D025               	goto	i2l5318
 45150                           
 45151                           ; BSR set to: 0
 45152                           ;arpeggio.c: 372: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + 1) * 12),velocity);}
 45153  000CDC  BE32               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45154  000CDE  D022               	goto	i2l5319
 45155                           
 45156                           ; BSR set to: 0
 45157  000CE0  0EFF               	movlw	255
 45158  000CE2  6E18               	movwf	??_playArpeggio& (0+255),c
 45159  000CE4  0EFF               	movlw	255
 45160  000CE6  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45161  000CE8  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45162  000CEA  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45163  000CEC  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45164  000CEE  5018               	movf	??_playArpeggio,w,c
 45165  000CF0  261A               	addwf	??_playArpeggio+2,f,c
 45166  000CF2  5019               	movf	??_playArpeggio+1,w,c
 45167  000CF4  221B               	addwfc	??_playArpeggio+3,f,c
 45168  000CF6  501A               	movf	??_playArpeggio+2,w,c
 45169  000CF8  244F               	addwf	_arpeggioPtr,w,c
 45170  000CFA  6ED9               	movwf	fsr2l,c
 45171  000CFC  501B               	movf	??_playArpeggio+3,w,c
 45172  000CFE  2050               	addwfc	_arpeggioPtr+1,w,c
 45173  000D00  6EDA               	movwf	fsr2h,c
 45174  000D02  50DF               	movf	indf2,w,c
 45175  000D04  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45176  000D06  51F8               	movf	_OCTAVES& (0+255),w,b
 45177  000D08  0D01               	mullw	1
 45178  000D0A  50F3               	movf	prodl,w,c
 45179  000D0C  0800               	sublw	0
 45180  000D0E  6E1D               	movwf	(??_playArpeggio+5)& (0+255),c
 45181  000D10  281D               	incf	??_playArpeggio+5,w,c
 45182  000D12  0D0C               	mullw	12
 45183  000D14  50F3               	movf	prodl,w,c
 45184  000D16  241C               	addwf	??_playArpeggio+4,w,c
 45185  000D18  6E0C               	movwf	i2noteOff@pitch,c
 45186  000D1A  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45187  000D1E  51F6               	movf	_channel& (0+255),w,b
 45188  000D20  ECDC  F048         	call	i2_noteOff
 45189  000D24                     i2l5319:
 45190                           
 45191                           ;arpeggio.c: 373: octave_overflow = 0;
 45192  000D24  9433               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45193  000D26                     i2l5318:
 45194                           
 45195                           ;arpeggio.c: 374: }
 45196                           ;arpeggio.c: 378: if(skipFirstLast == 1){
 45197  000D26  A834               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 45198  000D28  D013               	goto	i2l5322
 45199                           
 45200                           ;arpeggio.c: 379: if(NUM_NOTES_PRESSED > 1){
 45201  000D2A  0E01               	movlw	1
 45202  000D2C  0100               	movlb	0	; () banked
 45203  000D2E  65E5               	cpfsgt	_NUM_NOTES_PRESSED& (0+255),b
 45204  000D30  D003               	goto	i2l5321
 45205                           
 45206                           ; BSR set to: 0
 45207                           ;arpeggio.c: 380: which_note = 1;
 45208  000D32  0E01               	movlw	1
 45209  000D34  6E57               	movwf	_which_note,c
 45210                           
 45211                           ; BSR set to: 0
 45212                           ;arpeggio.c: 381: suppress_note_off = 1;
 45213  000D36  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45214  000D38                     i2l5321:
 45215                           
 45216                           ; BSR set to: 0
 45217                           ;arpeggio.c: 382: }
 45218                           ;arpeggio.c: 386: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 45219                           
 45220                           ; BSR set to: 0
 45221  000D38  05E5               	decf	_NUM_NOTES_PRESSED& (0+255),w,b
 45222  000D3A  A4D8               	btfss	status,2,c
 45223  000D3C  D009               	goto	i2l5322
 45224                           
 45225                           ; BSR set to: 0
 45226  000D3E  0E01               	movlw	1
 45227  000D40  65F8               	cpfsgt	_OCTAVES& (0+255),b
 45228  000D42  D006               	goto	i2l5322
 45229                           
 45230                           ; BSR set to: 0
 45231                           ;arpeggio.c: 387: flag1 = 1;
 45232  000D44  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 45233                           
 45234                           ; BSR set to: 0
 45235                           ;arpeggio.c: 389: which_note = 0;
 45236  000D46  0E00               	movlw	0
 45237  000D48  6E57               	movwf	_which_note,c
 45238                           
 45239                           ; BSR set to: 0
 45240                           ;arpeggio.c: 390: which_octave++;
 45241  000D4A  2A56               	incf	_which_octave,f,c
 45242                           
 45243                           ; BSR set to: 0
 45244                           ;arpeggio.c: 391: stored_octave = which_octave;
 45245  000D4C  C056  F0E7         	movff	_which_octave,_stored_octave
 45246  000D50                     i2l5322:
 45247                           
 45248                           ;arpeggio.c: 392: }
 45249                           ;arpeggio.c: 393: }
 45250                           ;arpeggio.c: 395: if(ARPEGGIO_TYPE == DOWN_UP) {ARPEGGIO_TYPE = UP_DOWN;}
 45251                           
 45252                           ; BSR set to: 0
 45253                           
 45254                           ; BSR set to: 0
 45255  000D50  0E03               	movlw	3
 45256  000D52  0100               	movlb	0	; () banked
 45257  000D54  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45258  000D56  A4D8               	btfss	status,2,c
 45259  000D58  D002               	goto	i2l5323
 45260                           
 45261                           ; BSR set to: 0
 45262  000D5A  0E02               	movlw	2
 45263  000D5C  6FEA               	movwf	_ARPEGGIO_TYPE& (0+255),b
 45264  000D5E                     i2l5323:
 45265                           
 45266                           ;arpeggio.c: 396: }
 45267                           ;arpeggio.c: 397: }
 45268                           ;arpeggio.c: 400: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){
 45269                           
 45270                           ; BSR set to: 0
 45271                           
 45272                           ; BSR set to: 0
 45273                           
 45274                           ; BSR set to: 0
 45275  000D5E  0E05               	movlw	5
 45276  000D60  0100               	movlb	0	; () banked
 45277  000D62  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45278  000D64  B4D8               	btfsc	status,2,c
 45279  000D66  D004               	goto	i2u3851_40
 45280                           
 45281                           ; BSR set to: 0
 45282  000D68  0E04               	movlw	4
 45283  000D6A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45284  000D6C  A4D8               	btfss	status,2,c
 45285  000D6E  D056               	goto	i2l5329
 45286  000D70                     i2u3851_40:
 45287                           
 45288                           ; BSR set to: 0
 45289                           ;arpeggio.c: 402: last_octave = which_octave;
 45290  000D70  C056  F055         	movff	_which_octave,_last_octave
 45291                           
 45292                           ;arpeggio.c: 404: if((overflow == 1) && (flag1 == 0)){
 45293  000D74  B633               	btfsc	_overflow/(0+8),_overflow& (0+7),c
 45294                           
 45295                           ; BSR set to: 0
 45296  000D76  B033               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45297  000D78  D00B               	goto	i2l5327
 45298                           
 45299                           ; BSR set to: 0
 45300                           ;arpeggio.c: 405: noteOff(channel,last_note + (last_octave * 12),velocity);
 45301  000D7A  5055               	movf	_last_octave,w,c
 45302  000D7C  0D0C               	mullw	12
 45303  000D7E  50F3               	movf	prodl,w,c
 45304  000D80  25E8               	addwf	_last_note& (0+255),w,b
 45305  000D82  6E0C               	movwf	i2noteOff@pitch,c
 45306  000D84  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45307  000D88  51F6               	movf	_channel& (0+255),w,b
 45308  000D8A  ECDC  F048         	call	i2_noteOff
 45309                           
 45310                           ;arpeggio.c: 406: overflow = 0;
 45311  000D8E  9633               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45312  000D90                     i2l5327:
 45313                           
 45314                           ;arpeggio.c: 407: }
 45315                           ;arpeggio.c: 409: if((which_note > 0) && (suppress_note_off == 0)){noteOff(channel,*(arp
      +                          eggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 45316  000D90  5057               	movf	_which_note,w,c
 45317  000D92  A4D8               	btfss	status,2,c
 45318  000D94  B833               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45319  000D96  D01E               	goto	i2l5328
 45320  000D98  0EFF               	movlw	255
 45321  000D9A  6E18               	movwf	??_playArpeggio& (0+255),c
 45322  000D9C  0EFF               	movlw	255
 45323  000D9E  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45324  000DA0  5057               	movf	_which_note,w,c
 45325  000DA2  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45326  000DA4  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45327  000DA6  5018               	movf	??_playArpeggio,w,c
 45328  000DA8  261A               	addwf	??_playArpeggio+2,f,c
 45329  000DAA  5019               	movf	??_playArpeggio+1,w,c
 45330  000DAC  221B               	addwfc	??_playArpeggio+3,f,c
 45331  000DAE  501A               	movf	??_playArpeggio+2,w,c
 45332  000DB0  244F               	addwf	_arpeggioPtr,w,c
 45333  000DB2  6ED9               	movwf	fsr2l,c
 45334  000DB4  501B               	movf	??_playArpeggio+3,w,c
 45335  000DB6  2050               	addwfc	_arpeggioPtr+1,w,c
 45336  000DB8  6EDA               	movwf	fsr2h,c
 45337  000DBA  50DF               	movf	indf2,w,c
 45338  000DBC  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45339  000DBE  5056               	movf	_which_octave,w,c
 45340  000DC0  0D0C               	mullw	12
 45341  000DC2  50F3               	movf	prodl,w,c
 45342  000DC4  241C               	addwf	??_playArpeggio+4,w,c
 45343  000DC6  6E0C               	movwf	i2noteOff@pitch,c
 45344  000DC8  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45345  000DCC  0100               	movlb	0	; () banked
 45346  000DCE  51F6               	movf	_channel& (0+255),w,b
 45347  000DD0  ECDC  F048         	call	i2_noteOff
 45348  000DD4                     i2l5328:
 45349                           
 45350                           ;arpeggio.c: 410: which_octave = rand() % OCTAVES;
 45351  000DD4  ECFD  F046         	call	i2_rand	;wreg free
 45352  000DD8  C00D  F00F         	movff	?i2_rand,i2___awmod@dividend
 45353  000DDC  C00E  F010         	movff	?i2_rand+1,i2___awmod@dividend+1
 45354  000DE0  C0F8  F011         	movff	_OCTAVES,i2___awmod@divisor
 45355  000DE4  6A12               	clrf	i2___awmod@divisor+1,c
 45356  000DE6  EC0F  F043         	call	i2___awmod	;wreg free
 45357  000DEA  500F               	movf	?i2___awmod,w,c
 45358  000DEC  6E56               	movwf	_which_octave,c
 45359                           
 45360                           ;arpeggio.c: 411: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 45361  000DEE  BA33               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45362  000DF0  D015               	goto	i2l5329
 45363  000DF2  5057               	movf	_which_note,w,c
 45364  000DF4  0D01               	mullw	1
 45365  000DF6  50F3               	movf	prodl,w,c
 45366  000DF8  244F               	addwf	_arpeggioPtr,w,c
 45367  000DFA  6ED9               	movwf	fsr2l,c
 45368  000DFC  50F4               	movf	prodh,w,c
 45369  000DFE  2050               	addwfc	_arpeggioPtr+1,w,c
 45370  000E00  6EDA               	movwf	fsr2h,c
 45371  000E02  50DF               	movf	indf2,w,c
 45372  000E04  6E18               	movwf	??_playArpeggio& (0+255),c
 45373  000E06  5056               	movf	_which_octave,w,c
 45374  000E08  0D0C               	mullw	12
 45375  000E0A  50F3               	movf	prodl,w,c
 45376  000E0C  2418               	addwf	??_playArpeggio,w,c
 45377  000E0E  6E0F               	movwf	i2noteOn@pitch,c
 45378  000E10  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45379  000E14  0100               	movlb	0	; () banked
 45380  000E16  51F6               	movf	_channel& (0+255),w,b
 45381  000E18  ECC9  F045         	call	i2_noteOn
 45382  000E1C                     i2l5329:
 45383                           
 45384                           ;arpeggio.c: 412: }
 45385                           ;arpeggio.c: 414: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE =
      +                          = AS_PRESSED)) {
 45386  000E1C  0100               	movlb	0	; () banked
 45387  000E1E  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 45388  000E20  B4D8               	btfsc	status,2,c
 45389  000E22  D008               	goto	i2u3859_40
 45390                           
 45391                           ; BSR set to: 0
 45392  000E24  0E02               	movlw	2
 45393  000E26  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45394  000E28  B4D8               	btfsc	status,2,c
 45395  000E2A  D004               	goto	i2u3859_40
 45396                           
 45397                           ; BSR set to: 0
 45398  000E2C  0E06               	movlw	6
 45399  000E2E  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45400  000E30  A4D8               	btfss	status,2,c
 45401  000E32  D07F               	goto	i2l5340
 45402  000E34                     i2u3859_40:
 45403                           
 45404                           ; BSR set to: 0
 45405                           ;arpeggio.c: 416: SORT_DIRECTION = 0;
 45406                           
 45407                           ; BSR set to: 0
 45408  000E34  9A35               	bcf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 45409                           
 45410                           ; BSR set to: 0
 45411                           ;arpeggio.c: 417: sort_pitches();
 45412  000E36  ECFB  F030         	call	_sort_pitches	;wreg free
 45413                           
 45414                           ;arpeggio.c: 419: if(startingDirection == UP){
 45415  000E3A  0100               	movlb	0	; () banked
 45416  000E3C  51E9               	movf	_startingDirection& (0+255),w,b
 45417  000E3E  A4D8               	btfss	status,2,c
 45418  000E40  D038               	goto	i2l5337
 45419                           
 45420                           ; BSR set to: 0
 45421                           ;arpeggio.c: 421: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 45422  000E42  5057               	movf	_which_note,w,c
 45423  000E44  A4D8               	btfss	status,2,c
 45424                           
 45425                           ; BSR set to: 0
 45426  000E46  B833               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45427  000E48  D01D               	goto	i2l5336
 45428                           
 45429                           ; BSR set to: 0
 45430  000E4A  0EFF               	movlw	255
 45431  000E4C  6E18               	movwf	??_playArpeggio& (0+255),c
 45432  000E4E  0EFF               	movlw	255
 45433  000E50  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45434  000E52  5057               	movf	_which_note,w,c
 45435  000E54  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45436  000E56  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45437  000E58  5018               	movf	??_playArpeggio,w,c
 45438  000E5A  261A               	addwf	??_playArpeggio+2,f,c
 45439  000E5C  5019               	movf	??_playArpeggio+1,w,c
 45440  000E5E  221B               	addwfc	??_playArpeggio+3,f,c
 45441  000E60  501A               	movf	??_playArpeggio+2,w,c
 45442  000E62  244F               	addwf	_arpeggioPtr,w,c
 45443  000E64  6ED9               	movwf	fsr2l,c
 45444  000E66  501B               	movf	??_playArpeggio+3,w,c
 45445  000E68  2050               	addwfc	_arpeggioPtr+1,w,c
 45446  000E6A  6EDA               	movwf	fsr2h,c
 45447  000E6C  50DF               	movf	indf2,w,c
 45448  000E6E  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45449  000E70  5056               	movf	_which_octave,w,c
 45450  000E72  0D0C               	mullw	12
 45451  000E74  50F3               	movf	prodl,w,c
 45452  000E76  241C               	addwf	??_playArpeggio+4,w,c
 45453  000E78  6E0C               	movwf	i2noteOff@pitch,c
 45454  000E7A  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45455  000E7E  51F6               	movf	_channel& (0+255),w,b
 45456  000E80  ECDC  F048         	call	i2_noteOff
 45457  000E84                     i2l5336:
 45458                           
 45459                           ;arpeggio.c: 422: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 45460  000E84  BA33               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45461  000E86  D015               	goto	i2l5337
 45462  000E88  5057               	movf	_which_note,w,c
 45463  000E8A  0D01               	mullw	1
 45464  000E8C  50F3               	movf	prodl,w,c
 45465  000E8E  244F               	addwf	_arpeggioPtr,w,c
 45466  000E90  6ED9               	movwf	fsr2l,c
 45467  000E92  50F4               	movf	prodh,w,c
 45468  000E94  2050               	addwfc	_arpeggioPtr+1,w,c
 45469  000E96  6EDA               	movwf	fsr2h,c
 45470  000E98  50DF               	movf	indf2,w,c
 45471  000E9A  6E18               	movwf	??_playArpeggio& (0+255),c
 45472  000E9C  5056               	movf	_which_octave,w,c
 45473  000E9E  0D0C               	mullw	12
 45474  000EA0  50F3               	movf	prodl,w,c
 45475  000EA2  2418               	addwf	??_playArpeggio,w,c
 45476  000EA4  6E0F               	movwf	i2noteOn@pitch,c
 45477  000EA6  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45478  000EAA  0100               	movlb	0	; () banked
 45479  000EAC  51F6               	movf	_channel& (0+255),w,b
 45480  000EAE  ECC9  F045         	call	i2_noteOn
 45481  000EB2                     i2l5337:
 45482                           
 45483                           ;arpeggio.c: 423: }
 45484                           ;arpeggio.c: 425: if(startingDirection == DOWN) {
 45485  000EB2  0100               	movlb	0	; () banked
 45486  000EB4  05E9               	decf	_startingDirection& (0+255),w,b
 45487  000EB6  A4D8               	btfss	status,2,c
 45488  000EB8  D03C               	goto	i2l5340
 45489                           
 45490                           ; BSR set to: 0
 45491                           ;arpeggio.c: 427: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 45492  000EBA  5057               	movf	_which_note,w,c
 45493  000EBC  A4D8               	btfss	status,2,c
 45494                           
 45495                           ; BSR set to: 0
 45496  000EBE  B833               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45497  000EC0  D01F               	goto	i2l5339
 45498                           
 45499                           ; BSR set to: 0
 45500  000EC2  0EFF               	movlw	255
 45501  000EC4  6E18               	movwf	??_playArpeggio& (0+255),c
 45502  000EC6  0EFF               	movlw	255
 45503  000EC8  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45504  000ECA  5057               	movf	_which_note,w,c
 45505  000ECC  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45506  000ECE  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45507  000ED0  5018               	movf	??_playArpeggio,w,c
 45508  000ED2  261A               	addwf	??_playArpeggio+2,f,c
 45509  000ED4  5019               	movf	??_playArpeggio+1,w,c
 45510  000ED6  221B               	addwfc	??_playArpeggio+3,f,c
 45511  000ED8  501A               	movf	??_playArpeggio+2,w,c
 45512  000EDA  244F               	addwf	_arpeggioPtr,w,c
 45513  000EDC  6ED9               	movwf	fsr2l,c
 45514  000EDE  501B               	movf	??_playArpeggio+3,w,c
 45515  000EE0  2050               	addwfc	_arpeggioPtr+1,w,c
 45516  000EE2  6EDA               	movwf	fsr2h,c
 45517  000EE4  50DF               	movf	indf2,w,c
 45518  000EE6  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45519  000EE8  05F8               	decf	_OCTAVES& (0+255),w,b
 45520  000EEA  0800               	sublw	0
 45521  000EEC  2456               	addwf	_which_octave,w,c
 45522  000EEE  0D0C               	mullw	12
 45523  000EF0  50F3               	movf	prodl,w,c
 45524  000EF2  241C               	addwf	??_playArpeggio+4,w,c
 45525  000EF4  6E0C               	movwf	i2noteOff@pitch,c
 45526  000EF6  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45527  000EFA  51F6               	movf	_channel& (0+255),w,b
 45528  000EFC  ECDC  F048         	call	i2_noteOff
 45529  000F00                     i2l5339:
 45530                           
 45531                           ;arpeggio.c: 428: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 45532  000F00  BA33               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45533  000F02  D017               	goto	i2l5340
 45534  000F04  5057               	movf	_which_note,w,c
 45535  000F06  0D01               	mullw	1
 45536  000F08  50F3               	movf	prodl,w,c
 45537  000F0A  244F               	addwf	_arpeggioPtr,w,c
 45538  000F0C  6ED9               	movwf	fsr2l,c
 45539  000F0E  50F4               	movf	prodh,w,c
 45540  000F10  2050               	addwfc	_arpeggioPtr+1,w,c
 45541  000F12  6EDA               	movwf	fsr2h,c
 45542  000F14  50DF               	movf	indf2,w,c
 45543  000F16  6E18               	movwf	??_playArpeggio& (0+255),c
 45544  000F18  0100               	movlb	0	; () banked
 45545  000F1A  05F8               	decf	_OCTAVES& (0+255),w,b
 45546  000F1C  0800               	sublw	0
 45547  000F1E  2456               	addwf	_which_octave,w,c
 45548  000F20  0D0C               	mullw	12
 45549  000F22  50F3               	movf	prodl,w,c
 45550  000F24  2418               	addwf	??_playArpeggio,w,c
 45551  000F26  6E0F               	movwf	i2noteOn@pitch,c
 45552  000F28  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45553  000F2C  51F6               	movf	_channel& (0+255),w,b
 45554  000F2E  ECC9  F045         	call	i2_noteOn
 45555  000F32                     i2l5340:
 45556                           
 45557                           ;arpeggio.c: 429: }
 45558                           ;arpeggio.c: 430: }
 45559                           ;arpeggio.c: 432: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 45560  000F32  0100               	movlb	0	; () banked
 45561  000F34  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 45562  000F36  B4D8               	btfsc	status,2,c
 45563  000F38  D004               	goto	i2u3869_40
 45564                           
 45565                           ; BSR set to: 0
 45566  000F3A  0E03               	movlw	3
 45567  000F3C  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45568  000F3E  A4D8               	btfss	status,2,c
 45569  000F40  D082               	goto	i2l5349
 45570  000F42                     i2u3869_40:
 45571                           
 45572                           ; BSR set to: 0
 45573                           ;arpeggio.c: 434: SORT_DIRECTION = 1;
 45574  000F42  8A35               	bsf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 45575                           
 45576                           ; BSR set to: 0
 45577                           ;arpeggio.c: 435: sort_pitches();
 45578  000F44  ECFB  F030         	call	_sort_pitches	;wreg free
 45579                           
 45580                           ;arpeggio.c: 437: suppress_note_on = 0;
 45581  000F48  9A33               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45582                           
 45583                           ;arpeggio.c: 439: if(startingDirection == UP){
 45584  000F4A  0100               	movlb	0	; () banked
 45585  000F4C  51E9               	movf	_startingDirection& (0+255),w,b
 45586  000F4E  A4D8               	btfss	status,2,c
 45587  000F50  D03E               	goto	i2l5346
 45588                           
 45589                           ; BSR set to: 0
 45590                           ;arpeggio.c: 441: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 45591  000F52  5057               	movf	_which_note,w,c
 45592  000F54  A4D8               	btfss	status,2,c
 45593                           
 45594                           ; BSR set to: 0
 45595  000F56  B833               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45596  000F58  D020               	goto	i2l5345
 45597                           
 45598                           ; BSR set to: 0
 45599  000F5A  0EFF               	movlw	255
 45600  000F5C  6E18               	movwf	??_playArpeggio& (0+255),c
 45601  000F5E  0EFF               	movlw	255
 45602  000F60  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45603  000F62  5057               	movf	_which_note,w,c
 45604  000F64  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45605  000F66  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45606  000F68  5018               	movf	??_playArpeggio,w,c
 45607  000F6A  261A               	addwf	??_playArpeggio+2,f,c
 45608  000F6C  5019               	movf	??_playArpeggio+1,w,c
 45609  000F6E  221B               	addwfc	??_playArpeggio+3,f,c
 45610  000F70  501A               	movf	??_playArpeggio+2,w,c
 45611  000F72  244F               	addwf	_arpeggioPtr,w,c
 45612  000F74  6ED9               	movwf	fsr2l,c
 45613  000F76  501B               	movf	??_playArpeggio+3,w,c
 45614  000F78  2050               	addwfc	_arpeggioPtr+1,w,c
 45615  000F7A  6EDA               	movwf	fsr2h,c
 45616  000F7C  50DF               	movf	indf2,w,c
 45617  000F7E  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45618  000F80  51F8               	movf	_OCTAVES& (0+255),w,b
 45619  000F82  2456               	addwf	_which_octave,w,c
 45620  000F84  6E1D               	movwf	(??_playArpeggio+5)& (0+255),c
 45621  000F86  041D               	decf	??_playArpeggio+5,w,c
 45622  000F88  0D0C               	mullw	12
 45623  000F8A  50F3               	movf	prodl,w,c
 45624  000F8C  241C               	addwf	??_playArpeggio+4,w,c
 45625  000F8E  6E0C               	movwf	i2noteOff@pitch,c
 45626  000F90  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45627  000F94  51F6               	movf	_channel& (0+255),w,b
 45628  000F96  ECDC  F048         	call	i2_noteOff
 45629  000F9A                     i2l5345:
 45630                           
 45631                           ;arpeggio.c: 442: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 45632  000F9A  BA33               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45633  000F9C  D018               	goto	i2l5346
 45634  000F9E  5057               	movf	_which_note,w,c
 45635  000FA0  0D01               	mullw	1
 45636  000FA2  50F3               	movf	prodl,w,c
 45637  000FA4  244F               	addwf	_arpeggioPtr,w,c
 45638  000FA6  6ED9               	movwf	fsr2l,c
 45639  000FA8  50F4               	movf	prodh,w,c
 45640  000FAA  2050               	addwfc	_arpeggioPtr+1,w,c
 45641  000FAC  6EDA               	movwf	fsr2h,c
 45642  000FAE  50DF               	movf	indf2,w,c
 45643  000FB0  6E18               	movwf	??_playArpeggio& (0+255),c
 45644  000FB2  0100               	movlb	0	; () banked
 45645  000FB4  51F8               	movf	_OCTAVES& (0+255),w,b
 45646  000FB6  2456               	addwf	_which_octave,w,c
 45647  000FB8  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45648  000FBA  0419               	decf	??_playArpeggio+1,w,c
 45649  000FBC  0D0C               	mullw	12
 45650  000FBE  50F3               	movf	prodl,w,c
 45651  000FC0  2418               	addwf	??_playArpeggio,w,c
 45652  000FC2  6E0F               	movwf	i2noteOn@pitch,c
 45653  000FC4  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45654  000FC8  51F6               	movf	_channel& (0+255),w,b
 45655  000FCA  ECC9  F045         	call	i2_noteOn
 45656  000FCE                     i2l5346:
 45657                           
 45658                           ;arpeggio.c: 443: }
 45659                           ;arpeggio.c: 445: if(startingDirection == DOWN){
 45660  000FCE  0100               	movlb	0	; () banked
 45661  000FD0  05E9               	decf	_startingDirection& (0+255),w,b
 45662  000FD2  A4D8               	btfss	status,2,c
 45663  000FD4  D038               	goto	i2l5349
 45664                           
 45665                           ; BSR set to: 0
 45666                           ;arpeggio.c: 447: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave) * 12),velocity);}
 45667  000FD6  5057               	movf	_which_note,w,c
 45668  000FD8  A4D8               	btfss	status,2,c
 45669                           
 45670                           ; BSR set to: 0
 45671  000FDA  B833               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45672  000FDC  D01D               	goto	i2l5348
 45673                           
 45674                           ; BSR set to: 0
 45675  000FDE  0EFF               	movlw	255
 45676  000FE0  6E18               	movwf	??_playArpeggio& (0+255),c
 45677  000FE2  0EFF               	movlw	255
 45678  000FE4  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45679  000FE6  5057               	movf	_which_note,w,c
 45680  000FE8  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45681  000FEA  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45682  000FEC  5018               	movf	??_playArpeggio,w,c
 45683  000FEE  261A               	addwf	??_playArpeggio+2,f,c
 45684  000FF0  5019               	movf	??_playArpeggio+1,w,c
 45685  000FF2  221B               	addwfc	??_playArpeggio+3,f,c
 45686  000FF4  501A               	movf	??_playArpeggio+2,w,c
 45687  000FF6  244F               	addwf	_arpeggioPtr,w,c
 45688  000FF8  6ED9               	movwf	fsr2l,c
 45689  000FFA  501B               	movf	??_playArpeggio+3,w,c
 45690  000FFC  2050               	addwfc	_arpeggioPtr+1,w,c
 45691  000FFE  6EDA               	movwf	fsr2h,c
 45692  001000  50DF               	movf	indf2,w,c
 45693  001002  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45694  001004  5056               	movf	_which_octave,w,c
 45695  001006  0D0C               	mullw	12
 45696  001008  50F3               	movf	prodl,w,c
 45697  00100A  241C               	addwf	??_playArpeggio+4,w,c
 45698  00100C  6E0C               	movwf	i2noteOff@pitch,c
 45699  00100E  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45700  001012  51F6               	movf	_channel& (0+255),w,b
 45701  001014  ECDC  F048         	call	i2_noteOff
 45702  001018                     i2l5348:
 45703                           
 45704                           ;arpeggio.c: 448: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 45705  001018  BA33               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45706  00101A  D015               	goto	i2l5349
 45707  00101C  5057               	movf	_which_note,w,c
 45708  00101E  0D01               	mullw	1
 45709  001020  50F3               	movf	prodl,w,c
 45710  001022  244F               	addwf	_arpeggioPtr,w,c
 45711  001024  6ED9               	movwf	fsr2l,c
 45712  001026  50F4               	movf	prodh,w,c
 45713  001028  2050               	addwfc	_arpeggioPtr+1,w,c
 45714  00102A  6EDA               	movwf	fsr2h,c
 45715  00102C  50DF               	movf	indf2,w,c
 45716  00102E  6E18               	movwf	??_playArpeggio& (0+255),c
 45717  001030  5056               	movf	_which_octave,w,c
 45718  001032  0D0C               	mullw	12
 45719  001034  50F3               	movf	prodl,w,c
 45720  001036  2418               	addwf	??_playArpeggio,w,c
 45721  001038  6E0F               	movwf	i2noteOn@pitch,c
 45722  00103A  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45723  00103E  0100               	movlb	0	; () banked
 45724  001040  51F6               	movf	_channel& (0+255),w,b
 45725  001042  ECC9  F045         	call	i2_noteOn
 45726  001046                     i2l5349:
 45727                           
 45728                           ;arpeggio.c: 449: }
 45729                           ;arpeggio.c: 450: }
 45730                           ;arpeggio.c: 452: last_note = *(arpeggioPtr + which_note);
 45731  001046  5057               	movf	_which_note,w,c
 45732  001048  0D01               	mullw	1
 45733  00104A  50F3               	movf	prodl,w,c
 45734  00104C  244F               	addwf	_arpeggioPtr,w,c
 45735  00104E  6ED9               	movwf	fsr2l,c
 45736  001050  50F4               	movf	prodh,w,c
 45737  001052  2050               	addwfc	_arpeggioPtr+1,w,c
 45738  001054  6EDA               	movwf	fsr2h,c
 45739  001056  50DF               	movf	indf2,w,c
 45740  001058  0100               	movlb	0	; () banked
 45741  00105A  6FE8               	movwf	_last_note& (0+255),b
 45742                           
 45743                           ; BSR set to: 0
 45744                           ;arpeggio.c: 453: which_note++;
 45745  00105C  2A57               	incf	_which_note,f,c
 45746                           
 45747                           ; BSR set to: 0
 45748                           ;arpeggio.c: 454: suppress_note_off = 0;
 45749  00105E  9833               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45750                           
 45751                           ; BSR set to: 0
 45752                           ;arpeggio.c: 466: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | (ARPEGGIO_TYPE
      +                           == RANDOM) | (ARPEGGIO_TYPE == RANDOM_NON_REPEATING) | ARPEGGIO_TYPE == AS_PRESSED) {
 45753  001060  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 45754  001062  B4D8               	btfsc	status,2,c
 45755  001064  D010               	goto	i2u3882_40
 45756                           
 45757                           ; BSR set to: 0
 45758  001066  0E02               	movlw	2
 45759  001068  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45760  00106A  B4D8               	btfsc	status,2,c
 45761  00106C  D00C               	goto	i2u3882_40
 45762                           
 45763                           ; BSR set to: 0
 45764  00106E  0E05               	movlw	5
 45765  001070  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45766  001072  B4D8               	btfsc	status,2,c
 45767  001074  D008               	goto	i2u3882_40
 45768                           
 45769                           ; BSR set to: 0
 45770  001076  0E04               	movlw	4
 45771  001078  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45772  00107A  B4D8               	btfsc	status,2,c
 45773  00107C  D004               	goto	i2u3882_40
 45774                           
 45775                           ; BSR set to: 0
 45776  00107E  0E06               	movlw	6
 45777  001080  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45778  001082  A4D8               	btfss	status,2,c
 45779  001084  D039               	goto	i2l5361
 45780  001086                     i2u3882_40:
 45781                           
 45782                           ; BSR set to: 0
 45783                           ;arpeggio.c: 468: if(which_note >= (NUM_NOTES_PRESSED)){
 45784                           
 45785                           ; BSR set to: 0
 45786  001086  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45787  001088  5C57               	subwf	_which_note,w,c
 45788  00108A  A0D8               	btfss	status,0,c
 45789  00108C  D01E               	goto	i2l5360
 45790                           
 45791                           ; BSR set to: 0
 45792                           ;arpeggio.c: 470: which_note = 0;
 45793  00108E  0E00               	movlw	0
 45794  001090  6E57               	movwf	_which_note,c
 45795                           
 45796                           ;arpeggio.c: 473: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | ARPEGGIO_TYPE 
      +                          == AS_PRESSED) {
 45797  001092  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 45798  001094  B4D8               	btfsc	status,2,c
 45799  001096  D007               	goto	i2u3886_40
 45800                           
 45801                           ; BSR set to: 0
 45802  001098  0E02               	movlw	2
 45803  00109A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45804  00109C  B4D8               	btfsc	status,2,c
 45805  00109E  D003               	goto	i2u3886_40
 45806                           
 45807                           ; BSR set to: 0
 45808  0010A0  0E06               	movlw	6
 45809  0010A2  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45810  0010A4  B4D8               	btfsc	status,2,c
 45811  0010A6                     i2u3886_40:
 45812                           
 45813                           ; BSR set to: 0
 45814                           ;arpeggio.c: 474: which_octave++;
 45815                           
 45816                           ; BSR set to: 0
 45817  0010A6  2A56               	incf	_which_octave,f,c
 45818                           
 45819                           ; BSR set to: 0
 45820                           ;arpeggio.c: 475: }
 45821                           ;arpeggio.c: 477: overflow = 1;
 45822                           
 45823                           ; BSR set to: 0
 45824  0010A8  8633               	bsf	_overflow/(0+8),_overflow& (0+7),c
 45825                           
 45826                           ; BSR set to: 0
 45827                           ;arpeggio.c: 478: flag1 = 0;
 45828  0010AA  9033               	bcf	_flag1/(0+8),_flag1& (0+7),c
 45829                           
 45830                           ; BSR set to: 0
 45831                           ;arpeggio.c: 481: if(ARPEGGIO_TYPE == RANDOM) {
 45832  0010AC  0E05               	movlw	5
 45833  0010AE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45834  0010B0  B4D8               	btfsc	status,2,c
 45835                           
 45836                           ; BSR set to: 0
 45837                           ;arpeggio.c: 482: if(AUTO_RANDOMIZE == 0) {random_pitches();}
 45838  0010B2  BA34               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 45839  0010B4  D002               	goto	i2l5358
 45840                           
 45841                           ; BSR set to: 0
 45842  0010B6  EC24  F046         	call	i2_random_pitches	;wreg free
 45843  0010BA                     i2l5358:
 45844                           
 45845                           ;arpeggio.c: 483: }
 45846                           ;arpeggio.c: 484: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {
 45847  0010BA  0E04               	movlw	4
 45848  0010BC  0100               	movlb	0	; () banked
 45849  0010BE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45850  0010C0  B4D8               	btfsc	status,2,c
 45851                           
 45852                           ; BSR set to: 0
 45853                           ;arpeggio.c: 485: if(AUTO_RANDOMIZE == 0) {random_pitches_non_repeating();}
 45854  0010C2  BA34               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 45855  0010C4  D002               	goto	i2l5360
 45856                           
 45857                           ; BSR set to: 0
 45858  0010C6  EC84  F03E         	call	i2_random_pitches_non_repeating	;wreg free
 45859  0010CA                     i2l5360:
 45860                           
 45861                           ;arpeggio.c: 486: }
 45862                           ;arpeggio.c: 487: }
 45863                           ;arpeggio.c: 489: if(which_octave>=OCTAVES) {
 45864  0010CA  0100               	movlb	0	; () banked
 45865  0010CC  51F8               	movf	_OCTAVES& (0+255),w,b
 45866  0010CE  6E18               	movwf	??_playArpeggio& (0+255),c
 45867  0010D0  6A19               	clrf	(??_playArpeggio+1)& (0+255),c
 45868  0010D2  C056  F01A         	movff	_which_octave,??_playArpeggio+2
 45869  0010D6  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45870  0010D8  BE1A               	btfsc	(??_playArpeggio+2)& (0+255),7,c
 45871  0010DA  061B               	decf	(??_playArpeggio+3)& (0+255),f,c
 45872  0010DC  5018               	movf	??_playArpeggio,w,c
 45873  0010DE  5C1A               	subwf	??_playArpeggio+2,w,c
 45874  0010E0  501B               	movf	??_playArpeggio+3,w,c
 45875  0010E2  0A80               	xorlw	128
 45876  0010E4  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45877  0010E6  5019               	movf	??_playArpeggio+1,w,c
 45878  0010E8  0A80               	xorlw	128
 45879  0010EA  581C               	subwfb	(??_playArpeggio+4)& (0+255),w,c
 45880  0010EC  A0D8               	btfss	status,0,c
 45881  0010EE  D004               	goto	i2l5361
 45882                           
 45883                           ; BSR set to: 0
 45884                           ;arpeggio.c: 490: which_octave = 0;
 45885  0010F0  0E00               	movlw	0
 45886  0010F2  6E56               	movwf	_which_octave,c
 45887                           
 45888                           ; BSR set to: 0
 45889                           ;arpeggio.c: 491: octave_overflow = 1;
 45890  0010F4  8433               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45891                           
 45892                           ; BSR set to: 0
 45893                           ;arpeggio.c: 492: flag2 = 0;
 45894  0010F6  9E32               	bcf	_flag2/(0+8),_flag2& (0+7),c
 45895  0010F8                     i2l5361:
 45896                           
 45897                           ; BSR set to: 0
 45898                           ;arpeggio.c: 493: }
 45899                           ;arpeggio.c: 494: }
 45900                           ;arpeggio.c: 497: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 45901                           
 45902                           ; BSR set to: 0
 45903                           
 45904                           ; BSR set to: 0
 45905  0010F8  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 45906  0010FA  B4D8               	btfsc	status,2,c
 45907  0010FC  D004               	goto	i2u3893_40
 45908                           
 45909                           ; BSR set to: 0
 45910  0010FE  0E03               	movlw	3
 45911  001100  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45912  001102  A4D8               	btfss	status,2,c
 45913  001104  0012               	return	
 45914  001106                     i2u3893_40:
 45915                           
 45916                           ; BSR set to: 0
 45917                           ;arpeggio.c: 499: if(which_note>=(NUM_NOTES_PRESSED)){
 45918                           
 45919                           ; BSR set to: 0
 45920  001106  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45921  001108  5C57               	subwf	_which_note,w,c
 45922  00110A  A0D8               	btfss	status,0,c
 45923  00110C  D005               	goto	i2l5365
 45924                           
 45925                           ; BSR set to: 0
 45926                           ;arpeggio.c: 500: which_note = 0;
 45927  00110E  0E00               	movlw	0
 45928  001110  6E57               	movwf	_which_note,c
 45929                           
 45930                           ; BSR set to: 0
 45931                           ;arpeggio.c: 501: which_octave--;
 45932  001112  0656               	decf	_which_octave,f,c
 45933                           
 45934                           ; BSR set to: 0
 45935                           ;arpeggio.c: 502: overflow = 1;
 45936  001114  8633               	bsf	_overflow/(0+8),_overflow& (0+7),c
 45937                           
 45938                           ; BSR set to: 0
 45939                           ;arpeggio.c: 503: flag1 = 0;
 45940  001116  9033               	bcf	_flag1/(0+8),_flag1& (0+7),c
 45941  001118                     i2l5365:
 45942                           
 45943                           ; BSR set to: 0
 45944                           ;arpeggio.c: 504: }
 45945                           ;arpeggio.c: 505: if(which_octave <= (OCTAVES * -1)) {
 45946                           
 45947                           ; BSR set to: 0
 45948  001118  C056  F018         	movff	_which_octave,??_playArpeggio
 45949  00111C  6A19               	clrf	(??_playArpeggio+1)& (0+255),c
 45950  00111E  BE18               	btfsc	??_playArpeggio& (0+255),7,c
 45951  001120  0619               	decf	(??_playArpeggio+1)& (0+255),f,c
 45952  001122  51F8               	movf	_OCTAVES& (0+255),w,b
 45953  001124  0D01               	mullw	1
 45954  001126  1EF3               	comf	prodl,f,c
 45955  001128  1EF4               	comf	prodh,f,c
 45956  00112A  4AF3               	infsnz	prodl,f,c
 45957  00112C  2AF4               	incf	prodh,f,c
 45958  00112E  5018               	movf	??_playArpeggio,w,c
 45959  001130  5CF3               	subwf	prodl,w,c
 45960  001132  50F4               	movf	prodh,w,c
 45961  001134  0A80               	xorlw	128
 45962  001136  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45963  001138  5019               	movf	??_playArpeggio+1,w,c
 45964  00113A  0A80               	xorlw	128
 45965  00113C  581A               	subwfb	(??_playArpeggio+2)& (0+255),w,c
 45966  00113E  A0D8               	btfss	status,0,c
 45967  001140  0012               	return	
 45968                           
 45969                           ; BSR set to: 0
 45970                           ;arpeggio.c: 506: which_octave = 0;
 45971  001142  0E00               	movlw	0
 45972  001144  6E56               	movwf	_which_octave,c
 45973                           
 45974                           ; BSR set to: 0
 45975                           ;arpeggio.c: 507: octave_overflow = 1;
 45976  001146  8433               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45977                           
 45978                           ; BSR set to: 0
 45979                           ;arpeggio.c: 508: flag2 = 0;
 45980  001148  9E32               	bcf	_flag2/(0+8),_flag2& (0+7),c
 45981                           
 45982                           ; BSR set to: 0
 45983  00114A  0012               	return	
 45984  00114C                     __end_of_playArpeggio:
 45985                           	opt stack 0
 45986                           pclatu	equ	0xFFB
 45987                           pclath	equ	0xFFA
 45988                           tblptru	equ	0xFF8
 45989                           tblptrh	equ	0xFF7
 45990                           tblptrl	equ	0xFF6
 45991                           tablat	equ	0xFF5
 45992                           prodh	equ	0xFF4
 45993                           prodl	equ	0xFF3
 45994                           intcon	equ	0xFF2
 45995                           intcon2	equ	0xFF1
 45996                           postinc0	equ	0xFEE
 45997                           fsr0h	equ	0xFEA
 45998                           fsr0l	equ	0xFE9
 45999                           wreg	equ	0xFE8
 46000                           indf1	equ	0xFE7
 46001                           postinc1	equ	0xFE6
 46002                           postdec1	equ	0xFE5
 46003                           fsr1h	equ	0xFE2
 46004                           fsr1l	equ	0xFE1
 46005                           indf2	equ	0xFDF
 46006                           postinc2	equ	0xFDE
 46007                           postdec2	equ	0xFDD
 46008                           plusw2	equ	0xFDB
 46009                           fsr2h	equ	0xFDA
 46010                           fsr2l	equ	0xFD9
 46011                           status	equ	0xFD8
 46012                           
 46013 ;; *************** function i2_random_pitches_non_repeating *****************
 46014 ;; Defined at:
 46015 ;;		line 263 in file "arpeggio.c"
 46016 ;; Parameters:    Size  Location     Type
 46017 ;;		None
 46018 ;; Auto vars:     Size  Location     Type
 46019 ;;  random_pitch    1   22[COMRAM] unsigned char 
 46020 ;;  random_pitch    1   21[COMRAM] unsigned char 
 46021 ;;  random_pitch    1   20[COMRAM] unsigned char 
 46022 ;; Return value:  Size  Location     Type
 46023 ;;                  1    wreg      void 
 46024 ;; Registers used:
 46025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 46026 ;; Tracked objects:
 46027 ;;		On entry : 0/0
 46028 ;;		On exit  : 0/0
 46029 ;;		Unchanged: 0/0
 46030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46032 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46034 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46035 ;;Total ram usage:        3 bytes
 46036 ;; Hardware stack levels used:    1
 46037 ;; Hardware stack levels required when called:    2
 46038 ;; This function calls:
 46039 ;;		i2___awmod
 46040 ;;		i2_rand
 46041 ;; This function is called by:
 46042 ;;		_playArpeggio
 46043 ;; This function uses a non-reentrant model
 46044 ;;
 46045                           
 46046                           	psect	text143
 46047  007D08                     __ptext143:
 46048                           	opt stack 0
 46049  007D08                     i2_random_pitches_non_repeating:
 46050                           	opt stack 14
 46051                           
 46052                           ;arpeggio.c: 265: if(NUM_NOTES_PRESSED == 0){return;}
 46053                           
 46054                           ; BSR set to: 0
 46055                           ;incstack = 0
 46056  007D08  0100               	movlb	0	; () banked
 46057  007D0A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 46058  007D0C  B4D8               	btfsc	status,2,c
 46059  007D0E  0012               	return	
 46060                           
 46061                           ; BSR set to: 0
 46062                           ;arpeggio.c: 267: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++) {
 46063                           
 46064                           ; BSR set to: 0
 46065                           
 46066                           ; BSR set to: 0
 46067  007D10  0E00               	movlw	0
 46068  007D12  6E17               	movwf	i2random_pitches_non_repeating@i,c
 46069  007D14  D034               	goto	i2l5285
 46070  007D16                     
 46071                           ; BSR set to: 0
 46072                           ;arpeggio.c: 268: unsigned char temp = ARPEGGIO_RANDOM[i];
 46073                           
 46074                           ; BSR set to: 0
 46075  007D16  5017               	movf	i2random_pitches_non_repeating@i,w,c
 46076  007D18  0D01               	mullw	1
 46077  007D1A  0E8C               	movlw	low _ARPEGGIO_RANDOM
 46078  007D1C  24F3               	addwf	prodl,w,c
 46079  007D1E  6ED9               	movwf	fsr2l,c
 46080  007D20  0E02               	movlw	high _ARPEGGIO_RANDOM
 46081  007D22  20F4               	addwfc	prodh,w,c
 46082  007D24  6EDA               	movwf	fsr2h,c
 46083  007D26  50DF               	movf	indf2,w,c
 46084  007D28  6E15               	movwf	i2random_pitches_non_repeating@temp,c
 46085                           
 46086                           ; BSR set to: 0
 46087                           ;arpeggio.c: 269: unsigned char randomIndex = rand() % NUM_NOTES_PRESSED;
 46088  007D2A  ECFD  F046         	call	i2_rand	;wreg free
 46089  007D2E  C00D  F00F         	movff	?i2_rand,i2___awmod@dividend
 46090  007D32  C00E  F010         	movff	?i2_rand+1,i2___awmod@dividend+1
 46091  007D36  C0E5  F011         	movff	_NUM_NOTES_PRESSED,i2___awmod@divisor
 46092  007D3A  6A12               	clrf	i2___awmod@divisor+1,c
 46093  007D3C  EC0F  F043         	call	i2___awmod	;wreg free
 46094  007D40  500F               	movf	?i2___awmod,w,c
 46095  007D42  6E16               	movwf	i2random_pitches_non_repeating@randomIndex,c
 46096                           
 46097                           ;arpeggio.c: 270: ARPEGGIO_RANDOM[i] = ARPEGGIO_RANDOM[randomIndex];
 46098  007D44  5016               	movf	i2random_pitches_non_repeating@randomIndex,w,c
 46099  007D46  0D01               	mullw	1
 46100  007D48  0E8C               	movlw	low _ARPEGGIO_RANDOM
 46101  007D4A  24F3               	addwf	prodl,w,c
 46102  007D4C  6ED9               	movwf	fsr2l,c
 46103  007D4E  0E02               	movlw	high _ARPEGGIO_RANDOM
 46104  007D50  20F4               	addwfc	prodh,w,c
 46105  007D52  6EDA               	movwf	fsr2h,c
 46106  007D54  5017               	movf	i2random_pitches_non_repeating@i,w,c
 46107  007D56  0D01               	mullw	1
 46108  007D58  0E8C               	movlw	low _ARPEGGIO_RANDOM
 46109  007D5A  24F3               	addwf	prodl,w,c
 46110  007D5C  6EE1               	movwf	fsr1l,c
 46111  007D5E  0E02               	movlw	high _ARPEGGIO_RANDOM
 46112  007D60  20F4               	addwfc	prodh,w,c
 46113  007D62  6EE2               	movwf	fsr1h,c
 46114  007D64  CFDF FFE7          	movff	indf2,indf1
 46115                           
 46116                           ;arpeggio.c: 271: ARPEGGIO_RANDOM[randomIndex] = temp;
 46117  007D68  5016               	movf	i2random_pitches_non_repeating@randomIndex,w,c
 46118  007D6A  0D01               	mullw	1
 46119  007D6C  0E8C               	movlw	low _ARPEGGIO_RANDOM
 46120  007D6E  24F3               	addwf	prodl,w,c
 46121  007D70  6ED9               	movwf	fsr2l,c
 46122  007D72  0E02               	movlw	high _ARPEGGIO_RANDOM
 46123  007D74  20F4               	addwfc	prodh,w,c
 46124  007D76  6EDA               	movwf	fsr2h,c
 46125  007D78  C015  FFDF         	movff	i2random_pitches_non_repeating@temp,indf2
 46126  007D7C  2A17               	incf	i2random_pitches_non_repeating@i,f,c
 46127  007D7E                     i2l5285:
 46128  007D7E  0100               	movlb	0	; () banked
 46129  007D80  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 46130  007D82  5C17               	subwf	i2random_pitches_non_repeating@i,w,c
 46131  007D84  B0D8               	btfsc	status,0,c
 46132  007D86  0012               	return	
 46133  007D88  D7C6               	goto	i2l5286
 46134  007D8A                     __end_ofi2_random_pitches_non_repeating:
 46135                           	opt stack 0
 46136                           pclatu	equ	0xFFB
 46137                           pclath	equ	0xFFA
 46138                           tblptru	equ	0xFF8
 46139                           tblptrh	equ	0xFF7
 46140                           tblptrl	equ	0xFF6
 46141                           tablat	equ	0xFF5
 46142                           prodh	equ	0xFF4
 46143                           prodl	equ	0xFF3
 46144                           intcon	equ	0xFF2
 46145                           intcon2	equ	0xFF1
 46146                           postinc0	equ	0xFEE
 46147                           fsr0h	equ	0xFEA
 46148                           fsr0l	equ	0xFE9
 46149                           wreg	equ	0xFE8
 46150                           indf1	equ	0xFE7
 46151                           postinc1	equ	0xFE6
 46152                           postdec1	equ	0xFE5
 46153                           fsr1h	equ	0xFE2
 46154                           fsr1l	equ	0xFE1
 46155                           indf2	equ	0xFDF
 46156                           postinc2	equ	0xFDE
 46157                           postdec2	equ	0xFDD
 46158                           plusw2	equ	0xFDB
 46159                           fsr2h	equ	0xFDA
 46160                           fsr2l	equ	0xFD9
 46161                           status	equ	0xFD8
 46162                           
 46163 ;; *************** function i2_random_pitches *****************
 46164 ;; Defined at:
 46165 ;;		line 252 in file "arpeggio.c"
 46166 ;; Parameters:    Size  Location     Type
 46167 ;;		None
 46168 ;; Auto vars:     Size  Location     Type
 46169 ;;  random_pitch    1   21[COMRAM] unsigned char 
 46170 ;;  random_pitch    1   20[COMRAM] unsigned char 
 46171 ;; Return value:  Size  Location     Type
 46172 ;;                  1    wreg      void 
 46173 ;; Registers used:
 46174 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 46175 ;; Tracked objects:
 46176 ;;		On entry : 0/0
 46177 ;;		On exit  : 0/0
 46178 ;;		Unchanged: 0/0
 46179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46181 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46183 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46184 ;;Total ram usage:        2 bytes
 46185 ;; Hardware stack levels used:    1
 46186 ;; Hardware stack levels required when called:    2
 46187 ;; This function calls:
 46188 ;;		i2___awmod
 46189 ;;		i2_rand
 46190 ;; This function is called by:
 46191 ;;		_playArpeggio
 46192 ;; This function uses a non-reentrant model
 46193 ;;
 46194                           
 46195                           	psect	text144
 46196  008C48                     __ptext144:
 46197                           	opt stack 0
 46198  008C48                     i2_random_pitches:
 46199                           	opt stack 14
 46200                           
 46201                           ;arpeggio.c: 254: if(NUM_NOTES_PRESSED == 0){return;}
 46202                           
 46203                           ; BSR set to: 0
 46204                           ;incstack = 0
 46205  008C48  0100               	movlb	0	; () banked
 46206  008C4A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 46207  008C4C  B4D8               	btfsc	status,2,c
 46208  008C4E  0012               	return	
 46209                           
 46210                           ; BSR set to: 0
 46211                           ;arpeggio.c: 256: for (unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 46212                           
 46213                           ; BSR set to: 0
 46214                           
 46215                           ; BSR set to: 0
 46216  008C50  0E00               	movlw	0
 46217  008C52  6E16               	movwf	i2random_pitches@i,c
 46218  008C54  D020               	goto	i2l5278
 46219  008C56                     
 46220                           ; BSR set to: 0
 46221                           ;arpeggio.c: 257: unsigned char random_array_index = rand() % (NUM_NOTES_PRESSED);
 46222                           
 46223                           ; BSR set to: 0
 46224  008C56  ECFD  F046         	call	i2_rand	;wreg free
 46225  008C5A  C00D  F00F         	movff	?i2_rand,i2___awmod@dividend
 46226  008C5E  C00E  F010         	movff	?i2_rand+1,i2___awmod@dividend+1
 46227  008C62  C0E5  F011         	movff	_NUM_NOTES_PRESSED,i2___awmod@divisor
 46228  008C66  6A12               	clrf	i2___awmod@divisor+1,c
 46229  008C68  EC0F  F043         	call	i2___awmod	;wreg free
 46230  008C6C  500F               	movf	?i2___awmod,w,c
 46231  008C6E  6E15               	movwf	i2random_pitches@random_array_index,c
 46232                           
 46233                           ;arpeggio.c: 258: ARPEGGIO_RANDOM[i] = ARPEGGIO[random_array_index];
 46234  008C70  5015               	movf	i2random_pitches@random_array_index,w,c
 46235  008C72  0D01               	mullw	1
 46236  008C74  0E72               	movlw	low _ARPEGGIO
 46237  008C76  24F3               	addwf	prodl,w,c
 46238  008C78  6ED9               	movwf	fsr2l,c
 46239  008C7A  0E01               	movlw	high _ARPEGGIO
 46240  008C7C  20F4               	addwfc	prodh,w,c
 46241  008C7E  6EDA               	movwf	fsr2h,c
 46242  008C80  5016               	movf	i2random_pitches@i,w,c
 46243  008C82  0D01               	mullw	1
 46244  008C84  0E8C               	movlw	low _ARPEGGIO_RANDOM
 46245  008C86  24F3               	addwf	prodl,w,c
 46246  008C88  6EE1               	movwf	fsr1l,c
 46247  008C8A  0E02               	movlw	high _ARPEGGIO_RANDOM
 46248  008C8C  20F4               	addwfc	prodh,w,c
 46249  008C8E  6EE2               	movwf	fsr1h,c
 46250  008C90  CFDF FFE7          	movff	indf2,indf1
 46251  008C94  2A16               	incf	i2random_pitches@i,f,c
 46252  008C96                     i2l5278:
 46253  008C96  0100               	movlb	0	; () banked
 46254  008C98  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 46255  008C9A  5C16               	subwf	i2random_pitches@i,w,c
 46256  008C9C  B0D8               	btfsc	status,0,c
 46257  008C9E  0012               	return	
 46258  008CA0  D7DA               	goto	i2l5279
 46259  008CA2                     __end_ofi2_random_pitches:
 46260                           	opt stack 0
 46261                           pclatu	equ	0xFFB
 46262                           pclath	equ	0xFFA
 46263                           tblptru	equ	0xFF8
 46264                           tblptrh	equ	0xFF7
 46265                           tblptrl	equ	0xFF6
 46266                           tablat	equ	0xFF5
 46267                           prodh	equ	0xFF4
 46268                           prodl	equ	0xFF3
 46269                           intcon	equ	0xFF2
 46270                           intcon2	equ	0xFF1
 46271                           postinc0	equ	0xFEE
 46272                           fsr0h	equ	0xFEA
 46273                           fsr0l	equ	0xFE9
 46274                           wreg	equ	0xFE8
 46275                           indf1	equ	0xFE7
 46276                           postinc1	equ	0xFE6
 46277                           postdec1	equ	0xFE5
 46278                           fsr1h	equ	0xFE2
 46279                           fsr1l	equ	0xFE1
 46280                           indf2	equ	0xFDF
 46281                           postinc2	equ	0xFDE
 46282                           postdec2	equ	0xFDD
 46283                           plusw2	equ	0xFDB
 46284                           fsr2h	equ	0xFDA
 46285                           fsr2l	equ	0xFD9
 46286                           status	equ	0xFD8
 46287                           
 46288 ;; *************** function i2_rand *****************
 46289 ;; Defined at:
 46290 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 46291 ;; Parameters:    Size  Location     Type
 46292 ;;		None
 46293 ;; Auto vars:     Size  Location     Type
 46294 ;;		None
 46295 ;; Return value:  Size  Location     Type
 46296 ;;                  2   12[COMRAM] int 
 46297 ;; Registers used:
 46298 ;;		wreg, status,2, status,0, cstack
 46299 ;; Tracked objects:
 46300 ;;		On entry : 0/0
 46301 ;;		On exit  : 0/0
 46302 ;;		Unchanged: 0/0
 46303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46304 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46307 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46308 ;;Total ram usage:        2 bytes
 46309 ;; Hardware stack levels used:    1
 46310 ;; Hardware stack levels required when called:    1
 46311 ;; This function calls:
 46312 ;;		i2___lmul
 46313 ;; This function is called by:
 46314 ;;		_playArpeggio
 46315 ;;		i2_random_pitches
 46316 ;;		i2_random_pitches_non_repeating
 46317 ;; This function uses a non-reentrant model
 46318 ;;
 46319                           
 46320                           	psect	text145
 46321  008DFA                     __ptext145:
 46322                           	opt stack 0
 46323  008DFA                     i2_rand:
 46324                           	opt stack 14
 46325                           
 46326                           ; BSR set to: 0
 46327                           ;incstack = 0
 46328  008DFA  C1E7  F001         	movff	_randx,i2___lmul@multiplier
 46329  008DFE  C1E8  F002         	movff	_randx+1,i2___lmul@multiplier+1
 46330  008E02  C1E9  F003         	movff	_randx+2,i2___lmul@multiplier+2
 46331  008E06  C1EA  F004         	movff	_randx+3,i2___lmul@multiplier+3
 46332  008E0A  0E6D               	movlw	109
 46333  008E0C  6E05               	movwf	i2___lmul@multiplicand,c
 46334  008E0E  0E4E               	movlw	78
 46335  008E10  6E06               	movwf	i2___lmul@multiplicand+1,c
 46336  008E12  0EC6               	movlw	198
 46337  008E14  6E07               	movwf	i2___lmul@multiplicand+2,c
 46338  008E16  0E41               	movlw	65
 46339  008E18  6E08               	movwf	i2___lmul@multiplicand+3,c
 46340  008E1A  ECA8  F046         	call	i2___lmul	;wreg free
 46341  008E1E  C001  F1E7         	movff	?i2___lmul,_randx
 46342  008E22  C002  F1E8         	movff	?i2___lmul+1,_randx+1
 46343  008E26  C003  F1E9         	movff	?i2___lmul+2,_randx+2
 46344  008E2A  C004  F1EA         	movff	?i2___lmul+3,_randx+3
 46345  008E2E  0E39               	movlw	57
 46346  008E30  0101               	movlb	1	; () banked
 46347  008E32  27E7               	addwf	_randx& (0+255),f,b
 46348  008E34  0E30               	movlw	48
 46349  008E36  23E8               	addwfc	(_randx+1)& (0+255),f,b
 46350  008E38  0E00               	movlw	0
 46351  008E3A  23E9               	addwfc	(_randx+2)& (0+255),f,b
 46352  008E3C  0E00               	movlw	0
 46353  008E3E  23EA               	addwfc	(_randx+3)& (0+255),f,b
 46354                           
 46355                           ; BSR set to: 1
 46356  008E40  0EFF               	movlw	255
 46357  008E42  15E9               	andwf	(_randx+2)& (0+255),w,b
 46358  008E44  6E0D               	movwf	?i2_rand,c
 46359  008E46  0E7F               	movlw	127
 46360  008E48  15EA               	andwf	(_randx+3)& (0+255),w,b
 46361  008E4A  6E0E               	movwf	?i2_rand+1,c
 46362  008E4C  0012               	return	
 46363  008E4E                     __end_ofi2_rand:
 46364                           	opt stack 0
 46365                           pclatu	equ	0xFFB
 46366                           pclath	equ	0xFFA
 46367                           tblptru	equ	0xFF8
 46368                           tblptrh	equ	0xFF7
 46369                           tblptrl	equ	0xFF6
 46370                           tablat	equ	0xFF5
 46371                           prodh	equ	0xFF4
 46372                           prodl	equ	0xFF3
 46373                           intcon	equ	0xFF2
 46374                           intcon2	equ	0xFF1
 46375                           postinc0	equ	0xFEE
 46376                           fsr0h	equ	0xFEA
 46377                           fsr0l	equ	0xFE9
 46378                           wreg	equ	0xFE8
 46379                           indf1	equ	0xFE7
 46380                           postinc1	equ	0xFE6
 46381                           postdec1	equ	0xFE5
 46382                           fsr1h	equ	0xFE2
 46383                           fsr1l	equ	0xFE1
 46384                           indf2	equ	0xFDF
 46385                           postinc2	equ	0xFDE
 46386                           postdec2	equ	0xFDD
 46387                           plusw2	equ	0xFDB
 46388                           fsr2h	equ	0xFDA
 46389                           fsr2l	equ	0xFD9
 46390                           status	equ	0xFD8
 46391                           
 46392 ;; *************** function i2___lmul *****************
 46393 ;; Defined at:
 46394 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 46395 ;; Parameters:    Size  Location     Type
 46396 ;;  multiplier      4    0[COMRAM] unsigned long 
 46397 ;;  multiplicand    4    4[COMRAM] unsigned long 
 46398 ;; Auto vars:     Size  Location     Type
 46399 ;;  __lmul          4    8[COMRAM] unsigned long 
 46400 ;; Return value:  Size  Location     Type
 46401 ;;                  4    0[COMRAM] unsigned long 
 46402 ;; Registers used:
 46403 ;;		wreg, status,2, status,0
 46404 ;; Tracked objects:
 46405 ;;		On entry : 0/0
 46406 ;;		On exit  : 0/0
 46407 ;;		Unchanged: 0/0
 46408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46409 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46410 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46412 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46413 ;;Total ram usage:       12 bytes
 46414 ;; Hardware stack levels used:    1
 46415 ;; This function calls:
 46416 ;;		Nothing
 46417 ;; This function is called by:
 46418 ;;		i2_rand
 46419 ;; This function uses a non-reentrant model
 46420 ;;
 46421                           
 46422                           	psect	text146
 46423  008D50                     __ptext146:
 46424                           	opt stack 0
 46425  008D50                     i2___lmul:
 46426                           	opt stack 14
 46427                           
 46428                           ; BSR set to: 1
 46429                           ;incstack = 0
 46430  008D50  0E00               	movlw	0
 46431  008D52  6E09               	movwf	i2___lmul@product,c
 46432  008D54  0E00               	movlw	0
 46433  008D56  6E0A               	movwf	i2___lmul@product+1,c
 46434  008D58  0E00               	movlw	0
 46435  008D5A  6E0B               	movwf	i2___lmul@product+2,c
 46436  008D5C  0E00               	movlw	0
 46437  008D5E  6E0C               	movwf	i2___lmul@product+3,c
 46438  008D60  A001               	btfss	i2___lmul@multiplier,0,c
 46439  008D62  D008               	goto	i2l5440
 46440  008D64  5005               	movf	i2___lmul@multiplicand,w,c
 46441  008D66  2609               	addwf	i2___lmul@product,f,c
 46442  008D68  5006               	movf	i2___lmul@multiplicand+1,w,c
 46443  008D6A  220A               	addwfc	i2___lmul@product+1,f,c
 46444  008D6C  5007               	movf	i2___lmul@multiplicand+2,w,c
 46445  008D6E  220B               	addwfc	i2___lmul@product+2,f,c
 46446  008D70  5008               	movf	i2___lmul@multiplicand+3,w,c
 46447  008D72  220C               	addwfc	i2___lmul@product+3,f,c
 46448  008D74                     i2l5440:
 46449  008D74  90D8               	bcf	status,0,c
 46450  008D76  3605               	rlcf	i2___lmul@multiplicand,f,c
 46451  008D78  3606               	rlcf	i2___lmul@multiplicand+1,f,c
 46452  008D7A  3607               	rlcf	i2___lmul@multiplicand+2,f,c
 46453  008D7C  3608               	rlcf	i2___lmul@multiplicand+3,f,c
 46454  008D7E  90D8               	bcf	status,0,c
 46455  008D80  3204               	rrcf	i2___lmul@multiplier+3,f,c
 46456  008D82  3203               	rrcf	i2___lmul@multiplier+2,f,c
 46457  008D84  3202               	rrcf	i2___lmul@multiplier+1,f,c
 46458  008D86  3201               	rrcf	i2___lmul@multiplier,f,c
 46459  008D88  5001               	movf	i2___lmul@multiplier,w,c
 46460  008D8A  1002               	iorwf	i2___lmul@multiplier+1,w,c
 46461  008D8C  1003               	iorwf	i2___lmul@multiplier+2,w,c
 46462  008D8E  1004               	iorwf	i2___lmul@multiplier+3,w,c
 46463  008D90  A4D8               	btfss	status,2,c
 46464  008D92  D7E6               	goto	i2l5439
 46465  008D94  C009  F001         	movff	i2___lmul@product,?i2___lmul
 46466  008D98  C00A  F002         	movff	i2___lmul@product+1,?i2___lmul+1
 46467  008D9C  C00B  F003         	movff	i2___lmul@product+2,?i2___lmul+2
 46468  008DA0  C00C  F004         	movff	i2___lmul@product+3,?i2___lmul+3
 46469  008DA4  0012               	return		;funcret
 46470  008DA6                     __end_ofi2___lmul:
 46471                           	opt stack 0
 46472                           pclatu	equ	0xFFB
 46473                           pclath	equ	0xFFA
 46474                           tblptru	equ	0xFF8
 46475                           tblptrh	equ	0xFF7
 46476                           tblptrl	equ	0xFF6
 46477                           tablat	equ	0xFF5
 46478                           prodh	equ	0xFF4
 46479                           prodl	equ	0xFF3
 46480                           intcon	equ	0xFF2
 46481                           intcon2	equ	0xFF1
 46482                           postinc0	equ	0xFEE
 46483                           fsr0h	equ	0xFEA
 46484                           fsr0l	equ	0xFE9
 46485                           wreg	equ	0xFE8
 46486                           indf1	equ	0xFE7
 46487                           postinc1	equ	0xFE6
 46488                           postdec1	equ	0xFE5
 46489                           fsr1h	equ	0xFE2
 46490                           fsr1l	equ	0xFE1
 46491                           indf2	equ	0xFDF
 46492                           postinc2	equ	0xFDE
 46493                           postdec2	equ	0xFDD
 46494                           plusw2	equ	0xFDB
 46495                           fsr2h	equ	0xFDA
 46496                           fsr2l	equ	0xFD9
 46497                           status	equ	0xFD8
 46498                           
 46499 ;; *************** function i2_noteOn *****************
 46500 ;; Defined at:
 46501 ;;		line 83 in file "midi.c"
 46502 ;; Parameters:    Size  Location     Type
 46503 ;;  channel         1    wreg     unsigned char 
 46504 ;;  pitch           1   14[COMRAM] unsigned char 
 46505 ;;  velocity        1   15[COMRAM] unsigned char 
 46506 ;; Auto vars:     Size  Location     Type
 46507 ;;  channel         1   16[COMRAM] unsigned char 
 46508 ;; Return value:  Size  Location     Type
 46509 ;;                  1    wreg      void 
 46510 ;; Registers used:
 46511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 46512 ;; Tracked objects:
 46513 ;;		On entry : 0/0
 46514 ;;		On exit  : 0/0
 46515 ;;		Unchanged: 0/0
 46516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46517 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46518 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46520 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46521 ;;Total ram usage:        3 bytes
 46522 ;; Hardware stack levels used:    1
 46523 ;; Hardware stack levels required when called:    2
 46524 ;; This function calls:
 46525 ;;		i2_noteOff
 46526 ;;		i2_sendOut
 46527 ;;		i2_sendUSB
 46528 ;; This function is called by:
 46529 ;;		_playArpeggio
 46530 ;; This function uses a non-reentrant model
 46531 ;;
 46532                           
 46533                           	psect	text147
 46534  008B92                     __ptext147:
 46535                           	opt stack 0
 46536  008B92                     i2_noteOn:
 46537                           	opt stack 14
 46538                           
 46539                           ;incstack = 0
 46540                           ;i2noteOn@channel stored from wreg
 46541  008B92  6E11               	movwf	i2noteOn@channel,c
 46542                           
 46543                           ;midi.c: 85: noteNumber = pitch + semitone + ((octave + 1) * 12);
 46544  008B94  0100               	movlb	0	; () banked
 46545  008B96  29FC               	incf	_octave& (0+255),w,b
 46546  008B98  0D0C               	mullw	12
 46547  008B9A  50F3               	movf	prodl,w,c
 46548  008B9C  240F               	addwf	i2noteOn@pitch,w,c
 46549  008B9E  25F3               	addwf	_semitone& (0+255),w,b
 46550  008BA0  6FF4               	movwf	_noteNumber& (0+255),b
 46551                           
 46552                           ; BSR set to: 0
 46553                           ;midi.c: 86: statusByte = channel | note_on;
 46554  008BA2  5011               	movf	i2noteOn@channel,w,c
 46555  008BA4  0990               	iorlw	144
 46556  008BA6  6FF5               	movwf	_statusByte& (0+255),b
 46557                           
 46558                           ; BSR set to: 0
 46559                           ;midi.c: 89: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 46560  008BA8  5010               	movf	i2noteOn@velocity,w,c
 46561  008BAA  A4D8               	btfss	status,2,c
 46562  008BAC  D008               	goto	i2l451
 46563                           
 46564                           ; BSR set to: 0
 46565  008BAE  C00F  F00C         	movff	i2noteOn@pitch,i2noteOff@pitch
 46566  008BB2  C010  F00D         	movff	i2noteOn@velocity,i2noteOff@velocity
 46567  008BB6  5011               	movf	i2noteOn@channel,w,c
 46568  008BB8  ECDC  F048         	call	i2_noteOff
 46569  008BBC  0012               	return	
 46570  008BBE                     i2l451:
 46571                           
 46572                           ;midi.c: 92: sendUSB(statusByte, noteNumber, velocity);
 46573  008BBE  C0F4  F001         	movff	_noteNumber,i2sendUSB@message2
 46574  008BC2  C010  F002         	movff	i2noteOn@velocity,i2sendUSB@message3
 46575  008BC6  0100               	movlb	0	; () banked
 46576  008BC8  51F5               	movf	_statusByte& (0+255),w,b
 46577  008BCA  ECFC  F03A         	call	i2_sendUSB
 46578                           
 46579                           ;midi.c: 95: if(velocity > 0) {
 46580  008BCE  5010               	movf	i2noteOn@velocity,w,c
 46581  008BD0  B4D8               	btfsc	status,2,c
 46582  008BD2  D00B               	goto	i2l453
 46583                           
 46584                           ;midi.c: 96: sendOut(statusByte);
 46585  008BD4  0100               	movlb	0	; () banked
 46586  008BD6  51F5               	movf	_statusByte& (0+255),w,b
 46587  008BD8  ECE7  F04A         	call	i2_sendOut
 46588                           
 46589                           ;midi.c: 97: sendOut(noteNumber);
 46590  008BDC  0100               	movlb	0	; () banked
 46591  008BDE  51F4               	movf	_noteNumber& (0+255),w,b
 46592  008BE0  ECE7  F04A         	call	i2_sendOut
 46593                           
 46594                           ;midi.c: 98: sendOut(velocity);
 46595  008BE4  5010               	movf	i2noteOn@velocity,w,c
 46596  008BE6  ECE7  F04A         	call	i2_sendOut
 46597  008BEA                     i2l453:
 46598                           
 46599                           ;midi.c: 99: }
 46600                           ;midi.c: 101: note_off_was_sent = 0;
 46601  008BEA  9233               	bcf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 46602  008BEC  0012               	return		;funcret
 46603  008BEE                     __end_ofi2_noteOn:
 46604                           	opt stack 0
 46605                           pclatu	equ	0xFFB
 46606                           pclath	equ	0xFFA
 46607                           tblptru	equ	0xFF8
 46608                           tblptrh	equ	0xFF7
 46609                           tblptrl	equ	0xFF6
 46610                           tablat	equ	0xFF5
 46611                           prodh	equ	0xFF4
 46612                           prodl	equ	0xFF3
 46613                           intcon	equ	0xFF2
 46614                           intcon2	equ	0xFF1
 46615                           postinc0	equ	0xFEE
 46616                           fsr0h	equ	0xFEA
 46617                           fsr0l	equ	0xFE9
 46618                           wreg	equ	0xFE8
 46619                           indf1	equ	0xFE7
 46620                           postinc1	equ	0xFE6
 46621                           postdec1	equ	0xFE5
 46622                           fsr1h	equ	0xFE2
 46623                           fsr1l	equ	0xFE1
 46624                           indf2	equ	0xFDF
 46625                           postinc2	equ	0xFDE
 46626                           postdec2	equ	0xFDD
 46627                           plusw2	equ	0xFDB
 46628                           fsr2h	equ	0xFDA
 46629                           fsr2l	equ	0xFD9
 46630                           status	equ	0xFD8
 46631                           
 46632 ;; *************** function i2_noteOff *****************
 46633 ;; Defined at:
 46634 ;;		line 66 in file "midi.c"
 46635 ;; Parameters:    Size  Location     Type
 46636 ;;  channel         1    wreg     unsigned char 
 46637 ;;  pitch           1   11[COMRAM] unsigned char 
 46638 ;;  velocity        1   12[COMRAM] unsigned char 
 46639 ;; Auto vars:     Size  Location     Type
 46640 ;;  channel         1   13[COMRAM] unsigned char 
 46641 ;; Return value:  Size  Location     Type
 46642 ;;                  1    wreg      void 
 46643 ;; Registers used:
 46644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 46645 ;; Tracked objects:
 46646 ;;		On entry : 0/0
 46647 ;;		On exit  : 0/0
 46648 ;;		Unchanged: 0/0
 46649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46650 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46651 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46653 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46654 ;;Total ram usage:        3 bytes
 46655 ;; Hardware stack levels used:    1
 46656 ;; Hardware stack levels required when called:    1
 46657 ;; This function calls:
 46658 ;;		i2_sendOut
 46659 ;;		i2_sendUSB
 46660 ;; This function is called by:
 46661 ;;		_playArpeggio
 46662 ;;		i2_noteOn
 46663 ;; This function uses a non-reentrant model
 46664 ;;
 46665                           
 46666                           	psect	text148
 46667  0091B8                     __ptext148:
 46668                           	opt stack 0
 46669  0091B8                     i2_noteOff:
 46670                           	opt stack 14
 46671                           
 46672                           ;incstack = 0
 46673                           ;i2noteOff@channel stored from wreg
 46674  0091B8  6E0E               	movwf	i2noteOff@channel,c
 46675                           
 46676                           ;midi.c: 68: noteNumber = pitch + semitone + ((octave + 1)* 12);
 46677  0091BA  0100               	movlb	0	; () banked
 46678  0091BC  29FC               	incf	_octave& (0+255),w,b
 46679  0091BE  0D0C               	mullw	12
 46680  0091C0  50F3               	movf	prodl,w,c
 46681  0091C2  240C               	addwf	i2noteOff@pitch,w,c
 46682  0091C4  25F3               	addwf	_semitone& (0+255),w,b
 46683  0091C6  6FF4               	movwf	_noteNumber& (0+255),b
 46684                           
 46685                           ; BSR set to: 0
 46686                           ;midi.c: 69: statusByte = channel | note_off;
 46687  0091C8  500E               	movf	i2noteOff@channel,w,c
 46688  0091CA  0980               	iorlw	128
 46689  0091CC  6FF5               	movwf	_statusByte& (0+255),b
 46690                           
 46691                           ; BSR set to: 0
 46692                           ;midi.c: 73: sendUSB(statusByte, noteNumber, velocity);
 46693  0091CE  C0F4  F001         	movff	_noteNumber,i2sendUSB@message2
 46694  0091D2  C00D  F002         	movff	i2noteOff@velocity,i2sendUSB@message3
 46695  0091D6  51F5               	movf	_statusByte& (0+255),w,b
 46696  0091D8  ECFC  F03A         	call	i2_sendUSB
 46697                           
 46698                           ;midi.c: 76: sendOut(statusByte);
 46699  0091DC  0100               	movlb	0	; () banked
 46700  0091DE  51F5               	movf	_statusByte& (0+255),w,b
 46701  0091E0  ECE7  F04A         	call	i2_sendOut
 46702                           
 46703                           ;midi.c: 77: sendOut(noteNumber);
 46704  0091E4  0100               	movlb	0	; () banked
 46705  0091E6  51F4               	movf	_noteNumber& (0+255),w,b
 46706  0091E8  ECE7  F04A         	call	i2_sendOut
 46707                           
 46708                           ;midi.c: 78: sendOut(velocity);
 46709  0091EC  500D               	movf	i2noteOff@velocity,w,c
 46710  0091EE  ECE7  F04A         	call	i2_sendOut
 46711  0091F2  0012               	return		;funcret
 46712  0091F4                     __end_ofi2_noteOff:
 46713                           	opt stack 0
 46714                           pclatu	equ	0xFFB
 46715                           pclath	equ	0xFFA
 46716                           tblptru	equ	0xFF8
 46717                           tblptrh	equ	0xFF7
 46718                           tblptrl	equ	0xFF6
 46719                           tablat	equ	0xFF5
 46720                           prodh	equ	0xFF4
 46721                           prodl	equ	0xFF3
 46722                           intcon	equ	0xFF2
 46723                           intcon2	equ	0xFF1
 46724                           postinc0	equ	0xFEE
 46725                           fsr0h	equ	0xFEA
 46726                           fsr0l	equ	0xFE9
 46727                           wreg	equ	0xFE8
 46728                           indf1	equ	0xFE7
 46729                           postinc1	equ	0xFE6
 46730                           postdec1	equ	0xFE5
 46731                           fsr1h	equ	0xFE2
 46732                           fsr1l	equ	0xFE1
 46733                           indf2	equ	0xFDF
 46734                           postinc2	equ	0xFDE
 46735                           postdec2	equ	0xFDD
 46736                           plusw2	equ	0xFDB
 46737                           fsr2h	equ	0xFDA
 46738                           fsr2l	equ	0xFD9
 46739                           status	equ	0xFD8
 46740                           
 46741 ;; *************** function i2_sendUSB *****************
 46742 ;; Defined at:
 46743 ;;		line 32 in file "midi.c"
 46744 ;; Parameters:    Size  Location     Type
 46745 ;;  message1        1    wreg     unsigned char 
 46746 ;;  message2        1    0[COMRAM] unsigned char 
 46747 ;;  message3        1    1[COMRAM] unsigned char 
 46748 ;; Auto vars:     Size  Location     Type
 46749 ;;  message1        1    8[COMRAM] unsigned char 
 46750 ;;  sendUSB         3    5[COMRAM] unsigned char [3]
 46751 ;;  sendUSB         1   10[COMRAM] unsigned char 
 46752 ;;  sendUSB         1    9[COMRAM] unsigned char 
 46753 ;; Return value:  Size  Location     Type
 46754 ;;                  1    wreg      void 
 46755 ;; Registers used:
 46756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 46757 ;; Tracked objects:
 46758 ;;		On entry : 0/0
 46759 ;;		On exit  : 0/0
 46760 ;;		Unchanged: 0/0
 46761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46762 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46763 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46764 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46765 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46766 ;;Total ram usage:       11 bytes
 46767 ;; Hardware stack levels used:    1
 46768 ;; This function calls:
 46769 ;;		Nothing
 46770 ;; This function is called by:
 46771 ;;		i2_noteOff
 46772 ;;		i2_noteOn
 46773 ;; This function uses a non-reentrant model
 46774 ;;
 46775                           
 46776                           	psect	text149
 46777  0075F8                     __ptext149:
 46778                           	opt stack 0
 46779  0075F8                     i2_sendUSB:
 46780                           	opt stack 15
 46781                           
 46782                           ;incstack = 0
 46783                           ;i2sendUSB@message1 stored from wreg
 46784  0075F8  6E09               	movwf	i2sendUSB@message1,c
 46785                           
 46786                           ;midi.c: 34: unsigned char midiMessage[3];
 46787                           ;midi.c: 36: midiMessage[0]=message1;
 46788  0075FA  C009  F006         	movff	i2sendUSB@message1,i2sendUSB@midiMessage
 46789                           
 46790                           ;midi.c: 37: midiMessage[1]=message2;
 46791  0075FE  C001  F007         	movff	i2sendUSB@message2,i2sendUSB@midiMessage+1
 46792                           
 46793                           ;midi.c: 38: midiMessage[2]=message3;
 46794  007602  C002  F008         	movff	i2sendUSB@message3,i2sendUSB@midiMessage+2
 46795                           
 46796                           ;midi.c: 40: RA5 = 0;
 46797  007606  9A80               	bcf	3968,5,c	;volatile
 46798                           
 46799                           ;midi.c: 41: RB2 = 1;
 46800  007608  8481               	bsf	3969,2,c	;volatile
 46801                           
 46802                           ;midi.c: 42: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46803  00760A  0E53               	movlw	83
 46804  00760C                     i2u4505_47:
 46805  00760C  2EE8               	decfsz	wreg,f,c
 46806  00760E  D7FE               	bra	i2u4505_47
 46807  007610  F000               	nop	
 46808                           
 46809                           ;midi.c: 44: for(unsigned char i=0;i<3;i++){
 46810  007612  0E00               	movlw	0
 46811  007614  6E0A               	movwf	i2sendUSB@i,c
 46812  007616                     i2l19407:
 46813  007616  0E02               	movlw	2
 46814  007618  640A               	cpfsgt	i2sendUSB@i,c
 46815  00761A  D001               	goto	i2l441
 46816  00761C  D034               	goto	i2u3006_40
 46817  00761E                     i2l441:
 46818                           
 46819                           ;midi.c: 45: for(unsigned char ii=0;ii<8;ii++){
 46820  00761E  0E00               	movlw	0
 46821  007620  6E0B               	movwf	i2sendUSB@ii,c
 46822  007622                     i2l19413:
 46823  007622  0E07               	movlw	7
 46824  007624  640B               	cpfsgt	i2sendUSB@ii,c
 46825  007626  D001               	goto	i2l443
 46826  007628  D02C               	goto	i2u3005_40
 46827  00762A                     i2l443:
 46828                           
 46829                           ;midi.c: 48: RE2 = !!(midiMessage[i] & (1 << ii));
 46830  00762A  500A               	movf	i2sendUSB@i,w,c
 46831  00762C  0D01               	mullw	1
 46832  00762E  0E06               	movlw	low i2sendUSB@midiMessage
 46833  007630  24F3               	addwf	prodl,w,c
 46834  007632  6ED9               	movwf	fsr2l,c
 46835  007634  0E00               	movlw	high i2sendUSB@midiMessage
 46836  007636  20F4               	addwfc	prodh,w,c
 46837  007638  6EDA               	movwf	fsr2h,c
 46838  00763A  50DF               	movf	indf2,w,c
 46839  00763C  6E03               	movwf	??i2_sendUSB& (0+255),c
 46840  00763E  C00B  F004         	movff	i2sendUSB@ii,??i2_sendUSB+1
 46841  007642  0E01               	movlw	1
 46842  007644  6E05               	movwf	(??i2_sendUSB+2)& (0+255),c
 46843  007646  2A04               	incf	??i2_sendUSB+1,f,c
 46844  007648  D002               	goto	i2u3002_44
 46845  00764A                     i2u3002_45:
 46846  00764A  90D8               	bcf	status,0,c
 46847  00764C  3605               	rlcf	??i2_sendUSB+2,f,c
 46848  00764E                     i2u3002_44:
 46849  00764E  2E04               	decfsz	??i2_sendUSB+1,f,c
 46850  007650  D7FC               	goto	i2u3002_45
 46851  007652  5005               	movf	??i2_sendUSB+2,w,c
 46852  007654  1403               	andwf	??i2_sendUSB,w,c
 46853  007656  0900               	iorlw	0
 46854  007658  B4D8               	btfsc	status,2,c
 46855  00765A  D002               	goto	i2u3003_40
 46856  00765C  8484               	bsf	3972,2,c	;volatile
 46857  00765E  D001               	goto	i2u3004_45
 46858  007660                     i2u3003_40:
 46859  007660  9484               	bcf	3972,2,c	;volatile
 46860  007662                     i2u3004_45:
 46861                           
 46862                           ;midi.c: 50: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46863  007662  0E53               	movlw	83
 46864  007664                     i2u4506_47:
 46865  007664  2EE8               	decfsz	wreg,f,c
 46866  007666  D7FE               	bra	i2u4506_47
 46867  007668  F000               	nop	
 46868                           
 46869                           ;midi.c: 52: RA5 = 1;
 46870  00766A  8A80               	bsf	3968,5,c	;volatile
 46871                           
 46872                           ;midi.c: 53: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46873  00766C  0E53               	movlw	83
 46874  00766E                     i2u4507_47:
 46875  00766E  2EE8               	decfsz	wreg,f,c
 46876  007670  D7FE               	bra	i2u4507_47
 46877  007672  F000               	nop	
 46878                           
 46879                           ;midi.c: 55: RA5 = 0;
 46880  007674  9A80               	bcf	3968,5,c	;volatile
 46881                           
 46882                           ;midi.c: 56: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46883  007676  0E53               	movlw	83
 46884  007678                     i2u4508_47:
 46885  007678  2EE8               	decfsz	wreg,f,c
 46886  00767A  D7FE               	bra	i2u4508_47
 46887  00767C  F000               	nop	
 46888  00767E  2A0B               	incf	i2sendUSB@ii,f,c
 46889  007680  D7D0               	goto	i2l19413
 46890  007682                     i2u3005_40:
 46891  007682  2A0A               	incf	i2sendUSB@i,f,c
 46892  007684  D7C8               	goto	i2l19407
 46893  007686                     i2u3006_40:
 46894                           
 46895                           ;midi.c: 57: }
 46896                           ;midi.c: 58: }
 46897                           ;midi.c: 60: RB2 = 0;
 46898  007686  9481               	bcf	3969,2,c	;volatile
 46899                           
 46900                           ;midi.c: 61: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46901  007688  0E53               	movlw	83
 46902  00768A                     i2u4509_47:
 46903  00768A  2EE8               	decfsz	wreg,f,c
 46904  00768C  D7FE               	bra	i2u4509_47
 46905  00768E  F000               	nop	
 46906  007690  0012               	return		;funcret
 46907  007692                     __end_ofi2_sendUSB:
 46908                           	opt stack 0
 46909                           pclatu	equ	0xFFB
 46910                           pclath	equ	0xFFA
 46911                           tblptru	equ	0xFF8
 46912                           tblptrh	equ	0xFF7
 46913                           tblptrl	equ	0xFF6
 46914                           tablat	equ	0xFF5
 46915                           prodh	equ	0xFF4
 46916                           prodl	equ	0xFF3
 46917                           intcon	equ	0xFF2
 46918                           intcon2	equ	0xFF1
 46919                           postinc0	equ	0xFEE
 46920                           fsr0h	equ	0xFEA
 46921                           fsr0l	equ	0xFE9
 46922                           wreg	equ	0xFE8
 46923                           indf1	equ	0xFE7
 46924                           postinc1	equ	0xFE6
 46925                           postdec1	equ	0xFE5
 46926                           fsr1h	equ	0xFE2
 46927                           fsr1l	equ	0xFE1
 46928                           indf2	equ	0xFDF
 46929                           postinc2	equ	0xFDE
 46930                           postdec2	equ	0xFDD
 46931                           plusw2	equ	0xFDB
 46932                           fsr2h	equ	0xFDA
 46933                           fsr2l	equ	0xFD9
 46934                           status	equ	0xFD8
 46935                           
 46936 ;; *************** function i2_sendOut *****************
 46937 ;; Defined at:
 46938 ;;		line 22 in file "midi.c"
 46939 ;; Parameters:    Size  Location     Type
 46940 ;;  a               1    wreg     unsigned char 
 46941 ;; Auto vars:     Size  Location     Type
 46942 ;;  a               1    0[COMRAM] unsigned char 
 46943 ;; Return value:  Size  Location     Type
 46944 ;;                  1    wreg      void 
 46945 ;; Registers used:
 46946 ;;		wreg, status,2, cstack
 46947 ;; Tracked objects:
 46948 ;;		On entry : 0/0
 46949 ;;		On exit  : 0/0
 46950 ;;		Unchanged: 0/0
 46951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46953 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46955 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46956 ;;Total ram usage:        1 bytes
 46957 ;; Hardware stack levels used:    1
 46958 ;; This function calls:
 46959 ;;		Nothing
 46960 ;; This function is called by:
 46961 ;;		i2_noteOff
 46962 ;;		i2_noteOn
 46963 ;; This function uses a non-reentrant model
 46964 ;;
 46965                           
 46966                           	psect	text150
 46967  0095CE                     __ptext150:
 46968                           	opt stack 0
 46969  0095CE                     i2_sendOut:
 46970                           	opt stack 15
 46971                           
 46972                           ;incstack = 0
 46973                           ;i2sendOut@a stored from wreg
 46974  0095CE  6E01               	movwf	i2sendOut@a,c
 46975                           
 46976                           ;midi.c: 24: TXREG = a;
 46977  0095D0  C001  FFAD         	movff	i2sendOut@a,4013	;volatile
 46978  0095D4  A89E               	btfss	3998,4,c	;volatile
 46979  0095D6  D7FE               	goto	i2l436
 46980                           
 46981                           ;midi.c: 26: TXIF = 0;
 46982  0095D8  989E               	bcf	3998,4,c	;volatile
 46983                           
 46984                           ;midi.c: 27: _delay((unsigned long)((320)*(20000000/4000000.0)));
 46985  0095DA  0EE4               	movlw	228
 46986  0095DC                     i2u4510_47:
 46987  0095DC  D000               	nop2	
 46988  0095DE  D000               	nop2	
 46989  0095E0  2EE8               	decfsz	wreg,f,c
 46990  0095E2  D7FC               	bra	i2u4510_47
 46991  0095E4  D000               	nop2	
 46992  0095E6  D000               	nop2	
 46993  0095E8  0012               	return		;funcret
 46994  0095EA                     __end_ofi2_sendOut:
 46995                           	opt stack 0
 46996                           pclatu	equ	0xFFB
 46997                           pclath	equ	0xFFA
 46998                           tblptru	equ	0xFF8
 46999                           tblptrh	equ	0xFF7
 47000                           tblptrl	equ	0xFF6
 47001                           tablat	equ	0xFF5
 47002                           prodh	equ	0xFF4
 47003                           prodl	equ	0xFF3
 47004                           intcon	equ	0xFF2
 47005                           intcon2	equ	0xFF1
 47006                           postinc0	equ	0xFEE
 47007                           fsr0h	equ	0xFEA
 47008                           fsr0l	equ	0xFE9
 47009                           wreg	equ	0xFE8
 47010                           indf1	equ	0xFE7
 47011                           postinc1	equ	0xFE6
 47012                           postdec1	equ	0xFE5
 47013                           fsr1h	equ	0xFE2
 47014                           fsr1l	equ	0xFE1
 47015                           indf2	equ	0xFDF
 47016                           postinc2	equ	0xFDE
 47017                           postdec2	equ	0xFDD
 47018                           plusw2	equ	0xFDB
 47019                           fsr2h	equ	0xFDA
 47020                           fsr2l	equ	0xFD9
 47021                           status	equ	0xFD8
 47022                           
 47023 ;; *************** function _sort_pitches *****************
 47024 ;; Defined at:
 47025 ;;		line 220 in file "arpeggio.c"
 47026 ;; Parameters:    Size  Location     Type
 47027 ;;		None
 47028 ;; Auto vars:     Size  Location     Type
 47029 ;;  j               1    3[COMRAM] unsigned char 
 47030 ;;  i               1    4[COMRAM] unsigned char 
 47031 ;;  a               1    2[COMRAM] unsigned char 
 47032 ;; Return value:  Size  Location     Type
 47033 ;;                  1    wreg      void 
 47034 ;; Registers used:
 47035 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 47036 ;; Tracked objects:
 47037 ;;		On entry : 0/0
 47038 ;;		On exit  : 0/0
 47039 ;;		Unchanged: 0/0
 47040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47042 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47043 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47044 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47045 ;;Total ram usage:        5 bytes
 47046 ;; Hardware stack levels used:    1
 47047 ;; This function calls:
 47048 ;;		Nothing
 47049 ;; This function is called by:
 47050 ;;		_playArpeggio
 47051 ;; This function uses a non-reentrant model
 47052 ;;
 47053                           
 47054                           	psect	text151
 47055  0061F6                     __ptext151:
 47056                           	opt stack 0
 47057  0061F6                     _sort_pitches:
 47058                           	opt stack 16
 47059                           
 47060                           ;arpeggio.c: 222: if(NUM_NOTES_PRESSED == 0){return;}
 47061                           
 47062                           ;incstack = 0
 47063  0061F6  0100               	movlb	0	; () banked
 47064  0061F8  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 47065  0061FA  B4D8               	btfsc	status,2,c
 47066  0061FC  0012               	return	
 47067                           
 47068                           ; BSR set to: 0
 47069                           ;arpeggio.c: 224: unsigned char a;
 47070                           ;arpeggio.c: 225: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; ++i){
 47071                           
 47072                           ; BSR set to: 0
 47073                           
 47074                           ; BSR set to: 0
 47075  0061FE  0E00               	movlw	0
 47076  006200  6E05               	movwf	sort_pitches@i,c
 47077  006202  D081               	goto	i2l5264
 47078  006204                     
 47079                           ; BSR set to: 0
 47080                           ;arpeggio.c: 226: for(unsigned char j = i + 1; j < NUM_NOTES_PRESSED; ++j){
 47081                           
 47082                           ; BSR set to: 0
 47083  006204  2805               	incf	sort_pitches@i,w,c
 47084  006206  6E04               	movwf	sort_pitches@j,c
 47085  006208  D079               	goto	i2l5266
 47086  00620A                     i2l5267:
 47087                           
 47088                           ; BSR set to: 0
 47089                           ;arpeggio.c: 232: if(SORT_DIRECTION == 0) {
 47090  00620A  BA35               	btfsc	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 47091  00620C  D03A               	goto	i2l5269
 47092                           
 47093                           ; BSR set to: 0
 47094                           ;arpeggio.c: 233: if(ARPEGGIO_SORTED[i] > ARPEGGIO_SORTED[j]){
 47095  00620E  5005               	movf	sort_pitches@i,w,c
 47096  006210  0D01               	mullw	1
 47097  006212  0E9C               	movlw	low _ARPEGGIO_SORTED
 47098  006214  24F3               	addwf	prodl,w,c
 47099  006216  6ED9               	movwf	fsr2l,c
 47100  006218  0E02               	movlw	high _ARPEGGIO_SORTED
 47101  00621A  20F4               	addwfc	prodh,w,c
 47102  00621C  6EDA               	movwf	fsr2h,c
 47103  00621E  5004               	movf	sort_pitches@j,w,c
 47104  006220  0D01               	mullw	1
 47105  006222  0E9C               	movlw	low _ARPEGGIO_SORTED
 47106  006224  24F3               	addwf	prodl,w,c
 47107  006226  6EE1               	movwf	fsr1l,c
 47108  006228  0E02               	movlw	high _ARPEGGIO_SORTED
 47109  00622A  20F4               	addwfc	prodh,w,c
 47110  00622C  6EE2               	movwf	fsr1h,c
 47111  00622E  50DE               	movf	postinc2,w,c
 47112  006230  5CE6               	subwf	postinc1,w,c
 47113  006232  B0D8               	btfsc	status,0,c
 47114  006234  D026               	goto	i2l5269
 47115                           
 47116                           ; BSR set to: 0
 47117                           ;arpeggio.c: 234: a = ARPEGGIO_SORTED[i];
 47118  006236  5005               	movf	sort_pitches@i,w,c
 47119  006238  0D01               	mullw	1
 47120  00623A  0E9C               	movlw	low _ARPEGGIO_SORTED
 47121  00623C  24F3               	addwf	prodl,w,c
 47122  00623E  6ED9               	movwf	fsr2l,c
 47123  006240  0E02               	movlw	high _ARPEGGIO_SORTED
 47124  006242  20F4               	addwfc	prodh,w,c
 47125  006244  6EDA               	movwf	fsr2h,c
 47126  006246  50DF               	movf	indf2,w,c
 47127  006248  6E03               	movwf	sort_pitches@a,c
 47128                           
 47129                           ; BSR set to: 0
 47130                           ;arpeggio.c: 235: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 47131  00624A  5004               	movf	sort_pitches@j,w,c
 47132  00624C  0D01               	mullw	1
 47133  00624E  0E9C               	movlw	low _ARPEGGIO_SORTED
 47134  006250  24F3               	addwf	prodl,w,c
 47135  006252  6ED9               	movwf	fsr2l,c
 47136  006254  0E02               	movlw	high _ARPEGGIO_SORTED
 47137  006256  20F4               	addwfc	prodh,w,c
 47138  006258  6EDA               	movwf	fsr2h,c
 47139  00625A  5005               	movf	sort_pitches@i,w,c
 47140  00625C  0D01               	mullw	1
 47141  00625E  0E9C               	movlw	low _ARPEGGIO_SORTED
 47142  006260  24F3               	addwf	prodl,w,c
 47143  006262  6EE1               	movwf	fsr1l,c
 47144  006264  0E02               	movlw	high _ARPEGGIO_SORTED
 47145  006266  20F4               	addwfc	prodh,w,c
 47146  006268  6EE2               	movwf	fsr1h,c
 47147  00626A  CFDF FFE7          	movff	indf2,indf1
 47148                           
 47149                           ; BSR set to: 0
 47150                           ;arpeggio.c: 236: ARPEGGIO_SORTED[j] = a;
 47151  00626E  5004               	movf	sort_pitches@j,w,c
 47152  006270  0D01               	mullw	1
 47153  006272  0E9C               	movlw	low _ARPEGGIO_SORTED
 47154  006274  24F3               	addwf	prodl,w,c
 47155  006276  6ED9               	movwf	fsr2l,c
 47156  006278  0E02               	movlw	high _ARPEGGIO_SORTED
 47157  00627A  20F4               	addwfc	prodh,w,c
 47158  00627C  6EDA               	movwf	fsr2h,c
 47159  00627E  C003  FFDF         	movff	sort_pitches@a,indf2
 47160  006282                     i2l5269:
 47161                           
 47162                           ; BSR set to: 0
 47163                           ;arpeggio.c: 237: }
 47164                           ;arpeggio.c: 238: }
 47165                           ;arpeggio.c: 240: if(SORT_DIRECTION == 1) {
 47166                           
 47167                           ; BSR set to: 0
 47168                           
 47169                           ; BSR set to: 0
 47170  006282  AA35               	btfss	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 47171  006284  D03A               	goto	i2l5271
 47172                           
 47173                           ; BSR set to: 0
 47174                           ;arpeggio.c: 241: if(ARPEGGIO_SORTED[i] < ARPEGGIO_SORTED[j]){
 47175  006286  5004               	movf	sort_pitches@j,w,c
 47176  006288  0D01               	mullw	1
 47177  00628A  0E9C               	movlw	low _ARPEGGIO_SORTED
 47178  00628C  24F3               	addwf	prodl,w,c
 47179  00628E  6ED9               	movwf	fsr2l,c
 47180  006290  0E02               	movlw	high _ARPEGGIO_SORTED
 47181  006292  20F4               	addwfc	prodh,w,c
 47182  006294  6EDA               	movwf	fsr2h,c
 47183  006296  5005               	movf	sort_pitches@i,w,c
 47184  006298  0D01               	mullw	1
 47185  00629A  0E9C               	movlw	low _ARPEGGIO_SORTED
 47186  00629C  24F3               	addwf	prodl,w,c
 47187  00629E  6EE1               	movwf	fsr1l,c
 47188  0062A0  0E02               	movlw	high _ARPEGGIO_SORTED
 47189  0062A2  20F4               	addwfc	prodh,w,c
 47190  0062A4  6EE2               	movwf	fsr1h,c
 47191  0062A6  50DE               	movf	postinc2,w,c
 47192  0062A8  5CE6               	subwf	postinc1,w,c
 47193  0062AA  B0D8               	btfsc	status,0,c
 47194  0062AC  D026               	goto	i2l5271
 47195                           
 47196                           ; BSR set to: 0
 47197                           ;arpeggio.c: 242: a = ARPEGGIO_SORTED[i];
 47198  0062AE  5005               	movf	sort_pitches@i,w,c
 47199  0062B0  0D01               	mullw	1
 47200  0062B2  0E9C               	movlw	low _ARPEGGIO_SORTED
 47201  0062B4  24F3               	addwf	prodl,w,c
 47202  0062B6  6ED9               	movwf	fsr2l,c
 47203  0062B8  0E02               	movlw	high _ARPEGGIO_SORTED
 47204  0062BA  20F4               	addwfc	prodh,w,c
 47205  0062BC  6EDA               	movwf	fsr2h,c
 47206  0062BE  50DF               	movf	indf2,w,c
 47207  0062C0  6E03               	movwf	sort_pitches@a,c
 47208                           
 47209                           ; BSR set to: 0
 47210                           ;arpeggio.c: 243: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 47211  0062C2  5004               	movf	sort_pitches@j,w,c
 47212  0062C4  0D01               	mullw	1
 47213  0062C6  0E9C               	movlw	low _ARPEGGIO_SORTED
 47214  0062C8  24F3               	addwf	prodl,w,c
 47215  0062CA  6ED9               	movwf	fsr2l,c
 47216  0062CC  0E02               	movlw	high _ARPEGGIO_SORTED
 47217  0062CE  20F4               	addwfc	prodh,w,c
 47218  0062D0  6EDA               	movwf	fsr2h,c
 47219  0062D2  5005               	movf	sort_pitches@i,w,c
 47220  0062D4  0D01               	mullw	1
 47221  0062D6  0E9C               	movlw	low _ARPEGGIO_SORTED
 47222  0062D8  24F3               	addwf	prodl,w,c
 47223  0062DA  6EE1               	movwf	fsr1l,c
 47224  0062DC  0E02               	movlw	high _ARPEGGIO_SORTED
 47225  0062DE  20F4               	addwfc	prodh,w,c
 47226  0062E0  6EE2               	movwf	fsr1h,c
 47227  0062E2  CFDF FFE7          	movff	indf2,indf1
 47228                           
 47229                           ; BSR set to: 0
 47230                           ;arpeggio.c: 244: ARPEGGIO_SORTED[j] = a;
 47231  0062E6  5004               	movf	sort_pitches@j,w,c
 47232  0062E8  0D01               	mullw	1
 47233  0062EA  0E9C               	movlw	low _ARPEGGIO_SORTED
 47234  0062EC  24F3               	addwf	prodl,w,c
 47235  0062EE  6ED9               	movwf	fsr2l,c
 47236  0062F0  0E02               	movlw	high _ARPEGGIO_SORTED
 47237  0062F2  20F4               	addwfc	prodh,w,c
 47238  0062F4  6EDA               	movwf	fsr2h,c
 47239  0062F6  C003  FFDF         	movff	sort_pitches@a,indf2
 47240  0062FA                     i2l5271:
 47241                           
 47242                           ; BSR set to: 0
 47243                           
 47244                           ; BSR set to: 0
 47245                           
 47246                           ; BSR set to: 0
 47247  0062FA  2A04               	incf	sort_pitches@j,f,c
 47248  0062FC                     i2l5266:
 47249                           
 47250                           ; BSR set to: 0
 47251                           
 47252                           ; BSR set to: 0
 47253  0062FC  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 47254  0062FE  5C04               	subwf	sort_pitches@j,w,c
 47255  006300  A0D8               	btfss	status,0,c
 47256  006302  D783               	goto	i2l5267
 47257                           
 47258                           ; BSR set to: 0
 47259                           
 47260                           ; BSR set to: 0
 47261  006304  2A05               	incf	sort_pitches@i,f,c
 47262  006306                     i2l5264:
 47263                           
 47264                           ; BSR set to: 0
 47265                           
 47266                           ; BSR set to: 0
 47267  006306  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 47268  006308  5C05               	subwf	sort_pitches@i,w,c
 47269  00630A  B0D8               	btfsc	status,0,c
 47270  00630C  0012               	return	
 47271  00630E  D77A               	goto	i2l5265
 47272  006310                     __end_of_sort_pitches:
 47273                           	opt stack 0
 47274                           pclatu	equ	0xFFB
 47275                           pclath	equ	0xFFA
 47276                           tblptru	equ	0xFF8
 47277                           tblptrh	equ	0xFF7
 47278                           tblptrl	equ	0xFF6
 47279                           tablat	equ	0xFF5
 47280                           prodh	equ	0xFF4
 47281                           prodl	equ	0xFF3
 47282                           intcon	equ	0xFF2
 47283                           intcon2	equ	0xFF1
 47284                           postinc0	equ	0xFEE
 47285                           fsr0h	equ	0xFEA
 47286                           fsr0l	equ	0xFE9
 47287                           wreg	equ	0xFE8
 47288                           indf1	equ	0xFE7
 47289                           postinc1	equ	0xFE6
 47290                           postdec1	equ	0xFE5
 47291                           fsr1h	equ	0xFE2
 47292                           fsr1l	equ	0xFE1
 47293                           indf2	equ	0xFDF
 47294                           postinc2	equ	0xFDE
 47295                           postdec2	equ	0xFDD
 47296                           plusw2	equ	0xFDB
 47297                           fsr2h	equ	0xFDA
 47298                           fsr2l	equ	0xFD9
 47299                           status	equ	0xFD8
 47300                           
 47301 ;; *************** function _encoderInputsBuxton *****************
 47302 ;; Defined at:
 47303 ;;		line 27 in file "encoder.c"
 47304 ;; Parameters:    Size  Location     Type
 47305 ;;		None
 47306 ;; Auto vars:     Size  Location     Type
 47307 ;;  pinstate        1    5[COMRAM] unsigned char 
 47308 ;;  tempB           1    4[COMRAM] unsigned char 
 47309 ;;  tempA           1    3[COMRAM] unsigned char 
 47310 ;; Return value:  Size  Location     Type
 47311 ;;                  1    wreg      void 
 47312 ;; Registers used:
 47313 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 47314 ;; Tracked objects:
 47315 ;;		On entry : 0/0
 47316 ;;		On exit  : 0/0
 47317 ;;		Unchanged: 0/0
 47318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47320 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47321 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47322 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47323 ;;Total ram usage:        6 bytes
 47324 ;; Hardware stack levels used:    1
 47325 ;; This function calls:
 47326 ;;		Nothing
 47327 ;; This function is called by:
 47328 ;;		_ISR
 47329 ;; This function uses a non-reentrant model
 47330 ;;
 47331                           
 47332                           	psect	text152
 47333  007E0A                     __ptext152:
 47334                           	opt stack 0
 47335  007E0A                     _encoderInputsBuxton:
 47336                           	opt stack 17
 47337                           
 47338                           ;encoder.c: 30: if(encoderPolarity == 0){
 47339                           
 47340                           ; BSR set to: 0
 47341                           ;incstack = 0
 47342  007E0A  B236               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 47343  007E0C  D006               	goto	i2l807
 47344                           
 47345                           ;encoder.c: 31: encoderA = RB5;
 47346  007E0E  8636               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 47347  007E10  AA81               	btfss	3969,5,c	;volatile
 47348  007E12  9636               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 47349                           
 47350                           ;encoder.c: 32: encoderB = RB4;
 47351  007E14  8436               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 47352  007E16  A881               	btfss	3969,4,c	;volatile
 47353  007E18  9436               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 47354  007E1A                     i2l807:
 47355                           
 47356                           ;encoder.c: 33: }
 47357                           ;encoder.c: 36: if(encoderPolarity == 1){
 47358  007E1A  A236               	btfss	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 47359  007E1C  D006               	goto	i2l808
 47360                           
 47361                           ;encoder.c: 37: encoderA = RB4;
 47362  007E1E  8636               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 47363  007E20  A881               	btfss	3969,4,c	;volatile
 47364  007E22  9636               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 47365                           
 47366                           ;encoder.c: 38: encoderB = RB5;
 47367  007E24  8436               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 47368  007E26  AA81               	btfss	3969,5,c	;volatile
 47369  007E28  9436               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 47370  007E2A                     i2l808:
 47371                           
 47372                           ;encoder.c: 39: }
 47373                           ;encoder.c: 42: unsigned char tempA = encoderA << 1;
 47374  007E2A  A636               	btfss	_encoderA/(0+8),_encoderA& (0+7),c
 47375  007E2C  D003               	goto	i2u3793_40
 47376  007E2E  6A01               	clrf	??_encoderInputsBuxton& (0+255),c
 47377  007E30  2A01               	incf	??_encoderInputsBuxton& (0+255),f,c
 47378  007E32  D001               	goto	i2u3794_48
 47379  007E34                     i2u3793_40:
 47380  007E34  6A01               	clrf	??_encoderInputsBuxton& (0+255),c
 47381  007E36                     i2u3794_48:
 47382  007E36  90D8               	bcf	status,0,c
 47383  007E38  3401               	rlcf	??_encoderInputsBuxton,w,c
 47384  007E3A  6E04               	movwf	encoderInputsBuxton@tempA,c
 47385                           
 47386                           ;encoder.c: 43: unsigned char tempB = encoderB;
 47387  007E3C  0E00               	movlw	0
 47388  007E3E  B436               	btfsc	_encoderB/(0+8),_encoderB& (0+7),c
 47389  007E40  0E01               	movlw	1
 47390  007E42  6E05               	movwf	encoderInputsBuxton@tempB,c
 47391                           
 47392                           ;encoder.c: 44: unsigned char pinstate = tempA | tempB;
 47393  007E44  5004               	movf	encoderInputsBuxton@tempA,w,c
 47394  007E46  1005               	iorwf	encoderInputsBuxton@tempB,w,c
 47395  007E48  6E06               	movwf	encoderInputsBuxton@pinstate,c
 47396                           
 47397                           ;encoder.c: 46: state = ttable[state & 0xf][pinstate];
 47398  007E4A  C058  F001         	movff	_state,??_encoderInputsBuxton
 47399  007E4E  0E0F               	movlw	15
 47400  007E50  1601               	andwf	??_encoderInputsBuxton,f,c
 47401  007E52  5001               	movf	??_encoderInputsBuxton,w,c
 47402  007E54  0D04               	mullw	4
 47403  007E56  0E3D               	movlw	low _ttable
 47404  007E58  6E02               	movwf	(??_encoderInputsBuxton+1)& (0+255),c
 47405  007E5A  0EF3               	movlw	high _ttable
 47406  007E5C  6E03               	movwf	(??_encoderInputsBuxton+2)& (0+255),c
 47407  007E5E  50F3               	movf	prodl,w,c
 47408  007E60  2602               	addwf	??_encoderInputsBuxton+1,f,c
 47409  007E62  50F4               	movf	prodh,w,c
 47410  007E64  2203               	addwfc	??_encoderInputsBuxton+2,f,c
 47411  007E66  5006               	movf	encoderInputsBuxton@pinstate,w,c
 47412  007E68  0D01               	mullw	1
 47413  007E6A  50F3               	movf	prodl,w,c
 47414  007E6C  2602               	addwf	??_encoderInputsBuxton+1,f,c
 47415  007E6E  50F4               	movf	prodh,w,c
 47416  007E70  2203               	addwfc	??_encoderInputsBuxton+2,f,c
 47417  007E72  C002  FFF6         	movff	??_encoderInputsBuxton+1,tblptrl
 47418  007E76  C003  FFF7         	movff	??_encoderInputsBuxton+2,tblptrh
 47419  007E7A                     	if	0	;tblptru may be non-zero
 47420  007E7A                     	endif
 47421  007E7A                     	if	0	;tblptru may be non-zero
 47422  007E7A                     	endif
 47423  007E7A  0008               	tblrd		*
 47424  007E7C  CFF5 F058          	movff	tablat,_state
 47425                           
 47426                           ;encoder.c: 47: encoder_direction = state & 0x30;
 47427  007E80  5058               	movf	_state,w,c
 47428  007E82  0B30               	andlw	48
 47429  007E84  0100               	movlb	0	; () banked
 47430  007E86  6FEB               	movwf	_encoder_direction& (0+255),b
 47431                           
 47432                           ; BSR set to: 0
 47433  007E88  0012               	return		;funcret
 47434  007E8A                     __end_of_encoderInputsBuxton:
 47435                           	opt stack 0
 47436                           pclatu	equ	0xFFB
 47437                           pclath	equ	0xFFA
 47438                           tblptru	equ	0xFF8
 47439                           tblptrh	equ	0xFF7
 47440                           tblptrl	equ	0xFF6
 47441                           tablat	equ	0xFF5
 47442                           prodh	equ	0xFF4
 47443                           prodl	equ	0xFF3
 47444                           intcon	equ	0xFF2
 47445                           intcon2	equ	0xFF1
 47446                           postinc0	equ	0xFEE
 47447                           fsr0h	equ	0xFEA
 47448                           fsr0l	equ	0xFE9
 47449                           wreg	equ	0xFE8
 47450                           indf1	equ	0xFE7
 47451                           postinc1	equ	0xFE6
 47452                           postdec1	equ	0xFE5
 47453                           fsr1h	equ	0xFE2
 47454                           fsr1l	equ	0xFE1
 47455                           indf2	equ	0xFDF
 47456                           postinc2	equ	0xFDE
 47457                           postdec2	equ	0xFDD
 47458                           plusw2	equ	0xFDB
 47459                           fsr2h	equ	0xFDA
 47460                           fsr2l	equ	0xFD9
 47461                           status	equ	0xFD8
 47462                           
 47463 ;; *************** function _display *****************
 47464 ;; Defined at:
 47465 ;;		line 21 in file "segment.c"
 47466 ;; Parameters:    Size  Location     Type
 47467 ;;		None
 47468 ;; Auto vars:     Size  Location     Type
 47469 ;;		None
 47470 ;; Return value:  Size  Location     Type
 47471 ;;                  1    wreg      void 
 47472 ;; Registers used:
 47473 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 47474 ;; Tracked objects:
 47475 ;;		On entry : 0/0
 47476 ;;		On exit  : 0/0
 47477 ;;		Unchanged: 0/0
 47478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47483 ;;Total ram usage:        0 bytes
 47484 ;; Hardware stack levels used:    1
 47485 ;; Hardware stack levels required when called:    2
 47486 ;; This function calls:
 47487 ;;		_displayDigits
 47488 ;;		_displayString
 47489 ;; This function is called by:
 47490 ;;		_ISR
 47491 ;; This function uses a non-reentrant model
 47492 ;;
 47493                           
 47494                           	psect	text153
 47495  009618                     __ptext153:
 47496                           	opt stack 0
 47497  009618                     _display:
 47498                           	opt stack 15
 47499                           
 47500                           ;segment.c: 22: if (DISPLAY_MODE == 0) {displayDigits();}
 47501                           
 47502                           ; BSR set to: 0
 47503                           ;incstack = 0
 47504  009618  505A               	movf	_DISPLAY_MODE,w,c
 47505  00961A  B4D8               	btfsc	status,2,c
 47506  00961C  EC20  F020         	call	_displayDigits	;wreg free
 47507                           
 47508                           ;segment.c: 23: if (DISPLAY_MODE == 1) {displayString();}
 47509  009620  045A               	decf	_DISPLAY_MODE,w,c
 47510  009622  A4D8               	btfss	status,2,c
 47511  009624  0012               	return	
 47512  009626  EC0E  F033         	call	_displayString	;wreg free
 47513  00962A  0012               	return	
 47514  00962C                     __end_of_display:
 47515                           	opt stack 0
 47516                           pclatu	equ	0xFFB
 47517                           pclath	equ	0xFFA
 47518                           tblptru	equ	0xFF8
 47519                           tblptrh	equ	0xFF7
 47520                           tblptrl	equ	0xFF6
 47521                           tablat	equ	0xFF5
 47522                           prodh	equ	0xFF4
 47523                           prodl	equ	0xFF3
 47524                           intcon	equ	0xFF2
 47525                           intcon2	equ	0xFF1
 47526                           postinc0	equ	0xFEE
 47527                           fsr0h	equ	0xFEA
 47528                           fsr0l	equ	0xFE9
 47529                           wreg	equ	0xFE8
 47530                           indf1	equ	0xFE7
 47531                           postinc1	equ	0xFE6
 47532                           postdec1	equ	0xFE5
 47533                           fsr1h	equ	0xFE2
 47534                           fsr1l	equ	0xFE1
 47535                           indf2	equ	0xFDF
 47536                           postinc2	equ	0xFDE
 47537                           postdec2	equ	0xFDD
 47538                           plusw2	equ	0xFDB
 47539                           fsr2h	equ	0xFDA
 47540                           fsr2l	equ	0xFD9
 47541                           status	equ	0xFD8
 47542                           
 47543 ;; *************** function _displayString *****************
 47544 ;; Defined at:
 47545 ;;		line 164 in file "segment.c"
 47546 ;; Parameters:    Size  Location     Type
 47547 ;;		None
 47548 ;; Auto vars:     Size  Location     Type
 47549 ;;  i               1    1[COMRAM] unsigned char 
 47550 ;; Return value:  Size  Location     Type
 47551 ;;                  1    wreg      void 
 47552 ;; Registers used:
 47553 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 47554 ;; Tracked objects:
 47555 ;;		On entry : 0/0
 47556 ;;		On exit  : 0/0
 47557 ;;		Unchanged: 0/0
 47558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47560 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47561 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47562 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47563 ;;Total ram usage:        2 bytes
 47564 ;; Hardware stack levels used:    1
 47565 ;; This function calls:
 47566 ;;		Nothing
 47567 ;; This function is called by:
 47568 ;;		_display
 47569 ;; This function uses a non-reentrant model
 47570 ;;
 47571                           
 47572                           	psect	text154
 47573  00661C                     __ptext154:
 47574                           	opt stack 0
 47575  00661C                     _displayString:
 47576                           	opt stack 16
 47577                           
 47578                           ;segment.c: 166: static unsigned char letter[4];
 47579                           ;segment.c: 167: static unsigned char letter_counter;
 47580                           ;segment.c: 170: for(unsigned char i=0;i<4;i++) {
 47581                           
 47582                           ;incstack = 0
 47583  00661C  0E00               	movlw	0
 47584  00661E  6E02               	movwf	displayString@i,c
 47585  006620                     i2l22653:
 47586  006620  0E03               	movlw	3
 47587  006622  6402               	cpfsgt	displayString@i,c
 47588  006624  D001               	goto	i2l2908
 47589  006626  D02A               	goto	i2u3696_40
 47590  006628                     i2l2908:
 47591                           
 47592                           ;segment.c: 171: if(string_to_display[i] > (unsigned char) 'z') {letter[i] = 'z';}
 47593  006628  5002               	movf	displayString@i,w,c
 47594  00662A  0D01               	mullw	1
 47595  00662C  0EEE               	movlw	low _string_to_display
 47596  00662E  24F3               	addwf	prodl,w,c
 47597  006630  6ED9               	movwf	fsr2l,c
 47598  006632  0E01               	movlw	high _string_to_display
 47599  006634  20F4               	addwfc	prodh,w,c
 47600  006636  6EDA               	movwf	fsr2h,c
 47601  006638  0E7A               	movlw	122
 47602  00663A  64DF               	cpfsgt	indf2,c
 47603  00663C  D00A               	goto	i2l2910
 47604  00663E  5002               	movf	displayString@i,w,c
 47605  006640  0D01               	mullw	1
 47606  006642  0E00               	movlw	low displayString@letter
 47607  006644  24F3               	addwf	prodl,w,c
 47608  006646  6ED9               	movwf	fsr2l,c
 47609  006648  0E01               	movlw	high displayString@letter
 47610  00664A  20F4               	addwfc	prodh,w,c
 47611  00664C  6EDA               	movwf	fsr2h,c
 47612  00664E  0E7A               	movlw	122
 47613  006650  D012               	goto	L25
 47614  006652                     i2l2910:
 47615                           
 47616                           ;segment.c: 172: else letter[i] = string_to_display[i] - '0';
 47617  006652  5002               	movf	displayString@i,w,c
 47618  006654  0D01               	mullw	1
 47619  006656  0E00               	movlw	low displayString@letter
 47620  006658  24F3               	addwf	prodl,w,c
 47621  00665A  6ED9               	movwf	fsr2l,c
 47622  00665C  0E01               	movlw	high displayString@letter
 47623  00665E  20F4               	addwfc	prodh,w,c
 47624  006660  6EDA               	movwf	fsr2h,c
 47625  006662  5002               	movf	displayString@i,w,c
 47626  006664  0D01               	mullw	1
 47627  006666  0EEE               	movlw	low _string_to_display
 47628  006668  24F3               	addwf	prodl,w,c
 47629  00666A  6EE1               	movwf	fsr1l,c
 47630  00666C  0E01               	movlw	high _string_to_display
 47631  00666E  20F4               	addwfc	prodh,w,c
 47632  006670  6EE2               	movwf	fsr1h,c
 47633  006672  50E7               	movf	indf1,w,c
 47634  006674  0FD0               	addlw	208
 47635  006676                     L25:
 47636  006676  6EDF               	movwf	indf2,c
 47637  006678  2A02               	incf	displayString@i,f,c
 47638  00667A  D7D2               	goto	i2l22653
 47639  00667C                     i2u3696_40:
 47640                           
 47641                           ;segment.c: 173: }
 47642                           ;segment.c: 175: if(letter_counter == 0){
 47643  00667C  5051               	movf	displayString@letter_counter,w,c
 47644  00667E  A4D8               	btfss	status,2,c
 47645  006680  D00E               	goto	i2l2912
 47646                           
 47647                           ;segment.c: 176: RC3 = 0;
 47648  006682  9682               	bcf	3970,3,c	;volatile
 47649                           
 47650                           ;segment.c: 177: PORTD = seg_ascii[letter[0]];
 47651  006684  0101               	movlb	1	; () banked
 47652  006686  5100               	movf	displayString@letter& (0+255),w,b
 47653  006688  0D01               	mullw	1
 47654  00668A  0E20               	movlw	low _seg_ascii
 47655  00668C  24F3               	addwf	prodl,w,c
 47656  00668E  6EF6               	movwf	tblptrl,c
 47657  006690  0EF2               	movlw	high _seg_ascii
 47658  006692  20F4               	addwfc	prodh,w,c
 47659  006694  6EF7               	movwf	tblptrh,c
 47660  006696                     	if	0	;There are less than 3 active tblptr bytes
 47661  006696                     	endif
 47662  006696  0008               	tblrd		*
 47663  006698  CFF5 FF83          	movff	tablat,3971	;volatile
 47664                           
 47665                           ; BSR set to: 1
 47666                           ;segment.c: 178: RC0 = 1;
 47667  00669C  8082               	bsf	3970,0,c	;volatile
 47668  00669E                     i2l2912:
 47669                           
 47670                           ;segment.c: 179: }
 47671                           ;segment.c: 180: if(letter_counter == 1){
 47672                           
 47673                           ; BSR set to: 1
 47674  00669E  0451               	decf	displayString@letter_counter,w,c
 47675  0066A0  A4D8               	btfss	status,2,c
 47676  0066A2  D00E               	goto	i2l2913
 47677                           
 47678                           ;segment.c: 181: RC0 = 0;
 47679  0066A4  9082               	bcf	3970,0,c	;volatile
 47680                           
 47681                           ;segment.c: 182: PORTD = seg_ascii[letter[1]];
 47682  0066A6  0101               	movlb	1	; () banked
 47683  0066A8  5101               	movf	(displayString@letter+1)& (0+255),w,b
 47684  0066AA  0D01               	mullw	1
 47685  0066AC  0E20               	movlw	low _seg_ascii
 47686  0066AE  24F3               	addwf	prodl,w,c
 47687  0066B0  6EF6               	movwf	tblptrl,c
 47688  0066B2  0EF2               	movlw	high _seg_ascii
 47689  0066B4  20F4               	addwfc	prodh,w,c
 47690  0066B6  6EF7               	movwf	tblptrh,c
 47691  0066B8                     	if	0	;There are less than 3 active tblptr bytes
 47692  0066B8                     	endif
 47693  0066B8  0008               	tblrd		*
 47694  0066BA  CFF5 FF83          	movff	tablat,3971	;volatile
 47695                           
 47696                           ; BSR set to: 1
 47697                           ;segment.c: 183: RC1 = 1;
 47698  0066BE  8282               	bsf	3970,1,c	;volatile
 47699  0066C0                     i2l2913:
 47700                           
 47701                           ;segment.c: 184: }
 47702                           ;segment.c: 185: if(letter_counter == 2){
 47703                           
 47704                           ; BSR set to: 1
 47705  0066C0  0E02               	movlw	2
 47706  0066C2  1851               	xorwf	displayString@letter_counter,w,c
 47707  0066C4  A4D8               	btfss	status,2,c
 47708  0066C6  D00E               	goto	i2l2914
 47709                           
 47710                           ;segment.c: 186: RC1 = 0;
 47711  0066C8  9282               	bcf	3970,1,c	;volatile
 47712                           
 47713                           ;segment.c: 187: PORTD = seg_ascii[letter[2]];
 47714  0066CA  0101               	movlb	1	; () banked
 47715  0066CC  5102               	movf	(displayString@letter+2)& (0+255),w,b
 47716  0066CE  0D01               	mullw	1
 47717  0066D0  0E20               	movlw	low _seg_ascii
 47718  0066D2  24F3               	addwf	prodl,w,c
 47719  0066D4  6EF6               	movwf	tblptrl,c
 47720  0066D6  0EF2               	movlw	high _seg_ascii
 47721  0066D8  20F4               	addwfc	prodh,w,c
 47722  0066DA  6EF7               	movwf	tblptrh,c
 47723  0066DC                     	if	0	;There are less than 3 active tblptr bytes
 47724  0066DC                     	endif
 47725  0066DC  0008               	tblrd		*
 47726  0066DE  CFF5 FF83          	movff	tablat,3971	;volatile
 47727                           
 47728                           ; BSR set to: 1
 47729                           ;segment.c: 188: RC2 = 1;
 47730  0066E2  8482               	bsf	3970,2,c	;volatile
 47731  0066E4                     i2l2914:
 47732                           
 47733                           ;segment.c: 189: }
 47734                           ;segment.c: 190: if(letter_counter == 3){
 47735                           
 47736                           ; BSR set to: 1
 47737  0066E4  0E03               	movlw	3
 47738  0066E6  1851               	xorwf	displayString@letter_counter,w,c
 47739  0066E8  A4D8               	btfss	status,2,c
 47740  0066EA  D00E               	goto	i2l2915
 47741                           
 47742                           ;segment.c: 191: RC2 = 0;
 47743  0066EC  9482               	bcf	3970,2,c	;volatile
 47744                           
 47745                           ;segment.c: 192: PORTD = seg_ascii[letter[3]];
 47746  0066EE  0101               	movlb	1	; () banked
 47747  0066F0  5103               	movf	(displayString@letter+3)& (0+255),w,b
 47748  0066F2  0D01               	mullw	1
 47749  0066F4  0E20               	movlw	low _seg_ascii
 47750  0066F6  24F3               	addwf	prodl,w,c
 47751  0066F8  6EF6               	movwf	tblptrl,c
 47752  0066FA  0EF2               	movlw	high _seg_ascii
 47753  0066FC  20F4               	addwfc	prodh,w,c
 47754  0066FE  6EF7               	movwf	tblptrh,c
 47755  006700                     	if	0	;There are less than 3 active tblptr bytes
 47756  006700                     	endif
 47757  006700  0008               	tblrd		*
 47758  006702  CFF5 FF83          	movff	tablat,3971	;volatile
 47759                           
 47760                           ; BSR set to: 1
 47761                           ;segment.c: 193: RC3 = 1;
 47762  006706  8682               	bsf	3970,3,c	;volatile
 47763  006708                     i2l2915:
 47764                           
 47765                           ;segment.c: 194: }
 47766                           ;segment.c: 197: letter_counter++;
 47767                           
 47768                           ; BSR set to: 1
 47769  006708  2A51               	incf	displayString@letter_counter,f,c
 47770                           
 47771                           ;segment.c: 198: if(letter_counter > 3){letter_counter = 0;}
 47772  00670A  0E03               	movlw	3
 47773  00670C  6451               	cpfsgt	displayString@letter_counter,c
 47774  00670E  0012               	return	
 47775  006710  0E00               	movlw	0
 47776  006712  6E51               	movwf	displayString@letter_counter,c
 47777  006714  0012               	return	
 47778  006716                     __end_of_displayString:
 47779                           	opt stack 0
 47780                           pclatu	equ	0xFFB
 47781                           pclath	equ	0xFFA
 47782                           tblptru	equ	0xFF8
 47783                           tblptrh	equ	0xFF7
 47784                           tblptrl	equ	0xFF6
 47785                           tablat	equ	0xFF5
 47786                           prodh	equ	0xFF4
 47787                           prodl	equ	0xFF3
 47788                           intcon	equ	0xFF2
 47789                           intcon2	equ	0xFF1
 47790                           postinc0	equ	0xFEE
 47791                           fsr0h	equ	0xFEA
 47792                           fsr0l	equ	0xFE9
 47793                           wreg	equ	0xFE8
 47794                           indf1	equ	0xFE7
 47795                           postinc1	equ	0xFE6
 47796                           postdec1	equ	0xFE5
 47797                           fsr1h	equ	0xFE2
 47798                           fsr1l	equ	0xFE1
 47799                           indf2	equ	0xFDF
 47800                           postinc2	equ	0xFDE
 47801                           postdec2	equ	0xFDD
 47802                           plusw2	equ	0xFDB
 47803                           fsr2h	equ	0xFDA
 47804                           fsr2l	equ	0xFD9
 47805                           status	equ	0xFD8
 47806                           
 47807 ;; *************** function _displayDigits *****************
 47808 ;; Defined at:
 47809 ;;		line 54 in file "segment.c"
 47810 ;; Parameters:    Size  Location     Type
 47811 ;;		None
 47812 ;; Auto vars:     Size  Location     Type
 47813 ;;  highByte        1   24[COMRAM] unsigned char 
 47814 ;;  lowByte         1   23[COMRAM] unsigned char 
 47815 ;; Return value:  Size  Location     Type
 47816 ;;                  1    wreg      void 
 47817 ;; Registers used:
 47818 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 47819 ;; Tracked objects:
 47820 ;;		On entry : 0/0
 47821 ;;		On exit  : 0/0
 47822 ;;		Unchanged: 0/0
 47823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47825 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47826 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47827 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47828 ;;Total ram usage:        5 bytes
 47829 ;; Hardware stack levels used:    1
 47830 ;; Hardware stack levels required when called:    1
 47831 ;; This function calls:
 47832 ;;		i2___awdiv
 47833 ;;		i2___awmod
 47834 ;; This function is called by:
 47835 ;;		_display
 47836 ;; This function uses a non-reentrant model
 47837 ;;
 47838                           
 47839                           	psect	text155
 47840  004040                     __ptext155:
 47841                           	opt stack 0
 47842  004040                     _displayDigits:
 47843                           	opt stack 15
 47844                           
 47845                           ;segment.c: 60: static unsigned char digit[4];
 47846                           ;segment.c: 61: static unsigned char digit_counter;
 47847                           ;segment.c: 62: static signed int number_to_display_last;
 47848                           ;segment.c: 63: static signed int number_to_display_temp;
 47849                           ;segment.c: 66: if(number_to_display != number_to_display_last){
 47850                           
 47851                           ;incstack = 0
 47852  004040  0101               	movlb	1	; () banked
 47853  004042  516B               	movf	displayDigits@number_to_display_last& (0+255),w,b
 47854  004044  185B               	xorwf	_number_to_display,w,c
 47855  004046  E104               	bnz	i2u3655_40
 47856  004048  516C               	movf	(displayDigits@number_to_display_last+1)& (0+255),w,b
 47857  00404A  185C               	xorwf	_number_to_display+1,w,c
 47858  00404C  B4D8               	btfsc	status,2,c
 47859  00404E  D0B1               	goto	i2l2869
 47860  004050                     i2u3655_40:
 47861                           
 47862                           ; BSR set to: 1
 47863                           ;segment.c: 68: if(DIGIT_MODE == 0) {
 47864  004050  5059               	movf	_DIGIT_MODE,w,c
 47865  004052  A4D8               	btfss	status,2,c
 47866  004054  D062               	goto	i2l2870
 47867                           
 47868                           ; BSR set to: 1
 47869                           ;segment.c: 70: if(number_to_display >= 0){number_to_display_temp = number_to_display;}
 47870  004056  BE5C               	btfsc	_number_to_display+1,7,c
 47871  004058  D004               	goto	i2l2871
 47872                           
 47873                           ; BSR set to: 1
 47874  00405A  C05B  F04D         	movff	_number_to_display,displayDigits@number_to_display_temp
 47875  00405E  C05C  F04E         	movff	_number_to_display+1,displayDigits@number_to_display_temp+1
 47876  004062                     i2l2871:
 47877                           
 47878                           ; BSR set to: 1
 47879                           ;segment.c: 71: if(number_to_display < 0){number_to_display_temp = 0 - number_to_display
      +                          ;}
 47880                           
 47881                           ; BSR set to: 1
 47882  004062  AE5C               	btfss	_number_to_display+1,7,c
 47883  004064  D00C               	goto	i2l2872
 47884                           
 47885                           ; BSR set to: 1
 47886  004066  C05B  F015         	movff	_number_to_display,??_displayDigits
 47887  00406A  C05C  F016         	movff	_number_to_display+1,??_displayDigits+1
 47888  00406E  1E15               	comf	??_displayDigits,f,c
 47889  004070  1E16               	comf	??_displayDigits+1,f,c
 47890  004072  4A15               	infsnz	??_displayDigits,f,c
 47891  004074  2A16               	incf	??_displayDigits+1,f,c
 47892  004076  C015  F04D         	movff	??_displayDigits,displayDigits@number_to_display_temp
 47893  00407A  C016  F04E         	movff	??_displayDigits+1,displayDigits@number_to_display_temp+1
 47894  00407E                     i2l2872:
 47895                           
 47896                           ; BSR set to: 1
 47897                           ;segment.c: 73: digit[0] = (number_to_display_temp / 1000) % 10;
 47898                           
 47899                           ; BSR set to: 1
 47900  00407E  0E03               	movlw	3
 47901  004080  6E04               	movwf	i2___awdiv@divisor+1,c
 47902  004082  0EE8               	movlw	232
 47903  004084  6E03               	movwf	i2___awdiv@divisor,c
 47904  004086  C04D  F001         	movff	displayDigits@number_to_display_temp,i2___awdiv@dividend
 47905  00408A  C04E  F002         	movff	displayDigits@number_to_display_temp+1,i2___awdiv@dividend+1
 47906  00408E  EC42  F03E         	call	i2___awdiv	;wreg free
 47907  004092  C001  F00F         	movff	?i2___awdiv,i2___awmod@dividend
 47908  004096  C002  F010         	movff	?i2___awdiv+1,i2___awmod@dividend+1
 47909  00409A  0E00               	movlw	0
 47910  00409C  6E12               	movwf	i2___awmod@divisor+1,c
 47911  00409E  0E0A               	movlw	10
 47912  0040A0  6E11               	movwf	i2___awmod@divisor,c
 47913  0040A2  EC0F  F043         	call	i2___awmod	;wreg free
 47914  0040A6  500F               	movf	?i2___awmod,w,c
 47915  0040A8  6E37               	movwf	displayDigits@digit,c
 47916                           
 47917                           ;segment.c: 74: digit[1] = (number_to_display_temp / 100) % 10;
 47918  0040AA  0E00               	movlw	0
 47919  0040AC  6E04               	movwf	i2___awdiv@divisor+1,c
 47920  0040AE  0E64               	movlw	100
 47921  0040B0  6E03               	movwf	i2___awdiv@divisor,c
 47922  0040B2  C04D  F001         	movff	displayDigits@number_to_display_temp,i2___awdiv@dividend
 47923  0040B6  C04E  F002         	movff	displayDigits@number_to_display_temp+1,i2___awdiv@dividend+1
 47924  0040BA  EC42  F03E         	call	i2___awdiv	;wreg free
 47925  0040BE  C001  F00F         	movff	?i2___awdiv,i2___awmod@dividend
 47926  0040C2  C002  F010         	movff	?i2___awdiv+1,i2___awmod@dividend+1
 47927  0040C6  0E00               	movlw	0
 47928  0040C8  6E12               	movwf	i2___awmod@divisor+1,c
 47929  0040CA  0E0A               	movlw	10
 47930  0040CC  6E11               	movwf	i2___awmod@divisor,c
 47931  0040CE  EC0F  F043         	call	i2___awmod	;wreg free
 47932  0040D2  500F               	movf	?i2___awmod,w,c
 47933  0040D4  6E38               	movwf	displayDigits@digit+1,c
 47934                           
 47935                           ;segment.c: 75: digit[2] = (number_to_display_temp / 10) % 10;
 47936  0040D6  0E00               	movlw	0
 47937  0040D8  6E04               	movwf	i2___awdiv@divisor+1,c
 47938  0040DA  0E0A               	movlw	10
 47939  0040DC  6E03               	movwf	i2___awdiv@divisor,c
 47940  0040DE  C04D  F001         	movff	displayDigits@number_to_display_temp,i2___awdiv@dividend
 47941  0040E2  C04E  F002         	movff	displayDigits@number_to_display_temp+1,i2___awdiv@dividend+1
 47942  0040E6  EC42  F03E         	call	i2___awdiv	;wreg free
 47943  0040EA  C001  F00F         	movff	?i2___awdiv,i2___awmod@dividend
 47944  0040EE  C002  F010         	movff	?i2___awdiv+1,i2___awmod@dividend+1
 47945  0040F2  0E00               	movlw	0
 47946  0040F4  6E12               	movwf	i2___awmod@divisor+1,c
 47947  0040F6  0E0A               	movlw	10
 47948  0040F8  6E11               	movwf	i2___awmod@divisor,c
 47949  0040FA  EC0F  F043         	call	i2___awmod	;wreg free
 47950  0040FE  500F               	movf	?i2___awmod,w,c
 47951  004100  6E39               	movwf	displayDigits@digit+2,c
 47952                           
 47953                           ;segment.c: 76: digit[3] = number_to_display_temp % 10;
 47954  004102  C04D  F00F         	movff	displayDigits@number_to_display_temp,i2___awmod@dividend
 47955  004106  C04E  F010         	movff	displayDigits@number_to_display_temp+1,i2___awmod@dividend+1
 47956  00410A  0E00               	movlw	0
 47957  00410C  6E12               	movwf	i2___awmod@divisor+1,c
 47958  00410E  0E0A               	movlw	10
 47959  004110  6E11               	movwf	i2___awmod@divisor,c
 47960  004112  EC0F  F043         	call	i2___awmod	;wreg free
 47961  004116  500F               	movf	?i2___awmod,w,c
 47962  004118  6E3A               	movwf	displayDigits@digit+3,c
 47963  00411A                     i2l2870:
 47964                           
 47965                           ;segment.c: 77: }
 47966                           ;segment.c: 79: if(DIGIT_MODE == 1) {
 47967  00411A  0459               	decf	_DIGIT_MODE,w,c
 47968  00411C  A4D8               	btfss	status,2,c
 47969  00411E  D022               	goto	i2l2873
 47970                           
 47971                           ;segment.c: 80: digit[0] = (number_to_display >> 12) % 16;
 47972  004120  C05B  F015         	movff	_number_to_display,??_displayDigits
 47973  004124  C05C  F016         	movff	_number_to_display+1,??_displayDigits+1
 47974  004128  0E0C               	movlw	12
 47975  00412A  6E17               	movwf	(??_displayDigits+2)& (0+255),c
 47976  00412C                     i2u3660_45:
 47977  00412C  3416               	rlcf	??_displayDigits+1,w,c
 47978  00412E  3216               	rrcf	??_displayDigits+1,f,c
 47979  004130  3215               	rrcf	??_displayDigits,f,c
 47980  004132  2E17               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47981  004134  D7FB               	goto	i2u3660_45
 47982  004136  5015               	movf	??_displayDigits,w,c
 47983  004138  0B0F               	andlw	15
 47984  00413A  6E37               	movwf	displayDigits@digit,c
 47985                           
 47986                           ;segment.c: 81: digit[1] = (number_to_display >> 8) % 16;
 47987  00413C  505C               	movf	_number_to_display+1,w,c
 47988  00413E  0B0F               	andlw	15
 47989  004140  6E38               	movwf	displayDigits@digit+1,c
 47990                           
 47991                           ;segment.c: 82: digit[2] = (number_to_display >> 4) % 16;
 47992  004142  C05B  F015         	movff	_number_to_display,??_displayDigits
 47993  004146  C05C  F016         	movff	_number_to_display+1,??_displayDigits+1
 47994  00414A  0E04               	movlw	4
 47995  00414C  6E17               	movwf	(??_displayDigits+2)& (0+255),c
 47996  00414E                     i2u3661_45:
 47997  00414E  3416               	rlcf	??_displayDigits+1,w,c
 47998  004150  3216               	rrcf	??_displayDigits+1,f,c
 47999  004152  3215               	rrcf	??_displayDigits,f,c
 48000  004154  2E17               	decfsz	(??_displayDigits+2)& (0+255),f,c
 48001  004156  D7FB               	goto	i2u3661_45
 48002  004158  5015               	movf	??_displayDigits,w,c
 48003  00415A  0B0F               	andlw	15
 48004  00415C  6E39               	movwf	displayDigits@digit+2,c
 48005                           
 48006                           ;segment.c: 83: digit[3] = number_to_display % 16;
 48007  00415E  505B               	movf	_number_to_display,w,c
 48008  004160  0B0F               	andlw	15
 48009  004162  6E3A               	movwf	displayDigits@digit+3,c
 48010  004164                     i2l2873:
 48011                           
 48012                           ;segment.c: 84: }
 48013                           ;segment.c: 86: if(DIGIT_MODE == 2) {
 48014  004164  0E02               	movlw	2
 48015  004166  1859               	xorwf	_DIGIT_MODE,w,c
 48016  004168  A4D8               	btfss	status,2,c
 48017  00416A  D01F               	goto	i2l2874
 48018                           
 48019                           ;segment.c: 88: unsigned char lowByte = number_to_display & 0x7F;
 48020  00416C  505B               	movf	_number_to_display,w,c
 48021  00416E  0B7F               	andlw	127
 48022  004170  6E18               	movwf	displayDigits@lowByte,c
 48023                           
 48024                           ;segment.c: 89: unsigned char highByte = (number_to_display >> 7) & 0x7F;
 48025  004172  C05B  F015         	movff	_number_to_display,??_displayDigits
 48026  004176  C05C  F016         	movff	_number_to_display+1,??_displayDigits+1
 48027  00417A  0E07               	movlw	7
 48028  00417C  6E17               	movwf	(??_displayDigits+2)& (0+255),c
 48029  00417E                     i2u3663_45:
 48030  00417E  3416               	rlcf	??_displayDigits+1,w,c
 48031  004180  3216               	rrcf	??_displayDigits+1,f,c
 48032  004182  3215               	rrcf	??_displayDigits,f,c
 48033  004184  2E17               	decfsz	(??_displayDigits+2)& (0+255),f,c
 48034  004186  D7FB               	goto	i2u3663_45
 48035  004188  5015               	movf	??_displayDigits,w,c
 48036  00418A  0B7F               	andlw	127
 48037  00418C  6E19               	movwf	displayDigits@highByte,c
 48038                           
 48039                           ;segment.c: 91: digit[0] = (highByte >> 4) % 0x8;
 48040  00418E  3819               	swapf	displayDigits@highByte,w,c
 48041  004190  0B0F               	andlw	15
 48042  004192  0B07               	andlw	7
 48043  004194  6E37               	movwf	displayDigits@digit,c
 48044                           
 48045                           ;segment.c: 92: digit[1] = highByte % 16;
 48046  004196  5019               	movf	displayDigits@highByte,w,c
 48047  004198  0B0F               	andlw	15
 48048  00419A  6E38               	movwf	displayDigits@digit+1,c
 48049                           
 48050                           ;segment.c: 93: digit[2] = (lowByte >> 4) % 0x8;
 48051  00419C  3818               	swapf	displayDigits@lowByte,w,c
 48052  00419E  0B0F               	andlw	15
 48053  0041A0  0B07               	andlw	7
 48054  0041A2  6E39               	movwf	displayDigits@digit+2,c
 48055                           
 48056                           ;segment.c: 94: digit[3] = lowByte % 16;
 48057  0041A4  5018               	movf	displayDigits@lowByte,w,c
 48058  0041A6  0B0F               	andlw	15
 48059  0041A8  6E3A               	movwf	displayDigits@digit+3,c
 48060  0041AA                     i2l2874:
 48061                           
 48062                           ;segment.c: 96: }
 48063                           ;segment.c: 99: number_to_display_last = number_to_display;
 48064  0041AA  C05B  F16B         	movff	_number_to_display,displayDigits@number_to_display_last
 48065  0041AE  C05C  F16C         	movff	_number_to_display+1,displayDigits@number_to_display_last+1
 48066  0041B2                     i2l2869:
 48067                           
 48068                           ;segment.c: 100: }
 48069                           ;segment.c: 103: if (DIGIT_MODE == 0 || DIGIT_MODE == 1 || DIGIT_MODE == 2) {
 48070  0041B2  5059               	movf	_DIGIT_MODE,w,c
 48071  0041B4  B4D8               	btfsc	status,2,c
 48072  0041B6  D007               	goto	i2u3666_40
 48073  0041B8  0459               	decf	_DIGIT_MODE,w,c
 48074  0041BA  B4D8               	btfsc	status,2,c
 48075  0041BC  D004               	goto	i2u3666_40
 48076  0041BE  0E02               	movlw	2
 48077  0041C0  1859               	xorwf	_DIGIT_MODE,w,c
 48078  0041C2  A4D8               	btfss	status,2,c
 48079  0041C4  D08A               	goto	i2l2898
 48080  0041C6                     i2u3666_40:
 48081                           
 48082                           ;segment.c: 108: if(digit_counter == 0){
 48083  0041C6  5052               	movf	displayDigits@digit_counter,w,c
 48084  0041C8  A4D8               	btfss	status,2,c
 48085  0041CA  D022               	goto	i2l2885
 48086                           
 48087                           ;segment.c: 109: RC3 = 0;
 48088  0041CC  9682               	bcf	3970,3,c	;volatile
 48089                           
 48090                           ;segment.c: 112: if(DIGIT_MODE == 0 && number_to_display < 0){
 48091  0041CE  5059               	movf	_DIGIT_MODE,w,c
 48092  0041D0  B4D8               	btfsc	status,2,c
 48093  0041D2  AE5C               	btfss	_number_to_display+1,7,c
 48094  0041D4  D00A               	goto	i2l2879
 48095                           
 48096                           ;segment.c: 115: if(digit[1] > 0){PORTD = 0x40; RC0 = 1;}
 48097  0041D6  5038               	movf	displayDigits@digit+1,w,c
 48098  0041D8  B4D8               	btfsc	status,2,c
 48099  0041DA  D003               	goto	i2l2880
 48100  0041DC  0E40               	movlw	64
 48101  0041DE  6E83               	movwf	3971,c	;volatile
 48102  0041E0  8082               	bsf	3970,0,c	;volatile
 48103  0041E2                     i2l2880:
 48104                           
 48105                           ;segment.c: 116: if(light_decimal_points == 1){PORTD |= 0x80;}
 48106  0041E2  AC36               	btfss	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48107  0041E4  D015               	goto	i2l2885
 48108  0041E6  8E83               	bsf	3971,7,c	;volatile
 48109                           
 48110                           ;segment.c: 117: }
 48111  0041E8  D013               	goto	i2l2885
 48112  0041EA                     i2l2879:
 48113                           
 48114                           ;segment.c: 119: else {
 48115                           ;segment.c: 120: PORTD = seg_bcd_hex[digit[0]];
 48116  0041EA  5037               	movf	displayDigits@digit,w,c
 48117  0041EC  0D01               	mullw	1
 48118  0041EE  0E59               	movlw	low _seg_bcd_hex
 48119  0041F0  24F3               	addwf	prodl,w,c
 48120  0041F2  6EF6               	movwf	tblptrl,c
 48121  0041F4  0EF3               	movlw	high _seg_bcd_hex
 48122  0041F6  20F4               	addwfc	prodh,w,c
 48123  0041F8  6EF7               	movwf	tblptrh,c
 48124  0041FA                     	if	0	;There are less than 3 active tblptr bytes
 48125  0041FA                     	endif
 48126  0041FA  0008               	tblrd		*
 48127  0041FC  CFF5 FF83          	movff	tablat,3971	;volatile
 48128                           
 48129                           ;segment.c: 121: if(light_decimal_points == 1){PORTD |= 0x80;}
 48130  004200  BC36               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48131  004202  8E83               	bsf	3971,7,c	;volatile
 48132                           
 48133                           ;segment.c: 122: if(digit[0] == 0){RC0 = 0;}
 48134  004204  5037               	movf	displayDigits@digit,w,c
 48135  004206  A4D8               	btfss	status,2,c
 48136  004208  D002               	goto	i2l2884
 48137  00420A  9082               	bcf	3970,0,c	;volatile
 48138  00420C  D001               	goto	i2l2885
 48139  00420E                     i2l2884:
 48140                           
 48141                           ;segment.c: 123: else{RC0 = 1;}
 48142  00420E  8082               	bsf	3970,0,c	;volatile
 48143  004210                     i2l2885:
 48144                           
 48145                           ;segment.c: 124: }
 48146                           ;segment.c: 125: }
 48147                           ;segment.c: 126: if(digit_counter == 1){
 48148  004210  0452               	decf	displayDigits@digit_counter,w,c
 48149  004212  A4D8               	btfss	status,2,c
 48150  004214  D024               	goto	i2l2891
 48151                           
 48152                           ;segment.c: 127: RC0 = 0;
 48153  004216  9082               	bcf	3970,0,c	;volatile
 48154                           
 48155                           ;segment.c: 128: PORTD = seg_bcd_hex[digit[1]];
 48156  004218  5038               	movf	displayDigits@digit+1,w,c
 48157  00421A  0D01               	mullw	1
 48158  00421C  0E59               	movlw	low _seg_bcd_hex
 48159  00421E  24F3               	addwf	prodl,w,c
 48160  004220  6EF6               	movwf	tblptrl,c
 48161  004222  0EF3               	movlw	high _seg_bcd_hex
 48162  004224  20F4               	addwfc	prodh,w,c
 48163  004226  6EF7               	movwf	tblptrh,c
 48164  004228                     	if	0	;There are less than 3 active tblptr bytes
 48165  004228                     	endif
 48166  004228  0008               	tblrd		*
 48167  00422A  CFF5 FF83          	movff	tablat,3971	;volatile
 48168                           
 48169                           ;segment.c: 129: if(light_decimal_points == 1){PORTD |= 0x80;}
 48170  00422E  BC36               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48171  004230  8E83               	bsf	3971,7,c	;volatile
 48172                           
 48173                           ;segment.c: 130: if(digit[0] == 0 && digit[1] == 0){RC1 = 0;}
 48174  004232  5037               	movf	displayDigits@digit,w,c
 48175  004234  A4D8               	btfss	status,2,c
 48176  004236  D005               	goto	i2l2888
 48177  004238  5038               	movf	displayDigits@digit+1,w,c
 48178  00423A  A4D8               	btfss	status,2,c
 48179  00423C  D002               	goto	i2l2888
 48180  00423E  9282               	bcf	3970,1,c	;volatile
 48181  004240  D001               	goto	i2l2889
 48182  004242                     i2l2888:
 48183                           
 48184                           ;segment.c: 131: else{RC1 = 1;}
 48185  004242  8282               	bsf	3970,1,c	;volatile
 48186  004244                     i2l2889:
 48187                           
 48188                           ;segment.c: 133: if(DIGIT_MODE == 0 && number_to_display < 0){
 48189  004244  5059               	movf	_DIGIT_MODE,w,c
 48190  004246  B4D8               	btfsc	status,2,c
 48191  004248  AE5C               	btfss	_number_to_display+1,7,c
 48192  00424A  D009               	goto	i2l2891
 48193                           
 48194                           ;segment.c: 135: if(digit[2] > 0 && digit[1] == 0){PORTD = 0x40; RC1 = 1;}
 48195  00424C  5039               	movf	displayDigits@digit+2,w,c
 48196  00424E  B4D8               	btfsc	status,2,c
 48197  004250  D006               	goto	i2l2891
 48198  004252  5038               	movf	displayDigits@digit+1,w,c
 48199  004254  A4D8               	btfss	status,2,c
 48200  004256  D003               	goto	i2l2891
 48201  004258  0E40               	movlw	64
 48202  00425A  6E83               	movwf	3971,c	;volatile
 48203  00425C  8282               	bsf	3970,1,c	;volatile
 48204  00425E                     i2l2891:
 48205                           
 48206                           ;segment.c: 136: }
 48207                           ;segment.c: 137: }
 48208                           ;segment.c: 138: if(digit_counter == 2){
 48209  00425E  0E02               	movlw	2
 48210  004260  1852               	xorwf	displayDigits@digit_counter,w,c
 48211  004262  A4D8               	btfss	status,2,c
 48212  004264  D027               	goto	i2l2897
 48213                           
 48214                           ;segment.c: 139: RC1 = 0;
 48215  004266  9282               	bcf	3970,1,c	;volatile
 48216                           
 48217                           ;segment.c: 140: PORTD = seg_bcd_hex[digit[2]];
 48218  004268  5039               	movf	displayDigits@digit+2,w,c
 48219  00426A  0D01               	mullw	1
 48220  00426C  0E59               	movlw	low _seg_bcd_hex
 48221  00426E  24F3               	addwf	prodl,w,c
 48222  004270  6EF6               	movwf	tblptrl,c
 48223  004272  0EF3               	movlw	high _seg_bcd_hex
 48224  004274  20F4               	addwfc	prodh,w,c
 48225  004276  6EF7               	movwf	tblptrh,c
 48226  004278                     	if	0	;There are less than 3 active tblptr bytes
 48227  004278                     	endif
 48228  004278  0008               	tblrd		*
 48229  00427A  CFF5 FF83          	movff	tablat,3971	;volatile
 48230                           
 48231                           ;segment.c: 141: if(light_decimal_points == 1){PORTD |= 0x80;}
 48232  00427E  BC36               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48233  004280  8E83               	bsf	3971,7,c	;volatile
 48234                           
 48235                           ;segment.c: 142: if(digit[0] == 0 && digit[1] == 0 && digit[2] == 0){RC2 = 0;}
 48236  004282  5037               	movf	displayDigits@digit,w,c
 48237  004284  A4D8               	btfss	status,2,c
 48238  004286  D008               	goto	i2l2894
 48239  004288  5038               	movf	displayDigits@digit+1,w,c
 48240  00428A  A4D8               	btfss	status,2,c
 48241  00428C  D005               	goto	i2l2894
 48242  00428E  5039               	movf	displayDigits@digit+2,w,c
 48243  004290  A4D8               	btfss	status,2,c
 48244  004292  D002               	goto	i2l2894
 48245  004294  9482               	bcf	3970,2,c	;volatile
 48246  004296  D001               	goto	i2l2895
 48247  004298                     i2l2894:
 48248                           
 48249                           ;segment.c: 143: else{RC2 = 1;}
 48250  004298  8482               	bsf	3970,2,c	;volatile
 48251  00429A                     i2l2895:
 48252                           
 48253                           ;segment.c: 145: if(DIGIT_MODE == 0 && number_to_display < 0){
 48254  00429A  5059               	movf	_DIGIT_MODE,w,c
 48255  00429C  B4D8               	btfsc	status,2,c
 48256  00429E  AE5C               	btfss	_number_to_display+1,7,c
 48257  0042A0  D009               	goto	i2l2897
 48258                           
 48259                           ;segment.c: 146: if(digit[3] > 0 && digit[2] == 0){PORTD = 0x40; RC2 = 1;}
 48260  0042A2  503A               	movf	displayDigits@digit+3,w,c
 48261  0042A4  B4D8               	btfsc	status,2,c
 48262  0042A6  D006               	goto	i2l2897
 48263  0042A8  5039               	movf	displayDigits@digit+2,w,c
 48264  0042AA  A4D8               	btfss	status,2,c
 48265  0042AC  D003               	goto	i2l2897
 48266  0042AE  0E40               	movlw	64
 48267  0042B0  6E83               	movwf	3971,c	;volatile
 48268  0042B2  8482               	bsf	3970,2,c	;volatile
 48269  0042B4                     i2l2897:
 48270                           
 48271                           ;segment.c: 147: }
 48272                           ;segment.c: 148: }
 48273                           ;segment.c: 149: if(digit_counter == 3){
 48274  0042B4  0E03               	movlw	3
 48275  0042B6  1852               	xorwf	displayDigits@digit_counter,w,c
 48276  0042B8  A4D8               	btfss	status,2,c
 48277  0042BA  D00F               	goto	i2l2898
 48278                           
 48279                           ;segment.c: 150: RC2 = 0;
 48280  0042BC  9482               	bcf	3970,2,c	;volatile
 48281                           
 48282                           ;segment.c: 151: PORTD = seg_bcd_hex[digit[3]];
 48283  0042BE  503A               	movf	displayDigits@digit+3,w,c
 48284  0042C0  0D01               	mullw	1
 48285  0042C2  0E59               	movlw	low _seg_bcd_hex
 48286  0042C4  24F3               	addwf	prodl,w,c
 48287  0042C6  6EF6               	movwf	tblptrl,c
 48288  0042C8  0EF3               	movlw	high _seg_bcd_hex
 48289  0042CA  20F4               	addwfc	prodh,w,c
 48290  0042CC  6EF7               	movwf	tblptrh,c
 48291  0042CE                     	if	0	;There are less than 3 active tblptr bytes
 48292  0042CE                     	endif
 48293  0042CE  0008               	tblrd		*
 48294  0042D0  CFF5 FF83          	movff	tablat,3971	;volatile
 48295                           
 48296                           ;segment.c: 152: if(light_decimal_points == 1){PORTD |= 0x80;}
 48297  0042D4  BC36               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48298  0042D6  8E83               	bsf	3971,7,c	;volatile
 48299                           
 48300                           ;segment.c: 153: RC3 = 1;
 48301  0042D8  8682               	bsf	3970,3,c	;volatile
 48302  0042DA                     i2l2898:
 48303                           
 48304                           ;segment.c: 154: }
 48305                           ;segment.c: 155: }
 48306                           ;segment.c: 158: digit_counter++;
 48307  0042DA  2A52               	incf	displayDigits@digit_counter,f,c
 48308                           
 48309                           ;segment.c: 159: if(digit_counter > 3){digit_counter = 0;}
 48310  0042DC  0E03               	movlw	3
 48311  0042DE  6452               	cpfsgt	displayDigits@digit_counter,c
 48312  0042E0  0012               	return	
 48313  0042E2  0E00               	movlw	0
 48314  0042E4  6E52               	movwf	displayDigits@digit_counter,c
 48315  0042E6  0012               	return	
 48316  0042E8                     __end_of_displayDigits:
 48317                           	opt stack 0
 48318                           pclatu	equ	0xFFB
 48319                           pclath	equ	0xFFA
 48320                           tblptru	equ	0xFF8
 48321                           tblptrh	equ	0xFF7
 48322                           tblptrl	equ	0xFF6
 48323                           tablat	equ	0xFF5
 48324                           prodh	equ	0xFF4
 48325                           prodl	equ	0xFF3
 48326                           intcon	equ	0xFF2
 48327                           intcon2	equ	0xFF1
 48328                           postinc0	equ	0xFEE
 48329                           fsr0h	equ	0xFEA
 48330                           fsr0l	equ	0xFE9
 48331                           wreg	equ	0xFE8
 48332                           indf1	equ	0xFE7
 48333                           postinc1	equ	0xFE6
 48334                           postdec1	equ	0xFE5
 48335                           fsr1h	equ	0xFE2
 48336                           fsr1l	equ	0xFE1
 48337                           indf2	equ	0xFDF
 48338                           postinc2	equ	0xFDE
 48339                           postdec2	equ	0xFDD
 48340                           plusw2	equ	0xFDB
 48341                           fsr2h	equ	0xFDA
 48342                           fsr2l	equ	0xFD9
 48343                           status	equ	0xFD8
 48344                           
 48345 ;; *************** function i2___awmod *****************
 48346 ;; Defined at:
 48347 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 48348 ;; Parameters:    Size  Location     Type
 48349 ;;  dividend        2   14[COMRAM] int 
 48350 ;;  divisor         2   16[COMRAM] int 
 48351 ;; Auto vars:     Size  Location     Type
 48352 ;;  __awmod         1   19[COMRAM] unsigned char 
 48353 ;;  __awmod         1   18[COMRAM] unsigned char 
 48354 ;; Return value:  Size  Location     Type
 48355 ;;                  2   14[COMRAM] int 
 48356 ;; Registers used:
 48357 ;;		wreg, status,2, status,0
 48358 ;; Tracked objects:
 48359 ;;		On entry : 0/0
 48360 ;;		On exit  : 0/0
 48361 ;;		Unchanged: 0/0
 48362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 48363 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48364 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48366 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48367 ;;Total ram usage:        6 bytes
 48368 ;; Hardware stack levels used:    1
 48369 ;; This function calls:
 48370 ;;		Nothing
 48371 ;; This function is called by:
 48372 ;;		_displayDigits
 48373 ;;		_playArpeggio
 48374 ;;		i2_random_pitches
 48375 ;;		i2_random_pitches_non_repeating
 48376 ;; This function uses a non-reentrant model
 48377 ;;
 48378                           
 48379                           	psect	text156
 48380  00861E                     __ptext156:
 48381                           	opt stack 0
 48382  00861E                     i2___awmod:
 48383                           	opt stack 15
 48384                           
 48385                           ;incstack = 0
 48386  00861E  0E00               	movlw	0
 48387  008620  6E14               	movwf	i2___awmod@sign,c
 48388  008622  AE10               	btfss	i2___awmod@dividend+1,7,c
 48389  008624  D006               	goto	i2l5608
 48390  008626  6C0F               	negf	i2___awmod@dividend,c
 48391  008628  1E10               	comf	i2___awmod@dividend+1,f,c
 48392  00862A  B0D8               	btfsc	status,0,c
 48393  00862C  2A10               	incf	i2___awmod@dividend+1,f,c
 48394  00862E  0E01               	movlw	1
 48395  008630  6E14               	movwf	i2___awmod@sign,c
 48396  008632                     i2l5608:
 48397  008632  AE12               	btfss	i2___awmod@divisor+1,7,c
 48398  008634  D004               	goto	i2l5609
 48399  008636  6C11               	negf	i2___awmod@divisor,c
 48400  008638  1E12               	comf	i2___awmod@divisor+1,f,c
 48401  00863A  B0D8               	btfsc	status,0,c
 48402  00863C  2A12               	incf	i2___awmod@divisor+1,f,c
 48403  00863E                     i2l5609:
 48404  00863E  5011               	movf	i2___awmod@divisor,w,c
 48405  008640  1012               	iorwf	i2___awmod@divisor+1,w,c
 48406  008642  B4D8               	btfsc	status,2,c
 48407  008644  D018               	goto	i2l5616
 48408  008646  0E01               	movlw	1
 48409  008648  6E13               	movwf	i2___awmod@counter,c
 48410  00864A  D004               	goto	i2l5611
 48411  00864C  90D8               	bcf	status,0,c
 48412  00864E  3611               	rlcf	i2___awmod@divisor,f,c
 48413  008650  3612               	rlcf	i2___awmod@divisor+1,f,c
 48414  008652  2A13               	incf	i2___awmod@counter,f,c
 48415  008654                     i2l5611:
 48416  008654  AE12               	btfss	i2___awmod@divisor+1,7,c
 48417  008656  D7FA               	goto	i2l5612
 48418  008658                     i2u3426_40:
 48419  008658  5011               	movf	i2___awmod@divisor,w,c
 48420  00865A  5C0F               	subwf	i2___awmod@dividend,w,c
 48421  00865C  5012               	movf	i2___awmod@divisor+1,w,c
 48422  00865E  5810               	subwfb	i2___awmod@dividend+1,w,c
 48423  008660  A0D8               	btfss	status,0,c
 48424  008662  D004               	goto	i2l5615
 48425  008664  5011               	movf	i2___awmod@divisor,w,c
 48426  008666  5E0F               	subwf	i2___awmod@dividend,f,c
 48427  008668  5012               	movf	i2___awmod@divisor+1,w,c
 48428  00866A  5A10               	subwfb	i2___awmod@dividend+1,f,c
 48429  00866C                     i2l5615:
 48430  00866C  90D8               	bcf	status,0,c
 48431  00866E  3212               	rrcf	i2___awmod@divisor+1,f,c
 48432  008670  3211               	rrcf	i2___awmod@divisor,f,c
 48433  008672  2E13               	decfsz	i2___awmod@counter,f,c
 48434  008674  D7F1               	goto	i2u3426_40
 48435  008676                     i2l5616:
 48436  008676  5014               	movf	i2___awmod@sign,w,c
 48437  008678  B4D8               	btfsc	status,2,c
 48438  00867A  D004               	goto	i2l5617
 48439  00867C  6C0F               	negf	i2___awmod@dividend,c
 48440  00867E  1E10               	comf	i2___awmod@dividend+1,f,c
 48441  008680  B0D8               	btfsc	status,0,c
 48442  008682  2A10               	incf	i2___awmod@dividend+1,f,c
 48443  008684                     i2l5617:
 48444  008684  C00F  F00F         	movff	i2___awmod@dividend,?i2___awmod
 48445  008688  C010  F010         	movff	i2___awmod@dividend+1,?i2___awmod+1
 48446  00868C  0012               	return	
 48447  00868E                     __end_ofi2___awmod:
 48448                           	opt stack 0
 48449                           pclatu	equ	0xFFB
 48450                           pclath	equ	0xFFA
 48451                           tblptru	equ	0xFF8
 48452                           tblptrh	equ	0xFF7
 48453                           tblptrl	equ	0xFF6
 48454                           tablat	equ	0xFF5
 48455                           prodh	equ	0xFF4
 48456                           prodl	equ	0xFF3
 48457                           intcon	equ	0xFF2
 48458                           intcon2	equ	0xFF1
 48459                           postinc0	equ	0xFEE
 48460                           fsr0h	equ	0xFEA
 48461                           fsr0l	equ	0xFE9
 48462                           wreg	equ	0xFE8
 48463                           indf1	equ	0xFE7
 48464                           postinc1	equ	0xFE6
 48465                           postdec1	equ	0xFE5
 48466                           fsr1h	equ	0xFE2
 48467                           fsr1l	equ	0xFE1
 48468                           indf2	equ	0xFDF
 48469                           postinc2	equ	0xFDE
 48470                           postdec2	equ	0xFDD
 48471                           plusw2	equ	0xFDB
 48472                           fsr2h	equ	0xFDA
 48473                           fsr2l	equ	0xFD9
 48474                           status	equ	0xFD8
 48475                           
 48476 ;; *************** function i2___awdiv *****************
 48477 ;; Defined at:
 48478 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 48479 ;; Parameters:    Size  Location     Type
 48480 ;;  dividend        2    0[COMRAM] int 
 48481 ;;  divisor         2    2[COMRAM] int 
 48482 ;; Auto vars:     Size  Location     Type
 48483 ;;  __awdiv         2    6[COMRAM] int 
 48484 ;;  __awdiv         1    5[COMRAM] unsigned char 
 48485 ;;  __awdiv         1    4[COMRAM] unsigned char 
 48486 ;; Return value:  Size  Location     Type
 48487 ;;                  2    0[COMRAM] int 
 48488 ;; Registers used:
 48489 ;;		wreg, status,2, status,0
 48490 ;; Tracked objects:
 48491 ;;		On entry : 0/0
 48492 ;;		On exit  : 0/0
 48493 ;;		Unchanged: 0/0
 48494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 48495 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48496 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48498 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48499 ;;Total ram usage:        8 bytes
 48500 ;; Hardware stack levels used:    1
 48501 ;; This function calls:
 48502 ;;		Nothing
 48503 ;; This function is called by:
 48504 ;;		_displayDigits
 48505 ;; This function uses a non-reentrant model
 48506 ;;
 48507                           
 48508                           	psect	text157
 48509  007C84                     __ptext157:
 48510                           	opt stack 0
 48511  007C84                     i2___awdiv:
 48512                           	opt stack 15
 48513                           
 48514                           ;incstack = 0
 48515  007C84  0E00               	movlw	0
 48516  007C86  6E06               	movwf	i2___awdiv@sign,c
 48517  007C88  AE04               	btfss	i2___awdiv@divisor+1,7,c
 48518  007C8A  D006               	goto	i2l5595
 48519  007C8C  6C03               	negf	i2___awdiv@divisor,c
 48520  007C8E  1E04               	comf	i2___awdiv@divisor+1,f,c
 48521  007C90  B0D8               	btfsc	status,0,c
 48522  007C92  2A04               	incf	i2___awdiv@divisor+1,f,c
 48523  007C94  0E01               	movlw	1
 48524  007C96  6E06               	movwf	i2___awdiv@sign,c
 48525  007C98                     i2l5595:
 48526  007C98  AE02               	btfss	i2___awdiv@dividend+1,7,c
 48527  007C9A  D006               	goto	i2l5596
 48528  007C9C  6C01               	negf	i2___awdiv@dividend,c
 48529  007C9E  1E02               	comf	i2___awdiv@dividend+1,f,c
 48530  007CA0  B0D8               	btfsc	status,0,c
 48531  007CA2  2A02               	incf	i2___awdiv@dividend+1,f,c
 48532  007CA4  0E01               	movlw	1
 48533  007CA6  1A06               	xorwf	i2___awdiv@sign,f,c
 48534  007CA8                     i2l5596:
 48535  007CA8  0E00               	movlw	0
 48536  007CAA  6E08               	movwf	i2___awdiv@quotient+1,c
 48537  007CAC  0E00               	movlw	0
 48538  007CAE  6E07               	movwf	i2___awdiv@quotient,c
 48539  007CB0  5003               	movf	i2___awdiv@divisor,w,c
 48540  007CB2  1004               	iorwf	i2___awdiv@divisor+1,w,c
 48541  007CB4  B4D8               	btfsc	status,2,c
 48542  007CB6  D01C               	goto	i2l5603
 48543  007CB8  0E01               	movlw	1
 48544  007CBA  6E05               	movwf	i2___awdiv@counter,c
 48545  007CBC  D004               	goto	i2l5598
 48546  007CBE  90D8               	bcf	status,0,c
 48547  007CC0  3603               	rlcf	i2___awdiv@divisor,f,c
 48548  007CC2  3604               	rlcf	i2___awdiv@divisor+1,f,c
 48549  007CC4  2A05               	incf	i2___awdiv@counter,f,c
 48550  007CC6                     i2l5598:
 48551  007CC6  AE04               	btfss	i2___awdiv@divisor+1,7,c
 48552  007CC8  D7FA               	goto	i2l5599
 48553  007CCA                     i2u3420_40:
 48554  007CCA  90D8               	bcf	status,0,c
 48555  007CCC  3607               	rlcf	i2___awdiv@quotient,f,c
 48556  007CCE  3608               	rlcf	i2___awdiv@quotient+1,f,c
 48557  007CD0  5003               	movf	i2___awdiv@divisor,w,c
 48558  007CD2  5C01               	subwf	i2___awdiv@dividend,w,c
 48559  007CD4  5004               	movf	i2___awdiv@divisor+1,w,c
 48560  007CD6  5802               	subwfb	i2___awdiv@dividend+1,w,c
 48561  007CD8  A0D8               	btfss	status,0,c
 48562  007CDA  D005               	goto	i2l5602
 48563  007CDC  5003               	movf	i2___awdiv@divisor,w,c
 48564  007CDE  5E01               	subwf	i2___awdiv@dividend,f,c
 48565  007CE0  5004               	movf	i2___awdiv@divisor+1,w,c
 48566  007CE2  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 48567  007CE4  8007               	bsf	i2___awdiv@quotient,0,c
 48568  007CE6                     i2l5602:
 48569  007CE6  90D8               	bcf	status,0,c
 48570  007CE8  3204               	rrcf	i2___awdiv@divisor+1,f,c
 48571  007CEA  3203               	rrcf	i2___awdiv@divisor,f,c
 48572  007CEC  2E05               	decfsz	i2___awdiv@counter,f,c
 48573  007CEE  D7ED               	goto	i2u3420_40
 48574  007CF0                     i2l5603:
 48575  007CF0  5006               	movf	i2___awdiv@sign,w,c
 48576  007CF2  B4D8               	btfsc	status,2,c
 48577  007CF4  D004               	goto	i2l5604
 48578  007CF6  6C07               	negf	i2___awdiv@quotient,c
 48579  007CF8  1E08               	comf	i2___awdiv@quotient+1,f,c
 48580  007CFA  B0D8               	btfsc	status,0,c
 48581  007CFC  2A08               	incf	i2___awdiv@quotient+1,f,c
 48582  007CFE                     i2l5604:
 48583  007CFE  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 48584  007D02  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 48585  007D06  0012               	return	
 48586  007D08                     __end_ofi2___awdiv:
 48587                           	opt stack 0
 48588                           pclatu	equ	0xFFB
 48589                           pclath	equ	0xFFA
 48590                           tblptru	equ	0xFF8
 48591                           tblptrh	equ	0xFF7
 48592                           tblptrl	equ	0xFF6
 48593                           tablat	equ	0xFF5
 48594                           prodh	equ	0xFF4
 48595                           prodl	equ	0xFF3
 48596                           intcon	equ	0xFF2
 48597                           intcon2	equ	0xFF1
 48598                           postinc0	equ	0xFEE
 48599                           fsr0h	equ	0xFEA
 48600                           fsr0l	equ	0xFE9
 48601                           wreg	equ	0xFE8
 48602                           indf1	equ	0xFE7
 48603                           postinc1	equ	0xFE6
 48604                           postdec1	equ	0xFE5
 48605                           fsr1h	equ	0xFE2
 48606                           fsr1l	equ	0xFE1
 48607                           indf2	equ	0xFDF
 48608                           postinc2	equ	0xFDE
 48609                           postdec2	equ	0xFDD
 48610                           plusw2	equ	0xFDB
 48611                           fsr2h	equ	0xFDA
 48612                           fsr2l	equ	0xFD9
 48613                           status	equ	0xFD8
 48614                           pclatu	equ	0xFFB
 48615                           pclath	equ	0xFFA
 48616                           tblptru	equ	0xFF8
 48617                           tblptrh	equ	0xFF7
 48618                           tblptrl	equ	0xFF6
 48619                           tablat	equ	0xFF5
 48620                           prodh	equ	0xFF4
 48621                           prodl	equ	0xFF3
 48622                           intcon	equ	0xFF2
 48623                           intcon2	equ	0xFF1
 48624                           postinc0	equ	0xFEE
 48625                           fsr0h	equ	0xFEA
 48626                           fsr0l	equ	0xFE9
 48627                           wreg	equ	0xFE8
 48628                           indf1	equ	0xFE7
 48629                           postinc1	equ	0xFE6
 48630                           postdec1	equ	0xFE5
 48631                           fsr1h	equ	0xFE2
 48632                           fsr1l	equ	0xFE1
 48633                           indf2	equ	0xFDF
 48634                           postinc2	equ	0xFDE
 48635                           postdec2	equ	0xFDD
 48636                           plusw2	equ	0xFDB
 48637                           fsr2h	equ	0xFDA
 48638                           fsr2l	equ	0xFD9
 48639                           status	equ	0xFD8
 48640                           
 48641                           	psect	rparam
 48642  0000                     pclatu	equ	0xFFB
 48643                           pclath	equ	0xFFA
 48644                           tblptru	equ	0xFF8
 48645                           tblptrh	equ	0xFF7
 48646                           tblptrl	equ	0xFF6
 48647                           tablat	equ	0xFF5
 48648                           prodh	equ	0xFF4
 48649                           prodl	equ	0xFF3
 48650                           intcon	equ	0xFF2
 48651                           intcon2	equ	0xFF1
 48652                           postinc0	equ	0xFEE
 48653                           fsr0h	equ	0xFEA
 48654                           fsr0l	equ	0xFE9
 48655                           wreg	equ	0xFE8
 48656                           indf1	equ	0xFE7
 48657                           postinc1	equ	0xFE6
 48658                           postdec1	equ	0xFE5
 48659                           fsr1h	equ	0xFE2
 48660                           fsr1l	equ	0xFE1
 48661                           indf2	equ	0xFDF
 48662                           postinc2	equ	0xFDE
 48663                           postdec2	equ	0xFDD
 48664                           plusw2	equ	0xFDB
 48665                           fsr2h	equ	0xFDA
 48666                           fsr2l	equ	0xFD9
 48667                           status	equ	0xFD8
 48668                           
 48669                           	psect	temp
 48670  00005F                     btemp:
 48671                           	opt stack 0
 48672  00005F                     	ds	1
 48673  0000                     int$flags	set	btemp
 48674  0000                     wtemp6	set	btemp+1
 48675                           pclatu	equ	0xFFB
 48676                           pclath	equ	0xFFA
 48677                           tblptru	equ	0xFF8
 48678                           tblptrh	equ	0xFF7
 48679                           tblptrl	equ	0xFF6
 48680                           tablat	equ	0xFF5
 48681                           prodh	equ	0xFF4
 48682                           prodl	equ	0xFF3
 48683                           intcon	equ	0xFF2
 48684                           intcon2	equ	0xFF1
 48685                           postinc0	equ	0xFEE
 48686                           fsr0h	equ	0xFEA
 48687                           fsr0l	equ	0xFE9
 48688                           wreg	equ	0xFE8
 48689                           indf1	equ	0xFE7
 48690                           postinc1	equ	0xFE6
 48691                           postdec1	equ	0xFE5
 48692                           fsr1h	equ	0xFE2
 48693                           fsr1l	equ	0xFE1
 48694                           indf2	equ	0xFDF
 48695                           postinc2	equ	0xFDE
 48696                           postdec2	equ	0xFDD
 48697                           plusw2	equ	0xFDB
 48698                           fsr2h	equ	0xFDA
 48699                           fsr2l	equ	0xFD9
 48700                           status	equ	0xFD8


Data Sizes:
    Strings     667
    Constant    5281
    Data        238
    BSS         382
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      94
    BANK0           160    112     160
    BANK1           256     80     255
    BANK2           256      0     252
    BANK3           256      0     105
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_60(CODE[5]), STR_58(CODE[5]), STR_55(CODE[5]), STR_53(CODE[5]), 
		 -> STR_43(CODE[5]), STR_41(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    arpeggioPtr	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), ARPEGGIO_RANDOM(BANK2[16]), ARPEGGIO_SORTED(BANK2[16]), ARPEGGIO(BANK1[16]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    playThisNote8@mode_p	PTR unsigned char  size(2) Largest target is 15
		 -> locrian_key(CODE[15]), aeolian_key(CODE[15]), mixolydian_key(CODE[15]), lydian_key(CODE[15]), 
		 -> phrygian_key(CODE[15]), dorian_key(CODE[15]), ionian_key(CODE[15]), 

    playSeventh@seventh_p	PTR unsigned char  size(2) Largest target is 4
		 -> diminished_7th(BANK2[4]), half_diminished_7th(BANK2[4]), minor_7th(BANK2[4]), major_7th(BANK2[4]), 
		 -> dominant_7th(BANK2[4]), 

    playTriad@triad_p	PTR unsigned char  size(2) Largest target is 3
		 -> diminished_triad(BANK1[3]), augmented_triad(BANK1[3]), minor_triad(BANK1[3]), major_triad(BANK1[3]), 

    Lcd_Print_String@a	PTR unsigned char  size(2) Largest target is 2397
		 -> STR_74(CODE[16]), STR_73(CODE[12]), STR_72(CODE[10]), STR_71(CODE[12]), 
		 -> STR_70(CODE[10]), STR_69(CODE[12]), STR_68(CODE[10]), STR_67(CODE[12]), 
		 -> STR_66(CODE[10]), STR_65(CODE[12]), STR_64(CODE[13]), STR_63(CODE[15]), 
		 -> STR_62(CODE[15]), STR_61(CODE[16]), STR_59(CODE[14]), STR_57(CODE[12]), 
		 -> STR_56(CODE[15]), STR_54(CODE[14]), STR_52(CODE[15]), STR_51(CODE[17]), 
		 -> STR_50(CODE[9]), STR_49(CODE[10]), STR_48(CODE[13]), STR_47(CODE[13]), 
		 -> STR_46(CODE[17]), STR_45(CODE[14]), STR_44(CODE[14]), STR_42(CODE[15]), 
		 -> STR_40(CODE[16]), STR_39(CODE[17]), STR_38(CODE[13]), STR_37(CODE[17]), 
		 -> STR_36(CODE[8]), STR_35(CODE[8]), STR_34(CODE[12]), STR_33(CODE[17]), 
		 -> STR_32(CODE[15]), STR_31(CODE[14]), STR_30(CODE[17]), STR_29(CODE[15]), 
		 -> STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[16]), STR_25(CODE[14]), 
		 -> STR_24(CODE[12]), LCD_STRINGS(CODE[2397]), STR_23(CODE[13]), STR_22(CODE[17]), 
		 -> STR_21(CODE[16]), STR_20(CODE[5]), STR_19(CODE[11]), STR_18(CODE[11]), 
		 -> STR_17(CODE[11]), STR_16(CODE[10]), STR_15(CODE[11]), STR_14(CODE[11]), 
		 -> STR_13(CODE[11]), STR_12(CODE[10]), string2display(BANK1[5]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_playArpeggio
    _playArpeggio->i2_random_pitches_non_repeating
    i2_random_pitches_non_repeating->i2___awmod
    i2_random_pitches->i2___awmod
    i2_rand->i2___lmul
    i2_noteOn->i2_noteOff
    i2_noteOff->i2_sendUSB
    _display->_displayDigits
    _displayDigits->i2___awmod
    i2___awmod->i2_rand

Critical Paths under _main in BANK0

    _main->_menu_lcd
    _panic_button->_controlChange
    _menu_lcd->_Function_G
    _Lcd_Clear->_Lcd_Cmd
    _Function_H_9->_Function_H_9_1
    _Function_H_9->_Function_H_9_2
    _Function_H_9->_Function_H_9_3
    _Function_H_9->_Function_H_9_4
    _Function_H_9_4->_Lcd_Print_String
    _Function_H_9_3->_Lcd_Print_String
    _Function_H_9_2->_Lcd_Print_String
    _Function_H_9_1->_Lcd_Print_String
    _Function_H_8->_Lcd_Print_String
    _Function_H_8_2->_Lcd_Print_String
    _Function_H_8_1->_Lcd_Print_String
    _Function_H_7->_Lcd_Print_String
    _Function_H_6->_Function_H_6_1
    _Function_H_6_2->_Lcd_Print_String
    _Function_H_6_1->_doTheUnLatch
    _Function_H_5->_Lcd_Print_String
    _Function_H_3->_int2string
    _Function_H_2->_calculate_pulse_length
    _Function_H_1->_Lcd_Print_String
    _Function_G->_Function_G_2
    _Function_G_4->_exitFunction
    _exitFunction->_Lcd_Print_String
    _Function_G_3->_Lcd_Print_String
    _loadFromEEPROM->_calculate_pulse_length
    _calculate_pulse_length->___fltol
    _exitLoad->_Lcd_Print_String
    _Function_G_1->_saveToEEPROM
    _exitSave->_Lcd_Print_String
    _eepromExit->_Lcd_Print_String
    _Function_F->_int2string
    _programChange->_sendUSB
    _Function_E_2->_int2string
    _Function_E_1->_int2string
    _Function_D_5->_setControllerNumbers
    _Function_D_4->_setControllerNumbers
    _Function_D_3->_setControllerNumbers
    _setControllerNumbers->_int2string
    _calculate_alpha->___fldiv
    ___fldiv->___flmul
    _Function_D_1->_Lcd_Print_String
    _Function_C->_Function_C_2
    _Function_C->_Function_C_3
    _Function_C_3->_int2string
    _Function_C_2->_int2string
    _int2string->___awmod
    _Function_C_1->_Lcd_Print_String
    _Function_B->_Lcd_Print_String
    _Function_A->_Function_A_1
    _Function_A->_Function_A_2
    _Function_A->_Function_A_3
    _Function_A_3->_Lcd_Print_String
    _Function_A_2->_Lcd_Print_String
    _Function_A_1->_Lcd_Print_String
    _clear_row2->_Lcd_Print_String
    _clear_row1->_Lcd_Print_String
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->___wmul
    _Lcd_Print_Char->_Lcd_SetBit
    _initializeSaveSlotsOnce->_saveToEEPROM
    _saveToEEPROM->_Write_b_eep
    _initializeMenuArray->___wmul
    _displayTest->_strcpy
    _digitalInputs->_processOctave
    _processOctave->_doTheUnLatch
    _doTheUnLatch->_playThisNote8
    _doTheLatch->_strcpy
    ___wmul->___lbmod
    _processKeyboard->_keyboard_eight_note_efficient
    _keyboard_sharps_only_efficient->_playThisNotePentatonic
    _keyboard_eight_note_efficient->_playThisNote8
    _playThisNote8->_playDiatonicSeventhMajor
    _playThisNote8->_playDiatonicSeventhMinor
    _playThisNote8->_playDiatonicTriadMajor
    _playThisNote8->_playDiatonicTriadMinor
    _keyboard_all_note_efficient->_playThisNote
    _playThisNote->_playSeventh
    _playThisNote->_playTriad
    _noteOn->_noteOff
    _setupArpeggio->_random_pitches_non_repeating
    _random_pitches_non_repeating->___awmod
    _random_pitches->___awmod
    _rand->___lmul
    ___awmod->_rand
    _delete_notes_from_arpeggio->_rotateArrayLeft
    _add_notes_to_arpeggio->_rotateArrayLeft
    _processDrumpad->_noteOnDrum
    _noteOnDrum->_noteOff
    _noteOffDrum->_sendUSB
    _key_press_release_note_off->_noteOff
    _noteOff->_sendUSB
    _analogInputs->_readPotentiometers
    _readPotentiometers->___fltol
    _processPotentiometers->_controlChange
    _processPotentiometers->_pitchBend
    _pitchBend->_sendUSB
    _controlChange->_sendUSB
    _map->___aldiv
    ___aldiv->___lmul
    ___fltol->___fladd
    ___flneg->___fldiv
    ___flmul->___xxtofl
    ___fladd->___flneg
    _Lcd_Start->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_SetBit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _selectSlotOnBoot->_loadFromEEPROM
    _Function_G_2->_loadFromEEPROM

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0 9895601
                                            111 BANK0      1     1      0
                     _ADC_Initialize
                          _Lcd_Start
                         _Read_b_eep
                       _analogInputs
                    _calculate_alpha
             _calculate_pulse_length
                      _digitalInputs
                        _displayTest
                _initializeMenuArray
            _initializeSaveSlotsOnce
                           _menu_lcd
                       _panic_button
               _processEncoderBuxton
                   _selectSlotOnBoot
                              _setup
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectSlotOnBoot                                     1     1      0   10873
                                            108 BANK0      1     1      0
                         _Read_b_eep
                     _loadFromEEPROM
 ---------------------------------------------------------------------------------
 (1) _panic_button                                         0     0      0    7555
                      _controlChange
 ---------------------------------------------------------------------------------
 (1) _menu_lcd                                             1     1      0 4193167
                                            110 BANK0      1     1      0
                         _Function_A
                         _Function_B
                         _Function_C
                         _Function_D
                         _Function_E
                         _Function_F
                         _Function_G
                         _Function_H
                          _Lcd_Clear
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                       _exitFunction
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Function_H                                           1     1      0 3245482
                                            108 BANK0      1     1      0
                       _Function_H_1
                       _Function_H_2
                       _Function_H_3
                       _Function_H_4
                       _Function_H_5
                       _Function_H_6
                       _Function_H_7
                       _Function_H_8
                       _Function_H_9
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_9                                         1     1      0  182290
                                             17 BANK0      1     1      0
                     _Function_H_9_1
                     _Function_H_9_2
                     _Function_H_9_3
                     _Function_H_9_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_4                                       1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_3                                       1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_2                                       1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_1                                       1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_8                                         1     1      0   72250
                                             16 BANK0      1     1      0
                     _Function_H_8_1
                     _Function_H_8_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_2                                       0     0      0   17896
                   _Lcd_Print_String
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_1                                       0     0      0   27908
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_7                                         0     0      0   30263
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _Function_H_6                                         1     1      0 2780502
                                             45 BANK0      1     1      0
                     _Function_H_6_1
                     _Function_H_6_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_2                                       0     0      0   30263
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_1                                       1     1      0 2723793
                                             44 BANK0      1     1      0
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                         _doTheLatch
                       _doTheUnLatch
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_5                                         2     2      0   36548
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_4                                         1     1      0   41539
                                             23 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
                      _setupArpeggio
 ---------------------------------------------------------------------------------
 (3) _Function_H_3                                         0     0      0   23683
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_2                                         0     0      0   31710
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
             _calculate_pulse_length
                         _clear_row2
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_1                                         0     0      0   20251
                   _Lcd_Print_String
                         _clear_row2
               _processEncoderBuxton
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Function_G                                           1     1      0  289283
                                            109 BANK0      1     1      0
                       _Function_G_1
                       _Function_G_2
                       _Function_G_3
                       _Function_G_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                         _eepromExit
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_G_4                                         1     1      0   55508
                                             18 BANK0      1     1      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                       _exitFunction
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _exitFunction                                         2     2      0   17896
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_3                                         2     2      0   29062
                                             16 BANK0      2     2      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                         _clear_row1
                         _clear_row2
 ---------------------------------------------------------------------------------
 (3) _Function_G_2                                         1     1      0   83808
                                            108 BANK0      1     1      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitLoad
                     _loadFromEEPROM
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _loadFromEEPROM                                      80    80      0   10404
                                              0 BANK1     80    80      0
                         _Read_b_eep
             _calculate_pulse_length
 ---------------------------------------------------------------------------------
 (3) _calculate_pulse_length                              10     8      2    8027
                                             98 BANK0     10     8      2
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) _exitLoad                                             2     2      0   17896
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_1                                         1     1      0   76563
                                             84 BANK0      1     1      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitSave
               _processEncoderBuxton
                       _saveToEEPROM
 ---------------------------------------------------------------------------------
 (4) _exitSave                                             2     2      0   17896
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _eepromExit                                           2     2      0   17896
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (2) _Function_F                                           0     0      0   25288
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
               _processEncoderBuxton
                      _programChange
 ---------------------------------------------------------------------------------
 (3) _programChange                                        3     1      2    1605
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _Function_E                                           1     1      0   53788
                                             26 BANK0      1     1      0
                       _Function_E_1
                       _Function_E_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_E_2                                         0     0      0   13671
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_E_1                                         0     0      0   13671
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _Function_D                                           1     1      0  232876
                                             64 BANK0      1     1      0
                       _Function_D_1
                       _Function_D_2
                       _Function_D_3
                       _Function_D_4
                       _Function_D_5
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_D_5                                         2     2      0   50856
                                             28 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
               _setControllerNumbers
 ---------------------------------------------------------------------------------
 (3) _Function_D_4                                         2     2      0   50856
                                             28 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
               _setControllerNumbers
 ---------------------------------------------------------------------------------
 (3) _Function_D_3                                         2     2      0   50856
                                             28 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
               _setControllerNumbers
 ---------------------------------------------------------------------------------
 (4) _setControllerNumbers                                 2     2      0   14375
                                             26 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
 ---------------------------------------------------------------------------------
 (3) _Function_D_2                                         0     0      0   17336
                           _Busy_eep
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                        _Write_b_eep
                    _calculate_alpha
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _calculate_alpha                                      0     0      0    2511
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    1809
                                             39 BANK0     25    17      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Function_D_1                                         1     1      0   36526
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
            _setControllerResolution
 ---------------------------------------------------------------------------------
 (4) _setControllerResolution                              1     1      0      68
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Function_C                                           1     1      0  147616
                                             28 BANK0      1     1      0
                       _Function_C_1
                       _Function_C_2
                       _Function_C_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_C_3                                         2     2      0   42356
                                             26 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_C_2                                         2     2      0   42356
                                             26 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _int2string                                           6     4      2    3659
                                             20 BANK0      6     4      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     904
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _Function_C_1                                         1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _Function_B                                           1     1      0   26446
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _Function_A                                           1     1      0  135820
                                             17 BANK0      1     1      0
                       _Function_A_1
                       _Function_A_2
                       _Function_A_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_A_3                                         1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_A_2                                         1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_A_1                                         1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (1) _processEncoderBuxton                                 7     7      0       0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _clear_row2                                           0     0      0   10012
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (3) _clear_row1                                           0     0      0   10012
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (4) _Lcd_Set_Cursor                                       5     4      1    2128
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Print_String                                     6     4      2    7884
                                             10 BANK0      6     4      2
                     _Lcd_Print_Char
                            ___lbmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Lcd_Print_Char                                       7     7      0     270
                                              1 BANK0      7     7      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1    2919
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _initializeSaveSlotsOnce                              1     1      0    4760
                                             84 BANK0      1     1      0
                           _Busy_eep
                         _Read_b_eep
                        _Write_b_eep
                       _saveToEEPROM
 ---------------------------------------------------------------------------------
 (4) _saveToEEPROM                                        80    80      0    3159
                                              4 BANK0     80    80      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (4) _Write_b_eep                                          4     1      3    1154
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (4) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2     424
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initializeMenuArray                                  3     3      0    5744
                                             10 BANK0      3     3      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _displayTest                                          2     2      0    2355
                                              6 BANK0      2     2      0
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _digitalInputs                                        0     0      0 5640833
                 _buttonInputsSerial
                  _keyboardTranspose
                     _processDrumpad
                    _processKeyboard
                      _processOctave
 ---------------------------------------------------------------------------------
 (2) _processOctave                                        2     2      0 2784988
                                             44 BANK0      2     2      0
                            ___awmod
                             ___wmul
                         _doTheLatch
                       _doTheUnLatch
         _key_press_release_note_off
                    _printThisNumber
                     _random_pitches
       _random_pitches_non_repeating
                      _resetArpeggio
                             _strcpy
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (5) _doTheUnLatch                                         4     4      0 2693507
                                             40 BANK0      4     4      0
                       _playThisNote
                      _playThisNote8
             _playThisNotePentatonic
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _doTheLatch                                           0     0      0    2355
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    2355
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    5631
                                              4 BANK0      6     2      4
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _processKeyboard                                      0     0      0 2694602
        _keyboard_all_note_efficient
      _keyboard_eight_note_efficient
     _keyboard_sharps_only_efficient
 ---------------------------------------------------------------------------------
 (3) _keyboard_sharps_only_efficient                       2     2      0  301152
                                             29 BANK0      2     2      0
             _playThisNotePentatonic
 ---------------------------------------------------------------------------------
 (6) _playThisNotePentatonic                               7     6      1  300232
                                             23 BANK0      6     5      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (3) _keyboard_eight_note_efficient                        2     2      0 1497011
                                             40 BANK0      2     2      0
                      _playThisNote8
 ---------------------------------------------------------------------------------
 (6) _playThisNote8                                        9     8      1 1495631
                                             31 BANK0      9     8      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
           _playDiatonicSeventhMajor
           _playDiatonicSeventhMinor
             _playDiatonicTriadMajor
             _playDiatonicTriadMinor
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _playDiatonicTriadMinor                               8     7      1  298597
                                             23 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _playDiatonicTriadMajor                               8     7      1  298421
                                             23 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _playDiatonicSeventhMinor                             8     7      1  298597
                                             23 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _playDiatonicSeventhMajor                             8     7      1  298421
                                             23 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (3) _keyboard_all_note_efficient                          1     1      0  896439
                                             37 BANK0      1     1      0
                       _playThisNote
 ---------------------------------------------------------------------------------
 (6) _playThisNote                                         5     5      0  895289
                                             32 BANK0      5     5      0
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                        _playSeventh
                          _playTriad
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _playTriad                                            9     9      0  298349
                                             23 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _playSeventh                                          9     9      0  298350
                                             23 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _noteOn                                               3     1      2  145212
                                             14 BANK0      3     1      2
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (7) _finish_arpeggio_setup                                0     0      0    5081
                      _resetArpeggio
                      _setupArpeggio
 ---------------------------------------------------------------------------------
 (8) _setupArpeggio                                        0     0      0    5081
                         _copy_array
                     _random_pitches
       _random_pitches_non_repeating
 ---------------------------------------------------------------------------------
 (9) _random_pitches_non_repeating                         3     3      0    2518
                                             20 BANK0      3     3      0
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (9) _random_pitches                                       2     2      0    2451
                                             20 BANK0      2     2      0
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (10) _rand                                                2     0      2     522
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (10) ___awmod                                             6     2      4    1860
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (9) _copy_array                                           1     1      0     112
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _resetArpeggio                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _delete_notes_from_arpeggio                           2     2      0     269
                                              9 BANK0      2     2      0
                     _findArrayIndex
                    _rotateArrayLeft
 ---------------------------------------------------------------------------------
 (8) _findArrayIndex                                       3     3      0     112
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (7) _add_notes_to_arpeggio                                8     8      0     156
                                              9 BANK0      8     8      0
                    _rotateArrayLeft
 ---------------------------------------------------------------------------------
 (8) _rotateArrayLeft                                      9     9      0     112
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (2) _processDrumpad                                       0     0      0   86840
                      _controlChange
                        _noteOffDrum
                         _noteOnDrum
 ---------------------------------------------------------------------------------
 (3) _noteOnDrum                                           3     1      2   76616
                                             14 BANK0      3     1      2
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (3) _noteOffDrum                                          3     1      2    2669
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _keyboardTranspose                                    0     0      0   74311
         _key_press_release_note_off
                    _printThisNumber
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _wait_one_pulse                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _printThisNumber                                      2     0      2     452
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (7) _key_press_release_note_off                           0     0      0   73837
                            _noteOff
 ---------------------------------------------------------------------------------
 (8) _noteOff                                              3     1      2   73837
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _buttonInputsSerial                                   6     6      0      92
                                              0 BANK0      6     6      0
                              _clock
                               _load
 ---------------------------------------------------------------------------------
 (3) _load                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clock                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _analogInputs                                         0     0      0   19010
                 _readPotentiometers
 ---------------------------------------------------------------------------------
 (2) _readPotentiometers                                  12    12      0   19010
                                             98 BANK0     12    12      0
                           _ADC_Read
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _map
              _processPotentiometers
 ---------------------------------------------------------------------------------
 (3) _processPotentiometers                                6     6      0    9930
                                             14 BANK0      6     6      0
                      _controlChange
                          _pitchBend
 ---------------------------------------------------------------------------------
 (4) _pitchBend                                            3     1      2    1779
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _controlChange                                        3     1      2    7555
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (3) _sendUSB                                             11     9      2    1343
                                              0 BANK0     11     9      2
 ---------------------------------------------------------------------------------
 (3) _sendOut                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _map                                                 32    12     20    1888
                                             26 BANK0     32    12     20
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (11) ___lmul                                             12     4      8     522
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     452
                                             12 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     702
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     381
                                             88 BANK0     10     6      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     197
                                             64 BANK0      4     0      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    2200
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    2692
                                             68 BANK0     20    12      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             5     3      2      23
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Start                                            3     3      0     244
                                              3 BANK0      3     3      0
                            _Lcd_Cmd
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (5) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (6) _Lcd_SetBit                                           1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _ISR                                                20    20      0    8044
                                             29 COMRAM    20    20      0
                            _display
                _encoderInputsBuxton
                       _playArpeggio
                          i2___lbmod
                  i2_printThisNumber
 ---------------------------------------------------------------------------------
 (14) i2_printThisNumber                                   2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (14) i2___lbmod                                           4     3      1     211
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (14) _playArpeggio                                        6     6      0    6376
                                             23 COMRAM     6     6      0
                       _sort_pitches
                          i2___awmod
                          i2_noteOff
                           i2_noteOn
                             i2_rand
                   i2_random_pitches
     i2_random_pitches_non_repeating
 ---------------------------------------------------------------------------------
 (15) i2_random_pitches_non_repeating                      3     3      0     940
                                             20 COMRAM     3     3      0
                          i2___awmod
                             i2_rand
 ---------------------------------------------------------------------------------
 (15) i2_random_pitches                                    2     2      0     873
                                             20 COMRAM     2     2      0
                          i2___awmod
                             i2_rand
 ---------------------------------------------------------------------------------
 (16) i2_rand                                              2     0      2     144
                                             12 COMRAM     2     0      2
                           i2___lmul
 ---------------------------------------------------------------------------------
 (17) i2___lmul                                           12     4      8     144
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (15) i2_noteOn                                            3     1      2    2116
                                             14 COMRAM     3     1      2
                          i2_noteOff
                          i2_sendOut
                          i2_sendUSB
 ---------------------------------------------------------------------------------
 (16) i2_noteOff                                           3     1      2    1263
                                             11 COMRAM     3     1      2
                          i2_sendOut
                          i2_sendUSB
 ---------------------------------------------------------------------------------
 (16) i2_sendUSB                                          11     9      2     373
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (16) i2_sendOut                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (15) _sort_pitches                                        5     5      0     380
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (14) _encoderInputsBuxton                                 6     6      0      69
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (14) _display                                             0     0      0    1340
                      _displayDigits
                      _displayString
 ---------------------------------------------------------------------------------
 (15) _displayString                                       2     2      0     134
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (15) _displayDigits                                       5     5      0    1206
                                             20 COMRAM     5     5      0
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (16) i2___awmod                                           6     2      4     660
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                             i2_rand (ARG)
 ---------------------------------------------------------------------------------
 (16) i2___awdiv                                           8     4      4     456
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _Lcd_Start
     _Lcd_Cmd
       _Lcd_SetBit
     _Lcd_SetBit
   _Read_b_eep
   _analogInputs
     _readPotentiometers
       _ADC_Read
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         ___xxtofl (ARG)
       ___flneg
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _map
         ___aldiv
           ___lmul (ARG)
         ___lmul
       _processPotentiometers
         _controlChange
           _sendOut
           _sendUSB
         _pitchBend
           _sendOut
           _sendUSB
   _calculate_alpha
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _calculate_pulse_length
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       ___xxtofl (ARG)
     ___flneg
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _digitalInputs
     _buttonInputsSerial
       _clock
       _load
     _keyboardTranspose
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _printThisNumber
       _wait_one_pulse
     _processDrumpad
       _controlChange
         _sendOut
         _sendUSB
       _noteOffDrum
         _sendOut
         _sendUSB
       _noteOnDrum
         _noteOff
           _sendOut
           _sendUSB
         _sendOut
         _sendUSB
     _processKeyboard
       _keyboard_all_note_efficient
         _playThisNote
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playSeventh
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playTriad
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_eight_note_efficient
         _playThisNote8
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playDiatonicSeventhMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicSeventhMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_sharps_only_efficient
         _playThisNotePentatonic
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
     _processOctave
       ___awmod
         ___awdiv (ARG)
         _rand (ARG)
           ___lmul
       ___wmul
         ___lbmod (ARG)
       _doTheLatch
         _strcpy
       _doTheUnLatch
         _playThisNote
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playSeventh
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playTriad
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
         _playThisNote8
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playDiatonicSeventhMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicSeventhMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
         _playThisNotePentatonic
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
         _strcpy
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _printThisNumber
       _random_pitches
         ___awmod
           ___awdiv (ARG)
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _random_pitches_non_repeating
         ___awmod
           ___awdiv (ARG)
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _resetArpeggio
       _strcpy
       _wait_one_pulse
   _displayTest
     _strcpy
   _initializeMenuArray
     ___wmul
       ___lbmod (ARG)
   _initializeSaveSlotsOnce
     _Busy_eep
     _Read_b_eep
     _Write_b_eep
     _saveToEEPROM
       _Busy_eep
       _Write_b_eep
   _menu_lcd
     _Function_A
       _Function_A_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_A_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_A_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_B
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_C
       _Function_C_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_C_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_C_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_D
       _Function_D_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setControllerResolution
       _Function_D_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _Write_b_eep
         _calculate_alpha
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_D_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
       _Function_D_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
       _Function_D_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_E
       _Function_E_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_E_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_F
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_SetBit
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _int2string
         ___awdiv
         ___awmod
           ___awdiv (ARG)
           _rand (ARG)
             ___lmul
       _processEncoderBuxton
       _programChange
         _sendOut
         _sendUSB
     _Function_G
       _Function_G_1
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitSave
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _processEncoderBuxton
         _saveToEEPROM
           _Busy_eep
           _Write_b_eep
       _Function_G_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitLoad
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _loadFromEEPROM
           _Read_b_eep
           _calculate_pulse_length
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
         _processEncoderBuxton
       _Function_G_3
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _Function_G_4
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _exitFunction
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _eepromExit
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _processEncoderBuxton
     _Function_H
       _Function_H_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _strcpy
       _Function_H_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _calculate_pulse_length
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul
             ___xxtofl (ARG)
           ___flneg
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_H_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_H_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setupArpeggio
           _copy_array
           _random_pitches
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
             _rand
               ___lmul
           _random_pitches_non_repeating
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
             _rand
               ___lmul
       _Function_H_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_H_6
         _Function_H_6_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _doTheLatch
             _strcpy
           _doTheUnLatch
             _playThisNote
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _playSeventh
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playTriad
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _wait_one_pulse
             _playThisNote8
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _playDiatonicSeventhMajor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicSeventhMinor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicTriadMajor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicTriadMinor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _wait_one_pulse
             _playThisNotePentatonic
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _strcpy
           _processEncoderBuxton
         _Function_H_6_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
           _strcpy
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_H_7
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _strcpy
       _Function_H_8
         _Function_H_8_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Function_H_8_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_H_9
         _Function_H_9_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Function_H_9_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Function_H_9_3
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Function_H_9_4
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_SetBit
     _Lcd_Print_String
       _Lcd_Print_Char
         _Lcd_SetBit
       ___lbmod (ARG)
       ___wmul (ARG)
         ___lbmod (ARG)
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_SetBit
     ___lbmod
     ___wmul
       ___lbmod (ARG)
     _exitFunction
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _clear_row1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
   _panic_button
     _controlChange
       _sendOut
       _sendUSB
   _processEncoderBuxton
   _selectSlotOnBoot
     _Read_b_eep
     _loadFromEEPROM
       _Read_b_eep
       _calculate_pulse_length
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul
           ___xxtofl (ARG)
         ___flneg
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
   _setup
   _srand

 _ISR (ROOT)
   _display
     _displayDigits
       i2___awdiv
       i2___awmod
         i2___awdiv (ARG)
         i2_rand (ARG)
           i2___lmul
     _displayString
   _encoderInputsBuxton
   _playArpeggio
     _sort_pitches
     i2___awmod
       i2___awdiv (ARG)
       i2_rand (ARG)
         i2___lmul
     i2_noteOff
       i2_sendOut
       i2_sendUSB
     i2_noteOn
       i2_noteOff
         i2_sendOut
         i2_sendUSB
       i2_sendOut
       i2_sendUSB
     i2_rand
       i2___lmul
     i2_random_pitches
       i2___awmod
         i2___awdiv (ARG)
         i2_rand (ARG)
           i2___lmul
       i2_rand
         i2___lmul
     i2_random_pitches_non_repeating
       i2___awmod
         i2___awdiv (ARG)
         i2_rand (ARG)
           i2___lmul
       i2_rand
         i2___lmul
   i2___lbmod
   i2_printThisNumber

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      69      11       41.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FC       9       98.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100     50      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     70      A0       5      100.0%
BITCOMRAM           5E      0       5       0        5.3%
COMRAM              5E     31      5E       1      100.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     362      20        0.0%
DATA                 0      0     362       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 15 18:26:07 2023

                   _arpeggiatorAutoLatchOnOffMenu 0120                           playThisNote8@temp_pitch 0085  
                       ?_playDiatonicSeventhMinor 0077                           _readPotentiometers$5807 00C7  
                              i2printThisNumber@n 0001                                      ___fldiv@aexp 009F  
                                    ___fldiv@bexp 009E                                _RESET_ON_KEY_PRESS 01AB  
                                    ___fldiv@sign 0093                                      ?_displayTest 0001  
                                              l20 9370                                                l21 9378  
                                              l22 937A                                                l23 9382  
                                              l24 9384                                                l25 938C  
                                              l42 7870                                                l50 7BFC  
                                              l19 936E                                                l36 8C1C  
                                              l54 81C0                                                l47 7BAE  
                                              l55 8186                                                l48 7BC6  
                                              l49 7BE4                                                l88 924A  
                                    ___awdiv@sign 0065                     __size_of_processEncoderBuxton 0A30  
                             ___wmul@multiplicand 0066                                       __CFG_BORV$3 000000  
                                  ?_programChange 006B                   __size_of_playDiatonicTriadMajor 0190  
                                    __CFG_CP0$OFF 000000                                      __CFG_CP1$OFF 000000  
                                    __CFG_CP2$OFF 000000                                      __CFG_CP3$OFF 000000  
                                     __CFG_OSC$HS 000000                   __size_of_playDiatonicTriadMinor 025E  
                        _LAST_NOTE_MODE_KEY_PRESS 01A2                           playDiatonicTriadMajor@i 007C  
                            __end_of_doTheUnLatch 5236                                               l441 73AA  
                                             l443 73B6                                               l451 89F0  
                                             l436 95B8                                               l453 8A1E  
                                             l459 8D20                                               l820 00E6  
                                             l901 07EC                                               l830 020E  
                                             l822 0120                                               l911 0840  
                                             l903 07FA                                               l840 036A  
                                             l832 0252                                               l824 0158  
                                             l816 0068                                               l921 089A  
                                             l913 0852                                               l905 080A  
                                             l850 0436                                               l842 0380  
                                             l834 0298                                               l826 019C  
                                             l818 00A2                                               l931 08F0  
                                             l923 08AC                                               l915 0868  
                                             l907 081C                                               l940 0944  
                                             l860 0524                                               l852 044A  
                                             l844 0396                                               l836 02DE  
                                             l828 01D6                                               l933 0900  
                                             l925 08BE                                               l917 087E  
                                             l909 082E                                               l942 0956  
                                             l862 055C                                               l854 045E  
                                             l846 03DC                                               l838 0324  
                                             l951 09BC                                               l935 090E  
                                             l927 08D0                                               l919 088C  
                                             l871 061E                                               l863 056A  
                                             l960 0A3A                                               l952 09CC  
                                             l944 0968                                               l936 091C  
                                             l880 06FA                                               l856 04A4  
                                             l848 0422                                               l953 09DC  
                                             l929 08DE                                               l873 0664  
                                             l865 057E                                               l946 097A  
                                             l938 0930                                               l882 0734  
                                             l874 0674                                               l858 04EA  
                                             l955 09EC                                               l947 098A  
                                             l891 079E                                               l883 0742  
                                             l875 0684                                               l867 0592  
                                             l956 09FA                                               l948 099A  
                                             l884 0752                                               l876 0694  
                                             l957 0A0A                                               l949 09AA  
                                             l893 07AE                                               l885 0762  
                                             l869 05D8                                               l958 0A1A  
                                             l886 0772                                               l878 06DA  
                                             l959 0A2A                                               l895 07BE  
                                             l879 06EA                                               l897 07CC  
                                             l889 078E                                               l899 07DC  
                                             _GIE 007F97                              _RESET_ON_KEY_RELEASE 01AA  
                                             _BPM 00FF                                      __CFG_CPB$OFF 000000  
                                             _RB0 007C08                                               _RB1 007C09  
                                             _RB2 007C0A                                               _RC0 007C10  
                                             _RA5 007C05                                               _RC1 007C11  
                                             _RB4 007C0C                                               _RC2 007C12  
                                             _RB5 007C0D                                               _RC3 007C13  
                                             _RE0 007C20                                               _RC4 007C14  
                                             _RE1 007C21                                               _RC5 007C15  
                                             _RD4 007C1C                                               _RE2 007C22  
                                             _RD5 007C1D                                               _RD6 007C1E  
                                             _RD7 007C1F                                   random_pitches@i 0075  
                                    __CFG_CPD$OFF 000000                                               _ISR 0008  
                                             _PSA 007EAB                                               _map 67FE  
                         playDiatonicTriadMinor@i 007D                              __size_of_Write_b_eep 0042  
                                    ___awmod@sign 0073                                               prod 000FF3  
                                             wreg 000FE8                                    ?_displayDigits 0001  
                                ??_wait_one_pulse 0060                                      ___flmul@aexp 007F  
                                    ___flmul@bexp 0080                    __end_of_playThisNotePentatonic 5562  
                                    ___flmul@sign 007A                                      ___flmul@temp 0085  
                                    ___flmul@prod 0081                          loadFromEEPROM@slotNumber 01D4  
                                    __CFG_LVP$OFF 000000                                              ?_ISR 0001  
                     _potentiometer_filtered_last 0200                                      ___fltol@exp1 00C1  
                                    __CFG_WDT$OFF 000000                                    ?_displayString 0001  
                                            l1402 5B4A                                              l1411 58B6  
                                            l2300 1CB6                                              l1420 58E8  
                                            l1412 588A                                              l1404 5B6E  
                                            l1500 1B44                                              l1340 5454  
                                            l2301 1CD0                                              l1413 58D8  
                                            l1405 5B76                                              l1501 1B5E  
                                            l1341 547A                                              l2310 1D8E  
                                            l2302 1D40                                              l1422 590C  
                                            l1414 5894                                              l1406 5B8A  
                                            l1510 1C48                                              l1502 1B78  
                                            l1350 5518                                              l2311 1DA8  
                                            l2303 1CF2                                              l1423 5932  
                                            l1415 589C                                              l1503 1B92  
                                            l1343 549E                                              l2320 1E66  
                                            l2312 1E18                                              l2304 1D08  
                                            l1416 58A4                                              l1504 1BAC  
                                            l1520 2694                                              l1352 5544  
                                            l1344 54BC                                              l1360 3B52  
                                            l2321 1E80                                              l2313 1DCA  
                                            l2305 1D22                                              l1433 59CA  
                                            l1425 59A8                                              l1417 58AC  
                                            l1505 1BC6                                              l1601 55B6  
                                            l1521 269C                                              l1353 554C  
                                            l1345 54F2                                              l1337 5400  
                                            l1361 3B74                                              l2330 1F3E  
                                            l2322 1EF0                                              l2314 1DE0  
                                            l2306 1D3C                                              l1426 5960  
                                            l1506 1BE0                                              l1602 55F6  
                                            l1530 2766                                              l1522 26A4  
                                            l1354 555A                                              l1346 54E0  
                                            l1338 5426                                              l1370 3CA6  
                                            l1362 3B96                                              l2331 1F58  
                                            l2323 1EA2                                              l2315 1DFA  
                                            l2307 1DAC                                              l1435 59EE  
                                            l1507 1BFA                                              l1531 278C  
                                            l1515 26B6                                              l1523 26AC  
                                            l1371 3CC8                                              l1363 3BB8  
                                            l2332 1FC8                                              l2324 1EB8  
                                            l2316 1E14                                              l2308 1D5E  
                                            l1436 59F6                                              l1428 596E  
                                            l1452 64FC                                              l1444 643C  
                                            l1508 1C14                                              l1612 56AC  
                                            l1604 5688                                              l1540 28AA  
                                            l1516 267A                                              l1700 2D88  
                                            l1372 3CEA                                              l1364 3BDA  
                                            l2341 201C                                              l2333 1F7A  
                                            l2325 1ED2                                              l2317 1E84  
                                            l2309 1D74                                              l1437 5A0A  
                                            l1381 5A3C                                              l1453 64B2  
                                            l1445 6450                                              l1509 1C2E  
                                            l1605 5626                                              l1541 28C8  
                                            l1517 26E4                                              l1701 2DAA  
                                            l1373 3D0C                                              l1365 3BFC  
                                            l2350 20BE                                              l2342 2032  
                                            l2334 1F90                                              l2326 1EEC  
                                            l2318 1E36                                              l1382 5A18  
                                            l1470 1838                                              l1462 1768  
                                            l1614 56D0                                              l1622 45A4  
                                            l1534 27CC                                              l1518 2684  
                                            l1702 2DCC                                              l1374 3D2E  
                                            l1366 3C1E                                              l1358 3B0E  
                                            l2351 20D4                                              l2335 1FAA  
                                            l2327 1F5C                                              l2319 1E4C  
                                            l1391 5A8C                                              l1383 5A58  
                                            l1455 64DE                                              l1447 648E  
                                            l1471 1852                                              l1463 1782  
                                            l1615 56D8                                              l1607 5634  
                                            l1631 4780                                              l1543 28F8  
                                            l1535 27FE                                              l1527 2712  
                                            l1519 268C                                              l1703 2DEE  
                                            l1375 3D50                                              l1367 3C40  
                                            l1359 3B30                                              l2344 2052  
                                            l2336 1FC4                                              l2328 1F0E  
                                            l1392 5AB2                                              l1384 5A22  
                                            l1456 64E6                                              l1448 647A  
                                            l1480 193C                                              l1472 186C  
                                            l1464 179C                                              l1616 56EC  
                                            l1632 46D6                                              l1552 2A48  
                                            l1560 2A0E                                              l1544 2930  
                                            l1528 2738                                              l1704 2E10  
                                            l1376 3D72                                              l1368 3C62  
                                            l2353 20F4                                              l2345 2068  
                                            l2329 1F24                                              l1385 5A2A  
                                            l1457 64F4                                              l1481 1956  
                                            l1473 1886                                              l1465 17B6  
                                            l1641 47A4                                              l1625 45CE  
                                            l1553 29A0                                              l1545 297C  
                                            l1537 2846                                              l1705 2E32  
                                            l1369 3C84                                              l2354 210A  
                                            l2338 1FE6                                              l1394 5B28  
                                            l1386 5A32                                              l1458 650C  
                                            l1490 1A40                                              l1482 1970  
                                            l1474 18A0                                              l1466 17D0  
                                            l1634 46E4                                              l1626 45F4  
                                            l1570 2A84                                              l1546 2954  
                                            l1538 2888                                              l1706 2E54  
                                            l2347 2088                                              l2339 1FFC  
                                            l1395 5AE0                                              l1491 1A5A  
                                            l1483 198A                                              l1475 18BA  
                                            l1467 17EA                                              l1651 4802  
                                            l1643 47C8                                              l1563 2A42  
                                            l1555 29BE                                              l1707 2E76  
                                            l3411 693C                                              l2356 212A  
                                            l2348 209E                                              l1492 1A74  
                                            l1484 19A4                                              l1476 18D4  
                                            l1468 1804                                              l1660 49DC  
                                            l1644 47D0                                              l1636 4710  
                                            l1628 4650                                              l1548 2972  
                                            l3420 6976                                              l2357 2140  
                                            l1397 5AEE                                              l1389 5A68  
                                            l1493 1A8E                                              l1485 19BE  
                                            l1477 18EE                                              l1469 181E  
                                            l1661 4934                                              l1581 5818  
                                            l1645 47E4                                              l1637 476C  
                                            l1629 46A6                                              l3413 6990  
                                            l3421 6980                                              l1494 1AA8  
                                            l1486 19D8                                              l1478 1908  
                                            l1654 482C                                              l1590 5860  
                                            l1582 57B8                                              l1558 29E2  
                                            l3342 6ACE                                              l3502 79BC  
                                            l3422 698A                                              l3414 6944  
                                            l2359 2162                                              l1495 1AC2  
                                            l1487 19F2                                              l1479 1922  
                                            l1671 4A24                                              l1663 4942  
                                            l1655 4852                                              l1591 5868  
                                            l1559 29EA                                              l3343 6AD8  
                                            l3503 7978                                              l6000 5F38  
                                            l2720 4318                                              l1496 1ADC  
                                            l1488 1A0C                                              l1672 4A2C  
                                            l1592 587C                                              l1584 57C6  
                                            l1576 570A                                              l1568 2A5C  
                                            l1680 2AE0                                              l2800 36C8  
                                            l3328 4D04                                              l3344 6AE0  
                                            l3504 79BA                                              l3360 2228  
                                            l3416 694E                                              l2721 4330  
                                            l2297 1CD4                                              l1497 1AF6  
                                            l1489 1A26                                              l1673 4A40  
                                            l1665 496E                                              l1657 48AE  
                                            l1569 2A70                                              l1681 2B02  
                                            l2801 36AE                                              l3329 4C8C  
                                            l3441 7B76                                              l3521 899E  
                                            l3601 72B4                                              l3417 6958  
                                            l2730 4404                                              l2722 4348  
                                            l2298 1C86                                              l5210 95A6  
                                            l1498 1B10                                              l1666 49CA  
                                            l1658 4904                                              l1578 5748  
                                            l1690 2C34                                              l1682 2B24  
                                            l2810 376E                                              l3434 80F8  
                                            l3442 7B0A                                              l3450 7FDA  
                                            l3514 7950                                              l3522 8972  
                                            l3370 23EA                                              l3362 227E  
                                            l3602 72D6                                              l3418 6962  
                                            l2731 441C                                              l2723 4360  
                                            l2299 1C9C                                              l1499 1B2A  
                                            l1579 5788                                              l1691 2C56  
                                            l1683 2B46                                              l2803 36BA  
                                            l3427 8174                                              l3435 8094  
                                            l3443 7B64                                              l3515 78F4  
                                            l3363 23F0                                              l3355 218C  
                                            l3419 696C                                              l6004 5F62  
                                            l5220 5C0E                                              l2740 44F2  
                                            l2732 4434                                              l2724 4378  
                                            l5204 9326                                              l1588 583C  
                                            l1692 2C78                                              l1684 2B68  
                                            l3428 8110                                              l3436 80E8  
                                            l3516 794E                                              l3380 25FA  
                                            l3372 2482                                              l3612 7532  
                                            l3620 7734                                              l6005 5F94  
                                            l5221 5C30                                              l2741 450A  
                                            l2733 444C                                              l2725 4390  
                                            l1669 4A00                                              l1693 2C9A  
                                            l1685 2B8A                                              l2813 37E6  
                                            l2805 377E                                              l3429 8164  
                                            l3349 93F8                                              l3381 2634  
                                            l3365 22E0                                              l3357 2284  
                                            l3541 7EF2                                              l3613 74D6  
                                            l3621 777C                                              l5222 5C46  
                                            l5214 5BA6                                              l2742 4522  
                                            l2734 4464                                              l2726 43A8  
                                            l1694 2CBC                                              l1686 2BAC  
                                            l2806 3732                                              l3382 266E  
                                            l3374 24BA                                              l3366 231C  
                                            l3534 7F70                                              l3542 7E96  
                                            l3550 7AC0                                              l3614 7530  
                                            l5223 5C66                                              l5215 5BB8  
                                            l2743 4536                                              l2735 447A  
                                            l2727 43BE                                              l2719 4300  
                                            l1599 5578                                              l1695 2CDE  
                                            l1687 2BCE                                              l1679 2ABE  
                                            l3375 24F4                                              l3367 2358  
                                            l3527 8356                                              l3535 7F14  
                                            l3543 7EF0                                              l3631 6EAA  
                                            l5224 5C8A                                              l2736 4492  
                                            l2728 43D6                                              l1696 2D00  
                                            l1688 2BF0                                              l2816 37FC  
                                            l3448 7FDC                                              l3480 6180  
                                            l3472 6136                                              l3376 252E  
                                            l3368 2394                                              l3528 82FA  
                                            l3536 7F6E                                              l3560 8F30  
                                            l4280 4A74                                              l3704 6FA2  
                                            l3632 6E66                                              l5225 5CAE  
                                            l2745 455A                                              l2737 44AA  
                                            l2729 43EE                                              l5209 959C  
                                            l1697 2D22                                              l1689 2C12  
                                            l2761 50C0                                              l2817 3822  
                                            l2809 3748                                              l3449 7F94  
                                            l3465 7830                                              l3481 61B8  
                                            l3473 60DA                                              l3529 8354  
                                            l3561 8EFC                                              l4281 4A84  
                                            l3705 6F1E                                              l3713 8520  
                                            l3633 6EA8                                              l5226 5CD2  
                                            l5218 5CB0                                              l2738 44C2  
                                            l5234 9168                                              l1698 2D44  
                                            l2770 515E                                              l4290 4EBE  
                                            l3458 7E04                                              l3466 77D4  
                                            l3482 61B4                                              l3474 6134  
                                            l3378 25C2                                              l4282 4A94  
                                            l3650 75B0                                              l3714 84D6  
                                            l3722 6D9C                                              l5227 5CF0  
                                            l5219 5BE8                                              l2747 4568  
                                            l2739 44DA                                              l5243 822C  
                                            l1699 2D66                                              l2755 5180  
                                            l4291 4ECE                                              l3459 7D9E  
                                            l3467 782E                                              l4283 4AA2  
                                            l3619 777E                                              l3651 75E4  
                                            l3707 6F6C                                              l3715 851E  
                                            l3723 6D14                                              l3731 83CE  
                                            l3900 16F4                                              l2748 4576  
                                            l5244 8242                                              l2764 50DC  
                                            l3492 6022                                              l3548 7AC2  
                                            l3572 8602                                              l4284 4AD8  
                                            l3708 6FA0                                              l3732 837E  
                                            l3740 888A                                              l3901 1742  
                                            l2773 517E                                              l3477 614A  
                                            l3493 60C8                                              l3549 7A7E  
                                            l3573 85B8                                              l3581 874A  
                                            l3725 6D66                                              l3741 884C  
                                            l2790 3580                                              l4294 5074  
                                            l3478 61F0                                              l3494 605C  
                                            l3566 8EE2                                              l3574 8600  
                                            l3582 8708                                              l3590 7340  
                                            l3670 6CB2                                              l3726 6D9A  
                                            l3734 83B2                                              l3750 8464  
                                            ?_map 007A                                              l3911 3FAE  
                                            l5247 8258                                              l2767 5118  
                                            l3479 6184                                              l3495 6058  
                                            l3487 600E                                              l3567 8EAE  
                                            l3583 8722                                              l4279 4A64  
                                            l3647 75E6                                              l3663 8A74  
                                            l3671 6C56                                              l3735 83CC  
                                            l3743 886E                                              l3751 84AC  
                                            l5440 8CC8                                              l2776 51A6  
                                            l4288 4E9E                                              l3496 6090  
                                            l3488 5FB2                                              l3592 7356  
                                            l3648 7574                                              l3656 8820  
                                            l3664 8A32                                              l3672 6CB0  
                                            l3744 8888                                              l3913 3FFE  
                                            l5193 943A                                              l5257 8958  
                                            l2777 51CA                                              l2793 35BA  
                                            l5425 8FFC                                              l4289 4EAE  
                                            l3497 608C                                              l3489 600C  
                                            l3593 7378                                              l3657 87DE  
                                            l3665 8A4C                                              l3761 720E  
                                            l3906 3E2A                                              l5258 890E  
                                            l2778 5200                                              l5602 7A52  
                                            l3658 87F8                                              l3674 6CE6  
                                            l3762 7228                                              l3770 716C  
                                            l3907 3E5E                                              l5611 8574  
                                            l2795 3644                                              l5603 7A5C  
                                            l3683 6DC4                                              l3771 7186  
                                            l3908 3E9C                                              l5612 856C  
                                            l2796 3624                                              l2788 353C  
                                            l5604 7A6A                                              l3588 7342  
                                            l3780 70E4                                              l3909 3EDC  
                                            l5189 9432                                              l5197 65A8  
                                            l5285 7C7A                                              l2789 3548  
                                            l3589 72EA                                              l3597 72A0  
                                            l3677 6CF8                                              l3693 7488  
                                            l3749 84AE                                              l5198 65F8  
                                            l5278 8B2C                                              l5286 7C0E  
                                            l2798 3636                                              l3598 7248  
                                            l3686 6E3E                                              l3694 7438  
                                            l3758 722A                                              l5439 8CB4  
                                            l5615 858C                                              l5279 8AE8  
                                            l3599 729E                                              l3687 6DE2  
                                            l3759 71B0                                              l3767 7188  
                                            l4831 6400                                              l3880 11B6  
                                            l5616 8596                                              l5608 8552  
                                            l3688 6E3C                                              l3696 746C  
                                            l3768 710E                                              l3776 70E6  
                                            l5617 85A4                                              l5609 855E  
                                            l3697 7486                                              l3777 706C  
                                            l3785 7044                                              l4825 63EA  
                                            l5634 934E                                              l5490 6C10  
                                            l3890 1422                                              l3882 12FC  
                                            l3786 6FCA                                              l3794 76F6  
                                            l5491 6C1E                                              l5483 6B96  
                                            l3779 70CA                                              l3795 769E  
                                            l5660 6A42                                              l5492 6C34  
                                            l5484 6BAE                                              l4780 82B8  
                                            l3788 7028                                              l3796 76F4  
                                            l4828 63FC                                              l3877 115A  
                                            l3789 7042                                              l5486 6BDC  
                                            l3886 1338                                              l5911 3506  
                                            l5487 6BD0                                              l3887 171E  
                                            l3895 1566                                              l3879 11A6  
                                            l5912 350E                                              l5904 349A  
                                            l3896 15A2                                              l5913 3510  
                                            l5665 6A76                                              l5657 69E6  
                                            l5921 3866                                              l5666 6A6A  
                                            l3898 16AC                                              l4778 829A  
                                            l5930 3914                                              l5922 3862  
                                            l5907 34E0                                              l5659 6A52  
                                            l3899 16E4                                              l5595 7A04  
                                            l5931 39C2                                              l5668 6A92  
                                            l4788 8DE2                                              l5596 7A14  
                                            l5932 3972                                              l5933 399A  
                                            l5925 38A6                                              l5870 3264  
                                            l5766 939E                                              l5598 7A32  
                                            l5950 3ACC                                              l5926 38A2  
                                            l5767 93B6                                              l5599 7A2A  
                                            l5951 3ACE                                              l5935 39C0  
                                            l5872 32C4                                              l5864 3220  
                                            l5960 2F0A                                              l5928 38EC  
                                            l5873 3288                                              l5865 321C  
                                            l5961 2F1E                                              l5945 3A2E  
                                            l5890 3426                                              l5882 339E  
                                            l5962 2F3C                                              l5938 39F6  
                                            l5883 3364                                              l5955 2ECE  
                                            l5947 3A72                                              l5939 39D8  
                                            l5892 3436                                              l5876 3340  
                                            l5956 2ECA                                              l5948 3A96  
                                            l5877 331E                                              l5869 3268  
                                            l5973 3134                                              l5957 2EDE  
                                            l5949 3AC0                                              l5886 3388  
                                            l5878 332C                                              l5966 30FC  
                                            l5990 5EA4                                              l5895 345A  
                                            l5887 338C                                              l5879 3330  
                                            l5975 3178                                              l5967 30DE  
                                            l5959 2F0E                                              l5991 5EC2  
                                            l5983 92E0                                              l5976 3196  
                                            l5984 92D6                                              l5897 3470  
                                            l5993 5ED4                                              l5978 31BA  
                                            l5994 5EC8                                              l5899 347A  
                                            l5979 31D8                                              l5996 5F12  
                                            _ADON 007E10                                              l5997 5EFA  
                                            l5989 5E94                             __size_of_sort_pitches 011A  
                                            l5999 5F44                                              STR_1 FFE6  
                                            STR_2 FFE1                                              STR_3 FFFA  
                                            STR_4 FFF0                                              STR_5 FFDC  
                                            STR_6 FFEB                                              STR_7 FFF5  
                                            STR_8 FFD7                                              STR_9 FD70  
                                            _BRGH 007D62                            __end_of_random_pitches 8B36  
                                            _CREN 007D5C                                              _T0CS 007EAD  
                                            _IPEN 007E87                                              _PEIE 007F96  
                                            _RBIE 007F93                                              _RBIF 007F90  
                                            _TMR0 000FD6                                              _TMR2 000FCC  
                                            _SPEN 007D5F                                              _PPQN 005E  
                                            _TXIF 007CF4                                              _TXEN 007D65  
                                            _SYNC 007D64                          _LAST_NOTE_MODE_TRANSPOSE 01A0  
                                            _main 6310                                              _drum 00EC  
                                            _load 967E                                              _rand 8B36  
                                            fsr0h 000FEA                                              fsr1h 000FE2  
                                            fsr2h 000FDA                                              fsr0l 000FE9  
                                            indf1 000FE7                                              indf2 000FDF  
                                            fsr1l 000FE1                                              map@x 007A  
                                            fsr2l 000FD9                                              btemp 005F  
                                __end_of_ADC_Read 9264                          __end_ofi2_random_pitches 8CA2  
                    ??_key_press_release_note_off 006E                                              prodh 000FF4  
                                            prodl 000FF3                keyboard_eight_note_efficient@index 0089  
                                 ??_setupArpeggio 0077                                              start 000E  
                              Lcd_Print_Char@i_57 0066                keyboard_eight_note_efficient@pitch 0088  
                                   __CFG_IESO$OFF 000000                                   ___fldiv@new_exp 0098  
                              Lcd_Print_Char@data 0063                              __end_of_analogInputs 9690  
                                  _drumCCTypeMenu 015F                                   __end_of_Lcd_Cmd 9530  
                                   __CFG_MCLRE$ON 000000                                   _rotateArrayLeft 83E0  
                                    ___param_bank 000000                                             ??_ISR 001E  
                                           ??_map 008E                   __end_of_setControllerResolution 9416  
                       _arpeggiatorLatchOnOffMenu 0123                                    noteOff@channel 006D  
                                      _Lcd_SetBit 9360                                             l22211 4390  
                                           l22205 4378                                             l22311 4522  
                                           l22223 43BE                              programChange@channel 006D  
                                           l22305 450A                                             l22217 43A8  
                                           l22251 4434                                             l22235 43EE  
                                           l21443 6DBC                                             l23061 8292  
                                           l22245 441C                                             l22229 43D6  
                                           l22181 4318                                             l22263 4464  
                                           l22239 4404                                             l22175 4300  
                                           l22281 44AA                                             l22257 444C  
                                           l22193 4348                                             l22425 3644  
                                           l23075 82B0                                             l22275 4492  
                                           l22187 4330                                             l16125 73AE  
                                           l22293 44DA                                             l22269 447A  
                                           l23183 787C                                             l23175 7862  
                                           l16119 73A2                                             l22287 44C2  
                                           l22199 4360                                             l17023 493A  
                                           l22299 44F2                                             l22487 377E  
                                           l16409 91B4                                             l16507 5A60  
                                           l17067 4A24                                             l17423 29E2  
                                           l16609 58E0                                             l16537 5AE6  
                                           l17185 5544                                             l22963 1152  
                                           l17259 64DE                                             l19061 503A  
                                           l22991 12F4                                             l16399 9186  
                                           l16639 5966                                             l16575 5B6E  
                                           l16727 57BE                                             l16921 562C  
                                           l22979 11AE                                             l16827 46DC  
                                           l16677 59EE                                             l16765 5860  
                                           l16871 47C8                                             l16783 459C  
                                           l16697 5702                                             l16891 5570  
                                           l16959 56D0                                             l18753 93F0  
                                           l16979 47FA                                             l17799 3AC0  
                                   ___fltol@sign1 00C0                                   __end_of___aldiv 6C46  
                                 __end_of___fladd 352C                                             ?_main 0001  
                                           ?_load 0001                                   __end_of___fldiv 3AEA  
                                           ?_rand 006C                                   __end_of___awdiv 7A74  
                                ?_calculate_alpha 0001                                   __end_of___flneg 9360  
                                           _EEADR 000FA9                                             STR_10 FD64  
                                           STR_11 FD64                                             STR_12 FD6B  
                                           STR_20 FFC3                                             STR_13 FF9E  
                                           STR_21 FDFD                                             STR_14 FF88  
                                           STR_30 FDA8                                             STR_22 FD75  
                                           STR_15 FF93                                             STR_23 FF18  
                                           STR_31 FEC4                                             STR_16 FD6B  
                                           STR_24 FF58                                             STR_32 FE4D  
                                           STR_40 FE3D                                             STR_17 FF9E  
                                           STR_41 FFCD                                             STR_25 FED2  
                                           STR_33 FD97                                             STR_18 FF88  
                                           STR_50 FF0F                                             STR_34 FF4C  
                                           STR_42 FE98                                             STR_26 FE2D  
                                           STR_19 FF93                                             STR_43 FFD2  
                                           STR_35 FFBB                                             STR_27 FEE0  
                                           STR_51 FDDB                                             STR_60 FFC8  
                                           STR_36 FFB3                                             STR_44 FEB6  
                                           STR_52 FE89                                             STR_28 FDCA  
                                 __end_of___awmod 85AE                                             STR_53 FFDC  
                                           STR_45 FEEE                                             STR_29 FE6B  
                                           STR_61 FE1D                                             STR_37 FD86  
                                           STR_70 FFA9                                             STR_38 FF25  
                                           STR_54 FF0A                                             STR_62 FEA7  
                                           STR_46 FDB9                                             STR_71 FF7C  
                                           STR_55 FFF0                                             STR_47 FF32  
                                           STR_63 FE7A                                             STR_39 FDEC  
                                           STR_72 FFA9                                             STR_48 FDDF  
                                           STR_64 FF3F                                             STR_56 FE5C  
                                           STR_49 FE8E                                             STR_73 FF7C  
                                           STR_65 FF70                                             STR_57 FF64  
                                           STR_58 FF6B                                             STR_66 FFA9  
                                           STR_74 FE0D                                             STR_67 FF7C  
                                           STR_59 FEFC                                             STR_68 FFA9  
                                 __end_of___lbmod 93BE                                             STR_69 FF7C  
                                 __end_of___flmul 31EE                                   __end_of___fltol 6AA4  
                                           _CMCON 000FB4                                             _T0CON 000FD5  
                                 ___awdiv@divisor 0062                                             _T2CON 000FCA  
                                           u23200 7BFC                                             u24010 46AC  
                                           u23310 5AB8                                             u23180 7BC6  
                                           u24310 5678                                             u26000 347E  
                                           u22560 73EE                                             u33200 784E  
                                           u22554 73DA                                             u22490 8578  
                                           u23530 5938                                             u23370 5B18  
                                           u24410 56E0                                             u24250 55FC  
                                           u24090 4770                                             u22555 73D6  
                                           u22580 7412                                             u26030 3496  
                                           u22590 7416                                             u22750 823A  
                                           u23470 5B7E                                             u24510 490A  
                                           u24190 47D8                                             _LATCH 01A9  
                                           u22575 73F0                                             u33400 795E  
                                           u22770 8250                                             u23810 580A  
                                           u22860 9424                                             u34125 3F30  
                                           u22790 8268                                             u23590 5998  
                                           u23910 5870                                             u23750 578E  
                                           u34310 86A4                                             u33415 7960  
                                           u26080 34EC                                             u25520 29B8  
                                           u25440 296C                                             u34400 86F4  
                                           u26320 3A80                                             u33600 7540  
                                           u23690 59FE                                             u24730 81B6  
                                           u26330 3AA4                                             u22875 9426  
                                           u26420 2F2A                                             u24740 81EE  
                                           u26510 3186                                             u26430 30A0  
                                           u24590 49CE                                             u33615 7542  
                                           u26520 31A4                                             u25640 2A2E  
                                           u33800 6CF4                                             u24737 81AC  
                                           u24690 4A34                                             u26290 3A2A  
                                           u26435 3096                                             u24747 81E4  
                                           u25820 32F4                                             u26620 6A04  
                                           u25660 2A36                                             u25580 2A00  
                                           u34380 86DE                                             u28300 50B6  
                                           u33660 75F4                                             u25830 3304  
                                           u45007 9242                                             u25840 3306  
                                           u26480 3130                                             u36400 3712  
                                           u29120 4AD8                                             u45017 788A  
                                           u26625 69FA                                             u28330 50D2  
                                           u26570 7A36                                             u29210 4BF4  
                                           u29130 4AF0                                             u45027 78A2  
                                           u26660 6A7C                                             u26740 5F4E  
                                           u28260 509C                                             u36340 368E  
                                           u38020 8DC6                                             u33780 6CE2  
                                           u33940 6DAA                                             u45037 9522  
                                           u37205 7E02                                             u29205 4B56  
                                           u25870 3348                                             u29310 4C4C  
                                           u29230 4C1C                                             u29150 4AFC  
                                           u28600 520C                                             u28440 5152  
                                           u28360 50EE                                             u36280 3604  
                                           u29305 4C42                                             u29225 4BF6  
                                           u29145 4AF2                                             u29330 4C58  
                                           u29250 4C28                                             u29170 4B08  
                                           u29325 4C4E                                             u29245 4C1E  
                                           u29165 4AFE                                             u37510 11AA  
                                           u28470 5172                                             u37190 7E00  
                                           u29350 4C64                                             u29270 4C34  
                                           u29190 4B54                                             u44710 635E  
                                           u28560 51D8                                             u36480 37C6  
                                           u29345 4C5A                                             u29265 4C2A  
                                           u29185 4B0A                                             u37530 12F0  
                                           u29370 4C70                                             u29290 4C40  
                                           u29450 7496                                             u29610 83DC  
                                           u29365 4C66                                             u29285 4C36  
                                           u44725 6360                                             u37630 158A  
                                           u37710 82AC                                             u29390 4C7C  
                                           u29550 6FB0                                             u28665 900A  
                                           u29385 4C72                                             u29465 7498  
                                           u37570 13F2                                             u37730 82D2  
                                           u28666 900C                                             u29490 74BC  
                                           u29730 7238                                             u44770 63E6  
                                           u44907 90EA                                             u37900 787C  
                                           u37740 82D4                                             u44917 9126  
                                           u37590 1400                                             u29670 8898  
                                           u29910 7052                                             u44790 63F8  
                                           u44927 802A                                             u44937 8056  
                                           u37690 1748                                             u29850 70F4  
                                           u44947 7396                                             u44957 73F2  
                                           u44877 9072                                             u29790 7196  
                                           u44967 73FC                                             u44887 8AC8  
                                           u29960 6BE0                                             i2l441 761E  
                                           u44977 7406                                             u44897 90AE  
                                           i2l443 762A                                             i2l451 8BBE  
                                           u44987 741A                                             i2l436 95D4  
                           _processPotentiometers 3D98                                             i2l453 8BEA  
                                           u44997 95C0                                             i2l807 7E1A  
                                           i2l808 7E2A                                   ___awdiv@counter 0064  
                                   _controlChange 9298                                             _SPBRG 000FAF  
                                           _PORTA 000F80                                             _PORTB 000F81  
                                           _PORTC 000F82                                             _PORTD 000F83  
                                           _PORTE 000F84                                      _sort_pitches 61F6  
                         __size_of_Lcd_Set_Cursor 005A                                             _TRISA 000F92  
                                           _TRISB 000F93                                             _TRISC 000F94  
                                           _TRISD 000F95                                             _TRISE 000F96  
                                           _TXREG 000FAD                    ?_keyboard_eight_note_efficient 0001  
                                   __CFG_PWRT$OFF 000000                             __end_of_playThisNote8 2A9A  
                                   __CFG_WRT0$OFF 000000                                     __CFG_WRT1$OFF 000000  
                      __size_of_keyboardTranspose 02A6                                     __CFG_WRT2$OFF 000000  
                             ___lmul@multiplicand 0064                                     __CFG_WRT3$OFF 000000  
                     encoderInputsBuxton@pinstate 0006                                    __CFG_EBTR0$OFF 000000  
                                  __CFG_FCMEN$OFF 000000                                    __CFG_EBTR1$OFF 000000  
                                  __CFG_EBTR2$OFF 000000                                    __CFG_EBTR3$OFF 000000  
                                   __CFG_WRTB$OFF 000000                                   __end_of_display 962C  
                                   __CFG_WRTC$OFF 000000                                     __CFG_WRTD$OFF 000000  
                                  Read_b_eep@badd 0060                                   ??_processOctave 008C  
                                  __CFG_EBTRB$OFF 000000                                             _flag1 0198  
                                           _flag2 0197                                     _transposeMenu 0162  
                                           _clock 9684                   ?_keyboard_sharps_only_efficient 0001  
                ??_keyboard_sharps_only_efficient 007D               __size_of_key_press_release_note_off 0162  
                          Write_b_eep@GIE_BIT_VAL 0063                                             _randx 01E7  
                                  noteOn@velocity 006F                                             _setup 889C  
                                           _srand 9650                                             _state 0058  
                                 __end_of_sendUSB 7422                                       copy_array@i 0060  
                                 __end_of_sendOut 95CE                                   ?_random_pitches 0001  
                                  __pbitbssCOMRAM 0190                                   __end_of_noteOff 9050  
                                  __CFG_BOREN$OFF 000000                                             pclath 000FFA  
                                      i2sendUSB@i 000A                                             tablat 000FF5  
                          _playDiatonicTriadMajor 56F4                                  _suppress_note_on 019D  
                                __end_ofi2___lmul 8DA6                    __size_of_finish_arpeggio_setup 001E  
                          _playDiatonicTriadMinor 458E                                             plusw2 000FDB  
                   __end_of_finish_arpeggio_setup 95B0                         __size_of_Lcd_Print_String 007C  
              __end_of_delete_notes_from_arpeggio 9330                        _delete_notes_from_arpeggio 92FE  
                  keyboardTranspose@semitone_temp 0053                                             status 000FD8  
                                      i2sendOut@a 0001                                     _UN_LATCH_MODE 01A8  
                                           wtemp6 0060                                     i2___lbmod@rem 0004  
                              _encoder_state_last 016F         i2random_pitches_non_repeating@randomIndex 0016  
         random_pitches_non_repeating@randomIndex 0075                                __size_ofi2___awdiv 0084  
                              __size_ofi2___awmod 0070                                  __end_ofi2_noteOn 8BEE  
                              __size_ofi2___lbmod 002A                              _LAST_NOTE_MODE_RESET 019F  
                         __size_of_Lcd_Print_Char 0084                       __size_of_buttonInputsSerial 007C  
                                   ?_Function_A_1 0001                                     ?_Function_A_2 0001  
                                   ?_Function_A_3 0001                                     ?_Function_C_1 0001  
                                   ?_Function_C_2 0001                                     ?_Function_C_3 0001  
                                   ?_Function_D_1 0001                                     ?_Function_D_2 0001  
                                   ?_Function_D_3 0001                                     ?_Function_D_4 0001  
                                   ?_Function_E_1 0001                                     ?_Function_D_5 0001  
                                   ?_Function_E_2 0001                                     ?_Function_G_1 0001  
                                   ?_Function_G_2 0001                                     ?_Function_G_3 0001  
                                   ?_Function_G_4 0001                                     ?_Function_H_1 0001  
                                   ?_Function_H_2 0001                                     ?_Function_H_3 0001  
                                   ?_Function_H_4 0001                                     ?_Function_H_5 0001  
                                   ?_Function_H_6 0001                                     ?_Function_H_7 0001  
                                   ?_Function_H_8 0001                                     ?_Function_H_9 0001  
                                 __initialization 6716                                      __end_of_main 641A  
                                    __end_of_load 9684                                      __end_of_rand 8B92  
                                 ??_programChange 006D                                        _Read_b_eep 95EA  
                                __end_of_Busy_eep 967E                               _half_diminished_7th 02EC  
                         _initializeSaveSlotsOnce 8F84                                __size_ofi2_sendUSB 009A  
                                      _Function_A 7F86                                        _Function_B 7D8A  
                                      _Function_C 7966                                __size_ofi2_sendOut 001C  
                                      _Function_D 7A74                                        _Function_E 85AE  
                                      _Function_F 86FA                                        _Function_G 772A  
                                      _Function_H 6E5C                                __size_ofi2_noteOff 003C  
                         __size_of_loadFromEEPROM 0238                                            ??_main 00CF  
                          _arpeggiatorOctavesMenu 012F                                            ??_load 0060  
                                          ??_rand 006E                                    ?_controlChange 006B  
                              __size_of_Lcd_Clear 000E                                     __activetblptr 000002  
                                 ??_displayDigits 0015                                      ?_playSeventh 0001  
                              __size_of_Lcd_Start 008C                        rotateArrayLeft@array_index 0067  
                            displayDigits@lowByte 0018                                   ??_displayString 0001  
              i2random_pitches_non_repeating@temp 0015                  random_pitches_non_repeating@temp 0074  
                                          ?_clock 0001                                            _ADCON0 000FC2  
                                          _ADCON1 000FC1                                            _ADCON2 000FC0  
                                          _ADRESH 000FC4                                            _EEADRH 000FAA  
                                          _ADRESL 000FC3                                            _EEDATA 000FA8  
                                          _EECON2 000FA7                                            _T08BIT 007EAE  
                                ___awdiv@dividend 0060                                            ?_setup 0001  
                                          ?_srand 0060                      calculate_pulse_length@s_tick 00C4  
                                 __CFG_BBSIZ$1024 000000                                      ?_noteOffDrum 006B  
                             saveToEEPROM@to_save 0064                                            _INT0IE 007F94  
                                          _INT0IF 007F91                                     ?_exitFunction 0001  
                                          i2l5300 0B5A                                            i2l5301 0B58  
                                          i2l2910 6652                                            i2l5302 0B98  
                                          i2l5303 0B96                                            i2l2912 669E  
                                          i2l5312 0C30                                            i2l2913 66C0  
                                          i2l5321 0D38                                            i2l5305 0BAA  
                                          i2l2914 66E4                                            i2l5322 0D50  
                                          i2l5314 0C80                                            i2l5306 0BC2  
                                          i2l2915 6708                                            i2l5323 0D5E  
                                          i2l5307 0BD0                                            i2l2908 6628  
                                          i2l5340 0F32                                            i2l5316 0CD4  
                                          i2l5317 0CD2                                            i2l2870 411A  
                                          i2l5318 0D26                                            i2l2871 4062  
                                          i2l5271 62FA                                            i2l5327 0D90  
                                          i2l5319 0D24                                            i2l2880 41E2  
                                          i2l2872 407E                                            i2l5264 6306  
                                          i2l5440 8D74                                            i2l5360 10CA  
                                          i2l5336 0E84                                            i2l5328 0DD4  
                                          i2l2873 4164                                            i2l5265 6204  
                                          i2l5361 10F8                                            i2l5345 0F9A  
                                          i2l5337 0EB2                                            i2l5329 0E1C  
                                          i2l5602 7CE6                                            i2l2874 41AA  
                                          i2l5266 62FC                                            i2l5346 0FCE  
                                          i2l4810 5366                                            i2l5603 7CF0  
                                          i2l5611 8654                                            i2l2891 425E  
                                          i2l5267 620A                                            i2l5339 0F00  
                                          i2l4811 5376                                            i2l5604 7CFE  
                                          i2l5612 864C                                            i2l2884 420E  
                                          i2l5348 1018                                            i2l2885 4210  
                                          i2l2869 41B2                                            i2l5269 6282  
                                          i2l5285 7D7E                                            i2l5365 1118  
                                          i2l5349 1046                                            i2l4805 532A  
                                          i2l2894 4298                                            i2l5278 8C96  
                                          i2l5286 7D16                                            i2l5358 10BA  
                                          i2l4806 534A                                            i2l5615 866C  
                                          i2l2895 429A                                            i2l2879 41EA  
                                          i2l5439 8D60                                            i2l5279 8C56  
                                          i2l5616 8676                                            i2l5608 8632  
                                          i2l2888 4242                                            i2l5296 0AB4  
                                          i2l5617 8684                                            i2l5609 863E  
                                          i2l2897 42B4                                            i2l2889 4244  
                                          i2l2898 42DA                                            i2l5298 0B0E  
                                          i2l5595 7C98                                            i2l4795 529C  
                                          i2l5596 7CA8                                            i2l4796 52B6  
                                          i2l5598 7CC6                                            i2l5766 944A  
                                          i2l4798 52C0                                            i2l5599 7CBE  
                                          i2l5767 9462                                            i2l4799 5382  
                                       ??_Lcd_Cmd 0061                                            _TMR0IE 007F95  
                                          _TMR0IF 007F92                                            _TMR2IE 007CE9  
                                          _TMR2IF 007CF1                                            _TMR0ON 007EAF  
                                i2___lmul@product 0009                                            _TMR2ON 007E52  
                         __end_of_rotateArrayLeft 8458                                            _ON_OFF 01B5  
                                __end_of___xxtofl 5FA6                                            i2_rand 8DFA  
                    __size_of_initializeMenuArray 0202                          __end_of_selectSlotOnBoot 9572  
                                  ??_Function_A_1 0070                                    ??_Function_A_2 0070  
                                  ??_Function_A_3 0070                                    ??_Function_C_1 0070  
                                  ??_Function_C_2 007A                                    ??_Function_C_3 007A  
                                  ??_Function_D_1 0070                                    ??_Function_D_2 00A0  
                                  ??_Function_D_3 007C                                    ??_Function_D_4 007C  
                                  ??_Function_D_5 007C                                    ??_Function_E_1 007A  
                                  ??_Function_E_2 007A                                    ??_Function_G_1 00B4  
                                  ??_Function_G_2 00CC                                    ??_Function_G_3 0070  
                                  ??_Function_G_4 0072                                    ??_Function_H_1 0070  
                                  ??_Function_H_2 00CC                                    ??_Function_H_3 007A  
                                  ??_Function_H_4 0077                                    ??_Function_H_5 0070  
                                  ??_Function_H_6 008D                                    ??_Function_H_7 0070  
                                  ??_Function_H_8 0070                                    ??_Function_H_9 0071  
                                   ?_panic_button 0001                             __end_of_resetArpeggio 917C  
                                  __CFG_XINST$OFF 000000                                   noteOff@velocity 006C  
                         __size_of_Function_H_6_1 009E                           __size_of_Function_H_6_2 00AC  
                         __size_of_Function_H_8_1 0078                           __size_of_Function_H_8_2 0066  
                         __size_of_Function_H_9_1 00A2                           __size_of_Function_H_9_2 00A2  
                         __size_of_Function_H_9_3 00A2                           __size_of_Function_H_9_4 00A2  
                                ??_processDrumpad 0071                          readPotentiometers@i_3358 00CB  
                        readPotentiometers@i_3359 00CD                                            ___lmul 8CA2  
                                ascii@LCD_STRINGS E8C3                                         ??___aldiv 0074  
                                       ??___fladd 00AC                                            ___wmul 94E2  
                                       ??___fldiv 008F                                         ??___awdiv 0064  
                                       ??___flneg 00A4                                         ??___awmod 0072  
                                       ??___lbmod 0061                                         ??___flmul 0076  
                                       ??___fltol 00BC                             __size_of_doTheUnLatch 01C0  
                         ??_add_notes_to_arpeggio 0069                                       ?_Lcd_SetBit 0001  
                                __end_of_exitLoad 90C8                                  __end_of_exitSave 9104  
                                          _octave 00FC                                            clear_0 67BC  
                                          clear_1 67C8                                            clear_2 67D4  
                                          clear_3 67EA                                  __end_of_menu_lcd 69C6  
                                ___awdiv@quotient 0066                                   ___awmod@divisor 0070  
                                          _noteOn 89C2                                   ___awmod@counter 0072  
                          ?_processPotentiometers 0001                                            _ttable F33D  
                            __size_of_displayTest 007E                                            _strcpy 92CC  
                                       ??_display 001A                         _arpeggiatorNoteLengthMenu 0129  
                                  i2___awdiv@sign 0006                                 _programChangeMenu 0144  
                               _latch_was_pressed 01A6                                      __pdataCOMRAM 005B  
                                     i2sendUSB@ii 000B                                 __end_ofi2___awdiv 7D08  
                               __end_ofi2___awmod 868E                                 __end_ofi2___lbmod 946A  
                                       ?_ADC_Read 0060                                         ??_sendUSB 0062  
                        __size_of_printThisNumber 0012                                 _suppress_note_off 019C  
                                       ??_sendOut 0060                                      __mediumconst E8C2  
                keyboard_all_note_efficient@pitch 0085                                         ??_noteOff 006D  
                                          tblptrh 000FF7                                            tblptrl 000FF6  
                                          tblptru 000FF8                                            srand@x 0060  
                                  i2___awmod@sign 0014                                    ??_exitFunction 0070  
                                 Lcd_Set_Cursor@a 0064                                   Lcd_Set_Cursor@b 0063  
                                 Lcd_Set_Cursor@y 0066                                   Lcd_Set_Cursor@z 0065  
                    __size_of_encoderInputsBuxton 0080                                   noteOnDrum@pitch 006E  
                       loadFromEEPROM@baseAddress 01D2                                      ___xxtofl@arg 006A  
                                    ___xxtofl@exp 0069                              selectSlotOnBoot@slot 00CC  
                           __size_of_analogInputs 0006                                      ___xxtofl@val 0060  
                                 ___lbmod@divisor 0060                        _LAST_NOTE_MODE_KEY_RELEASE 01A1  
                               __end_ofi2_sendUSB 7692                                        __accesstop 0060  
                         __end_of__initialization 67F0                                   ___lbmod@counter 0062  
                               __end_ofi2_sendOut 95EA                                   __CFG_PBADEN$OFF 000000  
                                      ___flneg@f1 00A0                                 __end_ofi2_noteOff 91F4  
              __end_of_key_press_release_note_off 5CF4                        _key_press_release_note_off 5B92  
                                   _MAX_NUM_NOTES F39D                                      _doTheUnLatch 5076  
                               __end_of_Lcd_Clear 966E                          __size_of_processKeyboard 006C  
                                   ___rparam_used 000001                                    ??_panic_button 006E  
                               _button_state_last 00D4                                        ___fltol@f1 00B8  
                           __end_of_digitalInputs 8DFA                                 __end_of_Lcd_Start 78DE  
                   processPotentiometers@highByte 0072                     __size_of_setControllerNumbers 04F8  
                                  __pcstackCOMRAM 0001                            _diatonic_seventh_major F2A7  
                       ??_initializeSaveSlotsOnce 00B4                      ?_keyboard_all_note_efficient 0001  
                            initializeMenuArray@i 006C                                      __pidataBANK0 966E  
                                    __pidataBANK1 946A                                      __pidataBANK2 8E4E  
                                    __pidataBANK3 8764                            _diatonic_seventh_minor F26B  
                             buttonInputsSerial@i 0064                                     __end_of_clock 968A  
                                     ?_Read_b_eep 0060                                     _stored_octave 00E7  
                                   __end_of_setup 8900                                     __end_of_srand 9660  
                                 ??_controlChange 006D                                       ?_Function_A 0001  
                                     ?_Function_B 0001                                       ?_Function_C 0001  
                                     ?_Function_D 0001                                       ?_Function_E 0001  
                                     ?_Function_F 0001                                       ?_Function_G 0001  
                                     ?_Function_H 0001                       _arpeggiatorLastNoteModeMenu 00DC  
                             ADC_Read@adc_channel 0064                                         ?i2___lmul 0001  
                         Function_C_2@array_index 007B                                     ?_playArpeggio 0001  
                            _number_of_interrupts 0288                                    _Lcd_Set_Cursor 8BEE  
                                      ??_ADC_Read 0062                                     ?_saveToEEPROM 0001  
                                    _analogInputs 968A                      __end_of_pentatonic_major_key F39D  
                                 _slidepotsCCMenu 014D                                 i2_printThisNumber 963E  
                      add_notes_to_arpeggio@pitch 0070                                         ?i2_noteOn 000F  
                                playSeventh@pitch 007F  delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT 006A  
                      __end_of_readPotentiometers 174C                                           ??_clock 0060  
                              ?i2_printThisNumber 0001                                   findArrayIndex@i 0062  
                    __end_of_processEncoderBuxton 0A42                                           ??_setup 0060  
                                         ??_srand 0062                             displayDigits@highByte 0019  
                                      __pbssBANK0 00D0                                        __pbssBANK1 0100  
                                      __pbssBANK2 0200                                        _doTheLatch 9572  
              i2random_pitches@random_array_index 0015                  random_pitches@random_array_index 0074  
                                   ?_playThisNote 0001                                  _Lcd_Print_String 817A  
                       keyboardTranspose@keyPress 0193                               __size_of_Lcd_SetBit 0030  
                                       ?_Busy_eep 0001                      __end_of_pentatonic_minor_key F392  
                                ?_rotateArrayLeft 0001                            _drum_button_state_last 00ED  
                             ??i2_printThisNumber 0003                                           ?i2_rand 000D  
                                  _Lcd_Print_Char 7B7C                                 ?i2_random_pitches 0001  
                        ??_calculate_pulse_length 00C4                      ??_delete_notes_from_arpeggio 0069  
                                    _DISPLAY_MODE 005A                                        _clear_row1 94BA  
                                      _clear_row2 9492                                ??i2_random_pitches 0015  
                                         ?___lmul 0060                                           ?___wmul 0064  
                          saveToEEPROM@byte_count 00B2                      playDiatonicTriadMajor@i_1679 007D  
                              __size_of_playTriad 0180                                __size_of_pitchBend 0034  
                   ??_keyboard_all_note_efficient 0085                                    ___lmul@product 0068  
                              Lcd_SetBit@data_bit 0060                                    _loadFromEEPROM 4A48  
                                         ?_noteOn 006E                            __end_of_Lcd_Set_Cursor 8C48  
                                   ??_Write_b_eep 0063                                    ??_playArpeggio 0018  
                         __size_of_ADC_Initialize 0014                                           ?_strcpy 0060  
                                      ??i2___lmul 0009                           Function_C_3@array_index 007B  
                       __end_ofi2_printThisNumber 9650                                 _number_to_display 005B  
                                      _eepromMenu 013B                                        _eepromExit 9104  
                         __size_of_findArrayIndex 003C                                           i2l22653 6620  
                                  ??_saveToEEPROM 0064                                           _INTEDG0 007F8E  
                                         i2l19413 7622                                           _DRUM_CC 01D7  
                                         i2l19407 7616                                         ?___xxtofl 0060  
                                         _OCTAVES 00F8                findArrayIndex@pitch_of_key_release 0061  
                                ??_random_pitches 0074                              __end_of_Function_A_1 817A  
                int2string@number_to_display_temp 0078                              __end_of_Function_A_2 80FE  
                            __end_of_Function_A_3 7B7C                              __end_of_Function_C_1 7852  
                            __end_of_Function_C_2 61F6                              __end_of_Function_C_3 60CE  
                            __end_of_Function_D_1 7966                              __end_of_Function_D_2 89C2  
                            __end_of_Function_D_3 8368                              __end_of_Function_D_4 7F86  
                            __end_of_Function_D_5 7F08                              __end_of_Function_E_1 8F3A  
                            __end_of_Function_E_2 8EEC                              __end_of_Function_G_1 7380  
                            __end_of_Function_G_2 72DE                              __end_of_Function_G_3 8ADA  
                            __end_of_Function_G_4 755E                              __end_of_Function_H_1 75F8  
                            __end_of_Function_H_2 8836                              __end_of_Function_H_3 8A7E  
                            __end_of_Function_H_4 6CFE                              __end_of_Function_H_5 6E5C  
                            __end_of_Function_H_6 853C                              __end_of_Function_H_7 6DAE  
                            __end_of_Function_H_8 84CA                              __end_of_Function_H_9 772A  
                                      ??i2_noteOn 0011                          ?_setControllerResolution 0001  
                            __size_of_playSeventh 018E                   __end_of_initializeSaveSlotsOnce 8FCE  
                         ?_playDiatonicTriadMajor 0077                           ?_playDiatonicTriadMinor 0077  
                                      _drumCCMenu 0159                                    ??_playThisNote 0080  
             _arpeggiatorLastNoteModeKeyPressMenu 0111                                 ??_printThisNumber 0062  
                             __size_of_Read_b_eep 001A                                  doTheUnLatch@once 0192  
                                      _int2string 6AA4                                   _ARPEGGIO_RANDOM 028C  
                                 Lcd_Print_Char@i 0064                                        _dorian_key FD46  
                                      ??_Busy_eep 0060                                           _Lcd_Cmd 950A  
                          __end_of_Lcd_Print_Char 7C00                                        _drumNNMenu 015C  
                                       ?_exitLoad 0001                              __size_of_noteOffDrum 0038  
                                      _copy_array 8900                                         ?_exitSave 0001  
                     ?_delete_notes_from_arpeggio 0001                                       noteOn@pitch 006E  
                                 _ARPEGGIO_SORTED 029C                               __size_of_Function_A 007E  
                             __size_of_Function_B 0080                               __size_of_Function_C 0088  
                             __size_of_Function_D 0084                               __size_of_Function_E 0070  
                             __size_of_Function_F 006A                               __size_of_Function_G 0094  
                             __size_of_Function_H 00AC                                         ?_menu_lcd 0001  
                        _playDiatonicSeventhMajor 5562                   ??_keyboard_eight_note_efficient 0088  
                        _playDiatonicSeventhMinor 47EC                                   __size_ofi2_rand 0054  
                            i2sendUSB@midiMessage 0006                   i2random_pitches_non_repeating@i 0017  
                   random_pitches_non_repeating@i 0076                                           __Hparam 0000  
                                    _CONTROL_MODE 0194                         playDiatonicSeventhMajor@i 007C  
                                  _mixolydian_key FD19                                           __Lparam 0000  
                               _potentiometer_raw 0260                             __end_of_setupArpeggio 8272  
                                  _Function_H_6_1 7422                                    _Function_H_6_2 6F08  
                                  _Function_H_8_1 8368                                    _Function_H_8_2 8836  
                                  _Function_H_9_1 719A                                    _Function_H_9_2 70F8  
                                  _Function_H_9_3 7056                                    _Function_H_9_4 6FB4  
          __end_of_keyboard_sharps_only_efficient 3D98           __size_of_keyboard_sharps_only_efficient 02AE  
                  _keyboard_sharps_only_efficient 3AEA                         playDiatonicSeventhMinor@i 007D  
                                         ___aldiv 6B78                                           ___fladd 31EE  
                                 _midiChannelMenu 0147                                           ___fldiv 3834  
                                         ___awdiv 79EE                                           ___flneg 9330  
                                 __size_of___lmul 0058                                           ___awmod 853C  
                                         ___lbmod 9390                                           ___flmul 2E9C  
                          __end_of_loadFromEEPROM 4C80                                           ___fltol 69C6  
                                 __size_of___wmul 0028                                 ??_processKeyboard 008A  
                            __end_of_exitFunction 908C                                   __CFG_STVREN$OFF 000000  
                                         _channel 00F6                                           __pcinit 6716  
                                         __ramtop 0D00                                   ?_Lcd_Set_Cursor 0063  
                                      _ionian_key FD55                                   __size_of_noteOn 0060  
                                         _ema_sum 0240                                 __end_of_major_key F387  
                                         __ptext0 6310                                           __ptext1 9650  
                                         __ptext2 889C                                           __ptext3 9552  
                                         __ptext4 9530                                           __ptext5 68E4  
                                         __ptext6 9660                                           __ptext7 6E5C  
                                         __ptext8 7692                                           __ptext9 6FB4  
                                         _command 01ED                                _NOTE_LENGTH_PULSES 00F7  
                                         _display 9618                                   __size_of_strcpy 0032  
                                    __size_of_ISR 53C6                               _initializeMenuArray 4C80  
                                    __size_of_map 00E6                                        ??___xxtofl 0064  
                          saveToEEPROM@slotNumber 00B1                                  ___awmod@dividend 006E  
                            __end_of_panic_button 9552                                Function_H_6_1@temp 008C  
                                         _sendUSB 7380                                  ___aldiv@dividend 006C  
                  __end_of_playDiatonicTriadMajor 5884                                           _sendOut 95B0  
                  __end_of_playDiatonicTriadMinor 47EC                                  rotateArrayLeft@i 0068  
                                         _noteOff 9010                                  noteOffDrum@pitch 006B  
                             __end_of_Write_b_eep 9010             _arpeggiatorLastNoteModeKeyReleaseMenu 010E  
                                playTriad@triad_p 007B                                 __end_of_seg_ascii F26B  
                         saveToEEPROM@baseAddress 00AF                          __end_ofascii@LCD_STRINGS F220  
            __size_of_keyboard_all_note_efficient 051A                                 __end_of_minor_key F378  
                        __size_of_calculate_alpha 004A                   setControllerNumbers@array_index 007B  
                                       _DRUM_MODE 0195                                         _DRUM_NOTE 01DF  
                                  __pintcode_body 5236              __end_of_random_pitches_non_repeating 7C84  
           __size_of_random_pitches_non_repeating 0084                             __end_of_processOctave 3834  
                ??i2_random_pitches_non_repeating 0015                   ?i2_random_pitches_non_repeating 0001  
                    _random_pitches_non_repeating 7C00                              end_of_initialization 67F0  
                               __end_of_playTriad 5B92                                       ?_doTheLatch 0001  
                               __end_of_pitchBend 9298                                   ?_Lcd_Print_Char 0001  
                                      ??_exitLoad 0070                                     __Lmediumconst E8C2  
                            _light_decimal_points 01B6                                           int_func 5236  
                                      ??_exitSave 0070                                        ??_menu_lcd 00CE  
                      __end_of_buttonInputsSerial 82EE                                        _noteOnDrum 8CFA  
                                  displayString@i 0002                            __end_of_mixolydian_key FD28  
                         __size_of_wait_one_pulse 002A                                         i2u3002_44 764E  
                                       i2u3002_45 764A                                         i2u3003_40 7660  
                                       i2u3004_45 7662                                         i2u3005_40 7682  
                                       i2u3006_40 7686                              ?_initializeMenuArray 0001  
                          __end_of_Function_H_6_1 74C0                            __end_of_Function_H_6_2 6FB4  
                          __end_of_Function_H_8_1 83E0                            __end_of_Function_H_8_2 889C  
                          __end_of_Function_H_9_1 723C                            __end_of_Function_H_9_2 719A  
                          __end_of_Function_H_9_3 70F8                            __end_of_Function_H_9_4 7056  
                                       i2u3420_40 7CCA                             _finish_arpeggio_setup 9592  
                                       i2u3426_40 8658                                         i2u4510_47 95DC  
                                       i2u4504_47 52A6                                        _noteNumber 00F4  
                                       i2u4505_47 760C                                         i2u4506_47 7664  
                                       i2u4507_47 766E                                         i2u4460_40 52FE  
                                       i2u3660_45 412C                                         i2u4508_47 7678  
                                       i2u3661_45 414E                                         i2u4509_47 768A  
                                       i2u3655_40 4050                                         i2u3807_40 0A60  
                                       i2u3663_45 417E                                         i2u4464_40 5346  
                                       i2u3666_40 41C6                                         i2u3851_40 0D70  
                                       i2u3829_40 0BE0                                 ?_selectSlotOnBoot 0001  
                                       i2u3696_40 667C                                         i2u3793_40 7E34  
                                       i2u3882_40 1086                                         i2u3794_48 7E36  
                                       i2u3859_40 0E34                                         i2u3893_40 1106  
                                       i2u3869_40 0F42                                 pitchBend@highByte 006C  
                                       i2u3886_40 10A6                                        _lydian_key FD28  
                 __size_of_calculate_pulse_length 015E                                       ?_clear_row1 0001  
                                     ?_clear_row2 0001                                    _diatonic_major F310  
                                  _diatonic_minor F2E3                            __size_of_playThisNote8 0426  
                            _pentatonic_major_key F392                                    _joystickCCMenu 014A  
                                       _PRESCALER 005D                                        _potsCCMenu 0150  
                                ___aldiv@quotient 0076                                ??_selectSlotOnBoot 00CC  
                                         postdec1 000FE5                                           postdec2 000FDD  
                                         postinc0 000FEE                                           postinc1 000FE6  
                                         postinc2 000FDE                           ??_processPotentiometers 006E  
                             i2___lmul@multiplier 0001                                   _drumChannelMenu 013E  
                                 ?_loadFromEEPROM 0001                               noteOffDrum@velocity 006C  
                              controlChange@value 006C                               _encoderInputsBuxton 7E0A  
                                    ??_Lcd_SetBit 0060                              _processEncoderBuxton 0012  
                           __end_of_programChange 93EA                                 playThisNote@pitch 0084  
                  __size_of_add_notes_to_arpeggio 00FE                          ??_playThisNotePentatonic 0078  
                   __end_of_add_notes_to_arpeggio 661C                                    _string2display 0182  
                               _encoder_direction 00EB                              _pentatonic_minor_key F387  
                      __size_ofi2_printThisNumber 0012                                        _which_mode 00F1  
                                      _which_note 0057                                       ?_eepromExit 0001  
                                     ___fladd@grs 00B7                                  ___lbmod@dividend 0061  
                           __end_of_displayDigits 42E8                                     ___xxtofl@sign 0068  
                           loadFromEEPROM@to_load 0187                                       ___fldiv@grs 009A  
                                     ___fldiv@rem 0094                                 __size_of_ADC_Read 0038  
                                       i2___awdiv 7C84                                         i2___awmod 861E  
                                       i2___lbmod 9440                             __end_of_displayString 6716  
                            ?_encoderInputsBuxton 0001                      playDiatonicTriadMinor@i_1689 007E  
                                 _TIMER_OVERFLOWS 0054                                      _dominant_7th 02F8  
                             __end_of_aeolian_key FD19                                        map@out_max 008A  
                                      map@out_min 0086                                       ?_int2string 0074  
                            _arpeggiatorLatchMenu 0126                                       ___lbmod@rem 0063  
                                      _statusByte 00F5                                       ___flmul@grs 007B  
                   ?_random_pitches_non_repeating 0001                              _arpeggiatorOnOffMenu 0135  
                                     ?_copy_array 0001                                programChange@data1 006B  
                              programChange@data2 006C                        _potentiometer_filtered_now 0220  
                              __end_of_Lcd_SetBit 9390                             ??_initializeMenuArray 006A  
                     ?_key_press_release_note_off 0001                              __end_of_playArpeggio 114C  
                              i2___awdiv@dividend 0001                        _arpeggiatorUnLatchModeMenu 011D  
                          __end_of_diatonic_major F33D                                   ?_Function_H_6_1 0001  
                                 ?_Function_H_6_2 0001                                   ?_Function_H_8_1 0001  
                                 ?_Function_H_8_2 0001                                   ?_Function_H_9_1 0001  
                                 ?_Function_H_9_2 0001                                   ?_Function_H_9_3 0001  
                                 ?_Function_H_9_4 0001                            __end_of_diatonic_minor F310  
                                       i2_sendUSB 75F8                              __end_of_saveToEEPROM 5076  
                                  __end_ofi2_rand 8E4E                                         i2_sendOut 95CE  
                                       i2_noteOff 91B8                                     noteOn@channel 0070  
                                       _Lcd_Clear 9660             __end_of_keyboard_eight_note_efficient 2E9C  
          __size_of_keyboard_eight_note_efficient 0402                     _keyboard_eight_note_efficient 2A9A  
                              displayDigits@digit 0037                       _calculate_pulse_length$5808 00C8  
                                   ??_displayTest 0066                                      ??_Read_b_eep 0062  
                                       _Lcd_Start 7852                             ?_processEncoderBuxton 0001  
                                  __end_of___lmul 8CFA                                    __end_of___wmul 950A  
                                   __pidataCOMRAM 9690                              __end_of_playThisNote 651E  
                                    ??_Function_A 0071                                      ??_Function_B 0070  
                                    ??_Function_C 007C                                      ??_Function_D 00A0  
                                    ??_Function_E 007A                                      ??_Function_F 007A  
                                    ??_Function_G 00CD                                      ??_Function_H 00CC  
                           __size_of_Function_A_1 007C                             __size_of_Function_A_2 007C  
                             __size_of_doTheLatch 0020                             __size_of_Function_A_3 0084  
                           __size_of_Function_C_1 0094                             __size_of_Function_C_2 0128  
                           __size_of_Function_C_3 0128                             __size_of_Function_D_1 0088  
                           __size_of_Function_D_2 0060                             __size_of_Function_D_3 007A  
                           __size_of_Function_D_4 007E                             __size_of_Function_D_5 007E  
                           __size_of_Function_E_1 004E                             __size_of_Function_E_2 004E  
                           __size_of_Function_G_1 00A2                             __size_of_Function_G_2 00A2  
                           __size_of_Function_G_3 005C                             __size_of_Function_G_4 009E  
                           __size_of_Function_H_1 009A                             __size_of_Function_H_2 0068  
                           __size_of_Function_H_3 005C                             __size_of_Function_H_4 00B8  
                           __size_of_Function_H_5 00AE                             __size_of_Function_H_6 0072  
                           __size_of_Function_H_7 00B0                             __size_of_Function_H_8 0072  
                           __size_of_Function_H_9 0098                                    _ADC_Initialize 9604  
                        __end_of_Lcd_Print_String 81F6                          setControllerResolution@i 0060  
                                     _Write_b_eep 8FCE                       playThisNotePentatonic@index 0077  
                                  __end_of_noteOn 8A22                                    _TRANSPOSE_MODE 01AE  
                     playThisNotePentatonic@pitch 0001                                 i2sendUSB@message1 0009  
                               i2sendUSB@message2 0001                                 i2sendUSB@message3 0002  
                                  _findArrayIndex 917C                                    __end_of_ttable F359  
                            _arpeggiatorTempoMenu 0132                   readPotentiometers@FIRST_READING 0190  
                                  __end_of_strcpy 92FE                      __end_of_setControllerNumbers 2674  
                             start_initialization 6716                            _calculate_pulse_length 5CF4  
                               _encoder_state_now 0170                                 __size_ofi2___lmul 0056  
                              i2___awdiv@quotient 0007                                       __end_of_ISR 53CE  
                                   _playThisNote8 2674                            __size_of_resetArpeggio 003C  
                                     __end_of_map 68E4                               __size_of_clear_row1 0028  
                             __size_of_clear_row2 0028                                wait_one_pulse@mode 0060  
                                      ?i2___awdiv 0001                             ??_encoderInputsBuxton 0001  
                                      ?i2___awmod 000F                                        ?i2___lbmod 0001  
                               __size_ofi2_noteOn 005C                                 playSeventh@i_1662 007E  
                playThisNotePentatonic@temp_pitch 007C                                __end_of_Read_b_eep 9604  
                  __end_of_diatonic_seventh_major F2E3                            ?_finish_arpeggio_setup 0001  
                  __end_of_diatonic_seventh_minor F2A7                                       ?_noteOnDrum 006E  
                               Lcd_Print_String@a 006A                                 Lcd_Print_String@i 006E  
                                    _lastNoteMode 01A3                                 ??_calculate_alpha 00A0  
                                        ??i2_rand 000F                                __end_of_Function_A 8004  
                              __end_of_Function_B 7E0A                                __end_of_Function_C 79EE  
                              __end_of_Function_D 7AF8                                __end_of_Function_E 861E  
                              __end_of_Function_F 8764                                __end_of_Function_G 77BE  
                              __end_of_Function_H 6F08                                 __size_of_Busy_eep 0006  
                              _readPotentiometers 114C                                        ?i2_sendUSB 0001  
                             __size_of_eepromExit 003C                                     _ARPEGGIO_TYPE 00EA  
                                      ?i2_sendOut 0001                                        ?i2_noteOff 000C  
                           __size_of_exitFunction 003C                                      _Function_A_1 80FE  
                                    _Function_A_2 8082                                      _Function_A_3 7AF8  
                                    _Function_C_1 77BE                                      _Function_C_2 60CE  
                                    _Function_C_3 5FA6                                      _Function_D_1 78DE  
                                    _Function_D_2 8962                                      _Function_D_3 82EE  
                                    _Function_D_4 7F08                                      _Function_D_5 7E8A  
                                    _Function_E_1 8EEC                                      _Function_E_2 8E9E  
                                    _Function_G_1 72DE                                      _Function_G_2 723C  
                                    _Function_G_3 8A7E                                      _Function_G_4 74C0  
                                    _Function_H_1 755E                                      _Function_H_2 87CE  
                                    _Function_H_3 8A22                                      _Function_H_4 6C46  
                                    _Function_H_5 6DAE                                      _Function_H_6 84CA  
                                    _Function_H_7 6CFE                                      _Function_H_8 8458  
                                    _Function_H_9 7692                                   _encoderPolarity 01B1  
                                      ?_Lcd_Clear 0001                                          ??___lmul 0068  
                             displayString@letter 0100                                          ??___wmul 0068  
                                      ?_Lcd_Start 0001                            __end_of_ADC_Initialize 9618  
                         readPotentiometers@count 0280                               ?_readPotentiometers 0001  
                                     __pdataBANK0 00F7                                       __pdataBANK1 01D7  
                                     __pdataBANK2 02AC                                       __pdataBANK3 0300  
                                __CFG_LPT1OSC$OFF 000000                               __end_of_LCD_STRINGS FCFB  
                           __size_of_panic_button 0022                        Lcd_Print_Char@Lower_Nibble 0061  
                          __end_of_findArrayIndex 91B8                                          ??_noteOn 0070  
                             __size_of_int2string 00D4                               _encoderPolarityMenu 0138  
                           __end_of_controlChange 92CC                                          ??_strcpy 0064  
                 __size_of_playThisNotePentatonic 0194                                         ___fladd@a 00A8  
                                       ___fladd@b 00A4                               __size_of_copy_array 0062  
                       __size_ofi2_random_pitches 005A                                   _printThisNumber 962C  
                                   ?_sort_pitches 0001                                         ___fldiv@a 008B  
                                       ___fldiv@b 0087                                     _TIMER_PRELOAD 016D  
                             __end_of_displayTest 8082                           Function_D_3@array_index 007D  
                         __size_of_processDrumpad 0516                                         ___flmul@a 0072  
                                       ___flmul@b 006E                                       __pbssCOMRAM 0037  
                                     _aeolian_key FD0A                                  _button_state_now 00D8  
                      displayDigits@digit_counter 0052                                    ?_playThisNote8 007F  
                                   __pcstackBANK0 0060                                     __pcstackBANK1 0187  
                          __size_of_digitalInputs 0054                        ??_playDiatonicSeventhMajor 0078  
                _arpeggiatorLastNoteModeResetMenu 0108                        ??_playDiatonicSeventhMinor 0078  
                               __size_of___xxtofl 0154                                     sort_pitches@a 0003  
                     displayString@letter_counter 0051                                     sort_pitches@i 0005  
                                   sort_pitches@j 0004                              ??_readPotentiometers 00C2  
                          processPotentiometers@i 0073                                      _exitFunction 9050  
                                     _ARPEGGIO_ON 01AC                                          ?_Lcd_Cmd 0001  
                                    _keyboardMenu 004A                                   _processKeyboard 868E  
                                  _wait_one_pulse 9416                                  printThisNumber@n 0060  
                        ?_initializeSaveSlotsOnce 0001                             _drum_button_state_now 00EE  
                __size_of_setControllerResolution 002C                                 __size_of_exitLoad 003C  
                            __end_of_phrygian_key FD46                                 __size_of_exitSave 003C  
                             readPotentiometers@i 00CC                                 __size_of_menu_lcd 00E2  
                                    _panic_button 9530                    ??_random_pitches_non_repeating 0074  
                                   _resetArpeggio 9140                                  ??_Lcd_Set_Cursor 0064  
                                       _ema_alpha 0104                                     Function_H_5@i 0071  
                                       __pintcode 0008                                     __pmediumconst E8C2  
                          ??_processEncoderBuxton 0060                                          ?___aldiv 006C  
                                        ?___fladd 00A4                                   _arpeggiatorMenu 003B  
                                        ?___fldiv 0087                          __size_of_rotateArrayLeft 0078  
                                        ?___awdiv 0060                                         __ptext100 8B36  
                                       __ptext101 853C                                         __ptext110 91F4  
                                       __ptext102 8900                                          ?___flneg 00A0  
                                       __ptext111 42E8                                         __ptext103 9140  
                                       __ptext120 114C                                         __ptext112 9416  
                                       __ptext104 92FE                                         __ptext121 3D98  
                                       __ptext113 962C                                         __ptext105 917C  
                                       __ptext130 69C6                                         __ptext122 9264  
                                       __ptext114 5B92                                         __ptext106 651E  
                                       __ptext131 9330                                         __ptext123 9298  
                                       __ptext115 9010                                         __ptext107 83E0  
                                       __ptext140 963E                                         __ptext132 2E9C  
                                       __ptext124 7380                                         __ptext116 8272  
                                       __ptext108 1C66                                         __ptext141 9440  
                                       __ptext133 31EE                                         __ptext125 95B0  
                                       __ptext117 967E                                         __ptext109 8CFA  
                                       __ptext150 95CE                                         __ptext142 0A42  
                                       __ptext134 922C                                         __ptext126 67FE  
                                       __ptext118 9684                                         __ptext151 61F6  
                                       __ptext143 7D08                                         __ptext135 7852  
                                       __ptext127 8CA2                                         __ptext119 968A  
                                       __ptext152 7E0A                                         __ptext144 8C48  
                                       __ptext136 950A                                         __ptext128 6B78  
                                       __ptext153 9618                                         __ptext145 8DFA  
                                       __ptext137 9360                                         __ptext129 5E52  
                                       __ptext154 661C                                         __ptext146 8D50  
                                       __ptext138 9604                                         __ptext155 4040  
                                       __ptext147 8B92                                         __ptext156 861E  
                                       __ptext148 91B8                                         __ptext157 7C84  
                                       __ptext149 75F8                                          ?___awmod 006E  
                                        ?___lbmod 0060                                          ?___flmul 006E  
                                        ?___fltol 00B8                                   ?_ADC_Initialize 0001  
                                      playTriad@i 007D                                       _ARRAY_INDEX 00E4  
            _arpeggiatorLastNoteModeTransposeMenu 010B                                    _diminished_7th 02E8  
                                 ?_findArrayIndex 0001                                       _ema_integer 00FB  
                                  ??_sort_pitches 0001                                          ?_display 0001  
                                   ??_playSeventh 0077                    playDiatonicSeventhMajor@i_1684 007D  
                             __size_of_noteOnDrum 0056                                         _count_ISR 0284  
                   controlChange@controllerNumber 006B                          encoderInputsBuxton@tempA 0004  
                        encoderInputsBuxton@tempB 0005                           Function_D_4@array_index 007D  
                                       _major_7th 02F4                                   playTriad@i_1657 007E  
                                        _ADC_Read 922C                                          ?_sendUSB 0060  
                                        ?_sendOut 0001                                 i2random_pitches@i 0016  
                                       _major_key F378                                          ?_noteOff 006B  
                                       _last_note 00E8                                  ??_Lcd_Print_Char 0061  
                                       _menuArray 0300                                      _patch_number 0171  
                                  __size_of_clock 0006                                      playSeventh@i 007D  
                                        _ARPEGGIO 0172                                       ??i2___awdiv 0005  
                                     ??i2___awmod 0013                                       ??i2___lbmod 0002  
                           __size_of_playArpeggio 070A                                     ??_noteOffDrum 006D  
                                  __size_of_setup 0064                                    __size_of_srand 0010  
                                    ??_doTheLatch 0066                            __end_of_wait_one_pulse 9440  
                           __size_of_saveToEEPROM 01F4                                         _minor_7th 02F0  
                                 ___aldiv@divisor 0070                                noteOffDrum@channel 006D  
                                       _seg_ascii F220                                   ___aldiv@counter 0074  
                          _playThisNotePentatonic 53CE                                         _minor_key F369  
                                  ___wmul@product 0068                                         _playTriad 5A12  
                            int2string@isNegative 0191                                         _pitchBend 9264  
                                ??_loadFromEEPROM 00CC                                  pitchBend@channel 006D  
                                       _savesMenu 00DF                                       ??i2_sendUSB 0003  
                                     _arpeggioPtr 004F                                    ?_resetArpeggio 0001  
                                     ??i2_sendOut 0001                                     _digitalInputs 8DA6  
                                        Lcd_Cmd@a 0062                                       ??i2_noteOff 000E  
                                    ??_clear_row1 0070                                      ??_clear_row2 0070  
                            _setControllerNumbers 217C                                       _LCD_STRINGS F39E  
                           __size_of_playThisNote 0104                                          _GO_nDONE 007E11  
             __end_of_keyboard_all_note_efficient 1C66                       _keyboard_all_note_efficient 174C  
                                     ??_Lcd_Clear 0063                                  __CFG_WDTPS$32768 000000  
      initializeSaveSlotsOnce@initializeSlotsOnce 00B4                                          _HYST_VAL 01EB  
          __end_ofi2_random_pitches_non_repeating 7D8A           __size_ofi2_random_pitches_non_repeating 0082  
                  i2_random_pitches_non_repeating 7D08                                  _diminished_triad 01F3  
                         __end_of_printThisNumber 963E                                       ??_Lcd_Start 0063  
                                pitchBend@lowByte 006B                                       _displayTest 8004  
                             __end_of_locrian_key FD0A                                          _POT_MODE 01B4  
                             __end_of_seg_bcd_hex F369                    key_press_release_note_off@temp 00E2  
                  __size_of_processPotentiometers 02A8                                _buttonInputsSerial 8272  
                   __end_of_processPotentiometers 4040                                         map@in_max 0082  
                                       map@in_min 007E                                         _triadMenu 0044  
                        buttonInputsSerial@i_4383 0065                                __end_of_doTheLatch 9592  
                               ___wmul@multiplier 0064                                     _skipFirstLast 01A4  
                                        i2___lmul 8D50                                   ??_playThisNote8 0080  
                                    _playArpeggio 0A42                                   Write_b_eep@badd 0060  
                                 Write_b_eep@bdat 0062                                      ??_eepromExit 0070  
                    _arpeggiatorSkipFirstLastMenu 0114                         __size_of_selectSlotOnBoot 0020  
                    _arpeggiatorRandomizeSkipMenu 011A                           Function_D_5@array_index 007D  
                             ?_buttonInputsSerial 0001                                 i2___awdiv@divisor 0003  
                                    _saveToEEPROM 4E82                                 i2___awdiv@counter 0005  
                                        i2_noteOn 8B92                           __end_of_processKeyboard 86FA  
                          __size_of_setupArpeggio 007C                                 _string_to_display 01EE  
                                    noteOff@pitch 006B                                 ___lmul@multiplier 0060  
                              __end_of_clear_row1 94E2                                __end_of_clear_row2 94BA  
                             __end_of_playSeventh 5A12                                         copy_data0 672A  
                                       copy_data1 674A                                         copy_data2 676A  
                                       copy_data3 678A                                         copy_data4 67AA  
                                ??_Function_H_6_1 008C                                  ??_Function_H_6_2 0070  
                                ??_Function_H_8_1 0070                                  ??_Function_H_8_2 0070  
                                ??_Function_H_9_1 0070                                  ??_Function_H_9_2 0070  
                                ??_Function_H_9_3 0070                                  ??_Function_H_9_4 0070  
                              i2___awmod@dividend 000F               displayDigits@number_to_display_last 016B  
                    _arpeggiatorRandomizeTypeMenu 0117                                      ??_int2string 0076  
                                 ?_wait_one_pulse 0001               displayDigits@number_to_display_temp 004D  
                                    _playThisNote 641A                                          _Busy_eep 9678  
                                    ??_copy_array 0060                             __end_of_MAX_NUM_NOTES F39E  
                               _NUM_NOTES_PRESSED 00E5                           __size_of_random_pitches 005C  
                                   ?_doTheUnLatch 0001                                  __size_of_Lcd_Cmd 0026  
                                      ?_playTriad 0001                                        _EECON1bits 000FA6  
                                      ?_pitchBend 006B                               __end_of_noteOffDrum 922C  
                                 _octave_overflow 019A                                    ?_digitalInputs 0001  
                            ??_buttonInputsSerial 0060                                       _major_triad 01FC  
                                        __Hrparam 0000                             ?_setControllerNumbers 0001  
                             _arpeggiatorTypeMenu 012C                                          __Lrparam 0000  
                                 _augmented_triad 01F6                                __end_of_eepromExit 9140  
                                      _DIGIT_MODE 0059                                  __size_of___aldiv 00CE  
                                __size_of___fladd 033E                                  __size_of___fldiv 02B6  
                                __size_of___awdiv 0086                                  __size_of___flneg 0030  
                                     _last_octave 0055                                  __size_of___awmod 0072  
                                __size_of___lbmod 002E                                  __size_of___flmul 0352  
                                __size_of___fltol 00DE                                       _drumchannel 00FE  
                          __size_of_processOctave 0308                              playSeventh@seventh_p 007B  
                                    ?_Write_b_eep 0060                           ?_calculate_pulse_length 00C2  
                               ?_Lcd_Print_String 006A                                __end_of_int2string 6B78  
                                i2_random_pitches 8C48                                 ??_rotateArrayLeft 0060  
                              __end_of_dorian_key FD55                                         sendUSB@ii 006A  
                                  _processDrumpad 1C66                                  __size_of_display 0014  
                              __end_of_copy_array 8962                                          ___xxtofl 5E52  
                           _add_notes_to_arpeggio 651E                                ??_Lcd_Print_String 006C  
                                   ?_analogInputs 0001                                   _mainChannelMenu 0141  
                __end_of_playDiatonicSeventhMajor 56F4                  __end_of_playDiatonicSeventhMinor 4A48  
                                __size_of_sendUSB 00A2                                   _calculate_alpha 8F3A  
                                __size_of_sendOut 001E                                  __size_of_noteOff 0040  
                                        __ptext10 7056                                          __ptext11 70F8  
                                        __ptext20 6DAE                                          __ptext12 719A  
                                        __ptext21 6C46                                          __ptext13 8458  
                                        __ptext30 4A48                                          __ptext22 8A22  
                                        __ptext14 8836                                          __ptext31 5CF4  
                                        __ptext23 87CE                                          __ptext15 8368  
                                        __ptext40 8EEC                                          __ptext32 908C  
                                        __ptext24 755E                                          __ptext16 6CFE  
                                        __ptext41 7A74                                          __ptext33 72DE  
                                        __ptext25 772A                                          __ptext17 84CA  
                                        __ptext50 93EA                                          __ptext42 7E8A  
                                        __ptext34 90C8                                          __ptext26 74C0  
                                        __ptext18 6F08                                          __ptext51 7966  
                                        __ptext43 7F08                                          __ptext35 9104  
                                        __ptext27 9050                                          __ptext19 7422  
                                        __ptext60 8082                                          __ptext52 5FA6  
                                        __ptext44 82EE                                          __ptext36 86FA  
                                        __ptext28 8A7E                                          __ptext61 80FE  
                                        __ptext53 60CE                                          __ptext45 217C  
                                        __ptext37 93BE                                          __ptext29 723C  
                                        __ptext70 4E82                                          __ptext62 0012  
                                        __ptext54 6AA4                                          __ptext46 8962  
                                        __ptext38 85AE                                          __ptext71 8FCE  
                                        __ptext63 9492                                          __ptext55 79EE  
                                        __ptext47 8F3A                                          __ptext39 8E9E  
                                        __ptext80 92CC                                          __ptext72 9678  
                                        __ptext64 94BA                                          __ptext56 77BE  
                                        __ptext48 3834                                          __ptext81 94E2  
                                        __ptext73 95EA                                          __ptext65 8BEE  
                                        __ptext57 7D8A                                          __ptext49 78DE  
                                        __ptext90 5562                                          __ptext82 868E  
                                        __ptext74 4C80                                          __ptext66 817A  
                                        __ptext58 7F86                                          __ptext91 174C  
                                        __ptext83 3AEA                                          __ptext75 8004  
                                        __ptext67 7B7C                                          __ptext59 7AF8  
                                        __ptext92 641A                                          __ptext84 53CE  
                                        __ptext76 8DA6                                          __ptext68 9390  
                                        __ptext93 5A12                                          __ptext85 2A9A  
                                        __ptext77 352C                                          __ptext69 8F84  
                                        __ptext94 5884                                          __ptext86 2674  
                                        __ptext78 5076                                          __ptext95 89C2  
                                        __ptext87 458E                                          __ptext79 9572  
                                        __ptext96 9592                                          __ptext88 56F4  
                                        __ptext97 81F6                                          __ptext89 47EC  
                                        __ptext98 7C00                                          __ptext99 8ADA  
                     __end_of_initializeMenuArray 4E82                                          _encoderA 01B3  
                                        _encoderB 01B2                           ??_finish_arpeggio_setup 0077  
                                        _mainMenu 0168                                i2___lbmod@dividend 0002  
                    processPotentiometers@lowByte 0071                               _DISPLAY_STEP_NUMBER 0196  
                                      strcpy@from 0062                                          _drumMenu 0041  
                                  ??_doTheUnLatch 0088                            __size_of_programChange 002C  
                                        _exitLoad 908C                                          _keyboard 00D0  
                                   __size_of_main 010A                                          _exitSave 90C8  
                               _startingDirection 00E9                                          _modeMenu 0047  
                                   __size_of_load 0006                                     __size_of_rand 005C  
                                    ??_noteOnDrum 0070                     playDiatonicSeventhMajor@index 0077  
                                        _menu_lcd 68E4                                          _parallel 00E6  
                                 ??_resetArpeggio 0060                     playDiatonicSeventhMajor@pitch 007E  
                         _setControllerResolution 93EA                              __end_of_sort_pitches 6310  
                                  playTriad@pitch 007F                                __end_of_ionian_key FD64  
                                     _locrian_key FCFB                    playDiatonicSeventhMinor@i_1694 007E  
                                     _seg_bcd_hex F359                                          _semitone 00F3  
                          __size_of_displayDigits 02A8                                        _AUTO_LATCH 01A7  
                                   _potsAlphaMenu 0153                                     _setupArpeggio 81F6  
                             playThisNote8@mode_p 0086                                          _potsMenu 003E  
                                        _velocity 00FD                                          _overflow 019B  
                                        int$flags 005F                                  ?_printThisNumber 0060  
                               i2noteOff@velocity 000D                        Lcd_Print_Char@Upper_Nibble 0062  
                  __end_of_calculate_pulse_length 5E52                                       _minor_triad 01F9  
                          __size_of_displayString 00FA                          ??_playDiatonicTriadMajor 0078  
                                 sendUSB@message1 0065                                   sendUSB@message2 0060  
                                 sendUSB@message3 0061                          ??_playDiatonicTriadMinor 0078  
                               _note_off_was_sent 0199                       playDiatonicTriadMajor@index 0077  
                          __end_of_processDrumpad 217C                       playDiatonicTriadMajor@pitch 007E  
                            controlChange@channel 006D                                 i2___awmod@divisor 0011  
                     __end_of_encoderInputsBuxton 7E8A                                    ??_analogInputs 00CE  
                               i2___awmod@counter 0013                                       _playSeventh 5884  
                                      _INTCONbits 000FF2                             i2___lmul@multiplicand 0005  
                              __end_of_noteOnDrum 8D50                                      _phrygian_key FD37  
                                ?_processKeyboard 0001                                     _encoder_click 01B0  
                              __end_of_lydian_key FD37                                 _keyboardTranspose 42E8  
                                     _noteOffDrum 91F4                                          intlevel2 0000  
                                        sendUSB@i 0069                                ?_keyboardTranspose 0001  
                                   _processOctave 352C                                  i2noteOff@channel 000E  
                                  _AUTO_RANDOMIZE 01A5                                          sendOut@a 0060  
                                 ??_digitalInputs 008E                   delete_notes_from_arpeggio@pitch 0069  
                                     ??_playTriad 0077                            ??_setControllerNumbers 007A  
                                     ??_pitchBend 006D                                 i2___lbmod@divisor 0001  
                                  _SORT_DIRECTION 01AD                                    _iterator_focus 00FA  
                               i2___lbmod@counter 0003                                  int2string@number 0074  
             initializeMenuArray@NumberOfElements 006B                                  ??_ADC_Initialize 0060  
                             ??_keyboardTranspose 006E                          _NOTE_LENGTH_PULSES_ARRAY 02DC  
                                  ?_setupArpeggio 0001                                     _which_seventh 00EF  
                                ??_findArrayIndex 0060                                playThisNote8@index 007F  
                                  _lcd_print_once 01AF                                playThisNote8@pitch 0084  
                   playDiatonicSeventhMinor@index 0077                     playDiatonicSeventhMinor@pitch 007C  
                                i2noteOn@velocity 0010               keyboard_sharps_only_efficient@index 007E  
                                  _finishLastNote 019E                                Lcd_Set_Cursor@temp 0067  
             keyboard_sharps_only_efficient@pitch 007D                          loadFromEEPROM@byte_count 01D5  
                                 i2noteOn@channel 0011                                     _programChange 93BE  
                                      Lcd_Start@i 0064                           __end_of_calculate_alpha 8F84  
                                 ?_processDrumpad 0001                  __size_of_initializeSaveSlotsOnce 004A  
                                  _inputPotsArray 02AC                            ?_add_notes_to_arpeggio 0001  
                                _selectSlotOnBoot 9552                                       _seventhMenu 0165  
                                        strcpy@cp 0064                                          strcpy@to 0060  
                               noteOnDrum@channel 0070                                      _which_octave 0056  
                       __end_of_keyboardTranspose 458E                                      _which_screen 00F9  
                                    ___aldiv@sign 0075                                      _potsResoMenu 0156  
                                   _displayDigits 4040                       playDiatonicTriadMinor@index 0077  
                              noteOnDrum@velocity 006F                       playDiatonicTriadMinor@pitch 007C  
             __size_of_delete_notes_from_arpeggio 0032                                     ___fladd@signs 00B4  
                         ?_playThisNotePentatonic 0077                                    ?_processOctave 0001  
                     __size_of_readPotentiometers 0600                                     _displayString 661C  
                       ??_setControllerResolution 0060                                    i2noteOff@pitch 000C  
                                     _which_triad 00F0                                     _KEYBOARD_MODE 00F2  
                                    ___fladd@aexp 00B5                                      ___fladd@bexp 00B6  
                                  _random_pitches 8ADA                                      _toggle_state 00E3  
                                   i2noteOn@pitch 000F                            __size_of_controlChange 0034  
                              sendUSB@midiMessage 0066                 __size_of_playDiatonicSeventhMajor 0192  
               __size_of_playDiatonicSeventhMinor 025C                         ?_playDiatonicSeventhMajor 0077  

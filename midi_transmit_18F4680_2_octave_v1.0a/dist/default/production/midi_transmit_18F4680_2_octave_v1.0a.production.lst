

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Aug 14 19:13:23 2023

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4680
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     9                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
    10                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
    11                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    22                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    25                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	text0,global,reloc=2,class=CODE,delta=1
    27                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text2,global,reloc=2,class=CODE,delta=1
    29                           	psect	text3,global,reloc=2,class=CODE,delta=1
    30                           	psect	text4,global,reloc=2,class=CODE,delta=1
    31                           	psect	text5,global,reloc=2,class=CODE,delta=1
    32                           	psect	text6,global,reloc=2,class=CODE,delta=1
    33                           	psect	text7,global,reloc=2,class=CODE,delta=1
    34                           	psect	text8,global,reloc=2,class=CODE,delta=1
    35                           	psect	text9,global,reloc=2,class=CODE,delta=1
    36                           	psect	text10,global,reloc=2,class=CODE,delta=1
    37                           	psect	text11,global,reloc=2,class=CODE,delta=1
    38                           	psect	text12,global,reloc=2,class=CODE,delta=1
    39                           	psect	text13,global,reloc=2,class=CODE,delta=1
    40                           	psect	text14,global,reloc=2,class=CODE,delta=1
    41                           	psect	text15,global,reloc=2,class=CODE,delta=1
    42                           	psect	text16,global,reloc=2,class=CODE,delta=1
    43                           	psect	text17,global,reloc=2,class=CODE,delta=1
    44                           	psect	text18,global,reloc=2,class=CODE,delta=1
    45                           	psect	text19,global,reloc=2,class=CODE,delta=1
    46                           	psect	text20,global,reloc=2,class=CODE,delta=1
    47                           	psect	text21,global,reloc=2,class=CODE,delta=1
    48                           	psect	text22,global,reloc=2,class=CODE,delta=1
    49                           	psect	text23,global,reloc=2,class=CODE,delta=1
    50                           	psect	text24,global,reloc=2,class=CODE,delta=1
    51                           	psect	text25,global,reloc=2,class=CODE,delta=1
    52                           	psect	text26,global,reloc=2,class=CODE,delta=1
    53                           	psect	text27,global,reloc=2,class=CODE,delta=1
    54                           	psect	text28,global,reloc=2,class=CODE,delta=1
    55                           	psect	text29,global,reloc=2,class=CODE,delta=1
    56                           	psect	text30,global,reloc=2,class=CODE,delta=1
    57                           	psect	text31,global,reloc=2,class=CODE,delta=1
    58                           	psect	text32,global,reloc=2,class=CODE,delta=1
    59                           	psect	text33,global,reloc=2,class=CODE,delta=1
    60                           	psect	text34,global,reloc=2,class=CODE,delta=1
    61                           	psect	text35,global,reloc=2,class=CODE,delta=1
    62                           	psect	text36,global,reloc=2,class=CODE,delta=1
    63                           	psect	text37,global,reloc=2,class=CODE,delta=1
    64                           	psect	text38,global,reloc=2,class=CODE,delta=1
    65                           	psect	text39,global,reloc=2,class=CODE,delta=1
    66                           	psect	text40,global,reloc=2,class=CODE,delta=1
    67                           	psect	text41,global,reloc=2,class=CODE,delta=1
    68                           	psect	text42,global,reloc=2,class=CODE,delta=1
    69                           	psect	text43,global,reloc=2,class=CODE,delta=1
    70                           	psect	text44,global,reloc=2,class=CODE,delta=1
    71                           	psect	text45,global,reloc=2,class=CODE,delta=1
    72                           	psect	text46,global,reloc=2,class=CODE,delta=1
    73                           	psect	text47,global,reloc=2,class=CODE,delta=1
    74                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    75                           	psect	text49,global,reloc=2,class=CODE,delta=1
    76                           	psect	text50,global,reloc=2,class=CODE,delta=1
    77                           	psect	text51,global,reloc=2,class=CODE,delta=1
    78                           	psect	text52,global,reloc=2,class=CODE,delta=1
    79                           	psect	text53,global,reloc=2,class=CODE,delta=1
    80                           	psect	text54,global,reloc=2,class=CODE,delta=1
    81                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=2
    82                           	psect	text56,global,reloc=2,class=CODE,delta=1
    83                           	psect	text57,global,reloc=2,class=CODE,delta=1
    84                           	psect	text58,global,reloc=2,class=CODE,delta=1
    85                           	psect	text59,global,reloc=2,class=CODE,delta=1
    86                           	psect	text60,global,reloc=2,class=CODE,delta=1
    87                           	psect	text61,global,reloc=2,class=CODE,delta=1
    88                           	psect	text62,global,reloc=2,class=CODE,delta=1
    89                           	psect	text63,global,reloc=2,class=CODE,delta=1
    90                           	psect	text64,global,reloc=2,class=CODE,delta=1
    91                           	psect	text65,global,reloc=2,class=CODE,delta=1
    92                           	psect	text66,global,reloc=2,class=CODE,delta=1
    93                           	psect	text67,global,reloc=2,class=CODE,delta=1
    94                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=2
    95                           	psect	text69,global,reloc=2,class=CODE,delta=1
    96                           	psect	text70,global,reloc=2,class=CODE,delta=1
    97                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text74,global,reloc=2,class=CODE,delta=1
   101                           	psect	text75,global,reloc=2,class=CODE,delta=1
   102                           	psect	text76,global,reloc=2,class=CODE,delta=1
   103                           	psect	text77,global,reloc=2,class=CODE,delta=1
   104                           	psect	text78,global,reloc=2,class=CODE,delta=1
   105                           	psect	text79,global,reloc=2,class=CODE,delta=1
   106                           	psect	text80,global,reloc=2,class=CODE,delta=1,group=2
   107                           	psect	text81,global,reloc=2,class=CODE,delta=1,group=2
   108                           	psect	text82,global,reloc=2,class=CODE,delta=1
   109                           	psect	text83,global,reloc=2,class=CODE,delta=1
   110                           	psect	text84,global,reloc=2,class=CODE,delta=1
   111                           	psect	text85,global,reloc=2,class=CODE,delta=1
   112                           	psect	text86,global,reloc=2,class=CODE,delta=1
   113                           	psect	text87,global,reloc=2,class=CODE,delta=1
   114                           	psect	text88,global,reloc=2,class=CODE,delta=1
   115                           	psect	text89,global,reloc=2,class=CODE,delta=1
   116                           	psect	text90,global,reloc=2,class=CODE,delta=1
   117                           	psect	text91,global,reloc=2,class=CODE,delta=1
   118                           	psect	text92,global,reloc=2,class=CODE,delta=1
   119                           	psect	text93,global,reloc=2,class=CODE,delta=1
   120                           	psect	text94,global,reloc=2,class=CODE,delta=1
   121                           	psect	text95,global,reloc=2,class=CODE,delta=1
   122                           	psect	text96,global,reloc=2,class=CODE,delta=1
   123                           	psect	text97,global,reloc=2,class=CODE,delta=1
   124                           	psect	text98,global,reloc=2,class=CODE,delta=1
   125                           	psect	text99,global,reloc=2,class=CODE,delta=1
   126                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=2
   127                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=2
   128                           	psect	text102,global,reloc=2,class=CODE,delta=1
   129                           	psect	text103,global,reloc=2,class=CODE,delta=1
   130                           	psect	text104,global,reloc=2,class=CODE,delta=1
   131                           	psect	text105,global,reloc=2,class=CODE,delta=1
   132                           	psect	text106,global,reloc=2,class=CODE,delta=1
   133                           	psect	text107,global,reloc=2,class=CODE,delta=1
   134                           	psect	text108,global,reloc=2,class=CODE,delta=1
   135                           	psect	text109,global,reloc=2,class=CODE,delta=1
   136                           	psect	text110,global,reloc=2,class=CODE,delta=1
   137                           	psect	text111,global,reloc=2,class=CODE,delta=1
   138                           	psect	text112,global,reloc=2,class=CODE,delta=1
   139                           	psect	text113,global,reloc=2,class=CODE,delta=1
   140                           	psect	text114,global,reloc=2,class=CODE,delta=1
   141                           	psect	text115,global,reloc=2,class=CODE,delta=1
   142                           	psect	text116,global,reloc=2,class=CODE,delta=1
   143                           	psect	text117,global,reloc=2,class=CODE,delta=1
   144                           	psect	text118,global,reloc=2,class=CODE,delta=1
   145                           	psect	text119,global,reloc=2,class=CODE,delta=1
   146                           	psect	text120,global,reloc=2,class=CODE,delta=1
   147                           	psect	text121,global,reloc=2,class=CODE,delta=1
   148                           	psect	text122,global,reloc=2,class=CODE,delta=1
   149                           	psect	text123,global,reloc=2,class=CODE,delta=1
   150                           	psect	text124,global,reloc=2,class=CODE,delta=1
   151                           	psect	text125,global,reloc=2,class=CODE,delta=1
   152                           	psect	text126,global,reloc=2,class=CODE,delta=1
   153                           	psect	text127,global,reloc=2,class=CODE,delta=1,group=2
   154                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=2
   155                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=2
   156                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=2
   157                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=2
   158                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=2
   159                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=2
   160                           	psect	text134,global,reloc=2,class=CODE,delta=1
   161                           	psect	text135,global,reloc=2,class=CODE,delta=1
   162                           	psect	text136,global,reloc=2,class=CODE,delta=1
   163                           	psect	text137,global,reloc=2,class=CODE,delta=1
   164                           	psect	text138,global,reloc=2,class=CODE,delta=1
   165                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   166                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   167                           	psect	text140,global,reloc=2,class=CODE,delta=1
   168                           	psect	text141,global,reloc=2,class=CODE,delta=1
   169                           	psect	text142,global,reloc=2,class=CODE,delta=1
   170                           	psect	text143,global,reloc=2,class=CODE,delta=1
   171                           	psect	text144,global,reloc=2,class=CODE,delta=1
   172                           	psect	text145,global,reloc=2,class=CODE,delta=1
   173                           	psect	text146,global,reloc=2,class=CODE,delta=1
   174                           	psect	text147,global,reloc=2,class=CODE,delta=1
   175                           	psect	text148,global,reloc=2,class=CODE,delta=1
   176                           	psect	text149,global,reloc=2,class=CODE,delta=1
   177                           	psect	text150,global,reloc=2,class=CODE,delta=1
   178                           	psect	text151,global,reloc=2,class=CODE,delta=1
   179                           	psect	text152,global,reloc=2,class=CODE,delta=1
   180                           	psect	text153,global,reloc=2,class=CODE,delta=1
   181                           	psect	text154,global,reloc=2,class=CODE,delta=1
   182                           	psect	text155,global,reloc=2,class=CODE,delta=1
   183                           	psect	text156,global,reloc=2,class=CODE,delta=1
   184                           	psect	text157,global,reloc=2,class=CODE,delta=1
   185                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   186                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   187                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   188  0000                     
   189                           ; Version 1.45
   190                           ; Generated 16/11/2017 GMT
   191                           ; 
   192                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   193                           ; All rights reserved.
   194                           ; 
   195                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   196                           ; 
   197                           ; Redistribution and use in source and binary forms, with or without modification, are
   198                           ; permitted provided that the following conditions are met:
   199                           ; 
   200                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   201                           ;        conditions and the following disclaimer.
   202                           ; 
   203                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   204                           ;        of conditions and the following disclaimer in the documentation and/or other
   205                           ;        materials provided with the distribution.
   206                           ; 
   207                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   208                           ;        software without specific prior written permission.
   209                           ; 
   210                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   211                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   212                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   213                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   214                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   215                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   216                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   217                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   218                           ; 
   219                           ; 
   220                           ; Code-generator required, PIC18F4680 Definitions
   221                           ; 
   222                           ; SFR Addresses
   223  0000                     
   224                           	psect	eeprom_data
   225  F00000  00 24 00 32 FF FF FF FF 	db	0,36,0,50,255,255,255,255	;# 
   226  0000                     
   227                           	psect	idataCOMRAM
   228  00967A                     __pidataCOMRAM:
   229                           	opt stack 0
   230                           
   231                           ;initializer for _number_to_display
   232  00967A  FF80               	dw	65408
   233                           
   234                           ;initializer for _PRESCALER
   235  00967C  04                 	db	4
   236                           
   237                           ;initializer for _PPQN
   238  00967D  30                 	db	48
   239                           
   240                           	psect	idataBANK0
   241  009658                     __pidataBANK0:
   242                           	opt stack 0
   243                           
   244                           ;initializer for _NOTE_LENGTH_PULSES
   245  009658  0C                 	db	12
   246                           
   247                           ;initializer for _OCTAVES
   248  009659  03                 	db	3
   249                           
   250                           ;initializer for _which_screen
   251  00965A  02                 	db	2
   252                           
   253                           ;initializer for _iterator_focus
   254  00965B  FF                 	db	255
   255                           
   256                           ;initializer for _ema_integer
   257  00965C  32                 	db	50
   258                           
   259                           ;initializer for _octave
   260  00965D  04                 	db	4
   261                           
   262                           ;initializer for _velocity
   263  00965E  7F                 	db	127
   264                           
   265                           ;initializer for _drumchannel
   266  00965F  09                 	db	9
   267                           
   268                           ;initializer for _BPM
   269  009660  78                 	db	120
   270                           
   271                           	psect	idataBANK1
   272  009454                     __pidataBANK1:
   273                           	opt stack 0
   274                           
   275                           ;initializer for _DRUM_CC
   276  009454  50                 	db	80
   277  009455  51                 	db	81
   278  009456  52                 	db	82
   279  009457  53                 	db	83
   280  009458  55                 	db	85
   281  009459  56                 	db	86
   282  00945A  57                 	db	87
   283  00945B  58                 	db	88
   284                           
   285                           ;initializer for _DRUM_NOTE
   286  00945C  24                 	db	36
   287  00945D  26                 	db	38
   288  00945E  27                 	db	39
   289  00945F  28                 	db	40
   290  009460  2A                 	db	42
   291  009461  2E                 	db	46
   292  009462  31                 	db	49
   293  009463  36                 	db	54
   294                           
   295                           ;initializer for _randx
   296  009464  0001               	dw	1
   297  009466  0000               	dw	0
   298                           
   299                           ;initializer for _HYST_VAL
   300  009468  0010               	dw	16
   301                           
   302                           ;initializer for _command
   303  00946A  80                 	db	128
   304                           
   305                           ;initializer for _string_to_display
   306  00946B  74                 	db	116
   307  00946C  45                 	db	69
   308  00946D  53                 	db	83
   309  00946E  74                 	db	116
   310  00946F  00                 	db	0
   311                           
   312                           ;initializer for _diminished_triad
   313  009470  00                 	db	0
   314  009471  03                 	db	3
   315  009472  06                 	db	6
   316                           
   317                           ;initializer for _augmented_triad
   318  009473  00                 	db	0
   319  009474  04                 	db	4
   320  009475  08                 	db	8
   321                           
   322                           ;initializer for _minor_triad
   323  009476  00                 	db	0
   324  009477  03                 	db	3
   325  009478  07                 	db	7
   326                           
   327                           ;initializer for _major_triad
   328  009479  00                 	db	0
   329  00947A  04                 	db	4
   330  00947B  07                 	db	7
   331                           
   332                           	psect	idataBANK2
   333  008E38                     __pidataBANK2:
   334                           	opt stack 0
   335                           
   336                           ;initializer for _inputPotsArray
   337  008E38  00                 	db	0
   338  008E39  46                 	db	70
   339  008E3A  10                 	db	16
   340  008E3B  00                 	db	0
   341  008E3C  47                 	db	71
   342  008E3D  11                 	db	17
   343  008E3E  00                 	db	0
   344  008E3F  48                 	db	72
   345  008E40  12                 	db	18
   346  008E41  00                 	db	0
   347  008E42  49                 	db	73
   348  008E43  13                 	db	19
   349  008E44  00                 	db	0
   350  008E45  4A                 	db	74
   351  008E46  14                 	db	20
   352  008E47  00                 	db	0
   353  008E48  4B                 	db	75
   354  008E49  15                 	db	21
   355  008E4A  00                 	db	0
   356  008E4B  4C                 	db	76
   357  008E4C  16                 	db	22
   358  008E4D  00                 	db	0
   359  008E4E  66                 	db	102
   360  008E4F  17                 	db	23
   361  008E50  00                 	db	0
   362  008E51  67                 	db	103
   363  008E52  18                 	db	24
   364  008E53  00                 	db	0
   365  008E54  68                 	db	104
   366  008E55  19                 	db	25
   367  008E56  00                 	db	0
   368  008E57  6A                 	db	106
   369  008E58  1A                 	db	26
   370  008E59  00                 	db	0
   371  008E5A  6B                 	db	107
   372  008E5B  1B                 	db	27
   373  008E5C  00                 	db	0
   374  008E5D  6C                 	db	108
   375  008E5E  1C                 	db	28
   376  008E5F  00                 	db	0
   377  008E60  6D                 	db	109
   378  008E61  1D                 	db	29
   379  008E62  00                 	db	0
   380  008E63  FD                 	db	253
   381  008E64  FD                 	db	253
   382  008E65  00                 	db	0
   383  008E66  FE                 	db	254
   384  008E67  FE                 	db	254
   385                           
   386                           ;initializer for _NOTE_LENGTH_PULSES_ARRAY
   387  008E68  30                 	db	48
   388  008E69  48                 	db	72
   389  008E6A  20                 	db	32
   390  008E6B  18                 	db	24
   391  008E6C  24                 	db	36
   392  008E6D  10                 	db	16
   393  008E6E  0C                 	db	12
   394  008E6F  12                 	db	18
   395  008E70  08                 	db	8
   396  008E71  06                 	db	6
   397  008E72  09                 	db	9
   398  008E73  04                 	db	4
   399                           
   400                           ;initializer for _diminished_7th
   401  008E74  00                 	db	0
   402  008E75  03                 	db	3
   403  008E76  06                 	db	6
   404  008E77  09                 	db	9
   405                           
   406                           ;initializer for _half_diminished_7th
   407  008E78  00                 	db	0
   408  008E79  03                 	db	3
   409  008E7A  06                 	db	6
   410  008E7B  0A                 	db	10
   411                           
   412                           ;initializer for _minor_7th
   413  008E7C  00                 	db	0
   414  008E7D  03                 	db	3
   415  008E7E  07                 	db	7
   416  008E7F  0A                 	db	10
   417                           
   418                           ;initializer for _major_7th
   419  008E80  00                 	db	0
   420  008E81  04                 	db	4
   421  008E82  07                 	db	7
   422  008E83  0B                 	db	11
   423                           
   424                           ;initializer for _dominant_7th
   425  008E84  00                 	db	0
   426  008E85  04                 	db	4
   427  008E86  07                 	db	7
   428  008E87  0A                 	db	10
   429                           
   430                           	psect	idataBANK3
   431  00874E                     __pidataBANK3:
   432                           	opt stack 0
   433                           
   434                           ;initializer for _menuArray
   435  00874E  08                 	db	8
   436  00874F  00                 	db	0
   437  008750  00                 	db	0
   438  008751  0C                 	db	12
   439  008752  00                 	db	0
   440  008753  00                 	db	0
   441  008754  07                 	db	7
   442  008755  00                 	db	0
   443  008756  00                 	db	0
   444  008757  04                 	db	4
   445  008758  00                 	db	0
   446  008759  00                 	db	0
   447  00875A  05                 	db	5
   448  00875B  00                 	db	0
   449  00875C  00                 	db	0
   450  00875D  02                 	db	2
   451  00875E  00                 	db	0
   452  00875F  00                 	db	0
   453  008760  05                 	db	5
   454  008761  00                 	db	0
   455  008762  00                 	db	0
   456  008763  02                 	db	2
   457  008764  00                 	db	0
   458  008765  00                 	db	0
   459  008766  08                 	db	8
   460  008767  00                 	db	0
   461  008768  00                 	db	0
   462  008769  08                 	db	8
   463  00876A  00                 	db	0
   464  00876B  00                 	db	0
   465  00876C  05                 	db	5
   466  00876D  00                 	db	0
   467  00876E  00                 	db	0
   468  00876F  02                 	db	2
   469  008770  00                 	db	0
   470  008771  00                 	db	0
   471  008772  07                 	db	7
   472  008773  00                 	db	0
   473  008774  00                 	db	0
   474  008775  07                 	db	7
   475  008776  00                 	db	0
   476  008777  00                 	db	0
   477  008778  02                 	db	2
   478  008779  00                 	db	0
   479  00877A  00                 	db	0
   480  00877B  02                 	db	2
   481  00877C  00                 	db	0
   482  00877D  00                 	db	0
   483  00877E  05                 	db	5
   484  00877F  00                 	db	0
   485  008780  00                 	db	0
   486  008781  05                 	db	5
   487  008782  00                 	db	0
   488  008783  00                 	db	0
   489  008784  02                 	db	2
   490  008785  00                 	db	0
   491  008786  00                 	db	0
   492  008787  09                 	db	9
   493  008788  00                 	db	0
   494  008789  00                 	db	0
   495  00878A  02                 	db	2
   496  00878B  00                 	db	0
   497  00878C  00                 	db	0
   498  00878D  07                 	db	7
   499  00878E  00                 	db	0
   500  00878F  00                 	db	0
   501  008790  0C                 	db	12
   502  008791  00                 	db	0
   503  008792  00                 	db	0
   504  008793  02                 	db	2
   505  008794  00                 	db	0
   506  008795  00                 	db	0
   507  008796  01                 	db	1
   508  008797  00                 	db	0
   509  008798  00                 	db	0
   510  008799  01                 	db	1
   511  00879A  00                 	db	0
   512  00879B  00                 	db	0
   513  00879C  01                 	db	1
   514  00879D  00                 	db	0
   515  00879E  00                 	db	0
   516  00879F  02                 	db	2
   517  0087A0  00                 	db	0
   518  0087A1  00                 	db	0
   519  0087A2  01                 	db	1
   520  0087A3  00                 	db	0
   521  0087A4  00                 	db	0
   522  0087A5  01                 	db	1
   523  0087A6  00                 	db	0
   524  0087A7  00                 	db	0
   525  0087A8  04                 	db	4
   526  0087A9  00                 	db	0
   527  0087AA  00                 	db	0
   528  0087AB  01                 	db	1
   529  0087AC  00                 	db	0
   530  0087AD  00                 	db	0
   531  0087AE  01                 	db	1
   532  0087AF  00                 	db	0
   533  0087B0  00                 	db	0
   534  0087B1  01                 	db	1
   535  0087B2  00                 	db	0
   536  0087B3  00                 	db	0
   537  0087B4  01                 	db	1
   538  0087B5  00                 	db	0
   539  0087B6  00                 	db	0
   540                           
   541                           	psect	mediumconst
   542  00E8C2                     __pmediumconst:
   543                           	opt stack 0
   544  00E8C2  00                 	db	0
   545  00E8C3  4B                 	db	75
   546  00E8C4  45                 	db	69
   547  00E8C5  59                 	db	89
   548  00E8C6  42                 	db	66
   549  00E8C7  4F                 	db	79
   550  00E8C8  41                 	db	65
   551  00E8C9  52                 	db	82
   552  00E8CA  44                 	db	68
   553  00E8CB  20                 	db	32
   554  00E8CC  4D                 	db	77
   555  00E8CD  4F                 	db	79
   556  00E8CE  44                 	db	68
   557  00E8CF  45                 	db	69
   558  00E8D0  3A                 	db	58
   559  00E8D1  00                 	db	0
   560  00E8D2  00                 	db	0
   561  00E8D3  00                 	db	0
   562  00E8D4  41                 	db	65
   563  00E8D5  52                 	db	82
   564  00E8D6  50                 	db	80
   565  00E8D7  45                 	db	69
   566  00E8D8  47                 	db	71
   567  00E8D9  47                 	db	71
   568  00E8DA  49                 	db	73
   569  00E8DB  4F                 	db	79
   570  00E8DC  20                 	db	32
   571  00E8DD  4D                 	db	77
   572  00E8DE  45                 	db	69
   573  00E8DF  4E                 	db	78
   574  00E8E0  55                 	db	85
   575  00E8E1  3A                 	db	58
   576  00E8E2  00                 	db	0
   577  00E8E3  00                 	db	0
   578  00E8E4  00                 	db	0
   579  00E8E5  54                 	db	84
   580  00E8E6  52                 	db	82
   581  00E8E7  41                 	db	65
   582  00E8E8  4E                 	db	78
   583  00E8E9  53                 	db	83
   584  00E8EA  50                 	db	80
   585  00E8EB  4F                 	db	79
   586  00E8EC  53                 	db	83
   587  00E8ED  45                 	db	69
   588  00E8EE  20                 	db	32
   589  00E8EF  4D                 	db	77
   590  00E8F0  4F                 	db	79
   591  00E8F1  44                 	db	68
   592  00E8F2  45                 	db	69
   593  00E8F3  3A                 	db	58
   594  00E8F4  00                 	db	0
   595  00E8F5  00                 	db	0
   596  00E8F6  44                 	db	68
   597  00E8F7  52                 	db	82
   598  00E8F8  55                 	db	85
   599  00E8F9  4D                 	db	77
   600  00E8FA  20                 	db	32
   601  00E8FB  4D                 	db	77
   602  00E8FC  4F                 	db	79
   603  00E8FD  44                 	db	68
   604  00E8FE  45                 	db	69
   605  00E8FF  3A                 	db	58
   606  00E900  00                 	db	0
   607  00E901  00                 	db	0
   608  00E902  00                 	db	0
   609  00E903  00                 	db	0
   610  00E904  00                 	db	0
   611  00E905  00                 	db	0
   612  00E906  00                 	db	0
   613  00E907  50                 	db	80
   614  00E908  4F                 	db	79
   615  00E909  54                 	db	84
   616  00E90A  53                 	db	83
   617  00E90B  20                 	db	32
   618  00E90C  4D                 	db	77
   619  00E90D  4F                 	db	79
   620  00E90E  44                 	db	68
   621  00E90F  45                 	db	69
   622  00E910  3A                 	db	58
   623  00E911  00                 	db	0
   624  00E912  00                 	db	0
   625  00E913  00                 	db	0
   626  00E914  00                 	db	0
   627  00E915  00                 	db	0
   628  00E916  00                 	db	0
   629  00E917  00                 	db	0
   630  00E918  4D                 	db	77
   631  00E919  49                 	db	73
   632  00E91A  44                 	db	68
   633  00E91B  49                 	db	73
   634  00E91C  20                 	db	32
   635  00E91D  43                 	db	67
   636  00E91E  48                 	db	72
   637  00E91F  41                 	db	65
   638  00E920  4E                 	db	78
   639  00E921  4E                 	db	78
   640  00E922  45                 	db	69
   641  00E923  4C                 	db	76
   642  00E924  53                 	db	83
   643  00E925  3A                 	db	58
   644  00E926  00                 	db	0
   645  00E927  00                 	db	0
   646  00E928  00                 	db	0
   647  00E929  50                 	db	80
   648  00E92A  52                 	db	82
   649  00E92B  4F                 	db	79
   650  00E92C  47                 	db	71
   651  00E92D  52                 	db	82
   652  00E92E  41                 	db	65
   653  00E92F  4D                 	db	77
   654  00E930  20                 	db	32
   655  00E931  43                 	db	67
   656  00E932  48                 	db	72
   657  00E933  41                 	db	65
   658  00E934  4E                 	db	78
   659  00E935  47                 	db	71
   660  00E936  45                 	db	69
   661  00E937  3A                 	db	58
   662  00E938  00                 	db	0
   663  00E939  00                 	db	0
   664  00E93A  45                 	db	69
   665  00E93B  45                 	db	69
   666  00E93C  50                 	db	80
   667  00E93D  52                 	db	82
   668  00E93E  4F                 	db	79
   669  00E93F  4D                 	db	77
   670  00E940  20                 	db	32
   671  00E941  4D                 	db	77
   672  00E942  45                 	db	69
   673  00E943  4E                 	db	78
   674  00E944  55                 	db	85
   675  00E945  3A                 	db	58
   676  00E946  00                 	db	0
   677  00E947  00                 	db	0
   678  00E948  00                 	db	0
   679  00E949  00                 	db	0
   680  00E94A  00                 	db	0
   681  00E94B  43                 	db	67
   682  00E94C  48                 	db	72
   683  00E94D  52                 	db	82
   684  00E94E  4F                 	db	79
   685  00E94F  4D                 	db	77
   686  00E950  41                 	db	65
   687  00E951  54                 	db	84
   688  00E952  49                 	db	73
   689  00E953  43                 	db	67
   690  00E954  00                 	db	0
   691  00E955  00                 	db	0
   692  00E956  00                 	db	0
   693  00E957  00                 	db	0
   694  00E958  00                 	db	0
   695  00E959  00                 	db	0
   696  00E95A  00                 	db	0
   697  00E95B  00                 	db	0
   698  00E95C  4D                 	db	77
   699  00E95D  41                 	db	65
   700  00E95E  4A                 	db	74
   701  00E95F  4F                 	db	79
   702  00E960  52                 	db	82
   703  00E961  00                 	db	0
   704  00E962  00                 	db	0
   705  00E963  00                 	db	0
   706  00E964  00                 	db	0
   707  00E965  00                 	db	0
   708  00E966  00                 	db	0
   709  00E967  00                 	db	0
   710  00E968  00                 	db	0
   711  00E969  00                 	db	0
   712  00E96A  00                 	db	0
   713  00E96B  00                 	db	0
   714  00E96C  00                 	db	0
   715  00E96D  4D                 	db	77
   716  00E96E  49                 	db	73
   717  00E96F  4E                 	db	78
   718  00E970  4F                 	db	79
   719  00E971  52                 	db	82
   720  00E972  00                 	db	0
   721  00E973  00                 	db	0
   722  00E974  00                 	db	0
   723  00E975  00                 	db	0
   724  00E976  00                 	db	0
   725  00E977  00                 	db	0
   726  00E978  00                 	db	0
   727  00E979  00                 	db	0
   728  00E97A  00                 	db	0
   729  00E97B  00                 	db	0
   730  00E97C  00                 	db	0
   731  00E97D  00                 	db	0
   732  00E97E  4D                 	db	77
   733  00E97F  4F                 	db	79
   734  00E980  44                 	db	68
   735  00E981  45                 	db	69
   736  00E982  53                 	db	83
   737  00E983  00                 	db	0
   738  00E984  00                 	db	0
   739  00E985  00                 	db	0
   740  00E986  00                 	db	0
   741  00E987  00                 	db	0
   742  00E988  00                 	db	0
   743  00E989  00                 	db	0
   744  00E98A  00                 	db	0
   745  00E98B  00                 	db	0
   746  00E98C  00                 	db	0
   747  00E98D  00                 	db	0
   748  00E98E  00                 	db	0
   749  00E98F  50                 	db	80
   750  00E990  45                 	db	69
   751  00E991  4E                 	db	78
   752  00E992  54                 	db	84
   753  00E993  41                 	db	65
   754  00E994  54                 	db	84
   755  00E995  4F                 	db	79
   756  00E996  4E                 	db	78
   757  00E997  49                 	db	73
   758  00E998  43                 	db	67
   759  00E999  20                 	db	32
   760  00E99A  4D                 	db	77
   761  00E99B  41                 	db	65
   762  00E99C  4A                 	db	74
   763  00E99D  4F                 	db	79
   764  00E99E  52                 	db	82
   765  00E99F  00                 	db	0
   766  00E9A0  50                 	db	80
   767  00E9A1  45                 	db	69
   768  00E9A2  4E                 	db	78
   769  00E9A3  54                 	db	84
   770  00E9A4  41                 	db	65
   771  00E9A5  54                 	db	84
   772  00E9A6  4F                 	db	79
   773  00E9A7  4E                 	db	78
   774  00E9A8  49                 	db	73
   775  00E9A9  43                 	db	67
   776  00E9AA  20                 	db	32
   777  00E9AB  4D                 	db	77
   778  00E9AC  49                 	db	73
   779  00E9AD  4E                 	db	78
   780  00E9AE  4F                 	db	79
   781  00E9AF  52                 	db	82
   782  00E9B0  00                 	db	0
   783  00E9B1  54                 	db	84
   784  00E9B2  52                 	db	82
   785  00E9B3  49                 	db	73
   786  00E9B4  41                 	db	65
   787  00E9B5  44                 	db	68
   788  00E9B6  00                 	db	0
   789  00E9B7  00                 	db	0
   790  00E9B8  00                 	db	0
   791  00E9B9  00                 	db	0
   792  00E9BA  00                 	db	0
   793  00E9BB  00                 	db	0
   794  00E9BC  00                 	db	0
   795  00E9BD  00                 	db	0
   796  00E9BE  00                 	db	0
   797  00E9BF  00                 	db	0
   798  00E9C0  00                 	db	0
   799  00E9C1  00                 	db	0
   800  00E9C2  44                 	db	68
   801  00E9C3  49                 	db	73
   802  00E9C4  41                 	db	65
   803  00E9C5  54                 	db	84
   804  00E9C6  4F                 	db	79
   805  00E9C7  4E                 	db	78
   806  00E9C8  49                 	db	73
   807  00E9C9  43                 	db	67
   808  00E9CA  20                 	db	32
   809  00E9CB  54                 	db	84
   810  00E9CC  20                 	db	32
   811  00E9CD  4D                 	db	77
   812  00E9CE  41                 	db	65
   813  00E9CF  4A                 	db	74
   814  00E9D0  4F                 	db	79
   815  00E9D1  52                 	db	82
   816  00E9D2  00                 	db	0
   817  00E9D3  44                 	db	68
   818  00E9D4  49                 	db	73
   819  00E9D5  41                 	db	65
   820  00E9D6  54                 	db	84
   821  00E9D7  4F                 	db	79
   822  00E9D8  4E                 	db	78
   823  00E9D9  49                 	db	73
   824  00E9DA  43                 	db	67
   825  00E9DB  20                 	db	32
   826  00E9DC  54                 	db	84
   827  00E9DD  20                 	db	32
   828  00E9DE  4D                 	db	77
   829  00E9DF  49                 	db	73
   830  00E9E0  4E                 	db	78
   831  00E9E1  4F                 	db	79
   832  00E9E2  52                 	db	82
   833  00E9E3  00                 	db	0
   834  00E9E4  53                 	db	83
   835  00E9E5  45                 	db	69
   836  00E9E6  56                 	db	86
   837  00E9E7  45                 	db	69
   838  00E9E8  4E                 	db	78
   839  00E9E9  54                 	db	84
   840  00E9EA  48                 	db	72
   841  00E9EB  00                 	db	0
   842  00E9EC  00                 	db	0
   843  00E9ED  00                 	db	0
   844  00E9EE  00                 	db	0
   845  00E9EF  00                 	db	0
   846  00E9F0  00                 	db	0
   847  00E9F1  00                 	db	0
   848  00E9F2  00                 	db	0
   849  00E9F3  00                 	db	0
   850  00E9F4  00                 	db	0
   851  00E9F5  44                 	db	68
   852  00E9F6  49                 	db	73
   853  00E9F7  41                 	db	65
   854  00E9F8  54                 	db	84
   855  00E9F9  4F                 	db	79
   856  00E9FA  4E                 	db	78
   857  00E9FB  49                 	db	73
   858  00E9FC  43                 	db	67
   859  00E9FD  20                 	db	32
   860  00E9FE  37                 	db	55
   861  00E9FF  20                 	db	32
   862  00EA00  4D                 	db	77
   863  00EA01  41                 	db	65
   864  00EA02  4A                 	db	74
   865  00EA03  4F                 	db	79
   866  00EA04  52                 	db	82
   867  00EA05  00                 	db	0
   868  00EA06  44                 	db	68
   869  00EA07  49                 	db	73
   870  00EA08  41                 	db	65
   871  00EA09  54                 	db	84
   872  00EA0A  4F                 	db	79
   873  00EA0B  4E                 	db	78
   874  00EA0C  49                 	db	73
   875  00EA0D  43                 	db	67
   876  00EA0E  20                 	db	32
   877  00EA0F  37                 	db	55
   878  00EA10  20                 	db	32
   879  00EA11  4D                 	db	77
   880  00EA12  49                 	db	73
   881  00EA13  4E                 	db	78
   882  00EA14  4F                 	db	79
   883  00EA15  52                 	db	82
   884  00EA16  00                 	db	0
   885  00EA17  69                 	db	105
   886  00EA18  6F                 	db	111
   887  00EA19  6E                 	db	110
   888  00EA1A  69                 	db	105
   889  00EA1B  61                 	db	97
   890  00EA1C  6E                 	db	110
   891  00EA1D  00                 	db	0
   892  00EA1E  00                 	db	0
   893  00EA1F  00                 	db	0
   894  00EA20  00                 	db	0
   895  00EA21  00                 	db	0
   896  00EA22  00                 	db	0
   897  00EA23  00                 	db	0
   898  00EA24  00                 	db	0
   899  00EA25  00                 	db	0
   900  00EA26  00                 	db	0
   901  00EA27  00                 	db	0
   902  00EA28  64                 	db	100
   903  00EA29  6F                 	db	111
   904  00EA2A  72                 	db	114
   905  00EA2B  69                 	db	105
   906  00EA2C  61                 	db	97
   907  00EA2D  6E                 	db	110
   908  00EA2E  00                 	db	0
   909  00EA2F  00                 	db	0
   910  00EA30  00                 	db	0
   911  00EA31  00                 	db	0
   912  00EA32  00                 	db	0
   913  00EA33  00                 	db	0
   914  00EA34  00                 	db	0
   915  00EA35  00                 	db	0
   916  00EA36  00                 	db	0
   917  00EA37  00                 	db	0
   918  00EA38  00                 	db	0
   919  00EA39  70                 	db	112
   920  00EA3A  68                 	db	104
   921  00EA3B  72                 	db	114
   922  00EA3C  79                 	db	121
   923  00EA3D  67                 	db	103
   924  00EA3E  69                 	db	105
   925  00EA3F  61                 	db	97
   926  00EA40  6E                 	db	110
   927  00EA41  00                 	db	0
   928  00EA42  00                 	db	0
   929  00EA43  00                 	db	0
   930  00EA44  00                 	db	0
   931  00EA45  00                 	db	0
   932  00EA46  00                 	db	0
   933  00EA47  00                 	db	0
   934  00EA48  00                 	db	0
   935  00EA49  00                 	db	0
   936  00EA4A  6C                 	db	108
   937  00EA4B  79                 	db	121
   938  00EA4C  64                 	db	100
   939  00EA4D  69                 	db	105
   940  00EA4E  61                 	db	97
   941  00EA4F  6E                 	db	110
   942  00EA50  00                 	db	0
   943  00EA51  00                 	db	0
   944  00EA52  00                 	db	0
   945  00EA53  00                 	db	0
   946  00EA54  00                 	db	0
   947  00EA55  00                 	db	0
   948  00EA56  00                 	db	0
   949  00EA57  00                 	db	0
   950  00EA58  00                 	db	0
   951  00EA59  00                 	db	0
   952  00EA5A  00                 	db	0
   953  00EA5B  6D                 	db	109
   954  00EA5C  69                 	db	105
   955  00EA5D  78                 	db	120
   956  00EA5E  6F                 	db	111
   957  00EA5F  6C                 	db	108
   958  00EA60  79                 	db	121
   959  00EA61  64                 	db	100
   960  00EA62  69                 	db	105
   961  00EA63  61                 	db	97
   962  00EA64  6E                 	db	110
   963  00EA65  00                 	db	0
   964  00EA66  00                 	db	0
   965  00EA67  00                 	db	0
   966  00EA68  00                 	db	0
   967  00EA69  00                 	db	0
   968  00EA6A  00                 	db	0
   969  00EA6B  00                 	db	0
   970  00EA6C  61                 	db	97
   971  00EA6D  65                 	db	101
   972  00EA6E  6F                 	db	111
   973  00EA6F  6C                 	db	108
   974  00EA70  69                 	db	105
   975  00EA71  61                 	db	97
   976  00EA72  6E                 	db	110
   977  00EA73  00                 	db	0
   978  00EA74  00                 	db	0
   979  00EA75  00                 	db	0
   980  00EA76  00                 	db	0
   981  00EA77  00                 	db	0
   982  00EA78  00                 	db	0
   983  00EA79  00                 	db	0
   984  00EA7A  00                 	db	0
   985  00EA7B  00                 	db	0
   986  00EA7C  00                 	db	0
   987  00EA7D  6C                 	db	108
   988  00EA7E  6F                 	db	111
   989  00EA7F  63                 	db	99
   990  00EA80  72                 	db	114
   991  00EA81  69                 	db	105
   992  00EA82  61                 	db	97
   993  00EA83  6E                 	db	110
   994  00EA84  00                 	db	0
   995  00EA85  00                 	db	0
   996  00EA86  00                 	db	0
   997  00EA87  00                 	db	0
   998  00EA88  00                 	db	0
   999  00EA89  00                 	db	0
  1000  00EA8A  00                 	db	0
  1001  00EA8B  00                 	db	0
  1002  00EA8C  00                 	db	0
  1003  00EA8D  00                 	db	0
  1004  00EA8E  6D                 	db	109
  1005  00EA8F  61                 	db	97
  1006  00EA90  6A                 	db	106
  1007  00EA91  6F                 	db	111
  1008  00EA92  72                 	db	114
  1009  00EA93  20                 	db	32
  1010  00EA94  74                 	db	116
  1011  00EA95  72                 	db	114
  1012  00EA96  69                 	db	105
  1013  00EA97  61                 	db	97
  1014  00EA98  64                 	db	100
  1015  00EA99  00                 	db	0
  1016  00EA9A  00                 	db	0
  1017  00EA9B  00                 	db	0
  1018  00EA9C  00                 	db	0
  1019  00EA9D  00                 	db	0
  1020  00EA9E  00                 	db	0
  1021  00EA9F  6D                 	db	109
  1022  00EAA0  69                 	db	105
  1023  00EAA1  6E                 	db	110
  1024  00EAA2  6F                 	db	111
  1025  00EAA3  72                 	db	114
  1026  00EAA4  20                 	db	32
  1027  00EAA5  74                 	db	116
  1028  00EAA6  72                 	db	114
  1029  00EAA7  69                 	db	105
  1030  00EAA8  61                 	db	97
  1031  00EAA9  64                 	db	100
  1032  00EAAA  00                 	db	0
  1033  00EAAB  00                 	db	0
  1034  00EAAC  00                 	db	0
  1035  00EAAD  00                 	db	0
  1036  00EAAE  00                 	db	0
  1037  00EAAF  00                 	db	0
  1038  00EAB0  61                 	db	97
  1039  00EAB1  75                 	db	117
  1040  00EAB2  67                 	db	103
  1041  00EAB3  6D                 	db	109
  1042  00EAB4  65                 	db	101
  1043  00EAB5  6E                 	db	110
  1044  00EAB6  74                 	db	116
  1045  00EAB7  65                 	db	101
  1046  00EAB8  64                 	db	100
  1047  00EAB9  20                 	db	32
  1048  00EABA  74                 	db	116
  1049  00EABB  72                 	db	114
  1050  00EABC  69                 	db	105
  1051  00EABD  61                 	db	97
  1052  00EABE  64                 	db	100
  1053  00EABF  00                 	db	0
  1054  00EAC0  00                 	db	0
  1055  00EAC1  64                 	db	100
  1056  00EAC2  69                 	db	105
  1057  00EAC3  6D                 	db	109
  1058  00EAC4  69                 	db	105
  1059  00EAC5  6E                 	db	110
  1060  00EAC6  69                 	db	105
  1061  00EAC7  73                 	db	115
  1062  00EAC8  68                 	db	104
  1063  00EAC9  65                 	db	101
  1064  00EACA  64                 	db	100
  1065  00EACB  20                 	db	32
  1066  00EACC  74                 	db	116
  1067  00EACD  72                 	db	114
  1068  00EACE  69                 	db	105
  1069  00EACF  61                 	db	97
  1070  00EAD0  64                 	db	100
  1071  00EAD1  00                 	db	0
  1072  00EAD2  64                 	db	100
  1073  00EAD3  6F                 	db	111
  1074  00EAD4  6D                 	db	109
  1075  00EAD5  69                 	db	105
  1076  00EAD6  6E                 	db	110
  1077  00EAD7  61                 	db	97
  1078  00EAD8  6E                 	db	110
  1079  00EAD9  74                 	db	116
  1080  00EADA  20                 	db	32
  1081  00EADB  37                 	db	55
  1082  00EADC  74                 	db	116
  1083  00EADD  68                 	db	104
  1084  00EADE  00                 	db	0
  1085  00EADF  00                 	db	0
  1086  00EAE0  00                 	db	0
  1087  00EAE1  00                 	db	0
  1088  00EAE2  00                 	db	0
  1089  00EAE3  6D                 	db	109
  1090  00EAE4  61                 	db	97
  1091  00EAE5  6A                 	db	106
  1092  00EAE6  6F                 	db	111
  1093  00EAE7  72                 	db	114
  1094  00EAE8  20                 	db	32
  1095  00EAE9  37                 	db	55
  1096  00EAEA  74                 	db	116
  1097  00EAEB  68                 	db	104
  1098  00EAEC  00                 	db	0
  1099  00EAED  00                 	db	0
  1100  00EAEE  00                 	db	0
  1101  00EAEF  00                 	db	0
  1102  00EAF0  00                 	db	0
  1103  00EAF1  00                 	db	0
  1104  00EAF2  00                 	db	0
  1105  00EAF3  00                 	db	0
  1106  00EAF4  6D                 	db	109
  1107  00EAF5  69                 	db	105
  1108  00EAF6  6E                 	db	110
  1109  00EAF7  6F                 	db	111
  1110  00EAF8  72                 	db	114
  1111  00EAF9  20                 	db	32
  1112  00EAFA  37                 	db	55
  1113  00EAFB  74                 	db	116
  1114  00EAFC  68                 	db	104
  1115  00EAFD  00                 	db	0
  1116  00EAFE  00                 	db	0
  1117  00EAFF  00                 	db	0
  1118  00EB00  00                 	db	0
  1119  00EB01  00                 	db	0
  1120  00EB02  00                 	db	0
  1121  00EB03  00                 	db	0
  1122  00EB04  00                 	db	0
  1123  00EB05  68                 	db	104
  1124  00EB06  61                 	db	97
  1125  00EB07  6C                 	db	108
  1126  00EB08  66                 	db	102
  1127  00EB09  20                 	db	32
  1128  00EB0A  64                 	db	100
  1129  00EB0B  69                 	db	105
  1130  00EB0C  6D                 	db	109
  1131  00EB0D  69                 	db	105
  1132  00EB0E  6E                 	db	110
  1133  00EB0F  69                 	db	105
  1134  00EB10  73                 	db	115
  1135  00EB11  68                 	db	104
  1136  00EB12  65                 	db	101
  1137  00EB13  64                 	db	100
  1138  00EB14  00                 	db	0
  1139  00EB15  00                 	db	0
  1140  00EB16  64                 	db	100
  1141  00EB17  69                 	db	105
  1142  00EB18  6D                 	db	109
  1143  00EB19  69                 	db	105
  1144  00EB1A  6E                 	db	110
  1145  00EB1B  69                 	db	105
  1146  00EB1C  73                 	db	115
  1147  00EB1D  68                 	db	104
  1148  00EB1E  65                 	db	101
  1149  00EB1F  64                 	db	100
  1150  00EB20  20                 	db	32
  1151  00EB21  37                 	db	55
  1152  00EB22  74                 	db	116
  1153  00EB23  68                 	db	104
  1154  00EB24  00                 	db	0
  1155  00EB25  00                 	db	0
  1156  00EB26  00                 	db	0
  1157  00EB27  48                 	db	72
  1158  00EB28  41                 	db	65
  1159  00EB29  4C                 	db	76
  1160  00EB2A  46                 	db	70
  1161  00EB2B  20                 	db	32
  1162  00EB2C  53                 	db	83
  1163  00EB2D  54                 	db	84
  1164  00EB2E  45                 	db	69
  1165  00EB2F  50                 	db	80
  1166  00EB30  00                 	db	0
  1167  00EB31  00                 	db	0
  1168  00EB32  00                 	db	0
  1169  00EB33  00                 	db	0
  1170  00EB34  00                 	db	0
  1171  00EB35  00                 	db	0
  1172  00EB36  00                 	db	0
  1173  00EB37  00                 	db	0
  1174  00EB38  43                 	db	67
  1175  00EB39  49                 	db	73
  1176  00EB3A  52                 	db	82
  1177  00EB3B  43                 	db	67
  1178  00EB3C  4C                 	db	76
  1179  00EB3D  45                 	db	69
  1180  00EB3E  20                 	db	32
  1181  00EB3F  4F                 	db	79
  1182  00EB40  46                 	db	70
  1183  00EB41  20                 	db	32
  1184  00EB42  46                 	db	70
  1185  00EB43  49                 	db	73
  1186  00EB44  46                 	db	70
  1187  00EB45  54                 	db	84
  1188  00EB46  48                 	db	72
  1189  00EB47  53                 	db	83
  1190  00EB48  00                 	db	0
  1191  00EB49  44                 	db	68
  1192  00EB4A  52                 	db	82
  1193  00EB4B  55                 	db	85
  1194  00EB4C  4D                 	db	77
  1195  00EB4D  20                 	db	32
  1196  00EB4E  49                 	db	73
  1197  00EB4F  53                 	db	83
  1198  00EB50  20                 	db	32
  1199  00EB51  4E                 	db	78
  1200  00EB52  4F                 	db	79
  1201  00EB53  54                 	db	84
  1202  00EB54  45                 	db	69
  1203  00EB55  20                 	db	32
  1204  00EB56  4F                 	db	79
  1205  00EB57  4E                 	db	78
  1206  00EB58  00                 	db	0
  1207  00EB59  00                 	db	0
  1208  00EB5A  44                 	db	68
  1209  00EB5B  52                 	db	82
  1210  00EB5C  55                 	db	85
  1211  00EB5D  4D                 	db	77
  1212  00EB5E  20                 	db	32
  1213  00EB5F  49                 	db	73
  1214  00EB60  53                 	db	83
  1215  00EB61  20                 	db	32
  1216  00EB62  43                 	db	67
  1217  00EB63  43                 	db	67
  1218  00EB64  00                 	db	0
  1219  00EB65  00                 	db	0
  1220  00EB66  00                 	db	0
  1221  00EB67  00                 	db	0
  1222  00EB68  00                 	db	0
  1223  00EB69  00                 	db	0
  1224  00EB6A  00                 	db	0
  1225  00EB6B  44                 	db	68
  1226  00EB6C  52                 	db	82
  1227  00EB6D  55                 	db	85
  1228  00EB6E  4D                 	db	77
  1229  00EB6F  20                 	db	32
  1230  00EB70  43                 	db	67
  1231  00EB71  43                 	db	67
  1232  00EB72  20                 	db	32
  1233  00EB73  54                 	db	84
  1234  00EB74  59                 	db	89
  1235  00EB75  50                 	db	80
  1236  00EB76  45                 	db	69
  1237  00EB77  00                 	db	0
  1238  00EB78  00                 	db	0
  1239  00EB79  00                 	db	0
  1240  00EB7A  00                 	db	0
  1241  00EB7B  00                 	db	0
  1242  00EB7C  44                 	db	68
  1243  00EB7D  52                 	db	82
  1244  00EB7E  55                 	db	85
  1245  00EB7F  4D                 	db	77
  1246  00EB80  20                 	db	32
  1247  00EB81  53                 	db	83
  1248  00EB82  45                 	db	69
  1249  00EB83  54                 	db	84
  1250  00EB84  20                 	db	32
  1251  00EB85  4E                 	db	78
  1252  00EB86  4E                 	db	78
  1253  00EB87  23                 	db	35
  1254  00EB88  00                 	db	0
  1255  00EB89  00                 	db	0
  1256  00EB8A  00                 	db	0
  1257  00EB8B  00                 	db	0
  1258  00EB8C  00                 	db	0
  1259  00EB8D  44                 	db	68
  1260  00EB8E  52                 	db	82
  1261  00EB8F  55                 	db	85
  1262  00EB90  4D                 	db	77
  1263  00EB91  20                 	db	32
  1264  00EB92  53                 	db	83
  1265  00EB93  45                 	db	69
  1266  00EB94  54                 	db	84
  1267  00EB95  20                 	db	32
  1268  00EB96  43                 	db	67
  1269  00EB97  43                 	db	67
  1270  00EB98  23                 	db	35
  1271  00EB99  00                 	db	0
  1272  00EB9A  00                 	db	0
  1273  00EB9B  00                 	db	0
  1274  00EB9C  00                 	db	0
  1275  00EB9D  00                 	db	0
  1276  00EB9E  44                 	db	68
  1277  00EB9F  52                 	db	82
  1278  00EBA0  55                 	db	85
  1279  00EBA1  4D                 	db	77
  1280  00EBA2  20                 	db	32
  1281  00EBA3  43                 	db	67
  1282  00EBA4  43                 	db	67
  1283  00EBA5  20                 	db	32
  1284  00EBA6  54                 	db	84
  1285  00EBA7  52                 	db	82
  1286  00EBA8  49                 	db	73
  1287  00EBA9  47                 	db	71
  1288  00EBAA  47                 	db	71
  1289  00EBAB  45                 	db	69
  1290  00EBAC  52                 	db	82
  1291  00EBAD  00                 	db	0
  1292  00EBAE  00                 	db	0
  1293  00EBAF  44                 	db	68
  1294  00EBB0  52                 	db	82
  1295  00EBB1  55                 	db	85
  1296  00EBB2  4D                 	db	77
  1297  00EBB3  20                 	db	32
  1298  00EBB4  43                 	db	67
  1299  00EBB5  43                 	db	67
  1300  00EBB6  20                 	db	32
  1301  00EBB7  54                 	db	84
  1302  00EBB8  4F                 	db	79
  1303  00EBB9  47                 	db	71
  1304  00EBBA  47                 	db	71
  1305  00EBBB  4C                 	db	76
  1306  00EBBC  45                 	db	69
  1307  00EBBD  00                 	db	0
  1308  00EBBE  00                 	db	0
  1309  00EBBF  00                 	db	0
  1310  00EBC0  44                 	db	68
  1311  00EBC1  52                 	db	82
  1312  00EBC2  55                 	db	85
  1313  00EBC3  4D                 	db	77
  1314  00EBC4  20                 	db	32
  1315  00EBC5  31                 	db	49
  1316  00EBC6  20                 	db	32
  1317  00EBC7  4E                 	db	78
  1318  00EBC8  4E                 	db	78
  1319  00EBC9  3A                 	db	58
  1320  00EBCA  20                 	db	32
  1321  00EBCB  00                 	db	0
  1322  00EBCC  00                 	db	0
  1323  00EBCD  00                 	db	0
  1324  00EBCE  00                 	db	0
  1325  00EBCF  00                 	db	0
  1326  00EBD0  00                 	db	0
  1327  00EBD1  44                 	db	68
  1328  00EBD2  52                 	db	82
  1329  00EBD3  55                 	db	85
  1330  00EBD4  4D                 	db	77
  1331  00EBD5  20                 	db	32
  1332  00EBD6  32                 	db	50
  1333  00EBD7  20                 	db	32
  1334  00EBD8  4E                 	db	78
  1335  00EBD9  4E                 	db	78
  1336  00EBDA  3A                 	db	58
  1337  00EBDB  20                 	db	32
  1338  00EBDC  00                 	db	0
  1339  00EBDD  00                 	db	0
  1340  00EBDE  00                 	db	0
  1341  00EBDF  00                 	db	0
  1342  00EBE0  00                 	db	0
  1343  00EBE1  00                 	db	0
  1344  00EBE2  44                 	db	68
  1345  00EBE3  52                 	db	82
  1346  00EBE4  55                 	db	85
  1347  00EBE5  4D                 	db	77
  1348  00EBE6  20                 	db	32
  1349  00EBE7  33                 	db	51
  1350  00EBE8  20                 	db	32
  1351  00EBE9  4E                 	db	78
  1352  00EBEA  4E                 	db	78
  1353  00EBEB  3A                 	db	58
  1354  00EBEC  20                 	db	32
  1355  00EBED  00                 	db	0
  1356  00EBEE  00                 	db	0
  1357  00EBEF  00                 	db	0
  1358  00EBF0  00                 	db	0
  1359  00EBF1  00                 	db	0
  1360  00EBF2  00                 	db	0
  1361  00EBF3  44                 	db	68
  1362  00EBF4  52                 	db	82
  1363  00EBF5  55                 	db	85
  1364  00EBF6  4D                 	db	77
  1365  00EBF7  20                 	db	32
  1366  00EBF8  34                 	db	52
  1367  00EBF9  20                 	db	32
  1368  00EBFA  4E                 	db	78
  1369  00EBFB  4E                 	db	78
  1370  00EBFC  3A                 	db	58
  1371  00EBFD  20                 	db	32
  1372  00EBFE  00                 	db	0
  1373  00EBFF  00                 	db	0
  1374  00EC00  00                 	db	0
  1375  00EC01  00                 	db	0
  1376  00EC02  00                 	db	0
  1377  00EC03  00                 	db	0
  1378  00EC04  44                 	db	68
  1379  00EC05  52                 	db	82
  1380  00EC06  55                 	db	85
  1381  00EC07  4D                 	db	77
  1382  00EC08  20                 	db	32
  1383  00EC09  35                 	db	53
  1384  00EC0A  20                 	db	32
  1385  00EC0B  4E                 	db	78
  1386  00EC0C  4E                 	db	78
  1387  00EC0D  3A                 	db	58
  1388  00EC0E  20                 	db	32
  1389  00EC0F  00                 	db	0
  1390  00EC10  00                 	db	0
  1391  00EC11  00                 	db	0
  1392  00EC12  00                 	db	0
  1393  00EC13  00                 	db	0
  1394  00EC14  00                 	db	0
  1395  00EC15  44                 	db	68
  1396  00EC16  52                 	db	82
  1397  00EC17  55                 	db	85
  1398  00EC18  4D                 	db	77
  1399  00EC19  20                 	db	32
  1400  00EC1A  36                 	db	54
  1401  00EC1B  20                 	db	32
  1402  00EC1C  4E                 	db	78
  1403  00EC1D  4E                 	db	78
  1404  00EC1E  3A                 	db	58
  1405  00EC1F  20                 	db	32
  1406  00EC20  00                 	db	0
  1407  00EC21  00                 	db	0
  1408  00EC22  00                 	db	0
  1409  00EC23  00                 	db	0
  1410  00EC24  00                 	db	0
  1411  00EC25  00                 	db	0
  1412  00EC26  44                 	db	68
  1413  00EC27  52                 	db	82
  1414  00EC28  55                 	db	85
  1415  00EC29  4D                 	db	77
  1416  00EC2A  20                 	db	32
  1417  00EC2B  37                 	db	55
  1418  00EC2C  20                 	db	32
  1419  00EC2D  4E                 	db	78
  1420  00EC2E  4E                 	db	78
  1421  00EC2F  3A                 	db	58
  1422  00EC30  20                 	db	32
  1423  00EC31  00                 	db	0
  1424  00EC32  00                 	db	0
  1425  00EC33  00                 	db	0
  1426  00EC34  00                 	db	0
  1427  00EC35  00                 	db	0
  1428  00EC36  00                 	db	0
  1429  00EC37  44                 	db	68
  1430  00EC38  52                 	db	82
  1431  00EC39  55                 	db	85
  1432  00EC3A  4D                 	db	77
  1433  00EC3B  20                 	db	32
  1434  00EC3C  38                 	db	56
  1435  00EC3D  20                 	db	32
  1436  00EC3E  4E                 	db	78
  1437  00EC3F  4E                 	db	78
  1438  00EC40  3A                 	db	58
  1439  00EC41  20                 	db	32
  1440  00EC42  00                 	db	0
  1441  00EC43  00                 	db	0
  1442  00EC44  00                 	db	0
  1443  00EC45  00                 	db	0
  1444  00EC46  00                 	db	0
  1445  00EC47  00                 	db	0
  1446  00EC48  44                 	db	68
  1447  00EC49  52                 	db	82
  1448  00EC4A  55                 	db	85
  1449  00EC4B  4D                 	db	77
  1450  00EC4C  20                 	db	32
  1451  00EC4D  31                 	db	49
  1452  00EC4E  20                 	db	32
  1453  00EC4F  43                 	db	67
  1454  00EC50  43                 	db	67
  1455  00EC51  3A                 	db	58
  1456  00EC52  20                 	db	32
  1457  00EC53  00                 	db	0
  1458  00EC54  00                 	db	0
  1459  00EC55  00                 	db	0
  1460  00EC56  00                 	db	0
  1461  00EC57  00                 	db	0
  1462  00EC58  00                 	db	0
  1463  00EC59  44                 	db	68
  1464  00EC5A  52                 	db	82
  1465  00EC5B  55                 	db	85
  1466  00EC5C  4D                 	db	77
  1467  00EC5D  20                 	db	32
  1468  00EC5E  32                 	db	50
  1469  00EC5F  20                 	db	32
  1470  00EC60  43                 	db	67
  1471  00EC61  43                 	db	67
  1472  00EC62  3A                 	db	58
  1473  00EC63  20                 	db	32
  1474  00EC64  00                 	db	0
  1475  00EC65  00                 	db	0
  1476  00EC66  00                 	db	0
  1477  00EC67  00                 	db	0
  1478  00EC68  00                 	db	0
  1479  00EC69  00                 	db	0
  1480  00EC6A  44                 	db	68
  1481  00EC6B  52                 	db	82
  1482  00EC6C  55                 	db	85
  1483  00EC6D  4D                 	db	77
  1484  00EC6E  20                 	db	32
  1485  00EC6F  33                 	db	51
  1486  00EC70  20                 	db	32
  1487  00EC71  43                 	db	67
  1488  00EC72  43                 	db	67
  1489  00EC73  3A                 	db	58
  1490  00EC74  20                 	db	32
  1491  00EC75  00                 	db	0
  1492  00EC76  00                 	db	0
  1493  00EC77  00                 	db	0
  1494  00EC78  00                 	db	0
  1495  00EC79  00                 	db	0
  1496  00EC7A  00                 	db	0
  1497  00EC7B  44                 	db	68
  1498  00EC7C  52                 	db	82
  1499  00EC7D  55                 	db	85
  1500  00EC7E  4D                 	db	77
  1501  00EC7F  20                 	db	32
  1502  00EC80  34                 	db	52
  1503  00EC81  20                 	db	32
  1504  00EC82  43                 	db	67
  1505  00EC83  43                 	db	67
  1506  00EC84  3A                 	db	58
  1507  00EC85  20                 	db	32
  1508  00EC86  00                 	db	0
  1509  00EC87  00                 	db	0
  1510  00EC88  00                 	db	0
  1511  00EC89  00                 	db	0
  1512  00EC8A  00                 	db	0
  1513  00EC8B  00                 	db	0
  1514  00EC8C  44                 	db	68
  1515  00EC8D  52                 	db	82
  1516  00EC8E  55                 	db	85
  1517  00EC8F  4D                 	db	77
  1518  00EC90  20                 	db	32
  1519  00EC91  35                 	db	53
  1520  00EC92  20                 	db	32
  1521  00EC93  43                 	db	67
  1522  00EC94  43                 	db	67
  1523  00EC95  3A                 	db	58
  1524  00EC96  20                 	db	32
  1525  00EC97  00                 	db	0
  1526  00EC98  00                 	db	0
  1527  00EC99  00                 	db	0
  1528  00EC9A  00                 	db	0
  1529  00EC9B  00                 	db	0
  1530  00EC9C  00                 	db	0
  1531  00EC9D  44                 	db	68
  1532  00EC9E  52                 	db	82
  1533  00EC9F  55                 	db	85
  1534  00ECA0  4D                 	db	77
  1535  00ECA1  20                 	db	32
  1536  00ECA2  36                 	db	54
  1537  00ECA3  20                 	db	32
  1538  00ECA4  43                 	db	67
  1539  00ECA5  43                 	db	67
  1540  00ECA6  3A                 	db	58
  1541  00ECA7  20                 	db	32
  1542  00ECA8  00                 	db	0
  1543  00ECA9  00                 	db	0
  1544  00ECAA  00                 	db	0
  1545  00ECAB  00                 	db	0
  1546  00ECAC  00                 	db	0
  1547  00ECAD  00                 	db	0
  1548  00ECAE  44                 	db	68
  1549  00ECAF  52                 	db	82
  1550  00ECB0  55                 	db	85
  1551  00ECB1  4D                 	db	77
  1552  00ECB2  20                 	db	32
  1553  00ECB3  37                 	db	55
  1554  00ECB4  20                 	db	32
  1555  00ECB5  43                 	db	67
  1556  00ECB6  43                 	db	67
  1557  00ECB7  3A                 	db	58
  1558  00ECB8  20                 	db	32
  1559  00ECB9  00                 	db	0
  1560  00ECBA  00                 	db	0
  1561  00ECBB  00                 	db	0
  1562  00ECBC  00                 	db	0
  1563  00ECBD  00                 	db	0
  1564  00ECBE  00                 	db	0
  1565  00ECBF  44                 	db	68
  1566  00ECC0  52                 	db	82
  1567  00ECC1  55                 	db	85
  1568  00ECC2  4D                 	db	77
  1569  00ECC3  20                 	db	32
  1570  00ECC4  38                 	db	56
  1571  00ECC5  20                 	db	32
  1572  00ECC6  43                 	db	67
  1573  00ECC7  43                 	db	67
  1574  00ECC8  3A                 	db	58
  1575  00ECC9  20                 	db	32
  1576  00ECCA  00                 	db	0
  1577  00ECCB  00                 	db	0
  1578  00ECCC  00                 	db	0
  1579  00ECCD  00                 	db	0
  1580  00ECCE  00                 	db	0
  1581  00ECCF  00                 	db	0
  1582  00ECD0  50                 	db	80
  1583  00ECD1  4F                 	db	79
  1584  00ECD2  54                 	db	84
  1585  00ECD3  53                 	db	83
  1586  00ECD4  20                 	db	32
  1587  00ECD5  52                 	db	82
  1588  00ECD6  45                 	db	69
  1589  00ECD7  53                 	db	83
  1590  00ECD8  4F                 	db	79
  1591  00ECD9  4C                 	db	76
  1592  00ECDA  55                 	db	85
  1593  00ECDB  54                 	db	84
  1594  00ECDC  49                 	db	73
  1595  00ECDD  4F                 	db	79
  1596  00ECDE  4E                 	db	78
  1597  00ECDF  00                 	db	0
  1598  00ECE0  00                 	db	0
  1599  00ECE1  50                 	db	80
  1600  00ECE2  4F                 	db	79
  1601  00ECE3  54                 	db	84
  1602  00ECE4  53                 	db	83
  1603  00ECE5  20                 	db	32
  1604  00ECE6  41                 	db	65
  1605  00ECE7  4C                 	db	76
  1606  00ECE8  50                 	db	80
  1607  00ECE9  48                 	db	72
  1608  00ECEA  41                 	db	65
  1609  00ECEB  00                 	db	0
  1610  00ECEC  00                 	db	0
  1611  00ECED  00                 	db	0
  1612  00ECEE  00                 	db	0
  1613  00ECEF  00                 	db	0
  1614  00ECF0  00                 	db	0
  1615  00ECF1  00                 	db	0
  1616  00ECF2  50                 	db	80
  1617  00ECF3  4F                 	db	79
  1618  00ECF4  54                 	db	84
  1619  00ECF5  53                 	db	83
  1620  00ECF6  20                 	db	32
  1621  00ECF7  53                 	db	83
  1622  00ECF8  45                 	db	69
  1623  00ECF9  54                 	db	84
  1624  00ECFA  20                 	db	32
  1625  00ECFB  43                 	db	67
  1626  00ECFC  43                 	db	67
  1627  00ECFD  23                 	db	35
  1628  00ECFE  00                 	db	0
  1629  00ECFF  00                 	db	0
  1630  00ED00  00                 	db	0
  1631  00ED01  00                 	db	0
  1632  00ED02  00                 	db	0
  1633  00ED03  53                 	db	83
  1634  00ED04  4C                 	db	76
  1635  00ED05  49                 	db	73
  1636  00ED06  44                 	db	68
  1637  00ED07  45                 	db	69
  1638  00ED08  50                 	db	80
  1639  00ED09  4F                 	db	79
  1640  00ED0A  54                 	db	84
  1641  00ED0B  20                 	db	32
  1642  00ED0C  53                 	db	83
  1643  00ED0D  45                 	db	69
  1644  00ED0E  54                 	db	84
  1645  00ED0F  20                 	db	32
  1646  00ED10  43                 	db	67
  1647  00ED11  43                 	db	67
  1648  00ED12  23                 	db	35
  1649  00ED13  00                 	db	0
  1650  00ED14  4A                 	db	74
  1651  00ED15  4F                 	db	79
  1652  00ED16  59                 	db	89
  1653  00ED17  53                 	db	83
  1654  00ED18  54                 	db	84
  1655  00ED19  49                 	db	73
  1656  00ED1A  43                 	db	67
  1657  00ED1B  4B                 	db	75
  1658  00ED1C  20                 	db	32
  1659  00ED1D  53                 	db	83
  1660  00ED1E  45                 	db	69
  1661  00ED1F  54                 	db	84
  1662  00ED20  20                 	db	32
  1663  00ED21  43                 	db	67
  1664  00ED22  43                 	db	67
  1665  00ED23  23                 	db	35
  1666  00ED24  00                 	db	0
  1667  00ED25  50                 	db	80
  1668  00ED26  4F                 	db	79
  1669  00ED27  54                 	db	84
  1670  00ED28  53                 	db	83
  1671  00ED29  20                 	db	32
  1672  00ED2A  4C                 	db	76
  1673  00ED2B  4F                 	db	79
  1674  00ED2C  20                 	db	32
  1675  00ED2D  52                 	db	82
  1676  00ED2E  45                 	db	69
  1677  00ED2F  53                 	db	83
  1678  00ED30  00                 	db	0
  1679  00ED31  00                 	db	0
  1680  00ED32  00                 	db	0
  1681  00ED33  00                 	db	0
  1682  00ED34  00                 	db	0
  1683  00ED35  00                 	db	0
  1684  00ED36  50                 	db	80
  1685  00ED37  4F                 	db	79
  1686  00ED38  54                 	db	84
  1687  00ED39  53                 	db	83
  1688  00ED3A  20                 	db	32
  1689  00ED3B  48                 	db	72
  1690  00ED3C  49                 	db	73
  1691  00ED3D  20                 	db	32
  1692  00ED3E  52                 	db	82
  1693  00ED3F  45                 	db	69
  1694  00ED40  53                 	db	83
  1695  00ED41  00                 	db	0
  1696  00ED42  00                 	db	0
  1697  00ED43  00                 	db	0
  1698  00ED44  00                 	db	0
  1699  00ED45  00                 	db	0
  1700  00ED46  00                 	db	0
  1701  00ED47  50                 	db	80
  1702  00ED48  31                 	db	49
  1703  00ED49  20                 	db	32
  1704  00ED4A  43                 	db	67
  1705  00ED4B  43                 	db	67
  1706  00ED4C  3A                 	db	58
  1707  00ED4D  00                 	db	0
  1708  00ED4E  00                 	db	0
  1709  00ED4F  00                 	db	0
  1710  00ED50  00                 	db	0
  1711  00ED51  00                 	db	0
  1712  00ED52  00                 	db	0
  1713  00ED53  00                 	db	0
  1714  00ED54  00                 	db	0
  1715  00ED55  00                 	db	0
  1716  00ED56  00                 	db	0
  1717  00ED57  00                 	db	0
  1718  00ED58  50                 	db	80
  1719  00ED59  32                 	db	50
  1720  00ED5A  20                 	db	32
  1721  00ED5B  43                 	db	67
  1722  00ED5C  43                 	db	67
  1723  00ED5D  3A                 	db	58
  1724  00ED5E  00                 	db	0
  1725  00ED5F  00                 	db	0
  1726  00ED60  00                 	db	0
  1727  00ED61  00                 	db	0
  1728  00ED62  00                 	db	0
  1729  00ED63  00                 	db	0
  1730  00ED64  00                 	db	0
  1731  00ED65  00                 	db	0
  1732  00ED66  00                 	db	0
  1733  00ED67  00                 	db	0
  1734  00ED68  00                 	db	0
  1735  00ED69  50                 	db	80
  1736  00ED6A  33                 	db	51
  1737  00ED6B  20                 	db	32
  1738  00ED6C  43                 	db	67
  1739  00ED6D  43                 	db	67
  1740  00ED6E  3A                 	db	58
  1741  00ED6F  00                 	db	0
  1742  00ED70  00                 	db	0
  1743  00ED71  00                 	db	0
  1744  00ED72  00                 	db	0
  1745  00ED73  00                 	db	0
  1746  00ED74  00                 	db	0
  1747  00ED75  00                 	db	0
  1748  00ED76  00                 	db	0
  1749  00ED77  00                 	db	0
  1750  00ED78  00                 	db	0
  1751  00ED79  00                 	db	0
  1752  00ED7A  50                 	db	80
  1753  00ED7B  34                 	db	52
  1754  00ED7C  20                 	db	32
  1755  00ED7D  43                 	db	67
  1756  00ED7E  43                 	db	67
  1757  00ED7F  3A                 	db	58
  1758  00ED80  00                 	db	0
  1759  00ED81  00                 	db	0
  1760  00ED82  00                 	db	0
  1761  00ED83  00                 	db	0
  1762  00ED84  00                 	db	0
  1763  00ED85  00                 	db	0
  1764  00ED86  00                 	db	0
  1765  00ED87  00                 	db	0
  1766  00ED88  00                 	db	0
  1767  00ED89  00                 	db	0
  1768  00ED8A  00                 	db	0
  1769  00ED8B  50                 	db	80
  1770  00ED8C  35                 	db	53
  1771  00ED8D  20                 	db	32
  1772  00ED8E  43                 	db	67
  1773  00ED8F  43                 	db	67
  1774  00ED90  3A                 	db	58
  1775  00ED91  00                 	db	0
  1776  00ED92  00                 	db	0
  1777  00ED93  00                 	db	0
  1778  00ED94  00                 	db	0
  1779  00ED95  00                 	db	0
  1780  00ED96  00                 	db	0
  1781  00ED97  00                 	db	0
  1782  00ED98  00                 	db	0
  1783  00ED99  00                 	db	0
  1784  00ED9A  00                 	db	0
  1785  00ED9B  00                 	db	0
  1786  00ED9C  50                 	db	80
  1787  00ED9D  36                 	db	54
  1788  00ED9E  20                 	db	32
  1789  00ED9F  43                 	db	67
  1790  00EDA0  43                 	db	67
  1791  00EDA1  3A                 	db	58
  1792  00EDA2  00                 	db	0
  1793  00EDA3  00                 	db	0
  1794  00EDA4  00                 	db	0
  1795  00EDA5  00                 	db	0
  1796  00EDA6  00                 	db	0
  1797  00EDA7  00                 	db	0
  1798  00EDA8  00                 	db	0
  1799  00EDA9  00                 	db	0
  1800  00EDAA  00                 	db	0
  1801  00EDAB  00                 	db	0
  1802  00EDAC  00                 	db	0
  1803  00EDAD  50                 	db	80
  1804  00EDAE  37                 	db	55
  1805  00EDAF  20                 	db	32
  1806  00EDB0  43                 	db	67
  1807  00EDB1  43                 	db	67
  1808  00EDB2  3A                 	db	58
  1809  00EDB3  00                 	db	0
  1810  00EDB4  00                 	db	0
  1811  00EDB5  00                 	db	0
  1812  00EDB6  00                 	db	0
  1813  00EDB7  00                 	db	0
  1814  00EDB8  00                 	db	0
  1815  00EDB9  00                 	db	0
  1816  00EDBA  00                 	db	0
  1817  00EDBB  00                 	db	0
  1818  00EDBC  00                 	db	0
  1819  00EDBD  00                 	db	0
  1820  00EDBE  53                 	db	83
  1821  00EDBF  31                 	db	49
  1822  00EDC0  20                 	db	32
  1823  00EDC1  43                 	db	67
  1824  00EDC2  43                 	db	67
  1825  00EDC3  3A                 	db	58
  1826  00EDC4  20                 	db	32
  1827  00EDC5  00                 	db	0
  1828  00EDC6  00                 	db	0
  1829  00EDC7  00                 	db	0
  1830  00EDC8  00                 	db	0
  1831  00EDC9  00                 	db	0
  1832  00EDCA  00                 	db	0
  1833  00EDCB  00                 	db	0
  1834  00EDCC  00                 	db	0
  1835  00EDCD  00                 	db	0
  1836  00EDCE  00                 	db	0
  1837  00EDCF  53                 	db	83
  1838  00EDD0  32                 	db	50
  1839  00EDD1  20                 	db	32
  1840  00EDD2  43                 	db	67
  1841  00EDD3  43                 	db	67
  1842  00EDD4  3A                 	db	58
  1843  00EDD5  20                 	db	32
  1844  00EDD6  00                 	db	0
  1845  00EDD7  00                 	db	0
  1846  00EDD8  00                 	db	0
  1847  00EDD9  00                 	db	0
  1848  00EDDA  00                 	db	0
  1849  00EDDB  00                 	db	0
  1850  00EDDC  00                 	db	0
  1851  00EDDD  00                 	db	0
  1852  00EDDE  00                 	db	0
  1853  00EDDF  00                 	db	0
  1854  00EDE0  53                 	db	83
  1855  00EDE1  33                 	db	51
  1856  00EDE2  20                 	db	32
  1857  00EDE3  43                 	db	67
  1858  00EDE4  43                 	db	67
  1859  00EDE5  3A                 	db	58
  1860  00EDE6  20                 	db	32
  1861  00EDE7  00                 	db	0
  1862  00EDE8  00                 	db	0
  1863  00EDE9  00                 	db	0
  1864  00EDEA  00                 	db	0
  1865  00EDEB  00                 	db	0
  1866  00EDEC  00                 	db	0
  1867  00EDED  00                 	db	0
  1868  00EDEE  00                 	db	0
  1869  00EDEF  00                 	db	0
  1870  00EDF0  00                 	db	0
  1871  00EDF1  53                 	db	83
  1872  00EDF2  34                 	db	52
  1873  00EDF3  20                 	db	32
  1874  00EDF4  43                 	db	67
  1875  00EDF5  43                 	db	67
  1876  00EDF6  3A                 	db	58
  1877  00EDF7  20                 	db	32
  1878  00EDF8  00                 	db	0
  1879  00EDF9  00                 	db	0
  1880  00EDFA  00                 	db	0
  1881  00EDFB  00                 	db	0
  1882  00EDFC  00                 	db	0
  1883  00EDFD  00                 	db	0
  1884  00EDFE  00                 	db	0
  1885  00EDFF  00                 	db	0
  1886  00EE00  00                 	db	0
  1887  00EE01  00                 	db	0
  1888  00EE02  53                 	db	83
  1889  00EE03  35                 	db	53
  1890  00EE04  20                 	db	32
  1891  00EE05  43                 	db	67
  1892  00EE06  43                 	db	67
  1893  00EE07  3A                 	db	58
  1894  00EE08  20                 	db	32
  1895  00EE09  00                 	db	0
  1896  00EE0A  00                 	db	0
  1897  00EE0B  00                 	db	0
  1898  00EE0C  00                 	db	0
  1899  00EE0D  00                 	db	0
  1900  00EE0E  00                 	db	0
  1901  00EE0F  00                 	db	0
  1902  00EE10  00                 	db	0
  1903  00EE11  00                 	db	0
  1904  00EE12  00                 	db	0
  1905  00EE13  53                 	db	83
  1906  00EE14  36                 	db	54
  1907  00EE15  20                 	db	32
  1908  00EE16  43                 	db	67
  1909  00EE17  43                 	db	67
  1910  00EE18  3A                 	db	58
  1911  00EE19  20                 	db	32
  1912  00EE1A  00                 	db	0
  1913  00EE1B  00                 	db	0
  1914  00EE1C  00                 	db	0
  1915  00EE1D  00                 	db	0
  1916  00EE1E  00                 	db	0
  1917  00EE1F  00                 	db	0
  1918  00EE20  00                 	db	0
  1919  00EE21  00                 	db	0
  1920  00EE22  00                 	db	0
  1921  00EE23  00                 	db	0
  1922  00EE24  53                 	db	83
  1923  00EE25  37                 	db	55
  1924  00EE26  20                 	db	32
  1925  00EE27  43                 	db	67
  1926  00EE28  43                 	db	67
  1927  00EE29  3A                 	db	58
  1928  00EE2A  20                 	db	32
  1929  00EE2B  00                 	db	0
  1930  00EE2C  00                 	db	0
  1931  00EE2D  00                 	db	0
  1932  00EE2E  00                 	db	0
  1933  00EE2F  00                 	db	0
  1934  00EE30  00                 	db	0
  1935  00EE31  00                 	db	0
  1936  00EE32  00                 	db	0
  1937  00EE33  00                 	db	0
  1938  00EE34  00                 	db	0
  1939  00EE35  4A                 	db	74
  1940  00EE36  58                 	db	88
  1941  00EE37  20                 	db	32
  1942  00EE38  43                 	db	67
  1943  00EE39  43                 	db	67
  1944  00EE3A  3A                 	db	58
  1945  00EE3B  20                 	db	32
  1946  00EE3C  00                 	db	0
  1947  00EE3D  00                 	db	0
  1948  00EE3E  00                 	db	0
  1949  00EE3F  00                 	db	0
  1950  00EE40  00                 	db	0
  1951  00EE41  00                 	db	0
  1952  00EE42  00                 	db	0
  1953  00EE43  00                 	db	0
  1954  00EE44  00                 	db	0
  1955  00EE45  00                 	db	0
  1956  00EE46  4A                 	db	74
  1957  00EE47  59                 	db	89
  1958  00EE48  20                 	db	32
  1959  00EE49  43                 	db	67
  1960  00EE4A  43                 	db	67
  1961  00EE4B  3A                 	db	58
  1962  00EE4C  20                 	db	32
  1963  00EE4D  00                 	db	0
  1964  00EE4E  00                 	db	0
  1965  00EE4F  00                 	db	0
  1966  00EE50  00                 	db	0
  1967  00EE51  00                 	db	0
  1968  00EE52  00                 	db	0
  1969  00EE53  00                 	db	0
  1970  00EE54  00                 	db	0
  1971  00EE55  00                 	db	0
  1972  00EE56  00                 	db	0
  1973  00EE57  4D                 	db	77
  1974  00EE58  61                 	db	97
  1975  00EE59  69                 	db	105
  1976  00EE5A  6E                 	db	110
  1977  00EE5B  20                 	db	32
  1978  00EE5C  63                 	db	99
  1979  00EE5D  68                 	db	104
  1980  00EE5E  61                 	db	97
  1981  00EE5F  6E                 	db	110
  1982  00EE60  6E                 	db	110
  1983  00EE61  65                 	db	101
  1984  00EE62  6C                 	db	108
  1985  00EE63  00                 	db	0
  1986  00EE64  00                 	db	0
  1987  00EE65  00                 	db	0
  1988  00EE66  00                 	db	0
  1989  00EE67  00                 	db	0
  1990  00EE68  44                 	db	68
  1991  00EE69  72                 	db	114
  1992  00EE6A  75                 	db	117
  1993  00EE6B  6D                 	db	109
  1994  00EE6C  20                 	db	32
  1995  00EE6D  63                 	db	99
  1996  00EE6E  68                 	db	104
  1997  00EE6F  61                 	db	97
  1998  00EE70  6E                 	db	110
  1999  00EE71  6E                 	db	110
  2000  00EE72  65                 	db	101
  2001  00EE73  6C                 	db	108
  2002  00EE74  00                 	db	0
  2003  00EE75  00                 	db	0
  2004  00EE76  00                 	db	0
  2005  00EE77  00                 	db	0
  2006  00EE78  00                 	db	0
  2007  00EE79  53                 	db	83
  2008  00EE7A  61                 	db	97
  2009  00EE7B  76                 	db	118
  2010  00EE7C  65                 	db	101
  2011  00EE7D  20                 	db	32
  2012  00EE7E  73                 	db	115
  2013  00EE7F  65                 	db	101
  2014  00EE80  74                 	db	116
  2015  00EE81  74                 	db	116
  2016  00EE82  69                 	db	105
  2017  00EE83  6E                 	db	110
  2018  00EE84  67                 	db	103
  2019  00EE85  73                 	db	115
  2020  00EE86  00                 	db	0
  2021  00EE87  00                 	db	0
  2022  00EE88  00                 	db	0
  2023  00EE89  00                 	db	0
  2024  00EE8A  4C                 	db	76
  2025  00EE8B  6F                 	db	111
  2026  00EE8C  61                 	db	97
  2027  00EE8D  64                 	db	100
  2028  00EE8E  20                 	db	32
  2029  00EE8F  73                 	db	115
  2030  00EE90  65                 	db	101
  2031  00EE91  74                 	db	116
  2032  00EE92  74                 	db	116
  2033  00EE93  69                 	db	105
  2034  00EE94  6E                 	db	110
  2035  00EE95  67                 	db	103
  2036  00EE96  73                 	db	115
  2037  00EE97  00                 	db	0
  2038  00EE98  00                 	db	0
  2039  00EE99  00                 	db	0
  2040  00EE9A  00                 	db	0
  2041  00EE9B  52                 	db	82
  2042  00EE9C  65                 	db	101
  2043  00EE9D  73                 	db	115
  2044  00EE9E  74                 	db	116
  2045  00EE9F  6F                 	db	111
  2046  00EEA0  72                 	db	114
  2047  00EEA1  65                 	db	101
  2048  00EEA2  20                 	db	32
  2049  00EEA3  64                 	db	100
  2050  00EEA4  65                 	db	101
  2051  00EEA5  66                 	db	102
  2052  00EEA6  61                 	db	97
  2053  00EEA7  75                 	db	117
  2054  00EEA8  6C                 	db	108
  2055  00EEA9  74                 	db	116
  2056  00EEAA  73                 	db	115
  2057  00EEAB  00                 	db	0
  2058  00EEAC  45                 	db	69
  2059  00EEAD  6E                 	db	110
  2060  00EEAE  63                 	db	99
  2061  00EEAF  6F                 	db	111
  2062  00EEB0  64                 	db	100
  2063  00EEB1  65                 	db	101
  2064  00EEB2  72                 	db	114
  2065  00EEB3  20                 	db	32
  2066  00EEB4  50                 	db	80
  2067  00EEB5  6F                 	db	111
  2068  00EEB6  6C                 	db	108
  2069  00EEB7  61                 	db	97
  2070  00EEB8  72                 	db	114
  2071  00EEB9  69                 	db	105
  2072  00EEBA  74                 	db	116
  2073  00EEBB  79                 	db	121
  2074  00EEBC  00                 	db	0
  2075  00EEBD  45                 	db	69
  2076  00EEBE  78                 	db	120
  2077  00EEBF  69                 	db	105
  2078  00EEC0  74                 	db	116
  2079  00EEC1  00                 	db	0
  2080  00EEC2  00                 	db	0
  2081  00EEC3  00                 	db	0
  2082  00EEC4  00                 	db	0
  2083  00EEC5  00                 	db	0
  2084  00EEC6  00                 	db	0
  2085  00EEC7  00                 	db	0
  2086  00EEC8  00                 	db	0
  2087  00EEC9  00                 	db	0
  2088  00EECA  00                 	db	0
  2089  00EECB  00                 	db	0
  2090  00EECC  00                 	db	0
  2091  00EECD  00                 	db	0
  2092  00EECE  53                 	db	83
  2093  00EECF  6C                 	db	108
  2094  00EED0  6F                 	db	111
  2095  00EED1  74                 	db	116
  2096  00EED2  20                 	db	32
  2097  00EED3  31                 	db	49
  2098  00EED4  00                 	db	0
  2099  00EED5  00                 	db	0
  2100  00EED6  00                 	db	0
  2101  00EED7  00                 	db	0
  2102  00EED8  00                 	db	0
  2103  00EED9  00                 	db	0
  2104  00EEDA  00                 	db	0
  2105  00EEDB  00                 	db	0
  2106  00EEDC  00                 	db	0
  2107  00EEDD  00                 	db	0
  2108  00EEDE  00                 	db	0
  2109  00EEDF  53                 	db	83
  2110  00EEE0  6C                 	db	108
  2111  00EEE1  6F                 	db	111
  2112  00EEE2  74                 	db	116
  2113  00EEE3  20                 	db	32
  2114  00EEE4  32                 	db	50
  2115  00EEE5  00                 	db	0
  2116  00EEE6  00                 	db	0
  2117  00EEE7  00                 	db	0
  2118  00EEE8  00                 	db	0
  2119  00EEE9  00                 	db	0
  2120  00EEEA  00                 	db	0
  2121  00EEEB  00                 	db	0
  2122  00EEEC  00                 	db	0
  2123  00EEED  00                 	db	0
  2124  00EEEE  00                 	db	0
  2125  00EEEF  00                 	db	0
  2126  00EEF0  53                 	db	83
  2127  00EEF1  6C                 	db	108
  2128  00EEF2  6F                 	db	111
  2129  00EEF3  74                 	db	116
  2130  00EEF4  20                 	db	32
  2131  00EEF5  33                 	db	51
  2132  00EEF6  00                 	db	0
  2133  00EEF7  00                 	db	0
  2134  00EEF8  00                 	db	0
  2135  00EEF9  00                 	db	0
  2136  00EEFA  00                 	db	0
  2137  00EEFB  00                 	db	0
  2138  00EEFC  00                 	db	0
  2139  00EEFD  00                 	db	0
  2140  00EEFE  00                 	db	0
  2141  00EEFF  00                 	db	0
  2142  00EF00  00                 	db	0
  2143  00EF01  53                 	db	83
  2144  00EF02  6C                 	db	108
  2145  00EF03  6F                 	db	111
  2146  00EF04  74                 	db	116
  2147  00EF05  20                 	db	32
  2148  00EF06  34                 	db	52
  2149  00EF07  00                 	db	0
  2150  00EF08  00                 	db	0
  2151  00EF09  00                 	db	0
  2152  00EF0A  00                 	db	0
  2153  00EF0B  00                 	db	0
  2154  00EF0C  00                 	db	0
  2155  00EF0D  00                 	db	0
  2156  00EF0E  00                 	db	0
  2157  00EF0F  00                 	db	0
  2158  00EF10  00                 	db	0
  2159  00EF11  00                 	db	0
  2160  00EF12  45                 	db	69
  2161  00EF13  78                 	db	120
  2162  00EF14  69                 	db	105
  2163  00EF15  74                 	db	116
  2164  00EF16  00                 	db	0
  2165  00EF17  00                 	db	0
  2166  00EF18  00                 	db	0
  2167  00EF19  00                 	db	0
  2168  00EF1A  00                 	db	0
  2169  00EF1B  00                 	db	0
  2170  00EF1C  00                 	db	0
  2171  00EF1D  00                 	db	0
  2172  00EF1E  00                 	db	0
  2173  00EF1F  00                 	db	0
  2174  00EF20  00                 	db	0
  2175  00EF21  00                 	db	0
  2176  00EF22  00                 	db	0
  2177  00EF23  43                 	db	67
  2178  00EF24  57                 	db	87
  2179  00EF25  20                 	db	32
  2180  00EF26  49                 	db	73
  2181  00EF27  53                 	db	83
  2182  00EF28  20                 	db	32
  2183  00EF29  49                 	db	73
  2184  00EF2A  4E                 	db	78
  2185  00EF2B  43                 	db	67
  2186  00EF2C  52                 	db	82
  2187  00EF2D  45                 	db	69
  2188  00EF2E  41                 	db	65
  2189  00EF2F  53                 	db	83
  2190  00EF30  45                 	db	69
  2191  00EF31  00                 	db	0
  2192  00EF32  00                 	db	0
  2193  00EF33  00                 	db	0
  2194  00EF34  43                 	db	67
  2195  00EF35  43                 	db	67
  2196  00EF36  57                 	db	87
  2197  00EF37  20                 	db	32
  2198  00EF38  49                 	db	73
  2199  00EF39  53                 	db	83
  2200  00EF3A  20                 	db	32
  2201  00EF3B  49                 	db	73
  2202  00EF3C  4E                 	db	78
  2203  00EF3D  43                 	db	67
  2204  00EF3E  52                 	db	82
  2205  00EF3F  45                 	db	69
  2206  00EF40  41                 	db	65
  2207  00EF41  53                 	db	83
  2208  00EF42  45                 	db	69
  2209  00EF43  00                 	db	0
  2210  00EF44  00                 	db	0
  2211  00EF45  41                 	db	65
  2212  00EF46  72                 	db	114
  2213  00EF47  70                 	db	112
  2214  00EF48  65                 	db	101
  2215  00EF49  67                 	db	103
  2216  00EF4A  67                 	db	103
  2217  00EF4B  69                 	db	105
  2218  00EF4C  6F                 	db	111
  2219  00EF4D  20                 	db	32
  2220  00EF4E  4F                 	db	79
  2221  00EF4F  46                 	db	70
  2222  00EF50  46                 	db	70
  2223  00EF51  2F                 	db	47
  2224  00EF52  4F                 	db	79
  2225  00EF53  4E                 	db	78
  2226  00EF54  00                 	db	0
  2227  00EF55  00                 	db	0
  2228  00EF56  54                 	db	84
  2229  00EF57  65                 	db	101
  2230  00EF58  6D                 	db	109
  2231  00EF59  70                 	db	112
  2232  00EF5A  6F                 	db	111
  2233  00EF5B  00                 	db	0
  2234  00EF5C  00                 	db	0
  2235  00EF5D  00                 	db	0
  2236  00EF5E  00                 	db	0
  2237  00EF5F  00                 	db	0
  2238  00EF60  00                 	db	0
  2239  00EF61  00                 	db	0
  2240  00EF62  00                 	db	0
  2241  00EF63  00                 	db	0
  2242  00EF64  00                 	db	0
  2243  00EF65  00                 	db	0
  2244  00EF66  00                 	db	0
  2245  00EF67  4F                 	db	79
  2246  00EF68  63                 	db	99
  2247  00EF69  74                 	db	116
  2248  00EF6A  61                 	db	97
  2249  00EF6B  76                 	db	118
  2250  00EF6C  65                 	db	101
  2251  00EF6D  20                 	db	32
  2252  00EF6E  52                 	db	82
  2253  00EF6F  61                 	db	97
  2254  00EF70  6E                 	db	110
  2255  00EF71  67                 	db	103
  2256  00EF72  65                 	db	101
  2257  00EF73  00                 	db	0
  2258  00EF74  00                 	db	0
  2259  00EF75  00                 	db	0
  2260  00EF76  00                 	db	0
  2261  00EF77  00                 	db	0
  2262  00EF78  41                 	db	65
  2263  00EF79  72                 	db	114
  2264  00EF7A  70                 	db	112
  2265  00EF7B  65                 	db	101
  2266  00EF7C  67                 	db	103
  2267  00EF7D  67                 	db	103
  2268  00EF7E  69                 	db	105
  2269  00EF7F  6F                 	db	111
  2270  00EF80  20                 	db	32
  2271  00EF81  54                 	db	84
  2272  00EF82  79                 	db	121
  2273  00EF83  70                 	db	112
  2274  00EF84  65                 	db	101
  2275  00EF85  00                 	db	0
  2276  00EF86  00                 	db	0
  2277  00EF87  00                 	db	0
  2278  00EF88  00                 	db	0
  2279  00EF89  4E                 	db	78
  2280  00EF8A  6F                 	db	111
  2281  00EF8B  74                 	db	116
  2282  00EF8C  65                 	db	101
  2283  00EF8D  20                 	db	32
  2284  00EF8E  4C                 	db	76
  2285  00EF8F  65                 	db	101
  2286  00EF90  6E                 	db	110
  2287  00EF91  67                 	db	103
  2288  00EF92  74                 	db	116
  2289  00EF93  68                 	db	104
  2290  00EF94  00                 	db	0
  2291  00EF95  00                 	db	0
  2292  00EF96  00                 	db	0
  2293  00EF97  00                 	db	0
  2294  00EF98  00                 	db	0
  2295  00EF99  00                 	db	0
  2296  00EF9A  4C                 	db	76
  2297  00EF9B  61                 	db	97
  2298  00EF9C  74                 	db	116
  2299  00EF9D  63                 	db	99
  2300  00EF9E  68                 	db	104
  2301  00EF9F  2F                 	db	47
  2302  00EFA0  41                 	db	65
  2303  00EFA1  75                 	db	117
  2304  00EFA2  74                 	db	116
  2305  00EFA3  6F                 	db	111
  2306  00EFA4  20                 	db	32
  2307  00EFA5  4C                 	db	76
  2308  00EFA6  61                 	db	97
  2309  00EFA7  74                 	db	116
  2310  00EFA8  63                 	db	99
  2311  00EFA9  68                 	db	104
  2312  00EFAA  00                 	db	0
  2313  00EFAB  55                 	db	85
  2314  00EFAC  6E                 	db	110
  2315  00EFAD  2D                 	db	45
  2316  00EFAE  6C                 	db	108
  2317  00EFAF  61                 	db	97
  2318  00EFB0  74                 	db	116
  2319  00EFB1  63                 	db	99
  2320  00EFB2  68                 	db	104
  2321  00EFB3  20                 	db	32
  2322  00EFB4  4D                 	db	77
  2323  00EFB5  6F                 	db	111
  2324  00EFB6  64                 	db	100
  2325  00EFB7  65                 	db	101
  2326  00EFB8  00                 	db	0
  2327  00EFB9  00                 	db	0
  2328  00EFBA  00                 	db	0
  2329  00EFBB  00                 	db	0
  2330  00EFBC  52                 	db	82
  2331  00EFBD  61                 	db	97
  2332  00EFBE  6E                 	db	110
  2333  00EFBF  64                 	db	100
  2334  00EFC0  6F                 	db	111
  2335  00EFC1  6D                 	db	109
  2336  00EFC2  69                 	db	105
  2337  00EFC3  7A                 	db	122
  2338  00EFC4  65                 	db	101
  2339  00EFC5  2F                 	db	47
  2340  00EFC6  53                 	db	83
  2341  00EFC7  6B                 	db	107
  2342  00EFC8  69                 	db	105
  2343  00EFC9  70                 	db	112
  2344  00EFCA  00                 	db	0
  2345  00EFCB  00                 	db	0
  2346  00EFCC  00                 	db	0
  2347  00EFCD  4C                 	db	76
  2348  00EFCE  61                 	db	97
  2349  00EFCF  73                 	db	115
  2350  00EFD0  74                 	db	116
  2351  00EFD1  20                 	db	32
  2352  00EFD2  4E                 	db	78
  2353  00EFD3  6F                 	db	111
  2354  00EFD4  74                 	db	116
  2355  00EFD5  65                 	db	101
  2356  00EFD6  20                 	db	32
  2357  00EFD7  4D                 	db	77
  2358  00EFD8  6F                 	db	111
  2359  00EFD9  64                 	db	100
  2360  00EFDA  65                 	db	101
  2361  00EFDB  00                 	db	0
  2362  00EFDC  00                 	db	0
  2363  00EFDD  00                 	db	0
  2364  00EFDE  41                 	db	65
  2365  00EFDF  52                 	db	82
  2366  00EFE0  50                 	db	80
  2367  00EFE1  45                 	db	69
  2368  00EFE2  47                 	db	71
  2369  00EFE3  47                 	db	71
  2370  00EFE4  49                 	db	73
  2371  00EFE5  41                 	db	65
  2372  00EFE6  54                 	db	84
  2373  00EFE7  4F                 	db	79
  2374  00EFE8  52                 	db	82
  2375  00EFE9  20                 	db	32
  2376  00EFEA  4F                 	db	79
  2377  00EFEB  46                 	db	70
  2378  00EFEC  46                 	db	70
  2379  00EFED  00                 	db	0
  2380  00EFEE  00                 	db	0
  2381  00EFEF  41                 	db	65
  2382  00EFF0  52                 	db	82
  2383  00EFF1  50                 	db	80
  2384  00EFF2  45                 	db	69
  2385  00EFF3  47                 	db	71
  2386  00EFF4  47                 	db	71
  2387  00EFF5  49                 	db	73
  2388  00EFF6  41                 	db	65
  2389  00EFF7  54                 	db	84
  2390  00EFF8  4F                 	db	79
  2391  00EFF9  52                 	db	82
  2392  00EFFA  20                 	db	32
  2393  00EFFB  4F                 	db	79
  2394  00EFFC  4E                 	db	78
  2395  00EFFD  00                 	db	0
  2396  00EFFE  00                 	db	0
  2397  00EFFF  00                 	db	0
  2398  00F000  55                 	db	85
  2399  00F001  50                 	db	80
  2400  00F002  00                 	db	0
  2401  00F003  00                 	db	0
  2402  00F004  00                 	db	0
  2403  00F005  00                 	db	0
  2404  00F006  00                 	db	0
  2405  00F007  00                 	db	0
  2406  00F008  00                 	db	0
  2407  00F009  00                 	db	0
  2408  00F00A  00                 	db	0
  2409  00F00B  00                 	db	0
  2410  00F00C  00                 	db	0
  2411  00F00D  00                 	db	0
  2412  00F00E  00                 	db	0
  2413  00F00F  00                 	db	0
  2414  00F010  00                 	db	0
  2415  00F011  44                 	db	68
  2416  00F012  4F                 	db	79
  2417  00F013  57                 	db	87
  2418  00F014  4E                 	db	78
  2419  00F015  00                 	db	0
  2420  00F016  00                 	db	0
  2421  00F017  00                 	db	0
  2422  00F018  00                 	db	0
  2423  00F019  00                 	db	0
  2424  00F01A  00                 	db	0
  2425  00F01B  00                 	db	0
  2426  00F01C  00                 	db	0
  2427  00F01D  00                 	db	0
  2428  00F01E  00                 	db	0
  2429  00F01F  00                 	db	0
  2430  00F020  00                 	db	0
  2431  00F021  00                 	db	0
  2432  00F022  55                 	db	85
  2433  00F023  50                 	db	80
  2434  00F024  2F                 	db	47
  2435  00F025  44                 	db	68
  2436  00F026  4F                 	db	79
  2437  00F027  57                 	db	87
  2438  00F028  4E                 	db	78
  2439  00F029  00                 	db	0
  2440  00F02A  00                 	db	0
  2441  00F02B  00                 	db	0
  2442  00F02C  00                 	db	0
  2443  00F02D  00                 	db	0
  2444  00F02E  00                 	db	0
  2445  00F02F  00                 	db	0
  2446  00F030  00                 	db	0
  2447  00F031  00                 	db	0
  2448  00F032  00                 	db	0
  2449  00F033  44                 	db	68
  2450  00F034  4F                 	db	79
  2451  00F035  57                 	db	87
  2452  00F036  4E                 	db	78
  2453  00F037  2F                 	db	47
  2454  00F038  55                 	db	85
  2455  00F039  50                 	db	80
  2456  00F03A  00                 	db	0
  2457  00F03B  00                 	db	0
  2458  00F03C  00                 	db	0
  2459  00F03D  00                 	db	0
  2460  00F03E  00                 	db	0
  2461  00F03F  00                 	db	0
  2462  00F040  00                 	db	0
  2463  00F041  00                 	db	0
  2464  00F042  00                 	db	0
  2465  00F043  00                 	db	0
  2466  00F044  53                 	db	83
  2467  00F045  48                 	db	72
  2468  00F046  55                 	db	85
  2469  00F047  46                 	db	70
  2470  00F048  46                 	db	70
  2471  00F049  4C                 	db	76
  2472  00F04A  45                 	db	69
  2473  00F04B  00                 	db	0
  2474  00F04C  00                 	db	0
  2475  00F04D  00                 	db	0
  2476  00F04E  00                 	db	0
  2477  00F04F  00                 	db	0
  2478  00F050  00                 	db	0
  2479  00F051  00                 	db	0
  2480  00F052  00                 	db	0
  2481  00F053  00                 	db	0
  2482  00F054  00                 	db	0
  2483  00F055  52                 	db	82
  2484  00F056  41                 	db	65
  2485  00F057  4E                 	db	78
  2486  00F058  44                 	db	68
  2487  00F059  4F                 	db	79
  2488  00F05A  4D                 	db	77
  2489  00F05B  00                 	db	0
  2490  00F05C  00                 	db	0
  2491  00F05D  00                 	db	0
  2492  00F05E  00                 	db	0
  2493  00F05F  00                 	db	0
  2494  00F060  00                 	db	0
  2495  00F061  00                 	db	0
  2496  00F062  00                 	db	0
  2497  00F063  00                 	db	0
  2498  00F064  00                 	db	0
  2499  00F065  00                 	db	0
  2500  00F066  41                 	db	65
  2501  00F067  53                 	db	83
  2502  00F068  20                 	db	32
  2503  00F069  50                 	db	80
  2504  00F06A  52                 	db	82
  2505  00F06B  45                 	db	69
  2506  00F06C  53                 	db	83
  2507  00F06D  53                 	db	83
  2508  00F06E  45                 	db	69
  2509  00F06F  44                 	db	68
  2510  00F070  00                 	db	0
  2511  00F071  00                 	db	0
  2512  00F072  00                 	db	0
  2513  00F073  00                 	db	0
  2514  00F074  00                 	db	0
  2515  00F075  00                 	db	0
  2516  00F076  00                 	db	0
  2517  00F077  31                 	db	49
  2518  00F078  2F                 	db	47
  2519  00F079  34                 	db	52
  2520  00F07A  00                 	db	0
  2521  00F07B  00                 	db	0
  2522  00F07C  00                 	db	0
  2523  00F07D  00                 	db	0
  2524  00F07E  00                 	db	0
  2525  00F07F  00                 	db	0
  2526  00F080  00                 	db	0
  2527  00F081  00                 	db	0
  2528  00F082  00                 	db	0
  2529  00F083  00                 	db	0
  2530  00F084  00                 	db	0
  2531  00F085  00                 	db	0
  2532  00F086  00                 	db	0
  2533  00F087  00                 	db	0
  2534  00F088  31                 	db	49
  2535  00F089  2F                 	db	47
  2536  00F08A  34                 	db	52
  2537  00F08B  20                 	db	32
  2538  00F08C  44                 	db	68
  2539  00F08D  4F                 	db	79
  2540  00F08E  54                 	db	84
  2541  00F08F  54                 	db	84
  2542  00F090  45                 	db	69
  2543  00F091  44                 	db	68
  2544  00F092  00                 	db	0
  2545  00F093  00                 	db	0
  2546  00F094  00                 	db	0
  2547  00F095  00                 	db	0
  2548  00F096  00                 	db	0
  2549  00F097  00                 	db	0
  2550  00F098  00                 	db	0
  2551  00F099  31                 	db	49
  2552  00F09A  2F                 	db	47
  2553  00F09B  34                 	db	52
  2554  00F09C  20                 	db	32
  2555  00F09D  54                 	db	84
  2556  00F09E  52                 	db	82
  2557  00F09F  49                 	db	73
  2558  00F0A0  50                 	db	80
  2559  00F0A1  4C                 	db	76
  2560  00F0A2  45                 	db	69
  2561  00F0A3  54                 	db	84
  2562  00F0A4  00                 	db	0
  2563  00F0A5  00                 	db	0
  2564  00F0A6  00                 	db	0
  2565  00F0A7  00                 	db	0
  2566  00F0A8  00                 	db	0
  2567  00F0A9  00                 	db	0
  2568  00F0AA  31                 	db	49
  2569  00F0AB  2F                 	db	47
  2570  00F0AC  38                 	db	56
  2571  00F0AD  00                 	db	0
  2572  00F0AE  00                 	db	0
  2573  00F0AF  00                 	db	0
  2574  00F0B0  00                 	db	0
  2575  00F0B1  00                 	db	0
  2576  00F0B2  00                 	db	0
  2577  00F0B3  00                 	db	0
  2578  00F0B4  00                 	db	0
  2579  00F0B5  00                 	db	0
  2580  00F0B6  00                 	db	0
  2581  00F0B7  00                 	db	0
  2582  00F0B8  00                 	db	0
  2583  00F0B9  00                 	db	0
  2584  00F0BA  00                 	db	0
  2585  00F0BB  31                 	db	49
  2586  00F0BC  2F                 	db	47
  2587  00F0BD  38                 	db	56
  2588  00F0BE  20                 	db	32
  2589  00F0BF  44                 	db	68
  2590  00F0C0  4F                 	db	79
  2591  00F0C1  54                 	db	84
  2592  00F0C2  54                 	db	84
  2593  00F0C3  45                 	db	69
  2594  00F0C4  44                 	db	68
  2595  00F0C5  00                 	db	0
  2596  00F0C6  00                 	db	0
  2597  00F0C7  00                 	db	0
  2598  00F0C8  00                 	db	0
  2599  00F0C9  00                 	db	0
  2600  00F0CA  00                 	db	0
  2601  00F0CB  00                 	db	0
  2602  00F0CC  31                 	db	49
  2603  00F0CD  2F                 	db	47
  2604  00F0CE  38                 	db	56
  2605  00F0CF  20                 	db	32
  2606  00F0D0  54                 	db	84
  2607  00F0D1  52                 	db	82
  2608  00F0D2  49                 	db	73
  2609  00F0D3  50                 	db	80
  2610  00F0D4  4C                 	db	76
  2611  00F0D5  45                 	db	69
  2612  00F0D6  54                 	db	84
  2613  00F0D7  00                 	db	0
  2614  00F0D8  00                 	db	0
  2615  00F0D9  00                 	db	0
  2616  00F0DA  00                 	db	0
  2617  00F0DB  00                 	db	0
  2618  00F0DC  00                 	db	0
  2619  00F0DD  31                 	db	49
  2620  00F0DE  2F                 	db	47
  2621  00F0DF  31                 	db	49
  2622  00F0E0  36                 	db	54
  2623  00F0E1  00                 	db	0
  2624  00F0E2  00                 	db	0
  2625  00F0E3  00                 	db	0
  2626  00F0E4  00                 	db	0
  2627  00F0E5  00                 	db	0
  2628  00F0E6  00                 	db	0
  2629  00F0E7  00                 	db	0
  2630  00F0E8  00                 	db	0
  2631  00F0E9  00                 	db	0
  2632  00F0EA  00                 	db	0
  2633  00F0EB  00                 	db	0
  2634  00F0EC  00                 	db	0
  2635  00F0ED  00                 	db	0
  2636  00F0EE  31                 	db	49
  2637  00F0EF  2F                 	db	47
  2638  00F0F0  31                 	db	49
  2639  00F0F1  36                 	db	54
  2640  00F0F2  20                 	db	32
  2641  00F0F3  44                 	db	68
  2642  00F0F4  4F                 	db	79
  2643  00F0F5  54                 	db	84
  2644  00F0F6  54                 	db	84
  2645  00F0F7  45                 	db	69
  2646  00F0F8  44                 	db	68
  2647  00F0F9  00                 	db	0
  2648  00F0FA  00                 	db	0
  2649  00F0FB  00                 	db	0
  2650  00F0FC  00                 	db	0
  2651  00F0FD  00                 	db	0
  2652  00F0FE  00                 	db	0
  2653  00F0FF  31                 	db	49
  2654  00F100  2F                 	db	47
  2655  00F101  31                 	db	49
  2656  00F102  36                 	db	54
  2657  00F103  20                 	db	32
  2658  00F104  54                 	db	84
  2659  00F105  52                 	db	82
  2660  00F106  49                 	db	73
  2661  00F107  50                 	db	80
  2662  00F108  4C                 	db	76
  2663  00F109  45                 	db	69
  2664  00F10A  54                 	db	84
  2665  00F10B  00                 	db	0
  2666  00F10C  00                 	db	0
  2667  00F10D  00                 	db	0
  2668  00F10E  00                 	db	0
  2669  00F10F  00                 	db	0
  2670  00F110  31                 	db	49
  2671  00F111  2F                 	db	47
  2672  00F112  33                 	db	51
  2673  00F113  32                 	db	50
  2674  00F114  00                 	db	0
  2675  00F115  00                 	db	0
  2676  00F116  00                 	db	0
  2677  00F117  00                 	db	0
  2678  00F118  00                 	db	0
  2679  00F119  00                 	db	0
  2680  00F11A  00                 	db	0
  2681  00F11B  00                 	db	0
  2682  00F11C  00                 	db	0
  2683  00F11D  00                 	db	0
  2684  00F11E  00                 	db	0
  2685  00F11F  00                 	db	0
  2686  00F120  00                 	db	0
  2687  00F121  31                 	db	49
  2688  00F122  2F                 	db	47
  2689  00F123  33                 	db	51
  2690  00F124  32                 	db	50
  2691  00F125  20                 	db	32
  2692  00F126  44                 	db	68
  2693  00F127  4F                 	db	79
  2694  00F128  54                 	db	84
  2695  00F129  54                 	db	84
  2696  00F12A  45                 	db	69
  2697  00F12B  44                 	db	68
  2698  00F12C  00                 	db	0
  2699  00F12D  00                 	db	0
  2700  00F12E  00                 	db	0
  2701  00F12F  00                 	db	0
  2702  00F130  00                 	db	0
  2703  00F131  00                 	db	0
  2704  00F132  31                 	db	49
  2705  00F133  2F                 	db	47
  2706  00F134  33                 	db	51
  2707  00F135  32                 	db	50
  2708  00F136  20                 	db	32
  2709  00F137  54                 	db	84
  2710  00F138  52                 	db	82
  2711  00F139  49                 	db	73
  2712  00F13A  50                 	db	80
  2713  00F13B  4C                 	db	76
  2714  00F13C  45                 	db	69
  2715  00F13D  54                 	db	84
  2716  00F13E  00                 	db	0
  2717  00F13F  00                 	db	0
  2718  00F140  00                 	db	0
  2719  00F141  00                 	db	0
  2720  00F142  00                 	db	0
  2721  00F143  53                 	db	83
  2722  00F144  45                 	db	69
  2723  00F145  54                 	db	84
  2724  00F146  2F                 	db	47
  2725  00F147  43                 	db	67
  2726  00F148  4C                 	db	76
  2727  00F149  45                 	db	69
  2728  00F14A  41                 	db	65
  2729  00F14B  52                 	db	82
  2730  00F14C  20                 	db	32
  2731  00F14D  4C                 	db	76
  2732  00F14E  41                 	db	65
  2733  00F14F  54                 	db	84
  2734  00F150  43                 	db	67
  2735  00F151  48                 	db	72
  2736  00F152  00                 	db	0
  2737  00F153  00                 	db	0
  2738  00F154  41                 	db	65
  2739  00F155  55                 	db	85
  2740  00F156  54                 	db	84
  2741  00F157  4F                 	db	79
  2742  00F158  20                 	db	32
  2743  00F159  4C                 	db	76
  2744  00F15A  41                 	db	65
  2745  00F15B  54                 	db	84
  2746  00F15C  43                 	db	67
  2747  00F15D  48                 	db	72
  2748  00F15E  00                 	db	0
  2749  00F15F  00                 	db	0
  2750  00F160  00                 	db	0
  2751  00F161  00                 	db	0
  2752  00F162  00                 	db	0
  2753  00F163  00                 	db	0
  2754  00F164  00                 	db	0
  2755  00F165  55                 	db	85
  2756  00F166  6E                 	db	110
  2757  00F167  2D                 	db	45
  2758  00F168  4C                 	db	76
  2759  00F169  61                 	db	97
  2760  00F16A  74                 	db	116
  2761  00F16B  63                 	db	99
  2762  00F16C  68                 	db	104
  2763  00F16D  20                 	db	32
  2764  00F16E  4D                 	db	77
  2765  00F16F  6F                 	db	111
  2766  00F170  64                 	db	100
  2767  00F171  65                 	db	101
  2768  00F172  00                 	db	0
  2769  00F173  00                 	db	0
  2770  00F174  00                 	db	0
  2771  00F175  00                 	db	0
  2772  00F176  55                 	db	85
  2773  00F177  4E                 	db	78
  2774  00F178  4C                 	db	76
  2775  00F179  41                 	db	65
  2776  00F17A  54                 	db	84
  2777  00F17B  43                 	db	67
  2778  00F17C  48                 	db	72
  2779  00F17D  20                 	db	32
  2780  00F17E  41                 	db	65
  2781  00F17F  4C                 	db	76
  2782  00F180  4C                 	db	76
  2783  00F181  00                 	db	0
  2784  00F182  00                 	db	0
  2785  00F183  00                 	db	0
  2786  00F184  00                 	db	0
  2787  00F185  00                 	db	0
  2788  00F186  00                 	db	0
  2789  00F187  4F                 	db	79
  2790  00F188  4E                 	db	78
  2791  00F189  45                 	db	69
  2792  00F18A  20                 	db	32
  2793  00F18B  41                 	db	65
  2794  00F18C  54                 	db	84
  2795  00F18D  20                 	db	32
  2796  00F18E  41                 	db	65
  2797  00F18F  20                 	db	32
  2798  00F190  54                 	db	84
  2799  00F191  49                 	db	73
  2800  00F192  4D                 	db	77
  2801  00F193  45                 	db	69
  2802  00F194  00                 	db	0
  2803  00F195  00                 	db	0
  2804  00F196  00                 	db	0
  2805  00F197  00                 	db	0
  2806  00F198  52                 	db	82
  2807  00F199  61                 	db	97
  2808  00F19A  6E                 	db	110
  2809  00F19B  64                 	db	100
  2810  00F19C  6F                 	db	111
  2811  00F19D  6D                 	db	109
  2812  00F19E  69                 	db	105
  2813  00F19F  7A                 	db	122
  2814  00F1A0  65                 	db	101
  2815  00F1A1  00                 	db	0
  2816  00F1A2  00                 	db	0
  2817  00F1A3  00                 	db	0
  2818  00F1A4  00                 	db	0
  2819  00F1A5  00                 	db	0
  2820  00F1A6  00                 	db	0
  2821  00F1A7  00                 	db	0
  2822  00F1A8  00                 	db	0
  2823  00F1A9  53                 	db	83
  2824  00F1AA  6B                 	db	107
  2825  00F1AB  69                 	db	105
  2826  00F1AC  70                 	db	112
  2827  00F1AD  20                 	db	32
  2828  00F1AE  46                 	db	70
  2829  00F1AF  69                 	db	105
  2830  00F1B0  72                 	db	114
  2831  00F1B1  73                 	db	115
  2832  00F1B2  74                 	db	116
  2833  00F1B3  2F                 	db	47
  2834  00F1B4  4C                 	db	76
  2835  00F1B5  61                 	db	97
  2836  00F1B6  73                 	db	115
  2837  00F1B7  74                 	db	116
  2838  00F1B8  00                 	db	0
  2839  00F1B9  00                 	db	0
  2840  00F1BA  52                 	db	82
  2841  00F1BB  41                 	db	65
  2842  00F1BC  4E                 	db	78
  2843  00F1BD  44                 	db	68
  2844  00F1BE  4F                 	db	79
  2845  00F1BF  4D                 	db	77
  2846  00F1C0  49                 	db	73
  2847  00F1C1  5A                 	db	90
  2848  00F1C2  45                 	db	69
  2849  00F1C3  20                 	db	32
  2850  00F1C4  41                 	db	65
  2851  00F1C5  55                 	db	85
  2852  00F1C6  54                 	db	84
  2853  00F1C7  4F                 	db	79
  2854  00F1C8  00                 	db	0
  2855  00F1C9  00                 	db	0
  2856  00F1CA  00                 	db	0
  2857  00F1CB  52                 	db	82
  2858  00F1CC  41                 	db	65
  2859  00F1CD  4E                 	db	78
  2860  00F1CE  44                 	db	68
  2861  00F1CF  4F                 	db	79
  2862  00F1D0  4D                 	db	77
  2863  00F1D1  49                 	db	73
  2864  00F1D2  5A                 	db	90
  2865  00F1D3  45                 	db	69
  2866  00F1D4  20                 	db	32
  2867  00F1D5  4F                 	db	79
  2868  00F1D6  4E                 	db	78
  2869  00F1D7  43                 	db	67
  2870  00F1D8  45                 	db	69
  2871  00F1D9  00                 	db	0
  2872  00F1DA  00                 	db	0
  2873  00F1DB  00                 	db	0
  2874  00F1DC  4B                 	db	75
  2875  00F1DD  65                 	db	101
  2876  00F1DE  79                 	db	121
  2877  00F1DF  20                 	db	32
  2878  00F1E0  70                 	db	112
  2879  00F1E1  72                 	db	114
  2880  00F1E2  65                 	db	101
  2881  00F1E3  73                 	db	115
  2882  00F1E4  73                 	db	115
  2883  00F1E5  00                 	db	0
  2884  00F1E6  00                 	db	0
  2885  00F1E7  00                 	db	0
  2886  00F1E8  00                 	db	0
  2887  00F1E9  00                 	db	0
  2888  00F1EA  00                 	db	0
  2889  00F1EB  00                 	db	0
  2890  00F1EC  00                 	db	0
  2891  00F1ED  4B                 	db	75
  2892  00F1EE  65                 	db	101
  2893  00F1EF  79                 	db	121
  2894  00F1F0  20                 	db	32
  2895  00F1F1  72                 	db	114
  2896  00F1F2  65                 	db	101
  2897  00F1F3  6C                 	db	108
  2898  00F1F4  65                 	db	101
  2899  00F1F5  61                 	db	97
  2900  00F1F6  73                 	db	115
  2901  00F1F7  65                 	db	101
  2902  00F1F8  00                 	db	0
  2903  00F1F9  00                 	db	0
  2904  00F1FA  00                 	db	0
  2905  00F1FB  00                 	db	0
  2906  00F1FC  00                 	db	0
  2907  00F1FD  00                 	db	0
  2908  00F1FE  54                 	db	84
  2909  00F1FF  72                 	db	114
  2910  00F200  61                 	db	97
  2911  00F201  6E                 	db	110
  2912  00F202  73                 	db	115
  2913  00F203  70                 	db	112
  2914  00F204  6F                 	db	111
  2915  00F205  73                 	db	115
  2916  00F206  65                 	db	101
  2917  00F207  00                 	db	0
  2918  00F208  00                 	db	0
  2919  00F209  00                 	db	0
  2920  00F20A  00                 	db	0
  2921  00F20B  00                 	db	0
  2922  00F20C  00                 	db	0
  2923  00F20D  00                 	db	0
  2924  00F20E  00                 	db	0
  2925  00F20F  52                 	db	82
  2926  00F210  65                 	db	101
  2927  00F211  73                 	db	115
  2928  00F212  65                 	db	101
  2929  00F213  74                 	db	116
  2930  00F214  00                 	db	0
  2931  00F215  00                 	db	0
  2932  00F216  00                 	db	0
  2933  00F217  00                 	db	0
  2934  00F218  00                 	db	0
  2935  00F219  00                 	db	0
  2936  00F21A  00                 	db	0
  2937  00F21B  00                 	db	0
  2938  00F21C  00                 	db	0
  2939  00F21D  00                 	db	0
  2940  00F21E  00                 	db	0
  2941  00F21F  00                 	db	0
  2942  00F220                     __end_ofascii@LCD_STRINGS:
  2943                           	opt stack 0
  2944  00F220                     _seg_ascii:
  2945                           	opt stack 0
  2946  00F220  3F                 	db	63
  2947  00F221  06                 	db	6
  2948  00F222  5B                 	db	91
  2949  00F223  4F                 	db	79
  2950  00F224  66                 	db	102
  2951  00F225  6D                 	db	109
  2952  00F226  7D                 	db	125
  2953  00F227  07                 	db	7
  2954  00F228  7F                 	db	127
  2955  00F229  6F                 	db	111
  2956  00F22A  00                 	db	0
  2957  00F22B  00                 	db	0
  2958  00F22C  00                 	db	0
  2959  00F22D  00                 	db	0
  2960  00F22E  00                 	db	0
  2961  00F22F  00                 	db	0
  2962  00F230  00                 	db	0
  2963  00F231  77                 	db	119
  2964  00F232  00                 	db	0
  2965  00F233  39                 	db	57
  2966  00F234  00                 	db	0
  2967  00F235  79                 	db	121
  2968  00F236  71                 	db	113
  2969  00F237  3D                 	db	61
  2970  00F238  76                 	db	118
  2971  00F239  30                 	db	48
  2972  00F23A  1E                 	db	30
  2973  00F23B  00                 	db	0
  2974  00F23C  38                 	db	56
  2975  00F23D  00                 	db	0
  2976  00F23E  00                 	db	0
  2977  00F23F  3F                 	db	63
  2978  00F240  73                 	db	115
  2979  00F241  00                 	db	0
  2980  00F242  00                 	db	0
  2981  00F243  6D                 	db	109
  2982  00F244  00                 	db	0
  2983  00F245  3E                 	db	62
  2984  00F246  00                 	db	0
  2985  00F247  00                 	db	0
  2986  00F248  00                 	db	0
  2987  00F249  00                 	db	0
  2988  00F24A  00                 	db	0
  2989  00F24B  00                 	db	0
  2990  00F24C  00                 	db	0
  2991  00F24D  00                 	db	0
  2992  00F24E  00                 	db	0
  2993  00F24F  00                 	db	0
  2994  00F250  00                 	db	0
  2995  00F251  5F                 	db	95
  2996  00F252  7C                 	db	124
  2997  00F253  58                 	db	88
  2998  00F254  5E                 	db	94
  2999  00F255  00                 	db	0
  3000  00F256  00                 	db	0
  3001  00F257  00                 	db	0
  3002  00F258  74                 	db	116
  3003  00F259  00                 	db	0
  3004  00F25A  00                 	db	0
  3005  00F25B  00                 	db	0
  3006  00F25C  00                 	db	0
  3007  00F25D  00                 	db	0
  3008  00F25E  54                 	db	84
  3009  00F25F  5C                 	db	92
  3010  00F260  00                 	db	0
  3011  00F261  67                 	db	103
  3012  00F262  50                 	db	80
  3013  00F263  00                 	db	0
  3014  00F264  78                 	db	120
  3015  00F265  1C                 	db	28
  3016  00F266  00                 	db	0
  3017  00F267  00                 	db	0
  3018  00F268  00                 	db	0
  3019  00F269  6E                 	db	110
  3020  00F26A  00                 	db	0
  3021  00F26B                     __end_of_seg_ascii:
  3022                           	opt stack 0
  3023  00F26B                     _diatonic_seventh_minor:
  3024                           	opt stack 0
  3025  00F26B  00                 	db	0
  3026  00F26C  03                 	db	3
  3027  00F26D  07                 	db	7
  3028  00F26E  0A                 	db	10
  3029  00F26F  02                 	db	2
  3030  00F270  03                 	db	3
  3031  00F271  06                 	db	6
  3032  00F272  0A                 	db	10
  3033  00F273  03                 	db	3
  3034  00F274  04                 	db	4
  3035  00F275  07                 	db	7
  3036  00F276  0B                 	db	11
  3037  00F277  05                 	db	5
  3038  00F278  03                 	db	3
  3039  00F279  07                 	db	7
  3040  00F27A  0A                 	db	10
  3041  00F27B  07                 	db	7
  3042  00F27C  03                 	db	3
  3043  00F27D  07                 	db	7
  3044  00F27E  0A                 	db	10
  3045  00F27F  08                 	db	8
  3046  00F280  04                 	db	4
  3047  00F281  07                 	db	7
  3048  00F282  0B                 	db	11
  3049  00F283  0A                 	db	10
  3050  00F284  04                 	db	4
  3051  00F285  07                 	db	7
  3052  00F286  0A                 	db	10
  3053  00F287  0C                 	db	12
  3054  00F288  03                 	db	3
  3055  00F289  07                 	db	7
  3056  00F28A  0A                 	db	10
  3057  00F28B  0E                 	db	14
  3058  00F28C  03                 	db	3
  3059  00F28D  06                 	db	6
  3060  00F28E  0A                 	db	10
  3061  00F28F  0F                 	db	15
  3062  00F290  04                 	db	4
  3063  00F291  07                 	db	7
  3064  00F292  0B                 	db	11
  3065  00F293  11                 	db	17
  3066  00F294  03                 	db	3
  3067  00F295  07                 	db	7
  3068  00F296  0A                 	db	10
  3069  00F297  13                 	db	19
  3070  00F298  03                 	db	3
  3071  00F299  07                 	db	7
  3072  00F29A  0A                 	db	10
  3073  00F29B  14                 	db	20
  3074  00F29C  04                 	db	4
  3075  00F29D  07                 	db	7
  3076  00F29E  0B                 	db	11
  3077  00F29F  16                 	db	22
  3078  00F2A0  04                 	db	4
  3079  00F2A1  07                 	db	7
  3080  00F2A2  0A                 	db	10
  3081  00F2A3  18                 	db	24
  3082  00F2A4  03                 	db	3
  3083  00F2A5  07                 	db	7
  3084  00F2A6  0A                 	db	10
  3085  00F2A7                     __end_of_diatonic_seventh_minor:
  3086                           	opt stack 0
  3087  00F2A7                     _diatonic_seventh_major:
  3088                           	opt stack 0
  3089  00F2A7  00                 	db	0
  3090  00F2A8  04                 	db	4
  3091  00F2A9  07                 	db	7
  3092  00F2AA  0B                 	db	11
  3093  00F2AB  00                 	db	0
  3094  00F2AC  03                 	db	3
  3095  00F2AD  07                 	db	7
  3096  00F2AE  0A                 	db	10
  3097  00F2AF  00                 	db	0
  3098  00F2B0  03                 	db	3
  3099  00F2B1  07                 	db	7
  3100  00F2B2  0A                 	db	10
  3101  00F2B3  00                 	db	0
  3102  00F2B4  04                 	db	4
  3103  00F2B5  07                 	db	7
  3104  00F2B6  0B                 	db	11
  3105  00F2B7  00                 	db	0
  3106  00F2B8  04                 	db	4
  3107  00F2B9  07                 	db	7
  3108  00F2BA  0A                 	db	10
  3109  00F2BB  00                 	db	0
  3110  00F2BC  03                 	db	3
  3111  00F2BD  07                 	db	7
  3112  00F2BE  0A                 	db	10
  3113  00F2BF  00                 	db	0
  3114  00F2C0  03                 	db	3
  3115  00F2C1  06                 	db	6
  3116  00F2C2  0A                 	db	10
  3117  00F2C3  00                 	db	0
  3118  00F2C4  04                 	db	4
  3119  00F2C5  07                 	db	7
  3120  00F2C6  0B                 	db	11
  3121  00F2C7  00                 	db	0
  3122  00F2C8  03                 	db	3
  3123  00F2C9  07                 	db	7
  3124  00F2CA  0A                 	db	10
  3125  00F2CB  00                 	db	0
  3126  00F2CC  03                 	db	3
  3127  00F2CD  07                 	db	7
  3128  00F2CE  0A                 	db	10
  3129  00F2CF  00                 	db	0
  3130  00F2D0  04                 	db	4
  3131  00F2D1  07                 	db	7
  3132  00F2D2  0B                 	db	11
  3133  00F2D3  00                 	db	0
  3134  00F2D4  04                 	db	4
  3135  00F2D5  07                 	db	7
  3136  00F2D6  0A                 	db	10
  3137  00F2D7  00                 	db	0
  3138  00F2D8  03                 	db	3
  3139  00F2D9  07                 	db	7
  3140  00F2DA  0A                 	db	10
  3141  00F2DB  00                 	db	0
  3142  00F2DC  03                 	db	3
  3143  00F2DD  06                 	db	6
  3144  00F2DE  0A                 	db	10
  3145  00F2DF  00                 	db	0
  3146  00F2E0  04                 	db	4
  3147  00F2E1  07                 	db	7
  3148  00F2E2  0B                 	db	11
  3149  00F2E3                     __end_of_diatonic_seventh_major:
  3150                           	opt stack 0
  3151  00F2E3                     _diatonic_minor:
  3152                           	opt stack 0
  3153  00F2E3  00                 	db	0
  3154  00F2E4  03                 	db	3
  3155  00F2E5  07                 	db	7
  3156  00F2E6  02                 	db	2
  3157  00F2E7  03                 	db	3
  3158  00F2E8  06                 	db	6
  3159  00F2E9  03                 	db	3
  3160  00F2EA  04                 	db	4
  3161  00F2EB  07                 	db	7
  3162  00F2EC  05                 	db	5
  3163  00F2ED  03                 	db	3
  3164  00F2EE  07                 	db	7
  3165  00F2EF  07                 	db	7
  3166  00F2F0  03                 	db	3
  3167  00F2F1  07                 	db	7
  3168  00F2F2  08                 	db	8
  3169  00F2F3  04                 	db	4
  3170  00F2F4  07                 	db	7
  3171  00F2F5  0A                 	db	10
  3172  00F2F6  04                 	db	4
  3173  00F2F7  07                 	db	7
  3174  00F2F8  0C                 	db	12
  3175  00F2F9  03                 	db	3
  3176  00F2FA  07                 	db	7
  3177  00F2FB  0E                 	db	14
  3178  00F2FC  03                 	db	3
  3179  00F2FD  06                 	db	6
  3180  00F2FE  0F                 	db	15
  3181  00F2FF  04                 	db	4
  3182  00F300  07                 	db	7
  3183  00F301  11                 	db	17
  3184  00F302  03                 	db	3
  3185  00F303  07                 	db	7
  3186  00F304  13                 	db	19
  3187  00F305  03                 	db	3
  3188  00F306  07                 	db	7
  3189  00F307  14                 	db	20
  3190  00F308  04                 	db	4
  3191  00F309  07                 	db	7
  3192  00F30A  16                 	db	22
  3193  00F30B  04                 	db	4
  3194  00F30C  07                 	db	7
  3195  00F30D  18                 	db	24
  3196  00F30E  03                 	db	3
  3197  00F30F  07                 	db	7
  3198  00F310                     __end_of_diatonic_minor:
  3199                           	opt stack 0
  3200  00F310                     _diatonic_major:
  3201                           	opt stack 0
  3202  00F310  00                 	db	0
  3203  00F311  04                 	db	4
  3204  00F312  07                 	db	7
  3205  00F313  00                 	db	0
  3206  00F314  03                 	db	3
  3207  00F315  07                 	db	7
  3208  00F316  00                 	db	0
  3209  00F317  03                 	db	3
  3210  00F318  07                 	db	7
  3211  00F319  00                 	db	0
  3212  00F31A  04                 	db	4
  3213  00F31B  07                 	db	7
  3214  00F31C  00                 	db	0
  3215  00F31D  04                 	db	4
  3216  00F31E  07                 	db	7
  3217  00F31F  00                 	db	0
  3218  00F320  03                 	db	3
  3219  00F321  07                 	db	7
  3220  00F322  00                 	db	0
  3221  00F323  03                 	db	3
  3222  00F324  06                 	db	6
  3223  00F325  00                 	db	0
  3224  00F326  04                 	db	4
  3225  00F327  07                 	db	7
  3226  00F328  00                 	db	0
  3227  00F329  03                 	db	3
  3228  00F32A  07                 	db	7
  3229  00F32B  00                 	db	0
  3230  00F32C  03                 	db	3
  3231  00F32D  07                 	db	7
  3232  00F32E  00                 	db	0
  3233  00F32F  04                 	db	4
  3234  00F330  07                 	db	7
  3235  00F331  00                 	db	0
  3236  00F332  04                 	db	4
  3237  00F333  07                 	db	7
  3238  00F334  00                 	db	0
  3239  00F335  03                 	db	3
  3240  00F336  07                 	db	7
  3241  00F337  00                 	db	0
  3242  00F338  03                 	db	3
  3243  00F339  06                 	db	6
  3244  00F33A  00                 	db	0
  3245  00F33B  04                 	db	4
  3246  00F33C  07                 	db	7
  3247  00F33D                     __end_of_diatonic_major:
  3248                           	opt stack 0
  3249  00F33D                     _ttable:
  3250                           	opt stack 0
  3251  00F33D  00                 	db	0
  3252  00F33E  02                 	db	2
  3253  00F33F  04                 	db	4
  3254  00F340  00                 	db	0
  3255  00F341  03                 	db	3
  3256  00F342  00                 	db	0
  3257  00F343  01                 	db	1
  3258  00F344  10                 	db	16
  3259  00F345  03                 	db	3
  3260  00F346  02                 	db	2
  3261  00F347  00                 	db	0
  3262  00F348  00                 	db	0
  3263  00F349  03                 	db	3
  3264  00F34A  02                 	db	2
  3265  00F34B  01                 	db	1
  3266  00F34C  00                 	db	0
  3267  00F34D  06                 	db	6
  3268  00F34E  00                 	db	0
  3269  00F34F  04                 	db	4
  3270  00F350  00                 	db	0
  3271  00F351  06                 	db	6
  3272  00F352  05                 	db	5
  3273  00F353  00                 	db	0
  3274  00F354  20                 	db	32
  3275  00F355  06                 	db	6
  3276  00F356  05                 	db	5
  3277  00F357  04                 	db	4
  3278  00F358  00                 	db	0
  3279  00F359                     __end_of_ttable:
  3280                           	opt stack 0
  3281  00F359                     _seg_bcd_hex:
  3282                           	opt stack 0
  3283  00F359  3F                 	db	63
  3284  00F35A  06                 	db	6
  3285  00F35B  5B                 	db	91
  3286  00F35C  4F                 	db	79
  3287  00F35D  66                 	db	102
  3288  00F35E  6D                 	db	109
  3289  00F35F  7D                 	db	125
  3290  00F360  07                 	db	7
  3291  00F361  7F                 	db	127
  3292  00F362  6F                 	db	111
  3293  00F363  77                 	db	119
  3294  00F364  7C                 	db	124
  3295  00F365  39                 	db	57
  3296  00F366  5E                 	db	94
  3297  00F367  79                 	db	121
  3298  00F368  71                 	db	113
  3299  00F369                     __end_of_seg_bcd_hex:
  3300                           	opt stack 0
  3301  00F369                     _minor_key:
  3302                           	opt stack 0
  3303  00F369  00                 	db	0
  3304  00F36A  02                 	db	2
  3305  00F36B  03                 	db	3
  3306  00F36C  05                 	db	5
  3307  00F36D  07                 	db	7
  3308  00F36E  08                 	db	8
  3309  00F36F  0A                 	db	10
  3310  00F370  0C                 	db	12
  3311  00F371  0E                 	db	14
  3312  00F372  0F                 	db	15
  3313  00F373  11                 	db	17
  3314  00F374  13                 	db	19
  3315  00F375  14                 	db	20
  3316  00F376  16                 	db	22
  3317  00F377  18                 	db	24
  3318  00F378                     __end_of_minor_key:
  3319                           	opt stack 0
  3320  00F378                     _major_key:
  3321                           	opt stack 0
  3322  00F378  00                 	db	0
  3323  00F379  02                 	db	2
  3324  00F37A  04                 	db	4
  3325  00F37B  05                 	db	5
  3326  00F37C  07                 	db	7
  3327  00F37D  09                 	db	9
  3328  00F37E  0B                 	db	11
  3329  00F37F  0C                 	db	12
  3330  00F380  0E                 	db	14
  3331  00F381  10                 	db	16
  3332  00F382  11                 	db	17
  3333  00F383  13                 	db	19
  3334  00F384  15                 	db	21
  3335  00F385  17                 	db	23
  3336  00F386  18                 	db	24
  3337  00F387                     __end_of_major_key:
  3338                           	opt stack 0
  3339  00F387                     _pentatonic_minor_key:
  3340                           	opt stack 0
  3341  00F387  00                 	db	0
  3342  00F388  03                 	db	3
  3343  00F389  05                 	db	5
  3344  00F38A  07                 	db	7
  3345  00F38B  0A                 	db	10
  3346  00F38C  0C                 	db	12
  3347  00F38D  0F                 	db	15
  3348  00F38E  11                 	db	17
  3349  00F38F  13                 	db	19
  3350  00F390  16                 	db	22
  3351  00F391  18                 	db	24
  3352  00F392                     __end_of_pentatonic_minor_key:
  3353                           	opt stack 0
  3354  00F392                     _pentatonic_major_key:
  3355                           	opt stack 0
  3356  00F392  00                 	db	0
  3357  00F393  02                 	db	2
  3358  00F394  04                 	db	4
  3359  00F395  07                 	db	7
  3360  00F396  09                 	db	9
  3361  00F397  0C                 	db	12
  3362  00F398  0E                 	db	14
  3363  00F399  10                 	db	16
  3364  00F39A  13                 	db	19
  3365  00F39B  15                 	db	21
  3366  00F39C  18                 	db	24
  3367  00F39D                     __end_of_pentatonic_major_key:
  3368                           	opt stack 0
  3369  00F39D                     _MAX_NUM_NOTES:
  3370                           	opt stack 0
  3371  00F39D  10                 	db	16
  3372  00F39E                     __end_of_MAX_NUM_NOTES:
  3373                           	opt stack 0
  3374  00F39E                     _LCD_STRINGS:
  3375                           	opt stack 0
  3376  00F39E  4B                 	db	75
  3377  00F39F  45                 	db	69
  3378  00F3A0  59                 	db	89
  3379  00F3A1  42                 	db	66
  3380  00F3A2  4F                 	db	79
  3381  00F3A3  41                 	db	65
  3382  00F3A4  52                 	db	82
  3383  00F3A5  44                 	db	68
  3384  00F3A6  20                 	db	32
  3385  00F3A7  4D                 	db	77
  3386  00F3A8  4F                 	db	79
  3387  00F3A9  44                 	db	68
  3388  00F3AA  45                 	db	69
  3389  00F3AB  3A                 	db	58
  3390  00F3AC  00                 	db	0
  3391  00F3AD  00                 	db	0
  3392  00F3AE  00                 	db	0
  3393  00F3AF  41                 	db	65
  3394  00F3B0  52                 	db	82
  3395  00F3B1  50                 	db	80
  3396  00F3B2  45                 	db	69
  3397  00F3B3  47                 	db	71
  3398  00F3B4  47                 	db	71
  3399  00F3B5  49                 	db	73
  3400  00F3B6  4F                 	db	79
  3401  00F3B7  20                 	db	32
  3402  00F3B8  4D                 	db	77
  3403  00F3B9  45                 	db	69
  3404  00F3BA  4E                 	db	78
  3405  00F3BB  55                 	db	85
  3406  00F3BC  3A                 	db	58
  3407  00F3BD  00                 	db	0
  3408  00F3BE  00                 	db	0
  3409  00F3BF  00                 	db	0
  3410  00F3C0  54                 	db	84
  3411  00F3C1  52                 	db	82
  3412  00F3C2  41                 	db	65
  3413  00F3C3  4E                 	db	78
  3414  00F3C4  53                 	db	83
  3415  00F3C5  50                 	db	80
  3416  00F3C6  4F                 	db	79
  3417  00F3C7  53                 	db	83
  3418  00F3C8  45                 	db	69
  3419  00F3C9  20                 	db	32
  3420  00F3CA  4D                 	db	77
  3421  00F3CB  4F                 	db	79
  3422  00F3CC  44                 	db	68
  3423  00F3CD  45                 	db	69
  3424  00F3CE  3A                 	db	58
  3425  00F3CF  00                 	db	0
  3426  00F3D0  00                 	db	0
  3427  00F3D1  44                 	db	68
  3428  00F3D2  52                 	db	82
  3429  00F3D3  55                 	db	85
  3430  00F3D4  4D                 	db	77
  3431  00F3D5  20                 	db	32
  3432  00F3D6  4D                 	db	77
  3433  00F3D7  4F                 	db	79
  3434  00F3D8  44                 	db	68
  3435  00F3D9  45                 	db	69
  3436  00F3DA  3A                 	db	58
  3437  00F3DB  00                 	db	0
  3438  00F3DC  00                 	db	0
  3439  00F3DD  00                 	db	0
  3440  00F3DE  00                 	db	0
  3441  00F3DF  00                 	db	0
  3442  00F3E0  00                 	db	0
  3443  00F3E1  00                 	db	0
  3444  00F3E2  50                 	db	80
  3445  00F3E3  4F                 	db	79
  3446  00F3E4  54                 	db	84
  3447  00F3E5  53                 	db	83
  3448  00F3E6  20                 	db	32
  3449  00F3E7  4D                 	db	77
  3450  00F3E8  4F                 	db	79
  3451  00F3E9  44                 	db	68
  3452  00F3EA  45                 	db	69
  3453  00F3EB  3A                 	db	58
  3454  00F3EC  00                 	db	0
  3455  00F3ED  00                 	db	0
  3456  00F3EE  00                 	db	0
  3457  00F3EF  00                 	db	0
  3458  00F3F0  00                 	db	0
  3459  00F3F1  00                 	db	0
  3460  00F3F2  00                 	db	0
  3461  00F3F3  4D                 	db	77
  3462  00F3F4  49                 	db	73
  3463  00F3F5  44                 	db	68
  3464  00F3F6  49                 	db	73
  3465  00F3F7  20                 	db	32
  3466  00F3F8  43                 	db	67
  3467  00F3F9  48                 	db	72
  3468  00F3FA  41                 	db	65
  3469  00F3FB  4E                 	db	78
  3470  00F3FC  4E                 	db	78
  3471  00F3FD  45                 	db	69
  3472  00F3FE  4C                 	db	76
  3473  00F3FF  53                 	db	83
  3474  00F400  3A                 	db	58
  3475  00F401  00                 	db	0
  3476  00F402  00                 	db	0
  3477  00F403  00                 	db	0
  3478  00F404  50                 	db	80
  3479  00F405  52                 	db	82
  3480  00F406  4F                 	db	79
  3481  00F407  47                 	db	71
  3482  00F408  52                 	db	82
  3483  00F409  41                 	db	65
  3484  00F40A  4D                 	db	77
  3485  00F40B  20                 	db	32
  3486  00F40C  43                 	db	67
  3487  00F40D  48                 	db	72
  3488  00F40E  41                 	db	65
  3489  00F40F  4E                 	db	78
  3490  00F410  47                 	db	71
  3491  00F411  45                 	db	69
  3492  00F412  3A                 	db	58
  3493  00F413  00                 	db	0
  3494  00F414  00                 	db	0
  3495  00F415  45                 	db	69
  3496  00F416  45                 	db	69
  3497  00F417  50                 	db	80
  3498  00F418  52                 	db	82
  3499  00F419  4F                 	db	79
  3500  00F41A  4D                 	db	77
  3501  00F41B  20                 	db	32
  3502  00F41C  4D                 	db	77
  3503  00F41D  45                 	db	69
  3504  00F41E  4E                 	db	78
  3505  00F41F  55                 	db	85
  3506  00F420  3A                 	db	58
  3507  00F421  00                 	db	0
  3508  00F422  00                 	db	0
  3509  00F423  00                 	db	0
  3510  00F424  00                 	db	0
  3511  00F425  00                 	db	0
  3512  00F426  43                 	db	67
  3513  00F427  48                 	db	72
  3514  00F428  52                 	db	82
  3515  00F429  4F                 	db	79
  3516  00F42A  4D                 	db	77
  3517  00F42B  41                 	db	65
  3518  00F42C  54                 	db	84
  3519  00F42D  49                 	db	73
  3520  00F42E  43                 	db	67
  3521  00F42F  00                 	db	0
  3522  00F430  00                 	db	0
  3523  00F431  00                 	db	0
  3524  00F432  00                 	db	0
  3525  00F433  00                 	db	0
  3526  00F434  00                 	db	0
  3527  00F435  00                 	db	0
  3528  00F436  00                 	db	0
  3529  00F437  4D                 	db	77
  3530  00F438  41                 	db	65
  3531  00F439  4A                 	db	74
  3532  00F43A  4F                 	db	79
  3533  00F43B  52                 	db	82
  3534  00F43C  00                 	db	0
  3535  00F43D  00                 	db	0
  3536  00F43E  00                 	db	0
  3537  00F43F  00                 	db	0
  3538  00F440  00                 	db	0
  3539  00F441  00                 	db	0
  3540  00F442  00                 	db	0
  3541  00F443  00                 	db	0
  3542  00F444  00                 	db	0
  3543  00F445  00                 	db	0
  3544  00F446  00                 	db	0
  3545  00F447  00                 	db	0
  3546  00F448  4D                 	db	77
  3547  00F449  49                 	db	73
  3548  00F44A  4E                 	db	78
  3549  00F44B  4F                 	db	79
  3550  00F44C  52                 	db	82
  3551  00F44D  00                 	db	0
  3552  00F44E  00                 	db	0
  3553  00F44F  00                 	db	0
  3554  00F450  00                 	db	0
  3555  00F451  00                 	db	0
  3556  00F452  00                 	db	0
  3557  00F453  00                 	db	0
  3558  00F454  00                 	db	0
  3559  00F455  00                 	db	0
  3560  00F456  00                 	db	0
  3561  00F457  00                 	db	0
  3562  00F458  00                 	db	0
  3563  00F459  4D                 	db	77
  3564  00F45A  4F                 	db	79
  3565  00F45B  44                 	db	68
  3566  00F45C  45                 	db	69
  3567  00F45D  53                 	db	83
  3568  00F45E  00                 	db	0
  3569  00F45F  00                 	db	0
  3570  00F460  00                 	db	0
  3571  00F461  00                 	db	0
  3572  00F462  00                 	db	0
  3573  00F463  00                 	db	0
  3574  00F464  00                 	db	0
  3575  00F465  00                 	db	0
  3576  00F466  00                 	db	0
  3577  00F467  00                 	db	0
  3578  00F468  00                 	db	0
  3579  00F469  00                 	db	0
  3580  00F46A  50                 	db	80
  3581  00F46B  45                 	db	69
  3582  00F46C  4E                 	db	78
  3583  00F46D  54                 	db	84
  3584  00F46E  41                 	db	65
  3585  00F46F  54                 	db	84
  3586  00F470  4F                 	db	79
  3587  00F471  4E                 	db	78
  3588  00F472  49                 	db	73
  3589  00F473  43                 	db	67
  3590  00F474  20                 	db	32
  3591  00F475  4D                 	db	77
  3592  00F476  41                 	db	65
  3593  00F477  4A                 	db	74
  3594  00F478  4F                 	db	79
  3595  00F479  52                 	db	82
  3596  00F47A  00                 	db	0
  3597  00F47B  50                 	db	80
  3598  00F47C  45                 	db	69
  3599  00F47D  4E                 	db	78
  3600  00F47E  54                 	db	84
  3601  00F47F  41                 	db	65
  3602  00F480  54                 	db	84
  3603  00F481  4F                 	db	79
  3604  00F482  4E                 	db	78
  3605  00F483  49                 	db	73
  3606  00F484  43                 	db	67
  3607  00F485  20                 	db	32
  3608  00F486  4D                 	db	77
  3609  00F487  49                 	db	73
  3610  00F488  4E                 	db	78
  3611  00F489  4F                 	db	79
  3612  00F48A  52                 	db	82
  3613  00F48B  00                 	db	0
  3614  00F48C  54                 	db	84
  3615  00F48D  52                 	db	82
  3616  00F48E  49                 	db	73
  3617  00F48F  41                 	db	65
  3618  00F490  44                 	db	68
  3619  00F491  00                 	db	0
  3620  00F492  00                 	db	0
  3621  00F493  00                 	db	0
  3622  00F494  00                 	db	0
  3623  00F495  00                 	db	0
  3624  00F496  00                 	db	0
  3625  00F497  00                 	db	0
  3626  00F498  00                 	db	0
  3627  00F499  00                 	db	0
  3628  00F49A  00                 	db	0
  3629  00F49B  00                 	db	0
  3630  00F49C  00                 	db	0
  3631  00F49D  44                 	db	68
  3632  00F49E  49                 	db	73
  3633  00F49F  41                 	db	65
  3634  00F4A0  54                 	db	84
  3635  00F4A1  4F                 	db	79
  3636  00F4A2  4E                 	db	78
  3637  00F4A3  49                 	db	73
  3638  00F4A4  43                 	db	67
  3639  00F4A5  20                 	db	32
  3640  00F4A6  54                 	db	84
  3641  00F4A7  20                 	db	32
  3642  00F4A8  4D                 	db	77
  3643  00F4A9  41                 	db	65
  3644  00F4AA  4A                 	db	74
  3645  00F4AB  4F                 	db	79
  3646  00F4AC  52                 	db	82
  3647  00F4AD  00                 	db	0
  3648  00F4AE  44                 	db	68
  3649  00F4AF  49                 	db	73
  3650  00F4B0  41                 	db	65
  3651  00F4B1  54                 	db	84
  3652  00F4B2  4F                 	db	79
  3653  00F4B3  4E                 	db	78
  3654  00F4B4  49                 	db	73
  3655  00F4B5  43                 	db	67
  3656  00F4B6  20                 	db	32
  3657  00F4B7  54                 	db	84
  3658  00F4B8  20                 	db	32
  3659  00F4B9  4D                 	db	77
  3660  00F4BA  49                 	db	73
  3661  00F4BB  4E                 	db	78
  3662  00F4BC  4F                 	db	79
  3663  00F4BD  52                 	db	82
  3664  00F4BE  00                 	db	0
  3665  00F4BF  53                 	db	83
  3666  00F4C0  45                 	db	69
  3667  00F4C1  56                 	db	86
  3668  00F4C2  45                 	db	69
  3669  00F4C3  4E                 	db	78
  3670  00F4C4  54                 	db	84
  3671  00F4C5  48                 	db	72
  3672  00F4C6  00                 	db	0
  3673  00F4C7  00                 	db	0
  3674  00F4C8  00                 	db	0
  3675  00F4C9  00                 	db	0
  3676  00F4CA  00                 	db	0
  3677  00F4CB  00                 	db	0
  3678  00F4CC  00                 	db	0
  3679  00F4CD  00                 	db	0
  3680  00F4CE  00                 	db	0
  3681  00F4CF  00                 	db	0
  3682  00F4D0  44                 	db	68
  3683  00F4D1  49                 	db	73
  3684  00F4D2  41                 	db	65
  3685  00F4D3  54                 	db	84
  3686  00F4D4  4F                 	db	79
  3687  00F4D5  4E                 	db	78
  3688  00F4D6  49                 	db	73
  3689  00F4D7  43                 	db	67
  3690  00F4D8  20                 	db	32
  3691  00F4D9  37                 	db	55
  3692  00F4DA  20                 	db	32
  3693  00F4DB  4D                 	db	77
  3694  00F4DC  41                 	db	65
  3695  00F4DD  4A                 	db	74
  3696  00F4DE  4F                 	db	79
  3697  00F4DF  52                 	db	82
  3698  00F4E0  00                 	db	0
  3699  00F4E1  44                 	db	68
  3700  00F4E2  49                 	db	73
  3701  00F4E3  41                 	db	65
  3702  00F4E4  54                 	db	84
  3703  00F4E5  4F                 	db	79
  3704  00F4E6  4E                 	db	78
  3705  00F4E7  49                 	db	73
  3706  00F4E8  43                 	db	67
  3707  00F4E9  20                 	db	32
  3708  00F4EA  37                 	db	55
  3709  00F4EB  20                 	db	32
  3710  00F4EC  4D                 	db	77
  3711  00F4ED  49                 	db	73
  3712  00F4EE  4E                 	db	78
  3713  00F4EF  4F                 	db	79
  3714  00F4F0  52                 	db	82
  3715  00F4F1  00                 	db	0
  3716  00F4F2  69                 	db	105
  3717  00F4F3  6F                 	db	111
  3718  00F4F4  6E                 	db	110
  3719  00F4F5  69                 	db	105
  3720  00F4F6  61                 	db	97
  3721  00F4F7  6E                 	db	110
  3722  00F4F8  00                 	db	0
  3723  00F4F9  00                 	db	0
  3724  00F4FA  00                 	db	0
  3725  00F4FB  00                 	db	0
  3726  00F4FC  00                 	db	0
  3727  00F4FD  00                 	db	0
  3728  00F4FE  00                 	db	0
  3729  00F4FF  00                 	db	0
  3730  00F500  00                 	db	0
  3731  00F501  00                 	db	0
  3732  00F502  00                 	db	0
  3733  00F503  64                 	db	100
  3734  00F504  6F                 	db	111
  3735  00F505  72                 	db	114
  3736  00F506  69                 	db	105
  3737  00F507  61                 	db	97
  3738  00F508  6E                 	db	110
  3739  00F509  00                 	db	0
  3740  00F50A  00                 	db	0
  3741  00F50B  00                 	db	0
  3742  00F50C  00                 	db	0
  3743  00F50D  00                 	db	0
  3744  00F50E  00                 	db	0
  3745  00F50F  00                 	db	0
  3746  00F510  00                 	db	0
  3747  00F511  00                 	db	0
  3748  00F512  00                 	db	0
  3749  00F513  00                 	db	0
  3750  00F514  70                 	db	112
  3751  00F515  68                 	db	104
  3752  00F516  72                 	db	114
  3753  00F517  79                 	db	121
  3754  00F518  67                 	db	103
  3755  00F519  69                 	db	105
  3756  00F51A  61                 	db	97
  3757  00F51B  6E                 	db	110
  3758  00F51C  00                 	db	0
  3759  00F51D  00                 	db	0
  3760  00F51E  00                 	db	0
  3761  00F51F  00                 	db	0
  3762  00F520  00                 	db	0
  3763  00F521  00                 	db	0
  3764  00F522  00                 	db	0
  3765  00F523  00                 	db	0
  3766  00F524  00                 	db	0
  3767  00F525  6C                 	db	108
  3768  00F526  79                 	db	121
  3769  00F527  64                 	db	100
  3770  00F528  69                 	db	105
  3771  00F529  61                 	db	97
  3772  00F52A  6E                 	db	110
  3773  00F52B  00                 	db	0
  3774  00F52C  00                 	db	0
  3775  00F52D  00                 	db	0
  3776  00F52E  00                 	db	0
  3777  00F52F  00                 	db	0
  3778  00F530  00                 	db	0
  3779  00F531  00                 	db	0
  3780  00F532  00                 	db	0
  3781  00F533  00                 	db	0
  3782  00F534  00                 	db	0
  3783  00F535  00                 	db	0
  3784  00F536  6D                 	db	109
  3785  00F537  69                 	db	105
  3786  00F538  78                 	db	120
  3787  00F539  6F                 	db	111
  3788  00F53A  6C                 	db	108
  3789  00F53B  79                 	db	121
  3790  00F53C  64                 	db	100
  3791  00F53D  69                 	db	105
  3792  00F53E  61                 	db	97
  3793  00F53F  6E                 	db	110
  3794  00F540  00                 	db	0
  3795  00F541  00                 	db	0
  3796  00F542  00                 	db	0
  3797  00F543  00                 	db	0
  3798  00F544  00                 	db	0
  3799  00F545  00                 	db	0
  3800  00F546  00                 	db	0
  3801  00F547  61                 	db	97
  3802  00F548  65                 	db	101
  3803  00F549  6F                 	db	111
  3804  00F54A  6C                 	db	108
  3805  00F54B  69                 	db	105
  3806  00F54C  61                 	db	97
  3807  00F54D  6E                 	db	110
  3808  00F54E  00                 	db	0
  3809  00F54F  00                 	db	0
  3810  00F550  00                 	db	0
  3811  00F551  00                 	db	0
  3812  00F552  00                 	db	0
  3813  00F553  00                 	db	0
  3814  00F554  00                 	db	0
  3815  00F555  00                 	db	0
  3816  00F556  00                 	db	0
  3817  00F557  00                 	db	0
  3818  00F558  6C                 	db	108
  3819  00F559  6F                 	db	111
  3820  00F55A  63                 	db	99
  3821  00F55B  72                 	db	114
  3822  00F55C  69                 	db	105
  3823  00F55D  61                 	db	97
  3824  00F55E  6E                 	db	110
  3825  00F55F  00                 	db	0
  3826  00F560  00                 	db	0
  3827  00F561  00                 	db	0
  3828  00F562  00                 	db	0
  3829  00F563  00                 	db	0
  3830  00F564  00                 	db	0
  3831  00F565  00                 	db	0
  3832  00F566  00                 	db	0
  3833  00F567  00                 	db	0
  3834  00F568  00                 	db	0
  3835  00F569  6D                 	db	109
  3836  00F56A  61                 	db	97
  3837  00F56B  6A                 	db	106
  3838  00F56C  6F                 	db	111
  3839  00F56D  72                 	db	114
  3840  00F56E  20                 	db	32
  3841  00F56F  74                 	db	116
  3842  00F570  72                 	db	114
  3843  00F571  69                 	db	105
  3844  00F572  61                 	db	97
  3845  00F573  64                 	db	100
  3846  00F574  00                 	db	0
  3847  00F575  00                 	db	0
  3848  00F576  00                 	db	0
  3849  00F577  00                 	db	0
  3850  00F578  00                 	db	0
  3851  00F579  00                 	db	0
  3852  00F57A  6D                 	db	109
  3853  00F57B  69                 	db	105
  3854  00F57C  6E                 	db	110
  3855  00F57D  6F                 	db	111
  3856  00F57E  72                 	db	114
  3857  00F57F  20                 	db	32
  3858  00F580  74                 	db	116
  3859  00F581  72                 	db	114
  3860  00F582  69                 	db	105
  3861  00F583  61                 	db	97
  3862  00F584  64                 	db	100
  3863  00F585  00                 	db	0
  3864  00F586  00                 	db	0
  3865  00F587  00                 	db	0
  3866  00F588  00                 	db	0
  3867  00F589  00                 	db	0
  3868  00F58A  00                 	db	0
  3869  00F58B  61                 	db	97
  3870  00F58C  75                 	db	117
  3871  00F58D  67                 	db	103
  3872  00F58E  6D                 	db	109
  3873  00F58F  65                 	db	101
  3874  00F590  6E                 	db	110
  3875  00F591  74                 	db	116
  3876  00F592  65                 	db	101
  3877  00F593  64                 	db	100
  3878  00F594  20                 	db	32
  3879  00F595  74                 	db	116
  3880  00F596  72                 	db	114
  3881  00F597  69                 	db	105
  3882  00F598  61                 	db	97
  3883  00F599  64                 	db	100
  3884  00F59A  00                 	db	0
  3885  00F59B  00                 	db	0
  3886  00F59C  64                 	db	100
  3887  00F59D  69                 	db	105
  3888  00F59E  6D                 	db	109
  3889  00F59F  69                 	db	105
  3890  00F5A0  6E                 	db	110
  3891  00F5A1  69                 	db	105
  3892  00F5A2  73                 	db	115
  3893  00F5A3  68                 	db	104
  3894  00F5A4  65                 	db	101
  3895  00F5A5  64                 	db	100
  3896  00F5A6  20                 	db	32
  3897  00F5A7  74                 	db	116
  3898  00F5A8  72                 	db	114
  3899  00F5A9  69                 	db	105
  3900  00F5AA  61                 	db	97
  3901  00F5AB  64                 	db	100
  3902  00F5AC  00                 	db	0
  3903  00F5AD  64                 	db	100
  3904  00F5AE  6F                 	db	111
  3905  00F5AF  6D                 	db	109
  3906  00F5B0  69                 	db	105
  3907  00F5B1  6E                 	db	110
  3908  00F5B2  61                 	db	97
  3909  00F5B3  6E                 	db	110
  3910  00F5B4  74                 	db	116
  3911  00F5B5  20                 	db	32
  3912  00F5B6  37                 	db	55
  3913  00F5B7  74                 	db	116
  3914  00F5B8  68                 	db	104
  3915  00F5B9  00                 	db	0
  3916  00F5BA  00                 	db	0
  3917  00F5BB  00                 	db	0
  3918  00F5BC  00                 	db	0
  3919  00F5BD  00                 	db	0
  3920  00F5BE  6D                 	db	109
  3921  00F5BF  61                 	db	97
  3922  00F5C0  6A                 	db	106
  3923  00F5C1  6F                 	db	111
  3924  00F5C2  72                 	db	114
  3925  00F5C3  20                 	db	32
  3926  00F5C4  37                 	db	55
  3927  00F5C5  74                 	db	116
  3928  00F5C6  68                 	db	104
  3929  00F5C7  00                 	db	0
  3930  00F5C8  00                 	db	0
  3931  00F5C9  00                 	db	0
  3932  00F5CA  00                 	db	0
  3933  00F5CB  00                 	db	0
  3934  00F5CC  00                 	db	0
  3935  00F5CD  00                 	db	0
  3936  00F5CE  00                 	db	0
  3937  00F5CF  6D                 	db	109
  3938  00F5D0  69                 	db	105
  3939  00F5D1  6E                 	db	110
  3940  00F5D2  6F                 	db	111
  3941  00F5D3  72                 	db	114
  3942  00F5D4  20                 	db	32
  3943  00F5D5  37                 	db	55
  3944  00F5D6  74                 	db	116
  3945  00F5D7  68                 	db	104
  3946  00F5D8  00                 	db	0
  3947  00F5D9  00                 	db	0
  3948  00F5DA  00                 	db	0
  3949  00F5DB  00                 	db	0
  3950  00F5DC  00                 	db	0
  3951  00F5DD  00                 	db	0
  3952  00F5DE  00                 	db	0
  3953  00F5DF  00                 	db	0
  3954  00F5E0  68                 	db	104
  3955  00F5E1  61                 	db	97
  3956  00F5E2  6C                 	db	108
  3957  00F5E3  66                 	db	102
  3958  00F5E4  20                 	db	32
  3959  00F5E5  64                 	db	100
  3960  00F5E6  69                 	db	105
  3961  00F5E7  6D                 	db	109
  3962  00F5E8  69                 	db	105
  3963  00F5E9  6E                 	db	110
  3964  00F5EA  69                 	db	105
  3965  00F5EB  73                 	db	115
  3966  00F5EC  68                 	db	104
  3967  00F5ED  65                 	db	101
  3968  00F5EE  64                 	db	100
  3969  00F5EF  00                 	db	0
  3970  00F5F0  00                 	db	0
  3971  00F5F1  64                 	db	100
  3972  00F5F2  69                 	db	105
  3973  00F5F3  6D                 	db	109
  3974  00F5F4  69                 	db	105
  3975  00F5F5  6E                 	db	110
  3976  00F5F6  69                 	db	105
  3977  00F5F7  73                 	db	115
  3978  00F5F8  68                 	db	104
  3979  00F5F9  65                 	db	101
  3980  00F5FA  64                 	db	100
  3981  00F5FB  20                 	db	32
  3982  00F5FC  37                 	db	55
  3983  00F5FD  74                 	db	116
  3984  00F5FE  68                 	db	104
  3985  00F5FF  00                 	db	0
  3986  00F600  00                 	db	0
  3987  00F601  00                 	db	0
  3988  00F602  48                 	db	72
  3989  00F603  41                 	db	65
  3990  00F604  4C                 	db	76
  3991  00F605  46                 	db	70
  3992  00F606  20                 	db	32
  3993  00F607  53                 	db	83
  3994  00F608  54                 	db	84
  3995  00F609  45                 	db	69
  3996  00F60A  50                 	db	80
  3997  00F60B  00                 	db	0
  3998  00F60C  00                 	db	0
  3999  00F60D  00                 	db	0
  4000  00F60E  00                 	db	0
  4001  00F60F  00                 	db	0
  4002  00F610  00                 	db	0
  4003  00F611  00                 	db	0
  4004  00F612  00                 	db	0
  4005  00F613  43                 	db	67
  4006  00F614  49                 	db	73
  4007  00F615  52                 	db	82
  4008  00F616  43                 	db	67
  4009  00F617  4C                 	db	76
  4010  00F618  45                 	db	69
  4011  00F619  20                 	db	32
  4012  00F61A  4F                 	db	79
  4013  00F61B  46                 	db	70
  4014  00F61C  20                 	db	32
  4015  00F61D  46                 	db	70
  4016  00F61E  49                 	db	73
  4017  00F61F  46                 	db	70
  4018  00F620  54                 	db	84
  4019  00F621  48                 	db	72
  4020  00F622  53                 	db	83
  4021  00F623  00                 	db	0
  4022  00F624  44                 	db	68
  4023  00F625  52                 	db	82
  4024  00F626  55                 	db	85
  4025  00F627  4D                 	db	77
  4026  00F628  20                 	db	32
  4027  00F629  49                 	db	73
  4028  00F62A  53                 	db	83
  4029  00F62B  20                 	db	32
  4030  00F62C  4E                 	db	78
  4031  00F62D  4F                 	db	79
  4032  00F62E  54                 	db	84
  4033  00F62F  45                 	db	69
  4034  00F630  20                 	db	32
  4035  00F631  4F                 	db	79
  4036  00F632  4E                 	db	78
  4037  00F633  00                 	db	0
  4038  00F634  00                 	db	0
  4039  00F635  44                 	db	68
  4040  00F636  52                 	db	82
  4041  00F637  55                 	db	85
  4042  00F638  4D                 	db	77
  4043  00F639  20                 	db	32
  4044  00F63A  49                 	db	73
  4045  00F63B  53                 	db	83
  4046  00F63C  20                 	db	32
  4047  00F63D  43                 	db	67
  4048  00F63E  43                 	db	67
  4049  00F63F  00                 	db	0
  4050  00F640  00                 	db	0
  4051  00F641  00                 	db	0
  4052  00F642  00                 	db	0
  4053  00F643  00                 	db	0
  4054  00F644  00                 	db	0
  4055  00F645  00                 	db	0
  4056  00F646  44                 	db	68
  4057  00F647  52                 	db	82
  4058  00F648  55                 	db	85
  4059  00F649  4D                 	db	77
  4060  00F64A  20                 	db	32
  4061  00F64B  43                 	db	67
  4062  00F64C  43                 	db	67
  4063  00F64D  20                 	db	32
  4064  00F64E  54                 	db	84
  4065  00F64F  59                 	db	89
  4066  00F650  50                 	db	80
  4067  00F651  45                 	db	69
  4068  00F652  00                 	db	0
  4069  00F653  00                 	db	0
  4070  00F654  00                 	db	0
  4071  00F655  00                 	db	0
  4072  00F656  00                 	db	0
  4073  00F657  44                 	db	68
  4074  00F658  52                 	db	82
  4075  00F659  55                 	db	85
  4076  00F65A  4D                 	db	77
  4077  00F65B  20                 	db	32
  4078  00F65C  53                 	db	83
  4079  00F65D  45                 	db	69
  4080  00F65E  54                 	db	84
  4081  00F65F  20                 	db	32
  4082  00F660  4E                 	db	78
  4083  00F661  4E                 	db	78
  4084  00F662  23                 	db	35
  4085  00F663  00                 	db	0
  4086  00F664  00                 	db	0
  4087  00F665  00                 	db	0
  4088  00F666  00                 	db	0
  4089  00F667  00                 	db	0
  4090  00F668  44                 	db	68
  4091  00F669  52                 	db	82
  4092  00F66A  55                 	db	85
  4093  00F66B  4D                 	db	77
  4094  00F66C  20                 	db	32
  4095  00F66D  53                 	db	83
  4096  00F66E  45                 	db	69
  4097  00F66F  54                 	db	84
  4098  00F670  20                 	db	32
  4099  00F671  43                 	db	67
  4100  00F672  43                 	db	67
  4101  00F673  23                 	db	35
  4102  00F674  00                 	db	0
  4103  00F675  00                 	db	0
  4104  00F676  00                 	db	0
  4105  00F677  00                 	db	0
  4106  00F678  00                 	db	0
  4107  00F679  44                 	db	68
  4108  00F67A  52                 	db	82
  4109  00F67B  55                 	db	85
  4110  00F67C  4D                 	db	77
  4111  00F67D  20                 	db	32
  4112  00F67E  43                 	db	67
  4113  00F67F  43                 	db	67
  4114  00F680  20                 	db	32
  4115  00F681  54                 	db	84
  4116  00F682  52                 	db	82
  4117  00F683  49                 	db	73
  4118  00F684  47                 	db	71
  4119  00F685  47                 	db	71
  4120  00F686  45                 	db	69
  4121  00F687  52                 	db	82
  4122  00F688  00                 	db	0
  4123  00F689  00                 	db	0
  4124  00F68A  44                 	db	68
  4125  00F68B  52                 	db	82
  4126  00F68C  55                 	db	85
  4127  00F68D  4D                 	db	77
  4128  00F68E  20                 	db	32
  4129  00F68F  43                 	db	67
  4130  00F690  43                 	db	67
  4131  00F691  20                 	db	32
  4132  00F692  54                 	db	84
  4133  00F693  4F                 	db	79
  4134  00F694  47                 	db	71
  4135  00F695  47                 	db	71
  4136  00F696  4C                 	db	76
  4137  00F697  45                 	db	69
  4138  00F698  00                 	db	0
  4139  00F699  00                 	db	0
  4140  00F69A  00                 	db	0
  4141  00F69B  44                 	db	68
  4142  00F69C  52                 	db	82
  4143  00F69D  55                 	db	85
  4144  00F69E  4D                 	db	77
  4145  00F69F  20                 	db	32
  4146  00F6A0  31                 	db	49
  4147  00F6A1  20                 	db	32
  4148  00F6A2  4E                 	db	78
  4149  00F6A3  4E                 	db	78
  4150  00F6A4  3A                 	db	58
  4151  00F6A5  20                 	db	32
  4152  00F6A6  00                 	db	0
  4153  00F6A7  00                 	db	0
  4154  00F6A8  00                 	db	0
  4155  00F6A9  00                 	db	0
  4156  00F6AA  00                 	db	0
  4157  00F6AB  00                 	db	0
  4158  00F6AC  44                 	db	68
  4159  00F6AD  52                 	db	82
  4160  00F6AE  55                 	db	85
  4161  00F6AF  4D                 	db	77
  4162  00F6B0  20                 	db	32
  4163  00F6B1  32                 	db	50
  4164  00F6B2  20                 	db	32
  4165  00F6B3  4E                 	db	78
  4166  00F6B4  4E                 	db	78
  4167  00F6B5  3A                 	db	58
  4168  00F6B6  20                 	db	32
  4169  00F6B7  00                 	db	0
  4170  00F6B8  00                 	db	0
  4171  00F6B9  00                 	db	0
  4172  00F6BA  00                 	db	0
  4173  00F6BB  00                 	db	0
  4174  00F6BC  00                 	db	0
  4175  00F6BD  44                 	db	68
  4176  00F6BE  52                 	db	82
  4177  00F6BF  55                 	db	85
  4178  00F6C0  4D                 	db	77
  4179  00F6C1  20                 	db	32
  4180  00F6C2  33                 	db	51
  4181  00F6C3  20                 	db	32
  4182  00F6C4  4E                 	db	78
  4183  00F6C5  4E                 	db	78
  4184  00F6C6  3A                 	db	58
  4185  00F6C7  20                 	db	32
  4186  00F6C8  00                 	db	0
  4187  00F6C9  00                 	db	0
  4188  00F6CA  00                 	db	0
  4189  00F6CB  00                 	db	0
  4190  00F6CC  00                 	db	0
  4191  00F6CD  00                 	db	0
  4192  00F6CE  44                 	db	68
  4193  00F6CF  52                 	db	82
  4194  00F6D0  55                 	db	85
  4195  00F6D1  4D                 	db	77
  4196  00F6D2  20                 	db	32
  4197  00F6D3  34                 	db	52
  4198  00F6D4  20                 	db	32
  4199  00F6D5  4E                 	db	78
  4200  00F6D6  4E                 	db	78
  4201  00F6D7  3A                 	db	58
  4202  00F6D8  20                 	db	32
  4203  00F6D9  00                 	db	0
  4204  00F6DA  00                 	db	0
  4205  00F6DB  00                 	db	0
  4206  00F6DC  00                 	db	0
  4207  00F6DD  00                 	db	0
  4208  00F6DE  00                 	db	0
  4209  00F6DF  44                 	db	68
  4210  00F6E0  52                 	db	82
  4211  00F6E1  55                 	db	85
  4212  00F6E2  4D                 	db	77
  4213  00F6E3  20                 	db	32
  4214  00F6E4  35                 	db	53
  4215  00F6E5  20                 	db	32
  4216  00F6E6  4E                 	db	78
  4217  00F6E7  4E                 	db	78
  4218  00F6E8  3A                 	db	58
  4219  00F6E9  20                 	db	32
  4220  00F6EA  00                 	db	0
  4221  00F6EB  00                 	db	0
  4222  00F6EC  00                 	db	0
  4223  00F6ED  00                 	db	0
  4224  00F6EE  00                 	db	0
  4225  00F6EF  00                 	db	0
  4226  00F6F0  44                 	db	68
  4227  00F6F1  52                 	db	82
  4228  00F6F2  55                 	db	85
  4229  00F6F3  4D                 	db	77
  4230  00F6F4  20                 	db	32
  4231  00F6F5  36                 	db	54
  4232  00F6F6  20                 	db	32
  4233  00F6F7  4E                 	db	78
  4234  00F6F8  4E                 	db	78
  4235  00F6F9  3A                 	db	58
  4236  00F6FA  20                 	db	32
  4237  00F6FB  00                 	db	0
  4238  00F6FC  00                 	db	0
  4239  00F6FD  00                 	db	0
  4240  00F6FE  00                 	db	0
  4241  00F6FF  00                 	db	0
  4242  00F700  00                 	db	0
  4243  00F701  44                 	db	68
  4244  00F702  52                 	db	82
  4245  00F703  55                 	db	85
  4246  00F704  4D                 	db	77
  4247  00F705  20                 	db	32
  4248  00F706  37                 	db	55
  4249  00F707  20                 	db	32
  4250  00F708  4E                 	db	78
  4251  00F709  4E                 	db	78
  4252  00F70A  3A                 	db	58
  4253  00F70B  20                 	db	32
  4254  00F70C  00                 	db	0
  4255  00F70D  00                 	db	0
  4256  00F70E  00                 	db	0
  4257  00F70F  00                 	db	0
  4258  00F710  00                 	db	0
  4259  00F711  00                 	db	0
  4260  00F712  44                 	db	68
  4261  00F713  52                 	db	82
  4262  00F714  55                 	db	85
  4263  00F715  4D                 	db	77
  4264  00F716  20                 	db	32
  4265  00F717  38                 	db	56
  4266  00F718  20                 	db	32
  4267  00F719  4E                 	db	78
  4268  00F71A  4E                 	db	78
  4269  00F71B  3A                 	db	58
  4270  00F71C  20                 	db	32
  4271  00F71D  00                 	db	0
  4272  00F71E  00                 	db	0
  4273  00F71F  00                 	db	0
  4274  00F720  00                 	db	0
  4275  00F721  00                 	db	0
  4276  00F722  00                 	db	0
  4277  00F723  44                 	db	68
  4278  00F724  52                 	db	82
  4279  00F725  55                 	db	85
  4280  00F726  4D                 	db	77
  4281  00F727  20                 	db	32
  4282  00F728  31                 	db	49
  4283  00F729  20                 	db	32
  4284  00F72A  43                 	db	67
  4285  00F72B  43                 	db	67
  4286  00F72C  3A                 	db	58
  4287  00F72D  20                 	db	32
  4288  00F72E  00                 	db	0
  4289  00F72F  00                 	db	0
  4290  00F730  00                 	db	0
  4291  00F731  00                 	db	0
  4292  00F732  00                 	db	0
  4293  00F733  00                 	db	0
  4294  00F734  44                 	db	68
  4295  00F735  52                 	db	82
  4296  00F736  55                 	db	85
  4297  00F737  4D                 	db	77
  4298  00F738  20                 	db	32
  4299  00F739  32                 	db	50
  4300  00F73A  20                 	db	32
  4301  00F73B  43                 	db	67
  4302  00F73C  43                 	db	67
  4303  00F73D  3A                 	db	58
  4304  00F73E  20                 	db	32
  4305  00F73F  00                 	db	0
  4306  00F740  00                 	db	0
  4307  00F741  00                 	db	0
  4308  00F742  00                 	db	0
  4309  00F743  00                 	db	0
  4310  00F744  00                 	db	0
  4311  00F745  44                 	db	68
  4312  00F746  52                 	db	82
  4313  00F747  55                 	db	85
  4314  00F748  4D                 	db	77
  4315  00F749  20                 	db	32
  4316  00F74A  33                 	db	51
  4317  00F74B  20                 	db	32
  4318  00F74C  43                 	db	67
  4319  00F74D  43                 	db	67
  4320  00F74E  3A                 	db	58
  4321  00F74F  20                 	db	32
  4322  00F750  00                 	db	0
  4323  00F751  00                 	db	0
  4324  00F752  00                 	db	0
  4325  00F753  00                 	db	0
  4326  00F754  00                 	db	0
  4327  00F755  00                 	db	0
  4328  00F756  44                 	db	68
  4329  00F757  52                 	db	82
  4330  00F758  55                 	db	85
  4331  00F759  4D                 	db	77
  4332  00F75A  20                 	db	32
  4333  00F75B  34                 	db	52
  4334  00F75C  20                 	db	32
  4335  00F75D  43                 	db	67
  4336  00F75E  43                 	db	67
  4337  00F75F  3A                 	db	58
  4338  00F760  20                 	db	32
  4339  00F761  00                 	db	0
  4340  00F762  00                 	db	0
  4341  00F763  00                 	db	0
  4342  00F764  00                 	db	0
  4343  00F765  00                 	db	0
  4344  00F766  00                 	db	0
  4345  00F767  44                 	db	68
  4346  00F768  52                 	db	82
  4347  00F769  55                 	db	85
  4348  00F76A  4D                 	db	77
  4349  00F76B  20                 	db	32
  4350  00F76C  35                 	db	53
  4351  00F76D  20                 	db	32
  4352  00F76E  43                 	db	67
  4353  00F76F  43                 	db	67
  4354  00F770  3A                 	db	58
  4355  00F771  20                 	db	32
  4356  00F772  00                 	db	0
  4357  00F773  00                 	db	0
  4358  00F774  00                 	db	0
  4359  00F775  00                 	db	0
  4360  00F776  00                 	db	0
  4361  00F777  00                 	db	0
  4362  00F778  44                 	db	68
  4363  00F779  52                 	db	82
  4364  00F77A  55                 	db	85
  4365  00F77B  4D                 	db	77
  4366  00F77C  20                 	db	32
  4367  00F77D  36                 	db	54
  4368  00F77E  20                 	db	32
  4369  00F77F  43                 	db	67
  4370  00F780  43                 	db	67
  4371  00F781  3A                 	db	58
  4372  00F782  20                 	db	32
  4373  00F783  00                 	db	0
  4374  00F784  00                 	db	0
  4375  00F785  00                 	db	0
  4376  00F786  00                 	db	0
  4377  00F787  00                 	db	0
  4378  00F788  00                 	db	0
  4379  00F789  44                 	db	68
  4380  00F78A  52                 	db	82
  4381  00F78B  55                 	db	85
  4382  00F78C  4D                 	db	77
  4383  00F78D  20                 	db	32
  4384  00F78E  37                 	db	55
  4385  00F78F  20                 	db	32
  4386  00F790  43                 	db	67
  4387  00F791  43                 	db	67
  4388  00F792  3A                 	db	58
  4389  00F793  20                 	db	32
  4390  00F794  00                 	db	0
  4391  00F795  00                 	db	0
  4392  00F796  00                 	db	0
  4393  00F797  00                 	db	0
  4394  00F798  00                 	db	0
  4395  00F799  00                 	db	0
  4396  00F79A  44                 	db	68
  4397  00F79B  52                 	db	82
  4398  00F79C  55                 	db	85
  4399  00F79D  4D                 	db	77
  4400  00F79E  20                 	db	32
  4401  00F79F  38                 	db	56
  4402  00F7A0  20                 	db	32
  4403  00F7A1  43                 	db	67
  4404  00F7A2  43                 	db	67
  4405  00F7A3  3A                 	db	58
  4406  00F7A4  20                 	db	32
  4407  00F7A5  00                 	db	0
  4408  00F7A6  00                 	db	0
  4409  00F7A7  00                 	db	0
  4410  00F7A8  00                 	db	0
  4411  00F7A9  00                 	db	0
  4412  00F7AA  00                 	db	0
  4413  00F7AB  50                 	db	80
  4414  00F7AC  4F                 	db	79
  4415  00F7AD  54                 	db	84
  4416  00F7AE  53                 	db	83
  4417  00F7AF  20                 	db	32
  4418  00F7B0  52                 	db	82
  4419  00F7B1  45                 	db	69
  4420  00F7B2  53                 	db	83
  4421  00F7B3  4F                 	db	79
  4422  00F7B4  4C                 	db	76
  4423  00F7B5  55                 	db	85
  4424  00F7B6  54                 	db	84
  4425  00F7B7  49                 	db	73
  4426  00F7B8  4F                 	db	79
  4427  00F7B9  4E                 	db	78
  4428  00F7BA  00                 	db	0
  4429  00F7BB  00                 	db	0
  4430  00F7BC  50                 	db	80
  4431  00F7BD  4F                 	db	79
  4432  00F7BE  54                 	db	84
  4433  00F7BF  53                 	db	83
  4434  00F7C0  20                 	db	32
  4435  00F7C1  41                 	db	65
  4436  00F7C2  4C                 	db	76
  4437  00F7C3  50                 	db	80
  4438  00F7C4  48                 	db	72
  4439  00F7C5  41                 	db	65
  4440  00F7C6  00                 	db	0
  4441  00F7C7  00                 	db	0
  4442  00F7C8  00                 	db	0
  4443  00F7C9  00                 	db	0
  4444  00F7CA  00                 	db	0
  4445  00F7CB  00                 	db	0
  4446  00F7CC  00                 	db	0
  4447  00F7CD  50                 	db	80
  4448  00F7CE  4F                 	db	79
  4449  00F7CF  54                 	db	84
  4450  00F7D0  53                 	db	83
  4451  00F7D1  20                 	db	32
  4452  00F7D2  53                 	db	83
  4453  00F7D3  45                 	db	69
  4454  00F7D4  54                 	db	84
  4455  00F7D5  20                 	db	32
  4456  00F7D6  43                 	db	67
  4457  00F7D7  43                 	db	67
  4458  00F7D8  23                 	db	35
  4459  00F7D9  00                 	db	0
  4460  00F7DA  00                 	db	0
  4461  00F7DB  00                 	db	0
  4462  00F7DC  00                 	db	0
  4463  00F7DD  00                 	db	0
  4464  00F7DE  53                 	db	83
  4465  00F7DF  4C                 	db	76
  4466  00F7E0  49                 	db	73
  4467  00F7E1  44                 	db	68
  4468  00F7E2  45                 	db	69
  4469  00F7E3  50                 	db	80
  4470  00F7E4  4F                 	db	79
  4471  00F7E5  54                 	db	84
  4472  00F7E6  20                 	db	32
  4473  00F7E7  53                 	db	83
  4474  00F7E8  45                 	db	69
  4475  00F7E9  54                 	db	84
  4476  00F7EA  20                 	db	32
  4477  00F7EB  43                 	db	67
  4478  00F7EC  43                 	db	67
  4479  00F7ED  23                 	db	35
  4480  00F7EE  00                 	db	0
  4481  00F7EF  4A                 	db	74
  4482  00F7F0  4F                 	db	79
  4483  00F7F1  59                 	db	89
  4484  00F7F2  53                 	db	83
  4485  00F7F3  54                 	db	84
  4486  00F7F4  49                 	db	73
  4487  00F7F5  43                 	db	67
  4488  00F7F6  4B                 	db	75
  4489  00F7F7  20                 	db	32
  4490  00F7F8  53                 	db	83
  4491  00F7F9  45                 	db	69
  4492  00F7FA  54                 	db	84
  4493  00F7FB  20                 	db	32
  4494  00F7FC  43                 	db	67
  4495  00F7FD  43                 	db	67
  4496  00F7FE  23                 	db	35
  4497  00F7FF  00                 	db	0
  4498  00F800  50                 	db	80
  4499  00F801  4F                 	db	79
  4500  00F802  54                 	db	84
  4501  00F803  53                 	db	83
  4502  00F804  20                 	db	32
  4503  00F805  4C                 	db	76
  4504  00F806  4F                 	db	79
  4505  00F807  20                 	db	32
  4506  00F808  52                 	db	82
  4507  00F809  45                 	db	69
  4508  00F80A  53                 	db	83
  4509  00F80B  00                 	db	0
  4510  00F80C  00                 	db	0
  4511  00F80D  00                 	db	0
  4512  00F80E  00                 	db	0
  4513  00F80F  00                 	db	0
  4514  00F810  00                 	db	0
  4515  00F811  50                 	db	80
  4516  00F812  4F                 	db	79
  4517  00F813  54                 	db	84
  4518  00F814  53                 	db	83
  4519  00F815  20                 	db	32
  4520  00F816  48                 	db	72
  4521  00F817  49                 	db	73
  4522  00F818  20                 	db	32
  4523  00F819  52                 	db	82
  4524  00F81A  45                 	db	69
  4525  00F81B  53                 	db	83
  4526  00F81C  00                 	db	0
  4527  00F81D  00                 	db	0
  4528  00F81E  00                 	db	0
  4529  00F81F  00                 	db	0
  4530  00F820  00                 	db	0
  4531  00F821  00                 	db	0
  4532  00F822  50                 	db	80
  4533  00F823  31                 	db	49
  4534  00F824  20                 	db	32
  4535  00F825  43                 	db	67
  4536  00F826  43                 	db	67
  4537  00F827  3A                 	db	58
  4538  00F828  00                 	db	0
  4539  00F829  00                 	db	0
  4540  00F82A  00                 	db	0
  4541  00F82B  00                 	db	0
  4542  00F82C  00                 	db	0
  4543  00F82D  00                 	db	0
  4544  00F82E  00                 	db	0
  4545  00F82F  00                 	db	0
  4546  00F830  00                 	db	0
  4547  00F831  00                 	db	0
  4548  00F832  00                 	db	0
  4549  00F833  50                 	db	80
  4550  00F834  32                 	db	50
  4551  00F835  20                 	db	32
  4552  00F836  43                 	db	67
  4553  00F837  43                 	db	67
  4554  00F838  3A                 	db	58
  4555  00F839  00                 	db	0
  4556  00F83A  00                 	db	0
  4557  00F83B  00                 	db	0
  4558  00F83C  00                 	db	0
  4559  00F83D  00                 	db	0
  4560  00F83E  00                 	db	0
  4561  00F83F  00                 	db	0
  4562  00F840  00                 	db	0
  4563  00F841  00                 	db	0
  4564  00F842  00                 	db	0
  4565  00F843  00                 	db	0
  4566  00F844  50                 	db	80
  4567  00F845  33                 	db	51
  4568  00F846  20                 	db	32
  4569  00F847  43                 	db	67
  4570  00F848  43                 	db	67
  4571  00F849  3A                 	db	58
  4572  00F84A  00                 	db	0
  4573  00F84B  00                 	db	0
  4574  00F84C  00                 	db	0
  4575  00F84D  00                 	db	0
  4576  00F84E  00                 	db	0
  4577  00F84F  00                 	db	0
  4578  00F850  00                 	db	0
  4579  00F851  00                 	db	0
  4580  00F852  00                 	db	0
  4581  00F853  00                 	db	0
  4582  00F854  00                 	db	0
  4583  00F855  50                 	db	80
  4584  00F856  34                 	db	52
  4585  00F857  20                 	db	32
  4586  00F858  43                 	db	67
  4587  00F859  43                 	db	67
  4588  00F85A  3A                 	db	58
  4589  00F85B  00                 	db	0
  4590  00F85C  00                 	db	0
  4591  00F85D  00                 	db	0
  4592  00F85E  00                 	db	0
  4593  00F85F  00                 	db	0
  4594  00F860  00                 	db	0
  4595  00F861  00                 	db	0
  4596  00F862  00                 	db	0
  4597  00F863  00                 	db	0
  4598  00F864  00                 	db	0
  4599  00F865  00                 	db	0
  4600  00F866  50                 	db	80
  4601  00F867  35                 	db	53
  4602  00F868  20                 	db	32
  4603  00F869  43                 	db	67
  4604  00F86A  43                 	db	67
  4605  00F86B  3A                 	db	58
  4606  00F86C  00                 	db	0
  4607  00F86D  00                 	db	0
  4608  00F86E  00                 	db	0
  4609  00F86F  00                 	db	0
  4610  00F870  00                 	db	0
  4611  00F871  00                 	db	0
  4612  00F872  00                 	db	0
  4613  00F873  00                 	db	0
  4614  00F874  00                 	db	0
  4615  00F875  00                 	db	0
  4616  00F876  00                 	db	0
  4617  00F877  50                 	db	80
  4618  00F878  36                 	db	54
  4619  00F879  20                 	db	32
  4620  00F87A  43                 	db	67
  4621  00F87B  43                 	db	67
  4622  00F87C  3A                 	db	58
  4623  00F87D  00                 	db	0
  4624  00F87E  00                 	db	0
  4625  00F87F  00                 	db	0
  4626  00F880  00                 	db	0
  4627  00F881  00                 	db	0
  4628  00F882  00                 	db	0
  4629  00F883  00                 	db	0
  4630  00F884  00                 	db	0
  4631  00F885  00                 	db	0
  4632  00F886  00                 	db	0
  4633  00F887  00                 	db	0
  4634  00F888  50                 	db	80
  4635  00F889  37                 	db	55
  4636  00F88A  20                 	db	32
  4637  00F88B  43                 	db	67
  4638  00F88C  43                 	db	67
  4639  00F88D  3A                 	db	58
  4640  00F88E  00                 	db	0
  4641  00F88F  00                 	db	0
  4642  00F890  00                 	db	0
  4643  00F891  00                 	db	0
  4644  00F892  00                 	db	0
  4645  00F893  00                 	db	0
  4646  00F894  00                 	db	0
  4647  00F895  00                 	db	0
  4648  00F896  00                 	db	0
  4649  00F897  00                 	db	0
  4650  00F898  00                 	db	0
  4651  00F899  53                 	db	83
  4652  00F89A  31                 	db	49
  4653  00F89B  20                 	db	32
  4654  00F89C  43                 	db	67
  4655  00F89D  43                 	db	67
  4656  00F89E  3A                 	db	58
  4657  00F89F  20                 	db	32
  4658  00F8A0  00                 	db	0
  4659  00F8A1  00                 	db	0
  4660  00F8A2  00                 	db	0
  4661  00F8A3  00                 	db	0
  4662  00F8A4  00                 	db	0
  4663  00F8A5  00                 	db	0
  4664  00F8A6  00                 	db	0
  4665  00F8A7  00                 	db	0
  4666  00F8A8  00                 	db	0
  4667  00F8A9  00                 	db	0
  4668  00F8AA  53                 	db	83
  4669  00F8AB  32                 	db	50
  4670  00F8AC  20                 	db	32
  4671  00F8AD  43                 	db	67
  4672  00F8AE  43                 	db	67
  4673  00F8AF  3A                 	db	58
  4674  00F8B0  20                 	db	32
  4675  00F8B1  00                 	db	0
  4676  00F8B2  00                 	db	0
  4677  00F8B3  00                 	db	0
  4678  00F8B4  00                 	db	0
  4679  00F8B5  00                 	db	0
  4680  00F8B6  00                 	db	0
  4681  00F8B7  00                 	db	0
  4682  00F8B8  00                 	db	0
  4683  00F8B9  00                 	db	0
  4684  00F8BA  00                 	db	0
  4685  00F8BB  53                 	db	83
  4686  00F8BC  33                 	db	51
  4687  00F8BD  20                 	db	32
  4688  00F8BE  43                 	db	67
  4689  00F8BF  43                 	db	67
  4690  00F8C0  3A                 	db	58
  4691  00F8C1  20                 	db	32
  4692  00F8C2  00                 	db	0
  4693  00F8C3  00                 	db	0
  4694  00F8C4  00                 	db	0
  4695  00F8C5  00                 	db	0
  4696  00F8C6  00                 	db	0
  4697  00F8C7  00                 	db	0
  4698  00F8C8  00                 	db	0
  4699  00F8C9  00                 	db	0
  4700  00F8CA  00                 	db	0
  4701  00F8CB  00                 	db	0
  4702  00F8CC  53                 	db	83
  4703  00F8CD  34                 	db	52
  4704  00F8CE  20                 	db	32
  4705  00F8CF  43                 	db	67
  4706  00F8D0  43                 	db	67
  4707  00F8D1  3A                 	db	58
  4708  00F8D2  20                 	db	32
  4709  00F8D3  00                 	db	0
  4710  00F8D4  00                 	db	0
  4711  00F8D5  00                 	db	0
  4712  00F8D6  00                 	db	0
  4713  00F8D7  00                 	db	0
  4714  00F8D8  00                 	db	0
  4715  00F8D9  00                 	db	0
  4716  00F8DA  00                 	db	0
  4717  00F8DB  00                 	db	0
  4718  00F8DC  00                 	db	0
  4719  00F8DD  53                 	db	83
  4720  00F8DE  35                 	db	53
  4721  00F8DF  20                 	db	32
  4722  00F8E0  43                 	db	67
  4723  00F8E1  43                 	db	67
  4724  00F8E2  3A                 	db	58
  4725  00F8E3  20                 	db	32
  4726  00F8E4  00                 	db	0
  4727  00F8E5  00                 	db	0
  4728  00F8E6  00                 	db	0
  4729  00F8E7  00                 	db	0
  4730  00F8E8  00                 	db	0
  4731  00F8E9  00                 	db	0
  4732  00F8EA  00                 	db	0
  4733  00F8EB  00                 	db	0
  4734  00F8EC  00                 	db	0
  4735  00F8ED  00                 	db	0
  4736  00F8EE  53                 	db	83
  4737  00F8EF  36                 	db	54
  4738  00F8F0  20                 	db	32
  4739  00F8F1  43                 	db	67
  4740  00F8F2  43                 	db	67
  4741  00F8F3  3A                 	db	58
  4742  00F8F4  20                 	db	32
  4743  00F8F5  00                 	db	0
  4744  00F8F6  00                 	db	0
  4745  00F8F7  00                 	db	0
  4746  00F8F8  00                 	db	0
  4747  00F8F9  00                 	db	0
  4748  00F8FA  00                 	db	0
  4749  00F8FB  00                 	db	0
  4750  00F8FC  00                 	db	0
  4751  00F8FD  00                 	db	0
  4752  00F8FE  00                 	db	0
  4753  00F8FF  53                 	db	83
  4754  00F900  37                 	db	55
  4755  00F901  20                 	db	32
  4756  00F902  43                 	db	67
  4757  00F903  43                 	db	67
  4758  00F904  3A                 	db	58
  4759  00F905  20                 	db	32
  4760  00F906  00                 	db	0
  4761  00F907  00                 	db	0
  4762  00F908  00                 	db	0
  4763  00F909  00                 	db	0
  4764  00F90A  00                 	db	0
  4765  00F90B  00                 	db	0
  4766  00F90C  00                 	db	0
  4767  00F90D  00                 	db	0
  4768  00F90E  00                 	db	0
  4769  00F90F  00                 	db	0
  4770  00F910  4A                 	db	74
  4771  00F911  58                 	db	88
  4772  00F912  20                 	db	32
  4773  00F913  43                 	db	67
  4774  00F914  43                 	db	67
  4775  00F915  3A                 	db	58
  4776  00F916  20                 	db	32
  4777  00F917  00                 	db	0
  4778  00F918  00                 	db	0
  4779  00F919  00                 	db	0
  4780  00F91A  00                 	db	0
  4781  00F91B  00                 	db	0
  4782  00F91C  00                 	db	0
  4783  00F91D  00                 	db	0
  4784  00F91E  00                 	db	0
  4785  00F91F  00                 	db	0
  4786  00F920  00                 	db	0
  4787  00F921  4A                 	db	74
  4788  00F922  59                 	db	89
  4789  00F923  20                 	db	32
  4790  00F924  43                 	db	67
  4791  00F925  43                 	db	67
  4792  00F926  3A                 	db	58
  4793  00F927  20                 	db	32
  4794  00F928  00                 	db	0
  4795  00F929  00                 	db	0
  4796  00F92A  00                 	db	0
  4797  00F92B  00                 	db	0
  4798  00F92C  00                 	db	0
  4799  00F92D  00                 	db	0
  4800  00F92E  00                 	db	0
  4801  00F92F  00                 	db	0
  4802  00F930  00                 	db	0
  4803  00F931  00                 	db	0
  4804  00F932  4D                 	db	77
  4805  00F933  61                 	db	97
  4806  00F934  69                 	db	105
  4807  00F935  6E                 	db	110
  4808  00F936  20                 	db	32
  4809  00F937  63                 	db	99
  4810  00F938  68                 	db	104
  4811  00F939  61                 	db	97
  4812  00F93A  6E                 	db	110
  4813  00F93B  6E                 	db	110
  4814  00F93C  65                 	db	101
  4815  00F93D  6C                 	db	108
  4816  00F93E  00                 	db	0
  4817  00F93F  00                 	db	0
  4818  00F940  00                 	db	0
  4819  00F941  00                 	db	0
  4820  00F942  00                 	db	0
  4821  00F943  44                 	db	68
  4822  00F944  72                 	db	114
  4823  00F945  75                 	db	117
  4824  00F946  6D                 	db	109
  4825  00F947  20                 	db	32
  4826  00F948  63                 	db	99
  4827  00F949  68                 	db	104
  4828  00F94A  61                 	db	97
  4829  00F94B  6E                 	db	110
  4830  00F94C  6E                 	db	110
  4831  00F94D  65                 	db	101
  4832  00F94E  6C                 	db	108
  4833  00F94F  00                 	db	0
  4834  00F950  00                 	db	0
  4835  00F951  00                 	db	0
  4836  00F952  00                 	db	0
  4837  00F953  00                 	db	0
  4838  00F954  53                 	db	83
  4839  00F955  61                 	db	97
  4840  00F956  76                 	db	118
  4841  00F957  65                 	db	101
  4842  00F958  20                 	db	32
  4843  00F959  73                 	db	115
  4844  00F95A  65                 	db	101
  4845  00F95B  74                 	db	116
  4846  00F95C  74                 	db	116
  4847  00F95D  69                 	db	105
  4848  00F95E  6E                 	db	110
  4849  00F95F  67                 	db	103
  4850  00F960  73                 	db	115
  4851  00F961  00                 	db	0
  4852  00F962  00                 	db	0
  4853  00F963  00                 	db	0
  4854  00F964  00                 	db	0
  4855  00F965  4C                 	db	76
  4856  00F966  6F                 	db	111
  4857  00F967  61                 	db	97
  4858  00F968  64                 	db	100
  4859  00F969  20                 	db	32
  4860  00F96A  73                 	db	115
  4861  00F96B  65                 	db	101
  4862  00F96C  74                 	db	116
  4863  00F96D  74                 	db	116
  4864  00F96E  69                 	db	105
  4865  00F96F  6E                 	db	110
  4866  00F970  67                 	db	103
  4867  00F971  73                 	db	115
  4868  00F972  00                 	db	0
  4869  00F973  00                 	db	0
  4870  00F974  00                 	db	0
  4871  00F975  00                 	db	0
  4872  00F976  52                 	db	82
  4873  00F977  65                 	db	101
  4874  00F978  73                 	db	115
  4875  00F979  74                 	db	116
  4876  00F97A  6F                 	db	111
  4877  00F97B  72                 	db	114
  4878  00F97C  65                 	db	101
  4879  00F97D  20                 	db	32
  4880  00F97E  64                 	db	100
  4881  00F97F  65                 	db	101
  4882  00F980  66                 	db	102
  4883  00F981  61                 	db	97
  4884  00F982  75                 	db	117
  4885  00F983  6C                 	db	108
  4886  00F984  74                 	db	116
  4887  00F985  73                 	db	115
  4888  00F986  00                 	db	0
  4889  00F987  45                 	db	69
  4890  00F988  6E                 	db	110
  4891  00F989  63                 	db	99
  4892  00F98A  6F                 	db	111
  4893  00F98B  64                 	db	100
  4894  00F98C  65                 	db	101
  4895  00F98D  72                 	db	114
  4896  00F98E  20                 	db	32
  4897  00F98F  50                 	db	80
  4898  00F990  6F                 	db	111
  4899  00F991  6C                 	db	108
  4900  00F992  61                 	db	97
  4901  00F993  72                 	db	114
  4902  00F994  69                 	db	105
  4903  00F995  74                 	db	116
  4904  00F996  79                 	db	121
  4905  00F997  00                 	db	0
  4906  00F998  45                 	db	69
  4907  00F999  78                 	db	120
  4908  00F99A  69                 	db	105
  4909  00F99B  74                 	db	116
  4910  00F99C  00                 	db	0
  4911  00F99D  00                 	db	0
  4912  00F99E  00                 	db	0
  4913  00F99F  00                 	db	0
  4914  00F9A0  00                 	db	0
  4915  00F9A1  00                 	db	0
  4916  00F9A2  00                 	db	0
  4917  00F9A3  00                 	db	0
  4918  00F9A4  00                 	db	0
  4919  00F9A5  00                 	db	0
  4920  00F9A6  00                 	db	0
  4921  00F9A7  00                 	db	0
  4922  00F9A8  00                 	db	0
  4923  00F9A9  53                 	db	83
  4924  00F9AA  6C                 	db	108
  4925  00F9AB  6F                 	db	111
  4926  00F9AC  74                 	db	116
  4927  00F9AD  20                 	db	32
  4928  00F9AE  31                 	db	49
  4929  00F9AF  00                 	db	0
  4930  00F9B0  00                 	db	0
  4931  00F9B1  00                 	db	0
  4932  00F9B2  00                 	db	0
  4933  00F9B3  00                 	db	0
  4934  00F9B4  00                 	db	0
  4935  00F9B5  00                 	db	0
  4936  00F9B6  00                 	db	0
  4937  00F9B7  00                 	db	0
  4938  00F9B8  00                 	db	0
  4939  00F9B9  00                 	db	0
  4940  00F9BA  53                 	db	83
  4941  00F9BB  6C                 	db	108
  4942  00F9BC  6F                 	db	111
  4943  00F9BD  74                 	db	116
  4944  00F9BE  20                 	db	32
  4945  00F9BF  32                 	db	50
  4946  00F9C0  00                 	db	0
  4947  00F9C1  00                 	db	0
  4948  00F9C2  00                 	db	0
  4949  00F9C3  00                 	db	0
  4950  00F9C4  00                 	db	0
  4951  00F9C5  00                 	db	0
  4952  00F9C6  00                 	db	0
  4953  00F9C7  00                 	db	0
  4954  00F9C8  00                 	db	0
  4955  00F9C9  00                 	db	0
  4956  00F9CA  00                 	db	0
  4957  00F9CB  53                 	db	83
  4958  00F9CC  6C                 	db	108
  4959  00F9CD  6F                 	db	111
  4960  00F9CE  74                 	db	116
  4961  00F9CF  20                 	db	32
  4962  00F9D0  33                 	db	51
  4963  00F9D1  00                 	db	0
  4964  00F9D2  00                 	db	0
  4965  00F9D3  00                 	db	0
  4966  00F9D4  00                 	db	0
  4967  00F9D5  00                 	db	0
  4968  00F9D6  00                 	db	0
  4969  00F9D7  00                 	db	0
  4970  00F9D8  00                 	db	0
  4971  00F9D9  00                 	db	0
  4972  00F9DA  00                 	db	0
  4973  00F9DB  00                 	db	0
  4974  00F9DC  53                 	db	83
  4975  00F9DD  6C                 	db	108
  4976  00F9DE  6F                 	db	111
  4977  00F9DF  74                 	db	116
  4978  00F9E0  20                 	db	32
  4979  00F9E1  34                 	db	52
  4980  00F9E2  00                 	db	0
  4981  00F9E3  00                 	db	0
  4982  00F9E4  00                 	db	0
  4983  00F9E5  00                 	db	0
  4984  00F9E6  00                 	db	0
  4985  00F9E7  00                 	db	0
  4986  00F9E8  00                 	db	0
  4987  00F9E9  00                 	db	0
  4988  00F9EA  00                 	db	0
  4989  00F9EB  00                 	db	0
  4990  00F9EC  00                 	db	0
  4991  00F9ED  45                 	db	69
  4992  00F9EE  78                 	db	120
  4993  00F9EF  69                 	db	105
  4994  00F9F0  74                 	db	116
  4995  00F9F1  00                 	db	0
  4996  00F9F2  00                 	db	0
  4997  00F9F3  00                 	db	0
  4998  00F9F4  00                 	db	0
  4999  00F9F5  00                 	db	0
  5000  00F9F6  00                 	db	0
  5001  00F9F7  00                 	db	0
  5002  00F9F8  00                 	db	0
  5003  00F9F9  00                 	db	0
  5004  00F9FA  00                 	db	0
  5005  00F9FB  00                 	db	0
  5006  00F9FC  00                 	db	0
  5007  00F9FD  00                 	db	0
  5008  00F9FE  43                 	db	67
  5009  00F9FF  57                 	db	87
  5010  00FA00  20                 	db	32
  5011  00FA01  49                 	db	73
  5012  00FA02  53                 	db	83
  5013  00FA03  20                 	db	32
  5014  00FA04  49                 	db	73
  5015  00FA05  4E                 	db	78
  5016  00FA06  43                 	db	67
  5017  00FA07  52                 	db	82
  5018  00FA08  45                 	db	69
  5019  00FA09  41                 	db	65
  5020  00FA0A  53                 	db	83
  5021  00FA0B  45                 	db	69
  5022  00FA0C  00                 	db	0
  5023  00FA0D  00                 	db	0
  5024  00FA0E  00                 	db	0
  5025  00FA0F  43                 	db	67
  5026  00FA10  43                 	db	67
  5027  00FA11  57                 	db	87
  5028  00FA12  20                 	db	32
  5029  00FA13  49                 	db	73
  5030  00FA14  53                 	db	83
  5031  00FA15  20                 	db	32
  5032  00FA16  49                 	db	73
  5033  00FA17  4E                 	db	78
  5034  00FA18  43                 	db	67
  5035  00FA19  52                 	db	82
  5036  00FA1A  45                 	db	69
  5037  00FA1B  41                 	db	65
  5038  00FA1C  53                 	db	83
  5039  00FA1D  45                 	db	69
  5040  00FA1E  00                 	db	0
  5041  00FA1F  00                 	db	0
  5042  00FA20  41                 	db	65
  5043  00FA21  72                 	db	114
  5044  00FA22  70                 	db	112
  5045  00FA23  65                 	db	101
  5046  00FA24  67                 	db	103
  5047  00FA25  67                 	db	103
  5048  00FA26  69                 	db	105
  5049  00FA27  6F                 	db	111
  5050  00FA28  20                 	db	32
  5051  00FA29  4F                 	db	79
  5052  00FA2A  46                 	db	70
  5053  00FA2B  46                 	db	70
  5054  00FA2C  2F                 	db	47
  5055  00FA2D  4F                 	db	79
  5056  00FA2E  4E                 	db	78
  5057  00FA2F  00                 	db	0
  5058  00FA30  00                 	db	0
  5059  00FA31  54                 	db	84
  5060  00FA32  65                 	db	101
  5061  00FA33  6D                 	db	109
  5062  00FA34  70                 	db	112
  5063  00FA35  6F                 	db	111
  5064  00FA36  00                 	db	0
  5065  00FA37  00                 	db	0
  5066  00FA38  00                 	db	0
  5067  00FA39  00                 	db	0
  5068  00FA3A  00                 	db	0
  5069  00FA3B  00                 	db	0
  5070  00FA3C  00                 	db	0
  5071  00FA3D  00                 	db	0
  5072  00FA3E  00                 	db	0
  5073  00FA3F  00                 	db	0
  5074  00FA40  00                 	db	0
  5075  00FA41  00                 	db	0
  5076  00FA42  4F                 	db	79
  5077  00FA43  63                 	db	99
  5078  00FA44  74                 	db	116
  5079  00FA45  61                 	db	97
  5080  00FA46  76                 	db	118
  5081  00FA47  65                 	db	101
  5082  00FA48  20                 	db	32
  5083  00FA49  52                 	db	82
  5084  00FA4A  61                 	db	97
  5085  00FA4B  6E                 	db	110
  5086  00FA4C  67                 	db	103
  5087  00FA4D  65                 	db	101
  5088  00FA4E  00                 	db	0
  5089  00FA4F  00                 	db	0
  5090  00FA50  00                 	db	0
  5091  00FA51  00                 	db	0
  5092  00FA52  00                 	db	0
  5093  00FA53  41                 	db	65
  5094  00FA54  72                 	db	114
  5095  00FA55  70                 	db	112
  5096  00FA56  65                 	db	101
  5097  00FA57  67                 	db	103
  5098  00FA58  67                 	db	103
  5099  00FA59  69                 	db	105
  5100  00FA5A  6F                 	db	111
  5101  00FA5B  20                 	db	32
  5102  00FA5C  54                 	db	84
  5103  00FA5D  79                 	db	121
  5104  00FA5E  70                 	db	112
  5105  00FA5F  65                 	db	101
  5106  00FA60  00                 	db	0
  5107  00FA61  00                 	db	0
  5108  00FA62  00                 	db	0
  5109  00FA63  00                 	db	0
  5110  00FA64  4E                 	db	78
  5111  00FA65  6F                 	db	111
  5112  00FA66  74                 	db	116
  5113  00FA67  65                 	db	101
  5114  00FA68  20                 	db	32
  5115  00FA69  4C                 	db	76
  5116  00FA6A  65                 	db	101
  5117  00FA6B  6E                 	db	110
  5118  00FA6C  67                 	db	103
  5119  00FA6D  74                 	db	116
  5120  00FA6E  68                 	db	104
  5121  00FA6F  00                 	db	0
  5122  00FA70  00                 	db	0
  5123  00FA71  00                 	db	0
  5124  00FA72  00                 	db	0
  5125  00FA73  00                 	db	0
  5126  00FA74  00                 	db	0
  5127  00FA75  4C                 	db	76
  5128  00FA76  61                 	db	97
  5129  00FA77  74                 	db	116
  5130  00FA78  63                 	db	99
  5131  00FA79  68                 	db	104
  5132  00FA7A  2F                 	db	47
  5133  00FA7B  41                 	db	65
  5134  00FA7C  75                 	db	117
  5135  00FA7D  74                 	db	116
  5136  00FA7E  6F                 	db	111
  5137  00FA7F  20                 	db	32
  5138  00FA80  4C                 	db	76
  5139  00FA81  61                 	db	97
  5140  00FA82  74                 	db	116
  5141  00FA83  63                 	db	99
  5142  00FA84  68                 	db	104
  5143  00FA85  00                 	db	0
  5144  00FA86  55                 	db	85
  5145  00FA87  6E                 	db	110
  5146  00FA88  2D                 	db	45
  5147  00FA89  6C                 	db	108
  5148  00FA8A  61                 	db	97
  5149  00FA8B  74                 	db	116
  5150  00FA8C  63                 	db	99
  5151  00FA8D  68                 	db	104
  5152  00FA8E  20                 	db	32
  5153  00FA8F  4D                 	db	77
  5154  00FA90  6F                 	db	111
  5155  00FA91  64                 	db	100
  5156  00FA92  65                 	db	101
  5157  00FA93  00                 	db	0
  5158  00FA94  00                 	db	0
  5159  00FA95  00                 	db	0
  5160  00FA96  00                 	db	0
  5161  00FA97  52                 	db	82
  5162  00FA98  61                 	db	97
  5163  00FA99  6E                 	db	110
  5164  00FA9A  64                 	db	100
  5165  00FA9B  6F                 	db	111
  5166  00FA9C  6D                 	db	109
  5167  00FA9D  69                 	db	105
  5168  00FA9E  7A                 	db	122
  5169  00FA9F  65                 	db	101
  5170  00FAA0  2F                 	db	47
  5171  00FAA1  53                 	db	83
  5172  00FAA2  6B                 	db	107
  5173  00FAA3  69                 	db	105
  5174  00FAA4  70                 	db	112
  5175  00FAA5  00                 	db	0
  5176  00FAA6  00                 	db	0
  5177  00FAA7  00                 	db	0
  5178  00FAA8  4C                 	db	76
  5179  00FAA9  61                 	db	97
  5180  00FAAA  73                 	db	115
  5181  00FAAB  74                 	db	116
  5182  00FAAC  20                 	db	32
  5183  00FAAD  4E                 	db	78
  5184  00FAAE  6F                 	db	111
  5185  00FAAF  74                 	db	116
  5186  00FAB0  65                 	db	101
  5187  00FAB1  20                 	db	32
  5188  00FAB2  4D                 	db	77
  5189  00FAB3  6F                 	db	111
  5190  00FAB4  64                 	db	100
  5191  00FAB5  65                 	db	101
  5192  00FAB6  00                 	db	0
  5193  00FAB7  00                 	db	0
  5194  00FAB8  00                 	db	0
  5195  00FAB9  41                 	db	65
  5196  00FABA  52                 	db	82
  5197  00FABB  50                 	db	80
  5198  00FABC  45                 	db	69
  5199  00FABD  47                 	db	71
  5200  00FABE  47                 	db	71
  5201  00FABF  49                 	db	73
  5202  00FAC0  41                 	db	65
  5203  00FAC1  54                 	db	84
  5204  00FAC2  4F                 	db	79
  5205  00FAC3  52                 	db	82
  5206  00FAC4  20                 	db	32
  5207  00FAC5  4F                 	db	79
  5208  00FAC6  46                 	db	70
  5209  00FAC7  46                 	db	70
  5210  00FAC8  00                 	db	0
  5211  00FAC9  00                 	db	0
  5212  00FACA  41                 	db	65
  5213  00FACB  52                 	db	82
  5214  00FACC  50                 	db	80
  5215  00FACD  45                 	db	69
  5216  00FACE  47                 	db	71
  5217  00FACF  47                 	db	71
  5218  00FAD0  49                 	db	73
  5219  00FAD1  41                 	db	65
  5220  00FAD2  54                 	db	84
  5221  00FAD3  4F                 	db	79
  5222  00FAD4  52                 	db	82
  5223  00FAD5  20                 	db	32
  5224  00FAD6  4F                 	db	79
  5225  00FAD7  4E                 	db	78
  5226  00FAD8  00                 	db	0
  5227  00FAD9  00                 	db	0
  5228  00FADA  00                 	db	0
  5229  00FADB  55                 	db	85
  5230  00FADC  50                 	db	80
  5231  00FADD  00                 	db	0
  5232  00FADE  00                 	db	0
  5233  00FADF  00                 	db	0
  5234  00FAE0  00                 	db	0
  5235  00FAE1  00                 	db	0
  5236  00FAE2  00                 	db	0
  5237  00FAE3  00                 	db	0
  5238  00FAE4  00                 	db	0
  5239  00FAE5  00                 	db	0
  5240  00FAE6  00                 	db	0
  5241  00FAE7  00                 	db	0
  5242  00FAE8  00                 	db	0
  5243  00FAE9  00                 	db	0
  5244  00FAEA  00                 	db	0
  5245  00FAEB  00                 	db	0
  5246  00FAEC  44                 	db	68
  5247  00FAED  4F                 	db	79
  5248  00FAEE  57                 	db	87
  5249  00FAEF  4E                 	db	78
  5250  00FAF0  00                 	db	0
  5251  00FAF1  00                 	db	0
  5252  00FAF2  00                 	db	0
  5253  00FAF3  00                 	db	0
  5254  00FAF4  00                 	db	0
  5255  00FAF5  00                 	db	0
  5256  00FAF6  00                 	db	0
  5257  00FAF7  00                 	db	0
  5258  00FAF8  00                 	db	0
  5259  00FAF9  00                 	db	0
  5260  00FAFA  00                 	db	0
  5261  00FAFB  00                 	db	0
  5262  00FAFC  00                 	db	0
  5263  00FAFD  55                 	db	85
  5264  00FAFE  50                 	db	80
  5265  00FAFF  2F                 	db	47
  5266  00FB00  44                 	db	68
  5267  00FB01  4F                 	db	79
  5268  00FB02  57                 	db	87
  5269  00FB03  4E                 	db	78
  5270  00FB04  00                 	db	0
  5271  00FB05  00                 	db	0
  5272  00FB06  00                 	db	0
  5273  00FB07  00                 	db	0
  5274  00FB08  00                 	db	0
  5275  00FB09  00                 	db	0
  5276  00FB0A  00                 	db	0
  5277  00FB0B  00                 	db	0
  5278  00FB0C  00                 	db	0
  5279  00FB0D  00                 	db	0
  5280  00FB0E  44                 	db	68
  5281  00FB0F  4F                 	db	79
  5282  00FB10  57                 	db	87
  5283  00FB11  4E                 	db	78
  5284  00FB12  2F                 	db	47
  5285  00FB13  55                 	db	85
  5286  00FB14  50                 	db	80
  5287  00FB15  00                 	db	0
  5288  00FB16  00                 	db	0
  5289  00FB17  00                 	db	0
  5290  00FB18  00                 	db	0
  5291  00FB19  00                 	db	0
  5292  00FB1A  00                 	db	0
  5293  00FB1B  00                 	db	0
  5294  00FB1C  00                 	db	0
  5295  00FB1D  00                 	db	0
  5296  00FB1E  00                 	db	0
  5297  00FB1F  53                 	db	83
  5298  00FB20  48                 	db	72
  5299  00FB21  55                 	db	85
  5300  00FB22  46                 	db	70
  5301  00FB23  46                 	db	70
  5302  00FB24  4C                 	db	76
  5303  00FB25  45                 	db	69
  5304  00FB26  00                 	db	0
  5305  00FB27  00                 	db	0
  5306  00FB28  00                 	db	0
  5307  00FB29  00                 	db	0
  5308  00FB2A  00                 	db	0
  5309  00FB2B  00                 	db	0
  5310  00FB2C  00                 	db	0
  5311  00FB2D  00                 	db	0
  5312  00FB2E  00                 	db	0
  5313  00FB2F  00                 	db	0
  5314  00FB30  52                 	db	82
  5315  00FB31  41                 	db	65
  5316  00FB32  4E                 	db	78
  5317  00FB33  44                 	db	68
  5318  00FB34  4F                 	db	79
  5319  00FB35  4D                 	db	77
  5320  00FB36  00                 	db	0
  5321  00FB37  00                 	db	0
  5322  00FB38  00                 	db	0
  5323  00FB39  00                 	db	0
  5324  00FB3A  00                 	db	0
  5325  00FB3B  00                 	db	0
  5326  00FB3C  00                 	db	0
  5327  00FB3D  00                 	db	0
  5328  00FB3E  00                 	db	0
  5329  00FB3F  00                 	db	0
  5330  00FB40  00                 	db	0
  5331  00FB41  41                 	db	65
  5332  00FB42  53                 	db	83
  5333  00FB43  20                 	db	32
  5334  00FB44  50                 	db	80
  5335  00FB45  52                 	db	82
  5336  00FB46  45                 	db	69
  5337  00FB47  53                 	db	83
  5338  00FB48  53                 	db	83
  5339  00FB49  45                 	db	69
  5340  00FB4A  44                 	db	68
  5341  00FB4B  00                 	db	0
  5342  00FB4C  00                 	db	0
  5343  00FB4D  00                 	db	0
  5344  00FB4E  00                 	db	0
  5345  00FB4F  00                 	db	0
  5346  00FB50  00                 	db	0
  5347  00FB51  00                 	db	0
  5348  00FB52  31                 	db	49
  5349  00FB53  2F                 	db	47
  5350  00FB54  34                 	db	52
  5351  00FB55  00                 	db	0
  5352  00FB56  00                 	db	0
  5353  00FB57  00                 	db	0
  5354  00FB58  00                 	db	0
  5355  00FB59  00                 	db	0
  5356  00FB5A  00                 	db	0
  5357  00FB5B  00                 	db	0
  5358  00FB5C  00                 	db	0
  5359  00FB5D  00                 	db	0
  5360  00FB5E  00                 	db	0
  5361  00FB5F  00                 	db	0
  5362  00FB60  00                 	db	0
  5363  00FB61  00                 	db	0
  5364  00FB62  00                 	db	0
  5365  00FB63  31                 	db	49
  5366  00FB64  2F                 	db	47
  5367  00FB65  34                 	db	52
  5368  00FB66  20                 	db	32
  5369  00FB67  44                 	db	68
  5370  00FB68  4F                 	db	79
  5371  00FB69  54                 	db	84
  5372  00FB6A  54                 	db	84
  5373  00FB6B  45                 	db	69
  5374  00FB6C  44                 	db	68
  5375  00FB6D  00                 	db	0
  5376  00FB6E  00                 	db	0
  5377  00FB6F  00                 	db	0
  5378  00FB70  00                 	db	0
  5379  00FB71  00                 	db	0
  5380  00FB72  00                 	db	0
  5381  00FB73  00                 	db	0
  5382  00FB74  31                 	db	49
  5383  00FB75  2F                 	db	47
  5384  00FB76  34                 	db	52
  5385  00FB77  20                 	db	32
  5386  00FB78  54                 	db	84
  5387  00FB79  52                 	db	82
  5388  00FB7A  49                 	db	73
  5389  00FB7B  50                 	db	80
  5390  00FB7C  4C                 	db	76
  5391  00FB7D  45                 	db	69
  5392  00FB7E  54                 	db	84
  5393  00FB7F  00                 	db	0
  5394  00FB80  00                 	db	0
  5395  00FB81  00                 	db	0
  5396  00FB82  00                 	db	0
  5397  00FB83  00                 	db	0
  5398  00FB84  00                 	db	0
  5399  00FB85  31                 	db	49
  5400  00FB86  2F                 	db	47
  5401  00FB87  38                 	db	56
  5402  00FB88  00                 	db	0
  5403  00FB89  00                 	db	0
  5404  00FB8A  00                 	db	0
  5405  00FB8B  00                 	db	0
  5406  00FB8C  00                 	db	0
  5407  00FB8D  00                 	db	0
  5408  00FB8E  00                 	db	0
  5409  00FB8F  00                 	db	0
  5410  00FB90  00                 	db	0
  5411  00FB91  00                 	db	0
  5412  00FB92  00                 	db	0
  5413  00FB93  00                 	db	0
  5414  00FB94  00                 	db	0
  5415  00FB95  00                 	db	0
  5416  00FB96  31                 	db	49
  5417  00FB97  2F                 	db	47
  5418  00FB98  38                 	db	56
  5419  00FB99  20                 	db	32
  5420  00FB9A  44                 	db	68
  5421  00FB9B  4F                 	db	79
  5422  00FB9C  54                 	db	84
  5423  00FB9D  54                 	db	84
  5424  00FB9E  45                 	db	69
  5425  00FB9F  44                 	db	68
  5426  00FBA0  00                 	db	0
  5427  00FBA1  00                 	db	0
  5428  00FBA2  00                 	db	0
  5429  00FBA3  00                 	db	0
  5430  00FBA4  00                 	db	0
  5431  00FBA5  00                 	db	0
  5432  00FBA6  00                 	db	0
  5433  00FBA7  31                 	db	49
  5434  00FBA8  2F                 	db	47
  5435  00FBA9  38                 	db	56
  5436  00FBAA  20                 	db	32
  5437  00FBAB  54                 	db	84
  5438  00FBAC  52                 	db	82
  5439  00FBAD  49                 	db	73
  5440  00FBAE  50                 	db	80
  5441  00FBAF  4C                 	db	76
  5442  00FBB0  45                 	db	69
  5443  00FBB1  54                 	db	84
  5444  00FBB2  00                 	db	0
  5445  00FBB3  00                 	db	0
  5446  00FBB4  00                 	db	0
  5447  00FBB5  00                 	db	0
  5448  00FBB6  00                 	db	0
  5449  00FBB7  00                 	db	0
  5450  00FBB8  31                 	db	49
  5451  00FBB9  2F                 	db	47
  5452  00FBBA  31                 	db	49
  5453  00FBBB  36                 	db	54
  5454  00FBBC  00                 	db	0
  5455  00FBBD  00                 	db	0
  5456  00FBBE  00                 	db	0
  5457  00FBBF  00                 	db	0
  5458  00FBC0  00                 	db	0
  5459  00FBC1  00                 	db	0
  5460  00FBC2  00                 	db	0
  5461  00FBC3  00                 	db	0
  5462  00FBC4  00                 	db	0
  5463  00FBC5  00                 	db	0
  5464  00FBC6  00                 	db	0
  5465  00FBC7  00                 	db	0
  5466  00FBC8  00                 	db	0
  5467  00FBC9  31                 	db	49
  5468  00FBCA  2F                 	db	47
  5469  00FBCB  31                 	db	49
  5470  00FBCC  36                 	db	54
  5471  00FBCD  20                 	db	32
  5472  00FBCE  44                 	db	68
  5473  00FBCF  4F                 	db	79
  5474  00FBD0  54                 	db	84
  5475  00FBD1  54                 	db	84
  5476  00FBD2  45                 	db	69
  5477  00FBD3  44                 	db	68
  5478  00FBD4  00                 	db	0
  5479  00FBD5  00                 	db	0
  5480  00FBD6  00                 	db	0
  5481  00FBD7  00                 	db	0
  5482  00FBD8  00                 	db	0
  5483  00FBD9  00                 	db	0
  5484  00FBDA  31                 	db	49
  5485  00FBDB  2F                 	db	47
  5486  00FBDC  31                 	db	49
  5487  00FBDD  36                 	db	54
  5488  00FBDE  20                 	db	32
  5489  00FBDF  54                 	db	84
  5490  00FBE0  52                 	db	82
  5491  00FBE1  49                 	db	73
  5492  00FBE2  50                 	db	80
  5493  00FBE3  4C                 	db	76
  5494  00FBE4  45                 	db	69
  5495  00FBE5  54                 	db	84
  5496  00FBE6  00                 	db	0
  5497  00FBE7  00                 	db	0
  5498  00FBE8  00                 	db	0
  5499  00FBE9  00                 	db	0
  5500  00FBEA  00                 	db	0
  5501  00FBEB  31                 	db	49
  5502  00FBEC  2F                 	db	47
  5503  00FBED  33                 	db	51
  5504  00FBEE  32                 	db	50
  5505  00FBEF  00                 	db	0
  5506  00FBF0  00                 	db	0
  5507  00FBF1  00                 	db	0
  5508  00FBF2  00                 	db	0
  5509  00FBF3  00                 	db	0
  5510  00FBF4  00                 	db	0
  5511  00FBF5  00                 	db	0
  5512  00FBF6  00                 	db	0
  5513  00FBF7  00                 	db	0
  5514  00FBF8  00                 	db	0
  5515  00FBF9  00                 	db	0
  5516  00FBFA  00                 	db	0
  5517  00FBFB  00                 	db	0
  5518  00FBFC  31                 	db	49
  5519  00FBFD  2F                 	db	47
  5520  00FBFE  33                 	db	51
  5521  00FBFF  32                 	db	50
  5522  00FC00  20                 	db	32
  5523  00FC01  44                 	db	68
  5524  00FC02  4F                 	db	79
  5525  00FC03  54                 	db	84
  5526  00FC04  54                 	db	84
  5527  00FC05  45                 	db	69
  5528  00FC06  44                 	db	68
  5529  00FC07  00                 	db	0
  5530  00FC08  00                 	db	0
  5531  00FC09  00                 	db	0
  5532  00FC0A  00                 	db	0
  5533  00FC0B  00                 	db	0
  5534  00FC0C  00                 	db	0
  5535  00FC0D  31                 	db	49
  5536  00FC0E  2F                 	db	47
  5537  00FC0F  33                 	db	51
  5538  00FC10  32                 	db	50
  5539  00FC11  20                 	db	32
  5540  00FC12  54                 	db	84
  5541  00FC13  52                 	db	82
  5542  00FC14  49                 	db	73
  5543  00FC15  50                 	db	80
  5544  00FC16  4C                 	db	76
  5545  00FC17  45                 	db	69
  5546  00FC18  54                 	db	84
  5547  00FC19  00                 	db	0
  5548  00FC1A  00                 	db	0
  5549  00FC1B  00                 	db	0
  5550  00FC1C  00                 	db	0
  5551  00FC1D  00                 	db	0
  5552  00FC1E  53                 	db	83
  5553  00FC1F  45                 	db	69
  5554  00FC20  54                 	db	84
  5555  00FC21  2F                 	db	47
  5556  00FC22  43                 	db	67
  5557  00FC23  4C                 	db	76
  5558  00FC24  45                 	db	69
  5559  00FC25  41                 	db	65
  5560  00FC26  52                 	db	82
  5561  00FC27  20                 	db	32
  5562  00FC28  4C                 	db	76
  5563  00FC29  41                 	db	65
  5564  00FC2A  54                 	db	84
  5565  00FC2B  43                 	db	67
  5566  00FC2C  48                 	db	72
  5567  00FC2D  00                 	db	0
  5568  00FC2E  00                 	db	0
  5569  00FC2F  41                 	db	65
  5570  00FC30  55                 	db	85
  5571  00FC31  54                 	db	84
  5572  00FC32  4F                 	db	79
  5573  00FC33  20                 	db	32
  5574  00FC34  4C                 	db	76
  5575  00FC35  41                 	db	65
  5576  00FC36  54                 	db	84
  5577  00FC37  43                 	db	67
  5578  00FC38  48                 	db	72
  5579  00FC39  00                 	db	0
  5580  00FC3A  00                 	db	0
  5581  00FC3B  00                 	db	0
  5582  00FC3C  00                 	db	0
  5583  00FC3D  00                 	db	0
  5584  00FC3E  00                 	db	0
  5585  00FC3F  00                 	db	0
  5586  00FC40  55                 	db	85
  5587  00FC41  6E                 	db	110
  5588  00FC42  2D                 	db	45
  5589  00FC43  4C                 	db	76
  5590  00FC44  61                 	db	97
  5591  00FC45  74                 	db	116
  5592  00FC46  63                 	db	99
  5593  00FC47  68                 	db	104
  5594  00FC48  20                 	db	32
  5595  00FC49  4D                 	db	77
  5596  00FC4A  6F                 	db	111
  5597  00FC4B  64                 	db	100
  5598  00FC4C  65                 	db	101
  5599  00FC4D  00                 	db	0
  5600  00FC4E  00                 	db	0
  5601  00FC4F  00                 	db	0
  5602  00FC50  00                 	db	0
  5603  00FC51  55                 	db	85
  5604  00FC52  4E                 	db	78
  5605  00FC53  4C                 	db	76
  5606  00FC54  41                 	db	65
  5607  00FC55  54                 	db	84
  5608  00FC56  43                 	db	67
  5609  00FC57  48                 	db	72
  5610  00FC58  20                 	db	32
  5611  00FC59  41                 	db	65
  5612  00FC5A  4C                 	db	76
  5613  00FC5B  4C                 	db	76
  5614  00FC5C  00                 	db	0
  5615  00FC5D  00                 	db	0
  5616  00FC5E  00                 	db	0
  5617  00FC5F  00                 	db	0
  5618  00FC60  00                 	db	0
  5619  00FC61  00                 	db	0
  5620  00FC62  4F                 	db	79
  5621  00FC63  4E                 	db	78
  5622  00FC64  45                 	db	69
  5623  00FC65  20                 	db	32
  5624  00FC66  41                 	db	65
  5625  00FC67  54                 	db	84
  5626  00FC68  20                 	db	32
  5627  00FC69  41                 	db	65
  5628  00FC6A  20                 	db	32
  5629  00FC6B  54                 	db	84
  5630  00FC6C  49                 	db	73
  5631  00FC6D  4D                 	db	77
  5632  00FC6E  45                 	db	69
  5633  00FC6F  00                 	db	0
  5634  00FC70  00                 	db	0
  5635  00FC71  00                 	db	0
  5636  00FC72  00                 	db	0
  5637  00FC73  52                 	db	82
  5638  00FC74  61                 	db	97
  5639  00FC75  6E                 	db	110
  5640  00FC76  64                 	db	100
  5641  00FC77  6F                 	db	111
  5642  00FC78  6D                 	db	109
  5643  00FC79  69                 	db	105
  5644  00FC7A  7A                 	db	122
  5645  00FC7B  65                 	db	101
  5646  00FC7C  00                 	db	0
  5647  00FC7D  00                 	db	0
  5648  00FC7E  00                 	db	0
  5649  00FC7F  00                 	db	0
  5650  00FC80  00                 	db	0
  5651  00FC81  00                 	db	0
  5652  00FC82  00                 	db	0
  5653  00FC83  00                 	db	0
  5654  00FC84  53                 	db	83
  5655  00FC85  6B                 	db	107
  5656  00FC86  69                 	db	105
  5657  00FC87  70                 	db	112
  5658  00FC88  20                 	db	32
  5659  00FC89  46                 	db	70
  5660  00FC8A  69                 	db	105
  5661  00FC8B  72                 	db	114
  5662  00FC8C  73                 	db	115
  5663  00FC8D  74                 	db	116
  5664  00FC8E  2F                 	db	47
  5665  00FC8F  4C                 	db	76
  5666  00FC90  61                 	db	97
  5667  00FC91  73                 	db	115
  5668  00FC92  74                 	db	116
  5669  00FC93  00                 	db	0
  5670  00FC94  00                 	db	0
  5671  00FC95  52                 	db	82
  5672  00FC96  41                 	db	65
  5673  00FC97  4E                 	db	78
  5674  00FC98  44                 	db	68
  5675  00FC99  4F                 	db	79
  5676  00FC9A  4D                 	db	77
  5677  00FC9B  49                 	db	73
  5678  00FC9C  5A                 	db	90
  5679  00FC9D  45                 	db	69
  5680  00FC9E  20                 	db	32
  5681  00FC9F  41                 	db	65
  5682  00FCA0  55                 	db	85
  5683  00FCA1  54                 	db	84
  5684  00FCA2  4F                 	db	79
  5685  00FCA3  00                 	db	0
  5686  00FCA4  00                 	db	0
  5687  00FCA5  00                 	db	0
  5688  00FCA6  52                 	db	82
  5689  00FCA7  41                 	db	65
  5690  00FCA8  4E                 	db	78
  5691  00FCA9  44                 	db	68
  5692  00FCAA  4F                 	db	79
  5693  00FCAB  4D                 	db	77
  5694  00FCAC  49                 	db	73
  5695  00FCAD  5A                 	db	90
  5696  00FCAE  45                 	db	69
  5697  00FCAF  20                 	db	32
  5698  00FCB0  4F                 	db	79
  5699  00FCB1  4E                 	db	78
  5700  00FCB2  43                 	db	67
  5701  00FCB3  45                 	db	69
  5702  00FCB4  00                 	db	0
  5703  00FCB5  00                 	db	0
  5704  00FCB6  00                 	db	0
  5705  00FCB7  4B                 	db	75
  5706  00FCB8  65                 	db	101
  5707  00FCB9  79                 	db	121
  5708  00FCBA  20                 	db	32
  5709  00FCBB  70                 	db	112
  5710  00FCBC  72                 	db	114
  5711  00FCBD  65                 	db	101
  5712  00FCBE  73                 	db	115
  5713  00FCBF  73                 	db	115
  5714  00FCC0  00                 	db	0
  5715  00FCC1  00                 	db	0
  5716  00FCC2  00                 	db	0
  5717  00FCC3  00                 	db	0
  5718  00FCC4  00                 	db	0
  5719  00FCC5  00                 	db	0
  5720  00FCC6  00                 	db	0
  5721  00FCC7  00                 	db	0
  5722  00FCC8  4B                 	db	75
  5723  00FCC9  65                 	db	101
  5724  00FCCA  79                 	db	121
  5725  00FCCB  20                 	db	32
  5726  00FCCC  72                 	db	114
  5727  00FCCD  65                 	db	101
  5728  00FCCE  6C                 	db	108
  5729  00FCCF  65                 	db	101
  5730  00FCD0  61                 	db	97
  5731  00FCD1  73                 	db	115
  5732  00FCD2  65                 	db	101
  5733  00FCD3  00                 	db	0
  5734  00FCD4  00                 	db	0
  5735  00FCD5  00                 	db	0
  5736  00FCD6  00                 	db	0
  5737  00FCD7  00                 	db	0
  5738  00FCD8  00                 	db	0
  5739  00FCD9  54                 	db	84
  5740  00FCDA  72                 	db	114
  5741  00FCDB  61                 	db	97
  5742  00FCDC  6E                 	db	110
  5743  00FCDD  73                 	db	115
  5744  00FCDE  70                 	db	112
  5745  00FCDF  6F                 	db	111
  5746  00FCE0  73                 	db	115
  5747  00FCE1  65                 	db	101
  5748  00FCE2  00                 	db	0
  5749  00FCE3  00                 	db	0
  5750  00FCE4  00                 	db	0
  5751  00FCE5  00                 	db	0
  5752  00FCE6  00                 	db	0
  5753  00FCE7  00                 	db	0
  5754  00FCE8  00                 	db	0
  5755  00FCE9  00                 	db	0
  5756  00FCEA  52                 	db	82
  5757  00FCEB  65                 	db	101
  5758  00FCEC  73                 	db	115
  5759  00FCED  65                 	db	101
  5760  00FCEE  74                 	db	116
  5761  00FCEF  00                 	db	0
  5762  00FCF0  00                 	db	0
  5763  00FCF1  00                 	db	0
  5764  00FCF2  00                 	db	0
  5765  00FCF3  00                 	db	0
  5766  00FCF4  00                 	db	0
  5767  00FCF5  00                 	db	0
  5768  00FCF6  00                 	db	0
  5769  00FCF7  00                 	db	0
  5770  00FCF8  00                 	db	0
  5771  00FCF9  00                 	db	0
  5772  00FCFA  00                 	db	0
  5773  00FCFB                     __end_of_LCD_STRINGS:
  5774                           	opt stack 0
  5775  00FCFB                     _locrian_key:
  5776                           	opt stack 0
  5777  00FCFB  0B                 	db	11
  5778  00FCFC  01                 	db	1
  5779  00FCFD  03                 	db	3
  5780  00FCFE  05                 	db	5
  5781  00FCFF  06                 	db	6
  5782  00FD00  08                 	db	8
  5783  00FD01  0A                 	db	10
  5784  00FD02  0C                 	db	12
  5785  00FD03  0D                 	db	13
  5786  00FD04  0F                 	db	15
  5787  00FD05  11                 	db	17
  5788  00FD06  12                 	db	18
  5789  00FD07  14                 	db	20
  5790  00FD08  16                 	db	22
  5791  00FD09  18                 	db	24
  5792  00FD0A                     __end_of_locrian_key:
  5793                           	opt stack 0
  5794  00FD0A                     _aeolian_key:
  5795                           	opt stack 0
  5796  00FD0A  09                 	db	9
  5797  00FD0B  02                 	db	2
  5798  00FD0C  03                 	db	3
  5799  00FD0D  05                 	db	5
  5800  00FD0E  07                 	db	7
  5801  00FD0F  08                 	db	8
  5802  00FD10  0A                 	db	10
  5803  00FD11  0C                 	db	12
  5804  00FD12  0E                 	db	14
  5805  00FD13  0F                 	db	15
  5806  00FD14  11                 	db	17
  5807  00FD15  13                 	db	19
  5808  00FD16  14                 	db	20
  5809  00FD17  16                 	db	22
  5810  00FD18  18                 	db	24
  5811  00FD19                     __end_of_aeolian_key:
  5812                           	opt stack 0
  5813  00FD19                     _mixolydian_key:
  5814                           	opt stack 0
  5815  00FD19  07                 	db	7
  5816  00FD1A  02                 	db	2
  5817  00FD1B  04                 	db	4
  5818  00FD1C  05                 	db	5
  5819  00FD1D  07                 	db	7
  5820  00FD1E  09                 	db	9
  5821  00FD1F  0A                 	db	10
  5822  00FD20  0C                 	db	12
  5823  00FD21  0E                 	db	14
  5824  00FD22  10                 	db	16
  5825  00FD23  11                 	db	17
  5826  00FD24  13                 	db	19
  5827  00FD25  15                 	db	21
  5828  00FD26  16                 	db	22
  5829  00FD27  18                 	db	24
  5830  00FD28                     __end_of_mixolydian_key:
  5831                           	opt stack 0
  5832  00FD28                     _lydian_key:
  5833                           	opt stack 0
  5834  00FD28  05                 	db	5
  5835  00FD29  02                 	db	2
  5836  00FD2A  04                 	db	4
  5837  00FD2B  06                 	db	6
  5838  00FD2C  07                 	db	7
  5839  00FD2D  09                 	db	9
  5840  00FD2E  0B                 	db	11
  5841  00FD2F  0C                 	db	12
  5842  00FD30  0E                 	db	14
  5843  00FD31  10                 	db	16
  5844  00FD32  12                 	db	18
  5845  00FD33  13                 	db	19
  5846  00FD34  15                 	db	21
  5847  00FD35  17                 	db	23
  5848  00FD36  18                 	db	24
  5849  00FD37                     __end_of_lydian_key:
  5850                           	opt stack 0
  5851  00FD37                     _phrygian_key:
  5852                           	opt stack 0
  5853  00FD37  04                 	db	4
  5854  00FD38  01                 	db	1
  5855  00FD39  03                 	db	3
  5856  00FD3A  05                 	db	5
  5857  00FD3B  07                 	db	7
  5858  00FD3C  08                 	db	8
  5859  00FD3D  0A                 	db	10
  5860  00FD3E  0C                 	db	12
  5861  00FD3F  0D                 	db	13
  5862  00FD40  0F                 	db	15
  5863  00FD41  11                 	db	17
  5864  00FD42  13                 	db	19
  5865  00FD43  14                 	db	20
  5866  00FD44  16                 	db	22
  5867  00FD45  18                 	db	24
  5868  00FD46                     __end_of_phrygian_key:
  5869                           	opt stack 0
  5870  00FD46                     _dorian_key:
  5871                           	opt stack 0
  5872  00FD46  02                 	db	2
  5873  00FD47  02                 	db	2
  5874  00FD48  03                 	db	3
  5875  00FD49  05                 	db	5
  5876  00FD4A  07                 	db	7
  5877  00FD4B  09                 	db	9
  5878  00FD4C  0A                 	db	10
  5879  00FD4D  0C                 	db	12
  5880  00FD4E  0E                 	db	14
  5881  00FD4F  0F                 	db	15
  5882  00FD50  11                 	db	17
  5883  00FD51  13                 	db	19
  5884  00FD52  15                 	db	21
  5885  00FD53  16                 	db	22
  5886  00FD54  18                 	db	24
  5887  00FD55                     __end_of_dorian_key:
  5888                           	opt stack 0
  5889  00FD55                     _ionian_key:
  5890                           	opt stack 0
  5891  00FD55  00                 	db	0
  5892  00FD56  02                 	db	2
  5893  00FD57  04                 	db	4
  5894  00FD58  05                 	db	5
  5895  00FD59  07                 	db	7
  5896  00FD5A  09                 	db	9
  5897  00FD5B  0B                 	db	11
  5898  00FD5C  0C                 	db	12
  5899  00FD5D  0E                 	db	14
  5900  00FD5E  10                 	db	16
  5901  00FD5F  11                 	db	17
  5902  00FD60  13                 	db	19
  5903  00FD61  15                 	db	21
  5904  00FD62  17                 	db	23
  5905  00FD63  18                 	db	24
  5906  00FD64                     __end_of_ionian_key:
  5907                           	opt stack 0
  5908  0000                     _TMR0	set	4054
  5909  0000                     _EECON2	set	4007
  5910  0000                     _INTCONbits	set	4082
  5911  0000                     _EEDATA	set	4008
  5912  0000                     _EEADR	set	4009
  5913  0000                     _EEADRH	set	4010
  5914  0000                     _EECON1bits	set	4006
  5915  0000                     _SPBRG	set	4015
  5916  0000                     _TMR2	set	4044
  5917  0000                     _T2CON	set	4042
  5918  0000                     _T0CON	set	4053
  5919  0000                     _PORTE	set	3972
  5920  0000                     _PORTC	set	3970
  5921  0000                     _PORTB	set	3969
  5922  0000                     _TRISE	set	3990
  5923  0000                     _TRISD	set	3989
  5924  0000                     _TRISC	set	3988
  5925  0000                     _TRISB	set	3987
  5926  0000                     _TRISA	set	3986
  5927  0000                     _PORTD	set	3971
  5928  0000                     _TXREG	set	4013
  5929  0000                     _ADRESL	set	4035
  5930  0000                     _ADRESH	set	4036
  5931  0000                     _PORTA	set	3968
  5932  0000                     _ADCON2	set	4032
  5933  0000                     _ADCON1	set	4033
  5934  0000                     _ADCON0	set	4034
  5935  0000                     _CMCON	set	4020
  5936  0000                     _TMR0IF	set	32658
  5937  0000                     _RB0	set	31752
  5938  0000                     _TMR2IF	set	31985
  5939  0000                     _RC4	set	31764
  5940  0000                     _RC5	set	31765
  5941  0000                     _RB1	set	31753
  5942  0000                     _GIE	set	32663
  5943  0000                     _PEIE	set	32662
  5944  0000                     _BRGH	set	32098
  5945  0000                     _CREN	set	32092
  5946  0000                     _SPEN	set	32095
  5947  0000                     _SYNC	set	32100
  5948  0000                     _TXEN	set	32101
  5949  0000                     _TMR2IE	set	31977
  5950  0000                     _TMR2ON	set	32338
  5951  0000                     _TMR0IE	set	32661
  5952  0000                     _PSA	set	32427
  5953  0000                     _T0CS	set	32429
  5954  0000                     _T08BIT	set	32430
  5955  0000                     _INT0IE	set	32660
  5956  0000                     _INT0IF	set	32657
  5957  0000                     _INTEDG0	set	32654
  5958  0000                     _RBIE	set	32659
  5959  0000                     _RBIF	set	32656
  5960  0000                     _IPEN	set	32391
  5961  0000                     _RC2	set	31762
  5962  0000                     _RC1	set	31761
  5963  0000                     _RC0	set	31760
  5964  0000                     _RC3	set	31763
  5965  0000                     _TMR0ON	set	32431
  5966  0000                     _RB4	set	31756
  5967  0000                     _RB5	set	31757
  5968  0000                     _RE2	set	31778
  5969  0000                     _RB2	set	31754
  5970  0000                     _RA5	set	31749
  5971  0000                     _TXIF	set	31988
  5972  0000                     _GO_nDONE	set	32273
  5973  0000                     _ADON	set	32272
  5974  0000                     _RE1	set	31777
  5975  0000                     _RE0	set	31776
  5976  0000                     _RD7	set	31775
  5977  0000                     _RD6	set	31774
  5978  0000                     _RD5	set	31773
  5979  0000                     _RD4	set	31772
  5980  00FD64                     STR_10:
  5981  00FD64  20                 	db	32
  5982  00FD65  20                 	db	32
  5983  00FD66  20                 	db	32
  5984  00FD67  20                 	db	32
  5985  00FD68  20                 	db	32
  5986  00FD69  20                 	db	32
  5987  00FD6A  20                 	db	32
  5988  00FD6B  20                 	db	32
  5989  00FD6C  20                 	db	32
  5990  00FD6D  20                 	db	32
  5991  00FD6E  20                 	db	32
  5992  00FD6F  20                 	db	32
  5993  00FD70  20                 	db	32
  5994  00FD71  20                 	db	32
  5995  00FD72  20                 	db	32
  5996  00FD73  20                 	db	32
  5997  00FD74  00                 	db	0
  5998  00FD75                     STR_22:
  5999  00FD75  53                 	db	83	;'S'
  6000  00FD76  65                 	db	101	;'e'
  6001  00FD77  74                 	db	116	;'t'
  6002  00FD78  74                 	db	116	;'t'
  6003  00FD79  69                 	db	105	;'i'
  6004  00FD7A  6E                 	db	110	;'n'
  6005  00FD7B  67                 	db	103	;'g'
  6006  00FD7C  73                 	db	115	;'s'
  6007  00FD7D  20                 	db	32
  6008  00FD7E  4C                 	db	76	;'L'
  6009  00FD7F  6F                 	db	111	;'o'
  6010  00FD80  61                 	db	97	;'a'
  6011  00FD81  64                 	db	100	;'d'
  6012  00FD82  65                 	db	101	;'e'
  6013  00FD83  64                 	db	100	;'d'
  6014  00FD84  21                 	db	33
  6015  00FD85  00                 	db	0
  6016  00FD86                     STR_37:
  6017  00FD86  52                 	db	82	;'R'
  6018  00FD87  65                 	db	101	;'e'
  6019  00FD88  73                 	db	115	;'s'
  6020  00FD89  74                 	db	116	;'t'
  6021  00FD8A  6F                 	db	111	;'o'
  6022  00FD8B  72                 	db	114	;'r'
  6023  00FD8C  65                 	db	101	;'e'
  6024  00FD8D  20                 	db	32
  6025  00FD8E  53                 	db	83	;'S'
  6026  00FD8F  65                 	db	101	;'e'
  6027  00FD90  74                 	db	116	;'t'
  6028  00FD91  74                 	db	116	;'t'
  6029  00FD92  69                 	db	105	;'i'
  6030  00FD93  6E                 	db	110	;'n'
  6031  00FD94  67                 	db	103	;'g'
  6032  00FD95  21                 	db	33
  6033  00FD96  00                 	db	0
  6034  00FD97                     STR_33:
  6035  00FD97  53                 	db	83	;'S'
  6036  00FD98  65                 	db	101	;'e'
  6037  00FD99  74                 	db	116	;'t'
  6038  00FD9A  20                 	db	32
  6039  00FD9B  4A                 	db	74	;'J'
  6040  00FD9C  6F                 	db	111	;'o'
  6041  00FD9D  79                 	db	121	;'y'
  6042  00FD9E  73                 	db	115	;'s'
  6043  00FD9F  74                 	db	116	;'t'
  6044  00FDA0  69                 	db	105	;'i'
  6045  00FDA1  63                 	db	99	;'c'
  6046  00FDA2  6B                 	db	107	;'k'
  6047  00FDA3  20                 	db	32
  6048  00FDA4  43                 	db	67	;'C'
  6049  00FDA5  43                 	db	67	;'C'
  6050  00FDA6  23                 	db	35
  6051  00FDA7  00                 	db	0
  6052  00FDA8                     STR_30:
  6053  00FDA8  50                 	db	80	;'P'
  6054  00FDA9  6F                 	db	111	;'o'
  6055  00FDAA  74                 	db	116	;'t'
  6056  00FDAB  73                 	db	115	;'s'
  6057  00FDAC  20                 	db	32
  6058  00FDAD  52                 	db	82	;'R'
  6059  00FDAE  65                 	db	101	;'e'
  6060  00FDAF  73                 	db	115	;'s'
  6061  00FDB0  6F                 	db	111	;'o'
  6062  00FDB1  6C                 	db	108	;'l'
  6063  00FDB2  75                 	db	117	;'u'
  6064  00FDB3  74                 	db	116	;'t'
  6065  00FDB4  69                 	db	105	;'i'
  6066  00FDB5  6F                 	db	111	;'o'
  6067  00FDB6  6E                 	db	110	;'n'
  6068  00FDB7  3A                 	db	58	;':'
  6069  00FDB8  00                 	db	0
  6070  00FDB9                     STR_46:
  6071  00FDB9  53                 	db	83	;'S'
  6072  00FDBA  65                 	db	101	;'e'
  6073  00FDBB  6C                 	db	108	;'l'
  6074  00FDBC  65                 	db	101	;'e'
  6075  00FDBD  63                 	db	99	;'c'
  6076  00FDBE  74                 	db	116	;'t'
  6077  00FDBF  20                 	db	32
  6078  00FDC0  41                 	db	65	;'A'
  6079  00FDC1  72                 	db	114	;'r'
  6080  00FDC2  70                 	db	112	;'p'
  6081  00FDC3  65                 	db	101	;'e'
  6082  00FDC4  67                 	db	103	;'g'
  6083  00FDC5  67                 	db	103	;'g'
  6084  00FDC6  69                 	db	105	;'i'
  6085  00FDC7  6F                 	db	111	;'o'
  6086  00FDC8  3A                 	db	58	;':'
  6087  00FDC9  00                 	db	0
  6088  00FDCA                     STR_28:
  6089  00FDCA  53                 	db	83	;'S'
  6090  00FDCB  65                 	db	101	;'e'
  6091  00FDCC  74                 	db	116	;'t'
  6092  00FDCD  20                 	db	32
  6093  00FDCE  4E                 	db	78	;'N'
  6094  00FDCF  6F                 	db	111	;'o'
  6095  00FDD0  74                 	db	116	;'t'
  6096  00FDD1  65                 	db	101	;'e'
  6097  00FDD2  20                 	db	32
  6098  00FDD3  4E                 	db	78	;'N'
  6099  00FDD4  75                 	db	117	;'u'
  6100  00FDD5  6D                 	db	109	;'m'
  6101  00FDD6  62                 	db	98	;'b'
  6102  00FDD7  65                 	db	101	;'e'
  6103  00FDD8  72                 	db	114	;'r'
  6104  00FDD9  3A                 	db	58	;':'
  6105  00FDDA  00                 	db	0
  6106  00FDDB                     STR_51:
  6107  00FDDB  41                 	db	65	;'A'
  6108  00FDDC  75                 	db	117	;'u'
  6109  00FDDD  74                 	db	116	;'t'
  6110  00FDDE  6F                 	db	111	;'o'
  6111  00FDDF  4C                 	db	76	;'L'
  6112  00FDE0  61                 	db	97	;'a'
  6113  00FDE1  74                 	db	116	;'t'
  6114  00FDE2  63                 	db	99	;'c'
  6115  00FDE3  68                 	db	104	;'h'
  6116  00FDE4  20                 	db	32
  6117  00FDE5  4F                 	db	79	;'O'
  6118  00FDE6  4E                 	db	78	;'N'
  6119  00FDE7  2F                 	db	47
  6120  00FDE8  4F                 	db	79	;'O'
  6121  00FDE9  46                 	db	70	;'F'
  6122  00FDEA  46                 	db	70	;'F'
  6123  00FDEB  00                 	db	0
  6124  00FDEC                     STR_39:
  6125  00FDEC  45                 	db	69	;'E'
  6126  00FDED  6E                 	db	110	;'n'
  6127  00FDEE  63                 	db	99	;'c'
  6128  00FDEF  6F                 	db	111	;'o'
  6129  00FDF0  64                 	db	100	;'d'
  6130  00FDF1  65                 	db	101	;'e'
  6131  00FDF2  72                 	db	114	;'r'
  6132  00FDF3  20                 	db	32
  6133  00FDF4  50                 	db	80	;'P'
  6134  00FDF5  6F                 	db	111	;'o'
  6135  00FDF6  6C                 	db	108	;'l'
  6136  00FDF7  61                 	db	97	;'a'
  6137  00FDF8  72                 	db	114	;'r'
  6138  00FDF9  69                 	db	105	;'i'
  6139  00FDFA  74                 	db	116	;'t'
  6140  00FDFB  79                 	db	121	;'y'
  6141  00FDFC  00                 	db	0
  6142  00FDFD                     STR_21:
  6143  00FDFD  53                 	db	83	;'S'
  6144  00FDFE  65                 	db	101	;'e'
  6145  00FDFF  74                 	db	116	;'t'
  6146  00FE00  74                 	db	116	;'t'
  6147  00FE01  69                 	db	105	;'i'
  6148  00FE02  6E                 	db	110	;'n'
  6149  00FE03  67                 	db	103	;'g'
  6150  00FE04  73                 	db	115	;'s'
  6151  00FE05  20                 	db	32
  6152  00FE06  53                 	db	83	;'S'
  6153  00FE07  61                 	db	97	;'a'
  6154  00FE08  76                 	db	118	;'v'
  6155  00FE09  65                 	db	101	;'e'
  6156  00FE0A  64                 	db	100	;'d'
  6157  00FE0B  21                 	db	33
  6158  00FE0C  00                 	db	0
  6159  00FE0D                     STR_74:
  6160  00FE0D  4C                 	db	76	;'L'
  6161  00FE0E  61                 	db	97	;'a'
  6162  00FE0F  73                 	db	115	;'s'
  6163  00FE10  74                 	db	116	;'t'
  6164  00FE11  20                 	db	32
  6165  00FE12  4E                 	db	78	;'N'
  6166  00FE13  6F                 	db	111	;'o'
  6167  00FE14  74                 	db	116	;'t'
  6168  00FE15  65                 	db	101	;'e'
  6169  00FE16  20                 	db	32
  6170  00FE17  4D                 	db	77	;'M'
  6171  00FE18  6F                 	db	111	;'o'
  6172  00FE19  64                 	db	100	;'d'
  6173  00FE1A  65                 	db	101	;'e'
  6174  00FE1B  3A                 	db	58	;':'
  6175  00FE1C  00                 	db	0
  6176  00FE1D                     STR_61:
  6177  00FE1D  52                 	db	82	;'R'
  6178  00FE1E  61                 	db	97	;'a'
  6179  00FE1F  6E                 	db	110	;'n'
  6180  00FE20  64                 	db	100	;'d'
  6181  00FE21  6F                 	db	111	;'o'
  6182  00FE22  6D                 	db	109	;'m'
  6183  00FE23  69                 	db	105	;'i'
  6184  00FE24  7A                 	db	122	;'z'
  6185  00FE25  65                 	db	101	;'e'
  6186  00FE26  20                 	db	32
  6187  00FE27  54                 	db	84	;'T'
  6188  00FE28  79                 	db	121	;'y'
  6189  00FE29  70                 	db	112	;'p'
  6190  00FE2A  65                 	db	101	;'e'
  6191  00FE2B  3A                 	db	58	;':'
  6192  00FE2C  00                 	db	0
  6193  00FE2D                     STR_26:
  6194  00FE2D  53                 	db	83	;'S'
  6195  00FE2E  65                 	db	101	;'e'
  6196  00FE2F  6C                 	db	108	;'l'
  6197  00FE30  65                 	db	101	;'e'
  6198  00FE31  63                 	db	99	;'c'
  6199  00FE32  74                 	db	116	;'t'
  6200  00FE33  20                 	db	32
  6201  00FE34  53                 	db	83	;'S'
  6202  00FE35  65                 	db	101	;'e'
  6203  00FE36  76                 	db	118	;'v'
  6204  00FE37  65                 	db	101	;'e'
  6205  00FE38  6E                 	db	110	;'n'
  6206  00FE39  74                 	db	116	;'t'
  6207  00FE3A  68                 	db	104	;'h'
  6208  00FE3B  3A                 	db	58	;':'
  6209  00FE3C  00                 	db	0
  6210  00FE3D                     STR_40:
  6211  00FE3D  41                 	db	65	;'A'
  6212  00FE3E  52                 	db	82	;'R'
  6213  00FE3F  50                 	db	80	;'P'
  6214  00FE40  45                 	db	69	;'E'
  6215  00FE41  47                 	db	71	;'G'
  6216  00FE42  47                 	db	71	;'G'
  6217  00FE43  49                 	db	73	;'I'
  6218  00FE44  41                 	db	65	;'A'
  6219  00FE45  54                 	db	84	;'T'
  6220  00FE46  4F                 	db	79	;'O'
  6221  00FE47  52                 	db	82	;'R'
  6222  00FE48  20                 	db	32
  6223  00FE49  4F                 	db	79	;'O'
  6224  00FE4A  46                 	db	70	;'F'
  6225  00FE4B  46                 	db	70	;'F'
  6226  00FE4C  00                 	db	0
  6227  00FE4D                     STR_32:
  6228  00FE4D  53                 	db	83	;'S'
  6229  00FE4E  6C                 	db	108	;'l'
  6230  00FE4F  69                 	db	105	;'i'
  6231  00FE50  64                 	db	100	;'d'
  6232  00FE51  65                 	db	101	;'e'
  6233  00FE52  70                 	db	112	;'p'
  6234  00FE53  6F                 	db	111	;'o'
  6235  00FE54  74                 	db	116	;'t'
  6236  00FE55  73                 	db	115	;'s'
  6237  00FE56  20                 	db	32
  6238  00FE57  43                 	db	67	;'C'
  6239  00FE58  43                 	db	67	;'C'
  6240  00FE59  23                 	db	35
  6241  00FE5A  3A                 	db	58	;':'
  6242  00FE5B  00                 	db	0
  6243  00FE5C                     STR_56:
  6244  00FE5C  55                 	db	85	;'U'
  6245  00FE5D  6E                 	db	110	;'n'
  6246  00FE5E  2D                 	db	45
  6247  00FE5F  6C                 	db	108	;'l'
  6248  00FE60  61                 	db	97	;'a'
  6249  00FE61  74                 	db	116	;'t'
  6250  00FE62  63                 	db	99	;'c'
  6251  00FE63  68                 	db	104	;'h'
  6252  00FE64  20                 	db	32
  6253  00FE65  4D                 	db	77	;'M'
  6254  00FE66  6F                 	db	111	;'o'
  6255  00FE67  64                 	db	100	;'d'
  6256  00FE68  65                 	db	101	;'e'
  6257  00FE69  3A                 	db	58	;':'
  6258  00FE6A  00                 	db	0
  6259  00FE6B                     STR_29:
  6260  00FE6B  53                 	db	83	;'S'
  6261  00FE6C  65                 	db	101	;'e'
  6262  00FE6D  74                 	db	116	;'t'
  6263  00FE6E  20                 	db	32
  6264  00FE6F  43                 	db	67	;'C'
  6265  00FE70  43                 	db	67	;'C'
  6266  00FE71  20                 	db	32
  6267  00FE72  4E                 	db	78	;'N'
  6268  00FE73  75                 	db	117	;'u'
  6269  00FE74  6D                 	db	109	;'m'
  6270  00FE75  62                 	db	98	;'b'
  6271  00FE76  65                 	db	101	;'e'
  6272  00FE77  72                 	db	114	;'r'
  6273  00FE78  3A                 	db	58	;':'
  6274  00FE79  00                 	db	0
  6275  00FE7A                     STR_63:
  6276  00FE7A  52                 	db	82	;'R'
  6277  00FE7B  41                 	db	65	;'A'
  6278  00FE7C  4E                 	db	78	;'N'
  6279  00FE7D  44                 	db	68	;'D'
  6280  00FE7E  4F                 	db	79	;'O'
  6281  00FE7F  4D                 	db	77	;'M'
  6282  00FE80  49                 	db	73	;'I'
  6283  00FE81  5A                 	db	90	;'Z'
  6284  00FE82  45                 	db	69	;'E'
  6285  00FE83  20                 	db	32
  6286  00FE84  4F                 	db	79	;'O'
  6287  00FE85  4E                 	db	78	;'N'
  6288  00FE86  43                 	db	67	;'C'
  6289  00FE87  45                 	db	69	;'E'
  6290  00FE88  00                 	db	0
  6291  00FE89                     STR_52:
  6292  00FE89  41                 	db	65	;'A'
  6293  00FE8A  75                 	db	117	;'u'
  6294  00FE8B  74                 	db	116	;'t'
  6295  00FE8C  6F                 	db	111	;'o'
  6296  00FE8D  20                 	db	32
  6297  00FE8E  4C                 	db	76	;'L'
  6298  00FE8F  61                 	db	97	;'a'
  6299  00FE90  74                 	db	116	;'t'
  6300  00FE91  63                 	db	99	;'c'
  6301  00FE92  68                 	db	104	;'h'
  6302  00FE93  20                 	db	32
  6303  00FE94  4F                 	db	79	;'O'
  6304  00FE95  46                 	db	70	;'F'
  6305  00FE96  46                 	db	70	;'F'
  6306  00FE97  00                 	db	0
  6307  00FE98                     STR_42:
  6308  00FE98  41                 	db	65	;'A'
  6309  00FE99  52                 	db	82	;'R'
  6310  00FE9A  50                 	db	80	;'P'
  6311  00FE9B  45                 	db	69	;'E'
  6312  00FE9C  47                 	db	71	;'G'
  6313  00FE9D  47                 	db	71	;'G'
  6314  00FE9E  49                 	db	73	;'I'
  6315  00FE9F  41                 	db	65	;'A'
  6316  00FEA0  54                 	db	84	;'T'
  6317  00FEA1  4F                 	db	79	;'O'
  6318  00FEA2  52                 	db	82	;'R'
  6319  00FEA3  20                 	db	32
  6320  00FEA4  4F                 	db	79	;'O'
  6321  00FEA5  4E                 	db	78	;'N'
  6322  00FEA6  00                 	db	0
  6323  00FEA7                     STR_62:
  6324  00FEA7  52                 	db	82	;'R'
  6325  00FEA8  41                 	db	65	;'A'
  6326  00FEA9  4E                 	db	78	;'N'
  6327  00FEAA  44                 	db	68	;'D'
  6328  00FEAB  4F                 	db	79	;'O'
  6329  00FEAC  4D                 	db	77	;'M'
  6330  00FEAD  49                 	db	73	;'I'
  6331  00FEAE  5A                 	db	90	;'Z'
  6332  00FEAF  45                 	db	69	;'E'
  6333  00FEB0  20                 	db	32
  6334  00FEB1  41                 	db	65	;'A'
  6335  00FEB2  55                 	db	85	;'U'
  6336  00FEB3  54                 	db	84	;'T'
  6337  00FEB4  4F                 	db	79	;'O'
  6338  00FEB5  00                 	db	0
  6339  00FEB6                     STR_44:
  6340  00FEB6  54                 	db	84	;'T'
  6341  00FEB7  65                 	db	101	;'e'
  6342  00FEB8  6D                 	db	109	;'m'
  6343  00FEB9  70                 	db	112	;'p'
  6344  00FEBA  6F                 	db	111	;'o'
  6345  00FEBB  20                 	db	32
  6346  00FEBC  28                 	db	40
  6347  00FEBD  42                 	db	66	;'B'
  6348  00FEBE  50                 	db	80	;'P'
  6349  00FEBF  4D                 	db	77	;'M'
  6350  00FEC0  29                 	db	41
  6351  00FEC1  3A                 	db	58	;':'
  6352  00FEC2  20                 	db	32
  6353  00FEC3  00                 	db	0
  6354  00FEC4                     STR_31:
  6355  00FEC4  53                 	db	83	;'S'
  6356  00FEC5  65                 	db	101	;'e'
  6357  00FEC6  74                 	db	116	;'t'
  6358  00FEC7  20                 	db	32
  6359  00FEC8  50                 	db	80	;'P'
  6360  00FEC9  6F                 	db	111	;'o'
  6361  00FECA  74                 	db	116	;'t'
  6362  00FECB  73                 	db	115	;'s'
  6363  00FECC  20                 	db	32
  6364  00FECD  43                 	db	67	;'C'
  6365  00FECE  43                 	db	67	;'C'
  6366  00FECF  23                 	db	35
  6367  00FED0  3A                 	db	58	;':'
  6368  00FED1  00                 	db	0
  6369  00FED2                     STR_25:
  6370  00FED2  53                 	db	83	;'S'
  6371  00FED3  65                 	db	101	;'e'
  6372  00FED4  6C                 	db	108	;'l'
  6373  00FED5  65                 	db	101	;'e'
  6374  00FED6  63                 	db	99	;'c'
  6375  00FED7  74                 	db	116	;'t'
  6376  00FED8  20                 	db	32
  6377  00FED9  54                 	db	84	;'T'
  6378  00FEDA  72                 	db	114	;'r'
  6379  00FEDB  69                 	db	105	;'i'
  6380  00FEDC  61                 	db	97	;'a'
  6381  00FEDD  64                 	db	100	;'d'
  6382  00FEDE  3A                 	db	58	;':'
  6383  00FEDF  00                 	db	0
  6384  00FEE0                     STR_27:
  6385  00FEE0  44                 	db	68	;'D'
  6386  00FEE1  72                 	db	114	;'r'
  6387  00FEE2  75                 	db	117	;'u'
  6388  00FEE3  6D                 	db	109	;'m'
  6389  00FEE4  20                 	db	32
  6390  00FEE5  43                 	db	67	;'C'
  6391  00FEE6  43                 	db	67	;'C'
  6392  00FEE7  20                 	db	32
  6393  00FEE8  4D                 	db	77	;'M'
  6394  00FEE9  6F                 	db	111	;'o'
  6395  00FEEA  64                 	db	100	;'d'
  6396  00FEEB  65                 	db	101	;'e'
  6397  00FEEC  3A                 	db	58	;':'
  6398  00FEED  00                 	db	0
  6399  00FEEE                     STR_45:
  6400  00FEEE  4F                 	db	79	;'O'
  6401  00FEEF  63                 	db	99	;'c'
  6402  00FEF0  74                 	db	116	;'t'
  6403  00FEF1  61                 	db	97	;'a'
  6404  00FEF2  76                 	db	118	;'v'
  6405  00FEF3  65                 	db	101	;'e'
  6406  00FEF4  20                 	db	32
  6407  00FEF5  52                 	db	82	;'R'
  6408  00FEF6  61                 	db	97	;'a'
  6409  00FEF7  6E                 	db	110	;'n'
  6410  00FEF8  67                 	db	103	;'g'
  6411  00FEF9  65                 	db	101	;'e'
  6412  00FEFA  3A                 	db	58	;':'
  6413  00FEFB  00                 	db	0
  6414  00FEFC                     STR_59:
  6415  00FEFC  4F                 	db	79	;'O'
  6416  00FEFD  4E                 	db	78	;'N'
  6417  00FEFE  45                 	db	69	;'E'
  6418  00FEFF  20                 	db	32
  6419  00FF00  41                 	db	65	;'A'
  6420  00FF01  54                 	db	84	;'T'
  6421  00FF02  20                 	db	32
  6422  00FF03  41                 	db	65	;'A'
  6423  00FF04  20                 	db	32
  6424  00FF05  54                 	db	84	;'T'
  6425  00FF06  49                 	db	73	;'I'
  6426  00FF07  4D                 	db	77	;'M'
  6427  00FF08  45                 	db	69	;'E'
  6428  00FF09  00                 	db	0
  6429  00FF0A                     STR_54:
  6430  00FF0A  41                 	db	65	;'A'
  6431  00FF0B  75                 	db	117	;'u'
  6432  00FF0C  74                 	db	116	;'t'
  6433  00FF0D  6F                 	db	111	;'o'
  6434  00FF0E  20                 	db	32
  6435  00FF0F  4C                 	db	76	;'L'
  6436  00FF10  61                 	db	97	;'a'
  6437  00FF11  74                 	db	116	;'t'
  6438  00FF12  63                 	db	99	;'c'
  6439  00FF13  68                 	db	104	;'h'
  6440  00FF14  20                 	db	32
  6441  00FF15  4F                 	db	79	;'O'
  6442  00FF16  4E                 	db	78	;'N'
  6443  00FF17  00                 	db	0
  6444  00FF18                     STR_23:
  6445  00FF18  45                 	db	69	;'E'
  6446  00FF19  78                 	db	120	;'x'
  6447  00FF1A  69                 	db	105	;'i'
  6448  00FF1B  74                 	db	116	;'t'
  6449  00FF1C  20                 	db	32
  6450  00FF1D  45                 	db	69	;'E'
  6451  00FF1E  45                 	db	69	;'E'
  6452  00FF1F  50                 	db	80	;'P'
  6453  00FF20  52                 	db	82	;'R'
  6454  00FF21  4F                 	db	79	;'O'
  6455  00FF22  4D                 	db	77	;'M'
  6456  00FF23  21                 	db	33
  6457  00FF24  00                 	db	0
  6458  00FF25                     STR_38:
  6459  00FF25  52                 	db	82	;'R'
  6460  00FF26  65                 	db	101	;'e'
  6461  00FF27  62                 	db	98	;'b'
  6462  00FF28  6F                 	db	111	;'o'
  6463  00FF29  6F                 	db	111	;'o'
  6464  00FF2A  74                 	db	116	;'t'
  6465  00FF2B  69                 	db	105	;'i'
  6466  00FF2C  6E                 	db	110	;'n'
  6467  00FF2D  67                 	db	103	;'g'
  6468  00FF2E  2E                 	db	46
  6469  00FF2F  2E                 	db	46
  6470  00FF30  2E                 	db	46
  6471  00FF31  00                 	db	0
  6472  00FF32                     STR_47:
  6473  00FF32  4E                 	db	78	;'N'
  6474  00FF33  6F                 	db	111	;'o'
  6475  00FF34  74                 	db	116	;'t'
  6476  00FF35  65                 	db	101	;'e'
  6477  00FF36  20                 	db	32
  6478  00FF37  4C                 	db	76	;'L'
  6479  00FF38  65                 	db	101	;'e'
  6480  00FF39  6E                 	db	110	;'n'
  6481  00FF3A  67                 	db	103	;'g'
  6482  00FF3B  74                 	db	116	;'t'
  6483  00FF3C  68                 	db	104	;'h'
  6484  00FF3D  3A                 	db	58	;':'
  6485  00FF3E  00                 	db	0
  6486  00FF3F                     STR_64:
  6487  00FF3F  53                 	db	83	;'S'
  6488  00FF40  6B                 	db	107	;'k'
  6489  00FF41  69                 	db	105	;'i'
  6490  00FF42  70                 	db	112	;'p'
  6491  00FF43  20                 	db	32
  6492  00FF44  46                 	db	70	;'F'
  6493  00FF45  2F                 	db	47
  6494  00FF46  4C                 	db	76	;'L'
  6495  00FF47  20                 	db	32
  6496  00FF48  4F                 	db	79	;'O'
  6497  00FF49  46                 	db	70	;'F'
  6498  00FF4A  46                 	db	70	;'F'
  6499  00FF4B  00                 	db	0
  6500  00FF4C                     STR_34:
  6501  00FF4C  50                 	db	80	;'P'
  6502  00FF4D  72                 	db	114	;'r'
  6503  00FF4E  6F                 	db	111	;'o'
  6504  00FF4F  67                 	db	103	;'g'
  6505  00FF50  72                 	db	114	;'r'
  6506  00FF51  61                 	db	97	;'a'
  6507  00FF52  6D                 	db	109	;'m'
  6508  00FF53  20                 	db	32
  6509  00FF54  23                 	db	35
  6510  00FF55  3A                 	db	58	;':'
  6511  00FF56  20                 	db	32
  6512  00FF57  00                 	db	0
  6513  00FF58                     STR_24:
  6514  00FF58  45                 	db	69	;'E'
  6515  00FF59  6E                 	db	110	;'n'
  6516  00FF5A  74                 	db	116	;'t'
  6517  00FF5B  65                 	db	101	;'e'
  6518  00FF5C  72                 	db	114	;'r'
  6519  00FF5D  20                 	db	32
  6520  00FF5E  4D                 	db	77	;'M'
  6521  00FF5F  6F                 	db	111	;'o'
  6522  00FF60  64                 	db	100	;'d'
  6523  00FF61  65                 	db	101	;'e'
  6524  00FF62  3A                 	db	58	;':'
  6525  00FF63  00                 	db	0
  6526  00FF64                     STR_57:
  6527  00FF64  55                 	db	85	;'U'
  6528  00FF65  4E                 	db	78	;'N'
  6529  00FF66  4C                 	db	76	;'L'
  6530  00FF67  41                 	db	65	;'A'
  6531  00FF68  54                 	db	84	;'T'
  6532  00FF69  43                 	db	67	;'C'
  6533  00FF6A  48                 	db	72	;'H'
  6534  00FF6B  20                 	db	32
  6535  00FF6C  41                 	db	65	;'A'
  6536  00FF6D  4C                 	db	76	;'L'
  6537  00FF6E  4C                 	db	76	;'L'
  6538  00FF6F  00                 	db	0
  6539  00FF70                     STR_65:
  6540  00FF70  53                 	db	83	;'S'
  6541  00FF71  6B                 	db	107	;'k'
  6542  00FF72  69                 	db	105	;'i'
  6543  00FF73  70                 	db	112	;'p'
  6544  00FF74  20                 	db	32
  6545  00FF75  46                 	db	70	;'F'
  6546  00FF76  2F                 	db	47
  6547  00FF77  4C                 	db	76	;'L'
  6548  00FF78  20                 	db	32
  6549  00FF79  4F                 	db	79	;'O'
  6550  00FF7A  4E                 	db	78	;'N'
  6551  00FF7B  00                 	db	0
  6552  00FF7C                     STR_67:
  6553  00FF7C  46                 	db	70	;'F'
  6554  00FF7D  49                 	db	73	;'I'
  6555  00FF7E  4E                 	db	78	;'N'
  6556  00FF7F  49                 	db	73	;'I'
  6557  00FF80  53                 	db	83	;'S'
  6558  00FF81  48                 	db	72	;'H'
  6559  00FF82  20                 	db	32
  6560  00FF83  4C                 	db	76	;'L'
  6561  00FF84  41                 	db	65	;'A'
  6562  00FF85  53                 	db	83	;'S'
  6563  00FF86  54                 	db	84	;'T'
  6564  00FF87  00                 	db	0
  6565  00FF88                     STR_14:
  6566  00FF88  20                 	db	32
  6567  00FF89  50                 	db	80	;'P'
  6568  00FF8A  49                 	db	73	;'I'
  6569  00FF8B  54                 	db	84	;'T'
  6570  00FF8C  43                 	db	67	;'C'
  6571  00FF8D  48                 	db	72	;'H'
  6572  00FF8E  42                 	db	66	;'B'
  6573  00FF8F  45                 	db	69	;'E'
  6574  00FF90  4E                 	db	78	;'N'
  6575  00FF91  44                 	db	68	;'D'
  6576  00FF92  00                 	db	0
  6577  00FF93                     STR_15:
  6578  00FF93  20                 	db	32
  6579  00FF94  4D                 	db	77	;'M'
  6580  00FF95  4F                 	db	79	;'O'
  6581  00FF96  44                 	db	68	;'D'
  6582  00FF97  2E                 	db	46
  6583  00FF98  57                 	db	87	;'W'
  6584  00FF99  48                 	db	72	;'H'
  6585  00FF9A  45                 	db	69	;'E'
  6586  00FF9B  45                 	db	69	;'E'
  6587  00FF9C  4C                 	db	76	;'L'
  6588  00FF9D  00                 	db	0
  6589  00FF9E                     STR_13:
  6590  00FF9E  20                 	db	32
  6591  00FF9F  20                 	db	32
  6592  00FFA0  56                 	db	86	;'V'
  6593  00FFA1  45                 	db	69	;'E'
  6594  00FFA2  4C                 	db	76	;'L'
  6595  00FFA3  4F                 	db	79	;'O'
  6596  00FFA4  43                 	db	67	;'C'
  6597  00FFA5  49                 	db	73	;'I'
  6598  00FFA6  54                 	db	84	;'T'
  6599  00FFA7  59                 	db	89	;'Y'
  6600  00FFA8  00                 	db	0
  6601  00FFA9                     STR_66:
  6602  00FFA9  49                 	db	73	;'I'
  6603  00FFAA  4D                 	db	77	;'M'
  6604  00FFAB  4D                 	db	77	;'M'
  6605  00FFAC  45                 	db	69	;'E'
  6606  00FFAD  44                 	db	68	;'D'
  6607  00FFAE  49                 	db	73	;'I'
  6608  00FFAF  41                 	db	65	;'A'
  6609  00FFB0  54                 	db	84	;'T'
  6610  00FFB1  45                 	db	69	;'E'
  6611  00FFB2  00                 	db	0
  6612  00FFB3                     STR_36:
  6613  00FFB3  4C                 	db	76	;'L'
  6614  00FFB4  6F                 	db	111	;'o'
  6615  00FFB5  61                 	db	97	;'a'
  6616  00FFB6  64                 	db	100	;'d'
  6617  00FFB7  20                 	db	32
  6618  00FFB8  23                 	db	35
  6619  00FFB9  3A                 	db	58	;':'
  6620  00FFBA  00                 	db	0
  6621  00FFBB                     STR_35:
  6622  00FFBB  53                 	db	83	;'S'
  6623  00FFBC  61                 	db	97	;'a'
  6624  00FFBD  76                 	db	118	;'v'
  6625  00FFBE  65                 	db	101	;'e'
  6626  00FFBF  20                 	db	32
  6627  00FFC0  23                 	db	35
  6628  00FFC1  3A                 	db	58	;':'
  6629  00FFC2  00                 	db	0
  6630  00FFC3                     STR_20:
  6631  00FFC3  53                 	db	83	;'S'
  6632  00FFC4  65                 	db	101	;'e'
  6633  00FFC5  74                 	db	116	;'t'
  6634  00FFC6  21                 	db	33
  6635  00FFC7  00                 	db	0
  6636  00FFC8                     STR_60:
  6637  00FFC8  20                 	db	32
  6638  00FFC9  4F                 	db	79	;'O'
  6639  00FFCA  6E                 	db	110	;'n'
  6640  00FFCB  45                 	db	69	;'E'
  6641  00FFCC  00                 	db	0
  6642  00FFCD                     STR_41:
  6643  00FFCD  41                 	db	65	;'A'
  6644  00FFCE  6F                 	db	111	;'o'
  6645  00FFCF  46                 	db	70	;'F'
  6646  00FFD0  46                 	db	70	;'F'
  6647  00FFD1  00                 	db	0
  6648  00FFD2                     STR_43:
  6649  00FFD2  20                 	db	32
  6650  00FFD3  41                 	db	65	;'A'
  6651  00FFD4  72                 	db	114	;'r'
  6652  00FFD5  50                 	db	80	;'P'
  6653  00FFD6  00                 	db	0
  6654  00FFD7                     STR_8:
  6655  00FFD7  74                 	db	116	;'t'
  6656  00FFD8  45                 	db	69	;'E'
  6657  00FFD9  53                 	db	83	;'S'
  6658  00FFDA  74                 	db	116	;'t'
  6659  00FFDB  00                 	db	0
  6660  00FFDC                     STR_5:
  6661  00FFDC  20                 	db	32
  6662  00FFDD  6F                 	db	111	;'o'
  6663  00FFDE  46                 	db	70	;'F'
  6664  00FFDF  46                 	db	70	;'F'
  6665  00FFE0  00                 	db	0
  6666  00FFE1                     STR_2:
  6667  00FFE1  20                 	db	32
  6668  00FFE2  64                 	db	100	;'d'
  6669  00FFE3  45                 	db	69	;'E'
  6670  00FFE4  4C                 	db	76	;'L'
  6671  00FFE5  00                 	db	0
  6672  00FFE6                     STR_1:
  6673  00FFE6  48                 	db	72	;'H'
  6674  00FFE7  6F                 	db	111	;'o'
  6675  00FFE8  4C                 	db	76	;'L'
  6676  00FFE9  64                 	db	100	;'d'
  6677  00FFEA  00                 	db	0
  6678  00FFEB                     STR_6:
  6679  00FFEB  72                 	db	114	;'r'
  6680  00FFEC  41                 	db	65	;'A'
  6681  00FFED  6E                 	db	110	;'n'
  6682  00FFEE  64                 	db	100	;'d'
  6683  00FFEF  00                 	db	0
  6684  00FFF0                     STR_4:
  6685  00FFF0  41                 	db	65	;'A'
  6686  00FFF1  75                 	db	117	;'u'
  6687  00FFF2  74                 	db	116	;'t'
  6688  00FFF3  6F                 	db	111	;'o'
  6689  00FFF4  00                 	db	0
  6690  00FFF5                     STR_7:
  6691  00FFF5  72                 	db	114	;'r'
  6692  00FFF6  53                 	db	83	;'S'
  6693  00FFF7  45                 	db	69	;'E'
  6694  00FFF8  74                 	db	116	;'t'
  6695  00FFF9  00                 	db	0
  6696  00FFFA                     STR_3:
  6697  00FFFA  4C                 	db	76	;'L'
  6698  00FFFB  61                 	db	97	;'a'
  6699  00FFFC  53                 	db	83	;'S'
  6700  00FFFD  74                 	db	116	;'t'
  6701  00FFFE  00                 	db	0
  6702  0000                     
  6703                           ; #config settings
  6704  00FFFF  00                 	db	0	; dummy byte at the end
  6705  0000                     
  6706                           	psect	cinit
  6707  006716                     __pcinit:
  6708                           	opt stack 0
  6709  006716                     start_initialization:
  6710                           	opt stack 0
  6711  006716                     __initialization:
  6712                           	opt stack 0
  6713                           
  6714                           ; Initialize objects allocated to BANK3 (105 bytes)
  6715                           ; load TBLPTR registers with __pidataBANK3
  6716  006716  0E4E               	movlw	low __pidataBANK3
  6717  006718  6EF6               	movwf	tblptrl,c
  6718  00671A  0E87               	movlw	high __pidataBANK3
  6719  00671C  6EF7               	movwf	tblptrh,c
  6720  00671E  0E00               	movlw	low (__pidataBANK3 shr (0+16))
  6721  006720  6EF8               	movwf	tblptru,c
  6722  006722  EE03  F000         	lfsr	0,__pdataBANK3
  6723  006726  EE10 F069          	lfsr	1,105
  6724  00672A                     copy_data0:
  6725  00672A  0009               	tblrd		*+
  6726  00672C  CFF5 FFEE          	movff	tablat,postinc0
  6727  006730  50E5               	movf	postdec1,w,c
  6728  006732  50E1               	movf	fsr1l,w,c
  6729  006734  E1FA               	bnz	copy_data0
  6730                           
  6731                           ; Initialize objects allocated to BANK2 (80 bytes)
  6732                           ; load TBLPTR registers with __pidataBANK2
  6733  006736  0E38               	movlw	low __pidataBANK2
  6734  006738  6EF6               	movwf	tblptrl,c
  6735  00673A  0E8E               	movlw	high __pidataBANK2
  6736  00673C  6EF7               	movwf	tblptrh,c
  6737  00673E  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  6738  006740  6EF8               	movwf	tblptru,c
  6739  006742  EE02  F0AC         	lfsr	0,__pdataBANK2
  6740  006746  EE10 F050          	lfsr	1,80
  6741  00674A                     copy_data1:
  6742  00674A  0009               	tblrd		*+
  6743  00674C  CFF5 FFEE          	movff	tablat,postinc0
  6744  006750  50E5               	movf	postdec1,w,c
  6745  006752  50E1               	movf	fsr1l,w,c
  6746  006754  E1FA               	bnz	copy_data1
  6747                           
  6748                           ; Initialize objects allocated to BANK1 (40 bytes)
  6749                           ; load TBLPTR registers with __pidataBANK1
  6750  006756  0E54               	movlw	low __pidataBANK1
  6751  006758  6EF6               	movwf	tblptrl,c
  6752  00675A  0E94               	movlw	high __pidataBANK1
  6753  00675C  6EF7               	movwf	tblptrh,c
  6754  00675E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  6755  006760  6EF8               	movwf	tblptru,c
  6756  006762  EE01  F0D7         	lfsr	0,__pdataBANK1
  6757  006766  EE10 F028          	lfsr	1,40
  6758  00676A                     copy_data2:
  6759  00676A  0009               	tblrd		*+
  6760  00676C  CFF5 FFEE          	movff	tablat,postinc0
  6761  006770  50E5               	movf	postdec1,w,c
  6762  006772  50E1               	movf	fsr1l,w,c
  6763  006774  E1FA               	bnz	copy_data2
  6764                           
  6765                           ; Initialize objects allocated to BANK0 (9 bytes)
  6766                           ; load TBLPTR registers with __pidataBANK0
  6767  006776  0E58               	movlw	low __pidataBANK0
  6768  006778  6EF6               	movwf	tblptrl,c
  6769  00677A  0E96               	movlw	high __pidataBANK0
  6770  00677C  6EF7               	movwf	tblptrh,c
  6771  00677E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  6772  006780  6EF8               	movwf	tblptru,c
  6773  006782  EE00  F0F7         	lfsr	0,__pdataBANK0
  6774  006786  EE10 F009          	lfsr	1,9
  6775  00678A                     copy_data3:
  6776  00678A  0009               	tblrd		*+
  6777  00678C  CFF5 FFEE          	movff	tablat,postinc0
  6778  006790  50E5               	movf	postdec1,w,c
  6779  006792  50E1               	movf	fsr1l,w,c
  6780  006794  E1FA               	bnz	copy_data3
  6781                           
  6782                           ; Initialize objects allocated to COMRAM (4 bytes)
  6783                           ; load TBLPTR registers with __pidataCOMRAM
  6784  006796  0E7A               	movlw	low __pidataCOMRAM
  6785  006798  6EF6               	movwf	tblptrl,c
  6786  00679A  0E96               	movlw	high __pidataCOMRAM
  6787  00679C  6EF7               	movwf	tblptrh,c
  6788  00679E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  6789  0067A0  6EF8               	movwf	tblptru,c
  6790  0067A2  EE00  F05B         	lfsr	0,__pdataCOMRAM
  6791  0067A6  EE10 F004          	lfsr	1,4
  6792  0067AA                     copy_data4:
  6793  0067AA  0009               	tblrd		*+
  6794  0067AC  CFF5 FFEE          	movff	tablat,postinc0
  6795  0067B0  50E5               	movf	postdec1,w,c
  6796  0067B2  50E1               	movf	fsr1l,w,c
  6797  0067B4  E1FA               	bnz	copy_data4
  6798                           
  6799                           ; Clear objects allocated to BANK2 (172 bytes)
  6800  0067B6  EE02  F000         	lfsr	0,__pbssBANK2
  6801  0067BA  0EAC               	movlw	172
  6802  0067BC                     clear_0:
  6803  0067BC  6AEE               	clrf	postinc0,c
  6804  0067BE  06E8               	decf	wreg,f,c
  6805  0067C0  E1FD               	bnz	clear_0
  6806                           
  6807                           ; Clear objects allocated to BANK1 (135 bytes)
  6808  0067C2  EE01  F000         	lfsr	0,__pbssBANK1
  6809  0067C6  0E87               	movlw	135
  6810  0067C8                     clear_1:
  6811  0067C8  6AEE               	clrf	postinc0,c
  6812  0067CA  06E8               	decf	wreg,f,c
  6813  0067CC  E1FD               	bnz	clear_1
  6814                           
  6815                           ; Clear objects allocated to BANK0 (39 bytes)
  6816  0067CE  EE00  F0D0         	lfsr	0,__pbssBANK0
  6817  0067D2  0E27               	movlw	39
  6818  0067D4                     clear_2:
  6819  0067D4  6AEE               	clrf	postinc0,c
  6820  0067D6  06E8               	decf	wreg,f,c
  6821  0067D8  E1FD               	bnz	clear_2
  6822                           
  6823                           ; Clear objects allocated to BITCOMRAM (5 bytes)
  6824  0067DA  6A36               	clrf	((__pbitbssCOMRAM/(0+8)+4))& (0+255),c
  6825  0067DC  6A35               	clrf	((__pbitbssCOMRAM/(0+8)+3))& (0+255),c
  6826  0067DE  6A34               	clrf	((__pbitbssCOMRAM/(0+8)+2))& (0+255),c
  6827  0067E0  6A33               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
  6828  0067E2  6A32               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  6829                           
  6830                           ; Clear objects allocated to COMRAM (36 bytes)
  6831  0067E4  EE00  F037         	lfsr	0,__pbssCOMRAM
  6832  0067E8  0E24               	movlw	36
  6833  0067EA                     clear_3:
  6834  0067EA  6AEE               	clrf	postinc0,c
  6835  0067EC  06E8               	decf	wreg,f,c
  6836  0067EE  E1FD               	bnz	clear_3
  6837  0067F0                     end_of_initialization:
  6838                           	opt stack 0
  6839  0067F0                     __end_of__initialization:
  6840                           	opt stack 0
  6841  0067F0  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  6842  0067F2  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6843  0067F4  0E00               	movlw	low (__Lmediumconst shr (0+16))
  6844  0067F6  6EF8               	movwf	tblptru,c
  6845  0067F8  0100               	movlb	0
  6846  0067FA  EF88  F031         	goto	_main	;jump to C main() function
  6847                           tblptru	equ	0xFF8
  6848                           tblptrh	equ	0xFF7
  6849                           tblptrl	equ	0xFF6
  6850                           tablat	equ	0xFF5
  6851                           postinc0	equ	0xFEE
  6852                           wreg	equ	0xFE8
  6853                           postdec1	equ	0xFE5
  6854                           fsr1l	equ	0xFE1
  6855                           
  6856                           	psect	bitbssCOMRAM
  6857  000190                     __pbitbssCOMRAM:
  6858                           	opt stack 0
  6859  000190                     readPotentiometers@FIRST_READING:
  6860                           	opt stack 0
  6861  000190                     	ds	1
  6862  000191                     int2string@isNegative:
  6863                           	opt stack 0
  6864  000191                     	ds	1
  6865  000192                     doTheUnLatch@once:
  6866                           	opt stack 0
  6867  000192                     	ds	1
  6868  000193                     keyboardTranspose@keyPress:
  6869                           	opt stack 0
  6870  000193                     	ds	1
  6871  000194                     _CONTROL_MODE:
  6872                           	opt stack 0
  6873  000194                     	ds	1
  6874  000195                     _DRUM_MODE:
  6875                           	opt stack 0
  6876  000195                     	ds	1
  6877  000196                     _DISPLAY_STEP_NUMBER:
  6878                           	opt stack 0
  6879  000196                     	ds	1
  6880  000197                     _flag2:
  6881                           	opt stack 0
  6882  000197                     	ds	1
  6883  000198                     _flag1:
  6884                           	opt stack 0
  6885  000198                     	ds	1
  6886  000199                     _note_off_was_sent:
  6887                           	opt stack 0
  6888  000199                     	ds	1
  6889  00019A                     _octave_overflow:
  6890                           	opt stack 0
  6891  00019A                     	ds	1
  6892  00019B                     _overflow:
  6893                           	opt stack 0
  6894  00019B                     	ds	1
  6895  00019C                     _suppress_note_off:
  6896                           	opt stack 0
  6897  00019C                     	ds	1
  6898  00019D                     _suppress_note_on:
  6899                           	opt stack 0
  6900  00019D                     	ds	1
  6901  00019E                     _finishLastNote:
  6902                           	opt stack 0
  6903  00019E                     	ds	1
  6904  00019F                     _LAST_NOTE_MODE_RESET:
  6905                           	opt stack 0
  6906  00019F                     	ds	1
  6907  0001A0                     _LAST_NOTE_MODE_TRANSPOSE:
  6908                           	opt stack 0
  6909  0001A0                     	ds	1
  6910  0001A1                     _LAST_NOTE_MODE_KEY_RELEASE:
  6911                           	opt stack 0
  6912  0001A1                     	ds	1
  6913  0001A2                     _LAST_NOTE_MODE_KEY_PRESS:
  6914                           	opt stack 0
  6915  0001A2                     	ds	1
  6916  0001A3                     _lastNoteMode:
  6917                           	opt stack 0
  6918  0001A3                     	ds	1
  6919  0001A4                     _skipFirstLast:
  6920                           	opt stack 0
  6921  0001A4                     	ds	1
  6922  0001A5                     _AUTO_RANDOMIZE:
  6923                           	opt stack 0
  6924  0001A5                     	ds	1
  6925  0001A6                     _latch_was_pressed:
  6926                           	opt stack 0
  6927  0001A6                     	ds	1
  6928  0001A7                     _AUTO_LATCH:
  6929                           	opt stack 0
  6930  0001A7                     	ds	1
  6931  0001A8                     _UN_LATCH_MODE:
  6932                           	opt stack 0
  6933  0001A8                     	ds	1
  6934  0001A9                     _LATCH:
  6935                           	opt stack 0
  6936  0001A9                     	ds	1
  6937  0001AA                     _RESET_ON_KEY_RELEASE:
  6938                           	opt stack 0
  6939  0001AA                     	ds	1
  6940  0001AB                     _RESET_ON_KEY_PRESS:
  6941                           	opt stack 0
  6942  0001AB                     	ds	1
  6943  0001AC                     _ARPEGGIO_ON:
  6944                           	opt stack 0
  6945  0001AC                     	ds	1
  6946  0001AD                     _SORT_DIRECTION:
  6947                           	opt stack 0
  6948  0001AD                     	ds	1
  6949  0001AE                     _TRANSPOSE_MODE:
  6950                           	opt stack 0
  6951  0001AE                     	ds	1
  6952  0001AF                     _lcd_print_once:
  6953                           	opt stack 0
  6954  0001AF                     	ds	1
  6955  0001B0                     _encoder_click:
  6956                           	opt stack 0
  6957  0001B0                     	ds	1
  6958  0001B1                     _encoderPolarity:
  6959                           	opt stack 0
  6960  0001B1                     	ds	1
  6961  0001B2                     _encoderB:
  6962                           	opt stack 0
  6963  0001B2                     	ds	1
  6964  0001B3                     _encoderA:
  6965                           	opt stack 0
  6966  0001B3                     	ds	1
  6967  0001B4                     _POT_MODE:
  6968                           	opt stack 0
  6969  0001B4                     	ds	1
  6970  0001B5                     _ON_OFF:
  6971                           	opt stack 0
  6972  0001B5                     	ds	1
  6973  0001B6                     _light_decimal_points:
  6974                           	opt stack 0
  6975  0001B6                     	ds	1
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           postinc0	equ	0xFEE
  6981                           wreg	equ	0xFE8
  6982                           postdec1	equ	0xFE5
  6983                           fsr1l	equ	0xFE1
  6984                           
  6985                           	psect	bssCOMRAM
  6986  000037                     __pbssCOMRAM:
  6987                           	opt stack 0
  6988  000037                     displayDigits@digit:
  6989                           	opt stack 0
  6990  000037                     	ds	4
  6991  00003B                     _arpeggiatorMenu:
  6992                           	opt stack 0
  6993  00003B                     	ds	3
  6994  00003E                     _potsMenu:
  6995                           	opt stack 0
  6996  00003E                     	ds	3
  6997  000041                     _drumMenu:
  6998                           	opt stack 0
  6999  000041                     	ds	3
  7000  000044                     _triadMenu:
  7001                           	opt stack 0
  7002  000044                     	ds	3
  7003  000047                     _modeMenu:
  7004                           	opt stack 0
  7005  000047                     	ds	3
  7006  00004A                     _keyboardMenu:
  7007                           	opt stack 0
  7008  00004A                     	ds	3
  7009  00004D                     displayDigits@number_to_display_temp:
  7010                           	opt stack 0
  7011  00004D                     	ds	2
  7012  00004F                     _arpeggioPtr:
  7013                           	opt stack 0
  7014  00004F                     	ds	2
  7015  000051                     displayString@letter_counter:
  7016                           	opt stack 0
  7017  000051                     	ds	1
  7018  000052                     displayDigits@digit_counter:
  7019                           	opt stack 0
  7020  000052                     	ds	1
  7021  000053                     keyboardTranspose@semitone_temp:
  7022                           	opt stack 0
  7023  000053                     	ds	1
  7024  000054                     _TIMER_OVERFLOWS:
  7025                           	opt stack 0
  7026  000054                     	ds	1
  7027  000055                     _last_octave:
  7028                           	opt stack 0
  7029  000055                     	ds	1
  7030  000056                     _which_octave:
  7031                           	opt stack 0
  7032  000056                     	ds	1
  7033  000057                     _which_note:
  7034                           	opt stack 0
  7035  000057                     	ds	1
  7036  000058                     _state:
  7037                           	opt stack 0
  7038  000058                     	ds	1
  7039  000059                     _DIGIT_MODE:
  7040                           	opt stack 0
  7041  000059                     	ds	1
  7042  00005A                     _DISPLAY_MODE:
  7043                           	opt stack 0
  7044  00005A                     	ds	1
  7045                           tblptru	equ	0xFF8
  7046                           tblptrh	equ	0xFF7
  7047                           tblptrl	equ	0xFF6
  7048                           tablat	equ	0xFF5
  7049                           postinc0	equ	0xFEE
  7050                           wreg	equ	0xFE8
  7051                           postdec1	equ	0xFE5
  7052                           fsr1l	equ	0xFE1
  7053                           
  7054                           	psect	dataCOMRAM
  7055  00005B                     __pdataCOMRAM:
  7056                           	opt stack 0
  7057  00005B                     _number_to_display:
  7058                           	opt stack 0
  7059  00005B                     	ds	2
  7060  00005D                     _PRESCALER:
  7061                           	opt stack 0
  7062  00005D                     	ds	1
  7063  00005E                     _PPQN:
  7064                           	opt stack 0
  7065  00005E                     	ds	1
  7066                           tblptru	equ	0xFF8
  7067                           tblptrh	equ	0xFF7
  7068                           tblptrl	equ	0xFF6
  7069                           tablat	equ	0xFF5
  7070                           postinc0	equ	0xFEE
  7071                           wreg	equ	0xFE8
  7072                           postdec1	equ	0xFE5
  7073                           fsr1l	equ	0xFE1
  7074                           
  7075                           	psect	bssBANK0
  7076  0000D0                     __pbssBANK0:
  7077                           	opt stack 0
  7078  0000D0                     _keyboard:
  7079                           	opt stack 0
  7080  0000D0                     	ds	4
  7081  0000D4                     _button_state_last:
  7082                           	opt stack 0
  7083  0000D4                     	ds	4
  7084  0000D8                     _button_state_now:
  7085                           	opt stack 0
  7086  0000D8                     	ds	4
  7087  0000DC                     _arpeggiatorLastNoteModeMenu:
  7088                           	opt stack 0
  7089  0000DC                     	ds	3
  7090  0000DF                     _savesMenu:
  7091                           	opt stack 0
  7092  0000DF                     	ds	3
  7093  0000E2                     key_press_release_note_off@temp:
  7094                           	opt stack 0
  7095  0000E2                     	ds	1
  7096  0000E3                     _toggle_state:
  7097                           	opt stack 0
  7098  0000E3                     	ds	1
  7099  0000E4                     _ARRAY_INDEX:
  7100                           	opt stack 0
  7101  0000E4                     	ds	1
  7102  0000E5                     _NUM_NOTES_PRESSED:
  7103                           	opt stack 0
  7104  0000E5                     	ds	1
  7105  0000E6                     _parallel:
  7106                           	opt stack 0
  7107  0000E6                     	ds	1
  7108  0000E7                     _stored_octave:
  7109                           	opt stack 0
  7110  0000E7                     	ds	1
  7111  0000E8                     _last_note:
  7112                           	opt stack 0
  7113  0000E8                     	ds	1
  7114  0000E9                     _startingDirection:
  7115                           	opt stack 0
  7116  0000E9                     	ds	1
  7117  0000EA                     _ARPEGGIO_TYPE:
  7118                           	opt stack 0
  7119  0000EA                     	ds	1
  7120  0000EB                     _encoder_direction:
  7121                           	opt stack 0
  7122  0000EB                     	ds	1
  7123  0000EC                     _drum:
  7124                           	opt stack 0
  7125  0000EC                     	ds	1
  7126  0000ED                     _drum_button_state_last:
  7127                           	opt stack 0
  7128  0000ED                     	ds	1
  7129  0000EE                     _drum_button_state_now:
  7130                           	opt stack 0
  7131  0000EE                     	ds	1
  7132  0000EF                     _which_seventh:
  7133                           	opt stack 0
  7134  0000EF                     	ds	1
  7135  0000F0                     _which_triad:
  7136                           	opt stack 0
  7137  0000F0                     	ds	1
  7138  0000F1                     _which_mode:
  7139                           	opt stack 0
  7140  0000F1                     	ds	1
  7141  0000F2                     _KEYBOARD_MODE:
  7142                           	opt stack 0
  7143  0000F2                     	ds	1
  7144  0000F3                     _semitone:
  7145                           	opt stack 0
  7146  0000F3                     	ds	1
  7147  0000F4                     _noteNumber:
  7148                           	opt stack 0
  7149  0000F4                     	ds	1
  7150  0000F5                     _statusByte:
  7151                           	opt stack 0
  7152  0000F5                     	ds	1
  7153  0000F6                     _channel:
  7154                           	opt stack 0
  7155  0000F6                     	ds	1
  7156                           tblptru	equ	0xFF8
  7157                           tblptrh	equ	0xFF7
  7158                           tblptrl	equ	0xFF6
  7159                           tablat	equ	0xFF5
  7160                           postinc0	equ	0xFEE
  7161                           wreg	equ	0xFE8
  7162                           postdec1	equ	0xFE5
  7163                           fsr1l	equ	0xFE1
  7164                           
  7165                           	psect	dataBANK0
  7166  0000F7                     __pdataBANK0:
  7167                           	opt stack 0
  7168  0000F7                     _NOTE_LENGTH_PULSES:
  7169                           	opt stack 0
  7170  0000F7                     	ds	1
  7171  0000F8                     _OCTAVES:
  7172                           	opt stack 0
  7173  0000F8                     	ds	1
  7174  0000F9                     _which_screen:
  7175                           	opt stack 0
  7176  0000F9                     	ds	1
  7177  0000FA                     _iterator_focus:
  7178                           	opt stack 0
  7179  0000FA                     	ds	1
  7180  0000FB                     _ema_integer:
  7181                           	opt stack 0
  7182  0000FB                     	ds	1
  7183  0000FC                     _octave:
  7184                           	opt stack 0
  7185  0000FC                     	ds	1
  7186  0000FD                     _velocity:
  7187                           	opt stack 0
  7188  0000FD                     	ds	1
  7189  0000FE                     _drumchannel:
  7190                           	opt stack 0
  7191  0000FE                     	ds	1
  7192  0000FF                     _BPM:
  7193                           	opt stack 0
  7194  0000FF                     	ds	1
  7195                           tblptru	equ	0xFF8
  7196                           tblptrh	equ	0xFF7
  7197                           tblptrl	equ	0xFF6
  7198                           tablat	equ	0xFF5
  7199                           postinc0	equ	0xFEE
  7200                           wreg	equ	0xFE8
  7201                           postdec1	equ	0xFE5
  7202                           fsr1l	equ	0xFE1
  7203                           
  7204                           	psect	bssBANK1
  7205  000100                     __pbssBANK1:
  7206                           	opt stack 0
  7207  000100                     displayString@letter:
  7208                           	opt stack 0
  7209  000100                     	ds	4
  7210  000104                     _ema_alpha:
  7211                           	opt stack 0
  7212  000104                     	ds	4
  7213  000108                     _arpeggiatorLastNoteModeResetMenu:
  7214                           	opt stack 0
  7215  000108                     	ds	3
  7216  00010B                     _arpeggiatorLastNoteModeTransposeMenu:
  7217                           	opt stack 0
  7218  00010B                     	ds	3
  7219  00010E                     _arpeggiatorLastNoteModeKeyReleaseMenu:
  7220                           	opt stack 0
  7221  00010E                     	ds	3
  7222  000111                     _arpeggiatorLastNoteModeKeyPressMenu:
  7223                           	opt stack 0
  7224  000111                     	ds	3
  7225  000114                     _arpeggiatorSkipFirstLastMenu:
  7226                           	opt stack 0
  7227  000114                     	ds	3
  7228  000117                     _arpeggiatorRandomizeTypeMenu:
  7229                           	opt stack 0
  7230  000117                     	ds	3
  7231  00011A                     _arpeggiatorRandomizeSkipMenu:
  7232                           	opt stack 0
  7233  00011A                     	ds	3
  7234  00011D                     _arpeggiatorUnLatchModeMenu:
  7235                           	opt stack 0
  7236  00011D                     	ds	3
  7237  000120                     _arpeggiatorAutoLatchOnOffMenu:
  7238                           	opt stack 0
  7239  000120                     	ds	3
  7240  000123                     _arpeggiatorLatchOnOffMenu:
  7241                           	opt stack 0
  7242  000123                     	ds	3
  7243  000126                     _arpeggiatorLatchMenu:
  7244                           	opt stack 0
  7245  000126                     	ds	3
  7246  000129                     _arpeggiatorNoteLengthMenu:
  7247                           	opt stack 0
  7248  000129                     	ds	3
  7249  00012C                     _arpeggiatorTypeMenu:
  7250                           	opt stack 0
  7251  00012C                     	ds	3
  7252  00012F                     _arpeggiatorOctavesMenu:
  7253                           	opt stack 0
  7254  00012F                     	ds	3
  7255  000132                     _arpeggiatorTempoMenu:
  7256                           	opt stack 0
  7257  000132                     	ds	3
  7258  000135                     _arpeggiatorOnOffMenu:
  7259                           	opt stack 0
  7260  000135                     	ds	3
  7261  000138                     _encoderPolarityMenu:
  7262                           	opt stack 0
  7263  000138                     	ds	3
  7264  00013B                     _eepromMenu:
  7265                           	opt stack 0
  7266  00013B                     	ds	3
  7267  00013E                     _drumChannelMenu:
  7268                           	opt stack 0
  7269  00013E                     	ds	3
  7270  000141                     _mainChannelMenu:
  7271                           	opt stack 0
  7272  000141                     	ds	3
  7273  000144                     _programChangeMenu:
  7274                           	opt stack 0
  7275  000144                     	ds	3
  7276  000147                     _midiChannelMenu:
  7277                           	opt stack 0
  7278  000147                     	ds	3
  7279  00014A                     _joystickCCMenu:
  7280                           	opt stack 0
  7281  00014A                     	ds	3
  7282  00014D                     _slidepotsCCMenu:
  7283                           	opt stack 0
  7284  00014D                     	ds	3
  7285  000150                     _potsCCMenu:
  7286                           	opt stack 0
  7287  000150                     	ds	3
  7288  000153                     _potsAlphaMenu:
  7289                           	opt stack 0
  7290  000153                     	ds	3
  7291  000156                     _potsResoMenu:
  7292                           	opt stack 0
  7293  000156                     	ds	3
  7294  000159                     _drumCCMenu:
  7295                           	opt stack 0
  7296  000159                     	ds	3
  7297  00015C                     _drumNNMenu:
  7298                           	opt stack 0
  7299  00015C                     	ds	3
  7300  00015F                     _drumCCTypeMenu:
  7301                           	opt stack 0
  7302  00015F                     	ds	3
  7303  000162                     _transposeMenu:
  7304                           	opt stack 0
  7305  000162                     	ds	3
  7306  000165                     _seventhMenu:
  7307                           	opt stack 0
  7308  000165                     	ds	3
  7309  000168                     _mainMenu:
  7310                           	opt stack 0
  7311  000168                     	ds	3
  7312  00016B                     displayDigits@number_to_display_last:
  7313                           	opt stack 0
  7314  00016B                     	ds	2
  7315  00016D                     _TIMER_PRELOAD:
  7316                           	opt stack 0
  7317  00016D                     	ds	2
  7318  00016F                     _encoder_state_last:
  7319                           	opt stack 0
  7320  00016F                     	ds	1
  7321  000170                     _encoder_state_now:
  7322                           	opt stack 0
  7323  000170                     	ds	1
  7324  000171                     _patch_number:
  7325                           	opt stack 0
  7326  000171                     	ds	1
  7327  000172                     _ARPEGGIO:
  7328                           	opt stack 0
  7329  000172                     	ds	16
  7330  000182                     _string2display:
  7331                           	opt stack 0
  7332  000182                     	ds	5
  7333                           tblptru	equ	0xFF8
  7334                           tblptrh	equ	0xFF7
  7335                           tblptrl	equ	0xFF6
  7336                           tablat	equ	0xFF5
  7337                           postinc0	equ	0xFEE
  7338                           wreg	equ	0xFE8
  7339                           postdec1	equ	0xFE5
  7340                           fsr1l	equ	0xFE1
  7341                           
  7342                           	psect	dataBANK1
  7343  0001D7                     __pdataBANK1:
  7344                           	opt stack 0
  7345  0001D7                     _DRUM_CC:
  7346                           	opt stack 0
  7347  0001D7                     	ds	8
  7348  0001DF                     _DRUM_NOTE:
  7349                           	opt stack 0
  7350  0001DF                     	ds	8
  7351  0001E7                     _randx:
  7352                           	opt stack 0
  7353  0001E7                     	ds	4
  7354  0001EB                     _HYST_VAL:
  7355                           	opt stack 0
  7356  0001EB                     	ds	2
  7357  0001ED                     _command:
  7358                           	opt stack 0
  7359  0001ED                     	ds	1
  7360  0001EE                     _string_to_display:
  7361                           	opt stack 0
  7362  0001EE                     	ds	5
  7363  0001F3                     _diminished_triad:
  7364                           	opt stack 0
  7365  0001F3                     	ds	3
  7366  0001F6                     _augmented_triad:
  7367                           	opt stack 0
  7368  0001F6                     	ds	3
  7369  0001F9                     _minor_triad:
  7370                           	opt stack 0
  7371  0001F9                     	ds	3
  7372  0001FC                     _major_triad:
  7373                           	opt stack 0
  7374  0001FC                     	ds	3
  7375                           tblptru	equ	0xFF8
  7376                           tblptrh	equ	0xFF7
  7377                           tblptrl	equ	0xFF6
  7378                           tablat	equ	0xFF5
  7379                           postinc0	equ	0xFEE
  7380                           wreg	equ	0xFE8
  7381                           postdec1	equ	0xFE5
  7382                           fsr1l	equ	0xFE1
  7383                           
  7384                           	psect	bssBANK2
  7385  000200                     __pbssBANK2:
  7386                           	opt stack 0
  7387  000200                     _potentiometer_filtered_last:
  7388                           	opt stack 0
  7389  000200                     	ds	32
  7390  000220                     _potentiometer_filtered_now:
  7391                           	opt stack 0
  7392  000220                     	ds	32
  7393  000240                     _ema_sum:
  7394                           	opt stack 0
  7395  000240                     	ds	32
  7396  000260                     _potentiometer_raw:
  7397                           	opt stack 0
  7398  000260                     	ds	32
  7399  000280                     readPotentiometers@count:
  7400                           	opt stack 0
  7401  000280                     	ds	4
  7402  000284                     _count_ISR:
  7403                           	opt stack 0
  7404  000284                     	ds	4
  7405  000288                     _number_of_interrupts:
  7406                           	opt stack 0
  7407  000288                     	ds	4
  7408  00028C                     _ARPEGGIO_RANDOM:
  7409                           	opt stack 0
  7410  00028C                     	ds	16
  7411  00029C                     _ARPEGGIO_SORTED:
  7412                           	opt stack 0
  7413  00029C                     	ds	16
  7414                           tblptru	equ	0xFF8
  7415                           tblptrh	equ	0xFF7
  7416                           tblptrl	equ	0xFF6
  7417                           tablat	equ	0xFF5
  7418                           postinc0	equ	0xFEE
  7419                           wreg	equ	0xFE8
  7420                           postdec1	equ	0xFE5
  7421                           fsr1l	equ	0xFE1
  7422                           
  7423                           	psect	dataBANK2
  7424  0002AC                     __pdataBANK2:
  7425                           	opt stack 0
  7426  0002AC                     _inputPotsArray:
  7427                           	opt stack 0
  7428  0002AC                     	ds	48
  7429  0002DC                     _NOTE_LENGTH_PULSES_ARRAY:
  7430                           	opt stack 0
  7431  0002DC                     	ds	12
  7432  0002E8                     _diminished_7th:
  7433                           	opt stack 0
  7434  0002E8                     	ds	4
  7435  0002EC                     _half_diminished_7th:
  7436                           	opt stack 0
  7437  0002EC                     	ds	4
  7438  0002F0                     _minor_7th:
  7439                           	opt stack 0
  7440  0002F0                     	ds	4
  7441  0002F4                     _major_7th:
  7442                           	opt stack 0
  7443  0002F4                     	ds	4
  7444  0002F8                     _dominant_7th:
  7445                           	opt stack 0
  7446  0002F8                     	ds	4
  7447                           tblptru	equ	0xFF8
  7448                           tblptrh	equ	0xFF7
  7449                           tblptrl	equ	0xFF6
  7450                           tablat	equ	0xFF5
  7451                           postinc0	equ	0xFEE
  7452                           wreg	equ	0xFE8
  7453                           postdec1	equ	0xFE5
  7454                           fsr1l	equ	0xFE1
  7455                           
  7456                           	psect	dataBANK3
  7457  000300                     __pdataBANK3:
  7458                           	opt stack 0
  7459  000300                     _menuArray:
  7460                           	opt stack 0
  7461  000300                     	ds	105
  7462                           tblptru	equ	0xFF8
  7463                           tblptrh	equ	0xFF7
  7464                           tblptrl	equ	0xFF6
  7465                           tablat	equ	0xFF5
  7466                           postinc0	equ	0xFEE
  7467                           wreg	equ	0xFE8
  7468                           postdec1	equ	0xFE5
  7469                           fsr1l	equ	0xFE1
  7470                           
  7471                           	psect	cstackBANK1
  7472  000187                     __pcstackBANK1:
  7473                           	opt stack 0
  7474  000187                     loadFromEEPROM@to_load:
  7475                           	opt stack 0
  7476                           
  7477                           ; 75 bytes @ 0x0
  7478  000187                     	ds	75
  7479  0001D2                     loadFromEEPROM@baseAddress:
  7480                           	opt stack 0
  7481                           
  7482                           ; 2 bytes @ 0x4B
  7483  0001D2                     	ds	2
  7484  0001D4                     loadFromEEPROM@slotNumber:
  7485                           	opt stack 0
  7486                           
  7487                           ; 1 bytes @ 0x4D
  7488  0001D4                     	ds	1
  7489  0001D5                     loadFromEEPROM@byte_count:
  7490                           	opt stack 0
  7491                           
  7492                           ; 2 bytes @ 0x4E
  7493  0001D5                     	ds	2
  7494                           tblptru	equ	0xFF8
  7495                           tblptrh	equ	0xFF7
  7496                           tblptrl	equ	0xFF6
  7497                           tablat	equ	0xFF5
  7498                           postinc0	equ	0xFEE
  7499                           wreg	equ	0xFE8
  7500                           postdec1	equ	0xFE5
  7501                           fsr1l	equ	0xFE1
  7502                           
  7503                           	psect	cstackBANK0
  7504  000060                     __pcstackBANK0:
  7505                           	opt stack 0
  7506  000060                     ??_rotateArrayLeft:
  7507  000060                     ??_processEncoderBuxton:
  7508  000060                     ??_buttonInputsSerial:
  7509  000060                     ?_ADC_Read:
  7510                           	opt stack 0
  7511  000060                     ?___awdiv:
  7512                           	opt stack 0
  7513  000060                     ?___lmul:
  7514                           	opt stack 0
  7515  000060                     ?___xxtofl:
  7516                           	opt stack 0
  7517  000060                     Lcd_SetBit@data_bit:
  7518                           	opt stack 0
  7519  000060                     sendOut@a:
  7520                           	opt stack 0
  7521  000060                     sendUSB@message2:
  7522                           	opt stack 0
  7523  000060                     setControllerResolution@i:
  7524                           	opt stack 0
  7525  000060                     wait_one_pulse@mode:
  7526                           	opt stack 0
  7527  000060                     copy_array@i:
  7528                           	opt stack 0
  7529  000060                     ___lbmod@divisor:
  7530                           	opt stack 0
  7531  000060                     printThisNumber@n:
  7532                           	opt stack 0
  7533  000060                     Read_b_eep@badd:
  7534                           	opt stack 0
  7535  000060                     Write_b_eep@badd:
  7536                           	opt stack 0
  7537  000060                     ___awdiv@dividend:
  7538                           	opt stack 0
  7539  000060                     srand@x:
  7540                           	opt stack 0
  7541  000060                     strcpy@to:
  7542                           	opt stack 0
  7543  000060                     ___lmul@multiplier:
  7544                           	opt stack 0
  7545  000060                     ___xxtofl@val:
  7546                           	opt stack 0
  7547                           
  7548                           ; 4 bytes @ 0x0
  7549  000060                     	ds	1
  7550  000061                     ??_Lcd_Cmd:
  7551  000061                     Lcd_Print_Char@Lower_Nibble:
  7552                           	opt stack 0
  7553  000061                     sendUSB@message3:
  7554                           	opt stack 0
  7555  000061                     findArrayIndex@pitch_of_key_release:
  7556                           	opt stack 0
  7557  000061                     ___lbmod@dividend:
  7558                           	opt stack 0
  7559                           
  7560                           ; 1 bytes @ 0x1
  7561  000061                     	ds	1
  7562  000062                     ??_ADC_Read:
  7563  000062                     ??_sendUSB:
  7564  000062                     Lcd_Cmd@a:
  7565                           	opt stack 0
  7566  000062                     Lcd_Print_Char@Upper_Nibble:
  7567                           	opt stack 0
  7568  000062                     findArrayIndex@i:
  7569                           	opt stack 0
  7570  000062                     Write_b_eep@bdat:
  7571                           	opt stack 0
  7572  000062                     ___lbmod@counter:
  7573                           	opt stack 0
  7574  000062                     ___awdiv@divisor:
  7575                           	opt stack 0
  7576  000062                     strcpy@from:
  7577                           	opt stack 0
  7578                           
  7579                           ; 2 bytes @ 0x2
  7580  000062                     	ds	1
  7581  000063                     ??_Lcd_Start:
  7582  000063                     Lcd_Set_Cursor@b:
  7583                           	opt stack 0
  7584  000063                     Lcd_Print_Char@data:
  7585                           	opt stack 0
  7586  000063                     Write_b_eep@GIE_BIT_VAL:
  7587                           	opt stack 0
  7588  000063                     ___lbmod@rem:
  7589                           	opt stack 0
  7590                           
  7591                           ; 1 bytes @ 0x3
  7592  000063                     	ds	1
  7593  000064                     ??___xxtofl:
  7594  000064                     ?___wmul:
  7595                           	opt stack 0
  7596  000064                     Lcd_Set_Cursor@a:
  7597                           	opt stack 0
  7598  000064                     ADC_Read@adc_channel:
  7599                           	opt stack 0
  7600  000064                     buttonInputsSerial@i:
  7601                           	opt stack 0
  7602  000064                     ___awdiv@counter:
  7603                           	opt stack 0
  7604  000064                     Lcd_Start@i:
  7605                           	opt stack 0
  7606  000064                     Lcd_Print_Char@i:
  7607                           	opt stack 0
  7608  000064                     ___wmul@multiplier:
  7609                           	opt stack 0
  7610  000064                     strcpy@cp:
  7611                           	opt stack 0
  7612  000064                     ___lmul@multiplicand:
  7613                           	opt stack 0
  7614  000064                     saveToEEPROM@to_save:
  7615                           	opt stack 0
  7616                           
  7617                           ; 75 bytes @ 0x4
  7618  000064                     	ds	1
  7619  000065                     Lcd_Set_Cursor@z:
  7620                           	opt stack 0
  7621  000065                     sendUSB@message1:
  7622                           	opt stack 0
  7623  000065                     buttonInputsSerial@i_4382:
  7624                           	opt stack 0
  7625  000065                     ___awdiv@sign:
  7626                           	opt stack 0
  7627                           
  7628                           ; 1 bytes @ 0x5
  7629  000065                     	ds	1
  7630  000066                     ??_displayTest:
  7631  000066                     Lcd_Set_Cursor@y:
  7632                           	opt stack 0
  7633  000066                     Lcd_Print_Char@i_57:
  7634                           	opt stack 0
  7635  000066                     ___wmul@multiplicand:
  7636                           	opt stack 0
  7637  000066                     ___awdiv@quotient:
  7638                           	opt stack 0
  7639  000066                     sendUSB@midiMessage:
  7640                           	opt stack 0
  7641                           
  7642                           ; 3 bytes @ 0x6
  7643  000066                     	ds	1
  7644  000067                     Lcd_Set_Cursor@temp:
  7645                           	opt stack 0
  7646  000067                     rotateArrayLeft@array_index:
  7647                           	opt stack 0
  7648                           
  7649                           ; 1 bytes @ 0x7
  7650  000067                     	ds	1
  7651  000068                     rotateArrayLeft@i:
  7652                           	opt stack 0
  7653  000068                     ___xxtofl@sign:
  7654                           	opt stack 0
  7655  000068                     ___wmul@product:
  7656                           	opt stack 0
  7657  000068                     ___lmul@product:
  7658                           	opt stack 0
  7659                           
  7660                           ; 4 bytes @ 0x8
  7661  000068                     	ds	1
  7662  000069                     ??_add_notes_to_arpeggio:
  7663  000069                     sendUSB@i:
  7664                           	opt stack 0
  7665  000069                     delete_notes_from_arpeggio@pitch:
  7666                           	opt stack 0
  7667  000069                     ___xxtofl@exp:
  7668                           	opt stack 0
  7669                           
  7670                           ; 1 bytes @ 0x9
  7671  000069                     	ds	1
  7672  00006A                     ??_initializeMenuArray:
  7673  00006A                     sendUSB@ii:
  7674                           	opt stack 0
  7675  00006A                     delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT:
  7676                           	opt stack 0
  7677  00006A                     Lcd_Print_String@a:
  7678                           	opt stack 0
  7679  00006A                     ___xxtofl@arg:
  7680                           	opt stack 0
  7681                           
  7682                           ; 4 bytes @ 0xA
  7683  00006A                     	ds	1
  7684  00006B                     noteOff@pitch:
  7685                           	opt stack 0
  7686  00006B                     noteOffDrum@pitch:
  7687                           	opt stack 0
  7688  00006B                     controlChange@controllerNumber:
  7689                           	opt stack 0
  7690  00006B                     pitchBend@lowByte:
  7691                           	opt stack 0
  7692  00006B                     programChange@data1:
  7693                           	opt stack 0
  7694  00006B                     initializeMenuArray@NumberOfElements:
  7695                           	opt stack 0
  7696                           
  7697                           ; 1 bytes @ 0xB
  7698  00006B                     	ds	1
  7699  00006C                     ??_Lcd_Print_String:
  7700  00006C                     ?_rand:
  7701                           	opt stack 0
  7702  00006C                     ?___aldiv:
  7703                           	opt stack 0
  7704  00006C                     noteOff@velocity:
  7705                           	opt stack 0
  7706  00006C                     noteOffDrum@velocity:
  7707                           	opt stack 0
  7708  00006C                     controlChange@value:
  7709                           	opt stack 0
  7710  00006C                     pitchBend@highByte:
  7711                           	opt stack 0
  7712  00006C                     programChange@data2:
  7713                           	opt stack 0
  7714  00006C                     initializeMenuArray@i:
  7715                           	opt stack 0
  7716  00006C                     ___aldiv@dividend:
  7717                           	opt stack 0
  7718                           
  7719                           ; 4 bytes @ 0xC
  7720  00006C                     	ds	1
  7721  00006D                     noteOff@channel:
  7722                           	opt stack 0
  7723  00006D                     noteOffDrum@channel:
  7724                           	opt stack 0
  7725  00006D                     controlChange@channel:
  7726                           	opt stack 0
  7727  00006D                     pitchBend@channel:
  7728                           	opt stack 0
  7729  00006D                     programChange@channel:
  7730                           	opt stack 0
  7731                           
  7732                           ; 1 bytes @ 0xD
  7733  00006D                     	ds	1
  7734  00006E                     ??_processPotentiometers:
  7735  00006E                     ?___awmod:
  7736                           	opt stack 0
  7737  00006E                     ?___flmul:
  7738                           	opt stack 0
  7739  00006E                     noteOn@pitch:
  7740                           	opt stack 0
  7741  00006E                     noteOnDrum@pitch:
  7742                           	opt stack 0
  7743  00006E                     Lcd_Print_String@i:
  7744                           	opt stack 0
  7745  00006E                     ___awmod@dividend:
  7746                           	opt stack 0
  7747  00006E                     ___flmul@b:
  7748                           	opt stack 0
  7749                           
  7750                           ; 4 bytes @ 0xE
  7751  00006E                     	ds	1
  7752  00006F                     noteOn@velocity:
  7753                           	opt stack 0
  7754  00006F                     noteOnDrum@velocity:
  7755                           	opt stack 0
  7756                           
  7757                           ; 1 bytes @ 0xF
  7758  00006F                     	ds	1
  7759  000070                     ??_Function_B:
  7760  000070                     ??_Function_H_5:
  7761  000070                     ??_Function_H_8:
  7762  000070                     ??_exitFunction:
  7763  000070                     ??_exitSave:
  7764  000070                     ??_exitLoad:
  7765  000070                     ??_eepromExit:
  7766  000070                     ??_Function_A_1:
  7767  000070                     ??_Function_A_2:
  7768  000070                     ??_Function_A_3:
  7769  000070                     ??_Function_C_1:
  7770  000070                     ??_Function_D_1:
  7771  000070                     ??_Function_G_3:
  7772  000070                     ??_Function_H_9_1:
  7773  000070                     ??_Function_H_9_2:
  7774  000070                     ??_Function_H_9_3:
  7775  000070                     ??_Function_H_9_4:
  7776  000070                     noteOn@channel:
  7777                           	opt stack 0
  7778  000070                     noteOnDrum@channel:
  7779                           	opt stack 0
  7780  000070                     add_notes_to_arpeggio@pitch:
  7781                           	opt stack 0
  7782  000070                     ___awmod@divisor:
  7783                           	opt stack 0
  7784  000070                     ___aldiv@divisor:
  7785                           	opt stack 0
  7786                           
  7787                           ; 4 bytes @ 0x10
  7788  000070                     	ds	1
  7789  000071                     ??_Function_A:
  7790  000071                     ??_Function_H_9:
  7791  000071                     Function_H_5@i:
  7792                           	opt stack 0
  7793  000071                     processPotentiometers@lowByte:
  7794                           	opt stack 0
  7795                           
  7796                           ; 1 bytes @ 0x11
  7797  000071                     	ds	1
  7798  000072                     ??_Function_G_4:
  7799  000072                     processPotentiometers@highByte:
  7800                           	opt stack 0
  7801  000072                     ___awmod@counter:
  7802                           	opt stack 0
  7803  000072                     ___flmul@a:
  7804                           	opt stack 0
  7805                           
  7806                           ; 4 bytes @ 0x12
  7807  000072                     	ds	1
  7808  000073                     processPotentiometers@i:
  7809                           	opt stack 0
  7810  000073                     ___awmod@sign:
  7811                           	opt stack 0
  7812                           
  7813                           ; 1 bytes @ 0x13
  7814  000073                     	ds	1
  7815  000074                     random_pitches@random_array_index:
  7816                           	opt stack 0
  7817  000074                     random_pitches_non_repeating@temp:
  7818                           	opt stack 0
  7819  000074                     ___aldiv@counter:
  7820                           	opt stack 0
  7821  000074                     int2string@number:
  7822                           	opt stack 0
  7823                           
  7824                           ; 2 bytes @ 0x14
  7825  000074                     	ds	1
  7826  000075                     random_pitches@i:
  7827                           	opt stack 0
  7828  000075                     random_pitches_non_repeating@randomIndex:
  7829                           	opt stack 0
  7830  000075                     ___aldiv@sign:
  7831                           	opt stack 0
  7832                           
  7833                           ; 1 bytes @ 0x15
  7834  000075                     	ds	1
  7835  000076                     ??___flmul:
  7836  000076                     ??_int2string:
  7837  000076                     random_pitches_non_repeating@i:
  7838                           	opt stack 0
  7839  000076                     ___aldiv@quotient:
  7840                           	opt stack 0
  7841                           
  7842                           ; 4 bytes @ 0x16
  7843  000076                     	ds	1
  7844  000077                     ??_Function_H_4:
  7845  000077                     ??_playTriad:
  7846  000077                     ??_playSeventh:
  7847  000077                     playThisNotePentatonic@index:
  7848                           	opt stack 0
  7849  000077                     playDiatonicTriadMajor@index:
  7850                           	opt stack 0
  7851  000077                     playDiatonicSeventhMajor@index:
  7852                           	opt stack 0
  7853  000077                     playDiatonicTriadMinor@index:
  7854                           	opt stack 0
  7855  000077                     playDiatonicSeventhMinor@index:
  7856                           	opt stack 0
  7857                           
  7858                           ; 1 bytes @ 0x17
  7859  000077                     	ds	1
  7860  000078                     ??_playDiatonicTriadMajor:
  7861  000078                     ??_playDiatonicTriadMinor:
  7862  000078                     ??_playDiatonicSeventhMajor:
  7863  000078                     ??_playDiatonicSeventhMinor:
  7864  000078                     ??_playThisNotePentatonic:
  7865  000078                     int2string@number_to_display_temp:
  7866                           	opt stack 0
  7867                           
  7868                           ; 2 bytes @ 0x18
  7869  000078                     	ds	2
  7870  00007A                     ??_Function_E:
  7871  00007A                     ??_Function_C_2:
  7872  00007A                     ??_Function_C_3:
  7873  00007A                     ?_map:
  7874                           	opt stack 0
  7875  00007A                     ___flmul@sign:
  7876                           	opt stack 0
  7877  00007A                     map@x:
  7878                           	opt stack 0
  7879                           
  7880                           ; 4 bytes @ 0x1A
  7881  00007A                     	ds	1
  7882  00007B                     setControllerNumbers@array_index:
  7883                           	opt stack 0
  7884  00007B                     Function_C_2@array_index:
  7885                           	opt stack 0
  7886  00007B                     Function_C_3@array_index:
  7887                           	opt stack 0
  7888  00007B                     playTriad@triad_p:
  7889                           	opt stack 0
  7890  00007B                     playSeventh@seventh_p:
  7891                           	opt stack 0
  7892  00007B                     ___flmul@grs:
  7893                           	opt stack 0
  7894                           
  7895                           ; 4 bytes @ 0x1B
  7896  00007B                     	ds	1
  7897  00007C                     ??_Function_C:
  7898  00007C                     ??_Function_D_3:
  7899  00007C                     ??_Function_D_4:
  7900  00007C                     ??_Function_D_5:
  7901  00007C                     playThisNotePentatonic@temp_pitch:
  7902                           	opt stack 0
  7903  00007C                     playDiatonicTriadMajor@i:
  7904                           	opt stack 0
  7905  00007C                     playDiatonicSeventhMajor@i:
  7906                           	opt stack 0
  7907  00007C                     playDiatonicTriadMinor@pitch:
  7908                           	opt stack 0
  7909  00007C                     playDiatonicSeventhMinor@pitch:
  7910                           	opt stack 0
  7911                           
  7912                           ; 1 bytes @ 0x1C
  7913  00007C                     	ds	1
  7914  00007D                     keyboard_sharps_only_efficient@pitch:
  7915                           	opt stack 0
  7916  00007D                     playTriad@i:
  7917                           	opt stack 0
  7918  00007D                     playSeventh@i:
  7919                           	opt stack 0
  7920  00007D                     playDiatonicTriadMajor@i_1679:
  7921                           	opt stack 0
  7922  00007D                     playDiatonicSeventhMajor@i_1684:
  7923                           	opt stack 0
  7924  00007D                     playDiatonicTriadMinor@i:
  7925                           	opt stack 0
  7926  00007D                     playDiatonicSeventhMinor@i:
  7927                           	opt stack 0
  7928  00007D                     Function_D_3@array_index:
  7929                           	opt stack 0
  7930  00007D                     Function_D_4@array_index:
  7931                           	opt stack 0
  7932  00007D                     Function_D_5@array_index:
  7933                           	opt stack 0
  7934                           
  7935                           ; 1 bytes @ 0x1D
  7936  00007D                     	ds	1
  7937  00007E                     keyboard_sharps_only_efficient@index:
  7938                           	opt stack 0
  7939  00007E                     playTriad@i_1657:
  7940                           	opt stack 0
  7941  00007E                     playSeventh@i_1662:
  7942                           	opt stack 0
  7943  00007E                     playDiatonicTriadMajor@pitch:
  7944                           	opt stack 0
  7945  00007E                     playDiatonicSeventhMajor@pitch:
  7946                           	opt stack 0
  7947  00007E                     playDiatonicTriadMinor@i_1689:
  7948                           	opt stack 0
  7949  00007E                     playDiatonicSeventhMinor@i_1694:
  7950                           	opt stack 0
  7951  00007E                     map@in_min:
  7952                           	opt stack 0
  7953                           
  7954                           ; 4 bytes @ 0x1E
  7955  00007E                     	ds	1
  7956  00007F                     playTriad@pitch:
  7957                           	opt stack 0
  7958  00007F                     playSeventh@pitch:
  7959                           	opt stack 0
  7960  00007F                     playThisNote8@index:
  7961                           	opt stack 0
  7962  00007F                     ___flmul@aexp:
  7963                           	opt stack 0
  7964                           
  7965                           ; 1 bytes @ 0x1F
  7966  00007F                     	ds	1
  7967  000080                     ??_playThisNote:
  7968  000080                     ??_playThisNote8:
  7969  000080                     ___flmul@bexp:
  7970                           	opt stack 0
  7971                           
  7972                           ; 1 bytes @ 0x20
  7973  000080                     	ds	1
  7974  000081                     ___flmul@prod:
  7975                           	opt stack 0
  7976                           
  7977                           ; 4 bytes @ 0x21
  7978  000081                     	ds	1
  7979  000082                     map@in_max:
  7980                           	opt stack 0
  7981                           
  7982                           ; 4 bytes @ 0x22
  7983  000082                     	ds	2
  7984  000084                     playThisNote@pitch:
  7985                           	opt stack 0
  7986  000084                     playThisNote8@pitch:
  7987                           	opt stack 0
  7988                           
  7989                           ; 1 bytes @ 0x24
  7990  000084                     	ds	1
  7991  000085                     keyboard_all_note_efficient@pitch:
  7992                           	opt stack 0
  7993  000085                     playThisNote8@temp_pitch:
  7994                           	opt stack 0
  7995  000085                     ___flmul@temp:
  7996                           	opt stack 0
  7997                           
  7998                           ; 2 bytes @ 0x25
  7999  000085                     	ds	1
  8000  000086                     playThisNote8@mode_p:
  8001                           	opt stack 0
  8002  000086                     map@out_min:
  8003                           	opt stack 0
  8004                           
  8005                           ; 4 bytes @ 0x26
  8006  000086                     	ds	1
  8007  000087                     ?___fldiv:
  8008                           	opt stack 0
  8009  000087                     ___fldiv@b:
  8010                           	opt stack 0
  8011                           
  8012                           ; 4 bytes @ 0x27
  8013  000087                     	ds	1
  8014  000088                     ??_doTheUnLatch:
  8015  000088                     keyboard_eight_note_efficient@pitch:
  8016                           	opt stack 0
  8017                           
  8018                           ; 1 bytes @ 0x28
  8019  000088                     	ds	1
  8020  000089                     keyboard_eight_note_efficient@index:
  8021                           	opt stack 0
  8022                           
  8023                           ; 1 bytes @ 0x29
  8024  000089                     	ds	1
  8025  00008A                     map@out_max:
  8026                           	opt stack 0
  8027                           
  8028                           ; 4 bytes @ 0x2A
  8029  00008A                     	ds	1
  8030  00008B                     ___fldiv@a:
  8031                           	opt stack 0
  8032                           
  8033                           ; 4 bytes @ 0x2B
  8034  00008B                     	ds	1
  8035  00008C                     ??_Function_H_6:
  8036  00008C                     ??_processOctave:
  8037  00008C                     
  8038                           ; 1 bytes @ 0x2C
  8039  00008C                     	ds	2
  8040  00008E                     ??_map:
  8041  00008E                     
  8042                           ; 1 bytes @ 0x2E
  8043  00008E                     	ds	1
  8044  00008F                     ??___fldiv:
  8045                           
  8046                           ; 1 bytes @ 0x2F
  8047  00008F                     	ds	4
  8048  000093                     ___fldiv@sign:
  8049                           	opt stack 0
  8050                           
  8051                           ; 1 bytes @ 0x33
  8052  000093                     	ds	1
  8053  000094                     ___fldiv@rem:
  8054                           	opt stack 0
  8055                           
  8056                           ; 4 bytes @ 0x34
  8057  000094                     	ds	4
  8058  000098                     ___fldiv@new_exp:
  8059                           	opt stack 0
  8060                           
  8061                           ; 2 bytes @ 0x38
  8062  000098                     	ds	2
  8063  00009A                     ___fldiv@grs:
  8064                           	opt stack 0
  8065                           
  8066                           ; 4 bytes @ 0x3A
  8067  00009A                     	ds	4
  8068  00009E                     ___fldiv@bexp:
  8069                           	opt stack 0
  8070                           
  8071                           ; 1 bytes @ 0x3E
  8072  00009E                     	ds	1
  8073  00009F                     ___fldiv@aexp:
  8074                           	opt stack 0
  8075                           
  8076                           ; 1 bytes @ 0x3F
  8077  00009F                     	ds	1
  8078  0000A0                     ??_Function_D:
  8079  0000A0                     ?___flneg:
  8080                           	opt stack 0
  8081  0000A0                     ___flneg@f1:
  8082                           	opt stack 0
  8083                           
  8084                           ; 4 bytes @ 0x40
  8085  0000A0                     	ds	4
  8086  0000A4                     ?___fladd:
  8087                           	opt stack 0
  8088  0000A4                     ___fladd@b:
  8089                           	opt stack 0
  8090                           
  8091                           ; 4 bytes @ 0x44
  8092  0000A4                     	ds	4
  8093  0000A8                     ___fladd@a:
  8094                           	opt stack 0
  8095                           
  8096                           ; 4 bytes @ 0x48
  8097  0000A8                     	ds	4
  8098  0000AC                     ??___fladd:
  8099                           
  8100                           ; 1 bytes @ 0x4C
  8101  0000AC                     	ds	3
  8102  0000AF                     saveToEEPROM@baseAddress:
  8103                           	opt stack 0
  8104                           
  8105                           ; 2 bytes @ 0x4F
  8106  0000AF                     	ds	2
  8107  0000B1                     saveToEEPROM@slotNumber:
  8108                           	opt stack 0
  8109                           
  8110                           ; 1 bytes @ 0x51
  8111  0000B1                     	ds	1
  8112  0000B2                     saveToEEPROM@byte_count:
  8113                           	opt stack 0
  8114                           
  8115                           ; 2 bytes @ 0x52
  8116  0000B2                     	ds	2
  8117  0000B4                     ??_Function_G_1:
  8118  0000B4                     initializeSaveSlotsOnce@initializeSlotsOnce:
  8119                           	opt stack 0
  8120  0000B4                     ___fladd@signs:
  8121                           	opt stack 0
  8122                           
  8123                           ; 1 bytes @ 0x54
  8124  0000B4                     	ds	1
  8125  0000B5                     ___fladd@aexp:
  8126                           	opt stack 0
  8127                           
  8128                           ; 1 bytes @ 0x55
  8129  0000B5                     	ds	1
  8130  0000B6                     ___fladd@bexp:
  8131                           	opt stack 0
  8132                           
  8133                           ; 1 bytes @ 0x56
  8134  0000B6                     	ds	1
  8135  0000B7                     ___fladd@grs:
  8136                           	opt stack 0
  8137                           
  8138                           ; 1 bytes @ 0x57
  8139  0000B7                     	ds	1
  8140  0000B8                     ?___fltol:
  8141                           	opt stack 0
  8142  0000B8                     ___fltol@f1:
  8143                           	opt stack 0
  8144                           
  8145                           ; 4 bytes @ 0x58
  8146  0000B8                     	ds	4
  8147  0000BC                     ??___fltol:
  8148                           
  8149                           ; 1 bytes @ 0x5C
  8150  0000BC                     	ds	4
  8151  0000C0                     ___fltol@sign1:
  8152                           	opt stack 0
  8153                           
  8154                           ; 1 bytes @ 0x60
  8155  0000C0                     	ds	1
  8156  0000C1                     ___fltol@exp1:
  8157                           	opt stack 0
  8158                           
  8159                           ; 1 bytes @ 0x61
  8160  0000C1                     	ds	1
  8161  0000C2                     ??_readPotentiometers:
  8162  0000C2                     ?_calculate_pulse_length:
  8163                           	opt stack 0
  8164                           
  8165                           ; 2 bytes @ 0x62
  8166  0000C2                     	ds	2
  8167  0000C4                     calculate_pulse_length@s_tick:
  8168                           	opt stack 0
  8169                           
  8170                           ; 4 bytes @ 0x64
  8171  0000C4                     	ds	3
  8172  0000C7                     _readPotentiometers$5806:
  8173                           	opt stack 0
  8174                           
  8175                           ; 4 bytes @ 0x67
  8176  0000C7                     	ds	1
  8177  0000C8                     _calculate_pulse_length$5807:
  8178                           	opt stack 0
  8179                           
  8180                           ; 4 bytes @ 0x68
  8181  0000C8                     	ds	3
  8182  0000CB                     readPotentiometers@i_3357:
  8183                           	opt stack 0
  8184                           
  8185                           ; 1 bytes @ 0x6B
  8186  0000CB                     	ds	1
  8187  0000CC                     ??_Function_H:
  8188  0000CC                     ??_Function_G_2:
  8189  0000CC                     readPotentiometers@i:
  8190                           	opt stack 0
  8191  0000CC                     selectSlotOnBoot@slot:
  8192                           	opt stack 0
  8193                           
  8194                           ; 1 bytes @ 0x6C
  8195  0000CC                     	ds	1
  8196  0000CD                     ??_Function_G:
  8197  0000CD                     readPotentiometers@i_3358:
  8198                           	opt stack 0
  8199                           
  8200                           ; 1 bytes @ 0x6D
  8201  0000CD                     	ds	1
  8202  0000CE                     ??_menu_lcd:
  8203  0000CE                     
  8204                           ; 1 bytes @ 0x6E
  8205  0000CE                     	ds	1
  8206  0000CF                     ??_main:
  8207                           
  8208                           ; 1 bytes @ 0x6F
  8209  0000CF                     	ds	1
  8210                           tblptru	equ	0xFF8
  8211                           tblptrh	equ	0xFF7
  8212                           tblptrl	equ	0xFF6
  8213                           tablat	equ	0xFF5
  8214                           postinc0	equ	0xFEE
  8215                           wreg	equ	0xFE8
  8216                           postdec1	equ	0xFE5
  8217                           fsr1l	equ	0xFE1
  8218                           
  8219                           	psect	cstackCOMRAM
  8220  000001                     __pcstackCOMRAM:
  8221                           	opt stack 0
  8222  000001                     ??_encoderInputsBuxton:
  8223  000001                     ?i2___awdiv:
  8224                           	opt stack 0
  8225  000001                     ?i2___lmul:
  8226                           	opt stack 0
  8227  000001                     i2sendOut@a:
  8228                           	opt stack 0
  8229  000001                     i2sendUSB@message2:
  8230                           	opt stack 0
  8231  000001                     i2___lbmod@divisor:
  8232                           	opt stack 0
  8233  000001                     i2printThisNumber@n:
  8234                           	opt stack 0
  8235  000001                     i2___awdiv@dividend:
  8236                           	opt stack 0
  8237  000001                     i2___lmul@multiplier:
  8238                           	opt stack 0
  8239                           
  8240                           ; 4 bytes @ 0x0
  8241  000001                     	ds	1
  8242  000002                     displayString@i:
  8243                           	opt stack 0
  8244  000002                     i2sendUSB@message3:
  8245                           	opt stack 0
  8246  000002                     i2___lbmod@dividend:
  8247                           	opt stack 0
  8248                           
  8249                           ; 1 bytes @ 0x1
  8250  000002                     	ds	1
  8251  000003                     ??i2_sendUSB:
  8252  000003                     sort_pitches@a:
  8253                           	opt stack 0
  8254  000003                     i2___lbmod@counter:
  8255                           	opt stack 0
  8256  000003                     i2___awdiv@divisor:
  8257                           	opt stack 0
  8258                           
  8259                           ; 2 bytes @ 0x2
  8260  000003                     	ds	1
  8261  000004                     encoderInputsBuxton@tempA:
  8262                           	opt stack 0
  8263  000004                     sort_pitches@j:
  8264                           	opt stack 0
  8265  000004                     i2___lbmod@rem:
  8266                           	opt stack 0
  8267                           
  8268                           ; 1 bytes @ 0x3
  8269  000004                     	ds	1
  8270  000005                     encoderInputsBuxton@tempB:
  8271                           	opt stack 0
  8272  000005                     sort_pitches@i:
  8273                           	opt stack 0
  8274  000005                     i2___awdiv@counter:
  8275                           	opt stack 0
  8276  000005                     i2___lmul@multiplicand:
  8277                           	opt stack 0
  8278                           
  8279                           ; 4 bytes @ 0x4
  8280  000005                     	ds	1
  8281  000006                     encoderInputsBuxton@pinstate:
  8282                           	opt stack 0
  8283  000006                     i2___awdiv@sign:
  8284                           	opt stack 0
  8285  000006                     i2sendUSB@midiMessage:
  8286                           	opt stack 0
  8287                           
  8288                           ; 3 bytes @ 0x5
  8289  000006                     	ds	1
  8290  000007                     i2___awdiv@quotient:
  8291                           	opt stack 0
  8292                           
  8293                           ; 2 bytes @ 0x6
  8294  000007                     	ds	2
  8295  000009                     i2sendUSB@message1:
  8296                           	opt stack 0
  8297  000009                     i2___lmul@product:
  8298                           	opt stack 0
  8299                           
  8300                           ; 4 bytes @ 0x8
  8301  000009                     	ds	1
  8302  00000A                     i2sendUSB@i:
  8303                           	opt stack 0
  8304                           
  8305                           ; 1 bytes @ 0x9
  8306  00000A                     	ds	1
  8307  00000B                     i2sendUSB@ii:
  8308                           	opt stack 0
  8309                           
  8310                           ; 1 bytes @ 0xA
  8311  00000B                     	ds	1
  8312  00000C                     i2noteOff@pitch:
  8313                           	opt stack 0
  8314                           
  8315                           ; 1 bytes @ 0xB
  8316  00000C                     	ds	1
  8317  00000D                     ?i2_rand:
  8318                           	opt stack 0
  8319  00000D                     i2noteOff@velocity:
  8320                           	opt stack 0
  8321                           
  8322                           ; 1 bytes @ 0xC
  8323  00000D                     	ds	1
  8324  00000E                     i2noteOff@channel:
  8325                           	opt stack 0
  8326                           
  8327                           ; 1 bytes @ 0xD
  8328  00000E                     	ds	1
  8329  00000F                     ?i2___awmod:
  8330                           	opt stack 0
  8331  00000F                     i2noteOn@pitch:
  8332                           	opt stack 0
  8333  00000F                     i2___awmod@dividend:
  8334                           	opt stack 0
  8335                           
  8336                           ; 2 bytes @ 0xE
  8337  00000F                     	ds	1
  8338  000010                     i2noteOn@velocity:
  8339                           	opt stack 0
  8340                           
  8341                           ; 1 bytes @ 0xF
  8342  000010                     	ds	1
  8343  000011                     i2noteOn@channel:
  8344                           	opt stack 0
  8345  000011                     i2___awmod@divisor:
  8346                           	opt stack 0
  8347                           
  8348                           ; 2 bytes @ 0x10
  8349  000011                     	ds	2
  8350  000013                     i2___awmod@counter:
  8351                           	opt stack 0
  8352                           
  8353                           ; 1 bytes @ 0x12
  8354  000013                     	ds	1
  8355  000014                     i2___awmod@sign:
  8356                           	opt stack 0
  8357                           
  8358                           ; 1 bytes @ 0x13
  8359  000014                     	ds	1
  8360  000015                     ??_displayDigits:
  8361  000015                     i2random_pitches@random_array_index:
  8362                           	opt stack 0
  8363  000015                     i2random_pitches_non_repeating@temp:
  8364                           	opt stack 0
  8365                           
  8366                           ; 1 bytes @ 0x14
  8367  000015                     	ds	1
  8368  000016                     i2random_pitches@i:
  8369                           	opt stack 0
  8370  000016                     i2random_pitches_non_repeating@randomIndex:
  8371                           	opt stack 0
  8372                           
  8373                           ; 1 bytes @ 0x15
  8374  000016                     	ds	1
  8375  000017                     i2random_pitches_non_repeating@i:
  8376                           	opt stack 0
  8377                           
  8378                           ; 1 bytes @ 0x16
  8379  000017                     	ds	1
  8380  000018                     ??_playArpeggio:
  8381  000018                     displayDigits@lowByte:
  8382                           	opt stack 0
  8383                           
  8384                           ; 1 bytes @ 0x17
  8385  000018                     	ds	1
  8386  000019                     displayDigits@highByte:
  8387                           	opt stack 0
  8388                           
  8389                           ; 1 bytes @ 0x18
  8390  000019                     	ds	1
  8391  00001A                     
  8392                           ; 1 bytes @ 0x19
  8393  00001A                     	ds	4
  8394  00001E                     ??_ISR:
  8395                           
  8396                           ; 1 bytes @ 0x1D
  8397  00001E                     	ds	20
  8398                           tblptru	equ	0xFF8
  8399                           tblptrh	equ	0xFF7
  8400                           tblptrl	equ	0xFF6
  8401                           tablat	equ	0xFF5
  8402                           postinc0	equ	0xFEE
  8403                           wreg	equ	0xFE8
  8404                           postdec1	equ	0xFE5
  8405                           fsr1l	equ	0xFE1
  8406                           
  8407 ;;
  8408 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  8409 ;;
  8410 ;; *************** function _main *****************
  8411 ;; Defined at:
  8412 ;;		line 441 in file "main.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;		None
  8415 ;; Auto vars:     Size  Location     Type
  8416 ;;		None
  8417 ;; Return value:  Size  Location     Type
  8418 ;;                  2  4824[None  ] int 
  8419 ;; Registers used:
  8420 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8421 ;; Tracked objects:
  8422 ;;		On entry : 0/0
  8423 ;;		On exit  : 0/0
  8424 ;;		Unchanged: 0/0
  8425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8430 ;;Total ram usage:        1 bytes
  8431 ;; Hardware stack levels required when called:   17
  8432 ;; This function calls:
  8433 ;;		_ADC_Initialize
  8434 ;;		_Lcd_Start
  8435 ;;		_Read_b_eep
  8436 ;;		_analogInputs
  8437 ;;		_calculate_alpha
  8438 ;;		_calculate_pulse_length
  8439 ;;		_digitalInputs
  8440 ;;		_displayTest
  8441 ;;		_initializeMenuArray
  8442 ;;		_initializeSaveSlotsOnce
  8443 ;;		_menu_lcd
  8444 ;;		_panic_button
  8445 ;;		_processEncoderBuxton
  8446 ;;		_selectSlotOnBoot
  8447 ;;		_setup
  8448 ;;		_srand
  8449 ;; This function is called by:
  8450 ;;		Startup code after reset
  8451 ;; This function uses a non-reentrant model
  8452 ;;
  8453                           
  8454                           	psect	text0
  8455  006310                     __ptext0:
  8456                           	opt stack 0
  8457  006310                     _main:
  8458                           	opt stack 14
  8459                           
  8460                           ;main.c: 444: setup();
  8461                           
  8462                           ;incstack = 0
  8463  006310  EC43  F044         	call	_setup	;wreg free
  8464                           
  8465                           ;main.c: 445: ADC_Initialize();
  8466  006314  ECF7  F04A         	call	_ADC_Initialize	;wreg free
  8467                           
  8468                           ;main.c: 446: initializeMenuArray();
  8469  006318  EC40  F026         	call	_initializeMenuArray	;wreg free
  8470                           
  8471                           ;main.c: 447: Lcd_Start();
  8472  00631C  ECDA  F03B         	call	_Lcd_Start	;wreg free
  8473                           
  8474                           ;main.c: 450: state = 0x0;
  8475  006320  0E00               	movlw	0
  8476  006322  6E58               	movwf	_state,c
  8477                           
  8478                           ;main.c: 451: POT_MODE = 0;
  8479  006324  9836               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
  8480                           
  8481                           ;main.c: 452: which_screen = MAIN_MENU;
  8482  006326  0E02               	movlw	2
  8483  006328  0100               	movlb	0	; () banked
  8484  00632A  6FF9               	movwf	_which_screen& (0+255),b
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;main.c: 453: menu_lcd();
  8488  00632C  EC72  F034         	call	_menu_lcd	;wreg free
  8489                           
  8490                           ;main.c: 454: panic_button();
  8491  006330  EC8D  F04A         	call	_panic_button	;wreg free
  8492                           
  8493                           ;main.c: 456: srand(2048);
  8494  006334  0E08               	movlw	8
  8495  006336  0100               	movlb	0	; () banked
  8496  006338  6F61               	movwf	(srand@x+1)& (0+255),b
  8497  00633A  0E00               	movlw	0
  8498  00633C  6F60               	movwf	srand@x& (0+255),b
  8499  00633E  EC1D  F04B         	call	_srand	;wreg free
  8500                           
  8501                           ;main.c: 459: encoderPolarity = Read_b_eep(0x02);
  8502  006342  0E00               	movlw	0
  8503  006344  0100               	movlb	0	; () banked
  8504  006346  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8505  006348  0E02               	movlw	2
  8506  00634A  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8507  00634C  ECEA  F04A         	call	_Read_b_eep	;wreg free
  8508  006350  0100               	movlb	0	; () banked
  8509  006352  6FCF               	movwf	??_main& (0+255),b
  8510  006354  31CF               	rrcf	??_main& (0+255),w,b
  8511  006356  A0D8               	btfss	status,0,c
  8512  006358  D002               	goto	u44670
  8513  00635A  8236               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8514  00635C  D001               	goto	u44685
  8515  00635E                     u44670:
  8516  00635E  9236               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8517  006360                     u44685:
  8518                           
  8519                           ;main.c: 461: ema_integer = Read_b_eep(0x03);
  8520  006360  0E00               	movlw	0
  8521  006362  0100               	movlb	0	; () banked
  8522  006364  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8523  006366  0E03               	movlw	3
  8524  006368  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8525  00636A  ECEA  F04A         	call	_Read_b_eep	;wreg free
  8526  00636E  0100               	movlb	0	; () banked
  8527  006370  6FFB               	movwf	_ema_integer& (0+255),b
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;main.c: 463: calculate_alpha();
  8531  006372  EC92  F047         	call	_calculate_alpha	;wreg free
  8532                           
  8533                           ;main.c: 466: number_of_interrupts = (int) 500 / 2.5;
  8534  006376  0EC8               	movlw	200
  8535  006378  0102               	movlb	2	; () banked
  8536  00637A  6F88               	movwf	_number_of_interrupts& (0+255),b
  8537  00637C  0E00               	movlw	0
  8538  00637E  6F89               	movwf	(_number_of_interrupts+1)& (0+255),b
  8539  006380  0E00               	movlw	0
  8540  006382  6F8A               	movwf	(_number_of_interrupts+2)& (0+255),b
  8541  006384  0E00               	movlw	0
  8542  006386  6F8B               	movwf	(_number_of_interrupts+3)& (0+255),b
  8543                           
  8544                           ; BSR set to: 2
  8545                           ;main.c: 469: ARPEGGIO_ON = 0;
  8546  006388  9835               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
  8547                           
  8548                           ; BSR set to: 2
  8549                           ;main.c: 472: TIMER_PRELOAD = calculate_pulse_length();
  8550  00638A  EC7A  F02E         	call	_calculate_pulse_length	;wreg free
  8551  00638E  C0C2  F16D         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
  8552  006392  C0C3  F16E         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
  8553                           
  8554                           ;main.c: 475: LATCH = 0;
  8555  006396  9235               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
  8556                           
  8557                           ;main.c: 476: UN_LATCH_MODE = 0;
  8558  006398  9035               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
  8559                           
  8560                           ;main.c: 478: AUTO_LATCH = 0;
  8561  00639A  9E34               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
  8562                           
  8563                           ;main.c: 481: AUTO_RANDOMIZE = 0;
  8564  00639C  9A34               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
  8565                           
  8566                           ;main.c: 485: RESET_ON_KEY_PRESS = 1;
  8567  00639E  8635               	bsf	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
  8568                           
  8569                           ;main.c: 486: RESET_ON_KEY_RELEASE = 1;
  8570  0063A0  8435               	bsf	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
  8571                           
  8572                           ;main.c: 489: LAST_NOTE_MODE_KEY_PRESS = 0;
  8573  0063A2  9434               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
  8574                           
  8575                           ;main.c: 490: LAST_NOTE_MODE_KEY_RELEASE = 0;
  8576  0063A4  9234               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
  8577                           
  8578                           ;main.c: 491: LAST_NOTE_MODE_TRANSPOSE = 1;
  8579  0063A6  8034               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  8580                           
  8581                           ;main.c: 492: LAST_NOTE_MODE_RESET = 1;
  8582  0063A8  8E33               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  8583                           
  8584                           ;main.c: 495: skipFirstLast = 0;
  8585  0063AA  9834               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
  8586                           
  8587                           ;main.c: 498: DISPLAY_STEP_NUMBER = 0;
  8588  0063AC  9C32               	bcf	_DISPLAY_STEP_NUMBER/(0+8),_DISPLAY_STEP_NUMBER& (0+7),c
  8589                           
  8590                           ;main.c: 500: TMR0IE = 1;
  8591  0063AE  8AF2               	bsf	intcon,5,c	;volatile
  8592                           
  8593                           ;main.c: 501: TMR0ON = 0;
  8594  0063B0  9ED5               	bcf	4053,7,c	;volatile
  8595                           
  8596                           ;main.c: 503: TMR2IE = 1;
  8597  0063B2  829D               	bsf	3997,1,c	;volatile
  8598                           
  8599                           ;main.c: 504: TMR2ON = 1;
  8600  0063B4  84CA               	bsf	4042,2,c	;volatile
  8601                           
  8602                           ;main.c: 507: initializeSaveSlotsOnce();
  8603  0063B6  ECB7  F047         	call	_initializeSaveSlotsOnce	;wreg free
  8604                           
  8605                           ;main.c: 508: selectSlotOnBoot();
  8606  0063BA  EC9E  F04A         	call	_selectSlotOnBoot	;wreg free
  8607                           
  8608                           ;main.c: 511: if((ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYPE == UP_DOWN) || (ARPEGGIO_TYPE =
      +                          = RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING) || (ARPEGGIO_TYPE == AS_PRESSED)){
  8609  0063BE  0100               	movlb	0	; () banked
  8610  0063C0  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
  8611  0063C2  B4D8               	btfsc	status,2,c
  8612  0063C4  D010               	goto	u44730
  8613                           
  8614                           ; BSR set to: 0
  8615  0063C6  0E02               	movlw	2
  8616  0063C8  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
  8617  0063CA  B4D8               	btfsc	status,2,c
  8618  0063CC  D00C               	goto	u44730
  8619                           
  8620                           ; BSR set to: 0
  8621  0063CE  0E05               	movlw	5
  8622  0063D0  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
  8623  0063D2  B4D8               	btfsc	status,2,c
  8624  0063D4  D008               	goto	u44730
  8625                           
  8626                           ; BSR set to: 0
  8627  0063D6  0E04               	movlw	4
  8628  0063D8  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
  8629  0063DA  B4D8               	btfsc	status,2,c
  8630  0063DC  D004               	goto	u44730
  8631                           
  8632                           ; BSR set to: 0
  8633  0063DE  0E06               	movlw	6
  8634  0063E0  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
  8635  0063E2  A4D8               	btfss	status,2,c
  8636  0063E4  D002               	goto	l4825
  8637  0063E6                     u44730:
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;main.c: 512: startingDirection = UP;
  8641                           
  8642                           ; BSR set to: 0
  8643  0063E6  0E00               	movlw	0
  8644  0063E8  6FE9               	movwf	_startingDirection& (0+255),b
  8645  0063EA                     l4825:
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;main.c: 513: }
  8649                           ;main.c: 515: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP)){
  8650                           
  8651                           ; BSR set to: 0
  8652  0063EA  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
  8653  0063EC  B4D8               	btfsc	status,2,c
  8654  0063EE  D004               	goto	u44750
  8655                           
  8656                           ; BSR set to: 0
  8657  0063F0  0E03               	movlw	3
  8658  0063F2  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
  8659  0063F4  A4D8               	btfss	status,2,c
  8660  0063F6  D002               	goto	l4828
  8661  0063F8                     u44750:
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;main.c: 516: startingDirection = DOWN;
  8665                           
  8666                           ; BSR set to: 0
  8667  0063F8  0E01               	movlw	1
  8668  0063FA  6FE9               	movwf	_startingDirection& (0+255),b
  8669  0063FC                     l4828:
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;main.c: 517: }
  8673                           ;main.c: 519: displayTest();
  8674                           
  8675                           ; BSR set to: 0
  8676  0063FC  ECF7  F03F         	call	_displayTest	;wreg free
  8677  006400                     
  8678                           ;main.c: 523: digitalInputs();
  8679  006400  ECC8  F046         	call	_digitalInputs	;wreg free
  8680                           
  8681                           ;main.c: 524: analogInputs();
  8682  006404  EC3A  F04B         	call	_analogInputs	;wreg free
  8683                           
  8684                           ;main.c: 525: processEncoderBuxton();
  8685  006408  EC09  F000         	call	_processEncoderBuxton	;wreg free
  8686                           
  8687                           ;main.c: 528: TMR2ON = 0;
  8688  00640C  94CA               	bcf	4042,2,c	;volatile
  8689                           
  8690                           ;main.c: 529: PORTC &= 0xF0;
  8691  00640E  0EF0               	movlw	240
  8692  006410  1682               	andwf	3970,f,c	;volatile
  8693                           
  8694                           ;main.c: 530: menu_lcd();
  8695  006412  EC72  F034         	call	_menu_lcd	;wreg free
  8696                           
  8697                           ;main.c: 531: TMR2ON = 1;
  8698  006416  84CA               	bsf	4042,2,c	;volatile
  8699  006418  D7F3               	goto	l4831
  8700  00641A                     __end_of_main:
  8701                           	opt stack 0
  8702                           tblptru	equ	0xFF8
  8703                           tblptrh	equ	0xFF7
  8704                           tblptrl	equ	0xFF6
  8705                           tablat	equ	0xFF5
  8706                           intcon	equ	0xFF2
  8707                           postinc0	equ	0xFEE
  8708                           wreg	equ	0xFE8
  8709                           postdec1	equ	0xFE5
  8710                           fsr1l	equ	0xFE1
  8711                           status	equ	0xFD8
  8712                           
  8713 ;; *************** function _srand *****************
  8714 ;; Defined at:
  8715 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  x               2    0[BANK0 ] unsigned int 
  8718 ;; Auto vars:     Size  Location     Type
  8719 ;;		None
  8720 ;; Return value:  Size  Location     Type
  8721 ;;                  1    wreg      void 
  8722 ;; Registers used:
  8723 ;;		status,2
  8724 ;; Tracked objects:
  8725 ;;		On entry : 0/0
  8726 ;;		On exit  : 0/0
  8727 ;;		Unchanged: 0/0
  8728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8729 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8732 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8733 ;;Total ram usage:        2 bytes
  8734 ;; Hardware stack levels used:    1
  8735 ;; Hardware stack levels required when called:    5
  8736 ;; This function calls:
  8737 ;;		Nothing
  8738 ;; This function is called by:
  8739 ;;		_main
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           	psect	text1
  8744  00963A                     __ptext1:
  8745                           	opt stack 0
  8746  00963A                     _srand:
  8747                           	opt stack 25
  8748                           
  8749                           ;incstack = 0
  8750  00963A  C060  F1E7         	movff	srand@x,_randx
  8751  00963E  C061  F1E8         	movff	srand@x+1,_randx+1
  8752  009642  0101               	movlb	1	; () banked
  8753  009644  6BE9               	clrf	(_randx+2)& (0+255),b
  8754  009646  6BEA               	clrf	(_randx+3)& (0+255),b
  8755                           
  8756                           ; BSR set to: 1
  8757  009648  0012               	return		;funcret
  8758  00964A                     __end_of_srand:
  8759                           	opt stack 0
  8760                           tblptru	equ	0xFF8
  8761                           tblptrh	equ	0xFF7
  8762                           tblptrl	equ	0xFF6
  8763                           tablat	equ	0xFF5
  8764                           intcon	equ	0xFF2
  8765                           postinc0	equ	0xFEE
  8766                           wreg	equ	0xFE8
  8767                           postdec1	equ	0xFE5
  8768                           fsr1l	equ	0xFE1
  8769                           status	equ	0xFD8
  8770                           
  8771 ;; *************** function _setup *****************
  8772 ;; Defined at:
  8773 ;;		line 172 in file "main.c"
  8774 ;; Parameters:    Size  Location     Type
  8775 ;;		None
  8776 ;; Auto vars:     Size  Location     Type
  8777 ;;		None
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  1    wreg      void 
  8780 ;; Registers used:
  8781 ;;		wreg, status,2, status,0
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;Total ram usage:        0 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:    5
  8794 ;; This function calls:
  8795 ;;		Nothing
  8796 ;; This function is called by:
  8797 ;;		_main
  8798 ;; This function uses a non-reentrant model
  8799 ;;
  8800                           
  8801                           	psect	text2
  8802  008886                     __ptext2:
  8803                           	opt stack 0
  8804  008886                     _setup:
  8805                           	opt stack 25
  8806                           
  8807                           ;main.c: 175: TRISA = 0b000001;
  8808                           
  8809                           ; BSR set to: 1
  8810                           ;incstack = 0
  8811  008886  0E01               	movlw	1
  8812  008888  6E92               	movwf	3986,c	;volatile
  8813                           
  8814                           ;main.c: 179: TRISB = 0b00110001;
  8815  00888A  0E31               	movlw	49
  8816  00888C  6E93               	movwf	3987,c	;volatile
  8817                           
  8818                           ;main.c: 187: TRISC = 0b10010000;
  8819  00888E  0E90               	movlw	144
  8820  008890  6E94               	movwf	3988,c	;volatile
  8821                           
  8822                           ;main.c: 193: TRISD = 0b00000000;
  8823  008892  0E00               	movlw	0
  8824  008894  6E95               	movwf	3989,c	;volatile
  8825                           
  8826                           ;main.c: 196: TRISE = 0b000;
  8827  008896  0E00               	movlw	0
  8828  008898  6E96               	movwf	3990,c	;volatile
  8829                           
  8830                           ;main.c: 201: PORTA = 0x00;
  8831  00889A  0E00               	movlw	0
  8832  00889C  6E80               	movwf	3968,c	;volatile
  8833                           
  8834                           ;main.c: 202: PORTB = 0x00;
  8835  00889E  0E00               	movlw	0
  8836  0088A0  6E81               	movwf	3969,c	;volatile
  8837                           
  8838                           ;main.c: 203: PORTC = 0x00;
  8839  0088A2  0E00               	movlw	0
  8840  0088A4  6E82               	movwf	3970,c	;volatile
  8841                           
  8842                           ;main.c: 204: PORTD = 0x00;
  8843  0088A6  0E00               	movlw	0
  8844  0088A8  6E83               	movwf	3971,c	;volatile
  8845                           
  8846                           ;main.c: 205: PORTE = 0x00;
  8847  0088AA  0E00               	movlw	0
  8848  0088AC  6E84               	movwf	3972,c	;volatile
  8849                           
  8850                           ;main.c: 208: IPEN = 0;
  8851  0088AE  9ED0               	bcf	4048,7,c	;volatile
  8852                           
  8853                           ;main.c: 211: RBIF = 0;
  8854  0088B0  90F2               	bcf	intcon,0,c	;volatile
  8855                           
  8856                           ;main.c: 212: RBIE = 1;
  8857  0088B2  86F2               	bsf	intcon,3,c	;volatile
  8858                           
  8859                           ;main.c: 214: INTEDG0 = 0;
  8860  0088B4  9CF1               	bcf	intcon2,6,c	;volatile
  8861                           
  8862                           ;main.c: 215: INT0IF = 0;
  8863  0088B6  92F2               	bcf	intcon,1,c	;volatile
  8864                           
  8865                           ;main.c: 216: INT0IE = 1;
  8866  0088B8  88F2               	bsf	intcon,4,c	;volatile
  8867                           
  8868                           ;main.c: 219: T08BIT = 0;
  8869  0088BA  9CD5               	bcf	4053,6,c	;volatile
  8870                           
  8871                           ;main.c: 220: T0CS = 0;
  8872  0088BC  9AD5               	bcf	4053,5,c	;volatile
  8873                           
  8874                           ;main.c: 221: T0CON &= 0b11111000;
  8875  0088BE  0EF8               	movlw	248
  8876  0088C0  16D5               	andwf	4053,f,c	;volatile
  8877                           
  8878                           ;main.c: 222: T0CON |= 0b00000001;
  8879  0088C2  80D5               	bsf	4053,0,c	;volatile
  8880                           
  8881                           ;main.c: 223: PSA = 0;
  8882  0088C4  96D5               	bcf	4053,3,c	;volatile
  8883                           
  8884                           ;main.c: 224: TMR0ON = 0;
  8885  0088C6  9ED5               	bcf	4053,7,c	;volatile
  8886                           
  8887                           ;main.c: 225: TMR0IE = 1;
  8888  0088C8  8AF2               	bsf	intcon,5,c	;volatile
  8889                           
  8890                           ;main.c: 228: T2CON = 0b01000001;
  8891  0088CA  0E41               	movlw	65
  8892  0088CC  6ECA               	movwf	4042,c	;volatile
  8893                           
  8894                           ;main.c: 229: TMR2 = 0x83;
  8895  0088CE  0E83               	movlw	131
  8896  0088D0  6ECC               	movwf	4044,c	;volatile
  8897                           
  8898                           ;main.c: 230: TMR2ON = 0;
  8899  0088D2  94CA               	bcf	4042,2,c	;volatile
  8900                           
  8901                           ;main.c: 231: TMR2IE = 1;
  8902  0088D4  829D               	bsf	3997,1,c	;volatile
  8903                           
  8904                           ;main.c: 235: TXEN = 1;
  8905  0088D6  8AAC               	bsf	4012,5,c	;volatile
  8906                           
  8907                           ;main.c: 236: SYNC = 0;
  8908  0088D8  98AC               	bcf	4012,4,c	;volatile
  8909                           
  8910                           ;main.c: 239: SPEN = 1;
  8911  0088DA  8EAB               	bsf	4011,7,c	;volatile
  8912                           
  8913                           ;main.c: 240: CREN = 1;
  8914  0088DC  88AB               	bsf	4011,4,c	;volatile
  8915                           
  8916                           ;main.c: 243: BRGH = 0;
  8917  0088DE  94AC               	bcf	4012,2,c	;volatile
  8918                           
  8919                           ;main.c: 244: SPBRG = 9;
  8920  0088E0  0E09               	movlw	9
  8921  0088E2  6EAF               	movwf	4015,c	;volatile
  8922                           
  8923                           ;main.c: 246: PEIE = 1;
  8924  0088E4  8CF2               	bsf	intcon,6,c	;volatile
  8925                           
  8926                           ;main.c: 247: GIE = 1;
  8927  0088E6  8EF2               	bsf	intcon,7,c	;volatile
  8928  0088E8  0012               	return		;funcret
  8929  0088EA                     __end_of_setup:
  8930                           	opt stack 0
  8931                           tblptru	equ	0xFF8
  8932                           tblptrh	equ	0xFF7
  8933                           tblptrl	equ	0xFF6
  8934                           tablat	equ	0xFF5
  8935                           intcon	equ	0xFF2
  8936                           intcon2	equ	0xFF1
  8937                           postinc0	equ	0xFEE
  8938                           wreg	equ	0xFE8
  8939                           postdec1	equ	0xFE5
  8940                           fsr1l	equ	0xFE1
  8941                           status	equ	0xFD8
  8942                           
  8943 ;; *************** function _selectSlotOnBoot *****************
  8944 ;; Defined at:
  8945 ;;		line 41 in file "eeprom.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;		None
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;  slot            1  108[BANK0 ] unsigned char 
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  1    wreg      void 
  8952 ;; Registers used:
  8953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;Total ram usage:        1 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    8
  8966 ;; This function calls:
  8967 ;;		_Read_b_eep
  8968 ;;		_loadFromEEPROM
  8969 ;; This function is called by:
  8970 ;;		_main
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           	psect	text3
  8975  00953C                     __ptext3:
  8976                           	opt stack 0
  8977  00953C                     _selectSlotOnBoot:
  8978                           	opt stack 22
  8979                           
  8980                           ;eeprom.c: 43: unsigned char slot = Read_b_eep(0);
  8981                           
  8982                           ;incstack = 0
  8983  00953C  0E00               	movlw	0
  8984  00953E  0100               	movlb	0	; () banked
  8985  009540  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8986  009542  0E00               	movlw	0
  8987  009544  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8988  009546  ECEA  F04A         	call	_Read_b_eep	;wreg free
  8989  00954A  0100               	movlb	0	; () banked
  8990  00954C  6FCC               	movwf	selectSlotOnBoot@slot& (0+255),b
  8991                           
  8992                           ; BSR set to: 0
  8993                           ;eeprom.c: 45: if (slot == DEFAULT){
  8994  00954E  51CC               	movf	selectSlotOnBoot@slot& (0+255),w,b
  8995  009550  B4D8               	btfsc	status,2,c
  8996  009552  0012               	return	
  8997                           
  8998                           ; BSR set to: 0
  8999                           ;eeprom.c: 49: else {
  9000                           ;eeprom.c: 50: loadFromEEPROM(slot);
  9001                           
  9002                           ; BSR set to: 0
  9003                           
  9004                           ; BSR set to: 0
  9005                           ;eeprom.c: 47: }
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;eeprom.c: 46: return;
  9009  009554  51CC               	movf	selectSlotOnBoot@slot& (0+255),w,b
  9010  009556  EC24  F025         	call	_loadFromEEPROM
  9011  00955A  0012               	return	
  9012  00955C                     __end_of_selectSlotOnBoot:
  9013                           	opt stack 0
  9014                           tblptru	equ	0xFF8
  9015                           tblptrh	equ	0xFF7
  9016                           tblptrl	equ	0xFF6
  9017                           tablat	equ	0xFF5
  9018                           intcon	equ	0xFF2
  9019                           intcon2	equ	0xFF1
  9020                           postinc0	equ	0xFEE
  9021                           wreg	equ	0xFE8
  9022                           postdec1	equ	0xFE5
  9023                           fsr1l	equ	0xFE1
  9024                           status	equ	0xFD8
  9025                           
  9026 ;; *************** function _panic_button *****************
  9027 ;; Defined at:
  9028 ;;		line 426 in file "main.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;		None
  9031 ;; Auto vars:     Size  Location     Type
  9032 ;;		None
  9033 ;; Return value:  Size  Location     Type
  9034 ;;                  1    wreg      void 
  9035 ;; Registers used:
  9036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9037 ;; Tracked objects:
  9038 ;;		On entry : 0/0
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;Total ram usage:        0 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    7
  9049 ;; This function calls:
  9050 ;;		_controlChange
  9051 ;; This function is called by:
  9052 ;;		_main
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           	psect	text4
  9057  00951A                     __ptext4:
  9058                           	opt stack 0
  9059  00951A                     _panic_button:
  9060                           	opt stack 23
  9061                           
  9062                           ;main.c: 427: controlChange (channel, all_notes_off, 0x00);
  9063                           
  9064                           ;incstack = 0
  9065  00951A  0E7B               	movlw	123
  9066  00951C  0100               	movlb	0	; () banked
  9067  00951E  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
  9068  009520  0E00               	movlw	0
  9069  009522  6F6C               	movwf	controlChange@value& (0+255),b
  9070  009524  51F6               	movf	_channel& (0+255),w,b
  9071  009526  EC41  F049         	call	_controlChange
  9072                           
  9073                           ;main.c: 428: controlChange (drumchannel, all_notes_off, 0x00);
  9074  00952A  0E7B               	movlw	123
  9075  00952C  0100               	movlb	0	; () banked
  9076  00952E  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
  9077  009530  0E00               	movlw	0
  9078  009532  6F6C               	movwf	controlChange@value& (0+255),b
  9079  009534  51FE               	movf	_drumchannel& (0+255),w,b
  9080  009536  EC41  F049         	call	_controlChange
  9081  00953A  0012               	return		;funcret
  9082  00953C                     __end_of_panic_button:
  9083                           	opt stack 0
  9084                           tblptru	equ	0xFF8
  9085                           tblptrh	equ	0xFF7
  9086                           tblptrl	equ	0xFF6
  9087                           tablat	equ	0xFF5
  9088                           intcon	equ	0xFF2
  9089                           intcon2	equ	0xFF1
  9090                           postinc0	equ	0xFEE
  9091                           wreg	equ	0xFE8
  9092                           postdec1	equ	0xFE5
  9093                           fsr1l	equ	0xFE1
  9094                           status	equ	0xFD8
  9095                           
  9096 ;; *************** function _menu_lcd *****************
  9097 ;; Defined at:
  9098 ;;		line 294 in file "menu.c"
  9099 ;; Parameters:    Size  Location     Type
  9100 ;;		None
  9101 ;; Auto vars:     Size  Location     Type
  9102 ;;		None
  9103 ;; Return value:  Size  Location     Type
  9104 ;;                  1    wreg      void 
  9105 ;; Registers used:
  9106 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9107 ;; Tracked objects:
  9108 ;;		On entry : 0/0
  9109 ;;		On exit  : 0/0
  9110 ;;		Unchanged: 0/0
  9111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9116 ;;Total ram usage:        1 bytes
  9117 ;; Hardware stack levels used:    1
  9118 ;; Hardware stack levels required when called:   16
  9119 ;; This function calls:
  9120 ;;		_Function_A
  9121 ;;		_Function_B
  9122 ;;		_Function_C
  9123 ;;		_Function_D
  9124 ;;		_Function_E
  9125 ;;		_Function_F
  9126 ;;		_Function_G
  9127 ;;		_Function_H
  9128 ;;		_Lcd_Clear
  9129 ;;		_Lcd_Print_String
  9130 ;;		_Lcd_Set_Cursor
  9131 ;;		___lbmod
  9132 ;;		___wmul
  9133 ;;		_exitFunction
  9134 ;; This function is called by:
  9135 ;;		_main
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           	psect	text5
  9140  0068E4                     __ptext5:
  9141                           	opt stack 0
  9142  0068E4                     _menu_lcd:
  9143                           	opt stack 14
  9144                           
  9145                           ;menu.c: 296: which_screen = MAIN_MENU;
  9146                           
  9147                           ;incstack = 0
  9148  0068E4  0E02               	movlw	2
  9149  0068E6  0100               	movlb	0	; () banked
  9150  0068E8  6FF9               	movwf	_which_screen& (0+255),b
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;menu.c: 299: if (lcd_print_once == 0) {
  9154  0068EA  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9155  0068EC  D027               	goto	l3411
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;menu.c: 301: Lcd_Clear();
  9159  0068EE  EC25  F04B         	call	_Lcd_Clear	;wreg free
  9160                           
  9161                           ;menu.c: 302: Lcd_Set_Cursor(1,1);
  9162  0068F2  0E01               	movlw	1
  9163  0068F4  0100               	movlb	0	; () banked
  9164  0068F6  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9165  0068F8  0E01               	movlw	1
  9166  0068FA  ECEC  F045         	call	_Lcd_Set_Cursor
  9167                           
  9168                           ;menu.c: 308: Lcd_Print_String(LCD_STRINGS[(mainMenu.selector % mainMenu.number) + mainM
      +                          enu.address]);
  9169  0068FE  C168  F060         	movff	_mainMenu,___lbmod@divisor
  9170  006902  0101               	movlb	1	; () banked
  9171  006904  516A               	movf	(_mainMenu+2)& (0+255),w,b
  9172  006906  ECBD  F049         	call	___lbmod
  9173  00690A  0100               	movlb	0	; () banked
  9174  00690C  6FCE               	movwf	??_menu_lcd& (0+255),b
  9175  00690E  51CE               	movf	??_menu_lcd& (0+255),w,b
  9176  006910  0101               	movlb	1	; () banked
  9177  006912  2569               	addwf	(_mainMenu+1)& (0+255),w,b
  9178  006914  0100               	movlb	0	; () banked
  9179  006916  6F64               	movwf	___wmul@multiplier& (0+255),b
  9180  006918  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9181  00691A  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9182  00691C  0E00               	movlw	0
  9183  00691E  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9184  006920  0E11               	movlw	17
  9185  006922  6F66               	movwf	___wmul@multiplicand& (0+255),b
  9186  006924  EC66  F04A         	call	___wmul	;wreg free
  9187  006928  0E9E               	movlw	low _LCD_STRINGS
  9188  00692A  0100               	movlb	0	; () banked
  9189  00692C  2564               	addwf	?___wmul& (0+255),w,b
  9190  00692E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9191  006930  0EF3               	movlw	high _LCD_STRINGS
  9192  006932  2165               	addwfc	(?___wmul+1)& (0+255),w,b
  9193  006934  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9194  006936  ECB2  F040         	call	_Lcd_Print_String	;wreg free
  9195                           
  9196                           ;menu.c: 310: lcd_print_once = 1;
  9197  00693A  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9198  00693C                     l3411:
  9199                           
  9200                           ;menu.c: 311: }
  9201                           ;menu.c: 313: if(encoder_click == 1) {
  9202  00693C  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9203  00693E  0012               	return	
  9204                           
  9205                           ;menu.c: 315: encoder_click = 0;
  9206  006940  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9207                           
  9208                           ;menu.c: 317: switch (mainMenu.selector) {
  9209  006942  D026               	goto	l3413
  9210  006944                     
  9211                           ;menu.c: 319: Function_A();
  9212  006944  ECB8  F03F         	call	_Function_A	;wreg free
  9213                           
  9214                           ;menu.c: 320: exitFunction();
  9215  006948  EC1D  F048         	call	_exitFunction	;wreg free
  9216                           
  9217                           ;menu.c: 321: break;
  9218  00694C  0012               	return	
  9219  00694E                     
  9220                           ;menu.c: 323: Function_H();
  9221  00694E  EC2E  F037         	call	_Function_H	;wreg free
  9222                           
  9223                           ;menu.c: 324: exitFunction();
  9224  006952  EC1D  F048         	call	_exitFunction	;wreg free
  9225                           
  9226                           ;menu.c: 325: break;
  9227  006956  0012               	return	
  9228  006958                     
  9229                           ;menu.c: 327: Function_B();
  9230  006958  ECBA  F03E         	call	_Function_B	;wreg free
  9231                           
  9232                           ;menu.c: 328: exitFunction();
  9233  00695C  EC1D  F048         	call	_exitFunction	;wreg free
  9234                           
  9235                           ;menu.c: 329: break;
  9236  006960  0012               	return	
  9237  006962                     
  9238                           ;menu.c: 331: Function_C();
  9239  006962  ECA8  F03C         	call	_Function_C	;wreg free
  9240                           
  9241                           ;menu.c: 332: exitFunction();
  9242  006966  EC1D  F048         	call	_exitFunction	;wreg free
  9243                           
  9244                           ;menu.c: 333: break;
  9245  00696A  0012               	return	
  9246  00696C                     
  9247                           ;menu.c: 335: Function_D();
  9248  00696C  EC2F  F03D         	call	_Function_D	;wreg free
  9249                           
  9250                           ;menu.c: 336: exitFunction();
  9251  006970  EC1D  F048         	call	_exitFunction	;wreg free
  9252                           
  9253                           ;menu.c: 337: break;
  9254  006974  0012               	return	
  9255  006976                     
  9256                           ;menu.c: 339: Function_E();
  9257  006976  ECCC  F042         	call	_Function_E	;wreg free
  9258                           
  9259                           ;menu.c: 340: exitFunction();
  9260  00697A  EC1D  F048         	call	_exitFunction	;wreg free
  9261                           
  9262                           ;menu.c: 341: break;
  9263  00697E  0012               	return	
  9264  006980                     
  9265                           ;menu.c: 343: Function_F();
  9266  006980  EC72  F043         	call	_Function_F	;wreg free
  9267                           
  9268                           ;menu.c: 344: exitFunction();
  9269  006984  EC1D  F048         	call	_exitFunction	;wreg free
  9270                           
  9271                           ;menu.c: 345: break;
  9272  006988  0012               	return	
  9273  00698A                     
  9274                           ;menu.c: 347: Function_G();
  9275  00698A  EC46  F03B         	call	_Function_G	;wreg free
  9276                           
  9277                           ;menu.c: 353: }
  9278                           
  9279                           ;menu.c: 352: break;
  9280                           
  9281                           ;menu.c: 351: default:
  9282                           
  9283                           ;menu.c: 349: break;
  9284  00698E  0012               	return	
  9285  006990                     l3413:
  9286  006990  0101               	movlb	1	; () banked
  9287  006992  516A               	movf	(_mainMenu+2)& (0+255),w,b
  9288                           
  9289                           ; Switch size 1, requested type "space"
  9290                           ; Number of cases is 8, Range of values is 0 to 7
  9291                           ; switch strategies available:
  9292                           ; Name         Instructions Cycles
  9293                           ; simple_byte           25    13 (average)
  9294                           ;	Chosen strategy is simple_byte
  9295  006994  0A00               	xorlw	0	; case 0
  9296  006996  B4D8               	btfsc	status,2,c
  9297  006998  D7D5               	goto	l3414
  9298  00699A  0A01               	xorlw	1	; case 1
  9299  00699C  B4D8               	btfsc	status,2,c
  9300  00699E  D7D7               	goto	l3416
  9301  0069A0  0A03               	xorlw	3	; case 2
  9302  0069A2  B4D8               	btfsc	status,2,c
  9303  0069A4  D7D9               	goto	l3417
  9304  0069A6  0A01               	xorlw	1	; case 3
  9305  0069A8  B4D8               	btfsc	status,2,c
  9306  0069AA  D7DB               	goto	l3418
  9307  0069AC  0A07               	xorlw	7	; case 4
  9308  0069AE  B4D8               	btfsc	status,2,c
  9309  0069B0  D7DD               	goto	l3419
  9310  0069B2  0A01               	xorlw	1	; case 5
  9311  0069B4  B4D8               	btfsc	status,2,c
  9312  0069B6  D7DF               	goto	l3420
  9313  0069B8  0A03               	xorlw	3	; case 6
  9314  0069BA  B4D8               	btfsc	status,2,c
  9315  0069BC  D7E1               	goto	l3421
  9316  0069BE  0A01               	xorlw	1	; case 7
  9317  0069C0  A4D8               	btfss	status,2,c
  9318                           
  9319                           ; BSR set to: 1
  9320  0069C2  0012               	return	
  9321  0069C4  D7E2               	goto	l3422
  9322  0069C6                     __end_of_menu_lcd:
  9323                           	opt stack 0
  9324                           tblptru	equ	0xFF8
  9325                           tblptrh	equ	0xFF7
  9326                           tblptrl	equ	0xFF6
  9327                           tablat	equ	0xFF5
  9328                           intcon	equ	0xFF2
  9329                           intcon2	equ	0xFF1
  9330                           postinc0	equ	0xFEE
  9331                           wreg	equ	0xFE8
  9332                           postdec1	equ	0xFE5
  9333                           fsr1l	equ	0xFE1
  9334                           status	equ	0xFD8
  9335                           
  9336 ;; *************** function _Lcd_Clear *****************
  9337 ;; Defined at:
  9338 ;;		line 53 in file "lcd.c"
  9339 ;; Parameters:    Size  Location     Type
  9340 ;;		None
  9341 ;; Auto vars:     Size  Location     Type
  9342 ;;		None
  9343 ;; Return value:  Size  Location     Type
  9344 ;;                  1    wreg      void 
  9345 ;; Registers used:
  9346 ;;		wreg, status,2, cstack
  9347 ;; Tracked objects:
  9348 ;;		On entry : 0/0
  9349 ;;		On exit  : 0/0
  9350 ;;		Unchanged: 0/0
  9351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;Total ram usage:        0 bytes
  9357 ;; Hardware stack levels used:    1
  9358 ;; Hardware stack levels required when called:    7
  9359 ;; This function calls:
  9360 ;;		_Lcd_Cmd
  9361 ;; This function is called by:
  9362 ;;		_menu_lcd
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           	psect	text6
  9367  00964A                     __ptext6:
  9368                           	opt stack 0
  9369  00964A                     _Lcd_Clear:
  9370                           	opt stack 22
  9371                           
  9372                           ;lcd.c: 55: Lcd_Cmd(0);
  9373                           
  9374                           ;incstack = 0
  9375  00964A  0E00               	movlw	0
  9376  00964C  EC7A  F04A         	call	_Lcd_Cmd
  9377                           
  9378                           ;lcd.c: 56: Lcd_Cmd(1);
  9379  009650  0E01               	movlw	1
  9380  009652  EC7A  F04A         	call	_Lcd_Cmd
  9381  009656  0012               	return		;funcret
  9382  009658                     __end_of_Lcd_Clear:
  9383                           	opt stack 0
  9384                           tblptru	equ	0xFF8
  9385                           tblptrh	equ	0xFF7
  9386                           tblptrl	equ	0xFF6
  9387                           tablat	equ	0xFF5
  9388                           intcon	equ	0xFF2
  9389                           intcon2	equ	0xFF1
  9390                           postinc0	equ	0xFEE
  9391                           wreg	equ	0xFE8
  9392                           postdec1	equ	0xFE5
  9393                           fsr1l	equ	0xFE1
  9394                           status	equ	0xFD8
  9395                           
  9396 ;; *************** function _Function_H *****************
  9397 ;; Defined at:
  9398 ;;		line 986 in file "menu.c"
  9399 ;; Parameters:    Size  Location     Type
  9400 ;;		None
  9401 ;; Auto vars:     Size  Location     Type
  9402 ;;		None
  9403 ;; Return value:  Size  Location     Type
  9404 ;;                  1    wreg      void 
  9405 ;; Registers used:
  9406 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9407 ;; Tracked objects:
  9408 ;;		On entry : 0/0
  9409 ;;		On exit  : 0/0
  9410 ;;		Unchanged: 0/0
  9411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;Total ram usage:        1 bytes
  9417 ;; Hardware stack levels used:    1
  9418 ;; Hardware stack levels required when called:   15
  9419 ;; This function calls:
  9420 ;;		_Function_H_1
  9421 ;;		_Function_H_2
  9422 ;;		_Function_H_3
  9423 ;;		_Function_H_4
  9424 ;;		_Function_H_5
  9425 ;;		_Function_H_6
  9426 ;;		_Function_H_7
  9427 ;;		_Function_H_8
  9428 ;;		_Function_H_9
  9429 ;;		_Lcd_Print_String
  9430 ;;		___lbmod
  9431 ;;		___wmul
  9432 ;;		_clear_row2
  9433 ;;		_processEncoderBuxton
  9434 ;; This function is called by:
  9435 ;;		_menu_lcd
  9436 ;; This function uses a non-reentrant model
  9437 ;;
  9438                           
  9439                           	psect	text7
  9440  006E5C                     __ptext7:
  9441                           	opt stack 0
  9442  006E5C                     _Function_H:
  9443                           	opt stack 14
  9444                           
  9445                           ;menu.c: 988: which_screen = ARPEGGIATOR_MENU;
  9446                           
  9447                           ;incstack = 0
  9448  006E5C  0E19               	movlw	25
  9449  006E5E  0100               	movlb	0	; () banked
  9450  006E60  6FF9               	movwf	_which_screen& (0+255),b
  9451                           
  9452                           ; BSR set to: 0
  9453                           ;menu.c: 989: lcd_print_once = 0;
  9454  006E62  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9455                           
  9456                           ;menu.c: 991: while(encoder_click == 0) {
  9457  006E64  D022               	goto	l3631
  9458  006E66                     
  9459                           ;menu.c: 992: processEncoderBuxton();
  9460                           
  9461                           ; BSR set to: 0
  9462  006E66  EC09  F000         	call	_processEncoderBuxton	;wreg free
  9463                           
  9464                           ;menu.c: 993: if (lcd_print_once == 0) {
  9465  006E6A  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9466  006E6C  D01D               	goto	l3633
  9467                           
  9468                           ;menu.c: 994: clear_row2();
  9469  006E6E  EC3E  F04A         	call	_clear_row2	;wreg free
  9470                           
  9471                           ;menu.c: 995: Lcd_Print_String(LCD_STRINGS[(arpeggiatorMenu.selector % arpeggiatorMenu.n
      +                          umber) + arpeggiatorMenu.address]);
  9472  006E72  C03B  F060         	movff	_arpeggiatorMenu,___lbmod@divisor
  9473  006E76  503D               	movf	_arpeggiatorMenu+2,w,c
  9474  006E78  ECBD  F049         	call	___lbmod
  9475  006E7C  0100               	movlb	0	; () banked
  9476  006E7E  6FCC               	movwf	??_Function_H& (0+255),b
  9477  006E80  51CC               	movf	??_Function_H& (0+255),w,b
  9478  006E82  243C               	addwf	_arpeggiatorMenu+1,w,c
  9479  006E84  6F64               	movwf	___wmul@multiplier& (0+255),b
  9480  006E86  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9481  006E88  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9482  006E8A  0E00               	movlw	0
  9483  006E8C  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9484  006E8E  0E11               	movlw	17
  9485  006E90  6F66               	movwf	___wmul@multiplicand& (0+255),b
  9486  006E92  EC66  F04A         	call	___wmul	;wreg free
  9487  006E96  0E9E               	movlw	low _LCD_STRINGS
  9488  006E98  0100               	movlb	0	; () banked
  9489  006E9A  2564               	addwf	?___wmul& (0+255),w,b
  9490  006E9C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9491  006E9E  0EF3               	movlw	high _LCD_STRINGS
  9492  006EA0  2165               	addwfc	(?___wmul+1)& (0+255),w,b
  9493  006EA2  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9494  006EA4  ECB2  F040         	call	_Lcd_Print_String	;wreg free
  9495  006EA8                     l3633:
  9496                           
  9497                           ;menu.c: 996: }
  9498                           ;menu.c: 997: lcd_print_once = 1;
  9499  006EA8  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9500  006EAA                     l3631:
  9501  006EAA  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9502  006EAC  D7DC               	goto	l3632
  9503                           
  9504                           ;menu.c: 998: }
  9505                           ;menu.c: 1000: if(arpeggiatorMenu.selector == 0) {Function_H_1();}
  9506  006EAE  503D               	movf	_arpeggiatorMenu+2,w,c
  9507  006EB0  B4D8               	btfsc	status,2,c
  9508  006EB2  EC60  F03A         	call	_Function_H_1	;wreg free
  9509                           
  9510                           ;menu.c: 1001: if(arpeggiatorMenu.selector == 1) {Function_H_2();}
  9511  006EB6  043D               	decf	_arpeggiatorMenu+2,w,c
  9512  006EB8  B4D8               	btfsc	status,2,c
  9513  006EBA  ECDC  F043         	call	_Function_H_2	;wreg free
  9514                           
  9515                           ;menu.c: 1002: if(arpeggiatorMenu.selector == 2) {Function_H_3();}
  9516  006EBE  0E02               	movlw	2
  9517  006EC0  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9518  006EC2  B4D8               	btfsc	status,2,c
  9519  006EC4  EC06  F045         	call	_Function_H_3	;wreg free
  9520                           
  9521                           ;menu.c: 1003: if(arpeggiatorMenu.selector == 3) {Function_H_4();}
  9522  006EC8  0E03               	movlw	3
  9523  006ECA  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9524  006ECC  B4D8               	btfsc	status,2,c
  9525  006ECE  EC23  F036         	call	_Function_H_4	;wreg free
  9526                           
  9527                           ;menu.c: 1004: if(arpeggiatorMenu.selector == 4) {Function_H_5();}
  9528  006ED2  0E04               	movlw	4
  9529  006ED4  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9530  006ED6  B4D8               	btfsc	status,2,c
  9531  006ED8  ECD7  F036         	call	_Function_H_5	;wreg free
  9532                           
  9533                           ;menu.c: 1005: if(arpeggiatorMenu.selector == 5) {Function_H_6();}
  9534  006EDC  0E05               	movlw	5
  9535  006EDE  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9536  006EE0  B4D8               	btfsc	status,2,c
  9537  006EE2  EC5A  F042         	call	_Function_H_6	;wreg free
  9538                           
  9539                           ;menu.c: 1006: if(arpeggiatorMenu.selector == 6) {Function_H_7();}
  9540  006EE6  0E06               	movlw	6
  9541  006EE8  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9542  006EEA  B4D8               	btfsc	status,2,c
  9543  006EEC  EC7F  F036         	call	_Function_H_7	;wreg free
  9544                           
  9545                           ;menu.c: 1007: if(arpeggiatorMenu.selector == 7) {Function_H_8();}
  9546  006EF0  0E07               	movlw	7
  9547  006EF2  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9548  006EF4  B4D8               	btfsc	status,2,c
  9549  006EF6  EC21  F042         	call	_Function_H_8	;wreg free
  9550                           
  9551                           ;menu.c: 1008: if(arpeggiatorMenu.selector == 8) {Function_H_9();}
  9552  006EFA  0E08               	movlw	8
  9553  006EFC  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9554  006EFE  A4D8               	btfss	status,2,c
  9555  006F00  0012               	return	
  9556  006F02  ECFA  F03A         	call	_Function_H_9	;wreg free
  9557  006F06  0012               	return	
  9558  006F08                     __end_of_Function_H:
  9559                           	opt stack 0
  9560                           tblptru	equ	0xFF8
  9561                           tblptrh	equ	0xFF7
  9562                           tblptrl	equ	0xFF6
  9563                           tablat	equ	0xFF5
  9564                           intcon	equ	0xFF2
  9565                           intcon2	equ	0xFF1
  9566                           postinc0	equ	0xFEE
  9567                           wreg	equ	0xFE8
  9568                           postdec1	equ	0xFE5
  9569                           fsr1l	equ	0xFE1
  9570                           status	equ	0xFD8
  9571                           
  9572 ;; *************** function _Function_H_9 *****************
  9573 ;; Defined at:
  9574 ;;		line 1507 in file "menu.c"
  9575 ;; Parameters:    Size  Location     Type
  9576 ;;		None
  9577 ;; Auto vars:     Size  Location     Type
  9578 ;;		None
  9579 ;; Return value:  Size  Location     Type
  9580 ;;                  1    wreg      void 
  9581 ;; Registers used:
  9582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9583 ;; Tracked objects:
  9584 ;;		On entry : 0/0
  9585 ;;		On exit  : 0/0
  9586 ;;		Unchanged: 0/0
  9587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9591 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9592 ;;Total ram usage:        1 bytes
  9593 ;; Hardware stack levels used:    1
  9594 ;; Hardware stack levels required when called:   10
  9595 ;; This function calls:
  9596 ;;		_Function_H_9_1
  9597 ;;		_Function_H_9_2
  9598 ;;		_Function_H_9_3
  9599 ;;		_Function_H_9_4
  9600 ;;		_Lcd_Print_String
  9601 ;;		___lbmod
  9602 ;;		___wmul
  9603 ;;		_clear_row1
  9604 ;;		_clear_row2
  9605 ;;		_processEncoderBuxton
  9606 ;; This function is called by:
  9607 ;;		_Function_H
  9608 ;; This function uses a non-reentrant model
  9609 ;;
  9610                           
  9611                           	psect	text8
  9612  0075F4                     __ptext8:
  9613                           	opt stack 0
  9614  0075F4                     _Function_H_9:
  9615                           	opt stack 18
  9616                           
  9617                           ;menu.c: 1509: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_MENU,
  9618                           ;menu.c: 1510: lcd_print_once = 0;
  9619                           
  9620                           ;incstack = 0
  9621  0075F4  0E26               	movlw	38
  9622  0075F6  0100               	movlb	0	; () banked
  9623  0075F8  6FF9               	movwf	_which_screen& (0+255),b
  9624                           
  9625                           ; BSR set to: 0
  9626  0075FA  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9627                           
  9628                           ; BSR set to: 0
  9629                           ;menu.c: 1511: encoder_click = 0;
  9630  0075FC  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9631                           
  9632                           ;menu.c: 1513: while(encoder_click == 0) {
  9633  0075FE  D02C               	goto	l3794
  9634  007600                     
  9635                           ;menu.c: 1514: processEncoderBuxton();
  9636                           
  9637                           ; BSR set to: 0
  9638  007600  EC09  F000         	call	_processEncoderBuxton	;wreg free
  9639                           
  9640                           ;menu.c: 1515: if (lcd_print_once == 0) {
  9641  007604  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9642  007606  D027               	goto	l3796
  9643                           
  9644                           ;menu.c: 1516: clear_row1();
  9645  007608  EC52  F04A         	call	_clear_row1	;wreg free
  9646                           
  9647                           ;menu.c: 1517: Lcd_Print_String("Last Note Mode:");
  9648  00760C  0E0D               	movlw	low STR_74
  9649  00760E  0100               	movlb	0	; () banked
  9650  007610  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9651  007612  0EFE               	movlw	high STR_74
  9652  007614  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9653  007616  ECB2  F040         	call	_Lcd_Print_String	;wreg free
  9654                           
  9655                           ;menu.c: 1518: clear_row2();
  9656  00761A  EC3E  F04A         	call	_clear_row2	;wreg free
  9657                           
  9658                           ;menu.c: 1519: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9659  00761E  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
  9660  007622  0100               	movlb	0	; () banked
  9661  007624  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9662  007626  ECBD  F049         	call	___lbmod
  9663  00762A  0100               	movlb	0	; () banked
  9664  00762C  6F71               	movwf	??_Function_H_9& (0+255),b
  9665  00762E  5171               	movf	??_Function_H_9& (0+255),w,b
  9666  007630  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9667  007632  6F64               	movwf	___wmul@multiplier& (0+255),b
  9668  007634  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9669  007636  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9670  007638  0E00               	movlw	0
  9671  00763A  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9672  00763C  0E11               	movlw	17
  9673  00763E  6F66               	movwf	___wmul@multiplicand& (0+255),b
  9674  007640  EC66  F04A         	call	___wmul	;wreg free
  9675  007644  0E9E               	movlw	low _LCD_STRINGS
  9676  007646  0100               	movlb	0	; () banked
  9677  007648  2564               	addwf	?___wmul& (0+255),w,b
  9678  00764A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9679  00764C  0EF3               	movlw	high _LCD_STRINGS
  9680  00764E  2165               	addwfc	(?___wmul+1)& (0+255),w,b
  9681  007650  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9682  007652  ECB2  F040         	call	_Lcd_Print_String	;wreg free
  9683  007656                     l3796:
  9684                           
  9685                           ;menu.c: 1520: }
  9686                           ;menu.c: 1521: lcd_print_once = 1;
  9687  007656  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9688  007658                     l3794:
  9689  007658  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9690  00765A  D7D2               	goto	l3795
  9691                           
  9692                           ;menu.c: 1522: }
  9693                           ;menu.c: 1525: if(arpeggiatorLastNoteModeMenu.selector == 0) {Function_H_9_1();}
  9694  00765C  0100               	movlb	0	; () banked
  9695  00765E  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9696  007660  B4D8               	btfsc	status,2,c
  9697                           
  9698                           ; BSR set to: 0
  9699  007662  ECCD  F038         	call	_Function_H_9_1	;wreg free
  9700                           
  9701                           ;menu.c: 1526: if(arpeggiatorLastNoteModeMenu.selector == 1) {Function_H_9_2();}
  9702  007666  0100               	movlb	0	; () banked
  9703  007668  05DE               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9704  00766A  B4D8               	btfsc	status,2,c
  9705                           
  9706                           ; BSR set to: 0
  9707  00766C  EC7C  F038         	call	_Function_H_9_2	;wreg free
  9708                           
  9709                           ;menu.c: 1527: if(arpeggiatorLastNoteModeMenu.selector == 2) {Function_H_9_3();}
  9710  007670  0E02               	movlw	2
  9711  007672  0100               	movlb	0	; () banked
  9712  007674  19DE               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9713  007676  B4D8               	btfsc	status,2,c
  9714                           
  9715                           ; BSR set to: 0
  9716  007678  EC2B  F038         	call	_Function_H_9_3	;wreg free
  9717                           
  9718                           ;menu.c: 1528: if(arpeggiatorLastNoteModeMenu.selector == 3) {Function_H_9_4();}
  9719  00767C  0E03               	movlw	3
  9720  00767E  0100               	movlb	0	; () banked
  9721  007680  19DE               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9722  007682  A4D8               	btfss	status,2,c
  9723  007684  0012               	return	
  9724                           
  9725                           ; BSR set to: 0
  9726  007686  ECDA  F037         	call	_Function_H_9_4	;wreg free
  9727  00768A  0012               	return	
  9728  00768C                     __end_of_Function_H_9:
  9729                           	opt stack 0
  9730                           tblptru	equ	0xFF8
  9731                           tblptrh	equ	0xFF7
  9732                           tblptrl	equ	0xFF6
  9733                           tablat	equ	0xFF5
  9734                           intcon	equ	0xFF2
  9735                           intcon2	equ	0xFF1
  9736                           postinc0	equ	0xFEE
  9737                           wreg	equ	0xFE8
  9738                           postdec1	equ	0xFE5
  9739                           fsr1l	equ	0xFE1
  9740                           status	equ	0xFD8
  9741                           
  9742 ;; *************** function _Function_H_9_4 *****************
  9743 ;; Defined at:
  9744 ;;		line 1482 in file "menu.c"
  9745 ;; Parameters:    Size  Location     Type
  9746 ;;		None
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;		None
  9749 ;; Return value:  Size  Location     Type
  9750 ;;                  1    wreg      void 
  9751 ;; Registers used:
  9752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9753 ;; Tracked objects:
  9754 ;;		On entry : 0/0
  9755 ;;		On exit  : 0/0
  9756 ;;		Unchanged: 0/0
  9757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;Total ram usage:        1 bytes
  9763 ;; Hardware stack levels used:    1
  9764 ;; Hardware stack levels required when called:    9
  9765 ;; This function calls:
  9766 ;;		_Lcd_Print_String
  9767 ;;		___lbmod
  9768 ;;		___wmul
  9769 ;;		_clear_row1
  9770 ;;		_clear_row2
  9771 ;;		_processEncoderBuxton
  9772 ;; This function is called by:
  9773 ;;		_Function_H_9
  9774 ;; This function uses a non-reentrant model
  9775 ;;
  9776                           
  9777                           	psect	text9
  9778  006FB4                     __ptext9:
  9779                           	opt stack 0
  9780  006FB4                     _Function_H_9_4:
  9781                           	opt stack 18
  9782                           
  9783                           ;menu.c: 1484: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU;
  9784                           
  9785                           ;incstack = 0
  9786  006FB4  0E2A               	movlw	42
  9787  006FB6  0100               	movlb	0	; () banked
  9788  006FB8  6FF9               	movwf	_which_screen& (0+255),b
  9789                           
  9790                           ; BSR set to: 0
  9791                           ;menu.c: 1485: lcd_print_once = 0;
  9792  006FBA  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9793                           
  9794                           ; BSR set to: 0
  9795                           ;menu.c: 1486: encoder_click = 0;
  9796  006FBC  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9797                           
  9798                           ;menu.c: 1488: arpeggiatorLastNoteModeResetMenu.selector = LAST_NOTE_MODE_RESET;
  9799  006FBE  0E00               	movlw	0
  9800  006FC0  BE33               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9801  006FC2  0E01               	movlw	1
  9802  006FC4  0101               	movlb	1	; () banked
  9803  006FC6  6F0A               	movwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),b
  9804                           
  9805                           ;menu.c: 1490: while(encoder_click == 0) {
  9806  006FC8  D03D               	goto	l3785
  9807  006FCA                     
  9808                           ;menu.c: 1491: processEncoderBuxton();
  9809                           
  9810                           ; BSR set to: 1
  9811  006FCA  EC09  F000         	call	_processEncoderBuxton	;wreg free
  9812                           
  9813                           ;menu.c: 1492: if (lcd_print_once == 0) {
  9814  006FCE  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9815  006FD0  D038               	goto	l3789
  9816                           
  9817                           ;menu.c: 1493: clear_row1();
  9818  006FD2  EC52  F04A         	call	_clear_row1	;wreg free
  9819                           
  9820                           ;menu.c: 1494: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9821  006FD6  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
  9822  006FDA  0100               	movlb	0	; () banked
  9823  006FDC  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9824  006FDE  ECBD  F049         	call	___lbmod
  9825  006FE2  0100               	movlb	0	; () banked
  9826  006FE4  6F70               	movwf	??_Function_H_9_4& (0+255),b
  9827  006FE6  5170               	movf	??_Function_H_9_4& (0+255),w,b
  9828  006FE8  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9829  006FEA  6F64               	movwf	___wmul@multiplier& (0+255),b
  9830  006FEC  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9831  006FEE  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9832  006FF0  0E00               	movlw	0
  9833  006FF2  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9834  006FF4  0E11               	movlw	17
  9835  006FF6  6F66               	movwf	___wmul@multiplicand& (0+255),b
  9836  006FF8  EC66  F04A         	call	___wmul	;wreg free
  9837  006FFC  0E9E               	movlw	low _LCD_STRINGS
  9838  006FFE  0100               	movlb	0	; () banked
  9839  007000  2564               	addwf	?___wmul& (0+255),w,b
  9840  007002  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9841  007004  0EF3               	movlw	high _LCD_STRINGS
  9842  007006  2165               	addwfc	(?___wmul+1)& (0+255),w,b
  9843  007008  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9844  00700A  ECB2  F040         	call	_Lcd_Print_String	;wreg free
  9845                           
  9846                           ;menu.c: 1495: if(arpeggiatorLastNoteModeResetMenu.selector == 0) {clear_row2();Lcd_Prin
      +                          t_String("IMMEDIATE");}
  9847  00700E  0101               	movlb	1	; () banked
  9848  007010  510A               	movf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9849  007012  A4D8               	btfss	status,2,c
  9850  007014  D009               	goto	l3788
  9851                           
  9852                           ; BSR set to: 1
  9853  007016  EC3E  F04A         	call	_clear_row2	;wreg free
  9854  00701A  0EA9               	movlw	low STR_66
  9855  00701C  0100               	movlb	0	; () banked
  9856  00701E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9857  007020  0EFF               	movlw	high STR_66
  9858  007022  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9859  007024  ECB2  F040         	call	_Lcd_Print_String	;wreg free
  9860  007028                     l3788:
  9861                           
  9862                           ;menu.c: 1496: if(arpeggiatorLastNoteModeResetMenu.selector == 1) {clear_row2();Lcd_Prin
      +                          t_String("FINISH LAST");}
  9863  007028  0101               	movlb	1	; () banked
  9864  00702A  050A               	decf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9865  00702C  A4D8               	btfss	status,2,c
  9866  00702E  D009               	goto	l3789
  9867                           
  9868                           ; BSR set to: 1
  9869  007030  EC3E  F04A         	call	_clear_row2	;wreg free
  9870  007034  0E7C               	movlw	low STR_67
  9871  007036  0100               	movlb	0	; () banked
  9872  007038  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9873  00703A  0EFF               	movlw	high STR_67
  9874  00703C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9875  00703E  ECB2  F040         	call	_Lcd_Print_String	;wreg free
  9876  007042                     l3789:
  9877                           
  9878                           ;menu.c: 1497: }
  9879                           ;menu.c: 1498: lcd_print_once = 1;
  9880  007042  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9881  007044                     l3785:
  9882  007044  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9883  007046  D7C1               	goto	l3786
  9884                           
  9885                           ;menu.c: 1499: }
  9886                           ;menu.c: 1501: LAST_NOTE_MODE_RESET = arpeggiatorLastNoteModeResetMenu.selector;
  9887  007048  0101               	movlb	1	; () banked
  9888  00704A  A10A               	btfss	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),0,b
  9889  00704C  D002               	goto	u29870
  9890  00704E  8E33               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9891  007050  0012               	return	
  9892  007052                     u29870:
  9893  007052  9E33               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9894  007054  0012               	return		;funcret
  9895  007056                     __end_of_Function_H_9_4:
  9896                           	opt stack 0
  9897                           tblptru	equ	0xFF8
  9898                           tblptrh	equ	0xFF7
  9899                           tblptrl	equ	0xFF6
  9900                           tablat	equ	0xFF5
  9901                           intcon	equ	0xFF2
  9902                           intcon2	equ	0xFF1
  9903                           postinc0	equ	0xFEE
  9904                           wreg	equ	0xFE8
  9905                           postdec1	equ	0xFE5
  9906                           fsr1l	equ	0xFE1
  9907                           status	equ	0xFD8
  9908                           
  9909 ;; *************** function _Function_H_9_3 *****************
  9910 ;; Defined at:
  9911 ;;		line 1458 in file "menu.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;		None
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;		None
  9916 ;; Return value:  Size  Location     Type
  9917 ;;                  1    wreg      void 
  9918 ;; Registers used:
  9919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9920 ;; Tracked objects:
  9921 ;;		On entry : 0/0
  9922 ;;		On exit  : 0/0
  9923 ;;		Unchanged: 0/0
  9924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9928 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9929 ;;Total ram usage:        1 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; Hardware stack levels required when called:    9
  9932 ;; This function calls:
  9933 ;;		_Lcd_Print_String
  9934 ;;		___lbmod
  9935 ;;		___wmul
  9936 ;;		_clear_row1
  9937 ;;		_clear_row2
  9938 ;;		_processEncoderBuxton
  9939 ;; This function is called by:
  9940 ;;		_Function_H_9
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           	psect	text10
  9945  007056                     __ptext10:
  9946                           	opt stack 0
  9947  007056                     _Function_H_9_3:
  9948                           	opt stack 18
  9949                           
  9950                           ;menu.c: 1460: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU;
  9951                           
  9952                           ;incstack = 0
  9953  007056  0E29               	movlw	41
  9954  007058  0100               	movlb	0	; () banked
  9955  00705A  6FF9               	movwf	_which_screen& (0+255),b
  9956                           
  9957                           ; BSR set to: 0
  9958                           ;menu.c: 1461: lcd_print_once = 0;
  9959  00705C  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;menu.c: 1462: encoder_click = 0;
  9963  00705E  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9964                           
  9965                           ;menu.c: 1464: arpeggiatorLastNoteModeTransposeMenu.selector = LAST_NOTE_MODE_TRANSPOSE;
  9966  007060  0E00               	movlw	0
  9967  007062  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9968  007064  0E01               	movlw	1
  9969  007066  0101               	movlb	1	; () banked
  9970  007068  6F0D               	movwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),b
  9971                           
  9972                           ;menu.c: 1466: while(encoder_click == 0) {
  9973  00706A  D03D               	goto	l3776
  9974  00706C                     
  9975                           ;menu.c: 1467: processEncoderBuxton();
  9976                           
  9977                           ; BSR set to: 1
  9978  00706C  EC09  F000         	call	_processEncoderBuxton	;wreg free
  9979                           
  9980                           ;menu.c: 1468: if (lcd_print_once == 0) {
  9981  007070  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9982  007072  D038               	goto	l3780
  9983                           
  9984                           ;menu.c: 1469: clear_row1();
  9985  007074  EC52  F04A         	call	_clear_row1	;wreg free
  9986                           
  9987                           ;menu.c: 1470: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9988  007078  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
  9989  00707C  0100               	movlb	0	; () banked
  9990  00707E  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9991  007080  ECBD  F049         	call	___lbmod
  9992  007084  0100               	movlb	0	; () banked
  9993  007086  6F70               	movwf	??_Function_H_9_3& (0+255),b
  9994  007088  5170               	movf	??_Function_H_9_3& (0+255),w,b
  9995  00708A  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9996  00708C  6F64               	movwf	___wmul@multiplier& (0+255),b
  9997  00708E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9998  007090  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9999  007092  0E00               	movlw	0
 10000  007094  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10001  007096  0E11               	movlw	17
 10002  007098  6F66               	movwf	___wmul@multiplicand& (0+255),b
 10003  00709A  EC66  F04A         	call	___wmul	;wreg free
 10004  00709E  0E9E               	movlw	low _LCD_STRINGS
 10005  0070A0  0100               	movlb	0	; () banked
 10006  0070A2  2564               	addwf	?___wmul& (0+255),w,b
 10007  0070A4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10008  0070A6  0EF3               	movlw	high _LCD_STRINGS
 10009  0070A8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 10010  0070AA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10011  0070AC  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10012                           
 10013                           ;menu.c: 1471: if(arpeggiatorLastNoteModeTransposeMenu.selector == 0) {clear_row2();Lcd_
      +                          Print_String("IMMEDIATE");}
 10014  0070B0  0101               	movlb	1	; () banked
 10015  0070B2  510D               	movf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
 10016  0070B4  A4D8               	btfss	status,2,c
 10017  0070B6  D009               	goto	l3779
 10018                           
 10019                           ; BSR set to: 1
 10020  0070B8  EC3E  F04A         	call	_clear_row2	;wreg free
 10021  0070BC  0EA9               	movlw	low STR_66
 10022  0070BE  0100               	movlb	0	; () banked
 10023  0070C0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10024  0070C2  0EFF               	movlw	high STR_66
 10025  0070C4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10026  0070C6  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10027  0070CA                     l3779:
 10028                           
 10029                           ;menu.c: 1472: if(arpeggiatorLastNoteModeTransposeMenu.selector == 1) {clear_row2();Lcd_
      +                          Print_String("FINISH LAST");}
 10030  0070CA  0101               	movlb	1	; () banked
 10031  0070CC  050D               	decf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
 10032  0070CE  A4D8               	btfss	status,2,c
 10033  0070D0  D009               	goto	l3780
 10034                           
 10035                           ; BSR set to: 1
 10036  0070D2  EC3E  F04A         	call	_clear_row2	;wreg free
 10037  0070D6  0E7C               	movlw	low STR_67
 10038  0070D8  0100               	movlb	0	; () banked
 10039  0070DA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10040  0070DC  0EFF               	movlw	high STR_67
 10041  0070DE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10042  0070E0  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10043  0070E4                     l3780:
 10044                           
 10045                           ;menu.c: 1473: }
 10046                           ;menu.c: 1474: lcd_print_once = 1;
 10047  0070E4  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10048  0070E6                     l3776:
 10049  0070E6  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10050  0070E8  D7C1               	goto	l3777
 10051                           
 10052                           ;menu.c: 1475: }
 10053                           ;menu.c: 1477: LAST_NOTE_MODE_TRANSPOSE = arpeggiatorLastNoteModeTransposeMenu.selector;
 10054  0070EA  0101               	movlb	1	; () banked
 10055  0070EC  A10D               	btfss	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),0,b
 10056  0070EE  D002               	goto	u29810
 10057  0070F0  8034               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 10058  0070F2  0012               	return	
 10059  0070F4                     u29810:
 10060  0070F4  9034               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 10061  0070F6  0012               	return		;funcret
 10062  0070F8                     __end_of_Function_H_9_3:
 10063                           	opt stack 0
 10064                           tblptru	equ	0xFF8
 10065                           tblptrh	equ	0xFF7
 10066                           tblptrl	equ	0xFF6
 10067                           tablat	equ	0xFF5
 10068                           intcon	equ	0xFF2
 10069                           intcon2	equ	0xFF1
 10070                           postinc0	equ	0xFEE
 10071                           wreg	equ	0xFE8
 10072                           postdec1	equ	0xFE5
 10073                           fsr1l	equ	0xFE1
 10074                           status	equ	0xFD8
 10075                           
 10076 ;; *************** function _Function_H_9_2 *****************
 10077 ;; Defined at:
 10078 ;;		line 1435 in file "menu.c"
 10079 ;; Parameters:    Size  Location     Type
 10080 ;;		None
 10081 ;; Auto vars:     Size  Location     Type
 10082 ;;		None
 10083 ;; Return value:  Size  Location     Type
 10084 ;;                  1    wreg      void 
 10085 ;; Registers used:
 10086 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10087 ;; Tracked objects:
 10088 ;;		On entry : 0/0
 10089 ;;		On exit  : 0/0
 10090 ;;		Unchanged: 0/0
 10091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10094 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10096 ;;Total ram usage:        1 bytes
 10097 ;; Hardware stack levels used:    1
 10098 ;; Hardware stack levels required when called:    9
 10099 ;; This function calls:
 10100 ;;		_Lcd_Print_String
 10101 ;;		___lbmod
 10102 ;;		___wmul
 10103 ;;		_clear_row1
 10104 ;;		_clear_row2
 10105 ;;		_processEncoderBuxton
 10106 ;; This function is called by:
 10107 ;;		_Function_H_9
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111                           	psect	text11
 10112  0070F8                     __ptext11:
 10113                           	opt stack 0
 10114  0070F8                     _Function_H_9_2:
 10115                           	opt stack 18
 10116                           
 10117                           ;menu.c: 1437: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU;
 10118                           
 10119                           ;incstack = 0
 10120  0070F8  0E28               	movlw	40
 10121  0070FA  0100               	movlb	0	; () banked
 10122  0070FC  6FF9               	movwf	_which_screen& (0+255),b
 10123                           
 10124                           ; BSR set to: 0
 10125                           ;menu.c: 1438: lcd_print_once = 0;
 10126  0070FE  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10127                           
 10128                           ; BSR set to: 0
 10129                           ;menu.c: 1439: encoder_click = 0;
 10130  007100  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10131                           
 10132                           ;menu.c: 1441: arpeggiatorLastNoteModeKeyReleaseMenu.selector = LAST_NOTE_MODE_KEY_RELEA
      +                          SE;
 10133  007102  0E00               	movlw	0
 10134  007104  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10135  007106  0E01               	movlw	1
 10136  007108  0101               	movlb	1	; () banked
 10137  00710A  6F10               	movwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),b
 10138                           
 10139                           ;menu.c: 1443: while(encoder_click == 0) {
 10140  00710C  D03D               	goto	l3767
 10141  00710E                     
 10142                           ;menu.c: 1444: processEncoderBuxton();
 10143                           
 10144                           ; BSR set to: 1
 10145  00710E  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10146                           
 10147                           ;menu.c: 1445: if (lcd_print_once == 0) {
 10148  007112  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10149  007114  D038               	goto	l3771
 10150                           
 10151                           ;menu.c: 1446: clear_row1();
 10152  007116  EC52  F04A         	call	_clear_row1	;wreg free
 10153                           
 10154                           ;menu.c: 1447: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10155  00711A  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
 10156  00711E  0100               	movlb	0	; () banked
 10157  007120  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10158  007122  ECBD  F049         	call	___lbmod
 10159  007126  0100               	movlb	0	; () banked
 10160  007128  6F70               	movwf	??_Function_H_9_2& (0+255),b
 10161  00712A  5170               	movf	??_Function_H_9_2& (0+255),w,b
 10162  00712C  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10163  00712E  6F64               	movwf	___wmul@multiplier& (0+255),b
 10164  007130  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 10165  007132  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10166  007134  0E00               	movlw	0
 10167  007136  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10168  007138  0E11               	movlw	17
 10169  00713A  6F66               	movwf	___wmul@multiplicand& (0+255),b
 10170  00713C  EC66  F04A         	call	___wmul	;wreg free
 10171  007140  0E9E               	movlw	low _LCD_STRINGS
 10172  007142  0100               	movlb	0	; () banked
 10173  007144  2564               	addwf	?___wmul& (0+255),w,b
 10174  007146  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10175  007148  0EF3               	movlw	high _LCD_STRINGS
 10176  00714A  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 10177  00714C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10178  00714E  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10179                           
 10180                           ;menu.c: 1448: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 0) {clear_row2();Lcd
      +                          _Print_String("IMMEDIATE");}
 10181  007152  0101               	movlb	1	; () banked
 10182  007154  5110               	movf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10183  007156  A4D8               	btfss	status,2,c
 10184  007158  D009               	goto	l3770
 10185                           
 10186                           ; BSR set to: 1
 10187  00715A  EC3E  F04A         	call	_clear_row2	;wreg free
 10188  00715E  0EA9               	movlw	low STR_66
 10189  007160  0100               	movlb	0	; () banked
 10190  007162  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10191  007164  0EFF               	movlw	high STR_66
 10192  007166  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10193  007168  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10194  00716C                     l3770:
 10195                           
 10196                           ;menu.c: 1449: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 1) {clear_row2();Lcd
      +                          _Print_String("FINISH LAST");}
 10197  00716C  0101               	movlb	1	; () banked
 10198  00716E  0510               	decf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10199  007170  A4D8               	btfss	status,2,c
 10200  007172  D009               	goto	l3771
 10201                           
 10202                           ; BSR set to: 1
 10203  007174  EC3E  F04A         	call	_clear_row2	;wreg free
 10204  007178  0E7C               	movlw	low STR_67
 10205  00717A  0100               	movlb	0	; () banked
 10206  00717C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10207  00717E  0EFF               	movlw	high STR_67
 10208  007180  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10209  007182  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10210  007186                     l3771:
 10211                           
 10212                           ;menu.c: 1450: }
 10213                           ;menu.c: 1451: lcd_print_once = 1;
 10214  007186  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10215  007188                     l3767:
 10216  007188  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10217  00718A  D7C1               	goto	l3768
 10218                           
 10219                           ;menu.c: 1452: }
 10220                           ;menu.c: 1454: LAST_NOTE_MODE_KEY_RELEASE = arpeggiatorLastNoteModeKeyReleaseMenu.select
      +                          or;
 10221  00718C  0101               	movlb	1	; () banked
 10222  00718E  A110               	btfss	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),0,b
 10223  007190  D002               	goto	u29750
 10224  007192  8234               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10225  007194  0012               	return	
 10226  007196                     u29750:
 10227  007196  9234               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10228  007198  0012               	return		;funcret
 10229  00719A                     __end_of_Function_H_9_2:
 10230                           	opt stack 0
 10231                           tblptru	equ	0xFF8
 10232                           tblptrh	equ	0xFF7
 10233                           tblptrl	equ	0xFF6
 10234                           tablat	equ	0xFF5
 10235                           intcon	equ	0xFF2
 10236                           intcon2	equ	0xFF1
 10237                           postinc0	equ	0xFEE
 10238                           wreg	equ	0xFE8
 10239                           postdec1	equ	0xFE5
 10240                           fsr1l	equ	0xFE1
 10241                           status	equ	0xFD8
 10242                           
 10243 ;; *************** function _Function_H_9_1 *****************
 10244 ;; Defined at:
 10245 ;;		line 1412 in file "menu.c"
 10246 ;; Parameters:    Size  Location     Type
 10247 ;;		None
 10248 ;; Auto vars:     Size  Location     Type
 10249 ;;		None
 10250 ;; Return value:  Size  Location     Type
 10251 ;;                  1    wreg      void 
 10252 ;; Registers used:
 10253 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10254 ;; Tracked objects:
 10255 ;;		On entry : 0/0
 10256 ;;		On exit  : 0/0
 10257 ;;		Unchanged: 0/0
 10258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10262 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10263 ;;Total ram usage:        1 bytes
 10264 ;; Hardware stack levels used:    1
 10265 ;; Hardware stack levels required when called:    9
 10266 ;; This function calls:
 10267 ;;		_Lcd_Print_String
 10268 ;;		___lbmod
 10269 ;;		___wmul
 10270 ;;		_clear_row1
 10271 ;;		_clear_row2
 10272 ;;		_processEncoderBuxton
 10273 ;; This function is called by:
 10274 ;;		_Function_H_9
 10275 ;; This function uses a non-reentrant model
 10276 ;;
 10277                           
 10278                           	psect	text12
 10279  00719A                     __ptext12:
 10280                           	opt stack 0
 10281  00719A                     _Function_H_9_1:
 10282                           	opt stack 18
 10283                           
 10284                           ;menu.c: 1414: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU;
 10285                           
 10286                           ;incstack = 0
 10287  00719A  0E27               	movlw	39
 10288  00719C  0100               	movlb	0	; () banked
 10289  00719E  6FF9               	movwf	_which_screen& (0+255),b
 10290                           
 10291                           ; BSR set to: 0
 10292                           ;menu.c: 1415: lcd_print_once = 0;
 10293  0071A0  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10294                           
 10295                           ; BSR set to: 0
 10296                           ;menu.c: 1416: encoder_click = 0;
 10297  0071A2  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10298                           
 10299                           ;menu.c: 1418: arpeggiatorLastNoteModeKeyPressMenu.selector = LAST_NOTE_MODE_KEY_PRESS;
 10300  0071A4  0E00               	movlw	0
 10301  0071A6  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10302  0071A8  0E01               	movlw	1
 10303  0071AA  0101               	movlb	1	; () banked
 10304  0071AC  6F13               	movwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),b
 10305                           
 10306                           ;menu.c: 1420: while(encoder_click == 0) {
 10307  0071AE  D03D               	goto	l3758
 10308  0071B0                     
 10309                           ;menu.c: 1421: processEncoderBuxton();
 10310                           
 10311                           ; BSR set to: 1
 10312  0071B0  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10313                           
 10314                           ;menu.c: 1422: if (lcd_print_once == 0) {
 10315  0071B4  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10316  0071B6  D038               	goto	l3762
 10317                           
 10318                           ;menu.c: 1423: clear_row1();
 10319  0071B8  EC52  F04A         	call	_clear_row1	;wreg free
 10320                           
 10321                           ;menu.c: 1424: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10322  0071BC  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
 10323  0071C0  0100               	movlb	0	; () banked
 10324  0071C2  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10325  0071C4  ECBD  F049         	call	___lbmod
 10326  0071C8  0100               	movlb	0	; () banked
 10327  0071CA  6F70               	movwf	??_Function_H_9_1& (0+255),b
 10328  0071CC  5170               	movf	??_Function_H_9_1& (0+255),w,b
 10329  0071CE  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10330  0071D0  6F64               	movwf	___wmul@multiplier& (0+255),b
 10331  0071D2  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 10332  0071D4  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10333  0071D6  0E00               	movlw	0
 10334  0071D8  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10335  0071DA  0E11               	movlw	17
 10336  0071DC  6F66               	movwf	___wmul@multiplicand& (0+255),b
 10337  0071DE  EC66  F04A         	call	___wmul	;wreg free
 10338  0071E2  0E9E               	movlw	low _LCD_STRINGS
 10339  0071E4  0100               	movlb	0	; () banked
 10340  0071E6  2564               	addwf	?___wmul& (0+255),w,b
 10341  0071E8  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10342  0071EA  0EF3               	movlw	high _LCD_STRINGS
 10343  0071EC  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 10344  0071EE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10345  0071F0  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10346                           
 10347                           ;menu.c: 1425: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 0) {clear_row2();Lcd_P
      +                          rint_String("IMMEDIATE");}
 10348  0071F4  0101               	movlb	1	; () banked
 10349  0071F6  5113               	movf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10350  0071F8  A4D8               	btfss	status,2,c
 10351  0071FA  D009               	goto	l3761
 10352                           
 10353                           ; BSR set to: 1
 10354  0071FC  EC3E  F04A         	call	_clear_row2	;wreg free
 10355  007200  0EA9               	movlw	low STR_66
 10356  007202  0100               	movlb	0	; () banked
 10357  007204  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10358  007206  0EFF               	movlw	high STR_66
 10359  007208  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10360  00720A  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10361  00720E                     l3761:
 10362                           
 10363                           ;menu.c: 1426: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 1) {clear_row2();Lcd_P
      +                          rint_String("FINISH LAST");}
 10364  00720E  0101               	movlb	1	; () banked
 10365  007210  0513               	decf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10366  007212  A4D8               	btfss	status,2,c
 10367  007214  D009               	goto	l3762
 10368                           
 10369                           ; BSR set to: 1
 10370  007216  EC3E  F04A         	call	_clear_row2	;wreg free
 10371  00721A  0E7C               	movlw	low STR_67
 10372  00721C  0100               	movlb	0	; () banked
 10373  00721E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10374  007220  0EFF               	movlw	high STR_67
 10375  007222  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10376  007224  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10377  007228                     l3762:
 10378                           
 10379                           ;menu.c: 1427: }
 10380                           ;menu.c: 1428: lcd_print_once = 1;
 10381  007228  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10382  00722A                     l3758:
 10383  00722A  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10384  00722C  D7C1               	goto	l3759
 10385                           
 10386                           ;menu.c: 1429: }
 10387                           ;menu.c: 1431: LAST_NOTE_MODE_KEY_PRESS = arpeggiatorLastNoteModeKeyPressMenu.selector;
 10388  00722E  0101               	movlb	1	; () banked
 10389  007230  A113               	btfss	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),0,b
 10390  007232  D002               	goto	u29690
 10391  007234  8434               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10392  007236  0012               	return	
 10393  007238                     u29690:
 10394  007238  9434               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10395  00723A  0012               	return		;funcret
 10396  00723C                     __end_of_Function_H_9_1:
 10397                           	opt stack 0
 10398                           tblptru	equ	0xFF8
 10399                           tblptrh	equ	0xFF7
 10400                           tblptrl	equ	0xFF6
 10401                           tablat	equ	0xFF5
 10402                           intcon	equ	0xFF2
 10403                           intcon2	equ	0xFF1
 10404                           postinc0	equ	0xFEE
 10405                           wreg	equ	0xFE8
 10406                           postdec1	equ	0xFE5
 10407                           fsr1l	equ	0xFE1
 10408                           status	equ	0xFD8
 10409                           
 10410 ;; *************** function _Function_H_8 *****************
 10411 ;; Defined at:
 10412 ;;		line 1390 in file "menu.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;		None
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;		None
 10417 ;; Return value:  Size  Location     Type
 10418 ;;                  1    wreg      void 
 10419 ;; Registers used:
 10420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;Total ram usage:        1 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; Hardware stack levels required when called:   10
 10433 ;; This function calls:
 10434 ;;		_Function_H_8_1
 10435 ;;		_Function_H_8_2
 10436 ;;		_Lcd_Print_String
 10437 ;;		___lbmod
 10438 ;;		___wmul
 10439 ;;		_clear_row2
 10440 ;;		_processEncoderBuxton
 10441 ;; This function is called by:
 10442 ;;		_Function_H
 10443 ;; This function uses a non-reentrant model
 10444 ;;
 10445                           
 10446                           	psect	text13
 10447  008442                     __ptext13:
 10448                           	opt stack 0
 10449  008442                     _Function_H_8:
 10450                           	opt stack 18
 10451                           
 10452                           ;menu.c: 1392: which_screen = ARPEGGIATOR_RANDOMIZE_SKIP_MENU;
 10453                           
 10454                           ;incstack = 0
 10455  008442  0E23               	movlw	35
 10456  008444  0100               	movlb	0	; () banked
 10457  008446  6FF9               	movwf	_which_screen& (0+255),b
 10458                           
 10459                           ; BSR set to: 0
 10460                           ;menu.c: 1393: lcd_print_once = 0;
 10461  008448  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10462                           
 10463                           ; BSR set to: 0
 10464                           ;menu.c: 1394: encoder_click = 0;
 10465  00844A  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10466                           
 10467                           ;menu.c: 1396: while(encoder_click == 0) {
 10468  00844C  D025               	goto	l3749
 10469  00844E                     
 10470                           ;menu.c: 1397: processEncoderBuxton();
 10471                           
 10472                           ; BSR set to: 0
 10473  00844E  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10474                           
 10475                           ;menu.c: 1398: if (lcd_print_once == 0) {
 10476  008452  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10477  008454  D020               	goto	l3751
 10478                           
 10479                           ;menu.c: 1399: clear_row2();
 10480  008456  EC3E  F04A         	call	_clear_row2	;wreg free
 10481                           
 10482                           ;menu.c: 1400: Lcd_Print_String(LCD_STRINGS[(arpeggiatorRandomizeSkipMenu.selector % arp
      +                          eggiatorRandomizeSkipMenu.number) + arpeggiatorRandomizeSkipMenu.address]);
 10483  00845A  C11A  F060         	movff	_arpeggiatorRandomizeSkipMenu,___lbmod@divisor
 10484  00845E  0101               	movlb	1	; () banked
 10485  008460  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10486  008462  ECBD  F049         	call	___lbmod
 10487  008466  0100               	movlb	0	; () banked
 10488  008468  6F70               	movwf	??_Function_H_8& (0+255),b
 10489  00846A  5170               	movf	??_Function_H_8& (0+255),w,b
 10490  00846C  0101               	movlb	1	; () banked
 10491  00846E  251B               	addwf	(_arpeggiatorRandomizeSkipMenu+1)& (0+255),w,b
 10492  008470  0100               	movlb	0	; () banked
 10493  008472  6F64               	movwf	___wmul@multiplier& (0+255),b
 10494  008474  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 10495  008476  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10496  008478  0E00               	movlw	0
 10497  00847A  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10498  00847C  0E11               	movlw	17
 10499  00847E  6F66               	movwf	___wmul@multiplicand& (0+255),b
 10500  008480  EC66  F04A         	call	___wmul	;wreg free
 10501  008484  0E9E               	movlw	low _LCD_STRINGS
 10502  008486  0100               	movlb	0	; () banked
 10503  008488  2564               	addwf	?___wmul& (0+255),w,b
 10504  00848A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10505  00848C  0EF3               	movlw	high _LCD_STRINGS
 10506  00848E  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 10507  008490  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10508  008492  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10509  008496                     l3751:
 10510                           
 10511                           ;menu.c: 1401: }
 10512                           ;menu.c: 1402: lcd_print_once = 1;
 10513  008496  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10514  008498                     l3749:
 10515  008498  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10516  00849A  D7D9               	goto	l3750
 10517                           
 10518                           ;menu.c: 1403: }
 10519                           ;menu.c: 1406: if(arpeggiatorRandomizeSkipMenu.selector == 0) {Function_H_8_1();}
 10520  00849C  0101               	movlb	1	; () banked
 10521  00849E  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10522  0084A0  B4D8               	btfsc	status,2,c
 10523                           
 10524                           ; BSR set to: 1
 10525  0084A2  ECA9  F041         	call	_Function_H_8_1	;wreg free
 10526                           
 10527                           ;menu.c: 1407: if(arpeggiatorRandomizeSkipMenu.selector == 1) {Function_H_8_2();}
 10528  0084A6  0101               	movlb	1	; () banked
 10529  0084A8  051C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10530  0084AA  A4D8               	btfss	status,2,c
 10531  0084AC  0012               	return	
 10532                           
 10533                           ; BSR set to: 1
 10534  0084AE  EC10  F044         	call	_Function_H_8_2	;wreg free
 10535  0084B2  0012               	return	
 10536  0084B4                     __end_of_Function_H_8:
 10537                           	opt stack 0
 10538                           tblptru	equ	0xFF8
 10539                           tblptrh	equ	0xFF7
 10540                           tblptrl	equ	0xFF6
 10541                           tablat	equ	0xFF5
 10542                           intcon	equ	0xFF2
 10543                           intcon2	equ	0xFF1
 10544                           postinc0	equ	0xFEE
 10545                           wreg	equ	0xFE8
 10546                           postdec1	equ	0xFE5
 10547                           fsr1l	equ	0xFE1
 10548                           status	equ	0xFD8
 10549                           
 10550 ;; *************** function _Function_H_8_2 *****************
 10551 ;; Defined at:
 10552 ;;		line 1368 in file "menu.c"
 10553 ;; Parameters:    Size  Location     Type
 10554 ;;		None
 10555 ;; Auto vars:     Size  Location     Type
 10556 ;;		None
 10557 ;; Return value:  Size  Location     Type
 10558 ;;                  1    wreg      void 
 10559 ;; Registers used:
 10560 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10561 ;; Tracked objects:
 10562 ;;		On entry : 0/0
 10563 ;;		On exit  : 0/0
 10564 ;;		Unchanged: 0/0
 10565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10570 ;;Total ram usage:        0 bytes
 10571 ;; Hardware stack levels used:    1
 10572 ;; Hardware stack levels required when called:    9
 10573 ;; This function calls:
 10574 ;;		_Lcd_Print_String
 10575 ;;		_clear_row2
 10576 ;;		_processEncoderBuxton
 10577 ;; This function is called by:
 10578 ;;		_Function_H_8
 10579 ;; This function uses a non-reentrant model
 10580 ;;
 10581                           
 10582                           	psect	text14
 10583  008820                     __ptext14:
 10584                           	opt stack 0
 10585  008820                     _Function_H_8_2:
 10586                           	opt stack 18
 10587                           
 10588                           ;menu.c: 1370: which_screen = ARPEGGIATOR_SKIP_FIRST_LAST_MENU;
 10589                           
 10590                           ;incstack = 0
 10591  008820  0E25               	movlw	37
 10592  008822  0100               	movlb	0	; () banked
 10593  008824  6FF9               	movwf	_which_screen& (0+255),b
 10594                           
 10595                           ; BSR set to: 0
 10596                           ;menu.c: 1371: lcd_print_once = 0;
 10597  008826  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10598                           
 10599                           ; BSR set to: 0
 10600                           ;menu.c: 1372: encoder_click = 0;
 10601  008828  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10602                           
 10603                           ;menu.c: 1374: arpeggiatorSkipFirstLastMenu.selector = skipFirstLast;
 10604  00882A  0E00               	movlw	0
 10605  00882C  B834               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10606  00882E  0E01               	movlw	1
 10607  008830  0101               	movlb	1	; () banked
 10608  008832  6F16               	movwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),b
 10609                           
 10610                           ;menu.c: 1376: while(encoder_click == 0) {
 10611  008834  D01F               	goto	l3740
 10612  008836                     
 10613                           ;menu.c: 1377: processEncoderBuxton();
 10614                           
 10615                           ; BSR set to: 1
 10616  008836  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10617                           
 10618                           ;menu.c: 1378: if (lcd_print_once == 0) {
 10619  00883A  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10620  00883C  D01A               	goto	l3744
 10621                           
 10622                           ;menu.c: 1379: if(arpeggiatorSkipFirstLastMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L OFF");}
 10623  00883E  0101               	movlb	1	; () banked
 10624  008840  5116               	movf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10625  008842  A4D8               	btfss	status,2,c
 10626  008844  D009               	goto	l3743
 10627                           
 10628                           ; BSR set to: 1
 10629  008846  EC3E  F04A         	call	_clear_row2	;wreg free
 10630  00884A  0E3F               	movlw	low STR_64
 10631  00884C  0100               	movlb	0	; () banked
 10632  00884E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10633  008850  0EFF               	movlw	high STR_64
 10634  008852  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10635  008854  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10636  008858                     l3743:
 10637                           
 10638                           ;menu.c: 1380: if(arpeggiatorSkipFirstLastMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L ON");}
 10639  008858  0101               	movlb	1	; () banked
 10640  00885A  0516               	decf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10641  00885C  A4D8               	btfss	status,2,c
 10642  00885E  D009               	goto	l3744
 10643                           
 10644                           ; BSR set to: 1
 10645  008860  EC3E  F04A         	call	_clear_row2	;wreg free
 10646  008864  0E70               	movlw	low STR_65
 10647  008866  0100               	movlb	0	; () banked
 10648  008868  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10649  00886A  0EFF               	movlw	high STR_65
 10650  00886C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10651  00886E  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10652  008872                     l3744:
 10653                           
 10654                           ;menu.c: 1381: }
 10655                           ;menu.c: 1382: lcd_print_once = 1;
 10656  008872  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10657  008874                     l3740:
 10658  008874  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10659  008876  D7DF               	goto	l3741
 10660                           
 10661                           ;menu.c: 1383: }
 10662                           ;menu.c: 1385: skipFirstLast = arpeggiatorSkipFirstLastMenu.selector;
 10663  008878  0101               	movlb	1	; () banked
 10664  00887A  A116               	btfss	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),0,b
 10665  00887C  D002               	goto	u29630
 10666  00887E  8834               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10667  008880  0012               	return	
 10668  008882                     u29630:
 10669  008882  9834               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10670  008884  0012               	return		;funcret
 10671  008886                     __end_of_Function_H_8_2:
 10672                           	opt stack 0
 10673                           tblptru	equ	0xFF8
 10674                           tblptrh	equ	0xFF7
 10675                           tblptrl	equ	0xFF6
 10676                           tablat	equ	0xFF5
 10677                           intcon	equ	0xFF2
 10678                           intcon2	equ	0xFF1
 10679                           postinc0	equ	0xFEE
 10680                           wreg	equ	0xFE8
 10681                           postdec1	equ	0xFE5
 10682                           fsr1l	equ	0xFE1
 10683                           status	equ	0xFD8
 10684                           
 10685 ;; *************** function _Function_H_8_1 *****************
 10686 ;; Defined at:
 10687 ;;		line 1342 in file "menu.c"
 10688 ;; Parameters:    Size  Location     Type
 10689 ;;		None
 10690 ;; Auto vars:     Size  Location     Type
 10691 ;;		None
 10692 ;; Return value:  Size  Location     Type
 10693 ;;                  1    wreg      void 
 10694 ;; Registers used:
 10695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10696 ;; Tracked objects:
 10697 ;;		On entry : 0/0
 10698 ;;		On exit  : 0/0
 10699 ;;		Unchanged: 0/0
 10700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;Total ram usage:        0 bytes
 10706 ;; Hardware stack levels used:    1
 10707 ;; Hardware stack levels required when called:    9
 10708 ;; This function calls:
 10709 ;;		_Lcd_Print_String
 10710 ;;		_clear_row1
 10711 ;;		_clear_row2
 10712 ;;		_processEncoderBuxton
 10713 ;; This function is called by:
 10714 ;;		_Function_H_8
 10715 ;; This function uses a non-reentrant model
 10716 ;;
 10717                           
 10718                           	psect	text15
 10719  008352                     __ptext15:
 10720                           	opt stack 0
 10721  008352                     _Function_H_8_1:
 10722                           	opt stack 18
 10723                           
 10724                           ;menu.c: 1344: which_screen = ARPEGGIATOR_RANDOMIZE_TYPE_MENU;
 10725                           
 10726                           ;incstack = 0
 10727  008352  0E24               	movlw	36
 10728  008354  0100               	movlb	0	; () banked
 10729  008356  6FF9               	movwf	_which_screen& (0+255),b
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;menu.c: 1345: lcd_print_once = 0;
 10733  008358  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;menu.c: 1346: encoder_click = 0;
 10737  00835A  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10738                           
 10739                           ;menu.c: 1348: arpeggiatorRandomizeTypeMenu.selector = AUTO_RANDOMIZE;
 10740  00835C  0E00               	movlw	0
 10741  00835E  BA34               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10742  008360  0E01               	movlw	1
 10743  008362  0101               	movlb	1	; () banked
 10744  008364  6F19               	movwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),b
 10745                           
 10746                           ;menu.c: 1350: while(encoder_click == 0) {
 10747  008366  D028               	goto	l3731
 10748  008368                     
 10749                           ;menu.c: 1351: processEncoderBuxton();
 10750                           
 10751                           ; BSR set to: 1
 10752  008368  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10753                           
 10754                           ;menu.c: 1352: if (lcd_print_once == 0) {
 10755  00836C  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10756  00836E  D023               	goto	l3735
 10757                           
 10758                           ;menu.c: 1353: clear_row1();
 10759  008370  EC52  F04A         	call	_clear_row1	;wreg free
 10760                           
 10761                           ;menu.c: 1354: Lcd_Print_String("Randomize Type:");
 10762  008374  0E1D               	movlw	low STR_61
 10763  008376  0100               	movlb	0	; () banked
 10764  008378  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10765  00837A  0EFE               	movlw	high STR_61
 10766  00837C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10767  00837E  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10768                           
 10769                           ;menu.c: 1357: if(arpeggiatorRandomizeTypeMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE AUTO");}
 10770  008382  0101               	movlb	1	; () banked
 10771  008384  5119               	movf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10772  008386  A4D8               	btfss	status,2,c
 10773  008388  D009               	goto	l3734
 10774                           
 10775                           ; BSR set to: 1
 10776  00838A  EC3E  F04A         	call	_clear_row2	;wreg free
 10777  00838E  0EA7               	movlw	low STR_62
 10778  008390  0100               	movlb	0	; () banked
 10779  008392  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10780  008394  0EFE               	movlw	high STR_62
 10781  008396  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10782  008398  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10783  00839C                     l3734:
 10784                           
 10785                           ;menu.c: 1358: if(arpeggiatorRandomizeTypeMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE ONCE");}
 10786  00839C  0101               	movlb	1	; () banked
 10787  00839E  0519               	decf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10788  0083A0  A4D8               	btfss	status,2,c
 10789  0083A2  D009               	goto	l3735
 10790                           
 10791                           ; BSR set to: 1
 10792  0083A4  EC3E  F04A         	call	_clear_row2	;wreg free
 10793  0083A8  0E7A               	movlw	low STR_63
 10794  0083AA  0100               	movlb	0	; () banked
 10795  0083AC  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10796  0083AE  0EFE               	movlw	high STR_63
 10797  0083B0  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10798  0083B2  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10799  0083B6                     l3735:
 10800                           
 10801                           ;menu.c: 1359: }
 10802                           ;menu.c: 1360: lcd_print_once = 1;
 10803  0083B6  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10804  0083B8                     l3731:
 10805  0083B8  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10806  0083BA  D7D6               	goto	l3732
 10807                           
 10808                           ;menu.c: 1361: }
 10809                           ;menu.c: 1363: AUTO_RANDOMIZE = arpeggiatorRandomizeTypeMenu.selector;
 10810  0083BC  0101               	movlb	1	; () banked
 10811  0083BE  A119               	btfss	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),0,b
 10812  0083C0  D002               	goto	u29570
 10813  0083C2  8A34               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10814  0083C4  0012               	return	
 10815  0083C6                     u29570:
 10816  0083C6  9A34               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10817  0083C8  0012               	return		;funcret
 10818  0083CA                     __end_of_Function_H_8_1:
 10819                           	opt stack 0
 10820                           tblptru	equ	0xFF8
 10821                           tblptrh	equ	0xFF7
 10822                           tblptrl	equ	0xFF6
 10823                           tablat	equ	0xFF5
 10824                           intcon	equ	0xFF2
 10825                           intcon2	equ	0xFF1
 10826                           postinc0	equ	0xFEE
 10827                           wreg	equ	0xFE8
 10828                           postdec1	equ	0xFE5
 10829                           fsr1l	equ	0xFE1
 10830                           status	equ	0xFD8
 10831                           
 10832 ;; *************** function _Function_H_7 *****************
 10833 ;; Defined at:
 10834 ;;		line 1309 in file "menu.c"
 10835 ;; Parameters:    Size  Location     Type
 10836 ;;		None
 10837 ;; Auto vars:     Size  Location     Type
 10838 ;;		None
 10839 ;; Return value:  Size  Location     Type
 10840 ;;                  1    wreg      void 
 10841 ;; Registers used:
 10842 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10843 ;; Tracked objects:
 10844 ;;		On entry : 0/0
 10845 ;;		On exit  : 0/0
 10846 ;;		Unchanged: 0/0
 10847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;Total ram usage:        0 bytes
 10853 ;; Hardware stack levels used:    1
 10854 ;; Hardware stack levels required when called:    9
 10855 ;; This function calls:
 10856 ;;		_Lcd_Print_String
 10857 ;;		_clear_row1
 10858 ;;		_clear_row2
 10859 ;;		_processEncoderBuxton
 10860 ;;		_strcpy
 10861 ;; This function is called by:
 10862 ;;		_Function_H
 10863 ;; This function uses a non-reentrant model
 10864 ;;
 10865                           
 10866                           	psect	text16
 10867  006CFE                     __ptext16:
 10868                           	opt stack 0
 10869  006CFE                     _Function_H_7:
 10870                           	opt stack 19
 10871                           
 10872                           ;menu.c: 1311: which_screen = ARPEGGIATOR_UN_LATCH_MODE_MENU;
 10873                           
 10874                           ;incstack = 0
 10875  006CFE  0E22               	movlw	34
 10876  006D00  0100               	movlb	0	; () banked
 10877  006D02  6FF9               	movwf	_which_screen& (0+255),b
 10878                           
 10879                           ; BSR set to: 0
 10880                           ;menu.c: 1312: lcd_print_once = 0;
 10881  006D04  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10882                           
 10883                           ; BSR set to: 0
 10884                           ;menu.c: 1313: encoder_click = 0;
 10885  006D06  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10886                           
 10887                           ;menu.c: 1315: arpeggiatorUnLatchModeMenu.selector = UN_LATCH_MODE;
 10888  006D08  0E00               	movlw	0
 10889  006D0A  B035               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10890  006D0C  0E01               	movlw	1
 10891  006D0E  0101               	movlb	1	; () banked
 10892  006D10  6F1F               	movwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),b
 10893                           
 10894                           ;menu.c: 1317: while(encoder_click == 0) {
 10895  006D12  D044               	goto	l3722
 10896  006D14                     
 10897                           ;menu.c: 1318: processEncoderBuxton();
 10898                           
 10899                           ; BSR set to: 1
 10900  006D14  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10901                           
 10902                           ;menu.c: 1319: if (lcd_print_once == 0) {
 10903  006D18  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10904  006D1A  D03F               	goto	l3726
 10905                           
 10906                           ;menu.c: 1320: clear_row1();
 10907  006D1C  EC52  F04A         	call	_clear_row1	;wreg free
 10908                           
 10909                           ;menu.c: 1321: Lcd_Print_String("Un-latch Mode:");
 10910  006D20  0E5C               	movlw	low STR_56
 10911  006D22  0100               	movlb	0	; () banked
 10912  006D24  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10913  006D26  0EFE               	movlw	high STR_56
 10914  006D28  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10915  006D2A  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10916                           
 10917                           ;menu.c: 1322: clear_row2();
 10918  006D2E  EC3E  F04A         	call	_clear_row2	;wreg free
 10919                           
 10920                           ;menu.c: 1324: if(arpeggiatorUnLatchModeMenu.selector == 0) {
 10921  006D32  0101               	movlb	1	; () banked
 10922  006D34  511F               	movf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10923  006D36  A4D8               	btfss	status,2,c
 10924  006D38  D016               	goto	l3725
 10925                           
 10926                           ; BSR set to: 1
 10927                           ;menu.c: 1325: clear_row2();Lcd_Print_String("UNLATCH ALL");
 10928  006D3A  EC3E  F04A         	call	_clear_row2	;wreg free
 10929  006D3E  0E64               	movlw	low STR_57
 10930  006D40  0100               	movlb	0	; () banked
 10931  006D42  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10932  006D44  0EFF               	movlw	high STR_57
 10933  006D46  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10934  006D48  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10935                           
 10936                           ;menu.c: 1326: DISPLAY_MODE = 1;
 10937  006D4C  0E01               	movlw	1
 10938  006D4E  6E5A               	movwf	_DISPLAY_MODE,c
 10939                           
 10940                           ;menu.c: 1327: strcpy(string_to_display, " ALL");
 10941  006D50  0EEE               	movlw	low _string_to_display
 10942  006D52  0100               	movlb	0	; () banked
 10943  006D54  6F60               	movwf	strcpy@to& (0+255),b
 10944  006D56  0E01               	movlw	high _string_to_display
 10945  006D58  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10946  006D5A  0E6B               	movlw	low (STR_57+7)
 10947  006D5C  6F62               	movwf	strcpy@from& (0+255),b
 10948  006D5E  0EFF               	movlw	high (STR_57+7)
 10949  006D60  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10950  006D62  EC5B  F049         	call	_strcpy	;wreg free
 10951  006D66                     l3725:
 10952                           
 10953                           ;menu.c: 1328: }
 10954                           ;menu.c: 1329: if(arpeggiatorUnLatchModeMenu.selector == 1) {
 10955  006D66  0101               	movlb	1	; () banked
 10956  006D68  051F               	decf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10957  006D6A  A4D8               	btfss	status,2,c
 10958  006D6C  D016               	goto	l3726
 10959                           
 10960                           ; BSR set to: 1
 10961                           ;menu.c: 1330: clear_row2();Lcd_Print_String("ONE AT A TIME");
 10962  006D6E  EC3E  F04A         	call	_clear_row2	;wreg free
 10963  006D72  0EFC               	movlw	low STR_59
 10964  006D74  0100               	movlb	0	; () banked
 10965  006D76  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10966  006D78  0EFE               	movlw	high STR_59
 10967  006D7A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10968  006D7C  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 10969                           
 10970                           ;menu.c: 1331: DISPLAY_MODE = 1;
 10971  006D80  0E01               	movlw	1
 10972  006D82  6E5A               	movwf	_DISPLAY_MODE,c
 10973                           
 10974                           ;menu.c: 1332: strcpy(string_to_display, " OnE");
 10975  006D84  0EEE               	movlw	low _string_to_display
 10976  006D86  0100               	movlb	0	; () banked
 10977  006D88  6F60               	movwf	strcpy@to& (0+255),b
 10978  006D8A  0E01               	movlw	high _string_to_display
 10979  006D8C  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10980  006D8E  0EC8               	movlw	low STR_60
 10981  006D90  6F62               	movwf	strcpy@from& (0+255),b
 10982  006D92  0EFF               	movlw	high STR_60
 10983  006D94  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10984  006D96  EC5B  F049         	call	_strcpy	;wreg free
 10985  006D9A                     l3726:
 10986                           
 10987                           ;menu.c: 1333: }
 10988                           ;menu.c: 1334: }
 10989                           ;menu.c: 1335: lcd_print_once = 1;
 10990  006D9A  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10991  006D9C                     l3722:
 10992  006D9C  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10993  006D9E  D7BA               	goto	l3723
 10994                           
 10995                           ;menu.c: 1336: }
 10996                           ;menu.c: 1338: UN_LATCH_MODE = arpeggiatorUnLatchModeMenu.selector;
 10997  006DA0  0101               	movlb	1	; () banked
 10998  006DA2  A11F               	btfss	(_arpeggiatorUnLatchModeMenu+2)& (0+255),0,b
 10999  006DA4  D002               	goto	u33900
 11000  006DA6  8035               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11001  006DA8  0012               	return	
 11002  006DAA                     u33900:
 11003  006DAA  9035               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11004  006DAC  0012               	return		;funcret
 11005  006DAE                     __end_of_Function_H_7:
 11006                           	opt stack 0
 11007                           tblptru	equ	0xFF8
 11008                           tblptrh	equ	0xFF7
 11009                           tblptrl	equ	0xFF6
 11010                           tablat	equ	0xFF5
 11011                           intcon	equ	0xFF2
 11012                           intcon2	equ	0xFF1
 11013                           postinc0	equ	0xFEE
 11014                           wreg	equ	0xFE8
 11015                           postdec1	equ	0xFE5
 11016                           fsr1l	equ	0xFE1
 11017                           status	equ	0xFD8
 11018                           
 11019 ;; *************** function _Function_H_6 *****************
 11020 ;; Defined at:
 11021 ;;		line 1288 in file "menu.c"
 11022 ;; Parameters:    Size  Location     Type
 11023 ;;		None
 11024 ;; Auto vars:     Size  Location     Type
 11025 ;;		None
 11026 ;; Return value:  Size  Location     Type
 11027 ;;                  1    wreg      void 
 11028 ;; Registers used:
 11029 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11030 ;; Tracked objects:
 11031 ;;		On entry : 0/0
 11032 ;;		On exit  : 0/0
 11033 ;;		Unchanged: 0/0
 11034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11038 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;Total ram usage:        1 bytes
 11040 ;; Hardware stack levels used:    1
 11041 ;; Hardware stack levels required when called:   14
 11042 ;; This function calls:
 11043 ;;		_Function_H_6_1
 11044 ;;		_Function_H_6_2
 11045 ;;		_Lcd_Print_String
 11046 ;;		___lbmod
 11047 ;;		___wmul
 11048 ;;		_clear_row2
 11049 ;;		_processEncoderBuxton
 11050 ;; This function is called by:
 11051 ;;		_Function_H
 11052 ;; This function uses a non-reentrant model
 11053 ;;
 11054                           
 11055                           	psect	text17
 11056  0084B4                     __ptext17:
 11057                           	opt stack 0
 11058  0084B4                     _Function_H_6:
 11059                           	opt stack 14
 11060                           
 11061                           ;menu.c: 1290: which_screen = ARPEGGIATOR_LATCH_MENU;
 11062                           
 11063                           ;incstack = 0
 11064  0084B4  0E1F               	movlw	31
 11065  0084B6  0100               	movlb	0	; () banked
 11066  0084B8  6FF9               	movwf	_which_screen& (0+255),b
 11067                           
 11068                           ; BSR set to: 0
 11069                           ;menu.c: 1291: lcd_print_once = 0;
 11070  0084BA  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11071                           
 11072                           ; BSR set to: 0
 11073                           ;menu.c: 1292: encoder_click = 0;
 11074  0084BC  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11075                           
 11076                           ;menu.c: 1294: while(encoder_click == 0) {
 11077  0084BE  D025               	goto	l3713
 11078  0084C0                     
 11079                           ;menu.c: 1295: processEncoderBuxton();
 11080                           
 11081                           ; BSR set to: 0
 11082  0084C0  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11083                           
 11084                           ;menu.c: 1296: if (lcd_print_once == 0) {
 11085  0084C4  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11086  0084C6  D020               	goto	l3715
 11087                           
 11088                           ;menu.c: 1297: clear_row2();
 11089  0084C8  EC3E  F04A         	call	_clear_row2	;wreg free
 11090                           
 11091                           ;menu.c: 1298: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLatchMenu.selector % arpeggiator
      +                          LatchMenu.number) + arpeggiatorLatchMenu.address]);
 11092  0084CC  C126  F060         	movff	_arpeggiatorLatchMenu,___lbmod@divisor
 11093  0084D0  0101               	movlb	1	; () banked
 11094  0084D2  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 11095  0084D4  ECBD  F049         	call	___lbmod
 11096  0084D8  0100               	movlb	0	; () banked
 11097  0084DA  6F8C               	movwf	??_Function_H_6& (0+255),b
 11098  0084DC  518C               	movf	??_Function_H_6& (0+255),w,b
 11099  0084DE  0101               	movlb	1	; () banked
 11100  0084E0  2527               	addwf	(_arpeggiatorLatchMenu+1)& (0+255),w,b
 11101  0084E2  0100               	movlb	0	; () banked
 11102  0084E4  6F64               	movwf	___wmul@multiplier& (0+255),b
 11103  0084E6  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 11104  0084E8  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11105  0084EA  0E00               	movlw	0
 11106  0084EC  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11107  0084EE  0E11               	movlw	17
 11108  0084F0  6F66               	movwf	___wmul@multiplicand& (0+255),b
 11109  0084F2  EC66  F04A         	call	___wmul	;wreg free
 11110  0084F6  0E9E               	movlw	low _LCD_STRINGS
 11111  0084F8  0100               	movlb	0	; () banked
 11112  0084FA  2564               	addwf	?___wmul& (0+255),w,b
 11113  0084FC  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11114  0084FE  0EF3               	movlw	high _LCD_STRINGS
 11115  008500  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 11116  008502  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11117  008504  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 11118  008508                     l3715:
 11119                           
 11120                           ;menu.c: 1299: }
 11121                           ;menu.c: 1300: lcd_print_once = 1;
 11122  008508  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11123  00850A                     l3713:
 11124  00850A  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11125  00850C  D7D9               	goto	l3714
 11126                           
 11127                           ;menu.c: 1301: }
 11128                           ;menu.c: 1304: if(arpeggiatorLatchMenu.selector == 0) {Function_H_6_1();}
 11129  00850E  0101               	movlb	1	; () banked
 11130  008510  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 11131  008512  B4D8               	btfsc	status,2,c
 11132                           
 11133                           ; BSR set to: 1
 11134  008514  EC20  F03C         	call	_Function_H_6_1	;wreg free
 11135                           
 11136                           ;menu.c: 1305: if(arpeggiatorLatchMenu.selector == 1) {Function_H_6_2();}
 11137  008518  0101               	movlb	1	; () banked
 11138  00851A  0528               	decf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 11139  00851C  A4D8               	btfss	status,2,c
 11140  00851E  0012               	return	
 11141                           
 11142                           ; BSR set to: 1
 11143  008520  EC84  F037         	call	_Function_H_6_2	;wreg free
 11144  008524  0012               	return	
 11145  008526                     __end_of_Function_H_6:
 11146                           	opt stack 0
 11147                           tblptru	equ	0xFF8
 11148                           tblptrh	equ	0xFF7
 11149                           tblptrl	equ	0xFF6
 11150                           tablat	equ	0xFF5
 11151                           intcon	equ	0xFF2
 11152                           intcon2	equ	0xFF1
 11153                           postinc0	equ	0xFEE
 11154                           wreg	equ	0xFE8
 11155                           postdec1	equ	0xFE5
 11156                           fsr1l	equ	0xFE1
 11157                           status	equ	0xFD8
 11158                           
 11159 ;; *************** function _Function_H_6_2 *****************
 11160 ;; Defined at:
 11161 ;;		line 1257 in file "menu.c"
 11162 ;; Parameters:    Size  Location     Type
 11163 ;;		None
 11164 ;; Auto vars:     Size  Location     Type
 11165 ;;		None
 11166 ;; Return value:  Size  Location     Type
 11167 ;;                  1    wreg      void 
 11168 ;; Registers used:
 11169 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11170 ;; Tracked objects:
 11171 ;;		On entry : 0/0
 11172 ;;		On exit  : 0/0
 11173 ;;		Unchanged: 0/0
 11174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;Total ram usage:        0 bytes
 11180 ;; Hardware stack levels used:    1
 11181 ;; Hardware stack levels required when called:    9
 11182 ;; This function calls:
 11183 ;;		_Lcd_Print_String
 11184 ;;		_clear_row1
 11185 ;;		_clear_row2
 11186 ;;		_processEncoderBuxton
 11187 ;;		_strcpy
 11188 ;; This function is called by:
 11189 ;;		_Function_H_6
 11190 ;; This function uses a non-reentrant model
 11191 ;;
 11192                           
 11193                           	psect	text18
 11194  006F08                     __ptext18:
 11195                           	opt stack 0
 11196  006F08                     _Function_H_6_2:
 11197                           	opt stack 18
 11198                           
 11199                           ;menu.c: 1259: which_screen = ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU;
 11200                           
 11201                           ;incstack = 0
 11202  006F08  0E21               	movlw	33
 11203  006F0A  0100               	movlb	0	; () banked
 11204  006F0C  6FF9               	movwf	_which_screen& (0+255),b
 11205                           
 11206                           ; BSR set to: 0
 11207                           ;menu.c: 1260: lcd_print_once = 0;
 11208  006F0E  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11209                           
 11210                           ; BSR set to: 0
 11211                           ;menu.c: 1261: encoder_click = 0;
 11212  006F10  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11213                           
 11214                           ;menu.c: 1263: arpeggiatorAutoLatchOnOffMenu.selector = AUTO_LATCH;
 11215  006F12  0E00               	movlw	0
 11216  006F14  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11217  006F16  0E01               	movlw	1
 11218  006F18  0101               	movlb	1	; () banked
 11219  006F1A  6F22               	movwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),b
 11220                           
 11221                           ;menu.c: 1265: while(encoder_click == 0) {
 11222  006F1C  D042               	goto	l3704
 11223  006F1E                     
 11224                           ;menu.c: 1266: processEncoderBuxton();
 11225                           
 11226                           ; BSR set to: 1
 11227  006F1E  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11228                           
 11229                           ;menu.c: 1267: if (lcd_print_once == 0) {
 11230  006F22  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11231  006F24  D03D               	goto	l3708
 11232                           
 11233                           ;menu.c: 1268: clear_row1();Lcd_Print_String("AutoLatch ON/OFF");
 11234  006F26  EC52  F04A         	call	_clear_row1	;wreg free
 11235  006F2A  0EDB               	movlw	low STR_51
 11236  006F2C  0100               	movlb	0	; () banked
 11237  006F2E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11238  006F30  0EFD               	movlw	high STR_51
 11239  006F32  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11240  006F34  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 11241                           
 11242                           ;menu.c: 1269: if(arpeggiatorAutoLatchOnOffMenu.selector == 0) {
 11243  006F38  0101               	movlb	1	; () banked
 11244  006F3A  5122               	movf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11245  006F3C  A4D8               	btfss	status,2,c
 11246  006F3E  D016               	goto	l3707
 11247                           
 11248                           ; BSR set to: 1
 11249                           ;menu.c: 1270: clear_row2();Lcd_Print_String("Auto Latch OFF");
 11250  006F40  EC3E  F04A         	call	_clear_row2	;wreg free
 11251  006F44  0E89               	movlw	low STR_52
 11252  006F46  0100               	movlb	0	; () banked
 11253  006F48  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11254  006F4A  0EFE               	movlw	high STR_52
 11255  006F4C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11256  006F4E  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 11257                           
 11258                           ;menu.c: 1271: DISPLAY_MODE = 1;
 11259  006F52  0E01               	movlw	1
 11260  006F54  6E5A               	movwf	_DISPLAY_MODE,c
 11261                           
 11262                           ;menu.c: 1272: strcpy(string_to_display, " oFF");
 11263  006F56  0EEE               	movlw	low _string_to_display
 11264  006F58  0100               	movlb	0	; () banked
 11265  006F5A  6F60               	movwf	strcpy@to& (0+255),b
 11266  006F5C  0E01               	movlw	high _string_to_display
 11267  006F5E  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11268  006F60  0EDC               	movlw	low STR_5
 11269  006F62  6F62               	movwf	strcpy@from& (0+255),b
 11270  006F64  0EFF               	movlw	high STR_5
 11271  006F66  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11272  006F68  EC5B  F049         	call	_strcpy	;wreg free
 11273  006F6C                     l3707:
 11274                           
 11275                           ;menu.c: 1273: }
 11276                           ;menu.c: 1274: if(arpeggiatorAutoLatchOnOffMenu.selector == 1) {
 11277  006F6C  0101               	movlb	1	; () banked
 11278  006F6E  0522               	decf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11279  006F70  A4D8               	btfss	status,2,c
 11280  006F72  D016               	goto	l3708
 11281                           
 11282                           ; BSR set to: 1
 11283                           ;menu.c: 1275: clear_row2();Lcd_Print_String("Auto Latch ON");
 11284  006F74  EC3E  F04A         	call	_clear_row2	;wreg free
 11285  006F78  0E0A               	movlw	low STR_54
 11286  006F7A  0100               	movlb	0	; () banked
 11287  006F7C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11288  006F7E  0EFF               	movlw	high STR_54
 11289  006F80  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11290  006F82  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 11291                           
 11292                           ;menu.c: 1276: DISPLAY_MODE = 1;
 11293  006F86  0E01               	movlw	1
 11294  006F88  6E5A               	movwf	_DISPLAY_MODE,c
 11295                           
 11296                           ;menu.c: 1277: strcpy(string_to_display, "Auto");
 11297  006F8A  0EEE               	movlw	low _string_to_display
 11298  006F8C  0100               	movlb	0	; () banked
 11299  006F8E  6F60               	movwf	strcpy@to& (0+255),b
 11300  006F90  0E01               	movlw	high _string_to_display
 11301  006F92  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11302  006F94  0EF0               	movlw	low STR_4
 11303  006F96  6F62               	movwf	strcpy@from& (0+255),b
 11304  006F98  0EFF               	movlw	high STR_4
 11305  006F9A  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11306  006F9C  EC5B  F049         	call	_strcpy	;wreg free
 11307  006FA0                     l3708:
 11308                           
 11309                           ;menu.c: 1278: }
 11310                           ;menu.c: 1279: }
 11311                           ;menu.c: 1280: lcd_print_once = 1;
 11312  006FA0  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11313  006FA2                     l3704:
 11314  006FA2  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11315  006FA4  D7BC               	goto	l3705
 11316                           
 11317                           ;menu.c: 1281: }
 11318                           ;menu.c: 1283: AUTO_LATCH = arpeggiatorAutoLatchOnOffMenu.selector;
 11319  006FA6  0101               	movlb	1	; () banked
 11320  006FA8  A122               	btfss	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),0,b
 11321  006FAA  D002               	goto	u29510
 11322  006FAC  8E34               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11323  006FAE  0012               	return	
 11324  006FB0                     u29510:
 11325  006FB0  9E34               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11326  006FB2  0012               	return		;funcret
 11327  006FB4                     __end_of_Function_H_6_2:
 11328                           	opt stack 0
 11329                           tblptru	equ	0xFF8
 11330                           tblptrh	equ	0xFF7
 11331                           tblptrl	equ	0xFF6
 11332                           tablat	equ	0xFF5
 11333                           intcon	equ	0xFF2
 11334                           intcon2	equ	0xFF1
 11335                           postinc0	equ	0xFEE
 11336                           wreg	equ	0xFE8
 11337                           postdec1	equ	0xFE5
 11338                           fsr1l	equ	0xFE1
 11339                           status	equ	0xFD8
 11340                           
 11341 ;; *************** function _Function_H_6_1 *****************
 11342 ;; Defined at:
 11343 ;;		line 1171 in file "menu.c"
 11344 ;; Parameters:    Size  Location     Type
 11345 ;;		None
 11346 ;; Auto vars:     Size  Location     Type
 11347 ;;		None
 11348 ;; Return value:  Size  Location     Type
 11349 ;;                  1    wreg      void 
 11350 ;; Registers used:
 11351 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11352 ;; Tracked objects:
 11353 ;;		On entry : 0/0
 11354 ;;		On exit  : 0/0
 11355 ;;		Unchanged: 0/0
 11356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11361 ;;Total ram usage:        0 bytes
 11362 ;; Hardware stack levels used:    1
 11363 ;; Hardware stack levels required when called:   13
 11364 ;; This function calls:
 11365 ;;		_Lcd_Print_String
 11366 ;;		_clear_row1
 11367 ;;		_clear_row2
 11368 ;;		_doTheLatch
 11369 ;;		_doTheUnLatch
 11370 ;;		_processEncoderBuxton
 11371 ;; This function is called by:
 11372 ;;		_Function_H_6
 11373 ;; This function uses a non-reentrant model
 11374 ;;
 11375                           
 11376                           	psect	text19
 11377  007840                     __ptext19:
 11378                           	opt stack 0
 11379  007840                     _Function_H_6_1:
 11380                           	opt stack 14
 11381                           
 11382                           ;menu.c: 1173: which_screen = ARPEGGIATOR_LATCH_ON_OFF_MENU;
 11383                           
 11384                           ;incstack = 0
 11385  007840  0E20               	movlw	32
 11386  007842  0100               	movlb	0	; () banked
 11387  007844  6FF9               	movwf	_which_screen& (0+255),b
 11388                           
 11389                           ; BSR set to: 0
 11390                           ;menu.c: 1174: lcd_print_once = 0;
 11391  007846  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11392                           
 11393                           ; BSR set to: 0
 11394                           ;menu.c: 1175: encoder_click = 0;
 11395  007848  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11396                           
 11397                           ;menu.c: 1177: arpeggiatorLatchOnOffMenu.selector = LATCH;
 11398  00784A  0E00               	movlw	0
 11399  00784C  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11400  00784E  0E01               	movlw	1
 11401  007850  0101               	movlb	1	; () banked
 11402  007852  6F25               	movwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),b
 11403                           
 11404                           ;menu.c: 1179: while(encoder_click == 0) {
 11405  007854  D028               	goto	l3693
 11406  007856                     
 11407                           ;menu.c: 1180: processEncoderBuxton();
 11408                           
 11409                           ; BSR set to: 1
 11410  007856  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11411                           
 11412                           ;menu.c: 1181: if (lcd_print_once == 0) {
 11413  00785A  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11414  00785C  D023               	goto	l3697
 11415                           
 11416                           ;menu.c: 1182: clear_row1();Lcd_Print_String("Latch ON/OFF");
 11417  00785E  EC52  F04A         	call	_clear_row1	;wreg free
 11418  007862  0EDF               	movlw	low (STR_51+4)
 11419  007864  0100               	movlb	0	; () banked
 11420  007866  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11421  007868  0EFD               	movlw	high (STR_51+4)
 11422  00786A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11423  00786C  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 11424                           
 11425                           ;menu.c: 1183: if(arpeggiatorLatchOnOffMenu.selector == 0) {
 11426  007870  0101               	movlb	1	; () banked
 11427  007872  5125               	movf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11428  007874  A4D8               	btfss	status,2,c
 11429  007876  D009               	goto	l3696
 11430                           
 11431                           ; BSR set to: 1
 11432                           ;menu.c: 1184: clear_row2();
 11433  007878  EC3E  F04A         	call	_clear_row2	;wreg free
 11434                           
 11435                           ;menu.c: 1185: Lcd_Print_String("Latch OFF");
 11436  00787C  0E8E               	movlw	low (STR_52+5)
 11437  00787E  0100               	movlb	0	; () banked
 11438  007880  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11439  007882  0EFE               	movlw	high (STR_52+5)
 11440  007884  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11441  007886  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 11442  00788A                     l3696:
 11443                           
 11444                           ;menu.c: 1186: }
 11445                           ;menu.c: 1187: if(arpeggiatorLatchOnOffMenu.selector == 1) {
 11446  00788A  0101               	movlb	1	; () banked
 11447  00788C  0525               	decf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11448  00788E  A4D8               	btfss	status,2,c
 11449  007890  D009               	goto	l3697
 11450                           
 11451                           ; BSR set to: 1
 11452                           ;menu.c: 1188: clear_row2();
 11453  007892  EC3E  F04A         	call	_clear_row2	;wreg free
 11454                           
 11455                           ;menu.c: 1189: Lcd_Print_String("Latch ON");
 11456  007896  0E0F               	movlw	low (STR_54+5)
 11457  007898  0100               	movlb	0	; () banked
 11458  00789A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11459  00789C  0EFF               	movlw	high (STR_54+5)
 11460  00789E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11461  0078A0  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 11462  0078A4                     l3697:
 11463                           
 11464                           ;menu.c: 1190: }
 11465                           ;menu.c: 1191: }
 11466                           ;menu.c: 1192: lcd_print_once = 1;
 11467  0078A4  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11468  0078A6                     l3693:
 11469  0078A6  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11470  0078A8  D7D6               	goto	l3694
 11471                           
 11472                           ;menu.c: 1193: }
 11473                           ;menu.c: 1195: LATCH = arpeggiatorLatchOnOffMenu.selector;
 11474  0078AA  0101               	movlb	1	; () banked
 11475  0078AC  A125               	btfss	(_arpeggiatorLatchOnOffMenu+2)& (0+255),0,b
 11476  0078AE  D002               	goto	u29430
 11477  0078B0  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 11478  0078B2  D001               	goto	u29445
 11479  0078B4                     u29430:
 11480  0078B4  9235               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 11481  0078B6                     u29445:
 11482                           
 11483                           ;menu.c: 1197: if(LATCH == 1){
 11484  0078B6  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11485                           
 11486                           ;menu.c: 1204: doTheLatch();
 11487  0078B8  ECAE  F04A         	call	_doTheLatch	;wreg free
 11488                           
 11489                           ;menu.c: 1205: }
 11490                           ;menu.c: 1207: if(LATCH == 0){
 11491  0078BC  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11492  0078BE  0012               	return	
 11493                           
 11494                           ;menu.c: 1209: UN_LATCH_MODE = 0;
 11495  0078C0  9035               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11496                           
 11497                           ;menu.c: 1210: doTheUnLatch();
 11498  0078C2  EC3B  F028         	call	_doTheUnLatch	;wreg free
 11499  0078C6  0012               	return	
 11500  0078C8                     __end_of_Function_H_6_1:
 11501                           	opt stack 0
 11502                           tblptru	equ	0xFF8
 11503                           tblptrh	equ	0xFF7
 11504                           tblptrl	equ	0xFF6
 11505                           tablat	equ	0xFF5
 11506                           intcon	equ	0xFF2
 11507                           intcon2	equ	0xFF1
 11508                           postinc0	equ	0xFEE
 11509                           wreg	equ	0xFE8
 11510                           postdec1	equ	0xFE5
 11511                           fsr1l	equ	0xFE1
 11512                           status	equ	0xFD8
 11513                           
 11514 ;; *************** function _Function_H_5 *****************
 11515 ;; Defined at:
 11516 ;;		line 1138 in file "menu.c"
 11517 ;; Parameters:    Size  Location     Type
 11518 ;;		None
 11519 ;; Auto vars:     Size  Location     Type
 11520 ;;  i               1   17[BANK0 ] unsigned char 
 11521 ;; Return value:  Size  Location     Type
 11522 ;;                  1    wreg      void 
 11523 ;; Registers used:
 11524 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11525 ;; Tracked objects:
 11526 ;;		On entry : 0/0
 11527 ;;		On exit  : 0/0
 11528 ;;		Unchanged: 0/0
 11529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11533 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11534 ;;Total ram usage:        2 bytes
 11535 ;; Hardware stack levels used:    1
 11536 ;; Hardware stack levels required when called:    9
 11537 ;; This function calls:
 11538 ;;		_Lcd_Print_String
 11539 ;;		___lbmod
 11540 ;;		___wmul
 11541 ;;		_clear_row1
 11542 ;;		_clear_row2
 11543 ;;		_processEncoderBuxton
 11544 ;; This function is called by:
 11545 ;;		_Function_H
 11546 ;; This function uses a non-reentrant model
 11547 ;;
 11548                           
 11549                           	psect	text20
 11550  006DAE                     __ptext20:
 11551                           	opt stack 0
 11552  006DAE                     _Function_H_5:
 11553                           	opt stack 19
 11554                           
 11555                           ;menu.c: 1140: which_screen = ARPEGGIATOR_NOTE_LENGTH_MENU,
 11556                           ;menu.c: 1141: lcd_print_once = 0;
 11557                           
 11558                           ;incstack = 0
 11559  006DAE  0E1E               	movlw	30
 11560  006DB0  0100               	movlb	0	; () banked
 11561  006DB2  6FF9               	movwf	_which_screen& (0+255),b
 11562                           
 11563                           ; BSR set to: 0
 11564  006DB4  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11565                           
 11566                           ; BSR set to: 0
 11567                           ;menu.c: 1142: encoder_click = 0;
 11568  006DB6  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11569                           
 11570                           ;menu.c: 1145: for(unsigned char i = 0; i < 12; i++) {
 11571  006DB8  0E00               	movlw	0
 11572  006DBA  6F71               	movwf	Function_H_5@i& (0+255),b
 11573  006DBC                     l21435:
 11574                           
 11575                           ; BSR set to: 0
 11576  006DBC  0E0B               	movlw	11
 11577  006DBE  6571               	cpfsgt	Function_H_5@i& (0+255),b
 11578  006DC0  D001               	goto	l3683
 11579  006DC2  D03D               	goto	l3686
 11580  006DC4                     l3683:
 11581                           
 11582                           ; BSR set to: 0
 11583                           ;menu.c: 1146: if(NOTE_LENGTH_PULSES_ARRAY[i] == NOTE_LENGTH_PULSES) {
 11584                           
 11585                           ; BSR set to: 0
 11586  006DC4  5171               	movf	Function_H_5@i& (0+255),w,b
 11587  006DC6  0D01               	mullw	1
 11588  006DC8  0EDC               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11589  006DCA  24F3               	addwf	prodl,w,c
 11590  006DCC  6ED9               	movwf	fsr2l,c
 11591  006DCE  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11592  006DD0  20F4               	addwfc	prodh,w,c
 11593  006DD2  6EDA               	movwf	fsr2h,c
 11594  006DD4  51F7               	movf	_NOTE_LENGTH_PULSES& (0+255),w,b
 11595  006DD6  18DE               	xorwf	postinc2,w,c
 11596  006DD8  B4D8               	btfsc	status,2,c
 11597                           
 11598                           ; BSR set to: 0
 11599                           ;menu.c: 1148: arpeggiatorNoteLengthMenu.selector = i;
 11600  006DDA  C071  F12B         	movff	Function_H_5@i,_arpeggiatorNoteLengthMenu+2
 11601                           
 11602                           ; BSR set to: 0
 11603                           
 11604                           ; BSR set to: 0
 11605  006DDE  2B71               	incf	Function_H_5@i& (0+255),f,b
 11606  006DE0  D7ED               	goto	l21435
 11607  006DE2                     
 11608                           ;menu.c: 1155: processEncoderBuxton();
 11609                           
 11610                           ; BSR set to: 0
 11611  006DE2  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11612                           
 11613                           ;menu.c: 1156: if (lcd_print_once == 0) {
 11614  006DE6  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11615  006DE8  D029               	goto	l3688
 11616                           
 11617                           ;menu.c: 1157: clear_row1();
 11618  006DEA  EC52  F04A         	call	_clear_row1	;wreg free
 11619                           
 11620                           ;menu.c: 1158: Lcd_Print_String("Note Length:");
 11621  006DEE  0E32               	movlw	low STR_47
 11622  006DF0  0100               	movlb	0	; () banked
 11623  006DF2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11624  006DF4  0EFF               	movlw	high STR_47
 11625  006DF6  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11626  006DF8  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 11627                           
 11628                           ;menu.c: 1159: clear_row2();
 11629  006DFC  EC3E  F04A         	call	_clear_row2	;wreg free
 11630                           
 11631                           ;menu.c: 1160: Lcd_Print_String(LCD_STRINGS[(arpeggiatorNoteLengthMenu.selector % arpegg
      +                          iatorNoteLengthMenu.number) + arpeggiatorNoteLengthMenu.address]);
 11632  006E00  C129  F060         	movff	_arpeggiatorNoteLengthMenu,___lbmod@divisor
 11633  006E04  0101               	movlb	1	; () banked
 11634  006E06  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11635  006E08  ECBD  F049         	call	___lbmod
 11636  006E0C  0100               	movlb	0	; () banked
 11637  006E0E  6F70               	movwf	??_Function_H_5& (0+255),b
 11638  006E10  5170               	movf	??_Function_H_5& (0+255),w,b
 11639  006E12  0101               	movlb	1	; () banked
 11640  006E14  252A               	addwf	(_arpeggiatorNoteLengthMenu+1)& (0+255),w,b
 11641  006E16  0100               	movlb	0	; () banked
 11642  006E18  6F64               	movwf	___wmul@multiplier& (0+255),b
 11643  006E1A  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 11644  006E1C  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11645  006E1E  0E00               	movlw	0
 11646  006E20  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11647  006E22  0E11               	movlw	17
 11648  006E24  6F66               	movwf	___wmul@multiplicand& (0+255),b
 11649  006E26  EC66  F04A         	call	___wmul	;wreg free
 11650  006E2A  0E9E               	movlw	low _LCD_STRINGS
 11651  006E2C  0100               	movlb	0	; () banked
 11652  006E2E  2564               	addwf	?___wmul& (0+255),w,b
 11653  006E30  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11654  006E32  0EF3               	movlw	high _LCD_STRINGS
 11655  006E34  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 11656  006E36  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11657  006E38  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 11658  006E3C                     l3688:
 11659                           
 11660                           ;menu.c: 1161: }
 11661                           ;menu.c: 1162: lcd_print_once = 1;
 11662  006E3C  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11663  006E3E                     l3686:
 11664  006E3E  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11665  006E40  D7D0               	goto	l3687
 11666                           
 11667                           ;menu.c: 1163: }
 11668                           ;menu.c: 1166: NOTE_LENGTH_PULSES = NOTE_LENGTH_PULSES_ARRAY[arpeggiatorNoteLengthMenu.s
      +                          elector];
 11669  006E42  0101               	movlb	1	; () banked
 11670  006E44  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11671  006E46  0D01               	mullw	1
 11672  006E48  0EDC               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11673  006E4A  24F3               	addwf	prodl,w,c
 11674  006E4C  6ED9               	movwf	fsr2l,c
 11675  006E4E  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11676  006E50  20F4               	addwfc	prodh,w,c
 11677  006E52  6EDA               	movwf	fsr2h,c
 11678  006E54  50DF               	movf	indf2,w,c
 11679  006E56  0100               	movlb	0	; () banked
 11680  006E58  6FF7               	movwf	_NOTE_LENGTH_PULSES& (0+255),b
 11681                           
 11682                           ; BSR set to: 0
 11683  006E5A  0012               	return		;funcret
 11684  006E5C                     __end_of_Function_H_5:
 11685                           	opt stack 0
 11686                           tblptru	equ	0xFF8
 11687                           tblptrh	equ	0xFF7
 11688                           tblptrl	equ	0xFF6
 11689                           tablat	equ	0xFF5
 11690                           prodh	equ	0xFF4
 11691                           prodl	equ	0xFF3
 11692                           intcon	equ	0xFF2
 11693                           intcon2	equ	0xFF1
 11694                           postinc0	equ	0xFEE
 11695                           wreg	equ	0xFE8
 11696                           postdec1	equ	0xFE5
 11697                           fsr1l	equ	0xFE1
 11698                           indf2	equ	0xFDF
 11699                           postinc2	equ	0xFDE
 11700                           fsr2h	equ	0xFDA
 11701                           fsr2l	equ	0xFD9
 11702                           status	equ	0xFD8
 11703                           
 11704 ;; *************** function _Function_H_4 *****************
 11705 ;; Defined at:
 11706 ;;		line 1103 in file "menu.c"
 11707 ;; Parameters:    Size  Location     Type
 11708 ;;		None
 11709 ;; Auto vars:     Size  Location     Type
 11710 ;;		None
 11711 ;; Return value:  Size  Location     Type
 11712 ;;                  1    wreg      void 
 11713 ;; Registers used:
 11714 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11715 ;; Tracked objects:
 11716 ;;		On entry : 0/0
 11717 ;;		On exit  : 0/0
 11718 ;;		Unchanged: 0/0
 11719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;Total ram usage:        1 bytes
 11725 ;; Hardware stack levels used:    1
 11726 ;; Hardware stack levels required when called:    9
 11727 ;; This function calls:
 11728 ;;		_Lcd_Print_String
 11729 ;;		___lbmod
 11730 ;;		___wmul
 11731 ;;		_clear_row1
 11732 ;;		_clear_row2
 11733 ;;		_processEncoderBuxton
 11734 ;;		_setupArpeggio
 11735 ;; This function is called by:
 11736 ;;		_Function_H
 11737 ;; This function uses a non-reentrant model
 11738 ;;
 11739                           
 11740                           	psect	text21
 11741  006C46                     __ptext21:
 11742                           	opt stack 0
 11743  006C46                     _Function_H_4:
 11744                           	opt stack 19
 11745                           
 11746                           ;menu.c: 1105: which_screen = ARPEGGIATOR_ARPEGGIO_TYPE_MENU,
 11747                           ;menu.c: 1106: lcd_print_once = 0;
 11748                           
 11749                           ; BSR set to: 0
 11750                           ;incstack = 0
 11751  006C46  0E1D               	movlw	29
 11752  006C48  0100               	movlb	0	; () banked
 11753  006C4A  6FF9               	movwf	_which_screen& (0+255),b
 11754                           
 11755                           ; BSR set to: 0
 11756  006C4C  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11757                           
 11758                           ; BSR set to: 0
 11759                           ;menu.c: 1107: encoder_click = 0;
 11760  006C4E  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11761                           
 11762                           ; BSR set to: 0
 11763                           ;menu.c: 1109: arpeggiatorTypeMenu.selector = ARPEGGIO_TYPE;
 11764  006C50  C0EA  F12E         	movff	_ARPEGGIO_TYPE,_arpeggiatorTypeMenu+2
 11765                           
 11766                           ;menu.c: 1111: while(encoder_click == 0) {
 11767  006C54  D02E               	goto	l3670
 11768  006C56                     
 11769                           ;menu.c: 1112: processEncoderBuxton();
 11770                           
 11771                           ; BSR set to: 0
 11772  006C56  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11773                           
 11774                           ;menu.c: 1113: if (lcd_print_once == 0) {
 11775  006C5A  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11776  006C5C  D029               	goto	l3672
 11777                           
 11778                           ;menu.c: 1114: clear_row1();
 11779  006C5E  EC52  F04A         	call	_clear_row1	;wreg free
 11780                           
 11781                           ;menu.c: 1115: Lcd_Print_String("Select Arpeggio:");
 11782  006C62  0EB9               	movlw	low STR_46
 11783  006C64  0100               	movlb	0	; () banked
 11784  006C66  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11785  006C68  0EFD               	movlw	high STR_46
 11786  006C6A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11787  006C6C  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 11788                           
 11789                           ;menu.c: 1116: clear_row2();
 11790  006C70  EC3E  F04A         	call	_clear_row2	;wreg free
 11791                           
 11792                           ;menu.c: 1117: Lcd_Print_String(LCD_STRINGS[(arpeggiatorTypeMenu.selector % arpeggiatorT
      +                          ypeMenu.number) + arpeggiatorTypeMenu.address]);
 11793  006C74  C12C  F060         	movff	_arpeggiatorTypeMenu,___lbmod@divisor
 11794  006C78  0101               	movlb	1	; () banked
 11795  006C7A  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 11796  006C7C  ECBD  F049         	call	___lbmod
 11797  006C80  0100               	movlb	0	; () banked
 11798  006C82  6F77               	movwf	??_Function_H_4& (0+255),b
 11799  006C84  5177               	movf	??_Function_H_4& (0+255),w,b
 11800  006C86  0101               	movlb	1	; () banked
 11801  006C88  252D               	addwf	(_arpeggiatorTypeMenu+1)& (0+255),w,b
 11802  006C8A  0100               	movlb	0	; () banked
 11803  006C8C  6F64               	movwf	___wmul@multiplier& (0+255),b
 11804  006C8E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 11805  006C90  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11806  006C92  0E00               	movlw	0
 11807  006C94  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11808  006C96  0E11               	movlw	17
 11809  006C98  6F66               	movwf	___wmul@multiplicand& (0+255),b
 11810  006C9A  EC66  F04A         	call	___wmul	;wreg free
 11811  006C9E  0E9E               	movlw	low _LCD_STRINGS
 11812  006CA0  0100               	movlb	0	; () banked
 11813  006CA2  2564               	addwf	?___wmul& (0+255),w,b
 11814  006CA4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11815  006CA6  0EF3               	movlw	high _LCD_STRINGS
 11816  006CA8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 11817  006CAA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11818  006CAC  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 11819  006CB0                     l3672:
 11820                           
 11821                           ;menu.c: 1118: }
 11822                           ;menu.c: 1119: lcd_print_once = 1;
 11823  006CB0  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11824  006CB2                     l3670:
 11825  006CB2  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11826  006CB4  D7D0               	goto	l3671
 11827                           
 11828                           ;menu.c: 1120: }
 11829                           ;menu.c: 1122: ARPEGGIO_TYPE = arpeggiatorTypeMenu.selector;
 11830  006CB6  C12E  F0EA         	movff	_arpeggiatorTypeMenu+2,_ARPEGGIO_TYPE
 11831                           
 11832                           ;menu.c: 1125: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == UP) || (ARPEGGIO_TY
      +                          PE == UP_DOWN) || (ARPEGGIO_TYPE == RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) 
      +                          {
 11833  006CBA  0E06               	movlw	6
 11834  006CBC  0100               	movlb	0	; () banked
 11835  006CBE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11836  006CC0  B4D8               	btfsc	status,2,c
 11837  006CC2  D00F               	goto	u33740
 11838                           
 11839                           ; BSR set to: 0
 11840  006CC4  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 11841  006CC6  B4D8               	btfsc	status,2,c
 11842  006CC8  D00C               	goto	u33740
 11843                           
 11844                           ; BSR set to: 0
 11845  006CCA  0E02               	movlw	2
 11846  006CCC  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11847  006CCE  B4D8               	btfsc	status,2,c
 11848  006CD0  D008               	goto	u33740
 11849                           
 11850                           ; BSR set to: 0
 11851  006CD2  0E05               	movlw	5
 11852  006CD4  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11853  006CD6  B4D8               	btfsc	status,2,c
 11854  006CD8  D004               	goto	u33740
 11855                           
 11856                           ; BSR set to: 0
 11857  006CDA  0E04               	movlw	4
 11858  006CDC  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11859  006CDE  A4D8               	btfss	status,2,c
 11860  006CE0  D002               	goto	l3674
 11861  006CE2                     u33740:
 11862                           
 11863                           ; BSR set to: 0
 11864                           ;menu.c: 1126: startingDirection = UP;
 11865                           
 11866                           ; BSR set to: 0
 11867  006CE2  0E00               	movlw	0
 11868  006CE4  6FE9               	movwf	_startingDirection& (0+255),b
 11869  006CE6                     l3674:
 11870                           
 11871                           ; BSR set to: 0
 11872                           ;menu.c: 1127: }
 11873                           ;menu.c: 1129: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP)) {
 11874                           
 11875                           ; BSR set to: 0
 11876  006CE6  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 11877  006CE8  B4D8               	btfsc	status,2,c
 11878  006CEA  D004               	goto	u33760
 11879                           
 11880                           ; BSR set to: 0
 11881  006CEC  0E03               	movlw	3
 11882  006CEE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11883  006CF0  A4D8               	btfss	status,2,c
 11884  006CF2  D002               	goto	l3677
 11885  006CF4                     u33760:
 11886                           
 11887                           ; BSR set to: 0
 11888                           ;menu.c: 1130: startingDirection = DOWN;
 11889                           
 11890                           ; BSR set to: 0
 11891  006CF4  0E01               	movlw	1
 11892  006CF6  6FE9               	movwf	_startingDirection& (0+255),b
 11893  006CF8                     l3677:
 11894                           
 11895                           ; BSR set to: 0
 11896                           ;menu.c: 1131: }
 11897                           ;menu.c: 1133: setupArpeggio();
 11898                           
 11899                           ; BSR set to: 0
 11900  006CF8  ECF0  F040         	call	_setupArpeggio	;wreg free
 11901  006CFC  0012               	return		;funcret
 11902  006CFE                     __end_of_Function_H_4:
 11903                           	opt stack 0
 11904                           tblptru	equ	0xFF8
 11905                           tblptrh	equ	0xFF7
 11906                           tblptrl	equ	0xFF6
 11907                           tablat	equ	0xFF5
 11908                           prodh	equ	0xFF4
 11909                           prodl	equ	0xFF3
 11910                           intcon	equ	0xFF2
 11911                           intcon2	equ	0xFF1
 11912                           postinc0	equ	0xFEE
 11913                           wreg	equ	0xFE8
 11914                           postdec1	equ	0xFE5
 11915                           fsr1l	equ	0xFE1
 11916                           indf2	equ	0xFDF
 11917                           postinc2	equ	0xFDE
 11918                           fsr2h	equ	0xFDA
 11919                           fsr2l	equ	0xFD9
 11920                           status	equ	0xFD8
 11921                           
 11922 ;; *************** function _Function_H_3 *****************
 11923 ;; Defined at:
 11924 ;;		line 1076 in file "menu.c"
 11925 ;; Parameters:    Size  Location     Type
 11926 ;;		None
 11927 ;; Auto vars:     Size  Location     Type
 11928 ;;		None
 11929 ;; Return value:  Size  Location     Type
 11930 ;;                  1    wreg      void 
 11931 ;; Registers used:
 11932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11933 ;; Tracked objects:
 11934 ;;		On entry : 0/0
 11935 ;;		On exit  : 0/0
 11936 ;;		Unchanged: 0/0
 11937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11942 ;;Total ram usage:        0 bytes
 11943 ;; Hardware stack levels used:    1
 11944 ;; Hardware stack levels required when called:    9
 11945 ;; This function calls:
 11946 ;;		_Lcd_Print_String
 11947 ;;		_Lcd_Set_Cursor
 11948 ;;		_clear_row2
 11949 ;;		_int2string
 11950 ;;		_processEncoderBuxton
 11951 ;; This function is called by:
 11952 ;;		_Function_H
 11953 ;; This function uses a non-reentrant model
 11954 ;;
 11955                           
 11956                           	psect	text22
 11957  008A0C                     __ptext22:
 11958                           	opt stack 0
 11959  008A0C                     _Function_H_3:
 11960                           	opt stack 19
 11961                           
 11962                           ;menu.c: 1078: which_screen = ARPEGGIATOR_OCTAVES_MENU;
 11963                           
 11964                           ;incstack = 0
 11965  008A0C  0E1C               	movlw	28
 11966  008A0E  0100               	movlb	0	; () banked
 11967  008A10  6FF9               	movwf	_which_screen& (0+255),b
 11968                           
 11969                           ; BSR set to: 0
 11970                           ;menu.c: 1079: lcd_print_once = 0;
 11971  008A12  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11972                           
 11973                           ; BSR set to: 0
 11974                           ;menu.c: 1080: encoder_click = 0;
 11975  008A14  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11976                           
 11977                           ; BSR set to: 0
 11978                           ;menu.c: 1082: arpeggiatorOctavesMenu.selector = OCTAVES;
 11979  008A16  C0F8  F131         	movff	_OCTAVES,_arpeggiatorOctavesMenu+2
 11980                           
 11981                           ;menu.c: 1084: while(encoder_click == 0) {
 11982  008A1A  D021               	goto	l3663
 11983  008A1C                     
 11984                           ;menu.c: 1085: processEncoderBuxton();
 11985                           
 11986                           ; BSR set to: 0
 11987  008A1C  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11988                           
 11989                           ;menu.c: 1086: if (lcd_print_once == 0) {
 11990  008A20  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11991  008A22  D009               	goto	l3665
 11992                           
 11993                           ;menu.c: 1087: clear_row2();
 11994  008A24  EC3E  F04A         	call	_clear_row2	;wreg free
 11995                           
 11996                           ;menu.c: 1088: Lcd_Print_String("Octave Range:");
 11997  008A28  0EEE               	movlw	low STR_45
 11998  008A2A  0100               	movlb	0	; () banked
 11999  008A2C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12000  008A2E  0EFE               	movlw	high STR_45
 12001  008A30  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12002  008A32  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 12003  008A36                     l3665:
 12004                           
 12005                           ;menu.c: 1089: }
 12006                           ;menu.c: 1090: lcd_print_once = 1;
 12007  008A36  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12008                           
 12009                           ;menu.c: 1093: int2string(arpeggiatorOctavesMenu.selector);
 12010  008A38  C131  F074         	movff	_arpeggiatorOctavesMenu+2,int2string@number
 12011  008A3C  0100               	movlb	0	; () banked
 12012  008A3E  6B75               	clrf	(int2string@number+1)& (0+255),b
 12013  008A40  EC52  F035         	call	_int2string	;wreg free
 12014                           
 12015                           ;menu.c: 1094: Lcd_Set_Cursor(2,13);
 12016  008A44  0E0D               	movlw	13
 12017  008A46  0100               	movlb	0	; () banked
 12018  008A48  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 12019  008A4A  0E02               	movlw	2
 12020  008A4C  ECEC  F045         	call	_Lcd_Set_Cursor
 12021                           
 12022                           ;menu.c: 1095: Lcd_Print_String(string2display);
 12023  008A50  0E82               	movlw	low _string2display
 12024  008A52  0100               	movlb	0	; () banked
 12025  008A54  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12026  008A56  0E01               	movlw	high _string2display
 12027  008A58  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12028  008A5A  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 12029  008A5E                     l3663:
 12030  008A5E  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12031  008A60  D7DD               	goto	l3664
 12032                           
 12033                           ;menu.c: 1096: }
 12034                           ;menu.c: 1098: OCTAVES = arpeggiatorOctavesMenu.selector;
 12035  008A62  C131  F0F8         	movff	_arpeggiatorOctavesMenu+2,_OCTAVES
 12036  008A66  0012               	return		;funcret
 12037  008A68                     __end_of_Function_H_3:
 12038                           	opt stack 0
 12039                           tblptru	equ	0xFF8
 12040                           tblptrh	equ	0xFF7
 12041                           tblptrl	equ	0xFF6
 12042                           tablat	equ	0xFF5
 12043                           prodh	equ	0xFF4
 12044                           prodl	equ	0xFF3
 12045                           intcon	equ	0xFF2
 12046                           intcon2	equ	0xFF1
 12047                           postinc0	equ	0xFEE
 12048                           wreg	equ	0xFE8
 12049                           postdec1	equ	0xFE5
 12050                           fsr1l	equ	0xFE1
 12051                           indf2	equ	0xFDF
 12052                           postinc2	equ	0xFDE
 12053                           fsr2h	equ	0xFDA
 12054                           fsr2l	equ	0xFD9
 12055                           status	equ	0xFD8
 12056                           
 12057 ;; *************** function _Function_H_2 *****************
 12058 ;; Defined at:
 12059 ;;		line 1049 in file "menu.c"
 12060 ;; Parameters:    Size  Location     Type
 12061 ;;		None
 12062 ;; Auto vars:     Size  Location     Type
 12063 ;;		None
 12064 ;; Return value:  Size  Location     Type
 12065 ;;                  1    wreg      void 
 12066 ;; Registers used:
 12067 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12068 ;; Tracked objects:
 12069 ;;		On entry : 0/0
 12070 ;;		On exit  : 0/0
 12071 ;;		Unchanged: 0/0
 12072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;Total ram usage:        0 bytes
 12078 ;; Hardware stack levels used:    1
 12079 ;; Hardware stack levels required when called:    9
 12080 ;; This function calls:
 12081 ;;		_Lcd_Print_String
 12082 ;;		_Lcd_Set_Cursor
 12083 ;;		_calculate_pulse_length
 12084 ;;		_clear_row2
 12085 ;;		_int2string
 12086 ;;		_processEncoderBuxton
 12087 ;; This function is called by:
 12088 ;;		_Function_H
 12089 ;; This function uses a non-reentrant model
 12090 ;;
 12091                           
 12092                           	psect	text23
 12093  0087B8                     __ptext23:
 12094                           	opt stack 0
 12095  0087B8                     _Function_H_2:
 12096                           	opt stack 19
 12097                           
 12098                           ;menu.c: 1051: which_screen = ARPEGGIATOR_TEMPO_MENU;
 12099                           
 12100                           ;incstack = 0
 12101  0087B8  0E1B               	movlw	27
 12102  0087BA  0100               	movlb	0	; () banked
 12103  0087BC  6FF9               	movwf	_which_screen& (0+255),b
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;menu.c: 1052: lcd_print_once = 0;
 12107  0087BE  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12108                           
 12109                           ; BSR set to: 0
 12110                           ;menu.c: 1053: encoder_click = 0;
 12111  0087C0  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12112                           
 12113                           ; BSR set to: 0
 12114                           ;menu.c: 1055: arpeggiatorTempoMenu.selector = BPM;
 12115  0087C2  C0FF  F134         	movff	_BPM,_arpeggiatorTempoMenu+2
 12116                           
 12117                           ;menu.c: 1057: while(encoder_click == 0) {
 12118  0087C6  D021               	goto	l3656
 12119  0087C8                     
 12120                           ;menu.c: 1058: processEncoderBuxton();
 12121                           
 12122                           ; BSR set to: 0
 12123  0087C8  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12124                           
 12125                           ;menu.c: 1059: if (lcd_print_once == 0) {
 12126  0087CC  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12127  0087CE  D009               	goto	l3658
 12128                           
 12129                           ;menu.c: 1060: clear_row2();
 12130  0087D0  EC3E  F04A         	call	_clear_row2	;wreg free
 12131                           
 12132                           ;menu.c: 1061: Lcd_Print_String("Tempo (BPM): ");
 12133  0087D4  0EB6               	movlw	low STR_44
 12134  0087D6  0100               	movlb	0	; () banked
 12135  0087D8  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12136  0087DA  0EFE               	movlw	high STR_44
 12137  0087DC  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12138  0087DE  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 12139  0087E2                     l3658:
 12140                           
 12141                           ;menu.c: 1062: }
 12142                           ;menu.c: 1063: lcd_print_once = 1;
 12143  0087E2  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12144                           
 12145                           ;menu.c: 1066: int2string(arpeggiatorTempoMenu.selector);
 12146  0087E4  C134  F074         	movff	_arpeggiatorTempoMenu+2,int2string@number
 12147  0087E8  0100               	movlb	0	; () banked
 12148  0087EA  6B75               	clrf	(int2string@number+1)& (0+255),b
 12149  0087EC  EC52  F035         	call	_int2string	;wreg free
 12150                           
 12151                           ;menu.c: 1067: Lcd_Set_Cursor(2,13);
 12152  0087F0  0E0D               	movlw	13
 12153  0087F2  0100               	movlb	0	; () banked
 12154  0087F4  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 12155  0087F6  0E02               	movlw	2
 12156  0087F8  ECEC  F045         	call	_Lcd_Set_Cursor
 12157                           
 12158                           ;menu.c: 1068: Lcd_Print_String(string2display);
 12159  0087FC  0E82               	movlw	low _string2display
 12160  0087FE  0100               	movlb	0	; () banked
 12161  008800  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12162  008802  0E01               	movlw	high _string2display
 12163  008804  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12164  008806  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 12165  00880A                     l3656:
 12166  00880A  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12167  00880C  D7DD               	goto	l3657
 12168                           
 12169                           ;menu.c: 1069: }
 12170                           ;menu.c: 1071: BPM = arpeggiatorTempoMenu.selector;
 12171  00880E  C134  F0FF         	movff	_arpeggiatorTempoMenu+2,_BPM
 12172                           
 12173                           ;menu.c: 1072: TIMER_PRELOAD = calculate_pulse_length();
 12174  008812  EC7A  F02E         	call	_calculate_pulse_length	;wreg free
 12175  008816  C0C2  F16D         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 12176  00881A  C0C3  F16E         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 12177  00881E  0012               	return		;funcret
 12178  008820                     __end_of_Function_H_2:
 12179                           	opt stack 0
 12180                           tblptru	equ	0xFF8
 12181                           tblptrh	equ	0xFF7
 12182                           tblptrl	equ	0xFF6
 12183                           tablat	equ	0xFF5
 12184                           prodh	equ	0xFF4
 12185                           prodl	equ	0xFF3
 12186                           intcon	equ	0xFF2
 12187                           intcon2	equ	0xFF1
 12188                           postinc0	equ	0xFEE
 12189                           wreg	equ	0xFE8
 12190                           postdec1	equ	0xFE5
 12191                           fsr1l	equ	0xFE1
 12192                           indf2	equ	0xFDF
 12193                           postinc2	equ	0xFDE
 12194                           fsr2h	equ	0xFDA
 12195                           fsr2l	equ	0xFD9
 12196                           status	equ	0xFD8
 12197                           
 12198 ;; *************** function _Function_H_1 *****************
 12199 ;; Defined at:
 12200 ;;		line 1013 in file "menu.c"
 12201 ;; Parameters:    Size  Location     Type
 12202 ;;		None
 12203 ;; Auto vars:     Size  Location     Type
 12204 ;;		None
 12205 ;; Return value:  Size  Location     Type
 12206 ;;                  1    wreg      void 
 12207 ;; Registers used:
 12208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12209 ;; Tracked objects:
 12210 ;;		On entry : 0/0
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;Total ram usage:        0 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; Hardware stack levels required when called:    9
 12221 ;; This function calls:
 12222 ;;		_Lcd_Print_String
 12223 ;;		_clear_row2
 12224 ;;		_processEncoderBuxton
 12225 ;;		_strcpy
 12226 ;; This function is called by:
 12227 ;;		_Function_H
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           	psect	text24
 12232  0074C0                     __ptext24:
 12233                           	opt stack 0
 12234  0074C0                     _Function_H_1:
 12235                           	opt stack 19
 12236                           
 12237                           ;menu.c: 1015: which_screen = ARPEGGIATOR_ON_OFF_MENU;
 12238                           
 12239                           ;incstack = 0
 12240  0074C0  0E1A               	movlw	26
 12241  0074C2  0100               	movlb	0	; () banked
 12242  0074C4  6FF9               	movwf	_which_screen& (0+255),b
 12243                           
 12244                           ; BSR set to: 0
 12245                           ;menu.c: 1016: lcd_print_once = 0;
 12246  0074C6  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12247                           
 12248                           ; BSR set to: 0
 12249                           ;menu.c: 1017: encoder_click = 0;
 12250  0074C8  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12251                           
 12252                           ;menu.c: 1019: arpeggiatorOnOffMenu.selector = ARPEGGIO_ON;
 12253  0074CA  0E00               	movlw	0
 12254  0074CC  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12255  0074CE  0E01               	movlw	1
 12256  0074D0  0101               	movlb	1	; () banked
 12257  0074D2  6F37               	movwf	(_arpeggiatorOnOffMenu+2)& (0+255),b
 12258                           
 12259                           ;menu.c: 1021: while(encoder_click == 0) {
 12260  0074D4  D039               	goto	l3647
 12261  0074D6                     
 12262                           ;menu.c: 1022: processEncoderBuxton();
 12263                           
 12264                           ; BSR set to: 1
 12265  0074D6  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12266                           
 12267                           ;menu.c: 1023: if (lcd_print_once == 0) {
 12268  0074DA  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12269  0074DC  D034               	goto	l3651
 12270                           
 12271                           ;menu.c: 1028: if(arpeggiatorOnOffMenu.selector == 0) {
 12272  0074DE  0101               	movlb	1	; () banked
 12273  0074E0  5137               	movf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12274  0074E2  A4D8               	btfss	status,2,c
 12275  0074E4  D016               	goto	l3650
 12276                           
 12277                           ; BSR set to: 1
 12278                           ;menu.c: 1029: clear_row2();
 12279  0074E6  EC3E  F04A         	call	_clear_row2	;wreg free
 12280                           
 12281                           ;menu.c: 1030: Lcd_Print_String("ARPEGGIATOR OFF");
 12282  0074EA  0E3D               	movlw	low STR_40
 12283  0074EC  0100               	movlb	0	; () banked
 12284  0074EE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12285  0074F0  0EFE               	movlw	high STR_40
 12286  0074F2  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12287  0074F4  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 12288                           
 12289                           ;menu.c: 1031: DISPLAY_MODE = 1;
 12290  0074F8  0E01               	movlw	1
 12291  0074FA  6E5A               	movwf	_DISPLAY_MODE,c
 12292                           
 12293                           ;menu.c: 1032: strcpy(string_to_display, "AoFF");
 12294  0074FC  0EEE               	movlw	low _string_to_display
 12295  0074FE  0100               	movlb	0	; () banked
 12296  007500  6F60               	movwf	strcpy@to& (0+255),b
 12297  007502  0E01               	movlw	high _string_to_display
 12298  007504  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12299  007506  0ECD               	movlw	low STR_41
 12300  007508  6F62               	movwf	strcpy@from& (0+255),b
 12301  00750A  0EFF               	movlw	high STR_41
 12302  00750C  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12303  00750E  EC5B  F049         	call	_strcpy	;wreg free
 12304  007512                     l3650:
 12305                           
 12306                           ;menu.c: 1033: }
 12307                           ;menu.c: 1034: if(arpeggiatorOnOffMenu.selector == 1) {
 12308  007512  0101               	movlb	1	; () banked
 12309  007514  0537               	decf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12310  007516  A4D8               	btfss	status,2,c
 12311  007518  D016               	goto	l3651
 12312                           
 12313                           ; BSR set to: 1
 12314                           ;menu.c: 1035: clear_row2();
 12315  00751A  EC3E  F04A         	call	_clear_row2	;wreg free
 12316                           
 12317                           ;menu.c: 1036: Lcd_Print_String("ARPEGGIATOR ON");
 12318  00751E  0E98               	movlw	low STR_42
 12319  007520  0100               	movlb	0	; () banked
 12320  007522  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12321  007524  0EFE               	movlw	high STR_42
 12322  007526  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12323  007528  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 12324                           
 12325                           ;menu.c: 1037: DISPLAY_MODE = 1;
 12326  00752C  0E01               	movlw	1
 12327  00752E  6E5A               	movwf	_DISPLAY_MODE,c
 12328                           
 12329                           ;menu.c: 1038: strcpy(string_to_display, " ArP");
 12330  007530  0EEE               	movlw	low _string_to_display
 12331  007532  0100               	movlb	0	; () banked
 12332  007534  6F60               	movwf	strcpy@to& (0+255),b
 12333  007536  0E01               	movlw	high _string_to_display
 12334  007538  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12335  00753A  0ED2               	movlw	low STR_43
 12336  00753C  6F62               	movwf	strcpy@from& (0+255),b
 12337  00753E  0EFF               	movlw	high STR_43
 12338  007540  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12339  007542  EC5B  F049         	call	_strcpy	;wreg free
 12340  007546                     l3651:
 12341                           
 12342                           ;menu.c: 1039: }
 12343                           ;menu.c: 1040: }
 12344                           ;menu.c: 1041: lcd_print_once = 1;
 12345  007546  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12346  007548                     l3647:
 12347  007548  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12348  00754A  D7C5               	goto	l3648
 12349                           
 12350                           ;menu.c: 1042: }
 12351                           ;menu.c: 1044: ARPEGGIO_ON = arpeggiatorOnOffMenu.selector;
 12352  00754C  0101               	movlb	1	; () banked
 12353  00754E  A137               	btfss	(_arpeggiatorOnOffMenu+2)& (0+255),0,b
 12354  007550  D002               	goto	u33620
 12355  007552  8835               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12356  007554  0012               	return	
 12357  007556                     u33620:
 12358  007556  9835               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12359  007558  0012               	return		;funcret
 12360  00755A                     __end_of_Function_H_1:
 12361                           	opt stack 0
 12362                           tblptru	equ	0xFF8
 12363                           tblptrh	equ	0xFF7
 12364                           tblptrl	equ	0xFF6
 12365                           tablat	equ	0xFF5
 12366                           prodh	equ	0xFF4
 12367                           prodl	equ	0xFF3
 12368                           intcon	equ	0xFF2
 12369                           intcon2	equ	0xFF1
 12370                           postinc0	equ	0xFEE
 12371                           wreg	equ	0xFE8
 12372                           postdec1	equ	0xFE5
 12373                           fsr1l	equ	0xFE1
 12374                           indf2	equ	0xFDF
 12375                           postinc2	equ	0xFDE
 12376                           fsr2h	equ	0xFDA
 12377                           fsr2l	equ	0xFD9
 12378                           status	equ	0xFD8
 12379                           
 12380 ;; *************** function _Function_G *****************
 12381 ;; Defined at:
 12382 ;;		line 962 in file "menu.c"
 12383 ;; Parameters:    Size  Location     Type
 12384 ;;		None
 12385 ;; Auto vars:     Size  Location     Type
 12386 ;;		None
 12387 ;; Return value:  Size  Location     Type
 12388 ;;                  1    wreg      void 
 12389 ;; Registers used:
 12390 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12391 ;; Tracked objects:
 12392 ;;		On entry : 0/0
 12393 ;;		On exit  : 0/0
 12394 ;;		Unchanged: 0/0
 12395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12399 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12400 ;;Total ram usage:        1 bytes
 12401 ;; Hardware stack levels used:    1
 12402 ;; Hardware stack levels required when called:   11
 12403 ;; This function calls:
 12404 ;;		_Function_G_1
 12405 ;;		_Function_G_2
 12406 ;;		_Function_G_3
 12407 ;;		_Function_G_4
 12408 ;;		_Lcd_Print_String
 12409 ;;		___lbmod
 12410 ;;		___wmul
 12411 ;;		_clear_row2
 12412 ;;		_eepromExit
 12413 ;;		_processEncoderBuxton
 12414 ;; This function is called by:
 12415 ;;		_menu_lcd
 12416 ;; This function uses a non-reentrant model
 12417 ;;
 12418                           
 12419                           	psect	text25
 12420  00768C                     __ptext25:
 12421                           	opt stack 0
 12422  00768C                     _Function_G:
 12423                           	opt stack 18
 12424                           
 12425                           ;menu.c: 964: which_screen = EEPROM_MENU;
 12426                           
 12427                           ;incstack = 0
 12428  00768C  0E16               	movlw	22
 12429  00768E  0100               	movlb	0	; () banked
 12430  007690  6FF9               	movwf	_which_screen& (0+255),b
 12431                           
 12432                           ; BSR set to: 0
 12433                           ;menu.c: 965: lcd_print_once = 0;
 12434  007692  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12435                           
 12436                           ;menu.c: 967: while(encoder_click == 0) {
 12437  007694  D025               	goto	l3619
 12438  007696                     
 12439                           ;menu.c: 968: processEncoderBuxton();
 12440                           
 12441                           ; BSR set to: 0
 12442  007696  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12443                           
 12444                           ;menu.c: 969: if (lcd_print_once == 0) {
 12445  00769A  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12446  00769C  D020               	goto	l3621
 12447                           
 12448                           ;menu.c: 970: clear_row2();
 12449  00769E  EC3E  F04A         	call	_clear_row2	;wreg free
 12450                           
 12451                           ;menu.c: 971: Lcd_Print_String(LCD_STRINGS[(eepromMenu.selector % eepromMenu.number) + e
      +                          epromMenu.address]);
 12452  0076A2  C13B  F060         	movff	_eepromMenu,___lbmod@divisor
 12453  0076A6  0101               	movlb	1	; () banked
 12454  0076A8  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12455  0076AA  ECBD  F049         	call	___lbmod
 12456  0076AE  0100               	movlb	0	; () banked
 12457  0076B0  6FCD               	movwf	??_Function_G& (0+255),b
 12458  0076B2  51CD               	movf	??_Function_G& (0+255),w,b
 12459  0076B4  0101               	movlb	1	; () banked
 12460  0076B6  253C               	addwf	(_eepromMenu+1)& (0+255),w,b
 12461  0076B8  0100               	movlb	0	; () banked
 12462  0076BA  6F64               	movwf	___wmul@multiplier& (0+255),b
 12463  0076BC  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 12464  0076BE  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12465  0076C0  0E00               	movlw	0
 12466  0076C2  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12467  0076C4  0E11               	movlw	17
 12468  0076C6  6F66               	movwf	___wmul@multiplicand& (0+255),b
 12469  0076C8  EC66  F04A         	call	___wmul	;wreg free
 12470  0076CC  0E9E               	movlw	low _LCD_STRINGS
 12471  0076CE  0100               	movlb	0	; () banked
 12472  0076D0  2564               	addwf	?___wmul& (0+255),w,b
 12473  0076D2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12474  0076D4  0EF3               	movlw	high _LCD_STRINGS
 12475  0076D6  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 12476  0076D8  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12477  0076DA  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 12478  0076DE                     l3621:
 12479                           
 12480                           ;menu.c: 972: }
 12481                           ;menu.c: 973: lcd_print_once = 1;
 12482  0076DE  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12483  0076E0                     l3619:
 12484  0076E0  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12485  0076E2  D7D9               	goto	l3620
 12486                           
 12487                           ;menu.c: 974: }
 12488                           ;menu.c: 976: if(eepromMenu.selector == 0) {Function_G_1();}
 12489  0076E4  0101               	movlb	1	; () banked
 12490  0076E6  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12491  0076E8  B4D8               	btfsc	status,2,c
 12492                           
 12493                           ; BSR set to: 1
 12494  0076EA  EC6F  F039         	call	_Function_G_1	;wreg free
 12495                           
 12496                           ;menu.c: 977: if(eepromMenu.selector == 1) {Function_G_2();}
 12497  0076EE  0101               	movlb	1	; () banked
 12498  0076F0  053D               	decf	(_eepromMenu+2)& (0+255),w,b
 12499  0076F2  B4D8               	btfsc	status,2,c
 12500                           
 12501                           ; BSR set to: 1
 12502  0076F4  EC1E  F039         	call	_Function_G_2	;wreg free
 12503                           
 12504                           ;menu.c: 978: if(eepromMenu.selector == 2) {Function_G_3();}
 12505  0076F8  0E02               	movlw	2
 12506  0076FA  0101               	movlb	1	; () banked
 12507  0076FC  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12508  0076FE  B4D8               	btfsc	status,2,c
 12509                           
 12510                           ; BSR set to: 1
 12511  007700  EC34  F045         	call	_Function_G_3	;wreg free
 12512                           
 12513                           ;menu.c: 979: if(eepromMenu.selector == 3) {Function_G_4();}
 12514  007704  0E03               	movlw	3
 12515  007706  0101               	movlb	1	; () banked
 12516  007708  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12517  00770A  B4D8               	btfsc	status,2,c
 12518                           
 12519                           ; BSR set to: 1
 12520  00770C  EC11  F03A         	call	_Function_G_4	;wreg free
 12521                           
 12522                           ;menu.c: 980: if(eepromMenu.selector == 4) {eepromExit();}
 12523  007710  0E04               	movlw	4
 12524  007712  0101               	movlb	1	; () banked
 12525  007714  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12526  007716  A4D8               	btfss	status,2,c
 12527  007718  0012               	return	
 12528                           
 12529                           ; BSR set to: 1
 12530  00771A  EC77  F048         	call	_eepromExit	;wreg free
 12531  00771E  0012               	return	
 12532  007720                     __end_of_Function_G:
 12533                           	opt stack 0
 12534                           tblptru	equ	0xFF8
 12535                           tblptrh	equ	0xFF7
 12536                           tblptrl	equ	0xFF6
 12537                           tablat	equ	0xFF5
 12538                           prodh	equ	0xFF4
 12539                           prodl	equ	0xFF3
 12540                           intcon	equ	0xFF2
 12541                           intcon2	equ	0xFF1
 12542                           postinc0	equ	0xFEE
 12543                           wreg	equ	0xFE8
 12544                           postdec1	equ	0xFE5
 12545                           fsr1l	equ	0xFE1
 12546                           indf2	equ	0xFDF
 12547                           postinc2	equ	0xFDE
 12548                           fsr2h	equ	0xFDA
 12549                           fsr2l	equ	0xFD9
 12550                           status	equ	0xFD8
 12551                           
 12552 ;; *************** function _Function_G_4 *****************
 12553 ;; Defined at:
 12554 ;;		line 933 in file "menu.c"
 12555 ;; Parameters:    Size  Location     Type
 12556 ;;		None
 12557 ;; Auto vars:     Size  Location     Type
 12558 ;;		None
 12559 ;; Return value:  Size  Location     Type
 12560 ;;                  1    wreg      void 
 12561 ;; Registers used:
 12562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12563 ;; Tracked objects:
 12564 ;;		On entry : 0/0
 12565 ;;		On exit  : 0/0
 12566 ;;		Unchanged: 0/0
 12567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12570 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12571 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12572 ;;Total ram usage:        1 bytes
 12573 ;; Hardware stack levels used:    1
 12574 ;; Hardware stack levels required when called:   10
 12575 ;; This function calls:
 12576 ;;		_Busy_eep
 12577 ;;		_Lcd_Print_String
 12578 ;;		_Write_b_eep
 12579 ;;		___lbmod
 12580 ;;		___wmul
 12581 ;;		_clear_row1
 12582 ;;		_clear_row2
 12583 ;;		_exitFunction
 12584 ;;		_processEncoderBuxton
 12585 ;; This function is called by:
 12586 ;;		_Function_G
 12587 ;; This function uses a non-reentrant model
 12588 ;;
 12589                           
 12590                           	psect	text26
 12591  007422                     __ptext26:
 12592                           	opt stack 0
 12593  007422                     _Function_G_4:
 12594                           	opt stack 18
 12595                           
 12596                           ;menu.c: 937: which_screen = ENCODER_POLARITY_MENU;
 12597                           
 12598                           ;incstack = 0
 12599  007422  0E18               	movlw	24
 12600  007424  0100               	movlb	0	; () banked
 12601  007426  6FF9               	movwf	_which_screen& (0+255),b
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;menu.c: 938: lcd_print_once = 0;
 12605  007428  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12606                           
 12607                           ; BSR set to: 0
 12608                           ;menu.c: 939: encoder_click = 0;
 12609  00742A  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12610                           
 12611                           ;menu.c: 941: encoderPolarityMenu.selector = encoderPolarity;
 12612  00742C  0E00               	movlw	0
 12613  00742E  B236               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12614  007430  0E01               	movlw	1
 12615  007432  0101               	movlb	1	; () banked
 12616  007434  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 12617                           
 12618                           ;menu.c: 943: while(encoder_click == 0) {
 12619  007436  D02E               	goto	l3612
 12620  007438                     
 12621                           ;menu.c: 944: processEncoderBuxton();
 12622                           
 12623                           ; BSR set to: 1
 12624  007438  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12625                           
 12626                           ;menu.c: 945: if (lcd_print_once == 0) {
 12627  00743C  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12628  00743E  D029               	goto	l3614
 12629                           
 12630                           ;menu.c: 946: clear_row1();
 12631  007440  EC52  F04A         	call	_clear_row1	;wreg free
 12632                           
 12633                           ;menu.c: 947: Lcd_Print_String("Encoder Polarity");
 12634  007444  0EEC               	movlw	low STR_39
 12635  007446  0100               	movlb	0	; () banked
 12636  007448  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12637  00744A  0EFD               	movlw	high STR_39
 12638  00744C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12639  00744E  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 12640                           
 12641                           ;menu.c: 948: clear_row2();
 12642  007452  EC3E  F04A         	call	_clear_row2	;wreg free
 12643                           
 12644                           ;menu.c: 949: Lcd_Print_String(LCD_STRINGS[(encoderPolarityMenu.selector % encoderPolari
      +                          tyMenu.number) + encoderPolarityMenu.address]);
 12645  007456  C138  F060         	movff	_encoderPolarityMenu,___lbmod@divisor
 12646  00745A  0101               	movlb	1	; () banked
 12647  00745C  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 12648  00745E  ECBD  F049         	call	___lbmod
 12649  007462  0100               	movlb	0	; () banked
 12650  007464  6F72               	movwf	??_Function_G_4& (0+255),b
 12651  007466  5172               	movf	??_Function_G_4& (0+255),w,b
 12652  007468  0101               	movlb	1	; () banked
 12653  00746A  2539               	addwf	(_encoderPolarityMenu+1)& (0+255),w,b
 12654  00746C  0100               	movlb	0	; () banked
 12655  00746E  6F64               	movwf	___wmul@multiplier& (0+255),b
 12656  007470  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 12657  007472  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12658  007474  0E00               	movlw	0
 12659  007476  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12660  007478  0E11               	movlw	17
 12661  00747A  6F66               	movwf	___wmul@multiplicand& (0+255),b
 12662  00747C  EC66  F04A         	call	___wmul	;wreg free
 12663  007480  0E9E               	movlw	low _LCD_STRINGS
 12664  007482  0100               	movlb	0	; () banked
 12665  007484  2564               	addwf	?___wmul& (0+255),w,b
 12666  007486  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12667  007488  0EF3               	movlw	high _LCD_STRINGS
 12668  00748A  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 12669  00748C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12670  00748E  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 12671  007492                     l3614:
 12672                           
 12673                           ;menu.c: 950: }
 12674                           ;menu.c: 951: lcd_print_once = 1;
 12675  007492  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12676  007494                     l3612:
 12677  007494  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12678  007496  D7D0               	goto	l3613
 12679                           
 12680                           ;menu.c: 952: }
 12681                           ;menu.c: 955: encoderPolarity = encoderPolarityMenu.selector;
 12682  007498  0101               	movlb	1	; () banked
 12683  00749A  A13A               	btfss	(_encoderPolarityMenu+2)& (0+255),0,b
 12684  00749C  D002               	goto	u33560
 12685  00749E  8236               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12686  0074A0  D001               	goto	u33575
 12687  0074A2                     u33560:
 12688  0074A2  9236               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12689  0074A4                     u33575:
 12690                           
 12691                           ;menu.c: 956: (Busy_eep(), Write_b_eep(0x02,encoderPolarityMenu.selector));
 12692  0074A4  EC31  F04B         	call	_Busy_eep	;wreg free
 12693  0074A8  0E00               	movlw	0
 12694  0074AA  0100               	movlb	0	; () banked
 12695  0074AC  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12696  0074AE  0E02               	movlw	2
 12697  0074B0  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12698  0074B2  C13A  F062         	movff	_encoderPolarityMenu+2,Write_b_eep@bdat
 12699  0074B6  ECDC  F047         	call	_Write_b_eep	;wreg free
 12700                           
 12701                           ;menu.c: 957: exitFunction();
 12702  0074BA  EC1D  F048         	call	_exitFunction	;wreg free
 12703  0074BE  0012               	return		;funcret
 12704  0074C0                     __end_of_Function_G_4:
 12705                           	opt stack 0
 12706                           tblptru	equ	0xFF8
 12707                           tblptrh	equ	0xFF7
 12708                           tblptrl	equ	0xFF6
 12709                           tablat	equ	0xFF5
 12710                           prodh	equ	0xFF4
 12711                           prodl	equ	0xFF3
 12712                           intcon	equ	0xFF2
 12713                           intcon2	equ	0xFF1
 12714                           postinc0	equ	0xFEE
 12715                           wreg	equ	0xFE8
 12716                           postdec1	equ	0xFE5
 12717                           fsr1l	equ	0xFE1
 12718                           indf2	equ	0xFDF
 12719                           postinc2	equ	0xFDE
 12720                           fsr2h	equ	0xFDA
 12721                           fsr2l	equ	0xFD9
 12722                           status	equ	0xFD8
 12723                           
 12724 ;; *************** function _exitFunction *****************
 12725 ;; Defined at:
 12726 ;;		line 242 in file "menu.c"
 12727 ;; Parameters:    Size  Location     Type
 12728 ;;		None
 12729 ;; Auto vars:     Size  Location     Type
 12730 ;;		None
 12731 ;; Return value:  Size  Location     Type
 12732 ;;                  1    wreg      void 
 12733 ;; Registers used:
 12734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12735 ;; Tracked objects:
 12736 ;;		On entry : 0/0
 12737 ;;		On exit  : 0/0
 12738 ;;		Unchanged: 0/0
 12739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;Total ram usage:        2 bytes
 12745 ;; Hardware stack levels used:    1
 12746 ;; Hardware stack levels required when called:    9
 12747 ;; This function calls:
 12748 ;;		_Lcd_Print_String
 12749 ;;		_clear_row1
 12750 ;; This function is called by:
 12751 ;;		_menu_lcd
 12752 ;;		_Function_G_4
 12753 ;; This function uses a non-reentrant model
 12754 ;;
 12755                           
 12756                           	psect	text27
 12757  00903A                     __ptext27:
 12758                           	opt stack 0
 12759  00903A                     _exitFunction:
 12760                           	opt stack 20
 12761                           
 12762                           ;menu.c: 244: while(encoder_click == 0);
 12763                           
 12764                           ;incstack = 0
 12765  00903A  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12766  00903C  D7FE               	goto	_exitFunction
 12767                           
 12768                           ;menu.c: 245: clear_row1();
 12769  00903E  EC52  F04A         	call	_clear_row1	;wreg free
 12770                           
 12771                           ;menu.c: 246: Lcd_Print_String("Set!");
 12772  009042  0EC3               	movlw	low STR_20
 12773  009044  0100               	movlb	0	; () banked
 12774  009046  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12775  009048  0EFF               	movlw	high STR_20
 12776  00904A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12777  00904C  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 12778                           
 12779                           ;menu.c: 247: _delay((unsigned long)((500)*(20000000/4000.0)));
 12780  009050  0E0D               	movlw	13
 12781  009052  0100               	movlb	0	; () banked
 12782  009054  6F71               	movwf	(??_exitFunction+1)& (0+255),b
 12783  009056  0EAF               	movlw	175
 12784  009058  6F70               	movwf	??_exitFunction& (0+255),b
 12785  00905A  0EB6               	movlw	182
 12786  00905C                     u44837:
 12787  00905C  2EE8               	decfsz	wreg,f,c
 12788  00905E  D7FE               	bra	u44837
 12789  009060  2F70               	decfsz	??_exitFunction& (0+255),f,b
 12790  009062  D7FC               	bra	u44837
 12791  009064  2F71               	decfsz	(??_exitFunction+1)& (0+255),f,b
 12792  009066  D7FA               	bra	u44837
 12793  009068  F000               	nop	
 12794                           
 12795                           ;menu.c: 248: which_screen = MAIN_MENU;
 12796  00906A  0E02               	movlw	2
 12797  00906C  0100               	movlb	0	; () banked
 12798  00906E  6FF9               	movwf	_which_screen& (0+255),b
 12799                           
 12800                           ; BSR set to: 0
 12801                           ;menu.c: 249: lcd_print_once = 0;
 12802  009070  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12803                           
 12804                           ; BSR set to: 0
 12805                           ;menu.c: 250: encoder_click = 0;
 12806  009072  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12807                           
 12808                           ; BSR set to: 0
 12809  009074  0012               	return		;funcret
 12810  009076                     __end_of_exitFunction:
 12811                           	opt stack 0
 12812                           tblptru	equ	0xFF8
 12813                           tblptrh	equ	0xFF7
 12814                           tblptrl	equ	0xFF6
 12815                           tablat	equ	0xFF5
 12816                           prodh	equ	0xFF4
 12817                           prodl	equ	0xFF3
 12818                           intcon	equ	0xFF2
 12819                           intcon2	equ	0xFF1
 12820                           postinc0	equ	0xFEE
 12821                           wreg	equ	0xFE8
 12822                           postdec1	equ	0xFE5
 12823                           fsr1l	equ	0xFE1
 12824                           indf2	equ	0xFDF
 12825                           postinc2	equ	0xFDE
 12826                           fsr2h	equ	0xFDA
 12827                           fsr2l	equ	0xFD9
 12828                           status	equ	0xFD8
 12829                           
 12830 ;; *************** function _Function_G_3 *****************
 12831 ;; Defined at:
 12832 ;;		line 918 in file "menu.c"
 12833 ;; Parameters:    Size  Location     Type
 12834 ;;		None
 12835 ;; Auto vars:     Size  Location     Type
 12836 ;;		None
 12837 ;; Return value:  Size  Location     Type
 12838 ;;                  1    wreg      void 
 12839 ;; Registers used:
 12840 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12841 ;; Tracked objects:
 12842 ;;		On entry : 0/0
 12843 ;;		On exit  : 0/0
 12844 ;;		Unchanged: 0/0
 12845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12848 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12850 ;;Total ram usage:        2 bytes
 12851 ;; Hardware stack levels used:    1
 12852 ;; Hardware stack levels required when called:    9
 12853 ;; This function calls:
 12854 ;;		_Busy_eep
 12855 ;;		_Lcd_Print_String
 12856 ;;		_Write_b_eep
 12857 ;;		_clear_row1
 12858 ;;		_clear_row2
 12859 ;; This function is called by:
 12860 ;;		_Function_G
 12861 ;; This function uses a non-reentrant model
 12862 ;;
 12863                           
 12864                           	psect	text28
 12865  008A68                     __ptext28:
 12866                           	opt stack 0
 12867  008A68                     _Function_G_3:
 12868                           	opt stack 19
 12869                           
 12870                           ;menu.c: 920: while(encoder_click == 0);
 12871                           
 12872                           ; BSR set to: 0
 12873                           ;incstack = 0
 12874  008A68  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12875  008A6A  D7FE               	goto	_Function_G_3
 12876                           
 12877                           ;menu.c: 922: (Busy_eep(), Write_b_eep(0,0x00));
 12878  008A6C  EC31  F04B         	call	_Busy_eep	;wreg free
 12879  008A70  0E00               	movlw	0
 12880  008A72  0100               	movlb	0	; () banked
 12881  008A74  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12882  008A76  0E00               	movlw	0
 12883  008A78  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12884  008A7A  0E00               	movlw	0
 12885  008A7C  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 12886  008A7E  ECDC  F047         	call	_Write_b_eep	;wreg free
 12887                           
 12888                           ;menu.c: 924: clear_row1();
 12889  008A82  EC52  F04A         	call	_clear_row1	;wreg free
 12890                           
 12891                           ;menu.c: 925: Lcd_Print_String("Restore Setting!");
 12892  008A86  0E86               	movlw	low STR_37
 12893  008A88  0100               	movlb	0	; () banked
 12894  008A8A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12895  008A8C  0EFD               	movlw	high STR_37
 12896  008A8E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12897  008A90  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 12898                           
 12899                           ;menu.c: 926: clear_row2();
 12900  008A94  EC3E  F04A         	call	_clear_row2	;wreg free
 12901                           
 12902                           ;menu.c: 927: Lcd_Print_String("Rebooting...");
 12903  008A98  0E25               	movlw	low STR_38
 12904  008A9A  0100               	movlb	0	; () banked
 12905  008A9C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12906  008A9E  0EFF               	movlw	high STR_38
 12907  008AA0  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12908  008AA2  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 12909                           
 12910                           ;menu.c: 928: _delay((unsigned long)((2500)*(20000000/4000.0)));
 12911  008AA6  0E40               	movlw	64
 12912  008AA8  0100               	movlb	0	; () banked
 12913  008AAA  6F71               	movwf	(??_Function_G_3+1)& (0+255),b
 12914  008AAC  0E6A               	movlw	106
 12915  008AAE  6F70               	movwf	??_Function_G_3& (0+255),b
 12916  008AB0  0E97               	movlw	151
 12917  008AB2                     u44847:
 12918  008AB2  2EE8               	decfsz	wreg,f,c
 12919  008AB4  D7FE               	bra	u44847
 12920  008AB6  2F70               	decfsz	??_Function_G_3& (0+255),f,b
 12921  008AB8  D7FC               	bra	u44847
 12922  008ABA  2F71               	decfsz	(??_Function_G_3+1)& (0+255),f,b
 12923  008ABC  D7FA               	bra	u44847
 12924  008ABE  D000               	nop2	
 12925  008AC0  00FF               	reset		;# 
 12926  008AC2  0012               	return		;funcret
 12927  008AC4                     __end_of_Function_G_3:
 12928                           	opt stack 0
 12929                           tblptru	equ	0xFF8
 12930                           tblptrh	equ	0xFF7
 12931                           tblptrl	equ	0xFF6
 12932                           tablat	equ	0xFF5
 12933                           prodh	equ	0xFF4
 12934                           prodl	equ	0xFF3
 12935                           intcon	equ	0xFF2
 12936                           intcon2	equ	0xFF1
 12937                           postinc0	equ	0xFEE
 12938                           wreg	equ	0xFE8
 12939                           postdec1	equ	0xFE5
 12940                           fsr1l	equ	0xFE1
 12941                           indf2	equ	0xFDF
 12942                           postinc2	equ	0xFDE
 12943                           fsr2h	equ	0xFDA
 12944                           fsr2l	equ	0xFD9
 12945                           status	equ	0xFD8
 12946                           
 12947 ;; *************** function _Function_G_2 *****************
 12948 ;; Defined at:
 12949 ;;		line 889 in file "menu.c"
 12950 ;; Parameters:    Size  Location     Type
 12951 ;;		None
 12952 ;; Auto vars:     Size  Location     Type
 12953 ;;		None
 12954 ;; Return value:  Size  Location     Type
 12955 ;;                  1    wreg      void 
 12956 ;; Registers used:
 12957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12958 ;; Tracked objects:
 12959 ;;		On entry : 0/0
 12960 ;;		On exit  : 0/0
 12961 ;;		Unchanged: 0/0
 12962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12967 ;;Total ram usage:        1 bytes
 12968 ;; Hardware stack levels used:    1
 12969 ;; Hardware stack levels required when called:   10
 12970 ;; This function calls:
 12971 ;;		_Busy_eep
 12972 ;;		_Lcd_Print_String
 12973 ;;		_Write_b_eep
 12974 ;;		___lbmod
 12975 ;;		___wmul
 12976 ;;		_clear_row1
 12977 ;;		_clear_row2
 12978 ;;		_eepromExit
 12979 ;;		_exitLoad
 12980 ;;		_loadFromEEPROM
 12981 ;;		_processEncoderBuxton
 12982 ;; This function is called by:
 12983 ;;		_Function_G
 12984 ;; This function uses a non-reentrant model
 12985 ;;
 12986                           
 12987                           	psect	text29
 12988  00723C                     __ptext29:
 12989                           	opt stack 0
 12990  00723C                     _Function_G_2:
 12991                           	opt stack 18
 12992                           
 12993                           ;menu.c: 891: which_screen = SAVES_MENU;
 12994                           
 12995                           ;incstack = 0
 12996  00723C  0E17               	movlw	23
 12997  00723E  0100               	movlb	0	; () banked
 12998  007240  6FF9               	movwf	_which_screen& (0+255),b
 12999                           
 13000                           ; BSR set to: 0
 13001                           ;menu.c: 892: encoder_click = 0;
 13002  007242  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13003                           
 13004                           ; BSR set to: 0
 13005                           ;menu.c: 893: lcd_print_once = 0;
 13006  007244  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13007                           
 13008                           ;menu.c: 895: while(encoder_click == 0) {
 13009  007246  D02C               	goto	l3597
 13010  007248                     
 13011                           ;menu.c: 896: processEncoderBuxton();
 13012                           
 13013                           ; BSR set to: 0
 13014  007248  EC09  F000         	call	_processEncoderBuxton	;wreg free
 13015                           
 13016                           ;menu.c: 897: if (lcd_print_once == 0) {
 13017  00724C  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13018  00724E  D027               	goto	l3599
 13019                           
 13020                           ;menu.c: 898: clear_row1();
 13021  007250  EC52  F04A         	call	_clear_row1	;wreg free
 13022                           
 13023                           ;menu.c: 899: Lcd_Print_String("Load #:");
 13024  007254  0EB3               	movlw	low STR_36
 13025  007256  0100               	movlb	0	; () banked
 13026  007258  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 13027  00725A  0EFF               	movlw	high STR_36
 13028  00725C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13029  00725E  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 13030                           
 13031                           ;menu.c: 900: clear_row2();
 13032  007262  EC3E  F04A         	call	_clear_row2	;wreg free
 13033                           
 13034                           ;menu.c: 901: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sav
      +                          esMenu.address]);
 13035  007266  C0DF  F060         	movff	_savesMenu,___lbmod@divisor
 13036  00726A  0100               	movlb	0	; () banked
 13037  00726C  51E1               	movf	(_savesMenu+2)& (0+255),w,b
 13038  00726E  ECBD  F049         	call	___lbmod
 13039  007272  0100               	movlb	0	; () banked
 13040  007274  6FCC               	movwf	??_Function_G_2& (0+255),b
 13041  007276  51CC               	movf	??_Function_G_2& (0+255),w,b
 13042  007278  25E0               	addwf	(_savesMenu+1)& (0+255),w,b
 13043  00727A  6F64               	movwf	___wmul@multiplier& (0+255),b
 13044  00727C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 13045  00727E  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 13046  007280  0E00               	movlw	0
 13047  007282  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13048  007284  0E11               	movlw	17
 13049  007286  6F66               	movwf	___wmul@multiplicand& (0+255),b
 13050  007288  EC66  F04A         	call	___wmul	;wreg free
 13051  00728C  0E9E               	movlw	low _LCD_STRINGS
 13052  00728E  0100               	movlb	0	; () banked
 13053  007290  2564               	addwf	?___wmul& (0+255),w,b
 13054  007292  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 13055  007294  0EF3               	movlw	high _LCD_STRINGS
 13056  007296  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 13057  007298  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13058  00729A  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 13059  00729E                     l3599:
 13060                           
 13061                           ;menu.c: 902: }
 13062                           ;menu.c: 903: lcd_print_once = 1;
 13063  00729E  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13064  0072A0                     l3597:
 13065  0072A0  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13066  0072A2  D7D2               	goto	l3598
 13067                           
 13068                           ;menu.c: 904: }
 13069                           ;menu.c: 906: if(savesMenu.selector == 4){eepromExit();}
 13070  0072A4  0E04               	movlw	4
 13071  0072A6  0100               	movlb	0	; () banked
 13072  0072A8  19E1               	xorwf	(_savesMenu+2)& (0+255),w,b
 13073  0072AA  A4D8               	btfss	status,2,c
 13074  0072AC  D003               	goto	l3601
 13075                           
 13076                           ; BSR set to: 0
 13077  0072AE  EC77  F048         	call	_eepromExit	;wreg free
 13078  0072B2  D011               	goto	l3602
 13079  0072B4                     l3601:
 13080                           
 13081                           ;menu.c: 907: else {
 13082                           ;menu.c: 909: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 13083  0072B4  EC31  F04B         	call	_Busy_eep	;wreg free
 13084  0072B8  0E00               	movlw	0
 13085  0072BA  0100               	movlb	0	; () banked
 13086  0072BC  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 13087  0072BE  0E00               	movlw	0
 13088  0072C0  6F60               	movwf	Write_b_eep@badd& (0+255),b
 13089  0072C2  29E1               	incf	(_savesMenu+2)& (0+255),w,b
 13090  0072C4  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 13091  0072C6  ECDC  F047         	call	_Write_b_eep	;wreg free
 13092                           
 13093                           ;menu.c: 910: loadFromEEPROM(savesMenu.selector + 1);
 13094  0072CA  0100               	movlb	0	; () banked
 13095  0072CC  29E1               	incf	(_savesMenu+2)& (0+255),w,b
 13096  0072CE  EC24  F025         	call	_loadFromEEPROM
 13097                           
 13098                           ;menu.c: 911: exitLoad();
 13099  0072D2  EC3B  F048         	call	_exitLoad	;wreg free
 13100  0072D6                     l3602:
 13101                           
 13102                           ;menu.c: 912: }
 13103                           ;menu.c: 914: savesMenu.selector = 0;
 13104  0072D6  0E00               	movlw	0
 13105  0072D8  0100               	movlb	0	; () banked
 13106  0072DA  6FE1               	movwf	(_savesMenu+2)& (0+255),b
 13107                           
 13108                           ; BSR set to: 0
 13109  0072DC  0012               	return		;funcret
 13110  0072DE                     __end_of_Function_G_2:
 13111                           	opt stack 0
 13112                           tblptru	equ	0xFF8
 13113                           tblptrh	equ	0xFF7
 13114                           tblptrl	equ	0xFF6
 13115                           tablat	equ	0xFF5
 13116                           prodh	equ	0xFF4
 13117                           prodl	equ	0xFF3
 13118                           intcon	equ	0xFF2
 13119                           intcon2	equ	0xFF1
 13120                           postinc0	equ	0xFEE
 13121                           wreg	equ	0xFE8
 13122                           postdec1	equ	0xFE5
 13123                           fsr1l	equ	0xFE1
 13124                           indf2	equ	0xFDF
 13125                           postinc2	equ	0xFDE
 13126                           fsr2h	equ	0xFDA
 13127                           fsr2l	equ	0xFD9
 13128                           status	equ	0xFD8
 13129                           
 13130 ;; *************** function _loadFromEEPROM *****************
 13131 ;; Defined at:
 13132 ;;		line 54 in file "eeprom.c"
 13133 ;; Parameters:    Size  Location     Type
 13134 ;;  slotNumber      1    wreg     unsigned char 
 13135 ;; Auto vars:     Size  Location     Type
 13136 ;;  slotNumber      1   77[BANK1 ] unsigned char 
 13137 ;;  byte_count      2   78[BANK1 ] unsigned int 
 13138 ;;  to_load        75    0[BANK1 ] unsigned char [75]
 13139 ;;  baseAddress     2   75[BANK1 ] unsigned int 
 13140 ;; Return value:  Size  Location     Type
 13141 ;;                  1    wreg      void 
 13142 ;; Registers used:
 13143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13144 ;; Tracked objects:
 13145 ;;		On entry : 0/0
 13146 ;;		On exit  : 0/0
 13147 ;;		Unchanged: 0/0
 13148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13150 ;;      Locals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13152 ;;      Totals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13153 ;;Total ram usage:       80 bytes
 13154 ;; Hardware stack levels used:    1
 13155 ;; Hardware stack levels required when called:    7
 13156 ;; This function calls:
 13157 ;;		_Read_b_eep
 13158 ;;		_calculate_pulse_length
 13159 ;; This function is called by:
 13160 ;;		_Function_G_2
 13161 ;;		_selectSlotOnBoot
 13162 ;; This function uses a non-reentrant model
 13163 ;;
 13164                           
 13165                           	psect	text30
 13166  004A48                     __ptext30:
 13167                           	opt stack 0
 13168  004A48                     _loadFromEEPROM:
 13169                           	opt stack 22
 13170                           
 13171                           ; BSR set to: 0
 13172                           ;incstack = 0
 13173                           ;loadFromEEPROM@slotNumber stored from wreg
 13174  004A48  0101               	movlb	1	; () banked
 13175  004A4A  6FD4               	movwf	loadFromEEPROM@slotNumber& (0+255),b
 13176                           
 13177                           ;eeprom.c: 56: unsigned int baseAddress = 0;
 13178  004A4C  0E00               	movlw	0
 13179  004A4E  0101               	movlb	1	; () banked
 13180  004A50  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13181  004A52  0E00               	movlw	0
 13182  004A54  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13183                           
 13184                           ; BSR set to: 1
 13185                           ;eeprom.c: 59: if (slotNumber == SLOT1) {baseAddress = 128;}
 13186  004A56  05D4               	decf	loadFromEEPROM@slotNumber& (0+255),w,b
 13187  004A58  A4D8               	btfss	status,2,c
 13188  004A5A  D004               	goto	l4279
 13189                           
 13190                           ; BSR set to: 1
 13191  004A5C  0E00               	movlw	0
 13192  004A5E  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13193  004A60  0E80               	movlw	128
 13194  004A62  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13195  004A64                     l4279:
 13196                           
 13197                           ; BSR set to: 1
 13198                           ;eeprom.c: 60: if (slotNumber == SLOT2) {baseAddress = 256;}
 13199                           
 13200                           ; BSR set to: 1
 13201  004A64  0E02               	movlw	2
 13202  004A66  19D4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13203  004A68  A4D8               	btfss	status,2,c
 13204  004A6A  D004               	goto	l4280
 13205                           
 13206                           ; BSR set to: 1
 13207  004A6C  0E01               	movlw	1
 13208  004A6E  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13209  004A70  0E00               	movlw	0
 13210  004A72  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13211  004A74                     l4280:
 13212                           
 13213                           ; BSR set to: 1
 13214                           ;eeprom.c: 61: if (slotNumber == SLOT3) {baseAddress = 384;}
 13215                           
 13216                           ; BSR set to: 1
 13217  004A74  0E03               	movlw	3
 13218  004A76  19D4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13219  004A78  A4D8               	btfss	status,2,c
 13220  004A7A  D004               	goto	l4281
 13221                           
 13222                           ; BSR set to: 1
 13223  004A7C  0E01               	movlw	1
 13224  004A7E  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13225  004A80  0E80               	movlw	128
 13226  004A82  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13227  004A84                     l4281:
 13228                           
 13229                           ; BSR set to: 1
 13230                           ;eeprom.c: 62: if (slotNumber == SLOT4) {baseAddress = 512;}
 13231                           
 13232                           ; BSR set to: 1
 13233  004A84  0E04               	movlw	4
 13234  004A86  19D4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13235  004A88  A4D8               	btfss	status,2,c
 13236  004A8A  D004               	goto	l4282
 13237                           
 13238                           ; BSR set to: 1
 13239  004A8C  0E02               	movlw	2
 13240  004A8E  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13241  004A90  0E00               	movlw	0
 13242  004A92  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13243  004A94                     l4282:
 13244                           
 13245                           ; BSR set to: 1
 13246                           ;eeprom.c: 65: unsigned char to_load[75];
 13247                           ;eeprom.c: 68: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 13248  004A94  0E00               	movlw	0
 13249  004A96  6FD6               	movwf	(loadFromEEPROM@byte_count+1)& (0+255),b
 13250  004A98  0E00               	movlw	0
 13251  004A9A  6FD5               	movwf	loadFromEEPROM@byte_count& (0+255),b
 13252                           
 13253                           ; BSR set to: 1
 13254  004A9C  51D6               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13255  004A9E  E11C               	bnz	l4284
 13256  004AA0  D017               	goto	L1
 13257  004AA2                     
 13258                           ; BSR set to: 1
 13259                           ;eeprom.c: 69: to_load[byte_count] = Read_b_eep(byte_count + baseAddress);
 13260                           
 13261                           ; BSR set to: 1
 13262  004AA2  0E87               	movlw	low loadFromEEPROM@to_load
 13263  004AA4  25D5               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13264  004AA6  6ED9               	movwf	fsr2l,c
 13265  004AA8  0E01               	movlw	high loadFromEEPROM@to_load
 13266  004AAA  21D6               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13267  004AAC  6EDA               	movwf	fsr2h,c
 13268  004AAE  51D2               	movf	loadFromEEPROM@baseAddress& (0+255),w,b
 13269  004AB0  25D5               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13270  004AB2  0100               	movlb	0	; () banked
 13271  004AB4  6F60               	movwf	Read_b_eep@badd& (0+255),b
 13272  004AB6  0101               	movlb	1	; () banked
 13273  004AB8  51D3               	movf	(loadFromEEPROM@baseAddress+1)& (0+255),w,b
 13274  004ABA  21D6               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13275  004ABC  0100               	movlb	0	; () banked
 13276  004ABE  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 13277  004AC0  ECEA  F04A         	call	_Read_b_eep	;wreg free
 13278  004AC4  6EDF               	movwf	indf2,c
 13279  004AC6  0101               	movlb	1	; () banked
 13280  004AC8  4BD5               	infsnz	loadFromEEPROM@byte_count& (0+255),f,b
 13281  004ACA  2BD6               	incf	(loadFromEEPROM@byte_count+1)& (0+255),f,b
 13282                           
 13283                           ; BSR set to: 1
 13284  004ACC  51D6               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13285  004ACE  E104               	bnz	u29100
 13286  004AD0                     L1:
 13287  004AD0  0E4B               	movlw	75
 13288  004AD2  5DD5               	subwf	loadFromEEPROM@byte_count& (0+255),w,b
 13289  004AD4  A0D8               	btfss	status,0,c
 13290  004AD6  D7E5               	goto	l4283
 13291  004AD8                     u29100:
 13292  004AD8                     l4284:
 13293                           
 13294                           ; BSR set to: 1
 13295                           ;eeprom.c: 70: }
 13296                           ;eeprom.c: 75: KEYBOARD_MODE = to_load[0];
 13297  004AD8  C187  F0F2         	movff	loadFromEEPROM@to_load,_KEYBOARD_MODE
 13298                           
 13299                           ;eeprom.c: 76: which_mode = to_load[1];
 13300  004ADC  C188  F0F1         	movff	loadFromEEPROM@to_load+1,_which_mode
 13301                           
 13302                           ;eeprom.c: 77: which_triad = to_load[2];
 13303  004AE0  C189  F0F0         	movff	loadFromEEPROM@to_load+2,_which_triad
 13304                           
 13305                           ;eeprom.c: 78: which_seventh = to_load[3];
 13306  004AE4  C18A  F0EF         	movff	loadFromEEPROM@to_load+3,_which_seventh
 13307                           
 13308                           ;eeprom.c: 81: TRANSPOSE_MODE = to_load[4];
 13309  004AE8  A18B               	btfss	(loadFromEEPROM@to_load+4)& (0+255),0,b
 13310  004AEA  D002               	goto	u29110
 13311  004AEC  8C35               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13312  004AEE  D001               	goto	u29125
 13313  004AF0                     u29110:
 13314  004AF0  9C35               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13315  004AF2                     u29125:
 13316                           
 13317                           ;eeprom.c: 84: DRUM_MODE = to_load[5];
 13318  004AF2  0101               	movlb	1	; () banked
 13319  004AF4  A18C               	btfss	(loadFromEEPROM@to_load+5)& (0+255),0,b
 13320  004AF6  D002               	goto	u29130
 13321  004AF8  8A32               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13322  004AFA  D001               	goto	u29145
 13323  004AFC                     u29130:
 13324  004AFC  9A32               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13325  004AFE                     u29145:
 13326                           
 13327                           ;eeprom.c: 85: CONTROL_MODE = to_load[6];
 13328  004AFE  0101               	movlb	1	; () banked
 13329  004B00  A18D               	btfss	(loadFromEEPROM@to_load+6)& (0+255),0,b
 13330  004B02  D002               	goto	u29150
 13331  004B04  8832               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13332  004B06  D001               	goto	u29165
 13333  004B08                     u29150:
 13334  004B08  9832               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13335  004B0A                     u29165:
 13336                           
 13337                           ;eeprom.c: 88: DRUM_NOTE[0] = to_load[7];
 13338  004B0A  C18E  F1DF         	movff	loadFromEEPROM@to_load+7,_DRUM_NOTE
 13339                           
 13340                           ;eeprom.c: 89: DRUM_NOTE[1] = to_load[8];
 13341  004B0E  C18F  F1E0         	movff	loadFromEEPROM@to_load+8,_DRUM_NOTE+1
 13342                           
 13343                           ;eeprom.c: 90: DRUM_NOTE[2] = to_load[9];
 13344  004B12  C190  F1E1         	movff	loadFromEEPROM@to_load+9,_DRUM_NOTE+2
 13345                           
 13346                           ;eeprom.c: 91: DRUM_NOTE[3] = to_load[10];
 13347  004B16  C191  F1E2         	movff	loadFromEEPROM@to_load+10,_DRUM_NOTE+3
 13348                           
 13349                           ;eeprom.c: 92: DRUM_NOTE[4] = to_load[11];
 13350  004B1A  C192  F1E3         	movff	loadFromEEPROM@to_load+11,_DRUM_NOTE+4
 13351                           
 13352                           ;eeprom.c: 93: DRUM_NOTE[5] = to_load[12];
 13353  004B1E  C193  F1E4         	movff	loadFromEEPROM@to_load+12,_DRUM_NOTE+5
 13354                           
 13355                           ;eeprom.c: 94: DRUM_NOTE[6] = to_load[13];
 13356  004B22  C194  F1E5         	movff	loadFromEEPROM@to_load+13,_DRUM_NOTE+6
 13357                           
 13358                           ;eeprom.c: 95: DRUM_NOTE[7] = to_load[14];
 13359  004B26  C195  F1E6         	movff	loadFromEEPROM@to_load+14,_DRUM_NOTE+7
 13360                           
 13361                           ;eeprom.c: 98: DRUM_CC[0] = to_load[15];
 13362  004B2A  C196  F1D7         	movff	loadFromEEPROM@to_load+15,_DRUM_CC
 13363                           
 13364                           ;eeprom.c: 99: DRUM_CC[1] = to_load[16];
 13365  004B2E  C197  F1D8         	movff	loadFromEEPROM@to_load+16,_DRUM_CC+1
 13366                           
 13367                           ;eeprom.c: 100: DRUM_CC[2] = to_load[17];
 13368  004B32  C198  F1D9         	movff	loadFromEEPROM@to_load+17,_DRUM_CC+2
 13369                           
 13370                           ;eeprom.c: 101: DRUM_CC[3] = to_load[18];
 13371  004B36  C199  F1DA         	movff	loadFromEEPROM@to_load+18,_DRUM_CC+3
 13372                           
 13373                           ;eeprom.c: 102: DRUM_CC[4] = to_load[19];
 13374  004B3A  C19A  F1DB         	movff	loadFromEEPROM@to_load+19,_DRUM_CC+4
 13375                           
 13376                           ;eeprom.c: 103: DRUM_CC[5] = to_load[20];
 13377  004B3E  C19B  F1DC         	movff	loadFromEEPROM@to_load+20,_DRUM_CC+5
 13378                           
 13379                           ;eeprom.c: 104: DRUM_CC[6] = to_load[21];
 13380  004B42  C19C  F1DD         	movff	loadFromEEPROM@to_load+21,_DRUM_CC+6
 13381                           
 13382                           ;eeprom.c: 105: DRUM_CC[7] = to_load[22];
 13383  004B46  C19D  F1DE         	movff	loadFromEEPROM@to_load+22,_DRUM_CC+7
 13384                           
 13385                           ;eeprom.c: 108: POT_MODE = to_load[23];
 13386  004B4A  0101               	movlb	1	; () banked
 13387  004B4C  A19E               	btfss	(loadFromEEPROM@to_load+23)& (0+255),0,b
 13388  004B4E  D002               	goto	u29170
 13389  004B50  8836               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13390  004B52  D001               	goto	u29185
 13391  004B54                     u29170:
 13392  004B54  9836               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13393  004B56                     u29185:
 13394                           
 13395                           ;eeprom.c: 111: inputPotsArray[0].controller_number = to_load[24];
 13396  004B56  C19F  F2AD         	movff	loadFromEEPROM@to_load+24,_inputPotsArray+1
 13397                           
 13398                           ;eeprom.c: 112: inputPotsArray[0].controller_number_two_byte = to_load[25];
 13399  004B5A  C1A0  F2AE         	movff	loadFromEEPROM@to_load+25,_inputPotsArray+2
 13400                           
 13401                           ;eeprom.c: 114: inputPotsArray[1].controller_number = to_load[26];
 13402  004B5E  C1A1  F2B0         	movff	loadFromEEPROM@to_load+26,_inputPotsArray+4
 13403                           
 13404                           ;eeprom.c: 115: inputPotsArray[1].controller_number_two_byte = to_load[27];
 13405  004B62  C1A2  F2B1         	movff	loadFromEEPROM@to_load+27,_inputPotsArray+5
 13406                           
 13407                           ;eeprom.c: 117: inputPotsArray[2].controller_number = to_load[28];
 13408  004B66  C1A3  F2B3         	movff	loadFromEEPROM@to_load+28,_inputPotsArray+7
 13409                           
 13410                           ;eeprom.c: 118: inputPotsArray[2].controller_number_two_byte = to_load[29];
 13411  004B6A  C1A4  F2B4         	movff	loadFromEEPROM@to_load+29,_inputPotsArray+8
 13412                           
 13413                           ;eeprom.c: 120: inputPotsArray[3].controller_number = to_load[30];
 13414  004B6E  C1A5  F2B6         	movff	loadFromEEPROM@to_load+30,_inputPotsArray+10
 13415                           
 13416                           ;eeprom.c: 121: inputPotsArray[3].controller_number_two_byte = to_load[31];
 13417  004B72  C1A6  F2B7         	movff	loadFromEEPROM@to_load+31,_inputPotsArray+11
 13418                           
 13419                           ;eeprom.c: 123: inputPotsArray[4].controller_number = to_load[32];
 13420  004B76  C1A7  F2B9         	movff	loadFromEEPROM@to_load+32,_inputPotsArray+13
 13421                           
 13422                           ;eeprom.c: 124: inputPotsArray[4].controller_number_two_byte = to_load[33];
 13423  004B7A  C1A8  F2BA         	movff	loadFromEEPROM@to_load+33,_inputPotsArray+14
 13424                           
 13425                           ;eeprom.c: 126: inputPotsArray[5].controller_number = to_load[34];
 13426  004B7E  C1A9  F2BC         	movff	loadFromEEPROM@to_load+34,_inputPotsArray+16
 13427                           
 13428                           ;eeprom.c: 127: inputPotsArray[5].controller_number_two_byte = to_load[35];
 13429  004B82  C1AA  F2BD         	movff	loadFromEEPROM@to_load+35,_inputPotsArray+17
 13430                           
 13431                           ;eeprom.c: 129: inputPotsArray[6].controller_number = to_load[36];
 13432  004B86  C1AB  F2BF         	movff	loadFromEEPROM@to_load+36,_inputPotsArray+19
 13433                           
 13434                           ;eeprom.c: 130: inputPotsArray[6].controller_number_two_byte = to_load[37];
 13435  004B8A  C1AC  F2C0         	movff	loadFromEEPROM@to_load+37,_inputPotsArray+20
 13436                           
 13437                           ;eeprom.c: 134: inputPotsArray[7].controller_number = to_load[38];
 13438  004B8E  C1AD  F2C2         	movff	loadFromEEPROM@to_load+38,_inputPotsArray+22
 13439                           
 13440                           ;eeprom.c: 135: inputPotsArray[7].controller_number_two_byte = to_load[39];
 13441  004B92  C1AE  F2C3         	movff	loadFromEEPROM@to_load+39,_inputPotsArray+23
 13442                           
 13443                           ;eeprom.c: 137: inputPotsArray[8].controller_number = to_load[40];
 13444  004B96  C1AF  F2C5         	movff	loadFromEEPROM@to_load+40,_inputPotsArray+25
 13445                           
 13446                           ;eeprom.c: 138: inputPotsArray[8].controller_number_two_byte = to_load[41];
 13447  004B9A  C1B0  F2C6         	movff	loadFromEEPROM@to_load+41,_inputPotsArray+26
 13448                           
 13449                           ;eeprom.c: 140: inputPotsArray[9].controller_number = to_load[42];
 13450  004B9E  C1B1  F2C8         	movff	loadFromEEPROM@to_load+42,_inputPotsArray+28
 13451                           
 13452                           ;eeprom.c: 141: inputPotsArray[9].controller_number_two_byte = to_load[43];
 13453  004BA2  C1B2  F2C9         	movff	loadFromEEPROM@to_load+43,_inputPotsArray+29
 13454                           
 13455                           ;eeprom.c: 143: inputPotsArray[10].controller_number = to_load[44];
 13456  004BA6  C1B3  F2CB         	movff	loadFromEEPROM@to_load+44,_inputPotsArray+31
 13457                           
 13458                           ;eeprom.c: 144: inputPotsArray[10].controller_number_two_byte = to_load[45];
 13459  004BAA  C1B4  F2CC         	movff	loadFromEEPROM@to_load+45,_inputPotsArray+32
 13460                           
 13461                           ;eeprom.c: 146: inputPotsArray[11].controller_number = to_load[46];
 13462  004BAE  C1B5  F2CE         	movff	loadFromEEPROM@to_load+46,_inputPotsArray+34
 13463                           
 13464                           ;eeprom.c: 147: inputPotsArray[11].controller_number_two_byte = to_load[47];
 13465  004BB2  C1B6  F2CF         	movff	loadFromEEPROM@to_load+47,_inputPotsArray+35
 13466                           
 13467                           ;eeprom.c: 149: inputPotsArray[12].controller_number = to_load[48];
 13468  004BB6  C1B7  F2D1         	movff	loadFromEEPROM@to_load+48,_inputPotsArray+37
 13469                           
 13470                           ;eeprom.c: 150: inputPotsArray[12].controller_number_two_byte = to_load[49];
 13471  004BBA  C1B8  F2D2         	movff	loadFromEEPROM@to_load+49,_inputPotsArray+38
 13472                           
 13473                           ;eeprom.c: 152: inputPotsArray[13].controller_number = to_load[50];
 13474  004BBE  C1B9  F2D4         	movff	loadFromEEPROM@to_load+50,_inputPotsArray+40
 13475                           
 13476                           ;eeprom.c: 153: inputPotsArray[13].controller_number_two_byte = to_load[51];
 13477  004BC2  C1BA  F2D5         	movff	loadFromEEPROM@to_load+51,_inputPotsArray+41
 13478                           
 13479                           ;eeprom.c: 155: inputPotsArray[14].controller_number = to_load[52];
 13480  004BC6  C1BB  F2D7         	movff	loadFromEEPROM@to_load+52,_inputPotsArray+43
 13481                           
 13482                           ;eeprom.c: 156: inputPotsArray[14].controller_number_two_byte = to_load[53];
 13483  004BCA  C1BC  F2D8         	movff	loadFromEEPROM@to_load+53,_inputPotsArray+44
 13484                           
 13485                           ;eeprom.c: 158: inputPotsArray[15].controller_number = to_load[54];
 13486  004BCE  C1BD  F2DA         	movff	loadFromEEPROM@to_load+54,_inputPotsArray+46
 13487                           
 13488                           ;eeprom.c: 159: inputPotsArray[15].controller_number_two_byte = to_load[55];
 13489  004BD2  C1BE  F2DB         	movff	loadFromEEPROM@to_load+55,_inputPotsArray+47
 13490                           
 13491                           ;eeprom.c: 163: channel = to_load[56];
 13492  004BD6  C1BF  F0F6         	movff	loadFromEEPROM@to_load+56,_channel
 13493                           
 13494                           ;eeprom.c: 164: drumchannel = to_load[57];
 13495  004BDA  C1C0  F0FE         	movff	loadFromEEPROM@to_load+57,_drumchannel
 13496                           
 13497                           ;eeprom.c: 167: octave = to_load[58];
 13498  004BDE  C1C1  F0FC         	movff	loadFromEEPROM@to_load+58,_octave
 13499                           
 13500                           ;eeprom.c: 168: semitone = to_load[59];
 13501  004BE2  C1C2  F0F3         	movff	loadFromEEPROM@to_load+59,_semitone
 13502                           
 13503                           ;eeprom.c: 171: patch_number = to_load[60];
 13504  004BE6  C1C3  F171         	movff	loadFromEEPROM@to_load+60,_patch_number
 13505                           
 13506                           ;eeprom.c: 174: ARPEGGIO_ON = to_load[61];
 13507  004BEA  0101               	movlb	1	; () banked
 13508  004BEC  A1C4               	btfss	(loadFromEEPROM@to_load+61)& (0+255),0,b
 13509  004BEE  D002               	goto	u29190
 13510  004BF0  8835               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13511  004BF2  D001               	goto	u29205
 13512  004BF4                     u29190:
 13513  004BF4  9835               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13514  004BF6                     u29205:
 13515                           
 13516                           ;eeprom.c: 175: BPM = to_load[62];
 13517  004BF6  C1C5  F0FF         	movff	loadFromEEPROM@to_load+62,_BPM
 13518                           
 13519                           ;eeprom.c: 177: TIMER_PRELOAD = calculate_pulse_length();
 13520  004BFA  EC7A  F02E         	call	_calculate_pulse_length	;wreg free
 13521  004BFE  C0C2  F16D         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 13522  004C02  C0C3  F16E         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 13523                           
 13524                           ;eeprom.c: 179: OCTAVES = to_load[63];
 13525  004C06  C1C6  F0F8         	movff	loadFromEEPROM@to_load+63,_OCTAVES
 13526                           
 13527                           ;eeprom.c: 180: ARPEGGIO_TYPE = to_load[64];
 13528  004C0A  C1C7  F0EA         	movff	loadFromEEPROM@to_load+64,_ARPEGGIO_TYPE
 13529                           
 13530                           ;eeprom.c: 181: NOTE_LENGTH_PULSES = to_load[65];
 13531  004C0E  C1C8  F0F7         	movff	loadFromEEPROM@to_load+65,_NOTE_LENGTH_PULSES
 13532                           
 13533                           ;eeprom.c: 182: LATCH = to_load[66];
 13534  004C12  0101               	movlb	1	; () banked
 13535  004C14  A1C9               	btfss	(loadFromEEPROM@to_load+66)& (0+255),0,b
 13536  004C16  D002               	goto	u29210
 13537  004C18  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 13538  004C1A  D001               	goto	u29225
 13539  004C1C                     u29210:
 13540  004C1C  9235               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 13541  004C1E                     u29225:
 13542                           
 13543                           ;eeprom.c: 183: AUTO_LATCH = to_load[67];
 13544  004C1E  0101               	movlb	1	; () banked
 13545  004C20  A1CA               	btfss	(loadFromEEPROM@to_load+67)& (0+255),0,b
 13546  004C22  D002               	goto	u29230
 13547  004C24  8E34               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13548  004C26  D001               	goto	u29245
 13549  004C28                     u29230:
 13550  004C28  9E34               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13551  004C2A                     u29245:
 13552                           
 13553                           ;eeprom.c: 184: UN_LATCH_MODE = to_load[68];
 13554  004C2A  0101               	movlb	1	; () banked
 13555  004C2C  A1CB               	btfss	(loadFromEEPROM@to_load+68)& (0+255),0,b
 13556  004C2E  D002               	goto	u29250
 13557  004C30  8035               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13558  004C32  D001               	goto	u29265
 13559  004C34                     u29250:
 13560  004C34  9035               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13561  004C36                     u29265:
 13562                           
 13563                           ;eeprom.c: 185: AUTO_RANDOMIZE = to_load[69];
 13564  004C36  0101               	movlb	1	; () banked
 13565  004C38  A1CC               	btfss	(loadFromEEPROM@to_load+69)& (0+255),0,b
 13566  004C3A  D002               	goto	u29270
 13567  004C3C  8A34               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13568  004C3E  D001               	goto	u29285
 13569  004C40                     u29270:
 13570  004C40  9A34               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13571  004C42                     u29285:
 13572                           
 13573                           ;eeprom.c: 186: skipFirstLast = to_load[70];
 13574  004C42  0101               	movlb	1	; () banked
 13575  004C44  A1CD               	btfss	(loadFromEEPROM@to_load+70)& (0+255),0,b
 13576  004C46  D002               	goto	u29290
 13577  004C48  8834               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13578  004C4A  D001               	goto	u29305
 13579  004C4C                     u29290:
 13580  004C4C  9834               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13581  004C4E                     u29305:
 13582                           
 13583                           ;eeprom.c: 187: LAST_NOTE_MODE_KEY_PRESS = to_load[71];
 13584  004C4E  0101               	movlb	1	; () banked
 13585  004C50  A1CE               	btfss	(loadFromEEPROM@to_load+71)& (0+255),0,b
 13586  004C52  D002               	goto	u29310
 13587  004C54  8434               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13588  004C56  D001               	goto	u29325
 13589  004C58                     u29310:
 13590  004C58  9434               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13591  004C5A                     u29325:
 13592                           
 13593                           ;eeprom.c: 188: LAST_NOTE_MODE_KEY_RELEASE = to_load[72];
 13594  004C5A  0101               	movlb	1	; () banked
 13595  004C5C  A1CF               	btfss	(loadFromEEPROM@to_load+72)& (0+255),0,b
 13596  004C5E  D002               	goto	u29330
 13597  004C60  8234               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13598  004C62  D001               	goto	u29345
 13599  004C64                     u29330:
 13600  004C64  9234               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13601  004C66                     u29345:
 13602                           
 13603                           ;eeprom.c: 189: LAST_NOTE_MODE_TRANSPOSE = to_load[73];
 13604  004C66  0101               	movlb	1	; () banked
 13605  004C68  A1D0               	btfss	(loadFromEEPROM@to_load+73)& (0+255),0,b
 13606  004C6A  D002               	goto	u29350
 13607  004C6C  8034               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13608  004C6E  D001               	goto	u29365
 13609  004C70                     u29350:
 13610  004C70  9034               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13611  004C72                     u29365:
 13612                           
 13613                           ;eeprom.c: 190: LAST_NOTE_MODE_RESET = to_load[74];
 13614  004C72  0101               	movlb	1	; () banked
 13615  004C74  A1D1               	btfss	(loadFromEEPROM@to_load+74)& (0+255),0,b
 13616  004C76  D002               	goto	u29370
 13617  004C78  8E33               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13618  004C7A  0012               	return	
 13619  004C7C                     u29370:
 13620  004C7C  9E33               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13621  004C7E  0012               	return		;funcret
 13622  004C80                     __end_of_loadFromEEPROM:
 13623                           	opt stack 0
 13624                           tblptru	equ	0xFF8
 13625                           tblptrh	equ	0xFF7
 13626                           tblptrl	equ	0xFF6
 13627                           tablat	equ	0xFF5
 13628                           prodh	equ	0xFF4
 13629                           prodl	equ	0xFF3
 13630                           intcon	equ	0xFF2
 13631                           intcon2	equ	0xFF1
 13632                           postinc0	equ	0xFEE
 13633                           wreg	equ	0xFE8
 13634                           postdec1	equ	0xFE5
 13635                           fsr1l	equ	0xFE1
 13636                           indf2	equ	0xFDF
 13637                           postinc2	equ	0xFDE
 13638                           fsr2h	equ	0xFDA
 13639                           fsr2l	equ	0xFD9
 13640                           status	equ	0xFD8
 13641                           
 13642 ;; *************** function _calculate_pulse_length *****************
 13643 ;; Defined at:
 13644 ;;		line 148 in file "arpeggio.c"
 13645 ;; Parameters:    Size  Location     Type
 13646 ;;		None
 13647 ;; Auto vars:     Size  Location     Type
 13648 ;;  s_tick          4  100[BANK0 ] void 
 13649 ;; Return value:  Size  Location     Type
 13650 ;;                  2   98[BANK0 ] unsigned short 
 13651 ;; Registers used:
 13652 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13653 ;; Tracked objects:
 13654 ;;		On entry : 0/0
 13655 ;;		On exit  : 0/0
 13656 ;;		Unchanged: 0/0
 13657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13658 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13659 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13661 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13662 ;;Total ram usage:       10 bytes
 13663 ;; Hardware stack levels used:    1
 13664 ;; Hardware stack levels required when called:    6
 13665 ;; This function calls:
 13666 ;;		___fladd
 13667 ;;		___fldiv
 13668 ;;		___flmul
 13669 ;;		___flneg
 13670 ;;		___fltol
 13671 ;;		___xxtofl
 13672 ;; This function is called by:
 13673 ;;		_Function_H_2
 13674 ;;		_loadFromEEPROM
 13675 ;;		_main
 13676 ;; This function uses a non-reentrant model
 13677 ;;
 13678                           
 13679                           	psect	text31
 13680  005CF4                     __ptext31:
 13681                           	opt stack 0
 13682  005CF4                     _calculate_pulse_length:
 13683                           	opt stack 22
 13684                           
 13685                           ;arpeggio.c: 155: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13686                           
 13687                           ;incstack = 0
 13688  005CF4  0E00               	movlw	0
 13689  005CF6  0100               	movlb	0	; () banked
 13690  005CF8  6F8B               	movwf	___fldiv@a& (0+255),b
 13691  005CFA  0E00               	movlw	0
 13692  005CFC  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 13693  005CFE  0E70               	movlw	112
 13694  005D00  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 13695  005D02  0E42               	movlw	66
 13696  005D04  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 13697  005D06  51FF               	movf	_BPM& (0+255),w,b
 13698  005D08  025E               	mulwf	_PPQN,c
 13699  005D0A  CFF3 F060          	movff	prodl,___xxtofl@val
 13700  005D0E  CFF4 F061          	movff	prodh,___xxtofl@val+1
 13701  005D12  0E00               	movlw	0
 13702  005D14  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 13703  005D16  0EFF               	movlw	-1
 13704  005D18  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 13705  005D1A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 13706  005D1C  0E01               	movlw	1
 13707  005D1E  EC29  F02F         	call	___xxtofl
 13708  005D22  C060  F087         	movff	?___xxtofl,___fldiv@b
 13709  005D26  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 13710  005D2A  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 13711  005D2E  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 13712  005D32  EC1A  F01C         	call	___fldiv	;wreg free
 13713  005D36  C087  F0C8         	movff	?___fldiv,_calculate_pulse_length$5807
 13714  005D3A  C088  F0C9         	movff	?___fldiv+1,_calculate_pulse_length$5807+1
 13715  005D3E  C089  F0CA         	movff	?___fldiv+2,_calculate_pulse_length$5807+2
 13716  005D42  C08A  F0CB         	movff	?___fldiv+3,_calculate_pulse_length$5807+3
 13717                           
 13718                           ;arpeggio.c: 155: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13719  005D46  0E00               	movlw	0
 13720  005D48  0100               	movlb	0	; () banked
 13721  005D4A  6F87               	movwf	___fldiv@b& (0+255),b
 13722  005D4C  0E00               	movlw	0
 13723  005D4E  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 13724  005D50  0E80               	movlw	128
 13725  005D52  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 13726  005D54  0E3F               	movlw	63
 13727  005D56  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 13728  005D58  C0C8  F08B         	movff	_calculate_pulse_length$5807,___fldiv@a
 13729  005D5C  C0C9  F08C         	movff	_calculate_pulse_length$5807+1,___fldiv@a+1
 13730  005D60  C0CA  F08D         	movff	_calculate_pulse_length$5807+2,___fldiv@a+2
 13731  005D64  C0CB  F08E         	movff	_calculate_pulse_length$5807+3,___fldiv@a+3
 13732  005D68  EC1A  F01C         	call	___fldiv	;wreg free
 13733  005D6C  C087  F0C4         	movff	?___fldiv,calculate_pulse_length@s_tick
 13734  005D70  C088  F0C5         	movff	?___fldiv+1,calculate_pulse_length@s_tick+1
 13735  005D74  C089  F0C6         	movff	?___fldiv+2,calculate_pulse_length@s_tick+2
 13736  005D78  C08A  F0C7         	movff	?___fldiv+3,calculate_pulse_length@s_tick+3
 13737                           
 13738                           ;arpeggio.c: 156: return (unsigned short) ((65535.0 - (s_tick * 20000000.0) / ( 4.0 * PR
      +                          ESCALER)) + 0.5);
 13739  005D7C  0E80               	movlw	128
 13740  005D7E  0100               	movlb	0	; () banked
 13741  005D80  6FA8               	movwf	___fladd@a& (0+255),b
 13742  005D82  0EFF               	movlw	255
 13743  005D84  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 13744  005D86  0E7F               	movlw	127
 13745  005D88  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 13746  005D8A  0E47               	movlw	71
 13747  005D8C  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 13748  005D8E  0E00               	movlw	0
 13749  005D90  6F72               	movwf	___flmul@a& (0+255),b
 13750  005D92  0E00               	movlw	0
 13751  005D94  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13752  005D96  0E80               	movlw	128
 13753  005D98  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13754  005D9A  0E40               	movlw	64
 13755  005D9C  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13756  005D9E  505D               	movf	_PRESCALER,w,c
 13757  005DA0  6F60               	movwf	___xxtofl@val& (0+255),b
 13758  005DA2  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 13759  005DA4  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 13760  005DA6  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 13761  005DA8  0E00               	movlw	0
 13762  005DAA  EC29  F02F         	call	___xxtofl
 13763  005DAE  C060  F06E         	movff	?___xxtofl,___flmul@b
 13764  005DB2  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 13765  005DB6  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 13766  005DBA  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 13767  005DBE  EC4E  F017         	call	___flmul	;wreg free
 13768  005DC2  C06E  F08B         	movff	?___flmul,___fldiv@a
 13769  005DC6  C06F  F08C         	movff	?___flmul+1,___fldiv@a+1
 13770  005DCA  C070  F08D         	movff	?___flmul+2,___fldiv@a+2
 13771  005DCE  C071  F08E         	movff	?___flmul+3,___fldiv@a+3
 13772  005DD2  0E80               	movlw	128
 13773  005DD4  0100               	movlb	0	; () banked
 13774  005DD6  6F72               	movwf	___flmul@a& (0+255),b
 13775  005DD8  0E96               	movlw	150
 13776  005DDA  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13777  005DDC  0E98               	movlw	152
 13778  005DDE  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13779  005DE0  0E4B               	movlw	75
 13780  005DE2  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13781  005DE4  C0C4  F06E         	movff	calculate_pulse_length@s_tick,___flmul@b
 13782  005DE8  C0C5  F06F         	movff	calculate_pulse_length@s_tick+1,___flmul@b+1
 13783  005DEC  C0C6  F070         	movff	calculate_pulse_length@s_tick+2,___flmul@b+2
 13784  005DF0  C0C7  F071         	movff	calculate_pulse_length@s_tick+3,___flmul@b+3
 13785  005DF4  EC4E  F017         	call	___flmul	;wreg free
 13786  005DF8  C06E  F087         	movff	?___flmul,___fldiv@b
 13787  005DFC  C06F  F088         	movff	?___flmul+1,___fldiv@b+1
 13788  005E00  C070  F089         	movff	?___flmul+2,___fldiv@b+2
 13789  005E04  C071  F08A         	movff	?___flmul+3,___fldiv@b+3
 13790  005E08  EC1A  F01C         	call	___fldiv	;wreg free
 13791  005E0C  C087  F0A0         	movff	?___fldiv,___flneg@f1
 13792  005E10  C088  F0A1         	movff	?___fldiv+1,___flneg@f1+1
 13793  005E14  C089  F0A2         	movff	?___fldiv+2,___flneg@f1+2
 13794  005E18  C08A  F0A3         	movff	?___fldiv+3,___flneg@f1+3
 13795  005E1C  EC8D  F049         	call	___flneg	;wreg free
 13796  005E20  C0A0  F0A4         	movff	?___flneg,___fladd@b
 13797  005E24  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 13798  005E28  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 13799  005E2C  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 13800  005E30  ECF7  F018         	call	___fladd	;wreg free
 13801  005E34  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 13802  005E38  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 13803  005E3C  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 13804  005E40  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 13805  005E44  ECE3  F034         	call	___fltol	;wreg free
 13806  005E48  C0B8  F0C2         	movff	?___fltol,?_calculate_pulse_length
 13807  005E4C  C0B9  F0C3         	movff	?___fltol+1,?_calculate_pulse_length+1
 13808  005E50  0012               	return	
 13809  005E52                     __end_of_calculate_pulse_length:
 13810                           	opt stack 0
 13811                           tblptru	equ	0xFF8
 13812                           tblptrh	equ	0xFF7
 13813                           tblptrl	equ	0xFF6
 13814                           tablat	equ	0xFF5
 13815                           prodh	equ	0xFF4
 13816                           prodl	equ	0xFF3
 13817                           intcon	equ	0xFF2
 13818                           intcon2	equ	0xFF1
 13819                           postinc0	equ	0xFEE
 13820                           wreg	equ	0xFE8
 13821                           postdec1	equ	0xFE5
 13822                           fsr1l	equ	0xFE1
 13823                           indf2	equ	0xFDF
 13824                           postinc2	equ	0xFDE
 13825                           fsr2h	equ	0xFDA
 13826                           fsr2l	equ	0xFD9
 13827                           status	equ	0xFD8
 13828                           
 13829 ;; *************** function _exitLoad *****************
 13830 ;; Defined at:
 13831 ;;		line 268 in file "menu.c"
 13832 ;; Parameters:    Size  Location     Type
 13833 ;;		None
 13834 ;; Auto vars:     Size  Location     Type
 13835 ;;		None
 13836 ;; Return value:  Size  Location     Type
 13837 ;;                  1    wreg      void 
 13838 ;; Registers used:
 13839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13840 ;; Tracked objects:
 13841 ;;		On entry : 0/0
 13842 ;;		On exit  : 0/0
 13843 ;;		Unchanged: 0/0
 13844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13847 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;Total ram usage:        2 bytes
 13850 ;; Hardware stack levels used:    1
 13851 ;; Hardware stack levels required when called:    9
 13852 ;; This function calls:
 13853 ;;		_Lcd_Print_String
 13854 ;;		_clear_row1
 13855 ;; This function is called by:
 13856 ;;		_Function_G_2
 13857 ;; This function uses a non-reentrant model
 13858 ;;
 13859                           
 13860                           	psect	text32
 13861  009076                     __ptext32:
 13862                           	opt stack 0
 13863  009076                     _exitLoad:
 13864                           	opt stack 18
 13865                           
 13866                           ;menu.c: 270: while(encoder_click == 0);
 13867                           
 13868                           ;incstack = 0
 13869  009076  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13870  009078  D7FE               	goto	_exitLoad
 13871                           
 13872                           ;menu.c: 271: clear_row1();
 13873  00907A  EC52  F04A         	call	_clear_row1	;wreg free
 13874                           
 13875                           ;menu.c: 272: Lcd_Print_String("Settings Loaded!");
 13876  00907E  0E75               	movlw	low STR_22
 13877  009080  0100               	movlb	0	; () banked
 13878  009082  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 13879  009084  0EFD               	movlw	high STR_22
 13880  009086  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13881  009088  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 13882                           
 13883                           ;menu.c: 273: _delay((unsigned long)((500)*(20000000/4000.0)));
 13884  00908C  0E0D               	movlw	13
 13885  00908E  0100               	movlb	0	; () banked
 13886  009090  6F71               	movwf	(??_exitLoad+1)& (0+255),b
 13887  009092  0EAF               	movlw	175
 13888  009094  6F70               	movwf	??_exitLoad& (0+255),b
 13889  009096  0EB6               	movlw	182
 13890  009098                     u44857:
 13891  009098  2EE8               	decfsz	wreg,f,c
 13892  00909A  D7FE               	bra	u44857
 13893  00909C  2F70               	decfsz	??_exitLoad& (0+255),f,b
 13894  00909E  D7FC               	bra	u44857
 13895  0090A0  2F71               	decfsz	(??_exitLoad+1)& (0+255),f,b
 13896  0090A2  D7FA               	bra	u44857
 13897  0090A4  F000               	nop	
 13898                           
 13899                           ;menu.c: 274: which_screen = MAIN_MENU;
 13900  0090A6  0E02               	movlw	2
 13901  0090A8  0100               	movlb	0	; () banked
 13902  0090AA  6FF9               	movwf	_which_screen& (0+255),b
 13903                           
 13904                           ; BSR set to: 0
 13905                           ;menu.c: 275: lcd_print_once = 0;
 13906  0090AC  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13907                           
 13908                           ; BSR set to: 0
 13909                           ;menu.c: 276: encoder_click = 0;
 13910  0090AE  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13911                           
 13912                           ; BSR set to: 0
 13913  0090B0  0012               	return		;funcret
 13914  0090B2                     __end_of_exitLoad:
 13915                           	opt stack 0
 13916                           tblptru	equ	0xFF8
 13917                           tblptrh	equ	0xFF7
 13918                           tblptrl	equ	0xFF6
 13919                           tablat	equ	0xFF5
 13920                           prodh	equ	0xFF4
 13921                           prodl	equ	0xFF3
 13922                           intcon	equ	0xFF2
 13923                           intcon2	equ	0xFF1
 13924                           postinc0	equ	0xFEE
 13925                           wreg	equ	0xFE8
 13926                           postdec1	equ	0xFE5
 13927                           fsr1l	equ	0xFE1
 13928                           indf2	equ	0xFDF
 13929                           postinc2	equ	0xFDE
 13930                           fsr2h	equ	0xFDA
 13931                           fsr2l	equ	0xFD9
 13932                           status	equ	0xFD8
 13933                           
 13934 ;; *************** function _Function_G_1 *****************
 13935 ;; Defined at:
 13936 ;;		line 860 in file "menu.c"
 13937 ;; Parameters:    Size  Location     Type
 13938 ;;		None
 13939 ;; Auto vars:     Size  Location     Type
 13940 ;;		None
 13941 ;; Return value:  Size  Location     Type
 13942 ;;                  1    wreg      void 
 13943 ;; Registers used:
 13944 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13945 ;; Tracked objects:
 13946 ;;		On entry : 0/0
 13947 ;;		On exit  : 0/0
 13948 ;;		Unchanged: 0/0
 13949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13953 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13954 ;;Total ram usage:        1 bytes
 13955 ;; Hardware stack levels used:    1
 13956 ;; Hardware stack levels required when called:   10
 13957 ;; This function calls:
 13958 ;;		_Busy_eep
 13959 ;;		_Lcd_Print_String
 13960 ;;		_Write_b_eep
 13961 ;;		___lbmod
 13962 ;;		___wmul
 13963 ;;		_clear_row1
 13964 ;;		_clear_row2
 13965 ;;		_eepromExit
 13966 ;;		_exitSave
 13967 ;;		_processEncoderBuxton
 13968 ;;		_saveToEEPROM
 13969 ;; This function is called by:
 13970 ;;		_Function_G
 13971 ;; This function uses a non-reentrant model
 13972 ;;
 13973                           
 13974                           	psect	text33
 13975  0072DE                     __ptext33:
 13976                           	opt stack 0
 13977  0072DE                     _Function_G_1:
 13978                           	opt stack 18
 13979                           
 13980                           ;menu.c: 862: which_screen = SAVES_MENU;
 13981                           
 13982                           ; BSR set to: 0
 13983                           ;incstack = 0
 13984  0072DE  0E17               	movlw	23
 13985  0072E0  0100               	movlb	0	; () banked
 13986  0072E2  6FF9               	movwf	_which_screen& (0+255),b
 13987                           
 13988                           ; BSR set to: 0
 13989                           ;menu.c: 863: encoder_click = 0;
 13990  0072E4  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;menu.c: 864: lcd_print_once = 0;
 13994  0072E6  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13995                           
 13996                           ;menu.c: 866: while(encoder_click == 0) {
 13997  0072E8  D02C               	goto	l3588
 13998  0072EA                     
 13999                           ;menu.c: 867: processEncoderBuxton();
 14000                           
 14001                           ; BSR set to: 0
 14002  0072EA  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14003                           
 14004                           ;menu.c: 868: if (lcd_print_once == 0) {
 14005  0072EE  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14006  0072F0  D027               	goto	l3590
 14007                           
 14008                           ;menu.c: 869: clear_row1();
 14009  0072F2  EC52  F04A         	call	_clear_row1	;wreg free
 14010                           
 14011                           ;menu.c: 870: Lcd_Print_String("Save #:");
 14012  0072F6  0EBB               	movlw	low STR_35
 14013  0072F8  0100               	movlb	0	; () banked
 14014  0072FA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14015  0072FC  0EFF               	movlw	high STR_35
 14016  0072FE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14017  007300  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 14018                           
 14019                           ;menu.c: 871: clear_row2();
 14020  007304  EC3E  F04A         	call	_clear_row2	;wreg free
 14021                           
 14022                           ;menu.c: 872: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sav
      +                          esMenu.address]);
 14023  007308  C0DF  F060         	movff	_savesMenu,___lbmod@divisor
 14024  00730C  0100               	movlb	0	; () banked
 14025  00730E  51E1               	movf	(_savesMenu+2)& (0+255),w,b
 14026  007310  ECBD  F049         	call	___lbmod
 14027  007314  0100               	movlb	0	; () banked
 14028  007316  6FB4               	movwf	??_Function_G_1& (0+255),b
 14029  007318  51B4               	movf	??_Function_G_1& (0+255),w,b
 14030  00731A  25E0               	addwf	(_savesMenu+1)& (0+255),w,b
 14031  00731C  6F64               	movwf	___wmul@multiplier& (0+255),b
 14032  00731E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 14033  007320  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14034  007322  0E00               	movlw	0
 14035  007324  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14036  007326  0E11               	movlw	17
 14037  007328  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14038  00732A  EC66  F04A         	call	___wmul	;wreg free
 14039  00732E  0E9E               	movlw	low _LCD_STRINGS
 14040  007330  0100               	movlb	0	; () banked
 14041  007332  2564               	addwf	?___wmul& (0+255),w,b
 14042  007334  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14043  007336  0EF3               	movlw	high _LCD_STRINGS
 14044  007338  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14045  00733A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14046  00733C  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 14047  007340                     l3590:
 14048                           
 14049                           ;menu.c: 873: }
 14050                           ;menu.c: 874: lcd_print_once = 1;
 14051  007340  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14052  007342                     l3588:
 14053  007342  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14054  007344  D7D2               	goto	l3589
 14055                           
 14056                           ;menu.c: 875: }
 14057                           ;menu.c: 877: if(savesMenu.selector == 4){eepromExit();}
 14058  007346  0E04               	movlw	4
 14059  007348  0100               	movlb	0	; () banked
 14060  00734A  19E1               	xorwf	(_savesMenu+2)& (0+255),w,b
 14061  00734C  A4D8               	btfss	status,2,c
 14062  00734E  D003               	goto	l3592
 14063                           
 14064                           ; BSR set to: 0
 14065  007350  EC77  F048         	call	_eepromExit	;wreg free
 14066  007354  D011               	goto	l3593
 14067  007356                     l3592:
 14068                           
 14069                           ;menu.c: 878: else {
 14070                           ;menu.c: 880: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 14071  007356  EC31  F04B         	call	_Busy_eep	;wreg free
 14072  00735A  0E00               	movlw	0
 14073  00735C  0100               	movlb	0	; () banked
 14074  00735E  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 14075  007360  0E00               	movlw	0
 14076  007362  6F60               	movwf	Write_b_eep@badd& (0+255),b
 14077  007364  29E1               	incf	(_savesMenu+2)& (0+255),w,b
 14078  007366  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 14079  007368  ECDC  F047         	call	_Write_b_eep	;wreg free
 14080                           
 14081                           ;menu.c: 881: saveToEEPROM(savesMenu.selector + 1);
 14082  00736C  0100               	movlb	0	; () banked
 14083  00736E  29E1               	incf	(_savesMenu+2)& (0+255),w,b
 14084  007370  EC41  F027         	call	_saveToEEPROM
 14085                           
 14086                           ;menu.c: 882: exitSave();
 14087  007374  EC59  F048         	call	_exitSave	;wreg free
 14088  007378                     l3593:
 14089                           
 14090                           ;menu.c: 883: }
 14091                           ;menu.c: 885: savesMenu.selector = 0;
 14092  007378  0E00               	movlw	0
 14093  00737A  0100               	movlb	0	; () banked
 14094  00737C  6FE1               	movwf	(_savesMenu+2)& (0+255),b
 14095                           
 14096                           ; BSR set to: 0
 14097  00737E  0012               	return		;funcret
 14098  007380                     __end_of_Function_G_1:
 14099                           	opt stack 0
 14100                           tblptru	equ	0xFF8
 14101                           tblptrh	equ	0xFF7
 14102                           tblptrl	equ	0xFF6
 14103                           tablat	equ	0xFF5
 14104                           prodh	equ	0xFF4
 14105                           prodl	equ	0xFF3
 14106                           intcon	equ	0xFF2
 14107                           intcon2	equ	0xFF1
 14108                           postinc0	equ	0xFEE
 14109                           wreg	equ	0xFE8
 14110                           postdec1	equ	0xFE5
 14111                           fsr1l	equ	0xFE1
 14112                           indf2	equ	0xFDF
 14113                           postinc2	equ	0xFDE
 14114                           fsr2h	equ	0xFDA
 14115                           fsr2l	equ	0xFD9
 14116                           status	equ	0xFD8
 14117                           
 14118 ;; *************** function _exitSave *****************
 14119 ;; Defined at:
 14120 ;;		line 255 in file "menu.c"
 14121 ;; Parameters:    Size  Location     Type
 14122 ;;		None
 14123 ;; Auto vars:     Size  Location     Type
 14124 ;;		None
 14125 ;; Return value:  Size  Location     Type
 14126 ;;                  1    wreg      void 
 14127 ;; Registers used:
 14128 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14129 ;; Tracked objects:
 14130 ;;		On entry : 0/0
 14131 ;;		On exit  : 0/0
 14132 ;;		Unchanged: 0/0
 14133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;Total ram usage:        2 bytes
 14139 ;; Hardware stack levels used:    1
 14140 ;; Hardware stack levels required when called:    9
 14141 ;; This function calls:
 14142 ;;		_Lcd_Print_String
 14143 ;;		_clear_row1
 14144 ;; This function is called by:
 14145 ;;		_Function_G_1
 14146 ;; This function uses a non-reentrant model
 14147 ;;
 14148                           
 14149                           	psect	text34
 14150  0090B2                     __ptext34:
 14151                           	opt stack 0
 14152  0090B2                     _exitSave:
 14153                           	opt stack 18
 14154                           
 14155                           ;menu.c: 257: while(encoder_click == 0);
 14156                           
 14157                           ; BSR set to: 0
 14158                           ;incstack = 0
 14159  0090B2  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14160  0090B4  D7FE               	goto	_exitSave
 14161                           
 14162                           ;menu.c: 258: clear_row1();
 14163  0090B6  EC52  F04A         	call	_clear_row1	;wreg free
 14164                           
 14165                           ;menu.c: 259: Lcd_Print_String("Settings Saved!");
 14166  0090BA  0EFD               	movlw	low STR_21
 14167  0090BC  0100               	movlb	0	; () banked
 14168  0090BE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14169  0090C0  0EFD               	movlw	high STR_21
 14170  0090C2  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14171  0090C4  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 14172                           
 14173                           ;menu.c: 260: _delay((unsigned long)((500)*(20000000/4000.0)));
 14174  0090C8  0E0D               	movlw	13
 14175  0090CA  0100               	movlb	0	; () banked
 14176  0090CC  6F71               	movwf	(??_exitSave+1)& (0+255),b
 14177  0090CE  0EAF               	movlw	175
 14178  0090D0  6F70               	movwf	??_exitSave& (0+255),b
 14179  0090D2  0EB6               	movlw	182
 14180  0090D4                     u44867:
 14181  0090D4  2EE8               	decfsz	wreg,f,c
 14182  0090D6  D7FE               	bra	u44867
 14183  0090D8  2F70               	decfsz	??_exitSave& (0+255),f,b
 14184  0090DA  D7FC               	bra	u44867
 14185  0090DC  2F71               	decfsz	(??_exitSave+1)& (0+255),f,b
 14186  0090DE  D7FA               	bra	u44867
 14187  0090E0  F000               	nop	
 14188                           
 14189                           ;menu.c: 261: which_screen = MAIN_MENU;
 14190  0090E2  0E02               	movlw	2
 14191  0090E4  0100               	movlb	0	; () banked
 14192  0090E6  6FF9               	movwf	_which_screen& (0+255),b
 14193                           
 14194                           ; BSR set to: 0
 14195                           ;menu.c: 262: lcd_print_once = 0;
 14196  0090E8  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14197                           
 14198                           ; BSR set to: 0
 14199                           ;menu.c: 263: encoder_click = 0;
 14200  0090EA  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14201                           
 14202                           ; BSR set to: 0
 14203  0090EC  0012               	return		;funcret
 14204  0090EE                     __end_of_exitSave:
 14205                           	opt stack 0
 14206                           tblptru	equ	0xFF8
 14207                           tblptrh	equ	0xFF7
 14208                           tblptrl	equ	0xFF6
 14209                           tablat	equ	0xFF5
 14210                           prodh	equ	0xFF4
 14211                           prodl	equ	0xFF3
 14212                           intcon	equ	0xFF2
 14213                           intcon2	equ	0xFF1
 14214                           postinc0	equ	0xFEE
 14215                           wreg	equ	0xFE8
 14216                           postdec1	equ	0xFE5
 14217                           fsr1l	equ	0xFE1
 14218                           indf2	equ	0xFDF
 14219                           postinc2	equ	0xFDE
 14220                           fsr2h	equ	0xFDA
 14221                           fsr2l	equ	0xFD9
 14222                           status	equ	0xFD8
 14223                           
 14224 ;; *************** function _eepromExit *****************
 14225 ;; Defined at:
 14226 ;;		line 281 in file "menu.c"
 14227 ;; Parameters:    Size  Location     Type
 14228 ;;		None
 14229 ;; Auto vars:     Size  Location     Type
 14230 ;;		None
 14231 ;; Return value:  Size  Location     Type
 14232 ;;                  1    wreg      void 
 14233 ;; Registers used:
 14234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14235 ;; Tracked objects:
 14236 ;;		On entry : 0/0
 14237 ;;		On exit  : 0/0
 14238 ;;		Unchanged: 0/0
 14239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14243 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14244 ;;Total ram usage:        2 bytes
 14245 ;; Hardware stack levels used:    1
 14246 ;; Hardware stack levels required when called:    9
 14247 ;; This function calls:
 14248 ;;		_Lcd_Print_String
 14249 ;;		_clear_row1
 14250 ;; This function is called by:
 14251 ;;		_Function_G_1
 14252 ;;		_Function_G_2
 14253 ;;		_Function_G
 14254 ;; This function uses a non-reentrant model
 14255 ;;
 14256                           
 14257                           	psect	text35
 14258  0090EE                     __ptext35:
 14259                           	opt stack 0
 14260  0090EE                     _eepromExit:
 14261                           	opt stack 19
 14262                           
 14263                           ;menu.c: 283: while(encoder_click == 0);
 14264                           
 14265                           ; BSR set to: 0
 14266                           ;incstack = 0
 14267  0090EE  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14268  0090F0  D7FE               	goto	_eepromExit
 14269                           
 14270                           ;menu.c: 284: clear_row1();
 14271  0090F2  EC52  F04A         	call	_clear_row1	;wreg free
 14272                           
 14273                           ;menu.c: 285: Lcd_Print_String("Exit EEPROM!");
 14274  0090F6  0E18               	movlw	low STR_23
 14275  0090F8  0100               	movlb	0	; () banked
 14276  0090FA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14277  0090FC  0EFF               	movlw	high STR_23
 14278  0090FE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14279  009100  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 14280                           
 14281                           ;menu.c: 286: _delay((unsigned long)((500)*(20000000/4000.0)));
 14282  009104  0E0D               	movlw	13
 14283  009106  0100               	movlb	0	; () banked
 14284  009108  6F71               	movwf	(??_eepromExit+1)& (0+255),b
 14285  00910A  0EAF               	movlw	175
 14286  00910C  6F70               	movwf	??_eepromExit& (0+255),b
 14287  00910E  0EB6               	movlw	182
 14288  009110                     u44877:
 14289  009110  2EE8               	decfsz	wreg,f,c
 14290  009112  D7FE               	bra	u44877
 14291  009114  2F70               	decfsz	??_eepromExit& (0+255),f,b
 14292  009116  D7FC               	bra	u44877
 14293  009118  2F71               	decfsz	(??_eepromExit+1)& (0+255),f,b
 14294  00911A  D7FA               	bra	u44877
 14295  00911C  F000               	nop	
 14296                           
 14297                           ;menu.c: 287: which_screen = MAIN_MENU;
 14298  00911E  0E02               	movlw	2
 14299  009120  0100               	movlb	0	; () banked
 14300  009122  6FF9               	movwf	_which_screen& (0+255),b
 14301                           
 14302                           ; BSR set to: 0
 14303                           ;menu.c: 288: lcd_print_once = 0;
 14304  009124  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14305                           
 14306                           ; BSR set to: 0
 14307                           ;menu.c: 289: encoder_click = 0;
 14308  009126  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14309                           
 14310                           ; BSR set to: 0
 14311  009128  0012               	return		;funcret
 14312  00912A                     __end_of_eepromExit:
 14313                           	opt stack 0
 14314                           tblptru	equ	0xFF8
 14315                           tblptrh	equ	0xFF7
 14316                           tblptrl	equ	0xFF6
 14317                           tablat	equ	0xFF5
 14318                           prodh	equ	0xFF4
 14319                           prodl	equ	0xFF3
 14320                           intcon	equ	0xFF2
 14321                           intcon2	equ	0xFF1
 14322                           postinc0	equ	0xFEE
 14323                           wreg	equ	0xFE8
 14324                           postdec1	equ	0xFE5
 14325                           fsr1l	equ	0xFE1
 14326                           indf2	equ	0xFDF
 14327                           postinc2	equ	0xFDE
 14328                           fsr2h	equ	0xFDA
 14329                           fsr2l	equ	0xFD9
 14330                           status	equ	0xFD8
 14331                           
 14332 ;; *************** function _Function_F *****************
 14333 ;; Defined at:
 14334 ;;		line 834 in file "menu.c"
 14335 ;; Parameters:    Size  Location     Type
 14336 ;;		None
 14337 ;; Auto vars:     Size  Location     Type
 14338 ;;		None
 14339 ;; Return value:  Size  Location     Type
 14340 ;;                  1    wreg      void 
 14341 ;; Registers used:
 14342 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14343 ;; Tracked objects:
 14344 ;;		On entry : 0/0
 14345 ;;		On exit  : 0/0
 14346 ;;		Unchanged: 0/0
 14347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;Total ram usage:        0 bytes
 14353 ;; Hardware stack levels used:    1
 14354 ;; Hardware stack levels required when called:    9
 14355 ;; This function calls:
 14356 ;;		_Lcd_Print_String
 14357 ;;		_Lcd_Set_Cursor
 14358 ;;		_clear_row2
 14359 ;;		_int2string
 14360 ;;		_processEncoderBuxton
 14361 ;;		_programChange
 14362 ;; This function is called by:
 14363 ;;		_menu_lcd
 14364 ;; This function uses a non-reentrant model
 14365 ;;
 14366                           
 14367                           	psect	text36
 14368  0086E4                     __ptext36:
 14369                           	opt stack 0
 14370  0086E4                     _Function_F:
 14371                           	opt stack 20
 14372                           
 14373                           ;menu.c: 836: which_screen = PROGRAM_CHANGE_MENU;
 14374                           
 14375                           ; BSR set to: 0
 14376                           ;incstack = 0
 14377  0086E4  0E08               	movlw	8
 14378  0086E6  0100               	movlb	0	; () banked
 14379  0086E8  6FF9               	movwf	_which_screen& (0+255),b
 14380                           
 14381                           ; BSR set to: 0
 14382                           ;menu.c: 837: lcd_print_once = 0;
 14383  0086EA  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14384                           
 14385                           ; BSR set to: 0
 14386                           ;menu.c: 839: programChangeMenu.selector = patch_number;
 14387  0086EC  C171  F146         	movff	_patch_number,_programChangeMenu+2
 14388                           
 14389                           ;menu.c: 841: while(encoder_click == 0) {
 14390  0086F0  D021               	goto	l3581
 14391  0086F2                     
 14392                           ;menu.c: 842: processEncoderBuxton();
 14393                           
 14394                           ; BSR set to: 0
 14395  0086F2  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14396                           
 14397                           ;menu.c: 843: if (lcd_print_once == 0) {
 14398  0086F6  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14399  0086F8  D009               	goto	l3583
 14400                           
 14401                           ;menu.c: 844: clear_row2();
 14402  0086FA  EC3E  F04A         	call	_clear_row2	;wreg free
 14403                           
 14404                           ;menu.c: 845: Lcd_Print_String("Program #: ");
 14405  0086FE  0E4C               	movlw	low STR_34
 14406  008700  0100               	movlb	0	; () banked
 14407  008702  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14408  008704  0EFF               	movlw	high STR_34
 14409  008706  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14410  008708  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 14411  00870C                     l3583:
 14412                           
 14413                           ;menu.c: 846: }
 14414                           ;menu.c: 847: lcd_print_once = 1;
 14415  00870C  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14416                           
 14417                           ;menu.c: 850: int2string(programChangeMenu.selector);
 14418  00870E  C146  F074         	movff	_programChangeMenu+2,int2string@number
 14419  008712  0100               	movlb	0	; () banked
 14420  008714  6B75               	clrf	(int2string@number+1)& (0+255),b
 14421  008716  EC52  F035         	call	_int2string	;wreg free
 14422                           
 14423                           ;menu.c: 851: Lcd_Set_Cursor(2,13);
 14424  00871A  0E0D               	movlw	13
 14425  00871C  0100               	movlb	0	; () banked
 14426  00871E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14427  008720  0E02               	movlw	2
 14428  008722  ECEC  F045         	call	_Lcd_Set_Cursor
 14429                           
 14430                           ;menu.c: 852: Lcd_Print_String(string2display);
 14431  008726  0E82               	movlw	low _string2display
 14432  008728  0100               	movlb	0	; () banked
 14433  00872A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14434  00872C  0E01               	movlw	high _string2display
 14435  00872E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14436  008730  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 14437  008734                     l3581:
 14438  008734  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14439  008736  D7DD               	goto	l3582
 14440                           
 14441                           ;menu.c: 853: }
 14442                           ;menu.c: 855: patch_number = programChangeMenu.selector;
 14443  008738  C146  F171         	movff	_programChangeMenu+2,_patch_number
 14444                           
 14445                           ;menu.c: 856: programChange(channel, programChangeMenu.selector, 0x00);
 14446  00873C  C146  F06B         	movff	_programChangeMenu+2,programChange@data1
 14447  008740  0E00               	movlw	0
 14448  008742  0100               	movlb	0	; () banked
 14449  008744  6F6C               	movwf	programChange@data2& (0+255),b
 14450  008746  51F6               	movf	_channel& (0+255),w,b
 14451  008748  ECD4  F049         	call	_programChange
 14452  00874C  0012               	return		;funcret
 14453  00874E                     __end_of_Function_F:
 14454                           	opt stack 0
 14455                           tblptru	equ	0xFF8
 14456                           tblptrh	equ	0xFF7
 14457                           tblptrl	equ	0xFF6
 14458                           tablat	equ	0xFF5
 14459                           prodh	equ	0xFF4
 14460                           prodl	equ	0xFF3
 14461                           intcon	equ	0xFF2
 14462                           intcon2	equ	0xFF1
 14463                           postinc0	equ	0xFEE
 14464                           wreg	equ	0xFE8
 14465                           postdec1	equ	0xFE5
 14466                           fsr1l	equ	0xFE1
 14467                           indf2	equ	0xFDF
 14468                           postinc2	equ	0xFDE
 14469                           fsr2h	equ	0xFDA
 14470                           fsr2l	equ	0xFD9
 14471                           status	equ	0xFD8
 14472                           
 14473 ;; *************** function _programChange *****************
 14474 ;; Defined at:
 14475 ;;		line 166 in file "midi.c"
 14476 ;; Parameters:    Size  Location     Type
 14477 ;;  channel         1    wreg     unsigned char 
 14478 ;;  data1           1   11[BANK0 ] unsigned char 
 14479 ;;  data2           1   12[BANK0 ] unsigned char 
 14480 ;; Auto vars:     Size  Location     Type
 14481 ;;  channel         1   13[BANK0 ] unsigned char 
 14482 ;; Return value:  Size  Location     Type
 14483 ;;                  1    wreg      void 
 14484 ;; Registers used:
 14485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14486 ;; Tracked objects:
 14487 ;;		On entry : 0/0
 14488 ;;		On exit  : 0/0
 14489 ;;		Unchanged: 0/0
 14490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14491 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14494 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;Total ram usage:        3 bytes
 14496 ;; Hardware stack levels used:    1
 14497 ;; Hardware stack levels required when called:    6
 14498 ;; This function calls:
 14499 ;;		_sendOut
 14500 ;;		_sendUSB
 14501 ;; This function is called by:
 14502 ;;		_Function_F
 14503 ;; This function uses a non-reentrant model
 14504 ;;
 14505                           
 14506                           	psect	text37
 14507  0093A8                     __ptext37:
 14508                           	opt stack 0
 14509  0093A8                     _programChange:
 14510                           	opt stack 22
 14511                           
 14512                           ;incstack = 0
 14513                           ;programChange@channel stored from wreg
 14514  0093A8  0100               	movlb	0	; () banked
 14515  0093AA  6F6D               	movwf	programChange@channel& (0+255),b
 14516                           
 14517                           ;midi.c: 168: statusByte = channel | program_change;
 14518  0093AC  0100               	movlb	0	; () banked
 14519  0093AE  516D               	movf	programChange@channel& (0+255),w,b
 14520  0093B0  09C0               	iorlw	192
 14521  0093B2  6FF5               	movwf	_statusByte& (0+255),b
 14522                           
 14523                           ; BSR set to: 0
 14524                           ;midi.c: 171: sendUSB(statusByte, data1, data2);
 14525  0093B4  C06B  F060         	movff	programChange@data1,sendUSB@message2
 14526  0093B8  C06C  F061         	movff	programChange@data2,sendUSB@message3
 14527  0093BC  51F5               	movf	_statusByte& (0+255),w,b
 14528  0093BE  ECC0  F039         	call	_sendUSB
 14529                           
 14530                           ;midi.c: 174: sendOut(statusByte);
 14531  0093C2  0100               	movlb	0	; () banked
 14532  0093C4  51F5               	movf	_statusByte& (0+255),w,b
 14533  0093C6  ECCD  F04A         	call	_sendOut
 14534                           
 14535                           ;midi.c: 175: sendOut(data1);
 14536  0093CA  0100               	movlb	0	; () banked
 14537  0093CC  516B               	movf	programChange@data1& (0+255),w,b
 14538  0093CE  ECCD  F04A         	call	_sendOut
 14539  0093D2  0012               	return		;funcret
 14540  0093D4                     __end_of_programChange:
 14541                           	opt stack 0
 14542                           tblptru	equ	0xFF8
 14543                           tblptrh	equ	0xFF7
 14544                           tblptrl	equ	0xFF6
 14545                           tablat	equ	0xFF5
 14546                           prodh	equ	0xFF4
 14547                           prodl	equ	0xFF3
 14548                           intcon	equ	0xFF2
 14549                           intcon2	equ	0xFF1
 14550                           postinc0	equ	0xFEE
 14551                           wreg	equ	0xFE8
 14552                           postdec1	equ	0xFE5
 14553                           fsr1l	equ	0xFE1
 14554                           indf2	equ	0xFDF
 14555                           postinc2	equ	0xFDE
 14556                           fsr2h	equ	0xFDA
 14557                           fsr2l	equ	0xFD9
 14558                           status	equ	0xFD8
 14559                           
 14560 ;; *************** function _Function_E *****************
 14561 ;; Defined at:
 14562 ;;		line 815 in file "menu.c"
 14563 ;; Parameters:    Size  Location     Type
 14564 ;;		None
 14565 ;; Auto vars:     Size  Location     Type
 14566 ;;		None
 14567 ;; Return value:  Size  Location     Type
 14568 ;;                  1    wreg      void 
 14569 ;; Registers used:
 14570 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14571 ;; Tracked objects:
 14572 ;;		On entry : 0/0
 14573 ;;		On exit  : 0/0
 14574 ;;		Unchanged: 0/0
 14575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;Total ram usage:        1 bytes
 14581 ;; Hardware stack levels used:    1
 14582 ;; Hardware stack levels required when called:    9
 14583 ;; This function calls:
 14584 ;;		_Function_E_1
 14585 ;;		_Function_E_2
 14586 ;;		_Lcd_Print_String
 14587 ;;		___lbmod
 14588 ;;		___wmul
 14589 ;;		_clear_row2
 14590 ;;		_processEncoderBuxton
 14591 ;; This function is called by:
 14592 ;;		_menu_lcd
 14593 ;; This function uses a non-reentrant model
 14594 ;;
 14595                           
 14596                           	psect	text38
 14597  008598                     __ptext38:
 14598                           	opt stack 0
 14599  008598                     _Function_E:
 14600                           	opt stack 20
 14601                           
 14602                           ;menu.c: 817: which_screen = MIDI_CHANNEL_MENU;
 14603                           
 14604                           ;incstack = 0
 14605  008598  0E07               	movlw	7
 14606  00859A  0100               	movlb	0	; () banked
 14607  00859C  6FF9               	movwf	_which_screen& (0+255),b
 14608                           
 14609                           ; BSR set to: 0
 14610                           ;menu.c: 818: lcd_print_once = 0;
 14611  00859E  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14612                           
 14613                           ;menu.c: 820: while(encoder_click == 0) {
 14614  0085A0  D025               	goto	l3572
 14615  0085A2                     
 14616                           ;menu.c: 821: processEncoderBuxton();
 14617                           
 14618                           ; BSR set to: 0
 14619  0085A2  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14620                           
 14621                           ;menu.c: 822: if (lcd_print_once == 0) {
 14622  0085A6  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14623  0085A8  D020               	goto	l3574
 14624                           
 14625                           ;menu.c: 823: clear_row2();
 14626  0085AA  EC3E  F04A         	call	_clear_row2	;wreg free
 14627                           
 14628                           ;menu.c: 824: Lcd_Print_String(LCD_STRINGS[(midiChannelMenu.selector % midiChannelMenu.n
      +                          umber) + midiChannelMenu.address]);
 14629  0085AE  C147  F060         	movff	_midiChannelMenu,___lbmod@divisor
 14630  0085B2  0101               	movlb	1	; () banked
 14631  0085B4  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14632  0085B6  ECBD  F049         	call	___lbmod
 14633  0085BA  0100               	movlb	0	; () banked
 14634  0085BC  6F7A               	movwf	??_Function_E& (0+255),b
 14635  0085BE  517A               	movf	??_Function_E& (0+255),w,b
 14636  0085C0  0101               	movlb	1	; () banked
 14637  0085C2  2548               	addwf	(_midiChannelMenu+1)& (0+255),w,b
 14638  0085C4  0100               	movlb	0	; () banked
 14639  0085C6  6F64               	movwf	___wmul@multiplier& (0+255),b
 14640  0085C8  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 14641  0085CA  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14642  0085CC  0E00               	movlw	0
 14643  0085CE  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14644  0085D0  0E11               	movlw	17
 14645  0085D2  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14646  0085D4  EC66  F04A         	call	___wmul	;wreg free
 14647  0085D8  0E9E               	movlw	low _LCD_STRINGS
 14648  0085DA  0100               	movlb	0	; () banked
 14649  0085DC  2564               	addwf	?___wmul& (0+255),w,b
 14650  0085DE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14651  0085E0  0EF3               	movlw	high _LCD_STRINGS
 14652  0085E2  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14653  0085E4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14654  0085E6  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 14655  0085EA                     l3574:
 14656                           
 14657                           ;menu.c: 825: }
 14658                           ;menu.c: 826: lcd_print_once = 1;
 14659  0085EA  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14660  0085EC                     l3572:
 14661  0085EC  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14662  0085EE  D7D9               	goto	l3573
 14663                           
 14664                           ;menu.c: 827: }
 14665                           ;menu.c: 829: if(midiChannelMenu.selector == 0) {Function_E_1();}
 14666  0085F0  0101               	movlb	1	; () banked
 14667  0085F2  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14668  0085F4  B4D8               	btfsc	status,2,c
 14669                           
 14670                           ; BSR set to: 1
 14671  0085F6  EC6B  F047         	call	_Function_E_1	;wreg free
 14672                           
 14673                           ;menu.c: 830: if(midiChannelMenu.selector == 1) {Function_E_2();}
 14674  0085FA  0101               	movlb	1	; () banked
 14675  0085FC  0549               	decf	(_midiChannelMenu+2)& (0+255),w,b
 14676  0085FE  A4D8               	btfss	status,2,c
 14677  008600  0012               	return	
 14678                           
 14679                           ; BSR set to: 1
 14680  008602  EC44  F047         	call	_Function_E_2	;wreg free
 14681  008606  0012               	return	
 14682  008608                     __end_of_Function_E:
 14683                           	opt stack 0
 14684                           tblptru	equ	0xFF8
 14685                           tblptrh	equ	0xFF7
 14686                           tblptrl	equ	0xFF6
 14687                           tablat	equ	0xFF5
 14688                           prodh	equ	0xFF4
 14689                           prodl	equ	0xFF3
 14690                           intcon	equ	0xFF2
 14691                           intcon2	equ	0xFF1
 14692                           postinc0	equ	0xFEE
 14693                           wreg	equ	0xFE8
 14694                           postdec1	equ	0xFE5
 14695                           fsr1l	equ	0xFE1
 14696                           indf2	equ	0xFDF
 14697                           postinc2	equ	0xFDE
 14698                           fsr2h	equ	0xFDA
 14699                           fsr2l	equ	0xFD9
 14700                           status	equ	0xFD8
 14701                           
 14702 ;; *************** function _Function_E_2 *****************
 14703 ;; Defined at:
 14704 ;;		line 796 in file "menu.c"
 14705 ;; Parameters:    Size  Location     Type
 14706 ;;		None
 14707 ;; Auto vars:     Size  Location     Type
 14708 ;;		None
 14709 ;; Return value:  Size  Location     Type
 14710 ;;                  1    wreg      void 
 14711 ;; Registers used:
 14712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14713 ;; Tracked objects:
 14714 ;;		On entry : 0/0
 14715 ;;		On exit  : 0/0
 14716 ;;		Unchanged: 0/0
 14717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;Total ram usage:        0 bytes
 14723 ;; Hardware stack levels used:    1
 14724 ;; Hardware stack levels required when called:    8
 14725 ;; This function calls:
 14726 ;;		_Lcd_Print_String
 14727 ;;		_Lcd_Set_Cursor
 14728 ;;		_int2string
 14729 ;;		_processEncoderBuxton
 14730 ;; This function is called by:
 14731 ;;		_Function_E
 14732 ;; This function uses a non-reentrant model
 14733 ;;
 14734                           
 14735                           	psect	text39
 14736  008E88                     __ptext39:
 14737                           	opt stack 0
 14738  008E88                     _Function_E_2:
 14739                           	opt stack 20
 14740                           
 14741                           ;menu.c: 798: which_screen = DRUM_CH_MENU;
 14742                           
 14743                           ;incstack = 0
 14744  008E88  0E15               	movlw	21
 14745  008E8A  0100               	movlb	0	; () banked
 14746  008E8C  6FF9               	movwf	_which_screen& (0+255),b
 14747                           
 14748                           ; BSR set to: 0
 14749                           ;menu.c: 799: lcd_print_once = 0;
 14750  008E8E  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14751                           
 14752                           ; BSR set to: 0
 14753                           ;menu.c: 800: encoder_click = 0;
 14754  008E90  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14755                           
 14756                           ; BSR set to: 0
 14757                           ;menu.c: 801: drumChannelMenu.selector = drumchannel;
 14758  008E92  C0FE  F140         	movff	_drumchannel,_drumChannelMenu+2
 14759                           
 14760                           ;menu.c: 803: while(encoder_click == 0) {
 14761  008E96  D01A               	goto	l3566
 14762  008E98                     
 14763                           ;menu.c: 804: processEncoderBuxton();
 14764                           
 14765                           ; BSR set to: 0
 14766  008E98  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14767                           
 14768                           ;menu.c: 805: lcd_print_once = 1;
 14769  008E9C  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14770                           
 14771                           ;menu.c: 806: int2string((drumChannelMenu.selector) + 1);
 14772  008E9E  0E01               	movlw	1
 14773  008EA0  0101               	movlb	1	; () banked
 14774  008EA2  2540               	addwf	(_drumChannelMenu+2)& (0+255),w,b
 14775  008EA4  0100               	movlb	0	; () banked
 14776  008EA6  6F74               	movwf	int2string@number& (0+255),b
 14777  008EA8  6B75               	clrf	(int2string@number+1)& (0+255),b
 14778  008EAA  0E00               	movlw	0
 14779  008EAC  2375               	addwfc	(int2string@number+1)& (0+255),f,b
 14780  008EAE  EC52  F035         	call	_int2string	;wreg free
 14781                           
 14782                           ;menu.c: 807: Lcd_Set_Cursor(2,13);
 14783  008EB2  0E0D               	movlw	13
 14784  008EB4  0100               	movlb	0	; () banked
 14785  008EB6  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14786  008EB8  0E02               	movlw	2
 14787  008EBA  ECEC  F045         	call	_Lcd_Set_Cursor
 14788                           
 14789                           ;menu.c: 808: Lcd_Print_String(string2display);
 14790  008EBE  0E82               	movlw	low _string2display
 14791  008EC0  0100               	movlb	0	; () banked
 14792  008EC2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14793  008EC4  0E01               	movlw	high _string2display
 14794  008EC6  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14795  008EC8  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 14796  008ECC                     l3566:
 14797  008ECC  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14798  008ECE  D7E4               	goto	l3567
 14799                           
 14800                           ;menu.c: 809: }
 14801                           ;menu.c: 811: drumchannel = drumChannelMenu.selector;
 14802  008ED0  C140  F0FE         	movff	_drumChannelMenu+2,_drumchannel
 14803  008ED4  0012               	return		;funcret
 14804  008ED6                     __end_of_Function_E_2:
 14805                           	opt stack 0
 14806                           tblptru	equ	0xFF8
 14807                           tblptrh	equ	0xFF7
 14808                           tblptrl	equ	0xFF6
 14809                           tablat	equ	0xFF5
 14810                           prodh	equ	0xFF4
 14811                           prodl	equ	0xFF3
 14812                           intcon	equ	0xFF2
 14813                           intcon2	equ	0xFF1
 14814                           postinc0	equ	0xFEE
 14815                           wreg	equ	0xFE8
 14816                           postdec1	equ	0xFE5
 14817                           fsr1l	equ	0xFE1
 14818                           indf2	equ	0xFDF
 14819                           postinc2	equ	0xFDE
 14820                           fsr2h	equ	0xFDA
 14821                           fsr2l	equ	0xFD9
 14822                           status	equ	0xFD8
 14823                           
 14824 ;; *************** function _Function_E_1 *****************
 14825 ;; Defined at:
 14826 ;;		line 775 in file "menu.c"
 14827 ;; Parameters:    Size  Location     Type
 14828 ;;		None
 14829 ;; Auto vars:     Size  Location     Type
 14830 ;;		None
 14831 ;; Return value:  Size  Location     Type
 14832 ;;                  1    wreg      void 
 14833 ;; Registers used:
 14834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14835 ;; Tracked objects:
 14836 ;;		On entry : 0/0
 14837 ;;		On exit  : 0/0
 14838 ;;		Unchanged: 0/0
 14839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14844 ;;Total ram usage:        0 bytes
 14845 ;; Hardware stack levels used:    1
 14846 ;; Hardware stack levels required when called:    8
 14847 ;; This function calls:
 14848 ;;		_Lcd_Print_String
 14849 ;;		_Lcd_Set_Cursor
 14850 ;;		_int2string
 14851 ;;		_processEncoderBuxton
 14852 ;; This function is called by:
 14853 ;;		_Function_E
 14854 ;; This function uses a non-reentrant model
 14855 ;;
 14856                           
 14857                           	psect	text40
 14858  008ED6                     __ptext40:
 14859                           	opt stack 0
 14860  008ED6                     _Function_E_1:
 14861                           	opt stack 20
 14862                           
 14863                           ;menu.c: 777: which_screen = MAIN_CH_MENU;
 14864                           
 14865                           ;incstack = 0
 14866  008ED6  0E14               	movlw	20
 14867  008ED8  0100               	movlb	0	; () banked
 14868  008EDA  6FF9               	movwf	_which_screen& (0+255),b
 14869                           
 14870                           ; BSR set to: 0
 14871                           ;menu.c: 778: lcd_print_once = 0;
 14872  008EDC  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14873                           
 14874                           ; BSR set to: 0
 14875                           ;menu.c: 779: encoder_click = 0;
 14876  008EDE  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14877                           
 14878                           ; BSR set to: 0
 14879                           ;menu.c: 780: mainChannelMenu.selector = channel;
 14880  008EE0  C0F6  F143         	movff	_channel,_mainChannelMenu+2
 14881                           
 14882                           ;menu.c: 782: while(encoder_click == 0) {
 14883  008EE4  D01A               	goto	l3560
 14884  008EE6                     
 14885                           ;menu.c: 783: processEncoderBuxton();
 14886                           
 14887                           ; BSR set to: 0
 14888  008EE6  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14889                           
 14890                           ;menu.c: 784: lcd_print_once = 1;
 14891  008EEA  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14892                           
 14893                           ;menu.c: 786: int2string((mainChannelMenu.selector) + 1);
 14894  008EEC  0E01               	movlw	1
 14895  008EEE  0101               	movlb	1	; () banked
 14896  008EF0  2543               	addwf	(_mainChannelMenu+2)& (0+255),w,b
 14897  008EF2  0100               	movlb	0	; () banked
 14898  008EF4  6F74               	movwf	int2string@number& (0+255),b
 14899  008EF6  6B75               	clrf	(int2string@number+1)& (0+255),b
 14900  008EF8  0E00               	movlw	0
 14901  008EFA  2375               	addwfc	(int2string@number+1)& (0+255),f,b
 14902  008EFC  EC52  F035         	call	_int2string	;wreg free
 14903                           
 14904                           ;menu.c: 788: Lcd_Set_Cursor(2,13);
 14905  008F00  0E0D               	movlw	13
 14906  008F02  0100               	movlb	0	; () banked
 14907  008F04  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14908  008F06  0E02               	movlw	2
 14909  008F08  ECEC  F045         	call	_Lcd_Set_Cursor
 14910                           
 14911                           ;menu.c: 789: Lcd_Print_String(string2display);
 14912  008F0C  0E82               	movlw	low _string2display
 14913  008F0E  0100               	movlb	0	; () banked
 14914  008F10  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14915  008F12  0E01               	movlw	high _string2display
 14916  008F14  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14917  008F16  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 14918  008F1A                     l3560:
 14919  008F1A  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14920  008F1C  D7E4               	goto	l3561
 14921                           
 14922                           ;menu.c: 790: }
 14923                           ;menu.c: 792: channel = mainChannelMenu.selector;
 14924  008F1E  C143  F0F6         	movff	_mainChannelMenu+2,_channel
 14925  008F22  0012               	return		;funcret
 14926  008F24                     __end_of_Function_E_1:
 14927                           	opt stack 0
 14928                           tblptru	equ	0xFF8
 14929                           tblptrh	equ	0xFF7
 14930                           tblptrl	equ	0xFF6
 14931                           tablat	equ	0xFF5
 14932                           prodh	equ	0xFF4
 14933                           prodl	equ	0xFF3
 14934                           intcon	equ	0xFF2
 14935                           intcon2	equ	0xFF1
 14936                           postinc0	equ	0xFEE
 14937                           wreg	equ	0xFE8
 14938                           postdec1	equ	0xFE5
 14939                           fsr1l	equ	0xFE1
 14940                           indf2	equ	0xFDF
 14941                           postinc2	equ	0xFDE
 14942                           fsr2h	equ	0xFDA
 14943                           fsr2l	equ	0xFD9
 14944                           status	equ	0xFD8
 14945                           
 14946 ;; *************** function _Function_D *****************
 14947 ;; Defined at:
 14948 ;;		line 752 in file "menu.c"
 14949 ;; Parameters:    Size  Location     Type
 14950 ;;		None
 14951 ;; Auto vars:     Size  Location     Type
 14952 ;;		None
 14953 ;; Return value:  Size  Location     Type
 14954 ;;                  1    wreg      void 
 14955 ;; Registers used:
 14956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14957 ;; Tracked objects:
 14958 ;;		On entry : 0/0
 14959 ;;		On exit  : 0/0
 14960 ;;		Unchanged: 0/0
 14961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14965 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14966 ;;Total ram usage:        1 bytes
 14967 ;; Hardware stack levels used:    1
 14968 ;; Hardware stack levels required when called:   10
 14969 ;; This function calls:
 14970 ;;		_Function_D_1
 14971 ;;		_Function_D_2
 14972 ;;		_Function_D_3
 14973 ;;		_Function_D_4
 14974 ;;		_Function_D_5
 14975 ;;		_Lcd_Print_String
 14976 ;;		___lbmod
 14977 ;;		___wmul
 14978 ;;		_clear_row2
 14979 ;;		_processEncoderBuxton
 14980 ;; This function is called by:
 14981 ;;		_menu_lcd
 14982 ;; This function uses a non-reentrant model
 14983 ;;
 14984                           
 14985                           	psect	text41
 14986  007A5E                     __ptext41:
 14987                           	opt stack 0
 14988  007A5E                     _Function_D:
 14989                           	opt stack 19
 14990                           
 14991                           ;menu.c: 754: which_screen = POTENTIOMETER_MENU;
 14992                           
 14993                           ;incstack = 0
 14994  007A5E  0E06               	movlw	6
 14995  007A60  0100               	movlb	0	; () banked
 14996  007A62  6FF9               	movwf	_which_screen& (0+255),b
 14997                           
 14998                           ; BSR set to: 0
 14999                           ;menu.c: 755: lcd_print_once = 0;
 15000  007A64  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15001                           
 15002                           ;menu.c: 757: while(encoder_click == 0) {
 15003  007A66  D022               	goto	l3548
 15004  007A68                     
 15005                           ;menu.c: 758: processEncoderBuxton();
 15006                           
 15007                           ; BSR set to: 0
 15008  007A68  EC09  F000         	call	_processEncoderBuxton	;wreg free
 15009                           
 15010                           ;menu.c: 759: if (lcd_print_once == 0) {
 15011  007A6C  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15012  007A6E  D01D               	goto	l3550
 15013                           
 15014                           ;menu.c: 760: clear_row2();
 15015  007A70  EC3E  F04A         	call	_clear_row2	;wreg free
 15016                           
 15017                           ;menu.c: 761: Lcd_Print_String(LCD_STRINGS[(potsMenu.selector % potsMenu.number) + potsM
      +                          enu.address]);
 15018  007A74  C03E  F060         	movff	_potsMenu,___lbmod@divisor
 15019  007A78  5040               	movf	_potsMenu+2,w,c
 15020  007A7A  ECBD  F049         	call	___lbmod
 15021  007A7E  0100               	movlb	0	; () banked
 15022  007A80  6FA0               	movwf	??_Function_D& (0+255),b
 15023  007A82  51A0               	movf	??_Function_D& (0+255),w,b
 15024  007A84  243F               	addwf	_potsMenu+1,w,c
 15025  007A86  6F64               	movwf	___wmul@multiplier& (0+255),b
 15026  007A88  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 15027  007A8A  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15028  007A8C  0E00               	movlw	0
 15029  007A8E  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15030  007A90  0E11               	movlw	17
 15031  007A92  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15032  007A94  EC66  F04A         	call	___wmul	;wreg free
 15033  007A98  0E9E               	movlw	low _LCD_STRINGS
 15034  007A9A  0100               	movlb	0	; () banked
 15035  007A9C  2564               	addwf	?___wmul& (0+255),w,b
 15036  007A9E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15037  007AA0  0EF3               	movlw	high _LCD_STRINGS
 15038  007AA2  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15039  007AA4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15040  007AA6  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 15041  007AAA                     l3550:
 15042                           
 15043                           ;menu.c: 762: }
 15044                           ;menu.c: 763: lcd_print_once = 1;
 15045  007AAA  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15046  007AAC                     l3548:
 15047  007AAC  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15048  007AAE  D7DC               	goto	l3549
 15049                           
 15050                           ;menu.c: 764: }
 15051                           ;menu.c: 766: if(potsMenu.selector == 0) {Function_D_1();}
 15052  007AB0  5040               	movf	_potsMenu+2,w,c
 15053  007AB2  B4D8               	btfsc	status,2,c
 15054  007AB4  EC64  F03C         	call	_Function_D_1	;wreg free
 15055                           
 15056                           ;menu.c: 767: if(potsMenu.selector == 1) {Function_D_2();}
 15057  007AB8  0440               	decf	_potsMenu+2,w,c
 15058  007ABA  B4D8               	btfsc	status,2,c
 15059  007ABC  ECA6  F044         	call	_Function_D_2	;wreg free
 15060                           
 15061                           ;menu.c: 768: if(potsMenu.selector == 2) {Function_D_3();}
 15062  007AC0  0E02               	movlw	2
 15063  007AC2  1840               	xorwf	_potsMenu+2,w,c
 15064  007AC4  B4D8               	btfsc	status,2,c
 15065  007AC6  EC6C  F041         	call	_Function_D_3	;wreg free
 15066                           
 15067                           ;menu.c: 769: if(potsMenu.selector == 3) {Function_D_4();}
 15068  007ACA  0E03               	movlw	3
 15069  007ACC  1840               	xorwf	_potsMenu+2,w,c
 15070  007ACE  B4D8               	btfsc	status,2,c
 15071  007AD0  EC79  F03F         	call	_Function_D_4	;wreg free
 15072                           
 15073                           ;menu.c: 770: if(potsMenu.selector == 4) {Function_D_5();}
 15074  007AD4  0E04               	movlw	4
 15075  007AD6  1840               	xorwf	_potsMenu+2,w,c
 15076  007AD8  A4D8               	btfss	status,2,c
 15077  007ADA  0012               	return	
 15078  007ADC  EC3A  F03F         	call	_Function_D_5	;wreg free
 15079  007AE0  0012               	return	
 15080  007AE2                     __end_of_Function_D:
 15081                           	opt stack 0
 15082                           tblptru	equ	0xFF8
 15083                           tblptrh	equ	0xFF7
 15084                           tblptrl	equ	0xFF6
 15085                           tablat	equ	0xFF5
 15086                           prodh	equ	0xFF4
 15087                           prodl	equ	0xFF3
 15088                           intcon	equ	0xFF2
 15089                           intcon2	equ	0xFF1
 15090                           postinc0	equ	0xFEE
 15091                           wreg	equ	0xFE8
 15092                           postdec1	equ	0xFE5
 15093                           fsr1l	equ	0xFE1
 15094                           indf2	equ	0xFDF
 15095                           postinc2	equ	0xFDE
 15096                           fsr2h	equ	0xFDA
 15097                           fsr2l	equ	0xFD9
 15098                           status	equ	0xFD8
 15099                           
 15100 ;; *************** function _Function_D_5 *****************
 15101 ;; Defined at:
 15102 ;;		line 726 in file "menu.c"
 15103 ;; Parameters:    Size  Location     Type
 15104 ;;		None
 15105 ;; Auto vars:     Size  Location     Type
 15106 ;;  array_index     1   29[BANK0 ] unsigned char 
 15107 ;; Return value:  Size  Location     Type
 15108 ;;                  1    wreg      void 
 15109 ;; Registers used:
 15110 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15111 ;; Tracked objects:
 15112 ;;		On entry : 0/0
 15113 ;;		On exit  : 0/0
 15114 ;;		Unchanged: 0/0
 15115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15117 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15118 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15119 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15120 ;;Total ram usage:        2 bytes
 15121 ;; Hardware stack levels used:    1
 15122 ;; Hardware stack levels required when called:    9
 15123 ;; This function calls:
 15124 ;;		_Lcd_Print_String
 15125 ;;		___lbmod
 15126 ;;		___wmul
 15127 ;;		_clear_row1
 15128 ;;		_clear_row2
 15129 ;;		_processEncoderBuxton
 15130 ;;		_setControllerNumbers
 15131 ;; This function is called by:
 15132 ;;		_Function_D
 15133 ;; This function uses a non-reentrant model
 15134 ;;
 15135                           
 15136                           	psect	text42
 15137  007E74                     __ptext42:
 15138                           	opt stack 0
 15139  007E74                     _Function_D_5:
 15140                           	opt stack 19
 15141                           
 15142                           ;menu.c: 728: which_screen = JOYSTICK_CC_MENU;
 15143                           
 15144                           ;incstack = 0
 15145  007E74  0E13               	movlw	19
 15146  007E76  0100               	movlb	0	; () banked
 15147  007E78  6FF9               	movwf	_which_screen& (0+255),b
 15148                           
 15149                           ; BSR set to: 0
 15150                           ;menu.c: 730: lcd_print_once = 0;
 15151  007E7A  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15152                           
 15153                           ; BSR set to: 0
 15154                           ;menu.c: 731: encoder_click = 0;
 15155  007E7C  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15156                           
 15157                           ;menu.c: 733: while(encoder_click == 0) {
 15158  007E7E  D02E               	goto	l3541
 15159  007E80                     
 15160                           ;menu.c: 734: processEncoderBuxton();
 15161                           
 15162                           ; BSR set to: 0
 15163  007E80  EC09  F000         	call	_processEncoderBuxton	;wreg free
 15164                           
 15165                           ;menu.c: 735: if (lcd_print_once == 0) {
 15166  007E84  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15167  007E86  D029               	goto	l3543
 15168                           
 15169                           ;menu.c: 736: clear_row1();
 15170  007E88  EC52  F04A         	call	_clear_row1	;wreg free
 15171                           
 15172                           ;menu.c: 737: Lcd_Print_String("Set Joystick CC#");
 15173  007E8C  0E97               	movlw	low STR_33
 15174  007E8E  0100               	movlb	0	; () banked
 15175  007E90  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15176  007E92  0EFD               	movlw	high STR_33
 15177  007E94  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15178  007E96  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 15179                           
 15180                           ;menu.c: 738: clear_row2();
 15181  007E9A  EC3E  F04A         	call	_clear_row2	;wreg free
 15182                           
 15183                           ;menu.c: 739: Lcd_Print_String(LCD_STRINGS[(joystickCCMenu.selector % joystickCCMenu.num
      +                          ber) + joystickCCMenu.address]);
 15184  007E9E  C14A  F060         	movff	_joystickCCMenu,___lbmod@divisor
 15185  007EA2  0101               	movlb	1	; () banked
 15186  007EA4  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15187  007EA6  ECBD  F049         	call	___lbmod
 15188  007EAA  0100               	movlb	0	; () banked
 15189  007EAC  6F7C               	movwf	??_Function_D_5& (0+255),b
 15190  007EAE  517C               	movf	??_Function_D_5& (0+255),w,b
 15191  007EB0  0101               	movlb	1	; () banked
 15192  007EB2  254B               	addwf	(_joystickCCMenu+1)& (0+255),w,b
 15193  007EB4  0100               	movlb	0	; () banked
 15194  007EB6  6F64               	movwf	___wmul@multiplier& (0+255),b
 15195  007EB8  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 15196  007EBA  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15197  007EBC  0E00               	movlw	0
 15198  007EBE  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15199  007EC0  0E11               	movlw	17
 15200  007EC2  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15201  007EC4  EC66  F04A         	call	___wmul	;wreg free
 15202  007EC8  0E9E               	movlw	low _LCD_STRINGS
 15203  007ECA  0100               	movlb	0	; () banked
 15204  007ECC  2564               	addwf	?___wmul& (0+255),w,b
 15205  007ECE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15206  007ED0  0EF3               	movlw	high _LCD_STRINGS
 15207  007ED2  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15208  007ED4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15209  007ED6  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 15210  007EDA                     l3543:
 15211                           
 15212                           ;menu.c: 740: }
 15213                           ;menu.c: 741: lcd_print_once = 1;
 15214  007EDA  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15215  007EDC                     l3541:
 15216  007EDC  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15217  007EDE  D7D0               	goto	l3542
 15218                           
 15219                           ;menu.c: 742: }
 15220                           ;menu.c: 746: unsigned char array_index = (joystickCCMenu.selector) + 14;
 15221  007EE0  0101               	movlb	1	; () banked
 15222  007EE2  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15223  007EE4  0F0E               	addlw	14
 15224  007EE6  0100               	movlb	0	; () banked
 15225  007EE8  6F7D               	movwf	Function_D_5@array_index& (0+255),b
 15226                           
 15227                           ; BSR set to: 0
 15228                           ;menu.c: 747: setControllerNumbers(array_index);
 15229  007EEA  517D               	movf	Function_D_5@array_index& (0+255),w,b
 15230  007EEC  ECBE  F010         	call	_setControllerNumbers
 15231  007EF0  0012               	return		;funcret
 15232  007EF2                     __end_of_Function_D_5:
 15233                           	opt stack 0
 15234                           tblptru	equ	0xFF8
 15235                           tblptrh	equ	0xFF7
 15236                           tblptrl	equ	0xFF6
 15237                           tablat	equ	0xFF5
 15238                           prodh	equ	0xFF4
 15239                           prodl	equ	0xFF3
 15240                           intcon	equ	0xFF2
 15241                           intcon2	equ	0xFF1
 15242                           postinc0	equ	0xFEE
 15243                           wreg	equ	0xFE8
 15244                           postdec1	equ	0xFE5
 15245                           fsr1l	equ	0xFE1
 15246                           indf2	equ	0xFDF
 15247                           postinc2	equ	0xFDE
 15248                           fsr2h	equ	0xFDA
 15249                           fsr2l	equ	0xFD9
 15250                           status	equ	0xFD8
 15251                           
 15252 ;; *************** function _Function_D_4 *****************
 15253 ;; Defined at:
 15254 ;;		line 699 in file "menu.c"
 15255 ;; Parameters:    Size  Location     Type
 15256 ;;		None
 15257 ;; Auto vars:     Size  Location     Type
 15258 ;;  array_index     1   29[BANK0 ] unsigned char 
 15259 ;; Return value:  Size  Location     Type
 15260 ;;                  1    wreg      void 
 15261 ;; Registers used:
 15262 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15263 ;; Tracked objects:
 15264 ;;		On entry : 0/0
 15265 ;;		On exit  : 0/0
 15266 ;;		Unchanged: 0/0
 15267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15272 ;;Total ram usage:        2 bytes
 15273 ;; Hardware stack levels used:    1
 15274 ;; Hardware stack levels required when called:    9
 15275 ;; This function calls:
 15276 ;;		_Lcd_Print_String
 15277 ;;		___lbmod
 15278 ;;		___wmul
 15279 ;;		_clear_row1
 15280 ;;		_clear_row2
 15281 ;;		_processEncoderBuxton
 15282 ;;		_setControllerNumbers
 15283 ;; This function is called by:
 15284 ;;		_Function_D
 15285 ;; This function uses a non-reentrant model
 15286 ;;
 15287                           
 15288                           	psect	text43
 15289  007EF2                     __ptext43:
 15290                           	opt stack 0
 15291  007EF2                     _Function_D_4:
 15292                           	opt stack 19
 15293                           
 15294                           ;menu.c: 701: which_screen = SLIDEPOTS_CC_MENU;
 15295                           
 15296                           ;incstack = 0
 15297  007EF2  0E12               	movlw	18
 15298  007EF4  0100               	movlb	0	; () banked
 15299  007EF6  6FF9               	movwf	_which_screen& (0+255),b
 15300                           
 15301                           ; BSR set to: 0
 15302                           ;menu.c: 703: lcd_print_once = 0;
 15303  007EF8  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15304                           
 15305                           ; BSR set to: 0
 15306                           ;menu.c: 704: encoder_click = 0;
 15307  007EFA  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15308                           
 15309                           ;menu.c: 706: while(encoder_click == 0) {
 15310  007EFC  D02E               	goto	l3534
 15311  007EFE                     
 15312                           ;menu.c: 707: processEncoderBuxton();
 15313                           
 15314                           ; BSR set to: 0
 15315  007EFE  EC09  F000         	call	_processEncoderBuxton	;wreg free
 15316                           
 15317                           ;menu.c: 708: if (lcd_print_once == 0) {
 15318  007F02  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15319  007F04  D029               	goto	l3536
 15320                           
 15321                           ;menu.c: 709: clear_row1();
 15322  007F06  EC52  F04A         	call	_clear_row1	;wreg free
 15323                           
 15324                           ;menu.c: 710: Lcd_Print_String("Slidepots CC#:");
 15325  007F0A  0E4D               	movlw	low STR_32
 15326  007F0C  0100               	movlb	0	; () banked
 15327  007F0E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15328  007F10  0EFE               	movlw	high STR_32
 15329  007F12  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15330  007F14  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 15331                           
 15332                           ;menu.c: 711: clear_row2();
 15333  007F18  EC3E  F04A         	call	_clear_row2	;wreg free
 15334                           
 15335                           ;menu.c: 712: Lcd_Print_String(LCD_STRINGS[(slidepotsCCMenu.selector % slidepotsCCMenu.n
      +                          umber) + slidepotsCCMenu.address]);
 15336  007F1C  C14D  F060         	movff	_slidepotsCCMenu,___lbmod@divisor
 15337  007F20  0101               	movlb	1	; () banked
 15338  007F22  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15339  007F24  ECBD  F049         	call	___lbmod
 15340  007F28  0100               	movlb	0	; () banked
 15341  007F2A  6F7C               	movwf	??_Function_D_4& (0+255),b
 15342  007F2C  517C               	movf	??_Function_D_4& (0+255),w,b
 15343  007F2E  0101               	movlb	1	; () banked
 15344  007F30  254E               	addwf	(_slidepotsCCMenu+1)& (0+255),w,b
 15345  007F32  0100               	movlb	0	; () banked
 15346  007F34  6F64               	movwf	___wmul@multiplier& (0+255),b
 15347  007F36  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 15348  007F38  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15349  007F3A  0E00               	movlw	0
 15350  007F3C  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15351  007F3E  0E11               	movlw	17
 15352  007F40  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15353  007F42  EC66  F04A         	call	___wmul	;wreg free
 15354  007F46  0E9E               	movlw	low _LCD_STRINGS
 15355  007F48  0100               	movlb	0	; () banked
 15356  007F4A  2564               	addwf	?___wmul& (0+255),w,b
 15357  007F4C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15358  007F4E  0EF3               	movlw	high _LCD_STRINGS
 15359  007F50  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15360  007F52  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15361  007F54  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 15362  007F58                     l3536:
 15363                           
 15364                           ;menu.c: 713: }
 15365                           ;menu.c: 714: lcd_print_once = 1;
 15366  007F58  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15367  007F5A                     l3534:
 15368  007F5A  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15369  007F5C  D7D0               	goto	l3535
 15370                           
 15371                           ;menu.c: 715: }
 15372                           ;menu.c: 720: unsigned char array_index = (slidepotsCCMenu.selector) + 7;
 15373  007F5E  0101               	movlb	1	; () banked
 15374  007F60  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15375  007F62  0F07               	addlw	7
 15376  007F64  0100               	movlb	0	; () banked
 15377  007F66  6F7D               	movwf	Function_D_4@array_index& (0+255),b
 15378                           
 15379                           ; BSR set to: 0
 15380                           ;menu.c: 721: setControllerNumbers(array_index);
 15381  007F68  517D               	movf	Function_D_4@array_index& (0+255),w,b
 15382  007F6A  ECBE  F010         	call	_setControllerNumbers
 15383  007F6E  0012               	return		;funcret
 15384  007F70                     __end_of_Function_D_4:
 15385                           	opt stack 0
 15386                           tblptru	equ	0xFF8
 15387                           tblptrh	equ	0xFF7
 15388                           tblptrl	equ	0xFF6
 15389                           tablat	equ	0xFF5
 15390                           prodh	equ	0xFF4
 15391                           prodl	equ	0xFF3
 15392                           intcon	equ	0xFF2
 15393                           intcon2	equ	0xFF1
 15394                           postinc0	equ	0xFEE
 15395                           wreg	equ	0xFE8
 15396                           postdec1	equ	0xFE5
 15397                           fsr1l	equ	0xFE1
 15398                           indf2	equ	0xFDF
 15399                           postinc2	equ	0xFDE
 15400                           fsr2h	equ	0xFDA
 15401                           fsr2l	equ	0xFD9
 15402                           status	equ	0xFD8
 15403                           
 15404 ;; *************** function _Function_D_3 *****************
 15405 ;; Defined at:
 15406 ;;		line 675 in file "menu.c"
 15407 ;; Parameters:    Size  Location     Type
 15408 ;;		None
 15409 ;; Auto vars:     Size  Location     Type
 15410 ;;  array_index     1   29[BANK0 ] unsigned char 
 15411 ;; Return value:  Size  Location     Type
 15412 ;;                  1    wreg      void 
 15413 ;; Registers used:
 15414 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15415 ;; Tracked objects:
 15416 ;;		On entry : 0/0
 15417 ;;		On exit  : 0/0
 15418 ;;		Unchanged: 0/0
 15419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15424 ;;Total ram usage:        2 bytes
 15425 ;; Hardware stack levels used:    1
 15426 ;; Hardware stack levels required when called:    9
 15427 ;; This function calls:
 15428 ;;		_Lcd_Print_String
 15429 ;;		___lbmod
 15430 ;;		___wmul
 15431 ;;		_clear_row1
 15432 ;;		_clear_row2
 15433 ;;		_processEncoderBuxton
 15434 ;;		_setControllerNumbers
 15435 ;; This function is called by:
 15436 ;;		_Function_D
 15437 ;; This function uses a non-reentrant model
 15438 ;;
 15439                           
 15440                           	psect	text44
 15441  0082D8                     __ptext44:
 15442                           	opt stack 0
 15443  0082D8                     _Function_D_3:
 15444                           	opt stack 19
 15445                           
 15446                           ;menu.c: 677: which_screen = POTS_CC_MENU;
 15447                           
 15448                           ;incstack = 0
 15449  0082D8  0E11               	movlw	17
 15450  0082DA  0100               	movlb	0	; () banked
 15451  0082DC  6FF9               	movwf	_which_screen& (0+255),b
 15452                           
 15453                           ; BSR set to: 0
 15454                           ;menu.c: 679: lcd_print_once = 0;
 15455  0082DE  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15456                           
 15457                           ; BSR set to: 0
 15458                           ;menu.c: 680: encoder_click = 0;
 15459  0082E0  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15460                           
 15461                           ;menu.c: 682: while(encoder_click == 0) {
 15462  0082E2  D02E               	goto	l3527
 15463  0082E4                     
 15464                           ;menu.c: 683: processEncoderBuxton();
 15465                           
 15466                           ; BSR set to: 0
 15467  0082E4  EC09  F000         	call	_processEncoderBuxton	;wreg free
 15468                           
 15469                           ;menu.c: 684: if (lcd_print_once == 0) {
 15470  0082E8  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15471  0082EA  D029               	goto	l3529
 15472                           
 15473                           ;menu.c: 685: clear_row1();
 15474  0082EC  EC52  F04A         	call	_clear_row1	;wreg free
 15475                           
 15476                           ;menu.c: 686: Lcd_Print_String("Set Pots CC#:");
 15477  0082F0  0EC4               	movlw	low STR_31
 15478  0082F2  0100               	movlb	0	; () banked
 15479  0082F4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15480  0082F6  0EFE               	movlw	high STR_31
 15481  0082F8  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15482  0082FA  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 15483                           
 15484                           ;menu.c: 687: clear_row2();
 15485  0082FE  EC3E  F04A         	call	_clear_row2	;wreg free
 15486                           
 15487                           ;menu.c: 688: Lcd_Print_String(LCD_STRINGS[(potsCCMenu.selector % potsCCMenu.number) + p
      +                          otsCCMenu.address]);
 15488  008302  C150  F060         	movff	_potsCCMenu,___lbmod@divisor
 15489  008306  0101               	movlb	1	; () banked
 15490  008308  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 15491  00830A  ECBD  F049         	call	___lbmod
 15492  00830E  0100               	movlb	0	; () banked
 15493  008310  6F7C               	movwf	??_Function_D_3& (0+255),b
 15494  008312  517C               	movf	??_Function_D_3& (0+255),w,b
 15495  008314  0101               	movlb	1	; () banked
 15496  008316  2551               	addwf	(_potsCCMenu+1)& (0+255),w,b
 15497  008318  0100               	movlb	0	; () banked
 15498  00831A  6F64               	movwf	___wmul@multiplier& (0+255),b
 15499  00831C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 15500  00831E  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15501  008320  0E00               	movlw	0
 15502  008322  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15503  008324  0E11               	movlw	17
 15504  008326  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15505  008328  EC66  F04A         	call	___wmul	;wreg free
 15506  00832C  0E9E               	movlw	low _LCD_STRINGS
 15507  00832E  0100               	movlb	0	; () banked
 15508  008330  2564               	addwf	?___wmul& (0+255),w,b
 15509  008332  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15510  008334  0EF3               	movlw	high _LCD_STRINGS
 15511  008336  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15512  008338  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15513  00833A  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 15514  00833E                     l3529:
 15515                           
 15516                           ;menu.c: 689: }
 15517                           ;menu.c: 690: lcd_print_once = 1;
 15518  00833E  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15519  008340                     l3527:
 15520  008340  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15521  008342  D7D0               	goto	l3528
 15522                           
 15523                           ;menu.c: 691: }
 15524                           ;menu.c: 693: unsigned char array_index = potsCCMenu.selector;
 15525  008344  C152  F07D         	movff	_potsCCMenu+2,Function_D_3@array_index
 15526                           
 15527                           ;menu.c: 694: setControllerNumbers(array_index);
 15528  008348  0100               	movlb	0	; () banked
 15529  00834A  517D               	movf	Function_D_3@array_index& (0+255),w,b
 15530  00834C  ECBE  F010         	call	_setControllerNumbers
 15531  008350  0012               	return		;funcret
 15532  008352                     __end_of_Function_D_3:
 15533                           	opt stack 0
 15534                           tblptru	equ	0xFF8
 15535                           tblptrh	equ	0xFF7
 15536                           tblptrl	equ	0xFF6
 15537                           tablat	equ	0xFF5
 15538                           prodh	equ	0xFF4
 15539                           prodl	equ	0xFF3
 15540                           intcon	equ	0xFF2
 15541                           intcon2	equ	0xFF1
 15542                           postinc0	equ	0xFEE
 15543                           wreg	equ	0xFE8
 15544                           postdec1	equ	0xFE5
 15545                           fsr1l	equ	0xFE1
 15546                           indf2	equ	0xFDF
 15547                           postinc2	equ	0xFDE
 15548                           fsr2h	equ	0xFDA
 15549                           fsr2l	equ	0xFD9
 15550                           status	equ	0xFD8
 15551                           
 15552 ;; *************** function _setControllerNumbers *****************
 15553 ;; Defined at:
 15554 ;;		line 125 in file "menu.c"
 15555 ;; Parameters:    Size  Location     Type
 15556 ;;  array_index     1    wreg     unsigned char 
 15557 ;; Auto vars:     Size  Location     Type
 15558 ;;  array_index     1   27[BANK0 ] unsigned char 
 15559 ;; Return value:  Size  Location     Type
 15560 ;;                  1    wreg      void 
 15561 ;; Registers used:
 15562 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15563 ;; Tracked objects:
 15564 ;;		On entry : 0/0
 15565 ;;		On exit  : 0/0
 15566 ;;		Unchanged: 0/0
 15567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15569 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15570 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15571 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15572 ;;Total ram usage:        2 bytes
 15573 ;; Hardware stack levels used:    1
 15574 ;; Hardware stack levels required when called:    8
 15575 ;; This function calls:
 15576 ;;		_Lcd_Print_String
 15577 ;;		_Lcd_Set_Cursor
 15578 ;;		_int2string
 15579 ;; This function is called by:
 15580 ;;		_Function_D_3
 15581 ;;		_Function_D_4
 15582 ;;		_Function_D_5
 15583 ;;		_initializeControllerNumbers
 15584 ;; This function uses a non-reentrant model
 15585 ;;
 15586                           
 15587                           	psect	text45
 15588  00217C                     __ptext45:
 15589                           	opt stack 0
 15590  00217C                     _setControllerNumbers:
 15591                           	opt stack 19
 15592                           
 15593                           ;incstack = 0
 15594                           ;setControllerNumbers@array_index stored from wreg
 15595  00217C  0100               	movlb	0	; () banked
 15596  00217E  6F7B               	movwf	setControllerNumbers@array_index& (0+255),b
 15597                           
 15598                           ;menu.c: 127: which_screen = BLANK;
 15599  002180  0E00               	movlw	0
 15600  002182  0100               	movlb	0	; () banked
 15601  002184  6FF9               	movwf	_which_screen& (0+255),b
 15602                           
 15603                           ; BSR set to: 0
 15604                           ;menu.c: 128: lcd_print_once = 0;
 15605  002186  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15606                           
 15607                           ; BSR set to: 0
 15608                           ;menu.c: 129: encoder_click = 0;
 15609  002188  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15610                           
 15611                           ;menu.c: 131: while(encoder_click == 0) {
 15612  00218A  D271               	goto	l3382
 15613  00218C                     l3355:
 15614                           
 15615                           ;menu.c: 136: if(lcd_print_once == 0) {
 15616  00218C  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15617  00218E  D1CF               	goto	l3376
 15618                           
 15619                           ;menu.c: 138: if (encoder_direction == 0x10) {
 15620  002190  0E10               	movlw	16
 15621  002192  0100               	movlb	0	; () banked
 15622  002194  19EB               	xorwf	_encoder_direction& (0+255),w,b
 15623  002196  A4D8               	btfss	status,2,c
 15624  002198  D075               	goto	l3357
 15625                           
 15626                           ; BSR set to: 0
 15627                           ;menu.c: 140: if(inputPotsArray[array_index].controller_resolution == 0){
 15628  00219A  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15629  00219C  0D03               	mullw	3
 15630  00219E  0EAC               	movlw	low _inputPotsArray
 15631  0021A0  24F3               	addwf	prodl,w,c
 15632  0021A2  6ED9               	movwf	fsr2l,c
 15633  0021A4  0E02               	movlw	high _inputPotsArray
 15634  0021A6  20F4               	addwfc	prodh,w,c
 15635  0021A8  6EDA               	movwf	fsr2h,c
 15636  0021AA  0102               	movlb	2	; () banked
 15637  0021AC  B0DF               	btfsc	indf2,0,c
 15638  0021AE  D03C               	goto	l3360
 15639                           
 15640                           ; BSR set to: 2
 15641                           ;menu.c: 141: if(inputPotsArray[array_index].controller_number < 119) {
 15642  0021B0  0100               	movlb	0	; () banked
 15643  0021B2  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15644  0021B4  0D03               	mullw	3
 15645  0021B6  0E01               	movlw	1
 15646  0021B8  26F3               	addwf	prodl,f,c
 15647  0021BA  0E00               	movlw	0
 15648  0021BC  22F4               	addwfc	prodh,f,c
 15649  0021BE  0EAC               	movlw	low _inputPotsArray
 15650  0021C0  24F3               	addwf	prodl,w,c
 15651  0021C2  6ED9               	movwf	fsr2l,c
 15652  0021C4  0E02               	movlw	high _inputPotsArray
 15653  0021C6  20F4               	addwfc	prodh,w,c
 15654  0021C8  6EDA               	movwf	fsr2h,c
 15655  0021CA  50DF               	movf	indf2,w,c
 15656  0021CC  0A80               	xorlw	128
 15657  0021CE  0F09               	addlw	-247
 15658  0021D0  B0D8               	btfsc	status,0,c
 15659  0021D2  D02A               	goto	l3360
 15660                           
 15661                           ; BSR set to: 0
 15662                           ;menu.c: 142: inputPotsArray[array_index].controller_number++;
 15663  0021D4  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15664  0021D6  0D03               	mullw	3
 15665  0021D8  0E01               	movlw	1
 15666  0021DA  26F3               	addwf	prodl,f,c
 15667  0021DC  0E00               	movlw	0
 15668  0021DE  22F4               	addwfc	prodh,f,c
 15669  0021E0  0EAC               	movlw	low _inputPotsArray
 15670  0021E2  24F3               	addwf	prodl,w,c
 15671  0021E4  6ED9               	movwf	fsr2l,c
 15672  0021E6  0E02               	movlw	high _inputPotsArray
 15673  0021E8  20F4               	addwfc	prodh,w,c
 15674  0021EA  6EDA               	movwf	fsr2h,c
 15675  0021EC  2ADF               	incf	indf2,f,c
 15676                           
 15677                           ;menu.c: 143: if(inputPotsArray[array_index].controller_number == 0){inputPotsArray[arra
      +                          y_index].controller_number = 64;}
 15678  0021EE  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15679  0021F0  0D03               	mullw	3
 15680  0021F2  0E01               	movlw	1
 15681  0021F4  26F3               	addwf	prodl,f,c
 15682  0021F6  0E00               	movlw	0
 15683  0021F8  22F4               	addwfc	prodh,f,c
 15684  0021FA  0EAC               	movlw	low _inputPotsArray
 15685  0021FC  24F3               	addwf	prodl,w,c
 15686  0021FE  6ED9               	movwf	fsr2l,c
 15687  002200  0E02               	movlw	high _inputPotsArray
 15688  002202  20F4               	addwfc	prodh,w,c
 15689  002204  6EDA               	movwf	fsr2h,c
 15690  002206  50DF               	movf	indf2,w,c
 15691  002208  A4D8               	btfss	status,2,c
 15692  00220A  D00E               	goto	l3360
 15693                           
 15694                           ; BSR set to: 0
 15695  00220C  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15696  00220E  0D03               	mullw	3
 15697  002210  0E01               	movlw	1
 15698  002212  26F3               	addwf	prodl,f,c
 15699  002214  0E00               	movlw	0
 15700  002216  22F4               	addwfc	prodh,f,c
 15701  002218  0EAC               	movlw	low _inputPotsArray
 15702  00221A  24F3               	addwf	prodl,w,c
 15703  00221C  6ED9               	movwf	fsr2l,c
 15704  00221E  0E02               	movlw	high _inputPotsArray
 15705  002220  20F4               	addwfc	prodh,w,c
 15706  002222  6EDA               	movwf	fsr2h,c
 15707  002224  0E40               	movlw	64
 15708  002226  6EDF               	movwf	indf2,c
 15709  002228                     l3360:
 15710                           
 15711                           ;menu.c: 144: }
 15712                           ;menu.c: 145: }
 15713                           ;menu.c: 147: if(inputPotsArray[array_index].controller_resolution == 1){
 15714                           
 15715                           ; BSR set to: 0
 15716                           
 15717                           ; BSR set to: 0
 15718  002228  0100               	movlb	0	; () banked
 15719  00222A  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15720  00222C  0D03               	mullw	3
 15721  00222E  0EAC               	movlw	low _inputPotsArray
 15722  002230  24F3               	addwf	prodl,w,c
 15723  002232  6ED9               	movwf	fsr2l,c
 15724  002234  0E02               	movlw	high _inputPotsArray
 15725  002236  20F4               	addwfc	prodh,w,c
 15726  002238  6EDA               	movwf	fsr2h,c
 15727  00223A  0102               	movlb	2	; () banked
 15728  00223C  A0DF               	btfss	indf2,0,c
 15729  00223E  D01F               	goto	l3362
 15730                           
 15731                           ; BSR set to: 2
 15732                           ;menu.c: 148: if(inputPotsArray[array_index].controller_number_two_byte < 31) {
 15733  002240  0100               	movlb	0	; () banked
 15734  002242  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15735  002244  0D03               	mullw	3
 15736  002246  0E02               	movlw	2
 15737  002248  26F3               	addwf	prodl,f,c
 15738  00224A  0E00               	movlw	0
 15739  00224C  22F4               	addwfc	prodh,f,c
 15740  00224E  0EAC               	movlw	low _inputPotsArray
 15741  002250  24F3               	addwf	prodl,w,c
 15742  002252  6ED9               	movwf	fsr2l,c
 15743  002254  0E02               	movlw	high _inputPotsArray
 15744  002256  20F4               	addwfc	prodh,w,c
 15745  002258  6EDA               	movwf	fsr2h,c
 15746  00225A  50DF               	movf	indf2,w,c
 15747  00225C  0A80               	xorlw	128
 15748  00225E  0F61               	addlw	-159
 15749  002260  B0D8               	btfsc	status,0,c
 15750  002262  D00D               	goto	l3362
 15751                           
 15752                           ; BSR set to: 0
 15753                           ;menu.c: 149: inputPotsArray[array_index].controller_number_two_byte++;
 15754  002264  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15755  002266  0D03               	mullw	3
 15756  002268  0E02               	movlw	2
 15757  00226A  26F3               	addwf	prodl,f,c
 15758  00226C  0E00               	movlw	0
 15759  00226E  22F4               	addwfc	prodh,f,c
 15760  002270  0EAC               	movlw	low _inputPotsArray
 15761  002272  24F3               	addwf	prodl,w,c
 15762  002274  6ED9               	movwf	fsr2l,c
 15763  002276  0E02               	movlw	high _inputPotsArray
 15764  002278  20F4               	addwfc	prodh,w,c
 15765  00227A  6EDA               	movwf	fsr2h,c
 15766  00227C  2ADF               	incf	indf2,f,c
 15767  00227E                     l3362:
 15768                           
 15769                           ;menu.c: 150: }
 15770                           ;menu.c: 151: }
 15771                           ;menu.c: 153: encoder_direction = 0x00;
 15772                           
 15773                           ; BSR set to: 0
 15774                           
 15775                           ; BSR set to: 0
 15776  00227E  0E00               	movlw	0
 15777  002280  0100               	movlb	0	; () banked
 15778  002282  6FEB               	movwf	_encoder_direction& (0+255),b
 15779  002284                     l3357:
 15780                           
 15781                           ; BSR set to: 0
 15782                           ;menu.c: 154: }
 15783                           ;menu.c: 158: if (encoder_direction == 0x20) {
 15784                           
 15785                           ; BSR set to: 0
 15786  002284  0E20               	movlw	32
 15787  002286  19EB               	xorwf	_encoder_direction& (0+255),w,b
 15788  002288  A4D8               	btfss	status,2,c
 15789  00228A  D0B2               	goto	l3363
 15790                           
 15791                           ; BSR set to: 0
 15792                           ;menu.c: 160: if(inputPotsArray[array_index].controller_resolution == 0){
 15793  00228C  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15794  00228E  0D03               	mullw	3
 15795  002290  0EAC               	movlw	low _inputPotsArray
 15796  002292  24F3               	addwf	prodl,w,c
 15797  002294  6ED9               	movwf	fsr2l,c
 15798  002296  0E02               	movlw	high _inputPotsArray
 15799  002298  20F4               	addwfc	prodh,w,c
 15800  00229A  6EDA               	movwf	fsr2h,c
 15801  00229C  0102               	movlb	2	; () banked
 15802  00229E  B0DF               	btfsc	indf2,0,c
 15803  0022A0  D079               	goto	l3368
 15804                           
 15805                           ; BSR set to: 2
 15806                           ;menu.c: 162: if(inputPotsArray[array_index].controller_number > -3) {
 15807  0022A2  0100               	movlb	0	; () banked
 15808  0022A4  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15809  0022A6  0D03               	mullw	3
 15810  0022A8  0E01               	movlw	1
 15811  0022AA  26F3               	addwf	prodl,f,c
 15812  0022AC  0E00               	movlw	0
 15813  0022AE  22F4               	addwfc	prodh,f,c
 15814  0022B0  0EAC               	movlw	low _inputPotsArray
 15815  0022B2  24F3               	addwf	prodl,w,c
 15816  0022B4  6ED9               	movwf	fsr2l,c
 15817  0022B6  0E02               	movlw	high _inputPotsArray
 15818  0022B8  20F4               	addwfc	prodh,w,c
 15819  0022BA  6EDA               	movwf	fsr2h,c
 15820  0022BC  50DF               	movf	indf2,w,c
 15821  0022BE  0A80               	xorlw	128
 15822  0022C0  0F82               	addlw	130
 15823  0022C2  A0D8               	btfss	status,0,c
 15824  0022C4  D00D               	goto	l3365
 15825                           
 15826                           ; BSR set to: 0
 15827                           ;menu.c: 163: inputPotsArray[array_index].controller_number--;
 15828  0022C6  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15829  0022C8  0D03               	mullw	3
 15830  0022CA  0E01               	movlw	1
 15831  0022CC  26F3               	addwf	prodl,f,c
 15832  0022CE  0E00               	movlw	0
 15833  0022D0  22F4               	addwfc	prodh,f,c
 15834  0022D2  0EAC               	movlw	low _inputPotsArray
 15835  0022D4  24F3               	addwf	prodl,w,c
 15836  0022D6  6ED9               	movwf	fsr2l,c
 15837  0022D8  0E02               	movlw	high _inputPotsArray
 15838  0022DA  20F4               	addwfc	prodh,w,c
 15839  0022DC  6EDA               	movwf	fsr2h,c
 15840  0022DE  06DF               	decf	indf2,f,c
 15841  0022E0                     l3365:
 15842                           
 15843                           ; BSR set to: 0
 15844                           ;menu.c: 164: }
 15845                           ;menu.c: 165: if(inputPotsArray[array_index].controller_number == 61) {inputPotsArray[ar
      +                          ray_index].controller_number = -3;}
 15846  0022E0  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15847  0022E2  0D03               	mullw	3
 15848  0022E4  0E01               	movlw	1
 15849  0022E6  26F3               	addwf	prodl,f,c
 15850  0022E8  0E00               	movlw	0
 15851  0022EA  22F4               	addwfc	prodh,f,c
 15852  0022EC  0EAC               	movlw	low _inputPotsArray
 15853  0022EE  24F3               	addwf	prodl,w,c
 15854  0022F0  6ED9               	movwf	fsr2l,c
 15855  0022F2  0E02               	movlw	high _inputPotsArray
 15856  0022F4  20F4               	addwfc	prodh,w,c
 15857  0022F6  6EDA               	movwf	fsr2h,c
 15858  0022F8  0E3D               	movlw	61
 15859  0022FA  18DE               	xorwf	postinc2,w,c
 15860  0022FC  A4D8               	btfss	status,2,c
 15861  0022FE  D00E               	goto	l3366
 15862                           
 15863                           ; BSR set to: 0
 15864  002300  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15865  002302  0D03               	mullw	3
 15866  002304  0E01               	movlw	1
 15867  002306  26F3               	addwf	prodl,f,c
 15868  002308  0E00               	movlw	0
 15869  00230A  22F4               	addwfc	prodh,f,c
 15870  00230C  0EAC               	movlw	low _inputPotsArray
 15871  00230E  24F3               	addwf	prodl,w,c
 15872  002310  6ED9               	movwf	fsr2l,c
 15873  002312  0E02               	movlw	high _inputPotsArray
 15874  002314  20F4               	addwfc	prodh,w,c
 15875  002316  6EDA               	movwf	fsr2h,c
 15876  002318  0EFD               	movlw	253
 15877  00231A  6EDF               	movwf	indf2,c
 15878  00231C                     l3366:
 15879                           
 15880                           ; BSR set to: 0
 15881                           ;menu.c: 166: if(inputPotsArray[array_index].controller_number == 62) {inputPotsArray[ar
      +                          ray_index].controller_number = -2;}
 15882  00231C  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15883  00231E  0D03               	mullw	3
 15884  002320  0E01               	movlw	1
 15885  002322  26F3               	addwf	prodl,f,c
 15886  002324  0E00               	movlw	0
 15887  002326  22F4               	addwfc	prodh,f,c
 15888  002328  0EAC               	movlw	low _inputPotsArray
 15889  00232A  24F3               	addwf	prodl,w,c
 15890  00232C  6ED9               	movwf	fsr2l,c
 15891  00232E  0E02               	movlw	high _inputPotsArray
 15892  002330  20F4               	addwfc	prodh,w,c
 15893  002332  6EDA               	movwf	fsr2h,c
 15894  002334  0E3E               	movlw	62
 15895  002336  18DE               	xorwf	postinc2,w,c
 15896  002338  A4D8               	btfss	status,2,c
 15897  00233A  D00E               	goto	l3367
 15898                           
 15899                           ; BSR set to: 0
 15900  00233C  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15901  00233E  0D03               	mullw	3
 15902  002340  0E01               	movlw	1
 15903  002342  26F3               	addwf	prodl,f,c
 15904  002344  0E00               	movlw	0
 15905  002346  22F4               	addwfc	prodh,f,c
 15906  002348  0EAC               	movlw	low _inputPotsArray
 15907  00234A  24F3               	addwf	prodl,w,c
 15908  00234C  6ED9               	movwf	fsr2l,c
 15909  00234E  0E02               	movlw	high _inputPotsArray
 15910  002350  20F4               	addwfc	prodh,w,c
 15911  002352  6EDA               	movwf	fsr2h,c
 15912  002354  0EFE               	movlw	254
 15913  002356  6EDF               	movwf	indf2,c
 15914  002358                     l3367:
 15915                           
 15916                           ; BSR set to: 0
 15917                           ;menu.c: 167: if(inputPotsArray[array_index].controller_number == 63) {inputPotsArray[ar
      +                          ray_index].controller_number = -1;}
 15918  002358  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15919  00235A  0D03               	mullw	3
 15920  00235C  0E01               	movlw	1
 15921  00235E  26F3               	addwf	prodl,f,c
 15922  002360  0E00               	movlw	0
 15923  002362  22F4               	addwfc	prodh,f,c
 15924  002364  0EAC               	movlw	low _inputPotsArray
 15925  002366  24F3               	addwf	prodl,w,c
 15926  002368  6ED9               	movwf	fsr2l,c
 15927  00236A  0E02               	movlw	high _inputPotsArray
 15928  00236C  20F4               	addwfc	prodh,w,c
 15929  00236E  6EDA               	movwf	fsr2h,c
 15930  002370  0E3F               	movlw	63
 15931  002372  18DE               	xorwf	postinc2,w,c
 15932  002374  A4D8               	btfss	status,2,c
 15933  002376  D00E               	goto	l3368
 15934                           
 15935                           ; BSR set to: 0
 15936  002378  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15937  00237A  0D03               	mullw	3
 15938  00237C  0E01               	movlw	1
 15939  00237E  26F3               	addwf	prodl,f,c
 15940  002380  0E00               	movlw	0
 15941  002382  22F4               	addwfc	prodh,f,c
 15942  002384  0EAC               	movlw	low _inputPotsArray
 15943  002386  24F3               	addwf	prodl,w,c
 15944  002388  6ED9               	movwf	fsr2l,c
 15945  00238A  0E02               	movlw	high _inputPotsArray
 15946  00238C  20F4               	addwfc	prodh,w,c
 15947  00238E  6EDA               	movwf	fsr2h,c
 15948  002390  0EFF               	movlw	255
 15949  002392  6EDF               	movwf	indf2,c
 15950  002394                     l3368:
 15951                           
 15952                           ;menu.c: 169: }
 15953                           ;menu.c: 171: if(inputPotsArray[array_index].controller_resolution == 1){
 15954                           
 15955                           ; BSR set to: 0
 15956  002394  0100               	movlb	0	; () banked
 15957  002396  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15958  002398  0D03               	mullw	3
 15959  00239A  0EAC               	movlw	low _inputPotsArray
 15960  00239C  24F3               	addwf	prodl,w,c
 15961  00239E  6ED9               	movwf	fsr2l,c
 15962  0023A0  0E02               	movlw	high _inputPotsArray
 15963  0023A2  20F4               	addwfc	prodh,w,c
 15964  0023A4  6EDA               	movwf	fsr2h,c
 15965  0023A6  0102               	movlb	2	; () banked
 15966  0023A8  A0DF               	btfss	indf2,0,c
 15967  0023AA  D01F               	goto	l3370
 15968                           
 15969                           ; BSR set to: 2
 15970                           ;menu.c: 173: if(inputPotsArray[array_index].controller_number_two_byte > -3) {
 15971  0023AC  0100               	movlb	0	; () banked
 15972  0023AE  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15973  0023B0  0D03               	mullw	3
 15974  0023B2  0E02               	movlw	2
 15975  0023B4  26F3               	addwf	prodl,f,c
 15976  0023B6  0E00               	movlw	0
 15977  0023B8  22F4               	addwfc	prodh,f,c
 15978  0023BA  0EAC               	movlw	low _inputPotsArray
 15979  0023BC  24F3               	addwf	prodl,w,c
 15980  0023BE  6ED9               	movwf	fsr2l,c
 15981  0023C0  0E02               	movlw	high _inputPotsArray
 15982  0023C2  20F4               	addwfc	prodh,w,c
 15983  0023C4  6EDA               	movwf	fsr2h,c
 15984  0023C6  50DF               	movf	indf2,w,c
 15985  0023C8  0A80               	xorlw	128
 15986  0023CA  0F82               	addlw	130
 15987  0023CC  A0D8               	btfss	status,0,c
 15988  0023CE  D00D               	goto	l3370
 15989                           
 15990                           ; BSR set to: 0
 15991                           ;menu.c: 174: inputPotsArray[array_index].controller_number_two_byte--;
 15992  0023D0  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15993  0023D2  0D03               	mullw	3
 15994  0023D4  0E02               	movlw	2
 15995  0023D6  26F3               	addwf	prodl,f,c
 15996  0023D8  0E00               	movlw	0
 15997  0023DA  22F4               	addwfc	prodh,f,c
 15998  0023DC  0EAC               	movlw	low _inputPotsArray
 15999  0023DE  24F3               	addwf	prodl,w,c
 16000  0023E0  6ED9               	movwf	fsr2l,c
 16001  0023E2  0E02               	movlw	high _inputPotsArray
 16002  0023E4  20F4               	addwfc	prodh,w,c
 16003  0023E6  6EDA               	movwf	fsr2h,c
 16004  0023E8  06DF               	decf	indf2,f,c
 16005  0023EA                     l3370:
 16006                           
 16007                           ;menu.c: 175: }
 16008                           ;menu.c: 177: }
 16009                           ;menu.c: 179: encoder_direction = 0x00;
 16010                           
 16011                           ; BSR set to: 0
 16012                           
 16013                           ; BSR set to: 0
 16014  0023EA  0E00               	movlw	0
 16015  0023EC  0100               	movlb	0	; () banked
 16016  0023EE  6FEB               	movwf	_encoder_direction& (0+255),b
 16017  0023F0                     l3363:
 16018                           
 16019                           ; BSR set to: 0
 16020                           ;menu.c: 180: }
 16021                           ;menu.c: 182: if(inputPotsArray[array_index].controller_resolution == 0){
 16022                           
 16023                           ; BSR set to: 0
 16024  0023F0  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16025  0023F2  0D03               	mullw	3
 16026  0023F4  0EAC               	movlw	low _inputPotsArray
 16027  0023F6  24F3               	addwf	prodl,w,c
 16028  0023F8  6ED9               	movwf	fsr2l,c
 16029  0023FA  0E02               	movlw	high _inputPotsArray
 16030  0023FC  20F4               	addwfc	prodh,w,c
 16031  0023FE  6EDA               	movwf	fsr2h,c
 16032  002400  0102               	movlb	2	; () banked
 16033  002402  B0DF               	btfsc	indf2,0,c
 16034  002404  D094               	goto	l3376
 16035                           
 16036                           ; BSR set to: 2
 16037                           ;menu.c: 184: if(inputPotsArray[array_index].controller_number >= 0) {
 16038  002406  0100               	movlb	0	; () banked
 16039  002408  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16040  00240A  0D03               	mullw	3
 16041  00240C  0E01               	movlw	1
 16042  00240E  26F3               	addwf	prodl,f,c
 16043  002410  0E00               	movlw	0
 16044  002412  22F4               	addwfc	prodh,f,c
 16045  002414  0EAC               	movlw	low _inputPotsArray
 16046  002416  24F3               	addwf	prodl,w,c
 16047  002418  6ED9               	movwf	fsr2l,c
 16048  00241A  0E02               	movlw	high _inputPotsArray
 16049  00241C  20F4               	addwfc	prodh,w,c
 16050  00241E  6EDA               	movwf	fsr2h,c
 16051  002420  0E00               	movlw	0
 16052  002422  BEDB               	btfsc	plusw2,7,c
 16053  002424  D02E               	goto	l3372
 16054                           
 16055                           ; BSR set to: 0
 16056                           ;menu.c: 186: int2string(inputPotsArray[array_index].controller_number);
 16057  002426  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16058  002428  0D03               	mullw	3
 16059  00242A  0E01               	movlw	1
 16060  00242C  26F3               	addwf	prodl,f,c
 16061  00242E  0E00               	movlw	0
 16062  002430  22F4               	addwfc	prodh,f,c
 16063  002432  0EAC               	movlw	low _inputPotsArray
 16064  002434  24F3               	addwf	prodl,w,c
 16065  002436  6ED9               	movwf	fsr2l,c
 16066  002438  0E02               	movlw	high _inputPotsArray
 16067  00243A  20F4               	addwfc	prodh,w,c
 16068  00243C  6EDA               	movwf	fsr2h,c
 16069  00243E  50DF               	movf	indf2,w,c
 16070  002440  6F74               	movwf	int2string@number& (0+255),b
 16071  002442  6B75               	clrf	(int2string@number+1)& (0+255),b
 16072  002444  BF74               	btfsc	int2string@number& (0+255),7,b
 16073  002446  0775               	decf	(int2string@number+1)& (0+255),f,b
 16074  002448  EC52  F035         	call	_int2string	;wreg free
 16075                           
 16076                           ;menu.c: 188: Lcd_Set_Cursor(2,7);
 16077  00244C  0E07               	movlw	7
 16078  00244E  0100               	movlb	0	; () banked
 16079  002450  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16080  002452  0E02               	movlw	2
 16081  002454  ECEC  F045         	call	_Lcd_Set_Cursor
 16082                           
 16083                           ;menu.c: 189: Lcd_Print_String("         ");
 16084  002458  0E6B               	movlw	low (STR_10+7)
 16085  00245A  0100               	movlb	0	; () banked
 16086  00245C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16087  00245E  0EFD               	movlw	high (STR_10+7)
 16088  002460  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16089  002462  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 16090                           
 16091                           ;menu.c: 190: Lcd_Set_Cursor(2,13);
 16092  002466  0E0D               	movlw	13
 16093  002468  0100               	movlb	0	; () banked
 16094  00246A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16095  00246C  0E02               	movlw	2
 16096  00246E  ECEC  F045         	call	_Lcd_Set_Cursor
 16097                           
 16098                           ;menu.c: 191: Lcd_Print_String(string2display);
 16099  002472  0E82               	movlw	low _string2display
 16100  002474  0100               	movlb	0	; () banked
 16101  002476  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16102  002478  0E01               	movlw	high _string2display
 16103  00247A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16104  00247C  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 16105                           
 16106                           ;menu.c: 192: }
 16107  002480  D056               	goto	l3376
 16108  002482                     l3372:
 16109                           
 16110                           ;menu.c: 193: else {
 16111                           ;menu.c: 194: if(inputPotsArray[array_index].controller_number == -1) {
 16112  002482  0100               	movlb	0	; () banked
 16113  002484  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16114  002486  0D03               	mullw	3
 16115  002488  0E01               	movlw	1
 16116  00248A  26F3               	addwf	prodl,f,c
 16117  00248C  0E00               	movlw	0
 16118  00248E  22F4               	addwfc	prodh,f,c
 16119  002490  0EAC               	movlw	low _inputPotsArray
 16120  002492  24F3               	addwf	prodl,w,c
 16121  002494  6ED9               	movwf	fsr2l,c
 16122  002496  0E02               	movlw	high _inputPotsArray
 16123  002498  20F4               	addwfc	prodh,w,c
 16124  00249A  6EDA               	movwf	fsr2h,c
 16125  00249C  28DE               	incf	postinc2,w,c
 16126  00249E  A4D8               	btfss	status,2,c
 16127  0024A0  D00C               	goto	l3374
 16128                           
 16129                           ; BSR set to: 0
 16130                           ;menu.c: 195: Lcd_Set_Cursor(2,7);
 16131  0024A2  0E07               	movlw	7
 16132  0024A4  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16133  0024A6  0E02               	movlw	2
 16134  0024A8  ECEC  F045         	call	_Lcd_Set_Cursor
 16135                           
 16136                           ;menu.c: 196: Lcd_Print_String("  VELOCITY");
 16137  0024AC  0E9E               	movlw	low STR_13
 16138  0024AE  0100               	movlb	0	; () banked
 16139  0024B0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16140  0024B2  0EFF               	movlw	high STR_13
 16141  0024B4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16142  0024B6  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 16143  0024BA                     l3374:
 16144                           
 16145                           ;menu.c: 197: }
 16146                           ;menu.c: 199: if(inputPotsArray[array_index].controller_number == -2) {
 16147  0024BA  0100               	movlb	0	; () banked
 16148  0024BC  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16149  0024BE  0D03               	mullw	3
 16150  0024C0  0E01               	movlw	1
 16151  0024C2  26F3               	addwf	prodl,f,c
 16152  0024C4  0E00               	movlw	0
 16153  0024C6  22F4               	addwfc	prodh,f,c
 16154  0024C8  0EAC               	movlw	low _inputPotsArray
 16155  0024CA  24F3               	addwf	prodl,w,c
 16156  0024CC  6ED9               	movwf	fsr2l,c
 16157  0024CE  0E02               	movlw	high _inputPotsArray
 16158  0024D0  20F4               	addwfc	prodh,w,c
 16159  0024D2  6EDA               	movwf	fsr2h,c
 16160  0024D4  0EFE               	movlw	254
 16161  0024D6  18DE               	xorwf	postinc2,w,c
 16162  0024D8  A4D8               	btfss	status,2,c
 16163  0024DA  D00C               	goto	l3375
 16164                           
 16165                           ; BSR set to: 0
 16166                           ;menu.c: 200: Lcd_Set_Cursor(2,7);
 16167  0024DC  0E07               	movlw	7
 16168  0024DE  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16169  0024E0  0E02               	movlw	2
 16170  0024E2  ECEC  F045         	call	_Lcd_Set_Cursor
 16171                           
 16172                           ;menu.c: 201: Lcd_Print_String(" PITCHBEND");
 16173  0024E6  0E88               	movlw	low STR_14
 16174  0024E8  0100               	movlb	0	; () banked
 16175  0024EA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16176  0024EC  0EFF               	movlw	high STR_14
 16177  0024EE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16178  0024F0  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 16179  0024F4                     l3375:
 16180                           
 16181                           ;menu.c: 202: }
 16182                           ;menu.c: 203: if(inputPotsArray[array_index].controller_number == -3) {
 16183  0024F4  0100               	movlb	0	; () banked
 16184  0024F6  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16185  0024F8  0D03               	mullw	3
 16186  0024FA  0E01               	movlw	1
 16187  0024FC  26F3               	addwf	prodl,f,c
 16188  0024FE  0E00               	movlw	0
 16189  002500  22F4               	addwfc	prodh,f,c
 16190  002502  0EAC               	movlw	low _inputPotsArray
 16191  002504  24F3               	addwf	prodl,w,c
 16192  002506  6ED9               	movwf	fsr2l,c
 16193  002508  0E02               	movlw	high _inputPotsArray
 16194  00250A  20F4               	addwfc	prodh,w,c
 16195  00250C  6EDA               	movwf	fsr2h,c
 16196  00250E  0EFD               	movlw	253
 16197  002510  18DE               	xorwf	postinc2,w,c
 16198  002512  A4D8               	btfss	status,2,c
 16199  002514  D00C               	goto	l3376
 16200                           
 16201                           ; BSR set to: 0
 16202                           ;menu.c: 204: Lcd_Set_Cursor(2,7);
 16203  002516  0E07               	movlw	7
 16204  002518  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16205  00251A  0E02               	movlw	2
 16206  00251C  ECEC  F045         	call	_Lcd_Set_Cursor
 16207                           
 16208                           ;menu.c: 205: Lcd_Print_String(" MOD.WHEEL");
 16209  002520  0E93               	movlw	low STR_15
 16210  002522  0100               	movlb	0	; () banked
 16211  002524  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16212  002526  0EFF               	movlw	high STR_15
 16213  002528  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16214  00252A  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 16215  00252E                     l3376:
 16216                           
 16217                           ;menu.c: 206: }
 16218                           ;menu.c: 207: }
 16219                           ;menu.c: 208: }
 16220                           ;menu.c: 209: }
 16221                           ;menu.c: 211: if(inputPotsArray[array_index].controller_resolution == 1){
 16222  00252E  0100               	movlb	0	; () banked
 16223  002530  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16224  002532  0D03               	mullw	3
 16225  002534  0EAC               	movlw	low _inputPotsArray
 16226  002536  24F3               	addwf	prodl,w,c
 16227  002538  6ED9               	movwf	fsr2l,c
 16228  00253A  0E02               	movlw	high _inputPotsArray
 16229  00253C  20F4               	addwfc	prodh,w,c
 16230  00253E  6EDA               	movwf	fsr2h,c
 16231  002540  0102               	movlb	2	; () banked
 16232  002542  A0DF               	btfss	indf2,0,c
 16233  002544  D094               	goto	l3382
 16234                           
 16235                           ; BSR set to: 2
 16236                           ;menu.c: 213: if(inputPotsArray[array_index].controller_number_two_byte >= 0) {
 16237  002546  0100               	movlb	0	; () banked
 16238  002548  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16239  00254A  0D03               	mullw	3
 16240  00254C  0E02               	movlw	2
 16241  00254E  26F3               	addwf	prodl,f,c
 16242  002550  0E00               	movlw	0
 16243  002552  22F4               	addwfc	prodh,f,c
 16244  002554  0EAC               	movlw	low _inputPotsArray
 16245  002556  24F3               	addwf	prodl,w,c
 16246  002558  6ED9               	movwf	fsr2l,c
 16247  00255A  0E02               	movlw	high _inputPotsArray
 16248  00255C  20F4               	addwfc	prodh,w,c
 16249  00255E  6EDA               	movwf	fsr2h,c
 16250  002560  0E00               	movlw	0
 16251  002562  BEDB               	btfsc	plusw2,7,c
 16252  002564  D02E               	goto	l3378
 16253                           
 16254                           ; BSR set to: 0
 16255                           ;menu.c: 215: int2string(inputPotsArray[array_index].controller_number_two_byte);
 16256  002566  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16257  002568  0D03               	mullw	3
 16258  00256A  0E02               	movlw	2
 16259  00256C  26F3               	addwf	prodl,f,c
 16260  00256E  0E00               	movlw	0
 16261  002570  22F4               	addwfc	prodh,f,c
 16262  002572  0EAC               	movlw	low _inputPotsArray
 16263  002574  24F3               	addwf	prodl,w,c
 16264  002576  6ED9               	movwf	fsr2l,c
 16265  002578  0E02               	movlw	high _inputPotsArray
 16266  00257A  20F4               	addwfc	prodh,w,c
 16267  00257C  6EDA               	movwf	fsr2h,c
 16268  00257E  50DF               	movf	indf2,w,c
 16269  002580  6F74               	movwf	int2string@number& (0+255),b
 16270  002582  6B75               	clrf	(int2string@number+1)& (0+255),b
 16271  002584  BF74               	btfsc	int2string@number& (0+255),7,b
 16272  002586  0775               	decf	(int2string@number+1)& (0+255),f,b
 16273  002588  EC52  F035         	call	_int2string	;wreg free
 16274                           
 16275                           ;menu.c: 217: Lcd_Set_Cursor(2,7);
 16276  00258C  0E07               	movlw	7
 16277  00258E  0100               	movlb	0	; () banked
 16278  002590  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16279  002592  0E02               	movlw	2
 16280  002594  ECEC  F045         	call	_Lcd_Set_Cursor
 16281                           
 16282                           ;menu.c: 218: Lcd_Print_String("         ");
 16283  002598  0E6B               	movlw	low (STR_10+7)
 16284  00259A  0100               	movlb	0	; () banked
 16285  00259C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16286  00259E  0EFD               	movlw	high (STR_10+7)
 16287  0025A0  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16288  0025A2  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 16289                           
 16290                           ;menu.c: 219: Lcd_Set_Cursor(2,13);
 16291  0025A6  0E0D               	movlw	13
 16292  0025A8  0100               	movlb	0	; () banked
 16293  0025AA  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16294  0025AC  0E02               	movlw	2
 16295  0025AE  ECEC  F045         	call	_Lcd_Set_Cursor
 16296                           
 16297                           ;menu.c: 220: Lcd_Print_String(string2display);
 16298  0025B2  0E82               	movlw	low _string2display
 16299  0025B4  0100               	movlb	0	; () banked
 16300  0025B6  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16301  0025B8  0E01               	movlw	high _string2display
 16302  0025BA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16303  0025BC  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 16304                           
 16305                           ;menu.c: 221: }
 16306  0025C0  D056               	goto	l3382
 16307  0025C2                     l3378:
 16308                           
 16309                           ;menu.c: 222: else {
 16310                           ;menu.c: 223: if(inputPotsArray[array_index].controller_number_two_byte == -1) {
 16311  0025C2  0100               	movlb	0	; () banked
 16312  0025C4  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16313  0025C6  0D03               	mullw	3
 16314  0025C8  0E02               	movlw	2
 16315  0025CA  26F3               	addwf	prodl,f,c
 16316  0025CC  0E00               	movlw	0
 16317  0025CE  22F4               	addwfc	prodh,f,c
 16318  0025D0  0EAC               	movlw	low _inputPotsArray
 16319  0025D2  24F3               	addwf	prodl,w,c
 16320  0025D4  6ED9               	movwf	fsr2l,c
 16321  0025D6  0E02               	movlw	high _inputPotsArray
 16322  0025D8  20F4               	addwfc	prodh,w,c
 16323  0025DA  6EDA               	movwf	fsr2h,c
 16324  0025DC  28DE               	incf	postinc2,w,c
 16325  0025DE  A4D8               	btfss	status,2,c
 16326  0025E0  D00C               	goto	l3380
 16327                           
 16328                           ; BSR set to: 0
 16329                           ;menu.c: 224: Lcd_Set_Cursor(2,7);
 16330  0025E2  0E07               	movlw	7
 16331  0025E4  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16332  0025E6  0E02               	movlw	2
 16333  0025E8  ECEC  F045         	call	_Lcd_Set_Cursor
 16334                           
 16335                           ;menu.c: 225: Lcd_Print_String("  VELOCITY");
 16336  0025EC  0E9E               	movlw	low STR_13
 16337  0025EE  0100               	movlb	0	; () banked
 16338  0025F0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16339  0025F2  0EFF               	movlw	high STR_13
 16340  0025F4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16341  0025F6  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 16342  0025FA                     l3380:
 16343                           
 16344                           ;menu.c: 226: }
 16345                           ;menu.c: 228: if(inputPotsArray[array_index].controller_number_two_byte == -2) {
 16346  0025FA  0100               	movlb	0	; () banked
 16347  0025FC  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16348  0025FE  0D03               	mullw	3
 16349  002600  0E02               	movlw	2
 16350  002602  26F3               	addwf	prodl,f,c
 16351  002604  0E00               	movlw	0
 16352  002606  22F4               	addwfc	prodh,f,c
 16353  002608  0EAC               	movlw	low _inputPotsArray
 16354  00260A  24F3               	addwf	prodl,w,c
 16355  00260C  6ED9               	movwf	fsr2l,c
 16356  00260E  0E02               	movlw	high _inputPotsArray
 16357  002610  20F4               	addwfc	prodh,w,c
 16358  002612  6EDA               	movwf	fsr2h,c
 16359  002614  0EFE               	movlw	254
 16360  002616  18DE               	xorwf	postinc2,w,c
 16361  002618  A4D8               	btfss	status,2,c
 16362  00261A  D00C               	goto	l3381
 16363                           
 16364                           ; BSR set to: 0
 16365                           ;menu.c: 229: Lcd_Set_Cursor(2,7);
 16366  00261C  0E07               	movlw	7
 16367  00261E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16368  002620  0E02               	movlw	2
 16369  002622  ECEC  F045         	call	_Lcd_Set_Cursor
 16370                           
 16371                           ;menu.c: 230: Lcd_Print_String(" PITCHBEND");
 16372  002626  0E88               	movlw	low STR_14
 16373  002628  0100               	movlb	0	; () banked
 16374  00262A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16375  00262C  0EFF               	movlw	high STR_14
 16376  00262E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16377  002630  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 16378  002634                     l3381:
 16379                           
 16380                           ;menu.c: 231: }
 16381                           ;menu.c: 232: if(inputPotsArray[array_index].controller_number_two_byte == -3) {
 16382  002634  0100               	movlb	0	; () banked
 16383  002636  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16384  002638  0D03               	mullw	3
 16385  00263A  0E02               	movlw	2
 16386  00263C  26F3               	addwf	prodl,f,c
 16387  00263E  0E00               	movlw	0
 16388  002640  22F4               	addwfc	prodh,f,c
 16389  002642  0EAC               	movlw	low _inputPotsArray
 16390  002644  24F3               	addwf	prodl,w,c
 16391  002646  6ED9               	movwf	fsr2l,c
 16392  002648  0E02               	movlw	high _inputPotsArray
 16393  00264A  20F4               	addwfc	prodh,w,c
 16394  00264C  6EDA               	movwf	fsr2h,c
 16395  00264E  0EFD               	movlw	253
 16396  002650  18DE               	xorwf	postinc2,w,c
 16397  002652  A4D8               	btfss	status,2,c
 16398  002654  D00C               	goto	l3382
 16399                           
 16400                           ; BSR set to: 0
 16401                           ;menu.c: 233: Lcd_Set_Cursor(2,7);
 16402  002656  0E07               	movlw	7
 16403  002658  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16404  00265A  0E02               	movlw	2
 16405  00265C  ECEC  F045         	call	_Lcd_Set_Cursor
 16406                           
 16407                           ;menu.c: 234: Lcd_Print_String(" MOD.WHEEL");
 16408  002660  0E93               	movlw	low STR_15
 16409  002662  0100               	movlb	0	; () banked
 16410  002664  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16411  002666  0EFF               	movlw	high STR_15
 16412  002668  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16413  00266A  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 16414  00266E                     l3382:
 16415  00266E  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 16416  002670  0012               	return	
 16417  002672  D58C               	goto	l3355
 16418  002674                     __end_of_setControllerNumbers:
 16419                           	opt stack 0
 16420                           tblptru	equ	0xFF8
 16421                           tblptrh	equ	0xFF7
 16422                           tblptrl	equ	0xFF6
 16423                           tablat	equ	0xFF5
 16424                           prodh	equ	0xFF4
 16425                           prodl	equ	0xFF3
 16426                           intcon	equ	0xFF2
 16427                           intcon2	equ	0xFF1
 16428                           postinc0	equ	0xFEE
 16429                           wreg	equ	0xFE8
 16430                           postdec1	equ	0xFE5
 16431                           fsr1l	equ	0xFE1
 16432                           indf2	equ	0xFDF
 16433                           postinc2	equ	0xFDE
 16434                           plusw2	equ	0xFDB
 16435                           fsr2h	equ	0xFDA
 16436                           fsr2l	equ	0xFD9
 16437                           status	equ	0xFD8
 16438                           
 16439 ;; *************** function _Function_D_2 *****************
 16440 ;; Defined at:
 16441 ;;		line 651 in file "menu.c"
 16442 ;; Parameters:    Size  Location     Type
 16443 ;;		None
 16444 ;; Auto vars:     Size  Location     Type
 16445 ;;		None
 16446 ;; Return value:  Size  Location     Type
 16447 ;;                  1    wreg      void 
 16448 ;; Registers used:
 16449 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16450 ;; Tracked objects:
 16451 ;;		On entry : 0/0
 16452 ;;		On exit  : 0/0
 16453 ;;		Unchanged: 0/0
 16454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16459 ;;Total ram usage:        0 bytes
 16460 ;; Hardware stack levels used:    1
 16461 ;; Hardware stack levels required when called:    8
 16462 ;; This function calls:
 16463 ;;		_Busy_eep
 16464 ;;		_Lcd_Print_String
 16465 ;;		_Lcd_Set_Cursor
 16466 ;;		_Write_b_eep
 16467 ;;		_calculate_alpha
 16468 ;;		_int2string
 16469 ;;		_processEncoderBuxton
 16470 ;; This function is called by:
 16471 ;;		_Function_D
 16472 ;; This function uses a non-reentrant model
 16473 ;;
 16474                           
 16475                           	psect	text46
 16476  00894C                     __ptext46:
 16477                           	opt stack 0
 16478  00894C                     _Function_D_2:
 16479                           	opt stack 20
 16480                           
 16481                           ;menu.c: 653: which_screen = POTS_ALPHA_MENU;
 16482                           
 16483                           ;incstack = 0
 16484  00894C  0E10               	movlw	16
 16485  00894E  0100               	movlb	0	; () banked
 16486  008950  6FF9               	movwf	_which_screen& (0+255),b
 16487                           
 16488                           ; BSR set to: 0
 16489                           ;menu.c: 654: lcd_print_once = 0;
 16490  008952  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16491                           
 16492                           ; BSR set to: 0
 16493                           ;menu.c: 655: encoder_click = 0;
 16494  008954  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 16495                           
 16496                           ; BSR set to: 0
 16497                           ;menu.c: 657: potsAlphaMenu.selector = ema_integer;
 16498  008956  C0FB  F155         	movff	_ema_integer,_potsAlphaMenu+2
 16499                           
 16500                           ;menu.c: 659: while(encoder_click == 0) {
 16501  00895A  D016               	goto	l3521
 16502  00895C                     
 16503                           ;menu.c: 660: processEncoderBuxton();
 16504                           
 16505                           ; BSR set to: 0
 16506  00895C  EC09  F000         	call	_processEncoderBuxton	;wreg free
 16507                           
 16508                           ;menu.c: 661: lcd_print_once = 1;
 16509  008960  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16510                           
 16511                           ;menu.c: 663: int2string(potsAlphaMenu.selector);
 16512  008962  C155  F074         	movff	_potsAlphaMenu+2,int2string@number
 16513  008966  0100               	movlb	0	; () banked
 16514  008968  6B75               	clrf	(int2string@number+1)& (0+255),b
 16515  00896A  EC52  F035         	call	_int2string	;wreg free
 16516                           
 16517                           ;menu.c: 664: Lcd_Set_Cursor(2,13);
 16518  00896E  0E0D               	movlw	13
 16519  008970  0100               	movlb	0	; () banked
 16520  008972  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16521  008974  0E02               	movlw	2
 16522  008976  ECEC  F045         	call	_Lcd_Set_Cursor
 16523                           
 16524                           ;menu.c: 665: Lcd_Print_String(string2display);
 16525  00897A  0E82               	movlw	low _string2display
 16526  00897C  0100               	movlb	0	; () banked
 16527  00897E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16528  008980  0E01               	movlw	high _string2display
 16529  008982  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16530  008984  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 16531  008988                     l3521:
 16532  008988  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 16533  00898A  D7E8               	goto	l3522
 16534                           
 16535                           ;menu.c: 666: }
 16536                           ;menu.c: 668: ema_integer = potsAlphaMenu.selector;
 16537  00898C  C155  F0FB         	movff	_potsAlphaMenu+2,_ema_integer
 16538                           
 16539                           ;menu.c: 669: (Busy_eep(), Write_b_eep(0x03,ema_integer));
 16540  008990  EC31  F04B         	call	_Busy_eep	;wreg free
 16541  008994  0E00               	movlw	0
 16542  008996  0100               	movlb	0	; () banked
 16543  008998  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 16544  00899A  0E03               	movlw	3
 16545  00899C  6F60               	movwf	Write_b_eep@badd& (0+255),b
 16546  00899E  C0FB  F062         	movff	_ema_integer,Write_b_eep@bdat
 16547  0089A2  ECDC  F047         	call	_Write_b_eep	;wreg free
 16548                           
 16549                           ;menu.c: 670: calculate_alpha();
 16550  0089A6  EC92  F047         	call	_calculate_alpha	;wreg free
 16551  0089AA  0012               	return		;funcret
 16552  0089AC                     __end_of_Function_D_2:
 16553                           	opt stack 0
 16554                           tblptru	equ	0xFF8
 16555                           tblptrh	equ	0xFF7
 16556                           tblptrl	equ	0xFF6
 16557                           tablat	equ	0xFF5
 16558                           prodh	equ	0xFF4
 16559                           prodl	equ	0xFF3
 16560                           intcon	equ	0xFF2
 16561                           intcon2	equ	0xFF1
 16562                           postinc0	equ	0xFEE
 16563                           wreg	equ	0xFE8
 16564                           postdec1	equ	0xFE5
 16565                           fsr1l	equ	0xFE1
 16566                           indf2	equ	0xFDF
 16567                           postinc2	equ	0xFDE
 16568                           plusw2	equ	0xFDB
 16569                           fsr2h	equ	0xFDA
 16570                           fsr2l	equ	0xFD9
 16571                           status	equ	0xFD8
 16572                           
 16573 ;; *************** function _calculate_alpha *****************
 16574 ;; Defined at:
 16575 ;;		line 24 in file "potentiometers.c"
 16576 ;; Parameters:    Size  Location     Type
 16577 ;;		None
 16578 ;; Auto vars:     Size  Location     Type
 16579 ;;		None
 16580 ;; Return value:  Size  Location     Type
 16581 ;;                  1    wreg      void 
 16582 ;; Registers used:
 16583 ;;		wreg, status,2, status,0, cstack
 16584 ;; Tracked objects:
 16585 ;;		On entry : 0/0
 16586 ;;		On exit  : 0/0
 16587 ;;		Unchanged: 0/0
 16588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16593 ;;Total ram usage:        0 bytes
 16594 ;; Hardware stack levels used:    1
 16595 ;; Hardware stack levels required when called:    6
 16596 ;; This function calls:
 16597 ;;		___fldiv
 16598 ;;		___xxtofl
 16599 ;; This function is called by:
 16600 ;;		_Function_D_2
 16601 ;;		_main
 16602 ;; This function uses a non-reentrant model
 16603 ;;
 16604                           
 16605                           	psect	text47
 16606  008F24                     __ptext47:
 16607                           	opt stack 0
 16608  008F24                     _calculate_alpha:
 16609                           	opt stack 21
 16610                           
 16611                           ;potentiometers.c: 25: (float)ema_alpha = (ema_integer / 100.0);
 16612                           
 16613                           ;incstack = 0
 16614  008F24  0100               	movlb	0	; () banked
 16615  008F26  51FB               	movf	_ema_integer& (0+255),w,b
 16616  008F28  6F60               	movwf	___xxtofl@val& (0+255),b
 16617  008F2A  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 16618  008F2C  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 16619  008F2E  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 16620  008F30  0E00               	movlw	0
 16621  008F32  EC29  F02F         	call	___xxtofl
 16622  008F36  C060  F087         	movff	?___xxtofl,___fldiv@b
 16623  008F3A  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 16624  008F3E  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 16625  008F42  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 16626  008F46  0E00               	movlw	0
 16627  008F48  0100               	movlb	0	; () banked
 16628  008F4A  6F8B               	movwf	___fldiv@a& (0+255),b
 16629  008F4C  0E00               	movlw	0
 16630  008F4E  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16631  008F50  0EC8               	movlw	200
 16632  008F52  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16633  008F54  0E42               	movlw	66
 16634  008F56  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16635  008F58  EC1A  F01C         	call	___fldiv	;wreg free
 16636  008F5C  C087  F104         	movff	?___fldiv,_ema_alpha
 16637  008F60  C088  F105         	movff	?___fldiv+1,_ema_alpha+1
 16638  008F64  C089  F106         	movff	?___fldiv+2,_ema_alpha+2
 16639  008F68  C08A  F107         	movff	?___fldiv+3,_ema_alpha+3
 16640  008F6C  0012               	return		;funcret
 16641  008F6E                     __end_of_calculate_alpha:
 16642                           	opt stack 0
 16643                           tblptru	equ	0xFF8
 16644                           tblptrh	equ	0xFF7
 16645                           tblptrl	equ	0xFF6
 16646                           tablat	equ	0xFF5
 16647                           prodh	equ	0xFF4
 16648                           prodl	equ	0xFF3
 16649                           intcon	equ	0xFF2
 16650                           intcon2	equ	0xFF1
 16651                           postinc0	equ	0xFEE
 16652                           wreg	equ	0xFE8
 16653                           postdec1	equ	0xFE5
 16654                           fsr1l	equ	0xFE1
 16655                           indf2	equ	0xFDF
 16656                           postinc2	equ	0xFDE
 16657                           plusw2	equ	0xFDB
 16658                           fsr2h	equ	0xFDA
 16659                           fsr2l	equ	0xFD9
 16660                           status	equ	0xFD8
 16661                           
 16662 ;; *************** function ___fldiv *****************
 16663 ;; Defined at:
 16664 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
 16665 ;; Parameters:    Size  Location     Type
 16666 ;;  b               4   39[BANK0 ] void 
 16667 ;;  a               4   43[BANK0 ] void 
 16668 ;; Auto vars:     Size  Location     Type
 16669 ;;  grs             4   58[BANK0 ] unsigned long 
 16670 ;;  rem             4   52[BANK0 ] unsigned long 
 16671 ;;  new_exp         2   56[BANK0 ] int 
 16672 ;;  aexp            1   63[BANK0 ] unsigned char 
 16673 ;;  bexp            1   62[BANK0 ] unsigned char 
 16674 ;;  sign            1   51[BANK0 ] unsigned char 
 16675 ;; Return value:  Size  Location     Type
 16676 ;;                  4   39[BANK0 ] unsigned char 
 16677 ;; Registers used:
 16678 ;;		wreg, status,2, status,0
 16679 ;; Tracked objects:
 16680 ;;		On entry : 0/0
 16681 ;;		On exit  : 0/0
 16682 ;;		Unchanged: 0/0
 16683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16684 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16685 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16686 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16687 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16688 ;;Total ram usage:       25 bytes
 16689 ;; Hardware stack levels used:    1
 16690 ;; Hardware stack levels required when called:    5
 16691 ;; This function calls:
 16692 ;;		Nothing
 16693 ;; This function is called by:
 16694 ;;		_calculate_alpha
 16695 ;;		_calculate_pulse_length
 16696 ;; This function uses a non-reentrant model
 16697 ;;
 16698                           
 16699                           	psect	text48
 16700  003834                     __ptext48:
 16701                           	opt stack 0
 16702  003834                     ___fldiv:
 16703                           	opt stack 22
 16704                           
 16705                           ;incstack = 0
 16706  003834  0100               	movlb	0	; () banked
 16707  003836  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16708  003838  0B80               	andlw	128
 16709  00383A  6F93               	movwf	___fldiv@sign& (0+255),b
 16710  00383C  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16711  00383E  258A               	addwf	(___fldiv@b+3)& (0+255),w,b
 16712  003840  6F9E               	movwf	___fldiv@bexp& (0+255),b
 16713                           
 16714                           ; BSR set to: 0
 16715  003842  BF89               	btfsc	(___fldiv@b+2)& (0+255),7,b
 16716                           
 16717                           ; BSR set to: 0
 16718  003844  819E               	bsf	___fldiv@bexp& (0+255),0,b
 16719                           
 16720                           ; BSR set to: 0
 16721                           
 16722                           ; BSR set to: 0
 16723  003846  519E               	movf	___fldiv@bexp& (0+255),w,b
 16724  003848  B4D8               	btfsc	status,2,c
 16725  00384A  D00D               	goto	l5921
 16726                           
 16727                           ; BSR set to: 0
 16728  00384C  299E               	incf	___fldiv@bexp& (0+255),w,b
 16729  00384E  A4D8               	btfss	status,2,c
 16730  003850  D008               	goto	l5922
 16731                           
 16732                           ; BSR set to: 0
 16733  003852  0E00               	movlw	0
 16734  003854  6F87               	movwf	___fldiv@b& (0+255),b
 16735  003856  0E00               	movlw	0
 16736  003858  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16737  00385A  0E00               	movlw	0
 16738  00385C  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16739  00385E  0E00               	movlw	0
 16740  003860  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16741  003862                     l5922:
 16742                           
 16743                           ; BSR set to: 0
 16744                           
 16745                           ; BSR set to: 0
 16746  003862  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 16747  003864  D006               	goto	L2
 16748  003866                     l5921:
 16749                           
 16750                           ; BSR set to: 0
 16751                           
 16752                           ; BSR set to: 0
 16753  003866  0E00               	movlw	0
 16754  003868  6F87               	movwf	___fldiv@b& (0+255),b
 16755  00386A  0E00               	movlw	0
 16756  00386C  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16757  00386E  0E00               	movlw	0
 16758  003870  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16759  003872                     L2:
 16760  003872  0E00               	movlw	0
 16761  003874  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16762                           
 16763                           ; BSR set to: 0
 16764                           
 16765                           ; BSR set to: 0
 16766  003876  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16767  003878  0B80               	andlw	128
 16768  00387A  1B93               	xorwf	___fldiv@sign& (0+255),f,b
 16769                           
 16770                           ; BSR set to: 0
 16771  00387C  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16772  00387E  258E               	addwf	(___fldiv@a+3)& (0+255),w,b
 16773  003880  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16774                           
 16775                           ; BSR set to: 0
 16776  003882  BF8D               	btfsc	(___fldiv@a+2)& (0+255),7,b
 16777                           
 16778                           ; BSR set to: 0
 16779  003884  819F               	bsf	___fldiv@aexp& (0+255),0,b
 16780                           
 16781                           ; BSR set to: 0
 16782                           
 16783                           ; BSR set to: 0
 16784  003886  519F               	movf	___fldiv@aexp& (0+255),w,b
 16785  003888  B4D8               	btfsc	status,2,c
 16786  00388A  D00D               	goto	l5925
 16787                           
 16788                           ; BSR set to: 0
 16789  00388C  299F               	incf	___fldiv@aexp& (0+255),w,b
 16790  00388E  A4D8               	btfss	status,2,c
 16791  003890  D008               	goto	l5926
 16792                           
 16793                           ; BSR set to: 0
 16794  003892  0E00               	movlw	0
 16795  003894  6F8B               	movwf	___fldiv@a& (0+255),b
 16796  003896  0E00               	movlw	0
 16797  003898  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16798  00389A  0E00               	movlw	0
 16799  00389C  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16800  00389E  0E00               	movlw	0
 16801  0038A0  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16802  0038A2                     l5926:
 16803                           
 16804                           ; BSR set to: 0
 16805                           
 16806                           ; BSR set to: 0
 16807  0038A2  8F8D               	bsf	(___fldiv@a+2)& (0+255),7,b
 16808  0038A4  D006               	goto	L3
 16809  0038A6                     l5925:
 16810                           
 16811                           ; BSR set to: 0
 16812                           
 16813                           ; BSR set to: 0
 16814  0038A6  0E00               	movlw	0
 16815  0038A8  6F8B               	movwf	___fldiv@a& (0+255),b
 16816  0038AA  0E00               	movlw	0
 16817  0038AC  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16818  0038AE  0E00               	movlw	0
 16819  0038B0  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16820  0038B2                     L3:
 16821  0038B2  0E00               	movlw	0
 16822  0038B4  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16823                           
 16824                           ; BSR set to: 0
 16825                           
 16826                           ; BSR set to: 0
 16827  0038B6  518B               	movf	___fldiv@a& (0+255),w,b
 16828  0038B8  118C               	iorwf	(___fldiv@a+1)& (0+255),w,b
 16829  0038BA  118D               	iorwf	(___fldiv@a+2)& (0+255),w,b
 16830  0038BC  118E               	iorwf	(___fldiv@a+3)& (0+255),w,b
 16831  0038BE  A4D8               	btfss	status,2,c
 16832  0038C0  D015               	goto	l5928
 16833                           
 16834                           ; BSR set to: 0
 16835  0038C2  0E00               	movlw	0
 16836  0038C4  6F87               	movwf	___fldiv@b& (0+255),b
 16837  0038C6  0E00               	movlw	0
 16838  0038C8  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16839  0038CA  0E00               	movlw	0
 16840  0038CC  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16841  0038CE  0E00               	movlw	0
 16842  0038D0  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16843                           
 16844                           ; BSR set to: 0
 16845  0038D2  0E80               	movlw	128
 16846  0038D4  1389               	iorwf	(___fldiv@b+2)& (0+255),f,b
 16847  0038D6  0E7F               	movlw	127
 16848  0038D8  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 16849                           
 16850                           ; BSR set to: 0
 16851  0038DA  C087  F087         	movff	___fldiv@b,?___fldiv
 16852  0038DE  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16853  0038E2  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16854  0038E6  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16855                           
 16856                           ; BSR set to: 0
 16857  0038EA  0012               	return	
 16858  0038EC                     l5928:
 16859                           
 16860                           ; BSR set to: 0
 16861                           
 16862                           ; BSR set to: 0
 16863  0038EC  519E               	movf	___fldiv@bexp& (0+255),w,b
 16864  0038EE  A4D8               	btfss	status,2,c
 16865  0038F0  D011               	goto	l5930
 16866                           
 16867                           ; BSR set to: 0
 16868  0038F2  0E00               	movlw	0
 16869  0038F4  6F87               	movwf	___fldiv@b& (0+255),b
 16870  0038F6  0E00               	movlw	0
 16871  0038F8  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16872  0038FA  0E00               	movlw	0
 16873  0038FC  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16874  0038FE  0E00               	movlw	0
 16875  003900  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16876                           
 16877                           ; BSR set to: 0
 16878  003902  C087  F087         	movff	___fldiv@b,?___fldiv
 16879  003906  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16880  00390A  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16881  00390E  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16882                           
 16883                           ; BSR set to: 0
 16884  003912  0012               	return	
 16885  003914                     l5930:
 16886                           
 16887                           ; BSR set to: 0
 16888                           
 16889                           ; BSR set to: 0
 16890  003914  519F               	movf	___fldiv@aexp& (0+255),w,b
 16891  003916  6F8F               	movwf	??___fldiv& (0+255),b
 16892  003918  6B90               	clrf	(??___fldiv+1)& (0+255),b
 16893  00391A  1F8F               	comf	??___fldiv& (0+255),f,b
 16894  00391C  1F90               	comf	(??___fldiv+1)& (0+255),f,b
 16895  00391E  4B8F               	infsnz	??___fldiv& (0+255),f,b
 16896  003920  2B90               	incf	(??___fldiv+1)& (0+255),f,b
 16897  003922  519E               	movf	___fldiv@bexp& (0+255),w,b
 16898  003924  6F91               	movwf	(??___fldiv+2)& (0+255),b
 16899  003926  6B92               	clrf	(??___fldiv+3)& (0+255),b
 16900  003928  518F               	movf	??___fldiv& (0+255),w,b
 16901  00392A  2791               	addwf	(??___fldiv+2)& (0+255),f,b
 16902  00392C  5190               	movf	(??___fldiv+1)& (0+255),w,b
 16903  00392E  2392               	addwfc	(??___fldiv+3)& (0+255),f,b
 16904  003930  0E7F               	movlw	127
 16905  003932  2591               	addwf	(??___fldiv+2)& (0+255),w,b
 16906  003934  6F98               	movwf	___fldiv@new_exp& (0+255),b
 16907  003936  0E00               	movlw	0
 16908  003938  2192               	addwfc	(??___fldiv+3)& (0+255),w,b
 16909  00393A  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 16910                           
 16911                           ; BSR set to: 0
 16912  00393C  C087  F094         	movff	___fldiv@b,___fldiv@rem
 16913  003940  C088  F095         	movff	___fldiv@b+1,___fldiv@rem+1
 16914  003944  C089  F096         	movff	___fldiv@b+2,___fldiv@rem+2
 16915  003948  C08A  F097         	movff	___fldiv@b+3,___fldiv@rem+3
 16916                           
 16917                           ; BSR set to: 0
 16918  00394C  0E00               	movlw	0
 16919  00394E  6F87               	movwf	___fldiv@b& (0+255),b
 16920  003950  0E00               	movlw	0
 16921  003952  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16922  003954  0E00               	movlw	0
 16923  003956  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16924  003958  0E00               	movlw	0
 16925  00395A  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16926                           
 16927                           ; BSR set to: 0
 16928  00395C  0E00               	movlw	0
 16929  00395E  6F9A               	movwf	___fldiv@grs& (0+255),b
 16930  003960  0E00               	movlw	0
 16931  003962  6F9B               	movwf	(___fldiv@grs+1)& (0+255),b
 16932  003964  0E00               	movlw	0
 16933  003966  6F9C               	movwf	(___fldiv@grs+2)& (0+255),b
 16934  003968  0E00               	movlw	0
 16935  00396A  6F9D               	movwf	(___fldiv@grs+3)& (0+255),b
 16936                           
 16937                           ; BSR set to: 0
 16938  00396C  0E00               	movlw	0
 16939  00396E  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16940  003970  D028               	goto	l5931
 16941  003972                     
 16942                           ; BSR set to: 0
 16943                           
 16944                           ; BSR set to: 0
 16945  003972  519F               	movf	___fldiv@aexp& (0+255),w,b
 16946  003974  B4D8               	btfsc	status,2,c
 16947  003976  D011               	goto	l5933
 16948                           
 16949                           ; BSR set to: 0
 16950  003978  90D8               	bcf	status,0,c
 16951  00397A  3794               	rlcf	___fldiv@rem& (0+255),f,b
 16952  00397C  3795               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 16953  00397E  3796               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 16954  003980  3797               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 16955  003982  90D8               	bcf	status,0,c
 16956  003984  3787               	rlcf	___fldiv@b& (0+255),f,b
 16957  003986  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 16958  003988  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 16959  00398A  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 16960                           
 16961                           ; BSR set to: 0
 16962  00398C  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 16963                           
 16964                           ; BSR set to: 0
 16965  00398E  8187               	bsf	___fldiv@b& (0+255),0,b
 16966                           
 16967                           ; BSR set to: 0
 16968  003990  90D8               	bcf	status,0,c
 16969  003992  379A               	rlcf	___fldiv@grs& (0+255),f,b
 16970  003994  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 16971  003996  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 16972  003998  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 16973  00399A                     l5933:
 16974                           
 16975                           ; BSR set to: 0
 16976                           
 16977                           ; BSR set to: 0
 16978  00399A  518B               	movf	___fldiv@a& (0+255),w,b
 16979  00399C  5D94               	subwf	___fldiv@rem& (0+255),w,b
 16980  00399E  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 16981  0039A0  5995               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 16982  0039A2  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 16983  0039A4  5996               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 16984  0039A6  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16985  0039A8  5997               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 16986  0039AA  A0D8               	btfss	status,0,c
 16987  0039AC  D009               	goto	l5935
 16988                           
 16989                           ; BSR set to: 0
 16990  0039AE  8D9D               	bsf	(___fldiv@grs+3)& (0+255),6,b
 16991                           
 16992                           ; BSR set to: 0
 16993  0039B0  518B               	movf	___fldiv@a& (0+255),w,b
 16994  0039B2  5F94               	subwf	___fldiv@rem& (0+255),f,b
 16995  0039B4  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 16996  0039B6  5B95               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 16997  0039B8  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 16998  0039BA  5B96               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 16999  0039BC  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 17000  0039BE  5B97               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 17001  0039C0                     l5935:
 17002                           
 17003                           ; BSR set to: 0
 17004                           
 17005                           ; BSR set to: 0
 17006  0039C0  2B9F               	incf	___fldiv@aexp& (0+255),f,b
 17007  0039C2                     l5931:
 17008                           
 17009                           ; BSR set to: 0
 17010  0039C2  0E19               	movlw	25
 17011  0039C4  659F               	cpfsgt	___fldiv@aexp& (0+255),b
 17012  0039C6  D7D5               	goto	l5932
 17013                           
 17014                           ; BSR set to: 0
 17015                           
 17016                           ; BSR set to: 0
 17017  0039C8  5194               	movf	___fldiv@rem& (0+255),w,b
 17018  0039CA  1195               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 17019  0039CC  1196               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 17020  0039CE  1197               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 17021  0039D0  B4D8               	btfsc	status,2,c
 17022  0039D2  D011               	goto	l5938
 17023                           
 17024                           ; BSR set to: 0
 17025  0039D4  819A               	bsf	___fldiv@grs& (0+255),0,b
 17026                           
 17027                           ; BSR set to: 0
 17028  0039D6  D00F               	goto	l5938
 17029  0039D8                     
 17030                           ; BSR set to: 0
 17031                           
 17032                           ; BSR set to: 0
 17033  0039D8  90D8               	bcf	status,0,c
 17034  0039DA  3787               	rlcf	___fldiv@b& (0+255),f,b
 17035  0039DC  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 17036  0039DE  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 17037  0039E0  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 17038                           
 17039                           ; BSR set to: 0
 17040  0039E2  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 17041                           
 17042                           ; BSR set to: 0
 17043  0039E4  8187               	bsf	___fldiv@b& (0+255),0,b
 17044                           
 17045                           ; BSR set to: 0
 17046  0039E6  90D8               	bcf	status,0,c
 17047  0039E8  379A               	rlcf	___fldiv@grs& (0+255),f,b
 17048  0039EA  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 17049  0039EC  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 17050  0039EE  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 17051  0039F0  0798               	decf	___fldiv@new_exp& (0+255),f,b
 17052  0039F2  A0D8               	btfss	status,0,c
 17053  0039F4  0799               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 17054  0039F6                     l5938:
 17055                           
 17056                           ; BSR set to: 0
 17057                           
 17058                           ; BSR set to: 0
 17059  0039F6  AF89               	btfss	(___fldiv@b+2)& (0+255),7,b
 17060  0039F8  D7EF               	goto	l5939
 17061                           
 17062                           ; BSR set to: 0
 17063                           
 17064                           ; BSR set to: 0
 17065  0039FA  0E00               	movlw	0
 17066  0039FC  6F9F               	movwf	___fldiv@aexp& (0+255),b
 17067                           
 17068                           ; BSR set to: 0
 17069  0039FE  AF9D               	btfss	(___fldiv@grs+3)& (0+255),7,b
 17070  003A00  D016               	goto	l5945
 17071                           
 17072                           ; BSR set to: 0
 17073  003A02  0EFF               	movlw	255
 17074  003A04  159A               	andwf	___fldiv@grs& (0+255),w,b
 17075  003A06  6F8F               	movwf	??___fldiv& (0+255),b
 17076  003A08  0EFF               	movlw	255
 17077  003A0A  159B               	andwf	(___fldiv@grs+1)& (0+255),w,b
 17078  003A0C  6F90               	movwf	(??___fldiv+1)& (0+255),b
 17079  003A0E  0EFF               	movlw	255
 17080  003A10  159C               	andwf	(___fldiv@grs+2)& (0+255),w,b
 17081  003A12  6F91               	movwf	(??___fldiv+2)& (0+255),b
 17082  003A14  0E7F               	movlw	127
 17083  003A16  159D               	andwf	(___fldiv@grs+3)& (0+255),w,b
 17084  003A18  6F92               	movwf	(??___fldiv+3)& (0+255),b
 17085  003A1A  518F               	movf	??___fldiv& (0+255),w,b
 17086  003A1C  1190               	iorwf	(??___fldiv+1)& (0+255),w,b
 17087  003A1E  1191               	iorwf	(??___fldiv+2)& (0+255),w,b
 17088  003A20  1192               	iorwf	(??___fldiv+3)& (0+255),w,b
 17089  003A22  A4D8               	btfss	status,2,c
 17090  003A24  D002               	goto	u26270
 17091                           
 17092                           ; BSR set to: 0
 17093                           
 17094                           ; BSR set to: 0
 17095  003A26  A187               	btfss	___fldiv@b& (0+255),0,b
 17096  003A28  D002               	goto	l5945
 17097  003A2A                     u26270:
 17098                           
 17099                           ; BSR set to: 0
 17100  003A2A  0E01               	movlw	1
 17101  003A2C  6F9F               	movwf	___fldiv@aexp& (0+255),b
 17102  003A2E                     l5945:
 17103                           
 17104                           ; BSR set to: 0
 17105                           
 17106                           ; BSR set to: 0
 17107                           
 17108                           ; BSR set to: 0
 17109  003A2E  519F               	movf	___fldiv@aexp& (0+255),w,b
 17110  003A30  B4D8               	btfsc	status,2,c
 17111  003A32  D01F               	goto	l5947
 17112                           
 17113                           ; BSR set to: 0
 17114  003A34  0E01               	movlw	1
 17115  003A36  2787               	addwf	___fldiv@b& (0+255),f,b
 17116  003A38  0E00               	movlw	0
 17117  003A3A  2388               	addwfc	(___fldiv@b+1)& (0+255),f,b
 17118  003A3C  2389               	addwfc	(___fldiv@b+2)& (0+255),f,b
 17119  003A3E  238A               	addwfc	(___fldiv@b+3)& (0+255),f,b
 17120                           
 17121                           ; BSR set to: 0
 17122  003A40  A18A               	btfss	(___fldiv@b+3)& (0+255),0,b
 17123  003A42  D017               	goto	l5947
 17124                           
 17125                           ; BSR set to: 0
 17126  003A44  C087  F08F         	movff	___fldiv@b,??___fldiv
 17127  003A48  C088  F090         	movff	___fldiv@b+1,??___fldiv+1
 17128  003A4C  C089  F091         	movff	___fldiv@b+2,??___fldiv+2
 17129  003A50  C08A  F092         	movff	___fldiv@b+3,??___fldiv+3
 17130  003A54  3592               	rlcf	(??___fldiv+3)& (0+255),w,b
 17131  003A56  3392               	rrcf	(??___fldiv+3)& (0+255),f,b
 17132  003A58  3391               	rrcf	(??___fldiv+2)& (0+255),f,b
 17133  003A5A  3390               	rrcf	(??___fldiv+1)& (0+255),f,b
 17134  003A5C  338F               	rrcf	??___fldiv& (0+255),f,b
 17135  003A5E  C08F  F087         	movff	??___fldiv,___fldiv@b
 17136  003A62  C090  F088         	movff	??___fldiv+1,___fldiv@b+1
 17137  003A66  C091  F089         	movff	??___fldiv+2,___fldiv@b+2
 17138  003A6A  C092  F08A         	movff	??___fldiv+3,___fldiv@b+3
 17139                           
 17140                           ; BSR set to: 0
 17141  003A6E  4B98               	infsnz	___fldiv@new_exp& (0+255),f,b
 17142  003A70  2B99               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 17143  003A72                     l5947:
 17144                           
 17145                           ; BSR set to: 0
 17146                           
 17147                           ; BSR set to: 0
 17148                           
 17149                           ; BSR set to: 0
 17150  003A72  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 17151  003A74  D010               	goto	l5948
 17152  003A76  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 17153  003A78  E103               	bnz	u26300
 17154  003A7A  2998               	incf	___fldiv@new_exp& (0+255),w,b
 17155  003A7C  A0D8               	btfss	status,0,c
 17156  003A7E  D00B               	goto	l5948
 17157  003A80                     u26300:
 17158                           
 17159                           ; BSR set to: 0
 17160  003A80  0E00               	movlw	0
 17161  003A82  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 17162  003A84  6998               	setf	___fldiv@new_exp& (0+255),b
 17163  003A86  0E00               	movlw	0
 17164  003A88  6F87               	movwf	___fldiv@b& (0+255),b
 17165  003A8A  0E00               	movlw	0
 17166  003A8C  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17167  003A8E  0E00               	movlw	0
 17168  003A90  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17169  003A92  0E00               	movlw	0
 17170  003A94  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17171  003A96                     l5948:
 17172                           
 17173                           ; BSR set to: 0
 17174                           
 17175                           ; BSR set to: 0
 17176  003A96  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 17177  003A98  D005               	goto	u26310
 17178  003A9A  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 17179  003A9C  E111               	bnz	l17795
 17180  003A9E  0598               	decf	___fldiv@new_exp& (0+255),w,b
 17181  003AA0  B0D8               	btfsc	status,0,c
 17182  003AA2  D00E               	goto	l5949
 17183  003AA4                     u26310:
 17184                           
 17185                           ; BSR set to: 0
 17186  003AA4  0E00               	movlw	0
 17187  003AA6  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 17188  003AA8  0E00               	movlw	0
 17189  003AAA  6F98               	movwf	___fldiv@new_exp& (0+255),b
 17190  003AAC  0E00               	movlw	0
 17191  003AAE  6F87               	movwf	___fldiv@b& (0+255),b
 17192  003AB0  0E00               	movlw	0
 17193  003AB2  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17194  003AB4  0E00               	movlw	0
 17195  003AB6  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17196  003AB8  0E00               	movlw	0
 17197  003ABA  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17198  003ABC  0E00               	movlw	0
 17199  003ABE  6F93               	movwf	___fldiv@sign& (0+255),b
 17200  003AC0                     l5949:
 17201  003AC0                     l17795:
 17202                           
 17203                           ; BSR set to: 0
 17204  003AC0  C098  F09E         	movff	___fldiv@new_exp,___fldiv@bexp
 17205                           
 17206                           ; BSR set to: 0
 17207  003AC4  A19E               	btfss	___fldiv@bexp& (0+255),0,b
 17208  003AC6  D002               	goto	l5950
 17209                           
 17210                           ; BSR set to: 0
 17211  003AC8  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 17212  003ACA  D001               	goto	l5951
 17213  003ACC                     l5950:
 17214                           
 17215                           ; BSR set to: 0
 17216                           
 17217                           ; BSR set to: 0
 17218  003ACC  9F89               	bcf	(___fldiv@b+2)& (0+255),7,b
 17219  003ACE                     l5951:
 17220                           
 17221                           ; BSR set to: 0
 17222                           
 17223                           ; BSR set to: 0
 17224  003ACE  90D8               	bcf	status,0,c
 17225  003AD0  319E               	rrcf	___fldiv@bexp& (0+255),w,b
 17226  003AD2  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17227                           
 17228                           ; BSR set to: 0
 17229  003AD4  5193               	movf	___fldiv@sign& (0+255),w,b
 17230  003AD6  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 17231                           
 17232                           ; BSR set to: 0
 17233  003AD8  C087  F087         	movff	___fldiv@b,?___fldiv
 17234  003ADC  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 17235  003AE0  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 17236  003AE4  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 17237  003AE8  0012               	return	
 17238  003AEA                     __end_of___fldiv:
 17239                           	opt stack 0
 17240                           tblptru	equ	0xFF8
 17241                           tblptrh	equ	0xFF7
 17242                           tblptrl	equ	0xFF6
 17243                           tablat	equ	0xFF5
 17244                           prodh	equ	0xFF4
 17245                           prodl	equ	0xFF3
 17246                           intcon	equ	0xFF2
 17247                           intcon2	equ	0xFF1
 17248                           postinc0	equ	0xFEE
 17249                           wreg	equ	0xFE8
 17250                           postdec1	equ	0xFE5
 17251                           fsr1l	equ	0xFE1
 17252                           indf2	equ	0xFDF
 17253                           postinc2	equ	0xFDE
 17254                           plusw2	equ	0xFDB
 17255                           fsr2h	equ	0xFDA
 17256                           fsr2l	equ	0xFD9
 17257                           status	equ	0xFD8
 17258                           
 17259 ;; *************** function _Function_D_1 *****************
 17260 ;; Defined at:
 17261 ;;		line 622 in file "menu.c"
 17262 ;; Parameters:    Size  Location     Type
 17263 ;;		None
 17264 ;; Auto vars:     Size  Location     Type
 17265 ;;		None
 17266 ;; Return value:  Size  Location     Type
 17267 ;;                  1    wreg      void 
 17268 ;; Registers used:
 17269 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17270 ;; Tracked objects:
 17271 ;;		On entry : 0/0
 17272 ;;		On exit  : 0/0
 17273 ;;		Unchanged: 0/0
 17274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17277 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17278 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17279 ;;Total ram usage:        1 bytes
 17280 ;; Hardware stack levels used:    1
 17281 ;; Hardware stack levels required when called:    9
 17282 ;; This function calls:
 17283 ;;		_Lcd_Print_String
 17284 ;;		___lbmod
 17285 ;;		___wmul
 17286 ;;		_clear_row1
 17287 ;;		_clear_row2
 17288 ;;		_processEncoderBuxton
 17289 ;;		_setControllerResolution
 17290 ;; This function is called by:
 17291 ;;		_Function_D
 17292 ;; This function uses a non-reentrant model
 17293 ;;
 17294                           
 17295                           	psect	text49
 17296  0078C8                     __ptext49:
 17297                           	opt stack 0
 17298  0078C8                     _Function_D_1:
 17299                           	opt stack 19
 17300                           
 17301                           ;menu.c: 624: which_screen = POTS_RES_MENU;
 17302                           
 17303                           ; BSR set to: 0
 17304                           ;incstack = 0
 17305  0078C8  0E0F               	movlw	15
 17306  0078CA  0100               	movlb	0	; () banked
 17307  0078CC  6FF9               	movwf	_which_screen& (0+255),b
 17308                           
 17309                           ; BSR set to: 0
 17310                           ;menu.c: 625: lcd_print_once = 0;
 17311  0078CE  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17312                           
 17313                           ; BSR set to: 0
 17314                           ;menu.c: 626: encoder_click = 0;
 17315  0078D0  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17316                           
 17317                           ;menu.c: 628: potsResoMenu.selector = POT_MODE;
 17318  0078D2  0E00               	movlw	0
 17319  0078D4  B836               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17320  0078D6  0E01               	movlw	1
 17321  0078D8  0101               	movlb	1	; () banked
 17322  0078DA  6F58               	movwf	(_potsResoMenu+2)& (0+255),b
 17323                           
 17324                           ;menu.c: 630: while(encoder_click == 0) {
 17325  0078DC  D02E               	goto	l3514
 17326  0078DE                     
 17327                           ;menu.c: 631: processEncoderBuxton();
 17328                           
 17329                           ; BSR set to: 1
 17330  0078DE  EC09  F000         	call	_processEncoderBuxton	;wreg free
 17331                           
 17332                           ;menu.c: 632: if (lcd_print_once == 0) {
 17333  0078E2  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17334  0078E4  D029               	goto	l3516
 17335                           
 17336                           ;menu.c: 633: clear_row1();
 17337  0078E6  EC52  F04A         	call	_clear_row1	;wreg free
 17338                           
 17339                           ;menu.c: 634: Lcd_Print_String("Pots Resolution:");
 17340  0078EA  0EA8               	movlw	low STR_30
 17341  0078EC  0100               	movlb	0	; () banked
 17342  0078EE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17343  0078F0  0EFD               	movlw	high STR_30
 17344  0078F2  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17345  0078F4  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 17346                           
 17347                           ;menu.c: 635: clear_row2();
 17348  0078F8  EC3E  F04A         	call	_clear_row2	;wreg free
 17349                           
 17350                           ;menu.c: 636: Lcd_Print_String(LCD_STRINGS[(potsResoMenu.selector % potsResoMenu.number)
      +                           + potsResoMenu.address]);
 17351  0078FC  C156  F060         	movff	_potsResoMenu,___lbmod@divisor
 17352  007900  0101               	movlb	1	; () banked
 17353  007902  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 17354  007904  ECBD  F049         	call	___lbmod
 17355  007908  0100               	movlb	0	; () banked
 17356  00790A  6F70               	movwf	??_Function_D_1& (0+255),b
 17357  00790C  5170               	movf	??_Function_D_1& (0+255),w,b
 17358  00790E  0101               	movlb	1	; () banked
 17359  007910  2557               	addwf	(_potsResoMenu+1)& (0+255),w,b
 17360  007912  0100               	movlb	0	; () banked
 17361  007914  6F64               	movwf	___wmul@multiplier& (0+255),b
 17362  007916  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 17363  007918  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17364  00791A  0E00               	movlw	0
 17365  00791C  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17366  00791E  0E11               	movlw	17
 17367  007920  6F66               	movwf	___wmul@multiplicand& (0+255),b
 17368  007922  EC66  F04A         	call	___wmul	;wreg free
 17369  007926  0E9E               	movlw	low _LCD_STRINGS
 17370  007928  0100               	movlb	0	; () banked
 17371  00792A  2564               	addwf	?___wmul& (0+255),w,b
 17372  00792C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17373  00792E  0EF3               	movlw	high _LCD_STRINGS
 17374  007930  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 17375  007932  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17376  007934  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 17377  007938                     l3516:
 17378                           
 17379                           ;menu.c: 637: }
 17380                           ;menu.c: 638: lcd_print_once = 1;
 17381  007938  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17382  00793A                     l3514:
 17383  00793A  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17384  00793C  D7D0               	goto	l3515
 17385                           
 17386                           ;menu.c: 639: }
 17387                           ;menu.c: 645: POT_MODE = potsResoMenu.selector;
 17388  00793E  0101               	movlb	1	; () banked
 17389  007940  A158               	btfss	(_potsResoMenu+2)& (0+255),0,b
 17390  007942  D002               	goto	u33360
 17391  007944  8836               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17392  007946  D001               	goto	u33375
 17393  007948                     u33360:
 17394  007948  9836               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17395  00794A                     u33375:
 17396                           
 17397                           ;menu.c: 646: setControllerResolution();
 17398  00794A  ECEA  F049         	call	_setControllerResolution	;wreg free
 17399  00794E  0012               	return		;funcret
 17400  007950                     __end_of_Function_D_1:
 17401                           	opt stack 0
 17402                           tblptru	equ	0xFF8
 17403                           tblptrh	equ	0xFF7
 17404                           tblptrl	equ	0xFF6
 17405                           tablat	equ	0xFF5
 17406                           prodh	equ	0xFF4
 17407                           prodl	equ	0xFF3
 17408                           intcon	equ	0xFF2
 17409                           intcon2	equ	0xFF1
 17410                           postinc0	equ	0xFEE
 17411                           wreg	equ	0xFE8
 17412                           postdec1	equ	0xFE5
 17413                           fsr1l	equ	0xFE1
 17414                           indf2	equ	0xFDF
 17415                           postinc2	equ	0xFDE
 17416                           plusw2	equ	0xFDB
 17417                           fsr2h	equ	0xFDA
 17418                           fsr2l	equ	0xFD9
 17419                           status	equ	0xFD8
 17420                           
 17421 ;; *************** function _setControllerResolution *****************
 17422 ;; Defined at:
 17423 ;;		line 115 in file "menu.c"
 17424 ;; Parameters:    Size  Location     Type
 17425 ;;		None
 17426 ;; Auto vars:     Size  Location     Type
 17427 ;;  i               1    0[BANK0 ] unsigned char 
 17428 ;; Return value:  Size  Location     Type
 17429 ;;                  1    wreg      void 
 17430 ;; Registers used:
 17431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17432 ;; Tracked objects:
 17433 ;;		On entry : 0/0
 17434 ;;		On exit  : 0/0
 17435 ;;		Unchanged: 0/0
 17436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17440 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17441 ;;Total ram usage:        1 bytes
 17442 ;; Hardware stack levels used:    1
 17443 ;; Hardware stack levels required when called:    5
 17444 ;; This function calls:
 17445 ;;		Nothing
 17446 ;; This function is called by:
 17447 ;;		_Function_D_1
 17448 ;; This function uses a non-reentrant model
 17449 ;;
 17450                           
 17451                           	psect	text50
 17452  0093D4                     __ptext50:
 17453                           	opt stack 0
 17454  0093D4                     _setControllerResolution:
 17455                           	opt stack 22
 17456                           
 17457                           ;menu.c: 117: for(unsigned char i=0;i<16;i++){
 17458                           
 17459                           ;incstack = 0
 17460  0093D4  0E00               	movlw	0
 17461  0093D6  0100               	movlb	0	; () banked
 17462  0093D8  6F60               	movwf	setControllerResolution@i& (0+255),b
 17463  0093DA                     l18749:
 17464                           
 17465                           ; BSR set to: 0
 17466  0093DA  0E0F               	movlw	15
 17467  0093DC  6560               	cpfsgt	setControllerResolution@i& (0+255),b
 17468  0093DE  D001               	goto	l3349
 17469  0093E0  0012               	return	
 17470  0093E2                     l3349:
 17471                           
 17472                           ; BSR set to: 0
 17473                           ;menu.c: 119: inputPotsArray[i].controller_resolution = POT_MODE;
 17474                           
 17475                           ; BSR set to: 0
 17476  0093E2  5160               	movf	setControllerResolution@i& (0+255),w,b
 17477  0093E4  0D03               	mullw	3
 17478  0093E6  0EAC               	movlw	low _inputPotsArray
 17479  0093E8  24F3               	addwf	prodl,w,c
 17480  0093EA  6ED9               	movwf	fsr2l,c
 17481  0093EC  0E02               	movlw	high _inputPotsArray
 17482  0093EE  20F4               	addwfc	prodh,w,c
 17483  0093F0  6EDA               	movwf	fsr2h,c
 17484  0093F2  0102               	movlb	2	; () banked
 17485  0093F4  90DF               	bcf	indf2,0,c
 17486  0093F6  B836               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17487  0093F8  80DF               	bsf	indf2,0,c
 17488  0093FA  0100               	movlb	0	; () banked
 17489  0093FC  2B60               	incf	setControllerResolution@i& (0+255),f,b
 17490  0093FE  D7ED               	goto	l18749
 17491  009400                     __end_of_setControllerResolution:
 17492                           	opt stack 0
 17493                           tblptru	equ	0xFF8
 17494                           tblptrh	equ	0xFF7
 17495                           tblptrl	equ	0xFF6
 17496                           tablat	equ	0xFF5
 17497                           prodh	equ	0xFF4
 17498                           prodl	equ	0xFF3
 17499                           intcon	equ	0xFF2
 17500                           intcon2	equ	0xFF1
 17501                           postinc0	equ	0xFEE
 17502                           wreg	equ	0xFE8
 17503                           postdec1	equ	0xFE5
 17504                           fsr1l	equ	0xFE1
 17505                           indf2	equ	0xFDF
 17506                           postinc2	equ	0xFDE
 17507                           plusw2	equ	0xFDB
 17508                           fsr2h	equ	0xFDA
 17509                           fsr2l	equ	0xFD9
 17510                           status	equ	0xFD8
 17511                           
 17512 ;; *************** function _Function_C *****************
 17513 ;; Defined at:
 17514 ;;		line 597 in file "menu.c"
 17515 ;; Parameters:    Size  Location     Type
 17516 ;;		None
 17517 ;; Auto vars:     Size  Location     Type
 17518 ;;		None
 17519 ;; Return value:  Size  Location     Type
 17520 ;;                  1    wreg      void 
 17521 ;; Registers used:
 17522 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17523 ;; Tracked objects:
 17524 ;;		On entry : 0/0
 17525 ;;		On exit  : 0/0
 17526 ;;		Unchanged: 0/0
 17527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17530 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17531 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17532 ;;Total ram usage:        1 bytes
 17533 ;; Hardware stack levels used:    1
 17534 ;; Hardware stack levels required when called:   10
 17535 ;; This function calls:
 17536 ;;		_Function_C_1
 17537 ;;		_Function_C_2
 17538 ;;		_Function_C_3
 17539 ;;		_Lcd_Print_String
 17540 ;;		___lbmod
 17541 ;;		___wmul
 17542 ;;		_clear_row2
 17543 ;;		_processEncoderBuxton
 17544 ;; This function is called by:
 17545 ;;		_menu_lcd
 17546 ;; This function uses a non-reentrant model
 17547 ;;
 17548                           
 17549                           	psect	text51
 17550  007950                     __ptext51:
 17551                           	opt stack 0
 17552  007950                     _Function_C:
 17553                           	opt stack 19
 17554                           
 17555                           ;menu.c: 599: which_screen = DRUM_MENU;
 17556                           
 17557                           ; BSR set to: 0
 17558                           ;incstack = 0
 17559  007950  0E05               	movlw	5
 17560  007952  0100               	movlb	0	; () banked
 17561  007954  6FF9               	movwf	_which_screen& (0+255),b
 17562                           
 17563                           ; BSR set to: 0
 17564                           ;menu.c: 600: lcd_print_once = 0;
 17565  007956  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17566                           
 17567                           ;menu.c: 602: drumMenu.selector = DRUM_MODE;
 17568  007958  0E00               	movlw	0
 17569  00795A  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17570  00795C  0E01               	movlw	1
 17571  00795E  6E43               	movwf	_drumMenu+2,c
 17572                           
 17573                           ;menu.c: 604: while(encoder_click == 0) {
 17574  007960  D022               	goto	l3502
 17575  007962                     
 17576                           ;menu.c: 605: processEncoderBuxton();
 17577                           
 17578                           ; BSR set to: 0
 17579  007962  EC09  F000         	call	_processEncoderBuxton	;wreg free
 17580                           
 17581                           ;menu.c: 606: if (lcd_print_once == 0) {
 17582  007966  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17583  007968  D01D               	goto	l3504
 17584                           
 17585                           ;menu.c: 607: clear_row2();
 17586  00796A  EC3E  F04A         	call	_clear_row2	;wreg free
 17587                           
 17588                           ;menu.c: 608: Lcd_Print_String(LCD_STRINGS[(drumMenu.selector % drumMenu.number) + drumM
      +                          enu.address]);
 17589  00796E  C041  F060         	movff	_drumMenu,___lbmod@divisor
 17590  007972  5043               	movf	_drumMenu+2,w,c
 17591  007974  ECBD  F049         	call	___lbmod
 17592  007978  0100               	movlb	0	; () banked
 17593  00797A  6F7C               	movwf	??_Function_C& (0+255),b
 17594  00797C  517C               	movf	??_Function_C& (0+255),w,b
 17595  00797E  2442               	addwf	_drumMenu+1,w,c
 17596  007980  6F64               	movwf	___wmul@multiplier& (0+255),b
 17597  007982  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 17598  007984  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17599  007986  0E00               	movlw	0
 17600  007988  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17601  00798A  0E11               	movlw	17
 17602  00798C  6F66               	movwf	___wmul@multiplicand& (0+255),b
 17603  00798E  EC66  F04A         	call	___wmul	;wreg free
 17604  007992  0E9E               	movlw	low _LCD_STRINGS
 17605  007994  0100               	movlb	0	; () banked
 17606  007996  2564               	addwf	?___wmul& (0+255),w,b
 17607  007998  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17608  00799A  0EF3               	movlw	high _LCD_STRINGS
 17609  00799C  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 17610  00799E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17611  0079A0  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 17612  0079A4                     l3504:
 17613                           
 17614                           ;menu.c: 610: }
 17615                           ;menu.c: 611: lcd_print_once = 1;
 17616  0079A4  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17617  0079A6                     l3502:
 17618  0079A6  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17619  0079A8  D7DC               	goto	l3503
 17620                           
 17621                           ;menu.c: 612: }
 17622                           ;menu.c: 614: if(drumMenu.selector == 0){DRUM_MODE = 0;}
 17623  0079AA  5043               	movf	_drumMenu+2,w,c
 17624  0079AC  B4D8               	btfsc	status,2,c
 17625  0079AE  9A32               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17626                           
 17627                           ;menu.c: 615: if(drumMenu.selector == 1){DRUM_MODE = 1;}
 17628  0079B0  0443               	decf	_drumMenu+2,w,c
 17629  0079B2  B4D8               	btfsc	status,2,c
 17630  0079B4  8A32               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17631                           
 17632                           ;menu.c: 616: if(drumMenu.selector == 2) {Function_C_1();}
 17633  0079B6  0E02               	movlw	2
 17634  0079B8  1843               	xorwf	_drumMenu+2,w,c
 17635  0079BA  B4D8               	btfsc	status,2,c
 17636  0079BC  EC90  F03B         	call	_Function_C_1	;wreg free
 17637                           
 17638                           ;menu.c: 617: if(drumMenu.selector == 3) {Function_C_2();}
 17639  0079C0  0E03               	movlw	3
 17640  0079C2  1843               	xorwf	_drumMenu+2,w,c
 17641  0079C4  B4D8               	btfsc	status,2,c
 17642  0079C6  EC67  F030         	call	_Function_C_2	;wreg free
 17643                           
 17644                           ;menu.c: 618: if(drumMenu.selector == 4) {Function_C_3();}
 17645  0079CA  0E04               	movlw	4
 17646  0079CC  1843               	xorwf	_drumMenu+2,w,c
 17647  0079CE  A4D8               	btfss	status,2,c
 17648  0079D0  0012               	return	
 17649  0079D2  ECD3  F02F         	call	_Function_C_3	;wreg free
 17650  0079D6  0012               	return	
 17651  0079D8                     __end_of_Function_C:
 17652                           	opt stack 0
 17653                           tblptru	equ	0xFF8
 17654                           tblptrh	equ	0xFF7
 17655                           tblptrl	equ	0xFF6
 17656                           tablat	equ	0xFF5
 17657                           prodh	equ	0xFF4
 17658                           prodl	equ	0xFF3
 17659                           intcon	equ	0xFF2
 17660                           intcon2	equ	0xFF1
 17661                           postinc0	equ	0xFEE
 17662                           wreg	equ	0xFE8
 17663                           postdec1	equ	0xFE5
 17664                           fsr1l	equ	0xFE1
 17665                           indf2	equ	0xFDF
 17666                           postinc2	equ	0xFDE
 17667                           plusw2	equ	0xFDB
 17668                           fsr2h	equ	0xFDA
 17669                           fsr2l	equ	0xFD9
 17670                           status	equ	0xFD8
 17671                           
 17672 ;; *************** function _Function_C_3 *****************
 17673 ;; Defined at:
 17674 ;;		line 550 in file "menu.c"
 17675 ;; Parameters:    Size  Location     Type
 17676 ;;		None
 17677 ;; Auto vars:     Size  Location     Type
 17678 ;;  array_index     1   27[BANK0 ] unsigned char 
 17679 ;; Return value:  Size  Location     Type
 17680 ;;                  1    wreg      void 
 17681 ;; Registers used:
 17682 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17683 ;; Tracked objects:
 17684 ;;		On entry : 0/0
 17685 ;;		On exit  : 0/0
 17686 ;;		Unchanged: 0/0
 17687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17689 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17690 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17692 ;;Total ram usage:        2 bytes
 17693 ;; Hardware stack levels used:    1
 17694 ;; Hardware stack levels required when called:    9
 17695 ;; This function calls:
 17696 ;;		_Lcd_Print_String
 17697 ;;		_Lcd_Set_Cursor
 17698 ;;		___lbmod
 17699 ;;		___wmul
 17700 ;;		_clear_row1
 17701 ;;		_clear_row2
 17702 ;;		_int2string
 17703 ;;		_processEncoderBuxton
 17704 ;; This function is called by:
 17705 ;;		_Function_C
 17706 ;; This function uses a non-reentrant model
 17707 ;;
 17708                           
 17709                           	psect	text52
 17710  005FA6                     __ptext52:
 17711                           	opt stack 0
 17712  005FA6                     _Function_C_3:
 17713                           	opt stack 19
 17714                           
 17715                           ;menu.c: 552: which_screen = DRUMS_CC_MENU;
 17716                           
 17717                           ;incstack = 0
 17718  005FA6  0E0E               	movlw	14
 17719  005FA8  0100               	movlb	0	; () banked
 17720  005FAA  6FF9               	movwf	_which_screen& (0+255),b
 17721                           
 17722                           ; BSR set to: 0
 17723                           ;menu.c: 553: lcd_print_once = 0;
 17724  005FAC  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17725                           
 17726                           ; BSR set to: 0
 17727                           ;menu.c: 554: encoder_click = 0;
 17728  005FAE  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17729                           
 17730                           ;menu.c: 556: while(encoder_click == 0) {
 17731  005FB0  D02E               	goto	l3487
 17732  005FB2                     
 17733                           ;menu.c: 557: processEncoderBuxton();
 17734                           
 17735                           ; BSR set to: 0
 17736  005FB2  EC09  F000         	call	_processEncoderBuxton	;wreg free
 17737                           
 17738                           ;menu.c: 558: if (lcd_print_once == 0) {
 17739  005FB6  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17740  005FB8  D029               	goto	l3489
 17741                           
 17742                           ;menu.c: 559: clear_row1();
 17743  005FBA  EC52  F04A         	call	_clear_row1	;wreg free
 17744                           
 17745                           ;menu.c: 560: Lcd_Print_String("Set CC Number:");
 17746  005FBE  0E6B               	movlw	low STR_29
 17747  005FC0  0100               	movlb	0	; () banked
 17748  005FC2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17749  005FC4  0EFE               	movlw	high STR_29
 17750  005FC6  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17751  005FC8  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 17752                           
 17753                           ;menu.c: 561: clear_row2();
 17754  005FCC  EC3E  F04A         	call	_clear_row2	;wreg free
 17755                           
 17756                           ;menu.c: 562: Lcd_Print_String(LCD_STRINGS[(drumCCMenu.selector % drumCCMenu.number) + d
      +                          rumCCMenu.address]);
 17757  005FD0  C159  F060         	movff	_drumCCMenu,___lbmod@divisor
 17758  005FD4  0101               	movlb	1	; () banked
 17759  005FD6  515B               	movf	(_drumCCMenu+2)& (0+255),w,b
 17760  005FD8  ECBD  F049         	call	___lbmod
 17761  005FDC  0100               	movlb	0	; () banked
 17762  005FDE  6F7A               	movwf	??_Function_C_3& (0+255),b
 17763  005FE0  517A               	movf	??_Function_C_3& (0+255),w,b
 17764  005FE2  0101               	movlb	1	; () banked
 17765  005FE4  255A               	addwf	(_drumCCMenu+1)& (0+255),w,b
 17766  005FE6  0100               	movlb	0	; () banked
 17767  005FE8  6F64               	movwf	___wmul@multiplier& (0+255),b
 17768  005FEA  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 17769  005FEC  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17770  005FEE  0E00               	movlw	0
 17771  005FF0  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17772  005FF2  0E11               	movlw	17
 17773  005FF4  6F66               	movwf	___wmul@multiplicand& (0+255),b
 17774  005FF6  EC66  F04A         	call	___wmul	;wreg free
 17775  005FFA  0E9E               	movlw	low _LCD_STRINGS
 17776  005FFC  0100               	movlb	0	; () banked
 17777  005FFE  2564               	addwf	?___wmul& (0+255),w,b
 17778  006000  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17779  006002  0EF3               	movlw	high _LCD_STRINGS
 17780  006004  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 17781  006006  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17782  006008  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 17783  00600C                     l3489:
 17784                           
 17785                           ;menu.c: 563: }
 17786                           ;menu.c: 564: lcd_print_once = 1;
 17787  00600C  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17788  00600E                     l3487:
 17789  00600E  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17790  006010  D7D0               	goto	l3488
 17791                           
 17792                           ;menu.c: 565: }
 17793                           ;menu.c: 567: which_screen = BLANK;
 17794  006012  0E00               	movlw	0
 17795  006014  0100               	movlb	0	; () banked
 17796  006016  6FF9               	movwf	_which_screen& (0+255),b
 17797                           
 17798                           ; BSR set to: 0
 17799                           ;menu.c: 568: lcd_print_once = 0;
 17800  006018  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17801                           
 17802                           ; BSR set to: 0
 17803                           ;menu.c: 569: encoder_click = 0;
 17804  00601A  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17805                           
 17806                           ; BSR set to: 0
 17807                           ;menu.c: 570: unsigned char array_index = drumCCMenu.selector;
 17808  00601C  C15B  F07B         	movff	_drumCCMenu+2,Function_C_3@array_index
 17809                           
 17810                           ;menu.c: 572: while(encoder_click == 0) {
 17811  006020  D053               	goto	l3493
 17812  006022                     l3492:
 17813                           
 17814                           ;menu.c: 574: if(lcd_print_once == 0) {
 17815  006022  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17816  006024  D051               	goto	l3493
 17817                           
 17818                           ;menu.c: 575: if (encoder_direction == 0x10) {
 17819  006026  0E10               	movlw	16
 17820  006028  0100               	movlb	0	; () banked
 17821  00602A  19EB               	xorwf	_encoder_direction& (0+255),w,b
 17822  00602C  A4D8               	btfss	status,2,c
 17823  00602E  D016               	goto	l3494
 17824                           
 17825                           ; BSR set to: 0
 17826                           ;menu.c: 576: if(DRUM_CC[array_index] < 127) {
 17827  006030  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17828  006032  0D01               	mullw	1
 17829  006034  0ED7               	movlw	low _DRUM_CC
 17830  006036  24F3               	addwf	prodl,w,c
 17831  006038  6ED9               	movwf	fsr2l,c
 17832  00603A  0E01               	movlw	high _DRUM_CC
 17833  00603C  20F4               	addwfc	prodh,w,c
 17834  00603E  6EDA               	movwf	fsr2h,c
 17835  006040  0E7F               	movlw	127
 17836  006042  60DF               	cpfslt	indf2,c
 17837  006044  D009               	goto	l3495
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;menu.c: 577: DRUM_CC[array_index]++;
 17841  006046  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17842  006048  0D01               	mullw	1
 17843  00604A  0ED7               	movlw	low _DRUM_CC
 17844  00604C  24F3               	addwf	prodl,w,c
 17845  00604E  6ED9               	movwf	fsr2l,c
 17846  006050  0E01               	movlw	high _DRUM_CC
 17847  006052  20F4               	addwfc	prodh,w,c
 17848  006054  6EDA               	movwf	fsr2h,c
 17849  006056  2ADF               	incf	indf2,f,c
 17850  006058                     l3495:
 17851                           
 17852                           ; BSR set to: 0
 17853                           ;menu.c: 578: }
 17854                           ;menu.c: 579: encoder_direction = 0x00;
 17855                           
 17856                           ; BSR set to: 0
 17857  006058  0E00               	movlw	0
 17858  00605A  6FEB               	movwf	_encoder_direction& (0+255),b
 17859  00605C                     l3494:
 17860                           
 17861                           ; BSR set to: 0
 17862                           ;menu.c: 580: }
 17863                           ;menu.c: 582: if (encoder_direction == 0x20) {
 17864                           
 17865                           ; BSR set to: 0
 17866  00605C  0E20               	movlw	32
 17867  00605E  19EB               	xorwf	_encoder_direction& (0+255),w,b
 17868  006060  A4D8               	btfss	status,2,c
 17869  006062  D016               	goto	l3496
 17870                           
 17871                           ; BSR set to: 0
 17872                           ;menu.c: 583: if(DRUM_CC[array_index] > 0) {
 17873  006064  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17874  006066  0D01               	mullw	1
 17875  006068  0ED7               	movlw	low _DRUM_CC
 17876  00606A  24F3               	addwf	prodl,w,c
 17877  00606C  6ED9               	movwf	fsr2l,c
 17878  00606E  0E01               	movlw	high _DRUM_CC
 17879  006070  20F4               	addwfc	prodh,w,c
 17880  006072  6EDA               	movwf	fsr2h,c
 17881  006074  50DF               	movf	indf2,w,c
 17882  006076  B4D8               	btfsc	status,2,c
 17883  006078  D009               	goto	l3497
 17884                           
 17885                           ; BSR set to: 0
 17886                           ;menu.c: 584: DRUM_CC[array_index]--;
 17887  00607A  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17888  00607C  0D01               	mullw	1
 17889  00607E  0ED7               	movlw	low _DRUM_CC
 17890  006080  24F3               	addwf	prodl,w,c
 17891  006082  6ED9               	movwf	fsr2l,c
 17892  006084  0E01               	movlw	high _DRUM_CC
 17893  006086  20F4               	addwfc	prodh,w,c
 17894  006088  6EDA               	movwf	fsr2h,c
 17895  00608A  06DF               	decf	indf2,f,c
 17896  00608C                     l3497:
 17897                           
 17898                           ; BSR set to: 0
 17899                           ;menu.c: 585: }
 17900                           ;menu.c: 586: encoder_direction = 0x00;
 17901                           
 17902                           ; BSR set to: 0
 17903  00608C  0E00               	movlw	0
 17904  00608E  6FEB               	movwf	_encoder_direction& (0+255),b
 17905  006090                     l3496:
 17906                           
 17907                           ; BSR set to: 0
 17908                           ;menu.c: 587: }
 17909                           ;menu.c: 589: int2string(DRUM_CC[array_index]);
 17910                           
 17911                           ; BSR set to: 0
 17912  006090  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17913  006092  0D01               	mullw	1
 17914  006094  0ED7               	movlw	low _DRUM_CC
 17915  006096  24F3               	addwf	prodl,w,c
 17916  006098  6ED9               	movwf	fsr2l,c
 17917  00609A  0E01               	movlw	high _DRUM_CC
 17918  00609C  20F4               	addwfc	prodh,w,c
 17919  00609E  6EDA               	movwf	fsr2h,c
 17920  0060A0  50DF               	movf	indf2,w,c
 17921  0060A2  6F7A               	movwf	??_Function_C_3& (0+255),b
 17922  0060A4  517A               	movf	??_Function_C_3& (0+255),w,b
 17923  0060A6  6F74               	movwf	int2string@number& (0+255),b
 17924  0060A8  6B75               	clrf	(int2string@number+1)& (0+255),b
 17925  0060AA  EC52  F035         	call	_int2string	;wreg free
 17926                           
 17927                           ;menu.c: 590: Lcd_Set_Cursor(2,13);
 17928  0060AE  0E0D               	movlw	13
 17929  0060B0  0100               	movlb	0	; () banked
 17930  0060B2  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 17931  0060B4  0E02               	movlw	2
 17932  0060B6  ECEC  F045         	call	_Lcd_Set_Cursor
 17933                           
 17934                           ;menu.c: 591: Lcd_Print_String(string2display);
 17935  0060BA  0E82               	movlw	low _string2display
 17936  0060BC  0100               	movlb	0	; () banked
 17937  0060BE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17938  0060C0  0E01               	movlw	high _string2display
 17939  0060C2  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17940  0060C4  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 17941  0060C8                     l3493:
 17942  0060C8  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 17943  0060CA  0012               	return	
 17944  0060CC  D7AA               	goto	l3492
 17945  0060CE                     __end_of_Function_C_3:
 17946                           	opt stack 0
 17947                           tblptru	equ	0xFF8
 17948                           tblptrh	equ	0xFF7
 17949                           tblptrl	equ	0xFF6
 17950                           tablat	equ	0xFF5
 17951                           prodh	equ	0xFF4
 17952                           prodl	equ	0xFF3
 17953                           intcon	equ	0xFF2
 17954                           intcon2	equ	0xFF1
 17955                           postinc0	equ	0xFEE
 17956                           wreg	equ	0xFE8
 17957                           postdec1	equ	0xFE5
 17958                           fsr1l	equ	0xFE1
 17959                           indf2	equ	0xFDF
 17960                           postinc2	equ	0xFDE
 17961                           plusw2	equ	0xFDB
 17962                           fsr2h	equ	0xFDA
 17963                           fsr2l	equ	0xFD9
 17964                           status	equ	0xFD8
 17965                           
 17966 ;; *************** function _Function_C_2 *****************
 17967 ;; Defined at:
 17968 ;;		line 502 in file "menu.c"
 17969 ;; Parameters:    Size  Location     Type
 17970 ;;		None
 17971 ;; Auto vars:     Size  Location     Type
 17972 ;;  array_index     1   27[BANK0 ] unsigned char 
 17973 ;; Return value:  Size  Location     Type
 17974 ;;                  1    wreg      void 
 17975 ;; Registers used:
 17976 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17977 ;; Tracked objects:
 17978 ;;		On entry : 0/0
 17979 ;;		On exit  : 0/0
 17980 ;;		Unchanged: 0/0
 17981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17983 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17984 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17985 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17986 ;;Total ram usage:        2 bytes
 17987 ;; Hardware stack levels used:    1
 17988 ;; Hardware stack levels required when called:    9
 17989 ;; This function calls:
 17990 ;;		_Lcd_Print_String
 17991 ;;		_Lcd_Set_Cursor
 17992 ;;		___lbmod
 17993 ;;		___wmul
 17994 ;;		_clear_row1
 17995 ;;		_clear_row2
 17996 ;;		_int2string
 17997 ;;		_processEncoderBuxton
 17998 ;; This function is called by:
 17999 ;;		_Function_C
 18000 ;; This function uses a non-reentrant model
 18001 ;;
 18002                           
 18003                           	psect	text53
 18004  0060CE                     __ptext53:
 18005                           	opt stack 0
 18006  0060CE                     _Function_C_2:
 18007                           	opt stack 19
 18008                           
 18009                           ;menu.c: 504: which_screen = DRUMS_NN_MENU;
 18010                           
 18011                           ;incstack = 0
 18012  0060CE  0E0D               	movlw	13
 18013  0060D0  0100               	movlb	0	; () banked
 18014  0060D2  6FF9               	movwf	_which_screen& (0+255),b
 18015                           
 18016                           ; BSR set to: 0
 18017                           ;menu.c: 505: lcd_print_once = 0;
 18018  0060D4  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18019                           
 18020                           ; BSR set to: 0
 18021                           ;menu.c: 506: encoder_click = 0;
 18022  0060D6  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18023                           
 18024                           ;menu.c: 508: while(encoder_click == 0) {
 18025  0060D8  D02E               	goto	l3472
 18026  0060DA                     
 18027                           ;menu.c: 509: processEncoderBuxton();
 18028                           
 18029                           ; BSR set to: 0
 18030  0060DA  EC09  F000         	call	_processEncoderBuxton	;wreg free
 18031                           
 18032                           ;menu.c: 510: if (lcd_print_once == 0) {
 18033  0060DE  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18034  0060E0  D029               	goto	l3474
 18035                           
 18036                           ;menu.c: 511: clear_row1();
 18037  0060E2  EC52  F04A         	call	_clear_row1	;wreg free
 18038                           
 18039                           ;menu.c: 512: Lcd_Print_String("Set Note Number:");
 18040  0060E6  0ECA               	movlw	low STR_28
 18041  0060E8  0100               	movlb	0	; () banked
 18042  0060EA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18043  0060EC  0EFD               	movlw	high STR_28
 18044  0060EE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18045  0060F0  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 18046                           
 18047                           ;menu.c: 513: clear_row2();
 18048  0060F4  EC3E  F04A         	call	_clear_row2	;wreg free
 18049                           
 18050                           ;menu.c: 514: Lcd_Print_String(LCD_STRINGS[(drumNNMenu.selector % drumNNMenu.number) + d
      +                          rumNNMenu.address]);
 18051  0060F8  C15C  F060         	movff	_drumNNMenu,___lbmod@divisor
 18052  0060FC  0101               	movlb	1	; () banked
 18053  0060FE  515E               	movf	(_drumNNMenu+2)& (0+255),w,b
 18054  006100  ECBD  F049         	call	___lbmod
 18055  006104  0100               	movlb	0	; () banked
 18056  006106  6F7A               	movwf	??_Function_C_2& (0+255),b
 18057  006108  517A               	movf	??_Function_C_2& (0+255),w,b
 18058  00610A  0101               	movlb	1	; () banked
 18059  00610C  255D               	addwf	(_drumNNMenu+1)& (0+255),w,b
 18060  00610E  0100               	movlb	0	; () banked
 18061  006110  6F64               	movwf	___wmul@multiplier& (0+255),b
 18062  006112  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 18063  006114  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18064  006116  0E00               	movlw	0
 18065  006118  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18066  00611A  0E11               	movlw	17
 18067  00611C  6F66               	movwf	___wmul@multiplicand& (0+255),b
 18068  00611E  EC66  F04A         	call	___wmul	;wreg free
 18069  006122  0E9E               	movlw	low _LCD_STRINGS
 18070  006124  0100               	movlb	0	; () banked
 18071  006126  2564               	addwf	?___wmul& (0+255),w,b
 18072  006128  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18073  00612A  0EF3               	movlw	high _LCD_STRINGS
 18074  00612C  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 18075  00612E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18076  006130  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 18077  006134                     l3474:
 18078                           
 18079                           ;menu.c: 515: }
 18080                           ;menu.c: 516: lcd_print_once = 1;
 18081  006134  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18082  006136                     l3472:
 18083  006136  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 18084  006138  D7D0               	goto	l3473
 18085                           
 18086                           ;menu.c: 517: }
 18087                           ;menu.c: 519: which_screen = BLANK;
 18088  00613A  0E00               	movlw	0
 18089  00613C  0100               	movlb	0	; () banked
 18090  00613E  6FF9               	movwf	_which_screen& (0+255),b
 18091                           
 18092                           ; BSR set to: 0
 18093                           ;menu.c: 520: lcd_print_once = 0;
 18094  006140  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18095                           
 18096                           ; BSR set to: 0
 18097                           ;menu.c: 521: encoder_click = 0;
 18098  006142  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18099                           
 18100                           ; BSR set to: 0
 18101                           ;menu.c: 522: unsigned char array_index = drumNNMenu.selector;
 18102  006144  C15E  F07B         	movff	_drumNNMenu+2,Function_C_2@array_index
 18103                           
 18104                           ;menu.c: 524: while(encoder_click == 0) {
 18105  006148  D053               	goto	l3478
 18106  00614A                     l3477:
 18107                           
 18108                           ;menu.c: 526: if(lcd_print_once == 0) {
 18109  00614A  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18110  00614C  D051               	goto	l3478
 18111                           
 18112                           ;menu.c: 527: if (encoder_direction == 0x10) {
 18113  00614E  0E10               	movlw	16
 18114  006150  0100               	movlb	0	; () banked
 18115  006152  19EB               	xorwf	_encoder_direction& (0+255),w,b
 18116  006154  A4D8               	btfss	status,2,c
 18117  006156  D016               	goto	l3479
 18118                           
 18119                           ; BSR set to: 0
 18120                           ;menu.c: 528: if(DRUM_NOTE[array_index] < 81) {
 18121  006158  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18122  00615A  0D01               	mullw	1
 18123  00615C  0EDF               	movlw	low _DRUM_NOTE
 18124  00615E  24F3               	addwf	prodl,w,c
 18125  006160  6ED9               	movwf	fsr2l,c
 18126  006162  0E01               	movlw	high _DRUM_NOTE
 18127  006164  20F4               	addwfc	prodh,w,c
 18128  006166  6EDA               	movwf	fsr2h,c
 18129  006168  0E51               	movlw	81
 18130  00616A  60DF               	cpfslt	indf2,c
 18131  00616C  D009               	goto	l3480
 18132                           
 18133                           ; BSR set to: 0
 18134                           ;menu.c: 529: DRUM_NOTE[array_index]++;
 18135  00616E  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18136  006170  0D01               	mullw	1
 18137  006172  0EDF               	movlw	low _DRUM_NOTE
 18138  006174  24F3               	addwf	prodl,w,c
 18139  006176  6ED9               	movwf	fsr2l,c
 18140  006178  0E01               	movlw	high _DRUM_NOTE
 18141  00617A  20F4               	addwfc	prodh,w,c
 18142  00617C  6EDA               	movwf	fsr2h,c
 18143  00617E  2ADF               	incf	indf2,f,c
 18144  006180                     l3480:
 18145                           
 18146                           ; BSR set to: 0
 18147                           ;menu.c: 530: }
 18148                           ;menu.c: 531: encoder_direction = 0x00;
 18149                           
 18150                           ; BSR set to: 0
 18151  006180  0E00               	movlw	0
 18152  006182  6FEB               	movwf	_encoder_direction& (0+255),b
 18153  006184                     l3479:
 18154                           
 18155                           ; BSR set to: 0
 18156                           ;menu.c: 532: }
 18157                           ;menu.c: 534: if (encoder_direction == 0x20) {
 18158                           
 18159                           ; BSR set to: 0
 18160  006184  0E20               	movlw	32
 18161  006186  19EB               	xorwf	_encoder_direction& (0+255),w,b
 18162  006188  A4D8               	btfss	status,2,c
 18163  00618A  D016               	goto	l3481
 18164                           
 18165                           ; BSR set to: 0
 18166                           ;menu.c: 535: if(DRUM_NOTE[array_index] > 35) {
 18167  00618C  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18168  00618E  0D01               	mullw	1
 18169  006190  0EDF               	movlw	low _DRUM_NOTE
 18170  006192  24F3               	addwf	prodl,w,c
 18171  006194  6ED9               	movwf	fsr2l,c
 18172  006196  0E01               	movlw	high _DRUM_NOTE
 18173  006198  20F4               	addwfc	prodh,w,c
 18174  00619A  6EDA               	movwf	fsr2h,c
 18175  00619C  0E23               	movlw	35
 18176  00619E  64DF               	cpfsgt	indf2,c
 18177  0061A0  D009               	goto	l3482
 18178                           
 18179                           ; BSR set to: 0
 18180                           ;menu.c: 536: DRUM_NOTE[array_index]--;
 18181  0061A2  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18182  0061A4  0D01               	mullw	1
 18183  0061A6  0EDF               	movlw	low _DRUM_NOTE
 18184  0061A8  24F3               	addwf	prodl,w,c
 18185  0061AA  6ED9               	movwf	fsr2l,c
 18186  0061AC  0E01               	movlw	high _DRUM_NOTE
 18187  0061AE  20F4               	addwfc	prodh,w,c
 18188  0061B0  6EDA               	movwf	fsr2h,c
 18189  0061B2  06DF               	decf	indf2,f,c
 18190  0061B4                     l3482:
 18191                           
 18192                           ; BSR set to: 0
 18193                           ;menu.c: 537: }
 18194                           ;menu.c: 538: encoder_direction = 0x00;
 18195                           
 18196                           ; BSR set to: 0
 18197  0061B4  0E00               	movlw	0
 18198  0061B6  6FEB               	movwf	_encoder_direction& (0+255),b
 18199  0061B8                     l3481:
 18200                           
 18201                           ; BSR set to: 0
 18202                           ;menu.c: 539: }
 18203                           ;menu.c: 541: int2string(DRUM_NOTE[array_index]);
 18204                           
 18205                           ; BSR set to: 0
 18206  0061B8  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18207  0061BA  0D01               	mullw	1
 18208  0061BC  0EDF               	movlw	low _DRUM_NOTE
 18209  0061BE  24F3               	addwf	prodl,w,c
 18210  0061C0  6ED9               	movwf	fsr2l,c
 18211  0061C2  0E01               	movlw	high _DRUM_NOTE
 18212  0061C4  20F4               	addwfc	prodh,w,c
 18213  0061C6  6EDA               	movwf	fsr2h,c
 18214  0061C8  50DF               	movf	indf2,w,c
 18215  0061CA  6F7A               	movwf	??_Function_C_2& (0+255),b
 18216  0061CC  517A               	movf	??_Function_C_2& (0+255),w,b
 18217  0061CE  6F74               	movwf	int2string@number& (0+255),b
 18218  0061D0  6B75               	clrf	(int2string@number+1)& (0+255),b
 18219  0061D2  EC52  F035         	call	_int2string	;wreg free
 18220                           
 18221                           ;menu.c: 542: Lcd_Set_Cursor(2,13);
 18222  0061D6  0E0D               	movlw	13
 18223  0061D8  0100               	movlb	0	; () banked
 18224  0061DA  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 18225  0061DC  0E02               	movlw	2
 18226  0061DE  ECEC  F045         	call	_Lcd_Set_Cursor
 18227                           
 18228                           ;menu.c: 543: Lcd_Print_String(string2display);
 18229  0061E2  0E82               	movlw	low _string2display
 18230  0061E4  0100               	movlb	0	; () banked
 18231  0061E6  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18232  0061E8  0E01               	movlw	high _string2display
 18233  0061EA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18234  0061EC  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 18235  0061F0                     l3478:
 18236  0061F0  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 18237  0061F2  0012               	return	
 18238  0061F4  D7AA               	goto	l3477
 18239  0061F6                     __end_of_Function_C_2:
 18240                           	opt stack 0
 18241                           tblptru	equ	0xFF8
 18242                           tblptrh	equ	0xFF7
 18243                           tblptrl	equ	0xFF6
 18244                           tablat	equ	0xFF5
 18245                           prodh	equ	0xFF4
 18246                           prodl	equ	0xFF3
 18247                           intcon	equ	0xFF2
 18248                           intcon2	equ	0xFF1
 18249                           postinc0	equ	0xFEE
 18250                           wreg	equ	0xFE8
 18251                           postdec1	equ	0xFE5
 18252                           fsr1l	equ	0xFE1
 18253                           indf2	equ	0xFDF
 18254                           postinc2	equ	0xFDE
 18255                           plusw2	equ	0xFDB
 18256                           fsr2h	equ	0xFDA
 18257                           fsr2l	equ	0xFD9
 18258                           status	equ	0xFD8
 18259                           
 18260 ;; *************** function _int2string *****************
 18261 ;; Defined at:
 18262 ;;		line 86 in file "menu.c"
 18263 ;; Parameters:    Size  Location     Type
 18264 ;;  number          2   20[BANK0 ] int 
 18265 ;; Auto vars:     Size  Location     Type
 18266 ;;  number_to_di    2   24[BANK0 ] int 
 18267 ;; Return value:  Size  Location     Type
 18268 ;;                  1    wreg      void 
 18269 ;; Registers used:
 18270 ;;		wreg, status,2, status,0, cstack
 18271 ;; Tracked objects:
 18272 ;;		On entry : 0/0
 18273 ;;		On exit  : 0/0
 18274 ;;		Unchanged: 0/0
 18275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18276 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18277 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18278 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18279 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18280 ;;Total ram usage:        6 bytes
 18281 ;; Hardware stack levels used:    1
 18282 ;; Hardware stack levels required when called:    6
 18283 ;; This function calls:
 18284 ;;		___awdiv
 18285 ;;		___awmod
 18286 ;; This function is called by:
 18287 ;;		_setControllerNumbers
 18288 ;;		_Function_C_2
 18289 ;;		_Function_C_3
 18290 ;;		_Function_D_2
 18291 ;;		_Function_E_1
 18292 ;;		_Function_E_2
 18293 ;;		_Function_F
 18294 ;;		_Function_H_2
 18295 ;;		_Function_H_3
 18296 ;; This function uses a non-reentrant model
 18297 ;;
 18298                           
 18299                           	psect	text54
 18300  006AA4                     __ptext54:
 18301                           	opt stack 0
 18302  006AA4                     _int2string:
 18303                           	opt stack 21
 18304                           
 18305                           ;menu.c: 88: static __bit isNegative = 0;
 18306                           ;menu.c: 89: signed int number_to_display_temp = 0;
 18307                           
 18308                           ;incstack = 0
 18309  006AA4  0E00               	movlw	0
 18310  006AA6  0100               	movlb	0	; () banked
 18311  006AA8  6F79               	movwf	(int2string@number_to_display_temp+1)& (0+255),b
 18312  006AAA  0E00               	movlw	0
 18313  006AAC  6F78               	movwf	int2string@number_to_display_temp& (0+255),b
 18314                           
 18315                           ; BSR set to: 0
 18316                           ;menu.c: 91: if(number < 0) {
 18317  006AAE  AF75               	btfss	(int2string@number+1)& (0+255),7,b
 18318  006AB0  D00E               	goto	l3342
 18319                           
 18320                           ; BSR set to: 0
 18321                           ;menu.c: 92: isNegative = 1;
 18322  006AB2  8232               	bsf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18323                           
 18324                           ;menu.c: 93: number_to_display_temp = (0 - number);
 18325  006AB4  C074  F076         	movff	int2string@number,??_int2string
 18326  006AB8  C075  F077         	movff	int2string@number+1,??_int2string+1
 18327  006ABC  1F76               	comf	??_int2string& (0+255),f,b
 18328  006ABE  1F77               	comf	(??_int2string+1)& (0+255),f,b
 18329  006AC0  4B76               	infsnz	??_int2string& (0+255),f,b
 18330  006AC2  2B77               	incf	(??_int2string+1)& (0+255),f,b
 18331  006AC4  C076  F078         	movff	??_int2string,int2string@number_to_display_temp
 18332  006AC8  C077  F079         	movff	??_int2string+1,int2string@number_to_display_temp+1
 18333                           
 18334                           ;menu.c: 94: }
 18335  006ACC  D005               	goto	l3343
 18336  006ACE                     l3342:
 18337                           
 18338                           ; BSR set to: 0
 18339                           ;menu.c: 95: else {
 18340                           ;menu.c: 96: isNegative = 0;
 18341  006ACE  9232               	bcf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18342                           
 18343                           ;menu.c: 97: number_to_display_temp = number;
 18344  006AD0  C074  F078         	movff	int2string@number,int2string@number_to_display_temp
 18345  006AD4  C075  F079         	movff	int2string@number+1,int2string@number_to_display_temp+1
 18346  006AD8                     l3343:
 18347                           
 18348                           ; BSR set to: 0
 18349                           ;menu.c: 98: }
 18350                           ;menu.c: 101: if(isNegative) {
 18351  006AD8  A232               	btfss	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18352  006ADA  D002               	goto	l3344
 18353                           
 18354                           ; BSR set to: 0
 18355                           ;menu.c: 102: string2display[0] = '-';
 18356  006ADC  0E2D               	movlw	45
 18357  006ADE  D001               	goto	L4
 18358  006AE0                     l3344:
 18359                           
 18360                           ;menu.c: 104: else{string2display[0] = ' ';}
 18361                           
 18362                           ; BSR set to: 1
 18363  006AE0  0E20               	movlw	32
 18364  006AE2                     L4:
 18365  006AE2  0101               	movlb	1	; () banked
 18366  006AE4  6F82               	movwf	_string2display& (0+255),b
 18367                           
 18368                           ; BSR set to: 1
 18369                           ;menu.c: 107: string2display[1] = 48 + ((number_to_display_temp / 100) % 10);
 18370                           
 18371                           ; BSR set to: 1
 18372  006AE6  0E00               	movlw	0
 18373  006AE8  0100               	movlb	0	; () banked
 18374  006AEA  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18375  006AEC  0E64               	movlw	100
 18376  006AEE  6F62               	movwf	___awdiv@divisor& (0+255),b
 18377  006AF0  C078  F060         	movff	int2string@number_to_display_temp,___awdiv@dividend
 18378  006AF4  C079  F061         	movff	int2string@number_to_display_temp+1,___awdiv@dividend+1
 18379  006AF8  ECEC  F03C         	call	___awdiv	;wreg free
 18380  006AFC  C060  F06E         	movff	?___awdiv,___awmod@dividend
 18381  006B00  C061  F06F         	movff	?___awdiv+1,___awmod@dividend+1
 18382  006B04  0E00               	movlw	0
 18383  006B06  0100               	movlb	0	; () banked
 18384  006B08  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 18385  006B0A  0E0A               	movlw	10
 18386  006B0C  6F70               	movwf	___awmod@divisor& (0+255),b
 18387  006B0E  EC93  F042         	call	___awmod	;wreg free
 18388  006B12  0100               	movlb	0	; () banked
 18389  006B14  516E               	movf	?___awmod& (0+255),w,b
 18390  006B16  0F30               	addlw	48
 18391  006B18  0101               	movlb	1	; () banked
 18392  006B1A  6F83               	movwf	(_string2display+1)& (0+255),b
 18393                           
 18394                           ; BSR set to: 1
 18395                           ;menu.c: 108: string2display[2] = 48 + ((number_to_display_temp / 10) % 10);
 18396  006B1C  0E00               	movlw	0
 18397  006B1E  0100               	movlb	0	; () banked
 18398  006B20  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18399  006B22  0E0A               	movlw	10
 18400  006B24  6F62               	movwf	___awdiv@divisor& (0+255),b
 18401  006B26  C078  F060         	movff	int2string@number_to_display_temp,___awdiv@dividend
 18402  006B2A  C079  F061         	movff	int2string@number_to_display_temp+1,___awdiv@dividend+1
 18403  006B2E  ECEC  F03C         	call	___awdiv	;wreg free
 18404  006B32  C060  F06E         	movff	?___awdiv,___awmod@dividend
 18405  006B36  C061  F06F         	movff	?___awdiv+1,___awmod@dividend+1
 18406  006B3A  0E00               	movlw	0
 18407  006B3C  0100               	movlb	0	; () banked
 18408  006B3E  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 18409  006B40  0E0A               	movlw	10
 18410  006B42  6F70               	movwf	___awmod@divisor& (0+255),b
 18411  006B44  EC93  F042         	call	___awmod	;wreg free
 18412  006B48  0100               	movlb	0	; () banked
 18413  006B4A  516E               	movf	?___awmod& (0+255),w,b
 18414  006B4C  0F30               	addlw	48
 18415  006B4E  0101               	movlb	1	; () banked
 18416  006B50  6F84               	movwf	(_string2display+2)& (0+255),b
 18417                           
 18418                           ; BSR set to: 1
 18419                           ;menu.c: 109: string2display[3] = 48 + (number_to_display_temp % 10);
 18420  006B52  C078  F06E         	movff	int2string@number_to_display_temp,___awmod@dividend
 18421  006B56  C079  F06F         	movff	int2string@number_to_display_temp+1,___awmod@dividend+1
 18422  006B5A  0E00               	movlw	0
 18423  006B5C  0100               	movlb	0	; () banked
 18424  006B5E  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 18425  006B60  0E0A               	movlw	10
 18426  006B62  6F70               	movwf	___awmod@divisor& (0+255),b
 18427  006B64  EC93  F042         	call	___awmod	;wreg free
 18428  006B68  0100               	movlb	0	; () banked
 18429  006B6A  516E               	movf	?___awmod& (0+255),w,b
 18430  006B6C  0F30               	addlw	48
 18431  006B6E  0101               	movlb	1	; () banked
 18432  006B70  6F85               	movwf	(_string2display+3)& (0+255),b
 18433                           
 18434                           ; BSR set to: 1
 18435                           ;menu.c: 110: string2display[4] = '\0';
 18436  006B72  0E00               	movlw	0
 18437  006B74  6F86               	movwf	(_string2display+4)& (0+255),b
 18438                           
 18439                           ; BSR set to: 1
 18440  006B76  0012               	return		;funcret
 18441  006B78                     __end_of_int2string:
 18442                           	opt stack 0
 18443                           tblptru	equ	0xFF8
 18444                           tblptrh	equ	0xFF7
 18445                           tblptrl	equ	0xFF6
 18446                           tablat	equ	0xFF5
 18447                           prodh	equ	0xFF4
 18448                           prodl	equ	0xFF3
 18449                           intcon	equ	0xFF2
 18450                           intcon2	equ	0xFF1
 18451                           postinc0	equ	0xFEE
 18452                           wreg	equ	0xFE8
 18453                           postdec1	equ	0xFE5
 18454                           fsr1l	equ	0xFE1
 18455                           indf2	equ	0xFDF
 18456                           postinc2	equ	0xFDE
 18457                           plusw2	equ	0xFDB
 18458                           fsr2h	equ	0xFDA
 18459                           fsr2l	equ	0xFD9
 18460                           status	equ	0xFD8
 18461                           
 18462 ;; *************** function ___awdiv *****************
 18463 ;; Defined at:
 18464 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 18465 ;; Parameters:    Size  Location     Type
 18466 ;;  dividend        2    0[BANK0 ] int 
 18467 ;;  divisor         2    2[BANK0 ] int 
 18468 ;; Auto vars:     Size  Location     Type
 18469 ;;  quotient        2    6[BANK0 ] int 
 18470 ;;  sign            1    5[BANK0 ] unsigned char 
 18471 ;;  counter         1    4[BANK0 ] unsigned char 
 18472 ;; Return value:  Size  Location     Type
 18473 ;;                  2    0[BANK0 ] int 
 18474 ;; Registers used:
 18475 ;;		wreg, status,2, status,0
 18476 ;; Tracked objects:
 18477 ;;		On entry : 0/0
 18478 ;;		On exit  : 0/0
 18479 ;;		Unchanged: 0/0
 18480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18481 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18482 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18484 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18485 ;;Total ram usage:        8 bytes
 18486 ;; Hardware stack levels used:    1
 18487 ;; Hardware stack levels required when called:    5
 18488 ;; This function calls:
 18489 ;;		Nothing
 18490 ;; This function is called by:
 18491 ;;		_int2string
 18492 ;; This function uses a non-reentrant model
 18493 ;;
 18494                           
 18495                           	psect	text55
 18496  0079D8                     __ptext55:
 18497                           	opt stack 0
 18498  0079D8                     ___awdiv:
 18499                           	opt stack 21
 18500                           
 18501                           ; BSR set to: 1
 18502                           ;incstack = 0
 18503  0079D8  0E00               	movlw	0
 18504  0079DA  0100               	movlb	0	; () banked
 18505  0079DC  6F65               	movwf	___awdiv@sign& (0+255),b
 18506                           
 18507                           ; BSR set to: 0
 18508  0079DE  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 18509  0079E0  D006               	goto	l5595
 18510                           
 18511                           ; BSR set to: 0
 18512  0079E2  6D62               	negf	___awdiv@divisor& (0+255),b
 18513  0079E4  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 18514  0079E6  B0D8               	btfsc	status,0,c
 18515  0079E8  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 18516                           
 18517                           ; BSR set to: 0
 18518  0079EA  0E01               	movlw	1
 18519  0079EC  6F65               	movwf	___awdiv@sign& (0+255),b
 18520  0079EE                     l5595:
 18521                           
 18522                           ; BSR set to: 0
 18523                           
 18524                           ; BSR set to: 0
 18525  0079EE  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 18526  0079F0  D006               	goto	l5596
 18527                           
 18528                           ; BSR set to: 0
 18529  0079F2  6D60               	negf	___awdiv@dividend& (0+255),b
 18530  0079F4  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 18531  0079F6  B0D8               	btfsc	status,0,c
 18532  0079F8  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 18533                           
 18534                           ; BSR set to: 0
 18535  0079FA  0E01               	movlw	1
 18536  0079FC  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 18537  0079FE                     l5596:
 18538                           
 18539                           ; BSR set to: 0
 18540                           
 18541                           ; BSR set to: 0
 18542  0079FE  0E00               	movlw	0
 18543  007A00  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 18544  007A02  0E00               	movlw	0
 18545  007A04  6F66               	movwf	___awdiv@quotient& (0+255),b
 18546                           
 18547                           ; BSR set to: 0
 18548  007A06  5162               	movf	___awdiv@divisor& (0+255),w,b
 18549  007A08  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 18550  007A0A  B4D8               	btfsc	status,2,c
 18551  007A0C  D01C               	goto	l5603
 18552                           
 18553                           ; BSR set to: 0
 18554  007A0E  0E01               	movlw	1
 18555  007A10  6F64               	movwf	___awdiv@counter& (0+255),b
 18556  007A12  D004               	goto	l5598
 18557  007A14                     
 18558                           ; BSR set to: 0
 18559                           
 18560                           ; BSR set to: 0
 18561  007A14  90D8               	bcf	status,0,c
 18562  007A16  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 18563  007A18  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 18564  007A1A  2B64               	incf	___awdiv@counter& (0+255),f,b
 18565  007A1C                     l5598:
 18566                           
 18567                           ; BSR set to: 0
 18568                           
 18569                           ; BSR set to: 0
 18570  007A1C  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 18571  007A1E  D7FA               	goto	l5599
 18572  007A20                     u26550:
 18573                           
 18574                           ; BSR set to: 0
 18575                           
 18576                           ; BSR set to: 0
 18577                           
 18578                           ; BSR set to: 0
 18579  007A20  90D8               	bcf	status,0,c
 18580  007A22  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 18581  007A24  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 18582                           
 18583                           ; BSR set to: 0
 18584  007A26  5162               	movf	___awdiv@divisor& (0+255),w,b
 18585  007A28  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 18586  007A2A  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 18587  007A2C  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 18588  007A2E  A0D8               	btfss	status,0,c
 18589  007A30  D005               	goto	l5602
 18590                           
 18591                           ; BSR set to: 0
 18592  007A32  5162               	movf	___awdiv@divisor& (0+255),w,b
 18593  007A34  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 18594  007A36  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 18595  007A38  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 18596                           
 18597                           ; BSR set to: 0
 18598  007A3A  8166               	bsf	___awdiv@quotient& (0+255),0,b
 18599  007A3C                     l5602:
 18600                           
 18601                           ; BSR set to: 0
 18602                           
 18603                           ; BSR set to: 0
 18604  007A3C  90D8               	bcf	status,0,c
 18605  007A3E  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 18606  007A40  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 18607                           
 18608                           ; BSR set to: 0
 18609  007A42  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 18610  007A44  D7ED               	goto	u26550
 18611  007A46                     l5603:
 18612                           
 18613                           ; BSR set to: 0
 18614                           
 18615                           ; BSR set to: 0
 18616                           
 18617                           ; BSR set to: 0
 18618  007A46  5165               	movf	___awdiv@sign& (0+255),w,b
 18619  007A48  B4D8               	btfsc	status,2,c
 18620  007A4A  D004               	goto	l5604
 18621                           
 18622                           ; BSR set to: 0
 18623  007A4C  6D66               	negf	___awdiv@quotient& (0+255),b
 18624  007A4E  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 18625  007A50  B0D8               	btfsc	status,0,c
 18626  007A52  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 18627  007A54                     l5604:
 18628                           
 18629                           ; BSR set to: 0
 18630                           
 18631                           ; BSR set to: 0
 18632  007A54  C066  F060         	movff	___awdiv@quotient,?___awdiv
 18633  007A58  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 18634  007A5C  0012               	return	
 18635  007A5E                     __end_of___awdiv:
 18636                           	opt stack 0
 18637                           tblptru	equ	0xFF8
 18638                           tblptrh	equ	0xFF7
 18639                           tblptrl	equ	0xFF6
 18640                           tablat	equ	0xFF5
 18641                           prodh	equ	0xFF4
 18642                           prodl	equ	0xFF3
 18643                           intcon	equ	0xFF2
 18644                           intcon2	equ	0xFF1
 18645                           postinc0	equ	0xFEE
 18646                           wreg	equ	0xFE8
 18647                           postdec1	equ	0xFE5
 18648                           fsr1l	equ	0xFE1
 18649                           indf2	equ	0xFDF
 18650                           postinc2	equ	0xFDE
 18651                           plusw2	equ	0xFDB
 18652                           fsr2h	equ	0xFDA
 18653                           fsr2l	equ	0xFD9
 18654                           status	equ	0xFD8
 18655                           
 18656 ;; *************** function _Function_C_1 *****************
 18657 ;; Defined at:
 18658 ;;		line 479 in file "menu.c"
 18659 ;; Parameters:    Size  Location     Type
 18660 ;;		None
 18661 ;; Auto vars:     Size  Location     Type
 18662 ;;		None
 18663 ;; Return value:  Size  Location     Type
 18664 ;;                  1    wreg      void 
 18665 ;; Registers used:
 18666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18667 ;; Tracked objects:
 18668 ;;		On entry : 0/0
 18669 ;;		On exit  : 0/0
 18670 ;;		Unchanged: 0/0
 18671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18674 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18675 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18676 ;;Total ram usage:        1 bytes
 18677 ;; Hardware stack levels used:    1
 18678 ;; Hardware stack levels required when called:    9
 18679 ;; This function calls:
 18680 ;;		_Lcd_Print_String
 18681 ;;		___lbmod
 18682 ;;		___wmul
 18683 ;;		_clear_row1
 18684 ;;		_clear_row2
 18685 ;;		_processEncoderBuxton
 18686 ;; This function is called by:
 18687 ;;		_Function_C
 18688 ;; This function uses a non-reentrant model
 18689 ;;
 18690                           
 18691                           	psect	text56
 18692  007720                     __ptext56:
 18693                           	opt stack 0
 18694  007720                     _Function_C_1:
 18695                           	opt stack 19
 18696                           
 18697                           ;menu.c: 481: which_screen = DRUMS_CC_TYPE_MENU;
 18698                           
 18699                           ; BSR set to: 0
 18700                           ;incstack = 0
 18701  007720  0E0C               	movlw	12
 18702  007722  0100               	movlb	0	; () banked
 18703  007724  6FF9               	movwf	_which_screen& (0+255),b
 18704                           
 18705                           ; BSR set to: 0
 18706                           ;menu.c: 482: lcd_print_once = 0;
 18707  007726  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18708                           
 18709                           ; BSR set to: 0
 18710                           ;menu.c: 483: encoder_click = 0;
 18711  007728  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18712                           
 18713                           ;menu.c: 485: drumCCTypeMenu.selector = CONTROL_MODE;
 18714  00772A  0E00               	movlw	0
 18715  00772C  B832               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18716  00772E  0E01               	movlw	1
 18717  007730  0101               	movlb	1	; () banked
 18718  007732  6F61               	movwf	(_drumCCTypeMenu+2)& (0+255),b
 18719                           
 18720                           ;menu.c: 487: while(encoder_click == 0) {
 18721  007734  D02E               	goto	l3465
 18722  007736                     
 18723                           ;menu.c: 488: processEncoderBuxton();
 18724                           
 18725                           ; BSR set to: 1
 18726  007736  EC09  F000         	call	_processEncoderBuxton	;wreg free
 18727                           
 18728                           ;menu.c: 489: if (lcd_print_once == 0) {
 18729  00773A  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18730  00773C  D029               	goto	l3467
 18731                           
 18732                           ;menu.c: 490: clear_row1();
 18733  00773E  EC52  F04A         	call	_clear_row1	;wreg free
 18734                           
 18735                           ;menu.c: 491: Lcd_Print_String("Drum CC Mode:");
 18736  007742  0EE0               	movlw	low STR_27
 18737  007744  0100               	movlb	0	; () banked
 18738  007746  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18739  007748  0EFE               	movlw	high STR_27
 18740  00774A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18741  00774C  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 18742                           
 18743                           ;menu.c: 492: clear_row2();
 18744  007750  EC3E  F04A         	call	_clear_row2	;wreg free
 18745                           
 18746                           ;menu.c: 493: Lcd_Print_String(LCD_STRINGS[(drumCCTypeMenu.selector % drumCCTypeMenu.num
      +                          ber) + drumCCTypeMenu.address]);
 18747  007754  C15F  F060         	movff	_drumCCTypeMenu,___lbmod@divisor
 18748  007758  0101               	movlb	1	; () banked
 18749  00775A  5161               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18750  00775C  ECBD  F049         	call	___lbmod
 18751  007760  0100               	movlb	0	; () banked
 18752  007762  6F70               	movwf	??_Function_C_1& (0+255),b
 18753  007764  5170               	movf	??_Function_C_1& (0+255),w,b
 18754  007766  0101               	movlb	1	; () banked
 18755  007768  2560               	addwf	(_drumCCTypeMenu+1)& (0+255),w,b
 18756  00776A  0100               	movlb	0	; () banked
 18757  00776C  6F64               	movwf	___wmul@multiplier& (0+255),b
 18758  00776E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 18759  007770  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18760  007772  0E00               	movlw	0
 18761  007774  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18762  007776  0E11               	movlw	17
 18763  007778  6F66               	movwf	___wmul@multiplicand& (0+255),b
 18764  00777A  EC66  F04A         	call	___wmul	;wreg free
 18765  00777E  0E9E               	movlw	low _LCD_STRINGS
 18766  007780  0100               	movlb	0	; () banked
 18767  007782  2564               	addwf	?___wmul& (0+255),w,b
 18768  007784  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18769  007786  0EF3               	movlw	high _LCD_STRINGS
 18770  007788  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 18771  00778A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18772  00778C  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 18773  007790                     l3467:
 18774                           
 18775                           ;menu.c: 494: }
 18776                           ;menu.c: 495: lcd_print_once = 1;
 18777  007790  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18778  007792                     l3465:
 18779  007792  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 18780  007794  D7D0               	goto	l3466
 18781                           
 18782                           ;menu.c: 496: }
 18783                           ;menu.c: 498: CONTROL_MODE = drumCCTypeMenu.selector % drumCCTypeMenu.number;
 18784  007796  C15F  F060         	movff	_drumCCTypeMenu,___lbmod@divisor
 18785  00779A  0101               	movlb	1	; () banked
 18786  00779C  5161               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18787  00779E  ECBD  F049         	call	___lbmod
 18788  0077A2  0100               	movlb	0	; () banked
 18789  0077A4  6F70               	movwf	??_Function_C_1& (0+255),b
 18790  0077A6  3170               	rrcf	??_Function_C_1& (0+255),w,b
 18791  0077A8  A0D8               	btfss	status,0,c
 18792  0077AA  D002               	goto	u33160
 18793  0077AC  8832               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18794  0077AE  0012               	return	
 18795  0077B0                     u33160:
 18796  0077B0  9832               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18797  0077B2  0012               	return		;funcret
 18798  0077B4                     __end_of_Function_C_1:
 18799                           	opt stack 0
 18800                           tblptru	equ	0xFF8
 18801                           tblptrh	equ	0xFF7
 18802                           tblptrl	equ	0xFF6
 18803                           tablat	equ	0xFF5
 18804                           prodh	equ	0xFF4
 18805                           prodl	equ	0xFF3
 18806                           intcon	equ	0xFF2
 18807                           intcon2	equ	0xFF1
 18808                           postinc0	equ	0xFEE
 18809                           wreg	equ	0xFE8
 18810                           postdec1	equ	0xFE5
 18811                           fsr1l	equ	0xFE1
 18812                           indf2	equ	0xFDF
 18813                           postinc2	equ	0xFDE
 18814                           plusw2	equ	0xFDB
 18815                           fsr2h	equ	0xFDA
 18816                           fsr2l	equ	0xFD9
 18817                           status	equ	0xFD8
 18818                           
 18819 ;; *************** function _Function_B *****************
 18820 ;; Defined at:
 18821 ;;		line 460 in file "menu.c"
 18822 ;; Parameters:    Size  Location     Type
 18823 ;;		None
 18824 ;; Auto vars:     Size  Location     Type
 18825 ;;		None
 18826 ;; Return value:  Size  Location     Type
 18827 ;;                  1    wreg      void 
 18828 ;; Registers used:
 18829 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18830 ;; Tracked objects:
 18831 ;;		On entry : 0/0
 18832 ;;		On exit  : 0/0
 18833 ;;		Unchanged: 0/0
 18834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18837 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18838 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18839 ;;Total ram usage:        1 bytes
 18840 ;; Hardware stack levels used:    1
 18841 ;; Hardware stack levels required when called:    9
 18842 ;; This function calls:
 18843 ;;		_Lcd_Print_String
 18844 ;;		___lbmod
 18845 ;;		___wmul
 18846 ;;		_clear_row2
 18847 ;;		_processEncoderBuxton
 18848 ;; This function is called by:
 18849 ;;		_menu_lcd
 18850 ;; This function uses a non-reentrant model
 18851 ;;
 18852                           
 18853                           	psect	text57
 18854  007D74                     __ptext57:
 18855                           	opt stack 0
 18856  007D74                     _Function_B:
 18857                           	opt stack 20
 18858                           
 18859                           ;menu.c: 462: which_screen = TRANSPOSE_MENU;
 18860                           
 18861                           ;incstack = 0
 18862  007D74  0E04               	movlw	4
 18863  007D76  0100               	movlb	0	; () banked
 18864  007D78  6FF9               	movwf	_which_screen& (0+255),b
 18865                           
 18866                           ; BSR set to: 0
 18867                           ;menu.c: 463: lcd_print_once = 0;
 18868  007D7A  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18869                           
 18870                           ;menu.c: 465: transposeMenu.selector = TRANSPOSE_MODE;
 18871  007D7C  0E00               	movlw	0
 18872  007D7E  BC35               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18873  007D80  0E01               	movlw	1
 18874  007D82  0101               	movlb	1	; () banked
 18875  007D84  6F64               	movwf	(_transposeMenu+2)& (0+255),b
 18876                           
 18877                           ;menu.c: 467: while(encoder_click == 0) {
 18878  007D86  D033               	goto	l3458
 18879  007D88                     
 18880                           ;menu.c: 468: processEncoderBuxton();
 18881                           
 18882                           ; BSR set to: 1
 18883  007D88  EC09  F000         	call	_processEncoderBuxton	;wreg free
 18884                           
 18885                           ;menu.c: 469: if (lcd_print_once == 0) {
 18886  007D8C  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18887  007D8E  D02E               	goto	u37165
 18888                           
 18889                           ;menu.c: 470: clear_row2();
 18890  007D90  EC3E  F04A         	call	_clear_row2	;wreg free
 18891                           
 18892                           ;menu.c: 471: Lcd_Print_String(LCD_STRINGS[(transposeMenu.selector % transposeMenu.numbe
      +                          r) + transposeMenu.address]);
 18893  007D94  C162  F060         	movff	_transposeMenu,___lbmod@divisor
 18894  007D98  0101               	movlb	1	; () banked
 18895  007D9A  5164               	movf	(_transposeMenu+2)& (0+255),w,b
 18896  007D9C  ECBD  F049         	call	___lbmod
 18897  007DA0  0100               	movlb	0	; () banked
 18898  007DA2  6F70               	movwf	??_Function_B& (0+255),b
 18899  007DA4  5170               	movf	??_Function_B& (0+255),w,b
 18900  007DA6  0101               	movlb	1	; () banked
 18901  007DA8  2563               	addwf	(_transposeMenu+1)& (0+255),w,b
 18902  007DAA  0100               	movlb	0	; () banked
 18903  007DAC  6F64               	movwf	___wmul@multiplier& (0+255),b
 18904  007DAE  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 18905  007DB0  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18906  007DB2  0E00               	movlw	0
 18907  007DB4  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18908  007DB6  0E11               	movlw	17
 18909  007DB8  6F66               	movwf	___wmul@multiplicand& (0+255),b
 18910  007DBA  EC66  F04A         	call	___wmul	;wreg free
 18911  007DBE  0E9E               	movlw	low _LCD_STRINGS
 18912  007DC0  0100               	movlb	0	; () banked
 18913  007DC2  2564               	addwf	?___wmul& (0+255),w,b
 18914  007DC4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18915  007DC6  0EF3               	movlw	high _LCD_STRINGS
 18916  007DC8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 18917  007DCA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18918  007DCC  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 18919                           
 18920                           ;menu.c: 472: TRANSPOSE_MODE = transposeMenu.selector % transposeMenu.number;
 18921  007DD0  C162  F060         	movff	_transposeMenu,___lbmod@divisor
 18922  007DD4  0101               	movlb	1	; () banked
 18923  007DD6  5164               	movf	(_transposeMenu+2)& (0+255),w,b
 18924  007DD8  ECBD  F049         	call	___lbmod
 18925  007DDC  0100               	movlb	0	; () banked
 18926  007DDE  6F70               	movwf	??_Function_B& (0+255),b
 18927  007DE0  3170               	rrcf	??_Function_B& (0+255),w,b
 18928  007DE2  A0D8               	btfss	status,0,c
 18929  007DE4  D002               	goto	u37150
 18930  007DE6  8C35               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18931  007DE8  D001               	goto	u37165
 18932  007DEA                     u37150:
 18933  007DEA  9C35               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18934  007DEC                     u37165:
 18935                           
 18936                           ;menu.c: 473: }
 18937                           ;menu.c: 474: lcd_print_once = 1;
 18938  007DEC  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18939  007DEE                     l3458:
 18940  007DEE  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 18941  007DF0  0012               	return	
 18942  007DF2  D7CA               	goto	l3459
 18943  007DF4                     __end_of_Function_B:
 18944                           	opt stack 0
 18945                           tblptru	equ	0xFF8
 18946                           tblptrh	equ	0xFF7
 18947                           tblptrl	equ	0xFF6
 18948                           tablat	equ	0xFF5
 18949                           prodh	equ	0xFF4
 18950                           prodl	equ	0xFF3
 18951                           intcon	equ	0xFF2
 18952                           intcon2	equ	0xFF1
 18953                           postinc0	equ	0xFEE
 18954                           wreg	equ	0xFE8
 18955                           postdec1	equ	0xFE5
 18956                           fsr1l	equ	0xFE1
 18957                           indf2	equ	0xFDF
 18958                           postinc2	equ	0xFDE
 18959                           plusw2	equ	0xFDB
 18960                           fsr2h	equ	0xFDA
 18961                           fsr2l	equ	0xFD9
 18962                           status	equ	0xFD8
 18963                           
 18964 ;; *************** function _Function_A *****************
 18965 ;; Defined at:
 18966 ;;		line 422 in file "menu.c"
 18967 ;; Parameters:    Size  Location     Type
 18968 ;;		None
 18969 ;; Auto vars:     Size  Location     Type
 18970 ;;		None
 18971 ;; Return value:  Size  Location     Type
 18972 ;;                  1    wreg      void 
 18973 ;; Registers used:
 18974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18975 ;; Tracked objects:
 18976 ;;		On entry : 0/0
 18977 ;;		On exit  : 0/0
 18978 ;;		Unchanged: 0/0
 18979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18983 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18984 ;;Total ram usage:        1 bytes
 18985 ;; Hardware stack levels used:    1
 18986 ;; Hardware stack levels required when called:   10
 18987 ;; This function calls:
 18988 ;;		_Function_A_1
 18989 ;;		_Function_A_2
 18990 ;;		_Function_A_3
 18991 ;;		_Lcd_Print_String
 18992 ;;		___lbmod
 18993 ;;		___wmul
 18994 ;;		_clear_row2
 18995 ;;		_processEncoderBuxton
 18996 ;; This function is called by:
 18997 ;;		_menu_lcd
 18998 ;; This function uses a non-reentrant model
 18999 ;;
 19000                           
 19001                           	psect	text58
 19002  007F70                     __ptext58:
 19003                           	opt stack 0
 19004  007F70                     _Function_A:
 19005                           	opt stack 19
 19006                           
 19007                           ;menu.c: 425: which_screen = KEYBOARD_MENU;
 19008                           
 19009                           ;incstack = 0
 19010  007F70  0E03               	movlw	3
 19011  007F72  0100               	movlb	0	; () banked
 19012  007F74  6FF9               	movwf	_which_screen& (0+255),b
 19013                           
 19014                           ; BSR set to: 0
 19015                           ;menu.c: 426: lcd_print_once = 0;
 19016  007F76  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19017                           
 19018                           ; BSR set to: 0
 19019                           ;menu.c: 428: keyboardMenu.selector = KEYBOARD_MODE;
 19020  007F78  C0F2  F04C         	movff	_KEYBOARD_MODE,_keyboardMenu+2
 19021                           
 19022                           ;menu.c: 430: while(encoder_click == 0) {
 19023  007F7C  D024               	goto	l3448
 19024  007F7E                     
 19025                           ;menu.c: 431: processEncoderBuxton();
 19026                           
 19027                           ; BSR set to: 0
 19028  007F7E  EC09  F000         	call	_processEncoderBuxton	;wreg free
 19029                           
 19030                           ;menu.c: 432: if (lcd_print_once == 0) {
 19031  007F82  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19032  007F84  D01F               	goto	l3450
 19033                           
 19034                           ;menu.c: 433: clear_row2();
 19035  007F86  EC3E  F04A         	call	_clear_row2	;wreg free
 19036                           
 19037                           ;menu.c: 434: Lcd_Print_String(LCD_STRINGS[(keyboardMenu.selector % keyboardMenu.number)
      +                           + keyboardMenu.address]);
 19038  007F8A  C04A  F060         	movff	_keyboardMenu,___lbmod@divisor
 19039  007F8E  504C               	movf	_keyboardMenu+2,w,c
 19040  007F90  ECBD  F049         	call	___lbmod
 19041  007F94  0100               	movlb	0	; () banked
 19042  007F96  6F71               	movwf	??_Function_A& (0+255),b
 19043  007F98  5171               	movf	??_Function_A& (0+255),w,b
 19044  007F9A  244B               	addwf	_keyboardMenu+1,w,c
 19045  007F9C  6F64               	movwf	___wmul@multiplier& (0+255),b
 19046  007F9E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 19047  007FA0  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19048  007FA2  0E00               	movlw	0
 19049  007FA4  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19050  007FA6  0E11               	movlw	17
 19051  007FA8  6F66               	movwf	___wmul@multiplicand& (0+255),b
 19052  007FAA  EC66  F04A         	call	___wmul	;wreg free
 19053  007FAE  0E9E               	movlw	low _LCD_STRINGS
 19054  007FB0  0100               	movlb	0	; () banked
 19055  007FB2  2564               	addwf	?___wmul& (0+255),w,b
 19056  007FB4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19057  007FB6  0EF3               	movlw	high _LCD_STRINGS
 19058  007FB8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 19059  007FBA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19060  007FBC  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 19061                           
 19062                           ;menu.c: 435: KEYBOARD_MODE = keyboardMenu.selector;
 19063  007FC0  C04C  F0F2         	movff	_keyboardMenu+2,_KEYBOARD_MODE
 19064  007FC4                     l3450:
 19065                           
 19066                           ;menu.c: 436: }
 19067                           ;menu.c: 437: lcd_print_once = 1;
 19068  007FC4  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19069  007FC6                     l3448:
 19070  007FC6  A036               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 19071  007FC8  D7DA               	goto	l3449
 19072                           
 19073                           ;menu.c: 438: }
 19074                           ;menu.c: 440: lcd_print_once = 0;
 19075  007FCA  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19076                           
 19077                           ;menu.c: 443: if(keyboardMenu.selector == MODES) {
 19078  007FCC  0E03               	movlw	3
 19079  007FCE  184C               	xorwf	_keyboardMenu+2,w,c
 19080  007FD0  B4D8               	btfsc	status,2,c
 19081                           
 19082                           ;menu.c: 444: Function_A_1();
 19083  007FD2  EC74  F040         	call	_Function_A_1	;wreg free
 19084                           
 19085                           ;menu.c: 445: }
 19086                           ;menu.c: 448: if(keyboardMenu.selector == TRIAD) {
 19087  007FD6  0E06               	movlw	6
 19088  007FD8  184C               	xorwf	_keyboardMenu+2,w,c
 19089  007FDA  B4D8               	btfsc	status,2,c
 19090                           
 19091                           ;menu.c: 449: Function_A_2();
 19092  007FDC  EC36  F040         	call	_Function_A_2	;wreg free
 19093                           
 19094                           ;menu.c: 451: }
 19095                           ;menu.c: 453: if(keyboardMenu.selector == SEVENTH){
 19096  007FE0  0E09               	movlw	9
 19097  007FE2  184C               	xorwf	_keyboardMenu+2,w,c
 19098  007FE4  A4D8               	btfss	status,2,c
 19099  007FE6  0012               	return	
 19100                           
 19101                           ;menu.c: 454: Function_A_3();
 19102  007FE8  EC71  F03D         	call	_Function_A_3	;wreg free
 19103  007FEC  0012               	return	
 19104  007FEE                     __end_of_Function_A:
 19105                           	opt stack 0
 19106                           tblptru	equ	0xFF8
 19107                           tblptrh	equ	0xFF7
 19108                           tblptrl	equ	0xFF6
 19109                           tablat	equ	0xFF5
 19110                           prodh	equ	0xFF4
 19111                           prodl	equ	0xFF3
 19112                           intcon	equ	0xFF2
 19113                           intcon2	equ	0xFF1
 19114                           postinc0	equ	0xFEE
 19115                           wreg	equ	0xFE8
 19116                           postdec1	equ	0xFE5
 19117                           fsr1l	equ	0xFE1
 19118                           indf2	equ	0xFDF
 19119                           postinc2	equ	0xFDE
 19120                           plusw2	equ	0xFDB
 19121                           fsr2h	equ	0xFDA
 19122                           fsr2l	equ	0xFD9
 19123                           status	equ	0xFD8
 19124                           
 19125 ;; *************** function _Function_A_3 *****************
 19126 ;; Defined at:
 19127 ;;		line 401 in file "menu.c"
 19128 ;; Parameters:    Size  Location     Type
 19129 ;;		None
 19130 ;; Auto vars:     Size  Location     Type
 19131 ;;		None
 19132 ;; Return value:  Size  Location     Type
 19133 ;;                  1    wreg      void 
 19134 ;; Registers used:
 19135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19136 ;; Tracked objects:
 19137 ;;		On entry : 0/0
 19138 ;;		On exit  : 0/0
 19139 ;;		Unchanged: 0/0
 19140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19145 ;;Total ram usage:        1 bytes
 19146 ;; Hardware stack levels used:    1
 19147 ;; Hardware stack levels required when called:    9
 19148 ;; This function calls:
 19149 ;;		_Lcd_Print_String
 19150 ;;		___lbmod
 19151 ;;		___wmul
 19152 ;;		_clear_row1
 19153 ;;		_clear_row2
 19154 ;;		_processEncoderBuxton
 19155 ;; This function is called by:
 19156 ;;		_Function_A
 19157 ;; This function uses a non-reentrant model
 19158 ;;
 19159                           
 19160                           	psect	text59
 19161  007AE2                     __ptext59:
 19162                           	opt stack 0
 19163  007AE2                     _Function_A_3:
 19164                           	opt stack 19
 19165                           
 19166                           ;menu.c: 402: KEYBOARD_MODE = SEVENTH;
 19167                           
 19168                           ;incstack = 0
 19169  007AE2  0E09               	movlw	9
 19170  007AE4  0100               	movlb	0	; () banked
 19171  007AE6  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19172                           
 19173                           ;menu.c: 403: which_screen = SEVENTHS_MENU;
 19174  007AE8  0E0B               	movlw	11
 19175  007AEA  6FF9               	movwf	_which_screen& (0+255),b
 19176                           
 19177                           ; BSR set to: 0
 19178                           ;menu.c: 404: encoder_click = 0;
 19179  007AEC  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19180                           
 19181                           ; BSR set to: 0
 19182                           ;menu.c: 406: seventhMenu.selector = which_seventh;
 19183  007AEE  C0EF  F167         	movff	_which_seventh,_seventhMenu+2
 19184                           
 19185                           ;menu.c: 408: while(encoder_click == 0) {
 19186  007AF2  D036               	goto	l3441
 19187  007AF4                     
 19188                           ; BSR set to: 0
 19189                           ;menu.c: 409: processEncoderBuxton();
 19190                           
 19191                           ; BSR set to: 0
 19192  007AF4  EC09  F000         	call	_processEncoderBuxton	;wreg free
 19193                           
 19194                           ;menu.c: 410: if (lcd_print_once == 0) {
 19195  007AF8  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19196  007AFA  D029               	goto	l3443
 19197                           
 19198                           ;menu.c: 411: clear_row1();
 19199  007AFC  EC52  F04A         	call	_clear_row1	;wreg free
 19200                           
 19201                           ;menu.c: 412: Lcd_Print_String("Select Seventh:");
 19202  007B00  0E2D               	movlw	low STR_26
 19203  007B02  0100               	movlb	0	; () banked
 19204  007B04  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19205  007B06  0EFE               	movlw	high STR_26
 19206  007B08  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19207  007B0A  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 19208                           
 19209                           ;menu.c: 413: clear_row2();
 19210  007B0E  EC3E  F04A         	call	_clear_row2	;wreg free
 19211                           
 19212                           ;menu.c: 414: Lcd_Print_String(LCD_STRINGS[(seventhMenu.selector % seventhMenu.number) +
      +                           seventhMenu.address]);
 19213  007B12  C165  F060         	movff	_seventhMenu,___lbmod@divisor
 19214  007B16  0101               	movlb	1	; () banked
 19215  007B18  5167               	movf	(_seventhMenu+2)& (0+255),w,b
 19216  007B1A  ECBD  F049         	call	___lbmod
 19217  007B1E  0100               	movlb	0	; () banked
 19218  007B20  6F70               	movwf	??_Function_A_3& (0+255),b
 19219  007B22  5170               	movf	??_Function_A_3& (0+255),w,b
 19220  007B24  0101               	movlb	1	; () banked
 19221  007B26  2566               	addwf	(_seventhMenu+1)& (0+255),w,b
 19222  007B28  0100               	movlb	0	; () banked
 19223  007B2A  6F64               	movwf	___wmul@multiplier& (0+255),b
 19224  007B2C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 19225  007B2E  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19226  007B30  0E00               	movlw	0
 19227  007B32  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19228  007B34  0E11               	movlw	17
 19229  007B36  6F66               	movwf	___wmul@multiplicand& (0+255),b
 19230  007B38  EC66  F04A         	call	___wmul	;wreg free
 19231  007B3C  0E9E               	movlw	low _LCD_STRINGS
 19232  007B3E  0100               	movlb	0	; () banked
 19233  007B40  2564               	addwf	?___wmul& (0+255),w,b
 19234  007B42  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19235  007B44  0EF3               	movlw	high _LCD_STRINGS
 19236  007B46  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 19237  007B48  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19238  007B4A  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 19239  007B4E                     l3443:
 19240                           
 19241                           ;menu.c: 415: }
 19242                           ;menu.c: 416: which_seventh = seventhMenu.selector % seventhMenu.number;
 19243  007B4E  C165  F060         	movff	_seventhMenu,___lbmod@divisor
 19244  007B52  0101               	movlb	1	; () banked
 19245  007B54  5167               	movf	(_seventhMenu+2)& (0+255),w,b
 19246  007B56  ECBD  F049         	call	___lbmod
 19247  007B5A  0100               	movlb	0	; () banked
 19248  007B5C  6FEF               	movwf	_which_seventh& (0+255),b
 19249                           
 19250                           ; BSR set to: 0
 19251                           ;menu.c: 417: lcd_print_once = 1;
 19252  007B5E  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19253  007B60                     l3441:
 19254                           
 19255                           ; BSR set to: 0
 19256                           
 19257                           ; BSR set to: 0
 19258  007B60  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19259  007B62  0012               	return	
 19260  007B64  D7C7               	goto	l3442
 19261  007B66                     __end_of_Function_A_3:
 19262                           	opt stack 0
 19263                           tblptru	equ	0xFF8
 19264                           tblptrh	equ	0xFF7
 19265                           tblptrl	equ	0xFF6
 19266                           tablat	equ	0xFF5
 19267                           prodh	equ	0xFF4
 19268                           prodl	equ	0xFF3
 19269                           intcon	equ	0xFF2
 19270                           intcon2	equ	0xFF1
 19271                           postinc0	equ	0xFEE
 19272                           wreg	equ	0xFE8
 19273                           postdec1	equ	0xFE5
 19274                           fsr1l	equ	0xFE1
 19275                           indf2	equ	0xFDF
 19276                           postinc2	equ	0xFDE
 19277                           plusw2	equ	0xFDB
 19278                           fsr2h	equ	0xFDA
 19279                           fsr2l	equ	0xFD9
 19280                           status	equ	0xFD8
 19281                           
 19282 ;; *************** function _Function_A_2 *****************
 19283 ;; Defined at:
 19284 ;;		line 380 in file "menu.c"
 19285 ;; Parameters:    Size  Location     Type
 19286 ;;		None
 19287 ;; Auto vars:     Size  Location     Type
 19288 ;;		None
 19289 ;; Return value:  Size  Location     Type
 19290 ;;                  1    wreg      void 
 19291 ;; Registers used:
 19292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19293 ;; Tracked objects:
 19294 ;;		On entry : 0/0
 19295 ;;		On exit  : 0/0
 19296 ;;		Unchanged: 0/0
 19297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19300 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19301 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19302 ;;Total ram usage:        1 bytes
 19303 ;; Hardware stack levels used:    1
 19304 ;; Hardware stack levels required when called:    9
 19305 ;; This function calls:
 19306 ;;		_Lcd_Print_String
 19307 ;;		___lbmod
 19308 ;;		___wmul
 19309 ;;		_clear_row1
 19310 ;;		_clear_row2
 19311 ;;		_processEncoderBuxton
 19312 ;; This function is called by:
 19313 ;;		_Function_A
 19314 ;; This function uses a non-reentrant model
 19315 ;;
 19316                           
 19317                           	psect	text60
 19318  00806C                     __ptext60:
 19319                           	opt stack 0
 19320  00806C                     _Function_A_2:
 19321                           	opt stack 19
 19322                           
 19323                           ;menu.c: 381: KEYBOARD_MODE = TRIAD;
 19324                           
 19325                           ; BSR set to: 0
 19326                           ;incstack = 0
 19327  00806C  0E06               	movlw	6
 19328  00806E  0100               	movlb	0	; () banked
 19329  008070  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19330                           
 19331                           ;menu.c: 382: which_screen = TRIADS_MENU;
 19332  008072  0E0A               	movlw	10
 19333  008074  6FF9               	movwf	_which_screen& (0+255),b
 19334                           
 19335                           ; BSR set to: 0
 19336                           ;menu.c: 383: encoder_click = 0;
 19337  008076  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19338                           
 19339                           ; BSR set to: 0
 19340                           ;menu.c: 385: triadMenu.selector = which_triad;
 19341  008078  C0F0  F046         	movff	_which_triad,_triadMenu+2
 19342                           
 19343                           ;menu.c: 387: while(encoder_click == 0) {
 19344  00807C  D032               	goto	l3434
 19345  00807E                     
 19346                           ; BSR set to: 0
 19347                           ;menu.c: 388: processEncoderBuxton();
 19348                           
 19349                           ; BSR set to: 0
 19350  00807E  EC09  F000         	call	_processEncoderBuxton	;wreg free
 19351                           
 19352                           ;menu.c: 389: if (lcd_print_once == 0) {
 19353  008082  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19354  008084  D026               	goto	l3436
 19355                           
 19356                           ;menu.c: 390: clear_row1();
 19357  008086  EC52  F04A         	call	_clear_row1	;wreg free
 19358                           
 19359                           ;menu.c: 391: Lcd_Print_String("Select Triad:");
 19360  00808A  0ED2               	movlw	low STR_25
 19361  00808C  0100               	movlb	0	; () banked
 19362  00808E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19363  008090  0EFE               	movlw	high STR_25
 19364  008092  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19365  008094  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 19366                           
 19367                           ;menu.c: 392: clear_row2();
 19368  008098  EC3E  F04A         	call	_clear_row2	;wreg free
 19369                           
 19370                           ;menu.c: 393: Lcd_Print_String(LCD_STRINGS[(triadMenu.selector % triadMenu.number) + tri
      +                          adMenu.address]);
 19371  00809C  C044  F060         	movff	_triadMenu,___lbmod@divisor
 19372  0080A0  5046               	movf	_triadMenu+2,w,c
 19373  0080A2  ECBD  F049         	call	___lbmod
 19374  0080A6  0100               	movlb	0	; () banked
 19375  0080A8  6F70               	movwf	??_Function_A_2& (0+255),b
 19376  0080AA  5170               	movf	??_Function_A_2& (0+255),w,b
 19377  0080AC  2445               	addwf	_triadMenu+1,w,c
 19378  0080AE  6F64               	movwf	___wmul@multiplier& (0+255),b
 19379  0080B0  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 19380  0080B2  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19381  0080B4  0E00               	movlw	0
 19382  0080B6  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19383  0080B8  0E11               	movlw	17
 19384  0080BA  6F66               	movwf	___wmul@multiplicand& (0+255),b
 19385  0080BC  EC66  F04A         	call	___wmul	;wreg free
 19386  0080C0  0E9E               	movlw	low _LCD_STRINGS
 19387  0080C2  0100               	movlb	0	; () banked
 19388  0080C4  2564               	addwf	?___wmul& (0+255),w,b
 19389  0080C6  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19390  0080C8  0EF3               	movlw	high _LCD_STRINGS
 19391  0080CA  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 19392  0080CC  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19393  0080CE  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 19394  0080D2                     l3436:
 19395                           
 19396                           ;menu.c: 394: }
 19397                           ;menu.c: 395: which_triad = triadMenu.selector % triadMenu.number;
 19398  0080D2  C044  F060         	movff	_triadMenu,___lbmod@divisor
 19399  0080D6  5046               	movf	_triadMenu+2,w,c
 19400  0080D8  ECBD  F049         	call	___lbmod
 19401  0080DC  0100               	movlb	0	; () banked
 19402  0080DE  6FF0               	movwf	_which_triad& (0+255),b
 19403                           
 19404                           ; BSR set to: 0
 19405                           ;menu.c: 396: lcd_print_once = 1;
 19406  0080E0  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19407  0080E2                     l3434:
 19408                           
 19409                           ; BSR set to: 0
 19410                           
 19411                           ; BSR set to: 0
 19412  0080E2  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19413  0080E4  0012               	return	
 19414  0080E6  D7CB               	goto	l3435
 19415  0080E8                     __end_of_Function_A_2:
 19416                           	opt stack 0
 19417                           tblptru	equ	0xFF8
 19418                           tblptrh	equ	0xFF7
 19419                           tblptrl	equ	0xFF6
 19420                           tablat	equ	0xFF5
 19421                           prodh	equ	0xFF4
 19422                           prodl	equ	0xFF3
 19423                           intcon	equ	0xFF2
 19424                           intcon2	equ	0xFF1
 19425                           postinc0	equ	0xFEE
 19426                           wreg	equ	0xFE8
 19427                           postdec1	equ	0xFE5
 19428                           fsr1l	equ	0xFE1
 19429                           indf2	equ	0xFDF
 19430                           postinc2	equ	0xFDE
 19431                           plusw2	equ	0xFDB
 19432                           fsr2h	equ	0xFDA
 19433                           fsr2l	equ	0xFD9
 19434                           status	equ	0xFD8
 19435                           
 19436 ;; *************** function _Function_A_1 *****************
 19437 ;; Defined at:
 19438 ;;		line 358 in file "menu.c"
 19439 ;; Parameters:    Size  Location     Type
 19440 ;;		None
 19441 ;; Auto vars:     Size  Location     Type
 19442 ;;		None
 19443 ;; Return value:  Size  Location     Type
 19444 ;;                  1    wreg      void 
 19445 ;; Registers used:
 19446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19447 ;; Tracked objects:
 19448 ;;		On entry : 0/0
 19449 ;;		On exit  : 0/0
 19450 ;;		Unchanged: 0/0
 19451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19454 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19455 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19456 ;;Total ram usage:        1 bytes
 19457 ;; Hardware stack levels used:    1
 19458 ;; Hardware stack levels required when called:    9
 19459 ;; This function calls:
 19460 ;;		_Lcd_Print_String
 19461 ;;		___lbmod
 19462 ;;		___wmul
 19463 ;;		_clear_row1
 19464 ;;		_clear_row2
 19465 ;;		_processEncoderBuxton
 19466 ;; This function is called by:
 19467 ;;		_Function_A
 19468 ;; This function uses a non-reentrant model
 19469 ;;
 19470                           
 19471                           	psect	text61
 19472  0080E8                     __ptext61:
 19473                           	opt stack 0
 19474  0080E8                     _Function_A_1:
 19475                           	opt stack 19
 19476                           
 19477                           ;menu.c: 360: KEYBOARD_MODE = MODES;
 19478                           
 19479                           ; BSR set to: 0
 19480                           ;incstack = 0
 19481  0080E8  0E03               	movlw	3
 19482  0080EA  0100               	movlb	0	; () banked
 19483  0080EC  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19484                           
 19485                           ;menu.c: 361: which_screen = MODES_MENU;
 19486  0080EE  0E09               	movlw	9
 19487  0080F0  6FF9               	movwf	_which_screen& (0+255),b
 19488                           
 19489                           ; BSR set to: 0
 19490                           ;menu.c: 362: encoder_click = 0;
 19491  0080F2  9036               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19492                           
 19493                           ; BSR set to: 0
 19494                           ;menu.c: 364: modeMenu.selector = which_mode;
 19495  0080F4  C0F1  F049         	movff	_which_mode,_modeMenu+2
 19496                           
 19497                           ;menu.c: 366: while(encoder_click == 0) {
 19498  0080F8  D032               	goto	l3427
 19499  0080FA                     
 19500                           ; BSR set to: 0
 19501                           ;menu.c: 367: processEncoderBuxton();
 19502                           
 19503                           ; BSR set to: 0
 19504  0080FA  EC09  F000         	call	_processEncoderBuxton	;wreg free
 19505                           
 19506                           ;menu.c: 368: if (lcd_print_once == 0) {
 19507  0080FE  BE35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19508  008100  D026               	goto	l3429
 19509                           
 19510                           ;menu.c: 369: clear_row1();
 19511  008102  EC52  F04A         	call	_clear_row1	;wreg free
 19512                           
 19513                           ;menu.c: 370: Lcd_Print_String("Enter Mode:");
 19514  008106  0E58               	movlw	low STR_24
 19515  008108  0100               	movlb	0	; () banked
 19516  00810A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19517  00810C  0EFF               	movlw	high STR_24
 19518  00810E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19519  008110  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 19520                           
 19521                           ;menu.c: 371: clear_row2();
 19522  008114  EC3E  F04A         	call	_clear_row2	;wreg free
 19523                           
 19524                           ;menu.c: 372: Lcd_Print_String(LCD_STRINGS[(modeMenu.selector % modeMenu.number) + modeM
      +                          enu.address]);
 19525  008118  C047  F060         	movff	_modeMenu,___lbmod@divisor
 19526  00811C  5049               	movf	_modeMenu+2,w,c
 19527  00811E  ECBD  F049         	call	___lbmod
 19528  008122  0100               	movlb	0	; () banked
 19529  008124  6F70               	movwf	??_Function_A_1& (0+255),b
 19530  008126  5170               	movf	??_Function_A_1& (0+255),w,b
 19531  008128  2448               	addwf	_modeMenu+1,w,c
 19532  00812A  6F64               	movwf	___wmul@multiplier& (0+255),b
 19533  00812C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 19534  00812E  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19535  008130  0E00               	movlw	0
 19536  008132  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19537  008134  0E11               	movlw	17
 19538  008136  6F66               	movwf	___wmul@multiplicand& (0+255),b
 19539  008138  EC66  F04A         	call	___wmul	;wreg free
 19540  00813C  0E9E               	movlw	low _LCD_STRINGS
 19541  00813E  0100               	movlb	0	; () banked
 19542  008140  2564               	addwf	?___wmul& (0+255),w,b
 19543  008142  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19544  008144  0EF3               	movlw	high _LCD_STRINGS
 19545  008146  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 19546  008148  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19547  00814A  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 19548  00814E                     l3429:
 19549                           
 19550                           ;menu.c: 373: }
 19551                           ;menu.c: 374: which_mode = modeMenu.selector % modeMenu.number;
 19552  00814E  C047  F060         	movff	_modeMenu,___lbmod@divisor
 19553  008152  5049               	movf	_modeMenu+2,w,c
 19554  008154  ECBD  F049         	call	___lbmod
 19555  008158  0100               	movlb	0	; () banked
 19556  00815A  6FF1               	movwf	_which_mode& (0+255),b
 19557                           
 19558                           ; BSR set to: 0
 19559                           ;menu.c: 375: lcd_print_once = 1;
 19560  00815C  8E35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19561  00815E                     l3427:
 19562                           
 19563                           ; BSR set to: 0
 19564                           
 19565                           ; BSR set to: 0
 19566  00815E  B036               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19567  008160  0012               	return	
 19568  008162  D7CB               	goto	l3428
 19569  008164                     __end_of_Function_A_1:
 19570                           	opt stack 0
 19571                           tblptru	equ	0xFF8
 19572                           tblptrh	equ	0xFF7
 19573                           tblptrl	equ	0xFF6
 19574                           tablat	equ	0xFF5
 19575                           prodh	equ	0xFF4
 19576                           prodl	equ	0xFF3
 19577                           intcon	equ	0xFF2
 19578                           intcon2	equ	0xFF1
 19579                           postinc0	equ	0xFEE
 19580                           wreg	equ	0xFE8
 19581                           postdec1	equ	0xFE5
 19582                           fsr1l	equ	0xFE1
 19583                           indf2	equ	0xFDF
 19584                           postinc2	equ	0xFDE
 19585                           plusw2	equ	0xFDB
 19586                           fsr2h	equ	0xFDA
 19587                           fsr2l	equ	0xFD9
 19588                           status	equ	0xFD8
 19589                           
 19590 ;; *************** function _processEncoderBuxton *****************
 19591 ;; Defined at:
 19592 ;;		line 51 in file "encoder.c"
 19593 ;; Parameters:    Size  Location     Type
 19594 ;;		None
 19595 ;; Auto vars:     Size  Location     Type
 19596 ;;		None
 19597 ;; Return value:  Size  Location     Type
 19598 ;;                  1    wreg      void 
 19599 ;; Registers used:
 19600 ;;		wreg, status,2, status,0
 19601 ;; Tracked objects:
 19602 ;;		On entry : 0/0
 19603 ;;		On exit  : 0/0
 19604 ;;		Unchanged: 0/0
 19605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19608 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19609 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19610 ;;Total ram usage:        7 bytes
 19611 ;; Hardware stack levels used:    1
 19612 ;; Hardware stack levels required when called:    5
 19613 ;; This function calls:
 19614 ;;		Nothing
 19615 ;; This function is called by:
 19616 ;;		_Function_A_1
 19617 ;;		_Function_A_2
 19618 ;;		_Function_A_3
 19619 ;;		_Function_A
 19620 ;;		_Function_B
 19621 ;;		_Function_C_1
 19622 ;;		_Function_C_2
 19623 ;;		_Function_C_3
 19624 ;;		_Function_C
 19625 ;;		_Function_D_1
 19626 ;;		_Function_D_2
 19627 ;;		_Function_D_3
 19628 ;;		_Function_D_4
 19629 ;;		_Function_D_5
 19630 ;;		_Function_D
 19631 ;;		_Function_E_1
 19632 ;;		_Function_E_2
 19633 ;;		_Function_E
 19634 ;;		_Function_F
 19635 ;;		_Function_G_1
 19636 ;;		_Function_G_2
 19637 ;;		_Function_G_4
 19638 ;;		_Function_G
 19639 ;;		_Function_H
 19640 ;;		_Function_H_1
 19641 ;;		_Function_H_2
 19642 ;;		_Function_H_3
 19643 ;;		_Function_H_4
 19644 ;;		_Function_H_5
 19645 ;;		_Function_H_6_1
 19646 ;;		_Function_H_6_2
 19647 ;;		_Function_H_6
 19648 ;;		_Function_H_7
 19649 ;;		_Function_H_8_1
 19650 ;;		_Function_H_8_2
 19651 ;;		_Function_H_8
 19652 ;;		_Function_H_9_1
 19653 ;;		_Function_H_9_2
 19654 ;;		_Function_H_9_3
 19655 ;;		_Function_H_9_4
 19656 ;;		_Function_H_9
 19657 ;;		_main
 19658 ;; This function uses a non-reentrant model
 19659 ;;
 19660                           
 19661                           	psect	text62
 19662  000012                     __ptext62:
 19663                           	opt stack 0
 19664  000012                     _processEncoderBuxton:
 19665                           	opt stack 25
 19666                           
 19667                           ;encoder.c: 53: if (encoder_direction == 0x00) {return;}
 19668                           
 19669                           ; BSR set to: 0
 19670                           ;incstack = 0
 19671  000012  0100               	movlb	0	; () banked
 19672  000014  51EB               	movf	_encoder_direction& (0+255),w,b
 19673  000016  B4D8               	btfsc	status,2,c
 19674  000018  0012               	return	
 19675                           
 19676                           ; BSR set to: 0
 19677                           ;encoder.c: 56: if (encoder_direction == 0x10) {
 19678                           
 19679                           ; BSR set to: 0
 19680                           
 19681                           ; BSR set to: 0
 19682  00001A  0E10               	movlw	16
 19683  00001C  19EB               	xorwf	_encoder_direction& (0+255),w,b
 19684  00001E  A4D8               	btfss	status,2,c
 19685  000020  D3A8               	goto	l886
 19686                           
 19687                           ; BSR set to: 0
 19688                           ;encoder.c: 58: lcd_print_once = 0;
 19689  000022  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19690                           
 19691                           ; BSR set to: 0
 19692                           ;encoder.c: 61: if (which_screen == MAIN_MENU) {
 19693  000024  0E02               	movlw	2
 19694  000026  19F9               	xorwf	_which_screen& (0+255),w,b
 19695  000028  A4D8               	btfss	status,2,c
 19696  00002A  D01E               	goto	l816
 19697                           
 19698                           ; BSR set to: 0
 19699                           ;encoder.c: 62: if(mainMenu.selector < mainMenu.number - 1){
 19700  00002C  0EFF               	movlw	255
 19701  00002E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19702  000030  0EFF               	movlw	255
 19703  000032  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19704  000034  0101               	movlb	1	; () banked
 19705  000036  5168               	movf	_mainMenu& (0+255),w,b
 19706  000038  0100               	movlb	0	; () banked
 19707  00003A  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19708  00003C  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19709  00003E  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19710  000040  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19711  000042  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19712  000044  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19713  000046  0101               	movlb	1	; () banked
 19714  000048  516A               	movf	(_mainMenu+2)& (0+255),w,b
 19715  00004A  0100               	movlb	0	; () banked
 19716  00004C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19717  00004E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19718  000050  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19719  000052  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19720  000054  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19721  000056  0A80               	xorlw	128
 19722  000058  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19723  00005A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19724  00005C  0A80               	xorlw	128
 19725  00005E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19726  000060  B0D8               	btfsc	status,0,c
 19727  000062  D002               	goto	l816
 19728                           
 19729                           ; BSR set to: 0
 19730                           ;encoder.c: 63: mainMenu.selector++;
 19731  000064  0101               	movlb	1	; () banked
 19732  000066  2B6A               	incf	(_mainMenu+2)& (0+255),f,b
 19733  000068                     l816:
 19734                           
 19735                           ;encoder.c: 64: }
 19736                           ;encoder.c: 65: }
 19737                           ;encoder.c: 66: if (which_screen == KEYBOARD_MENU) {
 19738                           
 19739                           ; BSR set to: 1
 19740                           
 19741                           ; BSR set to: 1
 19742  000068  0E03               	movlw	3
 19743  00006A  0100               	movlb	0	; () banked
 19744  00006C  19F9               	xorwf	_which_screen& (0+255),w,b
 19745  00006E  A4D8               	btfss	status,2,c
 19746  000070  D018               	goto	l818
 19747                           
 19748                           ; BSR set to: 0
 19749                           ;encoder.c: 67: if(keyboardMenu.selector < (keyboardMenu.number - 1)){
 19750  000072  0EFF               	movlw	255
 19751  000074  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19752  000076  0EFF               	movlw	255
 19753  000078  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19754  00007A  504A               	movf	_keyboardMenu,w,c
 19755  00007C  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19756  00007E  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19757  000080  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19758  000082  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19759  000084  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19760  000086  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19761  000088  504C               	movf	_keyboardMenu+2,w,c
 19762  00008A  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19763  00008C  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19764  00008E  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19765  000090  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19766  000092  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19767  000094  0A80               	xorlw	128
 19768  000096  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19769  000098  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19770  00009A  0A80               	xorlw	128
 19771  00009C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19772  00009E  A0D8               	btfss	status,0,c
 19773                           
 19774                           ; BSR set to: 0
 19775                           ;encoder.c: 68: keyboardMenu.selector++;
 19776  0000A0  2A4C               	incf	_keyboardMenu+2,f,c
 19777  0000A2                     l818:
 19778                           
 19779                           ; BSR set to: 0
 19780                           ;encoder.c: 69: }
 19781                           ;encoder.c: 70: }
 19782                           ;encoder.c: 71: if (which_screen == TRANSPOSE_MENU) {
 19783                           
 19784                           ; BSR set to: 0
 19785                           
 19786                           ; BSR set to: 0
 19787  0000A2  0E04               	movlw	4
 19788  0000A4  19F9               	xorwf	_which_screen& (0+255),w,b
 19789  0000A6  A4D8               	btfss	status,2,c
 19790  0000A8  D01E               	goto	l820
 19791                           
 19792                           ; BSR set to: 0
 19793                           ;encoder.c: 72: if(transposeMenu.selector < (transposeMenu.number - 1)){
 19794  0000AA  0EFF               	movlw	255
 19795  0000AC  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19796  0000AE  0EFF               	movlw	255
 19797  0000B0  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19798  0000B2  0101               	movlb	1	; () banked
 19799  0000B4  5162               	movf	_transposeMenu& (0+255),w,b
 19800  0000B6  0100               	movlb	0	; () banked
 19801  0000B8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19802  0000BA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19803  0000BC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19804  0000BE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19805  0000C0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19806  0000C2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19807  0000C4  0101               	movlb	1	; () banked
 19808  0000C6  5164               	movf	(_transposeMenu+2)& (0+255),w,b
 19809  0000C8  0100               	movlb	0	; () banked
 19810  0000CA  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19811  0000CC  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19812  0000CE  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19813  0000D0  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19814  0000D2  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19815  0000D4  0A80               	xorlw	128
 19816  0000D6  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19817  0000D8  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19818  0000DA  0A80               	xorlw	128
 19819  0000DC  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19820  0000DE  B0D8               	btfsc	status,0,c
 19821  0000E0  D002               	goto	l820
 19822                           
 19823                           ; BSR set to: 0
 19824                           ;encoder.c: 73: transposeMenu.selector++;
 19825  0000E2  0101               	movlb	1	; () banked
 19826  0000E4  2B64               	incf	(_transposeMenu+2)& (0+255),f,b
 19827  0000E6                     l820:
 19828                           
 19829                           ;encoder.c: 74: }
 19830                           ;encoder.c: 75: }
 19831                           ;encoder.c: 76: if (which_screen == DRUM_MENU) {
 19832                           
 19833                           ; BSR set to: 1
 19834                           
 19835                           ; BSR set to: 1
 19836  0000E6  0E05               	movlw	5
 19837  0000E8  0100               	movlb	0	; () banked
 19838  0000EA  19F9               	xorwf	_which_screen& (0+255),w,b
 19839  0000EC  A4D8               	btfss	status,2,c
 19840  0000EE  D018               	goto	l822
 19841                           
 19842                           ; BSR set to: 0
 19843                           ;encoder.c: 77: if(drumMenu.selector < (drumMenu.number - 1)){
 19844  0000F0  0EFF               	movlw	255
 19845  0000F2  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19846  0000F4  0EFF               	movlw	255
 19847  0000F6  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19848  0000F8  5041               	movf	_drumMenu,w,c
 19849  0000FA  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19850  0000FC  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19851  0000FE  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19852  000100  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19853  000102  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19854  000104  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19855  000106  5043               	movf	_drumMenu+2,w,c
 19856  000108  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19857  00010A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19858  00010C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19859  00010E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19860  000110  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19861  000112  0A80               	xorlw	128
 19862  000114  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19863  000116  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19864  000118  0A80               	xorlw	128
 19865  00011A  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19866  00011C  A0D8               	btfss	status,0,c
 19867                           
 19868                           ; BSR set to: 0
 19869                           ;encoder.c: 78: drumMenu.selector++;
 19870  00011E  2A43               	incf	_drumMenu+2,f,c
 19871  000120                     l822:
 19872                           
 19873                           ; BSR set to: 0
 19874                           ;encoder.c: 79: }
 19875                           ;encoder.c: 80: }
 19876                           ;encoder.c: 81: if (which_screen == POTENTIOMETER_MENU) {
 19877                           
 19878                           ; BSR set to: 0
 19879                           
 19880                           ; BSR set to: 0
 19881  000120  0E06               	movlw	6
 19882  000122  19F9               	xorwf	_which_screen& (0+255),w,b
 19883  000124  A4D8               	btfss	status,2,c
 19884  000126  D018               	goto	l824
 19885                           
 19886                           ; BSR set to: 0
 19887                           ;encoder.c: 82: if(potsMenu.selector < (potsMenu.number - 1)){
 19888  000128  0EFF               	movlw	255
 19889  00012A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19890  00012C  0EFF               	movlw	255
 19891  00012E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19892  000130  503E               	movf	_potsMenu,w,c
 19893  000132  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19894  000134  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19895  000136  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19896  000138  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19897  00013A  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19898  00013C  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19899  00013E  5040               	movf	_potsMenu+2,w,c
 19900  000140  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19901  000142  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19902  000144  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19903  000146  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19904  000148  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19905  00014A  0A80               	xorlw	128
 19906  00014C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19907  00014E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19908  000150  0A80               	xorlw	128
 19909  000152  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19910  000154  A0D8               	btfss	status,0,c
 19911                           
 19912                           ; BSR set to: 0
 19913                           ;encoder.c: 83: potsMenu.selector++;
 19914  000156  2A40               	incf	_potsMenu+2,f,c
 19915  000158                     l824:
 19916                           
 19917                           ; BSR set to: 0
 19918                           ;encoder.c: 84: }
 19919                           ;encoder.c: 85: }
 19920                           ;encoder.c: 86: if (which_screen == MIDI_CHANNEL_MENU) {
 19921                           
 19922                           ; BSR set to: 0
 19923                           
 19924                           ; BSR set to: 0
 19925  000158  0E07               	movlw	7
 19926  00015A  19F9               	xorwf	_which_screen& (0+255),w,b
 19927  00015C  A4D8               	btfss	status,2,c
 19928  00015E  D01E               	goto	l826
 19929                           
 19930                           ; BSR set to: 0
 19931                           ;encoder.c: 87: if(midiChannelMenu.selector < (midiChannelMenu.number - 1)){
 19932  000160  0EFF               	movlw	255
 19933  000162  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19934  000164  0EFF               	movlw	255
 19935  000166  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19936  000168  0101               	movlb	1	; () banked
 19937  00016A  5147               	movf	_midiChannelMenu& (0+255),w,b
 19938  00016C  0100               	movlb	0	; () banked
 19939  00016E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19940  000170  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19941  000172  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19942  000174  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19943  000176  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19944  000178  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19945  00017A  0101               	movlb	1	; () banked
 19946  00017C  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 19947  00017E  0100               	movlb	0	; () banked
 19948  000180  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19949  000182  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19950  000184  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19951  000186  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19952  000188  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19953  00018A  0A80               	xorlw	128
 19954  00018C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19955  00018E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19956  000190  0A80               	xorlw	128
 19957  000192  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19958  000194  B0D8               	btfsc	status,0,c
 19959  000196  D002               	goto	l826
 19960                           
 19961                           ; BSR set to: 0
 19962                           ;encoder.c: 88: midiChannelMenu.selector++;
 19963  000198  0101               	movlb	1	; () banked
 19964  00019A  2B49               	incf	(_midiChannelMenu+2)& (0+255),f,b
 19965  00019C                     l826:
 19966                           
 19967                           ;encoder.c: 89: }
 19968                           ;encoder.c: 90: }
 19969                           ;encoder.c: 92: if (which_screen == MODES_MENU) {
 19970                           
 19971                           ; BSR set to: 1
 19972                           
 19973                           ; BSR set to: 1
 19974  00019C  0E09               	movlw	9
 19975  00019E  0100               	movlb	0	; () banked
 19976  0001A0  19F9               	xorwf	_which_screen& (0+255),w,b
 19977  0001A2  A4D8               	btfss	status,2,c
 19978  0001A4  D018               	goto	l828
 19979                           
 19980                           ; BSR set to: 0
 19981                           ;encoder.c: 93: if(modeMenu.selector < (modeMenu.number - 1)){
 19982  0001A6  0EFF               	movlw	255
 19983  0001A8  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19984  0001AA  0EFF               	movlw	255
 19985  0001AC  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19986  0001AE  5047               	movf	_modeMenu,w,c
 19987  0001B0  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19988  0001B2  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19989  0001B4  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19990  0001B6  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19991  0001B8  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19992  0001BA  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19993  0001BC  5049               	movf	_modeMenu+2,w,c
 19994  0001BE  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19995  0001C0  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19996  0001C2  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19997  0001C4  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19998  0001C6  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19999  0001C8  0A80               	xorlw	128
 20000  0001CA  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20001  0001CC  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20002  0001CE  0A80               	xorlw	128
 20003  0001D0  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20004  0001D2  A0D8               	btfss	status,0,c
 20005                           
 20006                           ; BSR set to: 0
 20007                           ;encoder.c: 94: modeMenu.selector++;
 20008  0001D4  2A49               	incf	_modeMenu+2,f,c
 20009  0001D6                     l828:
 20010                           
 20011                           ; BSR set to: 0
 20012                           ;encoder.c: 95: }
 20013                           ;encoder.c: 96: }
 20014                           ;encoder.c: 97: if (which_screen == TRIADS_MENU) {
 20015                           
 20016                           ; BSR set to: 0
 20017                           
 20018                           ; BSR set to: 0
 20019  0001D6  0E0A               	movlw	10
 20020  0001D8  19F9               	xorwf	_which_screen& (0+255),w,b
 20021  0001DA  A4D8               	btfss	status,2,c
 20022  0001DC  D018               	goto	l830
 20023                           
 20024                           ; BSR set to: 0
 20025                           ;encoder.c: 98: if(triadMenu.selector < (triadMenu.number - 1)){
 20026  0001DE  0EFF               	movlw	255
 20027  0001E0  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20028  0001E2  0EFF               	movlw	255
 20029  0001E4  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20030  0001E6  5044               	movf	_triadMenu,w,c
 20031  0001E8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20032  0001EA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20033  0001EC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20034  0001EE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20035  0001F0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20036  0001F2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20037  0001F4  5046               	movf	_triadMenu+2,w,c
 20038  0001F6  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20039  0001F8  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20040  0001FA  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20041  0001FC  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20042  0001FE  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20043  000200  0A80               	xorlw	128
 20044  000202  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20045  000204  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20046  000206  0A80               	xorlw	128
 20047  000208  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20048  00020A  A0D8               	btfss	status,0,c
 20049                           
 20050                           ; BSR set to: 0
 20051                           ;encoder.c: 99: triadMenu.selector++;
 20052  00020C  2A46               	incf	_triadMenu+2,f,c
 20053  00020E                     l830:
 20054                           
 20055                           ; BSR set to: 0
 20056                           ;encoder.c: 100: }
 20057                           ;encoder.c: 101: }
 20058                           ;encoder.c: 102: if (which_screen == SEVENTHS_MENU) {
 20059                           
 20060                           ; BSR set to: 0
 20061                           
 20062                           ; BSR set to: 0
 20063  00020E  0E0B               	movlw	11
 20064  000210  19F9               	xorwf	_which_screen& (0+255),w,b
 20065  000212  A4D8               	btfss	status,2,c
 20066  000214  D01E               	goto	l832
 20067                           
 20068                           ; BSR set to: 0
 20069                           ;encoder.c: 103: if(seventhMenu.selector < (seventhMenu.number - 1)){
 20070  000216  0EFF               	movlw	255
 20071  000218  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20072  00021A  0EFF               	movlw	255
 20073  00021C  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20074  00021E  0101               	movlb	1	; () banked
 20075  000220  5165               	movf	_seventhMenu& (0+255),w,b
 20076  000222  0100               	movlb	0	; () banked
 20077  000224  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20078  000226  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20079  000228  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20080  00022A  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20081  00022C  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20082  00022E  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20083  000230  0101               	movlb	1	; () banked
 20084  000232  5167               	movf	(_seventhMenu+2)& (0+255),w,b
 20085  000234  0100               	movlb	0	; () banked
 20086  000236  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20087  000238  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20088  00023A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20089  00023C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20090  00023E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20091  000240  0A80               	xorlw	128
 20092  000242  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20093  000244  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20094  000246  0A80               	xorlw	128
 20095  000248  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20096  00024A  B0D8               	btfsc	status,0,c
 20097  00024C  D002               	goto	l832
 20098                           
 20099                           ; BSR set to: 0
 20100                           ;encoder.c: 104: seventhMenu.selector++;
 20101  00024E  0101               	movlb	1	; () banked
 20102  000250  2B67               	incf	(_seventhMenu+2)& (0+255),f,b
 20103  000252                     l832:
 20104                           
 20105                           ;encoder.c: 105: }
 20106                           ;encoder.c: 106: }
 20107                           ;encoder.c: 107: if (which_screen == DRUMS_CC_TYPE_MENU) {
 20108                           
 20109                           ; BSR set to: 1
 20110                           
 20111                           ; BSR set to: 1
 20112  000252  0E0C               	movlw	12
 20113  000254  0100               	movlb	0	; () banked
 20114  000256  19F9               	xorwf	_which_screen& (0+255),w,b
 20115  000258  A4D8               	btfss	status,2,c
 20116  00025A  D01E               	goto	l834
 20117                           
 20118                           ; BSR set to: 0
 20119                           ;encoder.c: 108: if(drumCCTypeMenu.selector < (drumCCTypeMenu.number - 1)){
 20120  00025C  0EFF               	movlw	255
 20121  00025E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20122  000260  0EFF               	movlw	255
 20123  000262  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20124  000264  0101               	movlb	1	; () banked
 20125  000266  515F               	movf	_drumCCTypeMenu& (0+255),w,b
 20126  000268  0100               	movlb	0	; () banked
 20127  00026A  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20128  00026C  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20129  00026E  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20130  000270  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20131  000272  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20132  000274  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20133  000276  0101               	movlb	1	; () banked
 20134  000278  5161               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 20135  00027A  0100               	movlb	0	; () banked
 20136  00027C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20137  00027E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20138  000280  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20139  000282  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20140  000284  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20141  000286  0A80               	xorlw	128
 20142  000288  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20143  00028A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20144  00028C  0A80               	xorlw	128
 20145  00028E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20146  000290  B0D8               	btfsc	status,0,c
 20147  000292  D002               	goto	l834
 20148                           
 20149                           ; BSR set to: 0
 20150                           ;encoder.c: 109: drumCCTypeMenu.selector++;
 20151  000294  0101               	movlb	1	; () banked
 20152  000296  2B61               	incf	(_drumCCTypeMenu+2)& (0+255),f,b
 20153  000298                     l834:
 20154                           
 20155                           ;encoder.c: 110: }
 20156                           ;encoder.c: 111: }
 20157                           ;encoder.c: 113: if (which_screen == DRUMS_NN_MENU) {
 20158                           
 20159                           ; BSR set to: 1
 20160                           
 20161                           ; BSR set to: 1
 20162  000298  0E0D               	movlw	13
 20163  00029A  0100               	movlb	0	; () banked
 20164  00029C  19F9               	xorwf	_which_screen& (0+255),w,b
 20165  00029E  A4D8               	btfss	status,2,c
 20166  0002A0  D01E               	goto	l836
 20167                           
 20168                           ; BSR set to: 0
 20169                           ;encoder.c: 114: if(drumNNMenu.selector < (drumNNMenu.number - 1)){
 20170  0002A2  0EFF               	movlw	255
 20171  0002A4  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20172  0002A6  0EFF               	movlw	255
 20173  0002A8  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20174  0002AA  0101               	movlb	1	; () banked
 20175  0002AC  515C               	movf	_drumNNMenu& (0+255),w,b
 20176  0002AE  0100               	movlb	0	; () banked
 20177  0002B0  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20178  0002B2  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20179  0002B4  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20180  0002B6  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20181  0002B8  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20182  0002BA  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20183  0002BC  0101               	movlb	1	; () banked
 20184  0002BE  515E               	movf	(_drumNNMenu+2)& (0+255),w,b
 20185  0002C0  0100               	movlb	0	; () banked
 20186  0002C2  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20187  0002C4  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20188  0002C6  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20189  0002C8  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20190  0002CA  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20191  0002CC  0A80               	xorlw	128
 20192  0002CE  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20193  0002D0  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20194  0002D2  0A80               	xorlw	128
 20195  0002D4  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20196  0002D6  B0D8               	btfsc	status,0,c
 20197  0002D8  D002               	goto	l836
 20198                           
 20199                           ; BSR set to: 0
 20200                           ;encoder.c: 115: drumNNMenu.selector++;
 20201  0002DA  0101               	movlb	1	; () banked
 20202  0002DC  2B5E               	incf	(_drumNNMenu+2)& (0+255),f,b
 20203  0002DE                     l836:
 20204                           
 20205                           ;encoder.c: 116: }
 20206                           ;encoder.c: 117: }
 20207                           ;encoder.c: 119: if (which_screen == DRUMS_CC_MENU) {
 20208                           
 20209                           ; BSR set to: 1
 20210                           
 20211                           ; BSR set to: 1
 20212  0002DE  0E0E               	movlw	14
 20213  0002E0  0100               	movlb	0	; () banked
 20214  0002E2  19F9               	xorwf	_which_screen& (0+255),w,b
 20215  0002E4  A4D8               	btfss	status,2,c
 20216  0002E6  D01E               	goto	l838
 20217                           
 20218                           ; BSR set to: 0
 20219                           ;encoder.c: 120: if(drumCCMenu.selector < (drumCCMenu.number - 1)){
 20220  0002E8  0EFF               	movlw	255
 20221  0002EA  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20222  0002EC  0EFF               	movlw	255
 20223  0002EE  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20224  0002F0  0101               	movlb	1	; () banked
 20225  0002F2  5159               	movf	_drumCCMenu& (0+255),w,b
 20226  0002F4  0100               	movlb	0	; () banked
 20227  0002F6  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20228  0002F8  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20229  0002FA  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20230  0002FC  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20231  0002FE  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20232  000300  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20233  000302  0101               	movlb	1	; () banked
 20234  000304  515B               	movf	(_drumCCMenu+2)& (0+255),w,b
 20235  000306  0100               	movlb	0	; () banked
 20236  000308  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20237  00030A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20238  00030C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20239  00030E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20240  000310  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20241  000312  0A80               	xorlw	128
 20242  000314  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20243  000316  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20244  000318  0A80               	xorlw	128
 20245  00031A  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20246  00031C  B0D8               	btfsc	status,0,c
 20247  00031E  D002               	goto	l838
 20248                           
 20249                           ; BSR set to: 0
 20250                           ;encoder.c: 121: drumCCMenu.selector++;
 20251  000320  0101               	movlb	1	; () banked
 20252  000322  2B5B               	incf	(_drumCCMenu+2)& (0+255),f,b
 20253  000324                     l838:
 20254                           
 20255                           ;encoder.c: 122: }
 20256                           ;encoder.c: 123: }
 20257                           ;encoder.c: 125: if (which_screen == POTS_RES_MENU) {
 20258                           
 20259                           ; BSR set to: 1
 20260                           
 20261                           ; BSR set to: 1
 20262  000324  0E0F               	movlw	15
 20263  000326  0100               	movlb	0	; () banked
 20264  000328  19F9               	xorwf	_which_screen& (0+255),w,b
 20265  00032A  A4D8               	btfss	status,2,c
 20266  00032C  D01E               	goto	l840
 20267                           
 20268                           ; BSR set to: 0
 20269                           ;encoder.c: 126: if(potsResoMenu.selector < (potsResoMenu.number - 1)){
 20270  00032E  0EFF               	movlw	255
 20271  000330  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20272  000332  0EFF               	movlw	255
 20273  000334  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20274  000336  0101               	movlb	1	; () banked
 20275  000338  5156               	movf	_potsResoMenu& (0+255),w,b
 20276  00033A  0100               	movlb	0	; () banked
 20277  00033C  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20278  00033E  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20279  000340  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20280  000342  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20281  000344  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20282  000346  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20283  000348  0101               	movlb	1	; () banked
 20284  00034A  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 20285  00034C  0100               	movlb	0	; () banked
 20286  00034E  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20287  000350  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20288  000352  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20289  000354  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20290  000356  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20291  000358  0A80               	xorlw	128
 20292  00035A  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20293  00035C  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20294  00035E  0A80               	xorlw	128
 20295  000360  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20296  000362  B0D8               	btfsc	status,0,c
 20297  000364  D002               	goto	l840
 20298                           
 20299                           ; BSR set to: 0
 20300                           ;encoder.c: 127: potsResoMenu.selector++;
 20301  000366  0101               	movlb	1	; () banked
 20302  000368  2B58               	incf	(_potsResoMenu+2)& (0+255),f,b
 20303  00036A                     l840:
 20304                           
 20305                           ;encoder.c: 128: }
 20306                           ;encoder.c: 129: }
 20307                           ;encoder.c: 131: if (which_screen == ENCODER_POLARITY_MENU) {
 20308                           
 20309                           ; BSR set to: 1
 20310                           
 20311                           ; BSR set to: 1
 20312  00036A  0E18               	movlw	24
 20313  00036C  0100               	movlb	0	; () banked
 20314  00036E  19F9               	xorwf	_which_screen& (0+255),w,b
 20315  000370  A4D8               	btfss	status,2,c
 20316  000372  D006               	goto	l842
 20317                           
 20318                           ; BSR set to: 0
 20319                           ;encoder.c: 135: if(encoderPolarityMenu.selector == 0){
 20320  000374  0101               	movlb	1	; () banked
 20321  000376  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 20322  000378  A4D8               	btfss	status,2,c
 20323  00037A  D002               	goto	l842
 20324                           
 20325                           ; BSR set to: 1
 20326                           ;encoder.c: 136: encoderPolarityMenu.selector = 1;
 20327  00037C  0E01               	movlw	1
 20328  00037E  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 20329  000380                     l842:
 20330                           
 20331                           ;encoder.c: 137: }
 20332                           ;encoder.c: 138: }
 20333                           ;encoder.c: 140: if (which_screen == POTS_ALPHA_MENU) {
 20334                           
 20335                           ; BSR set to: 1
 20336                           
 20337                           ; BSR set to: 1
 20338  000380  0E10               	movlw	16
 20339  000382  0100               	movlb	0	; () banked
 20340  000384  19F9               	xorwf	_which_screen& (0+255),w,b
 20341  000386  A4D8               	btfss	status,2,c
 20342  000388  D006               	goto	l844
 20343                           
 20344                           ; BSR set to: 0
 20345                           ;encoder.c: 141: if(potsAlphaMenu.selector <= 85){
 20346  00038A  0E56               	movlw	86
 20347  00038C  0101               	movlb	1	; () banked
 20348  00038E  6155               	cpfslt	(_potsAlphaMenu+2)& (0+255),b
 20349  000390  D002               	goto	l844
 20350                           
 20351                           ; BSR set to: 1
 20352                           ;encoder.c: 142: potsAlphaMenu.selector += 5;
 20353  000392  0E05               	movlw	5
 20354  000394  2755               	addwf	(_potsAlphaMenu+2)& (0+255),f,b
 20355  000396                     l844:
 20356                           
 20357                           ;encoder.c: 143: }
 20358                           ;encoder.c: 144: }
 20359                           ;encoder.c: 146: if (which_screen == POTS_CC_MENU) {
 20360                           
 20361                           ; BSR set to: 1
 20362  000396  0E11               	movlw	17
 20363  000398  0100               	movlb	0	; () banked
 20364  00039A  19F9               	xorwf	_which_screen& (0+255),w,b
 20365  00039C  A4D8               	btfss	status,2,c
 20366  00039E  D01E               	goto	l846
 20367                           
 20368                           ; BSR set to: 0
 20369                           ;encoder.c: 147: if(potsCCMenu.selector < (potsCCMenu.number - 1)){
 20370  0003A0  0EFF               	movlw	255
 20371  0003A2  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20372  0003A4  0EFF               	movlw	255
 20373  0003A6  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20374  0003A8  0101               	movlb	1	; () banked
 20375  0003AA  5150               	movf	_potsCCMenu& (0+255),w,b
 20376  0003AC  0100               	movlb	0	; () banked
 20377  0003AE  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20378  0003B0  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20379  0003B2  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20380  0003B4  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20381  0003B6  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20382  0003B8  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20383  0003BA  0101               	movlb	1	; () banked
 20384  0003BC  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 20385  0003BE  0100               	movlb	0	; () banked
 20386  0003C0  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20387  0003C2  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20388  0003C4  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20389  0003C6  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20390  0003C8  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20391  0003CA  0A80               	xorlw	128
 20392  0003CC  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20393  0003CE  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20394  0003D0  0A80               	xorlw	128
 20395  0003D2  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20396  0003D4  B0D8               	btfsc	status,0,c
 20397  0003D6  D002               	goto	l846
 20398                           
 20399                           ; BSR set to: 0
 20400                           ;encoder.c: 148: potsCCMenu.selector++;
 20401  0003D8  0101               	movlb	1	; () banked
 20402  0003DA  2B52               	incf	(_potsCCMenu+2)& (0+255),f,b
 20403  0003DC                     l846:
 20404                           
 20405                           ;encoder.c: 149: }
 20406                           ;encoder.c: 150: }
 20407                           ;encoder.c: 152: if (which_screen == SLIDEPOTS_CC_MENU) {
 20408                           
 20409                           ; BSR set to: 1
 20410                           
 20411                           ; BSR set to: 1
 20412  0003DC  0E12               	movlw	18
 20413  0003DE  0100               	movlb	0	; () banked
 20414  0003E0  19F9               	xorwf	_which_screen& (0+255),w,b
 20415  0003E2  A4D8               	btfss	status,2,c
 20416  0003E4  D01E               	goto	l848
 20417                           
 20418                           ; BSR set to: 0
 20419                           ;encoder.c: 153: if(slidepotsCCMenu.selector < (slidepotsCCMenu.number - 1)){
 20420  0003E6  0EFF               	movlw	255
 20421  0003E8  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20422  0003EA  0EFF               	movlw	255
 20423  0003EC  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20424  0003EE  0101               	movlb	1	; () banked
 20425  0003F0  514D               	movf	_slidepotsCCMenu& (0+255),w,b
 20426  0003F2  0100               	movlb	0	; () banked
 20427  0003F4  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20428  0003F6  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20429  0003F8  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20430  0003FA  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20431  0003FC  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20432  0003FE  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20433  000400  0101               	movlb	1	; () banked
 20434  000402  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 20435  000404  0100               	movlb	0	; () banked
 20436  000406  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20437  000408  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20438  00040A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20439  00040C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20440  00040E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20441  000410  0A80               	xorlw	128
 20442  000412  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20443  000414  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20444  000416  0A80               	xorlw	128
 20445  000418  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20446  00041A  B0D8               	btfsc	status,0,c
 20447  00041C  D002               	goto	l848
 20448                           
 20449                           ; BSR set to: 0
 20450                           ;encoder.c: 154: slidepotsCCMenu.selector++;
 20451  00041E  0101               	movlb	1	; () banked
 20452  000420  2B4F               	incf	(_slidepotsCCMenu+2)& (0+255),f,b
 20453  000422                     l848:
 20454                           
 20455                           ;encoder.c: 155: }
 20456                           ;encoder.c: 156: }
 20457                           ;encoder.c: 158: if (which_screen == PROGRAM_CHANGE_MENU) {
 20458                           
 20459                           ; BSR set to: 1
 20460                           
 20461                           ; BSR set to: 1
 20462  000422  0E08               	movlw	8
 20463  000424  0100               	movlb	0	; () banked
 20464  000426  19F9               	xorwf	_which_screen& (0+255),w,b
 20465  000428  A4D8               	btfss	status,2,c
 20466  00042A  D005               	goto	l850
 20467                           
 20468                           ; BSR set to: 0
 20469                           ;encoder.c: 159: if(programChangeMenu.selector < 127){
 20470  00042C  0E7F               	movlw	127
 20471  00042E  0101               	movlb	1	; () banked
 20472  000430  6146               	cpfslt	(_programChangeMenu+2)& (0+255),b
 20473  000432  D001               	goto	l850
 20474                           
 20475                           ; BSR set to: 1
 20476                           ;encoder.c: 160: programChangeMenu.selector++;
 20477  000434  2B46               	incf	(_programChangeMenu+2)& (0+255),f,b
 20478  000436                     l850:
 20479                           
 20480                           ;encoder.c: 161: }
 20481                           ;encoder.c: 162: }
 20482                           ;encoder.c: 164: if (which_screen == MAIN_CH_MENU) {
 20483                           
 20484                           ; BSR set to: 1
 20485                           
 20486                           ; BSR set to: 1
 20487  000436  0E14               	movlw	20
 20488  000438  0100               	movlb	0	; () banked
 20489  00043A  19F9               	xorwf	_which_screen& (0+255),w,b
 20490  00043C  A4D8               	btfss	status,2,c
 20491  00043E  D005               	goto	l852
 20492                           
 20493                           ; BSR set to: 0
 20494                           ;encoder.c: 165: if(mainChannelMenu.selector < 15){
 20495  000440  0E0F               	movlw	15
 20496  000442  0101               	movlb	1	; () banked
 20497  000444  6143               	cpfslt	(_mainChannelMenu+2)& (0+255),b
 20498  000446  D001               	goto	l852
 20499                           
 20500                           ; BSR set to: 1
 20501                           ;encoder.c: 166: mainChannelMenu.selector++;
 20502  000448  2B43               	incf	(_mainChannelMenu+2)& (0+255),f,b
 20503  00044A                     l852:
 20504                           
 20505                           ;encoder.c: 167: }
 20506                           ;encoder.c: 168: }
 20507                           ;encoder.c: 170: if (which_screen == DRUM_CH_MENU) {
 20508                           
 20509                           ; BSR set to: 1
 20510                           
 20511                           ; BSR set to: 1
 20512  00044A  0E15               	movlw	21
 20513  00044C  0100               	movlb	0	; () banked
 20514  00044E  19F9               	xorwf	_which_screen& (0+255),w,b
 20515  000450  A4D8               	btfss	status,2,c
 20516  000452  D005               	goto	l854
 20517                           
 20518                           ; BSR set to: 0
 20519                           ;encoder.c: 171: if(drumChannelMenu.selector < 15){
 20520  000454  0E0F               	movlw	15
 20521  000456  0101               	movlb	1	; () banked
 20522  000458  6140               	cpfslt	(_drumChannelMenu+2)& (0+255),b
 20523  00045A  D001               	goto	l854
 20524                           
 20525                           ; BSR set to: 1
 20526                           ;encoder.c: 172: drumChannelMenu.selector++;
 20527  00045C  2B40               	incf	(_drumChannelMenu+2)& (0+255),f,b
 20528  00045E                     l854:
 20529                           
 20530                           ;encoder.c: 173: }
 20531                           ;encoder.c: 174: }
 20532                           ;encoder.c: 175: if (which_screen == JOYSTICK_CC_MENU) {
 20533                           
 20534                           ; BSR set to: 1
 20535                           
 20536                           ; BSR set to: 1
 20537  00045E  0E13               	movlw	19
 20538  000460  0100               	movlb	0	; () banked
 20539  000462  19F9               	xorwf	_which_screen& (0+255),w,b
 20540  000464  A4D8               	btfss	status,2,c
 20541  000466  D01E               	goto	l856
 20542                           
 20543                           ; BSR set to: 0
 20544                           ;encoder.c: 176: if(joystickCCMenu.selector < (joystickCCMenu.number - 1)){
 20545  000468  0EFF               	movlw	255
 20546  00046A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20547  00046C  0EFF               	movlw	255
 20548  00046E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20549  000470  0101               	movlb	1	; () banked
 20550  000472  514A               	movf	_joystickCCMenu& (0+255),w,b
 20551  000474  0100               	movlb	0	; () banked
 20552  000476  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20553  000478  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20554  00047A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20555  00047C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20556  00047E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20557  000480  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20558  000482  0101               	movlb	1	; () banked
 20559  000484  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 20560  000486  0100               	movlb	0	; () banked
 20561  000488  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20562  00048A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20563  00048C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20564  00048E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20565  000490  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20566  000492  0A80               	xorlw	128
 20567  000494  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20568  000496  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20569  000498  0A80               	xorlw	128
 20570  00049A  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20571  00049C  B0D8               	btfsc	status,0,c
 20572  00049E  D002               	goto	l856
 20573                           
 20574                           ; BSR set to: 0
 20575                           ;encoder.c: 177: joystickCCMenu.selector++;
 20576  0004A0  0101               	movlb	1	; () banked
 20577  0004A2  2B4C               	incf	(_joystickCCMenu+2)& (0+255),f,b
 20578  0004A4                     l856:
 20579                           
 20580                           ;encoder.c: 178: }
 20581                           ;encoder.c: 179: }
 20582                           ;encoder.c: 180: if (which_screen == EEPROM_MENU) {
 20583                           
 20584                           ; BSR set to: 1
 20585                           
 20586                           ; BSR set to: 1
 20587  0004A4  0E16               	movlw	22
 20588  0004A6  0100               	movlb	0	; () banked
 20589  0004A8  19F9               	xorwf	_which_screen& (0+255),w,b
 20590  0004AA  A4D8               	btfss	status,2,c
 20591  0004AC  D01E               	goto	l858
 20592                           
 20593                           ; BSR set to: 0
 20594                           ;encoder.c: 181: if(eepromMenu.selector < (eepromMenu.number - 1)){
 20595  0004AE  0EFF               	movlw	255
 20596  0004B0  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20597  0004B2  0EFF               	movlw	255
 20598  0004B4  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20599  0004B6  0101               	movlb	1	; () banked
 20600  0004B8  513B               	movf	_eepromMenu& (0+255),w,b
 20601  0004BA  0100               	movlb	0	; () banked
 20602  0004BC  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20603  0004BE  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20604  0004C0  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20605  0004C2  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20606  0004C4  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20607  0004C6  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20608  0004C8  0101               	movlb	1	; () banked
 20609  0004CA  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 20610  0004CC  0100               	movlb	0	; () banked
 20611  0004CE  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20612  0004D0  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20613  0004D2  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20614  0004D4  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20615  0004D6  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20616  0004D8  0A80               	xorlw	128
 20617  0004DA  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20618  0004DC  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20619  0004DE  0A80               	xorlw	128
 20620  0004E0  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20621  0004E2  B0D8               	btfsc	status,0,c
 20622  0004E4  D002               	goto	l858
 20623                           
 20624                           ; BSR set to: 0
 20625                           ;encoder.c: 182: eepromMenu.selector++;
 20626  0004E6  0101               	movlb	1	; () banked
 20627  0004E8  2B3D               	incf	(_eepromMenu+2)& (0+255),f,b
 20628  0004EA                     l858:
 20629                           
 20630                           ;encoder.c: 183: }
 20631                           ;encoder.c: 184: }
 20632                           ;encoder.c: 185: if (which_screen == SAVES_MENU) {
 20633                           
 20634                           ; BSR set to: 1
 20635                           
 20636                           ; BSR set to: 1
 20637  0004EA  0E17               	movlw	23
 20638  0004EC  0100               	movlb	0	; () banked
 20639  0004EE  19F9               	xorwf	_which_screen& (0+255),w,b
 20640  0004F0  A4D8               	btfss	status,2,c
 20641  0004F2  D018               	goto	l860
 20642                           
 20643                           ; BSR set to: 0
 20644                           ;encoder.c: 186: if(savesMenu.selector < (savesMenu.number - 1)){
 20645  0004F4  0EFF               	movlw	255
 20646  0004F6  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20647  0004F8  0EFF               	movlw	255
 20648  0004FA  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20649  0004FC  51DF               	movf	_savesMenu& (0+255),w,b
 20650  0004FE  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20651  000500  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20652  000502  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20653  000504  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20654  000506  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20655  000508  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20656  00050A  51E1               	movf	(_savesMenu+2)& (0+255),w,b
 20657  00050C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20658  00050E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20659  000510  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20660  000512  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20661  000514  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20662  000516  0A80               	xorlw	128
 20663  000518  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20664  00051A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20665  00051C  0A80               	xorlw	128
 20666  00051E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20667  000520  A0D8               	btfss	status,0,c
 20668                           
 20669                           ; BSR set to: 0
 20670                           ;encoder.c: 187: savesMenu.selector++;
 20671  000522  2BE1               	incf	(_savesMenu+2)& (0+255),f,b
 20672  000524                     l860:
 20673                           
 20674                           ; BSR set to: 0
 20675                           ;encoder.c: 188: }
 20676                           ;encoder.c: 189: }
 20677                           ;encoder.c: 191: if (which_screen == ARPEGGIATOR_MENU) {
 20678                           
 20679                           ; BSR set to: 0
 20680                           
 20681                           ; BSR set to: 0
 20682  000524  0E19               	movlw	25
 20683  000526  19F9               	xorwf	_which_screen& (0+255),w,b
 20684  000528  A4D8               	btfss	status,2,c
 20685  00052A  D018               	goto	l862
 20686                           
 20687                           ; BSR set to: 0
 20688                           ;encoder.c: 192: if(arpeggiatorMenu.selector < (arpeggiatorMenu.number - 1)){
 20689  00052C  0EFF               	movlw	255
 20690  00052E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20691  000530  0EFF               	movlw	255
 20692  000532  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20693  000534  503B               	movf	_arpeggiatorMenu,w,c
 20694  000536  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20695  000538  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20696  00053A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20697  00053C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20698  00053E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20699  000540  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20700  000542  503D               	movf	_arpeggiatorMenu+2,w,c
 20701  000544  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20702  000546  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20703  000548  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20704  00054A  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20705  00054C  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20706  00054E  0A80               	xorlw	128
 20707  000550  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20708  000552  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20709  000554  0A80               	xorlw	128
 20710  000556  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20711  000558  A0D8               	btfss	status,0,c
 20712                           
 20713                           ; BSR set to: 0
 20714                           ;encoder.c: 193: arpeggiatorMenu.selector++;
 20715  00055A  2A3D               	incf	_arpeggiatorMenu+2,f,c
 20716  00055C                     l862:
 20717                           
 20718                           ; BSR set to: 0
 20719                           ;encoder.c: 194: }
 20720                           ;encoder.c: 195: }
 20721                           ;encoder.c: 197: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 20722                           
 20723                           ; BSR set to: 0
 20724                           
 20725                           ; BSR set to: 0
 20726  00055C  0E1A               	movlw	26
 20727  00055E  19F9               	xorwf	_which_screen& (0+255),w,b
 20728  000560  A4D8               	btfss	status,2,c
 20729  000562  D003               	goto	l863
 20730                           
 20731                           ; BSR set to: 0
 20732                           ;encoder.c: 198: arpeggiatorOnOffMenu.selector ^= 1;
 20733  000564  0E01               	movlw	1
 20734  000566  0101               	movlb	1	; () banked
 20735  000568  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 20736  00056A                     l863:
 20737                           
 20738                           ;encoder.c: 202: }
 20739                           ;encoder.c: 203: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 20740  00056A  0E1B               	movlw	27
 20741  00056C  0100               	movlb	0	; () banked
 20742  00056E  19F9               	xorwf	_which_screen& (0+255),w,b
 20743  000570  A4D8               	btfss	status,2,c
 20744  000572  D005               	goto	l865
 20745                           
 20746                           ; BSR set to: 0
 20747                           ;encoder.c: 204: if(arpeggiatorTempoMenu.selector < 250){
 20748  000574  0EFA               	movlw	250
 20749  000576  0101               	movlb	1	; () banked
 20750  000578  6134               	cpfslt	(_arpeggiatorTempoMenu+2)& (0+255),b
 20751  00057A  D001               	goto	l865
 20752                           
 20753                           ; BSR set to: 1
 20754                           ;encoder.c: 205: arpeggiatorTempoMenu.selector++;
 20755  00057C  2B34               	incf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 20756  00057E                     l865:
 20757                           
 20758                           ;encoder.c: 206: }
 20759                           ;encoder.c: 207: }
 20760                           ;encoder.c: 208: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 20761                           
 20762                           ; BSR set to: 1
 20763                           
 20764                           ; BSR set to: 1
 20765  00057E  0E1C               	movlw	28
 20766  000580  0100               	movlb	0	; () banked
 20767  000582  19F9               	xorwf	_which_screen& (0+255),w,b
 20768  000584  A4D8               	btfss	status,2,c
 20769  000586  D005               	goto	l867
 20770                           
 20771                           ; BSR set to: 0
 20772                           ;encoder.c: 209: if(arpeggiatorOctavesMenu.selector < 4){
 20773  000588  0E04               	movlw	4
 20774  00058A  0101               	movlb	1	; () banked
 20775  00058C  6131               	cpfslt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 20776  00058E  D001               	goto	l867
 20777                           
 20778                           ; BSR set to: 1
 20779                           ;encoder.c: 210: arpeggiatorOctavesMenu.selector++;
 20780  000590  2B31               	incf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 20781  000592                     l867:
 20782                           
 20783                           ;encoder.c: 211: }
 20784                           ;encoder.c: 212: }
 20785                           ;encoder.c: 213: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 20786                           
 20787                           ; BSR set to: 1
 20788                           
 20789                           ; BSR set to: 1
 20790  000592  0E1D               	movlw	29
 20791  000594  0100               	movlb	0	; () banked
 20792  000596  19F9               	xorwf	_which_screen& (0+255),w,b
 20793  000598  A4D8               	btfss	status,2,c
 20794  00059A  D01E               	goto	l869
 20795                           
 20796                           ; BSR set to: 0
 20797                           ;encoder.c: 214: if(arpeggiatorTypeMenu.selector < (arpeggiatorTypeMenu.number - 1)){
 20798  00059C  0EFF               	movlw	255
 20799  00059E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20800  0005A0  0EFF               	movlw	255
 20801  0005A2  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20802  0005A4  0101               	movlb	1	; () banked
 20803  0005A6  512C               	movf	_arpeggiatorTypeMenu& (0+255),w,b
 20804  0005A8  0100               	movlb	0	; () banked
 20805  0005AA  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20806  0005AC  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20807  0005AE  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20808  0005B0  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20809  0005B2  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20810  0005B4  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20811  0005B6  0101               	movlb	1	; () banked
 20812  0005B8  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 20813  0005BA  0100               	movlb	0	; () banked
 20814  0005BC  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20815  0005BE  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20816  0005C0  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20817  0005C2  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20818  0005C4  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20819  0005C6  0A80               	xorlw	128
 20820  0005C8  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20821  0005CA  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20822  0005CC  0A80               	xorlw	128
 20823  0005CE  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20824  0005D0  B0D8               	btfsc	status,0,c
 20825  0005D2  D002               	goto	l869
 20826                           
 20827                           ; BSR set to: 0
 20828                           ;encoder.c: 215: arpeggiatorTypeMenu.selector++;
 20829  0005D4  0101               	movlb	1	; () banked
 20830  0005D6  2B2E               	incf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 20831  0005D8                     l869:
 20832                           
 20833                           ;encoder.c: 216: }
 20834                           ;encoder.c: 217: }
 20835                           ;encoder.c: 218: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 20836                           
 20837                           ; BSR set to: 1
 20838                           
 20839                           ; BSR set to: 1
 20840  0005D8  0E1E               	movlw	30
 20841  0005DA  0100               	movlb	0	; () banked
 20842  0005DC  19F9               	xorwf	_which_screen& (0+255),w,b
 20843  0005DE  A4D8               	btfss	status,2,c
 20844  0005E0  D01E               	goto	l871
 20845                           
 20846                           ; BSR set to: 0
 20847                           ;encoder.c: 219: if(arpeggiatorNoteLengthMenu.selector < (arpeggiatorNoteLengthMenu.numb
      +                          er - 1)){
 20848  0005E2  0EFF               	movlw	255
 20849  0005E4  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20850  0005E6  0EFF               	movlw	255
 20851  0005E8  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20852  0005EA  0101               	movlb	1	; () banked
 20853  0005EC  5129               	movf	_arpeggiatorNoteLengthMenu& (0+255),w,b
 20854  0005EE  0100               	movlb	0	; () banked
 20855  0005F0  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20856  0005F2  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20857  0005F4  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20858  0005F6  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20859  0005F8  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20860  0005FA  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20861  0005FC  0101               	movlb	1	; () banked
 20862  0005FE  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 20863  000600  0100               	movlb	0	; () banked
 20864  000602  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20865  000604  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20866  000606  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20867  000608  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20868  00060A  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20869  00060C  0A80               	xorlw	128
 20870  00060E  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20871  000610  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20872  000612  0A80               	xorlw	128
 20873  000614  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20874  000616  B0D8               	btfsc	status,0,c
 20875  000618  D002               	goto	l871
 20876                           
 20877                           ; BSR set to: 0
 20878                           ;encoder.c: 220: arpeggiatorNoteLengthMenu.selector++;
 20879  00061A  0101               	movlb	1	; () banked
 20880  00061C  2B2B               	incf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 20881  00061E                     l871:
 20882                           
 20883                           ;encoder.c: 221: }
 20884                           ;encoder.c: 222: }
 20885                           ;encoder.c: 223: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 20886                           
 20887                           ; BSR set to: 1
 20888                           
 20889                           ; BSR set to: 1
 20890  00061E  0E1F               	movlw	31
 20891  000620  0100               	movlb	0	; () banked
 20892  000622  19F9               	xorwf	_which_screen& (0+255),w,b
 20893  000624  A4D8               	btfss	status,2,c
 20894  000626  D01E               	goto	l873
 20895                           
 20896                           ; BSR set to: 0
 20897                           ;encoder.c: 225: if(arpeggiatorLatchMenu.selector < (arpeggiatorLatchMenu.number - 1)){
 20898  000628  0EFF               	movlw	255
 20899  00062A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20900  00062C  0EFF               	movlw	255
 20901  00062E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20902  000630  0101               	movlb	1	; () banked
 20903  000632  5126               	movf	_arpeggiatorLatchMenu& (0+255),w,b
 20904  000634  0100               	movlb	0	; () banked
 20905  000636  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20906  000638  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20907  00063A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20908  00063C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20909  00063E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20910  000640  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20911  000642  0101               	movlb	1	; () banked
 20912  000644  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 20913  000646  0100               	movlb	0	; () banked
 20914  000648  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20915  00064A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20916  00064C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20917  00064E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20918  000650  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20919  000652  0A80               	xorlw	128
 20920  000654  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20921  000656  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20922  000658  0A80               	xorlw	128
 20923  00065A  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20924  00065C  B0D8               	btfsc	status,0,c
 20925  00065E  D002               	goto	l873
 20926                           
 20927                           ; BSR set to: 0
 20928                           ;encoder.c: 226: arpeggiatorLatchMenu.selector++;
 20929  000660  0101               	movlb	1	; () banked
 20930  000662  2B28               	incf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 20931  000664                     l873:
 20932                           
 20933                           ;encoder.c: 227: }
 20934                           ;encoder.c: 228: }
 20935                           ;encoder.c: 229: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 20936                           
 20937                           ; BSR set to: 1
 20938                           
 20939                           ; BSR set to: 1
 20940  000664  0E20               	movlw	32
 20941  000666  0100               	movlb	0	; () banked
 20942  000668  19F9               	xorwf	_which_screen& (0+255),w,b
 20943  00066A  A4D8               	btfss	status,2,c
 20944  00066C  D003               	goto	l874
 20945                           
 20946                           ; BSR set to: 0
 20947                           ;encoder.c: 230: arpeggiatorLatchOnOffMenu.selector ^= 1;
 20948  00066E  0E01               	movlw	1
 20949  000670  0101               	movlb	1	; () banked
 20950  000672  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 20951  000674                     l874:
 20952                           
 20953                           ;encoder.c: 231: }
 20954                           ;encoder.c: 232: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 20955  000674  0E21               	movlw	33
 20956  000676  0100               	movlb	0	; () banked
 20957  000678  19F9               	xorwf	_which_screen& (0+255),w,b
 20958  00067A  A4D8               	btfss	status,2,c
 20959  00067C  D003               	goto	l875
 20960                           
 20961                           ; BSR set to: 0
 20962                           ;encoder.c: 233: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 20963  00067E  0E01               	movlw	1
 20964  000680  0101               	movlb	1	; () banked
 20965  000682  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 20966  000684                     l875:
 20967                           
 20968                           ;encoder.c: 234: }
 20969                           ;encoder.c: 235: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 20970  000684  0E22               	movlw	34
 20971  000686  0100               	movlb	0	; () banked
 20972  000688  19F9               	xorwf	_which_screen& (0+255),w,b
 20973  00068A  A4D8               	btfss	status,2,c
 20974  00068C  D003               	goto	l876
 20975                           
 20976                           ; BSR set to: 0
 20977                           ;encoder.c: 236: arpeggiatorUnLatchModeMenu.selector ^= 1;
 20978  00068E  0E01               	movlw	1
 20979  000690  0101               	movlb	1	; () banked
 20980  000692  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 20981  000694                     l876:
 20982                           
 20983                           ;encoder.c: 237: }
 20984                           ;encoder.c: 238: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 20985  000694  0E23               	movlw	35
 20986  000696  0100               	movlb	0	; () banked
 20987  000698  19F9               	xorwf	_which_screen& (0+255),w,b
 20988  00069A  A4D8               	btfss	status,2,c
 20989  00069C  D01E               	goto	l878
 20990                           
 20991                           ; BSR set to: 0
 20992                           ;encoder.c: 239: if(arpeggiatorRandomizeSkipMenu.selector < (arpeggiatorRandomizeSkipMen
      +                          u.number - 1)){
 20993  00069E  0EFF               	movlw	255
 20994  0006A0  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20995  0006A2  0EFF               	movlw	255
 20996  0006A4  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20997  0006A6  0101               	movlb	1	; () banked
 20998  0006A8  511A               	movf	_arpeggiatorRandomizeSkipMenu& (0+255),w,b
 20999  0006AA  0100               	movlb	0	; () banked
 21000  0006AC  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21001  0006AE  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21002  0006B0  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21003  0006B2  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21004  0006B4  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21005  0006B6  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21006  0006B8  0101               	movlb	1	; () banked
 21007  0006BA  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 21008  0006BC  0100               	movlb	0	; () banked
 21009  0006BE  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21010  0006C0  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21011  0006C2  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21012  0006C4  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21013  0006C6  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21014  0006C8  0A80               	xorlw	128
 21015  0006CA  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21016  0006CC  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21017  0006CE  0A80               	xorlw	128
 21018  0006D0  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21019  0006D2  B0D8               	btfsc	status,0,c
 21020  0006D4  D002               	goto	l878
 21021                           
 21022                           ; BSR set to: 0
 21023                           ;encoder.c: 240: arpeggiatorRandomizeSkipMenu.selector++;
 21024  0006D6  0101               	movlb	1	; () banked
 21025  0006D8  2B1C               	incf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 21026  0006DA                     l878:
 21027                           
 21028                           ;encoder.c: 241: }
 21029                           ;encoder.c: 242: }
 21030                           ;encoder.c: 243: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 21031                           
 21032                           ; BSR set to: 1
 21033                           
 21034                           ; BSR set to: 1
 21035  0006DA  0E24               	movlw	36
 21036  0006DC  0100               	movlb	0	; () banked
 21037  0006DE  19F9               	xorwf	_which_screen& (0+255),w,b
 21038  0006E0  A4D8               	btfss	status,2,c
 21039  0006E2  D003               	goto	l879
 21040                           
 21041                           ; BSR set to: 0
 21042                           ;encoder.c: 244: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 21043  0006E4  0E01               	movlw	1
 21044  0006E6  0101               	movlb	1	; () banked
 21045  0006E8  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 21046  0006EA                     l879:
 21047                           
 21048                           ;encoder.c: 248: }
 21049                           ;encoder.c: 249: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 21050  0006EA  0E25               	movlw	37
 21051  0006EC  0100               	movlb	0	; () banked
 21052  0006EE  19F9               	xorwf	_which_screen& (0+255),w,b
 21053  0006F0  A4D8               	btfss	status,2,c
 21054  0006F2  D003               	goto	l880
 21055                           
 21056                           ; BSR set to: 0
 21057                           ;encoder.c: 250: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 21058  0006F4  0E01               	movlw	1
 21059  0006F6  0101               	movlb	1	; () banked
 21060  0006F8  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 21061  0006FA                     l880:
 21062                           
 21063                           ;encoder.c: 251: }
 21064                           ;encoder.c: 252: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 21065  0006FA  0E26               	movlw	38
 21066  0006FC  0100               	movlb	0	; () banked
 21067  0006FE  19F9               	xorwf	_which_screen& (0+255),w,b
 21068  000700  A4D8               	btfss	status,2,c
 21069  000702  D018               	goto	l882
 21070                           
 21071                           ; BSR set to: 0
 21072                           ;encoder.c: 253: if(arpeggiatorLastNoteModeMenu.selector < (arpeggiatorLastNoteModeMenu.
      +                          number - 1)){
 21073  000704  0EFF               	movlw	255
 21074  000706  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21075  000708  0EFF               	movlw	255
 21076  00070A  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21077  00070C  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 21078  00070E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21079  000710  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21080  000712  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21081  000714  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21082  000716  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21083  000718  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21084  00071A  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 21085  00071C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21086  00071E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21087  000720  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21088  000722  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21089  000724  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21090  000726  0A80               	xorlw	128
 21091  000728  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21092  00072A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21093  00072C  0A80               	xorlw	128
 21094  00072E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21095  000730  A0D8               	btfss	status,0,c
 21096                           
 21097                           ; BSR set to: 0
 21098                           ;encoder.c: 254: arpeggiatorLastNoteModeMenu.selector++;
 21099  000732  2BDE               	incf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 21100  000734                     l882:
 21101                           
 21102                           ; BSR set to: 0
 21103                           ;encoder.c: 255: }
 21104                           ;encoder.c: 256: }
 21105                           ;encoder.c: 257: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 21106                           
 21107                           ; BSR set to: 0
 21108                           
 21109                           ; BSR set to: 0
 21110  000734  0E27               	movlw	39
 21111  000736  19F9               	xorwf	_which_screen& (0+255),w,b
 21112  000738  A4D8               	btfss	status,2,c
 21113  00073A  D003               	goto	l883
 21114                           
 21115                           ; BSR set to: 0
 21116                           ;encoder.c: 258: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 21117  00073C  0E01               	movlw	1
 21118  00073E  0101               	movlb	1	; () banked
 21119  000740  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 21120  000742                     l883:
 21121                           
 21122                           ;encoder.c: 259: }
 21123                           ;encoder.c: 260: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 21124  000742  0E28               	movlw	40
 21125  000744  0100               	movlb	0	; () banked
 21126  000746  19F9               	xorwf	_which_screen& (0+255),w,b
 21127  000748  A4D8               	btfss	status,2,c
 21128  00074A  D003               	goto	l884
 21129                           
 21130                           ; BSR set to: 0
 21131                           ;encoder.c: 261: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 21132  00074C  0E01               	movlw	1
 21133  00074E  0101               	movlb	1	; () banked
 21134  000750  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 21135  000752                     l884:
 21136                           
 21137                           ;encoder.c: 262: }
 21138                           ;encoder.c: 263: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 21139  000752  0E29               	movlw	41
 21140  000754  0100               	movlb	0	; () banked
 21141  000756  19F9               	xorwf	_which_screen& (0+255),w,b
 21142  000758  A4D8               	btfss	status,2,c
 21143  00075A  D003               	goto	l885
 21144                           
 21145                           ; BSR set to: 0
 21146                           ;encoder.c: 264: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 21147  00075C  0E01               	movlw	1
 21148  00075E  0101               	movlb	1	; () banked
 21149  000760  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 21150  000762                     l885:
 21151                           
 21152                           ;encoder.c: 265: }
 21153                           ;encoder.c: 266: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 21154  000762  0E2A               	movlw	42
 21155  000764  0100               	movlb	0	; () banked
 21156  000766  19F9               	xorwf	_which_screen& (0+255),w,b
 21157  000768  A4D8               	btfss	status,2,c
 21158  00076A  D003               	goto	l886
 21159                           
 21160                           ; BSR set to: 0
 21161                           ;encoder.c: 267: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 21162  00076C  0E01               	movlw	1
 21163  00076E  0101               	movlb	1	; () banked
 21164  000770  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 21165  000772                     l886:
 21166                           
 21167                           ;encoder.c: 268: }
 21168                           ;encoder.c: 269: }
 21169                           ;encoder.c: 272: if (encoder_direction == 0x20) {
 21170                           
 21171                           ; BSR set to: 1
 21172  000772  0E20               	movlw	32
 21173  000774  0100               	movlb	0	; () banked
 21174  000776  19EB               	xorwf	_encoder_direction& (0+255),w,b
 21175  000778  A4D8               	btfss	status,2,c
 21176  00077A  D15F               	goto	l960
 21177                           
 21178                           ; BSR set to: 0
 21179                           ;encoder.c: 274: lcd_print_once = 0;
 21180  00077C  9E35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 21181                           
 21182                           ; BSR set to: 0
 21183                           ;encoder.c: 277: if (which_screen == MAIN_MENU) {
 21184  00077E  0E02               	movlw	2
 21185  000780  19F9               	xorwf	_which_screen& (0+255),w,b
 21186  000782  A4D8               	btfss	status,2,c
 21187  000784  D004               	goto	l889
 21188                           
 21189                           ; BSR set to: 0
 21190                           ;encoder.c: 278: if(mainMenu.selector > 0){
 21191  000786  0101               	movlb	1	; () banked
 21192  000788  516A               	movf	(_mainMenu+2)& (0+255),w,b
 21193  00078A  A4D8               	btfss	status,2,c
 21194                           
 21195                           ; BSR set to: 1
 21196                           ;encoder.c: 279: mainMenu.selector--;
 21197  00078C  076A               	decf	(_mainMenu+2)& (0+255),f,b
 21198  00078E                     l889:
 21199                           
 21200                           ;encoder.c: 280: }
 21201                           ;encoder.c: 281: }
 21202                           ;encoder.c: 282: if (which_screen == KEYBOARD_MENU) {
 21203                           
 21204                           ; BSR set to: 1
 21205                           
 21206                           ; BSR set to: 1
 21207  00078E  0E03               	movlw	3
 21208  000790  0100               	movlb	0	; () banked
 21209  000792  19F9               	xorwf	_which_screen& (0+255),w,b
 21210  000794  A4D8               	btfss	status,2,c
 21211  000796  D003               	goto	l891
 21212                           
 21213                           ; BSR set to: 0
 21214                           ;encoder.c: 283: if(keyboardMenu.selector > 0){
 21215  000798  504C               	movf	_keyboardMenu+2,w,c
 21216  00079A  A4D8               	btfss	status,2,c
 21217                           
 21218                           ; BSR set to: 0
 21219                           ;encoder.c: 284: keyboardMenu.selector--;
 21220  00079C  064C               	decf	_keyboardMenu+2,f,c
 21221  00079E                     l891:
 21222                           
 21223                           ; BSR set to: 0
 21224                           ;encoder.c: 285: }
 21225                           ;encoder.c: 286: }
 21226                           ;encoder.c: 287: if (which_screen == TRANSPOSE_MENU) {
 21227                           
 21228                           ; BSR set to: 0
 21229                           
 21230                           ; BSR set to: 0
 21231  00079E  0E04               	movlw	4
 21232  0007A0  19F9               	xorwf	_which_screen& (0+255),w,b
 21233  0007A2  A4D8               	btfss	status,2,c
 21234  0007A4  D004               	goto	l893
 21235                           
 21236                           ; BSR set to: 0
 21237                           ;encoder.c: 288: if(transposeMenu.selector > 0){
 21238  0007A6  0101               	movlb	1	; () banked
 21239  0007A8  5164               	movf	(_transposeMenu+2)& (0+255),w,b
 21240  0007AA  A4D8               	btfss	status,2,c
 21241                           
 21242                           ; BSR set to: 1
 21243                           ;encoder.c: 289: transposeMenu.selector--;
 21244  0007AC  0764               	decf	(_transposeMenu+2)& (0+255),f,b
 21245  0007AE                     l893:
 21246                           
 21247                           ;encoder.c: 290: }
 21248                           ;encoder.c: 291: }
 21249                           ;encoder.c: 292: if (which_screen == DRUM_MENU) {
 21250                           
 21251                           ; BSR set to: 1
 21252                           
 21253                           ; BSR set to: 1
 21254  0007AE  0E05               	movlw	5
 21255  0007B0  0100               	movlb	0	; () banked
 21256  0007B2  19F9               	xorwf	_which_screen& (0+255),w,b
 21257  0007B4  A4D8               	btfss	status,2,c
 21258  0007B6  D003               	goto	l895
 21259                           
 21260                           ; BSR set to: 0
 21261                           ;encoder.c: 293: if(drumMenu.selector > 0){
 21262  0007B8  5043               	movf	_drumMenu+2,w,c
 21263  0007BA  A4D8               	btfss	status,2,c
 21264                           
 21265                           ; BSR set to: 0
 21266                           ;encoder.c: 294: drumMenu.selector--;
 21267  0007BC  0643               	decf	_drumMenu+2,f,c
 21268  0007BE                     l895:
 21269                           
 21270                           ; BSR set to: 0
 21271                           ;encoder.c: 295: }
 21272                           ;encoder.c: 296: }
 21273                           ;encoder.c: 297: if (which_screen == POTENTIOMETER_MENU) {
 21274                           
 21275                           ; BSR set to: 0
 21276                           
 21277                           ; BSR set to: 0
 21278  0007BE  0E06               	movlw	6
 21279  0007C0  19F9               	xorwf	_which_screen& (0+255),w,b
 21280  0007C2  A4D8               	btfss	status,2,c
 21281  0007C4  D003               	goto	l897
 21282                           
 21283                           ; BSR set to: 0
 21284                           ;encoder.c: 298: if(potsMenu.selector > 0){
 21285  0007C6  5040               	movf	_potsMenu+2,w,c
 21286  0007C8  A4D8               	btfss	status,2,c
 21287                           
 21288                           ; BSR set to: 0
 21289                           ;encoder.c: 299: potsMenu.selector--;
 21290  0007CA  0640               	decf	_potsMenu+2,f,c
 21291  0007CC                     l897:
 21292                           
 21293                           ; BSR set to: 0
 21294                           ;encoder.c: 300: }
 21295                           ;encoder.c: 301: }
 21296                           ;encoder.c: 302: if (which_screen == MIDI_CHANNEL_MENU) {
 21297                           
 21298                           ; BSR set to: 0
 21299                           
 21300                           ; BSR set to: 0
 21301  0007CC  0E07               	movlw	7
 21302  0007CE  19F9               	xorwf	_which_screen& (0+255),w,b
 21303  0007D0  A4D8               	btfss	status,2,c
 21304  0007D2  D004               	goto	l899
 21305                           
 21306                           ; BSR set to: 0
 21307                           ;encoder.c: 303: if(midiChannelMenu.selector > 0){
 21308  0007D4  0101               	movlb	1	; () banked
 21309  0007D6  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 21310  0007D8  A4D8               	btfss	status,2,c
 21311                           
 21312                           ; BSR set to: 1
 21313                           ;encoder.c: 304: midiChannelMenu.selector--;
 21314  0007DA  0749               	decf	(_midiChannelMenu+2)& (0+255),f,b
 21315  0007DC                     l899:
 21316                           
 21317                           ;encoder.c: 305: }
 21318                           ;encoder.c: 306: }
 21319                           ;encoder.c: 308: if (which_screen == MODES_MENU) {
 21320                           
 21321                           ; BSR set to: 1
 21322                           
 21323                           ; BSR set to: 1
 21324  0007DC  0E09               	movlw	9
 21325  0007DE  0100               	movlb	0	; () banked
 21326  0007E0  19F9               	xorwf	_which_screen& (0+255),w,b
 21327  0007E2  A4D8               	btfss	status,2,c
 21328  0007E4  D003               	goto	l901
 21329                           
 21330                           ; BSR set to: 0
 21331                           ;encoder.c: 309: if(modeMenu.selector > 0){
 21332  0007E6  5049               	movf	_modeMenu+2,w,c
 21333  0007E8  A4D8               	btfss	status,2,c
 21334                           
 21335                           ; BSR set to: 0
 21336                           ;encoder.c: 310: modeMenu.selector--;
 21337  0007EA  0649               	decf	_modeMenu+2,f,c
 21338  0007EC                     l901:
 21339                           
 21340                           ; BSR set to: 0
 21341                           ;encoder.c: 311: }
 21342                           ;encoder.c: 312: }
 21343                           ;encoder.c: 314: if (which_screen == TRIADS_MENU) {
 21344                           
 21345                           ; BSR set to: 0
 21346                           
 21347                           ; BSR set to: 0
 21348  0007EC  0E0A               	movlw	10
 21349  0007EE  19F9               	xorwf	_which_screen& (0+255),w,b
 21350  0007F0  A4D8               	btfss	status,2,c
 21351  0007F2  D003               	goto	l903
 21352                           
 21353                           ; BSR set to: 0
 21354                           ;encoder.c: 315: if(triadMenu.selector > 0){
 21355  0007F4  5046               	movf	_triadMenu+2,w,c
 21356  0007F6  A4D8               	btfss	status,2,c
 21357                           
 21358                           ; BSR set to: 0
 21359                           ;encoder.c: 316: triadMenu.selector--;
 21360  0007F8  0646               	decf	_triadMenu+2,f,c
 21361  0007FA                     l903:
 21362                           
 21363                           ; BSR set to: 0
 21364                           ;encoder.c: 317: }
 21365                           ;encoder.c: 318: }
 21366                           ;encoder.c: 319: if (which_screen == SEVENTHS_MENU) {
 21367                           
 21368                           ; BSR set to: 0
 21369                           
 21370                           ; BSR set to: 0
 21371  0007FA  0E0B               	movlw	11
 21372  0007FC  19F9               	xorwf	_which_screen& (0+255),w,b
 21373  0007FE  A4D8               	btfss	status,2,c
 21374  000800  D004               	goto	l905
 21375                           
 21376                           ; BSR set to: 0
 21377                           ;encoder.c: 320: if(seventhMenu.selector > 0){
 21378  000802  0101               	movlb	1	; () banked
 21379  000804  5167               	movf	(_seventhMenu+2)& (0+255),w,b
 21380  000806  A4D8               	btfss	status,2,c
 21381                           
 21382                           ; BSR set to: 1
 21383                           ;encoder.c: 321: seventhMenu.selector--;
 21384  000808  0767               	decf	(_seventhMenu+2)& (0+255),f,b
 21385  00080A                     l905:
 21386                           
 21387                           ;encoder.c: 322: }
 21388                           ;encoder.c: 323: }
 21389                           ;encoder.c: 324: if (which_screen == DRUMS_CC_TYPE_MENU) {
 21390                           
 21391                           ; BSR set to: 1
 21392                           
 21393                           ; BSR set to: 1
 21394  00080A  0E0C               	movlw	12
 21395  00080C  0100               	movlb	0	; () banked
 21396  00080E  19F9               	xorwf	_which_screen& (0+255),w,b
 21397  000810  A4D8               	btfss	status,2,c
 21398  000812  D004               	goto	l907
 21399                           
 21400                           ; BSR set to: 0
 21401                           ;encoder.c: 325: if(drumCCTypeMenu.selector > 0){
 21402  000814  0101               	movlb	1	; () banked
 21403  000816  5161               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 21404  000818  A4D8               	btfss	status,2,c
 21405                           
 21406                           ; BSR set to: 1
 21407                           ;encoder.c: 326: drumCCTypeMenu.selector--;
 21408  00081A  0761               	decf	(_drumCCTypeMenu+2)& (0+255),f,b
 21409  00081C                     l907:
 21410                           
 21411                           ;encoder.c: 327: }
 21412                           ;encoder.c: 328: }
 21413                           ;encoder.c: 330: if (which_screen == DRUMS_NN_MENU) {
 21414                           
 21415                           ; BSR set to: 1
 21416                           
 21417                           ; BSR set to: 1
 21418  00081C  0E0D               	movlw	13
 21419  00081E  0100               	movlb	0	; () banked
 21420  000820  19F9               	xorwf	_which_screen& (0+255),w,b
 21421  000822  A4D8               	btfss	status,2,c
 21422  000824  D004               	goto	l909
 21423                           
 21424                           ; BSR set to: 0
 21425                           ;encoder.c: 331: if(drumNNMenu.selector > 0){
 21426  000826  0101               	movlb	1	; () banked
 21427  000828  515E               	movf	(_drumNNMenu+2)& (0+255),w,b
 21428  00082A  A4D8               	btfss	status,2,c
 21429                           
 21430                           ; BSR set to: 1
 21431                           ;encoder.c: 332: drumNNMenu.selector--;
 21432  00082C  075E               	decf	(_drumNNMenu+2)& (0+255),f,b
 21433  00082E                     l909:
 21434                           
 21435                           ;encoder.c: 333: }
 21436                           ;encoder.c: 334: }
 21437                           ;encoder.c: 336: if (which_screen == DRUMS_CC_MENU) {
 21438                           
 21439                           ; BSR set to: 1
 21440                           
 21441                           ; BSR set to: 1
 21442  00082E  0E0E               	movlw	14
 21443  000830  0100               	movlb	0	; () banked
 21444  000832  19F9               	xorwf	_which_screen& (0+255),w,b
 21445  000834  A4D8               	btfss	status,2,c
 21446  000836  D004               	goto	l911
 21447                           
 21448                           ; BSR set to: 0
 21449                           ;encoder.c: 337: if(drumCCMenu.selector > 0){
 21450  000838  0101               	movlb	1	; () banked
 21451  00083A  515B               	movf	(_drumCCMenu+2)& (0+255),w,b
 21452  00083C  A4D8               	btfss	status,2,c
 21453                           
 21454                           ; BSR set to: 1
 21455                           ;encoder.c: 338: drumCCMenu.selector--;
 21456  00083E  075B               	decf	(_drumCCMenu+2)& (0+255),f,b
 21457  000840                     l911:
 21458                           
 21459                           ;encoder.c: 339: }
 21460                           ;encoder.c: 340: }
 21461                           ;encoder.c: 342: if (which_screen == POTS_RES_MENU) {
 21462                           
 21463                           ; BSR set to: 1
 21464                           
 21465                           ; BSR set to: 1
 21466  000840  0E0F               	movlw	15
 21467  000842  0100               	movlb	0	; () banked
 21468  000844  19F9               	xorwf	_which_screen& (0+255),w,b
 21469  000846  A4D8               	btfss	status,2,c
 21470  000848  D004               	goto	l913
 21471                           
 21472                           ; BSR set to: 0
 21473                           ;encoder.c: 343: if(potsResoMenu.selector > 0){
 21474  00084A  0101               	movlb	1	; () banked
 21475  00084C  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 21476  00084E  A4D8               	btfss	status,2,c
 21477                           
 21478                           ; BSR set to: 1
 21479                           ;encoder.c: 344: potsResoMenu.selector--;
 21480  000850  0758               	decf	(_potsResoMenu+2)& (0+255),f,b
 21481  000852                     l913:
 21482                           
 21483                           ;encoder.c: 345: }
 21484                           ;encoder.c: 346: }
 21485                           ;encoder.c: 348: if (which_screen == ENCODER_POLARITY_MENU) {
 21486                           
 21487                           ; BSR set to: 1
 21488                           
 21489                           ; BSR set to: 1
 21490  000852  0E18               	movlw	24
 21491  000854  0100               	movlb	0	; () banked
 21492  000856  19F9               	xorwf	_which_screen& (0+255),w,b
 21493  000858  A4D8               	btfss	status,2,c
 21494  00085A  D006               	goto	l915
 21495                           
 21496                           ; BSR set to: 0
 21497                           ;encoder.c: 349: if(encoderPolarityMenu.selector == 1){
 21498  00085C  0101               	movlb	1	; () banked
 21499  00085E  053A               	decf	(_encoderPolarityMenu+2)& (0+255),w,b
 21500  000860  A4D8               	btfss	status,2,c
 21501  000862  D002               	goto	l915
 21502                           
 21503                           ; BSR set to: 1
 21504                           ;encoder.c: 350: encoderPolarityMenu.selector = 0;
 21505  000864  0E00               	movlw	0
 21506  000866  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 21507  000868                     l915:
 21508                           
 21509                           ;encoder.c: 351: }
 21510                           ;encoder.c: 352: }
 21511                           ;encoder.c: 354: if (which_screen == POTS_ALPHA_MENU) {
 21512                           
 21513                           ; BSR set to: 1
 21514                           
 21515                           ; BSR set to: 1
 21516  000868  0E10               	movlw	16
 21517  00086A  0100               	movlb	0	; () banked
 21518  00086C  19F9               	xorwf	_which_screen& (0+255),w,b
 21519  00086E  A4D8               	btfss	status,2,c
 21520  000870  D006               	goto	l917
 21521                           
 21522                           ; BSR set to: 0
 21523                           ;encoder.c: 355: if(potsAlphaMenu.selector >= 15){
 21524  000872  0E0E               	movlw	14
 21525  000874  0101               	movlb	1	; () banked
 21526  000876  6555               	cpfsgt	(_potsAlphaMenu+2)& (0+255),b
 21527  000878  D002               	goto	l917
 21528                           
 21529                           ; BSR set to: 1
 21530                           ;encoder.c: 356: potsAlphaMenu.selector -= 5;
 21531  00087A  0E05               	movlw	5
 21532  00087C  5F55               	subwf	(_potsAlphaMenu+2)& (0+255),f,b
 21533  00087E                     l917:
 21534                           
 21535                           ;encoder.c: 361: if(potsCCMenu.selector > -2){
 21536                           
 21537                           ; BSR set to: 1
 21538  00087E  0E11               	movlw	17
 21539  000880  0100               	movlb	0	; () banked
 21540  000882  19F9               	xorwf	_which_screen& (0+255),w,b
 21541  000884  A4D8               	btfss	status,2,c
 21542  000886  D002               	goto	l919
 21543                           
 21544                           ; BSR set to: 0
 21545                           ;encoder.c: 362: potsCCMenu.selector--;
 21546  000888  0101               	movlb	1	; () banked
 21547  00088A  0752               	decf	(_potsCCMenu+2)& (0+255),f,b
 21548  00088C                     l919:
 21549                           
 21550                           ;encoder.c: 367: if(slidepotsCCMenu.selector > -2){
 21551                           
 21552                           ; BSR set to: 1
 21553                           
 21554                           ; BSR set to: 1
 21555  00088C  0E12               	movlw	18
 21556  00088E  0100               	movlb	0	; () banked
 21557  000890  19F9               	xorwf	_which_screen& (0+255),w,b
 21558  000892  A4D8               	btfss	status,2,c
 21559  000894  D002               	goto	l921
 21560                           
 21561                           ; BSR set to: 0
 21562                           ;encoder.c: 368: slidepotsCCMenu.selector--;
 21563  000896  0101               	movlb	1	; () banked
 21564  000898  074F               	decf	(_slidepotsCCMenu+2)& (0+255),f,b
 21565  00089A                     l921:
 21566                           
 21567                           ;encoder.c: 369: }
 21568                           ;encoder.c: 370: }
 21569                           ;encoder.c: 371: if (which_screen == PROGRAM_CHANGE_MENU) {
 21570                           
 21571                           ; BSR set to: 1
 21572                           
 21573                           ; BSR set to: 1
 21574  00089A  0E08               	movlw	8
 21575  00089C  0100               	movlb	0	; () banked
 21576  00089E  19F9               	xorwf	_which_screen& (0+255),w,b
 21577  0008A0  A4D8               	btfss	status,2,c
 21578  0008A2  D004               	goto	l923
 21579                           
 21580                           ; BSR set to: 0
 21581                           ;encoder.c: 372: if(programChangeMenu.selector > 0){
 21582  0008A4  0101               	movlb	1	; () banked
 21583  0008A6  5146               	movf	(_programChangeMenu+2)& (0+255),w,b
 21584  0008A8  A4D8               	btfss	status,2,c
 21585                           
 21586                           ; BSR set to: 1
 21587                           ;encoder.c: 373: programChangeMenu.selector--;
 21588  0008AA  0746               	decf	(_programChangeMenu+2)& (0+255),f,b
 21589  0008AC                     l923:
 21590                           
 21591                           ;encoder.c: 374: }
 21592                           ;encoder.c: 375: }
 21593                           ;encoder.c: 377: if (which_screen == MAIN_CH_MENU) {
 21594                           
 21595                           ; BSR set to: 1
 21596                           
 21597                           ; BSR set to: 1
 21598  0008AC  0E14               	movlw	20
 21599  0008AE  0100               	movlb	0	; () banked
 21600  0008B0  19F9               	xorwf	_which_screen& (0+255),w,b
 21601  0008B2  A4D8               	btfss	status,2,c
 21602  0008B4  D004               	goto	l925
 21603                           
 21604                           ; BSR set to: 0
 21605                           ;encoder.c: 378: if(mainChannelMenu.selector > 0){
 21606  0008B6  0101               	movlb	1	; () banked
 21607  0008B8  5143               	movf	(_mainChannelMenu+2)& (0+255),w,b
 21608  0008BA  A4D8               	btfss	status,2,c
 21609                           
 21610                           ; BSR set to: 1
 21611                           ;encoder.c: 379: mainChannelMenu.selector--;
 21612  0008BC  0743               	decf	(_mainChannelMenu+2)& (0+255),f,b
 21613  0008BE                     l925:
 21614                           
 21615                           ;encoder.c: 380: }
 21616                           ;encoder.c: 381: }
 21617                           ;encoder.c: 383: if (which_screen == DRUM_CH_MENU) {
 21618                           
 21619                           ; BSR set to: 1
 21620                           
 21621                           ; BSR set to: 1
 21622  0008BE  0E15               	movlw	21
 21623  0008C0  0100               	movlb	0	; () banked
 21624  0008C2  19F9               	xorwf	_which_screen& (0+255),w,b
 21625  0008C4  A4D8               	btfss	status,2,c
 21626  0008C6  D004               	goto	l927
 21627                           
 21628                           ; BSR set to: 0
 21629                           ;encoder.c: 384: if(drumChannelMenu.selector > 0){
 21630  0008C8  0101               	movlb	1	; () banked
 21631  0008CA  5140               	movf	(_drumChannelMenu+2)& (0+255),w,b
 21632  0008CC  A4D8               	btfss	status,2,c
 21633                           
 21634                           ; BSR set to: 1
 21635                           ;encoder.c: 385: drumChannelMenu.selector--;
 21636  0008CE  0740               	decf	(_drumChannelMenu+2)& (0+255),f,b
 21637  0008D0                     l927:
 21638                           
 21639                           ;encoder.c: 390: if(joystickCCMenu.selector > -2){
 21640                           
 21641                           ; BSR set to: 1
 21642                           
 21643                           ; BSR set to: 1
 21644  0008D0  0E13               	movlw	19
 21645  0008D2  0100               	movlb	0	; () banked
 21646  0008D4  19F9               	xorwf	_which_screen& (0+255),w,b
 21647  0008D6  A4D8               	btfss	status,2,c
 21648  0008D8  D002               	goto	l929
 21649                           
 21650                           ; BSR set to: 0
 21651                           ;encoder.c: 391: joystickCCMenu.selector--;
 21652  0008DA  0101               	movlb	1	; () banked
 21653  0008DC  074C               	decf	(_joystickCCMenu+2)& (0+255),f,b
 21654  0008DE                     l929:
 21655                           
 21656                           ;encoder.c: 392: }
 21657                           ;encoder.c: 393: }
 21658                           ;encoder.c: 394: if (which_screen == EEPROM_MENU) {
 21659                           
 21660                           ; BSR set to: 1
 21661                           
 21662                           ; BSR set to: 1
 21663  0008DE  0E16               	movlw	22
 21664  0008E0  0100               	movlb	0	; () banked
 21665  0008E2  19F9               	xorwf	_which_screen& (0+255),w,b
 21666  0008E4  A4D8               	btfss	status,2,c
 21667  0008E6  D004               	goto	l931
 21668                           
 21669                           ; BSR set to: 0
 21670                           ;encoder.c: 395: if(eepromMenu.selector > 0){
 21671  0008E8  0101               	movlb	1	; () banked
 21672  0008EA  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 21673  0008EC  A4D8               	btfss	status,2,c
 21674                           
 21675                           ; BSR set to: 1
 21676                           ;encoder.c: 396: eepromMenu.selector--;
 21677  0008EE  073D               	decf	(_eepromMenu+2)& (0+255),f,b
 21678  0008F0                     l931:
 21679                           
 21680                           ;encoder.c: 397: }
 21681                           ;encoder.c: 398: }
 21682                           ;encoder.c: 399: if (which_screen == SAVES_MENU) {
 21683                           
 21684                           ; BSR set to: 1
 21685                           
 21686                           ; BSR set to: 1
 21687  0008F0  0E17               	movlw	23
 21688  0008F2  0100               	movlb	0	; () banked
 21689  0008F4  19F9               	xorwf	_which_screen& (0+255),w,b
 21690  0008F6  A4D8               	btfss	status,2,c
 21691  0008F8  D003               	goto	l933
 21692                           
 21693                           ; BSR set to: 0
 21694                           ;encoder.c: 400: if(savesMenu.selector > 0){
 21695  0008FA  51E1               	movf	(_savesMenu+2)& (0+255),w,b
 21696  0008FC  A4D8               	btfss	status,2,c
 21697                           
 21698                           ; BSR set to: 0
 21699                           ;encoder.c: 401: savesMenu.selector--;
 21700  0008FE  07E1               	decf	(_savesMenu+2)& (0+255),f,b
 21701  000900                     l933:
 21702                           
 21703                           ; BSR set to: 0
 21704                           ;encoder.c: 402: }
 21705                           ;encoder.c: 403: }
 21706                           ;encoder.c: 404: if (which_screen == ARPEGGIATOR_MENU) {
 21707                           
 21708                           ; BSR set to: 0
 21709                           
 21710                           ; BSR set to: 0
 21711  000900  0E19               	movlw	25
 21712  000902  19F9               	xorwf	_which_screen& (0+255),w,b
 21713  000904  A4D8               	btfss	status,2,c
 21714  000906  D003               	goto	l935
 21715                           
 21716                           ; BSR set to: 0
 21717                           ;encoder.c: 405: if(arpeggiatorMenu.selector > 0){
 21718  000908  503D               	movf	_arpeggiatorMenu+2,w,c
 21719  00090A  A4D8               	btfss	status,2,c
 21720                           
 21721                           ; BSR set to: 0
 21722                           ;encoder.c: 406: arpeggiatorMenu.selector--;
 21723  00090C  063D               	decf	_arpeggiatorMenu+2,f,c
 21724  00090E                     l935:
 21725                           
 21726                           ; BSR set to: 0
 21727                           ;encoder.c: 407: }
 21728                           ;encoder.c: 408: }
 21729                           ;encoder.c: 409: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 21730                           
 21731                           ; BSR set to: 0
 21732                           
 21733                           ; BSR set to: 0
 21734  00090E  0E1A               	movlw	26
 21735  000910  19F9               	xorwf	_which_screen& (0+255),w,b
 21736  000912  A4D8               	btfss	status,2,c
 21737  000914  D003               	goto	l936
 21738                           
 21739                           ; BSR set to: 0
 21740                           ;encoder.c: 410: arpeggiatorOnOffMenu.selector ^= 1;
 21741  000916  0E01               	movlw	1
 21742  000918  0101               	movlb	1	; () banked
 21743  00091A  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 21744  00091C                     l936:
 21745                           
 21746                           ;encoder.c: 414: }
 21747                           ;encoder.c: 415: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 21748  00091C  0E1B               	movlw	27
 21749  00091E  0100               	movlb	0	; () banked
 21750  000920  19F9               	xorwf	_which_screen& (0+255),w,b
 21751  000922  A4D8               	btfss	status,2,c
 21752  000924  D005               	goto	l938
 21753                           
 21754                           ; BSR set to: 0
 21755                           ;encoder.c: 416: if(arpeggiatorTempoMenu.selector > 25){
 21756  000926  0E19               	movlw	25
 21757  000928  0101               	movlb	1	; () banked
 21758  00092A  6534               	cpfsgt	(_arpeggiatorTempoMenu+2)& (0+255),b
 21759  00092C  D001               	goto	l938
 21760                           
 21761                           ; BSR set to: 1
 21762                           ;encoder.c: 417: arpeggiatorTempoMenu.selector--;
 21763  00092E  0734               	decf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 21764  000930                     l938:
 21765                           
 21766                           ;encoder.c: 418: }
 21767                           ;encoder.c: 419: }
 21768                           ;encoder.c: 420: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 21769                           
 21770                           ; BSR set to: 1
 21771                           
 21772                           ; BSR set to: 1
 21773  000930  0E1C               	movlw	28
 21774  000932  0100               	movlb	0	; () banked
 21775  000934  19F9               	xorwf	_which_screen& (0+255),w,b
 21776  000936  A4D8               	btfss	status,2,c
 21777  000938  D005               	goto	l940
 21778                           
 21779                           ; BSR set to: 0
 21780                           ;encoder.c: 421: if(arpeggiatorOctavesMenu.selector > 1){
 21781  00093A  0E01               	movlw	1
 21782  00093C  0101               	movlb	1	; () banked
 21783  00093E  6531               	cpfsgt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 21784  000940  D001               	goto	l940
 21785                           
 21786                           ; BSR set to: 1
 21787                           ;encoder.c: 422: arpeggiatorOctavesMenu.selector--;
 21788  000942  0731               	decf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 21789  000944                     l940:
 21790                           
 21791                           ;encoder.c: 423: }
 21792                           ;encoder.c: 424: }
 21793                           ;encoder.c: 425: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 21794                           
 21795                           ; BSR set to: 1
 21796                           
 21797                           ; BSR set to: 1
 21798  000944  0E1D               	movlw	29
 21799  000946  0100               	movlb	0	; () banked
 21800  000948  19F9               	xorwf	_which_screen& (0+255),w,b
 21801  00094A  A4D8               	btfss	status,2,c
 21802  00094C  D004               	goto	l942
 21803                           
 21804                           ; BSR set to: 0
 21805                           ;encoder.c: 426: if(arpeggiatorTypeMenu.selector > 0){
 21806  00094E  0101               	movlb	1	; () banked
 21807  000950  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 21808  000952  A4D8               	btfss	status,2,c
 21809                           
 21810                           ; BSR set to: 1
 21811                           ;encoder.c: 427: arpeggiatorTypeMenu.selector--;
 21812  000954  072E               	decf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 21813  000956                     l942:
 21814                           
 21815                           ;encoder.c: 428: }
 21816                           ;encoder.c: 429: }
 21817                           ;encoder.c: 430: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 21818                           
 21819                           ; BSR set to: 1
 21820                           
 21821                           ; BSR set to: 1
 21822  000956  0E1E               	movlw	30
 21823  000958  0100               	movlb	0	; () banked
 21824  00095A  19F9               	xorwf	_which_screen& (0+255),w,b
 21825  00095C  A4D8               	btfss	status,2,c
 21826  00095E  D004               	goto	l944
 21827                           
 21828                           ; BSR set to: 0
 21829                           ;encoder.c: 431: if(arpeggiatorNoteLengthMenu.selector > 0){
 21830  000960  0101               	movlb	1	; () banked
 21831  000962  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 21832  000964  A4D8               	btfss	status,2,c
 21833                           
 21834                           ; BSR set to: 1
 21835                           ;encoder.c: 432: arpeggiatorNoteLengthMenu.selector--;
 21836  000966  072B               	decf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 21837  000968                     l944:
 21838                           
 21839                           ;encoder.c: 433: }
 21840                           ;encoder.c: 434: }
 21841                           ;encoder.c: 435: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 21842                           
 21843                           ; BSR set to: 1
 21844                           
 21845                           ; BSR set to: 1
 21846  000968  0E1F               	movlw	31
 21847  00096A  0100               	movlb	0	; () banked
 21848  00096C  19F9               	xorwf	_which_screen& (0+255),w,b
 21849  00096E  A4D8               	btfss	status,2,c
 21850  000970  D004               	goto	l946
 21851                           
 21852                           ; BSR set to: 0
 21853                           ;encoder.c: 437: if(arpeggiatorLatchMenu.selector > 0){
 21854  000972  0101               	movlb	1	; () banked
 21855  000974  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 21856  000976  A4D8               	btfss	status,2,c
 21857                           
 21858                           ; BSR set to: 1
 21859                           ;encoder.c: 438: arpeggiatorLatchMenu.selector--;
 21860  000978  0728               	decf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 21861  00097A                     l946:
 21862                           
 21863                           ;encoder.c: 439: }
 21864                           ;encoder.c: 440: }
 21865                           ;encoder.c: 441: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 21866                           
 21867                           ; BSR set to: 1
 21868                           
 21869                           ; BSR set to: 1
 21870  00097A  0E20               	movlw	32
 21871  00097C  0100               	movlb	0	; () banked
 21872  00097E  19F9               	xorwf	_which_screen& (0+255),w,b
 21873  000980  A4D8               	btfss	status,2,c
 21874  000982  D003               	goto	l947
 21875                           
 21876                           ; BSR set to: 0
 21877                           ;encoder.c: 442: arpeggiatorLatchOnOffMenu.selector ^= 1;
 21878  000984  0E01               	movlw	1
 21879  000986  0101               	movlb	1	; () banked
 21880  000988  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 21881  00098A                     l947:
 21882                           
 21883                           ;encoder.c: 443: }
 21884                           ;encoder.c: 444: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 21885  00098A  0E21               	movlw	33
 21886  00098C  0100               	movlb	0	; () banked
 21887  00098E  19F9               	xorwf	_which_screen& (0+255),w,b
 21888  000990  A4D8               	btfss	status,2,c
 21889  000992  D003               	goto	l948
 21890                           
 21891                           ; BSR set to: 0
 21892                           ;encoder.c: 445: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 21893  000994  0E01               	movlw	1
 21894  000996  0101               	movlb	1	; () banked
 21895  000998  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 21896  00099A                     l948:
 21897                           
 21898                           ;encoder.c: 446: }
 21899                           ;encoder.c: 447: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 21900  00099A  0E22               	movlw	34
 21901  00099C  0100               	movlb	0	; () banked
 21902  00099E  19F9               	xorwf	_which_screen& (0+255),w,b
 21903  0009A0  A4D8               	btfss	status,2,c
 21904  0009A2  D003               	goto	l949
 21905                           
 21906                           ; BSR set to: 0
 21907                           ;encoder.c: 448: arpeggiatorUnLatchModeMenu.selector ^= 1;
 21908  0009A4  0E01               	movlw	1
 21909  0009A6  0101               	movlb	1	; () banked
 21910  0009A8  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 21911  0009AA                     l949:
 21912                           
 21913                           ;encoder.c: 449: }
 21914                           ;encoder.c: 450: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 21915  0009AA  0E23               	movlw	35
 21916  0009AC  0100               	movlb	0	; () banked
 21917  0009AE  19F9               	xorwf	_which_screen& (0+255),w,b
 21918  0009B0  A4D8               	btfss	status,2,c
 21919  0009B2  D004               	goto	l951
 21920                           
 21921                           ; BSR set to: 0
 21922                           ;encoder.c: 451: if(arpeggiatorRandomizeSkipMenu.selector > 0){
 21923  0009B4  0101               	movlb	1	; () banked
 21924  0009B6  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 21925  0009B8  A4D8               	btfss	status,2,c
 21926                           
 21927                           ; BSR set to: 1
 21928                           ;encoder.c: 452: arpeggiatorRandomizeSkipMenu.selector--;
 21929  0009BA  071C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 21930  0009BC                     l951:
 21931                           
 21932                           ;encoder.c: 453: }
 21933                           ;encoder.c: 454: }
 21934                           ;encoder.c: 455: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 21935                           
 21936                           ; BSR set to: 1
 21937                           
 21938                           ; BSR set to: 1
 21939  0009BC  0E24               	movlw	36
 21940  0009BE  0100               	movlb	0	; () banked
 21941  0009C0  19F9               	xorwf	_which_screen& (0+255),w,b
 21942  0009C2  A4D8               	btfss	status,2,c
 21943  0009C4  D003               	goto	l952
 21944                           
 21945                           ; BSR set to: 0
 21946                           ;encoder.c: 456: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 21947  0009C6  0E01               	movlw	1
 21948  0009C8  0101               	movlb	1	; () banked
 21949  0009CA  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 21950  0009CC                     l952:
 21951                           
 21952                           ;encoder.c: 460: }
 21953                           ;encoder.c: 461: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 21954  0009CC  0E25               	movlw	37
 21955  0009CE  0100               	movlb	0	; () banked
 21956  0009D0  19F9               	xorwf	_which_screen& (0+255),w,b
 21957  0009D2  A4D8               	btfss	status,2,c
 21958  0009D4  D003               	goto	l953
 21959                           
 21960                           ; BSR set to: 0
 21961                           ;encoder.c: 462: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 21962  0009D6  0E01               	movlw	1
 21963  0009D8  0101               	movlb	1	; () banked
 21964  0009DA  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 21965  0009DC                     l953:
 21966                           
 21967                           ;encoder.c: 463: }
 21968                           ;encoder.c: 464: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 21969  0009DC  0E26               	movlw	38
 21970  0009DE  0100               	movlb	0	; () banked
 21971  0009E0  19F9               	xorwf	_which_screen& (0+255),w,b
 21972  0009E2  A4D8               	btfss	status,2,c
 21973  0009E4  D003               	goto	l955
 21974                           
 21975                           ; BSR set to: 0
 21976                           ;encoder.c: 465: if(arpeggiatorLastNoteModeMenu.selector > 0){
 21977  0009E6  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 21978  0009E8  A4D8               	btfss	status,2,c
 21979                           
 21980                           ; BSR set to: 0
 21981                           ;encoder.c: 466: arpeggiatorLastNoteModeMenu.selector--;
 21982  0009EA  07DE               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 21983  0009EC                     l955:
 21984                           
 21985                           ; BSR set to: 0
 21986                           ;encoder.c: 467: }
 21987                           ;encoder.c: 468: }
 21988                           ;encoder.c: 469: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 21989                           
 21990                           ; BSR set to: 0
 21991                           
 21992                           ; BSR set to: 0
 21993  0009EC  0E27               	movlw	39
 21994  0009EE  19F9               	xorwf	_which_screen& (0+255),w,b
 21995  0009F0  A4D8               	btfss	status,2,c
 21996  0009F2  D003               	goto	l956
 21997                           
 21998                           ; BSR set to: 0
 21999                           ;encoder.c: 470: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 22000  0009F4  0E01               	movlw	1
 22001  0009F6  0101               	movlb	1	; () banked
 22002  0009F8  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 22003  0009FA                     l956:
 22004                           
 22005                           ;encoder.c: 471: }
 22006                           ;encoder.c: 472: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 22007  0009FA  0E28               	movlw	40
 22008  0009FC  0100               	movlb	0	; () banked
 22009  0009FE  19F9               	xorwf	_which_screen& (0+255),w,b
 22010  000A00  A4D8               	btfss	status,2,c
 22011  000A02  D003               	goto	l957
 22012                           
 22013                           ; BSR set to: 0
 22014                           ;encoder.c: 473: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 22015  000A04  0E01               	movlw	1
 22016  000A06  0101               	movlb	1	; () banked
 22017  000A08  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 22018  000A0A                     l957:
 22019                           
 22020                           ;encoder.c: 474: }
 22021                           ;encoder.c: 475: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22022  000A0A  0E29               	movlw	41
 22023  000A0C  0100               	movlb	0	; () banked
 22024  000A0E  19F9               	xorwf	_which_screen& (0+255),w,b
 22025  000A10  A4D8               	btfss	status,2,c
 22026  000A12  D003               	goto	l958
 22027                           
 22028                           ; BSR set to: 0
 22029                           ;encoder.c: 476: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22030  000A14  0E01               	movlw	1
 22031  000A16  0101               	movlb	1	; () banked
 22032  000A18  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22033  000A1A                     l958:
 22034                           
 22035                           ;encoder.c: 477: }
 22036                           ;encoder.c: 478: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22037  000A1A  0E29               	movlw	41
 22038  000A1C  0100               	movlb	0	; () banked
 22039  000A1E  19F9               	xorwf	_which_screen& (0+255),w,b
 22040  000A20  A4D8               	btfss	status,2,c
 22041  000A22  D003               	goto	l959
 22042                           
 22043                           ; BSR set to: 0
 22044                           ;encoder.c: 479: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22045  000A24  0E01               	movlw	1
 22046  000A26  0101               	movlb	1	; () banked
 22047  000A28  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22048  000A2A                     l959:
 22049                           
 22050                           ;encoder.c: 480: }
 22051                           ;encoder.c: 481: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 22052  000A2A  0E2A               	movlw	42
 22053  000A2C  0100               	movlb	0	; () banked
 22054  000A2E  19F9               	xorwf	_which_screen& (0+255),w,b
 22055  000A30  A4D8               	btfss	status,2,c
 22056  000A32  D003               	goto	l960
 22057                           
 22058                           ; BSR set to: 0
 22059                           ;encoder.c: 482: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 22060  000A34  0E01               	movlw	1
 22061  000A36  0101               	movlb	1	; () banked
 22062  000A38  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 22063  000A3A                     l960:
 22064                           
 22065                           ;encoder.c: 483: }
 22066                           ;encoder.c: 484: }
 22067                           ;encoder.c: 486: encoder_direction = 0x00;
 22068                           
 22069                           ; BSR set to: 1
 22070                           
 22071                           ; BSR set to: 1
 22072  000A3A  0E00               	movlw	0
 22073  000A3C  0100               	movlb	0	; () banked
 22074  000A3E  6FEB               	movwf	_encoder_direction& (0+255),b
 22075                           
 22076                           ; BSR set to: 0
 22077  000A40  0012               	return		;funcret
 22078  000A42                     __end_of_processEncoderBuxton:
 22079                           	opt stack 0
 22080                           tblptru	equ	0xFF8
 22081                           tblptrh	equ	0xFF7
 22082                           tblptrl	equ	0xFF6
 22083                           tablat	equ	0xFF5
 22084                           prodh	equ	0xFF4
 22085                           prodl	equ	0xFF3
 22086                           intcon	equ	0xFF2
 22087                           intcon2	equ	0xFF1
 22088                           postinc0	equ	0xFEE
 22089                           wreg	equ	0xFE8
 22090                           postdec1	equ	0xFE5
 22091                           fsr1l	equ	0xFE1
 22092                           indf2	equ	0xFDF
 22093                           postinc2	equ	0xFDE
 22094                           plusw2	equ	0xFDB
 22095                           fsr2h	equ	0xFDA
 22096                           fsr2l	equ	0xFD9
 22097                           status	equ	0xFD8
 22098                           
 22099 ;; *************** function _clear_row2 *****************
 22100 ;; Defined at:
 22101 ;;		line 79 in file "menu.c"
 22102 ;; Parameters:    Size  Location     Type
 22103 ;;		None
 22104 ;; Auto vars:     Size  Location     Type
 22105 ;;		None
 22106 ;; Return value:  Size  Location     Type
 22107 ;;                  1    wreg      void 
 22108 ;; Registers used:
 22109 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 22110 ;; Tracked objects:
 22111 ;;		On entry : 0/0
 22112 ;;		On exit  : 0/0
 22113 ;;		Unchanged: 0/0
 22114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22119 ;;Total ram usage:        0 bytes
 22120 ;; Hardware stack levels used:    1
 22121 ;; Hardware stack levels required when called:    8
 22122 ;; This function calls:
 22123 ;;		_Lcd_Print_String
 22124 ;;		_Lcd_Set_Cursor
 22125 ;; This function is called by:
 22126 ;;		_Function_A_1
 22127 ;;		_Function_A_2
 22128 ;;		_Function_A_3
 22129 ;;		_Function_A
 22130 ;;		_Function_B
 22131 ;;		_Function_C_1
 22132 ;;		_Function_C_2
 22133 ;;		_Function_C_3
 22134 ;;		_Function_C
 22135 ;;		_Function_D_1
 22136 ;;		_Function_D_3
 22137 ;;		_Function_D_4
 22138 ;;		_Function_D_5
 22139 ;;		_Function_D
 22140 ;;		_Function_E
 22141 ;;		_Function_F
 22142 ;;		_Function_G_1
 22143 ;;		_Function_G_2
 22144 ;;		_Function_G_3
 22145 ;;		_Function_G_4
 22146 ;;		_Function_G
 22147 ;;		_Function_H
 22148 ;;		_Function_H_1
 22149 ;;		_Function_H_2
 22150 ;;		_Function_H_3
 22151 ;;		_Function_H_4
 22152 ;;		_Function_H_5
 22153 ;;		_Function_H_6_1
 22154 ;;		_Function_H_6_2
 22155 ;;		_Function_H_6
 22156 ;;		_Function_H_7
 22157 ;;		_Function_H_8_1
 22158 ;;		_Function_H_8_2
 22159 ;;		_Function_H_8
 22160 ;;		_Function_H_9_1
 22161 ;;		_Function_H_9_2
 22162 ;;		_Function_H_9_3
 22163 ;;		_Function_H_9_4
 22164 ;;		_Function_H_9
 22165 ;; This function uses a non-reentrant model
 22166 ;;
 22167                           
 22168                           	psect	text63
 22169  00947C                     __ptext63:
 22170                           	opt stack 0
 22171  00947C                     _clear_row2:
 22172                           	opt stack 20
 22173                           
 22174                           ;menu.c: 80: Lcd_Set_Cursor(2,1);
 22175                           
 22176                           ; BSR set to: 0
 22177                           ;incstack = 0
 22178  00947C  0E01               	movlw	1
 22179  00947E  0100               	movlb	0	; () banked
 22180  009480  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 22181  009482  0E02               	movlw	2
 22182  009484  ECEC  F045         	call	_Lcd_Set_Cursor
 22183                           
 22184                           ;menu.c: 81: Lcd_Print_String("                ");
 22185  009488  0E64               	movlw	low STR_10
 22186  00948A  0100               	movlb	0	; () banked
 22187  00948C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 22188  00948E  0EFD               	movlw	high STR_10
 22189  009490  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 22190  009492  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 22191                           
 22192                           ;menu.c: 82: Lcd_Set_Cursor(2,1);
 22193  009496  0E01               	movlw	1
 22194  009498  0100               	movlb	0	; () banked
 22195  00949A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 22196  00949C  0E02               	movlw	2
 22197  00949E  ECEC  F045         	call	_Lcd_Set_Cursor
 22198  0094A2  0012               	return		;funcret
 22199  0094A4                     __end_of_clear_row2:
 22200                           	opt stack 0
 22201                           tblptru	equ	0xFF8
 22202                           tblptrh	equ	0xFF7
 22203                           tblptrl	equ	0xFF6
 22204                           tablat	equ	0xFF5
 22205                           prodh	equ	0xFF4
 22206                           prodl	equ	0xFF3
 22207                           intcon	equ	0xFF2
 22208                           intcon2	equ	0xFF1
 22209                           postinc0	equ	0xFEE
 22210                           wreg	equ	0xFE8
 22211                           postdec1	equ	0xFE5
 22212                           fsr1l	equ	0xFE1
 22213                           indf2	equ	0xFDF
 22214                           postinc2	equ	0xFDE
 22215                           plusw2	equ	0xFDB
 22216                           fsr2h	equ	0xFDA
 22217                           fsr2l	equ	0xFD9
 22218                           status	equ	0xFD8
 22219                           
 22220 ;; *************** function _clear_row1 *****************
 22221 ;; Defined at:
 22222 ;;		line 72 in file "menu.c"
 22223 ;; Parameters:    Size  Location     Type
 22224 ;;		None
 22225 ;; Auto vars:     Size  Location     Type
 22226 ;;		None
 22227 ;; Return value:  Size  Location     Type
 22228 ;;                  1    wreg      void 
 22229 ;; Registers used:
 22230 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 22231 ;; Tracked objects:
 22232 ;;		On entry : 0/0
 22233 ;;		On exit  : 0/0
 22234 ;;		Unchanged: 0/0
 22235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22240 ;;Total ram usage:        0 bytes
 22241 ;; Hardware stack levels used:    1
 22242 ;; Hardware stack levels required when called:    8
 22243 ;; This function calls:
 22244 ;;		_Lcd_Print_String
 22245 ;;		_Lcd_Set_Cursor
 22246 ;; This function is called by:
 22247 ;;		_exitFunction
 22248 ;;		_exitSave
 22249 ;;		_exitLoad
 22250 ;;		_eepromExit
 22251 ;;		_Function_A_1
 22252 ;;		_Function_A_2
 22253 ;;		_Function_A_3
 22254 ;;		_Function_C_1
 22255 ;;		_Function_C_2
 22256 ;;		_Function_C_3
 22257 ;;		_Function_D_1
 22258 ;;		_Function_D_3
 22259 ;;		_Function_D_4
 22260 ;;		_Function_D_5
 22261 ;;		_Function_G_1
 22262 ;;		_Function_G_2
 22263 ;;		_Function_G_3
 22264 ;;		_Function_G_4
 22265 ;;		_Function_H_4
 22266 ;;		_Function_H_5
 22267 ;;		_Function_H_6_1
 22268 ;;		_Function_H_6_2
 22269 ;;		_Function_H_7
 22270 ;;		_Function_H_8_1
 22271 ;;		_Function_H_9_1
 22272 ;;		_Function_H_9_2
 22273 ;;		_Function_H_9_3
 22274 ;;		_Function_H_9_4
 22275 ;;		_Function_H_9
 22276 ;; This function uses a non-reentrant model
 22277 ;;
 22278                           
 22279                           	psect	text64
 22280  0094A4                     __ptext64:
 22281                           	opt stack 0
 22282  0094A4                     _clear_row1:
 22283                           	opt stack 20
 22284                           
 22285                           ;menu.c: 73: Lcd_Set_Cursor(1,1);
 22286                           
 22287                           ;incstack = 0
 22288  0094A4  0E01               	movlw	1
 22289  0094A6  0100               	movlb	0	; () banked
 22290  0094A8  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 22291  0094AA  0E01               	movlw	1
 22292  0094AC  ECEC  F045         	call	_Lcd_Set_Cursor
 22293                           
 22294                           ;menu.c: 74: Lcd_Print_String("                ");
 22295  0094B0  0E64               	movlw	low STR_10
 22296  0094B2  0100               	movlb	0	; () banked
 22297  0094B4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 22298  0094B6  0EFD               	movlw	high STR_10
 22299  0094B8  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 22300  0094BA  ECB2  F040         	call	_Lcd_Print_String	;wreg free
 22301                           
 22302                           ;menu.c: 75: Lcd_Set_Cursor(1,1);
 22303  0094BE  0E01               	movlw	1
 22304  0094C0  0100               	movlb	0	; () banked
 22305  0094C2  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 22306  0094C4  0E01               	movlw	1
 22307  0094C6  ECEC  F045         	call	_Lcd_Set_Cursor
 22308  0094CA  0012               	return		;funcret
 22309  0094CC                     __end_of_clear_row1:
 22310                           	opt stack 0
 22311                           tblptru	equ	0xFF8
 22312                           tblptrh	equ	0xFF7
 22313                           tblptrl	equ	0xFF6
 22314                           tablat	equ	0xFF5
 22315                           prodh	equ	0xFF4
 22316                           prodl	equ	0xFF3
 22317                           intcon	equ	0xFF2
 22318                           intcon2	equ	0xFF1
 22319                           postinc0	equ	0xFEE
 22320                           wreg	equ	0xFE8
 22321                           postdec1	equ	0xFE5
 22322                           fsr1l	equ	0xFE1
 22323                           indf2	equ	0xFDF
 22324                           postinc2	equ	0xFDE
 22325                           plusw2	equ	0xFDB
 22326                           fsr2h	equ	0xFDA
 22327                           fsr2l	equ	0xFD9
 22328                           status	equ	0xFD8
 22329                           
 22330 ;; *************** function _Lcd_Set_Cursor *****************
 22331 ;; Defined at:
 22332 ;;		line 59 in file "lcd.c"
 22333 ;; Parameters:    Size  Location     Type
 22334 ;;  a               1    wreg     unsigned char 
 22335 ;;  b               1    3[BANK0 ] unsigned char 
 22336 ;; Auto vars:     Size  Location     Type
 22337 ;;  a               1    4[BANK0 ] unsigned char 
 22338 ;;  temp            1    7[BANK0 ] unsigned char 
 22339 ;;  y               1    6[BANK0 ] unsigned char 
 22340 ;;  z               1    5[BANK0 ] unsigned char 
 22341 ;; Return value:  Size  Location     Type
 22342 ;;                  1    wreg      void 
 22343 ;; Registers used:
 22344 ;;		wreg, status,2, status,0, cstack
 22345 ;; Tracked objects:
 22346 ;;		On entry : 0/0
 22347 ;;		On exit  : 0/0
 22348 ;;		Unchanged: 0/0
 22349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22350 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22351 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22353 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22354 ;;Total ram usage:        5 bytes
 22355 ;; Hardware stack levels used:    1
 22356 ;; Hardware stack levels required when called:    7
 22357 ;; This function calls:
 22358 ;;		_Lcd_Cmd
 22359 ;; This function is called by:
 22360 ;;		_clear_row1
 22361 ;;		_clear_row2
 22362 ;;		_setControllerNumbers
 22363 ;;		_menu_lcd
 22364 ;;		_Function_C_2
 22365 ;;		_Function_C_3
 22366 ;;		_Function_D_2
 22367 ;;		_Function_E_1
 22368 ;;		_Function_E_2
 22369 ;;		_Function_F
 22370 ;;		_Function_H_2
 22371 ;;		_Function_H_3
 22372 ;; This function uses a non-reentrant model
 22373 ;;
 22374                           
 22375                           	psect	text65
 22376  008BD8                     __ptext65:
 22377                           	opt stack 0
 22378  008BD8                     _Lcd_Set_Cursor:
 22379                           	opt stack 20
 22380                           
 22381                           ;incstack = 0
 22382                           ;Lcd_Set_Cursor@a stored from wreg
 22383  008BD8  0100               	movlb	0	; () banked
 22384  008BDA  6F64               	movwf	Lcd_Set_Cursor@a& (0+255),b
 22385                           
 22386                           ;lcd.c: 61: char temp,z,y;
 22387                           ;lcd.c: 62: if(a== 1)
 22388  008BDC  0100               	movlb	0	; () banked
 22389  008BDE  0564               	decf	Lcd_Set_Cursor@a& (0+255),w,b
 22390  008BE0  A4D8               	btfss	status,2,c
 22391  008BE2  D011               	goto	l36
 22392                           
 22393                           ; BSR set to: 0
 22394                           ;lcd.c: 63: {
 22395                           ;lcd.c: 64: temp = 0x80 + b - 1;
 22396  008BE4  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 22397  008BE6  0F7F               	addlw	127
 22398  008BE8  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 22399                           
 22400                           ;lcd.c: 65: z = temp>>4;
 22401  008BEA  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 22402  008BEC  0B0F               	andlw	15
 22403  008BEE  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 22404                           
 22405                           ;lcd.c: 66: y = temp & 0x0F;
 22406  008BF0  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 22407  008BF2  0B0F               	andlw	15
 22408  008BF4  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 22409                           
 22410                           ; BSR set to: 0
 22411                           ;lcd.c: 67: Lcd_Cmd(z);
 22412  008BF6  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 22413  008BF8  EC7A  F04A         	call	_Lcd_Cmd
 22414                           
 22415                           ;lcd.c: 68: Lcd_Cmd(y);
 22416  008BFC  0100               	movlb	0	; () banked
 22417  008BFE  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 22418  008C00  EC7A  F04A         	call	_Lcd_Cmd
 22419                           
 22420                           ;lcd.c: 69: }
 22421  008C04  0012               	return	
 22422  008C06                     l36:
 22423                           
 22424                           ;lcd.c: 70: else if(a== 2)
 22425  008C06  0E02               	movlw	2
 22426  008C08  0100               	movlb	0	; () banked
 22427  008C0A  1964               	xorwf	Lcd_Set_Cursor@a& (0+255),w,b
 22428  008C0C  A4D8               	btfss	status,2,c
 22429  008C0E  0012               	return	
 22430                           
 22431                           ; BSR set to: 0
 22432                           ;lcd.c: 71: {
 22433                           ;lcd.c: 72: temp = 0xC0 + b - 1;
 22434  008C10  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 22435  008C12  0FBF               	addlw	191
 22436  008C14  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 22437                           
 22438                           ;lcd.c: 73: z = temp>>4;
 22439  008C16  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 22440  008C18  0B0F               	andlw	15
 22441  008C1A  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 22442                           
 22443                           ;lcd.c: 74: y = temp & 0x0F;
 22444  008C1C  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 22445  008C1E  0B0F               	andlw	15
 22446  008C20  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 22447                           
 22448                           ; BSR set to: 0
 22449                           ;lcd.c: 75: Lcd_Cmd(z);
 22450  008C22  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 22451  008C24  EC7A  F04A         	call	_Lcd_Cmd
 22452                           
 22453                           ;lcd.c: 76: Lcd_Cmd(y);
 22454  008C28  0100               	movlb	0	; () banked
 22455  008C2A  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 22456  008C2C  EC7A  F04A         	call	_Lcd_Cmd
 22457  008C30  0012               	return	
 22458  008C32                     __end_of_Lcd_Set_Cursor:
 22459                           	opt stack 0
 22460                           tblptru	equ	0xFF8
 22461                           tblptrh	equ	0xFF7
 22462                           tblptrl	equ	0xFF6
 22463                           tablat	equ	0xFF5
 22464                           prodh	equ	0xFF4
 22465                           prodl	equ	0xFF3
 22466                           intcon	equ	0xFF2
 22467                           intcon2	equ	0xFF1
 22468                           postinc0	equ	0xFEE
 22469                           wreg	equ	0xFE8
 22470                           postdec1	equ	0xFE5
 22471                           fsr1l	equ	0xFE1
 22472                           indf2	equ	0xFDF
 22473                           postinc2	equ	0xFDE
 22474                           plusw2	equ	0xFDB
 22475                           fsr2h	equ	0xFDA
 22476                           fsr2l	equ	0xFD9
 22477                           status	equ	0xFD8
 22478                           
 22479 ;; *************** function _Lcd_Print_String *****************
 22480 ;; Defined at:
 22481 ;;		line 114 in file "lcd.c"
 22482 ;; Parameters:    Size  Location     Type
 22483 ;;  a               2   10[BANK0 ] PTR unsigned char 
 22484 ;;		 -> STR_74(16), STR_73(12), STR_72(10), STR_71(12), 
 22485 ;;		 -> STR_70(10), STR_69(12), STR_68(10), STR_67(12), 
 22486 ;;		 -> STR_66(10), STR_65(12), STR_64(13), STR_63(15), 
 22487 ;;		 -> STR_62(15), STR_61(16), STR_59(14), STR_57(12), 
 22488 ;;		 -> STR_56(15), STR_54(14), STR_52(15), STR_51(17), 
 22489 ;;		 -> STR_50(9), STR_49(10), STR_48(13), STR_47(13), 
 22490 ;;		 -> STR_46(17), STR_45(14), STR_44(14), STR_42(15), 
 22491 ;;		 -> STR_40(16), STR_39(17), STR_38(13), STR_37(17), 
 22492 ;;		 -> STR_36(8), STR_35(8), STR_34(12), STR_33(17), 
 22493 ;;		 -> STR_32(15), STR_31(14), STR_30(17), STR_29(15), 
 22494 ;;		 -> STR_28(17), STR_27(14), STR_26(16), STR_25(14), 
 22495 ;;		 -> STR_24(12), LCD_STRINGS(2397), STR_23(13), STR_22(17), 
 22496 ;;		 -> STR_21(16), STR_20(5), STR_19(11), STR_18(11), 
 22497 ;;		 -> STR_17(11), STR_16(10), STR_15(11), STR_14(11), 
 22498 ;;		 -> STR_13(11), STR_12(10), string2display(5), STR_11(17), 
 22499 ;;		 -> STR_10(17), 
 22500 ;; Auto vars:     Size  Location     Type
 22501 ;;  i               2   14[BANK0 ] int 
 22502 ;; Return value:  Size  Location     Type
 22503 ;;                  1    wreg      void 
 22504 ;; Registers used:
 22505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 22506 ;; Tracked objects:
 22507 ;;		On entry : 0/0
 22508 ;;		On exit  : 0/0
 22509 ;;		Unchanged: 0/0
 22510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22511 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22512 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22513 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22514 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22515 ;;Total ram usage:        6 bytes
 22516 ;; Hardware stack levels used:    1
 22517 ;; Hardware stack levels required when called:    7
 22518 ;; This function calls:
 22519 ;;		_Lcd_Print_Char
 22520 ;; This function is called by:
 22521 ;;		_clear_row1
 22522 ;;		_clear_row2
 22523 ;;		_setControllerNumbers
 22524 ;;		_exitFunction
 22525 ;;		_exitSave
 22526 ;;		_exitLoad
 22527 ;;		_eepromExit
 22528 ;;		_menu_lcd
 22529 ;;		_Function_A_1
 22530 ;;		_Function_A_2
 22531 ;;		_Function_A_3
 22532 ;;		_Function_A
 22533 ;;		_Function_B
 22534 ;;		_Function_C_1
 22535 ;;		_Function_C_2
 22536 ;;		_Function_C_3
 22537 ;;		_Function_C
 22538 ;;		_Function_D_1
 22539 ;;		_Function_D_2
 22540 ;;		_Function_D_3
 22541 ;;		_Function_D_4
 22542 ;;		_Function_D_5
 22543 ;;		_Function_D
 22544 ;;		_Function_E_1
 22545 ;;		_Function_E_2
 22546 ;;		_Function_E
 22547 ;;		_Function_F
 22548 ;;		_Function_G_1
 22549 ;;		_Function_G_2
 22550 ;;		_Function_G_3
 22551 ;;		_Function_G_4
 22552 ;;		_Function_G
 22553 ;;		_Function_H
 22554 ;;		_Function_H_1
 22555 ;;		_Function_H_2
 22556 ;;		_Function_H_3
 22557 ;;		_Function_H_4
 22558 ;;		_Function_H_5
 22559 ;;		_Function_H_6_1
 22560 ;;		_Function_H_6_2
 22561 ;;		_Function_H_6
 22562 ;;		_Function_H_7
 22563 ;;		_Function_H_8_1
 22564 ;;		_Function_H_8_2
 22565 ;;		_Function_H_8
 22566 ;;		_Function_H_9_1
 22567 ;;		_Function_H_9_2
 22568 ;;		_Function_H_9_3
 22569 ;;		_Function_H_9_4
 22570 ;;		_Function_H_9
 22571 ;; This function uses a non-reentrant model
 22572 ;;
 22573                           
 22574                           	psect	text66
 22575  008164                     __ptext66:
 22576                           	opt stack 0
 22577  008164                     _Lcd_Print_String:
 22578                           	opt stack 20
 22579                           
 22580                           ;lcd.c: 116: int i;
 22581                           ;lcd.c: 117: for(i=0;a[i]!='\0';i++)
 22582                           
 22583                           ;incstack = 0
 22584  008164  0E00               	movlw	0
 22585  008166  0100               	movlb	0	; () banked
 22586  008168  6F6F               	movwf	(Lcd_Print_String@i+1)& (0+255),b
 22587  00816A  0E00               	movlw	0
 22588  00816C  6F6E               	movwf	Lcd_Print_String@i& (0+255),b
 22589  00816E  D01D               	goto	l54
 22590  008170                     
 22591                           ;lcd.c: 118: Lcd_Print_Char(a[i]);
 22592                           
 22593                           ; BSR set to: 0
 22594  008170  0100               	movlb	0	; () banked
 22595  008172  516E               	movf	Lcd_Print_String@i& (0+255),w,b
 22596  008174  256A               	addwf	Lcd_Print_String@a& (0+255),w,b
 22597  008176  6F6C               	movwf	??_Lcd_Print_String& (0+255),b
 22598  008178  516F               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 22599  00817A  216B               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 22600  00817C  6F6D               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 22601  00817E  C06C  FFF6         	movff	??_Lcd_Print_String,tblptrl
 22602  008182  C06D  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 22603  008186  0E00               	movlw	low (__mediumconst shr (0+16))
 22604  008188  6EF8               	movwf	tblptru,c
 22605  00818A  0E0C               	movlw	(high __ramtop+-1)
 22606  00818C  64F7               	cpfsgt	tblptrh,c
 22607  00818E  D003               	bra	u24717
 22608  008190  0008               	tblrd		*
 22609  008192  50F5               	movf	tablat,w,c
 22610  008194  D005               	bra	u24710
 22611  008196                     u24717:
 22612  008196  CFF6 FFE1          	movff	tblptrl,fsr1l
 22613  00819A  CFF7 FFE2          	movff	tblptrh,fsr1h
 22614  00819E  50E7               	movf	indf1,w,c
 22615  0081A0                     u24710:
 22616  0081A0  ECB3  F03D         	call	_Lcd_Print_Char
 22617  0081A4  0100               	movlb	0	; () banked
 22618  0081A6  4B6E               	infsnz	Lcd_Print_String@i& (0+255),f,b
 22619  0081A8  2B6F               	incf	(Lcd_Print_String@i+1)& (0+255),f,b
 22620  0081AA                     l54:
 22621                           
 22622                           ; BSR set to: 0
 22623                           
 22624                           ; BSR set to: 0
 22625  0081AA  516E               	movf	Lcd_Print_String@i& (0+255),w,b
 22626  0081AC  256A               	addwf	Lcd_Print_String@a& (0+255),w,b
 22627  0081AE  6F6C               	movwf	??_Lcd_Print_String& (0+255),b
 22628  0081B0  516F               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 22629  0081B2  216B               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 22630  0081B4  6F6D               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 22631  0081B6  C06C  FFF6         	movff	??_Lcd_Print_String,tblptrl
 22632  0081BA  C06D  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 22633  0081BE  0E00               	movlw	low (__mediumconst shr (0+16))
 22634  0081C0  6EF8               	movwf	tblptru,c
 22635  0081C2  0E0C               	movlw	(high __ramtop+-1)
 22636  0081C4  64F7               	cpfsgt	tblptrh,c
 22637  0081C6  D003               	bra	u24727
 22638  0081C8  0008               	tblrd		*
 22639  0081CA  50F5               	movf	tablat,w,c
 22640  0081CC  D005               	bra	u24720
 22641  0081CE                     u24727:
 22642  0081CE  CFF6 FFE1          	movff	tblptrl,fsr1l
 22643  0081D2  CFF7 FFE2          	movff	tblptrh,fsr1h
 22644  0081D6  50E7               	movf	indf1,w,c
 22645  0081D8                     u24720:
 22646  0081D8  0900               	iorlw	0
 22647  0081DA  B4D8               	btfsc	status,2,c
 22648  0081DC  0012               	return	
 22649  0081DE  D7C8               	goto	l55
 22650  0081E0                     __end_of_Lcd_Print_String:
 22651                           	opt stack 0
 22652                           tblptru	equ	0xFF8
 22653                           tblptrh	equ	0xFF7
 22654                           tblptrl	equ	0xFF6
 22655                           tablat	equ	0xFF5
 22656                           prodh	equ	0xFF4
 22657                           prodl	equ	0xFF3
 22658                           intcon	equ	0xFF2
 22659                           intcon2	equ	0xFF1
 22660                           postinc0	equ	0xFEE
 22661                           wreg	equ	0xFE8
 22662                           indf1	equ	0xFE7
 22663                           postdec1	equ	0xFE5
 22664                           fsr1h	equ	0xFE2
 22665                           fsr1l	equ	0xFE1
 22666                           indf2	equ	0xFDF
 22667                           postinc2	equ	0xFDE
 22668                           plusw2	equ	0xFDB
 22669                           fsr2h	equ	0xFDA
 22670                           fsr2l	equ	0xFD9
 22671                           status	equ	0xFD8
 22672                           
 22673 ;; *************** function _Lcd_Print_Char *****************
 22674 ;; Defined at:
 22675 ;;		line 98 in file "lcd.c"
 22676 ;; Parameters:    Size  Location     Type
 22677 ;;  data            1    wreg     unsigned char 
 22678 ;; Auto vars:     Size  Location     Type
 22679 ;;  data            1    3[BANK0 ] unsigned char 
 22680 ;;  i               2    6[BANK0 ] int 
 22681 ;;  i               2    4[BANK0 ] int 
 22682 ;;  Upper_Nibble    1    2[BANK0 ] unsigned char 
 22683 ;;  Lower_Nibble    1    1[BANK0 ] unsigned char 
 22684 ;; Return value:  Size  Location     Type
 22685 ;;                  1    wreg      void 
 22686 ;; Registers used:
 22687 ;;		wreg, status,2, status,0, cstack
 22688 ;; Tracked objects:
 22689 ;;		On entry : 0/0
 22690 ;;		On exit  : 0/0
 22691 ;;		Unchanged: 0/0
 22692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22694 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22696 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22697 ;;Total ram usage:        7 bytes
 22698 ;; Hardware stack levels used:    1
 22699 ;; Hardware stack levels required when called:    6
 22700 ;; This function calls:
 22701 ;;		_Lcd_SetBit
 22702 ;; This function is called by:
 22703 ;;		_Lcd_Print_String
 22704 ;; This function uses a non-reentrant model
 22705 ;;
 22706                           
 22707                           	psect	text67
 22708  007B66                     __ptext67:
 22709                           	opt stack 0
 22710  007B66                     _Lcd_Print_Char:
 22711                           	opt stack 20
 22712                           
 22713                           ;incstack = 0
 22714                           ;Lcd_Print_Char@data stored from wreg
 22715  007B66  0100               	movlb	0	; () banked
 22716  007B68  6F63               	movwf	Lcd_Print_Char@data& (0+255),b
 22717                           
 22718                           ;lcd.c: 100: char Lower_Nibble,Upper_Nibble;
 22719                           ;lcd.c: 101: Lower_Nibble = data&0x0F;
 22720  007B6A  0100               	movlb	0	; () banked
 22721  007B6C  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 22722  007B6E  0B0F               	andlw	15
 22723  007B70  6F61               	movwf	Lcd_Print_Char@Lower_Nibble& (0+255),b
 22724                           
 22725                           ;lcd.c: 102: Upper_Nibble = data&0xF0;
 22726  007B72  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 22727  007B74  0BF0               	andlw	240
 22728  007B76  6F62               	movwf	Lcd_Print_Char@Upper_Nibble& (0+255),b
 22729                           
 22730                           ; BSR set to: 0
 22731                           ;lcd.c: 103: RE0 = 1;
 22732  007B78  8084               	bsf	3972,0,c	;volatile
 22733                           
 22734                           ; BSR set to: 0
 22735                           ;lcd.c: 104: Lcd_SetBit(Upper_Nibble>>4);
 22736  007B7A  3962               	swapf	Lcd_Print_Char@Upper_Nibble& (0+255),w,b
 22737  007B7C  0B0F               	andlw	15
 22738  007B7E  ECA5  F049         	call	_Lcd_SetBit
 22739                           
 22740                           ;lcd.c: 105: RE1 = 1;
 22741  007B82  8284               	bsf	3972,1,c	;volatile
 22742                           
 22743                           ;lcd.c: 106: for(int i=2130483; i<=0; i--) __nop();
 22744  007B84  0E82               	movlw	130
 22745  007B86  0100               	movlb	0	; () banked
 22746  007B88  6F65               	movwf	(Lcd_Print_Char@i+1)& (0+255),b
 22747  007B8A  0E33               	movlw	51
 22748  007B8C  6F64               	movwf	Lcd_Print_Char@i& (0+255),b
 22749                           
 22750                           ; BSR set to: 0
 22751  007B8E  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 22752  007B90  D003               	goto	l47
 22753  007B92  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 22754  007B94  E10D               	bnz	l48
 22755  007B96  D009               	goto	L5
 22756  007B98                     l47:
 22757                           
 22758                           ; BSR set to: 0
 22759  007B98  F000               	nop	
 22760  007B9A  0100               	movlb	0	; () banked
 22761  007B9C  0764               	decf	Lcd_Print_Char@i& (0+255),f,b
 22762  007B9E  A0D8               	btfss	status,0,c
 22763  007BA0  0765               	decf	(Lcd_Print_Char@i+1)& (0+255),f,b
 22764                           
 22765                           ; BSR set to: 0
 22766  007BA2  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 22767  007BA4  D7F9               	goto	l47
 22768  007BA6  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 22769  007BA8  E103               	bnz	u23160
 22770  007BAA                     L5:
 22771  007BAA  0564               	decf	Lcd_Print_Char@i& (0+255),w,b
 22772  007BAC  A0D8               	btfss	status,0,c
 22773  007BAE  D7F4               	goto	l47
 22774  007BB0                     u23160:
 22775  007BB0                     l48:
 22776                           
 22777                           ; BSR set to: 0
 22778                           ;lcd.c: 107: RE1 = 0;
 22779  007BB0  9284               	bcf	3972,1,c	;volatile
 22780                           
 22781                           ; BSR set to: 0
 22782                           ;lcd.c: 108: Lcd_SetBit(Lower_Nibble);
 22783  007BB2  5161               	movf	Lcd_Print_Char@Lower_Nibble& (0+255),w,b
 22784  007BB4  ECA5  F049         	call	_Lcd_SetBit
 22785                           
 22786                           ;lcd.c: 109: RE1 = 1;
 22787  007BB8  8284               	bsf	3972,1,c	;volatile
 22788                           
 22789                           ;lcd.c: 110: for(int i=2130483; i<=0; i--) __nop();
 22790  007BBA  0E82               	movlw	130
 22791  007BBC  0100               	movlb	0	; () banked
 22792  007BBE  6F67               	movwf	(Lcd_Print_Char@i_57+1)& (0+255),b
 22793  007BC0  0E33               	movlw	51
 22794  007BC2  6F66               	movwf	Lcd_Print_Char@i_57& (0+255),b
 22795                           
 22796                           ; BSR set to: 0
 22797  007BC4  BF67               	btfsc	(Lcd_Print_Char@i_57+1)& (0+255),7,b
 22798  007BC6  D003               	goto	l49
 22799  007BC8  5167               	movf	(Lcd_Print_Char@i_57+1)& (0+255),w,b
 22800  007BCA  E10D               	bnz	l50
 22801  007BCC  D009               	goto	L6
 22802  007BCE                     l49:
 22803                           
 22804                           ; BSR set to: 0
 22805  007BCE  F000               	nop	
 22806  007BD0  0100               	movlb	0	; () banked
 22807  007BD2  0766               	decf	Lcd_Print_Char@i_57& (0+255),f,b
 22808  007BD4  A0D8               	btfss	status,0,c
 22809  007BD6  0767               	decf	(Lcd_Print_Char@i_57+1)& (0+255),f,b
 22810                           
 22811                           ; BSR set to: 0
 22812  007BD8  BF67               	btfsc	(Lcd_Print_Char@i_57+1)& (0+255),7,b
 22813  007BDA  D7F9               	goto	l49
 22814  007BDC  5167               	movf	(Lcd_Print_Char@i_57+1)& (0+255),w,b
 22815  007BDE  E103               	bnz	u23180
 22816  007BE0                     L6:
 22817  007BE0  0566               	decf	Lcd_Print_Char@i_57& (0+255),w,b
 22818  007BE2  A0D8               	btfss	status,0,c
 22819  007BE4  D7F4               	goto	l49
 22820  007BE6                     u23180:
 22821  007BE6                     l50:
 22822                           
 22823                           ; BSR set to: 0
 22824                           ;lcd.c: 111: RE1 = 0;
 22825  007BE6  9284               	bcf	3972,1,c	;volatile
 22826                           
 22827                           ; BSR set to: 0
 22828  007BE8  0012               	return		;funcret
 22829  007BEA                     __end_of_Lcd_Print_Char:
 22830                           	opt stack 0
 22831                           tblptru	equ	0xFF8
 22832                           tblptrh	equ	0xFF7
 22833                           tblptrl	equ	0xFF6
 22834                           tablat	equ	0xFF5
 22835                           prodh	equ	0xFF4
 22836                           prodl	equ	0xFF3
 22837                           intcon	equ	0xFF2
 22838                           intcon2	equ	0xFF1
 22839                           postinc0	equ	0xFEE
 22840                           wreg	equ	0xFE8
 22841                           indf1	equ	0xFE7
 22842                           postdec1	equ	0xFE5
 22843                           fsr1h	equ	0xFE2
 22844                           fsr1l	equ	0xFE1
 22845                           indf2	equ	0xFDF
 22846                           postinc2	equ	0xFDE
 22847                           plusw2	equ	0xFDB
 22848                           fsr2h	equ	0xFDA
 22849                           fsr2l	equ	0xFD9
 22850                           status	equ	0xFD8
 22851                           
 22852 ;; *************** function ___lbmod *****************
 22853 ;; Defined at:
 22854 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbmod.c"
 22855 ;; Parameters:    Size  Location     Type
 22856 ;;  dividend        1    wreg     unsigned char 
 22857 ;;  divisor         1    0[BANK0 ] unsigned char 
 22858 ;; Auto vars:     Size  Location     Type
 22859 ;;  dividend        1    1[BANK0 ] unsigned char 
 22860 ;;  rem             1    3[BANK0 ] unsigned char 
 22861 ;;  counter         1    2[BANK0 ] unsigned char 
 22862 ;; Return value:  Size  Location     Type
 22863 ;;                  1    wreg      unsigned char 
 22864 ;; Registers used:
 22865 ;;		wreg, status,2, status,0
 22866 ;; Tracked objects:
 22867 ;;		On entry : 0/0
 22868 ;;		On exit  : 0/0
 22869 ;;		Unchanged: 0/0
 22870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22871 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22872 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22874 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22875 ;;Total ram usage:        4 bytes
 22876 ;; Hardware stack levels used:    1
 22877 ;; Hardware stack levels required when called:    5
 22878 ;; This function calls:
 22879 ;;		Nothing
 22880 ;; This function is called by:
 22881 ;;		_menu_lcd
 22882 ;;		_Function_A_1
 22883 ;;		_Function_A_2
 22884 ;;		_Function_A_3
 22885 ;;		_Function_A
 22886 ;;		_Function_B
 22887 ;;		_Function_C_1
 22888 ;;		_Function_C_2
 22889 ;;		_Function_C_3
 22890 ;;		_Function_C
 22891 ;;		_Function_D_1
 22892 ;;		_Function_D_3
 22893 ;;		_Function_D_4
 22894 ;;		_Function_D_5
 22895 ;;		_Function_D
 22896 ;;		_Function_E
 22897 ;;		_Function_G_1
 22898 ;;		_Function_G_2
 22899 ;;		_Function_G_4
 22900 ;;		_Function_G
 22901 ;;		_Function_H
 22902 ;;		_Function_H_4
 22903 ;;		_Function_H_5
 22904 ;;		_Function_H_6
 22905 ;;		_Function_H_8
 22906 ;;		_Function_H_9_1
 22907 ;;		_Function_H_9_2
 22908 ;;		_Function_H_9_3
 22909 ;;		_Function_H_9_4
 22910 ;;		_Function_H_9
 22911 ;; This function uses a non-reentrant model
 22912 ;;
 22913                           
 22914                           	psect	text68
 22915  00937A                     __ptext68:
 22916                           	opt stack 0
 22917  00937A                     ___lbmod:
 22918                           	opt stack 24
 22919                           
 22920                           ; BSR set to: 0
 22921                           ;incstack = 0
 22922                           ;___lbmod@dividend stored from wreg
 22923  00937A  0100               	movlb	0	; () banked
 22924  00937C  6F61               	movwf	___lbmod@dividend& (0+255),b
 22925  00937E  0E08               	movlw	8
 22926  009380  0100               	movlb	0	; () banked
 22927  009382  6F62               	movwf	___lbmod@counter& (0+255),b
 22928  009384  0E00               	movlw	0
 22929  009386  6F63               	movwf	___lbmod@rem& (0+255),b
 22930  009388                     
 22931                           ; BSR set to: 0
 22932                           
 22933                           ; BSR set to: 0
 22934  009388  90D8               	bcf	status,0,c
 22935  00938A  3561               	rlcf	___lbmod@dividend& (0+255),w,b
 22936  00938C  3563               	rlcf	___lbmod@rem& (0+255),w,b
 22937  00938E  6F63               	movwf	___lbmod@rem& (0+255),b
 22938                           
 22939                           ; BSR set to: 0
 22940  009390  90D8               	bcf	status,0,c
 22941  009392  3761               	rlcf	___lbmod@dividend& (0+255),f,b
 22942                           
 22943                           ; BSR set to: 0
 22944  009394  5160               	movf	___lbmod@divisor& (0+255),w,b
 22945  009396  5D63               	subwf	___lbmod@rem& (0+255),w,b
 22946  009398  A0D8               	btfss	status,0,c
 22947  00939A  D002               	goto	l5767
 22948                           
 22949                           ; BSR set to: 0
 22950  00939C  5160               	movf	___lbmod@divisor& (0+255),w,b
 22951  00939E  5F63               	subwf	___lbmod@rem& (0+255),f,b
 22952  0093A0                     l5767:
 22953                           
 22954                           ; BSR set to: 0
 22955                           
 22956                           ; BSR set to: 0
 22957  0093A0  2F62               	decfsz	___lbmod@counter& (0+255),f,b
 22958  0093A2  D7F2               	goto	l5766
 22959                           
 22960                           ; BSR set to: 0
 22961                           
 22962                           ; BSR set to: 0
 22963  0093A4  5163               	movf	___lbmod@rem& (0+255),w,b
 22964  0093A6  0012               	return	
 22965  0093A8                     __end_of___lbmod:
 22966                           	opt stack 0
 22967                           tblptru	equ	0xFF8
 22968                           tblptrh	equ	0xFF7
 22969                           tblptrl	equ	0xFF6
 22970                           tablat	equ	0xFF5
 22971                           prodh	equ	0xFF4
 22972                           prodl	equ	0xFF3
 22973                           intcon	equ	0xFF2
 22974                           intcon2	equ	0xFF1
 22975                           postinc0	equ	0xFEE
 22976                           wreg	equ	0xFE8
 22977                           indf1	equ	0xFE7
 22978                           postdec1	equ	0xFE5
 22979                           fsr1h	equ	0xFE2
 22980                           fsr1l	equ	0xFE1
 22981                           indf2	equ	0xFDF
 22982                           postinc2	equ	0xFDE
 22983                           plusw2	equ	0xFDB
 22984                           fsr2h	equ	0xFDA
 22985                           fsr2l	equ	0xFD9
 22986                           status	equ	0xFD8
 22987                           
 22988 ;; *************** function _initializeSaveSlotsOnce *****************
 22989 ;; Defined at:
 22990 ;;		line 28 in file "eeprom.c"
 22991 ;; Parameters:    Size  Location     Type
 22992 ;;		None
 22993 ;; Auto vars:     Size  Location     Type
 22994 ;;  initializeSl    1   84[BANK0 ] unsigned char 
 22995 ;; Return value:  Size  Location     Type
 22996 ;;                  1    wreg      void 
 22997 ;; Registers used:
 22998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22999 ;; Tracked objects:
 23000 ;;		On entry : 0/0
 23001 ;;		On exit  : 0/0
 23002 ;;		Unchanged: 0/0
 23003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23007 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23008 ;;Total ram usage:        1 bytes
 23009 ;; Hardware stack levels used:    1
 23010 ;; Hardware stack levels required when called:    7
 23011 ;; This function calls:
 23012 ;;		_Busy_eep
 23013 ;;		_Read_b_eep
 23014 ;;		_Write_b_eep
 23015 ;;		_saveToEEPROM
 23016 ;; This function is called by:
 23017 ;;		_main
 23018 ;; This function uses a non-reentrant model
 23019 ;;
 23020                           
 23021                           	psect	text69
 23022  008F6E                     __ptext69:
 23023                           	opt stack 0
 23024  008F6E                     _initializeSaveSlotsOnce:
 23025                           	opt stack 23
 23026                           
 23027                           ;eeprom.c: 30: unsigned char initializeSlotsOnce = Read_b_eep(0x01);
 23028                           
 23029                           ; BSR set to: 0
 23030                           ;incstack = 0
 23031  008F6E  0E00               	movlw	0
 23032  008F70  0100               	movlb	0	; () banked
 23033  008F72  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 23034  008F74  0E01               	movlw	1
 23035  008F76  6F60               	movwf	Read_b_eep@badd& (0+255),b
 23036  008F78  ECEA  F04A         	call	_Read_b_eep	;wreg free
 23037  008F7C  0100               	movlb	0	; () banked
 23038  008F7E  6FB4               	movwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),b
 23039                           
 23040                           ; BSR set to: 0
 23041                           ;eeprom.c: 32: if (initializeSlotsOnce == 0x24) {
 23042  008F80  0E24               	movlw	36
 23043  008F82  19B4               	xorwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),w,b
 23044  008F84  A4D8               	btfss	status,2,c
 23045  008F86  0012               	return	
 23046                           
 23047                           ; BSR set to: 0
 23048                           ;eeprom.c: 33: saveToEEPROM(SLOT1);
 23049  008F88  0E01               	movlw	1
 23050  008F8A  EC41  F027         	call	_saveToEEPROM
 23051                           
 23052                           ;eeprom.c: 34: saveToEEPROM(SLOT2);
 23053  008F8E  0E02               	movlw	2
 23054  008F90  EC41  F027         	call	_saveToEEPROM
 23055                           
 23056                           ;eeprom.c: 35: saveToEEPROM(SLOT3);
 23057  008F94  0E03               	movlw	3
 23058  008F96  EC41  F027         	call	_saveToEEPROM
 23059                           
 23060                           ;eeprom.c: 36: saveToEEPROM(SLOT4);
 23061  008F9A  0E04               	movlw	4
 23062  008F9C  EC41  F027         	call	_saveToEEPROM
 23063                           
 23064                           ;eeprom.c: 37: (Busy_eep(), Write_b_eep(0x01,0x48));
 23065  008FA0  EC31  F04B         	call	_Busy_eep	;wreg free
 23066  008FA4  0E00               	movlw	0
 23067  008FA6  0100               	movlb	0	; () banked
 23068  008FA8  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 23069  008FAA  0E01               	movlw	1
 23070  008FAC  6F60               	movwf	Write_b_eep@badd& (0+255),b
 23071  008FAE  0E48               	movlw	72
 23072  008FB0  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 23073  008FB2  ECDC  F047         	call	_Write_b_eep	;wreg free
 23074  008FB6  0012               	return	
 23075  008FB8                     __end_of_initializeSaveSlotsOnce:
 23076                           	opt stack 0
 23077                           tblptru	equ	0xFF8
 23078                           tblptrh	equ	0xFF7
 23079                           tblptrl	equ	0xFF6
 23080                           tablat	equ	0xFF5
 23081                           prodh	equ	0xFF4
 23082                           prodl	equ	0xFF3
 23083                           intcon	equ	0xFF2
 23084                           intcon2	equ	0xFF1
 23085                           postinc0	equ	0xFEE
 23086                           wreg	equ	0xFE8
 23087                           indf1	equ	0xFE7
 23088                           postdec1	equ	0xFE5
 23089                           fsr1h	equ	0xFE2
 23090                           fsr1l	equ	0xFE1
 23091                           indf2	equ	0xFDF
 23092                           postinc2	equ	0xFDE
 23093                           plusw2	equ	0xFDB
 23094                           fsr2h	equ	0xFDA
 23095                           fsr2l	equ	0xFD9
 23096                           status	equ	0xFD8
 23097                           
 23098 ;; *************** function _saveToEEPROM *****************
 23099 ;; Defined at:
 23100 ;;		line 194 in file "eeprom.c"
 23101 ;; Parameters:    Size  Location     Type
 23102 ;;  slotNumber      1    wreg     unsigned char 
 23103 ;; Auto vars:     Size  Location     Type
 23104 ;;  slotNumber      1   81[BANK0 ] unsigned char 
 23105 ;;  byte_count      2   82[BANK0 ] unsigned int 
 23106 ;;  to_save        75    4[BANK0 ] unsigned char [75]
 23107 ;;  baseAddress     2   79[BANK0 ] unsigned int 
 23108 ;; Return value:  Size  Location     Type
 23109 ;;                  1    wreg      void 
 23110 ;; Registers used:
 23111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23112 ;; Tracked objects:
 23113 ;;		On entry : 0/0
 23114 ;;		On exit  : 0/0
 23115 ;;		Unchanged: 0/0
 23116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23118 ;;      Locals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23120 ;;      Totals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23121 ;;Total ram usage:       80 bytes
 23122 ;; Hardware stack levels used:    1
 23123 ;; Hardware stack levels required when called:    6
 23124 ;; This function calls:
 23125 ;;		_Busy_eep
 23126 ;;		_Write_b_eep
 23127 ;; This function is called by:
 23128 ;;		_Function_G_1
 23129 ;;		_initializeSaveSlotsOnce
 23130 ;; This function uses a non-reentrant model
 23131 ;;
 23132                           
 23133                           	psect	text70
 23134  004E82                     __ptext70:
 23135                           	opt stack 0
 23136  004E82                     _saveToEEPROM:
 23137                           	opt stack 21
 23138                           
 23139                           ;incstack = 0
 23140                           ;saveToEEPROM@slotNumber stored from wreg
 23141  004E82  0100               	movlb	0	; () banked
 23142  004E84  6FB1               	movwf	saveToEEPROM@slotNumber& (0+255),b
 23143                           
 23144                           ;eeprom.c: 196: unsigned int baseAddress = 0;
 23145  004E86  0E00               	movlw	0
 23146  004E88  0100               	movlb	0	; () banked
 23147  004E8A  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23148  004E8C  0E00               	movlw	0
 23149  004E8E  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23150                           
 23151                           ; BSR set to: 0
 23152                           ;eeprom.c: 199: if (slotNumber == SLOT1) {baseAddress = 128;}
 23153  004E90  05B1               	decf	saveToEEPROM@slotNumber& (0+255),w,b
 23154  004E92  A4D8               	btfss	status,2,c
 23155  004E94  D004               	goto	l4288
 23156                           
 23157                           ; BSR set to: 0
 23158  004E96  0E00               	movlw	0
 23159  004E98  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23160  004E9A  0E80               	movlw	128
 23161  004E9C  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23162  004E9E                     l4288:
 23163                           
 23164                           ; BSR set to: 0
 23165                           ;eeprom.c: 200: if (slotNumber == SLOT2) {baseAddress = 256;}
 23166                           
 23167                           ; BSR set to: 0
 23168  004E9E  0E02               	movlw	2
 23169  004EA0  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 23170  004EA2  A4D8               	btfss	status,2,c
 23171  004EA4  D004               	goto	l4289
 23172                           
 23173                           ; BSR set to: 0
 23174  004EA6  0E01               	movlw	1
 23175  004EA8  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23176  004EAA  0E00               	movlw	0
 23177  004EAC  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23178  004EAE                     l4289:
 23179                           
 23180                           ; BSR set to: 0
 23181                           ;eeprom.c: 201: if (slotNumber == SLOT3) {baseAddress = 384;}
 23182                           
 23183                           ; BSR set to: 0
 23184  004EAE  0E03               	movlw	3
 23185  004EB0  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 23186  004EB2  A4D8               	btfss	status,2,c
 23187  004EB4  D004               	goto	l4290
 23188                           
 23189                           ; BSR set to: 0
 23190  004EB6  0E01               	movlw	1
 23191  004EB8  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23192  004EBA  0E80               	movlw	128
 23193  004EBC  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23194  004EBE                     l4290:
 23195                           
 23196                           ; BSR set to: 0
 23197                           ;eeprom.c: 202: if (slotNumber == SLOT4) {baseAddress = 512;}
 23198                           
 23199                           ; BSR set to: 0
 23200  004EBE  0E04               	movlw	4
 23201  004EC0  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 23202  004EC2  A4D8               	btfss	status,2,c
 23203  004EC4  D004               	goto	l4291
 23204                           
 23205                           ; BSR set to: 0
 23206  004EC6  0E02               	movlw	2
 23207  004EC8  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23208  004ECA  0E00               	movlw	0
 23209  004ECC  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23210  004ECE                     l4291:
 23211                           
 23212                           ; BSR set to: 0
 23213                           ;eeprom.c: 205: unsigned char to_save[75];
 23214                           ;eeprom.c: 210: to_save[0] = KEYBOARD_MODE;
 23215                           
 23216                           ; BSR set to: 0
 23217  004ECE  C0F2  F064         	movff	_KEYBOARD_MODE,saveToEEPROM@to_save
 23218                           
 23219                           ; BSR set to: 0
 23220                           ;eeprom.c: 211: to_save[1] = which_mode;
 23221  004ED2  C0F1  F065         	movff	_which_mode,saveToEEPROM@to_save+1
 23222                           
 23223                           ; BSR set to: 0
 23224                           ;eeprom.c: 212: to_save[2] = which_triad;
 23225  004ED6  C0F0  F066         	movff	_which_triad,saveToEEPROM@to_save+2
 23226                           
 23227                           ; BSR set to: 0
 23228                           ;eeprom.c: 213: to_save[3] = which_seventh;
 23229  004EDA  C0EF  F067         	movff	_which_seventh,saveToEEPROM@to_save+3
 23230                           
 23231                           ;eeprom.c: 216: to_save[4] = TRANSPOSE_MODE;
 23232  004EDE  0E00               	movlw	0
 23233  004EE0  BC35               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 23234  004EE2  0E01               	movlw	1
 23235  004EE4  6F68               	movwf	(saveToEEPROM@to_save+4)& (0+255),b
 23236                           
 23237                           ;eeprom.c: 219: to_save[5] = DRUM_MODE;
 23238  004EE6  0E00               	movlw	0
 23239  004EE8  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 23240  004EEA  0E01               	movlw	1
 23241  004EEC  6F69               	movwf	(saveToEEPROM@to_save+5)& (0+255),b
 23242                           
 23243                           ;eeprom.c: 220: to_save[6] = CONTROL_MODE;
 23244  004EEE  0E00               	movlw	0
 23245  004EF0  B832               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 23246  004EF2  0E01               	movlw	1
 23247  004EF4  6F6A               	movwf	(saveToEEPROM@to_save+6)& (0+255),b
 23248                           
 23249                           ; BSR set to: 0
 23250                           ;eeprom.c: 223: to_save[7] = DRUM_NOTE[0];
 23251  004EF6  C1DF  F06B         	movff	_DRUM_NOTE,saveToEEPROM@to_save+7
 23252                           
 23253                           ; BSR set to: 0
 23254                           ;eeprom.c: 224: to_save[8] = DRUM_NOTE[1];
 23255  004EFA  C1E0  F06C         	movff	_DRUM_NOTE+1,saveToEEPROM@to_save+8
 23256                           
 23257                           ; BSR set to: 0
 23258                           ;eeprom.c: 225: to_save[9] = DRUM_NOTE[2];
 23259  004EFE  C1E1  F06D         	movff	_DRUM_NOTE+2,saveToEEPROM@to_save+9
 23260                           
 23261                           ; BSR set to: 0
 23262                           ;eeprom.c: 226: to_save[10] = DRUM_NOTE[3];
 23263  004F02  C1E2  F06E         	movff	_DRUM_NOTE+3,saveToEEPROM@to_save+10
 23264                           
 23265                           ; BSR set to: 0
 23266                           ;eeprom.c: 227: to_save[11] = DRUM_NOTE[4];
 23267  004F06  C1E3  F06F         	movff	_DRUM_NOTE+4,saveToEEPROM@to_save+11
 23268                           
 23269                           ; BSR set to: 0
 23270                           ;eeprom.c: 228: to_save[12] = DRUM_NOTE[5];
 23271  004F0A  C1E4  F070         	movff	_DRUM_NOTE+5,saveToEEPROM@to_save+12
 23272                           
 23273                           ; BSR set to: 0
 23274                           ;eeprom.c: 229: to_save[13] = DRUM_NOTE[6];
 23275  004F0E  C1E5  F071         	movff	_DRUM_NOTE+6,saveToEEPROM@to_save+13
 23276                           
 23277                           ; BSR set to: 0
 23278                           ;eeprom.c: 230: to_save[14] = DRUM_NOTE[7];
 23279  004F12  C1E6  F072         	movff	_DRUM_NOTE+7,saveToEEPROM@to_save+14
 23280                           
 23281                           ; BSR set to: 0
 23282                           ;eeprom.c: 233: to_save[15] = DRUM_CC[0];
 23283  004F16  C1D7  F073         	movff	_DRUM_CC,saveToEEPROM@to_save+15
 23284                           
 23285                           ; BSR set to: 0
 23286                           ;eeprom.c: 234: to_save[16] = DRUM_CC[1];
 23287  004F1A  C1D8  F074         	movff	_DRUM_CC+1,saveToEEPROM@to_save+16
 23288                           
 23289                           ; BSR set to: 0
 23290                           ;eeprom.c: 235: to_save[17] = DRUM_CC[2];
 23291  004F1E  C1D9  F075         	movff	_DRUM_CC+2,saveToEEPROM@to_save+17
 23292                           
 23293                           ; BSR set to: 0
 23294                           ;eeprom.c: 236: to_save[18] = DRUM_CC[3];
 23295  004F22  C1DA  F076         	movff	_DRUM_CC+3,saveToEEPROM@to_save+18
 23296                           
 23297                           ; BSR set to: 0
 23298                           ;eeprom.c: 237: to_save[19] = DRUM_CC[4];
 23299  004F26  C1DB  F077         	movff	_DRUM_CC+4,saveToEEPROM@to_save+19
 23300                           
 23301                           ; BSR set to: 0
 23302                           ;eeprom.c: 238: to_save[20] = DRUM_CC[5];
 23303  004F2A  C1DC  F078         	movff	_DRUM_CC+5,saveToEEPROM@to_save+20
 23304                           
 23305                           ; BSR set to: 0
 23306                           ;eeprom.c: 239: to_save[21] = DRUM_CC[6];
 23307  004F2E  C1DD  F079         	movff	_DRUM_CC+6,saveToEEPROM@to_save+21
 23308                           
 23309                           ; BSR set to: 0
 23310                           ;eeprom.c: 240: to_save[22] = DRUM_CC[7];
 23311  004F32  C1DE  F07A         	movff	_DRUM_CC+7,saveToEEPROM@to_save+22
 23312                           
 23313                           ;eeprom.c: 243: to_save[23] = POT_MODE;
 23314  004F36  0E00               	movlw	0
 23315  004F38  B836               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 23316  004F3A  0E01               	movlw	1
 23317  004F3C  6F7B               	movwf	(saveToEEPROM@to_save+23)& (0+255),b
 23318                           
 23319                           ; BSR set to: 0
 23320                           ;eeprom.c: 246: to_save[24] = inputPotsArray[0].controller_number;
 23321  004F3E  C2AD  F07C         	movff	_inputPotsArray+1,saveToEEPROM@to_save+24
 23322                           
 23323                           ; BSR set to: 0
 23324                           ;eeprom.c: 247: to_save[25] = inputPotsArray[0].controller_number_two_byte;
 23325  004F42  C2AE  F07D         	movff	_inputPotsArray+2,saveToEEPROM@to_save+25
 23326                           
 23327                           ; BSR set to: 0
 23328                           ;eeprom.c: 249: to_save[26] = inputPotsArray[1].controller_number;
 23329  004F46  C2B0  F07E         	movff	_inputPotsArray+4,saveToEEPROM@to_save+26
 23330                           
 23331                           ; BSR set to: 0
 23332                           ;eeprom.c: 250: to_save[27] = inputPotsArray[1].controller_number_two_byte;
 23333  004F4A  C2B1  F07F         	movff	_inputPotsArray+5,saveToEEPROM@to_save+27
 23334                           
 23335                           ; BSR set to: 0
 23336                           ;eeprom.c: 252: to_save[28] = inputPotsArray[2].controller_number;
 23337  004F4E  C2B3  F080         	movff	_inputPotsArray+7,saveToEEPROM@to_save+28
 23338                           
 23339                           ; BSR set to: 0
 23340                           ;eeprom.c: 253: to_save[29] = inputPotsArray[2].controller_number_two_byte;
 23341  004F52  C2B4  F081         	movff	_inputPotsArray+8,saveToEEPROM@to_save+29
 23342                           
 23343                           ; BSR set to: 0
 23344                           ;eeprom.c: 255: to_save[30] = inputPotsArray[3].controller_number;
 23345  004F56  C2B6  F082         	movff	_inputPotsArray+10,saveToEEPROM@to_save+30
 23346                           
 23347                           ; BSR set to: 0
 23348                           ;eeprom.c: 256: to_save[31] = inputPotsArray[3].controller_number_two_byte;
 23349  004F5A  C2B7  F083         	movff	_inputPotsArray+11,saveToEEPROM@to_save+31
 23350                           
 23351                           ; BSR set to: 0
 23352                           ;eeprom.c: 258: to_save[32] = inputPotsArray[4].controller_number;
 23353  004F5E  C2B9  F084         	movff	_inputPotsArray+13,saveToEEPROM@to_save+32
 23354                           
 23355                           ; BSR set to: 0
 23356                           ;eeprom.c: 259: to_save[33] = inputPotsArray[4].controller_number_two_byte;
 23357  004F62  C2BA  F085         	movff	_inputPotsArray+14,saveToEEPROM@to_save+33
 23358                           
 23359                           ; BSR set to: 0
 23360                           ;eeprom.c: 261: to_save[34] = inputPotsArray[5].controller_number;
 23361  004F66  C2BC  F086         	movff	_inputPotsArray+16,saveToEEPROM@to_save+34
 23362                           
 23363                           ; BSR set to: 0
 23364                           ;eeprom.c: 262: to_save[35] = inputPotsArray[5].controller_number_two_byte;
 23365  004F6A  C2BD  F087         	movff	_inputPotsArray+17,saveToEEPROM@to_save+35
 23366                           
 23367                           ; BSR set to: 0
 23368                           ;eeprom.c: 264: to_save[36] = inputPotsArray[6].controller_number;
 23369  004F6E  C2BF  F088         	movff	_inputPotsArray+19,saveToEEPROM@to_save+36
 23370                           
 23371                           ; BSR set to: 0
 23372                           ;eeprom.c: 265: to_save[37] = inputPotsArray[6].controller_number_two_byte;
 23373  004F72  C2C0  F089         	movff	_inputPotsArray+20,saveToEEPROM@to_save+37
 23374                           
 23375                           ; BSR set to: 0
 23376                           ;eeprom.c: 269: to_save[38] = inputPotsArray[7].controller_number;
 23377  004F76  C2C2  F08A         	movff	_inputPotsArray+22,saveToEEPROM@to_save+38
 23378                           
 23379                           ; BSR set to: 0
 23380                           ;eeprom.c: 270: to_save[39] = inputPotsArray[7].controller_number_two_byte;
 23381  004F7A  C2C3  F08B         	movff	_inputPotsArray+23,saveToEEPROM@to_save+39
 23382                           
 23383                           ; BSR set to: 0
 23384                           ;eeprom.c: 272: to_save[40] = inputPotsArray[8].controller_number;
 23385  004F7E  C2C5  F08C         	movff	_inputPotsArray+25,saveToEEPROM@to_save+40
 23386                           
 23387                           ; BSR set to: 0
 23388                           ;eeprom.c: 273: to_save[41] = inputPotsArray[8].controller_number_two_byte;
 23389  004F82  C2C6  F08D         	movff	_inputPotsArray+26,saveToEEPROM@to_save+41
 23390                           
 23391                           ; BSR set to: 0
 23392                           ;eeprom.c: 275: to_save[42] = inputPotsArray[9].controller_number;
 23393  004F86  C2C8  F08E         	movff	_inputPotsArray+28,saveToEEPROM@to_save+42
 23394                           
 23395                           ; BSR set to: 0
 23396                           ;eeprom.c: 276: to_save[43] = inputPotsArray[9].controller_number_two_byte;
 23397  004F8A  C2C9  F08F         	movff	_inputPotsArray+29,saveToEEPROM@to_save+43
 23398                           
 23399                           ; BSR set to: 0
 23400                           ;eeprom.c: 278: to_save[44] = inputPotsArray[10].controller_number;
 23401  004F8E  C2CB  F090         	movff	_inputPotsArray+31,saveToEEPROM@to_save+44
 23402                           
 23403                           ; BSR set to: 0
 23404                           ;eeprom.c: 279: to_save[45] = inputPotsArray[10].controller_number_two_byte;
 23405  004F92  C2CC  F091         	movff	_inputPotsArray+32,saveToEEPROM@to_save+45
 23406                           
 23407                           ; BSR set to: 0
 23408                           ;eeprom.c: 281: to_save[46] = inputPotsArray[11].controller_number;
 23409  004F96  C2CE  F092         	movff	_inputPotsArray+34,saveToEEPROM@to_save+46
 23410                           
 23411                           ; BSR set to: 0
 23412                           ;eeprom.c: 282: to_save[47] = inputPotsArray[11].controller_number_two_byte;
 23413  004F9A  C2CF  F093         	movff	_inputPotsArray+35,saveToEEPROM@to_save+47
 23414                           
 23415                           ; BSR set to: 0
 23416                           ;eeprom.c: 284: to_save[48] = inputPotsArray[12].controller_number;
 23417  004F9E  C2D1  F094         	movff	_inputPotsArray+37,saveToEEPROM@to_save+48
 23418                           
 23419                           ; BSR set to: 0
 23420                           ;eeprom.c: 285: to_save[49] = inputPotsArray[12].controller_number_two_byte;
 23421  004FA2  C2D2  F095         	movff	_inputPotsArray+38,saveToEEPROM@to_save+49
 23422                           
 23423                           ; BSR set to: 0
 23424                           ;eeprom.c: 287: to_save[50] = inputPotsArray[13].controller_number;
 23425  004FA6  C2D4  F096         	movff	_inputPotsArray+40,saveToEEPROM@to_save+50
 23426                           
 23427                           ; BSR set to: 0
 23428                           ;eeprom.c: 288: to_save[51] = inputPotsArray[13].controller_number_two_byte;
 23429  004FAA  C2D5  F097         	movff	_inputPotsArray+41,saveToEEPROM@to_save+51
 23430                           
 23431                           ; BSR set to: 0
 23432                           ;eeprom.c: 290: to_save[52] = inputPotsArray[14].controller_number;
 23433  004FAE  C2D7  F098         	movff	_inputPotsArray+43,saveToEEPROM@to_save+52
 23434                           
 23435                           ; BSR set to: 0
 23436                           ;eeprom.c: 291: to_save[53] = inputPotsArray[14].controller_number_two_byte;
 23437  004FB2  C2D8  F099         	movff	_inputPotsArray+44,saveToEEPROM@to_save+53
 23438                           
 23439                           ; BSR set to: 0
 23440                           ;eeprom.c: 293: to_save[54] = inputPotsArray[15].controller_number;
 23441  004FB6  C2DA  F09A         	movff	_inputPotsArray+46,saveToEEPROM@to_save+54
 23442                           
 23443                           ; BSR set to: 0
 23444                           ;eeprom.c: 294: to_save[55] = inputPotsArray[15].controller_number_two_byte;
 23445  004FBA  C2DB  F09B         	movff	_inputPotsArray+47,saveToEEPROM@to_save+55
 23446                           
 23447                           ; BSR set to: 0
 23448                           ;eeprom.c: 298: to_save[56] = channel;
 23449  004FBE  C0F6  F09C         	movff	_channel,saveToEEPROM@to_save+56
 23450                           
 23451                           ; BSR set to: 0
 23452                           ;eeprom.c: 299: to_save[57] = drumchannel;
 23453  004FC2  C0FE  F09D         	movff	_drumchannel,saveToEEPROM@to_save+57
 23454                           
 23455                           ; BSR set to: 0
 23456                           ;eeprom.c: 302: to_save[58] = octave;
 23457  004FC6  C0FC  F09E         	movff	_octave,saveToEEPROM@to_save+58
 23458                           
 23459                           ; BSR set to: 0
 23460                           ;eeprom.c: 303: to_save[59] = semitone;
 23461  004FCA  C0F3  F09F         	movff	_semitone,saveToEEPROM@to_save+59
 23462                           
 23463                           ; BSR set to: 0
 23464                           ;eeprom.c: 306: to_save[60] = patch_number;
 23465  004FCE  C171  F0A0         	movff	_patch_number,saveToEEPROM@to_save+60
 23466                           
 23467                           ;eeprom.c: 309: to_save[61] = ARPEGGIO_ON;
 23468  004FD2  0E00               	movlw	0
 23469  004FD4  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 23470  004FD6  0E01               	movlw	1
 23471  004FD8  6FA1               	movwf	(saveToEEPROM@to_save+61)& (0+255),b
 23472                           
 23473                           ; BSR set to: 0
 23474                           ;eeprom.c: 310: to_save[62] = BPM;
 23475  004FDA  C0FF  F0A2         	movff	_BPM,saveToEEPROM@to_save+62
 23476                           
 23477                           ; BSR set to: 0
 23478                           ;eeprom.c: 311: to_save[63] = OCTAVES;
 23479  004FDE  C0F8  F0A3         	movff	_OCTAVES,saveToEEPROM@to_save+63
 23480                           
 23481                           ; BSR set to: 0
 23482                           ;eeprom.c: 312: to_save[64] = ARPEGGIO_TYPE;
 23483  004FE2  C0EA  F0A4         	movff	_ARPEGGIO_TYPE,saveToEEPROM@to_save+64
 23484                           
 23485                           ; BSR set to: 0
 23486                           ;eeprom.c: 313: to_save[65] = NOTE_LENGTH_PULSES;
 23487  004FE6  C0F7  F0A5         	movff	_NOTE_LENGTH_PULSES,saveToEEPROM@to_save+65
 23488                           
 23489                           ;eeprom.c: 314: to_save[66] = LATCH;
 23490  004FEA  0E00               	movlw	0
 23491  004FEC  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 23492  004FEE  0E01               	movlw	1
 23493  004FF0  6FA6               	movwf	(saveToEEPROM@to_save+66)& (0+255),b
 23494                           
 23495                           ;eeprom.c: 315: to_save[67] = AUTO_LATCH;
 23496  004FF2  0E00               	movlw	0
 23497  004FF4  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 23498  004FF6  0E01               	movlw	1
 23499  004FF8  6FA7               	movwf	(saveToEEPROM@to_save+67)& (0+255),b
 23500                           
 23501                           ;eeprom.c: 316: to_save[68] = UN_LATCH_MODE;
 23502  004FFA  0E00               	movlw	0
 23503  004FFC  B035               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23504  004FFE  0E01               	movlw	1
 23505  005000  6FA8               	movwf	(saveToEEPROM@to_save+68)& (0+255),b
 23506                           
 23507                           ;eeprom.c: 317: to_save[69] = AUTO_RANDOMIZE;
 23508  005002  0E00               	movlw	0
 23509  005004  BA34               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 23510  005006  0E01               	movlw	1
 23511  005008  6FA9               	movwf	(saveToEEPROM@to_save+69)& (0+255),b
 23512                           
 23513                           ;eeprom.c: 318: to_save[70] = skipFirstLast;
 23514  00500A  0E00               	movlw	0
 23515  00500C  B834               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 23516  00500E  0E01               	movlw	1
 23517  005010  6FAA               	movwf	(saveToEEPROM@to_save+70)& (0+255),b
 23518                           
 23519                           ;eeprom.c: 319: to_save[71] = LAST_NOTE_MODE_KEY_PRESS;
 23520  005012  0E00               	movlw	0
 23521  005014  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 23522  005016  0E01               	movlw	1
 23523  005018  6FAB               	movwf	(saveToEEPROM@to_save+71)& (0+255),b
 23524                           
 23525                           ;eeprom.c: 320: to_save[72] = LAST_NOTE_MODE_KEY_RELEASE;
 23526  00501A  0E00               	movlw	0
 23527  00501C  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 23528  00501E  0E01               	movlw	1
 23529  005020  6FAC               	movwf	(saveToEEPROM@to_save+72)& (0+255),b
 23530                           
 23531                           ;eeprom.c: 321: to_save[73] = LAST_NOTE_MODE_TRANSPOSE;
 23532  005022  0E00               	movlw	0
 23533  005024  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 23534  005026  0E01               	movlw	1
 23535  005028  6FAD               	movwf	(saveToEEPROM@to_save+73)& (0+255),b
 23536                           
 23537                           ;eeprom.c: 322: to_save[74] = LAST_NOTE_MODE_RESET;
 23538  00502A  0E00               	movlw	0
 23539  00502C  BE33               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 23540  00502E  0E01               	movlw	1
 23541  005030  6FAE               	movwf	(saveToEEPROM@to_save+74)& (0+255),b
 23542                           
 23543                           ;eeprom.c: 325: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 23544  005032  0E00               	movlw	0
 23545  005034  6FB3               	movwf	(saveToEEPROM@byte_count+1)& (0+255),b
 23546  005036  0E00               	movlw	0
 23547  005038  6FB2               	movwf	saveToEEPROM@byte_count& (0+255),b
 23548  00503A                     l19057:
 23549                           
 23550                           ; BSR set to: 0
 23551  00503A  51B3               	movf	(saveToEEPROM@byte_count+1)& (0+255),w,b
 23552  00503C  E11B               	bnz	l4294
 23553  00503E  0E4B               	movlw	75
 23554  005040  5DB2               	subwf	saveToEEPROM@byte_count& (0+255),w,b
 23555  005042  B0D8               	btfsc	status,0,c
 23556  005044  0012               	return	
 23557                           
 23558                           ; BSR set to: 0
 23559                           ;eeprom.c: 326: (Busy_eep(), Write_b_eep((byte_count + baseAddress),to_save[byte_count])
      +                          );
 23560                           
 23561                           ; BSR set to: 0
 23562                           
 23563                           ; BSR set to: 0
 23564  005046  EC31  F04B         	call	_Busy_eep	;wreg free
 23565  00504A  0100               	movlb	0	; () banked
 23566  00504C  51AF               	movf	saveToEEPROM@baseAddress& (0+255),w,b
 23567  00504E  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 23568  005050  6F60               	movwf	Write_b_eep@badd& (0+255),b
 23569  005052  51B0               	movf	(saveToEEPROM@baseAddress+1)& (0+255),w,b
 23570  005054  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 23571  005056  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 23572  005058  0E64               	movlw	low saveToEEPROM@to_save
 23573  00505A  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 23574  00505C  6ED9               	movwf	fsr2l,c
 23575  00505E  0E00               	movlw	high saveToEEPROM@to_save
 23576  005060  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 23577  005062  6EDA               	movwf	fsr2h,c
 23578  005064  50DF               	movf	indf2,w,c
 23579  005066  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 23580  005068  ECDC  F047         	call	_Write_b_eep	;wreg free
 23581  00506C  0100               	movlb	0	; () banked
 23582  00506E  4BB2               	infsnz	saveToEEPROM@byte_count& (0+255),f,b
 23583  005070  2BB3               	incf	(saveToEEPROM@byte_count+1)& (0+255),f,b
 23584  005072  D7E3               	goto	l19057
 23585  005074                     l4294:
 23586                           
 23587                           ; BSR set to: 0
 23588  005074  0012               	return		;funcret
 23589  005076                     __end_of_saveToEEPROM:
 23590                           	opt stack 0
 23591                           tblptru	equ	0xFF8
 23592                           tblptrh	equ	0xFF7
 23593                           tblptrl	equ	0xFF6
 23594                           tablat	equ	0xFF5
 23595                           prodh	equ	0xFF4
 23596                           prodl	equ	0xFF3
 23597                           intcon	equ	0xFF2
 23598                           intcon2	equ	0xFF1
 23599                           postinc0	equ	0xFEE
 23600                           wreg	equ	0xFE8
 23601                           indf1	equ	0xFE7
 23602                           postdec1	equ	0xFE5
 23603                           fsr1h	equ	0xFE2
 23604                           fsr1l	equ	0xFE1
 23605                           indf2	equ	0xFDF
 23606                           postinc2	equ	0xFDE
 23607                           plusw2	equ	0xFDB
 23608                           fsr2h	equ	0xFDA
 23609                           fsr2l	equ	0xFD9
 23610                           status	equ	0xFD8
 23611                           
 23612 ;; *************** function _Write_b_eep *****************
 23613 ;; Defined at:
 23614 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\write_B.c"
 23615 ;; Parameters:    Size  Location     Type
 23616 ;;  badd            2    0[BANK0 ] unsigned int 
 23617 ;;  bdat            1    2[BANK0 ] unsigned char 
 23618 ;; Auto vars:     Size  Location     Type
 23619 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 23620 ;; Return value:  Size  Location     Type
 23621 ;;                  1    wreg      void 
 23622 ;; Registers used:
 23623 ;;		wreg, status,2, status,0
 23624 ;; Tracked objects:
 23625 ;;		On entry : 0/0
 23626 ;;		On exit  : 0/0
 23627 ;;		Unchanged: 0/0
 23628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23629 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23632 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23633 ;;Total ram usage:        4 bytes
 23634 ;; Hardware stack levels used:    1
 23635 ;; Hardware stack levels required when called:    5
 23636 ;; This function calls:
 23637 ;;		Nothing
 23638 ;; This function is called by:
 23639 ;;		_Function_D_2
 23640 ;;		_Function_G_1
 23641 ;;		_Function_G_2
 23642 ;;		_Function_G_3
 23643 ;;		_Function_G_4
 23644 ;;		_initializeSaveSlotsOnce
 23645 ;;		_saveToEEPROM
 23646 ;; This function uses a non-reentrant model
 23647 ;;
 23648                           
 23649                           	psect	text71
 23650  008FB8                     __ptext71:
 23651                           	opt stack 0
 23652  008FB8                     _Write_b_eep:
 23653                           	opt stack 22
 23654                           
 23655                           ; BSR set to: 0
 23656                           ;incstack = 0
 23657  008FB8  0E00               	movlw	0
 23658  008FBA  0100               	movlb	0	; () banked
 23659  008FBC  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 23660                           
 23661                           ; BSR set to: 0
 23662  008FBE  5161               	movf	(Write_b_eep@badd+1)& (0+255),w,b
 23663  008FC0  0B03               	andlw	3
 23664  008FC2  6EAA               	movwf	4010,c	;volatile
 23665                           
 23666                           ; BSR set to: 0
 23667  008FC4  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 23668                           
 23669                           ; BSR set to: 0
 23670  008FC8  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 23671                           
 23672                           ; BSR set to: 0
 23673  008FCC  9EA6               	bcf	4006,7,c	;volsfr
 23674                           
 23675                           ; BSR set to: 0
 23676  008FCE  9CA6               	bcf	4006,6,c	;volsfr
 23677                           
 23678                           ; BSR set to: 0
 23679  008FD0  84A6               	bsf	4006,2,c	;volsfr
 23680                           
 23681                           ; BSR set to: 0
 23682  008FD2  0E00               	movlw	0
 23683  008FD4  BEF2               	btfsc	intcon,7,c	;volatile
 23684  008FD6  0E01               	movlw	1
 23685  008FD8  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 23686                           
 23687                           ; BSR set to: 0
 23688  008FDA  9EF2               	bcf	intcon,7,c	;volatile
 23689                           
 23690                           ; BSR set to: 0
 23691  008FDC  0E55               	movlw	85
 23692  008FDE  6EA7               	movwf	4007,c	;volsfr
 23693                           
 23694                           ; BSR set to: 0
 23695  008FE0  0EAA               	movlw	170
 23696  008FE2  6EA7               	movwf	4007,c	;volsfr
 23697                           
 23698                           ; BSR set to: 0
 23699  008FE4  82A6               	bsf	4006,1,c	;volsfr
 23700  008FE6                     
 23701                           ; BSR set to: 0
 23702  008FE6  B2A6               	btfsc	4006,1,c	;volsfr
 23703  008FE8  D7FE               	goto	l5425
 23704  008FEA  0100               	movlb	0	; () banked
 23705  008FEC  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 23706  008FEE  D002               	bra	u28645
 23707  008FF0  9EF2               	bcf	intcon,7,c	;volatile
 23708  008FF2  D001               	bra	u28646
 23709  008FF4                     u28645:
 23710  008FF4  8EF2               	bsf	intcon,7,c	;volatile
 23711  008FF6                     u28646:
 23712  008FF6  94A6               	bcf	4006,2,c	;volsfr
 23713  008FF8  0012               	return		;funcret
 23714  008FFA                     __end_of_Write_b_eep:
 23715                           	opt stack 0
 23716                           tblptru	equ	0xFF8
 23717                           tblptrh	equ	0xFF7
 23718                           tblptrl	equ	0xFF6
 23719                           tablat	equ	0xFF5
 23720                           prodh	equ	0xFF4
 23721                           prodl	equ	0xFF3
 23722                           intcon	equ	0xFF2
 23723                           intcon2	equ	0xFF1
 23724                           postinc0	equ	0xFEE
 23725                           wreg	equ	0xFE8
 23726                           indf1	equ	0xFE7
 23727                           postdec1	equ	0xFE5
 23728                           fsr1h	equ	0xFE2
 23729                           fsr1l	equ	0xFE1
 23730                           indf2	equ	0xFDF
 23731                           postinc2	equ	0xFDE
 23732                           plusw2	equ	0xFDB
 23733                           fsr2h	equ	0xFDA
 23734                           fsr2l	equ	0xFD9
 23735                           status	equ	0xFD8
 23736                           
 23737 ;; *************** function _Busy_eep *****************
 23738 ;; Defined at:
 23739 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\busy_eep.c"
 23740 ;; Parameters:    Size  Location     Type
 23741 ;;		None
 23742 ;; Auto vars:     Size  Location     Type
 23743 ;;		None
 23744 ;; Return value:  Size  Location     Type
 23745 ;;                  1    wreg      void 
 23746 ;; Registers used:
 23747 ;;		None
 23748 ;; Tracked objects:
 23749 ;;		On entry : 0/0
 23750 ;;		On exit  : 0/0
 23751 ;;		Unchanged: 0/0
 23752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23757 ;;Total ram usage:        0 bytes
 23758 ;; Hardware stack levels used:    1
 23759 ;; Hardware stack levels required when called:    5
 23760 ;; This function calls:
 23761 ;;		Nothing
 23762 ;; This function is called by:
 23763 ;;		_Function_D_2
 23764 ;;		_Function_G_1
 23765 ;;		_Function_G_2
 23766 ;;		_Function_G_3
 23767 ;;		_Function_G_4
 23768 ;;		_initializeSaveSlotsOnce
 23769 ;;		_saveToEEPROM
 23770 ;; This function uses a non-reentrant model
 23771 ;;
 23772                           
 23773                           	psect	text72
 23774  009662                     __ptext72:
 23775                           	opt stack 0
 23776  009662                     _Busy_eep:
 23777                           	opt stack 22
 23778                           
 23779                           ;incstack = 0
 23780  009662  B2A6               	btfsc	4006,1,c	;volsfr
 23781  009664  D7FE               	goto	_Busy_eep
 23782  009666  0012               	return	
 23783  009668                     __end_of_Busy_eep:
 23784                           	opt stack 0
 23785                           tblptru	equ	0xFF8
 23786                           tblptrh	equ	0xFF7
 23787                           tblptrl	equ	0xFF6
 23788                           tablat	equ	0xFF5
 23789                           prodh	equ	0xFF4
 23790                           prodl	equ	0xFF3
 23791                           intcon	equ	0xFF2
 23792                           intcon2	equ	0xFF1
 23793                           postinc0	equ	0xFEE
 23794                           wreg	equ	0xFE8
 23795                           indf1	equ	0xFE7
 23796                           postdec1	equ	0xFE5
 23797                           fsr1h	equ	0xFE2
 23798                           fsr1l	equ	0xFE1
 23799                           indf2	equ	0xFDF
 23800                           postinc2	equ	0xFDE
 23801                           plusw2	equ	0xFDB
 23802                           fsr2h	equ	0xFDA
 23803                           fsr2l	equ	0xFD9
 23804                           status	equ	0xFD8
 23805                           
 23806 ;; *************** function _Read_b_eep *****************
 23807 ;; Defined at:
 23808 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\read_B.c"
 23809 ;; Parameters:    Size  Location     Type
 23810 ;;  badd            2    0[BANK0 ] unsigned int 
 23811 ;; Auto vars:     Size  Location     Type
 23812 ;;		None
 23813 ;; Return value:  Size  Location     Type
 23814 ;;                  1    wreg      unsigned char 
 23815 ;; Registers used:
 23816 ;;		wreg, status,2, status,0
 23817 ;; Tracked objects:
 23818 ;;		On entry : 0/0
 23819 ;;		On exit  : 0/0
 23820 ;;		Unchanged: 0/0
 23821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23822 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23825 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23826 ;;Total ram usage:        2 bytes
 23827 ;; Hardware stack levels used:    1
 23828 ;; Hardware stack levels required when called:    5
 23829 ;; This function calls:
 23830 ;;		Nothing
 23831 ;; This function is called by:
 23832 ;;		_initializeSaveSlotsOnce
 23833 ;;		_selectSlotOnBoot
 23834 ;;		_loadFromEEPROM
 23835 ;;		_main
 23836 ;; This function uses a non-reentrant model
 23837 ;;
 23838                           
 23839                           	psect	text73
 23840  0095D4                     __ptext73:
 23841                           	opt stack 0
 23842  0095D4                     _Read_b_eep:
 23843                           	opt stack 23
 23844                           
 23845                           ;incstack = 0
 23846  0095D4  0100               	movlb	0	; () banked
 23847  0095D6  5161               	movf	(Read_b_eep@badd+1)& (0+255),w,b
 23848  0095D8  0B03               	andlw	3
 23849  0095DA  6EAA               	movwf	4010,c	;volatile
 23850                           
 23851                           ; BSR set to: 0
 23852  0095DC  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 23853                           
 23854                           ; BSR set to: 0
 23855  0095E0  9CA6               	bcf	4006,6,c	;volsfr
 23856                           
 23857                           ; BSR set to: 0
 23858  0095E2  9EA6               	bcf	4006,7,c	;volsfr
 23859                           
 23860                           ; BSR set to: 0
 23861  0095E4  80A6               	bsf	4006,0,c	;volsfr
 23862                           
 23863                           ; BSR set to: 0
 23864  0095E6  F000               	nop	
 23865  0095E8  F000               	nop	
 23866  0095EA  50A8               	movf	4008,w,c	;volatile
 23867  0095EC  0012               	return	
 23868  0095EE                     __end_of_Read_b_eep:
 23869                           	opt stack 0
 23870                           tblptru	equ	0xFF8
 23871                           tblptrh	equ	0xFF7
 23872                           tblptrl	equ	0xFF6
 23873                           tablat	equ	0xFF5
 23874                           prodh	equ	0xFF4
 23875                           prodl	equ	0xFF3
 23876                           intcon	equ	0xFF2
 23877                           intcon2	equ	0xFF1
 23878                           postinc0	equ	0xFEE
 23879                           wreg	equ	0xFE8
 23880                           indf1	equ	0xFE7
 23881                           postdec1	equ	0xFE5
 23882                           fsr1h	equ	0xFE2
 23883                           fsr1l	equ	0xFE1
 23884                           indf2	equ	0xFDF
 23885                           postinc2	equ	0xFDE
 23886                           plusw2	equ	0xFDB
 23887                           fsr2h	equ	0xFDA
 23888                           fsr2l	equ	0xFD9
 23889                           status	equ	0xFD8
 23890                           
 23891 ;; *************** function _initializeMenuArray *****************
 23892 ;; Defined at:
 23893 ;;		line 27 in file "menu.c"
 23894 ;; Parameters:    Size  Location     Type
 23895 ;;		None
 23896 ;; Auto vars:     Size  Location     Type
 23897 ;;  i               1   12[BANK0 ] unsigned char 
 23898 ;;  NumberOfElem    1   11[BANK0 ] unsigned char 
 23899 ;; Return value:  Size  Location     Type
 23900 ;;                  1    wreg      void 
 23901 ;; Registers used:
 23902 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23903 ;; Tracked objects:
 23904 ;;		On entry : 0/0
 23905 ;;		On exit  : 0/0
 23906 ;;		Unchanged: 0/0
 23907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23909 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23910 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23911 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23912 ;;Total ram usage:        3 bytes
 23913 ;; Hardware stack levels used:    1
 23914 ;; Hardware stack levels required when called:    6
 23915 ;; This function calls:
 23916 ;;		___wmul
 23917 ;; This function is called by:
 23918 ;;		_main
 23919 ;; This function uses a non-reentrant model
 23920 ;;
 23921                           
 23922                           	psect	text74
 23923  004C80                     __ptext74:
 23924                           	opt stack 0
 23925  004C80                     _initializeMenuArray:
 23926                           	opt stack 24
 23927                           
 23928                           ;menu.c: 30: unsigned char NumberOfElements = sizeof(menuArray)/sizeof(menuArray[0]);
 23929                           
 23930                           ;incstack = 0
 23931  004C80  0E23               	movlw	35
 23932  004C82  0100               	movlb	0	; () banked
 23933  004C84  6F6B               	movwf	initializeMenuArray@NumberOfElements& (0+255),b
 23934                           
 23935                           ;menu.c: 33: for(unsigned char i = 1;i<NumberOfElements;i++) {
 23936  004C86  0E01               	movlw	1
 23937  004C88  6F6C               	movwf	initializeMenuArray@i& (0+255),b
 23938  004C8A  D03C               	goto	l3328
 23939  004C8C                     
 23940                           ; BSR set to: 0
 23941                           ;menu.c: 34: menuArray[i].address = menuArray[i-1].address + menuArray[i-1].number;
 23942                           
 23943                           ; BSR set to: 0
 23944  004C8C  516C               	movf	initializeMenuArray@i& (0+255),w,b
 23945  004C8E  0D03               	mullw	3
 23946  004C90  0E01               	movlw	1
 23947  004C92  26F3               	addwf	prodl,f,c
 23948  004C94  0E00               	movlw	0
 23949  004C96  22F4               	addwfc	prodh,f,c
 23950  004C98  0E00               	movlw	low _menuArray
 23951  004C9A  24F3               	addwf	prodl,w,c
 23952  004C9C  6ED9               	movwf	fsr2l,c
 23953  004C9E  0E03               	movlw	high _menuArray
 23954  004CA0  20F4               	addwfc	prodh,w,c
 23955  004CA2  6EDA               	movwf	fsr2h,c
 23956  004CA4  0EFF               	movlw	255
 23957  004CA6  256C               	addwf	initializeMenuArray@i& (0+255),w,b
 23958  004CA8  6F64               	movwf	___wmul@multiplier& (0+255),b
 23959  004CAA  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 23960  004CAC  0EFF               	movlw	255
 23961  004CAE  2365               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 23962  004CB0  0E00               	movlw	0
 23963  004CB2  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23964  004CB4  0E03               	movlw	3
 23965  004CB6  6F66               	movwf	___wmul@multiplicand& (0+255),b
 23966  004CB8  EC66  F04A         	call	___wmul	;wreg free
 23967  004CBC  0E00               	movlw	low _menuArray
 23968  004CBE  0100               	movlb	0	; () banked
 23969  004CC0  2564               	addwf	?___wmul& (0+255),w,b
 23970  004CC2  6EE1               	movwf	fsr1l,c
 23971  004CC4  0E03               	movlw	high _menuArray
 23972  004CC6  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 23973  004CC8  6EE2               	movwf	fsr1h,c
 23974  004CCA  50E7               	movf	indf1,w,c
 23975  004CCC  6F6A               	movwf	??_initializeMenuArray& (0+255),b
 23976  004CCE  0EFF               	movlw	255
 23977  004CD0  256C               	addwf	initializeMenuArray@i& (0+255),w,b
 23978  004CD2  6F64               	movwf	___wmul@multiplier& (0+255),b
 23979  004CD4  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 23980  004CD6  0EFF               	movlw	255
 23981  004CD8  2365               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 23982  004CDA  0E00               	movlw	0
 23983  004CDC  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23984  004CDE  0E03               	movlw	3
 23985  004CE0  6F66               	movwf	___wmul@multiplicand& (0+255),b
 23986  004CE2  EC66  F04A         	call	___wmul	;wreg free
 23987  004CE6  0E01               	movlw	1
 23988  004CE8  0100               	movlb	0	; () banked
 23989  004CEA  2764               	addwf	?___wmul& (0+255),f,b
 23990  004CEC  0E00               	movlw	0
 23991  004CEE  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 23992  004CF0  0E00               	movlw	low _menuArray
 23993  004CF2  2564               	addwf	?___wmul& (0+255),w,b
 23994  004CF4  6EE1               	movwf	fsr1l,c
 23995  004CF6  0E03               	movlw	high _menuArray
 23996  004CF8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 23997  004CFA  6EE2               	movwf	fsr1h,c
 23998  004CFC  50E7               	movf	indf1,w,c
 23999  004CFE  256A               	addwf	??_initializeMenuArray& (0+255),w,b
 24000  004D00  6EDF               	movwf	indf2,c
 24001                           
 24002                           ; BSR set to: 0
 24003  004D02  2B6C               	incf	initializeMenuArray@i& (0+255),f,b
 24004  004D04                     l3328:
 24005                           
 24006                           ; BSR set to: 0
 24007                           
 24008                           ; BSR set to: 0
 24009  004D04  516B               	movf	initializeMenuArray@NumberOfElements& (0+255),w,b
 24010  004D06  5D6C               	subwf	initializeMenuArray@i& (0+255),w,b
 24011  004D08  A0D8               	btfss	status,0,c
 24012  004D0A  D7C0               	goto	l3329
 24013                           
 24014                           ; BSR set to: 0
 24015                           ;menu.c: 35: }
 24016                           ;menu.c: 38: mainMenu = menuArray[0];
 24017  004D0C  C300  F168         	movff	_menuArray,_mainMenu
 24018  004D10  C301  F169         	movff	_menuArray+1,_mainMenu+1
 24019  004D14  C302  F16A         	movff	_menuArray+2,_mainMenu+2
 24020                           
 24021                           ;menu.c: 39: keyboardMenu = menuArray[1];
 24022  004D18  C303  F04A         	movff	_menuArray+3,_keyboardMenu
 24023  004D1C  C304  F04B         	movff	_menuArray+4,_keyboardMenu+1
 24024  004D20  C305  F04C         	movff	_menuArray+5,_keyboardMenu+2
 24025                           
 24026                           ;menu.c: 40: modeMenu = menuArray[2];
 24027  004D24  C306  F047         	movff	_menuArray+6,_modeMenu
 24028  004D28  C307  F048         	movff	_menuArray+7,_modeMenu+1
 24029  004D2C  C308  F049         	movff	_menuArray+8,_modeMenu+2
 24030                           
 24031                           ;menu.c: 41: triadMenu = menuArray[3];
 24032  004D30  C309  F044         	movff	_menuArray+9,_triadMenu
 24033  004D34  C30A  F045         	movff	_menuArray+10,_triadMenu+1
 24034  004D38  C30B  F046         	movff	_menuArray+11,_triadMenu+2
 24035                           
 24036                           ;menu.c: 42: seventhMenu = menuArray[4];
 24037  004D3C  C30C  F165         	movff	_menuArray+12,_seventhMenu
 24038  004D40  C30D  F166         	movff	_menuArray+13,_seventhMenu+1
 24039  004D44  C30E  F167         	movff	_menuArray+14,_seventhMenu+2
 24040                           
 24041                           ;menu.c: 43: transposeMenu = menuArray[5];
 24042  004D48  C30F  F162         	movff	_menuArray+15,_transposeMenu
 24043  004D4C  C310  F163         	movff	_menuArray+16,_transposeMenu+1
 24044  004D50  C311  F164         	movff	_menuArray+17,_transposeMenu+2
 24045                           
 24046                           ;menu.c: 44: drumMenu = menuArray[6];
 24047  004D54  C312  F041         	movff	_menuArray+18,_drumMenu
 24048  004D58  C313  F042         	movff	_menuArray+19,_drumMenu+1
 24049  004D5C  C314  F043         	movff	_menuArray+20,_drumMenu+2
 24050                           
 24051                           ;menu.c: 45: drumCCTypeMenu = menuArray[7];
 24052  004D60  C315  F15F         	movff	_menuArray+21,_drumCCTypeMenu
 24053  004D64  C316  F160         	movff	_menuArray+22,_drumCCTypeMenu+1
 24054  004D68  C317  F161         	movff	_menuArray+23,_drumCCTypeMenu+2
 24055                           
 24056                           ;menu.c: 46: drumNNMenu = menuArray[8];
 24057  004D6C  C318  F15C         	movff	_menuArray+24,_drumNNMenu
 24058  004D70  C319  F15D         	movff	_menuArray+25,_drumNNMenu+1
 24059  004D74  C31A  F15E         	movff	_menuArray+26,_drumNNMenu+2
 24060                           
 24061                           ;menu.c: 47: drumCCMenu = menuArray[9];
 24062  004D78  C31B  F159         	movff	_menuArray+27,_drumCCMenu
 24063  004D7C  C31C  F15A         	movff	_menuArray+28,_drumCCMenu+1
 24064  004D80  C31D  F15B         	movff	_menuArray+29,_drumCCMenu+2
 24065                           
 24066                           ;menu.c: 48: potsMenu = menuArray[10];
 24067  004D84  C31E  F03E         	movff	_menuArray+30,_potsMenu
 24068  004D88  C31F  F03F         	movff	_menuArray+31,_potsMenu+1
 24069  004D8C  C320  F040         	movff	_menuArray+32,_potsMenu+2
 24070                           
 24071                           ;menu.c: 49: potsResoMenu = menuArray[11];
 24072  004D90  C321  F156         	movff	_menuArray+33,_potsResoMenu
 24073  004D94  C322  F157         	movff	_menuArray+34,_potsResoMenu+1
 24074  004D98  C323  F158         	movff	_menuArray+35,_potsResoMenu+2
 24075                           
 24076                           ;menu.c: 50: potsCCMenu = menuArray[12];
 24077  004D9C  C324  F150         	movff	_menuArray+36,_potsCCMenu
 24078  004DA0  C325  F151         	movff	_menuArray+37,_potsCCMenu+1
 24079  004DA4  C326  F152         	movff	_menuArray+38,_potsCCMenu+2
 24080                           
 24081                           ;menu.c: 51: slidepotsCCMenu = menuArray[13];
 24082  004DA8  C327  F14D         	movff	_menuArray+39,_slidepotsCCMenu
 24083  004DAC  C328  F14E         	movff	_menuArray+40,_slidepotsCCMenu+1
 24084  004DB0  C329  F14F         	movff	_menuArray+41,_slidepotsCCMenu+2
 24085                           
 24086                           ;menu.c: 52: joystickCCMenu = menuArray[14];
 24087  004DB4  C32A  F14A         	movff	_menuArray+42,_joystickCCMenu
 24088  004DB8  C32B  F14B         	movff	_menuArray+43,_joystickCCMenu+1
 24089  004DBC  C32C  F14C         	movff	_menuArray+44,_joystickCCMenu+2
 24090                           
 24091                           ;menu.c: 53: midiChannelMenu = menuArray[15];
 24092  004DC0  C32D  F147         	movff	_menuArray+45,_midiChannelMenu
 24093  004DC4  C32E  F148         	movff	_menuArray+46,_midiChannelMenu+1
 24094  004DC8  C32F  F149         	movff	_menuArray+47,_midiChannelMenu+2
 24095                           
 24096                           ;menu.c: 54: eepromMenu = menuArray[16];
 24097  004DCC  C330  F13B         	movff	_menuArray+48,_eepromMenu
 24098  004DD0  C331  F13C         	movff	_menuArray+49,_eepromMenu+1
 24099  004DD4  C332  F13D         	movff	_menuArray+50,_eepromMenu+2
 24100                           
 24101                           ;menu.c: 55: savesMenu = menuArray[17];
 24102  004DD8  C333  F0DF         	movff	_menuArray+51,_savesMenu
 24103  004DDC  C334  F0E0         	movff	_menuArray+52,_savesMenu+1
 24104  004DE0  C335  F0E1         	movff	_menuArray+53,_savesMenu+2
 24105                           
 24106                           ;menu.c: 56: encoderPolarityMenu = menuArray[18];
 24107  004DE4  C336  F138         	movff	_menuArray+54,_encoderPolarityMenu
 24108  004DE8  C337  F139         	movff	_menuArray+55,_encoderPolarityMenu+1
 24109  004DEC  C338  F13A         	movff	_menuArray+56,_encoderPolarityMenu+2
 24110                           
 24111                           ;menu.c: 57: arpeggiatorMenu = menuArray[19];
 24112  004DF0  C339  F03B         	movff	_menuArray+57,_arpeggiatorMenu
 24113  004DF4  C33A  F03C         	movff	_menuArray+58,_arpeggiatorMenu+1
 24114  004DF8  C33B  F03D         	movff	_menuArray+59,_arpeggiatorMenu+2
 24115                           
 24116                           ;menu.c: 58: arpeggiatorOnOffMenu = menuArray[20];
 24117  004DFC  C33C  F135         	movff	_menuArray+60,_arpeggiatorOnOffMenu
 24118  004E00  C33D  F136         	movff	_menuArray+61,_arpeggiatorOnOffMenu+1
 24119  004E04  C33E  F137         	movff	_menuArray+62,_arpeggiatorOnOffMenu+2
 24120                           
 24121                           ;menu.c: 59: arpeggiatorTypeMenu = menuArray[21];
 24122  004E08  C33F  F12C         	movff	_menuArray+63,_arpeggiatorTypeMenu
 24123  004E0C  C340  F12D         	movff	_menuArray+64,_arpeggiatorTypeMenu+1
 24124  004E10  C341  F12E         	movff	_menuArray+65,_arpeggiatorTypeMenu+2
 24125                           
 24126                           ;menu.c: 60: arpeggiatorNoteLengthMenu = menuArray[22];
 24127  004E14  C342  F129         	movff	_menuArray+66,_arpeggiatorNoteLengthMenu
 24128  004E18  C343  F12A         	movff	_menuArray+67,_arpeggiatorNoteLengthMenu+1
 24129  004E1C  C344  F12B         	movff	_menuArray+68,_arpeggiatorNoteLengthMenu+2
 24130                           
 24131                           ;menu.c: 61: arpeggiatorLatchMenu = menuArray[23];
 24132  004E20  C345  F126         	movff	_menuArray+69,_arpeggiatorLatchMenu
 24133  004E24  C346  F127         	movff	_menuArray+70,_arpeggiatorLatchMenu+1
 24134  004E28  C347  F128         	movff	_menuArray+71,_arpeggiatorLatchMenu+2
 24135                           
 24136                           ;menu.c: 62: arpeggiatorLatchOnOffMenu = menuArray[24];
 24137  004E2C  C348  F123         	movff	_menuArray+72,_arpeggiatorLatchOnOffMenu
 24138  004E30  C349  F124         	movff	_menuArray+73,_arpeggiatorLatchOnOffMenu+1
 24139  004E34  C34A  F125         	movff	_menuArray+74,_arpeggiatorLatchOnOffMenu+2
 24140                           
 24141                           ;menu.c: 63: arpeggiatorAutoLatchOnOffMenu = menuArray[25];
 24142  004E38  C34B  F120         	movff	_menuArray+75,_arpeggiatorAutoLatchOnOffMenu
 24143  004E3C  C34C  F121         	movff	_menuArray+76,_arpeggiatorAutoLatchOnOffMenu+1
 24144  004E40  C34D  F122         	movff	_menuArray+77,_arpeggiatorAutoLatchOnOffMenu+2
 24145                           
 24146                           ;menu.c: 64: arpeggiatorUnLatchModeMenu = menuArray[26];
 24147  004E44  C34E  F11D         	movff	_menuArray+78,_arpeggiatorUnLatchModeMenu
 24148  004E48  C34F  F11E         	movff	_menuArray+79,_arpeggiatorUnLatchModeMenu+1
 24149  004E4C  C350  F11F         	movff	_menuArray+80,_arpeggiatorUnLatchModeMenu+2
 24150                           
 24151                           ;menu.c: 65: arpeggiatorRandomizeSkipMenu = menuArray[27];
 24152  004E50  C351  F11A         	movff	_menuArray+81,_arpeggiatorRandomizeSkipMenu
 24153  004E54  C352  F11B         	movff	_menuArray+82,_arpeggiatorRandomizeSkipMenu+1
 24154  004E58  C353  F11C         	movff	_menuArray+83,_arpeggiatorRandomizeSkipMenu+2
 24155                           
 24156                           ;menu.c: 66: arpeggiatorRandomizeTypeMenu = menuArray[28];
 24157  004E5C  C354  F117         	movff	_menuArray+84,_arpeggiatorRandomizeTypeMenu
 24158  004E60  C355  F118         	movff	_menuArray+85,_arpeggiatorRandomizeTypeMenu+1
 24159  004E64  C356  F119         	movff	_menuArray+86,_arpeggiatorRandomizeTypeMenu+2
 24160                           
 24161                           ;menu.c: 67: arpeggiatorSkipFirstLastMenu = menuArray[29];
 24162  004E68  C357  F114         	movff	_menuArray+87,_arpeggiatorSkipFirstLastMenu
 24163  004E6C  C358  F115         	movff	_menuArray+88,_arpeggiatorSkipFirstLastMenu+1
 24164  004E70  C359  F116         	movff	_menuArray+89,_arpeggiatorSkipFirstLastMenu+2
 24165                           
 24166                           ;menu.c: 68: arpeggiatorLastNoteModeMenu = menuArray[30];
 24167  004E74  C35A  F0DC         	movff	_menuArray+90,_arpeggiatorLastNoteModeMenu
 24168  004E78  C35B  F0DD         	movff	_menuArray+91,_arpeggiatorLastNoteModeMenu+1
 24169  004E7C  C35C  F0DE         	movff	_menuArray+92,_arpeggiatorLastNoteModeMenu+2
 24170                           
 24171                           ; BSR set to: 0
 24172  004E80  0012               	return		;funcret
 24173  004E82                     __end_of_initializeMenuArray:
 24174                           	opt stack 0
 24175                           tblptru	equ	0xFF8
 24176                           tblptrh	equ	0xFF7
 24177                           tblptrl	equ	0xFF6
 24178                           tablat	equ	0xFF5
 24179                           prodh	equ	0xFF4
 24180                           prodl	equ	0xFF3
 24181                           intcon	equ	0xFF2
 24182                           intcon2	equ	0xFF1
 24183                           postinc0	equ	0xFEE
 24184                           wreg	equ	0xFE8
 24185                           indf1	equ	0xFE7
 24186                           postdec1	equ	0xFE5
 24187                           fsr1h	equ	0xFE2
 24188                           fsr1l	equ	0xFE1
 24189                           indf2	equ	0xFDF
 24190                           postinc2	equ	0xFDE
 24191                           plusw2	equ	0xFDB
 24192                           fsr2h	equ	0xFDA
 24193                           fsr2l	equ	0xFD9
 24194                           status	equ	0xFD8
 24195                           
 24196 ;; *************** function _displayTest *****************
 24197 ;; Defined at:
 24198 ;;		line 31 in file "segment.c"
 24199 ;; Parameters:    Size  Location     Type
 24200 ;;		None
 24201 ;; Auto vars:     Size  Location     Type
 24202 ;;		None
 24203 ;; Return value:  Size  Location     Type
 24204 ;;                  1    wreg      void 
 24205 ;; Registers used:
 24206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24207 ;; Tracked objects:
 24208 ;;		On entry : 0/0
 24209 ;;		On exit  : 0/0
 24210 ;;		Unchanged: 0/0
 24211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24214 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24215 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24216 ;;Total ram usage:        2 bytes
 24217 ;; Hardware stack levels used:    1
 24218 ;; Hardware stack levels required when called:    6
 24219 ;; This function calls:
 24220 ;;		_strcpy
 24221 ;; This function is called by:
 24222 ;;		_main
 24223 ;; This function uses a non-reentrant model
 24224 ;;
 24225                           
 24226                           	psect	text75
 24227  007FEE                     __ptext75:
 24228                           	opt stack 0
 24229  007FEE                     _displayTest:
 24230                           	opt stack 24
 24231                           
 24232                           ;segment.c: 37: DISPLAY_MODE = 1;
 24233                           
 24234                           ; BSR set to: 0
 24235                           ;incstack = 0
 24236  007FEE  0E01               	movlw	1
 24237  007FF0  6E5A               	movwf	_DISPLAY_MODE,c
 24238                           
 24239                           ;segment.c: 38: strcpy(string_to_display,"tESt");
 24240  007FF2  0EEE               	movlw	low _string_to_display
 24241  007FF4  0100               	movlb	0	; () banked
 24242  007FF6  6F60               	movwf	strcpy@to& (0+255),b
 24243  007FF8  0E01               	movlw	high _string_to_display
 24244  007FFA  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24245  007FFC  0ED7               	movlw	low STR_8
 24246  007FFE  6F62               	movwf	strcpy@from& (0+255),b
 24247  008000  0EFF               	movlw	high STR_8
 24248  008002  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24249  008004  EC5B  F049         	call	_strcpy	;wreg free
 24250                           
 24251                           ;segment.c: 40: _delay((unsigned long)((500)*(20000000/4000.0)));
 24252  008008  0E0D               	movlw	13
 24253  00800A  0100               	movlb	0	; () banked
 24254  00800C  6F67               	movwf	(??_displayTest+1)& (0+255),b
 24255  00800E  0EAF               	movlw	175
 24256  008010  6F66               	movwf	??_displayTest& (0+255),b
 24257  008012  0EB6               	movlw	182
 24258  008014                     u44887:
 24259  008014  2EE8               	decfsz	wreg,f,c
 24260  008016  D7FE               	bra	u44887
 24261  008018  2F66               	decfsz	??_displayTest& (0+255),f,b
 24262  00801A  D7FC               	bra	u44887
 24263  00801C  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 24264  00801E  D7FA               	bra	u44887
 24265  008020  F000               	nop	
 24266                           
 24267                           ;segment.c: 42: DISPLAY_MODE = 0;
 24268  008022  0E00               	movlw	0
 24269  008024  6E5A               	movwf	_DISPLAY_MODE,c
 24270                           
 24271                           ;segment.c: 43: DIGIT_MODE = 0;
 24272  008026  0E00               	movlw	0
 24273  008028  6E59               	movwf	_DIGIT_MODE,c
 24274                           
 24275                           ;segment.c: 44: number_to_display = 8888;
 24276  00802A  0E22               	movlw	34
 24277  00802C  6E5C               	movwf	_number_to_display+1,c
 24278  00802E  0EB8               	movlw	184
 24279  008030  6E5B               	movwf	_number_to_display,c
 24280                           
 24281                           ;segment.c: 45: light_decimal_points = 1;
 24282  008032  8C36               	bsf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 24283                           
 24284                           ;segment.c: 46: _delay((unsigned long)((1000)*(20000000/4000.0)));
 24285  008034  0E1A               	movlw	26
 24286  008036  0100               	movlb	0	; () banked
 24287  008038  6F67               	movwf	(??_displayTest+1)& (0+255),b
 24288  00803A  0E5E               	movlw	94
 24289  00803C  6F66               	movwf	??_displayTest& (0+255),b
 24290  00803E  0E6E               	movlw	110
 24291  008040                     u44897:
 24292  008040  2EE8               	decfsz	wreg,f,c
 24293  008042  D7FE               	bra	u44897
 24294  008044  2F66               	decfsz	??_displayTest& (0+255),f,b
 24295  008046  D7FC               	bra	u44897
 24296  008048  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 24297  00804A  D7FA               	bra	u44897
 24298  00804C  F000               	nop	
 24299                           
 24300                           ;segment.c: 47: light_decimal_points = 0;
 24301  00804E  9C36               	bcf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 24302                           
 24303                           ;segment.c: 49: DISPLAY_MODE = 1;
 24304  008050  0E01               	movlw	1
 24305  008052  6E5A               	movwf	_DISPLAY_MODE,c
 24306                           
 24307                           ;segment.c: 50: strcpy(string_to_display,"    ");
 24308  008054  0EEE               	movlw	low _string_to_display
 24309  008056  0100               	movlb	0	; () banked
 24310  008058  6F60               	movwf	strcpy@to& (0+255),b
 24311  00805A  0E01               	movlw	high _string_to_display
 24312  00805C  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24313  00805E  0E70               	movlw	low (STR_10+12)
 24314  008060  6F62               	movwf	strcpy@from& (0+255),b
 24315  008062  0EFD               	movlw	high (STR_10+12)
 24316  008064  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24317  008066  EC5B  F049         	call	_strcpy	;wreg free
 24318  00806A  0012               	return		;funcret
 24319  00806C                     __end_of_displayTest:
 24320                           	opt stack 0
 24321                           tblptru	equ	0xFF8
 24322                           tblptrh	equ	0xFF7
 24323                           tblptrl	equ	0xFF6
 24324                           tablat	equ	0xFF5
 24325                           prodh	equ	0xFF4
 24326                           prodl	equ	0xFF3
 24327                           intcon	equ	0xFF2
 24328                           intcon2	equ	0xFF1
 24329                           postinc0	equ	0xFEE
 24330                           wreg	equ	0xFE8
 24331                           indf1	equ	0xFE7
 24332                           postdec1	equ	0xFE5
 24333                           fsr1h	equ	0xFE2
 24334                           fsr1l	equ	0xFE1
 24335                           indf2	equ	0xFDF
 24336                           postinc2	equ	0xFDE
 24337                           plusw2	equ	0xFDB
 24338                           fsr2h	equ	0xFDA
 24339                           fsr2l	equ	0xFD9
 24340                           status	equ	0xFD8
 24341                           
 24342 ;; *************** function _digitalInputs *****************
 24343 ;; Defined at:
 24344 ;;		line 289 in file "main.c"
 24345 ;; Parameters:    Size  Location     Type
 24346 ;;		None
 24347 ;; Auto vars:     Size  Location     Type
 24348 ;;		None
 24349 ;; Return value:  Size  Location     Type
 24350 ;;                  1    wreg      void 
 24351 ;; Registers used:
 24352 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24353 ;; Tracked objects:
 24354 ;;		On entry : 0/0
 24355 ;;		On exit  : 0/0
 24356 ;;		Unchanged: 0/0
 24357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24362 ;;Total ram usage:        0 bytes
 24363 ;; Hardware stack levels used:    1
 24364 ;; Hardware stack levels required when called:   14
 24365 ;; This function calls:
 24366 ;;		_buttonInputsSerial
 24367 ;;		_keyboardTranspose
 24368 ;;		_processDrumpad
 24369 ;;		_processKeyboard
 24370 ;;		_processOctave
 24371 ;; This function is called by:
 24372 ;;		_main
 24373 ;; This function uses a non-reentrant model
 24374 ;;
 24375                           
 24376                           	psect	text76
 24377  008D90                     __ptext76:
 24378                           	opt stack 0
 24379  008D90                     _digitalInputs:
 24380                           	opt stack 16
 24381                           
 24382                           ;main.c: 291: buttonInputsSerial();
 24383                           
 24384                           ;incstack = 0
 24385  008D90  EC2E  F041         	call	_buttonInputsSerial	;wreg free
 24386                           
 24387                           ;main.c: 294: if(button_state_now != button_state_last) {
 24388  008D94  0100               	movlb	0	; () banked
 24389  008D96  51D4               	movf	_button_state_last& (0+255),w,b
 24390  008D98  19D8               	xorwf	_button_state_now& (0+255),w,b
 24391  008D9A  E10A               	bnz	u37980
 24392  008D9C  51D5               	movf	(_button_state_last+1)& (0+255),w,b
 24393  008D9E  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 24394  008DA0  E107               	bnz	u37980
 24395  008DA2  51D6               	movf	(_button_state_last+2)& (0+255),w,b
 24396  008DA4  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 24397  008DA6  E104               	bnz	u37980
 24398  008DA8  51D7               	movf	(_button_state_last+3)& (0+255),w,b
 24399  008DAA  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 24400  008DAC  B4D8               	btfsc	status,2,c
 24401  008DAE  D00E               	goto	l4788
 24402  008DB0                     u37980:
 24403                           
 24404                           ; BSR set to: 0
 24405                           ;main.c: 295: processOctave();
 24406  008DB0  EC96  F01A         	call	_processOctave	;wreg free
 24407                           
 24408                           ;main.c: 296: keyboardTranspose();
 24409  008DB4  EC74  F021         	call	_keyboardTranspose	;wreg free
 24410                           
 24411                           ;main.c: 297: processKeyboard();
 24412  008DB8  EC3C  F043         	call	_processKeyboard	;wreg free
 24413                           
 24414                           ;main.c: 298: button_state_last = button_state_now;
 24415  008DBC  C0D8  F0D4         	movff	_button_state_now,_button_state_last
 24416  008DC0  C0D9  F0D5         	movff	_button_state_now+1,_button_state_last+1
 24417  008DC4  C0DA  F0D6         	movff	_button_state_now+2,_button_state_last+2
 24418  008DC8  C0DB  F0D7         	movff	_button_state_now+3,_button_state_last+3
 24419  008DCC                     l4788:
 24420                           
 24421                           ;main.c: 299: }
 24422                           ;main.c: 302: if(drum_button_state_now != drum_button_state_last) {
 24423  008DCC  0100               	movlb	0	; () banked
 24424  008DCE  51ED               	movf	_drum_button_state_last& (0+255),w,b
 24425  008DD0  19EE               	xorwf	_drum_button_state_now& (0+255),w,b
 24426  008DD2  B4D8               	btfsc	status,2,c
 24427  008DD4  0012               	return	
 24428                           
 24429                           ; BSR set to: 0
 24430                           ;main.c: 303: processOctave();
 24431  008DD6  EC96  F01A         	call	_processOctave	;wreg free
 24432                           
 24433                           ;main.c: 304: processDrumpad();
 24434  008DDA  EC33  F00E         	call	_processDrumpad	;wreg free
 24435                           
 24436                           ;main.c: 305: drum_button_state_last = drum_button_state_now;
 24437  008DDE  C0EE  F0ED         	movff	_drum_button_state_now,_drum_button_state_last
 24438  008DE2  0012               	return	
 24439  008DE4                     __end_of_digitalInputs:
 24440                           	opt stack 0
 24441                           tblptru	equ	0xFF8
 24442                           tblptrh	equ	0xFF7
 24443                           tblptrl	equ	0xFF6
 24444                           tablat	equ	0xFF5
 24445                           prodh	equ	0xFF4
 24446                           prodl	equ	0xFF3
 24447                           intcon	equ	0xFF2
 24448                           intcon2	equ	0xFF1
 24449                           postinc0	equ	0xFEE
 24450                           wreg	equ	0xFE8
 24451                           indf1	equ	0xFE7
 24452                           postdec1	equ	0xFE5
 24453                           fsr1h	equ	0xFE2
 24454                           fsr1l	equ	0xFE1
 24455                           indf2	equ	0xFDF
 24456                           postinc2	equ	0xFDE
 24457                           plusw2	equ	0xFDB
 24458                           fsr2h	equ	0xFDA
 24459                           fsr2l	equ	0xFD9
 24460                           status	equ	0xFD8
 24461                           
 24462 ;; *************** function _processOctave *****************
 24463 ;; Defined at:
 24464 ;;		line 275 in file "octave.c"
 24465 ;; Parameters:    Size  Location     Type
 24466 ;;		None
 24467 ;; Auto vars:     Size  Location     Type
 24468 ;;		None
 24469 ;; Return value:  Size  Location     Type
 24470 ;;                  1    wreg      void 
 24471 ;; Registers used:
 24472 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24473 ;; Tracked objects:
 24474 ;;		On entry : 0/0
 24475 ;;		On exit  : 0/0
 24476 ;;		Unchanged: 0/0
 24477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24480 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24481 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24482 ;;Total ram usage:        2 bytes
 24483 ;; Hardware stack levels used:    1
 24484 ;; Hardware stack levels required when called:   13
 24485 ;; This function calls:
 24486 ;;		___awmod
 24487 ;;		___wmul
 24488 ;;		_doTheLatch
 24489 ;;		_doTheUnLatch
 24490 ;;		_key_press_release_note_off
 24491 ;;		_printThisNumber
 24492 ;;		_random_pitches
 24493 ;;		_random_pitches_non_repeating
 24494 ;;		_resetArpeggio
 24495 ;;		_strcpy
 24496 ;;		_wait_one_pulse
 24497 ;; This function is called by:
 24498 ;;		_digitalInputs
 24499 ;; This function uses a non-reentrant model
 24500 ;;
 24501                           
 24502                           	psect	text77
 24503  00352C                     __ptext77:
 24504                           	opt stack 0
 24505  00352C                     _processOctave:
 24506                           	opt stack 16
 24507                           
 24508                           ;octave.c: 280: if(ARPEGGIO_ON == 1) {
 24509                           
 24510                           ;incstack = 0
 24511  00352C  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 24512  00352E  D045               	goto	l2793
 24513                           
 24514                           ;octave.c: 284: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x01))
 24515  003530  0100               	movlb	0	; () banked
 24516  003532  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24517                           
 24518                           ; BSR set to: 0
 24519  003534  A1EE               	btfss	_drum_button_state_now& (0+255),0,b
 24520  003536  D002               	goto	l2788
 24521                           
 24522                           ; BSR set to: 0
 24523                           ;octave.c: 285: {
 24524                           ;octave.c: 292: doTheLatch();
 24525  003538  ECAE  F04A         	call	_doTheLatch	;wreg free
 24526  00353C                     l2788:
 24527                           
 24528                           ;octave.c: 293: }
 24529                           ;octave.c: 297: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x02)) {
 24530  00353C  0100               	movlb	0	; () banked
 24531  00353E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24532                           
 24533                           ; BSR set to: 0
 24534  003540  A3EE               	btfss	_drum_button_state_now& (0+255),1,b
 24535  003542  D002               	goto	l2789
 24536                           
 24537                           ; BSR set to: 0
 24538                           ;octave.c: 299: doTheUnLatch();
 24539  003544  EC3B  F028         	call	_doTheUnLatch	;wreg free
 24540  003548                     l2789:
 24541                           
 24542                           ;octave.c: 378: }
 24543                           ;octave.c: 382: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x04)){
 24544  003548  0100               	movlb	0	; () banked
 24545  00354A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24546                           
 24547                           ; BSR set to: 0
 24548  00354C  A5EE               	btfss	_drum_button_state_now& (0+255),2,b
 24549  00354E  D018               	goto	l2790
 24550                           
 24551                           ; BSR set to: 0
 24552                           ;octave.c: 385: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 24553  003550  0E05               	movlw	5
 24554  003552  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 24555  003554  B4D8               	btfsc	status,2,c
 24556                           
 24557                           ; BSR set to: 0
 24558  003556  EC62  F045         	call	_random_pitches	;wreg free
 24559                           
 24560                           ;octave.c: 386: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING){random_pitches_non_repeating()
      +                          ;}
 24561  00355A  0E04               	movlw	4
 24562  00355C  0100               	movlb	0	; () banked
 24563  00355E  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 24564  003560  B4D8               	btfsc	status,2,c
 24565                           
 24566                           ; BSR set to: 0
 24567  003562  ECF5  F03D         	call	_random_pitches_non_repeating	;wreg free
 24568                           
 24569                           ;octave.c: 388: DISPLAY_MODE = 1;
 24570  003566  0E01               	movlw	1
 24571  003568  6E5A               	movwf	_DISPLAY_MODE,c
 24572                           
 24573                           ;octave.c: 389: strcpy(string_to_display, "rAnd");
 24574  00356A  0EEE               	movlw	low _string_to_display
 24575  00356C  0100               	movlb	0	; () banked
 24576  00356E  6F60               	movwf	strcpy@to& (0+255),b
 24577  003570  0E01               	movlw	high _string_to_display
 24578  003572  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24579  003574  0EEB               	movlw	low STR_6
 24580  003576  6F62               	movwf	strcpy@from& (0+255),b
 24581  003578  0EFF               	movlw	high STR_6
 24582  00357A  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24583  00357C  EC5B  F049         	call	_strcpy	;wreg free
 24584  003580                     l2790:
 24585                           
 24586                           ;octave.c: 391: }
 24587                           ;octave.c: 395: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x08)){
 24588  003580  0100               	movlb	0	; () banked
 24589  003582  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24590                           
 24591                           ; BSR set to: 0
 24592  003584  A7EE               	btfss	_drum_button_state_now& (0+255),3,b
 24593  003586  D019               	goto	l2793
 24594                           
 24595                           ; BSR set to: 0
 24596                           ;octave.c: 398: wait_one_pulse(LAST_NOTE_MODE_RESET);
 24597  003588  0E00               	movlw	0
 24598  00358A  BE33               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 24599  00358C  0E01               	movlw	1
 24600  00358E  EC00  F04A         	call	_wait_one_pulse
 24601                           
 24602                           ;octave.c: 399: note_off_was_sent = 1;
 24603  003592  8233               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24604                           
 24605                           ;octave.c: 400: key_press_release_note_off();
 24606  003594  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 24607                           
 24608                           ;octave.c: 403: resetArpeggio();
 24609  003598  EC95  F048         	call	_resetArpeggio	;wreg free
 24610                           
 24611                           ;octave.c: 406: TIMER_OVERFLOWS = 0;
 24612  00359C  0E00               	movlw	0
 24613  00359E  6E54               	movwf	_TIMER_OVERFLOWS,c
 24614                           
 24615                           ;octave.c: 408: DISPLAY_MODE = 1;
 24616  0035A0  0E01               	movlw	1
 24617  0035A2  6E5A               	movwf	_DISPLAY_MODE,c
 24618                           
 24619                           ;octave.c: 409: strcpy(string_to_display, "rSEt");
 24620  0035A4  0EEE               	movlw	low _string_to_display
 24621  0035A6  0100               	movlb	0	; () banked
 24622  0035A8  6F60               	movwf	strcpy@to& (0+255),b
 24623  0035AA  0E01               	movlw	high _string_to_display
 24624  0035AC  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24625  0035AE  0EF5               	movlw	low STR_7
 24626  0035B0  6F62               	movwf	strcpy@from& (0+255),b
 24627  0035B2  0EFF               	movlw	high STR_7
 24628  0035B4  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24629  0035B6  EC5B  F049         	call	_strcpy	;wreg free
 24630  0035BA                     l2793:
 24631                           
 24632                           ;octave.c: 410: }
 24633                           ;octave.c: 411: }
 24634                           ;octave.c: 414: if(button_state_now == 0x04000000){
 24635  0035BA  0E04               	movlw	4
 24636  0035BC  0100               	movlb	0	; () banked
 24637  0035BE  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 24638  0035C0  11D8               	iorwf	_button_state_now& (0+255),w,b
 24639  0035C2  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 24640  0035C4  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 24641  0035C6  A4D8               	btfss	status,2,c
 24642  0035C8  D03D               	goto	l2795
 24643                           
 24644                           ; BSR set to: 0
 24645                           ;octave.c: 415: if ((octave * 12 + semitone) <= 60) {
 24646  0035CA  C0F3  F08C         	movff	_semitone,??_processOctave
 24647  0035CE  6B8D               	clrf	(??_processOctave+1)& (0+255),b
 24648  0035D0  BF8C               	btfsc	??_processOctave& (0+255),7,b
 24649  0035D2  078D               	decf	(??_processOctave+1)& (0+255),f,b
 24650  0035D4  51FC               	movf	_octave& (0+255),w,b
 24651  0035D6  6F64               	movwf	___wmul@multiplier& (0+255),b
 24652  0035D8  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 24653  0035DA  BF64               	btfsc	___wmul@multiplier& (0+255),7,b
 24654  0035DC  0765               	decf	(___wmul@multiplier+1)& (0+255),f,b
 24655  0035DE  0E00               	movlw	0
 24656  0035E0  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24657  0035E2  0E0C               	movlw	12
 24658  0035E4  6F66               	movwf	___wmul@multiplicand& (0+255),b
 24659  0035E6  EC66  F04A         	call	___wmul	;wreg free
 24660  0035EA  0100               	movlb	0	; () banked
 24661  0035EC  518C               	movf	??_processOctave& (0+255),w,b
 24662  0035EE  2764               	addwf	?___wmul& (0+255),f,b
 24663  0035F0  518D               	movf	(??_processOctave+1)& (0+255),w,b
 24664  0035F2  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 24665  0035F4  BF65               	btfsc	(?___wmul+1)& (0+255),7,b
 24666  0035F6  D006               	goto	u36240
 24667  0035F8  5165               	movf	(?___wmul+1)& (0+255),w,b
 24668  0035FA  E124               	bnz	l22417
 24669  0035FC  0E3D               	movlw	61
 24670  0035FE  5D64               	subwf	?___wmul& (0+255),w,b
 24671  003600  B0D8               	btfsc	status,0,c
 24672  003602  D020               	goto	l2795
 24673  003604                     u36240:
 24674                           
 24675                           ; BSR set to: 0
 24676                           ;octave.c: 418: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 24677  003604  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 24678  003606  D00E               	goto	l2796
 24679                           
 24680                           ; BSR set to: 0
 24681  003608  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 24682  00360A  B4D8               	btfsc	status,2,c
 24683  00360C  D00B               	goto	l2796
 24684                           
 24685                           ; BSR set to: 0
 24686                           ;octave.c: 421: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 24687  00360E  0E00               	movlw	0
 24688  003610  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 24689  003612  0E01               	movlw	1
 24690  003614  EC00  F04A         	call	_wait_one_pulse
 24691                           
 24692                           ;octave.c: 425: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24693  003618  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24694  00361A  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 24695                           
 24696                           ;octave.c: 428: suppress_note_off = 1;
 24697  00361E  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 24698                           
 24699                           ;octave.c: 430: flag1 = 1;
 24700  003620  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 24701                           
 24702                           ;octave.c: 431: flag2 = 1;
 24703  003622  8E32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 24704  003624                     l2796:
 24705                           
 24706                           ;octave.c: 432: }
 24707                           ;octave.c: 434: octave++;
 24708  003624  0100               	movlb	0	; () banked
 24709  003626  2BFC               	incf	_octave& (0+255),f,b
 24710                           
 24711                           ; BSR set to: 0
 24712                           ;octave.c: 435: if (octave > 7) {octave = 7;}
 24713  003628  51FC               	movf	_octave& (0+255),w,b
 24714  00362A  0A80               	xorlw	128
 24715  00362C  0F78               	addlw	-136
 24716  00362E  A0D8               	btfss	status,0,c
 24717  003630  D002               	goto	l2798
 24718                           
 24719                           ; BSR set to: 0
 24720  003632  0E07               	movlw	7
 24721  003634  6FFC               	movwf	_octave& (0+255),b
 24722  003636                     l2798:
 24723                           
 24724                           ; BSR set to: 0
 24725                           ;octave.c: 437: printThisNumber(octave);
 24726                           
 24727                           ; BSR set to: 0
 24728  003636  51FC               	movf	_octave& (0+255),w,b
 24729  003638  6F60               	movwf	printThisNumber@n& (0+255),b
 24730  00363A  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 24731  00363C  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 24732  00363E  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 24733  003640  EC0B  F04B         	call	_printThisNumber	;wreg free
 24734  003644                     l2795:
 24735  003644                     l22417:
 24736                           
 24737                           ;octave.c: 438: }
 24738                           ;octave.c: 439: }
 24739                           ;octave.c: 442: if(button_state_now == 0x02000000){
 24740  003644  0E02               	movlw	2
 24741  003646  0100               	movlb	0	; () banked
 24742  003648  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 24743  00364A  11D8               	iorwf	_button_state_now& (0+255),w,b
 24744  00364C  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 24745  00364E  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 24746  003650  A4D8               	btfss	status,2,c
 24747  003652  D03A               	goto	l2800
 24748                           
 24749                           ; BSR set to: 0
 24750                           ;octave.c: 443: if ((octave * 12 + semitone) >= 12) {
 24751  003654  C0F3  F08C         	movff	_semitone,??_processOctave
 24752  003658  6B8D               	clrf	(??_processOctave+1)& (0+255),b
 24753  00365A  BF8C               	btfsc	??_processOctave& (0+255),7,b
 24754  00365C  078D               	decf	(??_processOctave+1)& (0+255),f,b
 24755  00365E  51FC               	movf	_octave& (0+255),w,b
 24756  003660  6F64               	movwf	___wmul@multiplier& (0+255),b
 24757  003662  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 24758  003664  BF64               	btfsc	___wmul@multiplier& (0+255),7,b
 24759  003666  0765               	decf	(___wmul@multiplier+1)& (0+255),f,b
 24760  003668  0E00               	movlw	0
 24761  00366A  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24762  00366C  0E0C               	movlw	12
 24763  00366E  6F66               	movwf	___wmul@multiplicand& (0+255),b
 24764  003670  EC66  F04A         	call	___wmul	;wreg free
 24765  003674  0100               	movlb	0	; () banked
 24766  003676  518C               	movf	??_processOctave& (0+255),w,b
 24767  003678  2764               	addwf	?___wmul& (0+255),f,b
 24768  00367A  518D               	movf	(??_processOctave+1)& (0+255),w,b
 24769  00367C  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 24770  00367E  BF65               	btfsc	(?___wmul+1)& (0+255),7,b
 24771  003680  D023               	goto	l2800
 24772  003682  5165               	movf	(?___wmul+1)& (0+255),w,b
 24773  003684  E104               	bnz	u36300
 24774  003686  0E0C               	movlw	12
 24775  003688  5D64               	subwf	?___wmul& (0+255),w,b
 24776  00368A  A0D8               	btfss	status,0,c
 24777  00368C  D01D               	goto	l2800
 24778  00368E                     u36300:
 24779                           
 24780                           ; BSR set to: 0
 24781                           ;octave.c: 446: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 24782  00368E  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 24783  003690  D00E               	goto	l2801
 24784                           
 24785                           ; BSR set to: 0
 24786  003692  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 24787  003694  B4D8               	btfsc	status,2,c
 24788  003696  D00B               	goto	l2801
 24789                           
 24790                           ; BSR set to: 0
 24791                           ;octave.c: 449: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 24792  003698  0E00               	movlw	0
 24793  00369A  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 24794  00369C  0E01               	movlw	1
 24795  00369E  EC00  F04A         	call	_wait_one_pulse
 24796                           
 24797                           ;octave.c: 453: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24798  0036A2  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24799  0036A4  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 24800                           
 24801                           ;octave.c: 456: suppress_note_off = 1;
 24802  0036A8  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 24803                           
 24804                           ;octave.c: 458: flag1 = 1;
 24805  0036AA  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 24806                           
 24807                           ;octave.c: 460: flag2 = 1;
 24808  0036AC  8E32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 24809  0036AE                     l2801:
 24810                           
 24811                           ;octave.c: 461: }
 24812                           ;octave.c: 463: octave--;
 24813  0036AE  0100               	movlb	0	; () banked
 24814  0036B0  07FC               	decf	_octave& (0+255),f,b
 24815                           
 24816                           ; BSR set to: 0
 24817                           ;octave.c: 464: if (octave < 0) {octave = 0;}
 24818  0036B2  AFFC               	btfss	_octave& (0+255),7,b
 24819  0036B4  D002               	goto	l2803
 24820                           
 24821                           ; BSR set to: 0
 24822  0036B6  0E00               	movlw	0
 24823  0036B8  6FFC               	movwf	_octave& (0+255),b
 24824  0036BA                     l2803:
 24825                           
 24826                           ; BSR set to: 0
 24827                           ;octave.c: 466: printThisNumber(octave);
 24828                           
 24829                           ; BSR set to: 0
 24830  0036BA  51FC               	movf	_octave& (0+255),w,b
 24831  0036BC  6F60               	movwf	printThisNumber@n& (0+255),b
 24832  0036BE  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 24833  0036C0  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 24834  0036C2  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 24835  0036C4  EC0B  F04B         	call	_printThisNumber	;wreg free
 24836  0036C8                     l2800:
 24837                           
 24838                           ;octave.c: 468: }
 24839                           ;octave.c: 469: }
 24840                           ;octave.c: 475: if(button_state_now == (0x04000000 | 0x08000000)){
 24841  0036C8  0E0C               	movlw	12
 24842  0036CA  0100               	movlb	0	; () banked
 24843  0036CC  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 24844  0036CE  11D8               	iorwf	_button_state_now& (0+255),w,b
 24845  0036D0  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 24846  0036D2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 24847  0036D4  A4D8               	btfss	status,2,c
 24848  0036D6  D053               	goto	l2805
 24849                           
 24850                           ; BSR set to: 0
 24851                           ;octave.c: 477: if ((octave * 12 + semitone) < 72) {
 24852  0036D8  C0F3  F08C         	movff	_semitone,??_processOctave
 24853  0036DC  6B8D               	clrf	(??_processOctave+1)& (0+255),b
 24854  0036DE  BF8C               	btfsc	??_processOctave& (0+255),7,b
 24855  0036E0  078D               	decf	(??_processOctave+1)& (0+255),f,b
 24856  0036E2  51FC               	movf	_octave& (0+255),w,b
 24857  0036E4  6F64               	movwf	___wmul@multiplier& (0+255),b
 24858  0036E6  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 24859  0036E8  BF64               	btfsc	___wmul@multiplier& (0+255),7,b
 24860  0036EA  0765               	decf	(___wmul@multiplier+1)& (0+255),f,b
 24861  0036EC  0E00               	movlw	0
 24862  0036EE  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24863  0036F0  0E0C               	movlw	12
 24864  0036F2  6F66               	movwf	___wmul@multiplicand& (0+255),b
 24865  0036F4  EC66  F04A         	call	___wmul	;wreg free
 24866  0036F8  0100               	movlb	0	; () banked
 24867  0036FA  518C               	movf	??_processOctave& (0+255),w,b
 24868  0036FC  2764               	addwf	?___wmul& (0+255),f,b
 24869  0036FE  518D               	movf	(??_processOctave+1)& (0+255),w,b
 24870  003700  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 24871  003702  BF65               	btfsc	(?___wmul+1)& (0+255),7,b
 24872  003704  D006               	goto	u36360
 24873  003706  5165               	movf	(?___wmul+1)& (0+255),w,b
 24874  003708  E13A               	bnz	l22479
 24875  00370A  0E48               	movlw	72
 24876  00370C  5D64               	subwf	?___wmul& (0+255),w,b
 24877  00370E  B0D8               	btfsc	status,0,c
 24878  003710  D036               	goto	l2805
 24879  003712                     u36360:
 24880                           
 24881                           ; BSR set to: 0
 24882                           ;octave.c: 480: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 24883  003712  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 24884  003714  D00E               	goto	l2806
 24885                           
 24886                           ; BSR set to: 0
 24887  003716  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 24888  003718  B4D8               	btfsc	status,2,c
 24889  00371A  D00B               	goto	l2806
 24890                           
 24891                           ; BSR set to: 0
 24892                           ;octave.c: 483: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 24893  00371C  0E00               	movlw	0
 24894  00371E  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 24895  003720  0E01               	movlw	1
 24896  003722  EC00  F04A         	call	_wait_one_pulse
 24897                           
 24898                           ;octave.c: 487: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24899  003726  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24900  003728  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 24901                           
 24902                           ;octave.c: 490: suppress_note_off = 1;
 24903  00372C  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 24904                           
 24905                           ;octave.c: 492: flag1 = 1;
 24906  00372E  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 24907                           
 24908                           ;octave.c: 493: flag2 = 1;
 24909  003730  8E32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 24910  003732                     l2806:
 24911                           
 24912                           ;octave.c: 494: }
 24913                           ;octave.c: 496: if (TRANSPOSE_MODE == 0) {
 24914  003732  BC35               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 24915  003734  D009               	goto	l2809
 24916                           
 24917                           ;octave.c: 497: semitone++;
 24918  003736  0100               	movlb	0	; () banked
 24919  003738  2BF3               	incf	_semitone& (0+255),f,b
 24920                           
 24921                           ; BSR set to: 0
 24922                           ;octave.c: 498: if (semitone > 12) {semitone = 12;}
 24923  00373A  51F3               	movf	_semitone& (0+255),w,b
 24924  00373C  0A80               	xorlw	128
 24925  00373E  0F73               	addlw	-141
 24926  003740  A0D8               	btfss	status,0,c
 24927  003742  D002               	goto	l2809
 24928                           
 24929                           ; BSR set to: 0
 24930  003744  0E0C               	movlw	12
 24931  003746  6FF3               	movwf	_semitone& (0+255),b
 24932  003748                     l2809:
 24933                           
 24934                           ;octave.c: 499: }
 24935                           ;octave.c: 501: if (TRANSPOSE_MODE == 1) {
 24936                           
 24937                           ; BSR set to: 0
 24938                           
 24939                           ; BSR set to: 0
 24940  003748  AC35               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 24941  00374A  D011               	goto	l2810
 24942                           
 24943                           ;octave.c: 502: semitone = (semitone +=7) % 12;
 24944  00374C  0E07               	movlw	7
 24945  00374E  0100               	movlb	0	; () banked
 24946  003750  27F3               	addwf	_semitone& (0+255),f,b
 24947  003752  51F3               	movf	_semitone& (0+255),w,b
 24948  003754  6F6E               	movwf	___awmod@dividend& (0+255),b
 24949  003756  6B6F               	clrf	(___awmod@dividend+1)& (0+255),b
 24950  003758  BF6E               	btfsc	___awmod@dividend& (0+255),7,b
 24951  00375A  076F               	decf	(___awmod@dividend+1)& (0+255),f,b
 24952  00375C  0E00               	movlw	0
 24953  00375E  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 24954  003760  0E0C               	movlw	12
 24955  003762  6F70               	movwf	___awmod@divisor& (0+255),b
 24956  003764  EC93  F042         	call	___awmod	;wreg free
 24957  003768  0100               	movlb	0	; () banked
 24958  00376A  516E               	movf	?___awmod& (0+255),w,b
 24959  00376C  6FF3               	movwf	_semitone& (0+255),b
 24960  00376E                     l2810:
 24961                           
 24962                           ;octave.c: 503: }
 24963                           ;octave.c: 505: printThisNumber(semitone);
 24964                           
 24965                           ; BSR set to: 0
 24966  00376E  0100               	movlb	0	; () banked
 24967  003770  51F3               	movf	_semitone& (0+255),w,b
 24968  003772  6F60               	movwf	printThisNumber@n& (0+255),b
 24969  003774  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 24970  003776  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 24971  003778  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 24972  00377A  EC0B  F04B         	call	_printThisNumber	;wreg free
 24973  00377E                     l2805:
 24974  00377E                     l22479:
 24975                           
 24976                           ;octave.c: 506: }
 24977                           ;octave.c: 507: }
 24978                           ;octave.c: 510: if(button_state_now == (0x02000000 | 0x08000000)){
 24979  00377E  0E0A               	movlw	10
 24980  003780  0100               	movlb	0	; () banked
 24981  003782  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 24982  003784  11D8               	iorwf	_button_state_now& (0+255),w,b
 24983  003786  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 24984  003788  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 24985  00378A  A4D8               	btfss	status,2,c
 24986  00378C  0012               	return	
 24987                           
 24988                           ; BSR set to: 0
 24989                           ;octave.c: 512: if ((octave * 12 + semitone) > 0 ) {
 24990  00378E  C0F3  F08C         	movff	_semitone,??_processOctave
 24991  003792  6B8D               	clrf	(??_processOctave+1)& (0+255),b
 24992  003794  BF8C               	btfsc	??_processOctave& (0+255),7,b
 24993  003796  078D               	decf	(??_processOctave+1)& (0+255),f,b
 24994  003798  51FC               	movf	_octave& (0+255),w,b
 24995  00379A  6F64               	movwf	___wmul@multiplier& (0+255),b
 24996  00379C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 24997  00379E  BF64               	btfsc	___wmul@multiplier& (0+255),7,b
 24998  0037A0  0765               	decf	(___wmul@multiplier+1)& (0+255),f,b
 24999  0037A2  0E00               	movlw	0
 25000  0037A4  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 25001  0037A6  0E0C               	movlw	12
 25002  0037A8  6F66               	movwf	___wmul@multiplicand& (0+255),b
 25003  0037AA  EC66  F04A         	call	___wmul	;wreg free
 25004  0037AE  0100               	movlb	0	; () banked
 25005  0037B0  518C               	movf	??_processOctave& (0+255),w,b
 25006  0037B2  2764               	addwf	?___wmul& (0+255),f,b
 25007  0037B4  518D               	movf	(??_processOctave+1)& (0+255),w,b
 25008  0037B6  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 25009  0037B8  BF65               	btfsc	(?___wmul+1)& (0+255),7,b
 25010  0037BA  0012               	return	
 25011  0037BC  5165               	movf	(?___wmul+1)& (0+255),w,b
 25012  0037BE  E103               	bnz	u36440
 25013  0037C0  0564               	decf	?___wmul& (0+255),w,b
 25014  0037C2  A0D8               	btfss	status,0,c
 25015  0037C4  0012               	return	
 25016  0037C6                     u36440:
 25017                           
 25018                           ; BSR set to: 0
 25019                           ;octave.c: 516: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 25020  0037C6  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 25021  0037C8  D00E               	goto	l2813
 25022                           
 25023                           ; BSR set to: 0
 25024  0037CA  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25025  0037CC  B4D8               	btfsc	status,2,c
 25026  0037CE  D00B               	goto	l2813
 25027                           
 25028                           ; BSR set to: 0
 25029                           ;octave.c: 519: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 25030  0037D0  0E00               	movlw	0
 25031  0037D2  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 25032  0037D4  0E01               	movlw	1
 25033  0037D6  EC00  F04A         	call	_wait_one_pulse
 25034                           
 25035                           ;octave.c: 523: if(note_off_was_sent == 0) {key_press_release_note_off();}
 25036  0037DA  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 25037  0037DC  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 25038                           
 25039                           ;octave.c: 526: suppress_note_off = 1;
 25040  0037E0  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 25041                           
 25042                           ;octave.c: 528: flag1 = 1;
 25043  0037E2  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 25044                           
 25045                           ;octave.c: 529: flag2 = 1;
 25046  0037E4  8E32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 25047  0037E6                     l2813:
 25048                           
 25049                           ;octave.c: 530: }
 25050                           ;octave.c: 532: if (TRANSPOSE_MODE == 0) {
 25051  0037E6  BC35               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 25052  0037E8  D009               	goto	l2816
 25053                           
 25054                           ;octave.c: 533: semitone--;
 25055  0037EA  0100               	movlb	0	; () banked
 25056  0037EC  07F3               	decf	_semitone& (0+255),f,b
 25057                           
 25058                           ; BSR set to: 0
 25059                           ;octave.c: 534: if (semitone < -12) {semitone = -12;}
 25060  0037EE  51F3               	movf	_semitone& (0+255),w,b
 25061  0037F0  0A80               	xorlw	128
 25062  0037F2  0F8C               	addlw	140
 25063  0037F4  B0D8               	btfsc	status,0,c
 25064  0037F6  D002               	goto	l2816
 25065                           
 25066                           ; BSR set to: 0
 25067  0037F8  0EF4               	movlw	244
 25068  0037FA  6FF3               	movwf	_semitone& (0+255),b
 25069  0037FC                     l2816:
 25070                           
 25071                           ;octave.c: 535: }
 25072                           ;octave.c: 537: if (TRANSPOSE_MODE == 1) {
 25073                           
 25074                           ; BSR set to: 0
 25075                           
 25076                           ; BSR set to: 0
 25077  0037FC  AC35               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 25078  0037FE  D011               	goto	l2817
 25079                           
 25080                           ;octave.c: 538: semitone = (semitone -=7) % 12;
 25081  003800  0EF9               	movlw	249
 25082  003802  0100               	movlb	0	; () banked
 25083  003804  27F3               	addwf	_semitone& (0+255),f,b
 25084  003806  51F3               	movf	_semitone& (0+255),w,b
 25085  003808  6F6E               	movwf	___awmod@dividend& (0+255),b
 25086  00380A  6B6F               	clrf	(___awmod@dividend+1)& (0+255),b
 25087  00380C  BF6E               	btfsc	___awmod@dividend& (0+255),7,b
 25088  00380E  076F               	decf	(___awmod@dividend+1)& (0+255),f,b
 25089  003810  0E00               	movlw	0
 25090  003812  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 25091  003814  0E0C               	movlw	12
 25092  003816  6F70               	movwf	___awmod@divisor& (0+255),b
 25093  003818  EC93  F042         	call	___awmod	;wreg free
 25094  00381C  0100               	movlb	0	; () banked
 25095  00381E  516E               	movf	?___awmod& (0+255),w,b
 25096  003820  6FF3               	movwf	_semitone& (0+255),b
 25097  003822                     l2817:
 25098                           
 25099                           ;octave.c: 539: }
 25100                           ;octave.c: 541: printThisNumber(semitone);
 25101                           
 25102                           ; BSR set to: 0
 25103  003822  0100               	movlb	0	; () banked
 25104  003824  51F3               	movf	_semitone& (0+255),w,b
 25105  003826  6F60               	movwf	printThisNumber@n& (0+255),b
 25106  003828  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 25107  00382A  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 25108  00382C  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 25109  00382E  EC0B  F04B         	call	_printThisNumber	;wreg free
 25110  003832  0012               	return	
 25111  003834                     __end_of_processOctave:
 25112                           	opt stack 0
 25113                           tblptru	equ	0xFF8
 25114                           tblptrh	equ	0xFF7
 25115                           tblptrl	equ	0xFF6
 25116                           tablat	equ	0xFF5
 25117                           prodh	equ	0xFF4
 25118                           prodl	equ	0xFF3
 25119                           intcon	equ	0xFF2
 25120                           intcon2	equ	0xFF1
 25121                           postinc0	equ	0xFEE
 25122                           wreg	equ	0xFE8
 25123                           indf1	equ	0xFE7
 25124                           postdec1	equ	0xFE5
 25125                           fsr1h	equ	0xFE2
 25126                           fsr1l	equ	0xFE1
 25127                           indf2	equ	0xFDF
 25128                           postinc2	equ	0xFDE
 25129                           plusw2	equ	0xFDB
 25130                           fsr2h	equ	0xFDA
 25131                           fsr2l	equ	0xFD9
 25132                           status	equ	0xFD8
 25133                           
 25134 ;; *************** function _doTheUnLatch *****************
 25135 ;; Defined at:
 25136 ;;		line 195 in file "octave.c"
 25137 ;; Parameters:    Size  Location     Type
 25138 ;;		None
 25139 ;; Auto vars:     Size  Location     Type
 25140 ;;		None
 25141 ;; Return value:  Size  Location     Type
 25142 ;;                  1    wreg      void 
 25143 ;; Registers used:
 25144 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25145 ;; Tracked objects:
 25146 ;;		On entry : 0/0
 25147 ;;		On exit  : 0/0
 25148 ;;		Unchanged: 0/0
 25149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25152 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25153 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25154 ;;Total ram usage:        4 bytes
 25155 ;; Hardware stack levels used:    1
 25156 ;; Hardware stack levels required when called:   12
 25157 ;; This function calls:
 25158 ;;		_playThisNote
 25159 ;;		_playThisNote8
 25160 ;;		_playThisNotePentatonic
 25161 ;;		_strcpy
 25162 ;; This function is called by:
 25163 ;;		_processOctave
 25164 ;;		_Function_H_6_1
 25165 ;; This function uses a non-reentrant model
 25166 ;;
 25167                           
 25168                           	psect	text78
 25169  005076                     __ptext78:
 25170                           	opt stack 0
 25171  005076                     _doTheUnLatch:
 25172                           	opt stack 14
 25173                           
 25174                           ;octave.c: 197: LATCH = 0;
 25175                           
 25176                           ;incstack = 0
 25177  005076  9235               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 25178                           
 25179                           ;octave.c: 198: ON_OFF = 0;
 25180  005078  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25181                           
 25182                           ;octave.c: 202: if(NUM_NOTES_PRESSED > 0) {
 25183  00507A  0100               	movlb	0	; () banked
 25184  00507C  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25185  00507E  B4D8               	btfsc	status,2,c
 25186  005080  D07F               	goto	l2755
 25187                           
 25188                           ; BSR set to: 0
 25189                           ;octave.c: 204: static __bit once;
 25190                           ;octave.c: 206: parallel = 25;
 25191  005082  0E19               	movlw	25
 25192  005084  6FE6               	movwf	_parallel& (0+255),b
 25193                           
 25194                           ;octave.c: 209: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_M
      +                          ODE == SEVENTH){
 25195  005086  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 25196  005088  B4D8               	btfsc	status,2,c
 25197  00508A  D008               	goto	u28240
 25198                           
 25199                           ; BSR set to: 0
 25200  00508C  0E06               	movlw	6
 25201  00508E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25202  005090  B4D8               	btfsc	status,2,c
 25203  005092  D004               	goto	u28240
 25204                           
 25205                           ; BSR set to: 0
 25206  005094  0E09               	movlw	9
 25207  005096  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25208  005098  A4D8               	btfss	status,2,c
 25209  00509A  D03E               	goto	l2767
 25210  00509C                     u28240:
 25211                           
 25212                           ; BSR set to: 0
 25213                           ;octave.c: 211: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == RANDOM) || (ARPEGG
      +                          IO_TYPE == RANDOM_NON_REPEATING) && (once == 0)){
 25214                           
 25215                           ; BSR set to: 0
 25216  00509C  0E06               	movlw	6
 25217  00509E  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 25218  0050A0  B4D8               	btfsc	status,2,c
 25219  0050A2  D009               	goto	u28280
 25220                           
 25221                           ; BSR set to: 0
 25222  0050A4  0E05               	movlw	5
 25223  0050A6  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 25224  0050A8  B4D8               	btfsc	status,2,c
 25225  0050AA  D005               	goto	u28280
 25226                           
 25227                           ; BSR set to: 0
 25228  0050AC  0E04               	movlw	4
 25229  0050AE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 25230  0050B0  B4D8               	btfsc	status,2,c
 25231                           
 25232                           ; BSR set to: 0
 25233  0050B2  B432               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25234  0050B4  D005               	goto	l2761
 25235  0050B6                     u28280:
 25236                           
 25237                           ; BSR set to: 0
 25238                           ;octave.c: 212: playThisNote(ARPEGGIO[0]);
 25239                           
 25240                           ; BSR set to: 0
 25241  0050B6  0101               	movlb	1	; () banked
 25242  0050B8  5172               	movf	_ARPEGGIO& (0+255),w,b
 25243  0050BA  EC0D  F032         	call	_playThisNote
 25244                           
 25245                           ;octave.c: 213: once = 1;
 25246  0050BE  8432               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25247  0050C0                     l2761:
 25248                           
 25249                           ;octave.c: 214: }
 25250                           ;octave.c: 215: if((ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYPE == UP_DOWN) && (once == 0)){
 25251  0050C0  0100               	movlb	0	; () banked
 25252  0050C2  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 25253  0050C4  B4D8               	btfsc	status,2,c
 25254  0050C6  D005               	goto	u28310
 25255                           
 25256                           ; BSR set to: 0
 25257  0050C8  0E02               	movlw	2
 25258  0050CA  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 25259  0050CC  B4D8               	btfsc	status,2,c
 25260                           
 25261                           ; BSR set to: 0
 25262  0050CE  B432               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25263  0050D0  D005               	goto	l2764
 25264  0050D2                     u28310:
 25265                           
 25266                           ; BSR set to: 0
 25267                           ;octave.c: 216: playThisNote(ARPEGGIO_SORTED[0]);
 25268                           
 25269                           ; BSR set to: 0
 25270  0050D2  0102               	movlb	2	; () banked
 25271  0050D4  519C               	movf	_ARPEGGIO_SORTED& (0+255),w,b
 25272  0050D6  EC0D  F032         	call	_playThisNote
 25273                           
 25274                           ;octave.c: 217: once = 1;
 25275  0050DA  8432               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25276  0050DC                     l2764:
 25277                           
 25278                           ;octave.c: 218: }
 25279                           ;octave.c: 219: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP) && (once == 0))
      +                          {
 25280  0050DC  0100               	movlb	0	; () banked
 25281  0050DE  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 25282  0050E0  B4D8               	btfsc	status,2,c
 25283  0050E2  D005               	goto	u28340
 25284                           
 25285                           ; BSR set to: 0
 25286  0050E4  0E03               	movlw	3
 25287  0050E6  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 25288  0050E8  B4D8               	btfsc	status,2,c
 25289                           
 25290                           ; BSR set to: 0
 25291  0050EA  B432               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25292  0050EC  D015               	goto	l2767
 25293  0050EE                     u28340:
 25294                           
 25295                           ; BSR set to: 0
 25296                           ;octave.c: 220: playThisNote(ARPEGGIO_SORTED[NUM_NOTES_PRESSED - 1]);
 25297                           
 25298                           ; BSR set to: 0
 25299  0050EE  0EFF               	movlw	255
 25300  0050F0  6F88               	movwf	??_doTheUnLatch& (0+255),b
 25301  0050F2  0EFF               	movlw	255
 25302  0050F4  6F89               	movwf	(??_doTheUnLatch+1)& (0+255),b
 25303  0050F6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25304  0050F8  6F8A               	movwf	(??_doTheUnLatch+2)& (0+255),b
 25305  0050FA  6B8B               	clrf	(??_doTheUnLatch+3)& (0+255),b
 25306  0050FC  5188               	movf	??_doTheUnLatch& (0+255),w,b
 25307  0050FE  278A               	addwf	(??_doTheUnLatch+2)& (0+255),f,b
 25308  005100  5189               	movf	(??_doTheUnLatch+1)& (0+255),w,b
 25309  005102  238B               	addwfc	(??_doTheUnLatch+3)& (0+255),f,b
 25310  005104  0E9C               	movlw	low _ARPEGGIO_SORTED
 25311  005106  258A               	addwf	(??_doTheUnLatch+2)& (0+255),w,b
 25312  005108  6ED9               	movwf	fsr2l,c
 25313  00510A  0E02               	movlw	high _ARPEGGIO_SORTED
 25314  00510C  218B               	addwfc	(??_doTheUnLatch+3)& (0+255),w,b
 25315  00510E  6EDA               	movwf	fsr2h,c
 25316  005110  50DF               	movf	indf2,w,c
 25317  005112  EC0D  F032         	call	_playThisNote
 25318                           
 25319                           ;octave.c: 221: once = 1;
 25320  005116  8432               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25321  005118                     l2767:
 25322                           
 25323                           ;octave.c: 222: }
 25324                           ;octave.c: 223: }
 25325                           ;octave.c: 225: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_MO
      +                          DE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_TR
      +                          IAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MIN
      +                          OR
 25326  005118  0100               	movlb	0	; () banked
 25327  00511A  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 25328  00511C  B4D8               	btfsc	status,2,c
 25329  00511E  D019               	goto	u28420
 25330                           
 25331                           ; BSR set to: 0
 25332  005120  0E02               	movlw	2
 25333  005122  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25334  005124  B4D8               	btfsc	status,2,c
 25335  005126  D015               	goto	u28420
 25336                           
 25337                           ; BSR set to: 0
 25338  005128  0E03               	movlw	3
 25339  00512A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25340  00512C  B4D8               	btfsc	status,2,c
 25341  00512E  D011               	goto	u28420
 25342                           
 25343                           ; BSR set to: 0
 25344  005130  0E07               	movlw	7
 25345  005132  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25346  005134  B4D8               	btfsc	status,2,c
 25347  005136  D00D               	goto	u28420
 25348                           
 25349                           ; BSR set to: 0
 25350  005138  0E08               	movlw	8
 25351  00513A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25352  00513C  B4D8               	btfsc	status,2,c
 25353  00513E  D009               	goto	u28420
 25354                           
 25355                           ; BSR set to: 0
 25356  005140  0E0A               	movlw	10
 25357  005142  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25358  005144  B4D8               	btfsc	status,2,c
 25359  005146  D005               	goto	u28420
 25360                           
 25361                           ; BSR set to: 0
 25362  005148  0E0B               	movlw	11
 25363  00514A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25364  00514C  B4D8               	btfsc	status,2,c
 25365                           
 25366                           ; BSR set to: 0
 25367  00514E  B432               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25368  005150  D006               	goto	l2770
 25369  005152                     u28420:
 25370                           
 25371                           ; BSR set to: 0
 25372                           ;octave.c: 226: playThisNote8(0,0);
 25373                           
 25374                           ; BSR set to: 0
 25375  005152  0E00               	movlw	0
 25376  005154  6F7F               	movwf	playThisNote8@index& (0+255),b
 25377  005156  0E00               	movlw	0
 25378  005158  EC3A  F013         	call	_playThisNote8
 25379                           
 25380                           ;octave.c: 227: once = 1;
 25381  00515C  8432               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25382  00515E                     l2770:
 25383                           
 25384                           ;octave.c: 228: }
 25385                           ;octave.c: 230: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC_
      +                          MINOR) && (once == 0)){
 25386  00515E  0E04               	movlw	4
 25387  005160  0100               	movlb	0	; () banked
 25388  005162  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25389  005164  B4D8               	btfsc	status,2,c
 25390  005166  D005               	goto	u28450
 25391                           
 25392                           ; BSR set to: 0
 25393  005168  0E05               	movlw	5
 25394  00516A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25395  00516C  B4D8               	btfsc	status,2,c
 25396                           
 25397                           ; BSR set to: 0
 25398  00516E  B432               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25399  005170  D006               	goto	l2773
 25400  005172                     u28450:
 25401                           
 25402                           ; BSR set to: 0
 25403                           ;octave.c: 231: playThisNotePentatonic(0,0);
 25404                           
 25405                           ; BSR set to: 0
 25406  005172  0E00               	movlw	0
 25407  005174  6F77               	movwf	playThisNotePentatonic@index& (0+255),b
 25408  005176  0E00               	movlw	0
 25409  005178  ECE7  F029         	call	_playThisNotePentatonic
 25410                           
 25411                           ;octave.c: 232: once = 1;
 25412  00517C  8432               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25413  00517E                     l2773:
 25414                           
 25415                           ;octave.c: 233: }
 25416                           ;octave.c: 235: once = 0;
 25417  00517E  9432               	bcf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 25418  005180                     l2755:
 25419                           
 25420                           ;octave.c: 236: }
 25421                           ;octave.c: 239: if((UN_LATCH_MODE == 1) && (latch_was_pressed == 1) && (NUM_NOTES_PRESSE
      +                          D > 1)){
 25422  005180  B035               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 25423  005182  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 25424  005184  D010               	goto	l2776
 25425  005186  0E01               	movlw	1
 25426  005188  0100               	movlb	0	; () banked
 25427  00518A  65E5               	cpfsgt	_NUM_NOTES_PRESSED& (0+255),b
 25428  00518C  D00C               	goto	l2776
 25429                           
 25430                           ; BSR set to: 0
 25431                           ;octave.c: 240: DISPLAY_MODE = 1;
 25432  00518E  0E01               	movlw	1
 25433  005190  6E5A               	movwf	_DISPLAY_MODE,c
 25434                           
 25435                           ; BSR set to: 0
 25436                           ;octave.c: 241: strcpy(string_to_display, " dEL");
 25437  005192  0EEE               	movlw	low _string_to_display
 25438  005194  6F60               	movwf	strcpy@to& (0+255),b
 25439  005196  0E01               	movlw	high _string_to_display
 25440  005198  6F61               	movwf	(strcpy@to+1)& (0+255),b
 25441  00519A  0EE1               	movlw	low STR_2
 25442  00519C  6F62               	movwf	strcpy@from& (0+255),b
 25443  00519E  0EFF               	movlw	high STR_2
 25444  0051A0  6F63               	movwf	(strcpy@from+1)& (0+255),b
 25445  0051A2  EC5B  F049         	call	_strcpy	;wreg free
 25446  0051A6                     l2776:
 25447                           
 25448                           ;octave.c: 242: }
 25449                           ;octave.c: 246: if((UN_LATCH_MODE == 1) && (NUM_NOTES_PRESSED == 1)){
 25450  0051A6  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 25451  0051A8  D010               	goto	l2777
 25452  0051AA  0100               	movlb	0	; () banked
 25453  0051AC  05E5               	decf	_NUM_NOTES_PRESSED& (0+255),w,b
 25454  0051AE  A4D8               	btfss	status,2,c
 25455  0051B0  D00C               	goto	l2777
 25456                           
 25457                           ; BSR set to: 0
 25458                           ;octave.c: 247: DISPLAY_MODE = 1;
 25459  0051B2  0E01               	movlw	1
 25460  0051B4  6E5A               	movwf	_DISPLAY_MODE,c
 25461                           
 25462                           ; BSR set to: 0
 25463                           ;octave.c: 248: strcpy(string_to_display, "LaSt");
 25464  0051B6  0EEE               	movlw	low _string_to_display
 25465  0051B8  6F60               	movwf	strcpy@to& (0+255),b
 25466  0051BA  0E01               	movlw	high _string_to_display
 25467  0051BC  6F61               	movwf	(strcpy@to+1)& (0+255),b
 25468  0051BE  0EFA               	movlw	low STR_3
 25469  0051C0  6F62               	movwf	strcpy@from& (0+255),b
 25470  0051C2  0EFF               	movlw	high STR_3
 25471  0051C4  6F63               	movwf	(strcpy@from+1)& (0+255),b
 25472  0051C6  EC5B  F049         	call	_strcpy	;wreg free
 25473  0051CA                     l2777:
 25474                           
 25475                           ;octave.c: 249: }
 25476                           ;octave.c: 253: if((AUTO_LATCH == 1) && (latch_was_pressed == 1) && ((UN_LATCH_MODE == 0
      +                          ) || (UN_LATCH_MODE == 1)) && (NUM_NOTES_PRESSED == 0)){
 25477  0051CA  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 25478  0051CC  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 25479  0051CE  D018               	goto	l2778
 25480  0051D0  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 25481  0051D2  D002               	goto	u28540
 25482  0051D4  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 25483  0051D6  D014               	goto	l2778
 25484  0051D8                     u28540:
 25485  0051D8  0100               	movlb	0	; () banked
 25486  0051DA  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25487  0051DC  A4D8               	btfss	status,2,c
 25488  0051DE  D010               	goto	l2778
 25489                           
 25490                           ; BSR set to: 0
 25491                           ;octave.c: 254: NUM_NOTES_PRESSED = 0;
 25492  0051E0  0E00               	movlw	0
 25493  0051E2  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 25494                           
 25495                           ;octave.c: 255: ARRAY_INDEX = 0;
 25496  0051E4  0E00               	movlw	0
 25497  0051E6  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 25498                           
 25499                           ;octave.c: 257: DISPLAY_MODE = 1;
 25500  0051E8  0E01               	movlw	1
 25501  0051EA  6E5A               	movwf	_DISPLAY_MODE,c
 25502                           
 25503                           ; BSR set to: 0
 25504                           ;octave.c: 258: strcpy(string_to_display, "Auto");
 25505  0051EC  0EEE               	movlw	low _string_to_display
 25506  0051EE  6F60               	movwf	strcpy@to& (0+255),b
 25507  0051F0  0E01               	movlw	high _string_to_display
 25508  0051F2  6F61               	movwf	(strcpy@to+1)& (0+255),b
 25509  0051F4  0EF0               	movlw	low STR_4
 25510  0051F6  6F62               	movwf	strcpy@from& (0+255),b
 25511  0051F8  0EFF               	movlw	high STR_4
 25512  0051FA  6F63               	movwf	(strcpy@from+1)& (0+255),b
 25513  0051FC  EC5B  F049         	call	_strcpy	;wreg free
 25514  005200                     l2778:
 25515                           
 25516                           ;octave.c: 259: }
 25517                           ;octave.c: 266: if((LATCH == 0) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (NU
      +                          M_NOTES_PRESSED == 0)){
 25518  005200  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 25519  005202  0012               	return	
 25520  005204  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 25521  005206  D002               	goto	u28580
 25522  005208  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 25523  00520A  0012               	return	
 25524  00520C                     u28580:
 25525  00520C  0100               	movlb	0	; () banked
 25526  00520E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25527  005210  A4D8               	btfss	status,2,c
 25528  005212  0012               	return	
 25529                           
 25530                           ; BSR set to: 0
 25531                           ;octave.c: 267: NUM_NOTES_PRESSED = 0;
 25532  005214  0E00               	movlw	0
 25533  005216  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 25534                           
 25535                           ;octave.c: 268: ARRAY_INDEX = 0;
 25536  005218  0E00               	movlw	0
 25537  00521A  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 25538                           
 25539                           ;octave.c: 269: DISPLAY_MODE = 1;
 25540  00521C  0E01               	movlw	1
 25541  00521E  6E5A               	movwf	_DISPLAY_MODE,c
 25542                           
 25543                           ; BSR set to: 0
 25544                           ;octave.c: 270: strcpy(string_to_display, " oFF");
 25545  005220  0EEE               	movlw	low _string_to_display
 25546  005222  6F60               	movwf	strcpy@to& (0+255),b
 25547  005224  0E01               	movlw	high _string_to_display
 25548  005226  6F61               	movwf	(strcpy@to+1)& (0+255),b
 25549  005228  0EDC               	movlw	low STR_5
 25550  00522A  6F62               	movwf	strcpy@from& (0+255),b
 25551  00522C  0EFF               	movlw	high STR_5
 25552  00522E  6F63               	movwf	(strcpy@from+1)& (0+255),b
 25553  005230  EC5B  F049         	call	_strcpy	;wreg free
 25554  005234  0012               	return	
 25555  005236                     __end_of_doTheUnLatch:
 25556                           	opt stack 0
 25557                           tblptru	equ	0xFF8
 25558                           tblptrh	equ	0xFF7
 25559                           tblptrl	equ	0xFF6
 25560                           tablat	equ	0xFF5
 25561                           prodh	equ	0xFF4
 25562                           prodl	equ	0xFF3
 25563                           intcon	equ	0xFF2
 25564                           intcon2	equ	0xFF1
 25565                           postinc0	equ	0xFEE
 25566                           wreg	equ	0xFE8
 25567                           indf1	equ	0xFE7
 25568                           postdec1	equ	0xFE5
 25569                           fsr1h	equ	0xFE2
 25570                           fsr1l	equ	0xFE1
 25571                           indf2	equ	0xFDF
 25572                           postinc2	equ	0xFDE
 25573                           plusw2	equ	0xFDB
 25574                           fsr2h	equ	0xFDA
 25575                           fsr2l	equ	0xFD9
 25576                           status	equ	0xFD8
 25577                           
 25578 ;; *************** function _doTheLatch *****************
 25579 ;; Defined at:
 25580 ;;		line 188 in file "octave.c"
 25581 ;; Parameters:    Size  Location     Type
 25582 ;;		None
 25583 ;; Auto vars:     Size  Location     Type
 25584 ;;		None
 25585 ;; Return value:  Size  Location     Type
 25586 ;;                  1    wreg      void 
 25587 ;; Registers used:
 25588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25589 ;; Tracked objects:
 25590 ;;		On entry : 0/0
 25591 ;;		On exit  : 0/0
 25592 ;;		Unchanged: 0/0
 25593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25598 ;;Total ram usage:        0 bytes
 25599 ;; Hardware stack levels used:    1
 25600 ;; Hardware stack levels required when called:    6
 25601 ;; This function calls:
 25602 ;;		_strcpy
 25603 ;; This function is called by:
 25604 ;;		_processOctave
 25605 ;;		_Function_H_6_1
 25606 ;; This function uses a non-reentrant model
 25607 ;;
 25608                           
 25609                           	psect	text79
 25610  00955C                     __ptext79:
 25611                           	opt stack 0
 25612  00955C                     _doTheLatch:
 25613                           	opt stack 20
 25614                           
 25615                           ;octave.c: 189: LATCH = 1;
 25616                           
 25617                           ;incstack = 0
 25618  00955C  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 25619                           
 25620                           ;octave.c: 190: latch_was_pressed = 1;
 25621  00955E  8C34               	bsf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 25622                           
 25623                           ;octave.c: 191: DISPLAY_MODE = 1;
 25624  009560  0E01               	movlw	1
 25625  009562  6E5A               	movwf	_DISPLAY_MODE,c
 25626                           
 25627                           ;octave.c: 192: strcpy(string_to_display, "HoLd");
 25628  009564  0EEE               	movlw	low _string_to_display
 25629  009566  0100               	movlb	0	; () banked
 25630  009568  6F60               	movwf	strcpy@to& (0+255),b
 25631  00956A  0E01               	movlw	high _string_to_display
 25632  00956C  6F61               	movwf	(strcpy@to+1)& (0+255),b
 25633  00956E  0EE6               	movlw	low STR_1
 25634  009570  6F62               	movwf	strcpy@from& (0+255),b
 25635  009572  0EFF               	movlw	high STR_1
 25636  009574  6F63               	movwf	(strcpy@from+1)& (0+255),b
 25637  009576  EC5B  F049         	call	_strcpy	;wreg free
 25638  00957A  0012               	return		;funcret
 25639  00957C                     __end_of_doTheLatch:
 25640                           	opt stack 0
 25641                           tblptru	equ	0xFF8
 25642                           tblptrh	equ	0xFF7
 25643                           tblptrl	equ	0xFF6
 25644                           tablat	equ	0xFF5
 25645                           prodh	equ	0xFF4
 25646                           prodl	equ	0xFF3
 25647                           intcon	equ	0xFF2
 25648                           intcon2	equ	0xFF1
 25649                           postinc0	equ	0xFEE
 25650                           wreg	equ	0xFE8
 25651                           indf1	equ	0xFE7
 25652                           postdec1	equ	0xFE5
 25653                           fsr1h	equ	0xFE2
 25654                           fsr1l	equ	0xFE1
 25655                           indf2	equ	0xFDF
 25656                           postinc2	equ	0xFDE
 25657                           plusw2	equ	0xFDB
 25658                           fsr2h	equ	0xFDA
 25659                           fsr2l	equ	0xFD9
 25660                           status	equ	0xFD8
 25661                           
 25662 ;; *************** function _strcpy *****************
 25663 ;; Defined at:
 25664 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
 25665 ;; Parameters:    Size  Location     Type
 25666 ;;  to              2    0[BANK0 ] PTR unsigned char 
 25667 ;;		 -> string_to_display(5), 
 25668 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 25669 ;;		 -> STR_60(5), STR_58(5), STR_55(5), STR_53(5), 
 25670 ;;		 -> STR_43(5), STR_41(5), STR_9(5), STR_8(5), 
 25671 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
 25672 ;;		 -> STR_3(5), STR_2(5), STR_1(5), 
 25673 ;; Auto vars:     Size  Location     Type
 25674 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 25675 ;;		 -> string_to_display(5), 
 25676 ;; Return value:  Size  Location     Type
 25677 ;;                  2    0[BANK0 ] PTR unsigned char 
 25678 ;; Registers used:
 25679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 25680 ;; Tracked objects:
 25681 ;;		On entry : 0/0
 25682 ;;		On exit  : 0/0
 25683 ;;		Unchanged: 0/0
 25684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25685 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25686 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25688 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25689 ;;Total ram usage:        6 bytes
 25690 ;; Hardware stack levels used:    1
 25691 ;; Hardware stack levels required when called:    5
 25692 ;; This function calls:
 25693 ;;		Nothing
 25694 ;; This function is called by:
 25695 ;;		_doTheLatch
 25696 ;;		_doTheUnLatch
 25697 ;;		_processOctave
 25698 ;;		_displayTest
 25699 ;;		_Function_H_1
 25700 ;;		_Function_H_6_2
 25701 ;;		_Function_H_7
 25702 ;; This function uses a non-reentrant model
 25703 ;;
 25704                           
 25705                           	psect	text80
 25706  0092B6                     __ptext80:
 25707                           	opt stack 0
 25708  0092B6                     _strcpy:
 25709                           	opt stack 22
 25710                           
 25711                           ;incstack = 0
 25712  0092B6  C060  F064         	movff	strcpy@to,strcpy@cp
 25713  0092BA  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 25714  0092BE  D005               	goto	l5983
 25715  0092C0  0100               	movlb	0	; () banked
 25716  0092C2  4B64               	infsnz	strcpy@cp& (0+255),f,b
 25717  0092C4  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 25718  0092C6  4B62               	infsnz	strcpy@from& (0+255),f,b
 25719  0092C8  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 25720  0092CA                     l5983:
 25721                           
 25722                           ; BSR set to: 0
 25723  0092CA  C062  FFF6         	movff	strcpy@from,tblptrl
 25724  0092CE  C063  FFF7         	movff	strcpy@from+1,tblptrh
 25725  0092D2                     	if	0	;tblptru may be non-zero
 25726  0092D2                     	endif
 25727  0092D2                     	if	0	;tblptru may be non-zero
 25728  0092D2                     	endif
 25729  0092D2  C064  FFD9         	movff	strcpy@cp,fsr2l
 25730  0092D6  C065  FFDA         	movff	strcpy@cp+1,fsr2h
 25731  0092DA  0008               	tblrd		*
 25732  0092DC  CFF5 FFDF          	movff	tablat,indf2
 25733  0092E0  50DF               	movf	indf2,w,c
 25734  0092E2  B4D8               	btfsc	status,2,c
 25735  0092E4  0012               	return	
 25736  0092E6  D7EC               	goto	l5984
 25737  0092E8                     __end_of_strcpy:
 25738                           	opt stack 0
 25739                           tblptru	equ	0xFF8
 25740                           tblptrh	equ	0xFF7
 25741                           tblptrl	equ	0xFF6
 25742                           tablat	equ	0xFF5
 25743                           prodh	equ	0xFF4
 25744                           prodl	equ	0xFF3
 25745                           intcon	equ	0xFF2
 25746                           intcon2	equ	0xFF1
 25747                           postinc0	equ	0xFEE
 25748                           wreg	equ	0xFE8
 25749                           indf1	equ	0xFE7
 25750                           postdec1	equ	0xFE5
 25751                           fsr1h	equ	0xFE2
 25752                           fsr1l	equ	0xFE1
 25753                           indf2	equ	0xFDF
 25754                           postinc2	equ	0xFDE
 25755                           plusw2	equ	0xFDB
 25756                           fsr2h	equ	0xFDA
 25757                           fsr2l	equ	0xFD9
 25758                           status	equ	0xFD8
 25759                           
 25760 ;; *************** function ___wmul *****************
 25761 ;; Defined at:
 25762 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 25763 ;; Parameters:    Size  Location     Type
 25764 ;;  multiplier      2    4[BANK0 ] unsigned int 
 25765 ;;  multiplicand    2    6[BANK0 ] unsigned int 
 25766 ;; Auto vars:     Size  Location     Type
 25767 ;;  product         2    8[BANK0 ] unsigned int 
 25768 ;; Return value:  Size  Location     Type
 25769 ;;                  2    4[BANK0 ] unsigned int 
 25770 ;; Registers used:
 25771 ;;		wreg, status,2, status,0, prodl, prodh
 25772 ;; Tracked objects:
 25773 ;;		On entry : 0/0
 25774 ;;		On exit  : 0/0
 25775 ;;		Unchanged: 0/0
 25776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25777 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25778 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25780 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25781 ;;Total ram usage:        6 bytes
 25782 ;; Hardware stack levels used:    1
 25783 ;; Hardware stack levels required when called:    5
 25784 ;; This function calls:
 25785 ;;		Nothing
 25786 ;; This function is called by:
 25787 ;;		_processOctave
 25788 ;;		_initializeMenuArray
 25789 ;;		_menu_lcd
 25790 ;;		_Function_A_1
 25791 ;;		_Function_A_2
 25792 ;;		_Function_A_3
 25793 ;;		_Function_A
 25794 ;;		_Function_B
 25795 ;;		_Function_C_1
 25796 ;;		_Function_C_2
 25797 ;;		_Function_C_3
 25798 ;;		_Function_C
 25799 ;;		_Function_D_1
 25800 ;;		_Function_D_3
 25801 ;;		_Function_D_4
 25802 ;;		_Function_D_5
 25803 ;;		_Function_D
 25804 ;;		_Function_E
 25805 ;;		_Function_G_1
 25806 ;;		_Function_G_2
 25807 ;;		_Function_G_4
 25808 ;;		_Function_G
 25809 ;;		_Function_H
 25810 ;;		_Function_H_4
 25811 ;;		_Function_H_5
 25812 ;;		_Function_H_6
 25813 ;;		_Function_H_8
 25814 ;;		_Function_H_9_1
 25815 ;;		_Function_H_9_2
 25816 ;;		_Function_H_9_3
 25817 ;;		_Function_H_9_4
 25818 ;;		_Function_H_9
 25819 ;; This function uses a non-reentrant model
 25820 ;;
 25821                           
 25822                           	psect	text81
 25823  0094CC                     __ptext81:
 25824                           	opt stack 0
 25825  0094CC                     ___wmul:
 25826                           	opt stack 24
 25827                           
 25828                           ;incstack = 0
 25829  0094CC  0100               	movlb	0	; () banked
 25830  0094CE  5164               	movf	___wmul@multiplier& (0+255),w,b
 25831  0094D0  0366               	mulwf	___wmul@multiplicand& (0+255),b
 25832  0094D2  CFF3 F068          	movff	prodl,___wmul@product
 25833  0094D6  CFF4 F069          	movff	prodh,___wmul@product+1
 25834  0094DA  5164               	movf	___wmul@multiplier& (0+255),w,b
 25835  0094DC  0367               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 25836  0094DE  50F3               	movf	prodl,w,c
 25837  0094E0  2769               	addwf	(___wmul@product+1)& (0+255),f,b
 25838  0094E2  5165               	movf	(___wmul@multiplier+1)& (0+255),w,b
 25839  0094E4  0366               	mulwf	___wmul@multiplicand& (0+255),b
 25840  0094E6  50F3               	movf	prodl,w,c
 25841  0094E8  2769               	addwf	(___wmul@product+1)& (0+255),f,b
 25842                           
 25843                           ; BSR set to: 0
 25844  0094EA  C068  F064         	movff	___wmul@product,?___wmul
 25845  0094EE  C069  F065         	movff	___wmul@product+1,?___wmul+1
 25846  0094F2  0012               	return	
 25847  0094F4                     __end_of___wmul:
 25848                           	opt stack 0
 25849                           tblptru	equ	0xFF8
 25850                           tblptrh	equ	0xFF7
 25851                           tblptrl	equ	0xFF6
 25852                           tablat	equ	0xFF5
 25853                           prodh	equ	0xFF4
 25854                           prodl	equ	0xFF3
 25855                           intcon	equ	0xFF2
 25856                           intcon2	equ	0xFF1
 25857                           postinc0	equ	0xFEE
 25858                           wreg	equ	0xFE8
 25859                           indf1	equ	0xFE7
 25860                           postdec1	equ	0xFE5
 25861                           fsr1h	equ	0xFE2
 25862                           fsr1l	equ	0xFE1
 25863                           indf2	equ	0xFDF
 25864                           postinc2	equ	0xFDE
 25865                           plusw2	equ	0xFDB
 25866                           fsr2h	equ	0xFDA
 25867                           fsr2l	equ	0xFD9
 25868                           status	equ	0xFD8
 25869                           
 25870 ;; *************** function _processKeyboard *****************
 25871 ;; Defined at:
 25872 ;;		line 23 in file "keyboard.c"
 25873 ;; Parameters:    Size  Location     Type
 25874 ;;		None
 25875 ;; Auto vars:     Size  Location     Type
 25876 ;;		None
 25877 ;; Return value:  Size  Location     Type
 25878 ;;                  1    wreg      void 
 25879 ;; Registers used:
 25880 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25881 ;; Tracked objects:
 25882 ;;		On entry : 0/0
 25883 ;;		On exit  : 0/0
 25884 ;;		Unchanged: 0/0
 25885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25890 ;;Total ram usage:        0 bytes
 25891 ;; Hardware stack levels used:    1
 25892 ;; Hardware stack levels required when called:   13
 25893 ;; This function calls:
 25894 ;;		_keyboard_all_note_efficient
 25895 ;;		_keyboard_eight_note_efficient
 25896 ;;		_keyboard_sharps_only_efficient
 25897 ;; This function is called by:
 25898 ;;		_digitalInputs
 25899 ;; This function uses a non-reentrant model
 25900 ;;
 25901                           
 25902                           	psect	text82
 25903  008678                     __ptext82:
 25904                           	opt stack 0
 25905  008678                     _processKeyboard:
 25906                           	opt stack 16
 25907                           
 25908                           ;keyboard.c: 25: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_
      +                          MODE == SEVENTH) {keyboard_all_note_efficient();}
 25909                           
 25910                           ; BSR set to: 0
 25911                           ;incstack = 0
 25912  008678  0100               	movlb	0	; () banked
 25913  00867A  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 25914  00867C  B4D8               	btfsc	status,2,c
 25915  00867E  D007               	goto	u34270
 25916                           
 25917                           ; BSR set to: 0
 25918  008680  0E06               	movlw	6
 25919  008682  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25920  008684  B4D8               	btfsc	status,2,c
 25921  008686  D003               	goto	u34270
 25922                           
 25923                           ; BSR set to: 0
 25924  008688  0E09               	movlw	9
 25925  00868A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25926  00868C  B4D8               	btfsc	status,2,c
 25927  00868E                     u34270:
 25928                           
 25929                           ; BSR set to: 0
 25930                           
 25931                           ; BSR set to: 0
 25932  00868E  ECA6  F00B         	call	_keyboard_all_note_efficient	;wreg free
 25933                           
 25934                           ;keyboard.c: 27: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_M
      +                          ODE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_T
      +                          RIAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MI
      +                          NOR
 25935  008692  0100               	movlb	0	; () banked
 25936  008694  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 25937  008696  B4D8               	btfsc	status,2,c
 25938  008698  D017               	goto	u34340
 25939                           
 25940                           ; BSR set to: 0
 25941  00869A  0E02               	movlw	2
 25942  00869C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25943  00869E  B4D8               	btfsc	status,2,c
 25944  0086A0  D013               	goto	u34340
 25945                           
 25946                           ; BSR set to: 0
 25947  0086A2  0E03               	movlw	3
 25948  0086A4  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25949  0086A6  B4D8               	btfsc	status,2,c
 25950  0086A8  D00F               	goto	u34340
 25951                           
 25952                           ; BSR set to: 0
 25953  0086AA  0E07               	movlw	7
 25954  0086AC  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25955  0086AE  B4D8               	btfsc	status,2,c
 25956  0086B0  D00B               	goto	u34340
 25957                           
 25958                           ; BSR set to: 0
 25959  0086B2  0E08               	movlw	8
 25960  0086B4  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25961  0086B6  B4D8               	btfsc	status,2,c
 25962  0086B8  D007               	goto	u34340
 25963                           
 25964                           ; BSR set to: 0
 25965  0086BA  0E0A               	movlw	10
 25966  0086BC  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25967  0086BE  B4D8               	btfsc	status,2,c
 25968  0086C0  D003               	goto	u34340
 25969                           
 25970                           ; BSR set to: 0
 25971  0086C2  0E0B               	movlw	11
 25972  0086C4  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25973  0086C6  B4D8               	btfsc	status,2,c
 25974  0086C8                     u34340:
 25975                           
 25976                           ; BSR set to: 0
 25977                           
 25978                           ; BSR set to: 0
 25979  0086C8  EC4D  F015         	call	_keyboard_eight_note_efficient	;wreg free
 25980                           
 25981                           ;keyboard.c: 30: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC
      +                          _MINOR)) {keyboard_sharps_only_efficient();}
 25982  0086CC  0E04               	movlw	4
 25983  0086CE  0100               	movlb	0	; () banked
 25984  0086D0  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25985  0086D2  B4D8               	btfsc	status,2,c
 25986  0086D4  D004               	goto	u34360
 25987                           
 25988                           ; BSR set to: 0
 25989  0086D6  0E05               	movlw	5
 25990  0086D8  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25991  0086DA  A4D8               	btfss	status,2,c
 25992  0086DC  0012               	return	
 25993  0086DE                     u34360:
 25994                           
 25995                           ; BSR set to: 0
 25996                           
 25997                           ; BSR set to: 0
 25998  0086DE  EC75  F01D         	call	_keyboard_sharps_only_efficient	;wreg free
 25999  0086E2  0012               	return	
 26000  0086E4                     __end_of_processKeyboard:
 26001                           	opt stack 0
 26002                           tblptru	equ	0xFF8
 26003                           tblptrh	equ	0xFF7
 26004                           tblptrl	equ	0xFF6
 26005                           tablat	equ	0xFF5
 26006                           prodh	equ	0xFF4
 26007                           prodl	equ	0xFF3
 26008                           intcon	equ	0xFF2
 26009                           intcon2	equ	0xFF1
 26010                           postinc0	equ	0xFEE
 26011                           wreg	equ	0xFE8
 26012                           indf1	equ	0xFE7
 26013                           postdec1	equ	0xFE5
 26014                           fsr1h	equ	0xFE2
 26015                           fsr1l	equ	0xFE1
 26016                           indf2	equ	0xFDF
 26017                           postinc2	equ	0xFDE
 26018                           plusw2	equ	0xFDB
 26019                           fsr2h	equ	0xFDA
 26020                           fsr2l	equ	0xFD9
 26021                           status	equ	0xFD8
 26022                           
 26023 ;; *************** function _keyboard_sharps_only_efficient *****************
 26024 ;; Defined at:
 26025 ;;		line 140 in file "keyboard.c"
 26026 ;; Parameters:    Size  Location     Type
 26027 ;;		None
 26028 ;; Auto vars:     Size  Location     Type
 26029 ;;  index           1   30[BANK0 ] unsigned char 
 26030 ;;  pitch           1   29[BANK0 ] unsigned char 
 26031 ;; Return value:  Size  Location     Type
 26032 ;;                  1    wreg      void 
 26033 ;; Registers used:
 26034 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26035 ;; Tracked objects:
 26036 ;;		On entry : 0/0
 26037 ;;		On exit  : 0/0
 26038 ;;		Unchanged: 0/0
 26039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 26040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26041 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26043 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26044 ;;Total ram usage:        2 bytes
 26045 ;; Hardware stack levels used:    1
 26046 ;; Hardware stack levels required when called:   11
 26047 ;; This function calls:
 26048 ;;		_playThisNotePentatonic
 26049 ;; This function is called by:
 26050 ;;		_processKeyboard
 26051 ;; This function uses a non-reentrant model
 26052 ;;
 26053                           
 26054                           	psect	text83
 26055  003AEA                     __ptext83:
 26056                           	opt stack 0
 26057  003AEA                     _keyboard_sharps_only_efficient:
 26058                           	opt stack 17
 26059                           
 26060                           ;keyboard.c: 142: unsigned char pitch;
 26061                           ;keyboard.c: 143: unsigned char index;
 26062                           ;keyboard.c: 146: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2){
 26063                           
 26064                           ;incstack = 0
 26065  003AEA  0100               	movlb	0	; () banked
 26066  003AEC  B3D8               	btfsc	_button_state_now& (0+255),1,b
 26067                           
 26068                           ; BSR set to: 0
 26069  003AEE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26070  003AF0  D00E               	goto	l1358
 26071                           
 26072                           ; BSR set to: 0
 26073  003AF2  B3D0               	btfsc	_keyboard& (0+255),1,b
 26074  003AF4  D00C               	goto	l1358
 26075                           
 26076                           ; BSR set to: 0
 26077                           ;keyboard.c: 147: pitch = Cs;
 26078  003AF6  0E01               	movlw	1
 26079  003AF8  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26080                           
 26081                           ;keyboard.c: 148: index = 0;
 26082  003AFA  0E00               	movlw	0
 26083  003AFC  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26084                           
 26085                           ; BSR set to: 0
 26086                           ;keyboard.c: 149: ON_OFF = 1;
 26087  003AFE  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26088                           
 26089                           ; BSR set to: 0
 26090                           ;keyboard.c: 150: playThisNotePentatonic(pitch, index);
 26091  003B00  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26092  003B04  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26093  003B06  ECE7  F029         	call	_playThisNotePentatonic
 26094                           
 26095                           ;keyboard.c: 151: keyboard.SW2 = 1;
 26096  003B0A  0100               	movlb	0	; () banked
 26097  003B0C  83D0               	bsf	_keyboard& (0+255),1,b
 26098  003B0E                     l1358:
 26099                           
 26100                           ; BSR set to: 0
 26101                           ;keyboard.c: 152: }
 26102                           ;keyboard.c: 153: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4){
 26103                           
 26104                           ; BSR set to: 0
 26105  003B0E  B7D8               	btfsc	_button_state_now& (0+255),3,b
 26106                           
 26107                           ; BSR set to: 0
 26108  003B10  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26109  003B12  D00E               	goto	l1359
 26110                           
 26111                           ; BSR set to: 0
 26112  003B14  B7D0               	btfsc	_keyboard& (0+255),3,b
 26113  003B16  D00C               	goto	l1359
 26114                           
 26115                           ; BSR set to: 0
 26116                           ;keyboard.c: 154: pitch = Ds;
 26117  003B18  0E03               	movlw	3
 26118  003B1A  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26119                           
 26120                           ;keyboard.c: 155: index = 1;
 26121  003B1C  0E01               	movlw	1
 26122  003B1E  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26123                           
 26124                           ; BSR set to: 0
 26125                           ;keyboard.c: 156: ON_OFF = 1;
 26126  003B20  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26127                           
 26128                           ; BSR set to: 0
 26129                           ;keyboard.c: 157: playThisNotePentatonic(pitch, index);
 26130  003B22  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26131  003B26  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26132  003B28  ECE7  F029         	call	_playThisNotePentatonic
 26133                           
 26134                           ;keyboard.c: 158: keyboard.SW4 = 1;
 26135  003B2C  0100               	movlb	0	; () banked
 26136  003B2E  87D0               	bsf	_keyboard& (0+255),3,b
 26137  003B30                     l1359:
 26138                           
 26139                           ; BSR set to: 0
 26140                           ;keyboard.c: 159: }
 26141                           ;keyboard.c: 160: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7){
 26142                           
 26143                           ; BSR set to: 0
 26144  003B30  BDD8               	btfsc	_button_state_now& (0+255),6,b
 26145                           
 26146                           ; BSR set to: 0
 26147  003B32  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26148  003B34  D00E               	goto	l1360
 26149                           
 26150                           ; BSR set to: 0
 26151  003B36  BDD0               	btfsc	_keyboard& (0+255),6,b
 26152  003B38  D00C               	goto	l1360
 26153                           
 26154                           ; BSR set to: 0
 26155                           ;keyboard.c: 161: pitch = Fs;
 26156  003B3A  0E06               	movlw	6
 26157  003B3C  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26158                           
 26159                           ;keyboard.c: 162: index = 2;
 26160  003B3E  0E02               	movlw	2
 26161  003B40  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26162                           
 26163                           ; BSR set to: 0
 26164                           ;keyboard.c: 163: ON_OFF = 1;
 26165  003B42  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26166                           
 26167                           ; BSR set to: 0
 26168                           ;keyboard.c: 164: playThisNotePentatonic(pitch, index);
 26169  003B44  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26170  003B48  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26171  003B4A  ECE7  F029         	call	_playThisNotePentatonic
 26172                           
 26173                           ;keyboard.c: 165: keyboard.SW7 = 1;
 26174  003B4E  0100               	movlb	0	; () banked
 26175  003B50  8DD0               	bsf	_keyboard& (0+255),6,b
 26176  003B52                     l1360:
 26177                           
 26178                           ; BSR set to: 0
 26179                           ;keyboard.c: 166: }
 26180                           ;keyboard.c: 167: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9){
 26181                           
 26182                           ; BSR set to: 0
 26183  003B52  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 26184                           
 26185                           ; BSR set to: 0
 26186  003B54  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26187  003B56  D00E               	goto	l1361
 26188                           
 26189                           ; BSR set to: 0
 26190  003B58  B1D1               	btfsc	(_keyboard+1)& (0+255),0,b
 26191  003B5A  D00C               	goto	l1361
 26192                           
 26193                           ; BSR set to: 0
 26194                           ;keyboard.c: 168: pitch = Gs;
 26195  003B5C  0E08               	movlw	8
 26196  003B5E  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26197                           
 26198                           ;keyboard.c: 169: index = 3;
 26199  003B60  0E03               	movlw	3
 26200  003B62  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26201                           
 26202                           ; BSR set to: 0
 26203                           ;keyboard.c: 170: ON_OFF = 1;
 26204  003B64  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26205                           
 26206                           ; BSR set to: 0
 26207                           ;keyboard.c: 171: playThisNotePentatonic(pitch, index);
 26208  003B66  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26209  003B6A  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26210  003B6C  ECE7  F029         	call	_playThisNotePentatonic
 26211                           
 26212                           ;keyboard.c: 172: keyboard.SW9 = 1;
 26213  003B70  0100               	movlb	0	; () banked
 26214  003B72  81D1               	bsf	(_keyboard+1)& (0+255),0,b
 26215  003B74                     l1361:
 26216                           
 26217                           ; BSR set to: 0
 26218                           ;keyboard.c: 173: }
 26219                           ;keyboard.c: 174: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11){
 26220                           
 26221                           ; BSR set to: 0
 26222  003B74  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 26223                           
 26224                           ; BSR set to: 0
 26225  003B76  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26226  003B78  D00E               	goto	l1362
 26227                           
 26228                           ; BSR set to: 0
 26229  003B7A  B5D1               	btfsc	(_keyboard+1)& (0+255),2,b
 26230  003B7C  D00C               	goto	l1362
 26231                           
 26232                           ; BSR set to: 0
 26233                           ;keyboard.c: 175: pitch = As;
 26234  003B7E  0E0A               	movlw	10
 26235  003B80  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26236                           
 26237                           ;keyboard.c: 176: index = 4;
 26238  003B82  0E04               	movlw	4
 26239  003B84  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26240                           
 26241                           ; BSR set to: 0
 26242                           ;keyboard.c: 177: ON_OFF = 1;
 26243  003B86  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26244                           
 26245                           ; BSR set to: 0
 26246                           ;keyboard.c: 178: playThisNotePentatonic(pitch, index);
 26247  003B88  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26248  003B8C  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26249  003B8E  ECE7  F029         	call	_playThisNotePentatonic
 26250                           
 26251                           ;keyboard.c: 179: keyboard.SW11 = 1;
 26252  003B92  0100               	movlb	0	; () banked
 26253  003B94  85D1               	bsf	(_keyboard+1)& (0+255),2,b
 26254  003B96                     l1362:
 26255                           
 26256                           ; BSR set to: 0
 26257                           ;keyboard.c: 180: }
 26258                           ;keyboard.c: 182: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14){
 26259                           
 26260                           ; BSR set to: 0
 26261  003B96  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 26262                           
 26263                           ; BSR set to: 0
 26264  003B98  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26265  003B9A  D00E               	goto	l1363
 26266                           
 26267                           ; BSR set to: 0
 26268  003B9C  BBD1               	btfsc	(_keyboard+1)& (0+255),5,b
 26269  003B9E  D00C               	goto	l1363
 26270                           
 26271                           ; BSR set to: 0
 26272                           ;keyboard.c: 183: pitch = C2s;
 26273  003BA0  0E0D               	movlw	13
 26274  003BA2  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26275                           
 26276                           ;keyboard.c: 184: index = 5;
 26277  003BA4  0E05               	movlw	5
 26278  003BA6  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26279                           
 26280                           ; BSR set to: 0
 26281                           ;keyboard.c: 185: ON_OFF = 1;
 26282  003BA8  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26283                           
 26284                           ; BSR set to: 0
 26285                           ;keyboard.c: 186: playThisNotePentatonic(pitch, index);
 26286  003BAA  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26287  003BAE  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26288  003BB0  ECE7  F029         	call	_playThisNotePentatonic
 26289                           
 26290                           ;keyboard.c: 187: keyboard.SW14 = 1;
 26291  003BB4  0100               	movlb	0	; () banked
 26292  003BB6  8BD1               	bsf	(_keyboard+1)& (0+255),5,b
 26293  003BB8                     l1363:
 26294                           
 26295                           ; BSR set to: 0
 26296                           ;keyboard.c: 188: }
 26297                           ;keyboard.c: 189: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16){
 26298                           
 26299                           ; BSR set to: 0
 26300  003BB8  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 26301                           
 26302                           ; BSR set to: 0
 26303  003BBA  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26304  003BBC  D00E               	goto	l1364
 26305                           
 26306                           ; BSR set to: 0
 26307  003BBE  BFD1               	btfsc	(_keyboard+1)& (0+255),7,b
 26308  003BC0  D00C               	goto	l1364
 26309                           
 26310                           ; BSR set to: 0
 26311                           ;keyboard.c: 190: pitch = D2s;
 26312  003BC2  0E0F               	movlw	15
 26313  003BC4  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26314                           
 26315                           ;keyboard.c: 191: index = 6;
 26316  003BC6  0E06               	movlw	6
 26317  003BC8  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26318                           
 26319                           ; BSR set to: 0
 26320                           ;keyboard.c: 192: ON_OFF = 1;
 26321  003BCA  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26322                           
 26323                           ; BSR set to: 0
 26324                           ;keyboard.c: 193: playThisNotePentatonic(pitch, index);
 26325  003BCC  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26326  003BD0  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26327  003BD2  ECE7  F029         	call	_playThisNotePentatonic
 26328                           
 26329                           ;keyboard.c: 194: keyboard.SW16 = 1;
 26330  003BD6  0100               	movlb	0	; () banked
 26331  003BD8  8FD1               	bsf	(_keyboard+1)& (0+255),7,b
 26332  003BDA                     l1364:
 26333                           
 26334                           ; BSR set to: 0
 26335                           ;keyboard.c: 195: }
 26336                           ;keyboard.c: 196: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19){
 26337                           
 26338                           ; BSR set to: 0
 26339  003BDA  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 26340                           
 26341                           ; BSR set to: 0
 26342  003BDC  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26343  003BDE  D00E               	goto	l1365
 26344                           
 26345                           ; BSR set to: 0
 26346  003BE0  B5D2               	btfsc	(_keyboard+2)& (0+255),2,b
 26347  003BE2  D00C               	goto	l1365
 26348                           
 26349                           ; BSR set to: 0
 26350                           ;keyboard.c: 197: pitch = F2s;
 26351  003BE4  0E12               	movlw	18
 26352  003BE6  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26353                           
 26354                           ;keyboard.c: 198: index = 7;
 26355  003BE8  0E07               	movlw	7
 26356  003BEA  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26357                           
 26358                           ; BSR set to: 0
 26359                           ;keyboard.c: 199: ON_OFF = 1;
 26360  003BEC  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26361                           
 26362                           ; BSR set to: 0
 26363                           ;keyboard.c: 200: playThisNotePentatonic(pitch, index);
 26364  003BEE  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26365  003BF2  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26366  003BF4  ECE7  F029         	call	_playThisNotePentatonic
 26367                           
 26368                           ;keyboard.c: 201: keyboard.SW19 = 1;
 26369  003BF8  0100               	movlb	0	; () banked
 26370  003BFA  85D2               	bsf	(_keyboard+2)& (0+255),2,b
 26371  003BFC                     l1365:
 26372                           
 26373                           ; BSR set to: 0
 26374                           ;keyboard.c: 202: }
 26375                           ;keyboard.c: 203: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21){
 26376                           
 26377                           ; BSR set to: 0
 26378  003BFC  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 26379                           
 26380                           ; BSR set to: 0
 26381  003BFE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26382  003C00  D00E               	goto	l1366
 26383                           
 26384                           ; BSR set to: 0
 26385  003C02  B9D2               	btfsc	(_keyboard+2)& (0+255),4,b
 26386  003C04  D00C               	goto	l1366
 26387                           
 26388                           ; BSR set to: 0
 26389                           ;keyboard.c: 204: pitch = G2s;
 26390  003C06  0E14               	movlw	20
 26391  003C08  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26392                           
 26393                           ;keyboard.c: 205: index = 8;
 26394  003C0A  0E08               	movlw	8
 26395  003C0C  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26396                           
 26397                           ; BSR set to: 0
 26398                           ;keyboard.c: 206: ON_OFF = 1;
 26399  003C0E  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26400                           
 26401                           ; BSR set to: 0
 26402                           ;keyboard.c: 207: playThisNotePentatonic(pitch, index);
 26403  003C10  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26404  003C14  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26405  003C16  ECE7  F029         	call	_playThisNotePentatonic
 26406                           
 26407                           ;keyboard.c: 208: keyboard.SW21 = 1;
 26408  003C1A  0100               	movlb	0	; () banked
 26409  003C1C  89D2               	bsf	(_keyboard+2)& (0+255),4,b
 26410  003C1E                     l1366:
 26411                           
 26412                           ; BSR set to: 0
 26413                           ;keyboard.c: 209: }
 26414                           ;keyboard.c: 210: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23){
 26415                           
 26416                           ; BSR set to: 0
 26417  003C1E  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 26418                           
 26419                           ; BSR set to: 0
 26420  003C20  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26421  003C22  D00E               	goto	l1367
 26422                           
 26423                           ; BSR set to: 0
 26424  003C24  BDD2               	btfsc	(_keyboard+2)& (0+255),6,b
 26425  003C26  D00C               	goto	l1367
 26426                           
 26427                           ; BSR set to: 0
 26428                           ;keyboard.c: 211: pitch = A2s;
 26429  003C28  0E16               	movlw	22
 26430  003C2A  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26431                           
 26432                           ;keyboard.c: 212: index = 9;
 26433  003C2C  0E09               	movlw	9
 26434  003C2E  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26435                           
 26436                           ; BSR set to: 0
 26437                           ;keyboard.c: 213: ON_OFF = 1;
 26438  003C30  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26439                           
 26440                           ; BSR set to: 0
 26441                           ;keyboard.c: 214: playThisNotePentatonic(pitch, index);
 26442  003C32  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26443  003C36  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26444  003C38  ECE7  F029         	call	_playThisNotePentatonic
 26445                           
 26446                           ;keyboard.c: 215: keyboard.SW23 = 1;
 26447  003C3C  0100               	movlb	0	; () banked
 26448  003C3E  8DD2               	bsf	(_keyboard+2)& (0+255),6,b
 26449  003C40                     l1367:
 26450                           
 26451                           ; BSR set to: 0
 26452                           ;keyboard.c: 216: }
 26453                           ;keyboard.c: 219: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 26454                           
 26455                           ; BSR set to: 0
 26456  003C40  B3D4               	btfsc	_button_state_last& (0+255),1,b
 26457                           
 26458                           ; BSR set to: 0
 26459  003C42  B3D8               	btfsc	_button_state_now& (0+255),1,b
 26460  003C44  D00E               	goto	l1368
 26461                           
 26462                           ; BSR set to: 0
 26463  003C46  A3D0               	btfss	_keyboard& (0+255),1,b
 26464  003C48  D00C               	goto	l1368
 26465                           
 26466                           ; BSR set to: 0
 26467                           ;keyboard.c: 220: pitch = Cs;
 26468  003C4A  0E01               	movlw	1
 26469  003C4C  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26470                           
 26471                           ;keyboard.c: 221: index = 0;
 26472  003C4E  0E00               	movlw	0
 26473  003C50  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26474                           
 26475                           ; BSR set to: 0
 26476                           ;keyboard.c: 222: ON_OFF = 0;
 26477  003C52  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26478                           
 26479                           ; BSR set to: 0
 26480                           ;keyboard.c: 223: playThisNotePentatonic(pitch, index);
 26481  003C54  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26482  003C58  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26483  003C5A  ECE7  F029         	call	_playThisNotePentatonic
 26484                           
 26485                           ;keyboard.c: 224: keyboard.SW2 = 0;
 26486  003C5E  0100               	movlb	0	; () banked
 26487  003C60  93D0               	bcf	_keyboard& (0+255),1,b
 26488  003C62                     l1368:
 26489                           
 26490                           ; BSR set to: 0
 26491                           ;keyboard.c: 225: }
 26492                           ;keyboard.c: 226: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 26493                           
 26494                           ; BSR set to: 0
 26495  003C62  B7D4               	btfsc	_button_state_last& (0+255),3,b
 26496                           
 26497                           ; BSR set to: 0
 26498  003C64  B7D8               	btfsc	_button_state_now& (0+255),3,b
 26499  003C66  D00E               	goto	l1369
 26500                           
 26501                           ; BSR set to: 0
 26502  003C68  A7D0               	btfss	_keyboard& (0+255),3,b
 26503  003C6A  D00C               	goto	l1369
 26504                           
 26505                           ; BSR set to: 0
 26506                           ;keyboard.c: 227: pitch = Ds;
 26507  003C6C  0E03               	movlw	3
 26508  003C6E  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26509                           
 26510                           ;keyboard.c: 228: index = 1;
 26511  003C70  0E01               	movlw	1
 26512  003C72  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26513                           
 26514                           ; BSR set to: 0
 26515                           ;keyboard.c: 229: ON_OFF = 0;
 26516  003C74  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26517                           
 26518                           ; BSR set to: 0
 26519                           ;keyboard.c: 230: playThisNotePentatonic(pitch, index);
 26520  003C76  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26521  003C7A  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26522  003C7C  ECE7  F029         	call	_playThisNotePentatonic
 26523                           
 26524                           ;keyboard.c: 231: keyboard.SW4 = 0;
 26525  003C80  0100               	movlb	0	; () banked
 26526  003C82  97D0               	bcf	_keyboard& (0+255),3,b
 26527  003C84                     l1369:
 26528                           
 26529                           ; BSR set to: 0
 26530                           ;keyboard.c: 232: }
 26531                           ;keyboard.c: 233: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 26532                           
 26533                           ; BSR set to: 0
 26534  003C84  BDD4               	btfsc	_button_state_last& (0+255),6,b
 26535                           
 26536                           ; BSR set to: 0
 26537  003C86  BDD8               	btfsc	_button_state_now& (0+255),6,b
 26538  003C88  D00E               	goto	l1370
 26539                           
 26540                           ; BSR set to: 0
 26541  003C8A  ADD0               	btfss	_keyboard& (0+255),6,b
 26542  003C8C  D00C               	goto	l1370
 26543                           
 26544                           ; BSR set to: 0
 26545                           ;keyboard.c: 234: pitch = Fs;
 26546  003C8E  0E06               	movlw	6
 26547  003C90  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26548                           
 26549                           ;keyboard.c: 235: index = 2;
 26550  003C92  0E02               	movlw	2
 26551  003C94  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26552                           
 26553                           ; BSR set to: 0
 26554                           ;keyboard.c: 236: ON_OFF = 0;
 26555  003C96  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26556                           
 26557                           ; BSR set to: 0
 26558                           ;keyboard.c: 237: playThisNotePentatonic(pitch, index);
 26559  003C98  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26560  003C9C  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26561  003C9E  ECE7  F029         	call	_playThisNotePentatonic
 26562                           
 26563                           ;keyboard.c: 238: keyboard.SW7 = 0;
 26564  003CA2  0100               	movlb	0	; () banked
 26565  003CA4  9DD0               	bcf	_keyboard& (0+255),6,b
 26566  003CA6                     l1370:
 26567                           
 26568                           ; BSR set to: 0
 26569                           ;keyboard.c: 239: }
 26570                           ;keyboard.c: 240: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 26571                           
 26572                           ; BSR set to: 0
 26573  003CA6  B1D5               	btfsc	(_button_state_last+1)& (0+255),0,b
 26574                           
 26575                           ; BSR set to: 0
 26576  003CA8  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 26577  003CAA  D00E               	goto	l1371
 26578                           
 26579                           ; BSR set to: 0
 26580  003CAC  A1D1               	btfss	(_keyboard+1)& (0+255),0,b
 26581  003CAE  D00C               	goto	l1371
 26582                           
 26583                           ; BSR set to: 0
 26584                           ;keyboard.c: 241: pitch = Gs;
 26585  003CB0  0E08               	movlw	8
 26586  003CB2  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26587                           
 26588                           ;keyboard.c: 242: index = 3;
 26589  003CB4  0E03               	movlw	3
 26590  003CB6  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26591                           
 26592                           ; BSR set to: 0
 26593                           ;keyboard.c: 243: ON_OFF = 0;
 26594  003CB8  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26595                           
 26596                           ; BSR set to: 0
 26597                           ;keyboard.c: 244: playThisNotePentatonic(pitch, index);
 26598  003CBA  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26599  003CBE  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26600  003CC0  ECE7  F029         	call	_playThisNotePentatonic
 26601                           
 26602                           ;keyboard.c: 245: keyboard.SW9 = 0;
 26603  003CC4  0100               	movlb	0	; () banked
 26604  003CC6  91D1               	bcf	(_keyboard+1)& (0+255),0,b
 26605  003CC8                     l1371:
 26606                           
 26607                           ; BSR set to: 0
 26608                           ;keyboard.c: 246: }
 26609                           ;keyboard.c: 247: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 26610                           
 26611                           ; BSR set to: 0
 26612  003CC8  B5D5               	btfsc	(_button_state_last+1)& (0+255),2,b
 26613                           
 26614                           ; BSR set to: 0
 26615  003CCA  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 26616  003CCC  D00E               	goto	l1372
 26617                           
 26618                           ; BSR set to: 0
 26619  003CCE  A5D1               	btfss	(_keyboard+1)& (0+255),2,b
 26620  003CD0  D00C               	goto	l1372
 26621                           
 26622                           ; BSR set to: 0
 26623                           ;keyboard.c: 248: pitch = As;
 26624  003CD2  0E0A               	movlw	10
 26625  003CD4  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26626                           
 26627                           ;keyboard.c: 249: index = 4;
 26628  003CD6  0E04               	movlw	4
 26629  003CD8  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26630                           
 26631                           ; BSR set to: 0
 26632                           ;keyboard.c: 250: ON_OFF = 0;
 26633  003CDA  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26634                           
 26635                           ; BSR set to: 0
 26636                           ;keyboard.c: 251: playThisNotePentatonic(pitch, index);
 26637  003CDC  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26638  003CE0  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26639  003CE2  ECE7  F029         	call	_playThisNotePentatonic
 26640                           
 26641                           ;keyboard.c: 252: keyboard.SW11 = 0;
 26642  003CE6  0100               	movlb	0	; () banked
 26643  003CE8  95D1               	bcf	(_keyboard+1)& (0+255),2,b
 26644  003CEA                     l1372:
 26645                           
 26646                           ; BSR set to: 0
 26647                           ;keyboard.c: 253: }
 26648                           ;keyboard.c: 256: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 26649                           
 26650                           ; BSR set to: 0
 26651  003CEA  BBD5               	btfsc	(_button_state_last+1)& (0+255),5,b
 26652                           
 26653                           ; BSR set to: 0
 26654  003CEC  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 26655  003CEE  D00E               	goto	l1373
 26656                           
 26657                           ; BSR set to: 0
 26658  003CF0  ABD1               	btfss	(_keyboard+1)& (0+255),5,b
 26659  003CF2  D00C               	goto	l1373
 26660                           
 26661                           ; BSR set to: 0
 26662                           ;keyboard.c: 257: pitch = C2s;
 26663  003CF4  0E0D               	movlw	13
 26664  003CF6  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26665                           
 26666                           ;keyboard.c: 258: index = 5;
 26667  003CF8  0E05               	movlw	5
 26668  003CFA  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26669                           
 26670                           ; BSR set to: 0
 26671                           ;keyboard.c: 259: ON_OFF = 0;
 26672  003CFC  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26673                           
 26674                           ; BSR set to: 0
 26675                           ;keyboard.c: 260: playThisNotePentatonic(pitch, index);
 26676  003CFE  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26677  003D02  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26678  003D04  ECE7  F029         	call	_playThisNotePentatonic
 26679                           
 26680                           ;keyboard.c: 261: keyboard.SW14 = 0;
 26681  003D08  0100               	movlb	0	; () banked
 26682  003D0A  9BD1               	bcf	(_keyboard+1)& (0+255),5,b
 26683  003D0C                     l1373:
 26684                           
 26685                           ; BSR set to: 0
 26686                           ;keyboard.c: 262: }
 26687                           ;keyboard.c: 263: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 26688                           
 26689                           ; BSR set to: 0
 26690  003D0C  BFD5               	btfsc	(_button_state_last+1)& (0+255),7,b
 26691                           
 26692                           ; BSR set to: 0
 26693  003D0E  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 26694  003D10  D00E               	goto	l1374
 26695                           
 26696                           ; BSR set to: 0
 26697  003D12  AFD1               	btfss	(_keyboard+1)& (0+255),7,b
 26698  003D14  D00C               	goto	l1374
 26699                           
 26700                           ; BSR set to: 0
 26701                           ;keyboard.c: 264: pitch = D2s;
 26702  003D16  0E0F               	movlw	15
 26703  003D18  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26704                           
 26705                           ;keyboard.c: 265: index = 6;
 26706  003D1A  0E06               	movlw	6
 26707  003D1C  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26708                           
 26709                           ; BSR set to: 0
 26710                           ;keyboard.c: 266: ON_OFF = 0;
 26711  003D1E  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26712                           
 26713                           ; BSR set to: 0
 26714                           ;keyboard.c: 267: playThisNotePentatonic(pitch, index);
 26715  003D20  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26716  003D24  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26717  003D26  ECE7  F029         	call	_playThisNotePentatonic
 26718                           
 26719                           ;keyboard.c: 268: keyboard.SW16 = 0;
 26720  003D2A  0100               	movlb	0	; () banked
 26721  003D2C  9FD1               	bcf	(_keyboard+1)& (0+255),7,b
 26722  003D2E                     l1374:
 26723                           
 26724                           ; BSR set to: 0
 26725                           ;keyboard.c: 269: }
 26726                           ;keyboard.c: 270: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 26727                           
 26728                           ; BSR set to: 0
 26729  003D2E  B5D6               	btfsc	(_button_state_last+2)& (0+255),2,b
 26730                           
 26731                           ; BSR set to: 0
 26732  003D30  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 26733  003D32  D00E               	goto	l1375
 26734                           
 26735                           ; BSR set to: 0
 26736  003D34  A5D2               	btfss	(_keyboard+2)& (0+255),2,b
 26737  003D36  D00C               	goto	l1375
 26738                           
 26739                           ; BSR set to: 0
 26740                           ;keyboard.c: 271: pitch = F2s;
 26741  003D38  0E12               	movlw	18
 26742  003D3A  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26743                           
 26744                           ;keyboard.c: 272: index = 7;
 26745  003D3C  0E07               	movlw	7
 26746  003D3E  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26747                           
 26748                           ; BSR set to: 0
 26749                           ;keyboard.c: 273: ON_OFF = 0;
 26750  003D40  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26751                           
 26752                           ; BSR set to: 0
 26753                           ;keyboard.c: 274: playThisNotePentatonic(pitch, index);
 26754  003D42  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26755  003D46  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26756  003D48  ECE7  F029         	call	_playThisNotePentatonic
 26757                           
 26758                           ;keyboard.c: 275: keyboard.SW19 = 0;
 26759  003D4C  0100               	movlb	0	; () banked
 26760  003D4E  95D2               	bcf	(_keyboard+2)& (0+255),2,b
 26761  003D50                     l1375:
 26762                           
 26763                           ; BSR set to: 0
 26764                           ;keyboard.c: 276: }
 26765                           ;keyboard.c: 277: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 26766                           
 26767                           ; BSR set to: 0
 26768  003D50  B9D6               	btfsc	(_button_state_last+2)& (0+255),4,b
 26769                           
 26770                           ; BSR set to: 0
 26771  003D52  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 26772  003D54  D00E               	goto	l1376
 26773                           
 26774                           ; BSR set to: 0
 26775  003D56  A9D2               	btfss	(_keyboard+2)& (0+255),4,b
 26776  003D58  D00C               	goto	l1376
 26777                           
 26778                           ; BSR set to: 0
 26779                           ;keyboard.c: 278: pitch = G2s;
 26780  003D5A  0E14               	movlw	20
 26781  003D5C  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26782                           
 26783                           ;keyboard.c: 279: index = 8;
 26784  003D5E  0E08               	movlw	8
 26785  003D60  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26786                           
 26787                           ; BSR set to: 0
 26788                           ;keyboard.c: 280: ON_OFF = 0;
 26789  003D62  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26790                           
 26791                           ; BSR set to: 0
 26792                           ;keyboard.c: 281: playThisNotePentatonic(pitch, index);
 26793  003D64  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26794  003D68  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26795  003D6A  ECE7  F029         	call	_playThisNotePentatonic
 26796                           
 26797                           ;keyboard.c: 282: keyboard.SW21 = 0;
 26798  003D6E  0100               	movlb	0	; () banked
 26799  003D70  99D2               	bcf	(_keyboard+2)& (0+255),4,b
 26800  003D72                     l1376:
 26801                           
 26802                           ; BSR set to: 0
 26803                           ;keyboard.c: 283: }
 26804                           ;keyboard.c: 284: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 26805                           
 26806                           ; BSR set to: 0
 26807  003D72  ADD6               	btfss	(_button_state_last+2)& (0+255),6,b
 26808  003D74  0012               	return	
 26809                           
 26810                           ; BSR set to: 0
 26811  003D76  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 26812  003D78  0012               	return	
 26813                           
 26814                           ; BSR set to: 0
 26815  003D7A  ADD2               	btfss	(_keyboard+2)& (0+255),6,b
 26816  003D7C  0012               	return	
 26817                           
 26818                           ; BSR set to: 0
 26819                           ;keyboard.c: 285: pitch = A2s;
 26820  003D7E  0E16               	movlw	22
 26821  003D80  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26822                           
 26823                           ;keyboard.c: 286: index = 9;
 26824  003D82  0E09               	movlw	9
 26825  003D84  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26826                           
 26827                           ; BSR set to: 0
 26828                           ;keyboard.c: 287: ON_OFF = 0;
 26829  003D86  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26830                           
 26831                           ; BSR set to: 0
 26832                           ;keyboard.c: 288: playThisNotePentatonic(pitch, index);
 26833  003D88  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26834  003D8C  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26835  003D8E  ECE7  F029         	call	_playThisNotePentatonic
 26836                           
 26837                           ;keyboard.c: 289: keyboard.SW23 = 0;
 26838  003D92  0100               	movlb	0	; () banked
 26839  003D94  9DD2               	bcf	(_keyboard+2)& (0+255),6,b
 26840  003D96  0012               	return	
 26841  003D98                     __end_of_keyboard_sharps_only_efficient:
 26842                           	opt stack 0
 26843                           tblptru	equ	0xFF8
 26844                           tblptrh	equ	0xFF7
 26845                           tblptrl	equ	0xFF6
 26846                           tablat	equ	0xFF5
 26847                           prodh	equ	0xFF4
 26848                           prodl	equ	0xFF3
 26849                           intcon	equ	0xFF2
 26850                           intcon2	equ	0xFF1
 26851                           postinc0	equ	0xFEE
 26852                           wreg	equ	0xFE8
 26853                           indf1	equ	0xFE7
 26854                           postdec1	equ	0xFE5
 26855                           fsr1h	equ	0xFE2
 26856                           fsr1l	equ	0xFE1
 26857                           indf2	equ	0xFDF
 26858                           postinc2	equ	0xFDE
 26859                           plusw2	equ	0xFDB
 26860                           fsr2h	equ	0xFDA
 26861                           fsr2l	equ	0xFD9
 26862                           status	equ	0xFD8
 26863                           
 26864 ;; *************** function _playThisNotePentatonic *****************
 26865 ;; Defined at:
 26866 ;;		line 33 in file "keyboard.c"
 26867 ;; Parameters:    Size  Location     Type
 26868 ;;  pitch           1    wreg     unsigned char 
 26869 ;;  index           1   23[BANK0 ] unsigned char 
 26870 ;; Auto vars:     Size  Location     Type
 26871 ;;  pitch           1    0[COMRAM] unsigned char 
 26872 ;;  temp_pitch      1   28[BANK0 ] unsigned char 
 26873 ;; Return value:  Size  Location     Type
 26874 ;;                  1    wreg      void 
 26875 ;; Registers used:
 26876 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26877 ;; Tracked objects:
 26878 ;;		On entry : 0/0
 26879 ;;		On exit  : 0/0
 26880 ;;		Unchanged: 0/0
 26881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 26882 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26883 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26884 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26885 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26886 ;;Total ram usage:        6 bytes
 26887 ;; Hardware stack levels used:    1
 26888 ;; Hardware stack levels required when called:   10
 26889 ;; This function calls:
 26890 ;;		_add_notes_to_arpeggio
 26891 ;;		_delete_notes_from_arpeggio
 26892 ;;		_finish_arpeggio_setup
 26893 ;;		_key_press_release_note_off
 26894 ;;		_noteOff
 26895 ;;		_noteOn
 26896 ;;		_wait_one_pulse
 26897 ;; This function is called by:
 26898 ;;		_keyboard_sharps_only_efficient
 26899 ;;		_doTheUnLatch
 26900 ;; This function uses a non-reentrant model
 26901 ;;
 26902                           
 26903                           	psect	text84
 26904  0053CE                     __ptext84:
 26905                           	opt stack 0
 26906  0053CE                     _playThisNotePentatonic:
 26907                           	opt stack 15
 26908                           
 26909                           ;keyboard.c: 35: if(ARPEGGIO_ON == 0){
 26910                           
 26911                           ; BSR set to: 0
 26912                           ;incstack = 0
 26913  0053CE  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 26914  0053D0  D054               	goto	l1341
 26915                           
 26916                           ;keyboard.c: 37: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 26917  0053D2  0E04               	movlw	4
 26918  0053D4  0100               	movlb	0	; () banked
 26919  0053D6  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26920  0053D8  A4D8               	btfss	status,2,c
 26921  0053DA  D025               	goto	l1338
 26922                           
 26923                           ; BSR set to: 0
 26924                           ;keyboard.c: 38: if(ON_OFF == 1) {noteOn(channel,pentatonic_major_key[index],velocity);}
 26925  0053DC  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26926  0053DE  D010               	goto	l1337
 26927                           
 26928                           ; BSR set to: 0
 26929  0053E0  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 26930  0053E2  0D01               	mullw	1
 26931  0053E4  0E92               	movlw	low _pentatonic_major_key
 26932  0053E6  24F3               	addwf	prodl,w,c
 26933  0053E8  6EF6               	movwf	tblptrl,c
 26934  0053EA  0EF3               	movlw	high _pentatonic_major_key
 26935  0053EC  20F4               	addwfc	prodh,w,c
 26936  0053EE  6EF7               	movwf	tblptrh,c
 26937  0053F0                     	if	0	;There are less than 3 active tblptr bytes
 26938  0053F0                     	endif
 26939  0053F0  0008               	tblrd		*
 26940  0053F2  CFF5 F06E          	movff	tablat,noteOn@pitch
 26941  0053F6  C0FD  F06F         	movff	_velocity,noteOn@velocity
 26942  0053FA  51F6               	movf	_channel& (0+255),w,b
 26943  0053FC  ECD6  F044         	call	_noteOn
 26944  005400                     l1337:
 26945                           
 26946                           ;keyboard.c: 39: if(ON_OFF == 0) {noteOff(channel,pentatonic_major_key[index],velocity);
      +                          }
 26947  005400  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26948  005402  D011               	goto	l1338
 26949  005404  0100               	movlb	0	; () banked
 26950  005406  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 26951  005408  0D01               	mullw	1
 26952  00540A  0E92               	movlw	low _pentatonic_major_key
 26953  00540C  24F3               	addwf	prodl,w,c
 26954  00540E  6EF6               	movwf	tblptrl,c
 26955  005410  0EF3               	movlw	high _pentatonic_major_key
 26956  005412  20F4               	addwfc	prodh,w,c
 26957  005414  6EF7               	movwf	tblptrh,c
 26958  005416                     	if	0	;There are less than 3 active tblptr bytes
 26959  005416                     	endif
 26960  005416  0008               	tblrd		*
 26961  005418  CFF5 F06B          	movff	tablat,noteOff@pitch
 26962  00541C  C0FD  F06C         	movff	_velocity,noteOff@velocity
 26963  005420  51F6               	movf	_channel& (0+255),w,b
 26964  005422  ECFD  F047         	call	_noteOff
 26965  005426                     l1338:
 26966                           
 26967                           ;keyboard.c: 40: }
 26968                           ;keyboard.c: 42: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 26969  005426  0E05               	movlw	5
 26970  005428  0100               	movlb	0	; () banked
 26971  00542A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26972  00542C  A4D8               	btfss	status,2,c
 26973  00542E  D025               	goto	l1341
 26974                           
 26975                           ; BSR set to: 0
 26976                           ;keyboard.c: 43: if(ON_OFF == 1) {noteOn(channel,pentatonic_minor_key[index],velocity);}
 26977  005430  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26978  005432  D010               	goto	l1340
 26979                           
 26980                           ; BSR set to: 0
 26981  005434  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 26982  005436  0D01               	mullw	1
 26983  005438  0E87               	movlw	low _pentatonic_minor_key
 26984  00543A  24F3               	addwf	prodl,w,c
 26985  00543C  6EF6               	movwf	tblptrl,c
 26986  00543E  0EF3               	movlw	high _pentatonic_minor_key
 26987  005440  20F4               	addwfc	prodh,w,c
 26988  005442  6EF7               	movwf	tblptrh,c
 26989  005444                     	if	0	;There are less than 3 active tblptr bytes
 26990  005444                     	endif
 26991  005444  0008               	tblrd		*
 26992  005446  CFF5 F06E          	movff	tablat,noteOn@pitch
 26993  00544A  C0FD  F06F         	movff	_velocity,noteOn@velocity
 26994  00544E  51F6               	movf	_channel& (0+255),w,b
 26995  005450  ECD6  F044         	call	_noteOn
 26996  005454                     l1340:
 26997                           
 26998                           ;keyboard.c: 44: if(ON_OFF == 0) {noteOff(channel,pentatonic_minor_key[index],velocity);
      +                          }
 26999  005454  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27000  005456  D011               	goto	l1341
 27001  005458  0100               	movlb	0	; () banked
 27002  00545A  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 27003  00545C  0D01               	mullw	1
 27004  00545E  0E87               	movlw	low _pentatonic_minor_key
 27005  005460  24F3               	addwf	prodl,w,c
 27006  005462  6EF6               	movwf	tblptrl,c
 27007  005464  0EF3               	movlw	high _pentatonic_minor_key
 27008  005466  20F4               	addwfc	prodh,w,c
 27009  005468  6EF7               	movwf	tblptrh,c
 27010  00546A                     	if	0	;There are less than 3 active tblptr bytes
 27011  00546A                     	endif
 27012  00546A  0008               	tblrd		*
 27013  00546C  CFF5 F06B          	movff	tablat,noteOff@pitch
 27014  005470  C0FD  F06C         	movff	_velocity,noteOff@velocity
 27015  005474  51F6               	movf	_channel& (0+255),w,b
 27016  005476  ECFD  F047         	call	_noteOff
 27017  00547A                     l1341:
 27018                           
 27019                           ;keyboard.c: 45: }
 27020                           ;keyboard.c: 46: }
 27021                           ;keyboard.c: 49: if(ARPEGGIO_ON == 1){
 27022  00547A  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27023  00547C  0012               	return	
 27024                           
 27025                           ;keyboard.c: 51: unsigned char temp_pitch;
 27026                           ;keyboard.c: 53: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 27027  00547E  0E04               	movlw	4
 27028  005480  0100               	movlb	0	; () banked
 27029  005482  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27030  005484  A4D8               	btfss	status,2,c
 27031  005486  D00B               	goto	l1343
 27032                           
 27033                           ; BSR set to: 0
 27034                           ;keyboard.c: 54: temp_pitch = pentatonic_major_key[index];
 27035  005488  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 27036  00548A  0D01               	mullw	1
 27037  00548C  0E92               	movlw	low _pentatonic_major_key
 27038  00548E  24F3               	addwf	prodl,w,c
 27039  005490  6EF6               	movwf	tblptrl,c
 27040  005492  0EF3               	movlw	high _pentatonic_major_key
 27041  005494  20F4               	addwfc	prodh,w,c
 27042  005496  6EF7               	movwf	tblptrh,c
 27043  005498                     	if	0	;There are less than 3 active tblptr bytes
 27044  005498                     	endif
 27045  005498  0008               	tblrd		*
 27046  00549A  CFF5 F07C          	movff	tablat,playThisNotePentatonic@temp_pitch
 27047  00549E                     l1343:
 27048                           
 27049                           ; BSR set to: 0
 27050                           ;keyboard.c: 55: }
 27051                           ;keyboard.c: 57: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 27052                           
 27053                           ; BSR set to: 0
 27054  00549E  0E05               	movlw	5
 27055  0054A0  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27056  0054A2  A4D8               	btfss	status,2,c
 27057  0054A4  D00B               	goto	l1344
 27058                           
 27059                           ; BSR set to: 0
 27060                           ;keyboard.c: 58: temp_pitch = pentatonic_minor_key[index];
 27061  0054A6  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 27062  0054A8  0D01               	mullw	1
 27063  0054AA  0E87               	movlw	low _pentatonic_minor_key
 27064  0054AC  24F3               	addwf	prodl,w,c
 27065  0054AE  6EF6               	movwf	tblptrl,c
 27066  0054B0  0EF3               	movlw	high _pentatonic_minor_key
 27067  0054B2  20F4               	addwfc	prodh,w,c
 27068  0054B4  6EF7               	movwf	tblptrh,c
 27069  0054B6                     	if	0	;There are less than 3 active tblptr bytes
 27070  0054B6                     	endif
 27071  0054B6  0008               	tblrd		*
 27072  0054B8  CFF5 F07C          	movff	tablat,playThisNotePentatonic@temp_pitch
 27073  0054BC                     l1344:
 27074                           
 27075                           ; BSR set to: 0
 27076                           ;keyboard.c: 59: }
 27077                           ;keyboard.c: 61: if(ON_OFF == 1) {
 27078                           
 27079                           ; BSR set to: 0
 27080  0054BC  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27081  0054BE  D019               	goto	l1345
 27082                           
 27083                           ; BSR set to: 0
 27084                           ;keyboard.c: 64: TMR0ON = 0;
 27085  0054C0  9ED5               	bcf	4053,7,c	;volatile
 27086                           
 27087                           ;keyboard.c: 66: parallel = temp_pitch;
 27088  0054C2  C07C  F0E6         	movff	playThisNotePentatonic@temp_pitch,_parallel
 27089                           
 27090                           ; BSR set to: 0
 27091                           ;keyboard.c: 69: if(NUM_NOTES_PRESSED > 0){
 27092  0054C6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 27093  0054C8  B4D8               	btfsc	status,2,c
 27094  0054CA  D00A               	goto	l1346
 27095                           
 27096                           ; BSR set to: 0
 27097                           ;keyboard.c: 70: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 27098  0054CC  0E00               	movlw	0
 27099  0054CE  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 27100  0054D0  0E01               	movlw	1
 27101  0054D2  EC00  F04A         	call	_wait_one_pulse
 27102                           
 27103                           ;keyboard.c: 71: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27104  0054D6  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27105  0054D8  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 27106                           
 27107                           ;keyboard.c: 72: TIMER_OVERFLOWS = 0;
 27108  0054DC  0E00               	movlw	0
 27109  0054DE  6E54               	movwf	_TIMER_OVERFLOWS,c
 27110  0054E0                     l1346:
 27111                           
 27112                           ;keyboard.c: 73: }
 27113                           ;keyboard.c: 75: add_notes_to_arpeggio(temp_pitch);
 27114  0054E0  0100               	movlb	0	; () banked
 27115  0054E2  517C               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 27116  0054E4  EC8F  F032         	call	_add_notes_to_arpeggio
 27117                           
 27118                           ;keyboard.c: 87: if(LATCH == 0) {latch_was_pressed = 0;}
 27119  0054E8  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 27120  0054EA  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27121                           
 27122                           ;keyboard.c: 90: finish_arpeggio_setup();
 27123  0054EC  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 27124                           
 27125                           ;keyboard.c: 93: TMR0ON = 1;
 27126  0054F0  8ED5               	bsf	4053,7,c	;volatile
 27127  0054F2                     l1345:
 27128                           
 27129                           ;keyboard.c: 94: }
 27130                           ;keyboard.c: 96: if((ON_OFF == 0) && (LATCH == 0)) {
 27131  0054F2  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27132  0054F4  0012               	return	
 27133  0054F6  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 27134  0054F8  0012               	return	
 27135                           
 27136                           ;keyboard.c: 99: TMR0ON = 0;
 27137  0054FA  9ED5               	bcf	4053,7,c	;volatile
 27138                           
 27139                           ;keyboard.c: 102: if(NUM_NOTES_PRESSED > 0){
 27140  0054FC  0100               	movlb	0	; () banked
 27141  0054FE  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 27142  005500  B4D8               	btfsc	status,2,c
 27143  005502  D00A               	goto	l1350
 27144                           
 27145                           ; BSR set to: 0
 27146                           ;keyboard.c: 103: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 27147  005504  0E00               	movlw	0
 27148  005506  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 27149  005508  0E01               	movlw	1
 27150  00550A  EC00  F04A         	call	_wait_one_pulse
 27151                           
 27152                           ;keyboard.c: 104: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27153  00550E  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27154  005510  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 27155                           
 27156                           ;keyboard.c: 105: TIMER_OVERFLOWS = 0;
 27157  005514  0E00               	movlw	0
 27158  005516  6E54               	movwf	_TIMER_OVERFLOWS,c
 27159  005518                     l1350:
 27160                           
 27161                           ;keyboard.c: 106: }
 27162                           ;keyboard.c: 108: delete_notes_from_arpeggio(temp_pitch);
 27163  005518  0100               	movlb	0	; () banked
 27164  00551A  517C               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 27165  00551C  EC74  F049         	call	_delete_notes_from_arpeggio
 27166                           
 27167                           ;keyboard.c: 118: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 27168  005520  C0E6  F078         	movff	_parallel,??_playThisNotePentatonic
 27169  005524  0100               	movlb	0	; () banked
 27170  005526  6B79               	clrf	(??_playThisNotePentatonic+1)& (0+255),b
 27171  005528  BF78               	btfsc	??_playThisNotePentatonic& (0+255),7,b
 27172  00552A  0779               	decf	(??_playThisNotePentatonic+1)& (0+255),f,b
 27173  00552C  517C               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 27174  00552E  6F7A               	movwf	(??_playThisNotePentatonic+2)& (0+255),b
 27175  005530  6B7B               	clrf	(??_playThisNotePentatonic+3)& (0+255),b
 27176  005532  5178               	movf	??_playThisNotePentatonic& (0+255),w,b
 27177  005534  197A               	xorwf	(??_playThisNotePentatonic+2)& (0+255),w,b
 27178  005536  E106               	bnz	l17181
 27179  005538  5179               	movf	(??_playThisNotePentatonic+1)& (0+255),w,b
 27180  00553A  197B               	xorwf	(??_playThisNotePentatonic+3)& (0+255),w,b
 27181  00553C  A4D8               	btfss	status,2,c
 27182  00553E  D002               	goto	l1352
 27183                           
 27184                           ; BSR set to: 0
 27185  005540  0E00               	movlw	0
 27186  005542  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 27187  005544                     l1352:
 27188  005544                     l17181:
 27189                           
 27190                           ; BSR set to: 0
 27191                           ;keyboard.c: 121: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 27192  005544  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 27193                           
 27194                           ; BSR set to: 0
 27195  005546  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27196  005548  D001               	goto	l1353
 27197                           
 27198                           ; BSR set to: 0
 27199                           ;keyboard.c: 122: LATCH = 1;
 27200  00554A  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 27201  00554C                     l1353:
 27202                           
 27203                           ; BSR set to: 0
 27204                           ;keyboard.c: 123: }
 27205                           ;keyboard.c: 126: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 27206  00554C  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27207                           
 27208                           ; BSR set to: 0
 27209  00554E  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27210  005550  D004               	goto	l1354
 27211                           
 27212                           ; BSR set to: 0
 27213                           ;keyboard.c: 127: NUM_NOTES_PRESSED = 0;
 27214  005552  0E00               	movlw	0
 27215  005554  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 27216                           
 27217                           ;keyboard.c: 128: ARRAY_INDEX = 0;
 27218  005556  0E00               	movlw	0
 27219  005558  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 27220  00555A                     l1354:
 27221                           
 27222                           ; BSR set to: 0
 27223                           ;keyboard.c: 129: }
 27224                           ;keyboard.c: 132: finish_arpeggio_setup();
 27225                           
 27226                           ; BSR set to: 0
 27227  00555A  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 27228                           
 27229                           ;keyboard.c: 135: TMR0ON = 1;
 27230  00555E  8ED5               	bsf	4053,7,c	;volatile
 27231  005560  0012               	return	
 27232  005562                     __end_of_playThisNotePentatonic:
 27233                           	opt stack 0
 27234                           tblptru	equ	0xFF8
 27235                           tblptrh	equ	0xFF7
 27236                           tblptrl	equ	0xFF6
 27237                           tablat	equ	0xFF5
 27238                           prodh	equ	0xFF4
 27239                           prodl	equ	0xFF3
 27240                           intcon	equ	0xFF2
 27241                           intcon2	equ	0xFF1
 27242                           postinc0	equ	0xFEE
 27243                           wreg	equ	0xFE8
 27244                           indf1	equ	0xFE7
 27245                           postdec1	equ	0xFE5
 27246                           fsr1h	equ	0xFE2
 27247                           fsr1l	equ	0xFE1
 27248                           indf2	equ	0xFDF
 27249                           postinc2	equ	0xFDE
 27250                           plusw2	equ	0xFDB
 27251                           fsr2h	equ	0xFDA
 27252                           fsr2l	equ	0xFD9
 27253                           status	equ	0xFD8
 27254                           
 27255 ;; *************** function _keyboard_eight_note_efficient *****************
 27256 ;; Defined at:
 27257 ;;		line 1354 in file "keyboard.c"
 27258 ;; Parameters:    Size  Location     Type
 27259 ;;		None
 27260 ;; Auto vars:     Size  Location     Type
 27261 ;;  index           1   41[BANK0 ] unsigned char 
 27262 ;;  pitch           1   40[BANK0 ] unsigned char 
 27263 ;; Return value:  Size  Location     Type
 27264 ;;                  1    wreg      void 
 27265 ;; Registers used:
 27266 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27267 ;; Tracked objects:
 27268 ;;		On entry : 0/0
 27269 ;;		On exit  : 0/0
 27270 ;;		Unchanged: 0/0
 27271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27273 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27275 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27276 ;;Total ram usage:        2 bytes
 27277 ;; Hardware stack levels used:    1
 27278 ;; Hardware stack levels required when called:   12
 27279 ;; This function calls:
 27280 ;;		_playThisNote8
 27281 ;; This function is called by:
 27282 ;;		_processKeyboard
 27283 ;; This function uses a non-reentrant model
 27284 ;;
 27285                           
 27286                           	psect	text85
 27287  002A9A                     __ptext85:
 27288                           	opt stack 0
 27289  002A9A                     _keyboard_eight_note_efficient:
 27290                           	opt stack 16
 27291                           
 27292                           ;keyboard.c: 1356: unsigned char pitch;
 27293                           ;keyboard.c: 1357: unsigned char index;
 27294                           ;keyboard.c: 1360: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW1){
 27295                           
 27296                           ;incstack = 0
 27297  002A9A  0100               	movlb	0	; () banked
 27298  002A9C  B1D8               	btfsc	_button_state_now& (0+255),0,b
 27299                           
 27300                           ; BSR set to: 0
 27301  002A9E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27302  002AA0  D00E               	goto	l1679
 27303                           
 27304                           ; BSR set to: 0
 27305  002AA2  B1D0               	btfsc	_keyboard& (0+255),0,b
 27306  002AA4  D00C               	goto	l1679
 27307                           
 27308                           ; BSR set to: 0
 27309                           ;keyboard.c: 1361: pitch = C;
 27310  002AA6  0E00               	movlw	0
 27311  002AA8  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27312                           
 27313                           ;keyboard.c: 1362: index = 0;
 27314  002AAA  0E00               	movlw	0
 27315  002AAC  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27316                           
 27317                           ; BSR set to: 0
 27318                           ;keyboard.c: 1363: ON_OFF = 1;
 27319  002AAE  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27320                           
 27321                           ; BSR set to: 0
 27322                           ;keyboard.c: 1364: playThisNote8(pitch, index);
 27323  002AB0  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27324  002AB4  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27325  002AB6  EC3A  F013         	call	_playThisNote8
 27326                           
 27327                           ;keyboard.c: 1365: keyboard.SW1 = 1;
 27328  002ABA  0100               	movlb	0	; () banked
 27329  002ABC  81D0               	bsf	_keyboard& (0+255),0,b
 27330  002ABE                     l1679:
 27331                           
 27332                           ; BSR set to: 0
 27333                           ;keyboard.c: 1366: }
 27334                           ;keyboard.c: 1367: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW3){
 27335                           
 27336                           ; BSR set to: 0
 27337  002ABE  B5D8               	btfsc	_button_state_now& (0+255),2,b
 27338                           
 27339                           ; BSR set to: 0
 27340  002AC0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27341  002AC2  D00E               	goto	l1680
 27342                           
 27343                           ; BSR set to: 0
 27344  002AC4  B5D0               	btfsc	_keyboard& (0+255),2,b
 27345  002AC6  D00C               	goto	l1680
 27346                           
 27347                           ; BSR set to: 0
 27348                           ;keyboard.c: 1368: pitch = D;
 27349  002AC8  0E02               	movlw	2
 27350  002ACA  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27351                           
 27352                           ;keyboard.c: 1369: index = 1;
 27353  002ACC  0E01               	movlw	1
 27354  002ACE  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27355                           
 27356                           ; BSR set to: 0
 27357                           ;keyboard.c: 1370: ON_OFF = 1;
 27358  002AD0  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27359                           
 27360                           ; BSR set to: 0
 27361                           ;keyboard.c: 1371: playThisNote8(pitch, index);
 27362  002AD2  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27363  002AD6  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27364  002AD8  EC3A  F013         	call	_playThisNote8
 27365                           
 27366                           ;keyboard.c: 1372: keyboard.SW3 = 1;
 27367  002ADC  0100               	movlb	0	; () banked
 27368  002ADE  85D0               	bsf	_keyboard& (0+255),2,b
 27369  002AE0                     l1680:
 27370                           
 27371                           ; BSR set to: 0
 27372                           ;keyboard.c: 1373: }
 27373                           ;keyboard.c: 1374: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW5){
 27374                           
 27375                           ; BSR set to: 0
 27376  002AE0  B9D8               	btfsc	_button_state_now& (0+255),4,b
 27377                           
 27378                           ; BSR set to: 0
 27379  002AE2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27380  002AE4  D00E               	goto	l1681
 27381                           
 27382                           ; BSR set to: 0
 27383  002AE6  B9D0               	btfsc	_keyboard& (0+255),4,b
 27384  002AE8  D00C               	goto	l1681
 27385                           
 27386                           ; BSR set to: 0
 27387                           ;keyboard.c: 1375: pitch = E;
 27388  002AEA  0E04               	movlw	4
 27389  002AEC  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27390                           
 27391                           ;keyboard.c: 1376: index = 2;
 27392  002AEE  0E02               	movlw	2
 27393  002AF0  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27394                           
 27395                           ; BSR set to: 0
 27396                           ;keyboard.c: 1377: ON_OFF = 1;
 27397  002AF2  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27398                           
 27399                           ; BSR set to: 0
 27400                           ;keyboard.c: 1378: playThisNote8(pitch, index);
 27401  002AF4  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27402  002AF8  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27403  002AFA  EC3A  F013         	call	_playThisNote8
 27404                           
 27405                           ;keyboard.c: 1379: keyboard.SW5 = 5;
 27406  002AFE  0100               	movlb	0	; () banked
 27407  002B00  89D0               	bsf	_keyboard& (0+255),4,b
 27408  002B02                     l1681:
 27409                           
 27410                           ; BSR set to: 0
 27411                           ;keyboard.c: 1380: }
 27412                           ;keyboard.c: 1381: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW6){
 27413                           
 27414                           ; BSR set to: 0
 27415  002B02  BBD8               	btfsc	_button_state_now& (0+255),5,b
 27416                           
 27417                           ; BSR set to: 0
 27418  002B04  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27419  002B06  D00E               	goto	l1682
 27420                           
 27421                           ; BSR set to: 0
 27422  002B08  BBD0               	btfsc	_keyboard& (0+255),5,b
 27423  002B0A  D00C               	goto	l1682
 27424                           
 27425                           ; BSR set to: 0
 27426                           ;keyboard.c: 1382: pitch = F;
 27427  002B0C  0E05               	movlw	5
 27428  002B0E  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27429                           
 27430                           ;keyboard.c: 1383: index = 3;
 27431  002B10  0E03               	movlw	3
 27432  002B12  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27433                           
 27434                           ; BSR set to: 0
 27435                           ;keyboard.c: 1384: ON_OFF = 1;
 27436  002B14  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27437                           
 27438                           ; BSR set to: 0
 27439                           ;keyboard.c: 1385: playThisNote8(pitch, index);
 27440  002B16  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27441  002B1A  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27442  002B1C  EC3A  F013         	call	_playThisNote8
 27443                           
 27444                           ;keyboard.c: 1386: keyboard.SW6 = 1;
 27445  002B20  0100               	movlb	0	; () banked
 27446  002B22  8BD0               	bsf	_keyboard& (0+255),5,b
 27447  002B24                     l1682:
 27448                           
 27449                           ; BSR set to: 0
 27450                           ;keyboard.c: 1387: }
 27451                           ;keyboard.c: 1388: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW8){
 27452                           
 27453                           ; BSR set to: 0
 27454  002B24  BFD8               	btfsc	_button_state_now& (0+255),7,b
 27455                           
 27456                           ; BSR set to: 0
 27457  002B26  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27458  002B28  D00E               	goto	l1683
 27459                           
 27460                           ; BSR set to: 0
 27461  002B2A  BFD0               	btfsc	_keyboard& (0+255),7,b
 27462  002B2C  D00C               	goto	l1683
 27463                           
 27464                           ; BSR set to: 0
 27465                           ;keyboard.c: 1389: pitch = G;
 27466  002B2E  0E07               	movlw	7
 27467  002B30  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27468                           
 27469                           ;keyboard.c: 1390: index = 4;
 27470  002B32  0E04               	movlw	4
 27471  002B34  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27472                           
 27473                           ; BSR set to: 0
 27474                           ;keyboard.c: 1391: ON_OFF = 1;
 27475  002B36  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27476                           
 27477                           ; BSR set to: 0
 27478                           ;keyboard.c: 1392: playThisNote8(pitch, index);
 27479  002B38  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27480  002B3C  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27481  002B3E  EC3A  F013         	call	_playThisNote8
 27482                           
 27483                           ;keyboard.c: 1393: keyboard.SW8 = 1;
 27484  002B42  0100               	movlb	0	; () banked
 27485  002B44  8FD0               	bsf	_keyboard& (0+255),7,b
 27486  002B46                     l1683:
 27487                           
 27488                           ; BSR set to: 0
 27489                           ;keyboard.c: 1394: }
 27490                           ;keyboard.c: 1395: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW10){
 27491                           
 27492                           ; BSR set to: 0
 27493  002B46  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 27494                           
 27495                           ; BSR set to: 0
 27496  002B48  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27497  002B4A  D00E               	goto	l1684
 27498                           
 27499                           ; BSR set to: 0
 27500  002B4C  B3D1               	btfsc	(_keyboard+1)& (0+255),1,b
 27501  002B4E  D00C               	goto	l1684
 27502                           
 27503                           ; BSR set to: 0
 27504                           ;keyboard.c: 1396: pitch = A;
 27505  002B50  0E09               	movlw	9
 27506  002B52  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27507                           
 27508                           ;keyboard.c: 1397: index = 5;
 27509  002B54  0E05               	movlw	5
 27510  002B56  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27511                           
 27512                           ; BSR set to: 0
 27513                           ;keyboard.c: 1398: ON_OFF = 1;
 27514  002B58  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27515                           
 27516                           ; BSR set to: 0
 27517                           ;keyboard.c: 1399: playThisNote8(pitch, index);
 27518  002B5A  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27519  002B5E  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27520  002B60  EC3A  F013         	call	_playThisNote8
 27521                           
 27522                           ;keyboard.c: 1400: keyboard.SW10 = 1;
 27523  002B64  0100               	movlb	0	; () banked
 27524  002B66  83D1               	bsf	(_keyboard+1)& (0+255),1,b
 27525  002B68                     l1684:
 27526                           
 27527                           ; BSR set to: 0
 27528                           ;keyboard.c: 1401: }
 27529                           ;keyboard.c: 1402: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW12){
 27530                           
 27531                           ; BSR set to: 0
 27532  002B68  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 27533                           
 27534                           ; BSR set to: 0
 27535  002B6A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27536  002B6C  D00E               	goto	l1685
 27537                           
 27538                           ; BSR set to: 0
 27539  002B6E  B7D1               	btfsc	(_keyboard+1)& (0+255),3,b
 27540  002B70  D00C               	goto	l1685
 27541                           
 27542                           ; BSR set to: 0
 27543                           ;keyboard.c: 1403: pitch = B;
 27544  002B72  0E0B               	movlw	11
 27545  002B74  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27546                           
 27547                           ;keyboard.c: 1404: index = 6;
 27548  002B76  0E06               	movlw	6
 27549  002B78  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27550                           
 27551                           ; BSR set to: 0
 27552                           ;keyboard.c: 1405: ON_OFF = 1;
 27553  002B7A  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27554                           
 27555                           ; BSR set to: 0
 27556                           ;keyboard.c: 1406: playThisNote8(pitch, index);
 27557  002B7C  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27558  002B80  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27559  002B82  EC3A  F013         	call	_playThisNote8
 27560                           
 27561                           ;keyboard.c: 1407: keyboard.SW12 = 1;
 27562  002B86  0100               	movlb	0	; () banked
 27563  002B88  87D1               	bsf	(_keyboard+1)& (0+255),3,b
 27564  002B8A                     l1685:
 27565                           
 27566                           ; BSR set to: 0
 27567                           ;keyboard.c: 1408: }
 27568                           ;keyboard.c: 1409: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW13){
 27569                           
 27570                           ; BSR set to: 0
 27571  002B8A  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 27572                           
 27573                           ; BSR set to: 0
 27574  002B8C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27575  002B8E  D00E               	goto	l1686
 27576                           
 27577                           ; BSR set to: 0
 27578  002B90  B9D1               	btfsc	(_keyboard+1)& (0+255),4,b
 27579  002B92  D00C               	goto	l1686
 27580                           
 27581                           ; BSR set to: 0
 27582                           ;keyboard.c: 1410: pitch = C2;
 27583  002B94  0E0C               	movlw	12
 27584  002B96  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27585                           
 27586                           ;keyboard.c: 1411: index = 7;
 27587  002B98  0E07               	movlw	7
 27588  002B9A  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27589                           
 27590                           ; BSR set to: 0
 27591                           ;keyboard.c: 1412: ON_OFF = 1;
 27592  002B9C  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27593                           
 27594                           ; BSR set to: 0
 27595                           ;keyboard.c: 1413: playThisNote8(pitch, index);
 27596  002B9E  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27597  002BA2  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27598  002BA4  EC3A  F013         	call	_playThisNote8
 27599                           
 27600                           ;keyboard.c: 1414: keyboard.SW13 = 1;
 27601  002BA8  0100               	movlb	0	; () banked
 27602  002BAA  89D1               	bsf	(_keyboard+1)& (0+255),4,b
 27603  002BAC                     l1686:
 27604                           
 27605                           ; BSR set to: 0
 27606                           ;keyboard.c: 1415: }
 27607                           ;keyboard.c: 1416: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW15){
 27608                           
 27609                           ; BSR set to: 0
 27610  002BAC  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 27611                           
 27612                           ; BSR set to: 0
 27613  002BAE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27614  002BB0  D00E               	goto	l1687
 27615                           
 27616                           ; BSR set to: 0
 27617  002BB2  BDD1               	btfsc	(_keyboard+1)& (0+255),6,b
 27618  002BB4  D00C               	goto	l1687
 27619                           
 27620                           ; BSR set to: 0
 27621                           ;keyboard.c: 1417: pitch = D2;
 27622  002BB6  0E0E               	movlw	14
 27623  002BB8  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27624                           
 27625                           ;keyboard.c: 1418: index = 8;
 27626  002BBA  0E08               	movlw	8
 27627  002BBC  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27628                           
 27629                           ; BSR set to: 0
 27630                           ;keyboard.c: 1419: ON_OFF = 1;
 27631  002BBE  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27632                           
 27633                           ; BSR set to: 0
 27634                           ;keyboard.c: 1420: playThisNote8(pitch, index);
 27635  002BC0  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27636  002BC4  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27637  002BC6  EC3A  F013         	call	_playThisNote8
 27638                           
 27639                           ;keyboard.c: 1421: keyboard.SW15 = 1;
 27640  002BCA  0100               	movlb	0	; () banked
 27641  002BCC  8DD1               	bsf	(_keyboard+1)& (0+255),6,b
 27642  002BCE                     l1687:
 27643                           
 27644                           ; BSR set to: 0
 27645                           ;keyboard.c: 1422: }
 27646                           ;keyboard.c: 1423: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW17){
 27647                           
 27648                           ; BSR set to: 0
 27649  002BCE  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 27650                           
 27651                           ; BSR set to: 0
 27652  002BD0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27653  002BD2  D00E               	goto	l1688
 27654                           
 27655                           ; BSR set to: 0
 27656  002BD4  B1D2               	btfsc	(_keyboard+2)& (0+255),0,b
 27657  002BD6  D00C               	goto	l1688
 27658                           
 27659                           ; BSR set to: 0
 27660                           ;keyboard.c: 1424: pitch = E2;
 27661  002BD8  0E10               	movlw	16
 27662  002BDA  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27663                           
 27664                           ;keyboard.c: 1425: index = 9;
 27665  002BDC  0E09               	movlw	9
 27666  002BDE  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27667                           
 27668                           ; BSR set to: 0
 27669                           ;keyboard.c: 1426: ON_OFF = 1;
 27670  002BE0  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27671                           
 27672                           ; BSR set to: 0
 27673                           ;keyboard.c: 1427: playThisNote8(pitch, index);
 27674  002BE2  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27675  002BE6  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27676  002BE8  EC3A  F013         	call	_playThisNote8
 27677                           
 27678                           ;keyboard.c: 1428: keyboard.SW17 = 1;
 27679  002BEC  0100               	movlb	0	; () banked
 27680  002BEE  81D2               	bsf	(_keyboard+2)& (0+255),0,b
 27681  002BF0                     l1688:
 27682                           
 27683                           ; BSR set to: 0
 27684                           ;keyboard.c: 1429: }
 27685                           ;keyboard.c: 1430: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW18){
 27686                           
 27687                           ; BSR set to: 0
 27688  002BF0  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 27689                           
 27690                           ; BSR set to: 0
 27691  002BF2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27692  002BF4  D00E               	goto	l1689
 27693                           
 27694                           ; BSR set to: 0
 27695  002BF6  B3D2               	btfsc	(_keyboard+2)& (0+255),1,b
 27696  002BF8  D00C               	goto	l1689
 27697                           
 27698                           ; BSR set to: 0
 27699                           ;keyboard.c: 1431: pitch = F2;
 27700  002BFA  0E11               	movlw	17
 27701  002BFC  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27702                           
 27703                           ;keyboard.c: 1432: index = 10;
 27704  002BFE  0E0A               	movlw	10
 27705  002C00  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27706                           
 27707                           ; BSR set to: 0
 27708                           ;keyboard.c: 1433: ON_OFF = 1;
 27709  002C02  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27710                           
 27711                           ; BSR set to: 0
 27712                           ;keyboard.c: 1434: playThisNote8(pitch, index);
 27713  002C04  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27714  002C08  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27715  002C0A  EC3A  F013         	call	_playThisNote8
 27716                           
 27717                           ;keyboard.c: 1435: keyboard.SW18 = 1;
 27718  002C0E  0100               	movlb	0	; () banked
 27719  002C10  83D2               	bsf	(_keyboard+2)& (0+255),1,b
 27720  002C12                     l1689:
 27721                           
 27722                           ; BSR set to: 0
 27723                           ;keyboard.c: 1436: }
 27724                           ;keyboard.c: 1437: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW20){
 27725                           
 27726                           ; BSR set to: 0
 27727  002C12  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 27728                           
 27729                           ; BSR set to: 0
 27730  002C14  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27731  002C16  D00E               	goto	l1690
 27732                           
 27733                           ; BSR set to: 0
 27734  002C18  B7D2               	btfsc	(_keyboard+2)& (0+255),3,b
 27735  002C1A  D00C               	goto	l1690
 27736                           
 27737                           ; BSR set to: 0
 27738                           ;keyboard.c: 1438: pitch = G2;
 27739  002C1C  0E13               	movlw	19
 27740  002C1E  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27741                           
 27742                           ;keyboard.c: 1439: index = 11;
 27743  002C20  0E0B               	movlw	11
 27744  002C22  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27745                           
 27746                           ; BSR set to: 0
 27747                           ;keyboard.c: 1440: ON_OFF = 1;
 27748  002C24  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27749                           
 27750                           ; BSR set to: 0
 27751                           ;keyboard.c: 1441: playThisNote8(pitch, index);
 27752  002C26  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27753  002C2A  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27754  002C2C  EC3A  F013         	call	_playThisNote8
 27755                           
 27756                           ;keyboard.c: 1442: keyboard.SW20 = 1;
 27757  002C30  0100               	movlb	0	; () banked
 27758  002C32  87D2               	bsf	(_keyboard+2)& (0+255),3,b
 27759  002C34                     l1690:
 27760                           
 27761                           ; BSR set to: 0
 27762                           ;keyboard.c: 1443: }
 27763                           ;keyboard.c: 1444: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW22){
 27764                           
 27765                           ; BSR set to: 0
 27766  002C34  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 27767                           
 27768                           ; BSR set to: 0
 27769  002C36  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27770  002C38  D00E               	goto	l1691
 27771                           
 27772                           ; BSR set to: 0
 27773  002C3A  BBD2               	btfsc	(_keyboard+2)& (0+255),5,b
 27774  002C3C  D00C               	goto	l1691
 27775                           
 27776                           ; BSR set to: 0
 27777                           ;keyboard.c: 1445: pitch = A2;
 27778  002C3E  0E15               	movlw	21
 27779  002C40  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27780                           
 27781                           ;keyboard.c: 1446: index = 12;
 27782  002C42  0E0C               	movlw	12
 27783  002C44  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27784                           
 27785                           ; BSR set to: 0
 27786                           ;keyboard.c: 1447: ON_OFF = 1;
 27787  002C46  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27788                           
 27789                           ; BSR set to: 0
 27790                           ;keyboard.c: 1448: playThisNote8(pitch, index);
 27791  002C48  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27792  002C4C  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27793  002C4E  EC3A  F013         	call	_playThisNote8
 27794                           
 27795                           ;keyboard.c: 1449: keyboard.SW22 = 1;
 27796  002C52  0100               	movlb	0	; () banked
 27797  002C54  8BD2               	bsf	(_keyboard+2)& (0+255),5,b
 27798  002C56                     l1691:
 27799                           
 27800                           ; BSR set to: 0
 27801                           ;keyboard.c: 1450: }
 27802                           ;keyboard.c: 1451: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW24){
 27803                           
 27804                           ; BSR set to: 0
 27805  002C56  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 27806                           
 27807                           ; BSR set to: 0
 27808  002C58  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27809  002C5A  D00E               	goto	l1692
 27810                           
 27811                           ; BSR set to: 0
 27812  002C5C  BFD2               	btfsc	(_keyboard+2)& (0+255),7,b
 27813  002C5E  D00C               	goto	l1692
 27814                           
 27815                           ; BSR set to: 0
 27816                           ;keyboard.c: 1452: pitch = B2;
 27817  002C60  0E17               	movlw	23
 27818  002C62  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27819                           
 27820                           ;keyboard.c: 1453: index = 13;
 27821  002C64  0E0D               	movlw	13
 27822  002C66  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27823                           
 27824                           ; BSR set to: 0
 27825                           ;keyboard.c: 1454: ON_OFF = 1;
 27826  002C68  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27827                           
 27828                           ; BSR set to: 0
 27829                           ;keyboard.c: 1455: playThisNote8(pitch, index);
 27830  002C6A  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27831  002C6E  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27832  002C70  EC3A  F013         	call	_playThisNote8
 27833                           
 27834                           ;keyboard.c: 1456: keyboard.SW24 = 1;
 27835  002C74  0100               	movlb	0	; () banked
 27836  002C76  8FD2               	bsf	(_keyboard+2)& (0+255),7,b
 27837  002C78                     l1692:
 27838                           
 27839                           ; BSR set to: 0
 27840                           ;keyboard.c: 1457: }
 27841                           ;keyboard.c: 1458: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW25){
 27842                           
 27843                           ; BSR set to: 0
 27844  002C78  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 27845                           
 27846                           ; BSR set to: 0
 27847  002C7A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27848  002C7C  D00E               	goto	l1693
 27849                           
 27850                           ; BSR set to: 0
 27851  002C7E  B1D3               	btfsc	(_keyboard+3)& (0+255),0,b
 27852  002C80  D00C               	goto	l1693
 27853                           
 27854                           ; BSR set to: 0
 27855                           ;keyboard.c: 1459: pitch = C3;
 27856  002C82  0E18               	movlw	24
 27857  002C84  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27858                           
 27859                           ;keyboard.c: 1460: index = 14;
 27860  002C86  0E0E               	movlw	14
 27861  002C88  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27862                           
 27863                           ; BSR set to: 0
 27864                           ;keyboard.c: 1461: ON_OFF = 1;
 27865  002C8A  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27866                           
 27867                           ; BSR set to: 0
 27868                           ;keyboard.c: 1462: playThisNote8(pitch, index);
 27869  002C8C  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27870  002C90  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27871  002C92  EC3A  F013         	call	_playThisNote8
 27872                           
 27873                           ;keyboard.c: 1463: keyboard.SW25 = 1;
 27874  002C96  0100               	movlb	0	; () banked
 27875  002C98  81D3               	bsf	(_keyboard+3)& (0+255),0,b
 27876  002C9A                     l1693:
 27877                           
 27878                           ; BSR set to: 0
 27879                           ;keyboard.c: 1464: }
 27880                           ;keyboard.c: 1467: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x00000
      +                          001) == 0) && keyboard.SW1) {
 27881                           
 27882                           ; BSR set to: 0
 27883  002C9A  B1D4               	btfsc	_button_state_last& (0+255),0,b
 27884                           
 27885                           ; BSR set to: 0
 27886  002C9C  B1D8               	btfsc	_button_state_now& (0+255),0,b
 27887  002C9E  D00E               	goto	l1694
 27888                           
 27889                           ; BSR set to: 0
 27890  002CA0  A1D0               	btfss	_keyboard& (0+255),0,b
 27891  002CA2  D00C               	goto	l1694
 27892                           
 27893                           ; BSR set to: 0
 27894                           ;keyboard.c: 1468: pitch = C;
 27895  002CA4  0E00               	movlw	0
 27896  002CA6  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27897                           
 27898                           ;keyboard.c: 1469: index = 0;
 27899  002CA8  0E00               	movlw	0
 27900  002CAA  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27901                           
 27902                           ; BSR set to: 0
 27903                           ;keyboard.c: 1470: ON_OFF = 0;
 27904  002CAC  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27905                           
 27906                           ; BSR set to: 0
 27907                           ;keyboard.c: 1471: playThisNote8(pitch, index);
 27908  002CAE  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27909  002CB2  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27910  002CB4  EC3A  F013         	call	_playThisNote8
 27911                           
 27912                           ;keyboard.c: 1472: keyboard.SW1 = 0;
 27913  002CB8  0100               	movlb	0	; () banked
 27914  002CBA  91D0               	bcf	_keyboard& (0+255),0,b
 27915  002CBC                     l1694:
 27916                           
 27917                           ; BSR set to: 0
 27918                           ;keyboard.c: 1473: }
 27919                           ;keyboard.c: 1474: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x00000
      +                          004) == 0) && keyboard.SW3) {
 27920                           
 27921                           ; BSR set to: 0
 27922  002CBC  B5D4               	btfsc	_button_state_last& (0+255),2,b
 27923                           
 27924                           ; BSR set to: 0
 27925  002CBE  B5D8               	btfsc	_button_state_now& (0+255),2,b
 27926  002CC0  D00E               	goto	l1695
 27927                           
 27928                           ; BSR set to: 0
 27929  002CC2  A5D0               	btfss	_keyboard& (0+255),2,b
 27930  002CC4  D00C               	goto	l1695
 27931                           
 27932                           ; BSR set to: 0
 27933                           ;keyboard.c: 1475: pitch = D;
 27934  002CC6  0E02               	movlw	2
 27935  002CC8  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27936                           
 27937                           ;keyboard.c: 1476: index = 1;
 27938  002CCA  0E01               	movlw	1
 27939  002CCC  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27940                           
 27941                           ; BSR set to: 0
 27942                           ;keyboard.c: 1477: ON_OFF = 0;
 27943  002CCE  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27944                           
 27945                           ; BSR set to: 0
 27946                           ;keyboard.c: 1478: playThisNote8(pitch, index);
 27947  002CD0  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27948  002CD4  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27949  002CD6  EC3A  F013         	call	_playThisNote8
 27950                           
 27951                           ;keyboard.c: 1479: keyboard.SW3 = 0;
 27952  002CDA  0100               	movlb	0	; () banked
 27953  002CDC  95D0               	bcf	_keyboard& (0+255),2,b
 27954  002CDE                     l1695:
 27955                           
 27956                           ; BSR set to: 0
 27957                           ;keyboard.c: 1480: }
 27958                           ;keyboard.c: 1481: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x00000
      +                          010) == 0) && keyboard.SW5) {
 27959                           
 27960                           ; BSR set to: 0
 27961  002CDE  B9D4               	btfsc	_button_state_last& (0+255),4,b
 27962                           
 27963                           ; BSR set to: 0
 27964  002CE0  B9D8               	btfsc	_button_state_now& (0+255),4,b
 27965  002CE2  D00E               	goto	l1696
 27966                           
 27967                           ; BSR set to: 0
 27968  002CE4  A9D0               	btfss	_keyboard& (0+255),4,b
 27969  002CE6  D00C               	goto	l1696
 27970                           
 27971                           ; BSR set to: 0
 27972                           ;keyboard.c: 1482: pitch = E;
 27973  002CE8  0E04               	movlw	4
 27974  002CEA  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27975                           
 27976                           ;keyboard.c: 1483: index = 2;
 27977  002CEC  0E02               	movlw	2
 27978  002CEE  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27979                           
 27980                           ; BSR set to: 0
 27981                           ;keyboard.c: 1484: ON_OFF = 0;
 27982  002CF0  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27983                           
 27984                           ; BSR set to: 0
 27985                           ;keyboard.c: 1485: playThisNote8(pitch, index);
 27986  002CF2  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27987  002CF6  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27988  002CF8  EC3A  F013         	call	_playThisNote8
 27989                           
 27990                           ;keyboard.c: 1486: keyboard.SW5 = 0;
 27991  002CFC  0100               	movlb	0	; () banked
 27992  002CFE  99D0               	bcf	_keyboard& (0+255),4,b
 27993  002D00                     l1696:
 27994                           
 27995                           ; BSR set to: 0
 27996                           ;keyboard.c: 1487: }
 27997                           ;keyboard.c: 1488: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x00000
      +                          020) == 0) && keyboard.SW6) {
 27998                           
 27999                           ; BSR set to: 0
 28000  002D00  BBD4               	btfsc	_button_state_last& (0+255),5,b
 28001                           
 28002                           ; BSR set to: 0
 28003  002D02  BBD8               	btfsc	_button_state_now& (0+255),5,b
 28004  002D04  D00E               	goto	l1697
 28005                           
 28006                           ; BSR set to: 0
 28007  002D06  ABD0               	btfss	_keyboard& (0+255),5,b
 28008  002D08  D00C               	goto	l1697
 28009                           
 28010                           ; BSR set to: 0
 28011                           ;keyboard.c: 1489: pitch = F;
 28012  002D0A  0E05               	movlw	5
 28013  002D0C  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28014                           
 28015                           ;keyboard.c: 1490: index = 3;
 28016  002D0E  0E03               	movlw	3
 28017  002D10  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28018                           
 28019                           ; BSR set to: 0
 28020                           ;keyboard.c: 1491: ON_OFF = 0;
 28021  002D12  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28022                           
 28023                           ; BSR set to: 0
 28024                           ;keyboard.c: 1492: playThisNote8(pitch, index);
 28025  002D14  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28026  002D18  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28027  002D1A  EC3A  F013         	call	_playThisNote8
 28028                           
 28029                           ;keyboard.c: 1493: keyboard.SW6 = 0;
 28030  002D1E  0100               	movlb	0	; () banked
 28031  002D20  9BD0               	bcf	_keyboard& (0+255),5,b
 28032  002D22                     l1697:
 28033                           
 28034                           ; BSR set to: 0
 28035                           ;keyboard.c: 1494: }
 28036                           ;keyboard.c: 1495: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x00000
      +                          080) == 0) && keyboard.SW8) {
 28037                           
 28038                           ; BSR set to: 0
 28039  002D22  BFD4               	btfsc	_button_state_last& (0+255),7,b
 28040                           
 28041                           ; BSR set to: 0
 28042  002D24  BFD8               	btfsc	_button_state_now& (0+255),7,b
 28043  002D26  D00E               	goto	l1698
 28044                           
 28045                           ; BSR set to: 0
 28046  002D28  AFD0               	btfss	_keyboard& (0+255),7,b
 28047  002D2A  D00C               	goto	l1698
 28048                           
 28049                           ; BSR set to: 0
 28050                           ;keyboard.c: 1496: pitch = G;
 28051  002D2C  0E07               	movlw	7
 28052  002D2E  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28053                           
 28054                           ;keyboard.c: 1497: index = 4;
 28055  002D30  0E04               	movlw	4
 28056  002D32  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28057                           
 28058                           ; BSR set to: 0
 28059                           ;keyboard.c: 1498: ON_OFF = 0;
 28060  002D34  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28061                           
 28062                           ; BSR set to: 0
 28063                           ;keyboard.c: 1499: playThisNote8(pitch, index);
 28064  002D36  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28065  002D3A  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28066  002D3C  EC3A  F013         	call	_playThisNote8
 28067                           
 28068                           ;keyboard.c: 1500: keyboard.SW8 = 0;
 28069  002D40  0100               	movlb	0	; () banked
 28070  002D42  9FD0               	bcf	_keyboard& (0+255),7,b
 28071  002D44                     l1698:
 28072                           
 28073                           ; BSR set to: 0
 28074                           ;keyboard.c: 1501: }
 28075                           ;keyboard.c: 1502: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x00000
      +                          200) == 0) && keyboard.SW10) {
 28076                           
 28077                           ; BSR set to: 0
 28078  002D44  B3D5               	btfsc	(_button_state_last+1)& (0+255),1,b
 28079                           
 28080                           ; BSR set to: 0
 28081  002D46  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 28082  002D48  D00E               	goto	l1699
 28083                           
 28084                           ; BSR set to: 0
 28085  002D4A  A3D1               	btfss	(_keyboard+1)& (0+255),1,b
 28086  002D4C  D00C               	goto	l1699
 28087                           
 28088                           ; BSR set to: 0
 28089                           ;keyboard.c: 1503: pitch = A;
 28090  002D4E  0E09               	movlw	9
 28091  002D50  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28092                           
 28093                           ;keyboard.c: 1504: index = 5;
 28094  002D52  0E05               	movlw	5
 28095  002D54  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28096                           
 28097                           ; BSR set to: 0
 28098                           ;keyboard.c: 1505: ON_OFF = 0;
 28099  002D56  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28100                           
 28101                           ; BSR set to: 0
 28102                           ;keyboard.c: 1506: playThisNote8(pitch, index);
 28103  002D58  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28104  002D5C  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28105  002D5E  EC3A  F013         	call	_playThisNote8
 28106                           
 28107                           ;keyboard.c: 1507: keyboard.SW10 = 10;
 28108  002D62  0100               	movlb	0	; () banked
 28109  002D64  93D1               	bcf	(_keyboard+1)& (0+255),1,b
 28110  002D66                     l1699:
 28111                           
 28112                           ; BSR set to: 0
 28113                           ;keyboard.c: 1508: }
 28114                           ;keyboard.c: 1509: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x00000
      +                          800) == 0) && keyboard.SW12) {
 28115                           
 28116                           ; BSR set to: 0
 28117  002D66  B7D5               	btfsc	(_button_state_last+1)& (0+255),3,b
 28118                           
 28119                           ; BSR set to: 0
 28120  002D68  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 28121  002D6A  D00E               	goto	l1700
 28122                           
 28123                           ; BSR set to: 0
 28124  002D6C  A7D1               	btfss	(_keyboard+1)& (0+255),3,b
 28125  002D6E  D00C               	goto	l1700
 28126                           
 28127                           ; BSR set to: 0
 28128                           ;keyboard.c: 1510: pitch = B;
 28129  002D70  0E0B               	movlw	11
 28130  002D72  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28131                           
 28132                           ;keyboard.c: 1511: index = 6;
 28133  002D74  0E06               	movlw	6
 28134  002D76  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28135                           
 28136                           ; BSR set to: 0
 28137                           ;keyboard.c: 1512: ON_OFF = 0;
 28138  002D78  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28139                           
 28140                           ; BSR set to: 0
 28141                           ;keyboard.c: 1513: playThisNote8(pitch, index);
 28142  002D7A  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28143  002D7E  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28144  002D80  EC3A  F013         	call	_playThisNote8
 28145                           
 28146                           ;keyboard.c: 1514: keyboard.SW12 = 0;
 28147  002D84  0100               	movlb	0	; () banked
 28148  002D86  97D1               	bcf	(_keyboard+1)& (0+255),3,b
 28149  002D88                     l1700:
 28150                           
 28151                           ; BSR set to: 0
 28152                           ;keyboard.c: 1515: }
 28153                           ;keyboard.c: 1516: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x00001
      +                          000) == 0) && keyboard.SW13) {
 28154                           
 28155                           ; BSR set to: 0
 28156  002D88  B9D5               	btfsc	(_button_state_last+1)& (0+255),4,b
 28157                           
 28158                           ; BSR set to: 0
 28159  002D8A  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 28160  002D8C  D00E               	goto	l1701
 28161                           
 28162                           ; BSR set to: 0
 28163  002D8E  A9D1               	btfss	(_keyboard+1)& (0+255),4,b
 28164  002D90  D00C               	goto	l1701
 28165                           
 28166                           ; BSR set to: 0
 28167                           ;keyboard.c: 1517: pitch = C2;
 28168  002D92  0E0C               	movlw	12
 28169  002D94  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28170                           
 28171                           ;keyboard.c: 1518: index = 7;
 28172  002D96  0E07               	movlw	7
 28173  002D98  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28174                           
 28175                           ; BSR set to: 0
 28176                           ;keyboard.c: 1519: ON_OFF = 0;
 28177  002D9A  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28178                           
 28179                           ; BSR set to: 0
 28180                           ;keyboard.c: 1520: playThisNote8(pitch, index);
 28181  002D9C  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28182  002DA0  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28183  002DA2  EC3A  F013         	call	_playThisNote8
 28184                           
 28185                           ;keyboard.c: 1521: keyboard.SW13 = 0;
 28186  002DA6  0100               	movlb	0	; () banked
 28187  002DA8  99D1               	bcf	(_keyboard+1)& (0+255),4,b
 28188  002DAA                     l1701:
 28189                           
 28190                           ; BSR set to: 0
 28191                           ;keyboard.c: 1522: }
 28192                           ;keyboard.c: 1523: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x00004
      +                          000) == 0) && keyboard.SW15) {
 28193                           
 28194                           ; BSR set to: 0
 28195  002DAA  BDD5               	btfsc	(_button_state_last+1)& (0+255),6,b
 28196                           
 28197                           ; BSR set to: 0
 28198  002DAC  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 28199  002DAE  D00E               	goto	l1702
 28200                           
 28201                           ; BSR set to: 0
 28202  002DB0  ADD1               	btfss	(_keyboard+1)& (0+255),6,b
 28203  002DB2  D00C               	goto	l1702
 28204                           
 28205                           ; BSR set to: 0
 28206                           ;keyboard.c: 1524: pitch = D2;
 28207  002DB4  0E0E               	movlw	14
 28208  002DB6  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28209                           
 28210                           ;keyboard.c: 1525: index = 8;
 28211  002DB8  0E08               	movlw	8
 28212  002DBA  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28213                           
 28214                           ; BSR set to: 0
 28215                           ;keyboard.c: 1526: ON_OFF = 0;
 28216  002DBC  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28217                           
 28218                           ; BSR set to: 0
 28219                           ;keyboard.c: 1527: playThisNote8(pitch, index);
 28220  002DBE  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28221  002DC2  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28222  002DC4  EC3A  F013         	call	_playThisNote8
 28223                           
 28224                           ;keyboard.c: 1528: keyboard.SW15 = 0;
 28225  002DC8  0100               	movlb	0	; () banked
 28226  002DCA  9DD1               	bcf	(_keyboard+1)& (0+255),6,b
 28227  002DCC                     l1702:
 28228                           
 28229                           ; BSR set to: 0
 28230                           ;keyboard.c: 1529: }
 28231                           ;keyboard.c: 1530: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x00010
      +                          000) == 0) && keyboard.SW17) {
 28232                           
 28233                           ; BSR set to: 0
 28234  002DCC  B1D6               	btfsc	(_button_state_last+2)& (0+255),0,b
 28235                           
 28236                           ; BSR set to: 0
 28237  002DCE  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 28238  002DD0  D00E               	goto	l1703
 28239                           
 28240                           ; BSR set to: 0
 28241  002DD2  A1D2               	btfss	(_keyboard+2)& (0+255),0,b
 28242  002DD4  D00C               	goto	l1703
 28243                           
 28244                           ; BSR set to: 0
 28245                           ;keyboard.c: 1531: pitch = E2;
 28246  002DD6  0E10               	movlw	16
 28247  002DD8  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28248                           
 28249                           ;keyboard.c: 1532: index = 9;
 28250  002DDA  0E09               	movlw	9
 28251  002DDC  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28252                           
 28253                           ; BSR set to: 0
 28254                           ;keyboard.c: 1533: ON_OFF = 0;
 28255  002DDE  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28256                           
 28257                           ; BSR set to: 0
 28258                           ;keyboard.c: 1534: playThisNote8(pitch, index);
 28259  002DE0  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28260  002DE4  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28261  002DE6  EC3A  F013         	call	_playThisNote8
 28262                           
 28263                           ;keyboard.c: 1535: keyboard.SW17 = 0;
 28264  002DEA  0100               	movlb	0	; () banked
 28265  002DEC  91D2               	bcf	(_keyboard+2)& (0+255),0,b
 28266  002DEE                     l1703:
 28267                           
 28268                           ; BSR set to: 0
 28269                           ;keyboard.c: 1536: }
 28270                           ;keyboard.c: 1537: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x00020
      +                          000) == 0) && keyboard.SW18) {
 28271                           
 28272                           ; BSR set to: 0
 28273  002DEE  B3D6               	btfsc	(_button_state_last+2)& (0+255),1,b
 28274                           
 28275                           ; BSR set to: 0
 28276  002DF0  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 28277  002DF2  D00E               	goto	l1704
 28278                           
 28279                           ; BSR set to: 0
 28280  002DF4  A3D2               	btfss	(_keyboard+2)& (0+255),1,b
 28281  002DF6  D00C               	goto	l1704
 28282                           
 28283                           ; BSR set to: 0
 28284                           ;keyboard.c: 1538: pitch = F2;
 28285  002DF8  0E11               	movlw	17
 28286  002DFA  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28287                           
 28288                           ;keyboard.c: 1539: index = 10;
 28289  002DFC  0E0A               	movlw	10
 28290  002DFE  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28291                           
 28292                           ; BSR set to: 0
 28293                           ;keyboard.c: 1540: ON_OFF = 0;
 28294  002E00  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28295                           
 28296                           ; BSR set to: 0
 28297                           ;keyboard.c: 1541: playThisNote8(pitch, index);
 28298  002E02  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28299  002E06  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28300  002E08  EC3A  F013         	call	_playThisNote8
 28301                           
 28302                           ;keyboard.c: 1542: keyboard.SW18 = 0;
 28303  002E0C  0100               	movlb	0	; () banked
 28304  002E0E  93D2               	bcf	(_keyboard+2)& (0+255),1,b
 28305  002E10                     l1704:
 28306                           
 28307                           ; BSR set to: 0
 28308                           ;keyboard.c: 1543: }
 28309                           ;keyboard.c: 1544: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x00080
      +                          000) == 0) && keyboard.SW20) {
 28310                           
 28311                           ; BSR set to: 0
 28312  002E10  B7D6               	btfsc	(_button_state_last+2)& (0+255),3,b
 28313                           
 28314                           ; BSR set to: 0
 28315  002E12  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 28316  002E14  D00E               	goto	l1705
 28317                           
 28318                           ; BSR set to: 0
 28319  002E16  A7D2               	btfss	(_keyboard+2)& (0+255),3,b
 28320  002E18  D00C               	goto	l1705
 28321                           
 28322                           ; BSR set to: 0
 28323                           ;keyboard.c: 1545: pitch = G2;
 28324  002E1A  0E13               	movlw	19
 28325  002E1C  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28326                           
 28327                           ;keyboard.c: 1546: index = 11;
 28328  002E1E  0E0B               	movlw	11
 28329  002E20  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28330                           
 28331                           ; BSR set to: 0
 28332                           ;keyboard.c: 1547: ON_OFF = 0;
 28333  002E22  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28334                           
 28335                           ; BSR set to: 0
 28336                           ;keyboard.c: 1548: playThisNote8(pitch, index);
 28337  002E24  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28338  002E28  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28339  002E2A  EC3A  F013         	call	_playThisNote8
 28340                           
 28341                           ;keyboard.c: 1549: keyboard.SW20 = 0;
 28342  002E2E  0100               	movlb	0	; () banked
 28343  002E30  97D2               	bcf	(_keyboard+2)& (0+255),3,b
 28344  002E32                     l1705:
 28345                           
 28346                           ; BSR set to: 0
 28347                           ;keyboard.c: 1550: }
 28348                           ;keyboard.c: 1551: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x00200
      +                          000) == 0) && keyboard.SW22) {
 28349                           
 28350                           ; BSR set to: 0
 28351  002E32  BBD6               	btfsc	(_button_state_last+2)& (0+255),5,b
 28352                           
 28353                           ; BSR set to: 0
 28354  002E34  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 28355  002E36  D00E               	goto	l1706
 28356                           
 28357                           ; BSR set to: 0
 28358  002E38  ABD2               	btfss	(_keyboard+2)& (0+255),5,b
 28359  002E3A  D00C               	goto	l1706
 28360                           
 28361                           ; BSR set to: 0
 28362                           ;keyboard.c: 1552: pitch = A2;
 28363  002E3C  0E15               	movlw	21
 28364  002E3E  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28365                           
 28366                           ;keyboard.c: 1553: index = 12;
 28367  002E40  0E0C               	movlw	12
 28368  002E42  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28369                           
 28370                           ; BSR set to: 0
 28371                           ;keyboard.c: 1554: ON_OFF = 0;
 28372  002E44  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28373                           
 28374                           ; BSR set to: 0
 28375                           ;keyboard.c: 1555: playThisNote8(pitch, index);
 28376  002E46  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28377  002E4A  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28378  002E4C  EC3A  F013         	call	_playThisNote8
 28379                           
 28380                           ;keyboard.c: 1556: keyboard.SW22 = 0;
 28381  002E50  0100               	movlb	0	; () banked
 28382  002E52  9BD2               	bcf	(_keyboard+2)& (0+255),5,b
 28383  002E54                     l1706:
 28384                           
 28385                           ; BSR set to: 0
 28386                           ;keyboard.c: 1557: }
 28387                           ;keyboard.c: 1558: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x00800
      +                          000) == 0) && keyboard.SW24) {
 28388                           
 28389                           ; BSR set to: 0
 28390  002E54  BFD6               	btfsc	(_button_state_last+2)& (0+255),7,b
 28391                           
 28392                           ; BSR set to: 0
 28393  002E56  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 28394  002E58  D00E               	goto	l1707
 28395                           
 28396                           ; BSR set to: 0
 28397  002E5A  AFD2               	btfss	(_keyboard+2)& (0+255),7,b
 28398  002E5C  D00C               	goto	l1707
 28399                           
 28400                           ; BSR set to: 0
 28401                           ;keyboard.c: 1559: pitch = B2;
 28402  002E5E  0E17               	movlw	23
 28403  002E60  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28404                           
 28405                           ;keyboard.c: 1560: index = 13;
 28406  002E62  0E0D               	movlw	13
 28407  002E64  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28408                           
 28409                           ; BSR set to: 0
 28410                           ;keyboard.c: 1561: ON_OFF = 0;
 28411  002E66  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28412                           
 28413                           ; BSR set to: 0
 28414                           ;keyboard.c: 1562: playThisNote8(pitch, index);
 28415  002E68  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28416  002E6C  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28417  002E6E  EC3A  F013         	call	_playThisNote8
 28418                           
 28419                           ;keyboard.c: 1563: keyboard.SW24 = 0;
 28420  002E72  0100               	movlb	0	; () banked
 28421  002E74  9FD2               	bcf	(_keyboard+2)& (0+255),7,b
 28422  002E76                     l1707:
 28423                           
 28424                           ; BSR set to: 0
 28425                           ;keyboard.c: 1564: }
 28426                           ;keyboard.c: 1565: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x01000
      +                          000) == 0) && keyboard.SW25) {
 28427                           
 28428                           ; BSR set to: 0
 28429  002E76  A1D7               	btfss	(_button_state_last+3)& (0+255),0,b
 28430  002E78  0012               	return	
 28431                           
 28432                           ; BSR set to: 0
 28433  002E7A  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 28434  002E7C  0012               	return	
 28435                           
 28436                           ; BSR set to: 0
 28437  002E7E  A1D3               	btfss	(_keyboard+3)& (0+255),0,b
 28438  002E80  0012               	return	
 28439                           
 28440                           ; BSR set to: 0
 28441                           ;keyboard.c: 1566: pitch = C;
 28442  002E82  0E00               	movlw	0
 28443  002E84  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28444                           
 28445                           ;keyboard.c: 1567: index = 14;
 28446  002E86  0E0E               	movlw	14
 28447  002E88  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28448                           
 28449                           ; BSR set to: 0
 28450                           ;keyboard.c: 1568: ON_OFF = 0;
 28451  002E8A  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28452                           
 28453                           ; BSR set to: 0
 28454                           ;keyboard.c: 1569: playThisNote8(pitch, index);
 28455  002E8C  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28456  002E90  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28457  002E92  EC3A  F013         	call	_playThisNote8
 28458                           
 28459                           ;keyboard.c: 1570: keyboard.SW25 = 0;
 28460  002E96  0100               	movlb	0	; () banked
 28461  002E98  91D3               	bcf	(_keyboard+3)& (0+255),0,b
 28462  002E9A  0012               	return	
 28463  002E9C                     __end_of_keyboard_eight_note_efficient:
 28464                           	opt stack 0
 28465                           tblptru	equ	0xFF8
 28466                           tblptrh	equ	0xFF7
 28467                           tblptrl	equ	0xFF6
 28468                           tablat	equ	0xFF5
 28469                           prodh	equ	0xFF4
 28470                           prodl	equ	0xFF3
 28471                           intcon	equ	0xFF2
 28472                           intcon2	equ	0xFF1
 28473                           postinc0	equ	0xFEE
 28474                           wreg	equ	0xFE8
 28475                           indf1	equ	0xFE7
 28476                           postdec1	equ	0xFE5
 28477                           fsr1h	equ	0xFE2
 28478                           fsr1l	equ	0xFE1
 28479                           indf2	equ	0xFDF
 28480                           postinc2	equ	0xFDE
 28481                           plusw2	equ	0xFDB
 28482                           fsr2h	equ	0xFDA
 28483                           fsr2l	equ	0xFD9
 28484                           status	equ	0xFD8
 28485                           
 28486 ;; *************** function _playThisNote8 *****************
 28487 ;; Defined at:
 28488 ;;		line 893 in file "keyboard.c"
 28489 ;; Parameters:    Size  Location     Type
 28490 ;;  pitch           1    wreg     unsigned char 
 28491 ;;  index           1   31[BANK0 ] unsigned char 
 28492 ;; Auto vars:     Size  Location     Type
 28493 ;;  pitch           1   36[BANK0 ] unsigned char 
 28494 ;;  temp_pitch      1   37[BANK0 ] unsigned char 
 28495 ;;  mode_p          2   38[BANK0 ] PTR unsigned char 
 28496 ;;		 -> locrian_key(15), aeolian_key(15), mixolydian_key(15), lydian_key(15), 
 28497 ;;		 -> phrygian_key(15), dorian_key(15), ionian_key(15), 
 28498 ;; Return value:  Size  Location     Type
 28499 ;;                  1    wreg      void 
 28500 ;; Registers used:
 28501 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28502 ;; Tracked objects:
 28503 ;;		On entry : 0/0
 28504 ;;		On exit  : 0/0
 28505 ;;		Unchanged: 0/0
 28506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 28507 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28508 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28509 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28510 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28511 ;;Total ram usage:        9 bytes
 28512 ;; Hardware stack levels used:    1
 28513 ;; Hardware stack levels required when called:   11
 28514 ;; This function calls:
 28515 ;;		_add_notes_to_arpeggio
 28516 ;;		_delete_notes_from_arpeggio
 28517 ;;		_finish_arpeggio_setup
 28518 ;;		_key_press_release_note_off
 28519 ;;		_noteOff
 28520 ;;		_noteOn
 28521 ;;		_playDiatonicSeventhMajor
 28522 ;;		_playDiatonicSeventhMinor
 28523 ;;		_playDiatonicTriadMajor
 28524 ;;		_playDiatonicTriadMinor
 28525 ;;		_wait_one_pulse
 28526 ;; This function is called by:
 28527 ;;		_keyboard_eight_note_efficient
 28528 ;;		_doTheUnLatch
 28529 ;; This function uses a non-reentrant model
 28530 ;;
 28531                           
 28532                           	psect	text86
 28533  002674                     __ptext86:
 28534                           	opt stack 0
 28535  002674                     _playThisNote8:
 28536                           	opt stack 14
 28537                           
 28538                           ; BSR set to: 0
 28539                           ;incstack = 0
 28540                           ;playThisNote8@pitch stored from wreg
 28541  002674  0100               	movlb	0	; () banked
 28542  002676  6F84               	movwf	playThisNote8@pitch& (0+255),b
 28543                           
 28544                           ;keyboard.c: 895: unsigned char *mode_p;
 28545                           ;keyboard.c: 898: switch (which_mode) {
 28546  002678  D01E               	goto	l1515
 28547  00267A                     
 28548                           ;keyboard.c: 900: mode_p = ionian_key;
 28549  00267A  0E55               	movlw	low _ionian_key
 28550  00267C  0100               	movlb	0	; () banked
 28551  00267E  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28552  002680  0EFD               	movlw	high _ionian_key
 28553  002682  D017               	goto	L12
 28554  002684                     
 28555                           ; BSR set to: 0
 28556                           ;keyboard.c: 903: mode_p = dorian_key;
 28557                           
 28558                           ; BSR set to: 0
 28559  002684  0E46               	movlw	low _dorian_key
 28560  002686  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28561  002688  0EFD               	movlw	high _dorian_key
 28562  00268A  D013               	goto	L12
 28563  00268C                     
 28564                           ; BSR set to: 0
 28565                           ;keyboard.c: 906: mode_p = phrygian_key;
 28566                           
 28567                           ; BSR set to: 0
 28568  00268C  0E37               	movlw	low _phrygian_key
 28569  00268E  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28570  002690  0EFD               	movlw	high _phrygian_key
 28571  002692  D00F               	goto	L12
 28572  002694                     
 28573                           ; BSR set to: 0
 28574                           ;keyboard.c: 909: mode_p = lydian_key;
 28575                           
 28576                           ; BSR set to: 0
 28577  002694  0E28               	movlw	low _lydian_key
 28578  002696  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28579  002698  0EFD               	movlw	high _lydian_key
 28580  00269A  D00B               	goto	L12
 28581  00269C                     
 28582                           ; BSR set to: 0
 28583                           ;keyboard.c: 912: mode_p = mixolydian_key;
 28584                           
 28585                           ; BSR set to: 0
 28586  00269C  0E19               	movlw	low _mixolydian_key
 28587  00269E  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28588  0026A0  0EFD               	movlw	high _mixolydian_key
 28589  0026A2  D007               	goto	L12
 28590  0026A4                     
 28591                           ; BSR set to: 0
 28592                           ;keyboard.c: 915: mode_p = aeolian_key;
 28593                           
 28594                           ; BSR set to: 0
 28595  0026A4  0E0A               	movlw	low _aeolian_key
 28596  0026A6  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28597  0026A8  0EFD               	movlw	high _aeolian_key
 28598  0026AA  D003               	goto	L12
 28599  0026AC                     
 28600                           ; BSR set to: 0
 28601                           ;keyboard.c: 918: mode_p = locrian_key;
 28602                           
 28603                           ; BSR set to: 0
 28604  0026AC  0EFB               	movlw	low _locrian_key
 28605  0026AE  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28606  0026B0  0EFC               	movlw	high _locrian_key
 28607  0026B2                     L12:
 28608  0026B2  6F87               	movwf	(playThisNote8@mode_p+1)& (0+255),b
 28609                           
 28610                           ; BSR set to: 0
 28611                           ;keyboard.c: 922: }
 28612                           
 28613                           ; BSR set to: 0
 28614                           ;keyboard.c: 921: break;
 28615                           
 28616                           ;keyboard.c: 920: default:
 28617                           
 28618                           ;keyboard.c: 919: break;
 28619  0026B4  D017               	goto	l1517
 28620  0026B6                     l1515:
 28621                           
 28622                           ; BSR set to: 0
 28623  0026B6  0100               	movlb	0	; () banked
 28624  0026B8  51F1               	movf	_which_mode& (0+255),w,b
 28625                           
 28626                           ; Switch size 1, requested type "space"
 28627                           ; Number of cases is 7, Range of values is 0 to 6
 28628                           ; switch strategies available:
 28629                           ; Name         Instructions Cycles
 28630                           ; simple_byte           22    12 (average)
 28631                           ;	Chosen strategy is simple_byte
 28632  0026BA  0A00               	xorlw	0	; case 0
 28633  0026BC  B4D8               	btfsc	status,2,c
 28634  0026BE  D7DD               	goto	l1516
 28635  0026C0  0A01               	xorlw	1	; case 1
 28636  0026C2  B4D8               	btfsc	status,2,c
 28637  0026C4  D7DF               	goto	l1518
 28638  0026C6  0A03               	xorlw	3	; case 2
 28639  0026C8  B4D8               	btfsc	status,2,c
 28640  0026CA  D7E0               	goto	l1519
 28641  0026CC  0A01               	xorlw	1	; case 3
 28642  0026CE  B4D8               	btfsc	status,2,c
 28643  0026D0  D7E1               	goto	l1520
 28644  0026D2  0A07               	xorlw	7	; case 4
 28645  0026D4  B4D8               	btfsc	status,2,c
 28646  0026D6  D7E2               	goto	l1521
 28647  0026D8  0A01               	xorlw	1	; case 5
 28648  0026DA  B4D8               	btfsc	status,2,c
 28649  0026DC  D7E3               	goto	l1522
 28650  0026DE  0A03               	xorlw	3	; case 6
 28651  0026E0  B4D8               	btfsc	status,2,c
 28652  0026E2  D7E4               	goto	l1523
 28653  0026E4                     l1517:
 28654                           
 28655                           ; BSR set to: 0
 28656                           ;keyboard.c: 925: if(ARPEGGIO_ON == 0){
 28657  0026E4  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28658  0026E6  D0D0               	goto	l1538
 28659                           
 28660                           ; BSR set to: 0
 28661                           ;keyboard.c: 927: if(KEYBOARD_MODE == MAJOR) {
 28662  0026E8  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 28663  0026EA  A4D8               	btfss	status,2,c
 28664  0026EC  D025               	goto	l1528
 28665                           
 28666                           ; BSR set to: 0
 28667                           ;keyboard.c: 928: if(ON_OFF == 1) {noteOn(channel,major_key[index],velocity);}
 28668  0026EE  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28669  0026F0  D010               	goto	l1527
 28670                           
 28671                           ; BSR set to: 0
 28672  0026F2  517F               	movf	playThisNote8@index& (0+255),w,b
 28673  0026F4  0D01               	mullw	1
 28674  0026F6  0E78               	movlw	low _major_key
 28675  0026F8  24F3               	addwf	prodl,w,c
 28676  0026FA  6EF6               	movwf	tblptrl,c
 28677  0026FC  0EF3               	movlw	high _major_key
 28678  0026FE  20F4               	addwfc	prodh,w,c
 28679  002700  6EF7               	movwf	tblptrh,c
 28680  002702                     	if	0	;There are less than 3 active tblptr bytes
 28681  002702                     	endif
 28682  002702  0008               	tblrd		*
 28683  002704  CFF5 F06E          	movff	tablat,noteOn@pitch
 28684  002708  C0FD  F06F         	movff	_velocity,noteOn@velocity
 28685  00270C  51F6               	movf	_channel& (0+255),w,b
 28686  00270E  ECD6  F044         	call	_noteOn
 28687  002712                     l1527:
 28688                           
 28689                           ;keyboard.c: 929: if(ON_OFF == 0) {noteOff(channel,major_key[index],velocity);}
 28690  002712  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28691  002714  D011               	goto	l1528
 28692  002716  0100               	movlb	0	; () banked
 28693  002718  517F               	movf	playThisNote8@index& (0+255),w,b
 28694  00271A  0D01               	mullw	1
 28695  00271C  0E78               	movlw	low _major_key
 28696  00271E  24F3               	addwf	prodl,w,c
 28697  002720  6EF6               	movwf	tblptrl,c
 28698  002722  0EF3               	movlw	high _major_key
 28699  002724  20F4               	addwfc	prodh,w,c
 28700  002726  6EF7               	movwf	tblptrh,c
 28701  002728                     	if	0	;There are less than 3 active tblptr bytes
 28702  002728                     	endif
 28703  002728  0008               	tblrd		*
 28704  00272A  CFF5 F06B          	movff	tablat,noteOff@pitch
 28705  00272E  C0FD  F06C         	movff	_velocity,noteOff@velocity
 28706  002732  51F6               	movf	_channel& (0+255),w,b
 28707  002734  ECFD  F047         	call	_noteOff
 28708  002738                     l1528:
 28709                           
 28710                           ;keyboard.c: 930: }
 28711                           ;keyboard.c: 932: if(KEYBOARD_MODE == MINOR) {
 28712  002738  0E02               	movlw	2
 28713  00273A  0100               	movlb	0	; () banked
 28714  00273C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28715  00273E  A4D8               	btfss	status,2,c
 28716  002740  D025               	goto	l1531
 28717                           
 28718                           ; BSR set to: 0
 28719                           ;keyboard.c: 933: if(ON_OFF == 1) {noteOn(channel,minor_key[index],velocity);}
 28720  002742  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28721  002744  D010               	goto	l1530
 28722                           
 28723                           ; BSR set to: 0
 28724  002746  517F               	movf	playThisNote8@index& (0+255),w,b
 28725  002748  0D01               	mullw	1
 28726  00274A  0E69               	movlw	low _minor_key
 28727  00274C  24F3               	addwf	prodl,w,c
 28728  00274E  6EF6               	movwf	tblptrl,c
 28729  002750  0EF3               	movlw	high _minor_key
 28730  002752  20F4               	addwfc	prodh,w,c
 28731  002754  6EF7               	movwf	tblptrh,c
 28732  002756                     	if	0	;There are less than 3 active tblptr bytes
 28733  002756                     	endif
 28734  002756  0008               	tblrd		*
 28735  002758  CFF5 F06E          	movff	tablat,noteOn@pitch
 28736  00275C  C0FD  F06F         	movff	_velocity,noteOn@velocity
 28737  002760  51F6               	movf	_channel& (0+255),w,b
 28738  002762  ECD6  F044         	call	_noteOn
 28739  002766                     l1530:
 28740                           
 28741                           ;keyboard.c: 934: if(ON_OFF == 0) {noteOff(channel,minor_key[index],velocity);}
 28742  002766  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28743  002768  D011               	goto	l1531
 28744  00276A  0100               	movlb	0	; () banked
 28745  00276C  517F               	movf	playThisNote8@index& (0+255),w,b
 28746  00276E  0D01               	mullw	1
 28747  002770  0E69               	movlw	low _minor_key
 28748  002772  24F3               	addwf	prodl,w,c
 28749  002774  6EF6               	movwf	tblptrl,c
 28750  002776  0EF3               	movlw	high _minor_key
 28751  002778  20F4               	addwfc	prodh,w,c
 28752  00277A  6EF7               	movwf	tblptrh,c
 28753  00277C                     	if	0	;There are less than 3 active tblptr bytes
 28754  00277C                     	endif
 28755  00277C  0008               	tblrd		*
 28756  00277E  CFF5 F06B          	movff	tablat,noteOff@pitch
 28757  002782  C0FD  F06C         	movff	_velocity,noteOff@velocity
 28758  002786  51F6               	movf	_channel& (0+255),w,b
 28759  002788  ECFD  F047         	call	_noteOff
 28760  00278C                     l1531:
 28761                           
 28762                           ;keyboard.c: 935: }
 28763                           ;keyboard.c: 937: if(KEYBOARD_MODE == MODES) {
 28764  00278C  0E03               	movlw	3
 28765  00278E  0100               	movlb	0	; () banked
 28766  002790  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28767  002792  A4D8               	btfss	status,2,c
 28768  002794  D079               	goto	l1538
 28769                           
 28770                           ; BSR set to: 0
 28771                           ;keyboard.c: 938: if(index == 0) {
 28772  002796  517F               	movf	playThisNote8@index& (0+255),w,b
 28773  002798  A4D8               	btfss	status,2,c
 28774  00279A  D031               	goto	l1535
 28775                           
 28776                           ; BSR set to: 0
 28777                           ;keyboard.c: 939: if(ON_OFF == 1) {noteOn(channel,mode_p[index],velocity);}
 28778  00279C  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28779  00279E  D016               	goto	l1534
 28780                           
 28781                           ; BSR set to: 0
 28782  0027A0  517F               	movf	playThisNote8@index& (0+255),w,b
 28783  0027A2  0D01               	mullw	1
 28784  0027A4  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28785  0027A8  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28786  0027AC  50F3               	movf	prodl,w,c
 28787  0027AE  2780               	addwf	??_playThisNote8& (0+255),f,b
 28788  0027B0  50F4               	movf	prodh,w,c
 28789  0027B2  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28790  0027B4  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28791  0027B8  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28792  0027BC                     	if	0	;tblptru may be non-zero
 28793  0027BC                     	endif
 28794  0027BC                     	if	0	;tblptru may be non-zero
 28795  0027BC                     	endif
 28796  0027BC  0008               	tblrd		*
 28797  0027BE  CFF5 F06E          	movff	tablat,noteOn@pitch
 28798  0027C2  C0FD  F06F         	movff	_velocity,noteOn@velocity
 28799  0027C6  51F6               	movf	_channel& (0+255),w,b
 28800  0027C8  ECD6  F044         	call	_noteOn
 28801  0027CC                     l1534:
 28802                           
 28803                           ;keyboard.c: 940: if(ON_OFF == 0) {noteOff(channel,mode_p[index],velocity);}
 28804  0027CC  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28805  0027CE  D017               	goto	l1535
 28806  0027D0  0100               	movlb	0	; () banked
 28807  0027D2  517F               	movf	playThisNote8@index& (0+255),w,b
 28808  0027D4  0D01               	mullw	1
 28809  0027D6  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28810  0027DA  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28811  0027DE  50F3               	movf	prodl,w,c
 28812  0027E0  2780               	addwf	??_playThisNote8& (0+255),f,b
 28813  0027E2  50F4               	movf	prodh,w,c
 28814  0027E4  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28815  0027E6  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28816  0027EA  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28817  0027EE                     	if	0	;tblptru may be non-zero
 28818  0027EE                     	endif
 28819  0027EE                     	if	0	;tblptru may be non-zero
 28820  0027EE                     	endif
 28821  0027EE  0008               	tblrd		*
 28822  0027F0  CFF5 F06B          	movff	tablat,noteOff@pitch
 28823  0027F4  C0FD  F06C         	movff	_velocity,noteOff@velocity
 28824  0027F8  51F6               	movf	_channel& (0+255),w,b
 28825  0027FA  ECFD  F047         	call	_noteOff
 28826  0027FE                     l1535:
 28827                           
 28828                           ;keyboard.c: 941: }
 28829                           ;keyboard.c: 942: if(index > 0) {
 28830  0027FE  0100               	movlb	0	; () banked
 28831  002800  517F               	movf	playThisNote8@index& (0+255),w,b
 28832  002802  B4D8               	btfsc	status,2,c
 28833  002804  D041               	goto	l1538
 28834                           
 28835                           ; BSR set to: 0
 28836                           ;keyboard.c: 943: if(ON_OFF == 1) {noteOn(channel,mode_p[0] + mode_p[index],velocity);}
 28837  002806  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28838  002808  D01E               	goto	l1537
 28839                           
 28840                           ; BSR set to: 0
 28841  00280A  517F               	movf	playThisNote8@index& (0+255),w,b
 28842  00280C  0D01               	mullw	1
 28843  00280E  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28844  002812  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28845  002816  50F3               	movf	prodl,w,c
 28846  002818  2780               	addwf	??_playThisNote8& (0+255),f,b
 28847  00281A  50F4               	movf	prodh,w,c
 28848  00281C  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28849  00281E  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28850  002822  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28851  002826                     	if	0	;tblptru may be non-zero
 28852  002826                     	endif
 28853  002826                     	if	0	;tblptru may be non-zero
 28854  002826                     	endif
 28855  002826  0008               	tblrd		*
 28856  002828  CFF5 F082          	movff	tablat,??_playThisNote8+2
 28857  00282C  C086  FFF6         	movff	playThisNote8@mode_p,tblptrl
 28858  002830  C087  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 28859  002834                     	if	0	;tblptru may be non-zero
 28860  002834                     	endif
 28861  002834                     	if	0	;tblptru may be non-zero
 28862  002834                     	endif
 28863  002834  0008               	tblrd		*
 28864  002836  50F5               	movf	tablat,w,c
 28865  002838  2582               	addwf	(??_playThisNote8+2)& (0+255),w,b
 28866  00283A  6F6E               	movwf	noteOn@pitch& (0+255),b
 28867  00283C  C0FD  F06F         	movff	_velocity,noteOn@velocity
 28868  002840  51F6               	movf	_channel& (0+255),w,b
 28869  002842  ECD6  F044         	call	_noteOn
 28870  002846                     l1537:
 28871                           
 28872                           ;keyboard.c: 944: if(ON_OFF == 0) {noteOff(channel,mode_p[0] + mode_p[index],velocity);}
 28873  002846  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28874  002848  D01F               	goto	l1538
 28875  00284A  0100               	movlb	0	; () banked
 28876  00284C  517F               	movf	playThisNote8@index& (0+255),w,b
 28877  00284E  0D01               	mullw	1
 28878  002850  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28879  002854  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28880  002858  50F3               	movf	prodl,w,c
 28881  00285A  2780               	addwf	??_playThisNote8& (0+255),f,b
 28882  00285C  50F4               	movf	prodh,w,c
 28883  00285E  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28884  002860  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28885  002864  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28886  002868                     	if	0	;tblptru may be non-zero
 28887  002868                     	endif
 28888  002868                     	if	0	;tblptru may be non-zero
 28889  002868                     	endif
 28890  002868  0008               	tblrd		*
 28891  00286A  CFF5 F082          	movff	tablat,??_playThisNote8+2
 28892  00286E  C086  FFF6         	movff	playThisNote8@mode_p,tblptrl
 28893  002872  C087  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 28894  002876                     	if	0	;tblptru may be non-zero
 28895  002876                     	endif
 28896  002876                     	if	0	;tblptru may be non-zero
 28897  002876                     	endif
 28898  002876  0008               	tblrd		*
 28899  002878  50F5               	movf	tablat,w,c
 28900  00287A  2582               	addwf	(??_playThisNote8+2)& (0+255),w,b
 28901  00287C  6F6B               	movwf	noteOff@pitch& (0+255),b
 28902  00287E  C0FD  F06C         	movff	_velocity,noteOff@velocity
 28903  002882  51F6               	movf	_channel& (0+255),w,b
 28904  002884  ECFD  F047         	call	_noteOff
 28905  002888                     l1538:
 28906                           
 28907                           ;keyboard.c: 945: }
 28908                           ;keyboard.c: 946: }
 28909                           ;keyboard.c: 947: }
 28910                           ;keyboard.c: 950: if(ARPEGGIO_ON == 1){
 28911  002888  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28912  00288A  D0DE               	goto	l1552
 28913                           
 28914                           ;keyboard.c: 952: unsigned char temp_pitch;
 28915                           ;keyboard.c: 954: if(KEYBOARD_MODE == MAJOR) {
 28916  00288C  0100               	movlb	0	; () banked
 28917  00288E  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 28918  002890  A4D8               	btfss	status,2,c
 28919  002892  D00B               	goto	l1540
 28920                           
 28921                           ; BSR set to: 0
 28922                           ;keyboard.c: 955: temp_pitch = major_key[index];
 28923  002894  517F               	movf	playThisNote8@index& (0+255),w,b
 28924  002896  0D01               	mullw	1
 28925  002898  0E78               	movlw	low _major_key
 28926  00289A  24F3               	addwf	prodl,w,c
 28927  00289C  6EF6               	movwf	tblptrl,c
 28928  00289E  0EF3               	movlw	high _major_key
 28929  0028A0  20F4               	addwfc	prodh,w,c
 28930  0028A2  6EF7               	movwf	tblptrh,c
 28931  0028A4                     	if	0	;There are less than 3 active tblptr bytes
 28932  0028A4                     	endif
 28933  0028A4  0008               	tblrd		*
 28934  0028A6  CFF5 F085          	movff	tablat,playThisNote8@temp_pitch
 28935  0028AA                     l1540:
 28936                           
 28937                           ; BSR set to: 0
 28938                           ;keyboard.c: 956: }
 28939                           ;keyboard.c: 958: if(KEYBOARD_MODE == MINOR) {
 28940                           
 28941                           ; BSR set to: 0
 28942  0028AA  0E02               	movlw	2
 28943  0028AC  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28944  0028AE  A4D8               	btfss	status,2,c
 28945  0028B0  D00B               	goto	l1541
 28946                           
 28947                           ; BSR set to: 0
 28948                           ;keyboard.c: 959: temp_pitch = minor_key[index];
 28949  0028B2  517F               	movf	playThisNote8@index& (0+255),w,b
 28950  0028B4  0D01               	mullw	1
 28951  0028B6  0E69               	movlw	low _minor_key
 28952  0028B8  24F3               	addwf	prodl,w,c
 28953  0028BA  6EF6               	movwf	tblptrl,c
 28954  0028BC  0EF3               	movlw	high _minor_key
 28955  0028BE  20F4               	addwfc	prodh,w,c
 28956  0028C0  6EF7               	movwf	tblptrh,c
 28957  0028C2                     	if	0	;There are less than 3 active tblptr bytes
 28958  0028C2                     	endif
 28959  0028C2  0008               	tblrd		*
 28960  0028C4  CFF5 F085          	movff	tablat,playThisNote8@temp_pitch
 28961  0028C8                     l1541:
 28962                           
 28963                           ; BSR set to: 0
 28964                           ;keyboard.c: 960: }
 28965                           ;keyboard.c: 962: if(KEYBOARD_MODE == MODES) {
 28966                           
 28967                           ; BSR set to: 0
 28968  0028C8  0E03               	movlw	3
 28969  0028CA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28970  0028CC  A4D8               	btfss	status,2,c
 28971  0028CE  D030               	goto	l1544
 28972                           
 28973                           ; BSR set to: 0
 28974                           ;keyboard.c: 963: if(index == 0){temp_pitch = mode_p[index];}
 28975  0028D0  517F               	movf	playThisNote8@index& (0+255),w,b
 28976  0028D2  A4D8               	btfss	status,2,c
 28977  0028D4  D011               	goto	l1543
 28978                           
 28979                           ; BSR set to: 0
 28980  0028D6  517F               	movf	playThisNote8@index& (0+255),w,b
 28981  0028D8  0D01               	mullw	1
 28982  0028DA  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28983  0028DE  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28984  0028E2  50F3               	movf	prodl,w,c
 28985  0028E4  2780               	addwf	??_playThisNote8& (0+255),f,b
 28986  0028E6  50F4               	movf	prodh,w,c
 28987  0028E8  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28988  0028EA  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28989  0028EE  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28990  0028F2                     	if	0	;tblptru may be non-zero
 28991  0028F2                     	endif
 28992  0028F2                     	if	0	;tblptru may be non-zero
 28993  0028F2                     	endif
 28994  0028F2  0008               	tblrd		*
 28995  0028F4  CFF5 F085          	movff	tablat,playThisNote8@temp_pitch
 28996  0028F8                     l1543:
 28997                           
 28998                           ; BSR set to: 0
 28999                           ;keyboard.c: 964: if(index > 0){temp_pitch = (mode_p[0] + mode_p[index]);}
 29000                           
 29001                           ; BSR set to: 0
 29002  0028F8  517F               	movf	playThisNote8@index& (0+255),w,b
 29003  0028FA  B4D8               	btfsc	status,2,c
 29004  0028FC  D019               	goto	l1544
 29005                           
 29006                           ; BSR set to: 0
 29007  0028FE  517F               	movf	playThisNote8@index& (0+255),w,b
 29008  002900  0D01               	mullw	1
 29009  002902  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 29010  002906  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 29011  00290A  50F3               	movf	prodl,w,c
 29012  00290C  2780               	addwf	??_playThisNote8& (0+255),f,b
 29013  00290E  50F4               	movf	prodh,w,c
 29014  002910  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 29015  002912  C080  FFF6         	movff	??_playThisNote8,tblptrl
 29016  002916  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 29017  00291A                     	if	0	;tblptru may be non-zero
 29018  00291A                     	endif
 29019  00291A                     	if	0	;tblptru may be non-zero
 29020  00291A                     	endif
 29021  00291A  0008               	tblrd		*
 29022  00291C  CFF5 F082          	movff	tablat,??_playThisNote8+2
 29023  002920  C086  FFF6         	movff	playThisNote8@mode_p,tblptrl
 29024  002924  C087  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 29025  002928                     	if	0	;tblptru may be non-zero
 29026  002928                     	endif
 29027  002928                     	if	0	;tblptru may be non-zero
 29028  002928                     	endif
 29029  002928  0008               	tblrd		*
 29030  00292A  50F5               	movf	tablat,w,c
 29031  00292C  2582               	addwf	(??_playThisNote8+2)& (0+255),w,b
 29032  00292E  6F85               	movwf	playThisNote8@temp_pitch& (0+255),b
 29033  002930                     l1544:
 29034                           
 29035                           ; BSR set to: 0
 29036                           ;keyboard.c: 965: }
 29037                           ;keyboard.c: 967: if(ON_OFF == 1) {
 29038                           
 29039                           ; BSR set to: 0
 29040                           
 29041                           ; BSR set to: 0
 29042  002930  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29043  002932  D024               	goto	l1545
 29044                           
 29045                           ; BSR set to: 0
 29046                           ;keyboard.c: 970: TMR0ON = 0;
 29047  002934  9ED5               	bcf	4053,7,c	;volatile
 29048                           
 29049                           ;keyboard.c: 972: parallel = temp_pitch;
 29050  002936  C085  F0E6         	movff	playThisNote8@temp_pitch,_parallel
 29051                           
 29052                           ; BSR set to: 0
 29053                           ;keyboard.c: 975: if(NUM_NOTES_PRESSED > 0){
 29054  00293A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 29055  00293C  B4D8               	btfsc	status,2,c
 29056  00293E  D00A               	goto	l1546
 29057                           
 29058                           ; BSR set to: 0
 29059                           ;keyboard.c: 976: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 29060  002940  0E00               	movlw	0
 29061  002942  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 29062  002944  0E01               	movlw	1
 29063  002946  EC00  F04A         	call	_wait_one_pulse
 29064                           
 29065                           ;keyboard.c: 977: if(note_off_was_sent == 0) {key_press_release_note_off();}
 29066  00294A  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 29067  00294C  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 29068                           
 29069                           ;keyboard.c: 978: TIMER_OVERFLOWS = 0;
 29070  002950  0E00               	movlw	0
 29071  002952  6E54               	movwf	_TIMER_OVERFLOWS,c
 29072  002954                     l1546:
 29073                           
 29074                           ;keyboard.c: 979: }
 29075                           ;keyboard.c: 982: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MOD
      +                          E == MODES)){
 29076  002954  0100               	movlb	0	; () banked
 29077  002956  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 29078  002958  B4D8               	btfsc	status,2,c
 29079  00295A  D008               	goto	u25420
 29080                           
 29081                           ; BSR set to: 0
 29082  00295C  0E02               	movlw	2
 29083  00295E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29084  002960  B4D8               	btfsc	status,2,c
 29085  002962  D004               	goto	u25420
 29086                           
 29087                           ; BSR set to: 0
 29088  002964  0E03               	movlw	3
 29089  002966  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29090  002968  A4D8               	btfss	status,2,c
 29091  00296A  D003               	goto	l1548
 29092  00296C                     u25420:
 29093                           
 29094                           ; BSR set to: 0
 29095                           ;keyboard.c: 983: add_notes_to_arpeggio(temp_pitch);
 29096                           
 29097                           ; BSR set to: 0
 29098  00296C  5185               	movf	playThisNote8@temp_pitch& (0+255),w,b
 29099  00296E  EC8F  F032         	call	_add_notes_to_arpeggio
 29100  002972                     l1548:
 29101                           
 29102                           ;keyboard.c: 984: }
 29103                           ;keyboard.c: 987: if(LATCH == 0) {latch_was_pressed = 0;}
 29104  002972  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 29105  002974  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29106                           
 29107                           ;keyboard.c: 990: finish_arpeggio_setup();
 29108  002976  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 29109                           
 29110                           ;keyboard.c: 993: TMR0ON = 1;
 29111  00297A  8ED5               	bsf	4053,7,c	;volatile
 29112  00297C                     l1545:
 29113                           
 29114                           ;keyboard.c: 994: }
 29115                           ;keyboard.c: 996: if((ON_OFF == 0) && (LATCH == 0)) {
 29116  00297C  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29117  00297E  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 29118  002980  D063               	goto	l1552
 29119                           
 29120                           ;keyboard.c: 999: TMR0ON = 0;
 29121  002982  9ED5               	bcf	4053,7,c	;volatile
 29122                           
 29123                           ;keyboard.c: 1002: if(NUM_NOTES_PRESSED > 0){
 29124  002984  0100               	movlb	0	; () banked
 29125  002986  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 29126  002988  B4D8               	btfsc	status,2,c
 29127  00298A  D00A               	goto	l1553
 29128                           
 29129                           ; BSR set to: 0
 29130                           ;keyboard.c: 1003: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 29131  00298C  0E00               	movlw	0
 29132  00298E  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 29133  002990  0E01               	movlw	1
 29134  002992  EC00  F04A         	call	_wait_one_pulse
 29135                           
 29136                           ;keyboard.c: 1004: if(note_off_was_sent == 0) {key_press_release_note_off();}
 29137  002996  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 29138  002998  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 29139                           
 29140                           ;keyboard.c: 1005: TIMER_OVERFLOWS = 0;
 29141  00299C  0E00               	movlw	0
 29142  00299E  6E54               	movwf	_TIMER_OVERFLOWS,c
 29143  0029A0                     l1553:
 29144                           
 29145                           ;keyboard.c: 1006: }
 29146                           ;keyboard.c: 1009: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MO
      +                          DE == MODES)){
 29147  0029A0  0100               	movlb	0	; () banked
 29148  0029A2  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 29149  0029A4  B4D8               	btfsc	status,2,c
 29150  0029A6  D008               	goto	u25500
 29151                           
 29152                           ; BSR set to: 0
 29153  0029A8  0E02               	movlw	2
 29154  0029AA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29155  0029AC  B4D8               	btfsc	status,2,c
 29156  0029AE  D004               	goto	u25500
 29157                           
 29158                           ; BSR set to: 0
 29159  0029B0  0E03               	movlw	3
 29160  0029B2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29161  0029B4  A4D8               	btfss	status,2,c
 29162  0029B6  D003               	goto	l1555
 29163  0029B8                     u25500:
 29164                           
 29165                           ; BSR set to: 0
 29166                           ;keyboard.c: 1010: delete_notes_from_arpeggio(temp_pitch);
 29167                           
 29168                           ; BSR set to: 0
 29169  0029B8  5185               	movf	playThisNote8@temp_pitch& (0+255),w,b
 29170  0029BA  EC74  F049         	call	_delete_notes_from_arpeggio
 29171  0029BE                     l1555:
 29172                           
 29173                           ;keyboard.c: 1011: }
 29174                           ;keyboard.c: 1013: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 29175  0029BE  C0E6  F080         	movff	_parallel,??_playThisNote8
 29176  0029C2  0100               	movlb	0	; () banked
 29177  0029C4  6B81               	clrf	(??_playThisNote8+1)& (0+255),b
 29178  0029C6  BF80               	btfsc	??_playThisNote8& (0+255),7,b
 29179  0029C8  0781               	decf	(??_playThisNote8+1)& (0+255),f,b
 29180  0029CA  5185               	movf	playThisNote8@temp_pitch& (0+255),w,b
 29181  0029CC  6F82               	movwf	(??_playThisNote8+2)& (0+255),b
 29182  0029CE  6B83               	clrf	(??_playThisNote8+3)& (0+255),b
 29183  0029D0  5180               	movf	??_playThisNote8& (0+255),w,b
 29184  0029D2  1982               	xorwf	(??_playThisNote8+2)& (0+255),w,b
 29185  0029D4  E106               	bnz	l17419
 29186  0029D6  5181               	movf	(??_playThisNote8+1)& (0+255),w,b
 29187  0029D8  1983               	xorwf	(??_playThisNote8+3)& (0+255),w,b
 29188  0029DA  A4D8               	btfss	status,2,c
 29189  0029DC  D002               	goto	l1558
 29190                           
 29191                           ; BSR set to: 0
 29192  0029DE  0E00               	movlw	0
 29193  0029E0  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29194  0029E2                     l1558:
 29195  0029E2                     l17419:
 29196                           
 29197                           ; BSR set to: 0
 29198                           ;keyboard.c: 1018: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 29199  0029E2  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 29200                           
 29201                           ; BSR set to: 0
 29202  0029E4  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29203  0029E6  D001               	goto	l1559
 29204                           
 29205                           ; BSR set to: 0
 29206                           ;keyboard.c: 1019: LATCH = 1;
 29207  0029E8  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 29208  0029EA                     l1559:
 29209                           
 29210                           ; BSR set to: 0
 29211                           ;keyboard.c: 1020: }
 29212                           ;keyboard.c: 1025: if(((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_M
      +                          ODE == MODES)) && (UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 29213                           
 29214                           ; BSR set to: 0
 29215  0029EA  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 29216  0029EC  B4D8               	btfsc	status,2,c
 29217  0029EE  D008               	goto	u25560
 29218                           
 29219                           ; BSR set to: 0
 29220  0029F0  0E02               	movlw	2
 29221  0029F2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29222  0029F4  B4D8               	btfsc	status,2,c
 29223  0029F6  D004               	goto	u25560
 29224                           
 29225                           ; BSR set to: 0
 29226  0029F8  0E03               	movlw	3
 29227  0029FA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29228  0029FC  A4D8               	btfss	status,2,c
 29229  0029FE  D007               	goto	l1560
 29230  002A00                     u25560:
 29231                           
 29232                           ; BSR set to: 0
 29233  002A00  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29234                           
 29235                           ; BSR set to: 0
 29236  002A02  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29237  002A04  D004               	goto	l1560
 29238                           
 29239                           ; BSR set to: 0
 29240                           ;keyboard.c: 1026: NUM_NOTES_PRESSED = 0;
 29241  002A06  0E00               	movlw	0
 29242  002A08  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29243                           
 29244                           ;keyboard.c: 1027: ARRAY_INDEX = 0;
 29245  002A0A  0E00               	movlw	0
 29246  002A0C  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 29247  002A0E                     l1560:
 29248                           
 29249                           ; BSR set to: 0
 29250                           ;keyboard.c: 1028: }
 29251                           ;keyboard.c: 1031: if((KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) | (KEYBOARD_MODE == DIATON
      +                          IC_TRIAD_MINOR) | (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) |(KEYBOARD_MODE == DIATONIC_7TH_
      +                          MINOR) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_pressed == 1)){
 29252                           
 29253                           ; BSR set to: 0
 29254  002A0E  0E07               	movlw	7
 29255  002A10  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29256  002A12  B4D8               	btfsc	status,2,c
 29257  002A14  D00C               	goto	u25620
 29258                           
 29259                           ; BSR set to: 0
 29260  002A16  0E08               	movlw	8
 29261  002A18  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29262  002A1A  B4D8               	btfsc	status,2,c
 29263  002A1C  D008               	goto	u25620
 29264                           
 29265                           ; BSR set to: 0
 29266  002A1E  0E0A               	movlw	10
 29267  002A20  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29268  002A22  B4D8               	btfsc	status,2,c
 29269  002A24  D004               	goto	u25620
 29270                           
 29271                           ; BSR set to: 0
 29272  002A26  0E0B               	movlw	11
 29273  002A28  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29274  002A2A  A4D8               	btfss	status,2,c
 29275  002A2C  D00A               	goto	l1563
 29276  002A2E                     u25620:
 29277                           
 29278                           ; BSR set to: 0
 29279  002A2E  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29280  002A30  D002               	goto	u25640
 29281                           
 29282                           ; BSR set to: 0
 29283  002A32  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29284  002A34  D006               	goto	l1563
 29285  002A36                     u25640:
 29286                           
 29287                           ; BSR set to: 0
 29288  002A36  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29289  002A38  D004               	goto	l1563
 29290                           
 29291                           ; BSR set to: 0
 29292                           ;keyboard.c: 1032: NUM_NOTES_PRESSED = 0;
 29293  002A3A  0E00               	movlw	0
 29294  002A3C  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29295                           
 29296                           ;keyboard.c: 1033: ARRAY_INDEX = 0;
 29297  002A3E  0E00               	movlw	0
 29298  002A40  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 29299  002A42                     l1563:
 29300                           
 29301                           ; BSR set to: 0
 29302                           ;keyboard.c: 1034: }
 29303                           ;keyboard.c: 1037: finish_arpeggio_setup();
 29304                           
 29305                           ; BSR set to: 0
 29306  002A42  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 29307                           
 29308                           ;keyboard.c: 1040: TMR0ON = 1;
 29309  002A46  8ED5               	bsf	4053,7,c	;volatile
 29310  002A48                     l1552:
 29311                           
 29312                           ;keyboard.c: 1041: }
 29313                           ;keyboard.c: 1042: }
 29314                           ;keyboard.c: 1044: if(KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) {
 29315  002A48  0E07               	movlw	7
 29316  002A4A  0100               	movlb	0	; () banked
 29317  002A4C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29318  002A4E  A4D8               	btfss	status,2,c
 29319  002A50  D005               	goto	l1568
 29320                           
 29321                           ; BSR set to: 0
 29322                           ;keyboard.c: 1045: playDiatonicTriadMajor(pitch, index);
 29323  002A52  C07F  F077         	movff	playThisNote8@index,playDiatonicTriadMajor@index
 29324  002A56  5184               	movf	playThisNote8@pitch& (0+255),w,b
 29325  002A58  EC7A  F02B         	call	_playDiatonicTriadMajor
 29326  002A5C                     l1568:
 29327                           
 29328                           ;keyboard.c: 1046: }
 29329                           ;keyboard.c: 1047: if(KEYBOARD_MODE == DIATONIC_TRIAD_MINOR) {
 29330  002A5C  0E08               	movlw	8
 29331  002A5E  0100               	movlb	0	; () banked
 29332  002A60  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29333  002A62  A4D8               	btfss	status,2,c
 29334  002A64  D005               	goto	l1569
 29335                           
 29336                           ; BSR set to: 0
 29337                           ;keyboard.c: 1048: playDiatonicTriadMinor(pitch, index);
 29338  002A66  C07F  F077         	movff	playThisNote8@index,playDiatonicTriadMinor@index
 29339  002A6A  5184               	movf	playThisNote8@pitch& (0+255),w,b
 29340  002A6C  ECC7  F022         	call	_playDiatonicTriadMinor
 29341  002A70                     l1569:
 29342                           
 29343                           ;keyboard.c: 1049: }
 29344                           ;keyboard.c: 1050: if(KEYBOARD_MODE == DIATONIC_7TH_MAJOR) {
 29345  002A70  0E0A               	movlw	10
 29346  002A72  0100               	movlb	0	; () banked
 29347  002A74  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29348  002A76  A4D8               	btfss	status,2,c
 29349  002A78  D005               	goto	l1570
 29350                           
 29351                           ; BSR set to: 0
 29352                           ;keyboard.c: 1051: playDiatonicSeventhMajor(pitch, index);
 29353  002A7A  C07F  F077         	movff	playThisNote8@index,playDiatonicSeventhMajor@index
 29354  002A7E  5184               	movf	playThisNote8@pitch& (0+255),w,b
 29355  002A80  ECB1  F02A         	call	_playDiatonicSeventhMajor
 29356  002A84                     l1570:
 29357                           
 29358                           ;keyboard.c: 1052: }
 29359                           ;keyboard.c: 1053: if(KEYBOARD_MODE == DIATONIC_7TH_MINOR) {
 29360  002A84  0E0B               	movlw	11
 29361  002A86  0100               	movlb	0	; () banked
 29362  002A88  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29363  002A8A  A4D8               	btfss	status,2,c
 29364  002A8C  0012               	return	
 29365                           
 29366                           ; BSR set to: 0
 29367                           ;keyboard.c: 1054: playDiatonicSeventhMinor(pitch, index);
 29368  002A8E  C07F  F077         	movff	playThisNote8@index,playDiatonicSeventhMinor@index
 29369  002A92  5184               	movf	playThisNote8@pitch& (0+255),w,b
 29370  002A94  ECF6  F023         	call	_playDiatonicSeventhMinor
 29371  002A98  0012               	return	
 29372  002A9A                     __end_of_playThisNote8:
 29373                           	opt stack 0
 29374                           tblptru	equ	0xFF8
 29375                           tblptrh	equ	0xFF7
 29376                           tblptrl	equ	0xFF6
 29377                           tablat	equ	0xFF5
 29378                           prodh	equ	0xFF4
 29379                           prodl	equ	0xFF3
 29380                           intcon	equ	0xFF2
 29381                           intcon2	equ	0xFF1
 29382                           postinc0	equ	0xFEE
 29383                           wreg	equ	0xFE8
 29384                           indf1	equ	0xFE7
 29385                           postdec1	equ	0xFE5
 29386                           fsr1h	equ	0xFE2
 29387                           fsr1l	equ	0xFE1
 29388                           indf2	equ	0xFDF
 29389                           postinc2	equ	0xFDE
 29390                           plusw2	equ	0xFDB
 29391                           fsr2h	equ	0xFDA
 29392                           fsr2l	equ	0xFD9
 29393                           status	equ	0xFD8
 29394                           
 29395 ;; *************** function _playDiatonicTriadMinor *****************
 29396 ;; Defined at:
 29397 ;;		line 1198 in file "keyboard.c"
 29398 ;; Parameters:    Size  Location     Type
 29399 ;;  pitch           1    wreg     unsigned char 
 29400 ;;  index           1   23[BANK0 ] unsigned char 
 29401 ;; Auto vars:     Size  Location     Type
 29402 ;;  pitch           1   28[BANK0 ] unsigned char 
 29403 ;;  i               1   30[BANK0 ] unsigned char 
 29404 ;;  i               1   29[BANK0 ] unsigned char 
 29405 ;; Return value:  Size  Location     Type
 29406 ;;                  1    wreg      void 
 29407 ;; Registers used:
 29408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29409 ;; Tracked objects:
 29410 ;;		On entry : 0/0
 29411 ;;		On exit  : 0/0
 29412 ;;		Unchanged: 0/0
 29413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 29414 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29415 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29416 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29417 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29418 ;;Total ram usage:        8 bytes
 29419 ;; Hardware stack levels used:    1
 29420 ;; Hardware stack levels required when called:   10
 29421 ;; This function calls:
 29422 ;;		_finish_arpeggio_setup
 29423 ;;		_key_press_release_note_off
 29424 ;;		_noteOff
 29425 ;;		_noteOn
 29426 ;;		_wait_one_pulse
 29427 ;; This function is called by:
 29428 ;;		_playThisNote8
 29429 ;; This function uses a non-reentrant model
 29430 ;;
 29431                           
 29432                           	psect	text87
 29433  00458E                     __ptext87:
 29434                           	opt stack 0
 29435  00458E                     _playDiatonicTriadMinor:
 29436                           	opt stack 14
 29437                           
 29438                           ;incstack = 0
 29439                           ;playDiatonicTriadMinor@pitch stored from wreg
 29440  00458E  0100               	movlb	0	; () banked
 29441  004590  6F7C               	movwf	playDiatonicTriadMinor@pitch& (0+255),b
 29442                           
 29443                           ;keyboard.c: 1201: if(ARPEGGIO_ON == 0){
 29444  004592  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 29445  004594  D08B               	goto	u23990
 29446                           
 29447                           ;keyboard.c: 1202: for(unsigned char i = 0; i<3; i++){
 29448  004596  0E00               	movlw	0
 29449  004598  0100               	movlb	0	; () banked
 29450  00459A  6F7D               	movwf	playDiatonicTriadMinor@i& (0+255),b
 29451  00459C                     l16779:
 29452                           
 29453                           ; BSR set to: 0
 29454  00459C  0E02               	movlw	2
 29455  00459E  657D               	cpfsgt	playDiatonicTriadMinor@i& (0+255),b
 29456  0045A0  D001               	goto	l1622
 29457  0045A2  D084               	goto	u23990
 29458  0045A4                     l1622:
 29459                           
 29460                           ; BSR set to: 0
 29461                           ;keyboard.c: 1203: if(i==0){
 29462                           
 29463                           ; BSR set to: 0
 29464  0045A4  517D               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 29465  0045A6  A4D8               	btfss	status,2,c
 29466  0045A8  D025               	goto	l1626
 29467                           
 29468                           ; BSR set to: 0
 29469                           ;keyboard.c: 1204: if(ON_OFF == 1) {noteOn(channel,diatonic_minor[index][0],velocity);}
 29470  0045AA  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29471  0045AC  D010               	goto	l1625
 29472                           
 29473                           ; BSR set to: 0
 29474  0045AE  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29475  0045B0  0D03               	mullw	3
 29476  0045B2  0EE3               	movlw	low _diatonic_minor
 29477  0045B4  24F3               	addwf	prodl,w,c
 29478  0045B6  6EF6               	movwf	tblptrl,c
 29479  0045B8  0EF2               	movlw	high _diatonic_minor
 29480  0045BA  20F4               	addwfc	prodh,w,c
 29481  0045BC  6EF7               	movwf	tblptrh,c
 29482  0045BE                     	if	0	;There are less than 3 active tblptr bytes
 29483  0045BE                     	endif
 29484  0045BE  0008               	tblrd		*
 29485  0045C0  CFF5 F06E          	movff	tablat,noteOn@pitch
 29486  0045C4  C0FD  F06F         	movff	_velocity,noteOn@velocity
 29487  0045C8  51F6               	movf	_channel& (0+255),w,b
 29488  0045CA  ECD6  F044         	call	_noteOn
 29489  0045CE                     l1625:
 29490                           
 29491                           ;keyboard.c: 1205: if(ON_OFF == 0) {noteOff(channel,diatonic_minor[index][0],velocity);}
 29492  0045CE  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29493  0045D0  D011               	goto	l1626
 29494  0045D2  0100               	movlb	0	; () banked
 29495  0045D4  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29496  0045D6  0D03               	mullw	3
 29497  0045D8  0EE3               	movlw	low _diatonic_minor
 29498  0045DA  24F3               	addwf	prodl,w,c
 29499  0045DC  6EF6               	movwf	tblptrl,c
 29500  0045DE  0EF2               	movlw	high _diatonic_minor
 29501  0045E0  20F4               	addwfc	prodh,w,c
 29502  0045E2  6EF7               	movwf	tblptrh,c
 29503  0045E4                     	if	0	;There are less than 3 active tblptr bytes
 29504  0045E4                     	endif
 29505  0045E4  0008               	tblrd		*
 29506  0045E6  CFF5 F06B          	movff	tablat,noteOff@pitch
 29507  0045EA  C0FD  F06C         	movff	_velocity,noteOff@velocity
 29508  0045EE  51F6               	movf	_channel& (0+255),w,b
 29509  0045F0  ECFD  F047         	call	_noteOff
 29510  0045F4                     l1626:
 29511                           
 29512                           ;keyboard.c: 1206: }
 29513                           ;keyboard.c: 1207: if(i>0){
 29514  0045F4  0100               	movlb	0	; () banked
 29515  0045F6  517D               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 29516  0045F8  B4D8               	btfsc	status,2,c
 29517  0045FA  D055               	goto	l1629
 29518                           
 29519                           ; BSR set to: 0
 29520                           ;keyboard.c: 1208: if(ON_OFF == 1) noteOn(channel,diatonic_minor[index][0] + diatonic_mi
      +                          nor[index][i],velocity);
 29521  0045FC  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29522  0045FE  D028               	goto	l1628
 29523                           
 29524                           ; BSR set to: 0
 29525  004600  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29526  004602  0D03               	mullw	3
 29527  004604  0EE3               	movlw	low _diatonic_minor
 29528  004606  6F78               	movwf	??_playDiatonicTriadMinor& (0+255),b
 29529  004608  0EF2               	movlw	high _diatonic_minor
 29530  00460A  6F79               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 29531  00460C  50F3               	movf	prodl,w,c
 29532  00460E  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29533  004610  50F4               	movf	prodh,w,c
 29534  004612  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29535  004614  517D               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 29536  004616  0D01               	mullw	1
 29537  004618  50F3               	movf	prodl,w,c
 29538  00461A  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29539  00461C  50F4               	movf	prodh,w,c
 29540  00461E  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29541  004620  C078  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 29542  004624  C079  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 29543  004628                     	if	0	;tblptru may be non-zero
 29544  004628                     	endif
 29545  004628                     	if	0	;tblptru may be non-zero
 29546  004628                     	endif
 29547  004628  0008               	tblrd		*
 29548  00462A  CFF5 F07A          	movff	tablat,??_playDiatonicTriadMinor+2
 29549  00462E  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29550  004630  0D03               	mullw	3
 29551  004632  0EE3               	movlw	low _diatonic_minor
 29552  004634  24F3               	addwf	prodl,w,c
 29553  004636  6EF6               	movwf	tblptrl,c
 29554  004638  0EF2               	movlw	high _diatonic_minor
 29555  00463A  20F4               	addwfc	prodh,w,c
 29556  00463C  6EF7               	movwf	tblptrh,c
 29557  00463E                     	if	0	;There are less than 3 active tblptr bytes
 29558  00463E                     	endif
 29559  00463E  0008               	tblrd		*
 29560  004640  50F5               	movf	tablat,w,c
 29561  004642  257A               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 29562  004644  6F6E               	movwf	noteOn@pitch& (0+255),b
 29563  004646  C0FD  F06F         	movff	_velocity,noteOn@velocity
 29564  00464A  51F6               	movf	_channel& (0+255),w,b
 29565  00464C  ECD6  F044         	call	_noteOn
 29566  004650                     l1628:
 29567                           
 29568                           ;keyboard.c: 1209: if(ON_OFF == 0) noteOff(channel,diatonic_minor[index][0] + diatonic_m
      +                          inor[index][i],velocity);
 29569  004650  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29570  004652  D029               	goto	l1629
 29571  004654  0100               	movlb	0	; () banked
 29572  004656  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29573  004658  0D03               	mullw	3
 29574  00465A  0EE3               	movlw	low _diatonic_minor
 29575  00465C  6F78               	movwf	??_playDiatonicTriadMinor& (0+255),b
 29576  00465E  0EF2               	movlw	high _diatonic_minor
 29577  004660  6F79               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 29578  004662  50F3               	movf	prodl,w,c
 29579  004664  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29580  004666  50F4               	movf	prodh,w,c
 29581  004668  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29582  00466A  517D               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 29583  00466C  0D01               	mullw	1
 29584  00466E  50F3               	movf	prodl,w,c
 29585  004670  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29586  004672  50F4               	movf	prodh,w,c
 29587  004674  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29588  004676  C078  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 29589  00467A  C079  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 29590  00467E                     	if	0	;tblptru may be non-zero
 29591  00467E                     	endif
 29592  00467E                     	if	0	;tblptru may be non-zero
 29593  00467E                     	endif
 29594  00467E  0008               	tblrd		*
 29595  004680  CFF5 F07A          	movff	tablat,??_playDiatonicTriadMinor+2
 29596  004684  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29597  004686  0D03               	mullw	3
 29598  004688  0EE3               	movlw	low _diatonic_minor
 29599  00468A  24F3               	addwf	prodl,w,c
 29600  00468C  6EF6               	movwf	tblptrl,c
 29601  00468E  0EF2               	movlw	high _diatonic_minor
 29602  004690  20F4               	addwfc	prodh,w,c
 29603  004692  6EF7               	movwf	tblptrh,c
 29604  004694                     	if	0	;There are less than 3 active tblptr bytes
 29605  004694                     	endif
 29606  004694  0008               	tblrd		*
 29607  004696  50F5               	movf	tablat,w,c
 29608  004698  257A               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 29609  00469A  6F6B               	movwf	noteOff@pitch& (0+255),b
 29610  00469C  C0FD  F06C         	movff	_velocity,noteOff@velocity
 29611  0046A0  51F6               	movf	_channel& (0+255),w,b
 29612  0046A2  ECFD  F047         	call	_noteOff
 29613  0046A6                     l1629:
 29614  0046A6  0100               	movlb	0	; () banked
 29615  0046A8  2B7D               	incf	playDiatonicTriadMinor@i& (0+255),f,b
 29616  0046AA  D778               	goto	l16779
 29617  0046AC                     u23990:
 29618                           
 29619                           ;keyboard.c: 1210: }
 29620                           ;keyboard.c: 1211: }
 29621                           ;keyboard.c: 1212: }
 29622                           ;keyboard.c: 1215: if(ARPEGGIO_ON == 1){
 29623                           
 29624                           ; BSR set to: 0
 29625  0046AC  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 29626  0046AE  0012               	return	
 29627                           
 29628                           ;keyboard.c: 1216: if(ON_OFF == 1) {
 29629  0046B0  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29630  0046B2  D066               	goto	l1631
 29631                           
 29632                           ;keyboard.c: 1218: TMR0ON = 0;
 29633  0046B4  9ED5               	bcf	4053,7,c	;volatile
 29634                           
 29635                           ;keyboard.c: 1220: parallel = pitch;
 29636  0046B6  C07C  F0E6         	movff	playDiatonicTriadMinor@pitch,_parallel
 29637                           
 29638                           ;keyboard.c: 1223: if(NUM_NOTES_PRESSED > 0){
 29639  0046BA  0100               	movlb	0	; () banked
 29640  0046BC  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 29641  0046BE  B4D8               	btfsc	status,2,c
 29642  0046C0  D00A               	goto	l1632
 29643                           
 29644                           ; BSR set to: 0
 29645                           ;keyboard.c: 1224: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 29646  0046C2  0E00               	movlw	0
 29647  0046C4  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 29648  0046C6  0E01               	movlw	1
 29649  0046C8  EC00  F04A         	call	_wait_one_pulse
 29650                           
 29651                           ;keyboard.c: 1225: if(note_off_was_sent == 0) {key_press_release_note_off();}
 29652  0046CC  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 29653  0046CE  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 29654                           
 29655                           ;keyboard.c: 1226: TIMER_OVERFLOWS = 0;
 29656  0046D2  0E00               	movlw	0
 29657  0046D4  6E54               	movwf	_TIMER_OVERFLOWS,c
 29658  0046D6                     l1632:
 29659                           
 29660                           ;keyboard.c: 1227: }
 29661                           ;keyboard.c: 1229: for(unsigned char i = 0; i<3; i++){
 29662  0046D6  0E00               	movlw	0
 29663  0046D8  0100               	movlb	0	; () banked
 29664  0046DA  6F7E               	movwf	playDiatonicTriadMinor@i_1689& (0+255),b
 29665  0046DC                     l16823:
 29666                           
 29667                           ; BSR set to: 0
 29668  0046DC  0E02               	movlw	2
 29669  0046DE  657E               	cpfsgt	playDiatonicTriadMinor@i_1689& (0+255),b
 29670  0046E0  D001               	goto	l1634
 29671  0046E2  D046               	goto	u24070
 29672  0046E4                     l1634:
 29673                           
 29674                           ; BSR set to: 0
 29675                           ;keyboard.c: 1230: if(i==0){ARPEGGIO[i] = diatonic_minor[index][0];}
 29676                           
 29677                           ; BSR set to: 0
 29678  0046E4  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29679  0046E6  A4D8               	btfss	status,2,c
 29680  0046E8  D013               	goto	l1636
 29681                           
 29682                           ; BSR set to: 0
 29683  0046EA  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29684  0046EC  0D03               	mullw	3
 29685  0046EE  0EE3               	movlw	low _diatonic_minor
 29686  0046F0  24F3               	addwf	prodl,w,c
 29687  0046F2  6EF6               	movwf	tblptrl,c
 29688  0046F4  0EF2               	movlw	high _diatonic_minor
 29689  0046F6  20F4               	addwfc	prodh,w,c
 29690  0046F8  6EF7               	movwf	tblptrh,c
 29691  0046FA                     	if	0	;There are less than 3 active tblptr bytes
 29692  0046FA                     	endif
 29693  0046FA  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29694  0046FC  0D01               	mullw	1
 29695  0046FE  0E72               	movlw	low _ARPEGGIO
 29696  004700  24F3               	addwf	prodl,w,c
 29697  004702  6ED9               	movwf	fsr2l,c
 29698  004704  0E01               	movlw	high _ARPEGGIO
 29699  004706  20F4               	addwfc	prodh,w,c
 29700  004708  6EDA               	movwf	fsr2h,c
 29701  00470A  0008               	tblrd		*
 29702  00470C  CFF5 FFDF          	movff	tablat,indf2
 29703  004710                     l1636:
 29704                           
 29705                           ; BSR set to: 0
 29706                           ;keyboard.c: 1231: if(i>0){ARPEGGIO[i] = diatonic_minor[index][0] + diatonic_minor[index
      +                          ][i];}
 29707                           
 29708                           ; BSR set to: 0
 29709  004710  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29710  004712  B4D8               	btfsc	status,2,c
 29711  004714  D02B               	goto	l1637
 29712                           
 29713                           ; BSR set to: 0
 29714  004716  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29715  004718  0D01               	mullw	1
 29716  00471A  0E72               	movlw	low _ARPEGGIO
 29717  00471C  24F3               	addwf	prodl,w,c
 29718  00471E  6ED9               	movwf	fsr2l,c
 29719  004720  0E01               	movlw	high _ARPEGGIO
 29720  004722  20F4               	addwfc	prodh,w,c
 29721  004724  6EDA               	movwf	fsr2h,c
 29722  004726  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29723  004728  0D03               	mullw	3
 29724  00472A  0EE3               	movlw	low _diatonic_minor
 29725  00472C  6F78               	movwf	??_playDiatonicTriadMinor& (0+255),b
 29726  00472E  0EF2               	movlw	high _diatonic_minor
 29727  004730  6F79               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 29728  004732  50F3               	movf	prodl,w,c
 29729  004734  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29730  004736  50F4               	movf	prodh,w,c
 29731  004738  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29732  00473A  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29733  00473C  0D01               	mullw	1
 29734  00473E  50F3               	movf	prodl,w,c
 29735  004740  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29736  004742  50F4               	movf	prodh,w,c
 29737  004744  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29738  004746  C078  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 29739  00474A  C079  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 29740  00474E                     	if	0	;tblptru may be non-zero
 29741  00474E                     	endif
 29742  00474E                     	if	0	;tblptru may be non-zero
 29743  00474E                     	endif
 29744  00474E  0008               	tblrd		*
 29745  004750  CFF5 F07A          	movff	tablat,??_playDiatonicTriadMinor+2
 29746  004754  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29747  004756  0D03               	mullw	3
 29748  004758  0EE3               	movlw	low _diatonic_minor
 29749  00475A  24F3               	addwf	prodl,w,c
 29750  00475C  6EF6               	movwf	tblptrl,c
 29751  00475E  0EF2               	movlw	high _diatonic_minor
 29752  004760  20F4               	addwfc	prodh,w,c
 29753  004762  6EF7               	movwf	tblptrh,c
 29754  004764                     	if	0	;There are less than 3 active tblptr bytes
 29755  004764                     	endif
 29756  004764  0008               	tblrd		*
 29757  004766  50F5               	movf	tablat,w,c
 29758  004768  257A               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 29759  00476A  6EDF               	movwf	indf2,c
 29760  00476C                     l1637:
 29761                           
 29762                           ; BSR set to: 0
 29763                           
 29764                           ; BSR set to: 0
 29765  00476C  2B7E               	incf	playDiatonicTriadMinor@i_1689& (0+255),f,b
 29766  00476E  D7B6               	goto	l16823
 29767  004770                     u24070:
 29768                           
 29769                           ; BSR set to: 0
 29770                           ;keyboard.c: 1232: }
 29771                           ;keyboard.c: 1234: NUM_NOTES_PRESSED = 3;
 29772                           
 29773                           ; BSR set to: 0
 29774  004770  0E03               	movlw	3
 29775  004772  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29776                           
 29777                           ; BSR set to: 0
 29778                           ;keyboard.c: 1237: if(LATCH == 0) {latch_was_pressed = 0;}
 29779  004774  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 29780                           
 29781                           ; BSR set to: 0
 29782  004776  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29783                           
 29784                           ; BSR set to: 0
 29785                           ;keyboard.c: 1240: finish_arpeggio_setup();
 29786                           
 29787                           ; BSR set to: 0
 29788  004778  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 29789                           
 29790                           ;keyboard.c: 1242: TMR0ON = 1;
 29791  00477C  8ED5               	bsf	4053,7,c	;volatile
 29792                           
 29793                           ;keyboard.c: 1244: return;
 29794  00477E  0012               	return	
 29795  004780                     l1631:
 29796                           
 29797                           ;keyboard.c: 1245: }
 29798                           ;keyboard.c: 1247: if((ON_OFF == 0) && (LATCH == 0)) {
 29799  004780  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29800  004782  0012               	return	
 29801  004784  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 29802  004786  0012               	return	
 29803                           
 29804                           ;keyboard.c: 1249: if(NUM_NOTES_PRESSED > 0){
 29805  004788  0100               	movlb	0	; () banked
 29806  00478A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 29807  00478C  B4D8               	btfsc	status,2,c
 29808  00478E  D00A               	goto	l1641
 29809                           
 29810                           ; BSR set to: 0
 29811                           ;keyboard.c: 1250: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 29812  004790  0E00               	movlw	0
 29813  004792  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 29814  004794  0E01               	movlw	1
 29815  004796  EC00  F04A         	call	_wait_one_pulse
 29816                           
 29817                           ;keyboard.c: 1251: if(note_off_was_sent == 0) {key_press_release_note_off();}
 29818  00479A  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 29819  00479C  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 29820                           
 29821                           ;keyboard.c: 1252: TIMER_OVERFLOWS = 0;
 29822  0047A0  0E00               	movlw	0
 29823  0047A2  6E54               	movwf	_TIMER_OVERFLOWS,c
 29824  0047A4                     l1641:
 29825                           
 29826                           ;keyboard.c: 1253: }
 29827                           ;keyboard.c: 1255: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 29828  0047A4  C0E6  F078         	movff	_parallel,??_playDiatonicTriadMinor
 29829  0047A8  0100               	movlb	0	; () banked
 29830  0047AA  6B79               	clrf	(??_playDiatonicTriadMinor+1)& (0+255),b
 29831  0047AC  BF78               	btfsc	??_playDiatonicTriadMinor& (0+255),7,b
 29832  0047AE  0779               	decf	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29833  0047B0  517C               	movf	playDiatonicTriadMinor@pitch& (0+255),w,b
 29834  0047B2  6F7A               	movwf	(??_playDiatonicTriadMinor+2)& (0+255),b
 29835  0047B4  6B7B               	clrf	(??_playDiatonicTriadMinor+3)& (0+255),b
 29836  0047B6  5178               	movf	??_playDiatonicTriadMinor& (0+255),w,b
 29837  0047B8  197A               	xorwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 29838  0047BA  E106               	bnz	l16867
 29839  0047BC  5179               	movf	(??_playDiatonicTriadMinor+1)& (0+255),w,b
 29840  0047BE  197B               	xorwf	(??_playDiatonicTriadMinor+3)& (0+255),w,b
 29841  0047C0  A4D8               	btfss	status,2,c
 29842  0047C2  D002               	goto	l1643
 29843                           
 29844                           ; BSR set to: 0
 29845  0047C4  0E00               	movlw	0
 29846  0047C6  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29847  0047C8                     l1643:
 29848  0047C8                     l16867:
 29849                           
 29850                           ; BSR set to: 0
 29851                           ;keyboard.c: 1257: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 29852  0047C8  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 29853                           
 29854                           ; BSR set to: 0
 29855  0047CA  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29856  0047CC  D001               	goto	l1644
 29857                           
 29858                           ; BSR set to: 0
 29859                           ;keyboard.c: 1258: LATCH = 1;
 29860  0047CE  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 29861  0047D0                     l1644:
 29862                           
 29863                           ; BSR set to: 0
 29864                           ;keyboard.c: 1259: }
 29865                           ;keyboard.c: 1262: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 29866  0047D0  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29867  0047D2  D002               	goto	u24170
 29868                           
 29869                           ; BSR set to: 0
 29870  0047D4  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29871  0047D6  D006               	goto	l1645
 29872  0047D8                     u24170:
 29873                           
 29874                           ; BSR set to: 0
 29875  0047D8  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29876  0047DA  D004               	goto	l1645
 29877                           
 29878                           ; BSR set to: 0
 29879                           ;keyboard.c: 1263: NUM_NOTES_PRESSED = 0;
 29880  0047DC  0E00               	movlw	0
 29881  0047DE  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29882                           
 29883                           ;keyboard.c: 1264: ARRAY_INDEX = 0;
 29884  0047E0  0E00               	movlw	0
 29885  0047E2  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 29886  0047E4                     l1645:
 29887                           
 29888                           ; BSR set to: 0
 29889                           ;keyboard.c: 1265: }
 29890                           ;keyboard.c: 1268: finish_arpeggio_setup();
 29891                           
 29892                           ; BSR set to: 0
 29893  0047E4  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 29894                           
 29895                           ;keyboard.c: 1269: TMR0ON = 1;
 29896  0047E8  8ED5               	bsf	4053,7,c	;volatile
 29897                           
 29898                           ;keyboard.c: 1271: return;
 29899  0047EA  0012               	return	
 29900  0047EC                     __end_of_playDiatonicTriadMinor:
 29901                           	opt stack 0
 29902                           tblptru	equ	0xFF8
 29903                           tblptrh	equ	0xFF7
 29904                           tblptrl	equ	0xFF6
 29905                           tablat	equ	0xFF5
 29906                           prodh	equ	0xFF4
 29907                           prodl	equ	0xFF3
 29908                           intcon	equ	0xFF2
 29909                           intcon2	equ	0xFF1
 29910                           postinc0	equ	0xFEE
 29911                           wreg	equ	0xFE8
 29912                           indf1	equ	0xFE7
 29913                           postdec1	equ	0xFE5
 29914                           fsr1h	equ	0xFE2
 29915                           fsr1l	equ	0xFE1
 29916                           indf2	equ	0xFDF
 29917                           postinc2	equ	0xFDE
 29918                           plusw2	equ	0xFDB
 29919                           fsr2h	equ	0xFDA
 29920                           fsr2l	equ	0xFD9
 29921                           status	equ	0xFD8
 29922                           
 29923 ;; *************** function _playDiatonicTriadMajor *****************
 29924 ;; Defined at:
 29925 ;;		line 1058 in file "keyboard.c"
 29926 ;; Parameters:    Size  Location     Type
 29927 ;;  pitch           1    wreg     unsigned char 
 29928 ;;  index           1   23[BANK0 ] unsigned char 
 29929 ;; Auto vars:     Size  Location     Type
 29930 ;;  pitch           1   30[BANK0 ] unsigned char 
 29931 ;;  i               1   29[BANK0 ] unsigned char 
 29932 ;;  i               1   28[BANK0 ] unsigned char 
 29933 ;; Return value:  Size  Location     Type
 29934 ;;                  1    wreg      void 
 29935 ;; Registers used:
 29936 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29937 ;; Tracked objects:
 29938 ;;		On entry : 0/0
 29939 ;;		On exit  : 0/0
 29940 ;;		Unchanged: 0/0
 29941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 29942 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29943 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29944 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29945 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29946 ;;Total ram usage:        8 bytes
 29947 ;; Hardware stack levels used:    1
 29948 ;; Hardware stack levels required when called:   10
 29949 ;; This function calls:
 29950 ;;		_finish_arpeggio_setup
 29951 ;;		_key_press_release_note_off
 29952 ;;		_noteOff
 29953 ;;		_noteOn
 29954 ;;		_wait_one_pulse
 29955 ;; This function is called by:
 29956 ;;		_playThisNote8
 29957 ;; This function uses a non-reentrant model
 29958 ;;
 29959                           
 29960                           	psect	text88
 29961  0056F4                     __ptext88:
 29962                           	opt stack 0
 29963  0056F4                     _playDiatonicTriadMajor:
 29964                           	opt stack 14
 29965                           
 29966                           ;incstack = 0
 29967                           ;playDiatonicTriadMajor@pitch stored from wreg
 29968  0056F4  0100               	movlb	0	; () banked
 29969  0056F6  6F7E               	movwf	playDiatonicTriadMajor@pitch& (0+255),b
 29970                           
 29971                           ;keyboard.c: 1061: if(ARPEGGIO_ON == 0){
 29972  0056F8  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 29973  0056FA  D049               	goto	u23730
 29974                           
 29975                           ;keyboard.c: 1062: for(unsigned char i = 0; i<3; i++){
 29976  0056FC  0E00               	movlw	0
 29977  0056FE  0100               	movlb	0	; () banked
 29978  005700  6F7C               	movwf	playDiatonicTriadMajor@i& (0+255),b
 29979  005702                     l16693:
 29980                           
 29981                           ; BSR set to: 0
 29982  005702  0E02               	movlw	2
 29983  005704  657C               	cpfsgt	playDiatonicTriadMajor@i& (0+255),b
 29984  005706  D001               	goto	l1576
 29985  005708  D042               	goto	u23730
 29986  00570A                     l1576:
 29987                           
 29988                           ; BSR set to: 0
 29989                           ;keyboard.c: 1063: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_major[index][i],velo
      +                          city);}
 29990  00570A  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29991  00570C  D01D               	goto	l1578
 29992                           
 29993                           ; BSR set to: 0
 29994  00570E  5177               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 29995  005710  0D03               	mullw	3
 29996  005712  0E10               	movlw	low _diatonic_major
 29997  005714  6F78               	movwf	??_playDiatonicTriadMajor& (0+255),b
 29998  005716  0EF3               	movlw	high _diatonic_major
 29999  005718  6F79               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 30000  00571A  50F3               	movf	prodl,w,c
 30001  00571C  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 30002  00571E  50F4               	movf	prodh,w,c
 30003  005720  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30004  005722  517C               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 30005  005724  0D01               	mullw	1
 30006  005726  50F3               	movf	prodl,w,c
 30007  005728  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 30008  00572A  50F4               	movf	prodh,w,c
 30009  00572C  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30010  00572E  C078  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 30011  005732  C079  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 30012  005736                     	if	0	;tblptru may be non-zero
 30013  005736                     	endif
 30014  005736                     	if	0	;tblptru may be non-zero
 30015  005736                     	endif
 30016  005736  0008               	tblrd		*
 30017  005738  50F5               	movf	tablat,w,c
 30018  00573A  257E               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 30019  00573C  6F6E               	movwf	noteOn@pitch& (0+255),b
 30020  00573E  C0FD  F06F         	movff	_velocity,noteOn@velocity
 30021  005742  51F6               	movf	_channel& (0+255),w,b
 30022  005744  ECD6  F044         	call	_noteOn
 30023  005748                     l1578:
 30024                           
 30025                           ;keyboard.c: 1064: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_major[index][i],vel
      +                          ocity);}
 30026  005748  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30027  00574A  D01E               	goto	l1579
 30028  00574C  0100               	movlb	0	; () banked
 30029  00574E  5177               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 30030  005750  0D03               	mullw	3
 30031  005752  0E10               	movlw	low _diatonic_major
 30032  005754  6F78               	movwf	??_playDiatonicTriadMajor& (0+255),b
 30033  005756  0EF3               	movlw	high _diatonic_major
 30034  005758  6F79               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 30035  00575A  50F3               	movf	prodl,w,c
 30036  00575C  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 30037  00575E  50F4               	movf	prodh,w,c
 30038  005760  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30039  005762  517C               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 30040  005764  0D01               	mullw	1
 30041  005766  50F3               	movf	prodl,w,c
 30042  005768  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 30043  00576A  50F4               	movf	prodh,w,c
 30044  00576C  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30045  00576E  C078  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 30046  005772  C079  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 30047  005776                     	if	0	;tblptru may be non-zero
 30048  005776                     	endif
 30049  005776                     	if	0	;tblptru may be non-zero
 30050  005776                     	endif
 30051  005776  0008               	tblrd		*
 30052  005778  50F5               	movf	tablat,w,c
 30053  00577A  257E               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 30054  00577C  6F6B               	movwf	noteOff@pitch& (0+255),b
 30055  00577E  C0FD  F06C         	movff	_velocity,noteOff@velocity
 30056  005782  51F6               	movf	_channel& (0+255),w,b
 30057  005784  ECFD  F047         	call	_noteOff
 30058  005788                     l1579:
 30059  005788  0100               	movlb	0	; () banked
 30060  00578A  2B7C               	incf	playDiatonicTriadMajor@i& (0+255),f,b
 30061  00578C  D7BA               	goto	l16693
 30062  00578E                     u23730:
 30063                           
 30064                           ;keyboard.c: 1065: }
 30065                           ;keyboard.c: 1066: }
 30066                           ;keyboard.c: 1069: if(ARPEGGIO_ON == 1){
 30067                           
 30068                           ; BSR set to: 0
 30069  00578E  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30070  005790  0012               	return	
 30071                           
 30072                           ;keyboard.c: 1070: if(ON_OFF == 1) {
 30073  005792  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30074  005794  D041               	goto	l1581
 30075                           
 30076                           ;keyboard.c: 1072: TMR0ON = 0;
 30077  005796  9ED5               	bcf	4053,7,c	;volatile
 30078                           
 30079                           ;keyboard.c: 1074: parallel = pitch;
 30080  005798  C07E  F0E6         	movff	playDiatonicTriadMajor@pitch,_parallel
 30081                           
 30082                           ;keyboard.c: 1077: if(NUM_NOTES_PRESSED > 0){
 30083  00579C  0100               	movlb	0	; () banked
 30084  00579E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30085  0057A0  B4D8               	btfsc	status,2,c
 30086  0057A2  D00A               	goto	l1582
 30087                           
 30088                           ; BSR set to: 0
 30089                           ;keyboard.c: 1078: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 30090  0057A4  0E00               	movlw	0
 30091  0057A6  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 30092  0057A8  0E01               	movlw	1
 30093  0057AA  EC00  F04A         	call	_wait_one_pulse
 30094                           
 30095                           ;keyboard.c: 1079: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30096  0057AE  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30097  0057B0  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 30098                           
 30099                           ;keyboard.c: 1080: TIMER_OVERFLOWS = 0;
 30100  0057B4  0E00               	movlw	0
 30101  0057B6  6E54               	movwf	_TIMER_OVERFLOWS,c
 30102  0057B8                     l1582:
 30103                           
 30104                           ;keyboard.c: 1081: }
 30105                           ;keyboard.c: 1083: for(unsigned char i = 0; i<3; i++){
 30106  0057B8  0E00               	movlw	0
 30107  0057BA  0100               	movlb	0	; () banked
 30108  0057BC  6F7D               	movwf	playDiatonicTriadMajor@i_1679& (0+255),b
 30109  0057BE                     l16723:
 30110                           
 30111                           ; BSR set to: 0
 30112  0057BE  0E02               	movlw	2
 30113  0057C0  657D               	cpfsgt	playDiatonicTriadMajor@i_1679& (0+255),b
 30114  0057C2  D001               	goto	l1584
 30115  0057C4  D022               	goto	u23790
 30116  0057C6                     l1584:
 30117                           
 30118                           ; BSR set to: 0
 30119                           ;keyboard.c: 1084: ARPEGGIO[i] = pitch + diatonic_major[index][i];
 30120                           
 30121                           ; BSR set to: 0
 30122  0057C6  517D               	movf	playDiatonicTriadMajor@i_1679& (0+255),w,b
 30123  0057C8  0D01               	mullw	1
 30124  0057CA  0E72               	movlw	low _ARPEGGIO
 30125  0057CC  24F3               	addwf	prodl,w,c
 30126  0057CE  6ED9               	movwf	fsr2l,c
 30127  0057D0  0E01               	movlw	high _ARPEGGIO
 30128  0057D2  20F4               	addwfc	prodh,w,c
 30129  0057D4  6EDA               	movwf	fsr2h,c
 30130  0057D6  5177               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 30131  0057D8  0D03               	mullw	3
 30132  0057DA  0E10               	movlw	low _diatonic_major
 30133  0057DC  6F78               	movwf	??_playDiatonicTriadMajor& (0+255),b
 30134  0057DE  0EF3               	movlw	high _diatonic_major
 30135  0057E0  6F79               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 30136  0057E2  50F3               	movf	prodl,w,c
 30137  0057E4  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 30138  0057E6  50F4               	movf	prodh,w,c
 30139  0057E8  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30140  0057EA  517D               	movf	playDiatonicTriadMajor@i_1679& (0+255),w,b
 30141  0057EC  0D01               	mullw	1
 30142  0057EE  50F3               	movf	prodl,w,c
 30143  0057F0  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 30144  0057F2  50F4               	movf	prodh,w,c
 30145  0057F4  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30146  0057F6  C078  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 30147  0057FA  C079  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 30148  0057FE                     	if	0	;tblptru may be non-zero
 30149  0057FE                     	endif
 30150  0057FE                     	if	0	;tblptru may be non-zero
 30151  0057FE                     	endif
 30152  0057FE  0008               	tblrd		*
 30153  005800  50F5               	movf	tablat,w,c
 30154  005802  257E               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 30155  005804  6EDF               	movwf	indf2,c
 30156                           
 30157                           ; BSR set to: 0
 30158  005806  2B7D               	incf	playDiatonicTriadMajor@i_1679& (0+255),f,b
 30159  005808  D7DA               	goto	l16723
 30160  00580A                     u23790:
 30161                           
 30162                           ; BSR set to: 0
 30163                           ;keyboard.c: 1085: }
 30164                           ;keyboard.c: 1087: NUM_NOTES_PRESSED = 3;
 30165                           
 30166                           ; BSR set to: 0
 30167  00580A  0E03               	movlw	3
 30168  00580C  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30169                           
 30170                           ; BSR set to: 0
 30171                           ;keyboard.c: 1090: if(LATCH == 0) {latch_was_pressed = 0;}
 30172  00580E  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 30173                           
 30174                           ; BSR set to: 0
 30175  005810  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30176                           
 30177                           ; BSR set to: 0
 30178                           ;keyboard.c: 1093: finish_arpeggio_setup();
 30179                           
 30180                           ; BSR set to: 0
 30181  005812  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 30182                           
 30183                           ;keyboard.c: 1095: TMR0ON = 1;
 30184  005816  8ED5               	bsf	4053,7,c	;volatile
 30185  005818                     l1581:
 30186                           
 30187                           ;keyboard.c: 1096: }
 30188                           ;keyboard.c: 1098: if((ON_OFF == 0) && (LATCH == 0)) {
 30189  005818  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30190  00581A  0012               	return	
 30191  00581C  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 30192  00581E  0012               	return	
 30193                           
 30194                           ;keyboard.c: 1100: if(NUM_NOTES_PRESSED > 0){
 30195  005820  0100               	movlb	0	; () banked
 30196  005822  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30197  005824  B4D8               	btfsc	status,2,c
 30198  005826  D00A               	goto	l1588
 30199                           
 30200                           ; BSR set to: 0
 30201                           ;keyboard.c: 1101: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 30202  005828  0E00               	movlw	0
 30203  00582A  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 30204  00582C  0E01               	movlw	1
 30205  00582E  EC00  F04A         	call	_wait_one_pulse
 30206                           
 30207                           ;keyboard.c: 1102: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30208  005832  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30209  005834  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 30210                           
 30211                           ;keyboard.c: 1103: TIMER_OVERFLOWS = 0;
 30212  005838  0E00               	movlw	0
 30213  00583A  6E54               	movwf	_TIMER_OVERFLOWS,c
 30214  00583C                     l1588:
 30215                           
 30216                           ;keyboard.c: 1104: }
 30217                           ;keyboard.c: 1106: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 30218  00583C  C0E6  F078         	movff	_parallel,??_playDiatonicTriadMajor
 30219  005840  0100               	movlb	0	; () banked
 30220  005842  6B79               	clrf	(??_playDiatonicTriadMajor+1)& (0+255),b
 30221  005844  BF78               	btfsc	??_playDiatonicTriadMajor& (0+255),7,b
 30222  005846  0779               	decf	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30223  005848  517E               	movf	playDiatonicTriadMajor@pitch& (0+255),w,b
 30224  00584A  6F7A               	movwf	(??_playDiatonicTriadMajor+2)& (0+255),b
 30225  00584C  6B7B               	clrf	(??_playDiatonicTriadMajor+3)& (0+255),b
 30226  00584E  5178               	movf	??_playDiatonicTriadMajor& (0+255),w,b
 30227  005850  197A               	xorwf	(??_playDiatonicTriadMajor+2)& (0+255),w,b
 30228  005852  E106               	bnz	l16761
 30229  005854  5179               	movf	(??_playDiatonicTriadMajor+1)& (0+255),w,b
 30230  005856  197B               	xorwf	(??_playDiatonicTriadMajor+3)& (0+255),w,b
 30231  005858  A4D8               	btfss	status,2,c
 30232  00585A  D002               	goto	l1590
 30233                           
 30234                           ; BSR set to: 0
 30235  00585C  0E00               	movlw	0
 30236  00585E  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30237  005860                     l1590:
 30238  005860                     l16761:
 30239                           
 30240                           ; BSR set to: 0
 30241                           ;keyboard.c: 1108: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 30242  005860  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 30243                           
 30244                           ; BSR set to: 0
 30245  005862  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30246  005864  D001               	goto	l1591
 30247                           
 30248                           ; BSR set to: 0
 30249                           ;keyboard.c: 1109: LATCH = 1;
 30250  005866  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 30251  005868                     l1591:
 30252                           
 30253                           ; BSR set to: 0
 30254                           ;keyboard.c: 1110: }
 30255                           ;keyboard.c: 1113: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 30256  005868  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30257  00586A  D002               	goto	u23890
 30258                           
 30259                           ; BSR set to: 0
 30260  00586C  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30261  00586E  D006               	goto	l1592
 30262  005870                     u23890:
 30263                           
 30264                           ; BSR set to: 0
 30265  005870  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30266  005872  D004               	goto	l1592
 30267                           
 30268                           ; BSR set to: 0
 30269                           ;keyboard.c: 1114: NUM_NOTES_PRESSED = 0;
 30270  005874  0E00               	movlw	0
 30271  005876  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30272                           
 30273                           ;keyboard.c: 1115: ARRAY_INDEX = 0;
 30274  005878  0E00               	movlw	0
 30275  00587A  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 30276  00587C                     l1592:
 30277                           
 30278                           ; BSR set to: 0
 30279                           ;keyboard.c: 1116: }
 30280                           ;keyboard.c: 1119: finish_arpeggio_setup();
 30281                           
 30282                           ; BSR set to: 0
 30283  00587C  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 30284                           
 30285                           ;keyboard.c: 1120: TMR0ON = 1;
 30286  005880  8ED5               	bsf	4053,7,c	;volatile
 30287  005882  0012               	return	
 30288  005884                     __end_of_playDiatonicTriadMajor:
 30289                           	opt stack 0
 30290                           tblptru	equ	0xFF8
 30291                           tblptrh	equ	0xFF7
 30292                           tblptrl	equ	0xFF6
 30293                           tablat	equ	0xFF5
 30294                           prodh	equ	0xFF4
 30295                           prodl	equ	0xFF3
 30296                           intcon	equ	0xFF2
 30297                           intcon2	equ	0xFF1
 30298                           postinc0	equ	0xFEE
 30299                           wreg	equ	0xFE8
 30300                           indf1	equ	0xFE7
 30301                           postdec1	equ	0xFE5
 30302                           fsr1h	equ	0xFE2
 30303                           fsr1l	equ	0xFE1
 30304                           indf2	equ	0xFDF
 30305                           postinc2	equ	0xFDE
 30306                           plusw2	equ	0xFDB
 30307                           fsr2h	equ	0xFDA
 30308                           fsr2l	equ	0xFD9
 30309                           status	equ	0xFD8
 30310                           
 30311 ;; *************** function _playDiatonicSeventhMinor *****************
 30312 ;; Defined at:
 30313 ;;		line 1276 in file "keyboard.c"
 30314 ;; Parameters:    Size  Location     Type
 30315 ;;  pitch           1    wreg     unsigned char 
 30316 ;;  index           1   23[BANK0 ] unsigned char 
 30317 ;; Auto vars:     Size  Location     Type
 30318 ;;  pitch           1   28[BANK0 ] unsigned char 
 30319 ;;  i               1   30[BANK0 ] unsigned char 
 30320 ;;  i               1   29[BANK0 ] unsigned char 
 30321 ;; Return value:  Size  Location     Type
 30322 ;;                  1    wreg      void 
 30323 ;; Registers used:
 30324 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30325 ;; Tracked objects:
 30326 ;;		On entry : 0/0
 30327 ;;		On exit  : 0/0
 30328 ;;		Unchanged: 0/0
 30329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 30330 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30331 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30332 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30333 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30334 ;;Total ram usage:        8 bytes
 30335 ;; Hardware stack levels used:    1
 30336 ;; Hardware stack levels required when called:   10
 30337 ;; This function calls:
 30338 ;;		_finish_arpeggio_setup
 30339 ;;		_key_press_release_note_off
 30340 ;;		_noteOff
 30341 ;;		_noteOn
 30342 ;;		_wait_one_pulse
 30343 ;; This function is called by:
 30344 ;;		_playThisNote8
 30345 ;; This function uses a non-reentrant model
 30346 ;;
 30347                           
 30348                           	psect	text89
 30349  0047EC                     __ptext89:
 30350                           	opt stack 0
 30351  0047EC                     _playDiatonicSeventhMinor:
 30352                           	opt stack 14
 30353                           
 30354                           ;incstack = 0
 30355                           ;playDiatonicSeventhMinor@pitch stored from wreg
 30356  0047EC  0100               	movlb	0	; () banked
 30357  0047EE  6F7C               	movwf	playDiatonicSeventhMinor@pitch& (0+255),b
 30358                           
 30359                           ;keyboard.c: 1279: if(ARPEGGIO_ON == 0){
 30360  0047F0  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30361  0047F2  D08B               	goto	u24490
 30362                           
 30363                           ;keyboard.c: 1280: for(unsigned char i = 0; i<4; i++){
 30364  0047F4  0E00               	movlw	0
 30365  0047F6  0100               	movlb	0	; () banked
 30366  0047F8  6F7D               	movwf	playDiatonicSeventhMinor@i& (0+255),b
 30367  0047FA                     l16975:
 30368                           
 30369                           ; BSR set to: 0
 30370  0047FA  0E03               	movlw	3
 30371  0047FC  657D               	cpfsgt	playDiatonicSeventhMinor@i& (0+255),b
 30372  0047FE  D001               	goto	l1651
 30373  004800  D084               	goto	u24490
 30374  004802                     l1651:
 30375                           
 30376                           ; BSR set to: 0
 30377                           ;keyboard.c: 1281: if(i==0){
 30378                           
 30379                           ; BSR set to: 0
 30380  004802  517D               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 30381  004804  A4D8               	btfss	status,2,c
 30382  004806  D025               	goto	l1655
 30383                           
 30384                           ; BSR set to: 0
 30385                           ;keyboard.c: 1282: if(ON_OFF == 1) {noteOn(channel,diatonic_seventh_minor[index][0],velo
      +                          city);}
 30386  004808  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30387  00480A  D010               	goto	l1654
 30388                           
 30389                           ; BSR set to: 0
 30390  00480C  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30391  00480E  0D04               	mullw	4
 30392  004810  0E6B               	movlw	low _diatonic_seventh_minor
 30393  004812  24F3               	addwf	prodl,w,c
 30394  004814  6EF6               	movwf	tblptrl,c
 30395  004816  0EF2               	movlw	high _diatonic_seventh_minor
 30396  004818  20F4               	addwfc	prodh,w,c
 30397  00481A  6EF7               	movwf	tblptrh,c
 30398  00481C                     	if	0	;There are less than 3 active tblptr bytes
 30399  00481C                     	endif
 30400  00481C  0008               	tblrd		*
 30401  00481E  CFF5 F06E          	movff	tablat,noteOn@pitch
 30402  004822  C0FD  F06F         	movff	_velocity,noteOn@velocity
 30403  004826  51F6               	movf	_channel& (0+255),w,b
 30404  004828  ECD6  F044         	call	_noteOn
 30405  00482C                     l1654:
 30406                           
 30407                           ;keyboard.c: 1283: if(ON_OFF == 0) {noteOff(channel,diatonic_seventh_minor[index][0],vel
      +                          ocity);}
 30408  00482C  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30409  00482E  D011               	goto	l1655
 30410  004830  0100               	movlb	0	; () banked
 30411  004832  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30412  004834  0D04               	mullw	4
 30413  004836  0E6B               	movlw	low _diatonic_seventh_minor
 30414  004838  24F3               	addwf	prodl,w,c
 30415  00483A  6EF6               	movwf	tblptrl,c
 30416  00483C  0EF2               	movlw	high _diatonic_seventh_minor
 30417  00483E  20F4               	addwfc	prodh,w,c
 30418  004840  6EF7               	movwf	tblptrh,c
 30419  004842                     	if	0	;There are less than 3 active tblptr bytes
 30420  004842                     	endif
 30421  004842  0008               	tblrd		*
 30422  004844  CFF5 F06B          	movff	tablat,noteOff@pitch
 30423  004848  C0FD  F06C         	movff	_velocity,noteOff@velocity
 30424  00484C  51F6               	movf	_channel& (0+255),w,b
 30425  00484E  ECFD  F047         	call	_noteOff
 30426  004852                     l1655:
 30427                           
 30428                           ;keyboard.c: 1284: }
 30429                           ;keyboard.c: 1285: if(i>0){
 30430  004852  0100               	movlb	0	; () banked
 30431  004854  517D               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 30432  004856  B4D8               	btfsc	status,2,c
 30433  004858  D055               	goto	l1658
 30434                           
 30435                           ; BSR set to: 0
 30436                           ;keyboard.c: 1286: if(ON_OFF == 1) noteOn(channel,diatonic_seventh_minor[index][0] + dia
      +                          tonic_seventh_minor[index][i],velocity);
 30437  00485A  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30438  00485C  D028               	goto	l1657
 30439                           
 30440                           ; BSR set to: 0
 30441  00485E  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30442  004860  0D04               	mullw	4
 30443  004862  0E6B               	movlw	low _diatonic_seventh_minor
 30444  004864  6F78               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 30445  004866  0EF2               	movlw	high _diatonic_seventh_minor
 30446  004868  6F79               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 30447  00486A  50F3               	movf	prodl,w,c
 30448  00486C  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30449  00486E  50F4               	movf	prodh,w,c
 30450  004870  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30451  004872  517D               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 30452  004874  0D01               	mullw	1
 30453  004876  50F3               	movf	prodl,w,c
 30454  004878  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30455  00487A  50F4               	movf	prodh,w,c
 30456  00487C  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30457  00487E  C078  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 30458  004882  C079  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 30459  004886                     	if	0	;tblptru may be non-zero
 30460  004886                     	endif
 30461  004886                     	if	0	;tblptru may be non-zero
 30462  004886                     	endif
 30463  004886  0008               	tblrd		*
 30464  004888  CFF5 F07A          	movff	tablat,??_playDiatonicSeventhMinor+2
 30465  00488C  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30466  00488E  0D04               	mullw	4
 30467  004890  0E6B               	movlw	low _diatonic_seventh_minor
 30468  004892  24F3               	addwf	prodl,w,c
 30469  004894  6EF6               	movwf	tblptrl,c
 30470  004896  0EF2               	movlw	high _diatonic_seventh_minor
 30471  004898  20F4               	addwfc	prodh,w,c
 30472  00489A  6EF7               	movwf	tblptrh,c
 30473  00489C                     	if	0	;There are less than 3 active tblptr bytes
 30474  00489C                     	endif
 30475  00489C  0008               	tblrd		*
 30476  00489E  50F5               	movf	tablat,w,c
 30477  0048A0  257A               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 30478  0048A2  6F6E               	movwf	noteOn@pitch& (0+255),b
 30479  0048A4  C0FD  F06F         	movff	_velocity,noteOn@velocity
 30480  0048A8  51F6               	movf	_channel& (0+255),w,b
 30481  0048AA  ECD6  F044         	call	_noteOn
 30482  0048AE                     l1657:
 30483                           
 30484                           ;keyboard.c: 1287: if(ON_OFF == 0) noteOff(channel,diatonic_seventh_minor[index][0] + di
      +                          atonic_seventh_minor[index][i],velocity);
 30485  0048AE  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30486  0048B0  D029               	goto	l1658
 30487  0048B2  0100               	movlb	0	; () banked
 30488  0048B4  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30489  0048B6  0D04               	mullw	4
 30490  0048B8  0E6B               	movlw	low _diatonic_seventh_minor
 30491  0048BA  6F78               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 30492  0048BC  0EF2               	movlw	high _diatonic_seventh_minor
 30493  0048BE  6F79               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 30494  0048C0  50F3               	movf	prodl,w,c
 30495  0048C2  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30496  0048C4  50F4               	movf	prodh,w,c
 30497  0048C6  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30498  0048C8  517D               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 30499  0048CA  0D01               	mullw	1
 30500  0048CC  50F3               	movf	prodl,w,c
 30501  0048CE  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30502  0048D0  50F4               	movf	prodh,w,c
 30503  0048D2  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30504  0048D4  C078  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 30505  0048D8  C079  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 30506  0048DC                     	if	0	;tblptru may be non-zero
 30507  0048DC                     	endif
 30508  0048DC                     	if	0	;tblptru may be non-zero
 30509  0048DC                     	endif
 30510  0048DC  0008               	tblrd		*
 30511  0048DE  CFF5 F07A          	movff	tablat,??_playDiatonicSeventhMinor+2
 30512  0048E2  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30513  0048E4  0D04               	mullw	4
 30514  0048E6  0E6B               	movlw	low _diatonic_seventh_minor
 30515  0048E8  24F3               	addwf	prodl,w,c
 30516  0048EA  6EF6               	movwf	tblptrl,c
 30517  0048EC  0EF2               	movlw	high _diatonic_seventh_minor
 30518  0048EE  20F4               	addwfc	prodh,w,c
 30519  0048F0  6EF7               	movwf	tblptrh,c
 30520  0048F2                     	if	0	;There are less than 3 active tblptr bytes
 30521  0048F2                     	endif
 30522  0048F2  0008               	tblrd		*
 30523  0048F4  50F5               	movf	tablat,w,c
 30524  0048F6  257A               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 30525  0048F8  6F6B               	movwf	noteOff@pitch& (0+255),b
 30526  0048FA  C0FD  F06C         	movff	_velocity,noteOff@velocity
 30527  0048FE  51F6               	movf	_channel& (0+255),w,b
 30528  004900  ECFD  F047         	call	_noteOff
 30529  004904                     l1658:
 30530  004904  0100               	movlb	0	; () banked
 30531  004906  2B7D               	incf	playDiatonicSeventhMinor@i& (0+255),f,b
 30532  004908  D778               	goto	l16975
 30533  00490A                     u24490:
 30534                           
 30535                           ;keyboard.c: 1288: }
 30536                           ;keyboard.c: 1289: }
 30537                           ;keyboard.c: 1290: }
 30538                           ;keyboard.c: 1293: if(ARPEGGIO_ON == 1){
 30539                           
 30540                           ; BSR set to: 0
 30541  00490A  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30542  00490C  0012               	return	
 30543                           
 30544                           ;keyboard.c: 1295: if(ON_OFF == 1) {
 30545  00490E  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30546  004910  D065               	goto	l1660
 30547                           
 30548                           ;keyboard.c: 1297: TMR0ON = 0;
 30549  004912  9ED5               	bcf	4053,7,c	;volatile
 30550                           
 30551                           ;keyboard.c: 1299: parallel = pitch;
 30552  004914  C07C  F0E6         	movff	playDiatonicSeventhMinor@pitch,_parallel
 30553                           
 30554                           ;keyboard.c: 1302: if(NUM_NOTES_PRESSED > 0){
 30555  004918  0100               	movlb	0	; () banked
 30556  00491A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30557  00491C  B4D8               	btfsc	status,2,c
 30558  00491E  D00A               	goto	l1661
 30559                           
 30560                           ; BSR set to: 0
 30561                           ;keyboard.c: 1303: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 30562  004920  0E00               	movlw	0
 30563  004922  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 30564  004924  0E01               	movlw	1
 30565  004926  EC00  F04A         	call	_wait_one_pulse
 30566                           
 30567                           ;keyboard.c: 1304: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30568  00492A  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30569  00492C  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 30570                           
 30571                           ;keyboard.c: 1305: TIMER_OVERFLOWS = 0;
 30572  004930  0E00               	movlw	0
 30573  004932  6E54               	movwf	_TIMER_OVERFLOWS,c
 30574  004934                     l1661:
 30575                           
 30576                           ;keyboard.c: 1306: }
 30577                           ;keyboard.c: 1308: for(unsigned char i = 0; i<4; i++){
 30578  004934  0E00               	movlw	0
 30579  004936  0100               	movlb	0	; () banked
 30580  004938  6F7E               	movwf	playDiatonicSeventhMinor@i_1694& (0+255),b
 30581  00493A                     l17019:
 30582                           
 30583                           ; BSR set to: 0
 30584  00493A  0E03               	movlw	3
 30585  00493C  657E               	cpfsgt	playDiatonicSeventhMinor@i_1694& (0+255),b
 30586  00493E  D001               	goto	l1663
 30587  004940  D046               	goto	u24570
 30588  004942                     l1663:
 30589                           
 30590                           ; BSR set to: 0
 30591                           ;keyboard.c: 1309: if(i==0){ARPEGGIO[i] = diatonic_seventh_minor[index][0];}
 30592                           
 30593                           ; BSR set to: 0
 30594  004942  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30595  004944  A4D8               	btfss	status,2,c
 30596  004946  D013               	goto	l1665
 30597                           
 30598                           ; BSR set to: 0
 30599  004948  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30600  00494A  0D04               	mullw	4
 30601  00494C  0E6B               	movlw	low _diatonic_seventh_minor
 30602  00494E  24F3               	addwf	prodl,w,c
 30603  004950  6EF6               	movwf	tblptrl,c
 30604  004952  0EF2               	movlw	high _diatonic_seventh_minor
 30605  004954  20F4               	addwfc	prodh,w,c
 30606  004956  6EF7               	movwf	tblptrh,c
 30607  004958                     	if	0	;There are less than 3 active tblptr bytes
 30608  004958                     	endif
 30609  004958  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30610  00495A  0D01               	mullw	1
 30611  00495C  0E72               	movlw	low _ARPEGGIO
 30612  00495E  24F3               	addwf	prodl,w,c
 30613  004960  6ED9               	movwf	fsr2l,c
 30614  004962  0E01               	movlw	high _ARPEGGIO
 30615  004964  20F4               	addwfc	prodh,w,c
 30616  004966  6EDA               	movwf	fsr2h,c
 30617  004968  0008               	tblrd		*
 30618  00496A  CFF5 FFDF          	movff	tablat,indf2
 30619  00496E                     l1665:
 30620                           
 30621                           ; BSR set to: 0
 30622                           ;keyboard.c: 1310: if(i>0){ARPEGGIO[i] = diatonic_seventh_minor[index][0] + diatonic_sev
      +                          enth_minor[index][i];}
 30623                           
 30624                           ; BSR set to: 0
 30625  00496E  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30626  004970  B4D8               	btfsc	status,2,c
 30627  004972  D02B               	goto	l1666
 30628                           
 30629                           ; BSR set to: 0
 30630  004974  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30631  004976  0D01               	mullw	1
 30632  004978  0E72               	movlw	low _ARPEGGIO
 30633  00497A  24F3               	addwf	prodl,w,c
 30634  00497C  6ED9               	movwf	fsr2l,c
 30635  00497E  0E01               	movlw	high _ARPEGGIO
 30636  004980  20F4               	addwfc	prodh,w,c
 30637  004982  6EDA               	movwf	fsr2h,c
 30638  004984  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30639  004986  0D04               	mullw	4
 30640  004988  0E6B               	movlw	low _diatonic_seventh_minor
 30641  00498A  6F78               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 30642  00498C  0EF2               	movlw	high _diatonic_seventh_minor
 30643  00498E  6F79               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 30644  004990  50F3               	movf	prodl,w,c
 30645  004992  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30646  004994  50F4               	movf	prodh,w,c
 30647  004996  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30648  004998  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30649  00499A  0D01               	mullw	1
 30650  00499C  50F3               	movf	prodl,w,c
 30651  00499E  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30652  0049A0  50F4               	movf	prodh,w,c
 30653  0049A2  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30654  0049A4  C078  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 30655  0049A8  C079  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 30656  0049AC                     	if	0	;tblptru may be non-zero
 30657  0049AC                     	endif
 30658  0049AC                     	if	0	;tblptru may be non-zero
 30659  0049AC                     	endif
 30660  0049AC  0008               	tblrd		*
 30661  0049AE  CFF5 F07A          	movff	tablat,??_playDiatonicSeventhMinor+2
 30662  0049B2  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30663  0049B4  0D04               	mullw	4
 30664  0049B6  0E6B               	movlw	low _diatonic_seventh_minor
 30665  0049B8  24F3               	addwf	prodl,w,c
 30666  0049BA  6EF6               	movwf	tblptrl,c
 30667  0049BC  0EF2               	movlw	high _diatonic_seventh_minor
 30668  0049BE  20F4               	addwfc	prodh,w,c
 30669  0049C0  6EF7               	movwf	tblptrh,c
 30670  0049C2                     	if	0	;There are less than 3 active tblptr bytes
 30671  0049C2                     	endif
 30672  0049C2  0008               	tblrd		*
 30673  0049C4  50F5               	movf	tablat,w,c
 30674  0049C6  257A               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 30675  0049C8  6EDF               	movwf	indf2,c
 30676  0049CA                     l1666:
 30677                           
 30678                           ; BSR set to: 0
 30679                           
 30680                           ; BSR set to: 0
 30681  0049CA  2B7E               	incf	playDiatonicSeventhMinor@i_1694& (0+255),f,b
 30682  0049CC  D7B6               	goto	l17019
 30683  0049CE                     u24570:
 30684                           
 30685                           ; BSR set to: 0
 30686                           ;keyboard.c: 1311: }
 30687                           ;keyboard.c: 1313: NUM_NOTES_PRESSED = 4;
 30688                           
 30689                           ; BSR set to: 0
 30690  0049CE  0E04               	movlw	4
 30691  0049D0  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30692                           
 30693                           ; BSR set to: 0
 30694                           ;keyboard.c: 1316: if(LATCH == 0) {latch_was_pressed = 0;}
 30695  0049D2  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 30696                           
 30697                           ; BSR set to: 0
 30698  0049D4  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30699                           
 30700                           ; BSR set to: 0
 30701                           ;keyboard.c: 1319: finish_arpeggio_setup();
 30702                           
 30703                           ; BSR set to: 0
 30704  0049D6  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 30705                           
 30706                           ;keyboard.c: 1321: TMR0ON = 1;
 30707  0049DA  8ED5               	bsf	4053,7,c	;volatile
 30708  0049DC                     l1660:
 30709                           
 30710                           ;keyboard.c: 1322: }
 30711                           ;keyboard.c: 1324: if((ON_OFF == 0) && (LATCH == 0)) {
 30712  0049DC  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30713  0049DE  0012               	return	
 30714  0049E0  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 30715  0049E2  0012               	return	
 30716                           
 30717                           ;keyboard.c: 1326: if(NUM_NOTES_PRESSED > 0){
 30718  0049E4  0100               	movlb	0	; () banked
 30719  0049E6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30720  0049E8  B4D8               	btfsc	status,2,c
 30721  0049EA  D00A               	goto	l1669
 30722                           
 30723                           ; BSR set to: 0
 30724                           ;keyboard.c: 1327: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 30725  0049EC  0E00               	movlw	0
 30726  0049EE  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 30727  0049F0  0E01               	movlw	1
 30728  0049F2  EC00  F04A         	call	_wait_one_pulse
 30729                           
 30730                           ;keyboard.c: 1328: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30731  0049F6  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30732  0049F8  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 30733                           
 30734                           ;keyboard.c: 1329: TIMER_OVERFLOWS = 0;
 30735  0049FC  0E00               	movlw	0
 30736  0049FE  6E54               	movwf	_TIMER_OVERFLOWS,c
 30737  004A00                     l1669:
 30738                           
 30739                           ;keyboard.c: 1330: }
 30740                           ;keyboard.c: 1332: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 30741  004A00  C0E6  F078         	movff	_parallel,??_playDiatonicSeventhMinor
 30742  004A04  0100               	movlb	0	; () banked
 30743  004A06  6B79               	clrf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 30744  004A08  BF78               	btfsc	??_playDiatonicSeventhMinor& (0+255),7,b
 30745  004A0A  0779               	decf	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30746  004A0C  517C               	movf	playDiatonicSeventhMinor@pitch& (0+255),w,b
 30747  004A0E  6F7A               	movwf	(??_playDiatonicSeventhMinor+2)& (0+255),b
 30748  004A10  6B7B               	clrf	(??_playDiatonicSeventhMinor+3)& (0+255),b
 30749  004A12  5178               	movf	??_playDiatonicSeventhMinor& (0+255),w,b
 30750  004A14  197A               	xorwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 30751  004A16  E106               	bnz	l17063
 30752  004A18  5179               	movf	(??_playDiatonicSeventhMinor+1)& (0+255),w,b
 30753  004A1A  197B               	xorwf	(??_playDiatonicSeventhMinor+3)& (0+255),w,b
 30754  004A1C  A4D8               	btfss	status,2,c
 30755  004A1E  D002               	goto	l1671
 30756                           
 30757                           ; BSR set to: 0
 30758  004A20  0E00               	movlw	0
 30759  004A22  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30760  004A24                     l1671:
 30761  004A24                     l17063:
 30762                           
 30763                           ; BSR set to: 0
 30764                           ;keyboard.c: 1334: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 30765  004A24  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 30766                           
 30767                           ; BSR set to: 0
 30768  004A26  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30769  004A28  D001               	goto	l1672
 30770                           
 30771                           ; BSR set to: 0
 30772                           ;keyboard.c: 1335: LATCH = 1;
 30773  004A2A  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 30774  004A2C                     l1672:
 30775                           
 30776                           ; BSR set to: 0
 30777                           ;keyboard.c: 1336: }
 30778                           ;keyboard.c: 1339: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 30779  004A2C  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30780  004A2E  D002               	goto	u24670
 30781                           
 30782                           ; BSR set to: 0
 30783  004A30  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30784  004A32  D006               	goto	l1673
 30785  004A34                     u24670:
 30786                           
 30787                           ; BSR set to: 0
 30788  004A34  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30789  004A36  D004               	goto	l1673
 30790                           
 30791                           ; BSR set to: 0
 30792                           ;keyboard.c: 1340: NUM_NOTES_PRESSED = 0;
 30793  004A38  0E00               	movlw	0
 30794  004A3A  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30795                           
 30796                           ;keyboard.c: 1341: ARRAY_INDEX = 0;
 30797  004A3C  0E00               	movlw	0
 30798  004A3E  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 30799  004A40                     l1673:
 30800                           
 30801                           ; BSR set to: 0
 30802                           ;keyboard.c: 1342: }
 30803                           ;keyboard.c: 1345: finish_arpeggio_setup();
 30804                           
 30805                           ; BSR set to: 0
 30806  004A40  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 30807                           
 30808                           ;keyboard.c: 1346: TMR0ON = 1;
 30809  004A44  8ED5               	bsf	4053,7,c	;volatile
 30810                           
 30811                           ;keyboard.c: 1348: return;
 30812  004A46  0012               	return	
 30813  004A48                     __end_of_playDiatonicSeventhMinor:
 30814                           	opt stack 0
 30815                           tblptru	equ	0xFF8
 30816                           tblptrh	equ	0xFF7
 30817                           tblptrl	equ	0xFF6
 30818                           tablat	equ	0xFF5
 30819                           prodh	equ	0xFF4
 30820                           prodl	equ	0xFF3
 30821                           intcon	equ	0xFF2
 30822                           intcon2	equ	0xFF1
 30823                           postinc0	equ	0xFEE
 30824                           wreg	equ	0xFE8
 30825                           indf1	equ	0xFE7
 30826                           postdec1	equ	0xFE5
 30827                           fsr1h	equ	0xFE2
 30828                           fsr1l	equ	0xFE1
 30829                           indf2	equ	0xFDF
 30830                           postinc2	equ	0xFDE
 30831                           plusw2	equ	0xFDB
 30832                           fsr2h	equ	0xFDA
 30833                           fsr2l	equ	0xFD9
 30834                           status	equ	0xFD8
 30835                           
 30836 ;; *************** function _playDiatonicSeventhMajor *****************
 30837 ;; Defined at:
 30838 ;;		line 1126 in file "keyboard.c"
 30839 ;; Parameters:    Size  Location     Type
 30840 ;;  pitch           1    wreg     unsigned char 
 30841 ;;  index           1   23[BANK0 ] unsigned char 
 30842 ;; Auto vars:     Size  Location     Type
 30843 ;;  pitch           1   30[BANK0 ] unsigned char 
 30844 ;;  i               1   29[BANK0 ] unsigned char 
 30845 ;;  i               1   28[BANK0 ] unsigned char 
 30846 ;; Return value:  Size  Location     Type
 30847 ;;                  1    wreg      void 
 30848 ;; Registers used:
 30849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30850 ;; Tracked objects:
 30851 ;;		On entry : 0/0
 30852 ;;		On exit  : 0/0
 30853 ;;		Unchanged: 0/0
 30854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 30855 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30856 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30857 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30858 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30859 ;;Total ram usage:        8 bytes
 30860 ;; Hardware stack levels used:    1
 30861 ;; Hardware stack levels required when called:   10
 30862 ;; This function calls:
 30863 ;;		_finish_arpeggio_setup
 30864 ;;		_key_press_release_note_off
 30865 ;;		_noteOff
 30866 ;;		_noteOn
 30867 ;;		_wait_one_pulse
 30868 ;; This function is called by:
 30869 ;;		_playThisNote8
 30870 ;; This function uses a non-reentrant model
 30871 ;;
 30872                           
 30873                           	psect	text90
 30874  005562                     __ptext90:
 30875                           	opt stack 0
 30876  005562                     _playDiatonicSeventhMajor:
 30877                           	opt stack 14
 30878                           
 30879                           ;incstack = 0
 30880                           ;playDiatonicSeventhMajor@pitch stored from wreg
 30881  005562  0100               	movlb	0	; () banked
 30882  005564  6F7E               	movwf	playDiatonicSeventhMajor@pitch& (0+255),b
 30883                           
 30884                           ;keyboard.c: 1129: if(ARPEGGIO_ON == 0){
 30885  005566  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30886  005568  D049               	goto	u24230
 30887                           
 30888                           ;keyboard.c: 1130: for(unsigned char i = 0; i<4; i++){
 30889  00556A  0E00               	movlw	0
 30890  00556C  0100               	movlb	0	; () banked
 30891  00556E  6F7C               	movwf	playDiatonicSeventhMajor@i& (0+255),b
 30892  005570                     l16887:
 30893                           
 30894                           ; BSR set to: 0
 30895  005570  0E03               	movlw	3
 30896  005572  657C               	cpfsgt	playDiatonicSeventhMajor@i& (0+255),b
 30897  005574  D001               	goto	l1599
 30898  005576  D042               	goto	u24230
 30899  005578                     l1599:
 30900                           
 30901                           ; BSR set to: 0
 30902                           ;keyboard.c: 1132: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_seventh_major[index]
      +                          [i],velocity);}
 30903  005578  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30904  00557A  D01D               	goto	l1601
 30905                           
 30906                           ; BSR set to: 0
 30907  00557C  5177               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 30908  00557E  0D04               	mullw	4
 30909  005580  0EA7               	movlw	low _diatonic_seventh_major
 30910  005582  6F78               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 30911  005584  0EF2               	movlw	high _diatonic_seventh_major
 30912  005586  6F79               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 30913  005588  50F3               	movf	prodl,w,c
 30914  00558A  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30915  00558C  50F4               	movf	prodh,w,c
 30916  00558E  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30917  005590  517C               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 30918  005592  0D01               	mullw	1
 30919  005594  50F3               	movf	prodl,w,c
 30920  005596  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30921  005598  50F4               	movf	prodh,w,c
 30922  00559A  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30923  00559C  C078  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 30924  0055A0  C079  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 30925  0055A4                     	if	0	;tblptru may be non-zero
 30926  0055A4                     	endif
 30927  0055A4                     	if	0	;tblptru may be non-zero
 30928  0055A4                     	endif
 30929  0055A4  0008               	tblrd		*
 30930  0055A6  50F5               	movf	tablat,w,c
 30931  0055A8  257E               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 30932  0055AA  6F6E               	movwf	noteOn@pitch& (0+255),b
 30933  0055AC  C0FD  F06F         	movff	_velocity,noteOn@velocity
 30934  0055B0  51F6               	movf	_channel& (0+255),w,b
 30935  0055B2  ECD6  F044         	call	_noteOn
 30936  0055B6                     l1601:
 30937                           
 30938                           ;keyboard.c: 1133: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_seventh_major[index
      +                          ][i],velocity);}
 30939  0055B6  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30940  0055B8  D01E               	goto	l1602
 30941  0055BA  0100               	movlb	0	; () banked
 30942  0055BC  5177               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 30943  0055BE  0D04               	mullw	4
 30944  0055C0  0EA7               	movlw	low _diatonic_seventh_major
 30945  0055C2  6F78               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 30946  0055C4  0EF2               	movlw	high _diatonic_seventh_major
 30947  0055C6  6F79               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 30948  0055C8  50F3               	movf	prodl,w,c
 30949  0055CA  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30950  0055CC  50F4               	movf	prodh,w,c
 30951  0055CE  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30952  0055D0  517C               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 30953  0055D2  0D01               	mullw	1
 30954  0055D4  50F3               	movf	prodl,w,c
 30955  0055D6  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30956  0055D8  50F4               	movf	prodh,w,c
 30957  0055DA  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30958  0055DC  C078  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 30959  0055E0  C079  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 30960  0055E4                     	if	0	;tblptru may be non-zero
 30961  0055E4                     	endif
 30962  0055E4                     	if	0	;tblptru may be non-zero
 30963  0055E4                     	endif
 30964  0055E4  0008               	tblrd		*
 30965  0055E6  50F5               	movf	tablat,w,c
 30966  0055E8  257E               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 30967  0055EA  6F6B               	movwf	noteOff@pitch& (0+255),b
 30968  0055EC  C0FD  F06C         	movff	_velocity,noteOff@velocity
 30969  0055F0  51F6               	movf	_channel& (0+255),w,b
 30970  0055F2  ECFD  F047         	call	_noteOff
 30971  0055F6                     l1602:
 30972  0055F6  0100               	movlb	0	; () banked
 30973  0055F8  2B7C               	incf	playDiatonicSeventhMajor@i& (0+255),f,b
 30974  0055FA  D7BA               	goto	l16887
 30975  0055FC                     u24230:
 30976                           
 30977                           ;keyboard.c: 1134: }
 30978                           ;keyboard.c: 1135: }
 30979                           ;keyboard.c: 1138: if(ARPEGGIO_ON == 1){
 30980                           
 30981                           ; BSR set to: 0
 30982  0055FC  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30983  0055FE  0012               	return	
 30984                           
 30985                           ;keyboard.c: 1139: if(ON_OFF == 1) {
 30986  005600  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30987  005602  D042               	goto	l1604
 30988                           
 30989                           ;keyboard.c: 1141: TMR0ON = 0;
 30990  005604  9ED5               	bcf	4053,7,c	;volatile
 30991                           
 30992                           ;keyboard.c: 1143: parallel = pitch;
 30993  005606  C07E  F0E6         	movff	playDiatonicSeventhMajor@pitch,_parallel
 30994                           
 30995                           ;keyboard.c: 1146: if(NUM_NOTES_PRESSED > 0){
 30996  00560A  0100               	movlb	0	; () banked
 30997  00560C  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30998  00560E  B4D8               	btfsc	status,2,c
 30999  005610  D00A               	goto	l1605
 31000                           
 31001                           ; BSR set to: 0
 31002                           ;keyboard.c: 1147: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 31003  005612  0E00               	movlw	0
 31004  005614  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 31005  005616  0E01               	movlw	1
 31006  005618  EC00  F04A         	call	_wait_one_pulse
 31007                           
 31008                           ;keyboard.c: 1148: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31009  00561C  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31010  00561E  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 31011                           
 31012                           ;keyboard.c: 1149: TIMER_OVERFLOWS = 0;
 31013  005622  0E00               	movlw	0
 31014  005624  6E54               	movwf	_TIMER_OVERFLOWS,c
 31015  005626                     l1605:
 31016                           
 31017                           ;keyboard.c: 1150: }
 31018                           ;keyboard.c: 1152: for(unsigned char i = 0; i<4; i++){
 31019  005626  0E00               	movlw	0
 31020  005628  0100               	movlb	0	; () banked
 31021  00562A  6F7D               	movwf	playDiatonicSeventhMajor@i_1684& (0+255),b
 31022  00562C                     l16917:
 31023                           
 31024                           ; BSR set to: 0
 31025  00562C  0E03               	movlw	3
 31026  00562E  657D               	cpfsgt	playDiatonicSeventhMajor@i_1684& (0+255),b
 31027  005630  D001               	goto	l1607
 31028  005632  D022               	goto	u24290
 31029  005634                     l1607:
 31030                           
 31031                           ; BSR set to: 0
 31032                           ;keyboard.c: 1153: ARPEGGIO[i] = pitch + diatonic_seventh_major[index][i];
 31033                           
 31034                           ; BSR set to: 0
 31035  005634  517D               	movf	playDiatonicSeventhMajor@i_1684& (0+255),w,b
 31036  005636  0D01               	mullw	1
 31037  005638  0E72               	movlw	low _ARPEGGIO
 31038  00563A  24F3               	addwf	prodl,w,c
 31039  00563C  6ED9               	movwf	fsr2l,c
 31040  00563E  0E01               	movlw	high _ARPEGGIO
 31041  005640  20F4               	addwfc	prodh,w,c
 31042  005642  6EDA               	movwf	fsr2h,c
 31043  005644  5177               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 31044  005646  0D04               	mullw	4
 31045  005648  0EA7               	movlw	low _diatonic_seventh_major
 31046  00564A  6F78               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 31047  00564C  0EF2               	movlw	high _diatonic_seventh_major
 31048  00564E  6F79               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 31049  005650  50F3               	movf	prodl,w,c
 31050  005652  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 31051  005654  50F4               	movf	prodh,w,c
 31052  005656  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 31053  005658  517D               	movf	playDiatonicSeventhMajor@i_1684& (0+255),w,b
 31054  00565A  0D01               	mullw	1
 31055  00565C  50F3               	movf	prodl,w,c
 31056  00565E  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 31057  005660  50F4               	movf	prodh,w,c
 31058  005662  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 31059  005664  C078  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 31060  005668  C079  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 31061  00566C                     	if	0	;tblptru may be non-zero
 31062  00566C                     	endif
 31063  00566C                     	if	0	;tblptru may be non-zero
 31064  00566C                     	endif
 31065  00566C  0008               	tblrd		*
 31066  00566E  50F5               	movf	tablat,w,c
 31067  005670  257E               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 31068  005672  6EDF               	movwf	indf2,c
 31069                           
 31070                           ; BSR set to: 0
 31071  005674  2B7D               	incf	playDiatonicSeventhMajor@i_1684& (0+255),f,b
 31072  005676  D7DA               	goto	l16917
 31073  005678                     u24290:
 31074                           
 31075                           ; BSR set to: 0
 31076                           ;keyboard.c: 1154: }
 31077                           ;keyboard.c: 1156: NUM_NOTES_PRESSED = 4;
 31078                           
 31079                           ; BSR set to: 0
 31080  005678  0E04               	movlw	4
 31081  00567A  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 31082                           
 31083                           ; BSR set to: 0
 31084                           ;keyboard.c: 1159: if(LATCH == 0) {latch_was_pressed = 0;}
 31085  00567C  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 31086                           
 31087                           ; BSR set to: 0
 31088  00567E  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31089                           
 31090                           ; BSR set to: 0
 31091                           ;keyboard.c: 1162: finish_arpeggio_setup();
 31092                           
 31093                           ; BSR set to: 0
 31094  005680  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 31095                           
 31096                           ;keyboard.c: 1164: TMR0ON = 1;
 31097  005684  8ED5               	bsf	4053,7,c	;volatile
 31098                           
 31099                           ;keyboard.c: 1166: return;
 31100  005686  0012               	return	
 31101  005688                     l1604:
 31102                           
 31103                           ;keyboard.c: 1167: }
 31104                           ;keyboard.c: 1169: if((ON_OFF == 0) && (LATCH == 0)) {
 31105  005688  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31106  00568A  0012               	return	
 31107  00568C  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 31108  00568E  0012               	return	
 31109                           
 31110                           ;keyboard.c: 1171: if(NUM_NOTES_PRESSED > 0){
 31111  005690  0100               	movlb	0	; () banked
 31112  005692  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 31113  005694  B4D8               	btfsc	status,2,c
 31114  005696  D00A               	goto	l1612
 31115                           
 31116                           ; BSR set to: 0
 31117                           ;keyboard.c: 1172: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 31118  005698  0E00               	movlw	0
 31119  00569A  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 31120  00569C  0E01               	movlw	1
 31121  00569E  EC00  F04A         	call	_wait_one_pulse
 31122                           
 31123                           ;keyboard.c: 1173: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31124  0056A2  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31125  0056A4  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 31126                           
 31127                           ;keyboard.c: 1174: TIMER_OVERFLOWS = 0;
 31128  0056A8  0E00               	movlw	0
 31129  0056AA  6E54               	movwf	_TIMER_OVERFLOWS,c
 31130  0056AC                     l1612:
 31131                           
 31132                           ;keyboard.c: 1175: }
 31133                           ;keyboard.c: 1177: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 31134  0056AC  C0E6  F078         	movff	_parallel,??_playDiatonicSeventhMajor
 31135  0056B0  0100               	movlb	0	; () banked
 31136  0056B2  6B79               	clrf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 31137  0056B4  BF78               	btfsc	??_playDiatonicSeventhMajor& (0+255),7,b
 31138  0056B6  0779               	decf	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 31139  0056B8  517E               	movf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 31140  0056BA  6F7A               	movwf	(??_playDiatonicSeventhMajor+2)& (0+255),b
 31141  0056BC  6B7B               	clrf	(??_playDiatonicSeventhMajor+3)& (0+255),b
 31142  0056BE  5178               	movf	??_playDiatonicSeventhMajor& (0+255),w,b
 31143  0056C0  197A               	xorwf	(??_playDiatonicSeventhMajor+2)& (0+255),w,b
 31144  0056C2  E106               	bnz	l16955
 31145  0056C4  5179               	movf	(??_playDiatonicSeventhMajor+1)& (0+255),w,b
 31146  0056C6  197B               	xorwf	(??_playDiatonicSeventhMajor+3)& (0+255),w,b
 31147  0056C8  A4D8               	btfss	status,2,c
 31148  0056CA  D002               	goto	l1614
 31149                           
 31150                           ; BSR set to: 0
 31151  0056CC  0E00               	movlw	0
 31152  0056CE  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 31153  0056D0                     l1614:
 31154  0056D0                     l16955:
 31155                           
 31156                           ; BSR set to: 0
 31157                           ;keyboard.c: 1179: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 31158  0056D0  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 31159                           
 31160                           ; BSR set to: 0
 31161  0056D2  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31162  0056D4  D001               	goto	l1615
 31163                           
 31164                           ; BSR set to: 0
 31165                           ;keyboard.c: 1180: LATCH = 1;
 31166  0056D6  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 31167  0056D8                     l1615:
 31168                           
 31169                           ; BSR set to: 0
 31170                           ;keyboard.c: 1181: }
 31171                           ;keyboard.c: 1184: if(((UN_LATCH_MODE == 0 | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1))){
 31172  0056D8  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31173  0056DA  D002               	goto	u24390
 31174                           
 31175                           ; BSR set to: 0
 31176  0056DC  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31177  0056DE  D006               	goto	l1616
 31178  0056E0                     u24390:
 31179                           
 31180                           ; BSR set to: 0
 31181  0056E0  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31182  0056E2  D004               	goto	l1616
 31183                           
 31184                           ; BSR set to: 0
 31185                           ;keyboard.c: 1185: NUM_NOTES_PRESSED = 0;
 31186  0056E4  0E00               	movlw	0
 31187  0056E6  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 31188                           
 31189                           ;keyboard.c: 1186: ARRAY_INDEX = 0;
 31190  0056E8  0E00               	movlw	0
 31191  0056EA  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 31192  0056EC                     l1616:
 31193                           
 31194                           ; BSR set to: 0
 31195                           ;keyboard.c: 1187: }
 31196                           ;keyboard.c: 1190: finish_arpeggio_setup();
 31197                           
 31198                           ; BSR set to: 0
 31199  0056EC  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 31200                           
 31201                           ;keyboard.c: 1191: TMR0ON = 1;
 31202  0056F0  8ED5               	bsf	4053,7,c	;volatile
 31203                           
 31204                           ;keyboard.c: 1193: return;
 31205  0056F2  0012               	return	
 31206  0056F4                     __end_of_playDiatonicSeventhMajor:
 31207                           	opt stack 0
 31208                           tblptru	equ	0xFF8
 31209                           tblptrh	equ	0xFF7
 31210                           tblptrl	equ	0xFF6
 31211                           tablat	equ	0xFF5
 31212                           prodh	equ	0xFF4
 31213                           prodl	equ	0xFF3
 31214                           intcon	equ	0xFF2
 31215                           intcon2	equ	0xFF1
 31216                           postinc0	equ	0xFEE
 31217                           wreg	equ	0xFE8
 31218                           indf1	equ	0xFE7
 31219                           postdec1	equ	0xFE5
 31220                           fsr1h	equ	0xFE2
 31221                           fsr1l	equ	0xFE1
 31222                           indf2	equ	0xFDF
 31223                           postinc2	equ	0xFDE
 31224                           plusw2	equ	0xFDB
 31225                           fsr2h	equ	0xFDA
 31226                           fsr2l	equ	0xFD9
 31227                           status	equ	0xFD8
 31228                           
 31229 ;; *************** function _keyboard_all_note_efficient *****************
 31230 ;; Defined at:
 31231 ;;		line 581 in file "keyboard.c"
 31232 ;; Parameters:    Size  Location     Type
 31233 ;;		None
 31234 ;; Auto vars:     Size  Location     Type
 31235 ;;  pitch           1   37[BANK0 ] unsigned char 
 31236 ;; Return value:  Size  Location     Type
 31237 ;;                  1    wreg      void 
 31238 ;; Registers used:
 31239 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31240 ;; Tracked objects:
 31241 ;;		On entry : 0/0
 31242 ;;		On exit  : 0/0
 31243 ;;		Unchanged: 0/0
 31244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 31245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31248 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31249 ;;Total ram usage:        1 bytes
 31250 ;; Hardware stack levels used:    1
 31251 ;; Hardware stack levels required when called:   12
 31252 ;; This function calls:
 31253 ;;		_playThisNote
 31254 ;; This function is called by:
 31255 ;;		_processKeyboard
 31256 ;; This function uses a non-reentrant model
 31257 ;;
 31258                           
 31259                           	psect	text91
 31260  00174C                     __ptext91:
 31261                           	opt stack 0
 31262  00174C                     _keyboard_all_note_efficient:
 31263                           	opt stack 16
 31264                           
 31265                           ;keyboard.c: 583: unsigned char pitch;
 31266                           ;keyboard.c: 586: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW1) {
 31267                           
 31268                           ;incstack = 0
 31269  00174C  0100               	movlb	0	; () banked
 31270  00174E  B1D8               	btfsc	_button_state_now& (0+255),0,b
 31271                           
 31272                           ; BSR set to: 0
 31273  001750  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31274  001752  D00A               	goto	l1462
 31275                           
 31276                           ; BSR set to: 0
 31277  001754  B1D0               	btfsc	_keyboard& (0+255),0,b
 31278  001756  D008               	goto	l1462
 31279                           
 31280                           ; BSR set to: 0
 31281                           ;keyboard.c: 587: pitch = C;
 31282  001758  0E00               	movlw	0
 31283  00175A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31284                           
 31285                           ; BSR set to: 0
 31286                           ;keyboard.c: 588: ON_OFF = 1;
 31287  00175C  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31288                           
 31289                           ; BSR set to: 0
 31290                           ;keyboard.c: 589: playThisNote(pitch);
 31291  00175E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31292  001760  EC0D  F032         	call	_playThisNote
 31293                           
 31294                           ;keyboard.c: 590: keyboard.SW1 = 1;
 31295  001764  0100               	movlb	0	; () banked
 31296  001766  81D0               	bsf	_keyboard& (0+255),0,b
 31297  001768                     l1462:
 31298                           
 31299                           ; BSR set to: 0
 31300                           ;keyboard.c: 591: }
 31301                           ;keyboard.c: 593: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2) {
 31302                           
 31303                           ; BSR set to: 0
 31304  001768  B3D8               	btfsc	_button_state_now& (0+255),1,b
 31305                           
 31306                           ; BSR set to: 0
 31307  00176A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31308  00176C  D00A               	goto	l1463
 31309                           
 31310                           ; BSR set to: 0
 31311  00176E  B3D0               	btfsc	_keyboard& (0+255),1,b
 31312  001770  D008               	goto	l1463
 31313                           
 31314                           ; BSR set to: 0
 31315                           ;keyboard.c: 594: pitch = Cs;
 31316  001772  0E01               	movlw	1
 31317  001774  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31318                           
 31319                           ; BSR set to: 0
 31320                           ;keyboard.c: 595: ON_OFF = 1;
 31321  001776  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31322                           
 31323                           ; BSR set to: 0
 31324                           ;keyboard.c: 596: playThisNote(pitch);
 31325  001778  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31326  00177A  EC0D  F032         	call	_playThisNote
 31327                           
 31328                           ;keyboard.c: 597: keyboard.SW2 = 1;
 31329  00177E  0100               	movlb	0	; () banked
 31330  001780  83D0               	bsf	_keyboard& (0+255),1,b
 31331  001782                     l1463:
 31332                           
 31333                           ; BSR set to: 0
 31334                           ;keyboard.c: 598: }
 31335                           ;keyboard.c: 600: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW3) {
 31336                           
 31337                           ; BSR set to: 0
 31338  001782  B5D8               	btfsc	_button_state_now& (0+255),2,b
 31339                           
 31340                           ; BSR set to: 0
 31341  001784  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31342  001786  D00A               	goto	l1464
 31343                           
 31344                           ; BSR set to: 0
 31345  001788  B5D0               	btfsc	_keyboard& (0+255),2,b
 31346  00178A  D008               	goto	l1464
 31347                           
 31348                           ; BSR set to: 0
 31349                           ;keyboard.c: 601: pitch = D;
 31350  00178C  0E02               	movlw	2
 31351  00178E  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31352                           
 31353                           ; BSR set to: 0
 31354                           ;keyboard.c: 602: ON_OFF = 1;
 31355  001790  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31356                           
 31357                           ; BSR set to: 0
 31358                           ;keyboard.c: 603: playThisNote(pitch);
 31359  001792  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31360  001794  EC0D  F032         	call	_playThisNote
 31361                           
 31362                           ;keyboard.c: 604: keyboard.SW3 = 1;
 31363  001798  0100               	movlb	0	; () banked
 31364  00179A  85D0               	bsf	_keyboard& (0+255),2,b
 31365  00179C                     l1464:
 31366                           
 31367                           ; BSR set to: 0
 31368                           ;keyboard.c: 605: }
 31369                           ;keyboard.c: 606: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4) {
 31370                           
 31371                           ; BSR set to: 0
 31372  00179C  B7D8               	btfsc	_button_state_now& (0+255),3,b
 31373                           
 31374                           ; BSR set to: 0
 31375  00179E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31376  0017A0  D00A               	goto	l1465
 31377                           
 31378                           ; BSR set to: 0
 31379  0017A2  B7D0               	btfsc	_keyboard& (0+255),3,b
 31380  0017A4  D008               	goto	l1465
 31381                           
 31382                           ; BSR set to: 0
 31383                           ;keyboard.c: 607: pitch = Ds;
 31384  0017A6  0E03               	movlw	3
 31385  0017A8  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31386                           
 31387                           ; BSR set to: 0
 31388                           ;keyboard.c: 608: ON_OFF = 1;
 31389  0017AA  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31390                           
 31391                           ; BSR set to: 0
 31392                           ;keyboard.c: 609: playThisNote(pitch);
 31393  0017AC  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31394  0017AE  EC0D  F032         	call	_playThisNote
 31395                           
 31396                           ;keyboard.c: 610: keyboard.SW4 = 1;
 31397  0017B2  0100               	movlb	0	; () banked
 31398  0017B4  87D0               	bsf	_keyboard& (0+255),3,b
 31399  0017B6                     l1465:
 31400                           
 31401                           ; BSR set to: 0
 31402                           ;keyboard.c: 611: }
 31403                           ;keyboard.c: 612: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW5) {
 31404                           
 31405                           ; BSR set to: 0
 31406  0017B6  B9D8               	btfsc	_button_state_now& (0+255),4,b
 31407                           
 31408                           ; BSR set to: 0
 31409  0017B8  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31410  0017BA  D00A               	goto	l1466
 31411                           
 31412                           ; BSR set to: 0
 31413  0017BC  B9D0               	btfsc	_keyboard& (0+255),4,b
 31414  0017BE  D008               	goto	l1466
 31415                           
 31416                           ; BSR set to: 0
 31417                           ;keyboard.c: 613: pitch = E;
 31418  0017C0  0E04               	movlw	4
 31419  0017C2  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31420                           
 31421                           ; BSR set to: 0
 31422                           ;keyboard.c: 614: ON_OFF = 1;
 31423  0017C4  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31424                           
 31425                           ; BSR set to: 0
 31426                           ;keyboard.c: 615: playThisNote(pitch);
 31427  0017C6  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31428  0017C8  EC0D  F032         	call	_playThisNote
 31429                           
 31430                           ;keyboard.c: 616: keyboard.SW5 = 1;
 31431  0017CC  0100               	movlb	0	; () banked
 31432  0017CE  89D0               	bsf	_keyboard& (0+255),4,b
 31433  0017D0                     l1466:
 31434                           
 31435                           ; BSR set to: 0
 31436                           ;keyboard.c: 617: }
 31437                           ;keyboard.c: 618: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW6) {
 31438                           
 31439                           ; BSR set to: 0
 31440  0017D0  BBD8               	btfsc	_button_state_now& (0+255),5,b
 31441                           
 31442                           ; BSR set to: 0
 31443  0017D2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31444  0017D4  D00A               	goto	l1467
 31445                           
 31446                           ; BSR set to: 0
 31447  0017D6  BBD0               	btfsc	_keyboard& (0+255),5,b
 31448  0017D8  D008               	goto	l1467
 31449                           
 31450                           ; BSR set to: 0
 31451                           ;keyboard.c: 619: pitch = F;
 31452  0017DA  0E05               	movlw	5
 31453  0017DC  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31454                           
 31455                           ; BSR set to: 0
 31456                           ;keyboard.c: 620: ON_OFF = 1;
 31457  0017DE  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31458                           
 31459                           ; BSR set to: 0
 31460                           ;keyboard.c: 621: playThisNote(pitch);
 31461  0017E0  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31462  0017E2  EC0D  F032         	call	_playThisNote
 31463                           
 31464                           ;keyboard.c: 622: keyboard.SW6 = 1;
 31465  0017E6  0100               	movlb	0	; () banked
 31466  0017E8  8BD0               	bsf	_keyboard& (0+255),5,b
 31467  0017EA                     l1467:
 31468                           
 31469                           ; BSR set to: 0
 31470                           ;keyboard.c: 623: }
 31471                           ;keyboard.c: 624: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7) {
 31472                           
 31473                           ; BSR set to: 0
 31474  0017EA  BDD8               	btfsc	_button_state_now& (0+255),6,b
 31475                           
 31476                           ; BSR set to: 0
 31477  0017EC  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31478  0017EE  D00A               	goto	l1468
 31479                           
 31480                           ; BSR set to: 0
 31481  0017F0  BDD0               	btfsc	_keyboard& (0+255),6,b
 31482  0017F2  D008               	goto	l1468
 31483                           
 31484                           ; BSR set to: 0
 31485                           ;keyboard.c: 625: pitch = Fs;
 31486  0017F4  0E06               	movlw	6
 31487  0017F6  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31488                           
 31489                           ; BSR set to: 0
 31490                           ;keyboard.c: 626: ON_OFF = 1;
 31491  0017F8  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31492                           
 31493                           ; BSR set to: 0
 31494                           ;keyboard.c: 627: playThisNote(pitch);
 31495  0017FA  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31496  0017FC  EC0D  F032         	call	_playThisNote
 31497                           
 31498                           ;keyboard.c: 628: keyboard.SW7 = 1;
 31499  001800  0100               	movlb	0	; () banked
 31500  001802  8DD0               	bsf	_keyboard& (0+255),6,b
 31501  001804                     l1468:
 31502                           
 31503                           ; BSR set to: 0
 31504                           ;keyboard.c: 629: }
 31505                           ;keyboard.c: 630: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW8) {
 31506                           
 31507                           ; BSR set to: 0
 31508  001804  BFD8               	btfsc	_button_state_now& (0+255),7,b
 31509                           
 31510                           ; BSR set to: 0
 31511  001806  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31512  001808  D00A               	goto	l1469
 31513                           
 31514                           ; BSR set to: 0
 31515  00180A  BFD0               	btfsc	_keyboard& (0+255),7,b
 31516  00180C  D008               	goto	l1469
 31517                           
 31518                           ; BSR set to: 0
 31519                           ;keyboard.c: 631: pitch = G;
 31520  00180E  0E07               	movlw	7
 31521  001810  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31522                           
 31523                           ; BSR set to: 0
 31524                           ;keyboard.c: 632: ON_OFF = 1;
 31525  001812  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31526                           
 31527                           ; BSR set to: 0
 31528                           ;keyboard.c: 633: playThisNote(pitch);
 31529  001814  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31530  001816  EC0D  F032         	call	_playThisNote
 31531                           
 31532                           ;keyboard.c: 634: keyboard.SW8 = 1;
 31533  00181A  0100               	movlb	0	; () banked
 31534  00181C  8FD0               	bsf	_keyboard& (0+255),7,b
 31535  00181E                     l1469:
 31536                           
 31537                           ; BSR set to: 0
 31538                           ;keyboard.c: 635: }
 31539                           ;keyboard.c: 636: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9) {
 31540                           
 31541                           ; BSR set to: 0
 31542  00181E  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 31543                           
 31544                           ; BSR set to: 0
 31545  001820  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31546  001822  D00A               	goto	l1470
 31547                           
 31548                           ; BSR set to: 0
 31549  001824  B1D1               	btfsc	(_keyboard+1)& (0+255),0,b
 31550  001826  D008               	goto	l1470
 31551                           
 31552                           ; BSR set to: 0
 31553                           ;keyboard.c: 637: pitch = Gs;
 31554  001828  0E08               	movlw	8
 31555  00182A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31556                           
 31557                           ; BSR set to: 0
 31558                           ;keyboard.c: 638: ON_OFF = 1;
 31559  00182C  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31560                           
 31561                           ; BSR set to: 0
 31562                           ;keyboard.c: 639: playThisNote(pitch);
 31563  00182E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31564  001830  EC0D  F032         	call	_playThisNote
 31565                           
 31566                           ;keyboard.c: 640: keyboard.SW9 = 1;
 31567  001834  0100               	movlb	0	; () banked
 31568  001836  81D1               	bsf	(_keyboard+1)& (0+255),0,b
 31569  001838                     l1470:
 31570                           
 31571                           ; BSR set to: 0
 31572                           ;keyboard.c: 641: }
 31573                           ;keyboard.c: 642: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW10) {
 31574                           
 31575                           ; BSR set to: 0
 31576  001838  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 31577                           
 31578                           ; BSR set to: 0
 31579  00183A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31580  00183C  D00A               	goto	l1471
 31581                           
 31582                           ; BSR set to: 0
 31583  00183E  B3D1               	btfsc	(_keyboard+1)& (0+255),1,b
 31584  001840  D008               	goto	l1471
 31585                           
 31586                           ; BSR set to: 0
 31587                           ;keyboard.c: 643: pitch = A;
 31588  001842  0E09               	movlw	9
 31589  001844  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31590                           
 31591                           ; BSR set to: 0
 31592                           ;keyboard.c: 644: ON_OFF = 1;
 31593  001846  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31594                           
 31595                           ; BSR set to: 0
 31596                           ;keyboard.c: 645: playThisNote(pitch);
 31597  001848  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31598  00184A  EC0D  F032         	call	_playThisNote
 31599                           
 31600                           ;keyboard.c: 646: keyboard.SW10 = 1;
 31601  00184E  0100               	movlb	0	; () banked
 31602  001850  83D1               	bsf	(_keyboard+1)& (0+255),1,b
 31603  001852                     l1471:
 31604                           
 31605                           ; BSR set to: 0
 31606                           ;keyboard.c: 647: }
 31607                           ;keyboard.c: 648: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11) {
 31608                           
 31609                           ; BSR set to: 0
 31610  001852  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 31611                           
 31612                           ; BSR set to: 0
 31613  001854  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31614  001856  D00A               	goto	l1472
 31615                           
 31616                           ; BSR set to: 0
 31617  001858  B5D1               	btfsc	(_keyboard+1)& (0+255),2,b
 31618  00185A  D008               	goto	l1472
 31619                           
 31620                           ; BSR set to: 0
 31621                           ;keyboard.c: 649: pitch = As;
 31622  00185C  0E0A               	movlw	10
 31623  00185E  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31624                           
 31625                           ; BSR set to: 0
 31626                           ;keyboard.c: 650: ON_OFF = 1;
 31627  001860  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31628                           
 31629                           ; BSR set to: 0
 31630                           ;keyboard.c: 651: playThisNote(pitch);
 31631  001862  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31632  001864  EC0D  F032         	call	_playThisNote
 31633                           
 31634                           ;keyboard.c: 652: keyboard.SW11 = 1;
 31635  001868  0100               	movlb	0	; () banked
 31636  00186A  85D1               	bsf	(_keyboard+1)& (0+255),2,b
 31637  00186C                     l1472:
 31638                           
 31639                           ; BSR set to: 0
 31640                           ;keyboard.c: 653: }
 31641                           ;keyboard.c: 654: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW12) {
 31642                           
 31643                           ; BSR set to: 0
 31644  00186C  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 31645                           
 31646                           ; BSR set to: 0
 31647  00186E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31648  001870  D00A               	goto	l1473
 31649                           
 31650                           ; BSR set to: 0
 31651  001872  B7D1               	btfsc	(_keyboard+1)& (0+255),3,b
 31652  001874  D008               	goto	l1473
 31653                           
 31654                           ; BSR set to: 0
 31655                           ;keyboard.c: 655: pitch = B;
 31656  001876  0E0B               	movlw	11
 31657  001878  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31658                           
 31659                           ; BSR set to: 0
 31660                           ;keyboard.c: 656: ON_OFF = 1;
 31661  00187A  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31662                           
 31663                           ; BSR set to: 0
 31664                           ;keyboard.c: 657: playThisNote(pitch);
 31665  00187C  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31666  00187E  EC0D  F032         	call	_playThisNote
 31667                           
 31668                           ;keyboard.c: 658: keyboard.SW12 = 1;
 31669  001882  0100               	movlb	0	; () banked
 31670  001884  87D1               	bsf	(_keyboard+1)& (0+255),3,b
 31671  001886                     l1473:
 31672                           
 31673                           ; BSR set to: 0
 31674                           ;keyboard.c: 659: }
 31675                           ;keyboard.c: 660: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW13) {
 31676                           
 31677                           ; BSR set to: 0
 31678  001886  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 31679                           
 31680                           ; BSR set to: 0
 31681  001888  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31682  00188A  D00A               	goto	l1474
 31683                           
 31684                           ; BSR set to: 0
 31685  00188C  B9D1               	btfsc	(_keyboard+1)& (0+255),4,b
 31686  00188E  D008               	goto	l1474
 31687                           
 31688                           ; BSR set to: 0
 31689                           ;keyboard.c: 661: pitch = C2;
 31690  001890  0E0C               	movlw	12
 31691  001892  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31692                           
 31693                           ; BSR set to: 0
 31694                           ;keyboard.c: 662: ON_OFF = 1;
 31695  001894  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31696                           
 31697                           ; BSR set to: 0
 31698                           ;keyboard.c: 663: playThisNote(pitch);
 31699  001896  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31700  001898  EC0D  F032         	call	_playThisNote
 31701                           
 31702                           ;keyboard.c: 664: keyboard.SW13 = 1;
 31703  00189C  0100               	movlb	0	; () banked
 31704  00189E  89D1               	bsf	(_keyboard+1)& (0+255),4,b
 31705  0018A0                     l1474:
 31706                           
 31707                           ; BSR set to: 0
 31708                           ;keyboard.c: 665: }
 31709                           ;keyboard.c: 666: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14) {
 31710                           
 31711                           ; BSR set to: 0
 31712  0018A0  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 31713                           
 31714                           ; BSR set to: 0
 31715  0018A2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31716  0018A4  D00A               	goto	l1475
 31717                           
 31718                           ; BSR set to: 0
 31719  0018A6  BBD1               	btfsc	(_keyboard+1)& (0+255),5,b
 31720  0018A8  D008               	goto	l1475
 31721                           
 31722                           ; BSR set to: 0
 31723                           ;keyboard.c: 667: pitch = C2s;
 31724  0018AA  0E0D               	movlw	13
 31725  0018AC  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31726                           
 31727                           ; BSR set to: 0
 31728                           ;keyboard.c: 668: ON_OFF = 1;
 31729  0018AE  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31730                           
 31731                           ; BSR set to: 0
 31732                           ;keyboard.c: 669: playThisNote(pitch);
 31733  0018B0  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31734  0018B2  EC0D  F032         	call	_playThisNote
 31735                           
 31736                           ;keyboard.c: 670: keyboard.SW14 = 1;
 31737  0018B6  0100               	movlb	0	; () banked
 31738  0018B8  8BD1               	bsf	(_keyboard+1)& (0+255),5,b
 31739  0018BA                     l1475:
 31740                           
 31741                           ; BSR set to: 0
 31742                           ;keyboard.c: 671: }
 31743                           ;keyboard.c: 672: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW15) {
 31744                           
 31745                           ; BSR set to: 0
 31746  0018BA  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 31747                           
 31748                           ; BSR set to: 0
 31749  0018BC  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31750  0018BE  D00A               	goto	l1476
 31751                           
 31752                           ; BSR set to: 0
 31753  0018C0  BDD1               	btfsc	(_keyboard+1)& (0+255),6,b
 31754  0018C2  D008               	goto	l1476
 31755                           
 31756                           ; BSR set to: 0
 31757                           ;keyboard.c: 673: pitch = D2;
 31758  0018C4  0E0E               	movlw	14
 31759  0018C6  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31760                           
 31761                           ; BSR set to: 0
 31762                           ;keyboard.c: 674: ON_OFF = 1;
 31763  0018C8  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31764                           
 31765                           ; BSR set to: 0
 31766                           ;keyboard.c: 675: playThisNote(pitch);
 31767  0018CA  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31768  0018CC  EC0D  F032         	call	_playThisNote
 31769                           
 31770                           ;keyboard.c: 676: keyboard.SW15 = 1;
 31771  0018D0  0100               	movlb	0	; () banked
 31772  0018D2  8DD1               	bsf	(_keyboard+1)& (0+255),6,b
 31773  0018D4                     l1476:
 31774                           
 31775                           ; BSR set to: 0
 31776                           ;keyboard.c: 677: }
 31777                           ;keyboard.c: 678: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16) {
 31778                           
 31779                           ; BSR set to: 0
 31780  0018D4  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 31781                           
 31782                           ; BSR set to: 0
 31783  0018D6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31784  0018D8  D00A               	goto	l1477
 31785                           
 31786                           ; BSR set to: 0
 31787  0018DA  BFD1               	btfsc	(_keyboard+1)& (0+255),7,b
 31788  0018DC  D008               	goto	l1477
 31789                           
 31790                           ; BSR set to: 0
 31791                           ;keyboard.c: 679: pitch = D2s;
 31792  0018DE  0E0F               	movlw	15
 31793  0018E0  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31794                           
 31795                           ; BSR set to: 0
 31796                           ;keyboard.c: 680: ON_OFF = 1;
 31797  0018E2  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31798                           
 31799                           ; BSR set to: 0
 31800                           ;keyboard.c: 681: playThisNote(pitch);
 31801  0018E4  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31802  0018E6  EC0D  F032         	call	_playThisNote
 31803                           
 31804                           ;keyboard.c: 682: keyboard.SW16 = 1;
 31805  0018EA  0100               	movlb	0	; () banked
 31806  0018EC  8FD1               	bsf	(_keyboard+1)& (0+255),7,b
 31807  0018EE                     l1477:
 31808                           
 31809                           ; BSR set to: 0
 31810                           ;keyboard.c: 683: }
 31811                           ;keyboard.c: 684: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW17) {
 31812                           
 31813                           ; BSR set to: 0
 31814  0018EE  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 31815                           
 31816                           ; BSR set to: 0
 31817  0018F0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31818  0018F2  D00A               	goto	l1478
 31819                           
 31820                           ; BSR set to: 0
 31821  0018F4  B1D2               	btfsc	(_keyboard+2)& (0+255),0,b
 31822  0018F6  D008               	goto	l1478
 31823                           
 31824                           ; BSR set to: 0
 31825                           ;keyboard.c: 685: pitch = E2;
 31826  0018F8  0E10               	movlw	16
 31827  0018FA  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31828                           
 31829                           ; BSR set to: 0
 31830                           ;keyboard.c: 686: ON_OFF = 1;
 31831  0018FC  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31832                           
 31833                           ; BSR set to: 0
 31834                           ;keyboard.c: 687: playThisNote(pitch);
 31835  0018FE  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31836  001900  EC0D  F032         	call	_playThisNote
 31837                           
 31838                           ;keyboard.c: 688: keyboard.SW17 = 1;
 31839  001904  0100               	movlb	0	; () banked
 31840  001906  81D2               	bsf	(_keyboard+2)& (0+255),0,b
 31841  001908                     l1478:
 31842                           
 31843                           ; BSR set to: 0
 31844                           ;keyboard.c: 689: }
 31845                           ;keyboard.c: 690: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW18) {
 31846                           
 31847                           ; BSR set to: 0
 31848  001908  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 31849                           
 31850                           ; BSR set to: 0
 31851  00190A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31852  00190C  D00A               	goto	l1479
 31853                           
 31854                           ; BSR set to: 0
 31855  00190E  B3D2               	btfsc	(_keyboard+2)& (0+255),1,b
 31856  001910  D008               	goto	l1479
 31857                           
 31858                           ; BSR set to: 0
 31859                           ;keyboard.c: 691: pitch = F2;
 31860  001912  0E11               	movlw	17
 31861  001914  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31862                           
 31863                           ; BSR set to: 0
 31864                           ;keyboard.c: 692: ON_OFF = 1;
 31865  001916  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31866                           
 31867                           ; BSR set to: 0
 31868                           ;keyboard.c: 693: playThisNote(pitch);
 31869  001918  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31870  00191A  EC0D  F032         	call	_playThisNote
 31871                           
 31872                           ;keyboard.c: 694: keyboard.SW18 = 1;
 31873  00191E  0100               	movlb	0	; () banked
 31874  001920  83D2               	bsf	(_keyboard+2)& (0+255),1,b
 31875  001922                     l1479:
 31876                           
 31877                           ; BSR set to: 0
 31878                           ;keyboard.c: 695: }
 31879                           ;keyboard.c: 696: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19) {
 31880                           
 31881                           ; BSR set to: 0
 31882  001922  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 31883                           
 31884                           ; BSR set to: 0
 31885  001924  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31886  001926  D00A               	goto	l1480
 31887                           
 31888                           ; BSR set to: 0
 31889  001928  B5D2               	btfsc	(_keyboard+2)& (0+255),2,b
 31890  00192A  D008               	goto	l1480
 31891                           
 31892                           ; BSR set to: 0
 31893                           ;keyboard.c: 697: pitch = F2s;
 31894  00192C  0E12               	movlw	18
 31895  00192E  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31896                           
 31897                           ; BSR set to: 0
 31898                           ;keyboard.c: 698: ON_OFF = 1;
 31899  001930  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31900                           
 31901                           ; BSR set to: 0
 31902                           ;keyboard.c: 699: playThisNote(pitch);
 31903  001932  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31904  001934  EC0D  F032         	call	_playThisNote
 31905                           
 31906                           ;keyboard.c: 700: keyboard.SW19 = 1;
 31907  001938  0100               	movlb	0	; () banked
 31908  00193A  85D2               	bsf	(_keyboard+2)& (0+255),2,b
 31909  00193C                     l1480:
 31910                           
 31911                           ; BSR set to: 0
 31912                           ;keyboard.c: 701: }
 31913                           ;keyboard.c: 702: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW20) {
 31914                           
 31915                           ; BSR set to: 0
 31916  00193C  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 31917                           
 31918                           ; BSR set to: 0
 31919  00193E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31920  001940  D00A               	goto	l1481
 31921                           
 31922                           ; BSR set to: 0
 31923  001942  B7D2               	btfsc	(_keyboard+2)& (0+255),3,b
 31924  001944  D008               	goto	l1481
 31925                           
 31926                           ; BSR set to: 0
 31927                           ;keyboard.c: 703: pitch = G2;
 31928  001946  0E13               	movlw	19
 31929  001948  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31930                           
 31931                           ; BSR set to: 0
 31932                           ;keyboard.c: 704: ON_OFF = 1;
 31933  00194A  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31934                           
 31935                           ; BSR set to: 0
 31936                           ;keyboard.c: 705: playThisNote(pitch);
 31937  00194C  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31938  00194E  EC0D  F032         	call	_playThisNote
 31939                           
 31940                           ;keyboard.c: 706: keyboard.SW20 = 1;
 31941  001952  0100               	movlb	0	; () banked
 31942  001954  87D2               	bsf	(_keyboard+2)& (0+255),3,b
 31943  001956                     l1481:
 31944                           
 31945                           ; BSR set to: 0
 31946                           ;keyboard.c: 707: }
 31947                           ;keyboard.c: 708: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21) {
 31948                           
 31949                           ; BSR set to: 0
 31950  001956  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 31951                           
 31952                           ; BSR set to: 0
 31953  001958  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31954  00195A  D00A               	goto	l1482
 31955                           
 31956                           ; BSR set to: 0
 31957  00195C  B9D2               	btfsc	(_keyboard+2)& (0+255),4,b
 31958  00195E  D008               	goto	l1482
 31959                           
 31960                           ; BSR set to: 0
 31961                           ;keyboard.c: 709: pitch = G2s;
 31962  001960  0E14               	movlw	20
 31963  001962  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31964                           
 31965                           ; BSR set to: 0
 31966                           ;keyboard.c: 710: ON_OFF = 1;
 31967  001964  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31968                           
 31969                           ; BSR set to: 0
 31970                           ;keyboard.c: 711: playThisNote(pitch);
 31971  001966  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31972  001968  EC0D  F032         	call	_playThisNote
 31973                           
 31974                           ;keyboard.c: 712: keyboard.SW21 = 1;
 31975  00196C  0100               	movlb	0	; () banked
 31976  00196E  89D2               	bsf	(_keyboard+2)& (0+255),4,b
 31977  001970                     l1482:
 31978                           
 31979                           ; BSR set to: 0
 31980                           ;keyboard.c: 713: }
 31981                           ;keyboard.c: 714: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW22) {
 31982                           
 31983                           ; BSR set to: 0
 31984  001970  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 31985                           
 31986                           ; BSR set to: 0
 31987  001972  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31988  001974  D00A               	goto	l1483
 31989                           
 31990                           ; BSR set to: 0
 31991  001976  BBD2               	btfsc	(_keyboard+2)& (0+255),5,b
 31992  001978  D008               	goto	l1483
 31993                           
 31994                           ; BSR set to: 0
 31995                           ;keyboard.c: 715: pitch = A2;
 31996  00197A  0E15               	movlw	21
 31997  00197C  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31998                           
 31999                           ; BSR set to: 0
 32000                           ;keyboard.c: 716: ON_OFF = 1;
 32001  00197E  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32002                           
 32003                           ; BSR set to: 0
 32004                           ;keyboard.c: 717: playThisNote(pitch);
 32005  001980  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32006  001982  EC0D  F032         	call	_playThisNote
 32007                           
 32008                           ;keyboard.c: 718: keyboard.SW22 = 1;
 32009  001986  0100               	movlb	0	; () banked
 32010  001988  8BD2               	bsf	(_keyboard+2)& (0+255),5,b
 32011  00198A                     l1483:
 32012                           
 32013                           ; BSR set to: 0
 32014                           ;keyboard.c: 719: }
 32015                           ;keyboard.c: 720: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23) {
 32016                           
 32017                           ; BSR set to: 0
 32018  00198A  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 32019                           
 32020                           ; BSR set to: 0
 32021  00198C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 32022  00198E  D00A               	goto	l1484
 32023                           
 32024                           ; BSR set to: 0
 32025  001990  BDD2               	btfsc	(_keyboard+2)& (0+255),6,b
 32026  001992  D008               	goto	l1484
 32027                           
 32028                           ; BSR set to: 0
 32029                           ;keyboard.c: 721: pitch = A2s;
 32030  001994  0E16               	movlw	22
 32031  001996  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32032                           
 32033                           ; BSR set to: 0
 32034                           ;keyboard.c: 722: ON_OFF = 1;
 32035  001998  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32036                           
 32037                           ; BSR set to: 0
 32038                           ;keyboard.c: 723: playThisNote(pitch);
 32039  00199A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32040  00199C  EC0D  F032         	call	_playThisNote
 32041                           
 32042                           ;keyboard.c: 724: keyboard.SW23 = 1;
 32043  0019A0  0100               	movlb	0	; () banked
 32044  0019A2  8DD2               	bsf	(_keyboard+2)& (0+255),6,b
 32045  0019A4                     l1484:
 32046                           
 32047                           ; BSR set to: 0
 32048                           ;keyboard.c: 725: }
 32049                           ;keyboard.c: 726: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW24) {
 32050                           
 32051                           ; BSR set to: 0
 32052  0019A4  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 32053                           
 32054                           ; BSR set to: 0
 32055  0019A6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 32056  0019A8  D00A               	goto	l1485
 32057                           
 32058                           ; BSR set to: 0
 32059  0019AA  BFD2               	btfsc	(_keyboard+2)& (0+255),7,b
 32060  0019AC  D008               	goto	l1485
 32061                           
 32062                           ; BSR set to: 0
 32063                           ;keyboard.c: 727: pitch = B2;
 32064  0019AE  0E17               	movlw	23
 32065  0019B0  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32066                           
 32067                           ; BSR set to: 0
 32068                           ;keyboard.c: 728: ON_OFF = 1;
 32069  0019B2  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32070                           
 32071                           ; BSR set to: 0
 32072                           ;keyboard.c: 729: playThisNote(pitch);
 32073  0019B4  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32074  0019B6  EC0D  F032         	call	_playThisNote
 32075                           
 32076                           ;keyboard.c: 730: keyboard.SW24 = 1;
 32077  0019BA  0100               	movlb	0	; () banked
 32078  0019BC  8FD2               	bsf	(_keyboard+2)& (0+255),7,b
 32079  0019BE                     l1485:
 32080                           
 32081                           ; BSR set to: 0
 32082                           ;keyboard.c: 731: }
 32083                           ;keyboard.c: 732: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW25) {
 32084                           
 32085                           ; BSR set to: 0
 32086  0019BE  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 32087                           
 32088                           ; BSR set to: 0
 32089  0019C0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 32090  0019C2  D00A               	goto	l1486
 32091                           
 32092                           ; BSR set to: 0
 32093  0019C4  B1D3               	btfsc	(_keyboard+3)& (0+255),0,b
 32094  0019C6  D008               	goto	l1486
 32095                           
 32096                           ; BSR set to: 0
 32097                           ;keyboard.c: 733: pitch = C3;
 32098  0019C8  0E18               	movlw	24
 32099  0019CA  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32100                           
 32101                           ; BSR set to: 0
 32102                           ;keyboard.c: 734: ON_OFF = 1;
 32103  0019CC  8A36               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32104                           
 32105                           ; BSR set to: 0
 32106                           ;keyboard.c: 735: playThisNote(pitch);
 32107  0019CE  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32108  0019D0  EC0D  F032         	call	_playThisNote
 32109                           
 32110                           ;keyboard.c: 736: keyboard.SW25 = 1;
 32111  0019D4  0100               	movlb	0	; () banked
 32112  0019D6  81D3               	bsf	(_keyboard+3)& (0+255),0,b
 32113  0019D8                     l1486:
 32114                           
 32115                           ; BSR set to: 0
 32116                           ;keyboard.c: 737: }
 32117                           ;keyboard.c: 740: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x000000
      +                          01) == 0) && keyboard.SW1) {
 32118                           
 32119                           ; BSR set to: 0
 32120  0019D8  B1D4               	btfsc	_button_state_last& (0+255),0,b
 32121                           
 32122                           ; BSR set to: 0
 32123  0019DA  B1D8               	btfsc	_button_state_now& (0+255),0,b
 32124  0019DC  D00A               	goto	l1487
 32125                           
 32126                           ; BSR set to: 0
 32127  0019DE  A1D0               	btfss	_keyboard& (0+255),0,b
 32128  0019E0  D008               	goto	l1487
 32129                           
 32130                           ; BSR set to: 0
 32131                           ;keyboard.c: 741: pitch = C;
 32132  0019E2  0E00               	movlw	0
 32133  0019E4  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32134                           
 32135                           ; BSR set to: 0
 32136                           ;keyboard.c: 742: ON_OFF = 0;
 32137  0019E6  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32138                           
 32139                           ; BSR set to: 0
 32140                           ;keyboard.c: 743: playThisNote(pitch);
 32141  0019E8  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32142  0019EA  EC0D  F032         	call	_playThisNote
 32143                           
 32144                           ;keyboard.c: 744: keyboard.SW1 = 0;
 32145  0019EE  0100               	movlb	0	; () banked
 32146  0019F0  91D0               	bcf	_keyboard& (0+255),0,b
 32147  0019F2                     l1487:
 32148                           
 32149                           ; BSR set to: 0
 32150                           ;keyboard.c: 745: }
 32151                           ;keyboard.c: 746: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 32152                           
 32153                           ; BSR set to: 0
 32154  0019F2  B3D4               	btfsc	_button_state_last& (0+255),1,b
 32155                           
 32156                           ; BSR set to: 0
 32157  0019F4  B3D8               	btfsc	_button_state_now& (0+255),1,b
 32158  0019F6  D00A               	goto	l1488
 32159                           
 32160                           ; BSR set to: 0
 32161  0019F8  A3D0               	btfss	_keyboard& (0+255),1,b
 32162  0019FA  D008               	goto	l1488
 32163                           
 32164                           ; BSR set to: 0
 32165                           ;keyboard.c: 747: pitch = Cs;
 32166  0019FC  0E01               	movlw	1
 32167  0019FE  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32168                           
 32169                           ; BSR set to: 0
 32170                           ;keyboard.c: 748: ON_OFF = 0;
 32171  001A00  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32172                           
 32173                           ; BSR set to: 0
 32174                           ;keyboard.c: 749: playThisNote(pitch);
 32175  001A02  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32176  001A04  EC0D  F032         	call	_playThisNote
 32177                           
 32178                           ;keyboard.c: 750: keyboard.SW2 = 0;
 32179  001A08  0100               	movlb	0	; () banked
 32180  001A0A  93D0               	bcf	_keyboard& (0+255),1,b
 32181  001A0C                     l1488:
 32182                           
 32183                           ; BSR set to: 0
 32184                           ;keyboard.c: 751: }
 32185                           ;keyboard.c: 752: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x000000
      +                          04) == 0) && keyboard.SW3) {
 32186                           
 32187                           ; BSR set to: 0
 32188  001A0C  B5D4               	btfsc	_button_state_last& (0+255),2,b
 32189                           
 32190                           ; BSR set to: 0
 32191  001A0E  B5D8               	btfsc	_button_state_now& (0+255),2,b
 32192  001A10  D00A               	goto	l1489
 32193                           
 32194                           ; BSR set to: 0
 32195  001A12  A5D0               	btfss	_keyboard& (0+255),2,b
 32196  001A14  D008               	goto	l1489
 32197                           
 32198                           ; BSR set to: 0
 32199                           ;keyboard.c: 753: pitch = D;
 32200  001A16  0E02               	movlw	2
 32201  001A18  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32202                           
 32203                           ; BSR set to: 0
 32204                           ;keyboard.c: 754: ON_OFF = 0;
 32205  001A1A  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32206                           
 32207                           ; BSR set to: 0
 32208                           ;keyboard.c: 755: playThisNote(pitch);
 32209  001A1C  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32210  001A1E  EC0D  F032         	call	_playThisNote
 32211                           
 32212                           ;keyboard.c: 756: keyboard.SW3 = 0;
 32213  001A22  0100               	movlb	0	; () banked
 32214  001A24  95D0               	bcf	_keyboard& (0+255),2,b
 32215  001A26                     l1489:
 32216                           
 32217                           ; BSR set to: 0
 32218                           ;keyboard.c: 757: }
 32219                           ;keyboard.c: 758: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 32220                           
 32221                           ; BSR set to: 0
 32222  001A26  B7D4               	btfsc	_button_state_last& (0+255),3,b
 32223                           
 32224                           ; BSR set to: 0
 32225  001A28  B7D8               	btfsc	_button_state_now& (0+255),3,b
 32226  001A2A  D00A               	goto	l1490
 32227                           
 32228                           ; BSR set to: 0
 32229  001A2C  A7D0               	btfss	_keyboard& (0+255),3,b
 32230  001A2E  D008               	goto	l1490
 32231                           
 32232                           ; BSR set to: 0
 32233                           ;keyboard.c: 759: pitch = Ds;
 32234  001A30  0E03               	movlw	3
 32235  001A32  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32236                           
 32237                           ; BSR set to: 0
 32238                           ;keyboard.c: 760: ON_OFF = 0;
 32239  001A34  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32240                           
 32241                           ; BSR set to: 0
 32242                           ;keyboard.c: 761: playThisNote(pitch);
 32243  001A36  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32244  001A38  EC0D  F032         	call	_playThisNote
 32245                           
 32246                           ;keyboard.c: 762: keyboard.SW4 = 0;
 32247  001A3C  0100               	movlb	0	; () banked
 32248  001A3E  97D0               	bcf	_keyboard& (0+255),3,b
 32249  001A40                     l1490:
 32250                           
 32251                           ; BSR set to: 0
 32252                           ;keyboard.c: 763: }
 32253                           ;keyboard.c: 764: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x000000
      +                          10) == 0) && keyboard.SW5) {
 32254                           
 32255                           ; BSR set to: 0
 32256  001A40  B9D4               	btfsc	_button_state_last& (0+255),4,b
 32257                           
 32258                           ; BSR set to: 0
 32259  001A42  B9D8               	btfsc	_button_state_now& (0+255),4,b
 32260  001A44  D00A               	goto	l1491
 32261                           
 32262                           ; BSR set to: 0
 32263  001A46  A9D0               	btfss	_keyboard& (0+255),4,b
 32264  001A48  D008               	goto	l1491
 32265                           
 32266                           ; BSR set to: 0
 32267                           ;keyboard.c: 765: pitch = E;
 32268  001A4A  0E04               	movlw	4
 32269  001A4C  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32270                           
 32271                           ; BSR set to: 0
 32272                           ;keyboard.c: 766: ON_OFF = 0;
 32273  001A4E  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32274                           
 32275                           ; BSR set to: 0
 32276                           ;keyboard.c: 767: playThisNote(pitch);
 32277  001A50  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32278  001A52  EC0D  F032         	call	_playThisNote
 32279                           
 32280                           ;keyboard.c: 768: keyboard.SW5 = 0;
 32281  001A56  0100               	movlb	0	; () banked
 32282  001A58  99D0               	bcf	_keyboard& (0+255),4,b
 32283  001A5A                     l1491:
 32284                           
 32285                           ; BSR set to: 0
 32286                           ;keyboard.c: 769: }
 32287                           ;keyboard.c: 770: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x000000
      +                          20) == 0) && keyboard.SW6) {
 32288                           
 32289                           ; BSR set to: 0
 32290  001A5A  BBD4               	btfsc	_button_state_last& (0+255),5,b
 32291                           
 32292                           ; BSR set to: 0
 32293  001A5C  BBD8               	btfsc	_button_state_now& (0+255),5,b
 32294  001A5E  D00A               	goto	l1492
 32295                           
 32296                           ; BSR set to: 0
 32297  001A60  ABD0               	btfss	_keyboard& (0+255),5,b
 32298  001A62  D008               	goto	l1492
 32299                           
 32300                           ; BSR set to: 0
 32301                           ;keyboard.c: 771: pitch = F;
 32302  001A64  0E05               	movlw	5
 32303  001A66  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32304                           
 32305                           ; BSR set to: 0
 32306                           ;keyboard.c: 772: ON_OFF = 0;
 32307  001A68  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32308                           
 32309                           ; BSR set to: 0
 32310                           ;keyboard.c: 773: playThisNote(pitch);
 32311  001A6A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32312  001A6C  EC0D  F032         	call	_playThisNote
 32313                           
 32314                           ;keyboard.c: 774: keyboard.SW6 = 0;
 32315  001A70  0100               	movlb	0	; () banked
 32316  001A72  9BD0               	bcf	_keyboard& (0+255),5,b
 32317  001A74                     l1492:
 32318                           
 32319                           ; BSR set to: 0
 32320                           ;keyboard.c: 775: }
 32321                           ;keyboard.c: 776: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 32322                           
 32323                           ; BSR set to: 0
 32324  001A74  BDD4               	btfsc	_button_state_last& (0+255),6,b
 32325                           
 32326                           ; BSR set to: 0
 32327  001A76  BDD8               	btfsc	_button_state_now& (0+255),6,b
 32328  001A78  D00A               	goto	l1493
 32329                           
 32330                           ; BSR set to: 0
 32331  001A7A  ADD0               	btfss	_keyboard& (0+255),6,b
 32332  001A7C  D008               	goto	l1493
 32333                           
 32334                           ; BSR set to: 0
 32335                           ;keyboard.c: 777: pitch = Fs;
 32336  001A7E  0E06               	movlw	6
 32337  001A80  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32338                           
 32339                           ; BSR set to: 0
 32340                           ;keyboard.c: 778: ON_OFF = 0;
 32341  001A82  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32342                           
 32343                           ; BSR set to: 0
 32344                           ;keyboard.c: 779: playThisNote(pitch);
 32345  001A84  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32346  001A86  EC0D  F032         	call	_playThisNote
 32347                           
 32348                           ;keyboard.c: 780: keyboard.SW7 = 0;
 32349  001A8A  0100               	movlb	0	; () banked
 32350  001A8C  9DD0               	bcf	_keyboard& (0+255),6,b
 32351  001A8E                     l1493:
 32352                           
 32353                           ; BSR set to: 0
 32354                           ;keyboard.c: 781: }
 32355                           ;keyboard.c: 782: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x000000
      +                          80) == 0) && keyboard.SW8) {
 32356                           
 32357                           ; BSR set to: 0
 32358  001A8E  BFD4               	btfsc	_button_state_last& (0+255),7,b
 32359                           
 32360                           ; BSR set to: 0
 32361  001A90  BFD8               	btfsc	_button_state_now& (0+255),7,b
 32362  001A92  D00A               	goto	l1494
 32363                           
 32364                           ; BSR set to: 0
 32365  001A94  AFD0               	btfss	_keyboard& (0+255),7,b
 32366  001A96  D008               	goto	l1494
 32367                           
 32368                           ; BSR set to: 0
 32369                           ;keyboard.c: 783: pitch = G;
 32370  001A98  0E07               	movlw	7
 32371  001A9A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32372                           
 32373                           ; BSR set to: 0
 32374                           ;keyboard.c: 784: ON_OFF = 0;
 32375  001A9C  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32376                           
 32377                           ; BSR set to: 0
 32378                           ;keyboard.c: 785: playThisNote(pitch);
 32379  001A9E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32380  001AA0  EC0D  F032         	call	_playThisNote
 32381                           
 32382                           ;keyboard.c: 786: keyboard.SW8 = 0;
 32383  001AA4  0100               	movlb	0	; () banked
 32384  001AA6  9FD0               	bcf	_keyboard& (0+255),7,b
 32385  001AA8                     l1494:
 32386                           
 32387                           ; BSR set to: 0
 32388                           ;keyboard.c: 787: }
 32389                           ;keyboard.c: 788: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 32390                           
 32391                           ; BSR set to: 0
 32392  001AA8  B1D5               	btfsc	(_button_state_last+1)& (0+255),0,b
 32393                           
 32394                           ; BSR set to: 0
 32395  001AAA  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 32396  001AAC  D00A               	goto	l1495
 32397                           
 32398                           ; BSR set to: 0
 32399  001AAE  A1D1               	btfss	(_keyboard+1)& (0+255),0,b
 32400  001AB0  D008               	goto	l1495
 32401                           
 32402                           ; BSR set to: 0
 32403                           ;keyboard.c: 789: pitch = Gs;
 32404  001AB2  0E08               	movlw	8
 32405  001AB4  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32406                           
 32407                           ; BSR set to: 0
 32408                           ;keyboard.c: 790: ON_OFF = 0;
 32409  001AB6  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32410                           
 32411                           ; BSR set to: 0
 32412                           ;keyboard.c: 791: playThisNote(pitch);
 32413  001AB8  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32414  001ABA  EC0D  F032         	call	_playThisNote
 32415                           
 32416                           ;keyboard.c: 792: keyboard.SW9 = 0;
 32417  001ABE  0100               	movlb	0	; () banked
 32418  001AC0  91D1               	bcf	(_keyboard+1)& (0+255),0,b
 32419  001AC2                     l1495:
 32420                           
 32421                           ; BSR set to: 0
 32422                           ;keyboard.c: 793: }
 32423                           ;keyboard.c: 794: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x000002
      +                          00) == 0) && keyboard.SW10) {
 32424                           
 32425                           ; BSR set to: 0
 32426  001AC2  B3D5               	btfsc	(_button_state_last+1)& (0+255),1,b
 32427                           
 32428                           ; BSR set to: 0
 32429  001AC4  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 32430  001AC6  D00A               	goto	l1496
 32431                           
 32432                           ; BSR set to: 0
 32433  001AC8  A3D1               	btfss	(_keyboard+1)& (0+255),1,b
 32434  001ACA  D008               	goto	l1496
 32435                           
 32436                           ; BSR set to: 0
 32437                           ;keyboard.c: 795: pitch = A;
 32438  001ACC  0E09               	movlw	9
 32439  001ACE  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32440                           
 32441                           ; BSR set to: 0
 32442                           ;keyboard.c: 796: ON_OFF = 0;
 32443  001AD0  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32444                           
 32445                           ; BSR set to: 0
 32446                           ;keyboard.c: 797: playThisNote(pitch);
 32447  001AD2  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32448  001AD4  EC0D  F032         	call	_playThisNote
 32449                           
 32450                           ;keyboard.c: 798: keyboard.SW10 = 0;
 32451  001AD8  0100               	movlb	0	; () banked
 32452  001ADA  93D1               	bcf	(_keyboard+1)& (0+255),1,b
 32453  001ADC                     l1496:
 32454                           
 32455                           ; BSR set to: 0
 32456                           ;keyboard.c: 799: }
 32457                           ;keyboard.c: 800: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 32458                           
 32459                           ; BSR set to: 0
 32460  001ADC  B5D5               	btfsc	(_button_state_last+1)& (0+255),2,b
 32461                           
 32462                           ; BSR set to: 0
 32463  001ADE  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 32464  001AE0  D00A               	goto	l1497
 32465                           
 32466                           ; BSR set to: 0
 32467  001AE2  A5D1               	btfss	(_keyboard+1)& (0+255),2,b
 32468  001AE4  D008               	goto	l1497
 32469                           
 32470                           ; BSR set to: 0
 32471                           ;keyboard.c: 801: pitch = As;
 32472  001AE6  0E0A               	movlw	10
 32473  001AE8  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32474                           
 32475                           ; BSR set to: 0
 32476                           ;keyboard.c: 802: ON_OFF = 0;
 32477  001AEA  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32478                           
 32479                           ; BSR set to: 0
 32480                           ;keyboard.c: 803: playThisNote(pitch);
 32481  001AEC  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32482  001AEE  EC0D  F032         	call	_playThisNote
 32483                           
 32484                           ;keyboard.c: 804: keyboard.SW11 = 0;
 32485  001AF2  0100               	movlb	0	; () banked
 32486  001AF4  95D1               	bcf	(_keyboard+1)& (0+255),2,b
 32487  001AF6                     l1497:
 32488                           
 32489                           ; BSR set to: 0
 32490                           ;keyboard.c: 805: }
 32491                           ;keyboard.c: 806: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x000008
      +                          00) == 0) && keyboard.SW12) {
 32492                           
 32493                           ; BSR set to: 0
 32494  001AF6  B7D5               	btfsc	(_button_state_last+1)& (0+255),3,b
 32495                           
 32496                           ; BSR set to: 0
 32497  001AF8  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 32498  001AFA  D00A               	goto	l1498
 32499                           
 32500                           ; BSR set to: 0
 32501  001AFC  A7D1               	btfss	(_keyboard+1)& (0+255),3,b
 32502  001AFE  D008               	goto	l1498
 32503                           
 32504                           ; BSR set to: 0
 32505                           ;keyboard.c: 807: pitch = B;
 32506  001B00  0E0B               	movlw	11
 32507  001B02  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32508                           
 32509                           ; BSR set to: 0
 32510                           ;keyboard.c: 808: ON_OFF = 0;
 32511  001B04  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32512                           
 32513                           ; BSR set to: 0
 32514                           ;keyboard.c: 809: playThisNote(pitch);
 32515  001B06  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32516  001B08  EC0D  F032         	call	_playThisNote
 32517                           
 32518                           ;keyboard.c: 810: keyboard.SW12 = 0;
 32519  001B0C  0100               	movlb	0	; () banked
 32520  001B0E  97D1               	bcf	(_keyboard+1)& (0+255),3,b
 32521  001B10                     l1498:
 32522                           
 32523                           ; BSR set to: 0
 32524                           ;keyboard.c: 811: }
 32525                           ;keyboard.c: 812: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x000010
      +                          00) == 0) && keyboard.SW13) {
 32526                           
 32527                           ; BSR set to: 0
 32528  001B10  B9D5               	btfsc	(_button_state_last+1)& (0+255),4,b
 32529                           
 32530                           ; BSR set to: 0
 32531  001B12  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 32532  001B14  D00A               	goto	l1499
 32533                           
 32534                           ; BSR set to: 0
 32535  001B16  A9D1               	btfss	(_keyboard+1)& (0+255),4,b
 32536  001B18  D008               	goto	l1499
 32537                           
 32538                           ; BSR set to: 0
 32539                           ;keyboard.c: 813: pitch = C2;
 32540  001B1A  0E0C               	movlw	12
 32541  001B1C  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32542                           
 32543                           ; BSR set to: 0
 32544                           ;keyboard.c: 814: ON_OFF = 0;
 32545  001B1E  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32546                           
 32547                           ; BSR set to: 0
 32548                           ;keyboard.c: 815: playThisNote(pitch);
 32549  001B20  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32550  001B22  EC0D  F032         	call	_playThisNote
 32551                           
 32552                           ;keyboard.c: 816: keyboard.SW13 = 0;
 32553  001B26  0100               	movlb	0	; () banked
 32554  001B28  99D1               	bcf	(_keyboard+1)& (0+255),4,b
 32555  001B2A                     l1499:
 32556                           
 32557                           ; BSR set to: 0
 32558                           ;keyboard.c: 817: }
 32559                           ;keyboard.c: 818: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 32560                           
 32561                           ; BSR set to: 0
 32562  001B2A  BBD5               	btfsc	(_button_state_last+1)& (0+255),5,b
 32563                           
 32564                           ; BSR set to: 0
 32565  001B2C  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 32566  001B2E  D00A               	goto	l1500
 32567                           
 32568                           ; BSR set to: 0
 32569  001B30  ABD1               	btfss	(_keyboard+1)& (0+255),5,b
 32570  001B32  D008               	goto	l1500
 32571                           
 32572                           ; BSR set to: 0
 32573                           ;keyboard.c: 819: pitch = C2s;
 32574  001B34  0E0D               	movlw	13
 32575  001B36  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32576                           
 32577                           ; BSR set to: 0
 32578                           ;keyboard.c: 820: ON_OFF = 0;
 32579  001B38  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32580                           
 32581                           ; BSR set to: 0
 32582                           ;keyboard.c: 821: playThisNote(pitch);
 32583  001B3A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32584  001B3C  EC0D  F032         	call	_playThisNote
 32585                           
 32586                           ;keyboard.c: 822: keyboard.SW14 = 0;
 32587  001B40  0100               	movlb	0	; () banked
 32588  001B42  9BD1               	bcf	(_keyboard+1)& (0+255),5,b
 32589  001B44                     l1500:
 32590                           
 32591                           ; BSR set to: 0
 32592                           ;keyboard.c: 823: }
 32593                           ;keyboard.c: 824: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x000040
      +                          00) == 0) && keyboard.SW15) {
 32594                           
 32595                           ; BSR set to: 0
 32596  001B44  BDD5               	btfsc	(_button_state_last+1)& (0+255),6,b
 32597                           
 32598                           ; BSR set to: 0
 32599  001B46  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 32600  001B48  D00A               	goto	l1501
 32601                           
 32602                           ; BSR set to: 0
 32603  001B4A  ADD1               	btfss	(_keyboard+1)& (0+255),6,b
 32604  001B4C  D008               	goto	l1501
 32605                           
 32606                           ; BSR set to: 0
 32607                           ;keyboard.c: 825: pitch = D2;
 32608  001B4E  0E0E               	movlw	14
 32609  001B50  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32610                           
 32611                           ; BSR set to: 0
 32612                           ;keyboard.c: 826: ON_OFF = 0;
 32613  001B52  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32614                           
 32615                           ; BSR set to: 0
 32616                           ;keyboard.c: 827: playThisNote(pitch);
 32617  001B54  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32618  001B56  EC0D  F032         	call	_playThisNote
 32619                           
 32620                           ;keyboard.c: 828: keyboard.SW15 = 0;
 32621  001B5A  0100               	movlb	0	; () banked
 32622  001B5C  9DD1               	bcf	(_keyboard+1)& (0+255),6,b
 32623  001B5E                     l1501:
 32624                           
 32625                           ; BSR set to: 0
 32626                           ;keyboard.c: 829: }
 32627                           ;keyboard.c: 830: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 32628                           
 32629                           ; BSR set to: 0
 32630  001B5E  BFD5               	btfsc	(_button_state_last+1)& (0+255),7,b
 32631                           
 32632                           ; BSR set to: 0
 32633  001B60  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 32634  001B62  D00A               	goto	l1502
 32635                           
 32636                           ; BSR set to: 0
 32637  001B64  AFD1               	btfss	(_keyboard+1)& (0+255),7,b
 32638  001B66  D008               	goto	l1502
 32639                           
 32640                           ; BSR set to: 0
 32641                           ;keyboard.c: 831: pitch = D2s;
 32642  001B68  0E0F               	movlw	15
 32643  001B6A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32644                           
 32645                           ; BSR set to: 0
 32646                           ;keyboard.c: 832: ON_OFF = 0;
 32647  001B6C  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32648                           
 32649                           ; BSR set to: 0
 32650                           ;keyboard.c: 833: playThisNote(pitch);
 32651  001B6E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32652  001B70  EC0D  F032         	call	_playThisNote
 32653                           
 32654                           ;keyboard.c: 834: keyboard.SW16 = 0;
 32655  001B74  0100               	movlb	0	; () banked
 32656  001B76  9FD1               	bcf	(_keyboard+1)& (0+255),7,b
 32657  001B78                     l1502:
 32658                           
 32659                           ; BSR set to: 0
 32660                           ;keyboard.c: 835: }
 32661                           ;keyboard.c: 836: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x000100
      +                          00) == 0) && keyboard.SW17) {
 32662                           
 32663                           ; BSR set to: 0
 32664  001B78  B1D6               	btfsc	(_button_state_last+2)& (0+255),0,b
 32665                           
 32666                           ; BSR set to: 0
 32667  001B7A  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 32668  001B7C  D00A               	goto	l1503
 32669                           
 32670                           ; BSR set to: 0
 32671  001B7E  A1D2               	btfss	(_keyboard+2)& (0+255),0,b
 32672  001B80  D008               	goto	l1503
 32673                           
 32674                           ; BSR set to: 0
 32675                           ;keyboard.c: 837: pitch = E2;
 32676  001B82  0E10               	movlw	16
 32677  001B84  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32678                           
 32679                           ; BSR set to: 0
 32680                           ;keyboard.c: 838: ON_OFF = 0;
 32681  001B86  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32682                           
 32683                           ; BSR set to: 0
 32684                           ;keyboard.c: 839: playThisNote(pitch);
 32685  001B88  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32686  001B8A  EC0D  F032         	call	_playThisNote
 32687                           
 32688                           ;keyboard.c: 840: keyboard.SW17 = 0;
 32689  001B8E  0100               	movlb	0	; () banked
 32690  001B90  91D2               	bcf	(_keyboard+2)& (0+255),0,b
 32691  001B92                     l1503:
 32692                           
 32693                           ; BSR set to: 0
 32694                           ;keyboard.c: 841: }
 32695                           ;keyboard.c: 842: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x000200
      +                          00) == 0) && keyboard.SW18) {
 32696                           
 32697                           ; BSR set to: 0
 32698  001B92  B3D6               	btfsc	(_button_state_last+2)& (0+255),1,b
 32699                           
 32700                           ; BSR set to: 0
 32701  001B94  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 32702  001B96  D00A               	goto	l1504
 32703                           
 32704                           ; BSR set to: 0
 32705  001B98  A3D2               	btfss	(_keyboard+2)& (0+255),1,b
 32706  001B9A  D008               	goto	l1504
 32707                           
 32708                           ; BSR set to: 0
 32709                           ;keyboard.c: 843: pitch = F2;
 32710  001B9C  0E11               	movlw	17
 32711  001B9E  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32712                           
 32713                           ; BSR set to: 0
 32714                           ;keyboard.c: 844: ON_OFF = 0;
 32715  001BA0  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32716                           
 32717                           ; BSR set to: 0
 32718                           ;keyboard.c: 845: playThisNote(pitch);
 32719  001BA2  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32720  001BA4  EC0D  F032         	call	_playThisNote
 32721                           
 32722                           ;keyboard.c: 846: keyboard.SW18 = 0;
 32723  001BA8  0100               	movlb	0	; () banked
 32724  001BAA  93D2               	bcf	(_keyboard+2)& (0+255),1,b
 32725  001BAC                     l1504:
 32726                           
 32727                           ; BSR set to: 0
 32728                           ;keyboard.c: 847: }
 32729                           ;keyboard.c: 848: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 32730                           
 32731                           ; BSR set to: 0
 32732  001BAC  B5D6               	btfsc	(_button_state_last+2)& (0+255),2,b
 32733                           
 32734                           ; BSR set to: 0
 32735  001BAE  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 32736  001BB0  D00A               	goto	l1505
 32737                           
 32738                           ; BSR set to: 0
 32739  001BB2  A5D2               	btfss	(_keyboard+2)& (0+255),2,b
 32740  001BB4  D008               	goto	l1505
 32741                           
 32742                           ; BSR set to: 0
 32743                           ;keyboard.c: 849: pitch = F2s;
 32744  001BB6  0E12               	movlw	18
 32745  001BB8  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32746                           
 32747                           ; BSR set to: 0
 32748                           ;keyboard.c: 850: ON_OFF = 0;
 32749  001BBA  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32750                           
 32751                           ; BSR set to: 0
 32752                           ;keyboard.c: 851: playThisNote(pitch);
 32753  001BBC  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32754  001BBE  EC0D  F032         	call	_playThisNote
 32755                           
 32756                           ;keyboard.c: 852: keyboard.SW19 = 0;
 32757  001BC2  0100               	movlb	0	; () banked
 32758  001BC4  95D2               	bcf	(_keyboard+2)& (0+255),2,b
 32759  001BC6                     l1505:
 32760                           
 32761                           ; BSR set to: 0
 32762                           ;keyboard.c: 853: }
 32763                           ;keyboard.c: 854: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x000800
      +                          00) == 0) && keyboard.SW20) {
 32764                           
 32765                           ; BSR set to: 0
 32766  001BC6  B7D6               	btfsc	(_button_state_last+2)& (0+255),3,b
 32767                           
 32768                           ; BSR set to: 0
 32769  001BC8  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 32770  001BCA  D00A               	goto	l1506
 32771                           
 32772                           ; BSR set to: 0
 32773  001BCC  A7D2               	btfss	(_keyboard+2)& (0+255),3,b
 32774  001BCE  D008               	goto	l1506
 32775                           
 32776                           ; BSR set to: 0
 32777                           ;keyboard.c: 855: pitch = G2;
 32778  001BD0  0E13               	movlw	19
 32779  001BD2  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32780                           
 32781                           ; BSR set to: 0
 32782                           ;keyboard.c: 856: ON_OFF = 0;
 32783  001BD4  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32784                           
 32785                           ; BSR set to: 0
 32786                           ;keyboard.c: 857: playThisNote(pitch);
 32787  001BD6  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32788  001BD8  EC0D  F032         	call	_playThisNote
 32789                           
 32790                           ;keyboard.c: 858: keyboard.SW20 = 0;
 32791  001BDC  0100               	movlb	0	; () banked
 32792  001BDE  97D2               	bcf	(_keyboard+2)& (0+255),3,b
 32793  001BE0                     l1506:
 32794                           
 32795                           ; BSR set to: 0
 32796                           ;keyboard.c: 859: }
 32797                           ;keyboard.c: 860: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 32798                           
 32799                           ; BSR set to: 0
 32800  001BE0  B9D6               	btfsc	(_button_state_last+2)& (0+255),4,b
 32801                           
 32802                           ; BSR set to: 0
 32803  001BE2  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 32804  001BE4  D00A               	goto	l1507
 32805                           
 32806                           ; BSR set to: 0
 32807  001BE6  A9D2               	btfss	(_keyboard+2)& (0+255),4,b
 32808  001BE8  D008               	goto	l1507
 32809                           
 32810                           ; BSR set to: 0
 32811                           ;keyboard.c: 861: pitch = G2s;
 32812  001BEA  0E14               	movlw	20
 32813  001BEC  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32814                           
 32815                           ; BSR set to: 0
 32816                           ;keyboard.c: 862: ON_OFF = 0;
 32817  001BEE  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32818                           
 32819                           ; BSR set to: 0
 32820                           ;keyboard.c: 863: playThisNote(pitch);
 32821  001BF0  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32822  001BF2  EC0D  F032         	call	_playThisNote
 32823                           
 32824                           ;keyboard.c: 864: keyboard.SW21 = 0;
 32825  001BF6  0100               	movlb	0	; () banked
 32826  001BF8  99D2               	bcf	(_keyboard+2)& (0+255),4,b
 32827  001BFA                     l1507:
 32828                           
 32829                           ; BSR set to: 0
 32830                           ;keyboard.c: 865: }
 32831                           ;keyboard.c: 866: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x002000
      +                          00) == 0) && keyboard.SW22) {
 32832                           
 32833                           ; BSR set to: 0
 32834  001BFA  BBD6               	btfsc	(_button_state_last+2)& (0+255),5,b
 32835                           
 32836                           ; BSR set to: 0
 32837  001BFC  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 32838  001BFE  D00A               	goto	l1508
 32839                           
 32840                           ; BSR set to: 0
 32841  001C00  ABD2               	btfss	(_keyboard+2)& (0+255),5,b
 32842  001C02  D008               	goto	l1508
 32843                           
 32844                           ; BSR set to: 0
 32845                           ;keyboard.c: 867: pitch = A2;
 32846  001C04  0E15               	movlw	21
 32847  001C06  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32848                           
 32849                           ; BSR set to: 0
 32850                           ;keyboard.c: 868: ON_OFF = 0;
 32851  001C08  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32852                           
 32853                           ; BSR set to: 0
 32854                           ;keyboard.c: 869: playThisNote(pitch);
 32855  001C0A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32856  001C0C  EC0D  F032         	call	_playThisNote
 32857                           
 32858                           ;keyboard.c: 870: keyboard.SW22 = 0;
 32859  001C10  0100               	movlb	0	; () banked
 32860  001C12  9BD2               	bcf	(_keyboard+2)& (0+255),5,b
 32861  001C14                     l1508:
 32862                           
 32863                           ; BSR set to: 0
 32864                           ;keyboard.c: 871: }
 32865                           ;keyboard.c: 872: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 32866                           
 32867                           ; BSR set to: 0
 32868  001C14  BDD6               	btfsc	(_button_state_last+2)& (0+255),6,b
 32869                           
 32870                           ; BSR set to: 0
 32871  001C16  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 32872  001C18  D00A               	goto	l1509
 32873                           
 32874                           ; BSR set to: 0
 32875  001C1A  ADD2               	btfss	(_keyboard+2)& (0+255),6,b
 32876  001C1C  D008               	goto	l1509
 32877                           
 32878                           ; BSR set to: 0
 32879                           ;keyboard.c: 873: pitch = A2s;
 32880  001C1E  0E16               	movlw	22
 32881  001C20  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32882                           
 32883                           ; BSR set to: 0
 32884                           ;keyboard.c: 874: ON_OFF = 0;
 32885  001C22  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32886                           
 32887                           ; BSR set to: 0
 32888                           ;keyboard.c: 875: playThisNote(pitch);
 32889  001C24  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32890  001C26  EC0D  F032         	call	_playThisNote
 32891                           
 32892                           ;keyboard.c: 876: keyboard.SW23 = 0;
 32893  001C2A  0100               	movlb	0	; () banked
 32894  001C2C  9DD2               	bcf	(_keyboard+2)& (0+255),6,b
 32895  001C2E                     l1509:
 32896                           
 32897                           ; BSR set to: 0
 32898                           ;keyboard.c: 877: }
 32899                           ;keyboard.c: 878: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x008000
      +                          00) == 0) && keyboard.SW24) {
 32900                           
 32901                           ; BSR set to: 0
 32902  001C2E  BFD6               	btfsc	(_button_state_last+2)& (0+255),7,b
 32903                           
 32904                           ; BSR set to: 0
 32905  001C30  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 32906  001C32  D00A               	goto	l1510
 32907                           
 32908                           ; BSR set to: 0
 32909  001C34  AFD2               	btfss	(_keyboard+2)& (0+255),7,b
 32910  001C36  D008               	goto	l1510
 32911                           
 32912                           ; BSR set to: 0
 32913                           ;keyboard.c: 879: pitch = B2;
 32914  001C38  0E17               	movlw	23
 32915  001C3A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32916                           
 32917                           ; BSR set to: 0
 32918                           ;keyboard.c: 880: ON_OFF = 0;
 32919  001C3C  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32920                           
 32921                           ; BSR set to: 0
 32922                           ;keyboard.c: 881: playThisNote(pitch);
 32923  001C3E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32924  001C40  EC0D  F032         	call	_playThisNote
 32925                           
 32926                           ;keyboard.c: 882: keyboard.SW24 = 0;
 32927  001C44  0100               	movlb	0	; () banked
 32928  001C46  9FD2               	bcf	(_keyboard+2)& (0+255),7,b
 32929  001C48                     l1510:
 32930                           
 32931                           ; BSR set to: 0
 32932                           ;keyboard.c: 883: }
 32933                           ;keyboard.c: 884: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x010000
      +                          00) == 0) && keyboard.SW25) {
 32934                           
 32935                           ; BSR set to: 0
 32936  001C48  A1D7               	btfss	(_button_state_last+3)& (0+255),0,b
 32937  001C4A  0012               	return	
 32938                           
 32939                           ; BSR set to: 0
 32940  001C4C  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 32941  001C4E  0012               	return	
 32942                           
 32943                           ; BSR set to: 0
 32944  001C50  A1D3               	btfss	(_keyboard+3)& (0+255),0,b
 32945  001C52  0012               	return	
 32946                           
 32947                           ; BSR set to: 0
 32948                           ;keyboard.c: 885: pitch = C3;
 32949  001C54  0E18               	movlw	24
 32950  001C56  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32951                           
 32952                           ; BSR set to: 0
 32953                           ;keyboard.c: 886: ON_OFF = 0;
 32954  001C58  9A36               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32955                           
 32956                           ; BSR set to: 0
 32957                           ;keyboard.c: 887: playThisNote(pitch);
 32958  001C5A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32959  001C5C  EC0D  F032         	call	_playThisNote
 32960                           
 32961                           ;keyboard.c: 888: keyboard.SW25 = 0;
 32962  001C60  0100               	movlb	0	; () banked
 32963  001C62  91D3               	bcf	(_keyboard+3)& (0+255),0,b
 32964  001C64  0012               	return	
 32965  001C66                     __end_of_keyboard_all_note_efficient:
 32966                           	opt stack 0
 32967                           tblptru	equ	0xFF8
 32968                           tblptrh	equ	0xFF7
 32969                           tblptrl	equ	0xFF6
 32970                           tablat	equ	0xFF5
 32971                           prodh	equ	0xFF4
 32972                           prodl	equ	0xFF3
 32973                           intcon	equ	0xFF2
 32974                           intcon2	equ	0xFF1
 32975                           postinc0	equ	0xFEE
 32976                           wreg	equ	0xFE8
 32977                           indf1	equ	0xFE7
 32978                           postdec1	equ	0xFE5
 32979                           fsr1h	equ	0xFE2
 32980                           fsr1l	equ	0xFE1
 32981                           indf2	equ	0xFDF
 32982                           postinc2	equ	0xFDE
 32983                           plusw2	equ	0xFDB
 32984                           fsr2h	equ	0xFDA
 32985                           fsr2l	equ	0xFD9
 32986                           status	equ	0xFD8
 32987                           
 32988 ;; *************** function _playThisNote *****************
 32989 ;; Defined at:
 32990 ;;		line 484 in file "keyboard.c"
 32991 ;; Parameters:    Size  Location     Type
 32992 ;;  pitch           1    wreg     unsigned char 
 32993 ;; Auto vars:     Size  Location     Type
 32994 ;;  pitch           1   36[BANK0 ] unsigned char 
 32995 ;; Return value:  Size  Location     Type
 32996 ;;                  1    wreg      void 
 32997 ;; Registers used:
 32998 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32999 ;; Tracked objects:
 33000 ;;		On entry : 0/0
 33001 ;;		On exit  : 0/0
 33002 ;;		Unchanged: 0/0
 33003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33006 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33007 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33008 ;;Total ram usage:        5 bytes
 33009 ;; Hardware stack levels used:    1
 33010 ;; Hardware stack levels required when called:   11
 33011 ;; This function calls:
 33012 ;;		_add_notes_to_arpeggio
 33013 ;;		_delete_notes_from_arpeggio
 33014 ;;		_finish_arpeggio_setup
 33015 ;;		_key_press_release_note_off
 33016 ;;		_noteOff
 33017 ;;		_noteOn
 33018 ;;		_playSeventh
 33019 ;;		_playTriad
 33020 ;;		_wait_one_pulse
 33021 ;; This function is called by:
 33022 ;;		_keyboard_all_note_efficient
 33023 ;;		_doTheUnLatch
 33024 ;; This function uses a non-reentrant model
 33025 ;;
 33026                           
 33027                           	psect	text92
 33028  00641A                     __ptext92:
 33029                           	opt stack 0
 33030  00641A                     _playThisNote:
 33031                           	opt stack 14
 33032                           
 33033                           ; BSR set to: 0
 33034                           ;incstack = 0
 33035                           ;playThisNote@pitch stored from wreg
 33036  00641A  0100               	movlb	0	; () banked
 33037  00641C  6F84               	movwf	playThisNote@pitch& (0+255),b
 33038                           
 33039                           ;keyboard.c: 486: if(KEYBOARD_MODE == CHROMATIC) {
 33040  00641E  0100               	movlb	0	; () banked
 33041  006420  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 33042  006422  A4D8               	btfss	status,2,c
 33043  006424  D06B               	goto	l1452
 33044                           
 33045                           ; BSR set to: 0
 33046                           ;keyboard.c: 489: if(ARPEGGIO_ON == 0){
 33047  006426  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33048  006428  D013               	goto	l1445
 33049                           
 33050                           ; BSR set to: 0
 33051                           ;keyboard.c: 490: if(ON_OFF == 1) {noteOn(channel,pitch,velocity);}
 33052  00642A  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33053  00642C  D007               	goto	l1444
 33054                           
 33055                           ; BSR set to: 0
 33056  00642E  C084  F06E         	movff	playThisNote@pitch,noteOn@pitch
 33057  006432  C0FD  F06F         	movff	_velocity,noteOn@velocity
 33058  006436  51F6               	movf	_channel& (0+255),w,b
 33059  006438  ECD6  F044         	call	_noteOn
 33060  00643C                     l1444:
 33061                           
 33062                           ;keyboard.c: 491: if(ON_OFF == 0) {noteOff(channel,pitch,velocity);}
 33063  00643C  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33064  00643E  D008               	goto	l1445
 33065  006440  C084  F06B         	movff	playThisNote@pitch,noteOff@pitch
 33066  006444  C0FD  F06C         	movff	_velocity,noteOff@velocity
 33067  006448  0100               	movlb	0	; () banked
 33068  00644A  51F6               	movf	_channel& (0+255),w,b
 33069  00644C  ECFD  F047         	call	_noteOff
 33070  006450                     l1445:
 33071                           
 33072                           ;keyboard.c: 492: }
 33073                           ;keyboard.c: 495: if(ARPEGGIO_ON == 1){
 33074  006450  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33075  006452  D054               	goto	l1452
 33076                           
 33077                           ;keyboard.c: 497: if(ON_OFF == 1){
 33078  006454  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33079  006456  D01B               	goto	l1447
 33080                           
 33081                           ;keyboard.c: 500: TMR0ON = 0;
 33082  006458  9ED5               	bcf	4053,7,c	;volatile
 33083                           
 33084                           ;keyboard.c: 502: parallel = pitch;
 33085  00645A  C084  F0E6         	movff	playThisNote@pitch,_parallel
 33086                           
 33087                           ;keyboard.c: 505: if(NUM_NOTES_PRESSED > 0){
 33088  00645E  0100               	movlb	0	; () banked
 33089  006460  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33090  006462  B4D8               	btfsc	status,2,c
 33091  006464  D00A               	goto	l1448
 33092                           
 33093                           ; BSR set to: 0
 33094                           ;keyboard.c: 506: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 33095  006466  0E00               	movlw	0
 33096  006468  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 33097  00646A  0E01               	movlw	1
 33098  00646C  EC00  F04A         	call	_wait_one_pulse
 33099                           
 33100                           ;keyboard.c: 507: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33101  006470  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33102  006472  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 33103                           
 33104                           ;keyboard.c: 508: TIMER_OVERFLOWS = 0;
 33105  006476  0E00               	movlw	0
 33106  006478  6E54               	movwf	_TIMER_OVERFLOWS,c
 33107  00647A                     l1448:
 33108                           
 33109                           ;keyboard.c: 509: }
 33110                           ;keyboard.c: 512: add_notes_to_arpeggio(pitch);
 33111  00647A  0100               	movlb	0	; () banked
 33112  00647C  5184               	movf	playThisNote@pitch& (0+255),w,b
 33113  00647E  EC8F  F032         	call	_add_notes_to_arpeggio
 33114                           
 33115                           ;keyboard.c: 515: if(LATCH == 0) {
 33116  006482  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 33117                           
 33118                           ;keyboard.c: 516: latch_was_pressed = 0;
 33119  006484  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33120                           
 33121                           ;keyboard.c: 517: }
 33122                           ;keyboard.c: 520: finish_arpeggio_setup();
 33123  006486  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 33124                           
 33125                           ;keyboard.c: 523: TMR0ON = 1;
 33126  00648A  8ED5               	bsf	4053,7,c	;volatile
 33127                           
 33128                           ;keyboard.c: 525: return;
 33129  00648C  0012               	return	
 33130  00648E                     l1447:
 33131                           
 33132                           ;keyboard.c: 526: }
 33133                           ;keyboard.c: 529: if((ON_OFF == 0) && (LATCH == 0)){
 33134  00648E  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33135  006490  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 33136  006492  D034               	goto	l1452
 33137                           
 33138                           ;keyboard.c: 532: TMR0ON = 0;
 33139  006494  9ED5               	bcf	4053,7,c	;volatile
 33140                           
 33141                           ;keyboard.c: 535: if(NUM_NOTES_PRESSED > 0){
 33142  006496  0100               	movlb	0	; () banked
 33143  006498  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33144  00649A  B4D8               	btfsc	status,2,c
 33145  00649C  D00A               	goto	l1453
 33146                           
 33147                           ; BSR set to: 0
 33148                           ;keyboard.c: 536: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 33149  00649E  0E00               	movlw	0
 33150  0064A0  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 33151  0064A2  0E01               	movlw	1
 33152  0064A4  EC00  F04A         	call	_wait_one_pulse
 33153                           
 33154                           ;keyboard.c: 537: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33155  0064A8  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33156  0064AA  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 33157                           
 33158                           ;keyboard.c: 538: TIMER_OVERFLOWS = 0;
 33159  0064AE  0E00               	movlw	0
 33160  0064B0  6E54               	movwf	_TIMER_OVERFLOWS,c
 33161  0064B2                     l1453:
 33162                           
 33163                           ;keyboard.c: 539: }
 33164                           ;keyboard.c: 542: delete_notes_from_arpeggio(pitch);
 33165  0064B2  0100               	movlb	0	; () banked
 33166  0064B4  5184               	movf	playThisNote@pitch& (0+255),w,b
 33167  0064B6  EC74  F049         	call	_delete_notes_from_arpeggio
 33168                           
 33169                           ;keyboard.c: 545: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 33170  0064BA  C0E6  F080         	movff	_parallel,??_playThisNote
 33171  0064BE  0100               	movlb	0	; () banked
 33172  0064C0  6B81               	clrf	(??_playThisNote+1)& (0+255),b
 33173  0064C2  BF80               	btfsc	??_playThisNote& (0+255),7,b
 33174  0064C4  0781               	decf	(??_playThisNote+1)& (0+255),f,b
 33175  0064C6  5184               	movf	playThisNote@pitch& (0+255),w,b
 33176  0064C8  6F82               	movwf	(??_playThisNote+2)& (0+255),b
 33177  0064CA  6B83               	clrf	(??_playThisNote+3)& (0+255),b
 33178  0064CC  5180               	movf	??_playThisNote& (0+255),w,b
 33179  0064CE  1982               	xorwf	(??_playThisNote+2)& (0+255),w,b
 33180  0064D0  E106               	bnz	l17255
 33181  0064D2  5181               	movf	(??_playThisNote+1)& (0+255),w,b
 33182  0064D4  1983               	xorwf	(??_playThisNote+3)& (0+255),w,b
 33183  0064D6  A4D8               	btfss	status,2,c
 33184  0064D8  D002               	goto	l1455
 33185                           
 33186                           ; BSR set to: 0
 33187  0064DA  0E00               	movlw	0
 33188  0064DC  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33189  0064DE                     l1455:
 33190  0064DE                     l17255:
 33191                           
 33192                           ; BSR set to: 0
 33193                           ;keyboard.c: 550: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 33194  0064DE  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 33195                           
 33196                           ; BSR set to: 0
 33197  0064E0  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33198  0064E2  D001               	goto	l1456
 33199                           
 33200                           ; BSR set to: 0
 33201                           ;keyboard.c: 551: LATCH = 1;
 33202  0064E4  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 33203  0064E6                     l1456:
 33204                           
 33205                           ; BSR set to: 0
 33206                           ;keyboard.c: 552: }
 33207                           ;keyboard.c: 555: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 33208  0064E6  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 33209                           
 33210                           ; BSR set to: 0
 33211  0064E8  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33212  0064EA  D004               	goto	l1457
 33213                           
 33214                           ; BSR set to: 0
 33215                           ;keyboard.c: 556: NUM_NOTES_PRESSED = 0;
 33216  0064EC  0E00               	movlw	0
 33217  0064EE  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33218                           
 33219                           ;keyboard.c: 557: ARRAY_INDEX = 0;
 33220  0064F0  0E00               	movlw	0
 33221  0064F2  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 33222  0064F4                     l1457:
 33223                           
 33224                           ; BSR set to: 0
 33225                           ;keyboard.c: 558: }
 33226                           ;keyboard.c: 561: finish_arpeggio_setup();
 33227                           
 33228                           ; BSR set to: 0
 33229  0064F4  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 33230                           
 33231                           ;keyboard.c: 564: TMR0ON = 1;
 33232  0064F8  8ED5               	bsf	4053,7,c	;volatile
 33233                           
 33234                           ;keyboard.c: 566: return;
 33235  0064FA  0012               	return	
 33236  0064FC                     l1452:
 33237                           
 33238                           ;keyboard.c: 567: }
 33239                           ;keyboard.c: 568: }
 33240                           ;keyboard.c: 569: }
 33241                           ;keyboard.c: 571: if(KEYBOARD_MODE == TRIAD) {
 33242  0064FC  0E06               	movlw	6
 33243  0064FE  0100               	movlb	0	; () banked
 33244  006500  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 33245  006502  A4D8               	btfss	status,2,c
 33246  006504  D003               	goto	l1458
 33247                           
 33248                           ; BSR set to: 0
 33249                           ;keyboard.c: 572: playTriad(pitch);
 33250  006506  5184               	movf	playThisNote@pitch& (0+255),w,b
 33251  006508  EC09  F02D         	call	_playTriad
 33252  00650C                     l1458:
 33253                           
 33254                           ;keyboard.c: 573: }
 33255                           ;keyboard.c: 575: if(KEYBOARD_MODE == SEVENTH) {
 33256  00650C  0E09               	movlw	9
 33257  00650E  0100               	movlb	0	; () banked
 33258  006510  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 33259  006512  A4D8               	btfss	status,2,c
 33260  006514  0012               	return	
 33261                           
 33262                           ; BSR set to: 0
 33263                           ;keyboard.c: 576: playSeventh(pitch);
 33264  006516  5184               	movf	playThisNote@pitch& (0+255),w,b
 33265  006518  EC42  F02C         	call	_playSeventh
 33266  00651C  0012               	return	
 33267  00651E                     __end_of_playThisNote:
 33268                           	opt stack 0
 33269                           tblptru	equ	0xFF8
 33270                           tblptrh	equ	0xFF7
 33271                           tblptrl	equ	0xFF6
 33272                           tablat	equ	0xFF5
 33273                           prodh	equ	0xFF4
 33274                           prodl	equ	0xFF3
 33275                           intcon	equ	0xFF2
 33276                           intcon2	equ	0xFF1
 33277                           postinc0	equ	0xFEE
 33278                           wreg	equ	0xFE8
 33279                           indf1	equ	0xFE7
 33280                           postdec1	equ	0xFE5
 33281                           fsr1h	equ	0xFE2
 33282                           fsr1l	equ	0xFE1
 33283                           indf2	equ	0xFDF
 33284                           postinc2	equ	0xFDE
 33285                           plusw2	equ	0xFDB
 33286                           fsr2h	equ	0xFDA
 33287                           fsr2l	equ	0xFD9
 33288                           status	equ	0xFD8
 33289                           
 33290 ;; *************** function _playTriad *****************
 33291 ;; Defined at:
 33292 ;;		line 293 in file "keyboard.c"
 33293 ;; Parameters:    Size  Location     Type
 33294 ;;  pitch           1    wreg     unsigned char 
 33295 ;; Auto vars:     Size  Location     Type
 33296 ;;  pitch           1   31[BANK0 ] unsigned char 
 33297 ;;  i               1   30[BANK0 ] unsigned char 
 33298 ;;  i               1   29[BANK0 ] unsigned char 
 33299 ;;  triad_p         2   27[BANK0 ] PTR unsigned char 
 33300 ;;		 -> diminished_triad(3), augmented_triad(3), minor_triad(3), major_triad(3), 
 33301 ;; Return value:  Size  Location     Type
 33302 ;;                  1    wreg      void 
 33303 ;; Registers used:
 33304 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33305 ;; Tracked objects:
 33306 ;;		On entry : 0/0
 33307 ;;		On exit  : 0/0
 33308 ;;		Unchanged: 0/0
 33309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33311 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33312 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33313 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33314 ;;Total ram usage:        9 bytes
 33315 ;; Hardware stack levels used:    1
 33316 ;; Hardware stack levels required when called:   10
 33317 ;; This function calls:
 33318 ;;		_finish_arpeggio_setup
 33319 ;;		_key_press_release_note_off
 33320 ;;		_noteOff
 33321 ;;		_noteOn
 33322 ;;		_wait_one_pulse
 33323 ;; This function is called by:
 33324 ;;		_playThisNote
 33325 ;; This function uses a non-reentrant model
 33326 ;;
 33327                           
 33328                           	psect	text93
 33329  005A12                     __ptext93:
 33330                           	opt stack 0
 33331  005A12                     _playTriad:
 33332                           	opt stack 14
 33333                           
 33334                           ;incstack = 0
 33335                           ;playTriad@pitch stored from wreg
 33336  005A12  0100               	movlb	0	; () banked
 33337  005A14  6F7F               	movwf	playTriad@pitch& (0+255),b
 33338                           
 33339                           ;keyboard.c: 295: unsigned char *triad_p;
 33340                           ;keyboard.c: 299: switch (which_triad) {
 33341  005A16  D012               	goto	l1381
 33342  005A18                     
 33343                           ;keyboard.c: 301: triad_p = major_triad;
 33344  005A18  0EFC               	movlw	low _major_triad
 33345  005A1A  0100               	movlb	0	; () banked
 33346  005A1C  6F7B               	movwf	playTriad@triad_p& (0+255),b
 33347  005A1E  0E01               	movlw	high _major_triad
 33348  005A20  D00B               	goto	L15
 33349  005A22                     
 33350                           ; BSR set to: 0
 33351                           ;keyboard.c: 304: triad_p = minor_triad;
 33352                           
 33353                           ; BSR set to: 0
 33354  005A22  0EF9               	movlw	low _minor_triad
 33355  005A24  6F7B               	movwf	playTriad@triad_p& (0+255),b
 33356  005A26  0E01               	movlw	high _minor_triad
 33357  005A28  D007               	goto	L15
 33358  005A2A                     
 33359                           ; BSR set to: 0
 33360                           ;keyboard.c: 307: triad_p = augmented_triad;
 33361                           
 33362                           ; BSR set to: 0
 33363  005A2A  0EF6               	movlw	low _augmented_triad
 33364  005A2C  6F7B               	movwf	playTriad@triad_p& (0+255),b
 33365  005A2E  0E01               	movlw	high _augmented_triad
 33366  005A30  D003               	goto	L15
 33367  005A32                     
 33368                           ; BSR set to: 0
 33369                           ;keyboard.c: 310: triad_p = diminished_triad;
 33370                           
 33371                           ; BSR set to: 0
 33372  005A32  0EF3               	movlw	low _diminished_triad
 33373  005A34  6F7B               	movwf	playTriad@triad_p& (0+255),b
 33374  005A36  0E01               	movlw	high _diminished_triad
 33375  005A38                     L15:
 33376  005A38  6F7C               	movwf	(playTriad@triad_p+1)& (0+255),b
 33377                           
 33378                           ; BSR set to: 0
 33379                           ;keyboard.c: 314: }
 33380                           
 33381                           ; BSR set to: 0
 33382                           ;keyboard.c: 313: break;
 33383                           
 33384                           ;keyboard.c: 312: default:
 33385                           
 33386                           ;keyboard.c: 311: break;
 33387  005A3A  D00E               	goto	l1383
 33388  005A3C                     l1381:
 33389                           
 33390                           ; BSR set to: 0
 33391  005A3C  0100               	movlb	0	; () banked
 33392  005A3E  51F0               	movf	_which_triad& (0+255),w,b
 33393                           
 33394                           ; Switch size 1, requested type "space"
 33395                           ; Number of cases is 4, Range of values is 0 to 3
 33396                           ; switch strategies available:
 33397                           ; Name         Instructions Cycles
 33398                           ; simple_byte           13     7 (average)
 33399                           ;	Chosen strategy is simple_byte
 33400  005A40  0A00               	xorlw	0	; case 0
 33401  005A42  B4D8               	btfsc	status,2,c
 33402  005A44  D7E9               	goto	l1382
 33403  005A46  0A01               	xorlw	1	; case 1
 33404  005A48  B4D8               	btfsc	status,2,c
 33405  005A4A  D7EB               	goto	l1384
 33406  005A4C  0A03               	xorlw	3	; case 2
 33407  005A4E  B4D8               	btfsc	status,2,c
 33408  005A50  D7EC               	goto	l1385
 33409  005A52  0A01               	xorlw	1	; case 3
 33410  005A54  B4D8               	btfsc	status,2,c
 33411  005A56  D7ED               	goto	l1386
 33412  005A58                     l1383:
 33413                           
 33414                           ; BSR set to: 0
 33415                           ;keyboard.c: 317: if(ARPEGGIO_ON == 0){
 33416  005A58  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33417  005A5A  D02E               	goto	u23290
 33418                           
 33419                           ; BSR set to: 0
 33420                           ;keyboard.c: 318: for(unsigned char i = 0; i<3; i++){
 33421  005A5C  0E00               	movlw	0
 33422  005A5E  6F7D               	movwf	playTriad@i& (0+255),b
 33423  005A60                     l16503:
 33424                           
 33425                           ; BSR set to: 0
 33426  005A60  0E02               	movlw	2
 33427  005A62  657D               	cpfsgt	playTriad@i& (0+255),b
 33428  005A64  D001               	goto	l1389
 33429  005A66  D028               	goto	u23290
 33430  005A68                     l1389:
 33431                           
 33432                           ; BSR set to: 0
 33433                           ;keyboard.c: 319: if(ON_OFF == 1) {noteOn(channel,triad_p[i] + pitch,velocity);}
 33434  005A68  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33435  005A6A  D010               	goto	l1391
 33436                           
 33437                           ; BSR set to: 0
 33438  005A6C  517D               	movf	playTriad@i& (0+255),w,b
 33439  005A6E  0D01               	mullw	1
 33440  005A70  50F3               	movf	prodl,w,c
 33441  005A72  257B               	addwf	playTriad@triad_p& (0+255),w,b
 33442  005A74  6ED9               	movwf	fsr2l,c
 33443  005A76  50F4               	movf	prodh,w,c
 33444  005A78  217C               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 33445  005A7A  6EDA               	movwf	fsr2h,c
 33446  005A7C  50DF               	movf	indf2,w,c
 33447  005A7E  257F               	addwf	playTriad@pitch& (0+255),w,b
 33448  005A80  6F6E               	movwf	noteOn@pitch& (0+255),b
 33449  005A82  C0FD  F06F         	movff	_velocity,noteOn@velocity
 33450  005A86  51F6               	movf	_channel& (0+255),w,b
 33451  005A88  ECD6  F044         	call	_noteOn
 33452  005A8C                     l1391:
 33453                           
 33454                           ;keyboard.c: 320: if(ON_OFF == 0) {noteOff(channel,triad_p[i] + pitch,velocity);}
 33455  005A8C  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33456  005A8E  D011               	goto	l1392
 33457  005A90  0100               	movlb	0	; () banked
 33458  005A92  517D               	movf	playTriad@i& (0+255),w,b
 33459  005A94  0D01               	mullw	1
 33460  005A96  50F3               	movf	prodl,w,c
 33461  005A98  257B               	addwf	playTriad@triad_p& (0+255),w,b
 33462  005A9A  6ED9               	movwf	fsr2l,c
 33463  005A9C  50F4               	movf	prodh,w,c
 33464  005A9E  217C               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 33465  005AA0  6EDA               	movwf	fsr2h,c
 33466  005AA2  50DF               	movf	indf2,w,c
 33467  005AA4  257F               	addwf	playTriad@pitch& (0+255),w,b
 33468  005AA6  6F6B               	movwf	noteOff@pitch& (0+255),b
 33469  005AA8  C0FD  F06C         	movff	_velocity,noteOff@velocity
 33470  005AAC  51F6               	movf	_channel& (0+255),w,b
 33471  005AAE  ECFD  F047         	call	_noteOff
 33472  005AB2                     l1392:
 33473  005AB2  0100               	movlb	0	; () banked
 33474  005AB4  2B7D               	incf	playTriad@i& (0+255),f,b
 33475  005AB6  D7D4               	goto	l16503
 33476  005AB8                     u23290:
 33477                           
 33478                           ; BSR set to: 0
 33479                           ;keyboard.c: 321: }
 33480                           ;keyboard.c: 322: }
 33481                           ;keyboard.c: 325: if(ARPEGGIO_ON == 1){
 33482                           
 33483                           ; BSR set to: 0
 33484  005AB8  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33485  005ABA  0012               	return	
 33486                           
 33487                           ; BSR set to: 0
 33488                           ;keyboard.c: 326: if(ON_OFF == 1) {
 33489  005ABC  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33490  005ABE  D034               	goto	l1394
 33491                           
 33492                           ; BSR set to: 0
 33493                           ;keyboard.c: 328: TMR0ON = 0;
 33494  005AC0  9ED5               	bcf	4053,7,c	;volatile
 33495                           
 33496                           ;keyboard.c: 331: parallel = pitch;
 33497  005AC2  C07F  F0E6         	movff	playTriad@pitch,_parallel
 33498                           
 33499                           ; BSR set to: 0
 33500                           ;keyboard.c: 334: if(NUM_NOTES_PRESSED > 0){
 33501  005AC6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33502  005AC8  B4D8               	btfsc	status,2,c
 33503  005ACA  D00A               	goto	l1395
 33504                           
 33505                           ; BSR set to: 0
 33506                           ;keyboard.c: 335: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 33507  005ACC  0E00               	movlw	0
 33508  005ACE  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 33509  005AD0  0E01               	movlw	1
 33510  005AD2  EC00  F04A         	call	_wait_one_pulse
 33511                           
 33512                           ;keyboard.c: 336: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33513  005AD6  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33514  005AD8  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 33515                           
 33516                           ;keyboard.c: 337: TIMER_OVERFLOWS = 0;
 33517  005ADC  0E00               	movlw	0
 33518  005ADE  6E54               	movwf	_TIMER_OVERFLOWS,c
 33519  005AE0                     l1395:
 33520                           
 33521                           ;keyboard.c: 338: }
 33522                           ;keyboard.c: 340: for(unsigned char i = 0; i<3; i++){
 33523  005AE0  0E00               	movlw	0
 33524  005AE2  0100               	movlb	0	; () banked
 33525  005AE4  6F7E               	movwf	playTriad@i_1657& (0+255),b
 33526  005AE6                     l16533:
 33527                           
 33528                           ; BSR set to: 0
 33529  005AE6  0E02               	movlw	2
 33530  005AE8  657E               	cpfsgt	playTriad@i_1657& (0+255),b
 33531  005AEA  D001               	goto	l1397
 33532  005AEC  D015               	goto	u23350
 33533  005AEE                     l1397:
 33534                           
 33535                           ; BSR set to: 0
 33536                           ;keyboard.c: 341: ARPEGGIO[i] = triad_p[i] + pitch;
 33537                           
 33538                           ; BSR set to: 0
 33539  005AEE  517E               	movf	playTriad@i_1657& (0+255),w,b
 33540  005AF0  0D01               	mullw	1
 33541  005AF2  0E72               	movlw	low _ARPEGGIO
 33542  005AF4  24F3               	addwf	prodl,w,c
 33543  005AF6  6ED9               	movwf	fsr2l,c
 33544  005AF8  0E01               	movlw	high _ARPEGGIO
 33545  005AFA  20F4               	addwfc	prodh,w,c
 33546  005AFC  6EDA               	movwf	fsr2h,c
 33547  005AFE  517E               	movf	playTriad@i_1657& (0+255),w,b
 33548  005B00  0D01               	mullw	1
 33549  005B02  50F3               	movf	prodl,w,c
 33550  005B04  257B               	addwf	playTriad@triad_p& (0+255),w,b
 33551  005B06  6EE1               	movwf	fsr1l,c
 33552  005B08  50F4               	movf	prodh,w,c
 33553  005B0A  217C               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 33554  005B0C  6EE2               	movwf	fsr1h,c
 33555  005B0E  50E7               	movf	indf1,w,c
 33556  005B10  257F               	addwf	playTriad@pitch& (0+255),w,b
 33557  005B12  6EDF               	movwf	indf2,c
 33558                           
 33559                           ; BSR set to: 0
 33560  005B14  2B7E               	incf	playTriad@i_1657& (0+255),f,b
 33561  005B16  D7E7               	goto	l16533
 33562  005B18                     u23350:
 33563                           
 33564                           ; BSR set to: 0
 33565                           ;keyboard.c: 342: }
 33566                           ;keyboard.c: 344: NUM_NOTES_PRESSED = 3;
 33567                           
 33568                           ; BSR set to: 0
 33569  005B18  0E03               	movlw	3
 33570  005B1A  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33571                           
 33572                           ; BSR set to: 0
 33573                           ;keyboard.c: 348: if(LATCH == 0) {latch_was_pressed = 0;}
 33574  005B1C  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 33575                           
 33576                           ; BSR set to: 0
 33577  005B1E  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33578                           
 33579                           ; BSR set to: 0
 33580                           ;keyboard.c: 350: finish_arpeggio_setup();
 33581                           
 33582                           ; BSR set to: 0
 33583  005B20  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 33584                           
 33585                           ;keyboard.c: 351: TMR0ON = 1;
 33586  005B24  8ED5               	bsf	4053,7,c	;volatile
 33587                           
 33588                           ;keyboard.c: 353: return;
 33589  005B26  0012               	return	
 33590  005B28                     l1394:
 33591                           
 33592                           ; BSR set to: 0
 33593                           ;keyboard.c: 354: }
 33594                           ;keyboard.c: 356: if((ON_OFF == 0) && (LATCH == 0)) {
 33595  005B28  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33596  005B2A  0012               	return	
 33597                           
 33598                           ; BSR set to: 0
 33599  005B2C  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 33600  005B2E  0012               	return	
 33601                           
 33602                           ; BSR set to: 0
 33603                           ;keyboard.c: 358: if(NUM_NOTES_PRESSED > 0){
 33604  005B30  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33605  005B32  B4D8               	btfsc	status,2,c
 33606  005B34  D00A               	goto	l1402
 33607                           
 33608                           ; BSR set to: 0
 33609                           ;keyboard.c: 359: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 33610  005B36  0E00               	movlw	0
 33611  005B38  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 33612  005B3A  0E01               	movlw	1
 33613  005B3C  EC00  F04A         	call	_wait_one_pulse
 33614                           
 33615                           ;keyboard.c: 360: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33616  005B40  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33617  005B42  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 33618                           
 33619                           ;keyboard.c: 361: TIMER_OVERFLOWS = 0;
 33620  005B46  0E00               	movlw	0
 33621  005B48  6E54               	movwf	_TIMER_OVERFLOWS,c
 33622  005B4A                     l1402:
 33623                           
 33624                           ;keyboard.c: 362: }
 33625                           ;keyboard.c: 365: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 33626  005B4A  C0E6  F077         	movff	_parallel,??_playTriad
 33627  005B4E  0100               	movlb	0	; () banked
 33628  005B50  6B78               	clrf	(??_playTriad+1)& (0+255),b
 33629  005B52  BF77               	btfsc	??_playTriad& (0+255),7,b
 33630  005B54  0778               	decf	(??_playTriad+1)& (0+255),f,b
 33631  005B56  517F               	movf	playTriad@pitch& (0+255),w,b
 33632  005B58  6F79               	movwf	(??_playTriad+2)& (0+255),b
 33633  005B5A  6B7A               	clrf	(??_playTriad+3)& (0+255),b
 33634  005B5C  5177               	movf	??_playTriad& (0+255),w,b
 33635  005B5E  1979               	xorwf	(??_playTriad+2)& (0+255),w,b
 33636  005B60  E106               	bnz	l16571
 33637  005B62  5178               	movf	(??_playTriad+1)& (0+255),w,b
 33638  005B64  197A               	xorwf	(??_playTriad+3)& (0+255),w,b
 33639  005B66  A4D8               	btfss	status,2,c
 33640  005B68  D002               	goto	l1404
 33641                           
 33642                           ; BSR set to: 0
 33643  005B6A  0E00               	movlw	0
 33644  005B6C  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33645  005B6E                     l1404:
 33646  005B6E                     l16571:
 33647                           
 33648                           ; BSR set to: 0
 33649                           ;keyboard.c: 370: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 33650  005B6E  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 33651                           
 33652                           ; BSR set to: 0
 33653  005B70  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33654  005B72  D001               	goto	l1405
 33655                           
 33656                           ; BSR set to: 0
 33657                           ;keyboard.c: 371: LATCH = 1;
 33658  005B74  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 33659  005B76                     l1405:
 33660                           
 33661                           ; BSR set to: 0
 33662                           ;keyboard.c: 372: }
 33663                           ;keyboard.c: 375: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1)){
 33664  005B76  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 33665  005B78  D002               	goto	u23450
 33666                           
 33667                           ; BSR set to: 0
 33668  005B7A  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 33669  005B7C  D006               	goto	l1406
 33670  005B7E                     u23450:
 33671                           
 33672                           ; BSR set to: 0
 33673  005B7E  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33674  005B80  D004               	goto	l1406
 33675                           
 33676                           ; BSR set to: 0
 33677                           ;keyboard.c: 376: NUM_NOTES_PRESSED = 0;
 33678  005B82  0E00               	movlw	0
 33679  005B84  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33680                           
 33681                           ;keyboard.c: 377: ARRAY_INDEX = 0;
 33682  005B86  0E00               	movlw	0
 33683  005B88  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 33684  005B8A                     l1406:
 33685                           
 33686                           ; BSR set to: 0
 33687                           ;keyboard.c: 378: }
 33688                           ;keyboard.c: 380: finish_arpeggio_setup();
 33689                           
 33690                           ; BSR set to: 0
 33691  005B8A  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 33692                           
 33693                           ;keyboard.c: 381: TMR0ON = 1;
 33694  005B8E  8ED5               	bsf	4053,7,c	;volatile
 33695                           
 33696                           ;keyboard.c: 382: return;
 33697  005B90  0012               	return	
 33698  005B92                     __end_of_playTriad:
 33699                           	opt stack 0
 33700                           tblptru	equ	0xFF8
 33701                           tblptrh	equ	0xFF7
 33702                           tblptrl	equ	0xFF6
 33703                           tablat	equ	0xFF5
 33704                           prodh	equ	0xFF4
 33705                           prodl	equ	0xFF3
 33706                           intcon	equ	0xFF2
 33707                           intcon2	equ	0xFF1
 33708                           postinc0	equ	0xFEE
 33709                           wreg	equ	0xFE8
 33710                           indf1	equ	0xFE7
 33711                           postdec1	equ	0xFE5
 33712                           fsr1h	equ	0xFE2
 33713                           fsr1l	equ	0xFE1
 33714                           indf2	equ	0xFDF
 33715                           postinc2	equ	0xFDE
 33716                           plusw2	equ	0xFDB
 33717                           fsr2h	equ	0xFDA
 33718                           fsr2l	equ	0xFD9
 33719                           status	equ	0xFD8
 33720                           
 33721 ;; *************** function _playSeventh *****************
 33722 ;; Defined at:
 33723 ;;		line 387 in file "keyboard.c"
 33724 ;; Parameters:    Size  Location     Type
 33725 ;;  pitch           1    wreg     unsigned char 
 33726 ;; Auto vars:     Size  Location     Type
 33727 ;;  pitch           1   31[BANK0 ] unsigned char 
 33728 ;;  i               1   30[BANK0 ] unsigned char 
 33729 ;;  i               1   29[BANK0 ] unsigned char 
 33730 ;;  seventh_p       2   27[BANK0 ] PTR unsigned char 
 33731 ;;		 -> diminished_7th(4), half_diminished_7th(4), minor_7th(4), major_7th(4), 
 33732 ;;		 -> dominant_7th(4), 
 33733 ;; Return value:  Size  Location     Type
 33734 ;;                  1    wreg      void 
 33735 ;; Registers used:
 33736 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33737 ;; Tracked objects:
 33738 ;;		On entry : 0/0
 33739 ;;		On exit  : 0/0
 33740 ;;		Unchanged: 0/0
 33741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33743 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33744 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33745 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33746 ;;Total ram usage:        9 bytes
 33747 ;; Hardware stack levels used:    1
 33748 ;; Hardware stack levels required when called:   10
 33749 ;; This function calls:
 33750 ;;		_finish_arpeggio_setup
 33751 ;;		_key_press_release_note_off
 33752 ;;		_noteOff
 33753 ;;		_noteOn
 33754 ;;		_wait_one_pulse
 33755 ;; This function is called by:
 33756 ;;		_playThisNote
 33757 ;; This function uses a non-reentrant model
 33758 ;;
 33759                           
 33760                           	psect	text94
 33761  005884                     __ptext94:
 33762                           	opt stack 0
 33763  005884                     _playSeventh:
 33764                           	opt stack 14
 33765                           
 33766                           ;incstack = 0
 33767                           ;playSeventh@pitch stored from wreg
 33768  005884  0100               	movlb	0	; () banked
 33769  005886  6F7F               	movwf	playSeventh@pitch& (0+255),b
 33770                           
 33771                           ;keyboard.c: 389: unsigned char *seventh_p;
 33772                           ;keyboard.c: 392: switch (which_seventh) {
 33773  005888  D016               	goto	l1411
 33774  00588A                     
 33775                           ;keyboard.c: 394: seventh_p = dominant_7th;
 33776  00588A  0EF8               	movlw	low _dominant_7th
 33777  00588C  0100               	movlb	0	; () banked
 33778  00588E  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33779  005890  0E02               	movlw	high _dominant_7th
 33780  005892  D00F               	goto	L19
 33781  005894                     
 33782                           ; BSR set to: 0
 33783                           ;keyboard.c: 397: seventh_p = major_7th;
 33784                           
 33785                           ; BSR set to: 0
 33786  005894  0EF4               	movlw	low _major_7th
 33787  005896  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33788  005898  0E02               	movlw	high _major_7th
 33789  00589A  D00B               	goto	L19
 33790  00589C                     
 33791                           ; BSR set to: 0
 33792                           ;keyboard.c: 400: seventh_p = minor_7th;
 33793                           
 33794                           ; BSR set to: 0
 33795  00589C  0EF0               	movlw	low _minor_7th
 33796  00589E  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33797  0058A0  0E02               	movlw	high _minor_7th
 33798  0058A2  D007               	goto	L19
 33799  0058A4                     
 33800                           ; BSR set to: 0
 33801                           ;keyboard.c: 403: seventh_p = half_diminished_7th;
 33802                           
 33803                           ; BSR set to: 0
 33804  0058A4  0EEC               	movlw	low _half_diminished_7th
 33805  0058A6  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33806  0058A8  0E02               	movlw	high _half_diminished_7th
 33807  0058AA  D003               	goto	L19
 33808  0058AC                     
 33809                           ; BSR set to: 0
 33810                           ;keyboard.c: 406: seventh_p = diminished_7th;
 33811                           
 33812                           ; BSR set to: 0
 33813  0058AC  0EE8               	movlw	low _diminished_7th
 33814  0058AE  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33815  0058B0  0E02               	movlw	high _diminished_7th
 33816  0058B2                     L19:
 33817  0058B2  6F7C               	movwf	(playSeventh@seventh_p+1)& (0+255),b
 33818                           
 33819                           ; BSR set to: 0
 33820                           ;keyboard.c: 410: }
 33821                           
 33822                           ; BSR set to: 0
 33823                           ;keyboard.c: 409: break;
 33824                           
 33825                           ;keyboard.c: 408: default:
 33826                           
 33827                           ;keyboard.c: 407: break;
 33828  0058B4  D011               	goto	l1413
 33829  0058B6                     l1411:
 33830                           
 33831                           ; BSR set to: 0
 33832  0058B6  0100               	movlb	0	; () banked
 33833  0058B8  51EF               	movf	_which_seventh& (0+255),w,b
 33834                           
 33835                           ; Switch size 1, requested type "space"
 33836                           ; Number of cases is 5, Range of values is 0 to 4
 33837                           ; switch strategies available:
 33838                           ; Name         Instructions Cycles
 33839                           ; simple_byte           16     9 (average)
 33840                           ;	Chosen strategy is simple_byte
 33841  0058BA  0A00               	xorlw	0	; case 0
 33842  0058BC  B4D8               	btfsc	status,2,c
 33843  0058BE  D7E5               	goto	l1412
 33844  0058C0  0A01               	xorlw	1	; case 1
 33845  0058C2  B4D8               	btfsc	status,2,c
 33846  0058C4  D7E7               	goto	l1414
 33847  0058C6  0A03               	xorlw	3	; case 2
 33848  0058C8  B4D8               	btfsc	status,2,c
 33849  0058CA  D7E8               	goto	l1415
 33850  0058CC  0A01               	xorlw	1	; case 3
 33851  0058CE  B4D8               	btfsc	status,2,c
 33852  0058D0  D7E9               	goto	l1416
 33853  0058D2  0A07               	xorlw	7	; case 4
 33854  0058D4  B4D8               	btfsc	status,2,c
 33855  0058D6  D7EA               	goto	l1417
 33856  0058D8                     l1413:
 33857                           
 33858                           ; BSR set to: 0
 33859                           ;keyboard.c: 413: if(ARPEGGIO_ON == 0){
 33860  0058D8  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33861  0058DA  D02E               	goto	u23510
 33862                           
 33863                           ; BSR set to: 0
 33864                           ;keyboard.c: 414: for(unsigned char i = 0; i<4; i++){
 33865  0058DC  0E00               	movlw	0
 33866  0058DE  6F7D               	movwf	playSeventh@i& (0+255),b
 33867  0058E0                     l16605:
 33868                           
 33869                           ; BSR set to: 0
 33870  0058E0  0E03               	movlw	3
 33871  0058E2  657D               	cpfsgt	playSeventh@i& (0+255),b
 33872  0058E4  D001               	goto	l1420
 33873  0058E6  D028               	goto	u23510
 33874  0058E8                     l1420:
 33875                           
 33876                           ; BSR set to: 0
 33877                           ;keyboard.c: 415: if(ON_OFF == 1) {noteOn(channel,seventh_p[i] + pitch,velocity);}
 33878  0058E8  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33879  0058EA  D010               	goto	l1422
 33880                           
 33881                           ; BSR set to: 0
 33882  0058EC  517D               	movf	playSeventh@i& (0+255),w,b
 33883  0058EE  0D01               	mullw	1
 33884  0058F0  50F3               	movf	prodl,w,c
 33885  0058F2  257B               	addwf	playSeventh@seventh_p& (0+255),w,b
 33886  0058F4  6ED9               	movwf	fsr2l,c
 33887  0058F6  50F4               	movf	prodh,w,c
 33888  0058F8  217C               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 33889  0058FA  6EDA               	movwf	fsr2h,c
 33890  0058FC  50DF               	movf	indf2,w,c
 33891  0058FE  257F               	addwf	playSeventh@pitch& (0+255),w,b
 33892  005900  6F6E               	movwf	noteOn@pitch& (0+255),b
 33893  005902  C0FD  F06F         	movff	_velocity,noteOn@velocity
 33894  005906  51F6               	movf	_channel& (0+255),w,b
 33895  005908  ECD6  F044         	call	_noteOn
 33896  00590C                     l1422:
 33897                           
 33898                           ;keyboard.c: 416: if(ON_OFF == 0) {noteOff(channel,seventh_p[i] + pitch,velocity);}
 33899  00590C  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33900  00590E  D011               	goto	l1423
 33901  005910  0100               	movlb	0	; () banked
 33902  005912  517D               	movf	playSeventh@i& (0+255),w,b
 33903  005914  0D01               	mullw	1
 33904  005916  50F3               	movf	prodl,w,c
 33905  005918  257B               	addwf	playSeventh@seventh_p& (0+255),w,b
 33906  00591A  6ED9               	movwf	fsr2l,c
 33907  00591C  50F4               	movf	prodh,w,c
 33908  00591E  217C               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 33909  005920  6EDA               	movwf	fsr2h,c
 33910  005922  50DF               	movf	indf2,w,c
 33911  005924  257F               	addwf	playSeventh@pitch& (0+255),w,b
 33912  005926  6F6B               	movwf	noteOff@pitch& (0+255),b
 33913  005928  C0FD  F06C         	movff	_velocity,noteOff@velocity
 33914  00592C  51F6               	movf	_channel& (0+255),w,b
 33915  00592E  ECFD  F047         	call	_noteOff
 33916  005932                     l1423:
 33917  005932  0100               	movlb	0	; () banked
 33918  005934  2B7D               	incf	playSeventh@i& (0+255),f,b
 33919  005936  D7D4               	goto	l16605
 33920  005938                     u23510:
 33921                           
 33922                           ; BSR set to: 0
 33923                           ;keyboard.c: 417: }
 33924                           ;keyboard.c: 418: }
 33925                           ;keyboard.c: 421: if(ARPEGGIO_ON == 1){
 33926                           
 33927                           ; BSR set to: 0
 33928  005938  A835               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33929  00593A  0012               	return	
 33930                           
 33931                           ; BSR set to: 0
 33932                           ;keyboard.c: 423: if(ON_OFF == 1) {
 33933  00593C  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33934  00593E  D034               	goto	l1425
 33935                           
 33936                           ; BSR set to: 0
 33937                           ;keyboard.c: 425: TMR0ON = 0;
 33938  005940  9ED5               	bcf	4053,7,c	;volatile
 33939                           
 33940                           ;keyboard.c: 428: parallel = pitch;
 33941  005942  C07F  F0E6         	movff	playSeventh@pitch,_parallel
 33942                           
 33943                           ; BSR set to: 0
 33944                           ;keyboard.c: 431: if(NUM_NOTES_PRESSED > 0){
 33945  005946  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33946  005948  B4D8               	btfsc	status,2,c
 33947  00594A  D00A               	goto	l1426
 33948                           
 33949                           ; BSR set to: 0
 33950                           ;keyboard.c: 432: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 33951  00594C  0E00               	movlw	0
 33952  00594E  B434               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 33953  005950  0E01               	movlw	1
 33954  005952  EC00  F04A         	call	_wait_one_pulse
 33955                           
 33956                           ;keyboard.c: 433: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33957  005956  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33958  005958  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 33959                           
 33960                           ;keyboard.c: 434: TIMER_OVERFLOWS = 0;
 33961  00595C  0E00               	movlw	0
 33962  00595E  6E54               	movwf	_TIMER_OVERFLOWS,c
 33963  005960                     l1426:
 33964                           
 33965                           ;keyboard.c: 435: }
 33966                           ;keyboard.c: 437: for(unsigned char i = 0; i<4; i++){
 33967  005960  0E00               	movlw	0
 33968  005962  0100               	movlb	0	; () banked
 33969  005964  6F7E               	movwf	playSeventh@i_1662& (0+255),b
 33970  005966                     l16635:
 33971                           
 33972                           ; BSR set to: 0
 33973  005966  0E03               	movlw	3
 33974  005968  657E               	cpfsgt	playSeventh@i_1662& (0+255),b
 33975  00596A  D001               	goto	l1428
 33976  00596C  D015               	goto	u23570
 33977  00596E                     l1428:
 33978                           
 33979                           ; BSR set to: 0
 33980                           ;keyboard.c: 438: ARPEGGIO[i] = seventh_p[i] + pitch;
 33981                           
 33982                           ; BSR set to: 0
 33983  00596E  517E               	movf	playSeventh@i_1662& (0+255),w,b
 33984  005970  0D01               	mullw	1
 33985  005972  0E72               	movlw	low _ARPEGGIO
 33986  005974  24F3               	addwf	prodl,w,c
 33987  005976  6ED9               	movwf	fsr2l,c
 33988  005978  0E01               	movlw	high _ARPEGGIO
 33989  00597A  20F4               	addwfc	prodh,w,c
 33990  00597C  6EDA               	movwf	fsr2h,c
 33991  00597E  517E               	movf	playSeventh@i_1662& (0+255),w,b
 33992  005980  0D01               	mullw	1
 33993  005982  50F3               	movf	prodl,w,c
 33994  005984  257B               	addwf	playSeventh@seventh_p& (0+255),w,b
 33995  005986  6EE1               	movwf	fsr1l,c
 33996  005988  50F4               	movf	prodh,w,c
 33997  00598A  217C               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 33998  00598C  6EE2               	movwf	fsr1h,c
 33999  00598E  50E7               	movf	indf1,w,c
 34000  005990  257F               	addwf	playSeventh@pitch& (0+255),w,b
 34001  005992  6EDF               	movwf	indf2,c
 34002                           
 34003                           ; BSR set to: 0
 34004  005994  2B7E               	incf	playSeventh@i_1662& (0+255),f,b
 34005  005996  D7E7               	goto	l16635
 34006  005998                     u23570:
 34007                           
 34008                           ; BSR set to: 0
 34009                           ;keyboard.c: 439: }
 34010                           ;keyboard.c: 441: NUM_NOTES_PRESSED = 4;
 34011                           
 34012                           ; BSR set to: 0
 34013  005998  0E04               	movlw	4
 34014  00599A  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 34015                           
 34016                           ; BSR set to: 0
 34017                           ;keyboard.c: 444: if(LATCH == 0) {latch_was_pressed = 0;}
 34018  00599C  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 34019                           
 34020                           ; BSR set to: 0
 34021  00599E  9C34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 34022                           
 34023                           ; BSR set to: 0
 34024                           ;keyboard.c: 446: finish_arpeggio_setup();
 34025                           
 34026                           ; BSR set to: 0
 34027  0059A0  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 34028                           
 34029                           ;keyboard.c: 447: TMR0ON = 1;
 34030  0059A4  8ED5               	bsf	4053,7,c	;volatile
 34031                           
 34032                           ;keyboard.c: 449: return;
 34033  0059A6  0012               	return	
 34034  0059A8                     l1425:
 34035                           
 34036                           ; BSR set to: 0
 34037                           ;keyboard.c: 450: }
 34038                           ;keyboard.c: 452: if((ON_OFF == 0) && (LATCH == 0)) {
 34039  0059A8  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 34040  0059AA  0012               	return	
 34041                           
 34042                           ; BSR set to: 0
 34043  0059AC  B235               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 34044  0059AE  0012               	return	
 34045                           
 34046                           ; BSR set to: 0
 34047                           ;keyboard.c: 454: if(NUM_NOTES_PRESSED > 0){
 34048  0059B0  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34049  0059B2  B4D8               	btfsc	status,2,c
 34050  0059B4  D00A               	goto	l1433
 34051                           
 34052                           ; BSR set to: 0
 34053                           ;keyboard.c: 455: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 34054  0059B6  0E00               	movlw	0
 34055  0059B8  B234               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 34056  0059BA  0E01               	movlw	1
 34057  0059BC  EC00  F04A         	call	_wait_one_pulse
 34058                           
 34059                           ;keyboard.c: 456: if(note_off_was_sent == 0) {key_press_release_note_off();}
 34060  0059C0  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 34061  0059C2  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 34062                           
 34063                           ;keyboard.c: 457: TIMER_OVERFLOWS = 0;
 34064  0059C6  0E00               	movlw	0
 34065  0059C8  6E54               	movwf	_TIMER_OVERFLOWS,c
 34066  0059CA                     l1433:
 34067                           
 34068                           ;keyboard.c: 458: }
 34069                           ;keyboard.c: 461: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 34070  0059CA  C0E6  F077         	movff	_parallel,??_playSeventh
 34071  0059CE  0100               	movlb	0	; () banked
 34072  0059D0  6B78               	clrf	(??_playSeventh+1)& (0+255),b
 34073  0059D2  BF77               	btfsc	??_playSeventh& (0+255),7,b
 34074  0059D4  0778               	decf	(??_playSeventh+1)& (0+255),f,b
 34075  0059D6  517F               	movf	playSeventh@pitch& (0+255),w,b
 34076  0059D8  6F79               	movwf	(??_playSeventh+2)& (0+255),b
 34077  0059DA  6B7A               	clrf	(??_playSeventh+3)& (0+255),b
 34078  0059DC  5177               	movf	??_playSeventh& (0+255),w,b
 34079  0059DE  1979               	xorwf	(??_playSeventh+2)& (0+255),w,b
 34080  0059E0  E106               	bnz	l16673
 34081  0059E2  5178               	movf	(??_playSeventh+1)& (0+255),w,b
 34082  0059E4  197A               	xorwf	(??_playSeventh+3)& (0+255),w,b
 34083  0059E6  A4D8               	btfss	status,2,c
 34084  0059E8  D002               	goto	l1435
 34085                           
 34086                           ; BSR set to: 0
 34087  0059EA  0E00               	movlw	0
 34088  0059EC  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 34089  0059EE                     l1435:
 34090  0059EE                     l16673:
 34091                           
 34092                           ; BSR set to: 0
 34093                           ;keyboard.c: 466: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 34094  0059EE  BE34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 34095                           
 34096                           ; BSR set to: 0
 34097  0059F0  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 34098  0059F2  D001               	goto	l1436
 34099                           
 34100                           ; BSR set to: 0
 34101                           ;keyboard.c: 467: LATCH = 1;
 34102  0059F4  8235               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 34103  0059F6                     l1436:
 34104                           
 34105                           ; BSR set to: 0
 34106                           ;keyboard.c: 468: }
 34107                           ;keyboard.c: 471: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1)){
 34108  0059F6  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 34109  0059F8  D002               	goto	u23670
 34110                           
 34111                           ; BSR set to: 0
 34112  0059FA  A035               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 34113  0059FC  D006               	goto	l1437
 34114  0059FE                     u23670:
 34115                           
 34116                           ; BSR set to: 0
 34117  0059FE  AC34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 34118  005A00  D004               	goto	l1437
 34119                           
 34120                           ; BSR set to: 0
 34121                           ;keyboard.c: 472: NUM_NOTES_PRESSED = 0;
 34122  005A02  0E00               	movlw	0
 34123  005A04  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 34124                           
 34125                           ;keyboard.c: 473: ARRAY_INDEX = 0;
 34126  005A06  0E00               	movlw	0
 34127  005A08  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 34128  005A0A                     l1437:
 34129                           
 34130                           ; BSR set to: 0
 34131                           ;keyboard.c: 474: }
 34132                           ;keyboard.c: 476: finish_arpeggio_setup();
 34133                           
 34134                           ; BSR set to: 0
 34135  005A0A  ECBE  F04A         	call	_finish_arpeggio_setup	;wreg free
 34136                           
 34137                           ;keyboard.c: 477: TMR0ON = 1;
 34138  005A0E  8ED5               	bsf	4053,7,c	;volatile
 34139                           
 34140                           ;keyboard.c: 479: return;
 34141  005A10  0012               	return	
 34142  005A12                     __end_of_playSeventh:
 34143                           	opt stack 0
 34144                           tblptru	equ	0xFF8
 34145                           tblptrh	equ	0xFF7
 34146                           tblptrl	equ	0xFF6
 34147                           tablat	equ	0xFF5
 34148                           prodh	equ	0xFF4
 34149                           prodl	equ	0xFF3
 34150                           intcon	equ	0xFF2
 34151                           intcon2	equ	0xFF1
 34152                           postinc0	equ	0xFEE
 34153                           wreg	equ	0xFE8
 34154                           indf1	equ	0xFE7
 34155                           postdec1	equ	0xFE5
 34156                           fsr1h	equ	0xFE2
 34157                           fsr1l	equ	0xFE1
 34158                           indf2	equ	0xFDF
 34159                           postinc2	equ	0xFDE
 34160                           plusw2	equ	0xFDB
 34161                           fsr2h	equ	0xFDA
 34162                           fsr2l	equ	0xFD9
 34163                           status	equ	0xFD8
 34164                           
 34165 ;; *************** function _noteOn *****************
 34166 ;; Defined at:
 34167 ;;		line 83 in file "midi.c"
 34168 ;; Parameters:    Size  Location     Type
 34169 ;;  channel         1    wreg     unsigned char 
 34170 ;;  pitch           1   14[BANK0 ] unsigned char 
 34171 ;;  velocity        1   15[BANK0 ] unsigned char 
 34172 ;; Auto vars:     Size  Location     Type
 34173 ;;  channel         1   16[BANK0 ] unsigned char 
 34174 ;; Return value:  Size  Location     Type
 34175 ;;                  1    wreg      void 
 34176 ;; Registers used:
 34177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34178 ;; Tracked objects:
 34179 ;;		On entry : 0/0
 34180 ;;		On exit  : 0/0
 34181 ;;		Unchanged: 0/0
 34182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34183 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34186 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34187 ;;Total ram usage:        3 bytes
 34188 ;; Hardware stack levels used:    1
 34189 ;; Hardware stack levels required when called:    7
 34190 ;; This function calls:
 34191 ;;		_noteOff
 34192 ;;		_sendOut
 34193 ;;		_sendUSB
 34194 ;; This function is called by:
 34195 ;;		_playThisNotePentatonic
 34196 ;;		_playTriad
 34197 ;;		_playSeventh
 34198 ;;		_playThisNote
 34199 ;;		_playThisNote8
 34200 ;;		_playDiatonicTriadMajor
 34201 ;;		_playDiatonicSeventhMajor
 34202 ;;		_playDiatonicTriadMinor
 34203 ;;		_playDiatonicSeventhMinor
 34204 ;;		_keyboard_all_note
 34205 ;;		_keyboard_eight_note
 34206 ;; This function uses a non-reentrant model
 34207 ;;
 34208                           
 34209                           	psect	text95
 34210  0089AC                     __ptext95:
 34211                           	opt stack 0
 34212  0089AC                     _noteOn:
 34213                           	opt stack 17
 34214                           
 34215                           ;incstack = 0
 34216                           ;noteOn@channel stored from wreg
 34217  0089AC  0100               	movlb	0	; () banked
 34218  0089AE  6F70               	movwf	noteOn@channel& (0+255),b
 34219                           
 34220                           ;midi.c: 85: noteNumber = pitch + semitone + ((octave + 1) * 12);
 34221  0089B0  0100               	movlb	0	; () banked
 34222  0089B2  29FC               	incf	_octave& (0+255),w,b
 34223  0089B4  0D0C               	mullw	12
 34224  0089B6  50F3               	movf	prodl,w,c
 34225  0089B8  256E               	addwf	noteOn@pitch& (0+255),w,b
 34226  0089BA  25F3               	addwf	_semitone& (0+255),w,b
 34227  0089BC  6FF4               	movwf	_noteNumber& (0+255),b
 34228                           
 34229                           ; BSR set to: 0
 34230                           ;midi.c: 86: statusByte = channel | note_on;
 34231  0089BE  5170               	movf	noteOn@channel& (0+255),w,b
 34232  0089C0  0990               	iorlw	144
 34233  0089C2  6FF5               	movwf	_statusByte& (0+255),b
 34234                           
 34235                           ; BSR set to: 0
 34236                           ;midi.c: 89: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 34237  0089C4  516F               	movf	noteOn@velocity& (0+255),w,b
 34238  0089C6  A4D8               	btfss	status,2,c
 34239  0089C8  D008               	goto	l451
 34240                           
 34241                           ; BSR set to: 0
 34242  0089CA  C06E  F06B         	movff	noteOn@pitch,noteOff@pitch
 34243  0089CE  C06F  F06C         	movff	noteOn@velocity,noteOff@velocity
 34244  0089D2  5170               	movf	noteOn@channel& (0+255),w,b
 34245  0089D4  ECFD  F047         	call	_noteOff
 34246  0089D8  0012               	return	
 34247  0089DA                     l451:
 34248                           
 34249                           ;midi.c: 92: sendUSB(statusByte, noteNumber, velocity);
 34250  0089DA  C0F4  F060         	movff	_noteNumber,sendUSB@message2
 34251  0089DE  C06F  F061         	movff	noteOn@velocity,sendUSB@message3
 34252  0089E2  0100               	movlb	0	; () banked
 34253  0089E4  51F5               	movf	_statusByte& (0+255),w,b
 34254  0089E6  ECC0  F039         	call	_sendUSB
 34255                           
 34256                           ;midi.c: 95: if(velocity > 0) {
 34257  0089EA  0100               	movlb	0	; () banked
 34258  0089EC  516F               	movf	noteOn@velocity& (0+255),w,b
 34259  0089EE  B4D8               	btfsc	status,2,c
 34260  0089F0  D00B               	goto	l453
 34261                           
 34262                           ; BSR set to: 0
 34263                           ;midi.c: 96: sendOut(statusByte);
 34264  0089F2  51F5               	movf	_statusByte& (0+255),w,b
 34265  0089F4  ECCD  F04A         	call	_sendOut
 34266                           
 34267                           ;midi.c: 97: sendOut(noteNumber);
 34268  0089F8  0100               	movlb	0	; () banked
 34269  0089FA  51F4               	movf	_noteNumber& (0+255),w,b
 34270  0089FC  ECCD  F04A         	call	_sendOut
 34271                           
 34272                           ;midi.c: 98: sendOut(velocity);
 34273  008A00  0100               	movlb	0	; () banked
 34274  008A02  516F               	movf	noteOn@velocity& (0+255),w,b
 34275  008A04  ECCD  F04A         	call	_sendOut
 34276  008A08                     l453:
 34277                           
 34278                           ;midi.c: 99: }
 34279                           ;midi.c: 101: note_off_was_sent = 0;
 34280  008A08  9233               	bcf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 34281  008A0A  0012               	return		;funcret
 34282  008A0C                     __end_of_noteOn:
 34283                           	opt stack 0
 34284                           tblptru	equ	0xFF8
 34285                           tblptrh	equ	0xFF7
 34286                           tblptrl	equ	0xFF6
 34287                           tablat	equ	0xFF5
 34288                           prodh	equ	0xFF4
 34289                           prodl	equ	0xFF3
 34290                           intcon	equ	0xFF2
 34291                           intcon2	equ	0xFF1
 34292                           postinc0	equ	0xFEE
 34293                           wreg	equ	0xFE8
 34294                           indf1	equ	0xFE7
 34295                           postdec1	equ	0xFE5
 34296                           fsr1h	equ	0xFE2
 34297                           fsr1l	equ	0xFE1
 34298                           indf2	equ	0xFDF
 34299                           postinc2	equ	0xFDE
 34300                           plusw2	equ	0xFDB
 34301                           fsr2h	equ	0xFDA
 34302                           fsr2l	equ	0xFD9
 34303                           status	equ	0xFD8
 34304                           
 34305 ;; *************** function _finish_arpeggio_setup *****************
 34306 ;; Defined at:
 34307 ;;		line 98 in file "arpeggio.c"
 34308 ;; Parameters:    Size  Location     Type
 34309 ;;		None
 34310 ;; Auto vars:     Size  Location     Type
 34311 ;;		None
 34312 ;; Return value:  Size  Location     Type
 34313 ;;                  1    wreg      void 
 34314 ;; Registers used:
 34315 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34316 ;; Tracked objects:
 34317 ;;		On entry : 0/0
 34318 ;;		On exit  : 0/0
 34319 ;;		Unchanged: 0/0
 34320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34325 ;;Total ram usage:        0 bytes
 34326 ;; Hardware stack levels used:    1
 34327 ;; Hardware stack levels required when called:    9
 34328 ;; This function calls:
 34329 ;;		_resetArpeggio
 34330 ;;		_setupArpeggio
 34331 ;; This function is called by:
 34332 ;;		_playThisNotePentatonic
 34333 ;;		_playTriad
 34334 ;;		_playSeventh
 34335 ;;		_playThisNote
 34336 ;;		_playThisNote8
 34337 ;;		_playDiatonicTriadMajor
 34338 ;;		_playDiatonicSeventhMajor
 34339 ;;		_playDiatonicTriadMinor
 34340 ;;		_playDiatonicSeventhMinor
 34341 ;; This function uses a non-reentrant model
 34342 ;;
 34343                           
 34344                           	psect	text96
 34345  00957C                     __ptext96:
 34346                           	opt stack 0
 34347  00957C                     _finish_arpeggio_setup:
 34348                           	opt stack 15
 34349                           
 34350                           ;arpeggio.c: 101: if((ON_OFF == 1) && (RESET_ON_KEY_PRESS == 1)){resetArpeggio();}
 34351                           
 34352                           ;incstack = 0
 34353  00957C  BA36               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 34354  00957E  A635               	btfss	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
 34355  009580  D002               	goto	l5209
 34356  009582  EC95  F048         	call	_resetArpeggio	;wreg free
 34357  009586                     l5209:
 34358                           
 34359                           ;arpeggio.c: 102: if((ON_OFF == 0) && (RESET_ON_KEY_RELEASE == 1)){resetArpeggio();}
 34360  009586  AA36               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 34361  009588  A435               	btfss	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
 34362  00958A  D002               	goto	l5210
 34363  00958C  EC95  F048         	call	_resetArpeggio	;wreg free
 34364  009590                     l5210:
 34365                           
 34366                           ;arpeggio.c: 105: setupArpeggio();
 34367  009590  ECF0  F040         	call	_setupArpeggio	;wreg free
 34368                           
 34369                           ;arpeggio.c: 107: TIMER_OVERFLOWS = 0;
 34370  009594  0E00               	movlw	0
 34371  009596  6E54               	movwf	_TIMER_OVERFLOWS,c
 34372  009598  0012               	return		;funcret
 34373  00959A                     __end_of_finish_arpeggio_setup:
 34374                           	opt stack 0
 34375                           tblptru	equ	0xFF8
 34376                           tblptrh	equ	0xFF7
 34377                           tblptrl	equ	0xFF6
 34378                           tablat	equ	0xFF5
 34379                           prodh	equ	0xFF4
 34380                           prodl	equ	0xFF3
 34381                           intcon	equ	0xFF2
 34382                           intcon2	equ	0xFF1
 34383                           postinc0	equ	0xFEE
 34384                           wreg	equ	0xFE8
 34385                           indf1	equ	0xFE7
 34386                           postdec1	equ	0xFE5
 34387                           fsr1h	equ	0xFE2
 34388                           fsr1l	equ	0xFE1
 34389                           indf2	equ	0xFDF
 34390                           postinc2	equ	0xFDE
 34391                           plusw2	equ	0xFDB
 34392                           fsr2h	equ	0xFDA
 34393                           fsr2l	equ	0xFD9
 34394                           status	equ	0xFD8
 34395                           
 34396 ;; *************** function _setupArpeggio *****************
 34397 ;; Defined at:
 34398 ;;		line 181 in file "arpeggio.c"
 34399 ;; Parameters:    Size  Location     Type
 34400 ;;		None
 34401 ;; Auto vars:     Size  Location     Type
 34402 ;;		None
 34403 ;; Return value:  Size  Location     Type
 34404 ;;                  1    wreg      void 
 34405 ;; Registers used:
 34406 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34407 ;; Tracked objects:
 34408 ;;		On entry : 0/0
 34409 ;;		On exit  : 0/0
 34410 ;;		Unchanged: 0/0
 34411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34416 ;;Total ram usage:        0 bytes
 34417 ;; Hardware stack levels used:    1
 34418 ;; Hardware stack levels required when called:    8
 34419 ;; This function calls:
 34420 ;;		_copy_array
 34421 ;;		_random_pitches
 34422 ;;		_random_pitches_non_repeating
 34423 ;; This function is called by:
 34424 ;;		_Function_H_4
 34425 ;;		_finish_arpeggio_setup
 34426 ;; This function uses a non-reentrant model
 34427 ;;
 34428                           
 34429                           	psect	text97
 34430  0081E0                     __ptext97:
 34431                           	opt stack 0
 34432  0081E0                     _setupArpeggio:
 34433                           	opt stack 15
 34434                           
 34435                           ;arpeggio.c: 186: if(NUM_NOTES_PRESSED == 0){return;}
 34436                           
 34437                           ;incstack = 0
 34438  0081E0  0100               	movlb	0	; () banked
 34439  0081E2  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34440  0081E4  B4D8               	btfsc	status,2,c
 34441  0081E6  0012               	return	
 34442                           
 34443                           ; BSR set to: 0
 34444                           ;arpeggio.c: 189: copy_array();
 34445                           
 34446                           ; BSR set to: 0
 34447                           
 34448                           ; BSR set to: 0
 34449  0081E8  EC75  F044         	call	_copy_array	;wreg free
 34450                           
 34451                           ;arpeggio.c: 192: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 34452  0081EC  0E05               	movlw	5
 34453  0081EE  0100               	movlb	0	; () banked
 34454  0081F0  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34455  0081F2  B4D8               	btfsc	status,2,c
 34456                           
 34457                           ; BSR set to: 0
 34458  0081F4  EC62  F045         	call	_random_pitches	;wreg free
 34459                           
 34460                           ;arpeggio.c: 193: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {random_pitches_non_repeatin
      +                          g();}
 34461  0081F8  0E04               	movlw	4
 34462  0081FA  0100               	movlb	0	; () banked
 34463  0081FC  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34464  0081FE  B4D8               	btfsc	status,2,c
 34465                           
 34466                           ; BSR set to: 0
 34467  008200  ECF5  F03D         	call	_random_pitches_non_repeating	;wreg free
 34468                           
 34469                           ;arpeggio.c: 202: if(ARPEGGIO_TYPE == AS_PRESSED){arpeggioPtr = ARPEGGIO;}
 34470  008204  0E06               	movlw	6
 34471  008206  0100               	movlb	0	; () banked
 34472  008208  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34473  00820A  A4D8               	btfss	status,2,c
 34474  00820C  D004               	goto	l5243
 34475                           
 34476                           ; BSR set to: 0
 34477  00820E  0E72               	movlw	low _ARPEGGIO
 34478  008210  6E4F               	movwf	_arpeggioPtr,c
 34479  008212  0E01               	movlw	high _ARPEGGIO
 34480  008214  6E50               	movwf	_arpeggioPtr+1,c
 34481  008216                     l5243:
 34482                           
 34483                           ; BSR set to: 0
 34484                           ;arpeggio.c: 203: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN){arpeggioPtr = ARPEG
      +                          GIO_SORTED;}
 34485                           
 34486                           ; BSR set to: 0
 34487  008216  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 34488  008218  B4D8               	btfsc	status,2,c
 34489  00821A  D004               	goto	u22730
 34490                           
 34491                           ; BSR set to: 0
 34492  00821C  0E02               	movlw	2
 34493  00821E  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34494  008220  A4D8               	btfss	status,2,c
 34495  008222  D004               	goto	l5244
 34496  008224                     u22730:
 34497                           
 34498                           ; BSR set to: 0
 34499                           
 34500                           ; BSR set to: 0
 34501  008224  0E9C               	movlw	low _ARPEGGIO_SORTED
 34502  008226  6E4F               	movwf	_arpeggioPtr,c
 34503  008228  0E02               	movlw	high _ARPEGGIO_SORTED
 34504  00822A  6E50               	movwf	_arpeggioPtr+1,c
 34505  00822C                     l5244:
 34506                           
 34507                           ; BSR set to: 0
 34508                           ;arpeggio.c: 204: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP){arpeggioPtr = ARP
      +                          EGGIO_SORTED;}
 34509  00822C  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 34510  00822E  B4D8               	btfsc	status,2,c
 34511  008230  D004               	goto	u22750
 34512                           
 34513                           ; BSR set to: 0
 34514  008232  0E03               	movlw	3
 34515  008234  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34516  008236  A4D8               	btfss	status,2,c
 34517  008238  D004               	goto	l5247
 34518  00823A                     u22750:
 34519                           
 34520                           ; BSR set to: 0
 34521                           
 34522                           ; BSR set to: 0
 34523  00823A  0E9C               	movlw	low _ARPEGGIO_SORTED
 34524  00823C  6E4F               	movwf	_arpeggioPtr,c
 34525  00823E  0E02               	movlw	high _ARPEGGIO_SORTED
 34526  008240  6E50               	movwf	_arpeggioPtr+1,c
 34527  008242                     l5247:
 34528                           
 34529                           ; BSR set to: 0
 34530                           ;arpeggio.c: 205: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){ar
      +                          peggioPtr = ARPEGGIO_RANDOM;}
 34531  008242  0E05               	movlw	5
 34532  008244  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34533  008246  B4D8               	btfsc	status,2,c
 34534  008248  D004               	goto	u22770
 34535                           
 34536                           ; BSR set to: 0
 34537  00824A  0E04               	movlw	4
 34538  00824C  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34539  00824E  A4D8               	btfss	status,2,c
 34540  008250  0012               	return	
 34541  008252                     u22770:
 34542                           
 34543                           ; BSR set to: 0
 34544                           
 34545                           ; BSR set to: 0
 34546  008252  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34547  008254  6E4F               	movwf	_arpeggioPtr,c
 34548  008256  0E02               	movlw	high _ARPEGGIO_RANDOM
 34549  008258  6E50               	movwf	_arpeggioPtr+1,c
 34550  00825A  0012               	return	
 34551  00825C                     __end_of_setupArpeggio:
 34552                           	opt stack 0
 34553                           tblptru	equ	0xFF8
 34554                           tblptrh	equ	0xFF7
 34555                           tblptrl	equ	0xFF6
 34556                           tablat	equ	0xFF5
 34557                           prodh	equ	0xFF4
 34558                           prodl	equ	0xFF3
 34559                           intcon	equ	0xFF2
 34560                           intcon2	equ	0xFF1
 34561                           postinc0	equ	0xFEE
 34562                           wreg	equ	0xFE8
 34563                           indf1	equ	0xFE7
 34564                           postdec1	equ	0xFE5
 34565                           fsr1h	equ	0xFE2
 34566                           fsr1l	equ	0xFE1
 34567                           indf2	equ	0xFDF
 34568                           postinc2	equ	0xFDE
 34569                           plusw2	equ	0xFDB
 34570                           fsr2h	equ	0xFDA
 34571                           fsr2l	equ	0xFD9
 34572                           status	equ	0xFD8
 34573                           
 34574 ;; *************** function _random_pitches_non_repeating *****************
 34575 ;; Defined at:
 34576 ;;		line 263 in file "arpeggio.c"
 34577 ;; Parameters:    Size  Location     Type
 34578 ;;		None
 34579 ;; Auto vars:     Size  Location     Type
 34580 ;;  randomIndex     1   21[BANK0 ] unsigned char 
 34581 ;;  temp            1   20[BANK0 ] unsigned char 
 34582 ;;  i               1   22[BANK0 ] unsigned char 
 34583 ;; Return value:  Size  Location     Type
 34584 ;;                  1    wreg      void 
 34585 ;; Registers used:
 34586 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34587 ;; Tracked objects:
 34588 ;;		On entry : 0/0
 34589 ;;		On exit  : 0/0
 34590 ;;		Unchanged: 0/0
 34591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34593 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34595 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34596 ;;Total ram usage:        3 bytes
 34597 ;; Hardware stack levels used:    1
 34598 ;; Hardware stack levels required when called:    7
 34599 ;; This function calls:
 34600 ;;		___awmod
 34601 ;;		_rand
 34602 ;; This function is called by:
 34603 ;;		_processOctave
 34604 ;;		_setupArpeggio
 34605 ;; This function uses a non-reentrant model
 34606 ;;
 34607                           
 34608                           	psect	text98
 34609  007BEA                     __ptext98:
 34610                           	opt stack 0
 34611  007BEA                     _random_pitches_non_repeating:
 34612                           	opt stack 15
 34613                           
 34614                           ;arpeggio.c: 265: if(NUM_NOTES_PRESSED == 0){return;}
 34615                           
 34616                           ; BSR set to: 0
 34617                           ;incstack = 0
 34618  007BEA  0100               	movlb	0	; () banked
 34619  007BEC  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34620  007BEE  B4D8               	btfsc	status,2,c
 34621  007BF0  0012               	return	
 34622                           
 34623                           ; BSR set to: 0
 34624                           ;arpeggio.c: 267: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++) {
 34625                           
 34626                           ; BSR set to: 0
 34627                           
 34628                           ; BSR set to: 0
 34629  007BF2  0E00               	movlw	0
 34630  007BF4  6F76               	movwf	random_pitches_non_repeating@i& (0+255),b
 34631  007BF6  D036               	goto	l5285
 34632  007BF8                     
 34633                           ; BSR set to: 0
 34634                           ;arpeggio.c: 268: unsigned char temp = ARPEGGIO_RANDOM[i];
 34635                           
 34636                           ; BSR set to: 0
 34637  007BF8  5176               	movf	random_pitches_non_repeating@i& (0+255),w,b
 34638  007BFA  0D01               	mullw	1
 34639  007BFC  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34640  007BFE  24F3               	addwf	prodl,w,c
 34641  007C00  6ED9               	movwf	fsr2l,c
 34642  007C02  0E02               	movlw	high _ARPEGGIO_RANDOM
 34643  007C04  20F4               	addwfc	prodh,w,c
 34644  007C06  6EDA               	movwf	fsr2h,c
 34645  007C08  50DF               	movf	indf2,w,c
 34646  007C0A  6F74               	movwf	random_pitches_non_repeating@temp& (0+255),b
 34647                           
 34648                           ; BSR set to: 0
 34649                           ;arpeggio.c: 269: unsigned char randomIndex = rand() % NUM_NOTES_PRESSED;
 34650  007C0C  EC90  F045         	call	_rand	;wreg free
 34651  007C10  C06C  F06E         	movff	?_rand,___awmod@dividend
 34652  007C14  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
 34653  007C18  C0E5  F070         	movff	_NUM_NOTES_PRESSED,___awmod@divisor
 34654  007C1C  0100               	movlb	0	; () banked
 34655  007C1E  6B71               	clrf	(___awmod@divisor+1)& (0+255),b
 34656  007C20  EC93  F042         	call	___awmod	;wreg free
 34657  007C24  0100               	movlb	0	; () banked
 34658  007C26  516E               	movf	?___awmod& (0+255),w,b
 34659  007C28  6F75               	movwf	random_pitches_non_repeating@randomIndex& (0+255),b
 34660                           
 34661                           ; BSR set to: 0
 34662                           ;arpeggio.c: 270: ARPEGGIO_RANDOM[i] = ARPEGGIO_RANDOM[randomIndex];
 34663  007C2A  5175               	movf	random_pitches_non_repeating@randomIndex& (0+255),w,b
 34664  007C2C  0D01               	mullw	1
 34665  007C2E  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34666  007C30  24F3               	addwf	prodl,w,c
 34667  007C32  6ED9               	movwf	fsr2l,c
 34668  007C34  0E02               	movlw	high _ARPEGGIO_RANDOM
 34669  007C36  20F4               	addwfc	prodh,w,c
 34670  007C38  6EDA               	movwf	fsr2h,c
 34671  007C3A  5176               	movf	random_pitches_non_repeating@i& (0+255),w,b
 34672  007C3C  0D01               	mullw	1
 34673  007C3E  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34674  007C40  24F3               	addwf	prodl,w,c
 34675  007C42  6EE1               	movwf	fsr1l,c
 34676  007C44  0E02               	movlw	high _ARPEGGIO_RANDOM
 34677  007C46  20F4               	addwfc	prodh,w,c
 34678  007C48  6EE2               	movwf	fsr1h,c
 34679  007C4A  CFDF FFE7          	movff	indf2,indf1
 34680                           
 34681                           ; BSR set to: 0
 34682                           ;arpeggio.c: 271: ARPEGGIO_RANDOM[randomIndex] = temp;
 34683  007C4E  5175               	movf	random_pitches_non_repeating@randomIndex& (0+255),w,b
 34684  007C50  0D01               	mullw	1
 34685  007C52  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34686  007C54  24F3               	addwf	prodl,w,c
 34687  007C56  6ED9               	movwf	fsr2l,c
 34688  007C58  0E02               	movlw	high _ARPEGGIO_RANDOM
 34689  007C5A  20F4               	addwfc	prodh,w,c
 34690  007C5C  6EDA               	movwf	fsr2h,c
 34691  007C5E  C074  FFDF         	movff	random_pitches_non_repeating@temp,indf2
 34692                           
 34693                           ; BSR set to: 0
 34694  007C62  2B76               	incf	random_pitches_non_repeating@i& (0+255),f,b
 34695  007C64                     l5285:
 34696                           
 34697                           ; BSR set to: 0
 34698                           
 34699                           ; BSR set to: 0
 34700  007C64  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34701  007C66  5D76               	subwf	random_pitches_non_repeating@i& (0+255),w,b
 34702  007C68  B0D8               	btfsc	status,0,c
 34703  007C6A  0012               	return	
 34704  007C6C  D7C5               	goto	l5286
 34705  007C6E                     __end_of_random_pitches_non_repeating:
 34706                           	opt stack 0
 34707                           tblptru	equ	0xFF8
 34708                           tblptrh	equ	0xFF7
 34709                           tblptrl	equ	0xFF6
 34710                           tablat	equ	0xFF5
 34711                           prodh	equ	0xFF4
 34712                           prodl	equ	0xFF3
 34713                           intcon	equ	0xFF2
 34714                           intcon2	equ	0xFF1
 34715                           postinc0	equ	0xFEE
 34716                           wreg	equ	0xFE8
 34717                           indf1	equ	0xFE7
 34718                           postdec1	equ	0xFE5
 34719                           fsr1h	equ	0xFE2
 34720                           fsr1l	equ	0xFE1
 34721                           indf2	equ	0xFDF
 34722                           postinc2	equ	0xFDE
 34723                           plusw2	equ	0xFDB
 34724                           fsr2h	equ	0xFDA
 34725                           fsr2l	equ	0xFD9
 34726                           status	equ	0xFD8
 34727                           
 34728 ;; *************** function _random_pitches *****************
 34729 ;; Defined at:
 34730 ;;		line 252 in file "arpeggio.c"
 34731 ;; Parameters:    Size  Location     Type
 34732 ;;		None
 34733 ;; Auto vars:     Size  Location     Type
 34734 ;;  random_array    1   20[BANK0 ] unsigned char 
 34735 ;;  i               1   21[BANK0 ] unsigned char 
 34736 ;; Return value:  Size  Location     Type
 34737 ;;                  1    wreg      void 
 34738 ;; Registers used:
 34739 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34740 ;; Tracked objects:
 34741 ;;		On entry : 0/0
 34742 ;;		On exit  : 0/0
 34743 ;;		Unchanged: 0/0
 34744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34746 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34748 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34749 ;;Total ram usage:        2 bytes
 34750 ;; Hardware stack levels used:    1
 34751 ;; Hardware stack levels required when called:    7
 34752 ;; This function calls:
 34753 ;;		___awmod
 34754 ;;		_rand
 34755 ;; This function is called by:
 34756 ;;		_processOctave
 34757 ;;		_setupArpeggio
 34758 ;; This function uses a non-reentrant model
 34759 ;;
 34760                           
 34761                           	psect	text99
 34762  008AC4                     __ptext99:
 34763                           	opt stack 0
 34764  008AC4                     _random_pitches:
 34765                           	opt stack 15
 34766                           
 34767                           ;arpeggio.c: 254: if(NUM_NOTES_PRESSED == 0){return;}
 34768                           
 34769                           ; BSR set to: 0
 34770                           ;incstack = 0
 34771  008AC4  0100               	movlb	0	; () banked
 34772  008AC6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34773  008AC8  B4D8               	btfsc	status,2,c
 34774  008ACA  0012               	return	
 34775                           
 34776                           ; BSR set to: 0
 34777                           ;arpeggio.c: 256: for (unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 34778                           
 34779                           ; BSR set to: 0
 34780                           
 34781                           ; BSR set to: 0
 34782  008ACC  0E00               	movlw	0
 34783  008ACE  6F75               	movwf	random_pitches@i& (0+255),b
 34784  008AD0  D022               	goto	l5278
 34785  008AD2                     
 34786                           ; BSR set to: 0
 34787                           ;arpeggio.c: 257: unsigned char random_array_index = rand() % (NUM_NOTES_PRESSED);
 34788                           
 34789                           ; BSR set to: 0
 34790  008AD2  EC90  F045         	call	_rand	;wreg free
 34791  008AD6  C06C  F06E         	movff	?_rand,___awmod@dividend
 34792  008ADA  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
 34793  008ADE  C0E5  F070         	movff	_NUM_NOTES_PRESSED,___awmod@divisor
 34794  008AE2  0100               	movlb	0	; () banked
 34795  008AE4  6B71               	clrf	(___awmod@divisor+1)& (0+255),b
 34796  008AE6  EC93  F042         	call	___awmod	;wreg free
 34797  008AEA  0100               	movlb	0	; () banked
 34798  008AEC  516E               	movf	?___awmod& (0+255),w,b
 34799  008AEE  6F74               	movwf	random_pitches@random_array_index& (0+255),b
 34800                           
 34801                           ; BSR set to: 0
 34802                           ;arpeggio.c: 258: ARPEGGIO_RANDOM[i] = ARPEGGIO[random_array_index];
 34803  008AF0  5174               	movf	random_pitches@random_array_index& (0+255),w,b
 34804  008AF2  0D01               	mullw	1
 34805  008AF4  0E72               	movlw	low _ARPEGGIO
 34806  008AF6  24F3               	addwf	prodl,w,c
 34807  008AF8  6ED9               	movwf	fsr2l,c
 34808  008AFA  0E01               	movlw	high _ARPEGGIO
 34809  008AFC  20F4               	addwfc	prodh,w,c
 34810  008AFE  6EDA               	movwf	fsr2h,c
 34811  008B00  5175               	movf	random_pitches@i& (0+255),w,b
 34812  008B02  0D01               	mullw	1
 34813  008B04  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34814  008B06  24F3               	addwf	prodl,w,c
 34815  008B08  6EE1               	movwf	fsr1l,c
 34816  008B0A  0E02               	movlw	high _ARPEGGIO_RANDOM
 34817  008B0C  20F4               	addwfc	prodh,w,c
 34818  008B0E  6EE2               	movwf	fsr1h,c
 34819  008B10  CFDF FFE7          	movff	indf2,indf1
 34820                           
 34821                           ; BSR set to: 0
 34822  008B14  2B75               	incf	random_pitches@i& (0+255),f,b
 34823  008B16                     l5278:
 34824                           
 34825                           ; BSR set to: 0
 34826                           
 34827                           ; BSR set to: 0
 34828  008B16  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34829  008B18  5D75               	subwf	random_pitches@i& (0+255),w,b
 34830  008B1A  B0D8               	btfsc	status,0,c
 34831  008B1C  0012               	return	
 34832  008B1E  D7D9               	goto	l5279
 34833  008B20                     __end_of_random_pitches:
 34834                           	opt stack 0
 34835                           tblptru	equ	0xFF8
 34836                           tblptrh	equ	0xFF7
 34837                           tblptrl	equ	0xFF6
 34838                           tablat	equ	0xFF5
 34839                           prodh	equ	0xFF4
 34840                           prodl	equ	0xFF3
 34841                           intcon	equ	0xFF2
 34842                           intcon2	equ	0xFF1
 34843                           postinc0	equ	0xFEE
 34844                           wreg	equ	0xFE8
 34845                           indf1	equ	0xFE7
 34846                           postdec1	equ	0xFE5
 34847                           fsr1h	equ	0xFE2
 34848                           fsr1l	equ	0xFE1
 34849                           indf2	equ	0xFDF
 34850                           postinc2	equ	0xFDE
 34851                           plusw2	equ	0xFDB
 34852                           fsr2h	equ	0xFDA
 34853                           fsr2l	equ	0xFD9
 34854                           status	equ	0xFD8
 34855                           
 34856 ;; *************** function _rand *****************
 34857 ;; Defined at:
 34858 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 34859 ;; Parameters:    Size  Location     Type
 34860 ;;		None
 34861 ;; Auto vars:     Size  Location     Type
 34862 ;;		None
 34863 ;; Return value:  Size  Location     Type
 34864 ;;                  2   12[BANK0 ] int 
 34865 ;; Registers used:
 34866 ;;		wreg, status,2, status,0, cstack
 34867 ;; Tracked objects:
 34868 ;;		On entry : 0/0
 34869 ;;		On exit  : 0/0
 34870 ;;		Unchanged: 0/0
 34871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34872 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34875 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34876 ;;Total ram usage:        2 bytes
 34877 ;; Hardware stack levels used:    1
 34878 ;; Hardware stack levels required when called:    6
 34879 ;; This function calls:
 34880 ;;		___lmul
 34881 ;; This function is called by:
 34882 ;;		_random_pitches
 34883 ;;		_random_pitches_non_repeating
 34884 ;; This function uses a non-reentrant model
 34885 ;;
 34886                           
 34887                           	psect	text100
 34888  008B20                     __ptext100:
 34889                           	opt stack 0
 34890  008B20                     _rand:
 34891                           	opt stack 15
 34892                           
 34893                           ; BSR set to: 0
 34894                           ;incstack = 0
 34895  008B20  C1E7  F060         	movff	_randx,___lmul@multiplier
 34896  008B24  C1E8  F061         	movff	_randx+1,___lmul@multiplier+1
 34897  008B28  C1E9  F062         	movff	_randx+2,___lmul@multiplier+2
 34898  008B2C  C1EA  F063         	movff	_randx+3,___lmul@multiplier+3
 34899  008B30  0E6D               	movlw	109
 34900  008B32  0100               	movlb	0	; () banked
 34901  008B34  6F64               	movwf	___lmul@multiplicand& (0+255),b
 34902  008B36  0E4E               	movlw	78
 34903  008B38  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 34904  008B3A  0EC6               	movlw	198
 34905  008B3C  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 34906  008B3E  0E41               	movlw	65
 34907  008B40  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 34908  008B42  EC46  F046         	call	___lmul	;wreg free
 34909  008B46  C060  F1E7         	movff	?___lmul,_randx
 34910  008B4A  C061  F1E8         	movff	?___lmul+1,_randx+1
 34911  008B4E  C062  F1E9         	movff	?___lmul+2,_randx+2
 34912  008B52  C063  F1EA         	movff	?___lmul+3,_randx+3
 34913  008B56  0E39               	movlw	57
 34914  008B58  0101               	movlb	1	; () banked
 34915  008B5A  27E7               	addwf	_randx& (0+255),f,b
 34916  008B5C  0E30               	movlw	48
 34917  008B5E  23E8               	addwfc	(_randx+1)& (0+255),f,b
 34918  008B60  0E00               	movlw	0
 34919  008B62  23E9               	addwfc	(_randx+2)& (0+255),f,b
 34920  008B64  0E00               	movlw	0
 34921  008B66  23EA               	addwfc	(_randx+3)& (0+255),f,b
 34922                           
 34923                           ; BSR set to: 1
 34924  008B68  0EFF               	movlw	255
 34925  008B6A  15E9               	andwf	(_randx+2)& (0+255),w,b
 34926  008B6C  0100               	movlb	0	; () banked
 34927  008B6E  6F6C               	movwf	?_rand& (0+255),b
 34928  008B70  0E7F               	movlw	127
 34929  008B72  0101               	movlb	1	; () banked
 34930  008B74  15EA               	andwf	(_randx+3)& (0+255),w,b
 34931  008B76  0100               	movlb	0	; () banked
 34932  008B78  6F6D               	movwf	(?_rand+1)& (0+255),b
 34933  008B7A  0012               	return	
 34934  008B7C                     __end_of_rand:
 34935                           	opt stack 0
 34936                           tblptru	equ	0xFF8
 34937                           tblptrh	equ	0xFF7
 34938                           tblptrl	equ	0xFF6
 34939                           tablat	equ	0xFF5
 34940                           prodh	equ	0xFF4
 34941                           prodl	equ	0xFF3
 34942                           intcon	equ	0xFF2
 34943                           intcon2	equ	0xFF1
 34944                           postinc0	equ	0xFEE
 34945                           wreg	equ	0xFE8
 34946                           indf1	equ	0xFE7
 34947                           postdec1	equ	0xFE5
 34948                           fsr1h	equ	0xFE2
 34949                           fsr1l	equ	0xFE1
 34950                           indf2	equ	0xFDF
 34951                           postinc2	equ	0xFDE
 34952                           plusw2	equ	0xFDB
 34953                           fsr2h	equ	0xFDA
 34954                           fsr2l	equ	0xFD9
 34955                           status	equ	0xFD8
 34956                           
 34957 ;; *************** function ___awmod *****************
 34958 ;; Defined at:
 34959 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 34960 ;; Parameters:    Size  Location     Type
 34961 ;;  dividend        2   14[BANK0 ] int 
 34962 ;;  divisor         2   16[BANK0 ] int 
 34963 ;; Auto vars:     Size  Location     Type
 34964 ;;  sign            1   19[BANK0 ] unsigned char 
 34965 ;;  counter         1   18[BANK0 ] unsigned char 
 34966 ;; Return value:  Size  Location     Type
 34967 ;;                  2   14[BANK0 ] int 
 34968 ;; Registers used:
 34969 ;;		wreg, status,2, status,0
 34970 ;; Tracked objects:
 34971 ;;		On entry : 0/0
 34972 ;;		On exit  : 0/0
 34973 ;;		Unchanged: 0/0
 34974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34975 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34976 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34978 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34979 ;;Total ram usage:        6 bytes
 34980 ;; Hardware stack levels used:    1
 34981 ;; Hardware stack levels required when called:    5
 34982 ;; This function calls:
 34983 ;;		Nothing
 34984 ;; This function is called by:
 34985 ;;		_processOctave
 34986 ;;		_int2string
 34987 ;;		_random_pitches
 34988 ;;		_random_pitches_non_repeating
 34989 ;; This function uses a non-reentrant model
 34990 ;;
 34991                           
 34992                           	psect	text101
 34993  008526                     __ptext101:
 34994                           	opt stack 0
 34995  008526                     ___awmod:
 34996                           	opt stack 16
 34997                           
 34998                           ; BSR set to: 0
 34999                           ;incstack = 0
 35000  008526  0E00               	movlw	0
 35001  008528  0100               	movlb	0	; () banked
 35002  00852A  6F73               	movwf	___awmod@sign& (0+255),b
 35003                           
 35004                           ; BSR set to: 0
 35005  00852C  AF6F               	btfss	(___awmod@dividend+1)& (0+255),7,b
 35006  00852E  D006               	goto	l5608
 35007                           
 35008                           ; BSR set to: 0
 35009  008530  6D6E               	negf	___awmod@dividend& (0+255),b
 35010  008532  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
 35011  008534  B0D8               	btfsc	status,0,c
 35012  008536  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
 35013                           
 35014                           ; BSR set to: 0
 35015  008538  0E01               	movlw	1
 35016  00853A  6F73               	movwf	___awmod@sign& (0+255),b
 35017  00853C                     l5608:
 35018                           
 35019                           ; BSR set to: 0
 35020                           
 35021                           ; BSR set to: 0
 35022  00853C  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
 35023  00853E  D004               	goto	l5609
 35024                           
 35025                           ; BSR set to: 0
 35026  008540  6D70               	negf	___awmod@divisor& (0+255),b
 35027  008542  1F71               	comf	(___awmod@divisor+1)& (0+255),f,b
 35028  008544  B0D8               	btfsc	status,0,c
 35029  008546  2B71               	incf	(___awmod@divisor+1)& (0+255),f,b
 35030  008548                     l5609:
 35031                           
 35032                           ; BSR set to: 0
 35033                           
 35034                           ; BSR set to: 0
 35035  008548  5170               	movf	___awmod@divisor& (0+255),w,b
 35036  00854A  1171               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 35037  00854C  B4D8               	btfsc	status,2,c
 35038  00854E  D018               	goto	l5616
 35039                           
 35040                           ; BSR set to: 0
 35041  008550  0E01               	movlw	1
 35042  008552  6F72               	movwf	___awmod@counter& (0+255),b
 35043  008554  D004               	goto	l5611
 35044  008556                     
 35045                           ; BSR set to: 0
 35046                           
 35047                           ; BSR set to: 0
 35048  008556  90D8               	bcf	status,0,c
 35049  008558  3770               	rlcf	___awmod@divisor& (0+255),f,b
 35050  00855A  3771               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 35051  00855C  2B72               	incf	___awmod@counter& (0+255),f,b
 35052  00855E                     l5611:
 35053                           
 35054                           ; BSR set to: 0
 35055                           
 35056                           ; BSR set to: 0
 35057  00855E  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
 35058  008560  D7FA               	goto	l5612
 35059  008562                     u22470:
 35060                           
 35061                           ; BSR set to: 0
 35062                           
 35063                           ; BSR set to: 0
 35064                           
 35065                           ; BSR set to: 0
 35066  008562  5170               	movf	___awmod@divisor& (0+255),w,b
 35067  008564  5D6E               	subwf	___awmod@dividend& (0+255),w,b
 35068  008566  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
 35069  008568  596F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 35070  00856A  A0D8               	btfss	status,0,c
 35071  00856C  D004               	goto	l5615
 35072                           
 35073                           ; BSR set to: 0
 35074  00856E  5170               	movf	___awmod@divisor& (0+255),w,b
 35075  008570  5F6E               	subwf	___awmod@dividend& (0+255),f,b
 35076  008572  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
 35077  008574  5B6F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 35078  008576                     l5615:
 35079                           
 35080                           ; BSR set to: 0
 35081                           
 35082                           ; BSR set to: 0
 35083  008576  90D8               	bcf	status,0,c
 35084  008578  3371               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 35085  00857A  3370               	rrcf	___awmod@divisor& (0+255),f,b
 35086                           
 35087                           ; BSR set to: 0
 35088  00857C  2F72               	decfsz	___awmod@counter& (0+255),f,b
 35089  00857E  D7F1               	goto	u22470
 35090  008580                     l5616:
 35091                           
 35092                           ; BSR set to: 0
 35093                           
 35094                           ; BSR set to: 0
 35095                           
 35096                           ; BSR set to: 0
 35097  008580  5173               	movf	___awmod@sign& (0+255),w,b
 35098  008582  B4D8               	btfsc	status,2,c
 35099  008584  D004               	goto	l5617
 35100                           
 35101                           ; BSR set to: 0
 35102  008586  6D6E               	negf	___awmod@dividend& (0+255),b
 35103  008588  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
 35104  00858A  B0D8               	btfsc	status,0,c
 35105  00858C  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
 35106  00858E                     l5617:
 35107                           
 35108                           ; BSR set to: 0
 35109                           
 35110                           ; BSR set to: 0
 35111  00858E  C06E  F06E         	movff	___awmod@dividend,?___awmod
 35112  008592  C06F  F06F         	movff	___awmod@dividend+1,?___awmod+1
 35113  008596  0012               	return	
 35114  008598                     __end_of___awmod:
 35115                           	opt stack 0
 35116                           tblptru	equ	0xFF8
 35117                           tblptrh	equ	0xFF7
 35118                           tblptrl	equ	0xFF6
 35119                           tablat	equ	0xFF5
 35120                           prodh	equ	0xFF4
 35121                           prodl	equ	0xFF3
 35122                           intcon	equ	0xFF2
 35123                           intcon2	equ	0xFF1
 35124                           postinc0	equ	0xFEE
 35125                           wreg	equ	0xFE8
 35126                           indf1	equ	0xFE7
 35127                           postdec1	equ	0xFE5
 35128                           fsr1h	equ	0xFE2
 35129                           fsr1l	equ	0xFE1
 35130                           indf2	equ	0xFDF
 35131                           postinc2	equ	0xFDE
 35132                           plusw2	equ	0xFDB
 35133                           fsr2h	equ	0xFDA
 35134                           fsr2l	equ	0xFD9
 35135                           status	equ	0xFD8
 35136                           
 35137 ;; *************** function _copy_array *****************
 35138 ;; Defined at:
 35139 ;;		line 208 in file "arpeggio.c"
 35140 ;; Parameters:    Size  Location     Type
 35141 ;;		None
 35142 ;; Auto vars:     Size  Location     Type
 35143 ;;  i               1    0[BANK0 ] unsigned char 
 35144 ;; Return value:  Size  Location     Type
 35145 ;;                  1    wreg      void 
 35146 ;; Registers used:
 35147 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 35148 ;; Tracked objects:
 35149 ;;		On entry : 0/0
 35150 ;;		On exit  : 0/0
 35151 ;;		Unchanged: 0/0
 35152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35156 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35157 ;;Total ram usage:        1 bytes
 35158 ;; Hardware stack levels used:    1
 35159 ;; Hardware stack levels required when called:    5
 35160 ;; This function calls:
 35161 ;;		Nothing
 35162 ;; This function is called by:
 35163 ;;		_setupArpeggio
 35164 ;; This function uses a non-reentrant model
 35165 ;;
 35166                           
 35167                           	psect	text102
 35168  0088EA                     __ptext102:
 35169                           	opt stack 0
 35170  0088EA                     _copy_array:
 35171                           	opt stack 17
 35172                           
 35173                           ;arpeggio.c: 210: if(NUM_NOTES_PRESSED == 0){return;}
 35174                           
 35175                           ; BSR set to: 0
 35176                           ;incstack = 0
 35177  0088EA  0100               	movlb	0	; () banked
 35178  0088EC  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35179  0088EE  B4D8               	btfsc	status,2,c
 35180  0088F0  0012               	return	
 35181                           
 35182                           ; BSR set to: 0
 35183                           ;arpeggio.c: 213: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 35184                           
 35185                           ; BSR set to: 0
 35186                           
 35187                           ; BSR set to: 0
 35188  0088F2  0E00               	movlw	0
 35189  0088F4  6F60               	movwf	copy_array@i& (0+255),b
 35190  0088F6  D025               	goto	l5257
 35191  0088F8                     
 35192                           ; BSR set to: 0
 35193                           ;arpeggio.c: 214: ARPEGGIO_SORTED[i] = ARPEGGIO[i];
 35194                           
 35195                           ; BSR set to: 0
 35196  0088F8  5160               	movf	copy_array@i& (0+255),w,b
 35197  0088FA  0D01               	mullw	1
 35198  0088FC  0E72               	movlw	low _ARPEGGIO
 35199  0088FE  24F3               	addwf	prodl,w,c
 35200  008900  6ED9               	movwf	fsr2l,c
 35201  008902  0E01               	movlw	high _ARPEGGIO
 35202  008904  20F4               	addwfc	prodh,w,c
 35203  008906  6EDA               	movwf	fsr2h,c
 35204  008908  5160               	movf	copy_array@i& (0+255),w,b
 35205  00890A  0D01               	mullw	1
 35206  00890C  0E9C               	movlw	low _ARPEGGIO_SORTED
 35207  00890E  24F3               	addwf	prodl,w,c
 35208  008910  6EE1               	movwf	fsr1l,c
 35209  008912  0E02               	movlw	high _ARPEGGIO_SORTED
 35210  008914  20F4               	addwfc	prodh,w,c
 35211  008916  6EE2               	movwf	fsr1h,c
 35212  008918  CFDF FFE7          	movff	indf2,indf1
 35213                           
 35214                           ;arpeggio.c: 215: ARPEGGIO_RANDOM[i] = ARPEGGIO[i];
 35215  00891C  5160               	movf	copy_array@i& (0+255),w,b
 35216  00891E  0D01               	mullw	1
 35217  008920  0E72               	movlw	low _ARPEGGIO
 35218  008922  24F3               	addwf	prodl,w,c
 35219  008924  6ED9               	movwf	fsr2l,c
 35220  008926  0E01               	movlw	high _ARPEGGIO
 35221  008928  20F4               	addwfc	prodh,w,c
 35222  00892A  6EDA               	movwf	fsr2h,c
 35223  00892C  5160               	movf	copy_array@i& (0+255),w,b
 35224  00892E  0D01               	mullw	1
 35225  008930  0E8C               	movlw	low _ARPEGGIO_RANDOM
 35226  008932  24F3               	addwf	prodl,w,c
 35227  008934  6EE1               	movwf	fsr1l,c
 35228  008936  0E02               	movlw	high _ARPEGGIO_RANDOM
 35229  008938  20F4               	addwfc	prodh,w,c
 35230  00893A  6EE2               	movwf	fsr1h,c
 35231  00893C  CFDF FFE7          	movff	indf2,indf1
 35232                           
 35233                           ; BSR set to: 0
 35234  008940  2B60               	incf	copy_array@i& (0+255),f,b
 35235  008942                     l5257:
 35236                           
 35237                           ; BSR set to: 0
 35238                           
 35239                           ; BSR set to: 0
 35240  008942  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35241  008944  5D60               	subwf	copy_array@i& (0+255),w,b
 35242  008946  B0D8               	btfsc	status,0,c
 35243  008948  0012               	return	
 35244  00894A  D7D6               	goto	l5258
 35245  00894C                     __end_of_copy_array:
 35246                           	opt stack 0
 35247                           tblptru	equ	0xFF8
 35248                           tblptrh	equ	0xFF7
 35249                           tblptrl	equ	0xFF6
 35250                           tablat	equ	0xFF5
 35251                           prodh	equ	0xFF4
 35252                           prodl	equ	0xFF3
 35253                           intcon	equ	0xFF2
 35254                           intcon2	equ	0xFF1
 35255                           postinc0	equ	0xFEE
 35256                           wreg	equ	0xFE8
 35257                           indf1	equ	0xFE7
 35258                           postdec1	equ	0xFE5
 35259                           fsr1h	equ	0xFE2
 35260                           fsr1l	equ	0xFE1
 35261                           indf2	equ	0xFDF
 35262                           postinc2	equ	0xFDE
 35263                           plusw2	equ	0xFDB
 35264                           fsr2h	equ	0xFDA
 35265                           fsr2l	equ	0xFD9
 35266                           status	equ	0xFD8
 35267                           
 35268 ;; *************** function _resetArpeggio *****************
 35269 ;; Defined at:
 35270 ;;		line 160 in file "arpeggio.c"
 35271 ;; Parameters:    Size  Location     Type
 35272 ;;		None
 35273 ;; Auto vars:     Size  Location     Type
 35274 ;;		None
 35275 ;; Return value:  Size  Location     Type
 35276 ;;                  1    wreg      void 
 35277 ;; Registers used:
 35278 ;;		wreg, status,2, status,0
 35279 ;; Tracked objects:
 35280 ;;		On entry : 0/0
 35281 ;;		On exit  : 0/0
 35282 ;;		Unchanged: 0/0
 35283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35288 ;;Total ram usage:        0 bytes
 35289 ;; Hardware stack levels used:    1
 35290 ;; Hardware stack levels required when called:    5
 35291 ;; This function calls:
 35292 ;;		Nothing
 35293 ;; This function is called by:
 35294 ;;		_processOctave
 35295 ;;		_finish_arpeggio_setup
 35296 ;; This function uses a non-reentrant model
 35297 ;;
 35298                           
 35299                           	psect	text103
 35300  00912A                     __ptext103:
 35301                           	opt stack 0
 35302  00912A                     _resetArpeggio:
 35303                           	opt stack 18
 35304                           
 35305                           ;arpeggio.c: 162: which_note = 0;
 35306                           
 35307                           ; BSR set to: 0
 35308                           ;incstack = 0
 35309  00912A  0E00               	movlw	0
 35310  00912C  6E57               	movwf	_which_note,c
 35311                           
 35312                           ;arpeggio.c: 163: which_octave = 0;
 35313  00912E  0E00               	movlw	0
 35314  009130  6E56               	movwf	_which_octave,c
 35315                           
 35316                           ;arpeggio.c: 164: last_note = 0;
 35317  009132  0E00               	movlw	0
 35318  009134  0100               	movlb	0	; () banked
 35319  009136  6FE8               	movwf	_last_note& (0+255),b
 35320                           
 35321                           ;arpeggio.c: 165: last_octave = 0;
 35322  009138  0E00               	movlw	0
 35323  00913A  6E55               	movwf	_last_octave,c
 35324                           
 35325                           ; BSR set to: 0
 35326                           ;arpeggio.c: 166: overflow = 0;
 35327  00913C  9633               	bcf	_overflow/(0+8),_overflow& (0+7),c
 35328                           
 35329                           ; BSR set to: 0
 35330                           ;arpeggio.c: 167: octave_overflow = 0;
 35331  00913E  9433               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 35332                           
 35333                           ; BSR set to: 0
 35334                           ;arpeggio.c: 170: if(ARPEGGIO_TYPE == UP_DOWN && startingDirection == DOWN){
 35335  009140  0E02               	movlw	2
 35336  009142  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 35337  009144  A4D8               	btfss	status,2,c
 35338  009146  D005               	goto	l5234
 35339                           
 35340                           ; BSR set to: 0
 35341  009148  05E9               	decf	_startingDirection& (0+255),w,b
 35342  00914A  A4D8               	btfss	status,2,c
 35343  00914C  D002               	goto	l5234
 35344                           
 35345                           ; BSR set to: 0
 35346                           ;arpeggio.c: 171: ARPEGGIO_TYPE = DOWN_UP;
 35347  00914E  0E03               	movlw	3
 35348  009150  6FEA               	movwf	_ARPEGGIO_TYPE& (0+255),b
 35349  009152                     l5234:
 35350                           
 35351                           ; BSR set to: 0
 35352                           ;arpeggio.c: 172: }
 35353                           ;arpeggio.c: 174: if(ARPEGGIO_TYPE == DOWN_UP && startingDirection == UP){
 35354                           
 35355                           ; BSR set to: 0
 35356  009152  0E03               	movlw	3
 35357  009154  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 35358  009156  A4D8               	btfss	status,2,c
 35359  009158  0012               	return	
 35360                           
 35361                           ; BSR set to: 0
 35362  00915A  51E9               	movf	_startingDirection& (0+255),w,b
 35363  00915C  A4D8               	btfss	status,2,c
 35364  00915E  0012               	return	
 35365                           
 35366                           ; BSR set to: 0
 35367                           ;arpeggio.c: 175: ARPEGGIO_TYPE = UP_DOWN;
 35368  009160  0E02               	movlw	2
 35369  009162  6FEA               	movwf	_ARPEGGIO_TYPE& (0+255),b
 35370  009164  0012               	return	
 35371  009166                     __end_of_resetArpeggio:
 35372                           	opt stack 0
 35373                           tblptru	equ	0xFF8
 35374                           tblptrh	equ	0xFF7
 35375                           tblptrl	equ	0xFF6
 35376                           tablat	equ	0xFF5
 35377                           prodh	equ	0xFF4
 35378                           prodl	equ	0xFF3
 35379                           intcon	equ	0xFF2
 35380                           intcon2	equ	0xFF1
 35381                           postinc0	equ	0xFEE
 35382                           wreg	equ	0xFE8
 35383                           indf1	equ	0xFE7
 35384                           postdec1	equ	0xFE5
 35385                           fsr1h	equ	0xFE2
 35386                           fsr1l	equ	0xFE1
 35387                           indf2	equ	0xFDF
 35388                           postinc2	equ	0xFDE
 35389                           plusw2	equ	0xFDB
 35390                           fsr2h	equ	0xFDA
 35391                           fsr2l	equ	0xFD9
 35392                           status	equ	0xFD8
 35393                           
 35394 ;; *************** function _delete_notes_from_arpeggio *****************
 35395 ;; Defined at:
 35396 ;;		line 63 in file "arpeggio.c"
 35397 ;; Parameters:    Size  Location     Type
 35398 ;;  pitch           1    wreg     unsigned char 
 35399 ;; Auto vars:     Size  Location     Type
 35400 ;;  pitch           1    9[BANK0 ] unsigned char 
 35401 ;;  INDEX_TO_SHI    1   10[BANK0 ] char 
 35402 ;; Return value:  Size  Location     Type
 35403 ;;                  1    wreg      void 
 35404 ;; Registers used:
 35405 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35406 ;; Tracked objects:
 35407 ;;		On entry : 0/0
 35408 ;;		On exit  : 0/0
 35409 ;;		Unchanged: 0/0
 35410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35412 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35415 ;;Total ram usage:        2 bytes
 35416 ;; Hardware stack levels used:    1
 35417 ;; Hardware stack levels required when called:    6
 35418 ;; This function calls:
 35419 ;;		_findArrayIndex
 35420 ;;		_rotateArrayLeft
 35421 ;; This function is called by:
 35422 ;;		_playThisNotePentatonic
 35423 ;;		_playThisNote
 35424 ;;		_playThisNote8
 35425 ;; This function uses a non-reentrant model
 35426 ;;
 35427                           
 35428                           	psect	text104
 35429  0092E8                     __ptext104:
 35430                           	opt stack 0
 35431  0092E8                     _delete_notes_from_arpeggio:
 35432                           	opt stack 18
 35433                           
 35434                           ; BSR set to: 0
 35435                           ;incstack = 0
 35436                           ;delete_notes_from_arpeggio@pitch stored from wreg
 35437  0092E8  0100               	movlb	0	; () banked
 35438  0092EA  6F69               	movwf	delete_notes_from_arpeggio@pitch& (0+255),b
 35439                           
 35440                           ;arpeggio.c: 66: signed char INDEX_TO_SHIFT_LEFT_AT = findArrayIndex(pitch);
 35441  0092EC  0100               	movlb	0	; () banked
 35442  0092EE  5169               	movf	delete_notes_from_arpeggio@pitch& (0+255),w,b
 35443  0092F0  ECB3  F048         	call	_findArrayIndex
 35444  0092F4  0100               	movlb	0	; () banked
 35445  0092F6  6F6A               	movwf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),b
 35446                           
 35447                           ; BSR set to: 0
 35448                           ;arpeggio.c: 77: rotateArrayLeft(INDEX_TO_SHIFT_LEFT_AT);
 35449  0092F8  516A               	movf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),w,b
 35450  0092FA  ECE5  F041         	call	_rotateArrayLeft
 35451                           
 35452                           ;arpeggio.c: 80: if(NUM_NOTES_PRESSED > 0) {NUM_NOTES_PRESSED--;}
 35453  0092FE  0100               	movlb	0	; () banked
 35454  009300  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35455  009302  A4D8               	btfss	status,2,c
 35456                           
 35457                           ; BSR set to: 0
 35458  009304  07E5               	decf	_NUM_NOTES_PRESSED& (0+255),f,b
 35459                           
 35460                           ; BSR set to: 0
 35461                           ;arpeggio.c: 85: if(NUM_NOTES_PRESSED == 0) {ARRAY_INDEX = 0;}
 35462                           
 35463                           ; BSR set to: 0
 35464  009306  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35465  009308  A4D8               	btfss	status,2,c
 35466  00930A  D002               	goto	l5204
 35467                           
 35468                           ; BSR set to: 0
 35469  00930C  0E00               	movlw	0
 35470  00930E  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 35471  009310                     l5204:
 35472                           
 35473                           ; BSR set to: 0
 35474                           ;arpeggio.c: 88: if(ARRAY_INDEX > 0){ARRAY_INDEX--;}
 35475  009310  51E4               	movf	_ARRAY_INDEX& (0+255),w,b
 35476  009312  B4D8               	btfsc	status,2,c
 35477  009314  0012               	return	
 35478                           
 35479                           ; BSR set to: 0
 35480  009316  07E4               	decf	_ARRAY_INDEX& (0+255),f,b
 35481  009318  0012               	return	
 35482  00931A                     __end_of_delete_notes_from_arpeggio:
 35483                           	opt stack 0
 35484                           tblptru	equ	0xFF8
 35485                           tblptrh	equ	0xFF7
 35486                           tblptrl	equ	0xFF6
 35487                           tablat	equ	0xFF5
 35488                           prodh	equ	0xFF4
 35489                           prodl	equ	0xFF3
 35490                           intcon	equ	0xFF2
 35491                           intcon2	equ	0xFF1
 35492                           postinc0	equ	0xFEE
 35493                           wreg	equ	0xFE8
 35494                           indf1	equ	0xFE7
 35495                           postdec1	equ	0xFE5
 35496                           fsr1h	equ	0xFE2
 35497                           fsr1l	equ	0xFE1
 35498                           indf2	equ	0xFDF
 35499                           postinc2	equ	0xFDE
 35500                           plusw2	equ	0xFDB
 35501                           fsr2h	equ	0xFDA
 35502                           fsr2l	equ	0xFD9
 35503                           status	equ	0xFD8
 35504                           
 35505 ;; *************** function _findArrayIndex *****************
 35506 ;; Defined at:
 35507 ;;		line 514 in file "arpeggio.c"
 35508 ;; Parameters:    Size  Location     Type
 35509 ;;  pitch_of_key    1    wreg     unsigned char 
 35510 ;; Auto vars:     Size  Location     Type
 35511 ;;  pitch_of_key    1    1[BANK0 ] unsigned char 
 35512 ;;  i               1    2[BANK0 ] unsigned char 
 35513 ;; Return value:  Size  Location     Type
 35514 ;;                  1    wreg      char 
 35515 ;; Registers used:
 35516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 35517 ;; Tracked objects:
 35518 ;;		On entry : 0/0
 35519 ;;		On exit  : 0/0
 35520 ;;		Unchanged: 0/0
 35521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35523 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35524 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35525 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35526 ;;Total ram usage:        3 bytes
 35527 ;; Hardware stack levels used:    1
 35528 ;; Hardware stack levels required when called:    5
 35529 ;; This function calls:
 35530 ;;		Nothing
 35531 ;; This function is called by:
 35532 ;;		_delete_notes_from_arpeggio
 35533 ;; This function uses a non-reentrant model
 35534 ;;
 35535                           
 35536                           	psect	text105
 35537  009166                     __ptext105:
 35538                           	opt stack 0
 35539  009166                     _findArrayIndex:
 35540                           	opt stack 18
 35541                           
 35542                           ; BSR set to: 0
 35543                           ;incstack = 0
 35544                           ;findArrayIndex@pitch_of_key_release stored from wreg
 35545  009166  0100               	movlb	0	; () banked
 35546  009168  6F61               	movwf	findArrayIndex@pitch_of_key_release& (0+255),b
 35547                           
 35548                           ;arpeggio.c: 516: for (unsigned char i=0;i<MAX_NUM_NOTES;i++){
 35549  00916A  0E00               	movlw	0
 35550  00916C  0100               	movlb	0	; () banked
 35551  00916E  6F62               	movwf	findArrayIndex@i& (0+255),b
 35552  009170                     l16395:
 35553                           
 35554                           ; BSR set to: 0
 35555  009170  0E9D               	movlw	low _MAX_NUM_NOTES
 35556  009172  6EF6               	movwf	tblptrl,c
 35557  009174                     	if	1	;There is more than 1 active tblptr byte
 35558  009174  0EF3               	movlw	high _MAX_NUM_NOTES
 35559  009176  6EF7               	movwf	tblptrh,c
 35560  009178                     	endif
 35561  009178                     	if	0	;There are less than 3 active tblptr bytes
 35562  009178                     	endif
 35563  009178  0009               	tblrd		*+
 35564  00917A  50F5               	movf	tablat,w,c
 35565  00917C  5D62               	subwf	findArrayIndex@i& (0+255),w,b
 35566  00917E  B0D8               	btfsc	status,0,c
 35567  009180  0012               	return	
 35568                           
 35569                           ; BSR set to: 0
 35570                           ;arpeggio.c: 517: if(ARPEGGIO[i] == pitch_of_key_release){return i;}
 35571                           
 35572                           ; BSR set to: 0
 35573                           
 35574                           ; BSR set to: 0
 35575  009182  5162               	movf	findArrayIndex@i& (0+255),w,b
 35576  009184  0D01               	mullw	1
 35577  009186  0E72               	movlw	low _ARPEGGIO
 35578  009188  24F3               	addwf	prodl,w,c
 35579  00918A  6ED9               	movwf	fsr2l,c
 35580  00918C  0E01               	movlw	high _ARPEGGIO
 35581  00918E  20F4               	addwfc	prodh,w,c
 35582  009190  6EDA               	movwf	fsr2h,c
 35583  009192  5161               	movf	findArrayIndex@pitch_of_key_release& (0+255),w,b
 35584  009194  18DE               	xorwf	postinc2,w,c
 35585  009196  A4D8               	btfss	status,2,c
 35586  009198  D002               	goto	l16405
 35587                           
 35588                           ; BSR set to: 0
 35589  00919A  5162               	movf	findArrayIndex@i& (0+255),w,b
 35590                           
 35591                           ; BSR set to: 0
 35592  00919C  0012               	return	
 35593  00919E                     l16405:
 35594                           
 35595                           ; BSR set to: 0
 35596                           
 35597                           ; BSR set to: 0
 35598                           
 35599                           ;arpeggio.c: 518: else{;}
 35600                           
 35601                           ; BSR set to: 0
 35602                           
 35603                           ; BSR set to: 0
 35604  00919E  2B62               	incf	findArrayIndex@i& (0+255),f,b
 35605  0091A0  D7E7               	goto	l16395
 35606  0091A2                     __end_of_findArrayIndex:
 35607                           	opt stack 0
 35608                           tblptru	equ	0xFF8
 35609                           tblptrh	equ	0xFF7
 35610                           tblptrl	equ	0xFF6
 35611                           tablat	equ	0xFF5
 35612                           prodh	equ	0xFF4
 35613                           prodl	equ	0xFF3
 35614                           intcon	equ	0xFF2
 35615                           intcon2	equ	0xFF1
 35616                           postinc0	equ	0xFEE
 35617                           wreg	equ	0xFE8
 35618                           indf1	equ	0xFE7
 35619                           postdec1	equ	0xFE5
 35620                           fsr1h	equ	0xFE2
 35621                           fsr1l	equ	0xFE1
 35622                           indf2	equ	0xFDF
 35623                           postinc2	equ	0xFDE
 35624                           plusw2	equ	0xFDB
 35625                           fsr2h	equ	0xFDA
 35626                           fsr2l	equ	0xFD9
 35627                           status	equ	0xFD8
 35628                           
 35629 ;; *************** function _add_notes_to_arpeggio *****************
 35630 ;; Defined at:
 35631 ;;		line 39 in file "arpeggio.c"
 35632 ;; Parameters:    Size  Location     Type
 35633 ;;  pitch           1    wreg     unsigned char 
 35634 ;; Auto vars:     Size  Location     Type
 35635 ;;  pitch           1   16[BANK0 ] unsigned char 
 35636 ;; Return value:  Size  Location     Type
 35637 ;;                  1    wreg      void 
 35638 ;; Registers used:
 35639 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35640 ;; Tracked objects:
 35641 ;;		On entry : 0/0
 35642 ;;		On exit  : 0/0
 35643 ;;		Unchanged: 0/0
 35644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35647 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35648 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35649 ;;Total ram usage:        8 bytes
 35650 ;; Hardware stack levels used:    1
 35651 ;; Hardware stack levels required when called:    6
 35652 ;; This function calls:
 35653 ;;		_rotateArrayLeft
 35654 ;; This function is called by:
 35655 ;;		_playThisNotePentatonic
 35656 ;;		_playThisNote
 35657 ;;		_playThisNote8
 35658 ;; This function uses a non-reentrant model
 35659 ;;
 35660                           
 35661                           	psect	text106
 35662  00651E                     __ptext106:
 35663                           	opt stack 0
 35664  00651E                     _add_notes_to_arpeggio:
 35665                           	opt stack 18
 35666                           
 35667                           ; BSR set to: 0
 35668                           ;incstack = 0
 35669                           ;add_notes_to_arpeggio@pitch stored from wreg
 35670  00651E  0100               	movlb	0	; () banked
 35671  006520  6F70               	movwf	add_notes_to_arpeggio@pitch& (0+255),b
 35672                           
 35673                           ;arpeggio.c: 43: if(ARRAY_INDEX > (MAX_NUM_NOTES - 1)){
 35674  006522  0100               	movlb	0	; () banked
 35675  006524  51E4               	movf	_ARRAY_INDEX& (0+255),w,b
 35676  006526  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 35677  006528  6B6A               	clrf	(??_add_notes_to_arpeggio+1)& (0+255),b
 35678  00652A  0EFF               	movlw	255
 35679  00652C  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 35680  00652E  0EFF               	movlw	255
 35681  006530  6F6C               	movwf	(??_add_notes_to_arpeggio+3)& (0+255),b
 35682  006532  0E9D               	movlw	low _MAX_NUM_NOTES
 35683  006534  6EF6               	movwf	tblptrl,c
 35684  006536                     	if	1	;There is more than 1 active tblptr byte
 35685  006536  0EF3               	movlw	high _MAX_NUM_NOTES
 35686  006538  6EF7               	movwf	tblptrh,c
 35687  00653A                     	endif
 35688  00653A                     	if	0	;There are less than 3 active tblptr bytes
 35689  00653A                     	endif
 35690  00653A  0008               	tblrd		*
 35691  00653C  50F5               	movf	tablat,w,c
 35692  00653E  6F6D               	movwf	(??_add_notes_to_arpeggio+4)& (0+255),b
 35693  006540  6B6E               	clrf	(??_add_notes_to_arpeggio+5)& (0+255),b
 35694  006542  516B               	movf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 35695  006544  276D               	addwf	(??_add_notes_to_arpeggio+4)& (0+255),f,b
 35696  006546  516C               	movf	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 35697  006548  236E               	addwfc	(??_add_notes_to_arpeggio+5)& (0+255),f,b
 35698  00654A  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 35699  00654C  5D6D               	subwf	(??_add_notes_to_arpeggio+4)& (0+255),w,b
 35700  00654E  516E               	movf	(??_add_notes_to_arpeggio+5)& (0+255),w,b
 35701  006550  0A80               	xorlw	128
 35702  006552  6F6F               	movwf	(??_add_notes_to_arpeggio+6)& (0+255),b
 35703  006554  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 35704  006556  0A80               	xorlw	128
 35705  006558  596F               	subwfb	(??_add_notes_to_arpeggio+6)& (0+255),w,b
 35706  00655A  B0D8               	btfsc	status,0,c
 35707  00655C  D025               	goto	l5197
 35708                           
 35709                           ; BSR set to: 0
 35710                           ;arpeggio.c: 44: ARRAY_INDEX = MAX_NUM_NOTES - 1;
 35711  00655E  0E9D               	movlw	low _MAX_NUM_NOTES
 35712  006560  6EF6               	movwf	tblptrl,c
 35713  006562                     	if	1	;There is more than 1 active tblptr byte
 35714  006562  0EF3               	movlw	high _MAX_NUM_NOTES
 35715  006564  6EF7               	movwf	tblptrh,c
 35716  006566                     	endif
 35717  006566                     	if	0	;There are less than 3 active tblptr bytes
 35718  006566                     	endif
 35719  006566  0008               	tblrd		*
 35720  006568  CFF5 F069          	movff	tablat,??_add_notes_to_arpeggio
 35721  00656C  0569               	decf	??_add_notes_to_arpeggio& (0+255),w,b
 35722  00656E  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 35723                           
 35724                           ; BSR set to: 0
 35725                           ;arpeggio.c: 45: rotateArrayLeft(0);
 35726  006570  0E00               	movlw	0
 35727  006572  ECE5  F041         	call	_rotateArrayLeft
 35728                           
 35729                           ;arpeggio.c: 46: ARPEGGIO[MAX_NUM_NOTES - 1] = pitch;
 35730  006576  0EFF               	movlw	255
 35731  006578  0100               	movlb	0	; () banked
 35732  00657A  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 35733  00657C  0EFF               	movlw	255
 35734  00657E  6F6A               	movwf	(??_add_notes_to_arpeggio+1)& (0+255),b
 35735  006580  0E9D               	movlw	low _MAX_NUM_NOTES
 35736  006582  6EF6               	movwf	tblptrl,c
 35737  006584                     	if	1	;There is more than 1 active tblptr byte
 35738  006584  0EF3               	movlw	high _MAX_NUM_NOTES
 35739  006586  6EF7               	movwf	tblptrh,c
 35740  006588                     	endif
 35741  006588                     	if	0	;There are less than 3 active tblptr bytes
 35742  006588                     	endif
 35743  006588  0008               	tblrd		*
 35744  00658A  50F5               	movf	tablat,w,c
 35745  00658C  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 35746  00658E  6B6C               	clrf	(??_add_notes_to_arpeggio+3)& (0+255),b
 35747  006590  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 35748  006592  276B               	addwf	(??_add_notes_to_arpeggio+2)& (0+255),f,b
 35749  006594  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 35750  006596  236C               	addwfc	(??_add_notes_to_arpeggio+3)& (0+255),f,b
 35751  006598  0E72               	movlw	low _ARPEGGIO
 35752  00659A  256B               	addwf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 35753  00659C  6ED9               	movwf	fsr2l,c
 35754  00659E  0E01               	movlw	high _ARPEGGIO
 35755  0065A0  216C               	addwfc	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 35756  0065A2  6EDA               	movwf	fsr2h,c
 35757  0065A4  C070  FFDF         	movff	add_notes_to_arpeggio@pitch,indf2
 35758  0065A8                     l5197:
 35759                           
 35760                           ; BSR set to: 0
 35761                           ;arpeggio.c: 47: }
 35762                           ;arpeggio.c: 49: if(ARRAY_INDEX <= (MAX_NUM_NOTES - 1)){
 35763                           
 35764                           ; BSR set to: 0
 35765  0065A8  51E4               	movf	_ARRAY_INDEX& (0+255),w,b
 35766  0065AA  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 35767  0065AC  6B6A               	clrf	(??_add_notes_to_arpeggio+1)& (0+255),b
 35768  0065AE  0EFF               	movlw	255
 35769  0065B0  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 35770  0065B2  0EFF               	movlw	255
 35771  0065B4  6F6C               	movwf	(??_add_notes_to_arpeggio+3)& (0+255),b
 35772  0065B6  0E9D               	movlw	low _MAX_NUM_NOTES
 35773  0065B8  6EF6               	movwf	tblptrl,c
 35774  0065BA                     	if	1	;There is more than 1 active tblptr byte
 35775  0065BA  0EF3               	movlw	high _MAX_NUM_NOTES
 35776  0065BC  6EF7               	movwf	tblptrh,c
 35777  0065BE                     	endif
 35778  0065BE                     	if	0	;There are less than 3 active tblptr bytes
 35779  0065BE                     	endif
 35780  0065BE  0008               	tblrd		*
 35781  0065C0  50F5               	movf	tablat,w,c
 35782  0065C2  6F6D               	movwf	(??_add_notes_to_arpeggio+4)& (0+255),b
 35783  0065C4  6B6E               	clrf	(??_add_notes_to_arpeggio+5)& (0+255),b
 35784  0065C6  516B               	movf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 35785  0065C8  276D               	addwf	(??_add_notes_to_arpeggio+4)& (0+255),f,b
 35786  0065CA  516C               	movf	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 35787  0065CC  236E               	addwfc	(??_add_notes_to_arpeggio+5)& (0+255),f,b
 35788  0065CE  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 35789  0065D0  5D6D               	subwf	(??_add_notes_to_arpeggio+4)& (0+255),w,b
 35790  0065D2  516E               	movf	(??_add_notes_to_arpeggio+5)& (0+255),w,b
 35791  0065D4  0A80               	xorlw	128
 35792  0065D6  6F6F               	movwf	(??_add_notes_to_arpeggio+6)& (0+255),b
 35793  0065D8  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 35794  0065DA  0A80               	xorlw	128
 35795  0065DC  596F               	subwfb	(??_add_notes_to_arpeggio+6)& (0+255),w,b
 35796  0065DE  A0D8               	btfss	status,0,c
 35797  0065E0  D00B               	goto	l5198
 35798                           
 35799                           ; BSR set to: 0
 35800                           ;arpeggio.c: 51: ARPEGGIO[ARRAY_INDEX] = pitch;
 35801  0065E2  51E4               	movf	_ARRAY_INDEX& (0+255),w,b
 35802  0065E4  0D01               	mullw	1
 35803  0065E6  0E72               	movlw	low _ARPEGGIO
 35804  0065E8  24F3               	addwf	prodl,w,c
 35805  0065EA  6ED9               	movwf	fsr2l,c
 35806  0065EC  0E01               	movlw	high _ARPEGGIO
 35807  0065EE  20F4               	addwfc	prodh,w,c
 35808  0065F0  6EDA               	movwf	fsr2h,c
 35809  0065F2  C070  FFDF         	movff	add_notes_to_arpeggio@pitch,indf2
 35810                           
 35811                           ; BSR set to: 0
 35812                           ;arpeggio.c: 53: ARRAY_INDEX++;
 35813  0065F6  2BE4               	incf	_ARRAY_INDEX& (0+255),f,b
 35814  0065F8                     l5198:
 35815                           
 35816                           ; BSR set to: 0
 35817                           ;arpeggio.c: 54: }
 35818                           ;arpeggio.c: 57: NUM_NOTES_PRESSED++;
 35819                           
 35820                           ; BSR set to: 0
 35821  0065F8  2BE5               	incf	_NUM_NOTES_PRESSED& (0+255),f,b
 35822                           
 35823                           ; BSR set to: 0
 35824                           ;arpeggio.c: 59: if(NUM_NOTES_PRESSED > MAX_NUM_NOTES){NUM_NOTES_PRESSED = MAX_NUM_NOTES
      +                          ;}
 35825  0065FA  0E9D               	movlw	low _MAX_NUM_NOTES
 35826  0065FC  6EF6               	movwf	tblptrl,c
 35827  0065FE                     	if	1	;There is more than 1 active tblptr byte
 35828  0065FE  0EF3               	movlw	high _MAX_NUM_NOTES
 35829  006600  6EF7               	movwf	tblptrh,c
 35830  006602                     	endif
 35831  006602                     	if	0	;There are less than 3 active tblptr bytes
 35832  006602                     	endif
 35833  006602  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35834  006604  0009               	tblrd		*+
 35835  006606  5CF5               	subwf	tablat,w,c
 35836  006608  B0D8               	btfsc	status,0,c
 35837  00660A  0012               	return	
 35838                           
 35839                           ; BSR set to: 0
 35840  00660C  0E9D               	movlw	low _MAX_NUM_NOTES
 35841  00660E  6EF6               	movwf	tblptrl,c
 35842  006610                     	if	1	;There is more than 1 active tblptr byte
 35843  006610  0EF3               	movlw	high _MAX_NUM_NOTES
 35844  006612  6EF7               	movwf	tblptrh,c
 35845  006614                     	endif
 35846  006614                     	if	0	;There are less than 3 active tblptr bytes
 35847  006614                     	endif
 35848  006614  0008               	tblrd		*
 35849  006616  CFF5 F0E5          	movff	tablat,_NUM_NOTES_PRESSED
 35850  00661A  0012               	return	
 35851  00661C                     __end_of_add_notes_to_arpeggio:
 35852                           	opt stack 0
 35853                           tblptru	equ	0xFF8
 35854                           tblptrh	equ	0xFF7
 35855                           tblptrl	equ	0xFF6
 35856                           tablat	equ	0xFF5
 35857                           prodh	equ	0xFF4
 35858                           prodl	equ	0xFF3
 35859                           intcon	equ	0xFF2
 35860                           intcon2	equ	0xFF1
 35861                           postinc0	equ	0xFEE
 35862                           wreg	equ	0xFE8
 35863                           indf1	equ	0xFE7
 35864                           postdec1	equ	0xFE5
 35865                           fsr1h	equ	0xFE2
 35866                           fsr1l	equ	0xFE1
 35867                           indf2	equ	0xFDF
 35868                           postinc2	equ	0xFDE
 35869                           plusw2	equ	0xFDB
 35870                           fsr2h	equ	0xFDA
 35871                           fsr2l	equ	0xFD9
 35872                           status	equ	0xFD8
 35873                           
 35874 ;; *************** function _rotateArrayLeft *****************
 35875 ;; Defined at:
 35876 ;;		line 582 in file "arpeggio.c"
 35877 ;; Parameters:    Size  Location     Type
 35878 ;;  array_index     1    wreg     unsigned char 
 35879 ;; Auto vars:     Size  Location     Type
 35880 ;;  array_index     1    7[BANK0 ] unsigned char 
 35881 ;;  i               1    8[BANK0 ] unsigned char 
 35882 ;; Return value:  Size  Location     Type
 35883 ;;                  1    wreg      void 
 35884 ;; Registers used:
 35885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 35886 ;; Tracked objects:
 35887 ;;		On entry : 0/0
 35888 ;;		On exit  : 0/0
 35889 ;;		Unchanged: 0/0
 35890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35892 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35893 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35894 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35895 ;;Total ram usage:        9 bytes
 35896 ;; Hardware stack levels used:    1
 35897 ;; Hardware stack levels required when called:    5
 35898 ;; This function calls:
 35899 ;;		Nothing
 35900 ;; This function is called by:
 35901 ;;		_add_notes_to_arpeggio
 35902 ;;		_delete_notes_from_arpeggio
 35903 ;; This function uses a non-reentrant model
 35904 ;;
 35905                           
 35906                           	psect	text107
 35907  0083CA                     __ptext107:
 35908                           	opt stack 0
 35909  0083CA                     _rotateArrayLeft:
 35910                           	opt stack 18
 35911                           
 35912                           ; BSR set to: 0
 35913                           ;incstack = 0
 35914                           ;rotateArrayLeft@array_index stored from wreg
 35915  0083CA  0100               	movlb	0	; () banked
 35916  0083CC  6F67               	movwf	rotateArrayLeft@array_index& (0+255),b
 35917                           
 35918                           ;arpeggio.c: 605: for(unsigned char i=array_index; i < (MAX_NUM_NOTES - 1) ;i++)
 35919  0083CE  C067  F068         	movff	rotateArrayLeft@array_index,rotateArrayLeft@i
 35920  0083D2  0EFF               	movlw	255
 35921  0083D4  0100               	movlb	0	; () banked
 35922  0083D6  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 35923  0083D8  0EFF               	movlw	255
 35924  0083DA  6F61               	movwf	(??_rotateArrayLeft+1)& (0+255),b
 35925  0083DC  0E9D               	movlw	low _MAX_NUM_NOTES
 35926  0083DE  6EF6               	movwf	tblptrl,c
 35927  0083E0                     	if	1	;There is more than 1 active tblptr byte
 35928  0083E0  0EF3               	movlw	high _MAX_NUM_NOTES
 35929  0083E2  6EF7               	movwf	tblptrh,c
 35930  0083E4                     	endif
 35931  0083E4                     	if	0	;There are less than 3 active tblptr bytes
 35932  0083E4                     	endif
 35933  0083E4  0008               	tblrd		*
 35934  0083E6  50F5               	movf	tablat,w,c
 35935  0083E8  6F62               	movwf	(??_rotateArrayLeft+2)& (0+255),b
 35936  0083EA  6B63               	clrf	(??_rotateArrayLeft+3)& (0+255),b
 35937  0083EC  5160               	movf	??_rotateArrayLeft& (0+255),w,b
 35938  0083EE  2762               	addwf	(??_rotateArrayLeft+2)& (0+255),f,b
 35939  0083F0  5161               	movf	(??_rotateArrayLeft+1)& (0+255),w,b
 35940  0083F2  2363               	addwfc	(??_rotateArrayLeft+3)& (0+255),f,b
 35941  0083F4  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 35942  0083F6  6F64               	movwf	(??_rotateArrayLeft+4)& (0+255),b
 35943  0083F8  6B65               	clrf	(??_rotateArrayLeft+5)& (0+255),b
 35944  0083FA  5162               	movf	(??_rotateArrayLeft+2)& (0+255),w,b
 35945  0083FC  5D64               	subwf	(??_rotateArrayLeft+4)& (0+255),w,b
 35946  0083FE  5165               	movf	(??_rotateArrayLeft+5)& (0+255),w,b
 35947  008400  0A80               	xorlw	128
 35948  008402  6F66               	movwf	(??_rotateArrayLeft+6)& (0+255),b
 35949  008404  5163               	movf	(??_rotateArrayLeft+3)& (0+255),w,b
 35950  008406  0A80               	xorlw	128
 35951  008408  5966               	subwfb	(??_rotateArrayLeft+6)& (0+255),w,b
 35952  00840A  B0D8               	btfsc	status,0,c
 35953  00840C  0012               	return	
 35954                           
 35955                           ; BSR set to: 0
 35956                           ;arpeggio.c: 606: {
 35957                           ;arpeggio.c: 607: ARPEGGIO[i]=ARPEGGIO[i+1];
 35958                           
 35959                           ; BSR set to: 0
 35960                           
 35961                           ; BSR set to: 0
 35962  00840E  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 35963  008410  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 35964  008412  6B61               	clrf	(??_rotateArrayLeft+1)& (0+255),b
 35965  008414  0E01               	movlw	1
 35966  008416  2760               	addwf	??_rotateArrayLeft& (0+255),f,b
 35967  008418  0E00               	movlw	0
 35968  00841A  2361               	addwfc	(??_rotateArrayLeft+1)& (0+255),f,b
 35969  00841C  0E72               	movlw	low _ARPEGGIO
 35970  00841E  2560               	addwf	??_rotateArrayLeft& (0+255),w,b
 35971  008420  6ED9               	movwf	fsr2l,c
 35972  008422  0E01               	movlw	high _ARPEGGIO
 35973  008424  2161               	addwfc	(??_rotateArrayLeft+1)& (0+255),w,b
 35974  008426  6EDA               	movwf	fsr2h,c
 35975  008428  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 35976  00842A  0D01               	mullw	1
 35977  00842C  0E72               	movlw	low _ARPEGGIO
 35978  00842E  24F3               	addwf	prodl,w,c
 35979  008430  6EE1               	movwf	fsr1l,c
 35980  008432  0E01               	movlw	high _ARPEGGIO
 35981  008434  20F4               	addwfc	prodh,w,c
 35982  008436  6EE2               	movwf	fsr1h,c
 35983  008438  CFDF FFE7          	movff	indf2,indf1
 35984                           
 35985                           ; BSR set to: 0
 35986  00843C  2B68               	incf	rotateArrayLeft@i& (0+255),f,b
 35987                           
 35988                           ; BSR set to: 0
 35989  00843E  0EFF               	movlw	255
 35990  008440  D7CA               	goto	L20
 35991  008442                     __end_of_rotateArrayLeft:
 35992                           	opt stack 0
 35993                           tblptru	equ	0xFF8
 35994                           tblptrh	equ	0xFF7
 35995                           tblptrl	equ	0xFF6
 35996                           tablat	equ	0xFF5
 35997                           prodh	equ	0xFF4
 35998                           prodl	equ	0xFF3
 35999                           intcon	equ	0xFF2
 36000                           intcon2	equ	0xFF1
 36001                           postinc0	equ	0xFEE
 36002                           wreg	equ	0xFE8
 36003                           indf1	equ	0xFE7
 36004                           postdec1	equ	0xFE5
 36005                           fsr1h	equ	0xFE2
 36006                           fsr1l	equ	0xFE1
 36007                           indf2	equ	0xFDF
 36008                           postinc2	equ	0xFDE
 36009                           plusw2	equ	0xFDB
 36010                           fsr2h	equ	0xFDA
 36011                           fsr2l	equ	0xFD9
 36012                           status	equ	0xFD8
 36013                           
 36014 ;; *************** function _processDrumpad *****************
 36015 ;; Defined at:
 36016 ;;		line 21 in file "drum.c"
 36017 ;; Parameters:    Size  Location     Type
 36018 ;;		None
 36019 ;; Auto vars:     Size  Location     Type
 36020 ;;		None
 36021 ;; Return value:  Size  Location     Type
 36022 ;;                  1    wreg      void 
 36023 ;; Registers used:
 36024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36025 ;; Tracked objects:
 36026 ;;		On entry : 0/0
 36027 ;;		On exit  : 0/0
 36028 ;;		Unchanged: 0/0
 36029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36034 ;;Total ram usage:        0 bytes
 36035 ;; Hardware stack levels used:    1
 36036 ;; Hardware stack levels required when called:    8
 36037 ;; This function calls:
 36038 ;;		_controlChange
 36039 ;;		_noteOffDrum
 36040 ;;		_noteOnDrum
 36041 ;; This function is called by:
 36042 ;;		_digitalInputs
 36043 ;; This function uses a non-reentrant model
 36044 ;;
 36045                           
 36046                           	psect	text108
 36047  001C66                     __ptext108:
 36048                           	opt stack 0
 36049  001C66                     _processDrumpad:
 36050                           	opt stack 21
 36051                           
 36052                           ;drum.c: 25: if((drum_button_state_now & 0x01) && !(button_state_now & 0x08000000) && !d
      +                          rum.SW1){
 36053                           
 36054                           ; BSR set to: 0
 36055                           ;incstack = 0
 36056  001C66  0100               	movlb	0	; () banked
 36057  001C68  B1EE               	btfsc	_drum_button_state_now& (0+255),0,b
 36058                           
 36059                           ; BSR set to: 0
 36060  001C6A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36061  001C6C  D033               	goto	l2297
 36062                           
 36063                           ; BSR set to: 0
 36064  001C6E  B1EC               	btfsc	_drum& (0+255),0,b
 36065  001C70  D031               	goto	l2297
 36066                           
 36067                           ; BSR set to: 0
 36068                           ;drum.c: 26: drum.SW1 = 1;
 36069  001C72  81EC               	bsf	_drum& (0+255),0,b
 36070                           
 36071                           ;drum.c: 27: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[0],velocity);}
 36072  001C74  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36073  001C76  D007               	goto	l2298
 36074                           
 36075                           ; BSR set to: 0
 36076  001C78  C1DF  F06E         	movff	_DRUM_NOTE,noteOnDrum@pitch
 36077  001C7C  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36078  001C80  51FE               	movf	_drumchannel& (0+255),w,b
 36079  001C82  EC72  F046         	call	_noteOnDrum
 36080  001C86                     l2298:
 36081                           
 36082                           ;drum.c: 28: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          127);}
 36083  001C86  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36084  001C88  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36085  001C8A  D008               	goto	l2299
 36086  001C8C  C1D7  F06B         	movff	_DRUM_CC,controlChange@controllerNumber
 36087  001C90  0E7F               	movlw	127
 36088  001C92  0100               	movlb	0	; () banked
 36089  001C94  6F6C               	movwf	controlChange@value& (0+255),b
 36090  001C96  51F6               	movf	_channel& (0+255),w,b
 36091  001C98  EC41  F049         	call	_controlChange
 36092  001C9C                     l2299:
 36093                           
 36094                           ;drum.c: 29: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 0) {controlChan
      +                          ge(channel,DRUM_CC[0], 127);}
 36095  001C9C  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36096  001C9E  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36097  001CA0  D00A               	goto	l2300
 36098  001CA2  0100               	movlb	0	; () banked
 36099  001CA4  B1E3               	btfsc	_toggle_state& (0+255),0,b
 36100  001CA6  D007               	goto	l2300
 36101                           
 36102                           ; BSR set to: 0
 36103  001CA8  C1D7  F06B         	movff	_DRUM_CC,controlChange@controllerNumber
 36104  001CAC  0E7F               	movlw	127
 36105  001CAE  6F6C               	movwf	controlChange@value& (0+255),b
 36106  001CB0  51F6               	movf	_channel& (0+255),w,b
 36107  001CB2  EC41  F049         	call	_controlChange
 36108  001CB6                     l2300:
 36109                           
 36110                           ;drum.c: 30: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 1) {controlChan
      +                          ge(channel,DRUM_CC[0], 0);}
 36111  001CB6  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36112  001CB8  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36113  001CBA  D00A               	goto	l2301
 36114  001CBC  0100               	movlb	0	; () banked
 36115  001CBE  A1E3               	btfss	_toggle_state& (0+255),0,b
 36116  001CC0  D007               	goto	l2301
 36117                           
 36118                           ; BSR set to: 0
 36119  001CC2  C1D7  F06B         	movff	_DRUM_CC,controlChange@controllerNumber
 36120  001CC6  0E00               	movlw	0
 36121  001CC8  6F6C               	movwf	controlChange@value& (0+255),b
 36122  001CCA  51F6               	movf	_channel& (0+255),w,b
 36123  001CCC  EC41  F049         	call	_controlChange
 36124  001CD0                     l2301:
 36125                           
 36126                           ;drum.c: 31: toggle_state.T1 ^= 1;
 36127  001CD0  0100               	movlb	0	; () banked
 36128  001CD2  71E3               	btg	_toggle_state& (0+255),0,b
 36129  001CD4                     l2297:
 36130                           
 36131                           ; BSR set to: 0
 36132                           ;drum.c: 32: }
 36133                           ;drum.c: 33: if(((drum_button_state_now) & 0x02) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW2) {
 36134                           
 36135                           ; BSR set to: 0
 36136  001CD4  B3EE               	btfsc	_drum_button_state_now& (0+255),1,b
 36137                           
 36138                           ; BSR set to: 0
 36139  001CD6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36140  001CD8  D033               	goto	l2302
 36141                           
 36142                           ; BSR set to: 0
 36143  001CDA  B3EC               	btfsc	_drum& (0+255),1,b
 36144  001CDC  D031               	goto	l2302
 36145                           
 36146                           ; BSR set to: 0
 36147                           ;drum.c: 34: drum.SW2 = 1;
 36148  001CDE  83EC               	bsf	_drum& (0+255),1,b
 36149                           
 36150                           ;drum.c: 35: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[1],velocity);}
 36151  001CE0  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36152  001CE2  D007               	goto	l2303
 36153                           
 36154                           ; BSR set to: 0
 36155  001CE4  C1E0  F06E         	movff	_DRUM_NOTE+1,noteOnDrum@pitch
 36156  001CE8  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36157  001CEC  51FE               	movf	_drumchannel& (0+255),w,b
 36158  001CEE  EC72  F046         	call	_noteOnDrum
 36159  001CF2                     l2303:
 36160                           
 36161                           ;drum.c: 36: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          127);}
 36162  001CF2  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36163  001CF4  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36164  001CF6  D008               	goto	l2304
 36165  001CF8  C1D8  F06B         	movff	_DRUM_CC+1,controlChange@controllerNumber
 36166  001CFC  0E7F               	movlw	127
 36167  001CFE  0100               	movlb	0	; () banked
 36168  001D00  6F6C               	movwf	controlChange@value& (0+255),b
 36169  001D02  51F6               	movf	_channel& (0+255),w,b
 36170  001D04  EC41  F049         	call	_controlChange
 36171  001D08                     l2304:
 36172                           
 36173                           ;drum.c: 37: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 0) {controlChan
      +                          ge(channel,DRUM_CC[1], 127);}
 36174  001D08  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36175  001D0A  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36176  001D0C  D00A               	goto	l2305
 36177  001D0E  0100               	movlb	0	; () banked
 36178  001D10  B3E3               	btfsc	_toggle_state& (0+255),1,b
 36179  001D12  D007               	goto	l2305
 36180                           
 36181                           ; BSR set to: 0
 36182  001D14  C1D8  F06B         	movff	_DRUM_CC+1,controlChange@controllerNumber
 36183  001D18  0E7F               	movlw	127
 36184  001D1A  6F6C               	movwf	controlChange@value& (0+255),b
 36185  001D1C  51F6               	movf	_channel& (0+255),w,b
 36186  001D1E  EC41  F049         	call	_controlChange
 36187  001D22                     l2305:
 36188                           
 36189                           ;drum.c: 38: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 1) {controlChan
      +                          ge(channel,DRUM_CC[1], 0);}
 36190  001D22  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36191  001D24  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36192  001D26  D00A               	goto	l2306
 36193  001D28  0100               	movlb	0	; () banked
 36194  001D2A  A3E3               	btfss	_toggle_state& (0+255),1,b
 36195  001D2C  D007               	goto	l2306
 36196                           
 36197                           ; BSR set to: 0
 36198  001D2E  C1D8  F06B         	movff	_DRUM_CC+1,controlChange@controllerNumber
 36199  001D32  0E00               	movlw	0
 36200  001D34  6F6C               	movwf	controlChange@value& (0+255),b
 36201  001D36  51F6               	movf	_channel& (0+255),w,b
 36202  001D38  EC41  F049         	call	_controlChange
 36203  001D3C                     l2306:
 36204                           
 36205                           ;drum.c: 39: toggle_state.T2 ^= 1;
 36206  001D3C  0100               	movlb	0	; () banked
 36207  001D3E  73E3               	btg	_toggle_state& (0+255),1,b
 36208  001D40                     l2302:
 36209                           
 36210                           ; BSR set to: 0
 36211                           ;drum.c: 40: }
 36212                           ;drum.c: 41: if(((drum_button_state_now) & 0x04) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW3) {
 36213                           
 36214                           ; BSR set to: 0
 36215  001D40  B5EE               	btfsc	_drum_button_state_now& (0+255),2,b
 36216                           
 36217                           ; BSR set to: 0
 36218  001D42  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36219  001D44  D033               	goto	l2307
 36220                           
 36221                           ; BSR set to: 0
 36222  001D46  B5EC               	btfsc	_drum& (0+255),2,b
 36223  001D48  D031               	goto	l2307
 36224                           
 36225                           ; BSR set to: 0
 36226                           ;drum.c: 42: drum.SW3 = 1;
 36227  001D4A  85EC               	bsf	_drum& (0+255),2,b
 36228                           
 36229                           ;drum.c: 43: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[2],velocity);}
 36230  001D4C  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36231  001D4E  D007               	goto	l2308
 36232                           
 36233                           ; BSR set to: 0
 36234  001D50  C1E1  F06E         	movff	_DRUM_NOTE+2,noteOnDrum@pitch
 36235  001D54  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36236  001D58  51FE               	movf	_drumchannel& (0+255),w,b
 36237  001D5A  EC72  F046         	call	_noteOnDrum
 36238  001D5E                     l2308:
 36239                           
 36240                           ;drum.c: 44: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2], 
      +                          127);}
 36241  001D5E  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36242  001D60  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36243  001D62  D008               	goto	l2309
 36244  001D64  C1D9  F06B         	movff	_DRUM_CC+2,controlChange@controllerNumber
 36245  001D68  0E7F               	movlw	127
 36246  001D6A  0100               	movlb	0	; () banked
 36247  001D6C  6F6C               	movwf	controlChange@value& (0+255),b
 36248  001D6E  51F6               	movf	_channel& (0+255),w,b
 36249  001D70  EC41  F049         	call	_controlChange
 36250  001D74                     l2309:
 36251                           
 36252                           ;drum.c: 45: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 0) {controlChan
      +                          ge(channel,DRUM_CC[2], 127);}
 36253  001D74  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36254  001D76  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36255  001D78  D00A               	goto	l2310
 36256  001D7A  0100               	movlb	0	; () banked
 36257  001D7C  B5E3               	btfsc	_toggle_state& (0+255),2,b
 36258  001D7E  D007               	goto	l2310
 36259                           
 36260                           ; BSR set to: 0
 36261  001D80  C1D9  F06B         	movff	_DRUM_CC+2,controlChange@controllerNumber
 36262  001D84  0E7F               	movlw	127
 36263  001D86  6F6C               	movwf	controlChange@value& (0+255),b
 36264  001D88  51F6               	movf	_channel& (0+255),w,b
 36265  001D8A  EC41  F049         	call	_controlChange
 36266  001D8E                     l2310:
 36267                           
 36268                           ;drum.c: 46: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 1) {controlChan
      +                          ge(channel,DRUM_CC[2], 0);}
 36269  001D8E  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36270  001D90  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36271  001D92  D00A               	goto	l2311
 36272  001D94  0100               	movlb	0	; () banked
 36273  001D96  A5E3               	btfss	_toggle_state& (0+255),2,b
 36274  001D98  D007               	goto	l2311
 36275                           
 36276                           ; BSR set to: 0
 36277  001D9A  C1D9  F06B         	movff	_DRUM_CC+2,controlChange@controllerNumber
 36278  001D9E  0E00               	movlw	0
 36279  001DA0  6F6C               	movwf	controlChange@value& (0+255),b
 36280  001DA2  51F6               	movf	_channel& (0+255),w,b
 36281  001DA4  EC41  F049         	call	_controlChange
 36282  001DA8                     l2311:
 36283                           
 36284                           ;drum.c: 47: toggle_state.T3 ^= 1;
 36285  001DA8  0100               	movlb	0	; () banked
 36286  001DAA  75E3               	btg	_toggle_state& (0+255),2,b
 36287  001DAC                     l2307:
 36288                           
 36289                           ; BSR set to: 0
 36290                           ;drum.c: 48: }
 36291                           ;drum.c: 49: if(((drum_button_state_now) & 0x08) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW4) {
 36292                           
 36293                           ; BSR set to: 0
 36294  001DAC  B7EE               	btfsc	_drum_button_state_now& (0+255),3,b
 36295                           
 36296                           ; BSR set to: 0
 36297  001DAE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36298  001DB0  D033               	goto	l2312
 36299                           
 36300                           ; BSR set to: 0
 36301  001DB2  B7EC               	btfsc	_drum& (0+255),3,b
 36302  001DB4  D031               	goto	l2312
 36303                           
 36304                           ; BSR set to: 0
 36305                           ;drum.c: 50: drum.SW4 = 1;
 36306  001DB6  87EC               	bsf	_drum& (0+255),3,b
 36307                           
 36308                           ;drum.c: 51: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[3],velocity);}
 36309  001DB8  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36310  001DBA  D007               	goto	l2313
 36311                           
 36312                           ; BSR set to: 0
 36313  001DBC  C1E2  F06E         	movff	_DRUM_NOTE+3,noteOnDrum@pitch
 36314  001DC0  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36315  001DC4  51FE               	movf	_drumchannel& (0+255),w,b
 36316  001DC6  EC72  F046         	call	_noteOnDrum
 36317  001DCA                     l2313:
 36318                           
 36319                           ;drum.c: 52: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3], 
      +                          127);}
 36320  001DCA  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36321  001DCC  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36322  001DCE  D008               	goto	l2314
 36323  001DD0  C1DA  F06B         	movff	_DRUM_CC+3,controlChange@controllerNumber
 36324  001DD4  0E7F               	movlw	127
 36325  001DD6  0100               	movlb	0	; () banked
 36326  001DD8  6F6C               	movwf	controlChange@value& (0+255),b
 36327  001DDA  51F6               	movf	_channel& (0+255),w,b
 36328  001DDC  EC41  F049         	call	_controlChange
 36329  001DE0                     l2314:
 36330                           
 36331                           ;drum.c: 53: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 0) {controlChan
      +                          ge(channel,DRUM_CC[3], 127);}
 36332  001DE0  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36333  001DE2  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36334  001DE4  D00A               	goto	l2315
 36335  001DE6  0100               	movlb	0	; () banked
 36336  001DE8  B7E3               	btfsc	_toggle_state& (0+255),3,b
 36337  001DEA  D007               	goto	l2315
 36338                           
 36339                           ; BSR set to: 0
 36340  001DEC  C1DA  F06B         	movff	_DRUM_CC+3,controlChange@controllerNumber
 36341  001DF0  0E7F               	movlw	127
 36342  001DF2  6F6C               	movwf	controlChange@value& (0+255),b
 36343  001DF4  51F6               	movf	_channel& (0+255),w,b
 36344  001DF6  EC41  F049         	call	_controlChange
 36345  001DFA                     l2315:
 36346                           
 36347                           ;drum.c: 54: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 1) {controlChan
      +                          ge(channel,DRUM_CC[3], 0);}
 36348  001DFA  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36349  001DFC  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36350  001DFE  D00A               	goto	l2316
 36351  001E00  0100               	movlb	0	; () banked
 36352  001E02  A7E3               	btfss	_toggle_state& (0+255),3,b
 36353  001E04  D007               	goto	l2316
 36354                           
 36355                           ; BSR set to: 0
 36356  001E06  C1DA  F06B         	movff	_DRUM_CC+3,controlChange@controllerNumber
 36357  001E0A  0E00               	movlw	0
 36358  001E0C  6F6C               	movwf	controlChange@value& (0+255),b
 36359  001E0E  51F6               	movf	_channel& (0+255),w,b
 36360  001E10  EC41  F049         	call	_controlChange
 36361  001E14                     l2316:
 36362                           
 36363                           ;drum.c: 55: toggle_state.T4 ^= 1;
 36364  001E14  0100               	movlb	0	; () banked
 36365  001E16  77E3               	btg	_toggle_state& (0+255),3,b
 36366  001E18                     l2312:
 36367                           
 36368                           ; BSR set to: 0
 36369                           ;drum.c: 56: }
 36370                           ;drum.c: 57: if(((drum_button_state_now) & 0x10) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW5){
 36371                           
 36372                           ; BSR set to: 0
 36373  001E18  B9EE               	btfsc	_drum_button_state_now& (0+255),4,b
 36374                           
 36375                           ; BSR set to: 0
 36376  001E1A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36377  001E1C  D033               	goto	l2317
 36378                           
 36379                           ; BSR set to: 0
 36380  001E1E  B9EC               	btfsc	_drum& (0+255),4,b
 36381  001E20  D031               	goto	l2317
 36382                           
 36383                           ; BSR set to: 0
 36384                           ;drum.c: 58: drum.SW5 = 1;
 36385  001E22  89EC               	bsf	_drum& (0+255),4,b
 36386                           
 36387                           ;drum.c: 59: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[4],velocity);}
 36388  001E24  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36389  001E26  D007               	goto	l2318
 36390                           
 36391                           ; BSR set to: 0
 36392  001E28  C1E3  F06E         	movff	_DRUM_NOTE+4,noteOnDrum@pitch
 36393  001E2C  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36394  001E30  51FE               	movf	_drumchannel& (0+255),w,b
 36395  001E32  EC72  F046         	call	_noteOnDrum
 36396  001E36                     l2318:
 36397                           
 36398                           ;drum.c: 60: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4], 
      +                          127);}
 36399  001E36  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36400  001E38  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36401  001E3A  D008               	goto	l2319
 36402  001E3C  C1DB  F06B         	movff	_DRUM_CC+4,controlChange@controllerNumber
 36403  001E40  0E7F               	movlw	127
 36404  001E42  0100               	movlb	0	; () banked
 36405  001E44  6F6C               	movwf	controlChange@value& (0+255),b
 36406  001E46  51F6               	movf	_channel& (0+255),w,b
 36407  001E48  EC41  F049         	call	_controlChange
 36408  001E4C                     l2319:
 36409                           
 36410                           ;drum.c: 61: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 0) {controlChan
      +                          ge(channel,DRUM_CC[4], 127);}
 36411  001E4C  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36412  001E4E  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36413  001E50  D00A               	goto	l2320
 36414  001E52  0100               	movlb	0	; () banked
 36415  001E54  B1E3               	btfsc	_toggle_state& (0+255),0,b
 36416  001E56  D007               	goto	l2320
 36417                           
 36418                           ; BSR set to: 0
 36419  001E58  C1DB  F06B         	movff	_DRUM_CC+4,controlChange@controllerNumber
 36420  001E5C  0E7F               	movlw	127
 36421  001E5E  6F6C               	movwf	controlChange@value& (0+255),b
 36422  001E60  51F6               	movf	_channel& (0+255),w,b
 36423  001E62  EC41  F049         	call	_controlChange
 36424  001E66                     l2320:
 36425                           
 36426                           ;drum.c: 62: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 1) {controlChan
      +                          ge(channel,DRUM_CC[4], 0);}
 36427  001E66  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36428  001E68  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36429  001E6A  D00A               	goto	l2321
 36430  001E6C  0100               	movlb	0	; () banked
 36431  001E6E  A1E3               	btfss	_toggle_state& (0+255),0,b
 36432  001E70  D007               	goto	l2321
 36433                           
 36434                           ; BSR set to: 0
 36435  001E72  C1DB  F06B         	movff	_DRUM_CC+4,controlChange@controllerNumber
 36436  001E76  0E00               	movlw	0
 36437  001E78  6F6C               	movwf	controlChange@value& (0+255),b
 36438  001E7A  51F6               	movf	_channel& (0+255),w,b
 36439  001E7C  EC41  F049         	call	_controlChange
 36440  001E80                     l2321:
 36441                           
 36442                           ;drum.c: 63: toggle_state.T5 ^= 1;
 36443  001E80  0100               	movlb	0	; () banked
 36444  001E82  79E3               	btg	_toggle_state& (0+255),4,b
 36445  001E84                     l2317:
 36446                           
 36447                           ; BSR set to: 0
 36448                           ;drum.c: 64: }
 36449                           ;drum.c: 65: if(((drum_button_state_now) & 0x20) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW6) {
 36450                           
 36451                           ; BSR set to: 0
 36452  001E84  BBEE               	btfsc	_drum_button_state_now& (0+255),5,b
 36453                           
 36454                           ; BSR set to: 0
 36455  001E86  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36456  001E88  D033               	goto	l2322
 36457                           
 36458                           ; BSR set to: 0
 36459  001E8A  BBEC               	btfsc	_drum& (0+255),5,b
 36460  001E8C  D031               	goto	l2322
 36461                           
 36462                           ; BSR set to: 0
 36463                           ;drum.c: 66: drum.SW6 = 1;
 36464  001E8E  8BEC               	bsf	_drum& (0+255),5,b
 36465                           
 36466                           ;drum.c: 67: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[5],velocity);}
 36467  001E90  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36468  001E92  D007               	goto	l2323
 36469                           
 36470                           ; BSR set to: 0
 36471  001E94  C1E4  F06E         	movff	_DRUM_NOTE+5,noteOnDrum@pitch
 36472  001E98  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36473  001E9C  51FE               	movf	_drumchannel& (0+255),w,b
 36474  001E9E  EC72  F046         	call	_noteOnDrum
 36475  001EA2                     l2323:
 36476                           
 36477                           ;drum.c: 68: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5], 
      +                          127);}
 36478  001EA2  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36479  001EA4  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36480  001EA6  D008               	goto	l2324
 36481  001EA8  C1DC  F06B         	movff	_DRUM_CC+5,controlChange@controllerNumber
 36482  001EAC  0E7F               	movlw	127
 36483  001EAE  0100               	movlb	0	; () banked
 36484  001EB0  6F6C               	movwf	controlChange@value& (0+255),b
 36485  001EB2  51F6               	movf	_channel& (0+255),w,b
 36486  001EB4  EC41  F049         	call	_controlChange
 36487  001EB8                     l2324:
 36488                           
 36489                           ;drum.c: 69: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 0) {controlChan
      +                          ge(channel,DRUM_CC[5], 127);}
 36490  001EB8  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36491  001EBA  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36492  001EBC  D00A               	goto	l2325
 36493  001EBE  0100               	movlb	0	; () banked
 36494  001EC0  B3E3               	btfsc	_toggle_state& (0+255),1,b
 36495  001EC2  D007               	goto	l2325
 36496                           
 36497                           ; BSR set to: 0
 36498  001EC4  C1DC  F06B         	movff	_DRUM_CC+5,controlChange@controllerNumber
 36499  001EC8  0E7F               	movlw	127
 36500  001ECA  6F6C               	movwf	controlChange@value& (0+255),b
 36501  001ECC  51F6               	movf	_channel& (0+255),w,b
 36502  001ECE  EC41  F049         	call	_controlChange
 36503  001ED2                     l2325:
 36504                           
 36505                           ;drum.c: 70: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 1) {controlChan
      +                          ge(channel,DRUM_CC[5], 0);}
 36506  001ED2  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36507  001ED4  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36508  001ED6  D00A               	goto	l2326
 36509  001ED8  0100               	movlb	0	; () banked
 36510  001EDA  A3E3               	btfss	_toggle_state& (0+255),1,b
 36511  001EDC  D007               	goto	l2326
 36512                           
 36513                           ; BSR set to: 0
 36514  001EDE  C1DC  F06B         	movff	_DRUM_CC+5,controlChange@controllerNumber
 36515  001EE2  0E00               	movlw	0
 36516  001EE4  6F6C               	movwf	controlChange@value& (0+255),b
 36517  001EE6  51F6               	movf	_channel& (0+255),w,b
 36518  001EE8  EC41  F049         	call	_controlChange
 36519  001EEC                     l2326:
 36520                           
 36521                           ;drum.c: 71: toggle_state.T6 ^= 1;
 36522  001EEC  0100               	movlb	0	; () banked
 36523  001EEE  7BE3               	btg	_toggle_state& (0+255),5,b
 36524  001EF0                     l2322:
 36525                           
 36526                           ; BSR set to: 0
 36527                           ;drum.c: 72: }
 36528                           ;drum.c: 73: if(((drum_button_state_now) & 0x40) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW7) {
 36529                           
 36530                           ; BSR set to: 0
 36531  001EF0  BDEE               	btfsc	_drum_button_state_now& (0+255),6,b
 36532                           
 36533                           ; BSR set to: 0
 36534  001EF2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36535  001EF4  D033               	goto	l2327
 36536                           
 36537                           ; BSR set to: 0
 36538  001EF6  BDEC               	btfsc	_drum& (0+255),6,b
 36539  001EF8  D031               	goto	l2327
 36540                           
 36541                           ; BSR set to: 0
 36542                           ;drum.c: 74: drum.SW7 = 1;
 36543  001EFA  8DEC               	bsf	_drum& (0+255),6,b
 36544                           
 36545                           ;drum.c: 75: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[6],velocity);}
 36546  001EFC  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36547  001EFE  D007               	goto	l2328
 36548                           
 36549                           ; BSR set to: 0
 36550  001F00  C1E5  F06E         	movff	_DRUM_NOTE+6,noteOnDrum@pitch
 36551  001F04  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36552  001F08  51FE               	movf	_drumchannel& (0+255),w,b
 36553  001F0A  EC72  F046         	call	_noteOnDrum
 36554  001F0E                     l2328:
 36555                           
 36556                           ;drum.c: 76: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6], 
      +                          127);}
 36557  001F0E  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36558  001F10  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36559  001F12  D008               	goto	l2329
 36560  001F14  C1DD  F06B         	movff	_DRUM_CC+6,controlChange@controllerNumber
 36561  001F18  0E7F               	movlw	127
 36562  001F1A  0100               	movlb	0	; () banked
 36563  001F1C  6F6C               	movwf	controlChange@value& (0+255),b
 36564  001F1E  51F6               	movf	_channel& (0+255),w,b
 36565  001F20  EC41  F049         	call	_controlChange
 36566  001F24                     l2329:
 36567                           
 36568                           ;drum.c: 77: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 0) {controlChan
      +                          ge(channel,DRUM_CC[6], 127);}
 36569  001F24  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36570  001F26  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36571  001F28  D00A               	goto	l2330
 36572  001F2A  0100               	movlb	0	; () banked
 36573  001F2C  B5E3               	btfsc	_toggle_state& (0+255),2,b
 36574  001F2E  D007               	goto	l2330
 36575                           
 36576                           ; BSR set to: 0
 36577  001F30  C1DD  F06B         	movff	_DRUM_CC+6,controlChange@controllerNumber
 36578  001F34  0E7F               	movlw	127
 36579  001F36  6F6C               	movwf	controlChange@value& (0+255),b
 36580  001F38  51F6               	movf	_channel& (0+255),w,b
 36581  001F3A  EC41  F049         	call	_controlChange
 36582  001F3E                     l2330:
 36583                           
 36584                           ;drum.c: 78: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 1) {controlChan
      +                          ge(channel,DRUM_CC[6], 0);}
 36585  001F3E  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36586  001F40  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36587  001F42  D00A               	goto	l2331
 36588  001F44  0100               	movlb	0	; () banked
 36589  001F46  A5E3               	btfss	_toggle_state& (0+255),2,b
 36590  001F48  D007               	goto	l2331
 36591                           
 36592                           ; BSR set to: 0
 36593  001F4A  C1DD  F06B         	movff	_DRUM_CC+6,controlChange@controllerNumber
 36594  001F4E  0E00               	movlw	0
 36595  001F50  6F6C               	movwf	controlChange@value& (0+255),b
 36596  001F52  51F6               	movf	_channel& (0+255),w,b
 36597  001F54  EC41  F049         	call	_controlChange
 36598  001F58                     l2331:
 36599                           
 36600                           ;drum.c: 79: toggle_state.T7 ^= 1;
 36601  001F58  0100               	movlb	0	; () banked
 36602  001F5A  7DE3               	btg	_toggle_state& (0+255),6,b
 36603  001F5C                     l2327:
 36604                           
 36605                           ; BSR set to: 0
 36606                           ;drum.c: 80: }
 36607                           ;drum.c: 81: if(((drum_button_state_now) & 0x80) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW8) {
 36608                           
 36609                           ; BSR set to: 0
 36610  001F5C  BFEE               	btfsc	_drum_button_state_now& (0+255),7,b
 36611                           
 36612                           ; BSR set to: 0
 36613  001F5E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36614  001F60  D033               	goto	l2332
 36615                           
 36616                           ; BSR set to: 0
 36617  001F62  BFEC               	btfsc	_drum& (0+255),7,b
 36618  001F64  D031               	goto	l2332
 36619                           
 36620                           ; BSR set to: 0
 36621                           ;drum.c: 82: drum.SW8 = 1;
 36622  001F66  8FEC               	bsf	_drum& (0+255),7,b
 36623                           
 36624                           ;drum.c: 83: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[7],velocity);}
 36625  001F68  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36626  001F6A  D007               	goto	l2333
 36627                           
 36628                           ; BSR set to: 0
 36629  001F6C  C1E6  F06E         	movff	_DRUM_NOTE+7,noteOnDrum@pitch
 36630  001F70  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36631  001F74  51FE               	movf	_drumchannel& (0+255),w,b
 36632  001F76  EC72  F046         	call	_noteOnDrum
 36633  001F7A                     l2333:
 36634                           
 36635                           ;drum.c: 84: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7], 
      +                          127);}
 36636  001F7A  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36637  001F7C  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36638  001F7E  D008               	goto	l2334
 36639  001F80  C1DE  F06B         	movff	_DRUM_CC+7,controlChange@controllerNumber
 36640  001F84  0E7F               	movlw	127
 36641  001F86  0100               	movlb	0	; () banked
 36642  001F88  6F6C               	movwf	controlChange@value& (0+255),b
 36643  001F8A  51F6               	movf	_channel& (0+255),w,b
 36644  001F8C  EC41  F049         	call	_controlChange
 36645  001F90                     l2334:
 36646                           
 36647                           ;drum.c: 85: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 0) {controlChan
      +                          ge(channel,DRUM_CC[7], 127);}
 36648  001F90  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36649  001F92  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36650  001F94  D00A               	goto	l2335
 36651  001F96  0100               	movlb	0	; () banked
 36652  001F98  B7E3               	btfsc	_toggle_state& (0+255),3,b
 36653  001F9A  D007               	goto	l2335
 36654                           
 36655                           ; BSR set to: 0
 36656  001F9C  C1DE  F06B         	movff	_DRUM_CC+7,controlChange@controllerNumber
 36657  001FA0  0E7F               	movlw	127
 36658  001FA2  6F6C               	movwf	controlChange@value& (0+255),b
 36659  001FA4  51F6               	movf	_channel& (0+255),w,b
 36660  001FA6  EC41  F049         	call	_controlChange
 36661  001FAA                     l2335:
 36662                           
 36663                           ;drum.c: 86: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 1) {controlChan
      +                          ge(channel,DRUM_CC[7], 0);}
 36664  001FAA  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36665  001FAC  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36666  001FAE  D00A               	goto	l2336
 36667  001FB0  0100               	movlb	0	; () banked
 36668  001FB2  A7E3               	btfss	_toggle_state& (0+255),3,b
 36669  001FB4  D007               	goto	l2336
 36670                           
 36671                           ; BSR set to: 0
 36672  001FB6  C1DE  F06B         	movff	_DRUM_CC+7,controlChange@controllerNumber
 36673  001FBA  0E00               	movlw	0
 36674  001FBC  6F6C               	movwf	controlChange@value& (0+255),b
 36675  001FBE  51F6               	movf	_channel& (0+255),w,b
 36676  001FC0  EC41  F049         	call	_controlChange
 36677  001FC4                     l2336:
 36678                           
 36679                           ;drum.c: 87: toggle_state.T8 ^= 1;
 36680  001FC4  0100               	movlb	0	; () banked
 36681  001FC6  7FE3               	btg	_toggle_state& (0+255),7,b
 36682  001FC8                     l2332:
 36683                           
 36684                           ; BSR set to: 0
 36685                           ;drum.c: 88: }
 36686                           ;drum.c: 91: if(((drum_button_state_last & 0x01)) && ((drum_button_state_now & 0x01) == 
      +                          0) && drum.SW1) {
 36687                           
 36688                           ; BSR set to: 0
 36689  001FC8  B1ED               	btfsc	_drum_button_state_last& (0+255),0,b
 36690                           
 36691                           ; BSR set to: 0
 36692  001FCA  B1EE               	btfsc	_drum_button_state_now& (0+255),0,b
 36693  001FCC  D017               	goto	l2339
 36694                           
 36695                           ; BSR set to: 0
 36696  001FCE  A1EC               	btfss	_drum& (0+255),0,b
 36697  001FD0  D015               	goto	l2339
 36698                           
 36699                           ; BSR set to: 0
 36700                           ;drum.c: 92: drum.SW1 = 0;
 36701  001FD2  91EC               	bcf	_drum& (0+255),0,b
 36702                           
 36703                           ;drum.c: 93: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[0],velocity);}
 36704  001FD4  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36705  001FD6  D007               	goto	l2338
 36706                           
 36707                           ; BSR set to: 0
 36708  001FD8  C1DF  F06B         	movff	_DRUM_NOTE,noteOffDrum@pitch
 36709  001FDC  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36710  001FE0  51FE               	movf	_drumchannel& (0+255),w,b
 36711  001FE2  ECEF  F048         	call	_noteOffDrum
 36712  001FE6                     l2338:
 36713                           
 36714                           ;drum.c: 94: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          0);}
 36715  001FE6  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36716  001FE8  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36717  001FEA  D008               	goto	l2339
 36718  001FEC  C1D7  F06B         	movff	_DRUM_CC,controlChange@controllerNumber
 36719  001FF0  0E00               	movlw	0
 36720  001FF2  0100               	movlb	0	; () banked
 36721  001FF4  6F6C               	movwf	controlChange@value& (0+255),b
 36722  001FF6  51F6               	movf	_channel& (0+255),w,b
 36723  001FF8  EC41  F049         	call	_controlChange
 36724  001FFC                     l2339:
 36725                           
 36726                           ;drum.c: 95: }
 36727                           ;drum.c: 96: if(((drum_button_state_last & 0x02)) && ((drum_button_state_now & 0x02) == 
      +                          0) && drum.SW2) {
 36728  001FFC  0100               	movlb	0	; () banked
 36729  001FFE  B3ED               	btfsc	_drum_button_state_last& (0+255),1,b
 36730                           
 36731                           ; BSR set to: 0
 36732  002000  B3EE               	btfsc	_drum_button_state_now& (0+255),1,b
 36733  002002  D017               	goto	l2342
 36734                           
 36735                           ; BSR set to: 0
 36736  002004  A3EC               	btfss	_drum& (0+255),1,b
 36737  002006  D015               	goto	l2342
 36738                           
 36739                           ; BSR set to: 0
 36740                           ;drum.c: 97: drum.SW2 = 0;
 36741  002008  93EC               	bcf	_drum& (0+255),1,b
 36742                           
 36743                           ;drum.c: 98: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[1],velocity);}
 36744  00200A  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36745  00200C  D007               	goto	l2341
 36746                           
 36747                           ; BSR set to: 0
 36748  00200E  C1E0  F06B         	movff	_DRUM_NOTE+1,noteOffDrum@pitch
 36749  002012  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36750  002016  51FE               	movf	_drumchannel& (0+255),w,b
 36751  002018  ECEF  F048         	call	_noteOffDrum
 36752  00201C                     l2341:
 36753                           
 36754                           ;drum.c: 99: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          0);}
 36755  00201C  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36756  00201E  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36757  002020  D008               	goto	l2342
 36758  002022  C1D8  F06B         	movff	_DRUM_CC+1,controlChange@controllerNumber
 36759  002026  0E00               	movlw	0
 36760  002028  0100               	movlb	0	; () banked
 36761  00202A  6F6C               	movwf	controlChange@value& (0+255),b
 36762  00202C  51F6               	movf	_channel& (0+255),w,b
 36763  00202E  EC41  F049         	call	_controlChange
 36764  002032                     l2342:
 36765                           
 36766                           ;drum.c: 100: }
 36767                           ;drum.c: 101: if(((drum_button_state_last & 0x04)) && ((drum_button_state_now & 0x04) ==
      +                           0) && drum.SW3) {
 36768  002032  0100               	movlb	0	; () banked
 36769  002034  B5ED               	btfsc	_drum_button_state_last& (0+255),2,b
 36770                           
 36771                           ; BSR set to: 0
 36772  002036  B5EE               	btfsc	_drum_button_state_now& (0+255),2,b
 36773  002038  D017               	goto	l2345
 36774                           
 36775                           ; BSR set to: 0
 36776  00203A  A5EC               	btfss	_drum& (0+255),2,b
 36777  00203C  D015               	goto	l2345
 36778                           
 36779                           ; BSR set to: 0
 36780                           ;drum.c: 102: drum.SW3 = 0;
 36781  00203E  95EC               	bcf	_drum& (0+255),2,b
 36782                           
 36783                           ;drum.c: 103: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[2],velocity);}
 36784  002040  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36785  002042  D007               	goto	l2344
 36786                           
 36787                           ; BSR set to: 0
 36788  002044  C1E1  F06B         	movff	_DRUM_NOTE+2,noteOffDrum@pitch
 36789  002048  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36790  00204C  51FE               	movf	_drumchannel& (0+255),w,b
 36791  00204E  ECEF  F048         	call	_noteOffDrum
 36792  002052                     l2344:
 36793                           
 36794                           ;drum.c: 104: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2],
      +                           0);}
 36795  002052  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36796  002054  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36797  002056  D008               	goto	l2345
 36798  002058  C1D9  F06B         	movff	_DRUM_CC+2,controlChange@controllerNumber
 36799  00205C  0E00               	movlw	0
 36800  00205E  0100               	movlb	0	; () banked
 36801  002060  6F6C               	movwf	controlChange@value& (0+255),b
 36802  002062  51F6               	movf	_channel& (0+255),w,b
 36803  002064  EC41  F049         	call	_controlChange
 36804  002068                     l2345:
 36805                           
 36806                           ;drum.c: 105: }
 36807                           ;drum.c: 106: if(((drum_button_state_last & 0x08)) && ((drum_button_state_now & 0x08) ==
      +                           0) && drum.SW4) {
 36808  002068  0100               	movlb	0	; () banked
 36809  00206A  B7ED               	btfsc	_drum_button_state_last& (0+255),3,b
 36810                           
 36811                           ; BSR set to: 0
 36812  00206C  B7EE               	btfsc	_drum_button_state_now& (0+255),3,b
 36813  00206E  D017               	goto	l2348
 36814                           
 36815                           ; BSR set to: 0
 36816  002070  A7EC               	btfss	_drum& (0+255),3,b
 36817  002072  D015               	goto	l2348
 36818                           
 36819                           ; BSR set to: 0
 36820                           ;drum.c: 107: drum.SW4 = 0;
 36821  002074  97EC               	bcf	_drum& (0+255),3,b
 36822                           
 36823                           ;drum.c: 108: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[3],velocity);}
 36824  002076  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36825  002078  D007               	goto	l2347
 36826                           
 36827                           ; BSR set to: 0
 36828  00207A  C1E2  F06B         	movff	_DRUM_NOTE+3,noteOffDrum@pitch
 36829  00207E  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36830  002082  51FE               	movf	_drumchannel& (0+255),w,b
 36831  002084  ECEF  F048         	call	_noteOffDrum
 36832  002088                     l2347:
 36833                           
 36834                           ;drum.c: 109: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3],
      +                           0);}
 36835  002088  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36836  00208A  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36837  00208C  D008               	goto	l2348
 36838  00208E  C1DA  F06B         	movff	_DRUM_CC+3,controlChange@controllerNumber
 36839  002092  0E00               	movlw	0
 36840  002094  0100               	movlb	0	; () banked
 36841  002096  6F6C               	movwf	controlChange@value& (0+255),b
 36842  002098  51F6               	movf	_channel& (0+255),w,b
 36843  00209A  EC41  F049         	call	_controlChange
 36844  00209E                     l2348:
 36845                           
 36846                           ;drum.c: 110: }
 36847                           ;drum.c: 111: if(((drum_button_state_last & 0x10)) && ((drum_button_state_now & 0x10) ==
      +                           0) && drum.SW5) {
 36848  00209E  0100               	movlb	0	; () banked
 36849  0020A0  B9ED               	btfsc	_drum_button_state_last& (0+255),4,b
 36850                           
 36851                           ; BSR set to: 0
 36852  0020A2  B9EE               	btfsc	_drum_button_state_now& (0+255),4,b
 36853  0020A4  D017               	goto	l2351
 36854                           
 36855                           ; BSR set to: 0
 36856  0020A6  A9EC               	btfss	_drum& (0+255),4,b
 36857  0020A8  D015               	goto	l2351
 36858                           
 36859                           ; BSR set to: 0
 36860                           ;drum.c: 112: drum.SW5 = 0;
 36861  0020AA  99EC               	bcf	_drum& (0+255),4,b
 36862                           
 36863                           ;drum.c: 113: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[4],velocity);}
 36864  0020AC  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36865  0020AE  D007               	goto	l2350
 36866                           
 36867                           ; BSR set to: 0
 36868  0020B0  C1E3  F06B         	movff	_DRUM_NOTE+4,noteOffDrum@pitch
 36869  0020B4  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36870  0020B8  51FE               	movf	_drumchannel& (0+255),w,b
 36871  0020BA  ECEF  F048         	call	_noteOffDrum
 36872  0020BE                     l2350:
 36873                           
 36874                           ;drum.c: 114: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4],
      +                           0);}
 36875  0020BE  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36876  0020C0  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36877  0020C2  D008               	goto	l2351
 36878  0020C4  C1DB  F06B         	movff	_DRUM_CC+4,controlChange@controllerNumber
 36879  0020C8  0E00               	movlw	0
 36880  0020CA  0100               	movlb	0	; () banked
 36881  0020CC  6F6C               	movwf	controlChange@value& (0+255),b
 36882  0020CE  51F6               	movf	_channel& (0+255),w,b
 36883  0020D0  EC41  F049         	call	_controlChange
 36884  0020D4                     l2351:
 36885                           
 36886                           ;drum.c: 115: }
 36887                           ;drum.c: 116: if(((drum_button_state_last & 0x20)) && ((drum_button_state_now & 0x20) ==
      +                           0) && drum.SW6) {
 36888  0020D4  0100               	movlb	0	; () banked
 36889  0020D6  BBED               	btfsc	_drum_button_state_last& (0+255),5,b
 36890                           
 36891                           ; BSR set to: 0
 36892  0020D8  BBEE               	btfsc	_drum_button_state_now& (0+255),5,b
 36893  0020DA  D017               	goto	l2354
 36894                           
 36895                           ; BSR set to: 0
 36896  0020DC  ABEC               	btfss	_drum& (0+255),5,b
 36897  0020DE  D015               	goto	l2354
 36898                           
 36899                           ; BSR set to: 0
 36900                           ;drum.c: 117: drum.SW6 = 0;
 36901  0020E0  9BEC               	bcf	_drum& (0+255),5,b
 36902                           
 36903                           ;drum.c: 118: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[5],velocity);}
 36904  0020E2  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36905  0020E4  D007               	goto	l2353
 36906                           
 36907                           ; BSR set to: 0
 36908  0020E6  C1E4  F06B         	movff	_DRUM_NOTE+5,noteOffDrum@pitch
 36909  0020EA  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36910  0020EE  51FE               	movf	_drumchannel& (0+255),w,b
 36911  0020F0  ECEF  F048         	call	_noteOffDrum
 36912  0020F4                     l2353:
 36913                           
 36914                           ;drum.c: 119: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5],
      +                           0);}
 36915  0020F4  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36916  0020F6  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36917  0020F8  D008               	goto	l2354
 36918  0020FA  C1DC  F06B         	movff	_DRUM_CC+5,controlChange@controllerNumber
 36919  0020FE  0E00               	movlw	0
 36920  002100  0100               	movlb	0	; () banked
 36921  002102  6F6C               	movwf	controlChange@value& (0+255),b
 36922  002104  51F6               	movf	_channel& (0+255),w,b
 36923  002106  EC41  F049         	call	_controlChange
 36924  00210A                     l2354:
 36925                           
 36926                           ;drum.c: 120: }
 36927                           ;drum.c: 121: if(((drum_button_state_last & 0x40)) && ((drum_button_state_now & 0x40) ==
      +                           0) && drum.SW7) {
 36928  00210A  0100               	movlb	0	; () banked
 36929  00210C  BDED               	btfsc	_drum_button_state_last& (0+255),6,b
 36930                           
 36931                           ; BSR set to: 0
 36932  00210E  BDEE               	btfsc	_drum_button_state_now& (0+255),6,b
 36933  002110  D017               	goto	l2357
 36934                           
 36935                           ; BSR set to: 0
 36936  002112  ADEC               	btfss	_drum& (0+255),6,b
 36937  002114  D015               	goto	l2357
 36938                           
 36939                           ; BSR set to: 0
 36940                           ;drum.c: 122: drum.SW7 = 0;
 36941  002116  9DEC               	bcf	_drum& (0+255),6,b
 36942                           
 36943                           ;drum.c: 123: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[6],velocity);}
 36944  002118  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36945  00211A  D007               	goto	l2356
 36946                           
 36947                           ; BSR set to: 0
 36948  00211C  C1E5  F06B         	movff	_DRUM_NOTE+6,noteOffDrum@pitch
 36949  002120  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36950  002124  51FE               	movf	_drumchannel& (0+255),w,b
 36951  002126  ECEF  F048         	call	_noteOffDrum
 36952  00212A                     l2356:
 36953                           
 36954                           ;drum.c: 124: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6],
      +                           0);}
 36955  00212A  A832               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36956  00212C  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36957  00212E  D008               	goto	l2357
 36958  002130  C1DD  F06B         	movff	_DRUM_CC+6,controlChange@controllerNumber
 36959  002134  0E00               	movlw	0
 36960  002136  0100               	movlb	0	; () banked
 36961  002138  6F6C               	movwf	controlChange@value& (0+255),b
 36962  00213A  51F6               	movf	_channel& (0+255),w,b
 36963  00213C  EC41  F049         	call	_controlChange
 36964  002140                     l2357:
 36965                           
 36966                           ;drum.c: 125: }
 36967                           ;drum.c: 126: if(((drum_button_state_last & 0x80)) && ((drum_button_state_now & 0x80) ==
      +                           0) && drum.SW8) {
 36968  002140  0100               	movlb	0	; () banked
 36969  002142  AFED               	btfss	_drum_button_state_last& (0+255),7,b
 36970  002144  0012               	return	
 36971                           
 36972                           ; BSR set to: 0
 36973  002146  BFEE               	btfsc	_drum_button_state_now& (0+255),7,b
 36974  002148  0012               	return	
 36975                           
 36976                           ; BSR set to: 0
 36977  00214A  AFEC               	btfss	_drum& (0+255),7,b
 36978  00214C  0012               	return	
 36979                           
 36980                           ; BSR set to: 0
 36981                           ;drum.c: 127: drum.SW8 = 0;
 36982  00214E  9FEC               	bcf	_drum& (0+255),7,b
 36983                           
 36984                           ;drum.c: 128: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[7],velocity);}
 36985  002150  BA32               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36986  002152  D007               	goto	l2359
 36987                           
 36988                           ; BSR set to: 0
 36989  002154  C1E6  F06B         	movff	_DRUM_NOTE+7,noteOffDrum@pitch
 36990  002158  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36991  00215C  51FE               	movf	_drumchannel& (0+255),w,b
 36992  00215E  ECEF  F048         	call	_noteOffDrum
 36993  002162                     l2359:
 36994                           
 36995                           ;drum.c: 129: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7],
      +                           0);}
 36996  002162  B832               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36997  002164  0012               	return	
 36998  002166  AA32               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36999  002168  0012               	return	
 37000  00216A  C1DE  F06B         	movff	_DRUM_CC+7,controlChange@controllerNumber
 37001  00216E  0E00               	movlw	0
 37002  002170  0100               	movlb	0	; () banked
 37003  002172  6F6C               	movwf	controlChange@value& (0+255),b
 37004  002174  51F6               	movf	_channel& (0+255),w,b
 37005  002176  EC41  F049         	call	_controlChange
 37006  00217A  0012               	return	
 37007  00217C                     __end_of_processDrumpad:
 37008                           	opt stack 0
 37009                           tblptru	equ	0xFF8
 37010                           tblptrh	equ	0xFF7
 37011                           tblptrl	equ	0xFF6
 37012                           tablat	equ	0xFF5
 37013                           prodh	equ	0xFF4
 37014                           prodl	equ	0xFF3
 37015                           intcon	equ	0xFF2
 37016                           intcon2	equ	0xFF1
 37017                           postinc0	equ	0xFEE
 37018                           wreg	equ	0xFE8
 37019                           indf1	equ	0xFE7
 37020                           postdec1	equ	0xFE5
 37021                           fsr1h	equ	0xFE2
 37022                           fsr1l	equ	0xFE1
 37023                           indf2	equ	0xFDF
 37024                           postinc2	equ	0xFDE
 37025                           plusw2	equ	0xFDB
 37026                           fsr2h	equ	0xFDA
 37027                           fsr2l	equ	0xFD9
 37028                           status	equ	0xFD8
 37029                           
 37030 ;; *************** function _noteOnDrum *****************
 37031 ;; Defined at:
 37032 ;;		line 120 in file "midi.c"
 37033 ;; Parameters:    Size  Location     Type
 37034 ;;  channel         1    wreg     unsigned char 
 37035 ;;  pitch           1   14[BANK0 ] unsigned char 
 37036 ;;  velocity        1   15[BANK0 ] unsigned char 
 37037 ;; Auto vars:     Size  Location     Type
 37038 ;;  channel         1   16[BANK0 ] unsigned char 
 37039 ;; Return value:  Size  Location     Type
 37040 ;;                  1    wreg      void 
 37041 ;; Registers used:
 37042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37043 ;; Tracked objects:
 37044 ;;		On entry : 0/0
 37045 ;;		On exit  : 0/0
 37046 ;;		Unchanged: 0/0
 37047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37048 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37051 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37052 ;;Total ram usage:        3 bytes
 37053 ;; Hardware stack levels used:    1
 37054 ;; Hardware stack levels required when called:    7
 37055 ;; This function calls:
 37056 ;;		_noteOff
 37057 ;;		_sendOut
 37058 ;;		_sendUSB
 37059 ;; This function is called by:
 37060 ;;		_processDrumpad
 37061 ;; This function uses a non-reentrant model
 37062 ;;
 37063                           
 37064                           	psect	text109
 37065  008CE4                     __ptext109:
 37066                           	opt stack 0
 37067  008CE4                     _noteOnDrum:
 37068                           	opt stack 21
 37069                           
 37070                           ;incstack = 0
 37071                           ;noteOnDrum@channel stored from wreg
 37072  008CE4  0100               	movlb	0	; () banked
 37073  008CE6  6F70               	movwf	noteOnDrum@channel& (0+255),b
 37074                           
 37075                           ;midi.c: 122: noteNumber = pitch;
 37076  008CE8  C06E  F0F4         	movff	noteOnDrum@pitch,_noteNumber
 37077                           
 37078                           ;midi.c: 123: statusByte = channel | note_on;
 37079  008CEC  0100               	movlb	0	; () banked
 37080  008CEE  5170               	movf	noteOnDrum@channel& (0+255),w,b
 37081  008CF0  0990               	iorlw	144
 37082  008CF2  6FF5               	movwf	_statusByte& (0+255),b
 37083                           
 37084                           ; BSR set to: 0
 37085                           ;midi.c: 125: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 37086  008CF4  516F               	movf	noteOnDrum@velocity& (0+255),w,b
 37087  008CF6  A4D8               	btfss	status,2,c
 37088  008CF8  D008               	goto	l459
 37089                           
 37090                           ; BSR set to: 0
 37091  008CFA  C06E  F06B         	movff	noteOnDrum@pitch,noteOff@pitch
 37092  008CFE  C06F  F06C         	movff	noteOnDrum@velocity,noteOff@velocity
 37093  008D02  5170               	movf	noteOnDrum@channel& (0+255),w,b
 37094  008D04  ECFD  F047         	call	_noteOff
 37095  008D08  0012               	return	
 37096  008D0A                     l459:
 37097                           
 37098                           ;midi.c: 128: sendUSB(statusByte, noteNumber, velocity);
 37099  008D0A  C0F4  F060         	movff	_noteNumber,sendUSB@message2
 37100  008D0E  C06F  F061         	movff	noteOnDrum@velocity,sendUSB@message3
 37101  008D12  0100               	movlb	0	; () banked
 37102  008D14  51F5               	movf	_statusByte& (0+255),w,b
 37103  008D16  ECC0  F039         	call	_sendUSB
 37104                           
 37105                           ;midi.c: 131: if(velocity > 0) {
 37106  008D1A  0100               	movlb	0	; () banked
 37107  008D1C  516F               	movf	noteOnDrum@velocity& (0+255),w,b
 37108  008D1E  B4D8               	btfsc	status,2,c
 37109  008D20  0012               	return	
 37110                           
 37111                           ; BSR set to: 0
 37112                           ;midi.c: 132: sendOut(statusByte);
 37113  008D22  51F5               	movf	_statusByte& (0+255),w,b
 37114  008D24  ECCD  F04A         	call	_sendOut
 37115                           
 37116                           ;midi.c: 133: sendOut(noteNumber);
 37117  008D28  0100               	movlb	0	; () banked
 37118  008D2A  51F4               	movf	_noteNumber& (0+255),w,b
 37119  008D2C  ECCD  F04A         	call	_sendOut
 37120                           
 37121                           ;midi.c: 134: sendOut(velocity);
 37122  008D30  0100               	movlb	0	; () banked
 37123  008D32  516F               	movf	noteOnDrum@velocity& (0+255),w,b
 37124  008D34  ECCD  F04A         	call	_sendOut
 37125  008D38  0012               	return	
 37126  008D3A                     __end_of_noteOnDrum:
 37127                           	opt stack 0
 37128                           tblptru	equ	0xFF8
 37129                           tblptrh	equ	0xFF7
 37130                           tblptrl	equ	0xFF6
 37131                           tablat	equ	0xFF5
 37132                           prodh	equ	0xFF4
 37133                           prodl	equ	0xFF3
 37134                           intcon	equ	0xFF2
 37135                           intcon2	equ	0xFF1
 37136                           postinc0	equ	0xFEE
 37137                           wreg	equ	0xFE8
 37138                           indf1	equ	0xFE7
 37139                           postdec1	equ	0xFE5
 37140                           fsr1h	equ	0xFE2
 37141                           fsr1l	equ	0xFE1
 37142                           indf2	equ	0xFDF
 37143                           postinc2	equ	0xFDE
 37144                           plusw2	equ	0xFDB
 37145                           fsr2h	equ	0xFDA
 37146                           fsr2l	equ	0xFD9
 37147                           status	equ	0xFD8
 37148                           
 37149 ;; *************** function _noteOffDrum *****************
 37150 ;; Defined at:
 37151 ;;		line 105 in file "midi.c"
 37152 ;; Parameters:    Size  Location     Type
 37153 ;;  channel         1    wreg     unsigned char 
 37154 ;;  pitch           1   11[BANK0 ] unsigned char 
 37155 ;;  velocity        1   12[BANK0 ] unsigned char 
 37156 ;; Auto vars:     Size  Location     Type
 37157 ;;  channel         1   13[BANK0 ] unsigned char 
 37158 ;; Return value:  Size  Location     Type
 37159 ;;                  1    wreg      void 
 37160 ;; Registers used:
 37161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37162 ;; Tracked objects:
 37163 ;;		On entry : 0/0
 37164 ;;		On exit  : 0/0
 37165 ;;		Unchanged: 0/0
 37166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37167 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37168 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37170 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37171 ;;Total ram usage:        3 bytes
 37172 ;; Hardware stack levels used:    1
 37173 ;; Hardware stack levels required when called:    6
 37174 ;; This function calls:
 37175 ;;		_sendOut
 37176 ;;		_sendUSB
 37177 ;; This function is called by:
 37178 ;;		_processDrumpad
 37179 ;; This function uses a non-reentrant model
 37180 ;;
 37181                           
 37182                           	psect	text110
 37183  0091DE                     __ptext110:
 37184                           	opt stack 0
 37185  0091DE                     _noteOffDrum:
 37186                           	opt stack 22
 37187                           
 37188                           ;incstack = 0
 37189                           ;noteOffDrum@channel stored from wreg
 37190  0091DE  0100               	movlb	0	; () banked
 37191  0091E0  6F6D               	movwf	noteOffDrum@channel& (0+255),b
 37192                           
 37193                           ;midi.c: 107: noteNumber = pitch;
 37194  0091E2  C06B  F0F4         	movff	noteOffDrum@pitch,_noteNumber
 37195                           
 37196                           ;midi.c: 108: statusByte = channel | note_off;
 37197  0091E6  0100               	movlb	0	; () banked
 37198  0091E8  516D               	movf	noteOffDrum@channel& (0+255),w,b
 37199  0091EA  0980               	iorlw	128
 37200  0091EC  6FF5               	movwf	_statusByte& (0+255),b
 37201                           
 37202                           ; BSR set to: 0
 37203                           ;midi.c: 111: sendUSB(statusByte, noteNumber, velocity);
 37204  0091EE  C0F4  F060         	movff	_noteNumber,sendUSB@message2
 37205  0091F2  C06C  F061         	movff	noteOffDrum@velocity,sendUSB@message3
 37206  0091F6  51F5               	movf	_statusByte& (0+255),w,b
 37207  0091F8  ECC0  F039         	call	_sendUSB
 37208                           
 37209                           ;midi.c: 114: sendOut(statusByte);
 37210  0091FC  0100               	movlb	0	; () banked
 37211  0091FE  51F5               	movf	_statusByte& (0+255),w,b
 37212  009200  ECCD  F04A         	call	_sendOut
 37213                           
 37214                           ;midi.c: 115: sendOut(noteNumber);
 37215  009204  0100               	movlb	0	; () banked
 37216  009206  51F4               	movf	_noteNumber& (0+255),w,b
 37217  009208  ECCD  F04A         	call	_sendOut
 37218                           
 37219                           ;midi.c: 116: sendOut(velocity);
 37220  00920C  0100               	movlb	0	; () banked
 37221  00920E  516C               	movf	noteOffDrum@velocity& (0+255),w,b
 37222  009210  ECCD  F04A         	call	_sendOut
 37223  009214  0012               	return		;funcret
 37224  009216                     __end_of_noteOffDrum:
 37225                           	opt stack 0
 37226                           tblptru	equ	0xFF8
 37227                           tblptrh	equ	0xFF7
 37228                           tblptrl	equ	0xFF6
 37229                           tablat	equ	0xFF5
 37230                           prodh	equ	0xFF4
 37231                           prodl	equ	0xFF3
 37232                           intcon	equ	0xFF2
 37233                           intcon2	equ	0xFF1
 37234                           postinc0	equ	0xFEE
 37235                           wreg	equ	0xFE8
 37236                           indf1	equ	0xFE7
 37237                           postdec1	equ	0xFE5
 37238                           fsr1h	equ	0xFE2
 37239                           fsr1l	equ	0xFE1
 37240                           indf2	equ	0xFDF
 37241                           postinc2	equ	0xFDE
 37242                           plusw2	equ	0xFDB
 37243                           fsr2h	equ	0xFDA
 37244                           fsr2l	equ	0xFD9
 37245                           status	equ	0xFD8
 37246                           
 37247 ;; *************** function _keyboardTranspose *****************
 37248 ;; Defined at:
 37249 ;;		line 28 in file "octave.c"
 37250 ;; Parameters:    Size  Location     Type
 37251 ;;		None
 37252 ;; Auto vars:     Size  Location     Type
 37253 ;;		None
 37254 ;; Return value:  Size  Location     Type
 37255 ;;                  1    wreg      void 
 37256 ;; Registers used:
 37257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37258 ;; Tracked objects:
 37259 ;;		On entry : 0/0
 37260 ;;		On exit  : 0/0
 37261 ;;		Unchanged: 0/0
 37262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37267 ;;Total ram usage:        0 bytes
 37268 ;; Hardware stack levels used:    1
 37269 ;; Hardware stack levels required when called:    8
 37270 ;; This function calls:
 37271 ;;		_key_press_release_note_off
 37272 ;;		_printThisNumber
 37273 ;;		_wait_one_pulse
 37274 ;; This function is called by:
 37275 ;;		_digitalInputs
 37276 ;; This function uses a non-reentrant model
 37277 ;;
 37278                           
 37279                           	psect	text111
 37280  0042E8                     __ptext111:
 37281                           	opt stack 0
 37282  0042E8                     _keyboardTranspose:
 37283                           	opt stack 21
 37284                           
 37285                           ;octave.c: 30: static signed char semitone_temp;
 37286                           ;octave.c: 31: static __bit keyPress;
 37287                           ;octave.c: 33: if(button_state_now == (0x08000000 | 0x00000001))
 37288                           
 37289                           ;incstack = 0
 37290  0042E8  0100               	movlb	0	; () banked
 37291  0042EA  05D8               	decf	_button_state_now& (0+255),w,b
 37292  0042EC  E109               	bnz	l22167
 37293  0042EE  0E08               	movlw	8
 37294  0042F0  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37295  0042F2  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37296  0042F4  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37297  0042F6  A4D8               	btfss	status,2,c
 37298  0042F8  D003               	goto	l2719
 37299                           
 37300                           ; BSR set to: 0
 37301                           ;octave.c: 34: {
 37302                           ;octave.c: 35: semitone_temp = -12;
 37303  0042FA  0EF4               	movlw	244
 37304  0042FC  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37305                           
 37306                           ; BSR set to: 0
 37307                           ;octave.c: 36: keyPress = 1;
 37308  0042FE  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37309  004300                     l2719:
 37310  004300                     l22167:
 37311                           
 37312                           ; BSR set to: 0
 37313                           ;octave.c: 37: }
 37314                           ;octave.c: 38: if(button_state_now == (0x08000000 | 0x00000002))
 37315  004300  0E02               	movlw	2
 37316  004302  19D8               	xorwf	_button_state_now& (0+255),w,b
 37317  004304  E109               	bnz	l22173
 37318  004306  0E08               	movlw	8
 37319  004308  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37320  00430A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37321  00430C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37322  00430E  A4D8               	btfss	status,2,c
 37323  004310  D003               	goto	l2720
 37324                           
 37325                           ; BSR set to: 0
 37326                           ;octave.c: 39: {
 37327                           ;octave.c: 40: semitone_temp = -11;
 37328  004312  0EF5               	movlw	245
 37329  004314  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37330                           
 37331                           ; BSR set to: 0
 37332                           ;octave.c: 41: keyPress = 1;
 37333  004316  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37334  004318                     l2720:
 37335  004318                     l22173:
 37336                           
 37337                           ; BSR set to: 0
 37338                           ;octave.c: 42: }
 37339                           ;octave.c: 43: if(button_state_now == (0x08000000 | 0x00000004))
 37340  004318  0E04               	movlw	4
 37341  00431A  19D8               	xorwf	_button_state_now& (0+255),w,b
 37342  00431C  E109               	bnz	l22179
 37343  00431E  0E08               	movlw	8
 37344  004320  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37345  004322  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37346  004324  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37347  004326  A4D8               	btfss	status,2,c
 37348  004328  D003               	goto	l2721
 37349                           
 37350                           ; BSR set to: 0
 37351                           ;octave.c: 44: {
 37352                           ;octave.c: 45: semitone_temp = -10;
 37353  00432A  0EF6               	movlw	246
 37354  00432C  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37355                           
 37356                           ; BSR set to: 0
 37357                           ;octave.c: 46: keyPress = 1;
 37358  00432E  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37359  004330                     l2721:
 37360  004330                     l22179:
 37361                           
 37362                           ; BSR set to: 0
 37363                           ;octave.c: 47: }
 37364                           ;octave.c: 48: if(button_state_now == (0x08000000 | 0x00000008))
 37365  004330  0E08               	movlw	8
 37366  004332  19D8               	xorwf	_button_state_now& (0+255),w,b
 37367  004334  E109               	bnz	l22185
 37368  004336  0E08               	movlw	8
 37369  004338  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37370  00433A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37371  00433C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37372  00433E  A4D8               	btfss	status,2,c
 37373  004340  D003               	goto	l2722
 37374                           
 37375                           ; BSR set to: 0
 37376                           ;octave.c: 49: {
 37377                           ;octave.c: 50: semitone_temp = -9;
 37378  004342  0EF7               	movlw	247
 37379  004344  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37380                           
 37381                           ; BSR set to: 0
 37382                           ;octave.c: 51: keyPress = 1;
 37383  004346  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37384  004348                     l2722:
 37385  004348                     l22185:
 37386                           
 37387                           ; BSR set to: 0
 37388                           ;octave.c: 52: }
 37389                           ;octave.c: 53: if(button_state_now == (0x08000000 | 0x00000010))
 37390  004348  0E10               	movlw	16
 37391  00434A  19D8               	xorwf	_button_state_now& (0+255),w,b
 37392  00434C  E109               	bnz	l22191
 37393  00434E  0E08               	movlw	8
 37394  004350  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37395  004352  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37396  004354  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37397  004356  A4D8               	btfss	status,2,c
 37398  004358  D003               	goto	l2723
 37399                           
 37400                           ; BSR set to: 0
 37401                           ;octave.c: 54: {
 37402                           ;octave.c: 55: semitone_temp = -8;
 37403  00435A  0EF8               	movlw	248
 37404  00435C  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37405                           
 37406                           ; BSR set to: 0
 37407                           ;octave.c: 56: keyPress = 1;
 37408  00435E  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37409  004360                     l2723:
 37410  004360                     l22191:
 37411                           
 37412                           ; BSR set to: 0
 37413                           ;octave.c: 57: }
 37414                           ;octave.c: 58: if(button_state_now == (0x08000000 | 0x00000020))
 37415  004360  0E20               	movlw	32
 37416  004362  19D8               	xorwf	_button_state_now& (0+255),w,b
 37417  004364  E109               	bnz	l22197
 37418  004366  0E08               	movlw	8
 37419  004368  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37420  00436A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37421  00436C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37422  00436E  A4D8               	btfss	status,2,c
 37423  004370  D003               	goto	l2724
 37424                           
 37425                           ; BSR set to: 0
 37426                           ;octave.c: 59: {
 37427                           ;octave.c: 60: semitone_temp = -7;
 37428  004372  0EF9               	movlw	249
 37429  004374  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37430                           
 37431                           ; BSR set to: 0
 37432                           ;octave.c: 61: keyPress = 1;
 37433  004376  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37434  004378                     l2724:
 37435  004378                     l22197:
 37436                           
 37437                           ; BSR set to: 0
 37438                           ;octave.c: 62: }
 37439                           ;octave.c: 63: if(button_state_now == (0x08000000 | 0x00000040))
 37440  004378  0E40               	movlw	64
 37441  00437A  19D8               	xorwf	_button_state_now& (0+255),w,b
 37442  00437C  E109               	bnz	l22203
 37443  00437E  0E08               	movlw	8
 37444  004380  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37445  004382  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37446  004384  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37447  004386  A4D8               	btfss	status,2,c
 37448  004388  D003               	goto	l2725
 37449                           
 37450                           ; BSR set to: 0
 37451                           ;octave.c: 64: {
 37452                           ;octave.c: 65: semitone_temp = -6;
 37453  00438A  0EFA               	movlw	250
 37454  00438C  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37455                           
 37456                           ; BSR set to: 0
 37457                           ;octave.c: 66: keyPress = 1;
 37458  00438E  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37459  004390                     l2725:
 37460  004390                     l22203:
 37461                           
 37462                           ; BSR set to: 0
 37463                           ;octave.c: 67: }
 37464                           ;octave.c: 68: if(button_state_now == (0x08000000 | 0x00000080))
 37465  004390  0E80               	movlw	128
 37466  004392  19D8               	xorwf	_button_state_now& (0+255),w,b
 37467  004394  E109               	bnz	l22209
 37468  004396  0E08               	movlw	8
 37469  004398  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37470  00439A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37471  00439C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37472  00439E  A4D8               	btfss	status,2,c
 37473  0043A0  D003               	goto	l2726
 37474                           
 37475                           ; BSR set to: 0
 37476                           ;octave.c: 69: {
 37477                           ;octave.c: 70: semitone_temp = -5;
 37478  0043A2  0EFB               	movlw	251
 37479  0043A4  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37480                           
 37481                           ; BSR set to: 0
 37482                           ;octave.c: 71: keyPress = 1;
 37483  0043A6  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37484  0043A8                     l2726:
 37485  0043A8                     l22209:
 37486                           
 37487                           ; BSR set to: 0
 37488                           ;octave.c: 72: }
 37489                           ;octave.c: 73: if(button_state_now == (0x08000000 | 0x00000100))
 37490  0043A8  05D9               	decf	(_button_state_now+1)& (0+255),w,b
 37491  0043AA  E109               	bnz	l22215
 37492  0043AC  0E08               	movlw	8
 37493  0043AE  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37494  0043B0  11D8               	iorwf	_button_state_now& (0+255),w,b
 37495  0043B2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37496  0043B4  A4D8               	btfss	status,2,c
 37497  0043B6  D003               	goto	l2727
 37498                           
 37499                           ; BSR set to: 0
 37500                           ;octave.c: 74: {
 37501                           ;octave.c: 75: semitone_temp = -4;
 37502  0043B8  0EFC               	movlw	252
 37503  0043BA  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37504                           
 37505                           ; BSR set to: 0
 37506                           ;octave.c: 76: keyPress = 1;
 37507  0043BC  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37508  0043BE                     l2727:
 37509  0043BE                     l22215:
 37510                           
 37511                           ; BSR set to: 0
 37512                           ;octave.c: 77: }
 37513                           ;octave.c: 78: if(button_state_now == (0x08000000 | 0x00000200))
 37514  0043BE  0E02               	movlw	2
 37515  0043C0  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37516  0043C2  E109               	bnz	l22221
 37517  0043C4  0E08               	movlw	8
 37518  0043C6  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37519  0043C8  11D8               	iorwf	_button_state_now& (0+255),w,b
 37520  0043CA  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37521  0043CC  A4D8               	btfss	status,2,c
 37522  0043CE  D003               	goto	l2728
 37523                           
 37524                           ; BSR set to: 0
 37525                           ;octave.c: 79: {
 37526                           ;octave.c: 80: semitone_temp = -3;
 37527  0043D0  0EFD               	movlw	253
 37528  0043D2  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37529                           
 37530                           ; BSR set to: 0
 37531                           ;octave.c: 81: keyPress = 1;
 37532  0043D4  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37533  0043D6                     l2728:
 37534  0043D6                     l22221:
 37535                           
 37536                           ; BSR set to: 0
 37537                           ;octave.c: 82: }
 37538                           ;octave.c: 83: if(button_state_now == (0x08000000 | 0x00000400))
 37539  0043D6  0E04               	movlw	4
 37540  0043D8  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37541  0043DA  E109               	bnz	l22227
 37542  0043DC  0E08               	movlw	8
 37543  0043DE  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37544  0043E0  11D8               	iorwf	_button_state_now& (0+255),w,b
 37545  0043E2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37546  0043E4  A4D8               	btfss	status,2,c
 37547  0043E6  D003               	goto	l2729
 37548                           
 37549                           ; BSR set to: 0
 37550                           ;octave.c: 84: {
 37551                           ;octave.c: 85: semitone_temp = -2;
 37552  0043E8  0EFE               	movlw	254
 37553  0043EA  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37554                           
 37555                           ; BSR set to: 0
 37556                           ;octave.c: 86: keyPress = 1;
 37557  0043EC  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37558  0043EE                     l2729:
 37559  0043EE                     l22227:
 37560                           
 37561                           ; BSR set to: 0
 37562                           ;octave.c: 87: }
 37563                           ;octave.c: 88: if(button_state_now == (0x08000000 | 0x00000800))
 37564  0043EE  0E08               	movlw	8
 37565  0043F0  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37566  0043F2  E108               	bnz	l22231
 37567  0043F4  0E08               	movlw	8
 37568  0043F6  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37569  0043F8  11D8               	iorwf	_button_state_now& (0+255),w,b
 37570  0043FA  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37571  0043FC  A4D8               	btfss	status,2,c
 37572  0043FE  D002               	goto	l2730
 37573                           
 37574                           ; BSR set to: 0
 37575                           ;octave.c: 89: {
 37576                           ;octave.c: 90: semitone_temp = -1;
 37577  004400  6853               	setf	keyboardTranspose@semitone_temp,c
 37578                           
 37579                           ;octave.c: 91: keyPress = 1;
 37580  004402  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37581  004404                     l2730:
 37582  004404                     l22231:
 37583                           
 37584                           ; BSR set to: 0
 37585                           ;octave.c: 92: }
 37586                           ;octave.c: 93: if(button_state_now == (0x08000000 | 0x00001000))
 37587  004404  0E10               	movlw	16
 37588  004406  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37589  004408  E109               	bnz	l22237
 37590  00440A  0E08               	movlw	8
 37591  00440C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37592  00440E  11D8               	iorwf	_button_state_now& (0+255),w,b
 37593  004410  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37594  004412  A4D8               	btfss	status,2,c
 37595  004414  D003               	goto	l2731
 37596                           
 37597                           ; BSR set to: 0
 37598                           ;octave.c: 94: {
 37599                           ;octave.c: 95: semitone_temp = 0;
 37600  004416  0E00               	movlw	0
 37601  004418  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37602                           
 37603                           ; BSR set to: 0
 37604                           ;octave.c: 96: keyPress = 1;
 37605  00441A  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37606  00441C                     l2731:
 37607  00441C                     l22237:
 37608                           
 37609                           ; BSR set to: 0
 37610                           ;octave.c: 97: }
 37611                           ;octave.c: 98: if(button_state_now == (0x08000000 | 0x00002000))
 37612  00441C  0E20               	movlw	32
 37613  00441E  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37614  004420  E109               	bnz	l22243
 37615  004422  0E08               	movlw	8
 37616  004424  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37617  004426  11D8               	iorwf	_button_state_now& (0+255),w,b
 37618  004428  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37619  00442A  A4D8               	btfss	status,2,c
 37620  00442C  D003               	goto	l2732
 37621                           
 37622                           ; BSR set to: 0
 37623                           ;octave.c: 99: {
 37624                           ;octave.c: 100: semitone_temp = 1;
 37625  00442E  0E01               	movlw	1
 37626  004430  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37627                           
 37628                           ; BSR set to: 0
 37629                           ;octave.c: 101: keyPress = 1;
 37630  004432  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37631  004434                     l2732:
 37632  004434                     l22243:
 37633                           
 37634                           ; BSR set to: 0
 37635                           ;octave.c: 102: }
 37636                           ;octave.c: 103: if(button_state_now == (0x08000000 | 0x00004000))
 37637  004434  0E40               	movlw	64
 37638  004436  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37639  004438  E109               	bnz	l22249
 37640  00443A  0E08               	movlw	8
 37641  00443C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37642  00443E  11D8               	iorwf	_button_state_now& (0+255),w,b
 37643  004440  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37644  004442  A4D8               	btfss	status,2,c
 37645  004444  D003               	goto	l2733
 37646                           
 37647                           ; BSR set to: 0
 37648                           ;octave.c: 104: {
 37649                           ;octave.c: 105: semitone_temp = 2;
 37650  004446  0E02               	movlw	2
 37651  004448  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37652                           
 37653                           ; BSR set to: 0
 37654                           ;octave.c: 106: keyPress = 1;
 37655  00444A  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37656  00444C                     l2733:
 37657  00444C                     l22249:
 37658                           
 37659                           ; BSR set to: 0
 37660                           ;octave.c: 107: }
 37661                           ;octave.c: 108: if(button_state_now == (0x08000000 | 0x00008000))
 37662  00444C  0E80               	movlw	128
 37663  00444E  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37664  004450  E109               	bnz	l22255
 37665  004452  0E08               	movlw	8
 37666  004454  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37667  004456  11D8               	iorwf	_button_state_now& (0+255),w,b
 37668  004458  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37669  00445A  A4D8               	btfss	status,2,c
 37670  00445C  D003               	goto	l2734
 37671                           
 37672                           ; BSR set to: 0
 37673                           ;octave.c: 109: {
 37674                           ;octave.c: 110: semitone_temp = 3;
 37675  00445E  0E03               	movlw	3
 37676  004460  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37677                           
 37678                           ; BSR set to: 0
 37679                           ;octave.c: 111: keyPress = 1;
 37680  004462  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37681  004464                     l2734:
 37682  004464                     l22255:
 37683                           
 37684                           ; BSR set to: 0
 37685                           ;octave.c: 112: }
 37686                           ;octave.c: 113: if(button_state_now == (0x08000000 | 0x00010000))
 37687  004464  05DA               	decf	(_button_state_now+2)& (0+255),w,b
 37688  004466  E109               	bnz	l22261
 37689  004468  0E08               	movlw	8
 37690  00446A  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37691  00446C  11D8               	iorwf	_button_state_now& (0+255),w,b
 37692  00446E  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37693  004470  A4D8               	btfss	status,2,c
 37694  004472  D003               	goto	l2735
 37695                           
 37696                           ; BSR set to: 0
 37697                           ;octave.c: 114: {
 37698                           ;octave.c: 115: semitone_temp = 4;
 37699  004474  0E04               	movlw	4
 37700  004476  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37701                           
 37702                           ; BSR set to: 0
 37703                           ;octave.c: 116: keyPress = 1;
 37704  004478  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37705  00447A                     l2735:
 37706  00447A                     l22261:
 37707                           
 37708                           ; BSR set to: 0
 37709                           ;octave.c: 117: }
 37710                           ;octave.c: 118: if(button_state_now == (0x08000000 | 0x00020000))
 37711  00447A  0E02               	movlw	2
 37712  00447C  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37713  00447E  E109               	bnz	l22267
 37714  004480  0E08               	movlw	8
 37715  004482  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37716  004484  11D8               	iorwf	_button_state_now& (0+255),w,b
 37717  004486  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37718  004488  A4D8               	btfss	status,2,c
 37719  00448A  D003               	goto	l2736
 37720                           
 37721                           ; BSR set to: 0
 37722                           ;octave.c: 119: {
 37723                           ;octave.c: 120: semitone_temp = 5;
 37724  00448C  0E05               	movlw	5
 37725  00448E  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37726                           
 37727                           ; BSR set to: 0
 37728                           ;octave.c: 121: keyPress = 1;
 37729  004490  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37730  004492                     l2736:
 37731  004492                     l22267:
 37732                           
 37733                           ; BSR set to: 0
 37734                           ;octave.c: 122: }
 37735                           ;octave.c: 123: if(button_state_now == (0x08000000 | 0x00040000))
 37736  004492  0E04               	movlw	4
 37737  004494  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37738  004496  E109               	bnz	l22273
 37739  004498  0E08               	movlw	8
 37740  00449A  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37741  00449C  11D8               	iorwf	_button_state_now& (0+255),w,b
 37742  00449E  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37743  0044A0  A4D8               	btfss	status,2,c
 37744  0044A2  D003               	goto	l2737
 37745                           
 37746                           ; BSR set to: 0
 37747                           ;octave.c: 124: {
 37748                           ;octave.c: 125: semitone_temp = 6;
 37749  0044A4  0E06               	movlw	6
 37750  0044A6  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37751                           
 37752                           ; BSR set to: 0
 37753                           ;octave.c: 126: keyPress = 1;
 37754  0044A8  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37755  0044AA                     l2737:
 37756  0044AA                     l22273:
 37757                           
 37758                           ; BSR set to: 0
 37759                           ;octave.c: 127: }
 37760                           ;octave.c: 128: if(button_state_now == (0x08000000 | 0x00080000))
 37761  0044AA  0E08               	movlw	8
 37762  0044AC  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37763  0044AE  E109               	bnz	l22279
 37764  0044B0  0E08               	movlw	8
 37765  0044B2  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37766  0044B4  11D8               	iorwf	_button_state_now& (0+255),w,b
 37767  0044B6  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37768  0044B8  A4D8               	btfss	status,2,c
 37769  0044BA  D003               	goto	l2738
 37770                           
 37771                           ; BSR set to: 0
 37772                           ;octave.c: 129: {
 37773                           ;octave.c: 130: semitone_temp = 7;
 37774  0044BC  0E07               	movlw	7
 37775  0044BE  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37776                           
 37777                           ; BSR set to: 0
 37778                           ;octave.c: 131: keyPress = 1;
 37779  0044C0  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37780  0044C2                     l2738:
 37781  0044C2                     l22279:
 37782                           
 37783                           ; BSR set to: 0
 37784                           ;octave.c: 132: }
 37785                           ;octave.c: 133: if(button_state_now == (0x08000000 | 0x00100000))
 37786  0044C2  0E10               	movlw	16
 37787  0044C4  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37788  0044C6  E109               	bnz	l22285
 37789  0044C8  0E08               	movlw	8
 37790  0044CA  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37791  0044CC  11D8               	iorwf	_button_state_now& (0+255),w,b
 37792  0044CE  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37793  0044D0  A4D8               	btfss	status,2,c
 37794  0044D2  D003               	goto	l2739
 37795                           
 37796                           ; BSR set to: 0
 37797                           ;octave.c: 134: {
 37798                           ;octave.c: 135: semitone_temp = 8;
 37799  0044D4  0E08               	movlw	8
 37800  0044D6  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37801                           
 37802                           ; BSR set to: 0
 37803                           ;octave.c: 136: keyPress = 1;
 37804  0044D8  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37805  0044DA                     l2739:
 37806  0044DA                     l22285:
 37807                           
 37808                           ; BSR set to: 0
 37809                           ;octave.c: 137: }
 37810                           ;octave.c: 138: if(button_state_now == (0x08000000 | 0x00200000))
 37811  0044DA  0E20               	movlw	32
 37812  0044DC  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37813  0044DE  E109               	bnz	l22291
 37814  0044E0  0E08               	movlw	8
 37815  0044E2  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37816  0044E4  11D8               	iorwf	_button_state_now& (0+255),w,b
 37817  0044E6  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37818  0044E8  A4D8               	btfss	status,2,c
 37819  0044EA  D003               	goto	l2740
 37820                           
 37821                           ; BSR set to: 0
 37822                           ;octave.c: 139: {
 37823                           ;octave.c: 140: semitone_temp = 9;
 37824  0044EC  0E09               	movlw	9
 37825  0044EE  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37826                           
 37827                           ; BSR set to: 0
 37828                           ;octave.c: 141: keyPress = 1;
 37829  0044F0  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37830  0044F2                     l2740:
 37831  0044F2                     l22291:
 37832                           
 37833                           ; BSR set to: 0
 37834                           ;octave.c: 142: }
 37835                           ;octave.c: 143: if(button_state_now == (0x08000000 | 0x00400000))
 37836  0044F2  0E40               	movlw	64
 37837  0044F4  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37838  0044F6  E109               	bnz	l22297
 37839  0044F8  0E08               	movlw	8
 37840  0044FA  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37841  0044FC  11D8               	iorwf	_button_state_now& (0+255),w,b
 37842  0044FE  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37843  004500  A4D8               	btfss	status,2,c
 37844  004502  D003               	goto	l2741
 37845                           
 37846                           ; BSR set to: 0
 37847                           ;octave.c: 144: {
 37848                           ;octave.c: 145: semitone_temp = 10;
 37849  004504  0E0A               	movlw	10
 37850  004506  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37851                           
 37852                           ; BSR set to: 0
 37853                           ;octave.c: 146: keyPress = 1;
 37854  004508  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37855  00450A                     l2741:
 37856  00450A                     l22297:
 37857                           
 37858                           ; BSR set to: 0
 37859                           ;octave.c: 147: }
 37860                           ;octave.c: 148: if(button_state_now == (0x08000000 | 0x00800000))
 37861  00450A  0E80               	movlw	128
 37862  00450C  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37863  00450E  E109               	bnz	l22303
 37864  004510  0E08               	movlw	8
 37865  004512  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37866  004514  11D8               	iorwf	_button_state_now& (0+255),w,b
 37867  004516  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37868  004518  A4D8               	btfss	status,2,c
 37869  00451A  D003               	goto	l2742
 37870                           
 37871                           ; BSR set to: 0
 37872                           ;octave.c: 149: {
 37873                           ;octave.c: 150: semitone_temp = 11;
 37874  00451C  0E0B               	movlw	11
 37875  00451E  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37876                           
 37877                           ; BSR set to: 0
 37878                           ;octave.c: 151: keyPress = 1;
 37879  004520  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37880  004522                     l2742:
 37881  004522                     l22303:
 37882                           
 37883                           ; BSR set to: 0
 37884                           ;octave.c: 152: }
 37885                           ;octave.c: 153: if(button_state_now == (0x08000000 | 0x01000000))
 37886  004522  0E09               	movlw	9
 37887  004524  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37888  004526  11D8               	iorwf	_button_state_now& (0+255),w,b
 37889  004528  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37890  00452A  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37891  00452C  A4D8               	btfss	status,2,c
 37892  00452E  D003               	goto	l2743
 37893                           
 37894                           ; BSR set to: 0
 37895                           ;octave.c: 154: {
 37896                           ;octave.c: 155: semitone_temp = 12;
 37897  004530  0E0C               	movlw	12
 37898  004532  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37899                           
 37900                           ; BSR set to: 0
 37901                           ;octave.c: 156: keyPress = 1;
 37902  004534  8632               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37903  004536                     l2743:
 37904                           
 37905                           ; BSR set to: 0
 37906                           ;octave.c: 157: }
 37907                           ;octave.c: 159: if(keyPress == 1) {
 37908                           
 37909                           ; BSR set to: 0
 37910  004536  A632               	btfss	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37911  004538  0012               	return	
 37912                           
 37913                           ; BSR set to: 0
 37914                           ;octave.c: 162: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 37915  00453A  A235               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 37916  00453C  D00E               	goto	l2745
 37917                           
 37918                           ; BSR set to: 0
 37919  00453E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 37920  004540  B4D8               	btfsc	status,2,c
 37921  004542  D00B               	goto	l2745
 37922                           
 37923                           ; BSR set to: 0
 37924                           ;octave.c: 165: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 37925  004544  0E00               	movlw	0
 37926  004546  B034               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 37927  004548  0E01               	movlw	1
 37928  00454A  EC00  F04A         	call	_wait_one_pulse
 37929                           
 37930                           ;octave.c: 169: if(note_off_was_sent == 0) {key_press_release_note_off();}
 37931  00454E  A233               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 37932  004550  ECC9  F02D         	call	_key_press_release_note_off	;wreg free
 37933                           
 37934                           ;octave.c: 172: suppress_note_off = 1;
 37935  004554  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 37936                           
 37937                           ;octave.c: 174: flag1 = 1;
 37938  004556  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 37939                           
 37940                           ;octave.c: 176: flag2 = 1;
 37941  004558  8E32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 37942  00455A                     l2745:
 37943                           
 37944                           ;octave.c: 177: }
 37945                           ;octave.c: 180: if (semitone_temp > 12) {semitone_temp = 12;}
 37946  00455A  5053               	movf	keyboardTranspose@semitone_temp,w,c
 37947  00455C  0A80               	xorlw	128
 37948  00455E  0F73               	addlw	-141
 37949  004560  A0D8               	btfss	status,0,c
 37950  004562  D002               	goto	l2747
 37951  004564  0E0C               	movlw	12
 37952  004566  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37953  004568                     l2747:
 37954                           
 37955                           ;octave.c: 181: if (semitone_temp < -12) {semitone_temp = -12;}
 37956  004568  5053               	movf	keyboardTranspose@semitone_temp,w,c
 37957  00456A  0A80               	xorlw	128
 37958  00456C  0F8C               	addlw	140
 37959  00456E  B0D8               	btfsc	status,0,c
 37960  004570  D002               	goto	l2748
 37961  004572  0EF4               	movlw	244
 37962  004574  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37963  004576                     l2748:
 37964                           
 37965                           ;octave.c: 182: semitone = semitone_temp;
 37966  004576  C053  F0F3         	movff	keyboardTranspose@semitone_temp,_semitone
 37967                           
 37968                           ;octave.c: 183: printThisNumber(semitone);
 37969  00457A  0100               	movlb	0	; () banked
 37970  00457C  51F3               	movf	_semitone& (0+255),w,b
 37971  00457E  6F60               	movwf	printThisNumber@n& (0+255),b
 37972  004580  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 37973  004582  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 37974  004584  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 37975  004586  EC0B  F04B         	call	_printThisNumber	;wreg free
 37976                           
 37977                           ;octave.c: 184: keyPress = 0;
 37978  00458A  9632               	bcf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37979  00458C  0012               	return	
 37980  00458E                     __end_of_keyboardTranspose:
 37981                           	opt stack 0
 37982                           tblptru	equ	0xFF8
 37983                           tblptrh	equ	0xFF7
 37984                           tblptrl	equ	0xFF6
 37985                           tablat	equ	0xFF5
 37986                           prodh	equ	0xFF4
 37987                           prodl	equ	0xFF3
 37988                           intcon	equ	0xFF2
 37989                           intcon2	equ	0xFF1
 37990                           postinc0	equ	0xFEE
 37991                           wreg	equ	0xFE8
 37992                           indf1	equ	0xFE7
 37993                           postdec1	equ	0xFE5
 37994                           fsr1h	equ	0xFE2
 37995                           fsr1l	equ	0xFE1
 37996                           indf2	equ	0xFDF
 37997                           postinc2	equ	0xFDE
 37998                           plusw2	equ	0xFDB
 37999                           fsr2h	equ	0xFDA
 38000                           fsr2l	equ	0xFD9
 38001                           status	equ	0xFD8
 38002                           
 38003 ;; *************** function _wait_one_pulse *****************
 38004 ;; Defined at:
 38005 ;;		line 20 in file "arpeggio.c"
 38006 ;; Parameters:    Size  Location     Type
 38007 ;;  mode            1    wreg     unsigned char 
 38008 ;; Auto vars:     Size  Location     Type
 38009 ;;  mode            1    0[BANK0 ] unsigned char 
 38010 ;; Return value:  Size  Location     Type
 38011 ;;                  1    wreg      void 
 38012 ;; Registers used:
 38013 ;;		wreg, status,2
 38014 ;; Tracked objects:
 38015 ;;		On entry : 0/0
 38016 ;;		On exit  : 0/0
 38017 ;;		Unchanged: 0/0
 38018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38022 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38023 ;;Total ram usage:        1 bytes
 38024 ;; Hardware stack levels used:    1
 38025 ;; Hardware stack levels required when called:    5
 38026 ;; This function calls:
 38027 ;;		Nothing
 38028 ;; This function is called by:
 38029 ;;		_playThisNotePentatonic
 38030 ;;		_playTriad
 38031 ;;		_playSeventh
 38032 ;;		_playThisNote
 38033 ;;		_playThisNote8
 38034 ;;		_playDiatonicTriadMajor
 38035 ;;		_playDiatonicSeventhMajor
 38036 ;;		_playDiatonicTriadMinor
 38037 ;;		_playDiatonicSeventhMinor
 38038 ;;		_keyboardTranspose
 38039 ;;		_processOctave
 38040 ;; This function uses a non-reentrant model
 38041 ;;
 38042                           
 38043                           	psect	text112
 38044  009400                     __ptext112:
 38045                           	opt stack 0
 38046  009400                     _wait_one_pulse:
 38047                           	opt stack 19
 38048                           
 38049                           ;incstack = 0
 38050                           ;wait_one_pulse@mode stored from wreg
 38051  009400  0100               	movlb	0	; () banked
 38052  009402  6F60               	movwf	wait_one_pulse@mode& (0+255),b
 38053                           
 38054                           ;arpeggio.c: 22: lastNoteMode = mode;
 38055  009404  0100               	movlb	0	; () banked
 38056  009406  A160               	btfss	wait_one_pulse@mode& (0+255),0,b
 38057  009408  D002               	goto	u22840
 38058  00940A  8634               	bsf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 38059  00940C  D001               	goto	u22855
 38060  00940E                     u22840:
 38061  00940E  9634               	bcf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 38062  009410                     u22855:
 38063                           
 38064                           ;arpeggio.c: 25: if(lastNoteMode == 0) {
 38065  009410  B634               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 38066  009412  D004               	goto	l5189
 38067                           
 38068                           ;arpeggio.c: 26: finishLastNote = 0;
 38069  009414  9C33               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 38070                           
 38071                           ;arpeggio.c: 27: TIMER_OVERFLOWS = 0;
 38072  009416  0E00               	movlw	0
 38073  009418  6E54               	movwf	_TIMER_OVERFLOWS,c
 38074                           
 38075                           ;arpeggio.c: 28: return;
 38076  00941A  0012               	return	
 38077  00941C                     l5189:
 38078                           
 38079                           ;arpeggio.c: 29: }
 38080                           ;arpeggio.c: 32: if(lastNoteMode == 1) {
 38081  00941C  A634               	btfss	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 38082  00941E  0012               	return	
 38083                           
 38084                           ;arpeggio.c: 33: finishLastNote = 1;
 38085  009420  8C33               	bsf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 38086                           
 38087                           ;arpeggio.c: 34: TMR0ON = 1;
 38088  009422  8ED5               	bsf	4053,7,c	;volatile
 38089  009424  AC33               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 38090  009426  0012               	return	
 38091  009428  D7FD               	goto	l5193
 38092  00942A                     __end_of_wait_one_pulse:
 38093                           	opt stack 0
 38094                           tblptru	equ	0xFF8
 38095                           tblptrh	equ	0xFF7
 38096                           tblptrl	equ	0xFF6
 38097                           tablat	equ	0xFF5
 38098                           prodh	equ	0xFF4
 38099                           prodl	equ	0xFF3
 38100                           intcon	equ	0xFF2
 38101                           intcon2	equ	0xFF1
 38102                           postinc0	equ	0xFEE
 38103                           wreg	equ	0xFE8
 38104                           indf1	equ	0xFE7
 38105                           postdec1	equ	0xFE5
 38106                           fsr1h	equ	0xFE2
 38107                           fsr1l	equ	0xFE1
 38108                           indf2	equ	0xFDF
 38109                           postinc2	equ	0xFDE
 38110                           plusw2	equ	0xFDB
 38111                           fsr2h	equ	0xFDA
 38112                           fsr2l	equ	0xFD9
 38113                           status	equ	0xFD8
 38114                           
 38115 ;; *************** function _printThisNumber *****************
 38116 ;; Defined at:
 38117 ;;		line 21 in file "octave.c"
 38118 ;; Parameters:    Size  Location     Type
 38119 ;;  n               2    0[BANK0 ] int 
 38120 ;; Auto vars:     Size  Location     Type
 38121 ;;		None
 38122 ;; Return value:  Size  Location     Type
 38123 ;;                  1    wreg      void 
 38124 ;; Registers used:
 38125 ;;		wreg, status,2
 38126 ;; Tracked objects:
 38127 ;;		On entry : 0/0
 38128 ;;		On exit  : 0/0
 38129 ;;		Unchanged: 0/0
 38130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38131 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38134 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38135 ;;Total ram usage:        2 bytes
 38136 ;; Hardware stack levels used:    1
 38137 ;; Hardware stack levels required when called:    5
 38138 ;; This function calls:
 38139 ;;		Nothing
 38140 ;; This function is called by:
 38141 ;;		_keyboardTranspose
 38142 ;;		_processOctave
 38143 ;; This function uses a non-reentrant model
 38144 ;;
 38145                           
 38146                           	psect	text113
 38147  009616                     __ptext113:
 38148                           	opt stack 0
 38149  009616                     _printThisNumber:
 38150                           	opt stack 23
 38151                           
 38152                           ;octave.c: 22: DISPLAY_MODE = 0;
 38153                           
 38154                           ;incstack = 0
 38155  009616  0E00               	movlw	0
 38156  009618  6E5A               	movwf	_DISPLAY_MODE,c
 38157                           
 38158                           ;octave.c: 23: DIGIT_MODE = 0;
 38159  00961A  0E00               	movlw	0
 38160  00961C  6E59               	movwf	_DIGIT_MODE,c
 38161                           
 38162                           ;octave.c: 24: number_to_display = n;
 38163  00961E  C060  F05B         	movff	printThisNumber@n,_number_to_display
 38164  009622  C061  F05C         	movff	printThisNumber@n+1,_number_to_display+1
 38165  009626  0012               	return		;funcret
 38166  009628                     __end_of_printThisNumber:
 38167                           	opt stack 0
 38168                           tblptru	equ	0xFF8
 38169                           tblptrh	equ	0xFF7
 38170                           tblptrl	equ	0xFF6
 38171                           tablat	equ	0xFF5
 38172                           prodh	equ	0xFF4
 38173                           prodl	equ	0xFF3
 38174                           intcon	equ	0xFF2
 38175                           intcon2	equ	0xFF1
 38176                           postinc0	equ	0xFEE
 38177                           wreg	equ	0xFE8
 38178                           indf1	equ	0xFE7
 38179                           postdec1	equ	0xFE5
 38180                           fsr1h	equ	0xFE2
 38181                           fsr1l	equ	0xFE1
 38182                           indf2	equ	0xFDF
 38183                           postinc2	equ	0xFDE
 38184                           plusw2	equ	0xFDB
 38185                           fsr2h	equ	0xFDA
 38186                           fsr2l	equ	0xFD9
 38187                           status	equ	0xFD8
 38188                           
 38189 ;; *************** function _key_press_release_note_off *****************
 38190 ;; Defined at:
 38191 ;;		line 110 in file "arpeggio.c"
 38192 ;; Parameters:    Size  Location     Type
 38193 ;;		None
 38194 ;; Auto vars:     Size  Location     Type
 38195 ;;		None
 38196 ;; Return value:  Size  Location     Type
 38197 ;;                  1    wreg      void 
 38198 ;; Registers used:
 38199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 38200 ;; Tracked objects:
 38201 ;;		On entry : 0/0
 38202 ;;		On exit  : 0/0
 38203 ;;		Unchanged: 0/0
 38204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38209 ;;Total ram usage:        0 bytes
 38210 ;; Hardware stack levels used:    1
 38211 ;; Hardware stack levels required when called:    7
 38212 ;; This function calls:
 38213 ;;		_noteOff
 38214 ;; This function is called by:
 38215 ;;		_playThisNotePentatonic
 38216 ;;		_playTriad
 38217 ;;		_playSeventh
 38218 ;;		_playThisNote
 38219 ;;		_playThisNote8
 38220 ;;		_playDiatonicTriadMajor
 38221 ;;		_playDiatonicSeventhMajor
 38222 ;;		_playDiatonicTriadMinor
 38223 ;;		_playDiatonicSeventhMinor
 38224 ;;		_keyboardTranspose
 38225 ;;		_processOctave
 38226 ;; This function uses a non-reentrant model
 38227 ;;
 38228                           
 38229                           	psect	text114
 38230  005B92                     __ptext114:
 38231                           	opt stack 0
 38232  005B92                     _key_press_release_note_off:
 38233                           	opt stack 17
 38234                           
 38235                           ;arpeggio.c: 113: if((startingDirection == UP) && (ARPEGGIO_TYPE == DOWN_UP)){stored_oct
      +                          ave += (OCTAVES - 1);}
 38236                           
 38237                           ;incstack = 0
 38238  005B92  0100               	movlb	0	; () banked
 38239  005B94  51E9               	movf	_startingDirection& (0+255),w,b
 38240  005B96  A4D8               	btfss	status,2,c
 38241  005B98  D006               	goto	l5214
 38242                           
 38243                           ; BSR set to: 0
 38244  005B9A  0E03               	movlw	3
 38245  005B9C  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 38246  005B9E  A4D8               	btfss	status,2,c
 38247  005BA0  D002               	goto	l5214
 38248                           
 38249                           ; BSR set to: 0
 38250  005BA2  05F8               	decf	_OCTAVES& (0+255),w,b
 38251  005BA4  27E7               	addwf	_stored_octave& (0+255),f,b
 38252  005BA6                     l5214:
 38253                           
 38254                           ; BSR set to: 0
 38255                           ;arpeggio.c: 115: if((startingDirection == DOWN) && (ARPEGGIO_TYPE == UP_DOWN)){stored_o
      +                          ctave -= (OCTAVES - 1);}
 38256  005BA6  05E9               	decf	_startingDirection& (0+255),w,b
 38257  005BA8  A4D8               	btfss	status,2,c
 38258  005BAA  D006               	goto	l5215
 38259                           
 38260                           ; BSR set to: 0
 38261  005BAC  0E02               	movlw	2
 38262  005BAE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 38263  005BB0  A4D8               	btfss	status,2,c
 38264  005BB2  D002               	goto	l5215
 38265                           
 38266                           ; BSR set to: 0
 38267  005BB4  05F8               	decf	_OCTAVES& (0+255),w,b
 38268  005BB6  5FE7               	subwf	_stored_octave& (0+255),f,b
 38269  005BB8                     l5215:
 38270                           
 38271                           ; BSR set to: 0
 38272                           ;arpeggio.c: 117: TMR0ON = 0;
 38273                           
 38274                           ; BSR set to: 0
 38275  005BB8  9ED5               	bcf	4053,7,c	;volatile
 38276                           
 38277                           ; BSR set to: 0
 38278                           ;arpeggio.c: 120: static signed char temp;
 38279                           ;arpeggio.c: 121: temp = last_note;
 38280  005BBA  C0E8  F0E2         	movff	_last_note,key_press_release_note_off@temp
 38281                           
 38282                           ; BSR set to: 0
 38283                           ;arpeggio.c: 124: if((last_note != 0)){
 38284  005BBE  51E8               	movf	_last_note& (0+255),w,b
 38285  005BC0  B4D8               	btfsc	status,2,c
 38286  005BC2  D076               	goto	l5218
 38287                           
 38288                           ; BSR set to: 0
 38289                           ;arpeggio.c: 125: if(stored_octave == -3){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           3)) * 12), velocity);}
 38290  005BC4  0EFD               	movlw	253
 38291  005BC6  19E7               	xorwf	_stored_octave& (0+255),w,b
 38292  005BC8  A4D8               	btfss	status,2,c
 38293  005BCA  D00E               	goto	l5219
 38294                           
 38295                           ; BSR set to: 0
 38296  005BCC  51F8               	movf	_OCTAVES& (0+255),w,b
 38297  005BCE  0FFD               	addlw	253
 38298  005BD0  0800               	sublw	0
 38299  005BD2  25F8               	addwf	_OCTAVES& (0+255),w,b
 38300  005BD4  0D0C               	mullw	12
 38301  005BD6  50F3               	movf	prodl,w,c
 38302  005BD8  0800               	sublw	0
 38303  005BDA  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38304  005BDC  6F6B               	movwf	noteOff@pitch& (0+255),b
 38305  005BDE  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38306  005BE2  51F6               	movf	_channel& (0+255),w,b
 38307  005BE4  ECFD  F047         	call	_noteOff
 38308  005BE8                     l5219:
 38309                           
 38310                           ;arpeggio.c: 126: if(stored_octave == -2){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           2)) * 12), velocity);}
 38311  005BE8  0EFE               	movlw	254
 38312  005BEA  0100               	movlb	0	; () banked
 38313  005BEC  19E7               	xorwf	_stored_octave& (0+255),w,b
 38314  005BEE  A4D8               	btfss	status,2,c
 38315  005BF0  D00E               	goto	l5220
 38316                           
 38317                           ; BSR set to: 0
 38318  005BF2  51F8               	movf	_OCTAVES& (0+255),w,b
 38319  005BF4  0FFE               	addlw	254
 38320  005BF6  0800               	sublw	0
 38321  005BF8  25F8               	addwf	_OCTAVES& (0+255),w,b
 38322  005BFA  0D0C               	mullw	12
 38323  005BFC  50F3               	movf	prodl,w,c
 38324  005BFE  0800               	sublw	0
 38325  005C00  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38326  005C02  6F6B               	movwf	noteOff@pitch& (0+255),b
 38327  005C04  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38328  005C08  51F6               	movf	_channel& (0+255),w,b
 38329  005C0A  ECFD  F047         	call	_noteOff
 38330  005C0E                     l5220:
 38331                           
 38332                           ;arpeggio.c: 127: if(stored_octave == -1){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           1)) * 12), velocity);}
 38333  005C0E  0100               	movlb	0	; () banked
 38334  005C10  29E7               	incf	_stored_octave& (0+255),w,b
 38335  005C12  A4D8               	btfss	status,2,c
 38336  005C14  D00D               	goto	l5221
 38337                           
 38338                           ; BSR set to: 0
 38339  005C16  05F8               	decf	_OCTAVES& (0+255),w,b
 38340  005C18  0800               	sublw	0
 38341  005C1A  25F8               	addwf	_OCTAVES& (0+255),w,b
 38342  005C1C  0D0C               	mullw	12
 38343  005C1E  50F3               	movf	prodl,w,c
 38344  005C20  0800               	sublw	0
 38345  005C22  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38346  005C24  6F6B               	movwf	noteOff@pitch& (0+255),b
 38347  005C26  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38348  005C2A  51F6               	movf	_channel& (0+255),w,b
 38349  005C2C  ECFD  F047         	call	_noteOff
 38350  005C30                     l5221:
 38351                           
 38352                           ;arpeggio.c: 129: if(stored_octave == 0){
 38353  005C30  0100               	movlb	0	; () banked
 38354  005C32  51E7               	movf	_stored_octave& (0+255),w,b
 38355  005C34  A4D8               	btfss	status,2,c
 38356  005C36  D007               	goto	l5222
 38357                           
 38358                           ; BSR set to: 0
 38359                           ;arpeggio.c: 130: noteOff(channel, temp, velocity);
 38360  005C38  C0E2  F06B         	movff	key_press_release_note_off@temp,noteOff@pitch
 38361  005C3C  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38362  005C40  51F6               	movf	_channel& (0+255),w,b
 38363  005C42  ECFD  F047         	call	_noteOff
 38364  005C46                     l5222:
 38365                           
 38366                           ;arpeggio.c: 131: }
 38367                           ;arpeggio.c: 133: if(stored_octave == 1){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          1)) * 12), velocity);}
 38368  005C46  0100               	movlb	0	; () banked
 38369  005C48  05E7               	decf	_stored_octave& (0+255),w,b
 38370  005C4A  A4D8               	btfss	status,2,c
 38371  005C4C  D00C               	goto	l5223
 38372                           
 38373                           ; BSR set to: 0
 38374  005C4E  05F8               	decf	_OCTAVES& (0+255),w,b
 38375  005C50  0800               	sublw	0
 38376  005C52  25F8               	addwf	_OCTAVES& (0+255),w,b
 38377  005C54  0D0C               	mullw	12
 38378  005C56  50F3               	movf	prodl,w,c
 38379  005C58  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38380  005C5A  6F6B               	movwf	noteOff@pitch& (0+255),b
 38381  005C5C  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38382  005C60  51F6               	movf	_channel& (0+255),w,b
 38383  005C62  ECFD  F047         	call	_noteOff
 38384  005C66                     l5223:
 38385                           
 38386                           ;arpeggio.c: 134: if(stored_octave == 2){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          2)) * 12), velocity);}
 38387  005C66  0E02               	movlw	2
 38388  005C68  0100               	movlb	0	; () banked
 38389  005C6A  19E7               	xorwf	_stored_octave& (0+255),w,b
 38390  005C6C  A4D8               	btfss	status,2,c
 38391  005C6E  D00D               	goto	l5224
 38392                           
 38393                           ; BSR set to: 0
 38394  005C70  51F8               	movf	_OCTAVES& (0+255),w,b
 38395  005C72  0FFE               	addlw	254
 38396  005C74  0800               	sublw	0
 38397  005C76  25F8               	addwf	_OCTAVES& (0+255),w,b
 38398  005C78  0D0C               	mullw	12
 38399  005C7A  50F3               	movf	prodl,w,c
 38400  005C7C  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38401  005C7E  6F6B               	movwf	noteOff@pitch& (0+255),b
 38402  005C80  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38403  005C84  51F6               	movf	_channel& (0+255),w,b
 38404  005C86  ECFD  F047         	call	_noteOff
 38405  005C8A                     l5224:
 38406                           
 38407                           ;arpeggio.c: 135: if(stored_octave == 3){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          3)) * 12), velocity);}
 38408  005C8A  0E03               	movlw	3
 38409  005C8C  0100               	movlb	0	; () banked
 38410  005C8E  19E7               	xorwf	_stored_octave& (0+255),w,b
 38411  005C90  A4D8               	btfss	status,2,c
 38412  005C92  D00D               	goto	l5225
 38413                           
 38414                           ; BSR set to: 0
 38415  005C94  51F8               	movf	_OCTAVES& (0+255),w,b
 38416  005C96  0FFD               	addlw	253
 38417  005C98  0800               	sublw	0
 38418  005C9A  25F8               	addwf	_OCTAVES& (0+255),w,b
 38419  005C9C  0D0C               	mullw	12
 38420  005C9E  50F3               	movf	prodl,w,c
 38421  005CA0  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38422  005CA2  6F6B               	movwf	noteOff@pitch& (0+255),b
 38423  005CA4  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38424  005CA8  51F6               	movf	_channel& (0+255),w,b
 38425  005CAA  ECFD  F047         	call	_noteOff
 38426  005CAE                     l5225:
 38427                           
 38428                           ;arpeggio.c: 137: note_off_was_sent = 1;
 38429  005CAE  8233               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38430  005CB0                     l5218:
 38431                           
 38432                           ;arpeggio.c: 138: }
 38433                           ;arpeggio.c: 141: if((last_note == 0) && (note_off_was_sent == 0) && (keyboard.SW1 == 1)
      +                          ){noteOff(channel, stored_octave * 12, velocity);note_off_was_sent = 1;}
 38434  005CB0  0100               	movlb	0	; () banked
 38435  005CB2  51E8               	movf	_last_note& (0+255),w,b
 38436  005CB4  B4D8               	btfsc	status,2,c
 38437                           
 38438                           ; BSR set to: 0
 38439  005CB6  B233               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38440  005CB8  D00C               	goto	l5226
 38441                           
 38442                           ; BSR set to: 0
 38443  005CBA  A1D0               	btfss	_keyboard& (0+255),0,b
 38444  005CBC  D00A               	goto	l5226
 38445                           
 38446                           ; BSR set to: 0
 38447  005CBE  51E7               	movf	_stored_octave& (0+255),w,b
 38448  005CC0  0D0C               	mullw	12
 38449  005CC2  CFF3 F06B          	movff	prodl,noteOff@pitch
 38450  005CC6  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38451  005CCA  51F6               	movf	_channel& (0+255),w,b
 38452  005CCC  ECFD  F047         	call	_noteOff
 38453  005CD0  8233               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38454  005CD2                     l5226:
 38455                           
 38456                           ;arpeggio.c: 142: if((last_note == 0) && (note_off_was_sent == 0)){noteOff(channel, stor
      +                          ed_octave * 12, velocity);note_off_was_sent = 1;}
 38457  005CD2  0100               	movlb	0	; () banked
 38458  005CD4  51E8               	movf	_last_note& (0+255),w,b
 38459  005CD6  B4D8               	btfsc	status,2,c
 38460                           
 38461                           ; BSR set to: 0
 38462  005CD8  B233               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38463  005CDA  D00A               	goto	l5227
 38464                           
 38465                           ; BSR set to: 0
 38466  005CDC  51E7               	movf	_stored_octave& (0+255),w,b
 38467  005CDE  0D0C               	mullw	12
 38468  005CE0  CFF3 F06B          	movff	prodl,noteOff@pitch
 38469  005CE4  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38470  005CE8  51F6               	movf	_channel& (0+255),w,b
 38471  005CEA  ECFD  F047         	call	_noteOff
 38472  005CEE  8233               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38473  005CF0                     l5227:
 38474                           
 38475                           ;arpeggio.c: 144: TMR0ON = 1;
 38476  005CF0  8ED5               	bsf	4053,7,c	;volatile
 38477  005CF2  0012               	return		;funcret
 38478  005CF4                     __end_of_key_press_release_note_off:
 38479                           	opt stack 0
 38480                           tblptru	equ	0xFF8
 38481                           tblptrh	equ	0xFF7
 38482                           tblptrl	equ	0xFF6
 38483                           tablat	equ	0xFF5
 38484                           prodh	equ	0xFF4
 38485                           prodl	equ	0xFF3
 38486                           intcon	equ	0xFF2
 38487                           intcon2	equ	0xFF1
 38488                           postinc0	equ	0xFEE
 38489                           wreg	equ	0xFE8
 38490                           indf1	equ	0xFE7
 38491                           postdec1	equ	0xFE5
 38492                           fsr1h	equ	0xFE2
 38493                           fsr1l	equ	0xFE1
 38494                           indf2	equ	0xFDF
 38495                           postinc2	equ	0xFDE
 38496                           plusw2	equ	0xFDB
 38497                           fsr2h	equ	0xFDA
 38498                           fsr2l	equ	0xFD9
 38499                           status	equ	0xFD8
 38500                           
 38501 ;; *************** function _noteOff *****************
 38502 ;; Defined at:
 38503 ;;		line 66 in file "midi.c"
 38504 ;; Parameters:    Size  Location     Type
 38505 ;;  channel         1    wreg     unsigned char 
 38506 ;;  pitch           1   11[BANK0 ] unsigned char 
 38507 ;;  velocity        1   12[BANK0 ] unsigned char 
 38508 ;; Auto vars:     Size  Location     Type
 38509 ;;  channel         1   13[BANK0 ] unsigned char 
 38510 ;; Return value:  Size  Location     Type
 38511 ;;                  1    wreg      void 
 38512 ;; Registers used:
 38513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 38514 ;; Tracked objects:
 38515 ;;		On entry : 0/0
 38516 ;;		On exit  : 0/0
 38517 ;;		Unchanged: 0/0
 38518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38519 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38522 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38523 ;;Total ram usage:        3 bytes
 38524 ;; Hardware stack levels used:    1
 38525 ;; Hardware stack levels required when called:    6
 38526 ;; This function calls:
 38527 ;;		_sendOut
 38528 ;;		_sendUSB
 38529 ;; This function is called by:
 38530 ;;		_noteOn
 38531 ;;		_noteOnDrum
 38532 ;;		_playThisNotePentatonic
 38533 ;;		_playTriad
 38534 ;;		_playSeventh
 38535 ;;		_playThisNote
 38536 ;;		_playThisNote8
 38537 ;;		_playDiatonicTriadMajor
 38538 ;;		_playDiatonicSeventhMajor
 38539 ;;		_playDiatonicTriadMinor
 38540 ;;		_playDiatonicSeventhMinor
 38541 ;;		_key_press_release_note_off
 38542 ;;		_keyboard_all_note
 38543 ;;		_keyboard_eight_note
 38544 ;; This function uses a non-reentrant model
 38545 ;;
 38546                           
 38547                           	psect	text115
 38548  008FFA                     __ptext115:
 38549                           	opt stack 0
 38550  008FFA                     _noteOff:
 38551                           	opt stack 17
 38552                           
 38553                           ;incstack = 0
 38554                           ;noteOff@channel stored from wreg
 38555  008FFA  0100               	movlb	0	; () banked
 38556  008FFC  6F6D               	movwf	noteOff@channel& (0+255),b
 38557                           
 38558                           ;midi.c: 68: noteNumber = pitch + semitone + ((octave + 1)* 12);
 38559  008FFE  0100               	movlb	0	; () banked
 38560  009000  29FC               	incf	_octave& (0+255),w,b
 38561  009002  0D0C               	mullw	12
 38562  009004  50F3               	movf	prodl,w,c
 38563  009006  256B               	addwf	noteOff@pitch& (0+255),w,b
 38564  009008  25F3               	addwf	_semitone& (0+255),w,b
 38565  00900A  6FF4               	movwf	_noteNumber& (0+255),b
 38566                           
 38567                           ; BSR set to: 0
 38568                           ;midi.c: 69: statusByte = channel | note_off;
 38569  00900C  516D               	movf	noteOff@channel& (0+255),w,b
 38570  00900E  0980               	iorlw	128
 38571  009010  6FF5               	movwf	_statusByte& (0+255),b
 38572                           
 38573                           ; BSR set to: 0
 38574                           ;midi.c: 73: sendUSB(statusByte, noteNumber, velocity);
 38575  009012  C0F4  F060         	movff	_noteNumber,sendUSB@message2
 38576  009016  C06C  F061         	movff	noteOff@velocity,sendUSB@message3
 38577  00901A  51F5               	movf	_statusByte& (0+255),w,b
 38578  00901C  ECC0  F039         	call	_sendUSB
 38579                           
 38580                           ;midi.c: 76: sendOut(statusByte);
 38581  009020  0100               	movlb	0	; () banked
 38582  009022  51F5               	movf	_statusByte& (0+255),w,b
 38583  009024  ECCD  F04A         	call	_sendOut
 38584                           
 38585                           ;midi.c: 77: sendOut(noteNumber);
 38586  009028  0100               	movlb	0	; () banked
 38587  00902A  51F4               	movf	_noteNumber& (0+255),w,b
 38588  00902C  ECCD  F04A         	call	_sendOut
 38589                           
 38590                           ;midi.c: 78: sendOut(velocity);
 38591  009030  0100               	movlb	0	; () banked
 38592  009032  516C               	movf	noteOff@velocity& (0+255),w,b
 38593  009034  ECCD  F04A         	call	_sendOut
 38594  009038  0012               	return		;funcret
 38595  00903A                     __end_of_noteOff:
 38596                           	opt stack 0
 38597                           tblptru	equ	0xFF8
 38598                           tblptrh	equ	0xFF7
 38599                           tblptrl	equ	0xFF6
 38600                           tablat	equ	0xFF5
 38601                           prodh	equ	0xFF4
 38602                           prodl	equ	0xFF3
 38603                           intcon	equ	0xFF2
 38604                           intcon2	equ	0xFF1
 38605                           postinc0	equ	0xFEE
 38606                           wreg	equ	0xFE8
 38607                           indf1	equ	0xFE7
 38608                           postdec1	equ	0xFE5
 38609                           fsr1h	equ	0xFE2
 38610                           fsr1l	equ	0xFE1
 38611                           indf2	equ	0xFDF
 38612                           postinc2	equ	0xFDE
 38613                           plusw2	equ	0xFDB
 38614                           fsr2h	equ	0xFDA
 38615                           fsr2l	equ	0xFD9
 38616                           status	equ	0xFD8
 38617                           
 38618 ;; *************** function _buttonInputsSerial *****************
 38619 ;; Defined at:
 38620 ;;		line 264 in file "main.c"
 38621 ;; Parameters:    Size  Location     Type
 38622 ;;		None
 38623 ;; Auto vars:     Size  Location     Type
 38624 ;;  i               1    5[BANK0 ] unsigned char 
 38625 ;;  i               1    4[BANK0 ] unsigned char 
 38626 ;; Return value:  Size  Location     Type
 38627 ;;                  1    wreg      void 
 38628 ;; Registers used:
 38629 ;;		wreg, status,2, status,0, cstack
 38630 ;; Tracked objects:
 38631 ;;		On entry : 0/0
 38632 ;;		On exit  : 0/0
 38633 ;;		Unchanged: 0/0
 38634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38636 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38637 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38638 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38639 ;;Total ram usage:        6 bytes
 38640 ;; Hardware stack levels used:    1
 38641 ;; Hardware stack levels required when called:    6
 38642 ;; This function calls:
 38643 ;;		_clock
 38644 ;;		_load
 38645 ;; This function is called by:
 38646 ;;		_digitalInputs
 38647 ;; This function uses a non-reentrant model
 38648 ;;
 38649                           
 38650                           	psect	text116
 38651  00825C                     __ptext116:
 38652                           	opt stack 0
 38653  00825C                     _buttonInputsSerial:
 38654                           	opt stack 23
 38655                           
 38656                           ;main.c: 266: button_state_now = 0;
 38657                           
 38658                           ;incstack = 0
 38659  00825C  0E00               	movlw	0
 38660  00825E  0100               	movlb	0	; () banked
 38661  008260  6FD8               	movwf	_button_state_now& (0+255),b
 38662  008262  0E00               	movlw	0
 38663  008264  6FD9               	movwf	(_button_state_now+1)& (0+255),b
 38664  008266  0E00               	movlw	0
 38665  008268  6FDA               	movwf	(_button_state_now+2)& (0+255),b
 38666  00826A  0E00               	movlw	0
 38667  00826C  6FDB               	movwf	(_button_state_now+3)& (0+255),b
 38668                           
 38669                           ;main.c: 267: drum_button_state_now = 0;
 38670  00826E  0E00               	movlw	0
 38671  008270  6FEE               	movwf	_drum_button_state_now& (0+255),b
 38672                           
 38673                           ; BSR set to: 0
 38674                           ;main.c: 268: load();
 38675  008272  EC34  F04B         	call	_load	;wreg free
 38676                           
 38677                           ;main.c: 271: for (unsigned char i = 0;i<12;i++){
 38678  008276  0E00               	movlw	0
 38679  008278  0100               	movlb	0	; () banked
 38680  00827A  6F64               	movwf	buttonInputsSerial@i& (0+255),b
 38681  00827C                     l23053:
 38682                           
 38683                           ; BSR set to: 0
 38684  00827C  0E0B               	movlw	11
 38685  00827E  6564               	cpfsgt	buttonInputsSerial@i& (0+255),b
 38686  008280  D001               	goto	l4778
 38687  008282  D009               	goto	u37670
 38688  008284                     l4778:
 38689                           
 38690                           ; BSR set to: 0
 38691                           ;main.c: 272: drum_button_state_now = (drum_button_state_now << 1) | (RC4);
 38692                           
 38693                           ; BSR set to: 0
 38694  008284  90D8               	bcf	status,0,c
 38695  008286  B882               	btfsc	3970,4,c	;volatile
 38696  008288  80D8               	bsf	status,0,c
 38697  00828A  37EE               	rlcf	_drum_button_state_now& (0+255),f,b
 38698                           
 38699                           ; BSR set to: 0
 38700                           ;main.c: 273: clock();
 38701  00828C  EC37  F04B         	call	_clock	;wreg free
 38702  008290  0100               	movlb	0	; () banked
 38703  008292  2B64               	incf	buttonInputsSerial@i& (0+255),f,b
 38704  008294  D7F3               	goto	l23053
 38705  008296                     u37670:
 38706                           
 38707                           ; BSR set to: 0
 38708                           ;main.c: 274: }
 38709                           ;main.c: 277: for (unsigned char i = 0;i<28;i++){
 38710                           
 38711                           ; BSR set to: 0
 38712  008296  0E00               	movlw	0
 38713  008298  6F65               	movwf	buttonInputsSerial@i_4382& (0+255),b
 38714  00829A                     l23067:
 38715                           
 38716                           ; BSR set to: 0
 38717  00829A  0E1B               	movlw	27
 38718  00829C  6565               	cpfsgt	buttonInputsSerial@i_4382& (0+255),b
 38719  00829E  D001               	goto	l4780
 38720  0082A0  0012               	return	
 38721  0082A2                     l4780:
 38722                           
 38723                           ; BSR set to: 0
 38724                           ;main.c: 278: button_state_now = (button_state_now << 1) | (RC4);
 38725                           
 38726                           ; BSR set to: 0
 38727  0082A2  90D8               	bcf	status,0,c
 38728  0082A4  35D8               	rlcf	_button_state_now& (0+255),w,b
 38729  0082A6  6F60               	movwf	??_buttonInputsSerial& (0+255),b
 38730  0082A8  35D9               	rlcf	(_button_state_now+1)& (0+255),w,b
 38731  0082AA  6F61               	movwf	(??_buttonInputsSerial+1)& (0+255),b
 38732  0082AC  35DA               	rlcf	(_button_state_now+2)& (0+255),w,b
 38733  0082AE  6F62               	movwf	(??_buttonInputsSerial+2)& (0+255),b
 38734  0082B0  35DB               	rlcf	(_button_state_now+3)& (0+255),w,b
 38735  0082B2  6F63               	movwf	(??_buttonInputsSerial+3)& (0+255),b
 38736  0082B4  A882               	btfss	3970,4,c	;volatile
 38737  0082B6  D002               	goto	u37690
 38738  0082B8  0E01               	movlw	1
 38739  0082BA  D001               	goto	u37700
 38740  0082BC                     u37690:
 38741  0082BC  0E00               	movlw	0
 38742  0082BE                     u37700:
 38743  0082BE  1160               	iorwf	??_buttonInputsSerial& (0+255),w,b
 38744  0082C0  6FD8               	movwf	_button_state_now& (0+255),b
 38745  0082C2  5161               	movf	(??_buttonInputsSerial+1)& (0+255),w,b
 38746  0082C4  6FD9               	movwf	(_button_state_now+1)& (0+255),b
 38747  0082C6  5162               	movf	(??_buttonInputsSerial+2)& (0+255),w,b
 38748  0082C8  6FDA               	movwf	(_button_state_now+2)& (0+255),b
 38749  0082CA  5163               	movf	(??_buttonInputsSerial+3)& (0+255),w,b
 38750  0082CC  6FDB               	movwf	(_button_state_now+3)& (0+255),b
 38751                           
 38752                           ; BSR set to: 0
 38753                           ;main.c: 279: clock();
 38754  0082CE  EC37  F04B         	call	_clock	;wreg free
 38755  0082D2  0100               	movlb	0	; () banked
 38756  0082D4  2B65               	incf	buttonInputsSerial@i_4382& (0+255),f,b
 38757  0082D6  D7E1               	goto	l23067
 38758  0082D8                     __end_of_buttonInputsSerial:
 38759                           	opt stack 0
 38760                           tblptru	equ	0xFF8
 38761                           tblptrh	equ	0xFF7
 38762                           tblptrl	equ	0xFF6
 38763                           tablat	equ	0xFF5
 38764                           prodh	equ	0xFF4
 38765                           prodl	equ	0xFF3
 38766                           intcon	equ	0xFF2
 38767                           intcon2	equ	0xFF1
 38768                           postinc0	equ	0xFEE
 38769                           wreg	equ	0xFE8
 38770                           indf1	equ	0xFE7
 38771                           postdec1	equ	0xFE5
 38772                           fsr1h	equ	0xFE2
 38773                           fsr1l	equ	0xFE1
 38774                           indf2	equ	0xFDF
 38775                           postinc2	equ	0xFDE
 38776                           plusw2	equ	0xFDB
 38777                           fsr2h	equ	0xFDA
 38778                           fsr2l	equ	0xFD9
 38779                           status	equ	0xFD8
 38780                           
 38781 ;; *************** function _load *****************
 38782 ;; Defined at:
 38783 ;;		line 251 in file "main.c"
 38784 ;; Parameters:    Size  Location     Type
 38785 ;;		None
 38786 ;; Auto vars:     Size  Location     Type
 38787 ;;		None
 38788 ;; Return value:  Size  Location     Type
 38789 ;;                  1    wreg      void 
 38790 ;; Registers used:
 38791 ;;		None
 38792 ;; Tracked objects:
 38793 ;;		On entry : 0/0
 38794 ;;		On exit  : 0/0
 38795 ;;		Unchanged: 0/0
 38796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38801 ;;Total ram usage:        0 bytes
 38802 ;; Hardware stack levels used:    1
 38803 ;; Hardware stack levels required when called:    5
 38804 ;; This function calls:
 38805 ;;		Nothing
 38806 ;; This function is called by:
 38807 ;;		_buttonInputsSerial
 38808 ;; This function uses a non-reentrant model
 38809 ;;
 38810                           
 38811                           	psect	text117
 38812  009668                     __ptext117:
 38813                           	opt stack 0
 38814  009668                     _load:
 38815                           	opt stack 23
 38816                           
 38817                           ;main.c: 252: RB1 = 0;
 38818                           
 38819                           ; BSR set to: 0
 38820                           ;incstack = 0
 38821  009668  9281               	bcf	3969,1,c	;volatile
 38822                           
 38823                           ;main.c: 254: RB1 = 1;
 38824  00966A  8281               	bsf	3969,1,c	;volatile
 38825  00966C  0012               	return		;funcret
 38826  00966E                     __end_of_load:
 38827                           	opt stack 0
 38828                           tblptru	equ	0xFF8
 38829                           tblptrh	equ	0xFF7
 38830                           tblptrl	equ	0xFF6
 38831                           tablat	equ	0xFF5
 38832                           prodh	equ	0xFF4
 38833                           prodl	equ	0xFF3
 38834                           intcon	equ	0xFF2
 38835                           intcon2	equ	0xFF1
 38836                           postinc0	equ	0xFEE
 38837                           wreg	equ	0xFE8
 38838                           indf1	equ	0xFE7
 38839                           postdec1	equ	0xFE5
 38840                           fsr1h	equ	0xFE2
 38841                           fsr1l	equ	0xFE1
 38842                           indf2	equ	0xFDF
 38843                           postinc2	equ	0xFDE
 38844                           plusw2	equ	0xFDB
 38845                           fsr2h	equ	0xFDA
 38846                           fsr2l	equ	0xFD9
 38847                           status	equ	0xFD8
 38848                           
 38849 ;; *************** function _clock *****************
 38850 ;; Defined at:
 38851 ;;		line 258 in file "main.c"
 38852 ;; Parameters:    Size  Location     Type
 38853 ;;		None
 38854 ;; Auto vars:     Size  Location     Type
 38855 ;;		None
 38856 ;; Return value:  Size  Location     Type
 38857 ;;                  1    wreg      void 
 38858 ;; Registers used:
 38859 ;;		None
 38860 ;; Tracked objects:
 38861 ;;		On entry : 0/0
 38862 ;;		On exit  : 0/0
 38863 ;;		Unchanged: 0/0
 38864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38869 ;;Total ram usage:        0 bytes
 38870 ;; Hardware stack levels used:    1
 38871 ;; Hardware stack levels required when called:    5
 38872 ;; This function calls:
 38873 ;;		Nothing
 38874 ;; This function is called by:
 38875 ;;		_buttonInputsSerial
 38876 ;; This function uses a non-reentrant model
 38877 ;;
 38878                           
 38879                           	psect	text118
 38880  00966E                     __ptext118:
 38881                           	opt stack 0
 38882  00966E                     _clock:
 38883                           	opt stack 23
 38884                           
 38885                           ;main.c: 259: RC5 = 1;
 38886                           
 38887                           ;incstack = 0
 38888  00966E  8A82               	bsf	3970,5,c	;volatile
 38889                           
 38890                           ;main.c: 260: RC5 = 0;
 38891  009670  9A82               	bcf	3970,5,c	;volatile
 38892  009672  0012               	return		;funcret
 38893  009674                     __end_of_clock:
 38894                           	opt stack 0
 38895                           tblptru	equ	0xFF8
 38896                           tblptrh	equ	0xFF7
 38897                           tblptrl	equ	0xFF6
 38898                           tablat	equ	0xFF5
 38899                           prodh	equ	0xFF4
 38900                           prodl	equ	0xFF3
 38901                           intcon	equ	0xFF2
 38902                           intcon2	equ	0xFF1
 38903                           postinc0	equ	0xFEE
 38904                           wreg	equ	0xFE8
 38905                           indf1	equ	0xFE7
 38906                           postdec1	equ	0xFE5
 38907                           fsr1h	equ	0xFE2
 38908                           fsr1l	equ	0xFE1
 38909                           indf2	equ	0xFDF
 38910                           postinc2	equ	0xFDE
 38911                           plusw2	equ	0xFDB
 38912                           fsr2h	equ	0xFDA
 38913                           fsr2l	equ	0xFD9
 38914                           status	equ	0xFD8
 38915                           
 38916 ;; *************** function _analogInputs *****************
 38917 ;; Defined at:
 38918 ;;		line 284 in file "main.c"
 38919 ;; Parameters:    Size  Location     Type
 38920 ;;		None
 38921 ;; Auto vars:     Size  Location     Type
 38922 ;;		None
 38923 ;; Return value:  Size  Location     Type
 38924 ;;                  1    wreg      void 
 38925 ;; Registers used:
 38926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 38927 ;; Tracked objects:
 38928 ;;		On entry : 0/0
 38929 ;;		On exit  : 0/0
 38930 ;;		Unchanged: 0/0
 38931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38936 ;;Total ram usage:        0 bytes
 38937 ;; Hardware stack levels used:    1
 38938 ;; Hardware stack levels required when called:    9
 38939 ;; This function calls:
 38940 ;;		_readPotentiometers
 38941 ;; This function is called by:
 38942 ;;		_main
 38943 ;; This function uses a non-reentrant model
 38944 ;;
 38945                           
 38946                           	psect	text119
 38947  009674                     __ptext119:
 38948                           	opt stack 0
 38949  009674                     _analogInputs:
 38950                           	opt stack 21
 38951                           
 38952                           ;main.c: 285: readPotentiometers();
 38953                           
 38954                           ;incstack = 0
 38955  009674  ECA6  F008         	call	_readPotentiometers	;wreg free
 38956  009678  0012               	return		;funcret
 38957  00967A                     __end_of_analogInputs:
 38958                           	opt stack 0
 38959                           tblptru	equ	0xFF8
 38960                           tblptrh	equ	0xFF7
 38961                           tblptrl	equ	0xFF6
 38962                           tablat	equ	0xFF5
 38963                           prodh	equ	0xFF4
 38964                           prodl	equ	0xFF3
 38965                           intcon	equ	0xFF2
 38966                           intcon2	equ	0xFF1
 38967                           postinc0	equ	0xFEE
 38968                           wreg	equ	0xFE8
 38969                           indf1	equ	0xFE7
 38970                           postdec1	equ	0xFE5
 38971                           fsr1h	equ	0xFE2
 38972                           fsr1l	equ	0xFE1
 38973                           indf2	equ	0xFDF
 38974                           postinc2	equ	0xFDE
 38975                           plusw2	equ	0xFDB
 38976                           fsr2h	equ	0xFDA
 38977                           fsr2l	equ	0xFD9
 38978                           status	equ	0xFD8
 38979                           
 38980 ;; *************** function _readPotentiometers *****************
 38981 ;; Defined at:
 38982 ;;		line 34 in file "potentiometers.c"
 38983 ;; Parameters:    Size  Location     Type
 38984 ;;		None
 38985 ;; Auto vars:     Size  Location     Type
 38986 ;;  i               1  109[BANK0 ] unsigned char 
 38987 ;;  i               1  107[BANK0 ] unsigned char 
 38988 ;;  i               1  108[BANK0 ] unsigned char 
 38989 ;; Return value:  Size  Location     Type
 38990 ;;                  1    wreg      void 
 38991 ;; Registers used:
 38992 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 38993 ;; Tracked objects:
 38994 ;;		On entry : 0/0
 38995 ;;		On exit  : 0/0
 38996 ;;		Unchanged: 0/0
 38997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38999 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39000 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39001 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39002 ;;Total ram usage:       12 bytes
 39003 ;; Hardware stack levels used:    1
 39004 ;; Hardware stack levels required when called:    8
 39005 ;; This function calls:
 39006 ;;		_ADC_Read
 39007 ;;		___fladd
 39008 ;;		___flmul
 39009 ;;		___flneg
 39010 ;;		___fltol
 39011 ;;		___xxtofl
 39012 ;;		_map
 39013 ;;		_processPotentiometers
 39014 ;; This function is called by:
 39015 ;;		_analogInputs
 39016 ;; This function uses a non-reentrant model
 39017 ;;
 39018                           
 39019                           	psect	text120
 39020  00114C                     __ptext120:
 39021                           	opt stack 0
 39022  00114C                     _readPotentiometers:
 39023                           	opt stack 21
 39024                           
 39025                           ;potentiometers.c: 36: static __bit FIRST_READING;
 39026                           ;potentiometers.c: 40: for(unsigned char i=0;i<16;i++){
 39027                           
 39028                           ;incstack = 0
 39029  00114C  0E00               	movlw	0
 39030  00114E  0100               	movlb	0	; () banked
 39031  001150  6FCC               	movwf	readPotentiometers@i& (0+255),b
 39032  001152                     l22955:
 39033                           
 39034                           ; BSR set to: 0
 39035  001152  0E0F               	movlw	15
 39036  001154  65CC               	cpfsgt	readPotentiometers@i& (0+255),b
 39037  001156  D001               	goto	l3877
 39038  001158  D028               	goto	u37470
 39039  00115A                     l3877:
 39040                           
 39041                           ; BSR set to: 0
 39042                           ;potentiometers.c: 42: potentiometer_raw[i] = ADC_Read(i);
 39043                           
 39044                           ; BSR set to: 0
 39045  00115A  51CC               	movf	readPotentiometers@i& (0+255),w,b
 39046  00115C  EC0B  F049         	call	_ADC_Read
 39047  001160  0100               	movlb	0	; () banked
 39048  001162  51CC               	movf	readPotentiometers@i& (0+255),w,b
 39049  001164  0D02               	mullw	2
 39050  001166  0E60               	movlw	low _potentiometer_raw
 39051  001168  24F3               	addwf	prodl,w,c
 39052  00116A  6ED9               	movwf	fsr2l,c
 39053  00116C  0E02               	movlw	high _potentiometer_raw
 39054  00116E  20F4               	addwfc	prodh,w,c
 39055  001170  6EDA               	movwf	fsr2h,c
 39056  001172  C060  FFDE         	movff	?_ADC_Read,postinc2
 39057  001176  C061  FFDD         	movff	?_ADC_Read+1,postdec2
 39058                           
 39059                           ; BSR set to: 0
 39060                           ;potentiometers.c: 51: if (FIRST_READING == 0) {
 39061  00117A  B032               	btfsc	readPotentiometers@FIRST_READING/(0+8),readPotentiometers@FIRST_READING& (0+7),c
 39062  00117C  D014               	goto	l3879
 39063                           
 39064                           ; BSR set to: 0
 39065                           ;potentiometers.c: 52: ema_sum[i] = potentiometer_raw[i];
 39066  00117E  51CC               	movf	readPotentiometers@i& (0+255),w,b
 39067  001180  0D02               	mullw	2
 39068  001182  0E60               	movlw	low _potentiometer_raw
 39069  001184  24F3               	addwf	prodl,w,c
 39070  001186  6ED9               	movwf	fsr2l,c
 39071  001188  0E02               	movlw	high _potentiometer_raw
 39072  00118A  20F4               	addwfc	prodh,w,c
 39073  00118C  6EDA               	movwf	fsr2h,c
 39074  00118E  51CC               	movf	readPotentiometers@i& (0+255),w,b
 39075  001190  0D02               	mullw	2
 39076  001192  0E40               	movlw	low _ema_sum
 39077  001194  24F3               	addwf	prodl,w,c
 39078  001196  6EE1               	movwf	fsr1l,c
 39079  001198  0E02               	movlw	high _ema_sum
 39080  00119A  20F4               	addwfc	prodh,w,c
 39081  00119C  6EE2               	movwf	fsr1h,c
 39082  00119E  CFDE FFE6          	movff	postinc2,postinc1
 39083  0011A2  CFDD FFE5          	movff	postdec2,postdec1
 39084  0011A6                     l3879:
 39085                           
 39086                           ; BSR set to: 0
 39087                           
 39088                           ; BSR set to: 0
 39089  0011A6  2BCC               	incf	readPotentiometers@i& (0+255),f,b
 39090  0011A8  D7D4               	goto	l22955
 39091  0011AA                     u37470:
 39092                           
 39093                           ; BSR set to: 0
 39094                           ;potentiometers.c: 53: }
 39095                           ;potentiometers.c: 54: }
 39096                           ;potentiometers.c: 57: for(unsigned char i=0;i<16;i++){
 39097                           
 39098                           ; BSR set to: 0
 39099  0011AA  0E00               	movlw	0
 39100  0011AC  6FCB               	movwf	readPotentiometers@i_3357& (0+255),b
 39101  0011AE                     l22971:
 39102                           
 39103                           ; BSR set to: 0
 39104  0011AE  0E0F               	movlw	15
 39105  0011B0  65CB               	cpfsgt	readPotentiometers@i_3357& (0+255),b
 39106  0011B2  D001               	goto	l3880
 39107  0011B4  D09D               	goto	u37490
 39108  0011B6                     l3880:
 39109                           
 39110                           ; BSR set to: 0
 39111                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 39112                           
 39113                           ; BSR set to: 0
 39114  0011B6  51CB               	movf	readPotentiometers@i_3357& (0+255),w,b
 39115  0011B8  0D02               	mullw	2
 39116  0011BA  0E40               	movlw	low _ema_sum
 39117  0011BC  24F3               	addwf	prodl,w,c
 39118  0011BE  6ED9               	movwf	fsr2l,c
 39119  0011C0  0E02               	movlw	high _ema_sum
 39120  0011C2  20F4               	addwfc	prodh,w,c
 39121  0011C4  6EDA               	movwf	fsr2h,c
 39122  0011C6  CFDE F060          	movff	postinc2,___xxtofl@val
 39123  0011CA  CFDD F061          	movff	postdec2,___xxtofl@val+1
 39124  0011CE  0E00               	movlw	0
 39125  0011D0  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 39126  0011D2  0EFF               	movlw	-1
 39127  0011D4  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 39128  0011D6  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 39129  0011D8  0E01               	movlw	1
 39130  0011DA  EC29  F02F         	call	___xxtofl
 39131  0011DE  C060  F072         	movff	?___xxtofl,___flmul@a
 39132  0011E2  C061  F073         	movff	?___xxtofl+1,___flmul@a+1
 39133  0011E6  C062  F074         	movff	?___xxtofl+2,___flmul@a+2
 39134  0011EA  C063  F075         	movff	?___xxtofl+3,___flmul@a+3
 39135  0011EE  0E00               	movlw	0
 39136  0011F0  0100               	movlb	0	; () banked
 39137  0011F2  6FA8               	movwf	___fladd@a& (0+255),b
 39138  0011F4  0E00               	movlw	0
 39139  0011F6  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 39140  0011F8  0E80               	movlw	128
 39141  0011FA  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 39142  0011FC  0E3F               	movlw	63
 39143  0011FE  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 39144  001200  C104  F0A0         	movff	_ema_alpha,___flneg@f1
 39145  001204  C105  F0A1         	movff	_ema_alpha+1,___flneg@f1+1
 39146  001208  C106  F0A2         	movff	_ema_alpha+2,___flneg@f1+2
 39147  00120C  C107  F0A3         	movff	_ema_alpha+3,___flneg@f1+3
 39148  001210  EC8D  F049         	call	___flneg	;wreg free
 39149  001214  C0A0  F0A4         	movff	?___flneg,___fladd@b
 39150  001218  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 39151  00121C  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 39152  001220  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 39153  001224  ECF7  F018         	call	___fladd	;wreg free
 39154  001228  C0A4  F06E         	movff	?___fladd,___flmul@b
 39155  00122C  C0A5  F06F         	movff	?___fladd+1,___flmul@b+1
 39156  001230  C0A6  F070         	movff	?___fladd+2,___flmul@b+2
 39157  001234  C0A7  F071         	movff	?___fladd+3,___flmul@b+3
 39158  001238  EC4E  F017         	call	___flmul	;wreg free
 39159  00123C  C06E  F0C7         	movff	?___flmul,_readPotentiometers$5806
 39160  001240  C06F  F0C8         	movff	?___flmul+1,_readPotentiometers$5806+1
 39161  001244  C070  F0C9         	movff	?___flmul+2,_readPotentiometers$5806+2
 39162  001248  C071  F0CA         	movff	?___flmul+3,_readPotentiometers$5806+3
 39163                           
 39164                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 39165  00124C  C0C7  F0A8         	movff	_readPotentiometers$5806,___fladd@a
 39166  001250  C0C8  F0A9         	movff	_readPotentiometers$5806+1,___fladd@a+1
 39167  001254  C0C9  F0AA         	movff	_readPotentiometers$5806+2,___fladd@a+2
 39168  001258  C0CA  F0AB         	movff	_readPotentiometers$5806+3,___fladd@a+3
 39169  00125C  C104  F072         	movff	_ema_alpha,___flmul@a
 39170  001260  C105  F073         	movff	_ema_alpha+1,___flmul@a+1
 39171  001264  C106  F074         	movff	_ema_alpha+2,___flmul@a+2
 39172  001268  C107  F075         	movff	_ema_alpha+3,___flmul@a+3
 39173  00126C  0100               	movlb	0	; () banked
 39174  00126E  51CB               	movf	readPotentiometers@i_3357& (0+255),w,b
 39175  001270  0D02               	mullw	2
 39176  001272  0E60               	movlw	low _potentiometer_raw
 39177  001274  24F3               	addwf	prodl,w,c
 39178  001276  6ED9               	movwf	fsr2l,c
 39179  001278  0E02               	movlw	high _potentiometer_raw
 39180  00127A  20F4               	addwfc	prodh,w,c
 39181  00127C  6EDA               	movwf	fsr2h,c
 39182  00127E  CFDE F060          	movff	postinc2,___xxtofl@val
 39183  001282  CFDD F061          	movff	postdec2,___xxtofl@val+1
 39184  001286  0E00               	movlw	0
 39185  001288  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 39186  00128A  0EFF               	movlw	-1
 39187  00128C  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 39188  00128E  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 39189  001290  0E01               	movlw	1
 39190  001292  EC29  F02F         	call	___xxtofl
 39191  001296  C060  F06E         	movff	?___xxtofl,___flmul@b
 39192  00129A  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 39193  00129E  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 39194  0012A2  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 39195  0012A6  EC4E  F017         	call	___flmul	;wreg free
 39196  0012AA  C06E  F0A4         	movff	?___flmul,___fladd@b
 39197  0012AE  C06F  F0A5         	movff	?___flmul+1,___fladd@b+1
 39198  0012B2  C070  F0A6         	movff	?___flmul+2,___fladd@b+2
 39199  0012B6  C071  F0A7         	movff	?___flmul+3,___fladd@b+3
 39200  0012BA  ECF7  F018         	call	___fladd	;wreg free
 39201  0012BE  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 39202  0012C2  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 39203  0012C6  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 39204  0012CA  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 39205  0012CE  ECE3  F034         	call	___fltol	;wreg free
 39206  0012D2  0100               	movlb	0	; () banked
 39207  0012D4  51CB               	movf	readPotentiometers@i_3357& (0+255),w,b
 39208  0012D6  0D02               	mullw	2
 39209  0012D8  0E40               	movlw	low _ema_sum
 39210  0012DA  24F3               	addwf	prodl,w,c
 39211  0012DC  6ED9               	movwf	fsr2l,c
 39212  0012DE  0E02               	movlw	high _ema_sum
 39213  0012E0  20F4               	addwfc	prodh,w,c
 39214  0012E2  6EDA               	movwf	fsr2h,c
 39215  0012E4  C0B8  FFDE         	movff	?___fltol,postinc2
 39216  0012E8  C0B9  FFDD         	movff	?___fltol+1,postdec2
 39217                           
 39218                           ; BSR set to: 0
 39219  0012EC  2BCB               	incf	readPotentiometers@i_3357& (0+255),f,b
 39220  0012EE  D75F               	goto	l22971
 39221  0012F0                     u37490:
 39222                           
 39223                           ; BSR set to: 0
 39224                           ;potentiometers.c: 59: }
 39225                           ;potentiometers.c: 64: for(unsigned char i = 0; i<16; i++){
 39226                           
 39227                           ; BSR set to: 0
 39228  0012F0  0E00               	movlw	0
 39229  0012F2  6FCD               	movwf	readPotentiometers@i_3358& (0+255),b
 39230  0012F4                     l22983:
 39231                           
 39232                           ; BSR set to: 0
 39233  0012F4  0E0F               	movlw	15
 39234  0012F6  65CD               	cpfsgt	readPotentiometers@i_3358& (0+255),b
 39235  0012F8  D001               	goto	l3882
 39236  0012FA  D226               	goto	u37650
 39237  0012FC                     l3882:
 39238                           
 39239                           ; BSR set to: 0
 39240                           ;potentiometers.c: 74: static unsigned long count;
 39241                           ;potentiometers.c: 75: count++;
 39242                           
 39243                           ; BSR set to: 0
 39244  0012FC  0E01               	movlw	1
 39245  0012FE  0102               	movlb	2	; () banked
 39246  001300  2780               	addwf	readPotentiometers@count& (0+255),f,b
 39247  001302  0E00               	movlw	0
 39248  001304  2381               	addwfc	(readPotentiometers@count+1)& (0+255),f,b
 39249  001306  2382               	addwfc	(readPotentiometers@count+2)& (0+255),f,b
 39250  001308  2383               	addwfc	(readPotentiometers@count+3)& (0+255),f,b
 39251                           
 39252                           ; BSR set to: 2
 39253                           ;potentiometers.c: 78: if (FIRST_READING == 0) {potentiometer_filtered_last[i] = ema_sum
      +                          [i];}
 39254  00130A  B032               	btfsc	readPotentiometers@FIRST_READING/(0+8),readPotentiometers@FIRST_READING& (0+7),c
 39255  00130C  D015               	goto	l3886
 39256                           
 39257                           ; BSR set to: 2
 39258  00130E  0100               	movlb	0	; () banked
 39259  001310  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39260  001312  0D02               	mullw	2
 39261  001314  0E40               	movlw	low _ema_sum
 39262  001316  24F3               	addwf	prodl,w,c
 39263  001318  6ED9               	movwf	fsr2l,c
 39264  00131A  0E02               	movlw	high _ema_sum
 39265  00131C  20F4               	addwfc	prodh,w,c
 39266  00131E  6EDA               	movwf	fsr2h,c
 39267  001320  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39268  001322  0D02               	mullw	2
 39269  001324  0E00               	movlw	low _potentiometer_filtered_last
 39270  001326  24F3               	addwf	prodl,w,c
 39271  001328  6EE1               	movwf	fsr1l,c
 39272  00132A  0E02               	movlw	high _potentiometer_filtered_last
 39273  00132C  20F4               	addwfc	prodh,w,c
 39274  00132E  6EE2               	movwf	fsr1h,c
 39275  001330  CFDE FFE6          	movff	postinc2,postinc1
 39276  001334  CFDD FFE5          	movff	postdec2,postdec1
 39277  001338                     l3886:
 39278                           
 39279                           ;potentiometers.c: 80: if (((int)(ema_sum[i] - potentiometer_filtered_last[i]) >= HYST_V
      +                          AL) || ((int)(potentiometer_filtered_last[i] - ema_sum[i]) >= HYST_VAL)) {
 39280                           
 39281                           ; BSR set to: 0
 39282  001338  0100               	movlb	0	; () banked
 39283  00133A  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39284  00133C  0D02               	mullw	2
 39285  00133E  0E40               	movlw	low _ema_sum
 39286  001340  24F3               	addwf	prodl,w,c
 39287  001342  6ED9               	movwf	fsr2l,c
 39288  001344  0E02               	movlw	high _ema_sum
 39289  001346  20F4               	addwfc	prodh,w,c
 39290  001348  6EDA               	movwf	fsr2h,c
 39291  00134A  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 39292  00134E  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 39293  001352  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39294  001354  0D02               	mullw	2
 39295  001356  0E00               	movlw	low _potentiometer_filtered_last
 39296  001358  24F3               	addwf	prodl,w,c
 39297  00135A  6ED9               	movwf	fsr2l,c
 39298  00135C  0E02               	movlw	high _potentiometer_filtered_last
 39299  00135E  20F4               	addwfc	prodh,w,c
 39300  001360  6EDA               	movwf	fsr2h,c
 39301  001362  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 39302  001366  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 39303  00136A  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 39304  00136C  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 39305  00136E  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 39306  001370  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 39307  001372  51C2               	movf	??_readPotentiometers& (0+255),w,b
 39308  001374  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 39309  001376  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 39310  001378  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 39311  00137A  0101               	movlb	1	; () banked
 39312  00137C  51EB               	movf	_HYST_VAL& (0+255),w,b
 39313  00137E  0100               	movlb	0	; () banked
 39314  001380  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 39315  001382  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 39316  001384  0A80               	xorlw	128
 39317  001386  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 39318  001388  0101               	movlb	1	; () banked
 39319  00138A  51EC               	movf	(_HYST_VAL+1)& (0+255),w,b
 39320  00138C  0A80               	xorlw	128
 39321  00138E  0100               	movlb	0	; () banked
 39322  001390  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 39323  001392  B0D8               	btfsc	status,0,c
 39324  001394  D02E               	goto	u37530
 39325                           
 39326                           ; BSR set to: 0
 39327  001396  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39328  001398  0D02               	mullw	2
 39329  00139A  0E00               	movlw	low _potentiometer_filtered_last
 39330  00139C  24F3               	addwf	prodl,w,c
 39331  00139E  6ED9               	movwf	fsr2l,c
 39332  0013A0  0E02               	movlw	high _potentiometer_filtered_last
 39333  0013A2  20F4               	addwfc	prodh,w,c
 39334  0013A4  6EDA               	movwf	fsr2h,c
 39335  0013A6  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 39336  0013AA  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 39337  0013AE  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39338  0013B0  0D02               	mullw	2
 39339  0013B2  0E40               	movlw	low _ema_sum
 39340  0013B4  24F3               	addwf	prodl,w,c
 39341  0013B6  6ED9               	movwf	fsr2l,c
 39342  0013B8  0E02               	movlw	high _ema_sum
 39343  0013BA  20F4               	addwfc	prodh,w,c
 39344  0013BC  6EDA               	movwf	fsr2h,c
 39345  0013BE  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 39346  0013C2  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 39347  0013C6  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 39348  0013C8  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 39349  0013CA  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 39350  0013CC  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 39351  0013CE  51C2               	movf	??_readPotentiometers& (0+255),w,b
 39352  0013D0  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 39353  0013D2  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 39354  0013D4  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 39355  0013D6  0101               	movlb	1	; () banked
 39356  0013D8  51EB               	movf	_HYST_VAL& (0+255),w,b
 39357  0013DA  0100               	movlb	0	; () banked
 39358  0013DC  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 39359  0013DE  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 39360  0013E0  0A80               	xorlw	128
 39361  0013E2  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 39362  0013E4  0101               	movlb	1	; () banked
 39363  0013E6  51EC               	movf	(_HYST_VAL+1)& (0+255),w,b
 39364  0013E8  0A80               	xorlw	128
 39365  0013EA  0100               	movlb	0	; () banked
 39366  0013EC  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 39367  0013EE  A0D8               	btfss	status,0,c
 39368  0013F0  D196               	goto	l3887
 39369  0013F2                     u37530:
 39370                           
 39371                           ; BSR set to: 0
 39372                           ;potentiometers.c: 82: if((i==iterator_focus) || (iterator_focus==255)) {count = 0; coun
      +                          t_ISR = 0;}
 39373                           
 39374                           ; BSR set to: 0
 39375  0013F2  51FA               	movf	_iterator_focus& (0+255),w,b
 39376  0013F4  19CD               	xorwf	readPotentiometers@i_3358& (0+255),w,b
 39377  0013F6  B4D8               	btfsc	status,2,c
 39378  0013F8  D003               	goto	u37550
 39379                           
 39380                           ; BSR set to: 0
 39381  0013FA  29FA               	incf	_iterator_focus& (0+255),w,b
 39382  0013FC  A4D8               	btfss	status,2,c
 39383  0013FE  D011               	goto	l3890
 39384  001400                     u37550:
 39385                           
 39386                           ; BSR set to: 0
 39387                           
 39388                           ; BSR set to: 0
 39389  001400  0E00               	movlw	0
 39390  001402  0102               	movlb	2	; () banked
 39391  001404  6F80               	movwf	readPotentiometers@count& (0+255),b
 39392  001406  0E00               	movlw	0
 39393  001408  6F81               	movwf	(readPotentiometers@count+1)& (0+255),b
 39394  00140A  0E00               	movlw	0
 39395  00140C  6F82               	movwf	(readPotentiometers@count+2)& (0+255),b
 39396  00140E  0E00               	movlw	0
 39397  001410  6F83               	movwf	(readPotentiometers@count+3)& (0+255),b
 39398  001412  0E00               	movlw	0
 39399  001414  6F84               	movwf	_count_ISR& (0+255),b
 39400  001416  0E00               	movlw	0
 39401  001418  6F85               	movwf	(_count_ISR+1)& (0+255),b
 39402  00141A  0E00               	movlw	0
 39403  00141C  6F86               	movwf	(_count_ISR+2)& (0+255),b
 39404  00141E  0E00               	movlw	0
 39405  001420  6F87               	movwf	(_count_ISR+3)& (0+255),b
 39406  001422                     l3890:
 39407                           
 39408                           ;potentiometers.c: 84: HYST_VAL = 8;
 39409  001422  0E00               	movlw	0
 39410  001424  0101               	movlb	1	; () banked
 39411  001426  6FEC               	movwf	(_HYST_VAL+1)& (0+255),b
 39412  001428  0E08               	movlw	8
 39413  00142A  6FEB               	movwf	_HYST_VAL& (0+255),b
 39414                           
 39415                           ; BSR set to: 1
 39416                           ;potentiometers.c: 91: if(iterator_focus == 255) {iterator_focus = i;}
 39417  00142C  0100               	movlb	0	; () banked
 39418  00142E  29FA               	incf	_iterator_focus& (0+255),w,b
 39419  001430  B4D8               	btfsc	status,2,c
 39420                           
 39421                           ; BSR set to: 0
 39422  001432  C0CD  F0FA         	movff	readPotentiometers@i_3358,_iterator_focus
 39423                           
 39424                           ; BSR set to: 0
 39425                           ;potentiometers.c: 92: potentiometer_filtered_now[i] = ema_sum[i];
 39426                           
 39427                           ; BSR set to: 0
 39428  001436  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39429  001438  0D02               	mullw	2
 39430  00143A  0E40               	movlw	low _ema_sum
 39431  00143C  24F3               	addwf	prodl,w,c
 39432  00143E  6ED9               	movwf	fsr2l,c
 39433  001440  0E02               	movlw	high _ema_sum
 39434  001442  20F4               	addwfc	prodh,w,c
 39435  001444  6EDA               	movwf	fsr2h,c
 39436  001446  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39437  001448  0D02               	mullw	2
 39438  00144A  0E20               	movlw	low _potentiometer_filtered_now
 39439  00144C  24F3               	addwf	prodl,w,c
 39440  00144E  6EE1               	movwf	fsr1l,c
 39441  001450  0E02               	movlw	high _potentiometer_filtered_now
 39442  001452  20F4               	addwfc	prodh,w,c
 39443  001454  6EE2               	movwf	fsr1h,c
 39444  001456  CFDE FFE6          	movff	postinc2,postinc1
 39445  00145A  CFDD FFE5          	movff	postdec2,postdec1
 39446                           
 39447                           ; BSR set to: 0
 39448                           ;potentiometers.c: 95: if(inputPotsArray[i].controller_resolution == 0) {
 39449  00145E  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39450  001460  0D03               	mullw	3
 39451  001462  0EAC               	movlw	low _inputPotsArray
 39452  001464  24F3               	addwf	prodl,w,c
 39453  001466  6ED9               	movwf	fsr2l,c
 39454  001468  0E02               	movlw	high _inputPotsArray
 39455  00146A  20F4               	addwfc	prodh,w,c
 39456  00146C  6EDA               	movwf	fsr2h,c
 39457  00146E  0102               	movlb	2	; () banked
 39458  001470  B0DF               	btfsc	indf2,0,c
 39459  001472  D097               	goto	l3896
 39460                           
 39461                           ; BSR set to: 2
 39462                           ;potentiometers.c: 96: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i]
      +                          , 0, 0x3F50, 0, 0x3FFF);
 39463  001474  0100               	movlb	0	; () banked
 39464  001476  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39465  001478  0D02               	mullw	2
 39466  00147A  0E20               	movlw	low _potentiometer_filtered_now
 39467  00147C  24F3               	addwf	prodl,w,c
 39468  00147E  6ED9               	movwf	fsr2l,c
 39469  001480  0E02               	movlw	high _potentiometer_filtered_now
 39470  001482  20F4               	addwfc	prodh,w,c
 39471  001484  6EDA               	movwf	fsr2h,c
 39472  001486  CFDE F07A          	movff	postinc2,map@x
 39473  00148A  CFDD F07B          	movff	postdec2,map@x+1
 39474  00148E  0E00               	movlw	0
 39475  001490  BF7B               	btfsc	(map@x+1)& (0+255),7,b
 39476  001492  0EFF               	movlw	-1
 39477  001494  6F7C               	movwf	(map@x+2)& (0+255),b
 39478  001496  6F7D               	movwf	(map@x+3)& (0+255),b
 39479  001498  0E00               	movlw	0
 39480  00149A  6F7E               	movwf	map@in_min& (0+255),b
 39481  00149C  0E00               	movlw	0
 39482  00149E  6F7F               	movwf	(map@in_min+1)& (0+255),b
 39483  0014A0  0E00               	movlw	0
 39484  0014A2  6F80               	movwf	(map@in_min+2)& (0+255),b
 39485  0014A4  0E00               	movlw	0
 39486  0014A6  6F81               	movwf	(map@in_min+3)& (0+255),b
 39487  0014A8  0E50               	movlw	80
 39488  0014AA  6F82               	movwf	map@in_max& (0+255),b
 39489  0014AC  0E3F               	movlw	63
 39490  0014AE  6F83               	movwf	(map@in_max+1)& (0+255),b
 39491  0014B0  0E00               	movlw	0
 39492  0014B2  6F84               	movwf	(map@in_max+2)& (0+255),b
 39493  0014B4  0E00               	movlw	0
 39494  0014B6  6F85               	movwf	(map@in_max+3)& (0+255),b
 39495  0014B8  0E00               	movlw	0
 39496  0014BA  6F86               	movwf	map@out_min& (0+255),b
 39497  0014BC  0E00               	movlw	0
 39498  0014BE  6F87               	movwf	(map@out_min+1)& (0+255),b
 39499  0014C0  0E00               	movlw	0
 39500  0014C2  6F88               	movwf	(map@out_min+2)& (0+255),b
 39501  0014C4  0E00               	movlw	0
 39502  0014C6  6F89               	movwf	(map@out_min+3)& (0+255),b
 39503  0014C8  0EFF               	movlw	255
 39504  0014CA  6F8A               	movwf	map@out_max& (0+255),b
 39505  0014CC  0E3F               	movlw	63
 39506  0014CE  6F8B               	movwf	(map@out_max+1)& (0+255),b
 39507  0014D0  0E00               	movlw	0
 39508  0014D2  6F8C               	movwf	(map@out_max+2)& (0+255),b
 39509  0014D4  0E00               	movlw	0
 39510  0014D6  6F8D               	movwf	(map@out_max+3)& (0+255),b
 39511  0014D8  ECFF  F033         	call	_map	;wreg free
 39512  0014DC  0100               	movlb	0	; () banked
 39513  0014DE  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39514  0014E0  0D02               	mullw	2
 39515  0014E2  0E20               	movlw	low _potentiometer_filtered_now
 39516  0014E4  24F3               	addwf	prodl,w,c
 39517  0014E6  6ED9               	movwf	fsr2l,c
 39518  0014E8  0E02               	movlw	high _potentiometer_filtered_now
 39519  0014EA  20F4               	addwfc	prodh,w,c
 39520  0014EC  6EDA               	movwf	fsr2h,c
 39521  0014EE  C07A  FFDE         	movff	?_map,postinc2
 39522  0014F2  C07B  FFDD         	movff	?_map+1,postdec2
 39523                           
 39524                           ; BSR set to: 0
 39525                           ;potentiometers.c: 97: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] >> 
      +                          3;
 39526  0014F6  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39527  0014F8  0D02               	mullw	2
 39528  0014FA  0E20               	movlw	low _potentiometer_filtered_now
 39529  0014FC  24F3               	addwf	prodl,w,c
 39530  0014FE  6ED9               	movwf	fsr2l,c
 39531  001500  0E02               	movlw	high _potentiometer_filtered_now
 39532  001502  20F4               	addwfc	prodh,w,c
 39533  001504  6EDA               	movwf	fsr2h,c
 39534  001506  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 39535  00150A  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 39536  00150E  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 39537  001510  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 39538  001512  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 39539  001514  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 39540  001516  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 39541  001518  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 39542  00151A  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 39543  00151C  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 39544  00151E  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 39545  001520  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39546  001522  0D02               	mullw	2
 39547  001524  0E20               	movlw	low _potentiometer_filtered_now
 39548  001526  24F3               	addwf	prodl,w,c
 39549  001528  6ED9               	movwf	fsr2l,c
 39550  00152A  0E02               	movlw	high _potentiometer_filtered_now
 39551  00152C  20F4               	addwfc	prodh,w,c
 39552  00152E  6EDA               	movwf	fsr2h,c
 39553  001530  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 39554  001534  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 39555                           
 39556                           ; BSR set to: 0
 39557                           ;potentiometers.c: 98: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now[
      +                          i] = 0;}
 39558  001538  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39559  00153A  0D02               	mullw	2
 39560  00153C  0E20               	movlw	low _potentiometer_filtered_now
 39561  00153E  24F3               	addwf	prodl,w,c
 39562  001540  6ED9               	movwf	fsr2l,c
 39563  001542  0E02               	movlw	high _potentiometer_filtered_now
 39564  001544  20F4               	addwfc	prodh,w,c
 39565  001546  6EDA               	movwf	fsr2h,c
 39566  001548  0E01               	movlw	1
 39567  00154A  AEDB               	btfss	plusw2,7,c
 39568  00154C  D00C               	goto	l3895
 39569                           
 39570                           ; BSR set to: 0
 39571  00154E  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39572  001550  0D02               	mullw	2
 39573  001552  0E20               	movlw	low _potentiometer_filtered_now
 39574  001554  24F3               	addwf	prodl,w,c
 39575  001556  6ED9               	movwf	fsr2l,c
 39576  001558  0E02               	movlw	high _potentiometer_filtered_now
 39577  00155A  20F4               	addwfc	prodh,w,c
 39578  00155C  6EDA               	movwf	fsr2h,c
 39579  00155E  0E00               	movlw	0
 39580  001560  6EDE               	movwf	postinc2,c
 39581  001562  0E00               	movlw	0
 39582  001564  6EDD               	movwf	postdec2,c
 39583  001566                     l3895:
 39584                           
 39585                           ; BSR set to: 0
 39586                           ;potentiometers.c: 99: if(potentiometer_filtered_now[i] > 127){potentiometer_filtered_no
      +                          w[i] = 127;}
 39587  001566  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39588  001568  0D02               	mullw	2
 39589  00156A  0E20               	movlw	low _potentiometer_filtered_now
 39590  00156C  24F3               	addwf	prodl,w,c
 39591  00156E  6ED9               	movwf	fsr2l,c
 39592  001570  0E02               	movlw	high _potentiometer_filtered_now
 39593  001572  20F4               	addwfc	prodh,w,c
 39594  001574  6EDA               	movwf	fsr2h,c
 39595  001576  0E01               	movlw	1
 39596  001578  BEDB               	btfsc	plusw2,7,c
 39597  00157A  D013               	goto	l3896
 39598  00157C  0E01               	movlw	1
 39599  00157E  50DB               	movf	plusw2,w,c
 39600  001580  E104               	bnz	u37590
 39601  001582  0E80               	movlw	128
 39602  001584  5CDE               	subwf	postinc2,w,c
 39603  001586  A0D8               	btfss	status,0,c
 39604  001588  D00C               	goto	l3896
 39605  00158A                     u37590:
 39606                           
 39607                           ; BSR set to: 0
 39608  00158A  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39609  00158C  0D02               	mullw	2
 39610  00158E  0E20               	movlw	low _potentiometer_filtered_now
 39611  001590  24F3               	addwf	prodl,w,c
 39612  001592  6ED9               	movwf	fsr2l,c
 39613  001594  0E02               	movlw	high _potentiometer_filtered_now
 39614  001596  20F4               	addwfc	prodh,w,c
 39615  001598  6EDA               	movwf	fsr2h,c
 39616  00159A  0E7F               	movlw	127
 39617  00159C  6EDE               	movwf	postinc2,c
 39618  00159E  0E00               	movlw	0
 39619  0015A0  6EDD               	movwf	postdec2,c
 39620  0015A2                     l3896:
 39621                           
 39622                           ;potentiometers.c: 100: }
 39623                           ;potentiometers.c: 103: if(inputPotsArray[i].controller_resolution == 1) {
 39624                           
 39625                           ; BSR set to: 0
 39626  0015A2  0100               	movlb	0	; () banked
 39627  0015A4  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39628  0015A6  0D03               	mullw	3
 39629  0015A8  0EAC               	movlw	low _inputPotsArray
 39630  0015AA  24F3               	addwf	prodl,w,c
 39631  0015AC  6ED9               	movwf	fsr2l,c
 39632  0015AE  0E02               	movlw	high _inputPotsArray
 39633  0015B0  20F4               	addwfc	prodh,w,c
 39634  0015B2  6EDA               	movwf	fsr2h,c
 39635  0015B4  0102               	movlb	2	; () banked
 39636  0015B6  A0DF               	btfss	indf2,0,c
 39637  0015B8  D095               	goto	l3899
 39638                           
 39639                           ; BSR set to: 2
 39640                           ;potentiometers.c: 104: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] <<
      +                           4;
 39641  0015BA  0100               	movlb	0	; () banked
 39642  0015BC  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39643  0015BE  0D02               	mullw	2
 39644  0015C0  0E20               	movlw	low _potentiometer_filtered_now
 39645  0015C2  24F3               	addwf	prodl,w,c
 39646  0015C4  6ED9               	movwf	fsr2l,c
 39647  0015C6  0E02               	movlw	high _potentiometer_filtered_now
 39648  0015C8  20F4               	addwfc	prodh,w,c
 39649  0015CA  6EDA               	movwf	fsr2h,c
 39650  0015CC  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 39651  0015D0  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 39652  0015D4  3BC2               	swapf	??_readPotentiometers& (0+255),f,b
 39653  0015D6  3BC3               	swapf	(??_readPotentiometers+1)& (0+255),f,b
 39654  0015D8  0EF0               	movlw	240
 39655  0015DA  17C3               	andwf	(??_readPotentiometers+1)& (0+255),f,b
 39656  0015DC  51C2               	movf	??_readPotentiometers& (0+255),w,b
 39657  0015DE  0B0F               	andlw	15
 39658  0015E0  13C3               	iorwf	(??_readPotentiometers+1)& (0+255),f,b
 39659  0015E2  0EF0               	movlw	240
 39660  0015E4  17C2               	andwf	??_readPotentiometers& (0+255),f,b
 39661  0015E6  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39662  0015E8  0D02               	mullw	2
 39663  0015EA  0E20               	movlw	low _potentiometer_filtered_now
 39664  0015EC  24F3               	addwf	prodl,w,c
 39665  0015EE  6ED9               	movwf	fsr2l,c
 39666  0015F0  0E02               	movlw	high _potentiometer_filtered_now
 39667  0015F2  20F4               	addwfc	prodh,w,c
 39668  0015F4  6EDA               	movwf	fsr2h,c
 39669  0015F6  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 39670  0015FA  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 39671                           
 39672                           ; BSR set to: 0
 39673                           ;potentiometers.c: 105: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i
      +                          ], 0x50, 0x3F00, 0, 0x3FFF);
 39674  0015FE  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39675  001600  0D02               	mullw	2
 39676  001602  0E20               	movlw	low _potentiometer_filtered_now
 39677  001604  24F3               	addwf	prodl,w,c
 39678  001606  6ED9               	movwf	fsr2l,c
 39679  001608  0E02               	movlw	high _potentiometer_filtered_now
 39680  00160A  20F4               	addwfc	prodh,w,c
 39681  00160C  6EDA               	movwf	fsr2h,c
 39682  00160E  CFDE F07A          	movff	postinc2,map@x
 39683  001612  CFDD F07B          	movff	postdec2,map@x+1
 39684  001616  0E00               	movlw	0
 39685  001618  BF7B               	btfsc	(map@x+1)& (0+255),7,b
 39686  00161A  0EFF               	movlw	-1
 39687  00161C  6F7C               	movwf	(map@x+2)& (0+255),b
 39688  00161E  6F7D               	movwf	(map@x+3)& (0+255),b
 39689  001620  0E50               	movlw	80
 39690  001622  6F7E               	movwf	map@in_min& (0+255),b
 39691  001624  0E00               	movlw	0
 39692  001626  6F7F               	movwf	(map@in_min+1)& (0+255),b
 39693  001628  0E00               	movlw	0
 39694  00162A  6F80               	movwf	(map@in_min+2)& (0+255),b
 39695  00162C  0E00               	movlw	0
 39696  00162E  6F81               	movwf	(map@in_min+3)& (0+255),b
 39697  001630  0E00               	movlw	0
 39698  001632  6F82               	movwf	map@in_max& (0+255),b
 39699  001634  0E3F               	movlw	63
 39700  001636  6F83               	movwf	(map@in_max+1)& (0+255),b
 39701  001638  0E00               	movlw	0
 39702  00163A  6F84               	movwf	(map@in_max+2)& (0+255),b
 39703  00163C  0E00               	movlw	0
 39704  00163E  6F85               	movwf	(map@in_max+3)& (0+255),b
 39705  001640  0E00               	movlw	0
 39706  001642  6F86               	movwf	map@out_min& (0+255),b
 39707  001644  0E00               	movlw	0
 39708  001646  6F87               	movwf	(map@out_min+1)& (0+255),b
 39709  001648  0E00               	movlw	0
 39710  00164A  6F88               	movwf	(map@out_min+2)& (0+255),b
 39711  00164C  0E00               	movlw	0
 39712  00164E  6F89               	movwf	(map@out_min+3)& (0+255),b
 39713  001650  0EFF               	movlw	255
 39714  001652  6F8A               	movwf	map@out_max& (0+255),b
 39715  001654  0E3F               	movlw	63
 39716  001656  6F8B               	movwf	(map@out_max+1)& (0+255),b
 39717  001658  0E00               	movlw	0
 39718  00165A  6F8C               	movwf	(map@out_max+2)& (0+255),b
 39719  00165C  0E00               	movlw	0
 39720  00165E  6F8D               	movwf	(map@out_max+3)& (0+255),b
 39721  001660  ECFF  F033         	call	_map	;wreg free
 39722  001664  0100               	movlb	0	; () banked
 39723  001666  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39724  001668  0D02               	mullw	2
 39725  00166A  0E20               	movlw	low _potentiometer_filtered_now
 39726  00166C  24F3               	addwf	prodl,w,c
 39727  00166E  6ED9               	movwf	fsr2l,c
 39728  001670  0E02               	movlw	high _potentiometer_filtered_now
 39729  001672  20F4               	addwfc	prodh,w,c
 39730  001674  6EDA               	movwf	fsr2h,c
 39731  001676  C07A  FFDE         	movff	?_map,postinc2
 39732  00167A  C07B  FFDD         	movff	?_map+1,postdec2
 39733                           
 39734                           ; BSR set to: 0
 39735                           ;potentiometers.c: 107: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now
      +                          [i] = 0;}
 39736  00167E  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39737  001680  0D02               	mullw	2
 39738  001682  0E20               	movlw	low _potentiometer_filtered_now
 39739  001684  24F3               	addwf	prodl,w,c
 39740  001686  6ED9               	movwf	fsr2l,c
 39741  001688  0E02               	movlw	high _potentiometer_filtered_now
 39742  00168A  20F4               	addwfc	prodh,w,c
 39743  00168C  6EDA               	movwf	fsr2h,c
 39744  00168E  0E01               	movlw	1
 39745  001690  AEDB               	btfss	plusw2,7,c
 39746  001692  D00C               	goto	l3898
 39747                           
 39748                           ; BSR set to: 0
 39749  001694  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39750  001696  0D02               	mullw	2
 39751  001698  0E20               	movlw	low _potentiometer_filtered_now
 39752  00169A  24F3               	addwf	prodl,w,c
 39753  00169C  6ED9               	movwf	fsr2l,c
 39754  00169E  0E02               	movlw	high _potentiometer_filtered_now
 39755  0016A0  20F4               	addwfc	prodh,w,c
 39756  0016A2  6EDA               	movwf	fsr2h,c
 39757  0016A4  0E00               	movlw	0
 39758  0016A6  6EDE               	movwf	postinc2,c
 39759  0016A8  0E00               	movlw	0
 39760  0016AA  6EDD               	movwf	postdec2,c
 39761  0016AC                     l3898:
 39762                           
 39763                           ; BSR set to: 0
 39764                           ;potentiometers.c: 108: if(potentiometer_filtered_now[i] > 0x3FFF){potentiometer_filtere
      +                          d_now[i] = 0x3FFF;}
 39765  0016AC  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39766  0016AE  0D02               	mullw	2
 39767  0016B0  0E20               	movlw	low _potentiometer_filtered_now
 39768  0016B2  24F3               	addwf	prodl,w,c
 39769  0016B4  6ED9               	movwf	fsr2l,c
 39770  0016B6  0E02               	movlw	high _potentiometer_filtered_now
 39771  0016B8  20F4               	addwfc	prodh,w,c
 39772  0016BA  6EDA               	movwf	fsr2h,c
 39773  0016BC  0E01               	movlw	1
 39774  0016BE  BEDB               	btfsc	plusw2,7,c
 39775  0016C0  D011               	goto	l3899
 39776  0016C2  52DE               	movf	postinc2,f,c
 39777  0016C4  0E40               	movlw	64
 39778  0016C6  5CDE               	subwf	postinc2,w,c
 39779  0016C8  A0D8               	btfss	status,0,c
 39780  0016CA  D00C               	goto	l3899
 39781                           
 39782                           ; BSR set to: 0
 39783  0016CC  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39784  0016CE  0D02               	mullw	2
 39785  0016D0  0E20               	movlw	low _potentiometer_filtered_now
 39786  0016D2  24F3               	addwf	prodl,w,c
 39787  0016D4  6ED9               	movwf	fsr2l,c
 39788  0016D6  0E02               	movlw	high _potentiometer_filtered_now
 39789  0016D8  20F4               	addwfc	prodh,w,c
 39790  0016DA  6EDA               	movwf	fsr2h,c
 39791  0016DC  0EFF               	movlw	255
 39792  0016DE  6EDE               	movwf	postinc2,c
 39793  0016E0  0E3F               	movlw	63
 39794  0016E2  6EDD               	movwf	postdec2,c
 39795  0016E4                     l3899:
 39796                           
 39797                           ;potentiometers.c: 109: }
 39798                           ;potentiometers.c: 116: if(i==iterator_focus) {processPotentiometers(iterator_focus);}
 39799                           
 39800                           ; BSR set to: 0
 39801                           
 39802                           ; BSR set to: 0
 39803  0016E4  0100               	movlb	0	; () banked
 39804  0016E6  51FA               	movf	_iterator_focus& (0+255),w,b
 39805  0016E8  19CD               	xorwf	readPotentiometers@i_3358& (0+255),w,b
 39806  0016EA  A4D8               	btfss	status,2,c
 39807  0016EC  D003               	goto	l3900
 39808                           
 39809                           ; BSR set to: 0
 39810  0016EE  51FA               	movf	_iterator_focus& (0+255),w,b
 39811  0016F0  ECCC  F01E         	call	_processPotentiometers
 39812  0016F4                     l3900:
 39813                           
 39814                           ;potentiometers.c: 117: potentiometer_filtered_last[i] = ema_sum[i];
 39815  0016F4  0100               	movlb	0	; () banked
 39816  0016F6  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39817  0016F8  0D02               	mullw	2
 39818  0016FA  0E40               	movlw	low _ema_sum
 39819  0016FC  24F3               	addwf	prodl,w,c
 39820  0016FE  6ED9               	movwf	fsr2l,c
 39821  001700  0E02               	movlw	high _ema_sum
 39822  001702  20F4               	addwfc	prodh,w,c
 39823  001704  6EDA               	movwf	fsr2h,c
 39824  001706  51CD               	movf	readPotentiometers@i_3358& (0+255),w,b
 39825  001708  0D02               	mullw	2
 39826  00170A  0E00               	movlw	low _potentiometer_filtered_last
 39827  00170C  24F3               	addwf	prodl,w,c
 39828  00170E  6EE1               	movwf	fsr1l,c
 39829  001710  0E02               	movlw	high _potentiometer_filtered_last
 39830  001712  20F4               	addwfc	prodh,w,c
 39831  001714  6EE2               	movwf	fsr1h,c
 39832  001716  CFDE FFE6          	movff	postinc2,postinc1
 39833  00171A  CFDD FFE5          	movff	postdec2,postdec1
 39834  00171E                     l3887:
 39835                           
 39836                           ; BSR set to: 0
 39837                           ;potentiometers.c: 119: }
 39838                           ;potentiometers.c: 123: if (count_ISR >= number_of_interrupts) {
 39839                           
 39840                           ; BSR set to: 0
 39841  00171E  0102               	movlb	2	; () banked
 39842  001720  5188               	movf	_number_of_interrupts& (0+255),w,b
 39843  001722  5D84               	subwf	_count_ISR& (0+255),w,b
 39844  001724  5189               	movf	(_number_of_interrupts+1)& (0+255),w,b
 39845  001726  5985               	subwfb	(_count_ISR+1)& (0+255),w,b
 39846  001728  518A               	movf	(_number_of_interrupts+2)& (0+255),w,b
 39847  00172A  5986               	subwfb	(_count_ISR+2)& (0+255),w,b
 39848  00172C  518B               	movf	(_number_of_interrupts+3)& (0+255),w,b
 39849  00172E  5987               	subwfb	(_count_ISR+3)& (0+255),w,b
 39850  001730  A0D8               	btfss	status,0,c
 39851  001732  D007               	goto	l3901
 39852                           
 39853                           ; BSR set to: 2
 39854                           ;potentiometers.c: 125: HYST_VAL = 16;
 39855  001734  0E00               	movlw	0
 39856  001736  0101               	movlb	1	; () banked
 39857  001738  6FEC               	movwf	(_HYST_VAL+1)& (0+255),b
 39858  00173A  0E10               	movlw	16
 39859  00173C  6FEB               	movwf	_HYST_VAL& (0+255),b
 39860                           
 39861                           ; BSR set to: 1
 39862                           ;potentiometers.c: 132: iterator_focus = 255;
 39863  00173E  0100               	movlb	0	; () banked
 39864  001740  69FA               	setf	_iterator_focus& (0+255),b
 39865  001742                     l3901:
 39866                           
 39867                           ; BSR set to: 0
 39868  001742  0100               	movlb	0	; () banked
 39869  001744  2BCD               	incf	readPotentiometers@i_3358& (0+255),f,b
 39870  001746  D5D6               	goto	l22983
 39871  001748                     u37650:
 39872                           
 39873                           ; BSR set to: 0
 39874                           ;potentiometers.c: 133: }
 39875                           ;potentiometers.c: 134: }
 39876                           ;potentiometers.c: 136: FIRST_READING = 1;
 39877  001748  8032               	bsf	readPotentiometers@FIRST_READING/(0+8),readPotentiometers@FIRST_READING& (0+7),c
 39878                           
 39879                           ; BSR set to: 0
 39880  00174A  0012               	return		;funcret
 39881  00174C                     __end_of_readPotentiometers:
 39882                           	opt stack 0
 39883                           tblptru	equ	0xFF8
 39884                           tblptrh	equ	0xFF7
 39885                           tblptrl	equ	0xFF6
 39886                           tablat	equ	0xFF5
 39887                           prodh	equ	0xFF4
 39888                           prodl	equ	0xFF3
 39889                           intcon	equ	0xFF2
 39890                           intcon2	equ	0xFF1
 39891                           postinc0	equ	0xFEE
 39892                           wreg	equ	0xFE8
 39893                           indf1	equ	0xFE7
 39894                           postinc1	equ	0xFE6
 39895                           postdec1	equ	0xFE5
 39896                           fsr1h	equ	0xFE2
 39897                           fsr1l	equ	0xFE1
 39898                           indf2	equ	0xFDF
 39899                           postinc2	equ	0xFDE
 39900                           postdec2	equ	0xFDD
 39901                           plusw2	equ	0xFDB
 39902                           fsr2h	equ	0xFDA
 39903                           fsr2l	equ	0xFD9
 39904                           status	equ	0xFD8
 39905                           
 39906 ;; *************** function _processPotentiometers *****************
 39907 ;; Defined at:
 39908 ;;		line 140 in file "potentiometers.c"
 39909 ;; Parameters:    Size  Location     Type
 39910 ;;  i               1    wreg     unsigned char 
 39911 ;; Auto vars:     Size  Location     Type
 39912 ;;  i               1   19[BANK0 ] unsigned char 
 39913 ;;  highByte        1   18[BANK0 ] unsigned char 
 39914 ;;  lowByte         1   17[BANK0 ] unsigned char 
 39915 ;; Return value:  Size  Location     Type
 39916 ;;                  1    wreg      void 
 39917 ;; Registers used:
 39918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 39919 ;; Tracked objects:
 39920 ;;		On entry : 0/0
 39921 ;;		On exit  : 0/0
 39922 ;;		Unchanged: 0/0
 39923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39925 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39926 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39927 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39928 ;;Total ram usage:        6 bytes
 39929 ;; Hardware stack levels used:    1
 39930 ;; Hardware stack levels required when called:    7
 39931 ;; This function calls:
 39932 ;;		_controlChange
 39933 ;;		_pitchBend
 39934 ;; This function is called by:
 39935 ;;		_readPotentiometers
 39936 ;; This function uses a non-reentrant model
 39937 ;;
 39938                           
 39939                           	psect	text121
 39940  003D98                     __ptext121:
 39941                           	opt stack 0
 39942  003D98                     _processPotentiometers:
 39943                           	opt stack 21
 39944                           
 39945                           ; BSR set to: 0
 39946                           ;incstack = 0
 39947                           ;processPotentiometers@i stored from wreg
 39948  003D98  0100               	movlb	0	; () banked
 39949  003D9A  6F73               	movwf	processPotentiometers@i& (0+255),b
 39950                           
 39951                           ;potentiometers.c: 145: number_to_display = potentiometer_filtered_now[i];
 39952  003D9C  0100               	movlb	0	; () banked
 39953  003D9E  5173               	movf	processPotentiometers@i& (0+255),w,b
 39954  003DA0  0D02               	mullw	2
 39955  003DA2  0E20               	movlw	low _potentiometer_filtered_now
 39956  003DA4  24F3               	addwf	prodl,w,c
 39957  003DA6  6ED9               	movwf	fsr2l,c
 39958  003DA8  0E02               	movlw	high _potentiometer_filtered_now
 39959  003DAA  20F4               	addwfc	prodh,w,c
 39960  003DAC  6EDA               	movwf	fsr2h,c
 39961  003DAE  CFDE F05B          	movff	postinc2,_number_to_display
 39962  003DB2  CFDD F05C          	movff	postdec2,_number_to_display+1
 39963                           
 39964                           ;potentiometers.c: 149: if (inputPotsArray[i].controller_resolution == 0){
 39965  003DB6  5173               	movf	processPotentiometers@i& (0+255),w,b
 39966  003DB8  0D03               	mullw	3
 39967  003DBA  0EAC               	movlw	low _inputPotsArray
 39968  003DBC  24F3               	addwf	prodl,w,c
 39969  003DBE  6ED9               	movwf	fsr2l,c
 39970  003DC0  0E02               	movlw	high _inputPotsArray
 39971  003DC2  20F4               	addwfc	prodh,w,c
 39972  003DC4  6EDA               	movwf	fsr2h,c
 39973  003DC6  0102               	movlb	2	; () banked
 39974  003DC8  B0DF               	btfsc	indf2,0,c
 39975  003DCA  D088               	goto	l3909
 39976                           
 39977                           ; BSR set to: 2
 39978                           ;potentiometers.c: 152: DISPLAY_MODE = 0;
 39979  003DCC  0E00               	movlw	0
 39980  003DCE  6E5A               	movwf	_DISPLAY_MODE,c
 39981                           
 39982                           ;potentiometers.c: 153: DIGIT_MODE = 0;
 39983  003DD0  0E00               	movlw	0
 39984  003DD2  6E59               	movwf	_DIGIT_MODE,c
 39985                           
 39986                           ; BSR set to: 2
 39987                           ;potentiometers.c: 157: if(inputPotsArray[i].controller_number >= 0) {
 39988  003DD4  0100               	movlb	0	; () banked
 39989  003DD6  5173               	movf	processPotentiometers@i& (0+255),w,b
 39990  003DD8  0D03               	mullw	3
 39991  003DDA  0E01               	movlw	1
 39992  003DDC  26F3               	addwf	prodl,f,c
 39993  003DDE  0E00               	movlw	0
 39994  003DE0  22F4               	addwfc	prodh,f,c
 39995  003DE2  0EAC               	movlw	low _inputPotsArray
 39996  003DE4  24F3               	addwf	prodl,w,c
 39997  003DE6  6ED9               	movwf	fsr2l,c
 39998  003DE8  0E02               	movlw	high _inputPotsArray
 39999  003DEA  20F4               	addwfc	prodh,w,c
 40000  003DEC  6EDA               	movwf	fsr2h,c
 40001  003DEE  0E00               	movlw	0
 40002  003DF0  BEDB               	btfsc	plusw2,7,c
 40003  003DF2  D01B               	goto	l3906
 40004                           
 40005                           ; BSR set to: 0
 40006                           ;potentiometers.c: 158: controlChange(channel, inputPotsArray[i].controller_number, pote
      +                          ntiometer_filtered_now[i]);
 40007  003DF4  5173               	movf	processPotentiometers@i& (0+255),w,b
 40008  003DF6  0D03               	mullw	3
 40009  003DF8  0E01               	movlw	1
 40010  003DFA  26F3               	addwf	prodl,f,c
 40011  003DFC  0E00               	movlw	0
 40012  003DFE  22F4               	addwfc	prodh,f,c
 40013  003E00  0EAC               	movlw	low _inputPotsArray
 40014  003E02  24F3               	addwf	prodl,w,c
 40015  003E04  6ED9               	movwf	fsr2l,c
 40016  003E06  0E02               	movlw	high _inputPotsArray
 40017  003E08  20F4               	addwfc	prodh,w,c
 40018  003E0A  6EDA               	movwf	fsr2h,c
 40019  003E0C  50DF               	movf	indf2,w,c
 40020  003E0E  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40021  003E10  5173               	movf	processPotentiometers@i& (0+255),w,b
 40022  003E12  0D02               	mullw	2
 40023  003E14  0E20               	movlw	low _potentiometer_filtered_now
 40024  003E16  24F3               	addwf	prodl,w,c
 40025  003E18  6ED9               	movwf	fsr2l,c
 40026  003E1A  0E02               	movlw	high _potentiometer_filtered_now
 40027  003E1C  20F4               	addwfc	prodh,w,c
 40028  003E1E  6EDA               	movwf	fsr2h,c
 40029  003E20  50DF               	movf	indf2,w,c
 40030  003E22  6F6C               	movwf	controlChange@value& (0+255),b
 40031  003E24  51F6               	movf	_channel& (0+255),w,b
 40032  003E26  EC41  F049         	call	_controlChange
 40033  003E2A                     l3906:
 40034                           
 40035                           ;potentiometers.c: 159: }
 40036                           ;potentiometers.c: 162: if(inputPotsArray[i].controller_number == -1) {
 40037  003E2A  0100               	movlb	0	; () banked
 40038  003E2C  5173               	movf	processPotentiometers@i& (0+255),w,b
 40039  003E2E  0D03               	mullw	3
 40040  003E30  0E01               	movlw	1
 40041  003E32  26F3               	addwf	prodl,f,c
 40042  003E34  0E00               	movlw	0
 40043  003E36  22F4               	addwfc	prodh,f,c
 40044  003E38  0EAC               	movlw	low _inputPotsArray
 40045  003E3A  24F3               	addwf	prodl,w,c
 40046  003E3C  6ED9               	movwf	fsr2l,c
 40047  003E3E  0E02               	movlw	high _inputPotsArray
 40048  003E40  20F4               	addwfc	prodh,w,c
 40049  003E42  6EDA               	movwf	fsr2h,c
 40050  003E44  28DE               	incf	postinc2,w,c
 40051  003E46  A4D8               	btfss	status,2,c
 40052  003E48  D00A               	goto	l3907
 40053                           
 40054                           ; BSR set to: 0
 40055                           ;potentiometers.c: 163: velocity = potentiometer_filtered_now[i];
 40056  003E4A  5173               	movf	processPotentiometers@i& (0+255),w,b
 40057  003E4C  0D02               	mullw	2
 40058  003E4E  0E20               	movlw	low _potentiometer_filtered_now
 40059  003E50  24F3               	addwf	prodl,w,c
 40060  003E52  6ED9               	movwf	fsr2l,c
 40061  003E54  0E02               	movlw	high _potentiometer_filtered_now
 40062  003E56  20F4               	addwfc	prodh,w,c
 40063  003E58  6EDA               	movwf	fsr2h,c
 40064  003E5A  50DF               	movf	indf2,w,c
 40065  003E5C  6FFD               	movwf	_velocity& (0+255),b
 40066  003E5E                     l3907:
 40067                           
 40068                           ; BSR set to: 0
 40069                           ;potentiometers.c: 164: }
 40070                           ;potentiometers.c: 166: if(inputPotsArray[i].controller_number == -2) {
 40071  003E5E  5173               	movf	processPotentiometers@i& (0+255),w,b
 40072  003E60  0D03               	mullw	3
 40073  003E62  0E01               	movlw	1
 40074  003E64  26F3               	addwf	prodl,f,c
 40075  003E66  0E00               	movlw	0
 40076  003E68  22F4               	addwfc	prodh,f,c
 40077  003E6A  0EAC               	movlw	low _inputPotsArray
 40078  003E6C  24F3               	addwf	prodl,w,c
 40079  003E6E  6ED9               	movwf	fsr2l,c
 40080  003E70  0E02               	movlw	high _inputPotsArray
 40081  003E72  20F4               	addwfc	prodh,w,c
 40082  003E74  6EDA               	movwf	fsr2h,c
 40083  003E76  0EFE               	movlw	254
 40084  003E78  18DE               	xorwf	postinc2,w,c
 40085  003E7A  A4D8               	btfss	status,2,c
 40086  003E7C  D00F               	goto	l3908
 40087                           
 40088                           ; BSR set to: 0
 40089                           ;potentiometers.c: 167: pitchBend(channel, 0x00, potentiometer_filtered_now[i]);
 40090  003E7E  0E00               	movlw	0
 40091  003E80  6F6B               	movwf	pitchBend@lowByte& (0+255),b
 40092  003E82  5173               	movf	processPotentiometers@i& (0+255),w,b
 40093  003E84  0D02               	mullw	2
 40094  003E86  0E20               	movlw	low _potentiometer_filtered_now
 40095  003E88  24F3               	addwf	prodl,w,c
 40096  003E8A  6ED9               	movwf	fsr2l,c
 40097  003E8C  0E02               	movlw	high _potentiometer_filtered_now
 40098  003E8E  20F4               	addwfc	prodh,w,c
 40099  003E90  6EDA               	movwf	fsr2h,c
 40100  003E92  50DF               	movf	indf2,w,c
 40101  003E94  6F6C               	movwf	pitchBend@highByte& (0+255),b
 40102  003E96  51F6               	movf	_channel& (0+255),w,b
 40103  003E98  EC27  F049         	call	_pitchBend
 40104  003E9C                     l3908:
 40105                           
 40106                           ;potentiometers.c: 168: }
 40107                           ;potentiometers.c: 171: if(inputPotsArray[i].controller_number == -3) {
 40108  003E9C  0100               	movlb	0	; () banked
 40109  003E9E  5173               	movf	processPotentiometers@i& (0+255),w,b
 40110  003EA0  0D03               	mullw	3
 40111  003EA2  0E01               	movlw	1
 40112  003EA4  26F3               	addwf	prodl,f,c
 40113  003EA6  0E00               	movlw	0
 40114  003EA8  22F4               	addwfc	prodh,f,c
 40115  003EAA  0EAC               	movlw	low _inputPotsArray
 40116  003EAC  24F3               	addwf	prodl,w,c
 40117  003EAE  6ED9               	movwf	fsr2l,c
 40118  003EB0  0E02               	movlw	high _inputPotsArray
 40119  003EB2  20F4               	addwfc	prodh,w,c
 40120  003EB4  6EDA               	movwf	fsr2h,c
 40121  003EB6  0EFD               	movlw	253
 40122  003EB8  18DE               	xorwf	postinc2,w,c
 40123  003EBA  A4D8               	btfss	status,2,c
 40124  003EBC  D00F               	goto	l3909
 40125                           
 40126                           ; BSR set to: 0
 40127                           ;potentiometers.c: 172: controlChange(channel, modulation_wheel_MSB, potentiometer_filte
      +                          red_now[i]);
 40128  003EBE  0E01               	movlw	1
 40129  003EC0  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40130  003EC2  5173               	movf	processPotentiometers@i& (0+255),w,b
 40131  003EC4  0D02               	mullw	2
 40132  003EC6  0E20               	movlw	low _potentiometer_filtered_now
 40133  003EC8  24F3               	addwf	prodl,w,c
 40134  003ECA  6ED9               	movwf	fsr2l,c
 40135  003ECC  0E02               	movlw	high _potentiometer_filtered_now
 40136  003ECE  20F4               	addwfc	prodh,w,c
 40137  003ED0  6EDA               	movwf	fsr2h,c
 40138  003ED2  50DF               	movf	indf2,w,c
 40139  003ED4  6F6C               	movwf	controlChange@value& (0+255),b
 40140  003ED6  51F6               	movf	_channel& (0+255),w,b
 40141  003ED8  EC41  F049         	call	_controlChange
 40142  003EDC                     l3909:
 40143                           
 40144                           ;potentiometers.c: 173: }
 40145                           ;potentiometers.c: 174: }
 40146                           ;potentiometers.c: 177: if (inputPotsArray[i].controller_resolution == 1){
 40147  003EDC  0100               	movlb	0	; () banked
 40148  003EDE  5173               	movf	processPotentiometers@i& (0+255),w,b
 40149  003EE0  0D03               	mullw	3
 40150  003EE2  0EAC               	movlw	low _inputPotsArray
 40151  003EE4  24F3               	addwf	prodl,w,c
 40152  003EE6  6ED9               	movwf	fsr2l,c
 40153  003EE8  0E02               	movlw	high _inputPotsArray
 40154  003EEA  20F4               	addwfc	prodh,w,c
 40155  003EEC  6EDA               	movwf	fsr2h,c
 40156  003EEE  0102               	movlb	2	; () banked
 40157  003EF0  A0DF               	btfss	indf2,0,c
 40158  003EF2  0012               	return	
 40159                           
 40160                           ; BSR set to: 2
 40161                           ;potentiometers.c: 180: DISPLAY_MODE = 0;
 40162  003EF4  0E00               	movlw	0
 40163  003EF6  6E5A               	movwf	_DISPLAY_MODE,c
 40164                           
 40165                           ;potentiometers.c: 181: DIGIT_MODE = 2;
 40166  003EF8  0E02               	movlw	2
 40167  003EFA  6E59               	movwf	_DIGIT_MODE,c
 40168                           
 40169                           ; BSR set to: 2
 40170                           ;potentiometers.c: 185: unsigned char lowByte = (potentiometer_filtered_now[i]) & 0x7F;
 40171  003EFC  0100               	movlb	0	; () banked
 40172  003EFE  5173               	movf	processPotentiometers@i& (0+255),w,b
 40173  003F00  0D02               	mullw	2
 40174  003F02  0E20               	movlw	low _potentiometer_filtered_now
 40175  003F04  24F3               	addwf	prodl,w,c
 40176  003F06  6ED9               	movwf	fsr2l,c
 40177  003F08  0E02               	movlw	high _potentiometer_filtered_now
 40178  003F0A  20F4               	addwfc	prodh,w,c
 40179  003F0C  6EDA               	movwf	fsr2h,c
 40180  003F0E  50DF               	movf	indf2,w,c
 40181  003F10  0B7F               	andlw	127
 40182  003F12  6F71               	movwf	processPotentiometers@lowByte& (0+255),b
 40183                           
 40184                           ; BSR set to: 0
 40185                           ;potentiometers.c: 186: unsigned char highByte = (potentiometer_filtered_now[i] >> 7) & 
      +                          0x7F;
 40186  003F14  5173               	movf	processPotentiometers@i& (0+255),w,b
 40187  003F16  0D02               	mullw	2
 40188  003F18  0E20               	movlw	low _potentiometer_filtered_now
 40189  003F1A  24F3               	addwf	prodl,w,c
 40190  003F1C  6ED9               	movwf	fsr2l,c
 40191  003F1E  0E02               	movlw	high _potentiometer_filtered_now
 40192  003F20  20F4               	addwfc	prodh,w,c
 40193  003F22  6EDA               	movwf	fsr2h,c
 40194  003F24  CFDE F06E          	movff	postinc2,??_processPotentiometers
 40195  003F28  CFDD F06F          	movff	postdec2,??_processPotentiometers+1
 40196  003F2C  0E07               	movlw	7
 40197  003F2E  6F70               	movwf	(??_processPotentiometers+2)& (0+255),b
 40198  003F30                     u34085:
 40199  003F30  356F               	rlcf	(??_processPotentiometers+1)& (0+255),w,b
 40200  003F32  336F               	rrcf	(??_processPotentiometers+1)& (0+255),f,b
 40201  003F34  336E               	rrcf	??_processPotentiometers& (0+255),f,b
 40202  003F36  2F70               	decfsz	(??_processPotentiometers+2)& (0+255),f,b
 40203  003F38  D7FB               	goto	u34085
 40204  003F3A  516E               	movf	??_processPotentiometers& (0+255),w,b
 40205  003F3C  0B7F               	andlw	127
 40206  003F3E  6F72               	movwf	processPotentiometers@highByte& (0+255),b
 40207                           
 40208                           ; BSR set to: 0
 40209                           ;potentiometers.c: 189: if(inputPotsArray[i].controller_number_two_byte >= 0) {
 40210  003F40  5173               	movf	processPotentiometers@i& (0+255),w,b
 40211  003F42  0D03               	mullw	3
 40212  003F44  0E02               	movlw	2
 40213  003F46  26F3               	addwf	prodl,f,c
 40214  003F48  0E00               	movlw	0
 40215  003F4A  22F4               	addwfc	prodh,f,c
 40216  003F4C  0EAC               	movlw	low _inputPotsArray
 40217  003F4E  24F3               	addwf	prodl,w,c
 40218  003F50  6ED9               	movwf	fsr2l,c
 40219  003F52  0E02               	movlw	high _inputPotsArray
 40220  003F54  20F4               	addwfc	prodh,w,c
 40221  003F56  6EDA               	movwf	fsr2h,c
 40222  003F58  0E00               	movlw	0
 40223  003F5A  BEDB               	btfsc	plusw2,7,c
 40224  003F5C  D028               	goto	l3911
 40225                           
 40226                           ; BSR set to: 0
 40227                           ;potentiometers.c: 190: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte, highByte);
 40228  003F5E  5173               	movf	processPotentiometers@i& (0+255),w,b
 40229  003F60  0D03               	mullw	3
 40230  003F62  0E02               	movlw	2
 40231  003F64  26F3               	addwf	prodl,f,c
 40232  003F66  0E00               	movlw	0
 40233  003F68  22F4               	addwfc	prodh,f,c
 40234  003F6A  0EAC               	movlw	low _inputPotsArray
 40235  003F6C  24F3               	addwf	prodl,w,c
 40236  003F6E  6ED9               	movwf	fsr2l,c
 40237  003F70  0E02               	movlw	high _inputPotsArray
 40238  003F72  20F4               	addwfc	prodh,w,c
 40239  003F74  6EDA               	movwf	fsr2h,c
 40240  003F76  50DF               	movf	indf2,w,c
 40241  003F78  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40242  003F7A  C072  F06C         	movff	processPotentiometers@highByte,controlChange@value
 40243  003F7E  51F6               	movf	_channel& (0+255),w,b
 40244  003F80  EC41  F049         	call	_controlChange
 40245                           
 40246                           ;potentiometers.c: 191: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte + 32, lowByte);
 40247  003F84  0100               	movlb	0	; () banked
 40248  003F86  5173               	movf	processPotentiometers@i& (0+255),w,b
 40249  003F88  0D03               	mullw	3
 40250  003F8A  0E02               	movlw	2
 40251  003F8C  26F3               	addwf	prodl,f,c
 40252  003F8E  0E00               	movlw	0
 40253  003F90  22F4               	addwfc	prodh,f,c
 40254  003F92  0EAC               	movlw	low _inputPotsArray
 40255  003F94  24F3               	addwf	prodl,w,c
 40256  003F96  6ED9               	movwf	fsr2l,c
 40257  003F98  0E02               	movlw	high _inputPotsArray
 40258  003F9A  20F4               	addwfc	prodh,w,c
 40259  003F9C  6EDA               	movwf	fsr2h,c
 40260  003F9E  50DF               	movf	indf2,w,c
 40261  003FA0  0F20               	addlw	32
 40262  003FA2  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40263  003FA4  C071  F06C         	movff	processPotentiometers@lowByte,controlChange@value
 40264  003FA8  51F6               	movf	_channel& (0+255),w,b
 40265  003FAA  EC41  F049         	call	_controlChange
 40266  003FAE                     l3911:
 40267                           
 40268                           ;potentiometers.c: 192: }
 40269                           ;potentiometers.c: 194: if(inputPotsArray[i].controller_number_two_byte == -1) {
 40270  003FAE  0100               	movlb	0	; () banked
 40271  003FB0  5173               	movf	processPotentiometers@i& (0+255),w,b
 40272  003FB2  0D03               	mullw	3
 40273  003FB4  0E02               	movlw	2
 40274  003FB6  26F3               	addwf	prodl,f,c
 40275  003FB8  0E00               	movlw	0
 40276  003FBA  22F4               	addwfc	prodh,f,c
 40277  003FBC  0EAC               	movlw	low _inputPotsArray
 40278  003FBE  24F3               	addwf	prodl,w,c
 40279  003FC0  6ED9               	movwf	fsr2l,c
 40280  003FC2  0E02               	movlw	high _inputPotsArray
 40281  003FC4  20F4               	addwfc	prodh,w,c
 40282  003FC6  6EDA               	movwf	fsr2h,c
 40283  003FC8  28DE               	incf	postinc2,w,c
 40284  003FCA  B4D8               	btfsc	status,2,c
 40285                           
 40286                           ; BSR set to: 0
 40287                           ;potentiometers.c: 195: velocity = highByte;
 40288  003FCC  C072  F0FD         	movff	processPotentiometers@highByte,_velocity
 40289                           
 40290                           ; BSR set to: 0
 40291                           ;potentiometers.c: 196: }
 40292                           ;potentiometers.c: 198: if(inputPotsArray[i].controller_number_two_byte == -2) {
 40293                           
 40294                           ; BSR set to: 0
 40295  003FD0  5173               	movf	processPotentiometers@i& (0+255),w,b
 40296  003FD2  0D03               	mullw	3
 40297  003FD4  0E02               	movlw	2
 40298  003FD6  26F3               	addwf	prodl,f,c
 40299  003FD8  0E00               	movlw	0
 40300  003FDA  22F4               	addwfc	prodh,f,c
 40301  003FDC  0EAC               	movlw	low _inputPotsArray
 40302  003FDE  24F3               	addwf	prodl,w,c
 40303  003FE0  6ED9               	movwf	fsr2l,c
 40304  003FE2  0E02               	movlw	high _inputPotsArray
 40305  003FE4  20F4               	addwfc	prodh,w,c
 40306  003FE6  6EDA               	movwf	fsr2h,c
 40307  003FE8  0EFE               	movlw	254
 40308  003FEA  18DE               	xorwf	postinc2,w,c
 40309  003FEC  A4D8               	btfss	status,2,c
 40310  003FEE  D007               	goto	l3913
 40311                           
 40312                           ; BSR set to: 0
 40313                           ;potentiometers.c: 199: pitchBend(channel, lowByte, highByte);
 40314  003FF0  C071  F06B         	movff	processPotentiometers@lowByte,pitchBend@lowByte
 40315  003FF4  C072  F06C         	movff	processPotentiometers@highByte,pitchBend@highByte
 40316  003FF8  51F6               	movf	_channel& (0+255),w,b
 40317  003FFA  EC27  F049         	call	_pitchBend
 40318  003FFE                     l3913:
 40319                           
 40320                           ;potentiometers.c: 200: }
 40321                           ;potentiometers.c: 202: if(inputPotsArray[i].controller_number_two_byte == -3) {
 40322  003FFE  0100               	movlb	0	; () banked
 40323  004000  5173               	movf	processPotentiometers@i& (0+255),w,b
 40324  004002  0D03               	mullw	3
 40325  004004  0E02               	movlw	2
 40326  004006  26F3               	addwf	prodl,f,c
 40327  004008  0E00               	movlw	0
 40328  00400A  22F4               	addwfc	prodh,f,c
 40329  00400C  0EAC               	movlw	low _inputPotsArray
 40330  00400E  24F3               	addwf	prodl,w,c
 40331  004010  6ED9               	movwf	fsr2l,c
 40332  004012  0E02               	movlw	high _inputPotsArray
 40333  004014  20F4               	addwfc	prodh,w,c
 40334  004016  6EDA               	movwf	fsr2h,c
 40335  004018  0EFD               	movlw	253
 40336  00401A  18DE               	xorwf	postinc2,w,c
 40337  00401C  A4D8               	btfss	status,2,c
 40338  00401E  0012               	return	
 40339                           
 40340                           ; BSR set to: 0
 40341                           ;potentiometers.c: 203: controlChange(channel, modulation_wheel_MSB, highByte);
 40342  004020  0E01               	movlw	1
 40343  004022  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40344  004024  C072  F06C         	movff	processPotentiometers@highByte,controlChange@value
 40345  004028  51F6               	movf	_channel& (0+255),w,b
 40346  00402A  EC41  F049         	call	_controlChange
 40347                           
 40348                           ;potentiometers.c: 204: controlChange(channel, modulation_wheel_MSB + 32, lowByte);
 40349  00402E  0E21               	movlw	33
 40350  004030  0100               	movlb	0	; () banked
 40351  004032  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40352  004034  C071  F06C         	movff	processPotentiometers@lowByte,controlChange@value
 40353  004038  51F6               	movf	_channel& (0+255),w,b
 40354  00403A  EC41  F049         	call	_controlChange
 40355  00403E  0012               	return	
 40356  004040                     __end_of_processPotentiometers:
 40357                           	opt stack 0
 40358                           tblptru	equ	0xFF8
 40359                           tblptrh	equ	0xFF7
 40360                           tblptrl	equ	0xFF6
 40361                           tablat	equ	0xFF5
 40362                           prodh	equ	0xFF4
 40363                           prodl	equ	0xFF3
 40364                           intcon	equ	0xFF2
 40365                           intcon2	equ	0xFF1
 40366                           postinc0	equ	0xFEE
 40367                           wreg	equ	0xFE8
 40368                           indf1	equ	0xFE7
 40369                           postinc1	equ	0xFE6
 40370                           postdec1	equ	0xFE5
 40371                           fsr1h	equ	0xFE2
 40372                           fsr1l	equ	0xFE1
 40373                           indf2	equ	0xFDF
 40374                           postinc2	equ	0xFDE
 40375                           postdec2	equ	0xFDD
 40376                           plusw2	equ	0xFDB
 40377                           fsr2h	equ	0xFDA
 40378                           fsr2l	equ	0xFD9
 40379                           status	equ	0xFD8
 40380                           
 40381 ;; *************** function _pitchBend *****************
 40382 ;; Defined at:
 40383 ;;		line 153 in file "midi.c"
 40384 ;; Parameters:    Size  Location     Type
 40385 ;;  channel         1    wreg     unsigned char 
 40386 ;;  lowByte         1   11[BANK0 ] unsigned char 
 40387 ;;  highByte        1   12[BANK0 ] unsigned char 
 40388 ;; Auto vars:     Size  Location     Type
 40389 ;;  channel         1   13[BANK0 ] unsigned char 
 40390 ;; Return value:  Size  Location     Type
 40391 ;;                  1    wreg      void 
 40392 ;; Registers used:
 40393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 40394 ;; Tracked objects:
 40395 ;;		On entry : 0/0
 40396 ;;		On exit  : 0/0
 40397 ;;		Unchanged: 0/0
 40398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40399 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40402 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40403 ;;Total ram usage:        3 bytes
 40404 ;; Hardware stack levels used:    1
 40405 ;; Hardware stack levels required when called:    6
 40406 ;; This function calls:
 40407 ;;		_sendOut
 40408 ;;		_sendUSB
 40409 ;; This function is called by:
 40410 ;;		_processPotentiometers
 40411 ;; This function uses a non-reentrant model
 40412 ;;
 40413                           
 40414                           	psect	text122
 40415  00924E                     __ptext122:
 40416                           	opt stack 0
 40417  00924E                     _pitchBend:
 40418                           	opt stack 21
 40419                           
 40420                           ;incstack = 0
 40421                           ;pitchBend@channel stored from wreg
 40422  00924E  0100               	movlb	0	; () banked
 40423  009250  6F6D               	movwf	pitchBend@channel& (0+255),b
 40424                           
 40425                           ;midi.c: 155: statusByte = channel | pitch_bend;
 40426  009252  0100               	movlb	0	; () banked
 40427  009254  516D               	movf	pitchBend@channel& (0+255),w,b
 40428  009256  09E0               	iorlw	224
 40429  009258  6FF5               	movwf	_statusByte& (0+255),b
 40430                           
 40431                           ; BSR set to: 0
 40432                           ;midi.c: 158: sendUSB(statusByte, lowByte, highByte);
 40433  00925A  C06B  F060         	movff	pitchBend@lowByte,sendUSB@message2
 40434  00925E  C06C  F061         	movff	pitchBend@highByte,sendUSB@message3
 40435  009262  51F5               	movf	_statusByte& (0+255),w,b
 40436  009264  ECC0  F039         	call	_sendUSB
 40437                           
 40438                           ;midi.c: 161: sendOut(statusByte);
 40439  009268  0100               	movlb	0	; () banked
 40440  00926A  51F5               	movf	_statusByte& (0+255),w,b
 40441  00926C  ECCD  F04A         	call	_sendOut
 40442                           
 40443                           ;midi.c: 162: sendOut(lowByte);
 40444  009270  0100               	movlb	0	; () banked
 40445  009272  516B               	movf	pitchBend@lowByte& (0+255),w,b
 40446  009274  ECCD  F04A         	call	_sendOut
 40447                           
 40448                           ;midi.c: 163: sendOut(highByte);
 40449  009278  0100               	movlb	0	; () banked
 40450  00927A  516C               	movf	pitchBend@highByte& (0+255),w,b
 40451  00927C  ECCD  F04A         	call	_sendOut
 40452  009280  0012               	return		;funcret
 40453  009282                     __end_of_pitchBend:
 40454                           	opt stack 0
 40455                           tblptru	equ	0xFF8
 40456                           tblptrh	equ	0xFF7
 40457                           tblptrl	equ	0xFF6
 40458                           tablat	equ	0xFF5
 40459                           prodh	equ	0xFF4
 40460                           prodl	equ	0xFF3
 40461                           intcon	equ	0xFF2
 40462                           intcon2	equ	0xFF1
 40463                           postinc0	equ	0xFEE
 40464                           wreg	equ	0xFE8
 40465                           indf1	equ	0xFE7
 40466                           postinc1	equ	0xFE6
 40467                           postdec1	equ	0xFE5
 40468                           fsr1h	equ	0xFE2
 40469                           fsr1l	equ	0xFE1
 40470                           indf2	equ	0xFDF
 40471                           postinc2	equ	0xFDE
 40472                           postdec2	equ	0xFDD
 40473                           plusw2	equ	0xFDB
 40474                           fsr2h	equ	0xFDA
 40475                           fsr2l	equ	0xFD9
 40476                           status	equ	0xFD8
 40477                           
 40478 ;; *************** function _controlChange *****************
 40479 ;; Defined at:
 40480 ;;		line 139 in file "midi.c"
 40481 ;; Parameters:    Size  Location     Type
 40482 ;;  channel         1    wreg     unsigned char 
 40483 ;;  controllerNu    1   11[BANK0 ] unsigned char 
 40484 ;;  value           1   12[BANK0 ] unsigned char 
 40485 ;; Auto vars:     Size  Location     Type
 40486 ;;  channel         1   13[BANK0 ] unsigned char 
 40487 ;; Return value:  Size  Location     Type
 40488 ;;                  1    wreg      void 
 40489 ;; Registers used:
 40490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 40491 ;; Tracked objects:
 40492 ;;		On entry : 0/0
 40493 ;;		On exit  : 0/0
 40494 ;;		Unchanged: 0/0
 40495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40496 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40499 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40500 ;;Total ram usage:        3 bytes
 40501 ;; Hardware stack levels used:    1
 40502 ;; Hardware stack levels required when called:    6
 40503 ;; This function calls:
 40504 ;;		_sendOut
 40505 ;;		_sendUSB
 40506 ;; This function is called by:
 40507 ;;		_processDrumpad
 40508 ;;		_processPotentiometers
 40509 ;;		_panic_button
 40510 ;; This function uses a non-reentrant model
 40511 ;;
 40512                           
 40513                           	psect	text123
 40514  009282                     __ptext123:
 40515                           	opt stack 0
 40516  009282                     _controlChange:
 40517                           	opt stack 23
 40518                           
 40519                           ;incstack = 0
 40520                           ;controlChange@channel stored from wreg
 40521  009282  0100               	movlb	0	; () banked
 40522  009284  6F6D               	movwf	controlChange@channel& (0+255),b
 40523                           
 40524                           ;midi.c: 141: statusByte = channel | control_change;
 40525  009286  0100               	movlb	0	; () banked
 40526  009288  516D               	movf	controlChange@channel& (0+255),w,b
 40527  00928A  09B0               	iorlw	176
 40528  00928C  6FF5               	movwf	_statusByte& (0+255),b
 40529                           
 40530                           ; BSR set to: 0
 40531                           ;midi.c: 144: sendUSB(statusByte, controllerNumber, value);
 40532  00928E  C06B  F060         	movff	controlChange@controllerNumber,sendUSB@message2
 40533  009292  C06C  F061         	movff	controlChange@value,sendUSB@message3
 40534  009296  51F5               	movf	_statusByte& (0+255),w,b
 40535  009298  ECC0  F039         	call	_sendUSB
 40536                           
 40537                           ;midi.c: 147: sendOut(statusByte);
 40538  00929C  0100               	movlb	0	; () banked
 40539  00929E  51F5               	movf	_statusByte& (0+255),w,b
 40540  0092A0  ECCD  F04A         	call	_sendOut
 40541                           
 40542                           ;midi.c: 148: sendOut(controllerNumber);
 40543  0092A4  0100               	movlb	0	; () banked
 40544  0092A6  516B               	movf	controlChange@controllerNumber& (0+255),w,b
 40545  0092A8  ECCD  F04A         	call	_sendOut
 40546                           
 40547                           ;midi.c: 149: sendOut(value);
 40548  0092AC  0100               	movlb	0	; () banked
 40549  0092AE  516C               	movf	controlChange@value& (0+255),w,b
 40550  0092B0  ECCD  F04A         	call	_sendOut
 40551  0092B4  0012               	return		;funcret
 40552  0092B6                     __end_of_controlChange:
 40553                           	opt stack 0
 40554                           tblptru	equ	0xFF8
 40555                           tblptrh	equ	0xFF7
 40556                           tblptrl	equ	0xFF6
 40557                           tablat	equ	0xFF5
 40558                           prodh	equ	0xFF4
 40559                           prodl	equ	0xFF3
 40560                           intcon	equ	0xFF2
 40561                           intcon2	equ	0xFF1
 40562                           postinc0	equ	0xFEE
 40563                           wreg	equ	0xFE8
 40564                           indf1	equ	0xFE7
 40565                           postinc1	equ	0xFE6
 40566                           postdec1	equ	0xFE5
 40567                           fsr1h	equ	0xFE2
 40568                           fsr1l	equ	0xFE1
 40569                           indf2	equ	0xFDF
 40570                           postinc2	equ	0xFDE
 40571                           postdec2	equ	0xFDD
 40572                           plusw2	equ	0xFDB
 40573                           fsr2h	equ	0xFDA
 40574                           fsr2l	equ	0xFD9
 40575                           status	equ	0xFD8
 40576                           
 40577 ;; *************** function _sendUSB *****************
 40578 ;; Defined at:
 40579 ;;		line 32 in file "midi.c"
 40580 ;; Parameters:    Size  Location     Type
 40581 ;;  message1        1    wreg     unsigned char 
 40582 ;;  message2        1    0[BANK0 ] unsigned char 
 40583 ;;  message3        1    1[BANK0 ] unsigned char 
 40584 ;; Auto vars:     Size  Location     Type
 40585 ;;  message1        1    5[BANK0 ] unsigned char 
 40586 ;;  ii              1   10[BANK0 ] unsigned char 
 40587 ;;  i               1    9[BANK0 ] unsigned char 
 40588 ;;  midiMessage     3    6[BANK0 ] unsigned char [3]
 40589 ;; Return value:  Size  Location     Type
 40590 ;;                  1    wreg      void 
 40591 ;; Registers used:
 40592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 40593 ;; Tracked objects:
 40594 ;;		On entry : 0/0
 40595 ;;		On exit  : 0/0
 40596 ;;		Unchanged: 0/0
 40597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40598 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40599 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40600 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40601 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40602 ;;Total ram usage:       11 bytes
 40603 ;; Hardware stack levels used:    1
 40604 ;; Hardware stack levels required when called:    5
 40605 ;; This function calls:
 40606 ;;		Nothing
 40607 ;; This function is called by:
 40608 ;;		_noteOff
 40609 ;;		_noteOn
 40610 ;;		_noteOffDrum
 40611 ;;		_noteOnDrum
 40612 ;;		_controlChange
 40613 ;;		_pitchBend
 40614 ;;		_programChange
 40615 ;; This function uses a non-reentrant model
 40616 ;;
 40617                           
 40618                           	psect	text124
 40619  007380                     __ptext124:
 40620                           	opt stack 0
 40621  007380                     _sendUSB:
 40622                           	opt stack 23
 40623                           
 40624                           ;incstack = 0
 40625                           ;sendUSB@message1 stored from wreg
 40626  007380  0100               	movlb	0	; () banked
 40627  007382  6F65               	movwf	sendUSB@message1& (0+255),b
 40628                           
 40629                           ;midi.c: 34: unsigned char midiMessage[3];
 40630                           ;midi.c: 36: midiMessage[0]=message1;
 40631  007384  C065  F066         	movff	sendUSB@message1,sendUSB@midiMessage
 40632                           
 40633                           ;midi.c: 37: midiMessage[1]=message2;
 40634  007388  C060  F067         	movff	sendUSB@message2,sendUSB@midiMessage+1
 40635                           
 40636                           ;midi.c: 38: midiMessage[2]=message3;
 40637  00738C  C061  F068         	movff	sendUSB@message3,sendUSB@midiMessage+2
 40638                           
 40639                           ;midi.c: 40: RA5 = 0;
 40640  007390  9A80               	bcf	3968,5,c	;volatile
 40641                           
 40642                           ;midi.c: 41: RB2 = 1;
 40643  007392  8481               	bsf	3969,2,c	;volatile
 40644                           
 40645                           ;midi.c: 42: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40646  007394  0E53               	movlw	83
 40647  007396                     u44907:
 40648  007396  2EE8               	decfsz	wreg,f,c
 40649  007398  D7FE               	bra	u44907
 40650  00739A  F000               	nop	
 40651                           
 40652                           ;midi.c: 44: for(unsigned char i=0;i<3;i++){
 40653  00739C  0E00               	movlw	0
 40654  00739E  0100               	movlb	0	; () banked
 40655  0073A0  6F69               	movwf	sendUSB@i& (0+255),b
 40656  0073A2                     l16115:
 40657                           
 40658                           ; BSR set to: 0
 40659  0073A2  0E02               	movlw	2
 40660  0073A4  6569               	cpfsgt	sendUSB@i& (0+255),b
 40661  0073A6  D001               	goto	l441
 40662  0073A8  D036               	goto	u22570
 40663  0073AA                     l441:
 40664                           
 40665                           ; BSR set to: 0
 40666                           ;midi.c: 45: for(unsigned char ii=0;ii<8;ii++){
 40667                           
 40668                           ; BSR set to: 0
 40669  0073AA  0E00               	movlw	0
 40670  0073AC  6F6A               	movwf	sendUSB@ii& (0+255),b
 40671  0073AE                     l16121:
 40672                           
 40673                           ; BSR set to: 0
 40674  0073AE  0E07               	movlw	7
 40675  0073B0  656A               	cpfsgt	sendUSB@ii& (0+255),b
 40676  0073B2  D001               	goto	l443
 40677  0073B4  D02E               	goto	u22560
 40678  0073B6                     l443:
 40679                           
 40680                           ; BSR set to: 0
 40681                           ;midi.c: 48: RE2 = !!(midiMessage[i] & (1 << ii));
 40682                           
 40683                           ; BSR set to: 0
 40684  0073B6  5169               	movf	sendUSB@i& (0+255),w,b
 40685  0073B8  0D01               	mullw	1
 40686  0073BA  0E66               	movlw	low sendUSB@midiMessage
 40687  0073BC  24F3               	addwf	prodl,w,c
 40688  0073BE  6ED9               	movwf	fsr2l,c
 40689  0073C0  0E00               	movlw	high sendUSB@midiMessage
 40690  0073C2  20F4               	addwfc	prodh,w,c
 40691  0073C4  6EDA               	movwf	fsr2h,c
 40692  0073C6  50DF               	movf	indf2,w,c
 40693  0073C8  6F62               	movwf	??_sendUSB& (0+255),b
 40694  0073CA  C06A  F063         	movff	sendUSB@ii,??_sendUSB+1
 40695  0073CE  0E01               	movlw	1
 40696  0073D0  6F64               	movwf	(??_sendUSB+2)& (0+255),b
 40697  0073D2  2B63               	incf	(??_sendUSB+1)& (0+255),f,b
 40698  0073D4  D002               	goto	u22534
 40699  0073D6                     u22535:
 40700  0073D6  90D8               	bcf	status,0,c
 40701  0073D8  3764               	rlcf	(??_sendUSB+2)& (0+255),f,b
 40702  0073DA                     u22534:
 40703  0073DA  2F63               	decfsz	(??_sendUSB+1)& (0+255),f,b
 40704  0073DC  D7FC               	goto	u22535
 40705  0073DE  0100               	movlb	0	; () banked
 40706  0073E0  5164               	movf	(??_sendUSB+2)& (0+255),w,b
 40707  0073E2  1562               	andwf	??_sendUSB& (0+255),w,b
 40708  0073E4  0900               	iorlw	0
 40709  0073E6  B4D8               	btfsc	status,2,c
 40710  0073E8  D002               	goto	u22540
 40711  0073EA  8484               	bsf	3972,2,c	;volatile
 40712  0073EC  D001               	goto	u22555
 40713  0073EE                     u22540:
 40714  0073EE  9484               	bcf	3972,2,c	;volatile
 40715  0073F0                     u22555:
 40716                           
 40717                           ;midi.c: 50: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40718  0073F0  0E53               	movlw	83
 40719  0073F2                     u44917:
 40720  0073F2  2EE8               	decfsz	wreg,f,c
 40721  0073F4  D7FE               	bra	u44917
 40722  0073F6  F000               	nop	
 40723                           
 40724                           ;midi.c: 52: RA5 = 1;
 40725  0073F8  8A80               	bsf	3968,5,c	;volatile
 40726                           
 40727                           ;midi.c: 53: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40728  0073FA  0E53               	movlw	83
 40729  0073FC                     u44927:
 40730  0073FC  2EE8               	decfsz	wreg,f,c
 40731  0073FE  D7FE               	bra	u44927
 40732  007400  F000               	nop	
 40733                           
 40734                           ;midi.c: 55: RA5 = 0;
 40735  007402  9A80               	bcf	3968,5,c	;volatile
 40736                           
 40737                           ;midi.c: 56: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40738  007404  0E53               	movlw	83
 40739  007406                     u44937:
 40740  007406  2EE8               	decfsz	wreg,f,c
 40741  007408  D7FE               	bra	u44937
 40742  00740A  F000               	nop	
 40743  00740C  0100               	movlb	0	; () banked
 40744  00740E  2B6A               	incf	sendUSB@ii& (0+255),f,b
 40745  007410  D7CE               	goto	l16121
 40746  007412                     u22560:
 40747                           
 40748                           ; BSR set to: 0
 40749                           
 40750                           ; BSR set to: 0
 40751  007412  2B69               	incf	sendUSB@i& (0+255),f,b
 40752  007414  D7C6               	goto	l16115
 40753  007416                     u22570:
 40754                           
 40755                           ; BSR set to: 0
 40756                           ;midi.c: 57: }
 40757                           ;midi.c: 58: }
 40758                           ;midi.c: 60: RB2 = 0;
 40759  007416  9481               	bcf	3969,2,c	;volatile
 40760                           
 40761                           ; BSR set to: 0
 40762                           ;midi.c: 61: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40763  007418  0E53               	movlw	83
 40764  00741A                     u44947:
 40765  00741A  2EE8               	decfsz	wreg,f,c
 40766  00741C  D7FE               	bra	u44947
 40767  00741E  F000               	nop	
 40768  007420  0012               	return		;funcret
 40769  007422                     __end_of_sendUSB:
 40770                           	opt stack 0
 40771                           tblptru	equ	0xFF8
 40772                           tblptrh	equ	0xFF7
 40773                           tblptrl	equ	0xFF6
 40774                           tablat	equ	0xFF5
 40775                           prodh	equ	0xFF4
 40776                           prodl	equ	0xFF3
 40777                           intcon	equ	0xFF2
 40778                           intcon2	equ	0xFF1
 40779                           postinc0	equ	0xFEE
 40780                           wreg	equ	0xFE8
 40781                           indf1	equ	0xFE7
 40782                           postinc1	equ	0xFE6
 40783                           postdec1	equ	0xFE5
 40784                           fsr1h	equ	0xFE2
 40785                           fsr1l	equ	0xFE1
 40786                           indf2	equ	0xFDF
 40787                           postinc2	equ	0xFDE
 40788                           postdec2	equ	0xFDD
 40789                           plusw2	equ	0xFDB
 40790                           fsr2h	equ	0xFDA
 40791                           fsr2l	equ	0xFD9
 40792                           status	equ	0xFD8
 40793                           
 40794 ;; *************** function _sendOut *****************
 40795 ;; Defined at:
 40796 ;;		line 22 in file "midi.c"
 40797 ;; Parameters:    Size  Location     Type
 40798 ;;  a               1    wreg     unsigned char 
 40799 ;; Auto vars:     Size  Location     Type
 40800 ;;  a               1    0[BANK0 ] unsigned char 
 40801 ;; Return value:  Size  Location     Type
 40802 ;;                  1    wreg      void 
 40803 ;; Registers used:
 40804 ;;		wreg, status,2, cstack
 40805 ;; Tracked objects:
 40806 ;;		On entry : 0/0
 40807 ;;		On exit  : 0/0
 40808 ;;		Unchanged: 0/0
 40809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40813 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40814 ;;Total ram usage:        1 bytes
 40815 ;; Hardware stack levels used:    1
 40816 ;; Hardware stack levels required when called:    5
 40817 ;; This function calls:
 40818 ;;		Nothing
 40819 ;; This function is called by:
 40820 ;;		_noteOff
 40821 ;;		_noteOn
 40822 ;;		_noteOffDrum
 40823 ;;		_noteOnDrum
 40824 ;;		_controlChange
 40825 ;;		_pitchBend
 40826 ;;		_programChange
 40827 ;; This function uses a non-reentrant model
 40828 ;;
 40829                           
 40830                           	psect	text125
 40831  00959A                     __ptext125:
 40832                           	opt stack 0
 40833  00959A                     _sendOut:
 40834                           	opt stack 23
 40835                           
 40836                           ;incstack = 0
 40837                           ;sendOut@a stored from wreg
 40838  00959A  0100               	movlb	0	; () banked
 40839  00959C  6F60               	movwf	sendOut@a& (0+255),b
 40840                           
 40841                           ;midi.c: 24: TXREG = a;
 40842  00959E  C060  FFAD         	movff	sendOut@a,4013	;volatile
 40843  0095A2  A89E               	btfss	3998,4,c	;volatile
 40844  0095A4  D7FE               	goto	l436
 40845                           
 40846                           ;midi.c: 26: TXIF = 0;
 40847  0095A6  989E               	bcf	3998,4,c	;volatile
 40848                           
 40849                           ;midi.c: 27: _delay((unsigned long)((320)*(20000000/4000000.0)));
 40850  0095A8  0EE4               	movlw	228
 40851  0095AA                     u44957:
 40852  0095AA  D000               	nop2	
 40853  0095AC  D000               	nop2	
 40854  0095AE  2EE8               	decfsz	wreg,f,c
 40855  0095B0  D7FC               	bra	u44957
 40856  0095B2  D000               	nop2	
 40857  0095B4  D000               	nop2	
 40858  0095B6  0012               	return		;funcret
 40859  0095B8                     __end_of_sendOut:
 40860                           	opt stack 0
 40861                           tblptru	equ	0xFF8
 40862                           tblptrh	equ	0xFF7
 40863                           tblptrl	equ	0xFF6
 40864                           tablat	equ	0xFF5
 40865                           prodh	equ	0xFF4
 40866                           prodl	equ	0xFF3
 40867                           intcon	equ	0xFF2
 40868                           intcon2	equ	0xFF1
 40869                           postinc0	equ	0xFEE
 40870                           wreg	equ	0xFE8
 40871                           indf1	equ	0xFE7
 40872                           postinc1	equ	0xFE6
 40873                           postdec1	equ	0xFE5
 40874                           fsr1h	equ	0xFE2
 40875                           fsr1l	equ	0xFE1
 40876                           indf2	equ	0xFDF
 40877                           postinc2	equ	0xFDE
 40878                           postdec2	equ	0xFDD
 40879                           plusw2	equ	0xFDB
 40880                           fsr2h	equ	0xFDA
 40881                           fsr2l	equ	0xFD9
 40882                           status	equ	0xFD8
 40883                           
 40884 ;; *************** function _map *****************
 40885 ;; Defined at:
 40886 ;;		line 29 in file "potentiometers.c"
 40887 ;; Parameters:    Size  Location     Type
 40888 ;;  x               4   26[BANK0 ] long 
 40889 ;;  in_min          4   30[BANK0 ] long 
 40890 ;;  in_max          4   34[BANK0 ] long 
 40891 ;;  out_min         4   38[BANK0 ] long 
 40892 ;;  out_max         4   42[BANK0 ] long 
 40893 ;; Auto vars:     Size  Location     Type
 40894 ;;		None
 40895 ;; Return value:  Size  Location     Type
 40896 ;;                  4   26[BANK0 ] long 
 40897 ;; Registers used:
 40898 ;;		wreg, status,2, status,0, cstack
 40899 ;; Tracked objects:
 40900 ;;		On entry : 0/0
 40901 ;;		On exit  : 0/0
 40902 ;;		Unchanged: 0/0
 40903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40904 ;;      Params:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40906 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40907 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40908 ;;Total ram usage:       32 bytes
 40909 ;; Hardware stack levels used:    1
 40910 ;; Hardware stack levels required when called:    6
 40911 ;; This function calls:
 40912 ;;		___aldiv
 40913 ;;		___lmul
 40914 ;; This function is called by:
 40915 ;;		_readPotentiometers
 40916 ;; This function uses a non-reentrant model
 40917 ;;
 40918                           
 40919                           	psect	text126
 40920  0067FE                     __ptext126:
 40921                           	opt stack 0
 40922  0067FE                     _map:
 40923                           	opt stack 22
 40924                           
 40925                           ;potentiometers.c: 30: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + o
      +                          ut_min;
 40926                           
 40927                           ;incstack = 0
 40928  0067FE  C07E  F08E         	movff	map@in_min,??_map
 40929  006802  C07F  F08F         	movff	map@in_min+1,??_map+1
 40930  006806  C080  F090         	movff	map@in_min+2,??_map+2
 40931  00680A  C081  F091         	movff	map@in_min+3,??_map+3
 40932  00680E  0100               	movlb	0	; () banked
 40933  006810  1F8E               	comf	??_map& (0+255),f,b
 40934  006812  1F8F               	comf	(??_map+1)& (0+255),f,b
 40935  006814  1F90               	comf	(??_map+2)& (0+255),f,b
 40936  006816  1F91               	comf	(??_map+3)& (0+255),f,b
 40937  006818  2B8E               	incf	??_map& (0+255),f,b
 40938  00681A  0E00               	movlw	0
 40939  00681C  238F               	addwfc	(??_map+1)& (0+255),f,b
 40940  00681E  2390               	addwfc	(??_map+2)& (0+255),f,b
 40941  006820  2391               	addwfc	(??_map+3)& (0+255),f,b
 40942  006822  517A               	movf	map@x& (0+255),w,b
 40943  006824  258E               	addwf	??_map& (0+255),w,b
 40944  006826  6F60               	movwf	___lmul@multiplier& (0+255),b
 40945  006828  517B               	movf	(map@x+1)& (0+255),w,b
 40946  00682A  218F               	addwfc	(??_map+1)& (0+255),w,b
 40947  00682C  6F61               	movwf	(___lmul@multiplier+1)& (0+255),b
 40948  00682E  517C               	movf	(map@x+2)& (0+255),w,b
 40949  006830  2190               	addwfc	(??_map+2)& (0+255),w,b
 40950  006832  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
 40951  006834  517D               	movf	(map@x+3)& (0+255),w,b
 40952  006836  2191               	addwfc	(??_map+3)& (0+255),w,b
 40953  006838  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
 40954  00683A  C086  F092         	movff	map@out_min,??_map+4
 40955  00683E  C087  F093         	movff	map@out_min+1,??_map+5
 40956  006842  C088  F094         	movff	map@out_min+2,??_map+6
 40957  006846  C089  F095         	movff	map@out_min+3,??_map+7
 40958  00684A  1F92               	comf	(??_map+4)& (0+255),f,b
 40959  00684C  1F93               	comf	(??_map+5)& (0+255),f,b
 40960  00684E  1F94               	comf	(??_map+6)& (0+255),f,b
 40961  006850  1F95               	comf	(??_map+7)& (0+255),f,b
 40962  006852  2B92               	incf	(??_map+4)& (0+255),f,b
 40963  006854  0E00               	movlw	0
 40964  006856  2393               	addwfc	(??_map+5)& (0+255),f,b
 40965  006858  2394               	addwfc	(??_map+6)& (0+255),f,b
 40966  00685A  2395               	addwfc	(??_map+7)& (0+255),f,b
 40967  00685C  518A               	movf	map@out_max& (0+255),w,b
 40968  00685E  2592               	addwf	(??_map+4)& (0+255),w,b
 40969  006860  6F64               	movwf	___lmul@multiplicand& (0+255),b
 40970  006862  518B               	movf	(map@out_max+1)& (0+255),w,b
 40971  006864  2193               	addwfc	(??_map+5)& (0+255),w,b
 40972  006866  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 40973  006868  518C               	movf	(map@out_max+2)& (0+255),w,b
 40974  00686A  2194               	addwfc	(??_map+6)& (0+255),w,b
 40975  00686C  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 40976  00686E  518D               	movf	(map@out_max+3)& (0+255),w,b
 40977  006870  2195               	addwfc	(??_map+7)& (0+255),w,b
 40978  006872  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 40979  006874  EC46  F046         	call	___lmul	;wreg free
 40980  006878  C060  F06C         	movff	?___lmul,___aldiv@dividend
 40981  00687C  C061  F06D         	movff	?___lmul+1,___aldiv@dividend+1
 40982  006880  C062  F06E         	movff	?___lmul+2,___aldiv@dividend+2
 40983  006884  C063  F06F         	movff	?___lmul+3,___aldiv@dividend+3
 40984  006888  C07E  F096         	movff	map@in_min,??_map+8
 40985  00688C  C07F  F097         	movff	map@in_min+1,??_map+9
 40986  006890  C080  F098         	movff	map@in_min+2,??_map+10
 40987  006894  C081  F099         	movff	map@in_min+3,??_map+11
 40988  006898  0100               	movlb	0	; () banked
 40989  00689A  1F96               	comf	(??_map+8)& (0+255),f,b
 40990  00689C  1F97               	comf	(??_map+9)& (0+255),f,b
 40991  00689E  1F98               	comf	(??_map+10)& (0+255),f,b
 40992  0068A0  1F99               	comf	(??_map+11)& (0+255),f,b
 40993  0068A2  2B96               	incf	(??_map+8)& (0+255),f,b
 40994  0068A4  0E00               	movlw	0
 40995  0068A6  2397               	addwfc	(??_map+9)& (0+255),f,b
 40996  0068A8  2398               	addwfc	(??_map+10)& (0+255),f,b
 40997  0068AA  2399               	addwfc	(??_map+11)& (0+255),f,b
 40998  0068AC  5182               	movf	map@in_max& (0+255),w,b
 40999  0068AE  2596               	addwf	(??_map+8)& (0+255),w,b
 41000  0068B0  6F70               	movwf	___aldiv@divisor& (0+255),b
 41001  0068B2  5183               	movf	(map@in_max+1)& (0+255),w,b
 41002  0068B4  2197               	addwfc	(??_map+9)& (0+255),w,b
 41003  0068B6  6F71               	movwf	(___aldiv@divisor+1)& (0+255),b
 41004  0068B8  5184               	movf	(map@in_max+2)& (0+255),w,b
 41005  0068BA  2198               	addwfc	(??_map+10)& (0+255),w,b
 41006  0068BC  6F72               	movwf	(___aldiv@divisor+2)& (0+255),b
 41007  0068BE  5185               	movf	(map@in_max+3)& (0+255),w,b
 41008  0068C0  2199               	addwfc	(??_map+11)& (0+255),w,b
 41009  0068C2  6F73               	movwf	(___aldiv@divisor+3)& (0+255),b
 41010  0068C4  ECBC  F035         	call	___aldiv	;wreg free
 41011  0068C8  0100               	movlb	0	; () banked
 41012  0068CA  5186               	movf	map@out_min& (0+255),w,b
 41013  0068CC  256C               	addwf	?___aldiv& (0+255),w,b
 41014  0068CE  6F7A               	movwf	?_map& (0+255),b
 41015  0068D0  5187               	movf	(map@out_min+1)& (0+255),w,b
 41016  0068D2  216D               	addwfc	(?___aldiv+1)& (0+255),w,b
 41017  0068D4  6F7B               	movwf	(?_map+1)& (0+255),b
 41018  0068D6  5188               	movf	(map@out_min+2)& (0+255),w,b
 41019  0068D8  216E               	addwfc	(?___aldiv+2)& (0+255),w,b
 41020  0068DA  6F7C               	movwf	(?_map+2)& (0+255),b
 41021  0068DC  5189               	movf	(map@out_min+3)& (0+255),w,b
 41022  0068DE  216F               	addwfc	(?___aldiv+3)& (0+255),w,b
 41023  0068E0  6F7D               	movwf	(?_map+3)& (0+255),b
 41024  0068E2  0012               	return	
 41025  0068E4                     __end_of_map:
 41026                           	opt stack 0
 41027                           tblptru	equ	0xFF8
 41028                           tblptrh	equ	0xFF7
 41029                           tblptrl	equ	0xFF6
 41030                           tablat	equ	0xFF5
 41031                           prodh	equ	0xFF4
 41032                           prodl	equ	0xFF3
 41033                           intcon	equ	0xFF2
 41034                           intcon2	equ	0xFF1
 41035                           postinc0	equ	0xFEE
 41036                           wreg	equ	0xFE8
 41037                           indf1	equ	0xFE7
 41038                           postinc1	equ	0xFE6
 41039                           postdec1	equ	0xFE5
 41040                           fsr1h	equ	0xFE2
 41041                           fsr1l	equ	0xFE1
 41042                           indf2	equ	0xFDF
 41043                           postinc2	equ	0xFDE
 41044                           postdec2	equ	0xFDD
 41045                           plusw2	equ	0xFDB
 41046                           fsr2h	equ	0xFDA
 41047                           fsr2l	equ	0xFD9
 41048                           status	equ	0xFD8
 41049                           
 41050 ;; *************** function ___lmul *****************
 41051 ;; Defined at:
 41052 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 41053 ;; Parameters:    Size  Location     Type
 41054 ;;  multiplier      4    0[BANK0 ] unsigned long 
 41055 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 41056 ;; Auto vars:     Size  Location     Type
 41057 ;;  product         4    8[BANK0 ] unsigned long 
 41058 ;; Return value:  Size  Location     Type
 41059 ;;                  4    0[BANK0 ] unsigned long 
 41060 ;; Registers used:
 41061 ;;		wreg, status,2, status,0
 41062 ;; Tracked objects:
 41063 ;;		On entry : 0/0
 41064 ;;		On exit  : 0/0
 41065 ;;		Unchanged: 0/0
 41066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41067 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41068 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41070 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41071 ;;Total ram usage:       12 bytes
 41072 ;; Hardware stack levels used:    1
 41073 ;; Hardware stack levels required when called:    5
 41074 ;; This function calls:
 41075 ;;		Nothing
 41076 ;; This function is called by:
 41077 ;;		_map
 41078 ;;		_rand
 41079 ;; This function uses a non-reentrant model
 41080 ;;
 41081                           
 41082                           	psect	text127
 41083  008C8C                     __ptext127:
 41084                           	opt stack 0
 41085  008C8C                     ___lmul:
 41086                           	opt stack 15
 41087                           
 41088                           ; BSR set to: 0
 41089                           ;incstack = 0
 41090  008C8C  0E00               	movlw	0
 41091  008C8E  0100               	movlb	0	; () banked
 41092  008C90  6F68               	movwf	___lmul@product& (0+255),b
 41093  008C92  0E00               	movlw	0
 41094  008C94  6F69               	movwf	(___lmul@product+1)& (0+255),b
 41095  008C96  0E00               	movlw	0
 41096  008C98  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 41097  008C9A  0E00               	movlw	0
 41098  008C9C  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 41099  008C9E                     
 41100                           ; BSR set to: 0
 41101                           
 41102                           ; BSR set to: 0
 41103  008C9E  A160               	btfss	___lmul@multiplier& (0+255),0,b
 41104  008CA0  D008               	goto	l5440
 41105                           
 41106                           ; BSR set to: 0
 41107  008CA2  5164               	movf	___lmul@multiplicand& (0+255),w,b
 41108  008CA4  2768               	addwf	___lmul@product& (0+255),f,b
 41109  008CA6  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 41110  008CA8  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 41111  008CAA  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 41112  008CAC  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 41113  008CAE  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 41114  008CB0  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 41115  008CB2                     l5440:
 41116                           
 41117                           ; BSR set to: 0
 41118                           
 41119                           ; BSR set to: 0
 41120  008CB2  90D8               	bcf	status,0,c
 41121  008CB4  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 41122  008CB6  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 41123  008CB8  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 41124  008CBA  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 41125                           
 41126                           ; BSR set to: 0
 41127  008CBC  90D8               	bcf	status,0,c
 41128  008CBE  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 41129  008CC0  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 41130  008CC2  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 41131  008CC4  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 41132  008CC6  5160               	movf	___lmul@multiplier& (0+255),w,b
 41133  008CC8  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 41134  008CCA  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 41135  008CCC  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 41136  008CCE  A4D8               	btfss	status,2,c
 41137  008CD0  D7E6               	goto	l5439
 41138                           
 41139                           ; BSR set to: 0
 41140  008CD2  C068  F060         	movff	___lmul@product,?___lmul
 41141  008CD6  C069  F061         	movff	___lmul@product+1,?___lmul+1
 41142  008CDA  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 41143  008CDE  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 41144                           
 41145                           ; BSR set to: 0
 41146  008CE2  0012               	return		;funcret
 41147  008CE4                     __end_of___lmul:
 41148                           	opt stack 0
 41149                           tblptru	equ	0xFF8
 41150                           tblptrh	equ	0xFF7
 41151                           tblptrl	equ	0xFF6
 41152                           tablat	equ	0xFF5
 41153                           prodh	equ	0xFF4
 41154                           prodl	equ	0xFF3
 41155                           intcon	equ	0xFF2
 41156                           intcon2	equ	0xFF1
 41157                           postinc0	equ	0xFEE
 41158                           wreg	equ	0xFE8
 41159                           indf1	equ	0xFE7
 41160                           postinc1	equ	0xFE6
 41161                           postdec1	equ	0xFE5
 41162                           fsr1h	equ	0xFE2
 41163                           fsr1l	equ	0xFE1
 41164                           indf2	equ	0xFDF
 41165                           postinc2	equ	0xFDE
 41166                           postdec2	equ	0xFDD
 41167                           plusw2	equ	0xFDB
 41168                           fsr2h	equ	0xFDA
 41169                           fsr2l	equ	0xFD9
 41170                           status	equ	0xFD8
 41171                           
 41172 ;; *************** function ___aldiv *****************
 41173 ;; Defined at:
 41174 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 41175 ;; Parameters:    Size  Location     Type
 41176 ;;  dividend        4   12[BANK0 ] long 
 41177 ;;  divisor         4   16[BANK0 ] long 
 41178 ;; Auto vars:     Size  Location     Type
 41179 ;;  quotient        4   22[BANK0 ] long 
 41180 ;;  sign            1   21[BANK0 ] unsigned char 
 41181 ;;  counter         1   20[BANK0 ] unsigned char 
 41182 ;; Return value:  Size  Location     Type
 41183 ;;                  4   12[BANK0 ] long 
 41184 ;; Registers used:
 41185 ;;		wreg, status,2, status,0
 41186 ;; Tracked objects:
 41187 ;;		On entry : 0/0
 41188 ;;		On exit  : 0/0
 41189 ;;		Unchanged: 0/0
 41190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41191 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41192 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41194 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41195 ;;Total ram usage:       14 bytes
 41196 ;; Hardware stack levels used:    1
 41197 ;; Hardware stack levels required when called:    5
 41198 ;; This function calls:
 41199 ;;		Nothing
 41200 ;; This function is called by:
 41201 ;;		_map
 41202 ;; This function uses a non-reentrant model
 41203 ;;
 41204                           
 41205                           	psect	text128
 41206  006B78                     __ptext128:
 41207                           	opt stack 0
 41208  006B78                     ___aldiv:
 41209                           	opt stack 22
 41210                           
 41211                           ; BSR set to: 0
 41212                           ;incstack = 0
 41213  006B78  0E00               	movlw	0
 41214  006B7A  0100               	movlb	0	; () banked
 41215  006B7C  6F75               	movwf	___aldiv@sign& (0+255),b
 41216                           
 41217                           ; BSR set to: 0
 41218  006B7E  AF73               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 41219  006B80  D00A               	goto	l5483
 41220                           
 41221                           ; BSR set to: 0
 41222  006B82  1F73               	comf	(___aldiv@divisor+3)& (0+255),f,b
 41223  006B84  1F72               	comf	(___aldiv@divisor+2)& (0+255),f,b
 41224  006B86  1F71               	comf	(___aldiv@divisor+1)& (0+255),f,b
 41225  006B88  6D70               	negf	___aldiv@divisor& (0+255),b
 41226  006B8A  0E00               	movlw	0
 41227  006B8C  2371               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 41228  006B8E  2372               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 41229  006B90  2373               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 41230                           
 41231                           ; BSR set to: 0
 41232  006B92  0E01               	movlw	1
 41233  006B94  6F75               	movwf	___aldiv@sign& (0+255),b
 41234  006B96                     l5483:
 41235                           
 41236                           ; BSR set to: 0
 41237                           
 41238                           ; BSR set to: 0
 41239  006B96  AF6F               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 41240  006B98  D00A               	goto	l5484
 41241                           
 41242                           ; BSR set to: 0
 41243  006B9A  1F6F               	comf	(___aldiv@dividend+3)& (0+255),f,b
 41244  006B9C  1F6E               	comf	(___aldiv@dividend+2)& (0+255),f,b
 41245  006B9E  1F6D               	comf	(___aldiv@dividend+1)& (0+255),f,b
 41246  006BA0  6D6C               	negf	___aldiv@dividend& (0+255),b
 41247  006BA2  0E00               	movlw	0
 41248  006BA4  236D               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 41249  006BA6  236E               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 41250  006BA8  236F               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 41251                           
 41252                           ; BSR set to: 0
 41253  006BAA  0E01               	movlw	1
 41254  006BAC  1B75               	xorwf	___aldiv@sign& (0+255),f,b
 41255  006BAE                     l5484:
 41256                           
 41257                           ; BSR set to: 0
 41258                           
 41259                           ; BSR set to: 0
 41260  006BAE  0E00               	movlw	0
 41261  006BB0  6F76               	movwf	___aldiv@quotient& (0+255),b
 41262  006BB2  0E00               	movlw	0
 41263  006BB4  6F77               	movwf	(___aldiv@quotient+1)& (0+255),b
 41264  006BB6  0E00               	movlw	0
 41265  006BB8  6F78               	movwf	(___aldiv@quotient+2)& (0+255),b
 41266  006BBA  0E00               	movlw	0
 41267  006BBC  6F79               	movwf	(___aldiv@quotient+3)& (0+255),b
 41268                           
 41269                           ; BSR set to: 0
 41270  006BBE  5170               	movf	___aldiv@divisor& (0+255),w,b
 41271  006BC0  1171               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 41272  006BC2  1172               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 41273  006BC4  1173               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 41274  006BC6  B4D8               	btfsc	status,2,c
 41275  006BC8  D02A               	goto	l5491
 41276                           
 41277                           ; BSR set to: 0
 41278  006BCA  0E01               	movlw	1
 41279  006BCC  6F74               	movwf	___aldiv@counter& (0+255),b
 41280  006BCE  D006               	goto	l5486
 41281  006BD0                     
 41282                           ; BSR set to: 0
 41283                           
 41284                           ; BSR set to: 0
 41285  006BD0  90D8               	bcf	status,0,c
 41286  006BD2  3770               	rlcf	___aldiv@divisor& (0+255),f,b
 41287  006BD4  3771               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 41288  006BD6  3772               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 41289  006BD8  3773               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 41290  006BDA  2B74               	incf	___aldiv@counter& (0+255),f,b
 41291  006BDC                     l5486:
 41292                           
 41293                           ; BSR set to: 0
 41294                           
 41295                           ; BSR set to: 0
 41296  006BDC  AF73               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 41297  006BDE  D7F8               	goto	l5487
 41298  006BE0                     u29920:
 41299                           
 41300                           ; BSR set to: 0
 41301                           
 41302                           ; BSR set to: 0
 41303                           
 41304                           ; BSR set to: 0
 41305  006BE0  90D8               	bcf	status,0,c
 41306  006BE2  3776               	rlcf	___aldiv@quotient& (0+255),f,b
 41307  006BE4  3777               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 41308  006BE6  3778               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 41309  006BE8  3779               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 41310                           
 41311                           ; BSR set to: 0
 41312  006BEA  5170               	movf	___aldiv@divisor& (0+255),w,b
 41313  006BEC  5D6C               	subwf	___aldiv@dividend& (0+255),w,b
 41314  006BEE  5171               	movf	(___aldiv@divisor+1)& (0+255),w,b
 41315  006BF0  596D               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 41316  006BF2  5172               	movf	(___aldiv@divisor+2)& (0+255),w,b
 41317  006BF4  596E               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 41318  006BF6  5173               	movf	(___aldiv@divisor+3)& (0+255),w,b
 41319  006BF8  596F               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 41320  006BFA  A0D8               	btfss	status,0,c
 41321  006BFC  D009               	goto	l5490
 41322                           
 41323                           ; BSR set to: 0
 41324  006BFE  5170               	movf	___aldiv@divisor& (0+255),w,b
 41325  006C00  5F6C               	subwf	___aldiv@dividend& (0+255),f,b
 41326  006C02  5171               	movf	(___aldiv@divisor+1)& (0+255),w,b
 41327  006C04  5B6D               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 41328  006C06  5172               	movf	(___aldiv@divisor+2)& (0+255),w,b
 41329  006C08  5B6E               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 41330  006C0A  5173               	movf	(___aldiv@divisor+3)& (0+255),w,b
 41331  006C0C  5B6F               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 41332                           
 41333                           ; BSR set to: 0
 41334  006C0E  8176               	bsf	___aldiv@quotient& (0+255),0,b
 41335  006C10                     l5490:
 41336                           
 41337                           ; BSR set to: 0
 41338                           
 41339                           ; BSR set to: 0
 41340  006C10  90D8               	bcf	status,0,c
 41341  006C12  3373               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 41342  006C14  3372               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 41343  006C16  3371               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 41344  006C18  3370               	rrcf	___aldiv@divisor& (0+255),f,b
 41345                           
 41346                           ; BSR set to: 0
 41347  006C1A  2F74               	decfsz	___aldiv@counter& (0+255),f,b
 41348  006C1C  D7E1               	goto	u29920
 41349  006C1E                     l5491:
 41350                           
 41351                           ; BSR set to: 0
 41352                           
 41353                           ; BSR set to: 0
 41354                           
 41355                           ; BSR set to: 0
 41356  006C1E  5175               	movf	___aldiv@sign& (0+255),w,b
 41357  006C20  B4D8               	btfsc	status,2,c
 41358  006C22  D008               	goto	l5492
 41359                           
 41360                           ; BSR set to: 0
 41361  006C24  1F79               	comf	(___aldiv@quotient+3)& (0+255),f,b
 41362  006C26  1F78               	comf	(___aldiv@quotient+2)& (0+255),f,b
 41363  006C28  1F77               	comf	(___aldiv@quotient+1)& (0+255),f,b
 41364  006C2A  6D76               	negf	___aldiv@quotient& (0+255),b
 41365  006C2C  0E00               	movlw	0
 41366  006C2E  2377               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 41367  006C30  2378               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 41368  006C32  2379               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 41369  006C34                     l5492:
 41370                           
 41371                           ; BSR set to: 0
 41372                           
 41373                           ; BSR set to: 0
 41374  006C34  C076  F06C         	movff	___aldiv@quotient,?___aldiv
 41375  006C38  C077  F06D         	movff	___aldiv@quotient+1,?___aldiv+1
 41376  006C3C  C078  F06E         	movff	___aldiv@quotient+2,?___aldiv+2
 41377  006C40  C079  F06F         	movff	___aldiv@quotient+3,?___aldiv+3
 41378  006C44  0012               	return	
 41379  006C46                     __end_of___aldiv:
 41380                           	opt stack 0
 41381                           tblptru	equ	0xFF8
 41382                           tblptrh	equ	0xFF7
 41383                           tblptrl	equ	0xFF6
 41384                           tablat	equ	0xFF5
 41385                           prodh	equ	0xFF4
 41386                           prodl	equ	0xFF3
 41387                           intcon	equ	0xFF2
 41388                           intcon2	equ	0xFF1
 41389                           postinc0	equ	0xFEE
 41390                           wreg	equ	0xFE8
 41391                           indf1	equ	0xFE7
 41392                           postinc1	equ	0xFE6
 41393                           postdec1	equ	0xFE5
 41394                           fsr1h	equ	0xFE2
 41395                           fsr1l	equ	0xFE1
 41396                           indf2	equ	0xFDF
 41397                           postinc2	equ	0xFDE
 41398                           postdec2	equ	0xFDD
 41399                           plusw2	equ	0xFDB
 41400                           fsr2h	equ	0xFDA
 41401                           fsr2l	equ	0xFD9
 41402                           status	equ	0xFD8
 41403                           
 41404 ;; *************** function ___xxtofl *****************
 41405 ;; Defined at:
 41406 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
 41407 ;; Parameters:    Size  Location     Type
 41408 ;;  sign            1    wreg     unsigned char 
 41409 ;;  val             4    0[BANK0 ] long 
 41410 ;; Auto vars:     Size  Location     Type
 41411 ;;  sign            1    8[BANK0 ] unsigned char 
 41412 ;;  arg             4   10[BANK0 ] unsigned long 
 41413 ;;  exp             1    9[BANK0 ] unsigned char 
 41414 ;; Return value:  Size  Location     Type
 41415 ;;                  4    0[BANK0 ] unsigned char 
 41416 ;; Registers used:
 41417 ;;		wreg, status,2, status,0
 41418 ;; Tracked objects:
 41419 ;;		On entry : 0/0
 41420 ;;		On exit  : 0/0
 41421 ;;		Unchanged: 0/0
 41422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41423 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41424 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41425 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41426 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41427 ;;Total ram usage:       14 bytes
 41428 ;; Hardware stack levels used:    1
 41429 ;; Hardware stack levels required when called:    5
 41430 ;; This function calls:
 41431 ;;		Nothing
 41432 ;; This function is called by:
 41433 ;;		_calculate_alpha
 41434 ;;		_readPotentiometers
 41435 ;;		_calculate_pulse_length
 41436 ;; This function uses a non-reentrant model
 41437 ;;
 41438                           
 41439                           	psect	text129
 41440  005E52                     __ptext129:
 41441                           	opt stack 0
 41442  005E52                     ___xxtofl:
 41443                           	opt stack 22
 41444                           
 41445                           ; BSR set to: 0
 41446                           ;incstack = 0
 41447                           ;___xxtofl@sign stored from wreg
 41448  005E52  0100               	movlb	0	; () banked
 41449  005E54  6F68               	movwf	___xxtofl@sign& (0+255),b
 41450  005E56  0100               	movlb	0	; () banked
 41451  005E58  5168               	movf	___xxtofl@sign& (0+255),w,b
 41452  005E5A  A4D8               	btfss	status,2,c
 41453                           
 41454                           ; BSR set to: 0
 41455  005E5C  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 41456  005E5E  D01A               	goto	l5989
 41457                           
 41458                           ; BSR set to: 0
 41459  005E60  C060  F064         	movff	___xxtofl@val,??___xxtofl
 41460  005E64  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 41461  005E68  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 41462  005E6C  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 41463  005E70  1F64               	comf	??___xxtofl& (0+255),f,b
 41464  005E72  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 41465  005E74  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 41466  005E76  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 41467  005E78  2B64               	incf	??___xxtofl& (0+255),f,b
 41468  005E7A  0E00               	movlw	0
 41469  005E7C  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 41470  005E7E  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 41471  005E80  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 41472  005E82  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 41473  005E86  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 41474  005E8A  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 41475  005E8E  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 41476  005E92  D008               	goto	l5990
 41477  005E94                     l5989:
 41478                           
 41479                           ; BSR set to: 0
 41480  005E94  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 41481  005E98  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 41482  005E9C  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 41483  005EA0  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 41484  005EA4                     l5990:
 41485                           
 41486                           ; BSR set to: 0
 41487                           
 41488                           ; BSR set to: 0
 41489  005EA4  5160               	movf	___xxtofl@val& (0+255),w,b
 41490  005EA6  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 41491  005EA8  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 41492  005EAA  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 41493  005EAC  A4D8               	btfss	status,2,c
 41494  005EAE  D009               	goto	l5991
 41495                           
 41496                           ; BSR set to: 0
 41497  005EB0  0E00               	movlw	0
 41498  005EB2  6F60               	movwf	?___xxtofl& (0+255),b
 41499  005EB4  0E00               	movlw	0
 41500  005EB6  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 41501  005EB8  0E00               	movlw	0
 41502  005EBA  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 41503  005EBC  0E00               	movlw	0
 41504  005EBE  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 41505                           
 41506                           ; BSR set to: 0
 41507  005EC0  0012               	return	
 41508  005EC2                     l5991:
 41509                           
 41510                           ; BSR set to: 0
 41511                           
 41512                           ; BSR set to: 0
 41513  005EC2  0E96               	movlw	150
 41514  005EC4  6F69               	movwf	___xxtofl@exp& (0+255),b
 41515  005EC6  D006               	goto	l5993
 41516  005EC8                     
 41517                           ; BSR set to: 0
 41518                           
 41519                           ; BSR set to: 0
 41520  005EC8  2B69               	incf	___xxtofl@exp& (0+255),f,b
 41521  005ECA  90D8               	bcf	status,0,c
 41522  005ECC  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 41523  005ECE  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 41524  005ED0  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 41525  005ED2  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 41526  005ED4                     l5993:
 41527                           
 41528                           ; BSR set to: 0
 41529                           
 41530                           ; BSR set to: 0
 41531  005ED4  0E00               	movlw	0
 41532  005ED6  156A               	andwf	___xxtofl@arg& (0+255),w,b
 41533  005ED8  6F64               	movwf	??___xxtofl& (0+255),b
 41534  005EDA  0E00               	movlw	0
 41535  005EDC  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 41536  005EDE  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 41537  005EE0  0E00               	movlw	0
 41538  005EE2  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 41539  005EE4  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 41540  005EE6  0EFE               	movlw	254
 41541  005EE8  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 41542  005EEA  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 41543  005EEC  5164               	movf	??___xxtofl& (0+255),w,b
 41544  005EEE  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 41545  005EF0  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 41546  005EF2  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 41547  005EF4  B4D8               	btfsc	status,2,c
 41548  005EF6  D00D               	goto	l5996
 41549  005EF8  D7E7               	goto	l5994
 41550  005EFA                     
 41551                           ; BSR set to: 0
 41552                           
 41553                           ; BSR set to: 0
 41554  005EFA  2B69               	incf	___xxtofl@exp& (0+255),f,b
 41555                           
 41556                           ; BSR set to: 0
 41557  005EFC  0E01               	movlw	1
 41558  005EFE  276A               	addwf	___xxtofl@arg& (0+255),f,b
 41559  005F00  0E00               	movlw	0
 41560  005F02  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 41561  005F04  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 41562  005F06  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 41563                           
 41564                           ; BSR set to: 0
 41565  005F08  90D8               	bcf	status,0,c
 41566  005F0A  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 41567  005F0C  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 41568  005F0E  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 41569  005F10  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 41570  005F12                     l5996:
 41571                           
 41572                           ; BSR set to: 0
 41573  005F12  0E00               	movlw	0
 41574  005F14  156A               	andwf	___xxtofl@arg& (0+255),w,b
 41575  005F16  6F64               	movwf	??___xxtofl& (0+255),b
 41576  005F18  0E00               	movlw	0
 41577  005F1A  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 41578  005F1C  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 41579  005F1E  0E00               	movlw	0
 41580  005F20  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 41581  005F22  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 41582  005F24  0EFF               	movlw	255
 41583  005F26  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 41584  005F28  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 41585  005F2A  5164               	movf	??___xxtofl& (0+255),w,b
 41586  005F2C  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 41587  005F2E  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 41588  005F30  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 41589  005F32  B4D8               	btfsc	status,2,c
 41590  005F34  D007               	goto	l5999
 41591  005F36  D7E1               	goto	l5997
 41592  005F38                     
 41593                           ; BSR set to: 0
 41594                           
 41595                           ; BSR set to: 0
 41596  005F38  0769               	decf	___xxtofl@exp& (0+255),f,b
 41597  005F3A  90D8               	bcf	status,0,c
 41598  005F3C  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 41599  005F3E  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 41600  005F40  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 41601  005F42  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 41602  005F44                     l5999:
 41603                           
 41604                           ; BSR set to: 0
 41605                           
 41606                           ; BSR set to: 0
 41607  005F44  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 41608  005F46  D003               	goto	u26720
 41609                           
 41610                           ; BSR set to: 0
 41611  005F48  0E02               	movlw	2
 41612  005F4A  6169               	cpfslt	___xxtofl@exp& (0+255),b
 41613  005F4C  D7F5               	goto	l6000
 41614  005F4E                     u26720:
 41615                           
 41616                           ; BSR set to: 0
 41617                           
 41618                           ; BSR set to: 0
 41619  005F4E  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 41620  005F50  D008               	goto	l6004
 41621                           
 41622                           ; BSR set to: 0
 41623  005F52  0EFF               	movlw	255
 41624  005F54  176A               	andwf	___xxtofl@arg& (0+255),f,b
 41625  005F56  0EFF               	movlw	255
 41626  005F58  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 41627  005F5A  0E7F               	movlw	127
 41628  005F5C  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 41629  005F5E  0EFF               	movlw	255
 41630  005F60  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 41631  005F62                     l6004:
 41632                           
 41633                           ; BSR set to: 0
 41634  005F62  90D8               	bcf	status,0,c
 41635  005F64  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 41636  005F66  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 41637  005F6A  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 41638  005F6C  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 41639  005F6E  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 41640  005F70  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 41641  005F74  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 41642  005F76  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 41643  005F78  6B64               	clrf	??___xxtofl& (0+255),b
 41644  005F7A  5164               	movf	??___xxtofl& (0+255),w,b
 41645  005F7C  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 41646  005F7E  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 41647  005F80  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 41648  005F82  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 41649  005F84  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 41650  005F86  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 41651  005F88  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 41652                           
 41653                           ; BSR set to: 0
 41654  005F8A  5168               	movf	___xxtofl@sign& (0+255),w,b
 41655  005F8C  A4D8               	btfss	status,2,c
 41656                           
 41657                           ; BSR set to: 0
 41658  005F8E  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 41659  005F90  D001               	goto	l6005
 41660                           
 41661                           ; BSR set to: 0
 41662  005F92  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 41663  005F94                     l6005:
 41664                           
 41665                           ; BSR set to: 0
 41666                           
 41667                           ; BSR set to: 0
 41668  005F94  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 41669  005F98  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 41670  005F9C  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 41671  005FA0  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 41672  005FA4  0012               	return	
 41673  005FA6                     __end_of___xxtofl:
 41674                           	opt stack 0
 41675                           tblptru	equ	0xFF8
 41676                           tblptrh	equ	0xFF7
 41677                           tblptrl	equ	0xFF6
 41678                           tablat	equ	0xFF5
 41679                           prodh	equ	0xFF4
 41680                           prodl	equ	0xFF3
 41681                           intcon	equ	0xFF2
 41682                           intcon2	equ	0xFF1
 41683                           postinc0	equ	0xFEE
 41684                           wreg	equ	0xFE8
 41685                           indf1	equ	0xFE7
 41686                           postinc1	equ	0xFE6
 41687                           postdec1	equ	0xFE5
 41688                           fsr1h	equ	0xFE2
 41689                           fsr1l	equ	0xFE1
 41690                           indf2	equ	0xFDF
 41691                           postinc2	equ	0xFDE
 41692                           postdec2	equ	0xFDD
 41693                           plusw2	equ	0xFDB
 41694                           fsr2h	equ	0xFDA
 41695                           fsr2l	equ	0xFD9
 41696                           status	equ	0xFD8
 41697                           
 41698 ;; *************** function ___fltol *****************
 41699 ;; Defined at:
 41700 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
 41701 ;; Parameters:    Size  Location     Type
 41702 ;;  f1              4   88[BANK0 ] unsigned char 
 41703 ;; Auto vars:     Size  Location     Type
 41704 ;;  exp1            1   97[BANK0 ] unsigned char 
 41705 ;;  sign1           1   96[BANK0 ] unsigned char 
 41706 ;; Return value:  Size  Location     Type
 41707 ;;                  4   88[BANK0 ] long 
 41708 ;; Registers used:
 41709 ;;		wreg, status,2, status,0
 41710 ;; Tracked objects:
 41711 ;;		On entry : 0/0
 41712 ;;		On exit  : 0/0
 41713 ;;		Unchanged: 0/0
 41714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41715 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41716 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41717 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41718 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41719 ;;Total ram usage:       10 bytes
 41720 ;; Hardware stack levels used:    1
 41721 ;; Hardware stack levels required when called:    5
 41722 ;; This function calls:
 41723 ;;		Nothing
 41724 ;; This function is called by:
 41725 ;;		_readPotentiometers
 41726 ;;		_calculate_pulse_length
 41727 ;; This function uses a non-reentrant model
 41728 ;;
 41729                           
 41730                           	psect	text130
 41731  0069C6                     __ptext130:
 41732                           	opt stack 0
 41733  0069C6                     ___fltol:
 41734                           	opt stack 22
 41735                           
 41736                           ; BSR set to: 0
 41737                           ;incstack = 0
 41738  0069C6  0100               	movlb	0	; () banked
 41739  0069C8  35BA               	rlcf	(___fltol@f1+2)& (0+255),w,b
 41740  0069CA  35BB               	rlcf	(___fltol@f1+3)& (0+255),w,b
 41741  0069CC  6FC1               	movwf	___fltol@exp1& (0+255),b
 41742  0069CE  51C1               	movf	___fltol@exp1& (0+255),w,b
 41743  0069D0  A4D8               	btfss	status,2,c
 41744  0069D2  D009               	goto	l5657
 41745                           
 41746                           ; BSR set to: 0
 41747  0069D4  0E00               	movlw	0
 41748  0069D6  6FB8               	movwf	?___fltol& (0+255),b
 41749  0069D8  0E00               	movlw	0
 41750  0069DA  6FB9               	movwf	(?___fltol+1)& (0+255),b
 41751  0069DC  0E00               	movlw	0
 41752  0069DE  6FBA               	movwf	(?___fltol+2)& (0+255),b
 41753  0069E0  0E00               	movlw	0
 41754  0069E2  6FBB               	movwf	(?___fltol+3)& (0+255),b
 41755                           
 41756                           ; BSR set to: 0
 41757  0069E4  0012               	return	
 41758  0069E6                     l5657:
 41759                           
 41760                           ; BSR set to: 0
 41761                           
 41762                           ; BSR set to: 0
 41763  0069E6  C0B8  F0BC         	movff	___fltol@f1,??___fltol
 41764  0069EA  C0B9  F0BD         	movff	___fltol@f1+1,??___fltol+1
 41765  0069EE  C0BA  F0BE         	movff	___fltol@f1+2,??___fltol+2
 41766  0069F2  C0BB  F0BF         	movff	___fltol@f1+3,??___fltol+3
 41767  0069F6  0E20               	movlw	32
 41768  0069F8  D005               	goto	u26600
 41769  0069FA                     u26605:
 41770  0069FA  90D8               	bcf	status,0,c
 41771  0069FC  33BF               	rrcf	(??___fltol+3)& (0+255),f,b
 41772  0069FE  33BE               	rrcf	(??___fltol+2)& (0+255),f,b
 41773  006A00  33BD               	rrcf	(??___fltol+1)& (0+255),f,b
 41774  006A02  33BC               	rrcf	??___fltol& (0+255),f,b
 41775  006A04                     u26600:
 41776  006A04  2EE8               	decfsz	wreg,f,c
 41777  006A06  D7F9               	goto	u26605
 41778  006A08  51BC               	movf	??___fltol& (0+255),w,b
 41779  006A0A  6FC0               	movwf	___fltol@sign1& (0+255),b
 41780                           
 41781                           ; BSR set to: 0
 41782  006A0C  8FBA               	bsf	(___fltol@f1+2)& (0+255),7,b
 41783                           
 41784                           ; BSR set to: 0
 41785  006A0E  0EFF               	movlw	255
 41786  006A10  17B8               	andwf	___fltol@f1& (0+255),f,b
 41787  006A12  0EFF               	movlw	255
 41788  006A14  17B9               	andwf	(___fltol@f1+1)& (0+255),f,b
 41789  006A16  0EFF               	movlw	255
 41790  006A18  17BA               	andwf	(___fltol@f1+2)& (0+255),f,b
 41791  006A1A  0E00               	movlw	0
 41792  006A1C  17BB               	andwf	(___fltol@f1+3)& (0+255),f,b
 41793                           
 41794                           ; BSR set to: 0
 41795  006A1E  0E96               	movlw	150
 41796  006A20  5FC1               	subwf	___fltol@exp1& (0+255),f,b
 41797                           
 41798                           ; BSR set to: 0
 41799  006A22  AFC1               	btfss	___fltol@exp1& (0+255),7,b
 41800  006A24  D016               	goto	l5659
 41801                           
 41802                           ; BSR set to: 0
 41803  006A26  51C1               	movf	___fltol@exp1& (0+255),w,b
 41804  006A28  0A80               	xorlw	128
 41805  006A2A  0F97               	addlw	151
 41806  006A2C  B0D8               	btfsc	status,0,c
 41807  006A2E  D009               	goto	l5660
 41808                           
 41809                           ; BSR set to: 0
 41810  006A30  0E00               	movlw	0
 41811  006A32  6FB8               	movwf	?___fltol& (0+255),b
 41812  006A34  0E00               	movlw	0
 41813  006A36  6FB9               	movwf	(?___fltol+1)& (0+255),b
 41814  006A38  0E00               	movlw	0
 41815  006A3A  6FBA               	movwf	(?___fltol+2)& (0+255),b
 41816  006A3C  0E00               	movlw	0
 41817  006A3E  6FBB               	movwf	(?___fltol+3)& (0+255),b
 41818                           
 41819                           ; BSR set to: 0
 41820  006A40  0012               	return	
 41821  006A42                     l5660:
 41822                           
 41823                           ; BSR set to: 0
 41824                           
 41825                           ; BSR set to: 0
 41826                           
 41827                           ; BSR set to: 0
 41828  006A42  90D8               	bcf	status,0,c
 41829  006A44  33BB               	rrcf	(___fltol@f1+3)& (0+255),f,b
 41830  006A46  33BA               	rrcf	(___fltol@f1+2)& (0+255),f,b
 41831  006A48  33B9               	rrcf	(___fltol@f1+1)& (0+255),f,b
 41832  006A4A  33B8               	rrcf	___fltol@f1& (0+255),f,b
 41833                           
 41834                           ; BSR set to: 0
 41835  006A4C  3FC1               	incfsz	___fltol@exp1& (0+255),f,b
 41836  006A4E  D7F9               	goto	l5660
 41837                           
 41838                           ; BSR set to: 0
 41839  006A50  D015               	goto	u26640
 41840  006A52                     l5659:
 41841                           
 41842                           ; BSR set to: 0
 41843                           
 41844                           ; BSR set to: 0
 41845  006A52  0E1F               	movlw	31
 41846  006A54  65C1               	cpfsgt	___fltol@exp1& (0+255),b
 41847  006A56  D00F               	goto	l5665
 41848                           
 41849                           ; BSR set to: 0
 41850  006A58  0E00               	movlw	0
 41851  006A5A  6FB8               	movwf	?___fltol& (0+255),b
 41852  006A5C  0E00               	movlw	0
 41853  006A5E  6FB9               	movwf	(?___fltol+1)& (0+255),b
 41854  006A60  0E00               	movlw	0
 41855  006A62  6FBA               	movwf	(?___fltol+2)& (0+255),b
 41856  006A64  0E00               	movlw	0
 41857  006A66  6FBB               	movwf	(?___fltol+3)& (0+255),b
 41858                           
 41859                           ; BSR set to: 0
 41860  006A68  0012               	return	
 41861  006A6A                     
 41862                           ; BSR set to: 0
 41863                           
 41864                           ; BSR set to: 0
 41865  006A6A  90D8               	bcf	status,0,c
 41866  006A6C  37B8               	rlcf	___fltol@f1& (0+255),f,b
 41867  006A6E  37B9               	rlcf	(___fltol@f1+1)& (0+255),f,b
 41868  006A70  37BA               	rlcf	(___fltol@f1+2)& (0+255),f,b
 41869  006A72  37BB               	rlcf	(___fltol@f1+3)& (0+255),f,b
 41870  006A74  07C1               	decf	___fltol@exp1& (0+255),f,b
 41871  006A76                     l5665:
 41872                           
 41873                           ; BSR set to: 0
 41874                           
 41875                           ; BSR set to: 0
 41876  006A76  51C1               	movf	___fltol@exp1& (0+255),w,b
 41877  006A78  A4D8               	btfss	status,2,c
 41878  006A7A  D7F7               	goto	l5666
 41879  006A7C                     u26640:
 41880                           
 41881                           ; BSR set to: 0
 41882                           
 41883                           ; BSR set to: 0
 41884                           
 41885                           ; BSR set to: 0
 41886  006A7C  51C0               	movf	___fltol@sign1& (0+255),w,b
 41887  006A7E  B4D8               	btfsc	status,2,c
 41888  006A80  D008               	goto	l5668
 41889                           
 41890                           ; BSR set to: 0
 41891  006A82  1FBB               	comf	(___fltol@f1+3)& (0+255),f,b
 41892  006A84  1FBA               	comf	(___fltol@f1+2)& (0+255),f,b
 41893  006A86  1FB9               	comf	(___fltol@f1+1)& (0+255),f,b
 41894  006A88  6DB8               	negf	___fltol@f1& (0+255),b
 41895  006A8A  0E00               	movlw	0
 41896  006A8C  23B9               	addwfc	(___fltol@f1+1)& (0+255),f,b
 41897  006A8E  23BA               	addwfc	(___fltol@f1+2)& (0+255),f,b
 41898  006A90  23BB               	addwfc	(___fltol@f1+3)& (0+255),f,b
 41899  006A92                     l5668:
 41900                           
 41901                           ; BSR set to: 0
 41902                           
 41903                           ; BSR set to: 0
 41904  006A92  C0B8  F0B8         	movff	___fltol@f1,?___fltol
 41905  006A96  C0B9  F0B9         	movff	___fltol@f1+1,?___fltol+1
 41906  006A9A  C0BA  F0BA         	movff	___fltol@f1+2,?___fltol+2
 41907  006A9E  C0BB  F0BB         	movff	___fltol@f1+3,?___fltol+3
 41908  006AA2  0012               	return	
 41909  006AA4                     __end_of___fltol:
 41910                           	opt stack 0
 41911                           tblptru	equ	0xFF8
 41912                           tblptrh	equ	0xFF7
 41913                           tblptrl	equ	0xFF6
 41914                           tablat	equ	0xFF5
 41915                           prodh	equ	0xFF4
 41916                           prodl	equ	0xFF3
 41917                           intcon	equ	0xFF2
 41918                           intcon2	equ	0xFF1
 41919                           postinc0	equ	0xFEE
 41920                           wreg	equ	0xFE8
 41921                           indf1	equ	0xFE7
 41922                           postinc1	equ	0xFE6
 41923                           postdec1	equ	0xFE5
 41924                           fsr1h	equ	0xFE2
 41925                           fsr1l	equ	0xFE1
 41926                           indf2	equ	0xFDF
 41927                           postinc2	equ	0xFDE
 41928                           postdec2	equ	0xFDD
 41929                           plusw2	equ	0xFDB
 41930                           fsr2h	equ	0xFDA
 41931                           fsr2l	equ	0xFD9
 41932                           status	equ	0xFD8
 41933                           
 41934 ;; *************** function ___flneg *****************
 41935 ;; Defined at:
 41936 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
 41937 ;; Parameters:    Size  Location     Type
 41938 ;;  f1              4   64[BANK0 ] long 
 41939 ;; Auto vars:     Size  Location     Type
 41940 ;;		None
 41941 ;; Return value:  Size  Location     Type
 41942 ;;                  4   64[BANK0 ] long 
 41943 ;; Registers used:
 41944 ;;		wreg, status,2, status,0
 41945 ;; Tracked objects:
 41946 ;;		On entry : 0/0
 41947 ;;		On exit  : 0/0
 41948 ;;		Unchanged: 0/0
 41949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41950 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41953 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41954 ;;Total ram usage:        4 bytes
 41955 ;; Hardware stack levels used:    1
 41956 ;; Hardware stack levels required when called:    5
 41957 ;; This function calls:
 41958 ;;		Nothing
 41959 ;; This function is called by:
 41960 ;;		_readPotentiometers
 41961 ;;		_calculate_pulse_length
 41962 ;; This function uses a non-reentrant model
 41963 ;;
 41964                           
 41965                           	psect	text131
 41966  00931A                     __ptext131:
 41967                           	opt stack 0
 41968  00931A                     ___flneg:
 41969                           	opt stack 22
 41970                           
 41971                           ; BSR set to: 0
 41972                           ;incstack = 0
 41973  00931A  0100               	movlb	0	; () banked
 41974  00931C  51A0               	movf	___flneg@f1& (0+255),w,b
 41975  00931E  11A1               	iorwf	(___flneg@f1+1)& (0+255),w,b
 41976  009320  11A2               	iorwf	(___flneg@f1+2)& (0+255),w,b
 41977  009322  11A3               	iorwf	(___flneg@f1+3)& (0+255),w,b
 41978  009324  B4D8               	btfsc	status,2,c
 41979  009326  D008               	goto	l5634
 41980                           
 41981                           ; BSR set to: 0
 41982  009328  0E00               	movlw	0
 41983  00932A  1BA0               	xorwf	___flneg@f1& (0+255),f,b
 41984  00932C  0E00               	movlw	0
 41985  00932E  1BA1               	xorwf	(___flneg@f1+1)& (0+255),f,b
 41986  009330  0E00               	movlw	0
 41987  009332  1BA2               	xorwf	(___flneg@f1+2)& (0+255),f,b
 41988  009334  0E80               	movlw	128
 41989  009336  1BA3               	xorwf	(___flneg@f1+3)& (0+255),f,b
 41990  009338                     l5634:
 41991                           
 41992                           ; BSR set to: 0
 41993                           
 41994                           ; BSR set to: 0
 41995  009338  C0A0  F0A0         	movff	___flneg@f1,?___flneg
 41996  00933C  C0A1  F0A1         	movff	___flneg@f1+1,?___flneg+1
 41997  009340  C0A2  F0A2         	movff	___flneg@f1+2,?___flneg+2
 41998  009344  C0A3  F0A3         	movff	___flneg@f1+3,?___flneg+3
 41999  009348  0012               	return	
 42000  00934A                     __end_of___flneg:
 42001                           	opt stack 0
 42002                           tblptru	equ	0xFF8
 42003                           tblptrh	equ	0xFF7
 42004                           tblptrl	equ	0xFF6
 42005                           tablat	equ	0xFF5
 42006                           prodh	equ	0xFF4
 42007                           prodl	equ	0xFF3
 42008                           intcon	equ	0xFF2
 42009                           intcon2	equ	0xFF1
 42010                           postinc0	equ	0xFEE
 42011                           wreg	equ	0xFE8
 42012                           indf1	equ	0xFE7
 42013                           postinc1	equ	0xFE6
 42014                           postdec1	equ	0xFE5
 42015                           fsr1h	equ	0xFE2
 42016                           fsr1l	equ	0xFE1
 42017                           indf2	equ	0xFDF
 42018                           postinc2	equ	0xFDE
 42019                           postdec2	equ	0xFDD
 42020                           plusw2	equ	0xFDB
 42021                           fsr2h	equ	0xFDA
 42022                           fsr2l	equ	0xFD9
 42023                           status	equ	0xFD8
 42024                           
 42025 ;; *************** function ___flmul *****************
 42026 ;; Defined at:
 42027 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
 42028 ;; Parameters:    Size  Location     Type
 42029 ;;  b               4   14[BANK0 ] long 
 42030 ;;  a               4   18[BANK0 ] long 
 42031 ;; Auto vars:     Size  Location     Type
 42032 ;;  prod            4   33[BANK0 ] struct .
 42033 ;;  grs             4   27[BANK0 ] unsigned long 
 42034 ;;  temp            2   37[BANK0 ] struct .
 42035 ;;  bexp            1   32[BANK0 ] unsigned char 
 42036 ;;  aexp            1   31[BANK0 ] unsigned char 
 42037 ;;  sign            1   26[BANK0 ] unsigned char 
 42038 ;; Return value:  Size  Location     Type
 42039 ;;                  4   14[BANK0 ] unsigned char 
 42040 ;; Registers used:
 42041 ;;		wreg, status,2, status,0, prodl, prodh
 42042 ;; Tracked objects:
 42043 ;;		On entry : 0/0
 42044 ;;		On exit  : 0/0
 42045 ;;		Unchanged: 0/0
 42046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42047 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42048 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42049 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42050 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42051 ;;Total ram usage:       25 bytes
 42052 ;; Hardware stack levels used:    1
 42053 ;; Hardware stack levels required when called:    5
 42054 ;; This function calls:
 42055 ;;		Nothing
 42056 ;; This function is called by:
 42057 ;;		_readPotentiometers
 42058 ;;		_calculate_pulse_length
 42059 ;; This function uses a non-reentrant model
 42060 ;;
 42061                           
 42062                           	psect	text132
 42063  002E9C                     __ptext132:
 42064                           	opt stack 0
 42065  002E9C                     ___flmul:
 42066                           	opt stack 22
 42067                           
 42068                           ; BSR set to: 0
 42069                           ;incstack = 0
 42070  002E9C  0100               	movlb	0	; () banked
 42071  002E9E  5171               	movf	(___flmul@b+3)& (0+255),w,b
 42072  002EA0  0B80               	andlw	128
 42073  002EA2  6F7A               	movwf	___flmul@sign& (0+255),b
 42074  002EA4  5171               	movf	(___flmul@b+3)& (0+255),w,b
 42075  002EA6  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 42076  002EA8  6F80               	movwf	___flmul@bexp& (0+255),b
 42077                           
 42078                           ; BSR set to: 0
 42079  002EAA  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 42080                           
 42081                           ; BSR set to: 0
 42082  002EAC  8180               	bsf	___flmul@bexp& (0+255),0,b
 42083                           
 42084                           ; BSR set to: 0
 42085                           
 42086                           ; BSR set to: 0
 42087  002EAE  5180               	movf	___flmul@bexp& (0+255),w,b
 42088  002EB0  B4D8               	btfsc	status,2,c
 42089  002EB2  D00D               	goto	l5955
 42090                           
 42091                           ; BSR set to: 0
 42092  002EB4  2980               	incf	___flmul@bexp& (0+255),w,b
 42093  002EB6  A4D8               	btfss	status,2,c
 42094  002EB8  D008               	goto	l5956
 42095                           
 42096                           ; BSR set to: 0
 42097  002EBA  0E00               	movlw	0
 42098  002EBC  6F6E               	movwf	___flmul@b& (0+255),b
 42099  002EBE  0E00               	movlw	0
 42100  002EC0  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 42101  002EC2  0E00               	movlw	0
 42102  002EC4  6F70               	movwf	(___flmul@b+2)& (0+255),b
 42103  002EC6  0E00               	movlw	0
 42104  002EC8  6F71               	movwf	(___flmul@b+3)& (0+255),b
 42105  002ECA                     l5956:
 42106                           
 42107                           ; BSR set to: 0
 42108                           
 42109                           ; BSR set to: 0
 42110  002ECA  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 42111  002ECC  D008               	goto	l5957
 42112  002ECE                     l5955:
 42113                           
 42114                           ; BSR set to: 0
 42115                           
 42116                           ; BSR set to: 0
 42117  002ECE  0E00               	movlw	0
 42118  002ED0  6F6E               	movwf	___flmul@b& (0+255),b
 42119  002ED2  0E00               	movlw	0
 42120  002ED4  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 42121  002ED6  0E00               	movlw	0
 42122  002ED8  6F70               	movwf	(___flmul@b+2)& (0+255),b
 42123  002EDA  0E00               	movlw	0
 42124  002EDC  6F71               	movwf	(___flmul@b+3)& (0+255),b
 42125  002EDE                     l5957:
 42126                           
 42127                           ; BSR set to: 0
 42128                           
 42129                           ; BSR set to: 0
 42130  002EDE  5175               	movf	(___flmul@a+3)& (0+255),w,b
 42131  002EE0  0B80               	andlw	128
 42132  002EE2  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 42133                           
 42134                           ; BSR set to: 0
 42135  002EE4  5175               	movf	(___flmul@a+3)& (0+255),w,b
 42136  002EE6  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 42137  002EE8  6F7F               	movwf	___flmul@aexp& (0+255),b
 42138                           
 42139                           ; BSR set to: 0
 42140  002EEA  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 42141                           
 42142                           ; BSR set to: 0
 42143  002EEC  817F               	bsf	___flmul@aexp& (0+255),0,b
 42144                           
 42145                           ; BSR set to: 0
 42146                           
 42147                           ; BSR set to: 0
 42148  002EEE  517F               	movf	___flmul@aexp& (0+255),w,b
 42149  002EF0  B4D8               	btfsc	status,2,c
 42150  002EF2  D00D               	goto	l5959
 42151                           
 42152                           ; BSR set to: 0
 42153  002EF4  297F               	incf	___flmul@aexp& (0+255),w,b
 42154  002EF6  A4D8               	btfss	status,2,c
 42155  002EF8  D008               	goto	l5960
 42156                           
 42157                           ; BSR set to: 0
 42158  002EFA  0E00               	movlw	0
 42159  002EFC  6F72               	movwf	___flmul@a& (0+255),b
 42160  002EFE  0E00               	movlw	0
 42161  002F00  6F73               	movwf	(___flmul@a+1)& (0+255),b
 42162  002F02  0E00               	movlw	0
 42163  002F04  6F74               	movwf	(___flmul@a+2)& (0+255),b
 42164  002F06  0E00               	movlw	0
 42165  002F08  6F75               	movwf	(___flmul@a+3)& (0+255),b
 42166  002F0A                     l5960:
 42167                           
 42168                           ; BSR set to: 0
 42169                           
 42170                           ; BSR set to: 0
 42171  002F0A  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 42172  002F0C  D008               	goto	l5961
 42173  002F0E                     l5959:
 42174                           
 42175                           ; BSR set to: 0
 42176                           
 42177                           ; BSR set to: 0
 42178  002F0E  0E00               	movlw	0
 42179  002F10  6F72               	movwf	___flmul@a& (0+255),b
 42180  002F12  0E00               	movlw	0
 42181  002F14  6F73               	movwf	(___flmul@a+1)& (0+255),b
 42182  002F16  0E00               	movlw	0
 42183  002F18  6F74               	movwf	(___flmul@a+2)& (0+255),b
 42184  002F1A  0E00               	movlw	0
 42185  002F1C  6F75               	movwf	(___flmul@a+3)& (0+255),b
 42186  002F1E                     l5961:
 42187                           
 42188                           ; BSR set to: 0
 42189  002F1E  517F               	movf	___flmul@aexp& (0+255),w,b
 42190  002F20  B4D8               	btfsc	status,2,c
 42191  002F22  D003               	goto	u26400
 42192                           
 42193                           ; BSR set to: 0
 42194  002F24  5180               	movf	___flmul@bexp& (0+255),w,b
 42195  002F26  A4D8               	btfss	status,2,c
 42196  002F28  D009               	goto	l5962
 42197  002F2A                     u26400:
 42198                           
 42199                           ; BSR set to: 0
 42200                           
 42201                           ; BSR set to: 0
 42202  002F2A  0E00               	movlw	0
 42203  002F2C  6F6E               	movwf	?___flmul& (0+255),b
 42204  002F2E  0E00               	movlw	0
 42205  002F30  6F6F               	movwf	(?___flmul+1)& (0+255),b
 42206  002F32  0E00               	movlw	0
 42207  002F34  6F70               	movwf	(?___flmul+2)& (0+255),b
 42208  002F36  0E00               	movlw	0
 42209  002F38  6F71               	movwf	(?___flmul+3)& (0+255),b
 42210                           
 42211                           ; BSR set to: 0
 42212  002F3A  0012               	return	
 42213  002F3C                     l5962:
 42214                           
 42215                           ; BSR set to: 0
 42216                           
 42217                           ; BSR set to: 0
 42218  002F3C  5174               	movf	(___flmul@a+2)& (0+255),w,b
 42219  002F3E  036E               	mulwf	___flmul@b& (0+255),b
 42220  002F40  CFF3 F085          	movff	prodl,___flmul@temp
 42221  002F44  CFF4 F086          	movff	prodh,___flmul@temp+1
 42222                           
 42223                           ; BSR set to: 0
 42224  002F48  5185               	movf	___flmul@temp& (0+255),w,b
 42225  002F4A  6F7B               	movwf	___flmul@grs& (0+255),b
 42226  002F4C  6B7C               	clrf	(___flmul@grs+1)& (0+255),b
 42227  002F4E  6B7D               	clrf	(___flmul@grs+2)& (0+255),b
 42228  002F50  6B7E               	clrf	(___flmul@grs+3)& (0+255),b
 42229                           
 42230                           ; BSR set to: 0
 42231  002F52  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42232  002F54  6F81               	movwf	___flmul@prod& (0+255),b
 42233  002F56  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 42234  002F58  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 42235  002F5A  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 42236  002F5C  5173               	movf	(___flmul@a+1)& (0+255),w,b
 42237  002F5E  036F               	mulwf	(___flmul@b+1)& (0+255),b
 42238  002F60  CFF3 F085          	movff	prodl,___flmul@temp
 42239  002F64  CFF4 F086          	movff	prodh,___flmul@temp+1
 42240                           
 42241                           ; BSR set to: 0
 42242  002F68  5185               	movf	___flmul@temp& (0+255),w,b
 42243  002F6A  277B               	addwf	___flmul@grs& (0+255),f,b
 42244  002F6C  0E00               	movlw	0
 42245  002F6E  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42246  002F70  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42247  002F72  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42248                           
 42249                           ; BSR set to: 0
 42250  002F74  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42251  002F76  2781               	addwf	___flmul@prod& (0+255),f,b
 42252  002F78  0E00               	movlw	0
 42253  002F7A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42254  002F7C  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42255  002F7E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42256  002F80  5172               	movf	___flmul@a& (0+255),w,b
 42257  002F82  0370               	mulwf	(___flmul@b+2)& (0+255),b
 42258  002F84  CFF3 F085          	movff	prodl,___flmul@temp
 42259  002F88  CFF4 F086          	movff	prodh,___flmul@temp+1
 42260                           
 42261                           ; BSR set to: 0
 42262  002F8C  5185               	movf	___flmul@temp& (0+255),w,b
 42263  002F8E  277B               	addwf	___flmul@grs& (0+255),f,b
 42264  002F90  0E00               	movlw	0
 42265  002F92  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42266  002F94  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42267  002F96  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42268                           
 42269                           ; BSR set to: 0
 42270  002F98  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42271  002F9A  2781               	addwf	___flmul@prod& (0+255),f,b
 42272  002F9C  0E00               	movlw	0
 42273  002F9E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42274  002FA0  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42275  002FA2  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42276                           
 42277                           ; BSR set to: 0
 42278  002FA4  C07D  F07E         	movff	___flmul@grs+2,___flmul@grs+3
 42279  002FA8  C07C  F07D         	movff	___flmul@grs+1,___flmul@grs+2
 42280  002FAC  C07B  F07C         	movff	___flmul@grs,___flmul@grs+1
 42281  002FB0  6B7B               	clrf	___flmul@grs& (0+255),b
 42282                           
 42283                           ; BSR set to: 0
 42284  002FB2  5172               	movf	___flmul@a& (0+255),w,b
 42285  002FB4  036F               	mulwf	(___flmul@b+1)& (0+255),b
 42286  002FB6  CFF3 F085          	movff	prodl,___flmul@temp
 42287  002FBA  CFF4 F086          	movff	prodh,___flmul@temp+1
 42288                           
 42289                           ; BSR set to: 0
 42290  002FBE  5185               	movf	___flmul@temp& (0+255),w,b
 42291  002FC0  277B               	addwf	___flmul@grs& (0+255),f,b
 42292  002FC2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42293  002FC4  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42294  002FC6  0E00               	movlw	0
 42295  002FC8  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42296  002FCA  0E00               	movlw	0
 42297  002FCC  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42298                           
 42299                           ; BSR set to: 0
 42300  002FCE  5173               	movf	(___flmul@a+1)& (0+255),w,b
 42301  002FD0  036E               	mulwf	___flmul@b& (0+255),b
 42302  002FD2  CFF3 F085          	movff	prodl,___flmul@temp
 42303  002FD6  CFF4 F086          	movff	prodh,___flmul@temp+1
 42304                           
 42305                           ; BSR set to: 0
 42306  002FDA  5185               	movf	___flmul@temp& (0+255),w,b
 42307  002FDC  277B               	addwf	___flmul@grs& (0+255),f,b
 42308  002FDE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42309  002FE0  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42310  002FE2  0E00               	movlw	0
 42311  002FE4  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42312  002FE6  0E00               	movlw	0
 42313  002FE8  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42314                           
 42315                           ; BSR set to: 0
 42316  002FEA  C07D  F07E         	movff	___flmul@grs+2,___flmul@grs+3
 42317  002FEE  C07C  F07D         	movff	___flmul@grs+1,___flmul@grs+2
 42318  002FF2  C07B  F07C         	movff	___flmul@grs,___flmul@grs+1
 42319  002FF6  6B7B               	clrf	___flmul@grs& (0+255),b
 42320  002FF8  5172               	movf	___flmul@a& (0+255),w,b
 42321  002FFA  036E               	mulwf	___flmul@b& (0+255),b
 42322  002FFC  CFF3 F085          	movff	prodl,___flmul@temp
 42323  003000  CFF4 F086          	movff	prodh,___flmul@temp+1
 42324                           
 42325                           ; BSR set to: 0
 42326  003004  5185               	movf	___flmul@temp& (0+255),w,b
 42327  003006  277B               	addwf	___flmul@grs& (0+255),f,b
 42328  003008  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42329  00300A  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42330  00300C  0E00               	movlw	0
 42331  00300E  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42332  003010  0E00               	movlw	0
 42333  003012  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42334                           
 42335                           ; BSR set to: 0
 42336  003014  5174               	movf	(___flmul@a+2)& (0+255),w,b
 42337  003016  036F               	mulwf	(___flmul@b+1)& (0+255),b
 42338  003018  CFF3 F085          	movff	prodl,___flmul@temp
 42339  00301C  CFF4 F086          	movff	prodh,___flmul@temp+1
 42340  003020  5185               	movf	___flmul@temp& (0+255),w,b
 42341  003022  2781               	addwf	___flmul@prod& (0+255),f,b
 42342  003024  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42343  003026  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42344  003028  0E00               	movlw	0
 42345  00302A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42346  00302C  0E00               	movlw	0
 42347  00302E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42348                           
 42349                           ; BSR set to: 0
 42350  003030  5173               	movf	(___flmul@a+1)& (0+255),w,b
 42351  003032  0370               	mulwf	(___flmul@b+2)& (0+255),b
 42352  003034  CFF3 F085          	movff	prodl,___flmul@temp
 42353  003038  CFF4 F086          	movff	prodh,___flmul@temp+1
 42354                           
 42355                           ; BSR set to: 0
 42356  00303C  5185               	movf	___flmul@temp& (0+255),w,b
 42357  00303E  2781               	addwf	___flmul@prod& (0+255),f,b
 42358  003040  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42359  003042  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42360  003044  0E00               	movlw	0
 42361  003046  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42362  003048  0E00               	movlw	0
 42363  00304A  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42364  00304C  5174               	movf	(___flmul@a+2)& (0+255),w,b
 42365  00304E  0370               	mulwf	(___flmul@b+2)& (0+255),b
 42366  003050  CFF3 F085          	movff	prodl,___flmul@temp
 42367  003054  CFF4 F086          	movff	prodh,___flmul@temp+1
 42368                           
 42369                           ; BSR set to: 0
 42370  003058  5185               	movf	___flmul@temp& (0+255),w,b
 42371  00305A  6F76               	movwf	??___flmul& (0+255),b
 42372  00305C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42373  00305E  6F77               	movwf	(??___flmul+1)& (0+255),b
 42374  003060  6B78               	clrf	(??___flmul+2)& (0+255),b
 42375  003062  6B79               	clrf	(??___flmul+3)& (0+255),b
 42376  003064  C078  F079         	movff	??___flmul+2,??___flmul+3
 42377  003068  C077  F078         	movff	??___flmul+1,??___flmul+2
 42378  00306C  C076  F077         	movff	??___flmul,??___flmul+1
 42379  003070  6B76               	clrf	??___flmul& (0+255),b
 42380  003072  5176               	movf	??___flmul& (0+255),w,b
 42381  003074  2781               	addwf	___flmul@prod& (0+255),f,b
 42382  003076  5177               	movf	(??___flmul+1)& (0+255),w,b
 42383  003078  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42384  00307A  5178               	movf	(??___flmul+2)& (0+255),w,b
 42385  00307C  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42386  00307E  5179               	movf	(??___flmul+3)& (0+255),w,b
 42387  003080  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42388                           
 42389                           ; BSR set to: 0
 42390  003082  C07B  F076         	movff	___flmul@grs,??___flmul
 42391  003086  C07C  F077         	movff	___flmul@grs+1,??___flmul+1
 42392  00308A  C07D  F078         	movff	___flmul@grs+2,??___flmul+2
 42393  00308E  C07E  F079         	movff	___flmul@grs+3,??___flmul+3
 42394  003092  0E19               	movlw	25
 42395  003094  D005               	goto	u26410
 42396  003096                     u26415:
 42397  003096  90D8               	bcf	status,0,c
 42398  003098  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 42399  00309A  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 42400  00309C  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 42401  00309E  3376               	rrcf	??___flmul& (0+255),f,b
 42402  0030A0                     u26410:
 42403  0030A0  2EE8               	decfsz	wreg,f,c
 42404  0030A2  D7F9               	goto	u26415
 42405  0030A4  5176               	movf	??___flmul& (0+255),w,b
 42406  0030A6  2781               	addwf	___flmul@prod& (0+255),f,b
 42407  0030A8  5177               	movf	(??___flmul+1)& (0+255),w,b
 42408  0030AA  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42409  0030AC  5178               	movf	(??___flmul+2)& (0+255),w,b
 42410  0030AE  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42411  0030B0  5179               	movf	(??___flmul+3)& (0+255),w,b
 42412  0030B2  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42413                           
 42414                           ; BSR set to: 0
 42415  0030B4  C07D  F07E         	movff	___flmul@grs+2,___flmul@grs+3
 42416  0030B8  C07C  F07D         	movff	___flmul@grs+1,___flmul@grs+2
 42417  0030BC  C07B  F07C         	movff	___flmul@grs,___flmul@grs+1
 42418  0030C0  6B7B               	clrf	___flmul@grs& (0+255),b
 42419                           
 42420                           ; BSR set to: 0
 42421  0030C2  517F               	movf	___flmul@aexp& (0+255),w,b
 42422  0030C4  C080  F076         	movff	___flmul@bexp,??___flmul
 42423  0030C8  6B77               	clrf	(??___flmul+1)& (0+255),b
 42424  0030CA  2776               	addwf	??___flmul& (0+255),f,b
 42425  0030CC  0E00               	movlw	0
 42426  0030CE  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 42427  0030D0  0E82               	movlw	130
 42428  0030D2  2576               	addwf	??___flmul& (0+255),w,b
 42429  0030D4  6F85               	movwf	___flmul@temp& (0+255),b
 42430  0030D6  0EFF               	movlw	255
 42431  0030D8  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 42432  0030DA  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 42433  0030DC  D00F               	goto	l5966
 42434  0030DE                     
 42435                           ; BSR set to: 0
 42436                           
 42437                           ; BSR set to: 0
 42438  0030DE  90D8               	bcf	status,0,c
 42439  0030E0  3781               	rlcf	___flmul@prod& (0+255),f,b
 42440  0030E2  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 42441  0030E4  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 42442  0030E6  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 42443                           
 42444                           ; BSR set to: 0
 42445  0030E8  BF7E               	btfsc	(___flmul@grs+3)& (0+255),7,b
 42446                           
 42447                           ; BSR set to: 0
 42448  0030EA  8181               	bsf	___flmul@prod& (0+255),0,b
 42449                           
 42450                           ; BSR set to: 0
 42451  0030EC  90D8               	bcf	status,0,c
 42452  0030EE  377B               	rlcf	___flmul@grs& (0+255),f,b
 42453  0030F0  377C               	rlcf	(___flmul@grs+1)& (0+255),f,b
 42454  0030F2  377D               	rlcf	(___flmul@grs+2)& (0+255),f,b
 42455  0030F4  377E               	rlcf	(___flmul@grs+3)& (0+255),f,b
 42456  0030F6  0785               	decf	___flmul@temp& (0+255),f,b
 42457  0030F8  A0D8               	btfss	status,0,c
 42458  0030FA  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 42459  0030FC                     l5966:
 42460                           
 42461                           ; BSR set to: 0
 42462                           
 42463                           ; BSR set to: 0
 42464  0030FC  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 42465  0030FE  D7EF               	goto	l5967
 42466                           
 42467                           ; BSR set to: 0
 42468                           
 42469                           ; BSR set to: 0
 42470  003100  0E00               	movlw	0
 42471  003102  6F7F               	movwf	___flmul@aexp& (0+255),b
 42472                           
 42473                           ; BSR set to: 0
 42474  003104  AF7E               	btfss	(___flmul@grs+3)& (0+255),7,b
 42475  003106  D016               	goto	l5973
 42476                           
 42477                           ; BSR set to: 0
 42478  003108  0EFF               	movlw	255
 42479  00310A  157B               	andwf	___flmul@grs& (0+255),w,b
 42480  00310C  6F76               	movwf	??___flmul& (0+255),b
 42481  00310E  0EFF               	movlw	255
 42482  003110  157C               	andwf	(___flmul@grs+1)& (0+255),w,b
 42483  003112  6F77               	movwf	(??___flmul+1)& (0+255),b
 42484  003114  0EFF               	movlw	255
 42485  003116  157D               	andwf	(___flmul@grs+2)& (0+255),w,b
 42486  003118  6F78               	movwf	(??___flmul+2)& (0+255),b
 42487  00311A  0E7F               	movlw	127
 42488  00311C  157E               	andwf	(___flmul@grs+3)& (0+255),w,b
 42489  00311E  6F79               	movwf	(??___flmul+3)& (0+255),b
 42490  003120  5176               	movf	??___flmul& (0+255),w,b
 42491  003122  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 42492  003124  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 42493  003126  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 42494  003128  A4D8               	btfss	status,2,c
 42495  00312A  D002               	goto	u26460
 42496                           
 42497                           ; BSR set to: 0
 42498                           
 42499                           ; BSR set to: 0
 42500  00312C  A181               	btfss	___flmul@prod& (0+255),0,b
 42501  00312E  D002               	goto	l5973
 42502  003130                     u26460:
 42503                           
 42504                           ; BSR set to: 0
 42505  003130  0E01               	movlw	1
 42506  003132  6F7F               	movwf	___flmul@aexp& (0+255),b
 42507  003134                     l5973:
 42508                           
 42509                           ; BSR set to: 0
 42510                           
 42511                           ; BSR set to: 0
 42512                           
 42513                           ; BSR set to: 0
 42514  003134  517F               	movf	___flmul@aexp& (0+255),w,b
 42515  003136  B4D8               	btfsc	status,2,c
 42516  003138  D01F               	goto	l5975
 42517                           
 42518                           ; BSR set to: 0
 42519  00313A  0E01               	movlw	1
 42520  00313C  2781               	addwf	___flmul@prod& (0+255),f,b
 42521  00313E  0E00               	movlw	0
 42522  003140  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42523  003142  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42524  003144  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42525                           
 42526                           ; BSR set to: 0
 42527  003146  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 42528  003148  D017               	goto	l5975
 42529                           
 42530                           ; BSR set to: 0
 42531  00314A  C081  F076         	movff	___flmul@prod,??___flmul
 42532  00314E  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 42533  003152  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 42534  003156  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 42535  00315A  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 42536  00315C  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 42537  00315E  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 42538  003160  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 42539  003162  3376               	rrcf	??___flmul& (0+255),f,b
 42540  003164  C076  F081         	movff	??___flmul,___flmul@prod
 42541  003168  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 42542  00316C  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 42543  003170  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 42544                           
 42545                           ; BSR set to: 0
 42546  003174  4B85               	infsnz	___flmul@temp& (0+255),f,b
 42547  003176  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 42548  003178                     l5975:
 42549                           
 42550                           ; BSR set to: 0
 42551                           
 42552                           ; BSR set to: 0
 42553                           
 42554                           ; BSR set to: 0
 42555  003178  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 42556  00317A  D00D               	goto	l5976
 42557  00317C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42558  00317E  E103               	bnz	u26490
 42559  003180  2985               	incf	___flmul@temp& (0+255),w,b
 42560  003182  A0D8               	btfss	status,0,c
 42561  003184  D008               	goto	l5976
 42562  003186                     u26490:
 42563                           
 42564                           ; BSR set to: 0
 42565  003186  0E00               	movlw	0
 42566  003188  6F81               	movwf	___flmul@prod& (0+255),b
 42567  00318A  0E00               	movlw	0
 42568  00318C  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 42569  00318E  0E80               	movlw	128
 42570  003190  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 42571  003192  0E7F               	movlw	127
 42572  003194  D020               	goto	L21
 42573  003196                     l5976:
 42574                           
 42575                           ; BSR set to: 0
 42576                           
 42577                           ; BSR set to: 0
 42578  003196  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 42579  003198  D005               	goto	u26500
 42580  00319A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42581  00319C  E10E               	bnz	l5978
 42582  00319E  0585               	decf	___flmul@temp& (0+255),w,b
 42583  0031A0  B0D8               	btfsc	status,0,c
 42584  0031A2  D00B               	goto	l5978
 42585  0031A4                     u26500:
 42586                           
 42587                           ; BSR set to: 0
 42588  0031A4  0E00               	movlw	0
 42589  0031A6  6F81               	movwf	___flmul@prod& (0+255),b
 42590  0031A8  0E00               	movlw	0
 42591  0031AA  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 42592  0031AC  0E00               	movlw	0
 42593  0031AE  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 42594  0031B0  0E00               	movlw	0
 42595  0031B2  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 42596  0031B4  0E00               	movlw	0
 42597  0031B6  6F7A               	movwf	___flmul@sign& (0+255),b
 42598  0031B8  D00F               	goto	l5979
 42599  0031BA                     l5978:
 42600                           
 42601                           ; BSR set to: 0
 42602  0031BA  C085  F080         	movff	___flmul@temp,___flmul@bexp
 42603                           
 42604                           ; BSR set to: 0
 42605  0031BE  0EFF               	movlw	255
 42606  0031C0  1781               	andwf	___flmul@prod& (0+255),f,b
 42607  0031C2  0EFF               	movlw	255
 42608  0031C4  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 42609  0031C6  0E7F               	movlw	127
 42610  0031C8  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 42611  0031CA  0E00               	movlw	0
 42612  0031CC  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 42613                           
 42614                           ; BSR set to: 0
 42615  0031CE  B180               	btfsc	___flmul@bexp& (0+255),0,b
 42616                           
 42617                           ; BSR set to: 0
 42618  0031D0  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 42619                           
 42620                           ; BSR set to: 0
 42621                           
 42622                           ; BSR set to: 0
 42623  0031D2  90D8               	bcf	status,0,c
 42624  0031D4  3180               	rrcf	___flmul@bexp& (0+255),w,b
 42625  0031D6                     L21:
 42626  0031D6  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 42627  0031D8                     l5979:
 42628                           
 42629                           ; BSR set to: 0
 42630                           
 42631                           ; BSR set to: 0
 42632                           
 42633                           ; BSR set to: 0
 42634  0031D8  517A               	movf	___flmul@sign& (0+255),w,b
 42635  0031DA  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 42636                           
 42637                           ; BSR set to: 0
 42638  0031DC  C081  F06E         	movff	___flmul@prod,?___flmul
 42639  0031E0  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 42640  0031E4  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 42641  0031E8  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 42642  0031EC  0012               	return	
 42643  0031EE                     __end_of___flmul:
 42644                           	opt stack 0
 42645                           tblptru	equ	0xFF8
 42646                           tblptrh	equ	0xFF7
 42647                           tblptrl	equ	0xFF6
 42648                           tablat	equ	0xFF5
 42649                           prodh	equ	0xFF4
 42650                           prodl	equ	0xFF3
 42651                           intcon	equ	0xFF2
 42652                           intcon2	equ	0xFF1
 42653                           postinc0	equ	0xFEE
 42654                           wreg	equ	0xFE8
 42655                           indf1	equ	0xFE7
 42656                           postinc1	equ	0xFE6
 42657                           postdec1	equ	0xFE5
 42658                           fsr1h	equ	0xFE2
 42659                           fsr1l	equ	0xFE1
 42660                           indf2	equ	0xFDF
 42661                           postinc2	equ	0xFDE
 42662                           postdec2	equ	0xFDD
 42663                           plusw2	equ	0xFDB
 42664                           fsr2h	equ	0xFDA
 42665                           fsr2l	equ	0xFD9
 42666                           status	equ	0xFD8
 42667                           
 42668 ;; *************** function ___fladd *****************
 42669 ;; Defined at:
 42670 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 42671 ;; Parameters:    Size  Location     Type
 42672 ;;  b               4   68[BANK0 ] unsigned char 
 42673 ;;  a               4   72[BANK0 ] unsigned char 
 42674 ;; Auto vars:     Size  Location     Type
 42675 ;;  grs             1   87[BANK0 ] unsigned char 
 42676 ;;  bexp            1   86[BANK0 ] unsigned char 
 42677 ;;  aexp            1   85[BANK0 ] unsigned char 
 42678 ;;  signs           1   84[BANK0 ] unsigned char 
 42679 ;; Return value:  Size  Location     Type
 42680 ;;                  4   68[BANK0 ] unsigned char 
 42681 ;; Registers used:
 42682 ;;		wreg, status,2, status,0
 42683 ;; Tracked objects:
 42684 ;;		On entry : 0/0
 42685 ;;		On exit  : 0/0
 42686 ;;		Unchanged: 0/0
 42687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42688 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42689 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42690 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42691 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42692 ;;Total ram usage:       20 bytes
 42693 ;; Hardware stack levels used:    1
 42694 ;; Hardware stack levels required when called:    5
 42695 ;; This function calls:
 42696 ;;		Nothing
 42697 ;; This function is called by:
 42698 ;;		_readPotentiometers
 42699 ;;		_calculate_pulse_length
 42700 ;; This function uses a non-reentrant model
 42701 ;;
 42702                           
 42703                           	psect	text133
 42704  0031EE                     __ptext133:
 42705                           	opt stack 0
 42706  0031EE                     ___fladd:
 42707                           	opt stack 22
 42708                           
 42709                           ; BSR set to: 0
 42710                           ;incstack = 0
 42711  0031EE  0100               	movlb	0	; () banked
 42712  0031F0  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 42713  0031F2  0B80               	andlw	128
 42714  0031F4  6FB4               	movwf	___fladd@signs& (0+255),b
 42715  0031F6  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 42716  0031F8  25A7               	addwf	(___fladd@b+3)& (0+255),w,b
 42717  0031FA  6FB6               	movwf	___fladd@bexp& (0+255),b
 42718                           
 42719                           ; BSR set to: 0
 42720  0031FC  BFA6               	btfsc	(___fladd@b+2)& (0+255),7,b
 42721                           
 42722                           ; BSR set to: 0
 42723  0031FE  81B6               	bsf	___fladd@bexp& (0+255),0,b
 42724                           
 42725                           ; BSR set to: 0
 42726                           
 42727                           ; BSR set to: 0
 42728  003200  51B6               	movf	___fladd@bexp& (0+255),w,b
 42729  003202  B4D8               	btfsc	status,2,c
 42730  003204  D00D               	goto	l5864
 42731                           
 42732                           ; BSR set to: 0
 42733  003206  29B6               	incf	___fladd@bexp& (0+255),w,b
 42734  003208  A4D8               	btfss	status,2,c
 42735  00320A  D008               	goto	l5865
 42736                           
 42737                           ; BSR set to: 0
 42738  00320C  0E00               	movlw	0
 42739  00320E  6FA4               	movwf	___fladd@b& (0+255),b
 42740  003210  0E00               	movlw	0
 42741  003212  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 42742  003214  0E00               	movlw	0
 42743  003216  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 42744  003218  0E00               	movlw	0
 42745  00321A  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 42746  00321C                     l5865:
 42747                           
 42748                           ; BSR set to: 0
 42749                           
 42750                           ; BSR set to: 0
 42751  00321C  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 42752  00321E  D006               	goto	L22
 42753  003220                     l5864:
 42754                           
 42755                           ; BSR set to: 0
 42756                           
 42757                           ; BSR set to: 0
 42758  003220  0E00               	movlw	0
 42759  003222  6FA4               	movwf	___fladd@b& (0+255),b
 42760  003224  0E00               	movlw	0
 42761  003226  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 42762  003228  0E00               	movlw	0
 42763  00322A  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 42764  00322C                     L22:
 42765  00322C  0E00               	movlw	0
 42766  00322E  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 42767                           
 42768                           ; BSR set to: 0
 42769                           
 42770                           ; BSR set to: 0
 42771  003230  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 42772  003232  0B80               	andlw	128
 42773  003234  6FB5               	movwf	___fladd@aexp& (0+255),b
 42774                           
 42775                           ; BSR set to: 0
 42776  003236  51B4               	movf	___fladd@signs& (0+255),w,b
 42777  003238  19B5               	xorwf	___fladd@aexp& (0+255),w,b
 42778  00323A  A4D8               	btfss	status,2,c
 42779                           
 42780                           ; BSR set to: 0
 42781  00323C  8DB4               	bsf	___fladd@signs& (0+255),6,b
 42782                           
 42783                           ; BSR set to: 0
 42784                           
 42785                           ; BSR set to: 0
 42786  00323E  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 42787  003240  25AB               	addwf	(___fladd@a+3)& (0+255),w,b
 42788  003242  6FB5               	movwf	___fladd@aexp& (0+255),b
 42789                           
 42790                           ; BSR set to: 0
 42791  003244  BFAA               	btfsc	(___fladd@a+2)& (0+255),7,b
 42792                           
 42793                           ; BSR set to: 0
 42794  003246  81B5               	bsf	___fladd@aexp& (0+255),0,b
 42795                           
 42796                           ; BSR set to: 0
 42797                           
 42798                           ; BSR set to: 0
 42799  003248  51B5               	movf	___fladd@aexp& (0+255),w,b
 42800  00324A  B4D8               	btfsc	status,2,c
 42801  00324C  D00D               	goto	l5869
 42802                           
 42803                           ; BSR set to: 0
 42804  00324E  29B5               	incf	___fladd@aexp& (0+255),w,b
 42805  003250  A4D8               	btfss	status,2,c
 42806  003252  D008               	goto	l5870
 42807                           
 42808                           ; BSR set to: 0
 42809  003254  0E00               	movlw	0
 42810  003256  6FA8               	movwf	___fladd@a& (0+255),b
 42811  003258  0E00               	movlw	0
 42812  00325A  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 42813  00325C  0E00               	movlw	0
 42814  00325E  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 42815  003260  0E00               	movlw	0
 42816  003262  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 42817  003264                     l5870:
 42818                           
 42819                           ; BSR set to: 0
 42820                           
 42821                           ; BSR set to: 0
 42822  003264  8FAA               	bsf	(___fladd@a+2)& (0+255),7,b
 42823  003266  D006               	goto	L23
 42824  003268                     l5869:
 42825                           
 42826                           ; BSR set to: 0
 42827                           
 42828                           ; BSR set to: 0
 42829  003268  0E00               	movlw	0
 42830  00326A  6FA8               	movwf	___fladd@a& (0+255),b
 42831  00326C  0E00               	movlw	0
 42832  00326E  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 42833  003270  0E00               	movlw	0
 42834  003272  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 42835  003274                     L23:
 42836  003274  0E00               	movlw	0
 42837  003276  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 42838                           
 42839                           ; BSR set to: 0
 42840                           
 42841                           ; BSR set to: 0
 42842  003278  51B6               	movf	___fladd@bexp& (0+255),w,b
 42843  00327A  5DB5               	subwf	___fladd@aexp& (0+255),w,b
 42844  00327C  B0D8               	btfsc	status,0,c
 42845  00327E  D022               	goto	l5872
 42846                           
 42847                           ; BSR set to: 0
 42848  003280  ADB4               	btfss	___fladd@signs& (0+255),6,b
 42849  003282  D002               	goto	l5873
 42850                           
 42851                           ; BSR set to: 0
 42852  003284  0E80               	movlw	128
 42853  003286  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 42854  003288                     l5873:
 42855                           
 42856                           ; BSR set to: 0
 42857                           
 42858                           ; BSR set to: 0
 42859  003288  C0B6  F0B7         	movff	___fladd@bexp,___fladd@grs
 42860                           
 42861                           ; BSR set to: 0
 42862  00328C  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 42863                           
 42864                           ; BSR set to: 0
 42865  003290  C0B7  F0B5         	movff	___fladd@grs,___fladd@aexp
 42866                           
 42867                           ; BSR set to: 0
 42868  003294  C0A4  F0B7         	movff	___fladd@b,___fladd@grs
 42869                           
 42870                           ; BSR set to: 0
 42871  003298  C0A8  F0A4         	movff	___fladd@a,___fladd@b
 42872                           
 42873                           ; BSR set to: 0
 42874  00329C  C0B7  F0A8         	movff	___fladd@grs,___fladd@a
 42875                           
 42876                           ; BSR set to: 0
 42877  0032A0  C0A5  F0B7         	movff	___fladd@b+1,___fladd@grs
 42878                           
 42879                           ; BSR set to: 0
 42880  0032A4  C0A9  F0A5         	movff	___fladd@a+1,___fladd@b+1
 42881                           
 42882                           ; BSR set to: 0
 42883  0032A8  C0B7  F0A9         	movff	___fladd@grs,___fladd@a+1
 42884                           
 42885                           ; BSR set to: 0
 42886  0032AC  C0A6  F0B7         	movff	___fladd@b+2,___fladd@grs
 42887                           
 42888                           ; BSR set to: 0
 42889  0032B0  C0AA  F0A6         	movff	___fladd@a+2,___fladd@b+2
 42890                           
 42891                           ; BSR set to: 0
 42892  0032B4  C0B7  F0AA         	movff	___fladd@grs,___fladd@a+2
 42893                           
 42894                           ; BSR set to: 0
 42895  0032B8  C0A7  F0B7         	movff	___fladd@b+3,___fladd@grs
 42896                           
 42897                           ; BSR set to: 0
 42898  0032BC  C0AB  F0A7         	movff	___fladd@a+3,___fladd@b+3
 42899                           
 42900                           ; BSR set to: 0
 42901  0032C0  C0B7  F0AB         	movff	___fladd@grs,___fladd@a+3
 42902  0032C4                     l5872:
 42903                           
 42904                           ; BSR set to: 0
 42905                           
 42906                           ; BSR set to: 0
 42907  0032C4  0E00               	movlw	0
 42908  0032C6  6FB7               	movwf	___fladd@grs& (0+255),b
 42909                           
 42910                           ; BSR set to: 0
 42911  0032C8  51B6               	movf	___fladd@bexp& (0+255),w,b
 42912  0032CA  6FAC               	movwf	??___fladd& (0+255),b
 42913  0032CC  6BAD               	clrf	(??___fladd+1)& (0+255),b
 42914  0032CE  1FAC               	comf	??___fladd& (0+255),f,b
 42915  0032D0  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 42916  0032D2  4BAC               	infsnz	??___fladd& (0+255),f,b
 42917  0032D4  2BAD               	incf	(??___fladd+1)& (0+255),f,b
 42918  0032D6  51B5               	movf	___fladd@aexp& (0+255),w,b
 42919  0032D8  6FAE               	movwf	(??___fladd+2)& (0+255),b
 42920  0032DA  6BAF               	clrf	(??___fladd+3)& (0+255),b
 42921  0032DC  51AC               	movf	??___fladd& (0+255),w,b
 42922  0032DE  27AE               	addwf	(??___fladd+2)& (0+255),f,b
 42923  0032E0  51AD               	movf	(??___fladd+1)& (0+255),w,b
 42924  0032E2  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 42925  0032E4  BFAF               	btfsc	(??___fladd+3)& (0+255),7,b
 42926  0032E6  D02C               	goto	l5876
 42927  0032E8  51AF               	movf	(??___fladd+3)& (0+255),w,b
 42928  0032EA  E104               	bnz	u25800
 42929  0032EC  0E1A               	movlw	26
 42930  0032EE  5DAE               	subwf	(??___fladd+2)& (0+255),w,b
 42931  0032F0  A0D8               	btfss	status,0,c
 42932  0032F2  D026               	goto	l5876
 42933  0032F4                     u25800:
 42934                           
 42935                           ; BSR set to: 0
 42936  0032F4  51A4               	movf	___fladd@b& (0+255),w,b
 42937  0032F6  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 42938  0032F8  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 42939  0032FA  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 42940  0032FC  B4D8               	btfsc	status,2,c
 42941  0032FE  D002               	goto	u25810
 42942  003300  0E01               	movlw	1
 42943  003302  D001               	goto	u25820
 42944  003304                     u25810:
 42945  003304  0E00               	movlw	0
 42946  003306                     u25820:
 42947  003306  6FB7               	movwf	___fladd@grs& (0+255),b
 42948                           
 42949                           ; BSR set to: 0
 42950  003308  0E00               	movlw	0
 42951  00330A  6FA4               	movwf	___fladd@b& (0+255),b
 42952  00330C  0E00               	movlw	0
 42953  00330E  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 42954  003310  0E00               	movlw	0
 42955  003312  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 42956  003314  0E00               	movlw	0
 42957  003316  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 42958                           
 42959                           ; BSR set to: 0
 42960  003318  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 42961  00331C  D015               	goto	u25850
 42962  00331E                     l5877:
 42963                           
 42964                           ; BSR set to: 0
 42965  00331E  A1B7               	btfss	___fladd@grs& (0+255),0,b
 42966  003320  D005               	goto	l5878
 42967                           
 42968                           ; BSR set to: 0
 42969  003322  90D8               	bcf	status,0,c
 42970  003324  31B7               	rrcf	___fladd@grs& (0+255),w,b
 42971  003326  0901               	iorlw	1
 42972  003328  6FB7               	movwf	___fladd@grs& (0+255),b
 42973  00332A  D002               	goto	l5879
 42974  00332C                     l5878:
 42975                           
 42976                           ; BSR set to: 0
 42977                           
 42978                           ; BSR set to: 0
 42979  00332C  90D8               	bcf	status,0,c
 42980  00332E  33B7               	rrcf	___fladd@grs& (0+255),f,b
 42981  003330                     l5879:
 42982                           
 42983                           ; BSR set to: 0
 42984                           
 42985                           ; BSR set to: 0
 42986  003330  B1A4               	btfsc	___fladd@b& (0+255),0,b
 42987                           
 42988                           ; BSR set to: 0
 42989  003332  8FB7               	bsf	___fladd@grs& (0+255),7,b
 42990                           
 42991                           ; BSR set to: 0
 42992                           
 42993                           ; BSR set to: 0
 42994  003334  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 42995  003336  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 42996  003338  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 42997  00333A  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 42998  00333C  33A4               	rrcf	___fladd@b& (0+255),f,b
 42999                           
 43000                           ; BSR set to: 0
 43001  00333E  2BB6               	incf	___fladd@bexp& (0+255),f,b
 43002  003340                     l5876:
 43003                           
 43004                           ; BSR set to: 0
 43005  003340  51B5               	movf	___fladd@aexp& (0+255),w,b
 43006  003342  5DB6               	subwf	___fladd@bexp& (0+255),w,b
 43007  003344  A0D8               	btfss	status,0,c
 43008  003346  D7EB               	goto	l5877
 43009  003348                     u25850:
 43010                           
 43011                           ; BSR set to: 0
 43012                           
 43013                           ; BSR set to: 0
 43014  003348  BDB4               	btfsc	___fladd@signs& (0+255),6,b
 43015  00334A  D029               	goto	l5882
 43016                           
 43017                           ; BSR set to: 0
 43018  00334C  51B6               	movf	___fladd@bexp& (0+255),w,b
 43019  00334E  A4D8               	btfss	status,2,c
 43020  003350  D009               	goto	l5883
 43021                           
 43022                           ; BSR set to: 0
 43023  003352  0E00               	movlw	0
 43024  003354  6FA4               	movwf	?___fladd& (0+255),b
 43025  003356  0E00               	movlw	0
 43026  003358  6FA5               	movwf	(?___fladd+1)& (0+255),b
 43027  00335A  0E00               	movlw	0
 43028  00335C  6FA6               	movwf	(?___fladd+2)& (0+255),b
 43029  00335E  0E00               	movlw	0
 43030  003360  6FA7               	movwf	(?___fladd+3)& (0+255),b
 43031                           
 43032                           ; BSR set to: 0
 43033  003362  0012               	return	
 43034  003364                     l5883:
 43035                           
 43036                           ; BSR set to: 0
 43037                           
 43038                           ; BSR set to: 0
 43039  003364  51A8               	movf	___fladd@a& (0+255),w,b
 43040  003366  27A4               	addwf	___fladd@b& (0+255),f,b
 43041  003368  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 43042  00336A  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 43043  00336C  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 43044  00336E  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 43045  003370  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 43046  003372  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 43047                           
 43048                           ; BSR set to: 0
 43049  003374  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 43050  003376  D083               	goto	u25980
 43051                           
 43052                           ; BSR set to: 0
 43053  003378  A1B7               	btfss	___fladd@grs& (0+255),0,b
 43054  00337A  D006               	goto	l5886
 43055                           
 43056                           ; BSR set to: 0
 43057  00337C  90D8               	bcf	status,0,c
 43058  00337E  33B7               	rrcf	___fladd@grs& (0+255),f,b
 43059  003380  51B7               	movf	___fladd@grs& (0+255),w,b
 43060  003382  0901               	iorlw	1
 43061  003384  6FB7               	movwf	___fladd@grs& (0+255),b
 43062  003386  D002               	goto	l5887
 43063  003388                     l5886:
 43064                           
 43065                           ; BSR set to: 0
 43066                           
 43067                           ; BSR set to: 0
 43068  003388  90D8               	bcf	status,0,c
 43069  00338A  33B7               	rrcf	___fladd@grs& (0+255),f,b
 43070  00338C                     l5887:
 43071                           
 43072                           ; BSR set to: 0
 43073                           
 43074                           ; BSR set to: 0
 43075  00338C  B1A4               	btfsc	___fladd@b& (0+255),0,b
 43076                           
 43077                           ; BSR set to: 0
 43078  00338E  8FB7               	bsf	___fladd@grs& (0+255),7,b
 43079                           
 43080                           ; BSR set to: 0
 43081                           
 43082                           ; BSR set to: 0
 43083  003390  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 43084  003392  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 43085  003394  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 43086  003396  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 43087  003398  33A4               	rrcf	___fladd@b& (0+255),f,b
 43088                           
 43089                           ; BSR set to: 0
 43090  00339A  2BB6               	incf	___fladd@bexp& (0+255),f,b
 43091                           
 43092                           ; BSR set to: 0
 43093  00339C  D070               	goto	u25980
 43094  00339E                     l5882:
 43095                           
 43096                           ; BSR set to: 0
 43097                           
 43098                           ; BSR set to: 0
 43099  00339E  51A8               	movf	___fladd@a& (0+255),w,b
 43100  0033A0  5DA4               	subwf	___fladd@b& (0+255),w,b
 43101  0033A2  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 43102  0033A4  59A5               	subwfb	(___fladd@b+1)& (0+255),w,b
 43103  0033A6  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 43104  0033A8  59A6               	subwfb	(___fladd@b+2)& (0+255),w,b
 43105  0033AA  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 43106  0033AC  0A80               	xorlw	128
 43107  0033AE  6FAC               	movwf	??___fladd& (0+255),b
 43108  0033B0  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 43109  0033B2  0A80               	xorlw	128
 43110  0033B4  59AC               	subwfb	??___fladd& (0+255),w,b
 43111  0033B6  B0D8               	btfsc	status,0,c
 43112  0033B8  D036               	goto	l5890
 43113                           
 43114                           ; BSR set to: 0
 43115  0033BA  C0A4  F0AC         	movff	___fladd@b,??___fladd
 43116  0033BE  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 43117  0033C2  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 43118  0033C6  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 43119  0033CA  1FAC               	comf	??___fladd& (0+255),f,b
 43120  0033CC  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 43121  0033CE  1FAE               	comf	(??___fladd+2)& (0+255),f,b
 43122  0033D0  1FAF               	comf	(??___fladd+3)& (0+255),f,b
 43123  0033D2  2BAC               	incf	??___fladd& (0+255),f,b
 43124  0033D4  0E00               	movlw	0
 43125  0033D6  23AD               	addwfc	(??___fladd+1)& (0+255),f,b
 43126  0033D8  23AE               	addwfc	(??___fladd+2)& (0+255),f,b
 43127  0033DA  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 43128  0033DC  51A8               	movf	___fladd@a& (0+255),w,b
 43129  0033DE  25AC               	addwf	??___fladd& (0+255),w,b
 43130  0033E0  6FB0               	movwf	(??___fladd+4)& (0+255),b
 43131  0033E2  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 43132  0033E4  21AD               	addwfc	(??___fladd+1)& (0+255),w,b
 43133  0033E6  6FB1               	movwf	(??___fladd+5)& (0+255),b
 43134  0033E8  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 43135  0033EA  21AE               	addwfc	(??___fladd+2)& (0+255),w,b
 43136  0033EC  6FB2               	movwf	(??___fladd+6)& (0+255),b
 43137  0033EE  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 43138  0033F0  21AF               	addwfc	(??___fladd+3)& (0+255),w,b
 43139  0033F2  6FB3               	movwf	(??___fladd+7)& (0+255),b
 43140  0033F4  0EFF               	movlw	255
 43141  0033F6  25B0               	addwf	(??___fladd+4)& (0+255),w,b
 43142  0033F8  6FA4               	movwf	___fladd@b& (0+255),b
 43143  0033FA  0EFF               	movlw	255
 43144  0033FC  21B1               	addwfc	(??___fladd+5)& (0+255),w,b
 43145  0033FE  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 43146  003400  0EFF               	movlw	255
 43147  003402  21B2               	addwfc	(??___fladd+6)& (0+255),w,b
 43148  003404  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 43149  003406  0EFF               	movlw	255
 43150  003408  21B3               	addwfc	(??___fladd+7)& (0+255),w,b
 43151  00340A  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 43152  00340C  0E80               	movlw	128
 43153  00340E  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 43154                           
 43155                           ; BSR set to: 0
 43156  003410  6DB7               	negf	___fladd@grs& (0+255),b
 43157                           
 43158                           ; BSR set to: 0
 43159  003412  51B7               	movf	___fladd@grs& (0+255),w,b
 43160  003414  A4D8               	btfss	status,2,c
 43161  003416  D00F               	goto	l5892
 43162                           
 43163                           ; BSR set to: 0
 43164  003418  0E01               	movlw	1
 43165  00341A  27A4               	addwf	___fladd@b& (0+255),f,b
 43166  00341C  0E00               	movlw	0
 43167  00341E  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 43168  003420  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 43169  003422  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 43170                           
 43171                           ; BSR set to: 0
 43172  003424  D008               	goto	l5892
 43173  003426                     l5890:
 43174                           
 43175                           ; BSR set to: 0
 43176                           
 43177                           ; BSR set to: 0
 43178  003426  51A8               	movf	___fladd@a& (0+255),w,b
 43179  003428  5FA4               	subwf	___fladd@b& (0+255),f,b
 43180  00342A  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 43181  00342C  5BA5               	subwfb	(___fladd@b+1)& (0+255),f,b
 43182  00342E  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 43183  003430  5BA6               	subwfb	(___fladd@b+2)& (0+255),f,b
 43184  003432  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 43185  003434  5BA7               	subwfb	(___fladd@b+3)& (0+255),f,b
 43186  003436                     l5892:
 43187                           
 43188                           ; BSR set to: 0
 43189  003436  51A4               	movf	___fladd@b& (0+255),w,b
 43190  003438  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 43191  00343A  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 43192  00343C  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 43193  00343E  A4D8               	btfss	status,2,c
 43194  003440  D01C               	goto	l5899
 43195                           
 43196                           ; BSR set to: 0
 43197  003442  51B7               	movf	___fladd@grs& (0+255),w,b
 43198  003444  A4D8               	btfss	status,2,c
 43199  003446  D019               	goto	l5899
 43200                           
 43201                           ; BSR set to: 0
 43202  003448  0E00               	movlw	0
 43203  00344A  6FA4               	movwf	?___fladd& (0+255),b
 43204  00344C  0E00               	movlw	0
 43205  00344E  6FA5               	movwf	(?___fladd+1)& (0+255),b
 43206  003450  0E00               	movlw	0
 43207  003452  6FA6               	movwf	(?___fladd+2)& (0+255),b
 43208  003454  0E00               	movlw	0
 43209  003456  6FA7               	movwf	(?___fladd+3)& (0+255),b
 43210                           
 43211                           ; BSR set to: 0
 43212  003458  0012               	return	
 43213  00345A                     
 43214                           ; BSR set to: 0
 43215                           
 43216                           ; BSR set to: 0
 43217  00345A  90D8               	bcf	status,0,c
 43218  00345C  37A4               	rlcf	___fladd@b& (0+255),f,b
 43219  00345E  37A5               	rlcf	(___fladd@b+1)& (0+255),f,b
 43220  003460  37A6               	rlcf	(___fladd@b+2)& (0+255),f,b
 43221  003462  37A7               	rlcf	(___fladd@b+3)& (0+255),f,b
 43222                           
 43223                           ; BSR set to: 0
 43224  003464  BFB7               	btfsc	___fladd@grs& (0+255),7,b
 43225                           
 43226                           ; BSR set to: 0
 43227  003466  81A4               	bsf	___fladd@b& (0+255),0,b
 43228                           
 43229                           ; BSR set to: 0
 43230                           
 43231                           ; BSR set to: 0
 43232  003468  A1B7               	btfss	___fladd@grs& (0+255),0,b
 43233  00346A  D002               	goto	l5897
 43234                           
 43235                           ; BSR set to: 0
 43236  00346C  80D8               	bsf	status,0,c
 43237  00346E  D001               	goto	L24
 43238  003470                     l5897:
 43239                           
 43240                           ; BSR set to: 0
 43241                           
 43242                           ; BSR set to: 0
 43243  003470  90D8               	bcf	status,0,c
 43244  003472                     L24:
 43245  003472  37B7               	rlcf	___fladd@grs& (0+255),f,b
 43246                           
 43247                           ; BSR set to: 0
 43248                           
 43249                           ; BSR set to: 0
 43250  003474  51B6               	movf	___fladd@bexp& (0+255),w,b
 43251  003476  A4D8               	btfss	status,2,c
 43252                           
 43253                           ; BSR set to: 0
 43254  003478  07B6               	decf	___fladd@bexp& (0+255),f,b
 43255  00347A                     l5899:
 43256                           
 43257                           ; BSR set to: 0
 43258                           
 43259                           ; BSR set to: 0
 43260                           
 43261                           ; BSR set to: 0
 43262  00347A  AFA6               	btfss	(___fladd@b+2)& (0+255),7,b
 43263  00347C  D7EE               	goto	l5895
 43264  00347E                     u25980:
 43265                           
 43266                           ; BSR set to: 0
 43267                           
 43268                           ; BSR set to: 0
 43269                           
 43270                           ; BSR set to: 0
 43271  00347E  0E00               	movlw	0
 43272  003480  6FB5               	movwf	___fladd@aexp& (0+255),b
 43273                           
 43274                           ; BSR set to: 0
 43275  003482  AFB7               	btfss	___fladd@grs& (0+255),7,b
 43276  003484  D00A               	goto	l5904
 43277                           
 43278                           ; BSR set to: 0
 43279  003486  C0B7  F0AC         	movff	___fladd@grs,??___fladd
 43280  00348A  0E7F               	movlw	127
 43281  00348C  17AC               	andwf	??___fladd& (0+255),f,b
 43282  00348E  A4D8               	btfss	status,2,c
 43283  003490  D002               	goto	u26010
 43284                           
 43285                           ; BSR set to: 0
 43286                           
 43287                           ; BSR set to: 0
 43288  003492  A1A4               	btfss	___fladd@b& (0+255),0,b
 43289  003494  D002               	goto	l5904
 43290  003496                     u26010:
 43291                           
 43292                           ; BSR set to: 0
 43293  003496  0E01               	movlw	1
 43294  003498  6FB5               	movwf	___fladd@aexp& (0+255),b
 43295  00349A                     l5904:
 43296                           
 43297                           ; BSR set to: 0
 43298                           
 43299                           ; BSR set to: 0
 43300                           
 43301                           ; BSR set to: 0
 43302  00349A  51B5               	movf	___fladd@aexp& (0+255),w,b
 43303  00349C  B4D8               	btfsc	status,2,c
 43304  00349E  D020               	goto	l5907
 43305                           
 43306                           ; BSR set to: 0
 43307  0034A0  0E01               	movlw	1
 43308  0034A2  27A4               	addwf	___fladd@b& (0+255),f,b
 43309  0034A4  0E00               	movlw	0
 43310  0034A6  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 43311  0034A8  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 43312  0034AA  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 43313                           
 43314                           ; BSR set to: 0
 43315  0034AC  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 43316  0034AE  D018               	goto	l5907
 43317                           
 43318                           ; BSR set to: 0
 43319  0034B0  C0A4  F0AC         	movff	___fladd@b,??___fladd
 43320  0034B4  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 43321  0034B8  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 43322  0034BC  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 43323  0034C0  35AF               	rlcf	(??___fladd+3)& (0+255),w,b
 43324  0034C2  33AF               	rrcf	(??___fladd+3)& (0+255),f,b
 43325  0034C4  33AE               	rrcf	(??___fladd+2)& (0+255),f,b
 43326  0034C6  33AD               	rrcf	(??___fladd+1)& (0+255),f,b
 43327  0034C8  33AC               	rrcf	??___fladd& (0+255),f,b
 43328  0034CA  C0AC  F0A4         	movff	??___fladd,___fladd@b
 43329  0034CE  C0AD  F0A5         	movff	??___fladd+1,___fladd@b+1
 43330  0034D2  C0AE  F0A6         	movff	??___fladd+2,___fladd@b+2
 43331  0034D6  C0AF  F0A7         	movff	??___fladd+3,___fladd@b+3
 43332  0034DA  29B6               	incf	___fladd@bexp& (0+255),w,b
 43333  0034DC  A4D8               	btfss	status,2,c
 43334                           
 43335                           ; BSR set to: 0
 43336  0034DE  2BB6               	incf	___fladd@bexp& (0+255),f,b
 43337  0034E0                     l5907:
 43338                           
 43339                           ; BSR set to: 0
 43340                           
 43341                           ; BSR set to: 0
 43342                           
 43343                           ; BSR set to: 0
 43344                           
 43345                           ; BSR set to: 0
 43346  0034E0  29B6               	incf	___fladd@bexp& (0+255),w,b
 43347  0034E2  B4D8               	btfsc	status,2,c
 43348  0034E4  D003               	goto	u26060
 43349                           
 43350                           ; BSR set to: 0
 43351  0034E6  51B6               	movf	___fladd@bexp& (0+255),w,b
 43352  0034E8  A4D8               	btfss	status,2,c
 43353  0034EA  D00D               	goto	l5911
 43354  0034EC                     u26060:
 43355                           
 43356                           ; BSR set to: 0
 43357                           
 43358                           ; BSR set to: 0
 43359  0034EC  0E00               	movlw	0
 43360  0034EE  6FA4               	movwf	___fladd@b& (0+255),b
 43361  0034F0  0E00               	movlw	0
 43362  0034F2  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 43363  0034F4  0E00               	movlw	0
 43364  0034F6  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 43365  0034F8  0E00               	movlw	0
 43366  0034FA  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 43367  0034FC  51B6               	movf	___fladd@bexp& (0+255),w,b
 43368  0034FE  A4D8               	btfss	status,2,c
 43369  003500  D002               	goto	l5911
 43370                           
 43371                           ; BSR set to: 0
 43372  003502  0E00               	movlw	0
 43373  003504  6FB4               	movwf	___fladd@signs& (0+255),b
 43374  003506                     l5911:
 43375                           
 43376                           ; BSR set to: 0
 43377                           
 43378                           ; BSR set to: 0
 43379                           
 43380                           ; BSR set to: 0
 43381  003506  A1B6               	btfss	___fladd@bexp& (0+255),0,b
 43382  003508  D002               	goto	l5912
 43383                           
 43384                           ; BSR set to: 0
 43385  00350A  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 43386  00350C  D001               	goto	l5913
 43387  00350E                     l5912:
 43388                           
 43389                           ; BSR set to: 0
 43390                           
 43391                           ; BSR set to: 0
 43392  00350E  9FA6               	bcf	(___fladd@b+2)& (0+255),7,b
 43393  003510                     l5913:
 43394                           
 43395                           ; BSR set to: 0
 43396                           
 43397                           ; BSR set to: 0
 43398  003510  90D8               	bcf	status,0,c
 43399  003512  31B6               	rrcf	___fladd@bexp& (0+255),w,b
 43400  003514  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 43401                           
 43402                           ; BSR set to: 0
 43403  003516  BFB4               	btfsc	___fladd@signs& (0+255),7,b
 43404                           
 43405                           ; BSR set to: 0
 43406  003518  8FA7               	bsf	(___fladd@b+3)& (0+255),7,b
 43407                           
 43408                           ; BSR set to: 0
 43409                           
 43410                           ; BSR set to: 0
 43411  00351A  C0A4  F0A4         	movff	___fladd@b,?___fladd
 43412  00351E  C0A5  F0A5         	movff	___fladd@b+1,?___fladd+1
 43413  003522  C0A6  F0A6         	movff	___fladd@b+2,?___fladd+2
 43414  003526  C0A7  F0A7         	movff	___fladd@b+3,?___fladd+3
 43415  00352A  0012               	return	
 43416  00352C                     __end_of___fladd:
 43417                           	opt stack 0
 43418                           tblptru	equ	0xFF8
 43419                           tblptrh	equ	0xFF7
 43420                           tblptrl	equ	0xFF6
 43421                           tablat	equ	0xFF5
 43422                           prodh	equ	0xFF4
 43423                           prodl	equ	0xFF3
 43424                           intcon	equ	0xFF2
 43425                           intcon2	equ	0xFF1
 43426                           postinc0	equ	0xFEE
 43427                           wreg	equ	0xFE8
 43428                           indf1	equ	0xFE7
 43429                           postinc1	equ	0xFE6
 43430                           postdec1	equ	0xFE5
 43431                           fsr1h	equ	0xFE2
 43432                           fsr1l	equ	0xFE1
 43433                           indf2	equ	0xFDF
 43434                           postinc2	equ	0xFDE
 43435                           postdec2	equ	0xFDD
 43436                           plusw2	equ	0xFDB
 43437                           fsr2h	equ	0xFDA
 43438                           fsr2l	equ	0xFD9
 43439                           status	equ	0xFD8
 43440                           
 43441 ;; *************** function _ADC_Read *****************
 43442 ;; Defined at:
 43443 ;;		line 35 in file "adc.c"
 43444 ;; Parameters:    Size  Location     Type
 43445 ;;  adc_channel     1    wreg     unsigned char 
 43446 ;; Auto vars:     Size  Location     Type
 43447 ;;  adc_channel     1    4[BANK0 ] unsigned char 
 43448 ;; Return value:  Size  Location     Type
 43449 ;;                  2    0[BANK0 ] unsigned int 
 43450 ;; Registers used:
 43451 ;;		wreg, status,2, status,0
 43452 ;; Tracked objects:
 43453 ;;		On entry : 0/0
 43454 ;;		On exit  : 0/0
 43455 ;;		Unchanged: 0/0
 43456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43457 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43458 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43459 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43460 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43461 ;;Total ram usage:        5 bytes
 43462 ;; Hardware stack levels used:    1
 43463 ;; Hardware stack levels required when called:    5
 43464 ;; This function calls:
 43465 ;;		Nothing
 43466 ;; This function is called by:
 43467 ;;		_readPotentiometers
 43468 ;; This function uses a non-reentrant model
 43469 ;;
 43470                           
 43471                           	psect	text134
 43472  009216                     __ptext134:
 43473                           	opt stack 0
 43474  009216                     _ADC_Read:
 43475                           	opt stack 23
 43476                           
 43477                           ; BSR set to: 0
 43478                           ;incstack = 0
 43479                           ;ADC_Read@adc_channel stored from wreg
 43480  009216  0100               	movlb	0	; () banked
 43481  009218  6F64               	movwf	ADC_Read@adc_channel& (0+255),b
 43482                           
 43483                           ;adc.c: 52: adc_channel &= 0x0F;
 43484  00921A  0E0F               	movlw	15
 43485  00921C  0100               	movlb	0	; () banked
 43486  00921E  1764               	andwf	ADC_Read@adc_channel& (0+255),f,b
 43487                           
 43488                           ;adc.c: 53: ADCON0 &= 0x00000001;
 43489  009220  0E01               	movlw	1
 43490  009222  16C2               	andwf	4034,f,c	;volatile
 43491                           
 43492                           ;adc.c: 54: PORTA = (adc_channel << 1);
 43493  009224  5164               	movf	ADC_Read@adc_channel& (0+255),w,b
 43494  009226  2564               	addwf	ADC_Read@adc_channel& (0+255),w,b
 43495  009228  6E80               	movwf	3968,c	;volatile
 43496                           
 43497                           ; BSR set to: 0
 43498                           ;adc.c: 56: _delay((unsigned long)((20)*(20000000/4000000.0)));
 43499  00922A  0E21               	movlw	33
 43500  00922C                     u44967:
 43501  00922C  2EE8               	decfsz	wreg,f,c
 43502  00922E  D7FE               	bra	u44967
 43503  009230  F000               	nop	
 43504                           
 43505                           ;adc.c: 57: GO_nDONE = 1;
 43506  009232  82C2               	bsf	4034,1,c	;volatile
 43507  009234  B2C2               	btfsc	4034,1,c	;volatile
 43508  009236  D7FE               	goto	l88
 43509                           
 43510                           ;adc.c: 59: return ((ADRESH<<8)+ADRESL);
 43511  009238  50C4               	movf	4036,w,c	;volatile
 43512  00923A  0100               	movlb	0	; () banked
 43513  00923C  6F63               	movwf	(??_ADC_Read+1)& (0+255),b
 43514  00923E  6B62               	clrf	??_ADC_Read& (0+255),b
 43515  009240  50C3               	movf	4035,w,c	;volatile
 43516  009242  2562               	addwf	??_ADC_Read& (0+255),w,b
 43517  009244  6F60               	movwf	?_ADC_Read& (0+255),b
 43518  009246  0E00               	movlw	0
 43519  009248  2163               	addwfc	(??_ADC_Read+1)& (0+255),w,b
 43520  00924A  6F61               	movwf	(?_ADC_Read+1)& (0+255),b
 43521  00924C  0012               	return	
 43522  00924E                     __end_of_ADC_Read:
 43523                           	opt stack 0
 43524                           tblptru	equ	0xFF8
 43525                           tblptrh	equ	0xFF7
 43526                           tblptrl	equ	0xFF6
 43527                           tablat	equ	0xFF5
 43528                           prodh	equ	0xFF4
 43529                           prodl	equ	0xFF3
 43530                           intcon	equ	0xFF2
 43531                           intcon2	equ	0xFF1
 43532                           postinc0	equ	0xFEE
 43533                           wreg	equ	0xFE8
 43534                           indf1	equ	0xFE7
 43535                           postinc1	equ	0xFE6
 43536                           postdec1	equ	0xFE5
 43537                           fsr1h	equ	0xFE2
 43538                           fsr1l	equ	0xFE1
 43539                           indf2	equ	0xFDF
 43540                           postinc2	equ	0xFDE
 43541                           postdec2	equ	0xFDD
 43542                           plusw2	equ	0xFDB
 43543                           fsr2h	equ	0xFDA
 43544                           fsr2l	equ	0xFD9
 43545                           status	equ	0xFD8
 43546                           
 43547 ;; *************** function _Lcd_Start *****************
 43548 ;; Defined at:
 43549 ;;		line 80 in file "lcd.c"
 43550 ;; Parameters:    Size  Location     Type
 43551 ;;		None
 43552 ;; Auto vars:     Size  Location     Type
 43553 ;;  i               2    4[BANK0 ] int 
 43554 ;; Return value:  Size  Location     Type
 43555 ;;                  1    wreg      void 
 43556 ;; Registers used:
 43557 ;;		wreg, status,2, status,0, cstack
 43558 ;; Tracked objects:
 43559 ;;		On entry : 0/0
 43560 ;;		On exit  : 0/0
 43561 ;;		Unchanged: 0/0
 43562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43564 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43566 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43567 ;;Total ram usage:        3 bytes
 43568 ;; Hardware stack levels used:    1
 43569 ;; Hardware stack levels required when called:    7
 43570 ;; This function calls:
 43571 ;;		_Lcd_Cmd
 43572 ;;		_Lcd_SetBit
 43573 ;; This function is called by:
 43574 ;;		_main
 43575 ;; This function uses a non-reentrant model
 43576 ;;
 43577                           
 43578                           	psect	text135
 43579  0077B4                     __ptext135:
 43580                           	opt stack 0
 43581  0077B4                     _Lcd_Start:
 43582                           	opt stack 23
 43583                           
 43584                           ;lcd.c: 82: Lcd_SetBit(0x00);
 43585                           
 43586                           ; BSR set to: 0
 43587                           ;incstack = 0
 43588  0077B4  0E00               	movlw	0
 43589  0077B6  ECA5  F049         	call	_Lcd_SetBit
 43590                           
 43591                           ;lcd.c: 83: for(int i=1065244; i<=0; i--) __nop();
 43592  0077BA  0E41               	movlw	65
 43593  0077BC  0100               	movlb	0	; () banked
 43594  0077BE  6F65               	movwf	(Lcd_Start@i+1)& (0+255),b
 43595  0077C0  0E1C               	movlw	28
 43596  0077C2  6F64               	movwf	Lcd_Start@i& (0+255),b
 43597  0077C4                     l23167:
 43598                           
 43599                           ; BSR set to: 0
 43600  0077C4  BF65               	btfsc	(Lcd_Start@i+1)& (0+255),7,b
 43601  0077C6  D005               	goto	l42
 43602  0077C8  5165               	movf	(Lcd_Start@i+1)& (0+255),w,b
 43603  0077CA  E109               	bnz	l23175
 43604  0077CC  0564               	decf	Lcd_Start@i& (0+255),w,b
 43605  0077CE  B0D8               	btfsc	status,0,c
 43606  0077D0  D006               	goto	u37860
 43607  0077D2                     l42:
 43608                           
 43609                           ; BSR set to: 0
 43610  0077D2  F000               	nop	
 43611  0077D4  0100               	movlb	0	; () banked
 43612  0077D6  0764               	decf	Lcd_Start@i& (0+255),f,b
 43613  0077D8  A0D8               	btfss	status,0,c
 43614  0077DA  0765               	decf	(Lcd_Start@i+1)& (0+255),f,b
 43615  0077DC  D7F3               	goto	l23167
 43616  0077DE                     u37860:
 43617  0077DE                     l23175:
 43618                           
 43619                           ; BSR set to: 0
 43620                           ;lcd.c: 84: Lcd_Cmd(0x03);
 43621  0077DE  0E03               	movlw	3
 43622  0077E0  EC7A  F04A         	call	_Lcd_Cmd
 43623                           
 43624                           ;lcd.c: 85: _delay((unsigned long)((5)*(20000000/4000.0)));
 43625  0077E4  0E21               	movlw	33
 43626  0077E6  0100               	movlb	0	; () banked
 43627  0077E8  6F63               	movwf	??_Lcd_Start& (0+255),b
 43628  0077EA  0E76               	movlw	118
 43629  0077EC                     u44977:
 43630  0077EC  2EE8               	decfsz	wreg,f,c
 43631  0077EE  D7FE               	bra	u44977
 43632  0077F0  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 43633  0077F2  D7FC               	bra	u44977
 43634  0077F4  F000               	nop	
 43635                           
 43636                           ;lcd.c: 86: Lcd_Cmd(0x03);
 43637  0077F6  0E03               	movlw	3
 43638  0077F8  EC7A  F04A         	call	_Lcd_Cmd
 43639                           
 43640                           ;lcd.c: 87: _delay((unsigned long)((11)*(20000000/4000.0)));
 43641  0077FC  0E48               	movlw	72
 43642  0077FE  0100               	movlb	0	; () banked
 43643  007800  6F63               	movwf	??_Lcd_Start& (0+255),b
 43644  007802  0E6C               	movlw	108
 43645  007804                     u44987:
 43646  007804  2EE8               	decfsz	wreg,f,c
 43647  007806  D7FE               	bra	u44987
 43648  007808  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 43649  00780A  D7FC               	bra	u44987
 43650  00780C  F000               	nop	
 43651                           
 43652                           ;lcd.c: 88: Lcd_Cmd(0x03);
 43653  00780E  0E03               	movlw	3
 43654  007810  EC7A  F04A         	call	_Lcd_Cmd
 43655                           
 43656                           ;lcd.c: 89: Lcd_Cmd(0x02);
 43657  007814  0E02               	movlw	2
 43658  007816  EC7A  F04A         	call	_Lcd_Cmd
 43659                           
 43660                           ;lcd.c: 90: Lcd_Cmd(0x02);
 43661  00781A  0E02               	movlw	2
 43662  00781C  EC7A  F04A         	call	_Lcd_Cmd
 43663                           
 43664                           ;lcd.c: 91: Lcd_Cmd(0x08);
 43665  007820  0E08               	movlw	8
 43666  007822  EC7A  F04A         	call	_Lcd_Cmd
 43667                           
 43668                           ;lcd.c: 92: Lcd_Cmd(0x00);
 43669  007826  0E00               	movlw	0
 43670  007828  EC7A  F04A         	call	_Lcd_Cmd
 43671                           
 43672                           ;lcd.c: 93: Lcd_Cmd(0x0C);
 43673  00782C  0E0C               	movlw	12
 43674  00782E  EC7A  F04A         	call	_Lcd_Cmd
 43675                           
 43676                           ;lcd.c: 94: Lcd_Cmd(0x00);
 43677  007832  0E00               	movlw	0
 43678  007834  EC7A  F04A         	call	_Lcd_Cmd
 43679                           
 43680                           ;lcd.c: 95: Lcd_Cmd(0x06);
 43681  007838  0E06               	movlw	6
 43682  00783A  EC7A  F04A         	call	_Lcd_Cmd
 43683  00783E  0012               	return		;funcret
 43684  007840                     __end_of_Lcd_Start:
 43685                           	opt stack 0
 43686                           tblptru	equ	0xFF8
 43687                           tblptrh	equ	0xFF7
 43688                           tblptrl	equ	0xFF6
 43689                           tablat	equ	0xFF5
 43690                           prodh	equ	0xFF4
 43691                           prodl	equ	0xFF3
 43692                           intcon	equ	0xFF2
 43693                           intcon2	equ	0xFF1
 43694                           postinc0	equ	0xFEE
 43695                           wreg	equ	0xFE8
 43696                           indf1	equ	0xFE7
 43697                           postinc1	equ	0xFE6
 43698                           postdec1	equ	0xFE5
 43699                           fsr1h	equ	0xFE2
 43700                           fsr1l	equ	0xFE1
 43701                           indf2	equ	0xFDF
 43702                           postinc2	equ	0xFDE
 43703                           postdec2	equ	0xFDD
 43704                           plusw2	equ	0xFDB
 43705                           fsr2h	equ	0xFDA
 43706                           fsr2l	equ	0xFD9
 43707                           status	equ	0xFD8
 43708                           
 43709 ;; *************** function _Lcd_Cmd *****************
 43710 ;; Defined at:
 43711 ;;		line 44 in file "lcd.c"
 43712 ;; Parameters:    Size  Location     Type
 43713 ;;  a               1    wreg     unsigned char 
 43714 ;; Auto vars:     Size  Location     Type
 43715 ;;  a               1    2[BANK0 ] unsigned char 
 43716 ;; Return value:  Size  Location     Type
 43717 ;;                  1    wreg      void 
 43718 ;; Registers used:
 43719 ;;		wreg, status,2, cstack
 43720 ;; Tracked objects:
 43721 ;;		On entry : 0/0
 43722 ;;		On exit  : 0/0
 43723 ;;		Unchanged: 0/0
 43724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43728 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43729 ;;Total ram usage:        2 bytes
 43730 ;; Hardware stack levels used:    1
 43731 ;; Hardware stack levels required when called:    6
 43732 ;; This function calls:
 43733 ;;		_Lcd_SetBit
 43734 ;; This function is called by:
 43735 ;;		_Lcd_Clear
 43736 ;;		_Lcd_Set_Cursor
 43737 ;;		_Lcd_Start
 43738 ;; This function uses a non-reentrant model
 43739 ;;
 43740                           
 43741                           	psect	text136
 43742  0094F4                     __ptext136:
 43743                           	opt stack 0
 43744  0094F4                     _Lcd_Cmd:
 43745                           	opt stack 20
 43746                           
 43747                           ;incstack = 0
 43748                           ;Lcd_Cmd@a stored from wreg
 43749  0094F4  0100               	movlb	0	; () banked
 43750  0094F6  6F62               	movwf	Lcd_Cmd@a& (0+255),b
 43751                           
 43752                           ;lcd.c: 46: RE0 = 0;
 43753  0094F8  9084               	bcf	3972,0,c	;volatile
 43754                           
 43755                           ;lcd.c: 47: Lcd_SetBit(a);
 43756  0094FA  0100               	movlb	0	; () banked
 43757  0094FC  5162               	movf	Lcd_Cmd@a& (0+255),w,b
 43758  0094FE  ECA5  F049         	call	_Lcd_SetBit
 43759                           
 43760                           ;lcd.c: 48: RE1 = 1;
 43761  009502  8284               	bsf	3972,1,c	;volatile
 43762                           
 43763                           ;lcd.c: 49: _delay((unsigned long)((4)*(20000000/4000.0)));
 43764  009504  0E1A               	movlw	26
 43765  009506  0100               	movlb	0	; () banked
 43766  009508  6F61               	movwf	??_Lcd_Cmd& (0+255),b
 43767  00950A  0EF8               	movlw	248
 43768  00950C                     u44997:
 43769  00950C  2EE8               	decfsz	wreg,f,c
 43770  00950E  D7FE               	bra	u44997
 43771  009510  2F61               	decfsz	??_Lcd_Cmd& (0+255),f,b
 43772  009512  D7FC               	bra	u44997
 43773  009514  F000               	nop	
 43774                           
 43775                           ;lcd.c: 50: RE1 = 0;
 43776  009516  9284               	bcf	3972,1,c	;volatile
 43777  009518  0012               	return		;funcret
 43778  00951A                     __end_of_Lcd_Cmd:
 43779                           	opt stack 0
 43780                           tblptru	equ	0xFF8
 43781                           tblptrh	equ	0xFF7
 43782                           tblptrl	equ	0xFF6
 43783                           tablat	equ	0xFF5
 43784                           prodh	equ	0xFF4
 43785                           prodl	equ	0xFF3
 43786                           intcon	equ	0xFF2
 43787                           intcon2	equ	0xFF1
 43788                           postinc0	equ	0xFEE
 43789                           wreg	equ	0xFE8
 43790                           indf1	equ	0xFE7
 43791                           postinc1	equ	0xFE6
 43792                           postdec1	equ	0xFE5
 43793                           fsr1h	equ	0xFE2
 43794                           fsr1l	equ	0xFE1
 43795                           indf2	equ	0xFDF
 43796                           postinc2	equ	0xFDE
 43797                           postdec2	equ	0xFDD
 43798                           plusw2	equ	0xFDB
 43799                           fsr2h	equ	0xFDA
 43800                           fsr2l	equ	0xFD9
 43801                           status	equ	0xFD8
 43802                           
 43803 ;; *************** function _Lcd_SetBit *****************
 43804 ;; Defined at:
 43805 ;;		line 21 in file "lcd.c"
 43806 ;; Parameters:    Size  Location     Type
 43807 ;;  data_bit        1    wreg     unsigned char 
 43808 ;; Auto vars:     Size  Location     Type
 43809 ;;  data_bit        1    0[BANK0 ] unsigned char 
 43810 ;; Return value:  Size  Location     Type
 43811 ;;                  1    wreg      void 
 43812 ;; Registers used:
 43813 ;;		wreg
 43814 ;; Tracked objects:
 43815 ;;		On entry : 0/0
 43816 ;;		On exit  : 0/0
 43817 ;;		Unchanged: 0/0
 43818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43820 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43822 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43823 ;;Total ram usage:        1 bytes
 43824 ;; Hardware stack levels used:    1
 43825 ;; Hardware stack levels required when called:    5
 43826 ;; This function calls:
 43827 ;;		Nothing
 43828 ;; This function is called by:
 43829 ;;		_Lcd_Cmd
 43830 ;;		_Lcd_Start
 43831 ;;		_Lcd_Print_Char
 43832 ;; This function uses a non-reentrant model
 43833 ;;
 43834                           
 43835                           	psect	text137
 43836  00934A                     __ptext137:
 43837                           	opt stack 0
 43838  00934A                     _Lcd_SetBit:
 43839                           	opt stack 20
 43840                           
 43841                           ;incstack = 0
 43842                           ;Lcd_SetBit@data_bit stored from wreg
 43843  00934A  0100               	movlb	0	; () banked
 43844  00934C  6F60               	movwf	Lcd_SetBit@data_bit& (0+255),b
 43845                           
 43846                           ;lcd.c: 23: if(data_bit& 1)
 43847  00934E  0100               	movlb	0	; () banked
 43848  009350  A160               	btfss	Lcd_SetBit@data_bit& (0+255),0,b
 43849  009352  D002               	goto	l19
 43850                           
 43851                           ; BSR set to: 0
 43852                           ;lcd.c: 24: RD4 = 1;
 43853  009354  8883               	bsf	3971,4,c	;volatile
 43854  009356  D001               	goto	l20
 43855  009358                     l19:
 43856                           
 43857                           ; BSR set to: 0
 43858                           ;lcd.c: 25: else
 43859                           ;lcd.c: 26: RD4 = 0;
 43860  009358  9883               	bcf	3971,4,c	;volatile
 43861  00935A                     l20:
 43862                           
 43863                           ; BSR set to: 0
 43864                           ;lcd.c: 28: if(data_bit& 2)
 43865                           
 43866                           ; BSR set to: 0
 43867  00935A  A360               	btfss	Lcd_SetBit@data_bit& (0+255),1,b
 43868  00935C  D002               	goto	l21
 43869                           
 43870                           ; BSR set to: 0
 43871                           ;lcd.c: 29: RD5 = 1;
 43872  00935E  8A83               	bsf	3971,5,c	;volatile
 43873  009360  D001               	goto	l22
 43874  009362                     l21:
 43875                           
 43876                           ; BSR set to: 0
 43877                           ;lcd.c: 30: else
 43878                           ;lcd.c: 31: RD5 = 0;
 43879  009362  9A83               	bcf	3971,5,c	;volatile
 43880  009364                     l22:
 43881                           
 43882                           ; BSR set to: 0
 43883                           ;lcd.c: 33: if(data_bit& 4)
 43884                           
 43885                           ; BSR set to: 0
 43886  009364  A560               	btfss	Lcd_SetBit@data_bit& (0+255),2,b
 43887  009366  D002               	goto	l23
 43888                           
 43889                           ; BSR set to: 0
 43890                           ;lcd.c: 34: RD6 = 1;
 43891  009368  8C83               	bsf	3971,6,c	;volatile
 43892  00936A  D001               	goto	l24
 43893  00936C                     l23:
 43894                           
 43895                           ; BSR set to: 0
 43896                           ;lcd.c: 35: else
 43897                           ;lcd.c: 36: RD6 = 0;
 43898  00936C  9C83               	bcf	3971,6,c	;volatile
 43899  00936E                     l24:
 43900                           
 43901                           ; BSR set to: 0
 43902                           ;lcd.c: 38: if(data_bit& 8)
 43903                           
 43904                           ; BSR set to: 0
 43905  00936E  A760               	btfss	Lcd_SetBit@data_bit& (0+255),3,b
 43906  009370  D002               	goto	l25
 43907                           
 43908                           ; BSR set to: 0
 43909                           ;lcd.c: 39: RD7 = 1;
 43910  009372  8E83               	bsf	3971,7,c	;volatile
 43911  009374  0012               	return	
 43912  009376                     l25:
 43913                           
 43914                           ; BSR set to: 0
 43915                           ;lcd.c: 40: else
 43916                           ;lcd.c: 41: RD7 = 0;
 43917  009376  9E83               	bcf	3971,7,c	;volatile
 43918  009378  0012               	return	
 43919  00937A                     __end_of_Lcd_SetBit:
 43920                           	opt stack 0
 43921                           tblptru	equ	0xFF8
 43922                           tblptrh	equ	0xFF7
 43923                           tblptrl	equ	0xFF6
 43924                           tablat	equ	0xFF5
 43925                           prodh	equ	0xFF4
 43926                           prodl	equ	0xFF3
 43927                           intcon	equ	0xFF2
 43928                           intcon2	equ	0xFF1
 43929                           postinc0	equ	0xFEE
 43930                           wreg	equ	0xFE8
 43931                           indf1	equ	0xFE7
 43932                           postinc1	equ	0xFE6
 43933                           postdec1	equ	0xFE5
 43934                           fsr1h	equ	0xFE2
 43935                           fsr1l	equ	0xFE1
 43936                           indf2	equ	0xFDF
 43937                           postinc2	equ	0xFDE
 43938                           postdec2	equ	0xFDD
 43939                           plusw2	equ	0xFDB
 43940                           fsr2h	equ	0xFDA
 43941                           fsr2l	equ	0xFD9
 43942                           status	equ	0xFD8
 43943                           
 43944 ;; *************** function _ADC_Initialize *****************
 43945 ;; Defined at:
 43946 ;;		line 22 in file "adc.c"
 43947 ;; Parameters:    Size  Location     Type
 43948 ;;		None
 43949 ;; Auto vars:     Size  Location     Type
 43950 ;;		None
 43951 ;; Return value:  Size  Location     Type
 43952 ;;                  1    wreg      void 
 43953 ;; Registers used:
 43954 ;;		wreg, status,2
 43955 ;; Tracked objects:
 43956 ;;		On entry : 0/0
 43957 ;;		On exit  : 0/0
 43958 ;;		Unchanged: 0/0
 43959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43964 ;;Total ram usage:        0 bytes
 43965 ;; Hardware stack levels used:    1
 43966 ;; Hardware stack levels required when called:    5
 43967 ;; This function calls:
 43968 ;;		Nothing
 43969 ;; This function is called by:
 43970 ;;		_main
 43971 ;; This function uses a non-reentrant model
 43972 ;;
 43973                           
 43974                           	psect	text138
 43975  0095EE                     __ptext138:
 43976                           	opt stack 0
 43977  0095EE                     _ADC_Initialize:
 43978                           	opt stack 25
 43979                           
 43980                           ;adc.c: 24: CMCON = 0x7;
 43981                           
 43982                           ; BSR set to: 0
 43983                           ;incstack = 0
 43984  0095EE  0E07               	movlw	7
 43985  0095F0  6EB4               	movwf	4020,c	;volatile
 43986                           
 43987                           ;adc.c: 25: ADCON0 = 0b00000000;
 43988  0095F2  0E00               	movlw	0
 43989  0095F4  6EC2               	movwf	4034,c	;volatile
 43990                           
 43991                           ;adc.c: 26: ADCON1 = 0b00001110;
 43992  0095F6  0E0E               	movlw	14
 43993  0095F8  6EC1               	movwf	4033,c	;volatile
 43994                           
 43995                           ;adc.c: 27: ADCON2 = 0b10000010;
 43996  0095FA  0E82               	movlw	130
 43997  0095FC  6EC0               	movwf	4032,c	;volatile
 43998                           
 43999                           ;adc.c: 31: ADON = 1;
 44000  0095FE  80C2               	bsf	4034,0,c	;volatile
 44001  009600  0012               	return		;funcret
 44002  009602                     __end_of_ADC_Initialize:
 44003                           	opt stack 0
 44004                           tblptru	equ	0xFF8
 44005                           tblptrh	equ	0xFF7
 44006                           tblptrl	equ	0xFF6
 44007                           tablat	equ	0xFF5
 44008                           prodh	equ	0xFF4
 44009                           prodl	equ	0xFF3
 44010                           intcon	equ	0xFF2
 44011                           intcon2	equ	0xFF1
 44012                           postinc0	equ	0xFEE
 44013                           wreg	equ	0xFE8
 44014                           indf1	equ	0xFE7
 44015                           postinc1	equ	0xFE6
 44016                           postdec1	equ	0xFE5
 44017                           fsr1h	equ	0xFE2
 44018                           fsr1l	equ	0xFE1
 44019                           indf2	equ	0xFDF
 44020                           postinc2	equ	0xFDE
 44021                           postdec2	equ	0xFDD
 44022                           plusw2	equ	0xFDB
 44023                           fsr2h	equ	0xFDA
 44024                           fsr2l	equ	0xFD9
 44025                           status	equ	0xFD8
 44026                           
 44027 ;; *************** function _ISR *****************
 44028 ;; Defined at:
 44029 ;;		line 310 in file "main.c"
 44030 ;; Parameters:    Size  Location     Type
 44031 ;;		None
 44032 ;; Auto vars:     Size  Location     Type
 44033 ;;		None
 44034 ;; Return value:  Size  Location     Type
 44035 ;;                  1    wreg      void 
 44036 ;; Registers used:
 44037 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 44038 ;; Tracked objects:
 44039 ;;		On entry : 0/0
 44040 ;;		On exit  : 0/0
 44041 ;;		Unchanged: 0/0
 44042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44045 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44046 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44047 ;;Total ram usage:       20 bytes
 44048 ;; Hardware stack levels used:    1
 44049 ;; Hardware stack levels required when called:    4
 44050 ;; This function calls:
 44051 ;;		_display
 44052 ;;		_encoderInputsBuxton
 44053 ;;		_playArpeggio
 44054 ;;		i2___lbmod
 44055 ;;		i2_printThisNumber
 44056 ;; This function is called by:
 44057 ;;		Interrupt level 2
 44058 ;; This function uses a non-reentrant model
 44059 ;;
 44060                           
 44061                           	psect	intcode
 44062  000008                     __pintcode:
 44063                           	opt stack 0
 44064  000008                     _ISR:
 44065                           	opt stack 14
 44066                           
 44067                           ;incstack = 0
 44068  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 44069  00000A  ED1B  F029         	call	int_func,f	;refresh shadow registers
 44070                           tblptru	equ	0xFF8
 44071                           tblptrh	equ	0xFF7
 44072                           tblptrl	equ	0xFF6
 44073                           tablat	equ	0xFF5
 44074                           prodh	equ	0xFF4
 44075                           prodl	equ	0xFF3
 44076                           intcon	equ	0xFF2
 44077                           intcon2	equ	0xFF1
 44078                           postinc0	equ	0xFEE
 44079                           wreg	equ	0xFE8
 44080                           indf1	equ	0xFE7
 44081                           postinc1	equ	0xFE6
 44082                           postdec1	equ	0xFE5
 44083                           fsr1h	equ	0xFE2
 44084                           fsr1l	equ	0xFE1
 44085                           indf2	equ	0xFDF
 44086                           postinc2	equ	0xFDE
 44087                           postdec2	equ	0xFDD
 44088                           plusw2	equ	0xFDB
 44089                           fsr2h	equ	0xFDA
 44090                           fsr2l	equ	0xFD9
 44091                           status	equ	0xFD8
 44092                           
 44093                           	psect	intcode_body
 44094  005236                     __pintcode_body:
 44095                           	opt stack 14
 44096  005236                     int_func:
 44097                           	opt stack 14
 44098  005236  0006               	pop		; remove dummy address from shadow register refresh
 44099  005238  CFFA F020          	movff	pclath,??_ISR+2
 44100  00523C  CFFB F021          	movff	pclatu,??_ISR+3
 44101  005240  CFE9 F022          	movff	fsr0l,??_ISR+4
 44102  005244  CFEA F023          	movff	fsr0h,??_ISR+5
 44103  005248  CFE1 F024          	movff	fsr1l,??_ISR+6
 44104  00524C  CFE2 F025          	movff	fsr1h,??_ISR+7
 44105  005250  CFD9 F026          	movff	fsr2l,??_ISR+8
 44106  005254  CFDA F027          	movff	fsr2h,??_ISR+9
 44107  005258  CFF3 F028          	movff	prodl,??_ISR+10
 44108  00525C  CFF4 F029          	movff	prodh,??_ISR+11
 44109  005260  CFF6 F02A          	movff	tblptrl,??_ISR+12
 44110  005264  CFF7 F02B          	movff	tblptrh,??_ISR+13
 44111  005268  CFF8 F02C          	movff	tblptru,??_ISR+14
 44112  00526C  CFF5 F02D          	movff	tablat,??_ISR+15
 44113  005270  C05F  F02E         	movff	btemp,??_ISR+16
 44114  005274  C060  F02F         	movff	btemp+1,??_ISR+17
 44115  005278  C061  F030         	movff	btemp+2,??_ISR+18
 44116  00527C  C062  F031         	movff	btemp+3,??_ISR+19
 44117                           
 44118                           ;main.c: 313: if(TMR2IF==1){
 44119  005280  A29E               	btfss	3998,1,c	;volatile
 44120  005282  D00C               	goto	i2l4795
 44121                           
 44122                           ;main.c: 314: display();
 44123  005284  EC01  F04B         	call	_display	;wreg free
 44124                           
 44125                           ;main.c: 315: count_ISR++;
 44126  005288  0E01               	movlw	1
 44127  00528A  0102               	movlb	2	; () banked
 44128  00528C  2784               	addwf	_count_ISR& (0+255),f,b
 44129  00528E  0E00               	movlw	0
 44130  005290  2385               	addwfc	(_count_ISR+1)& (0+255),f,b
 44131  005292  2386               	addwfc	(_count_ISR+2)& (0+255),f,b
 44132  005294  2387               	addwfc	(_count_ISR+3)& (0+255),f,b
 44133                           
 44134                           ; BSR set to: 2
 44135                           ;main.c: 317: TMR2 = 0x83;
 44136  005296  0E83               	movlw	131
 44137  005298  6ECC               	movwf	4044,c	;volatile
 44138                           
 44139                           ; BSR set to: 2
 44140                           ;main.c: 318: TMR2IF = 0;
 44141  00529A  929E               	bcf	3998,1,c	;volatile
 44142  00529C                     i2l4795:
 44143                           
 44144                           ;main.c: 319: }
 44145                           ;main.c: 322: if(INT0IF==1) {
 44146                           
 44147                           ; BSR set to: 2
 44148  00529C  A2F2               	btfss	intcon,1,c	;volatile
 44149  00529E  D00B               	goto	i2l4796
 44150                           
 44151                           ;main.c: 323: _delay((unsigned long)((10)*(20000000/4000.0)));
 44152  0052A0  0E41               	movlw	65
 44153  0052A2  6E1E               	movwf	??_ISR& (0+255),c
 44154  0052A4  0EEE               	movlw	238
 44155  0052A6                     i2u4500_47:
 44156  0052A6  2EE8               	decfsz	wreg,f,c
 44157  0052A8  D7FE               	bra	i2u4500_47
 44158  0052AA  2E1E               	decfsz	??_ISR& (0+255),f,c
 44159  0052AC  D7FC               	bra	i2u4500_47
 44160  0052AE  D000               	nop2	
 44161                           
 44162                           ;main.c: 324: if(RB0 == 0){encoder_click = 1;}
 44163  0052B0  A081               	btfss	3969,0,c	;volatile
 44164  0052B2  8036               	bsf	_encoder_click/(0+8),_encoder_click& (0+7),c
 44165                           
 44166                           ;main.c: 325: INT0IF = 0;
 44167  0052B4  92F2               	bcf	intcon,1,c	;volatile
 44168  0052B6                     i2l4796:
 44169                           
 44170                           ;main.c: 326: }
 44171                           ;main.c: 329: if(RBIF==1) {
 44172  0052B6  A0F2               	btfss	intcon,0,c	;volatile
 44173  0052B8  D003               	goto	i2l4798
 44174                           
 44175                           ;main.c: 330: encoderInputsBuxton();
 44176  0052BA  ECFA  F03E         	call	_encoderInputsBuxton	;wreg free
 44177                           
 44178                           ;main.c: 332: RBIF = 0;
 44179  0052BE  90F2               	bcf	intcon,0,c	;volatile
 44180  0052C0                     i2l4798:
 44181                           
 44182                           ;main.c: 333: }
 44183                           ;main.c: 337: if(TMR0IF==1) {
 44184  0052C0  A4F2               	btfss	intcon,2,c	;volatile
 44185  0052C2  D05F               	goto	i2l4799
 44186                           
 44187                           ;main.c: 339: TMR0IE = 0;
 44188  0052C4  9AF2               	bcf	intcon,5,c	;volatile
 44189                           
 44190                           ;main.c: 342: if((finishLastNote == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 44191  0052C6  BC33               	btfsc	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 44192  0052C8  D040               	goto	i2l4806
 44193  0052CA  C0F7  F001         	movff	_NOTE_LENGTH_PULSES,i2___lbmod@divisor
 44194  0052CE  5054               	movf	_TIMER_OVERFLOWS,w,c
 44195  0052D0  EC15  F04A         	call	i2___lbmod
 44196  0052D4  0900               	iorlw	0
 44197  0052D6  A4D8               	btfss	status,2,c
 44198  0052D8  D038               	goto	i2l4806
 44199                           
 44200                           ;main.c: 345: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYP
      +                          E == DOWN) || (ARPEGGIO_TYPE == UP_DOWN) || (ARPEGGIO_TYPE == DOWN_UP)){
 44201  0052DA  0E06               	movlw	6
 44202  0052DC  0100               	movlb	0	; () banked
 44203  0052DE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44204  0052E0  B4D8               	btfsc	status,2,c
 44205  0052E2  D00D               	goto	i2u4456_40
 44206                           
 44207                           ; BSR set to: 0
 44208  0052E4  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 44209  0052E6  B4D8               	btfsc	status,2,c
 44210  0052E8  D00A               	goto	i2u4456_40
 44211                           
 44212                           ; BSR set to: 0
 44213  0052EA  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 44214  0052EC  B4D8               	btfsc	status,2,c
 44215  0052EE  D007               	goto	i2u4456_40
 44216                           
 44217                           ; BSR set to: 0
 44218  0052F0  0E02               	movlw	2
 44219  0052F2  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44220  0052F4  B4D8               	btfsc	status,2,c
 44221  0052F6  D003               	goto	i2u4456_40
 44222                           
 44223                           ; BSR set to: 0
 44224  0052F8  0E03               	movlw	3
 44225  0052FA  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44226  0052FC  B4D8               	btfsc	status,2,c
 44227  0052FE                     i2u4456_40:
 44228                           
 44229                           ; BSR set to: 0
 44230                           ;main.c: 346: stored_octave = which_octave;
 44231  0052FE  C056  F0E7         	movff	_which_octave,_stored_octave
 44232                           
 44233                           ; BSR set to: 0
 44234                           ;main.c: 347: }
 44235                           ;main.c: 361: if(ARPEGGIO_ON == 1){
 44236  005302  B835               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 44237                           
 44238                           ; BSR set to: 0
 44239                           ;main.c: 362: if(DISPLAY_STEP_NUMBER == 1) {printThisNumber((NUM_NOTES_PRESSED * 100) + 
      +                          (which_note + 1));}
 44240  005304  AC32               	btfss	_DISPLAY_STEP_NUMBER/(0+8),_DISPLAY_STEP_NUMBER& (0+7),c
 44241  005306  D011               	goto	i2l4805
 44242                           
 44243                           ; BSR set to: 0
 44244  005308  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44245  00530A  0D64               	mullw	100
 44246  00530C  5057               	movf	_which_note,w,c
 44247  00530E  6E1E               	movwf	??_ISR& (0+255),c
 44248  005310  6A1F               	clrf	(??_ISR+1)& (0+255),c
 44249  005312  50F3               	movf	prodl,w,c
 44250  005314  261E               	addwf	??_ISR,f,c
 44251  005316  50F4               	movf	prodh,w,c
 44252  005318  221F               	addwfc	??_ISR+1,f,c
 44253  00531A  0E01               	movlw	1
 44254  00531C  241E               	addwf	??_ISR,w,c
 44255  00531E  6E01               	movwf	i2printThisNumber@n,c
 44256  005320  0E00               	movlw	0
 44257  005322  201F               	addwfc	??_ISR+1,w,c
 44258  005324  6E02               	movwf	i2printThisNumber@n+1,c
 44259  005326  EC14  F04B         	call	i2_printThisNumber	;wreg free
 44260  00532A                     i2l4805:
 44261                           
 44262                           ;main.c: 363: }
 44263                           ;main.c: 365: playArpeggio();
 44264  00532A  EC21  F005         	call	_playArpeggio	;wreg free
 44265                           
 44266                           ;main.c: 368: suppress_note_on = 0;
 44267  00532E  9A33               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 44268                           
 44269                           ;main.c: 369: suppress_note_off = 0;
 44270  005330  9833               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 44271                           
 44272                           ;main.c: 370: flag1 = 0;
 44273  005332  9033               	bcf	_flag1/(0+8),_flag1& (0+7),c
 44274                           
 44275                           ;main.c: 371: flag2 = 0;
 44276  005334  9E32               	bcf	_flag2/(0+8),_flag2& (0+7),c
 44277                           
 44278                           ;main.c: 374: if((ARPEGGIO_TYPE == RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) {
 44279  005336  0E05               	movlw	5
 44280  005338  0100               	movlb	0	; () banked
 44281  00533A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44282  00533C  B4D8               	btfsc	status,2,c
 44283  00533E  D003               	goto	i2u4460_40
 44284                           
 44285                           ; BSR set to: 0
 44286  005340  0E04               	movlw	4
 44287  005342  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44288  005344  B4D8               	btfsc	status,2,c
 44289  005346                     i2u4460_40:
 44290                           
 44291                           ; BSR set to: 0
 44292                           ;main.c: 375: stored_octave = which_octave;
 44293  005346  C056  F0E7         	movff	_which_octave,_stored_octave
 44294  00534A                     i2l4806:
 44295                           
 44296                           ;main.c: 376: }
 44297                           ;main.c: 377: }
 44298                           ;main.c: 398: if(lastNoteMode == 1){
 44299                           
 44300                           ; BSR set to: 0
 44301  00534A  B634               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 44302                           
 44303                           ;main.c: 399: if((finishLastNote == 1) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 44304  00534C  AC33               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 44305  00534E  D00B               	goto	i2l4810
 44306  005350  C0F7  F001         	movff	_NOTE_LENGTH_PULSES,i2___lbmod@divisor
 44307  005354  5054               	movf	_TIMER_OVERFLOWS,w,c
 44308  005356  EC15  F04A         	call	i2___lbmod
 44309  00535A  0900               	iorlw	0
 44310  00535C  A4D8               	btfss	status,2,c
 44311  00535E  D003               	goto	i2l4810
 44312                           
 44313                           ;main.c: 408: finishLastNote = 0;
 44314  005360  9C33               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 44315                           
 44316                           ;main.c: 411: TIMER_OVERFLOWS = NOTE_LENGTH_PULSES;
 44317  005362  C0F7  F054         	movff	_NOTE_LENGTH_PULSES,_TIMER_OVERFLOWS
 44318  005366                     i2l4810:
 44319                           
 44320                           ;main.c: 412: }
 44321                           ;main.c: 413: }
 44322                           ;main.c: 415: TIMER_OVERFLOWS++;
 44323  005366  2A54               	incf	_TIMER_OVERFLOWS,f,c
 44324                           
 44325                           ;main.c: 417: if(TIMER_OVERFLOWS >= (NOTE_LENGTH_PULSES)){TIMER_OVERFLOWS = 0;}
 44326  005368  0100               	movlb	0	; () banked
 44327  00536A  51F7               	movf	_NOTE_LENGTH_PULSES& (0+255),w,b
 44328  00536C  5C54               	subwf	_TIMER_OVERFLOWS,w,c
 44329  00536E  A0D8               	btfss	status,0,c
 44330  005370  D002               	goto	i2l4811
 44331                           
 44332                           ; BSR set to: 0
 44333  005372  0E00               	movlw	0
 44334  005374  6E54               	movwf	_TIMER_OVERFLOWS,c
 44335  005376                     i2l4811:
 44336                           
 44337                           ; BSR set to: 0
 44338                           ;main.c: 419: TMR0 = TIMER_PRELOAD;
 44339                           
 44340                           ; BSR set to: 0
 44341  005376  C16D  FFD6         	movff	_TIMER_PRELOAD,4054	;volatile
 44342  00537A  C16E  FFD7         	movff	_TIMER_PRELOAD+1,4055	;volatile
 44343                           
 44344                           ; BSR set to: 0
 44345                           ;main.c: 420: TMR0IF = 0;
 44346  00537E  94F2               	bcf	intcon,2,c	;volatile
 44347                           
 44348                           ; BSR set to: 0
 44349                           ;main.c: 421: TMR0IE = 1;
 44350  005380  8AF2               	bsf	intcon,5,c	;volatile
 44351  005382                     i2l4799:
 44352                           
 44353                           ; BSR set to: 0
 44354  005382  C031  F062         	movff	??_ISR+19,btemp+3
 44355  005386  C030  F061         	movff	??_ISR+18,btemp+2
 44356  00538A  C02F  F060         	movff	??_ISR+17,btemp+1
 44357  00538E  C02E  F05F         	movff	??_ISR+16,btemp
 44358  005392  C02D  FFF5         	movff	??_ISR+15,tablat
 44359  005396  C02C  FFF8         	movff	??_ISR+14,tblptru
 44360  00539A  C02B  FFF7         	movff	??_ISR+13,tblptrh
 44361  00539E  C02A  FFF6         	movff	??_ISR+12,tblptrl
 44362  0053A2  C029  FFF4         	movff	??_ISR+11,prodh
 44363  0053A6  C028  FFF3         	movff	??_ISR+10,prodl
 44364  0053AA  C027  FFDA         	movff	??_ISR+9,fsr2h
 44365  0053AE  C026  FFD9         	movff	??_ISR+8,fsr2l
 44366  0053B2  C025  FFE2         	movff	??_ISR+7,fsr1h
 44367  0053B6  C024  FFE1         	movff	??_ISR+6,fsr1l
 44368  0053BA  C023  FFEA         	movff	??_ISR+5,fsr0h
 44369  0053BE  C022  FFE9         	movff	??_ISR+4,fsr0l
 44370  0053C2  C021  FFFB         	movff	??_ISR+3,pclatu
 44371  0053C6  C020  FFFA         	movff	??_ISR+2,pclath
 44372  0053CA  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 44373  0053CC  0011               	retfie		f
 44374  0053CE                     __end_of_ISR:
 44375                           	opt stack 0
 44376                           pclatu	equ	0xFFB
 44377                           pclath	equ	0xFFA
 44378                           tblptru	equ	0xFF8
 44379                           tblptrh	equ	0xFF7
 44380                           tblptrl	equ	0xFF6
 44381                           tablat	equ	0xFF5
 44382                           prodh	equ	0xFF4
 44383                           prodl	equ	0xFF3
 44384                           intcon	equ	0xFF2
 44385                           intcon2	equ	0xFF1
 44386                           postinc0	equ	0xFEE
 44387                           fsr0h	equ	0xFEA
 44388                           fsr0l	equ	0xFE9
 44389                           wreg	equ	0xFE8
 44390                           indf1	equ	0xFE7
 44391                           postinc1	equ	0xFE6
 44392                           postdec1	equ	0xFE5
 44393                           fsr1h	equ	0xFE2
 44394                           fsr1l	equ	0xFE1
 44395                           indf2	equ	0xFDF
 44396                           postinc2	equ	0xFDE
 44397                           postdec2	equ	0xFDD
 44398                           plusw2	equ	0xFDB
 44399                           fsr2h	equ	0xFDA
 44400                           fsr2l	equ	0xFD9
 44401                           status	equ	0xFD8
 44402                           
 44403 ;; *************** function i2_printThisNumber *****************
 44404 ;; Defined at:
 44405 ;;		line 21 in file "octave.c"
 44406 ;; Parameters:    Size  Location     Type
 44407 ;;  n               2    0[COMRAM] int 
 44408 ;; Auto vars:     Size  Location     Type
 44409 ;;		None
 44410 ;; Return value:  Size  Location     Type
 44411 ;;                  1    wreg      void 
 44412 ;; Registers used:
 44413 ;;		wreg, status,2
 44414 ;; Tracked objects:
 44415 ;;		On entry : 0/0
 44416 ;;		On exit  : 0/0
 44417 ;;		Unchanged: 0/0
 44418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44419 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44422 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44423 ;;Total ram usage:        2 bytes
 44424 ;; Hardware stack levels used:    1
 44425 ;; This function calls:
 44426 ;;		Nothing
 44427 ;; This function is called by:
 44428 ;;		_ISR
 44429 ;; This function uses a non-reentrant model
 44430 ;;
 44431                           
 44432                           	psect	text140
 44433  009628                     __ptext140:
 44434                           	opt stack 0
 44435  009628                     i2_printThisNumber:
 44436                           	opt stack 17
 44437                           
 44438                           ;octave.c: 22: DISPLAY_MODE = 0;
 44439                           
 44440                           ;incstack = 0
 44441  009628  0E00               	movlw	0
 44442  00962A  6E5A               	movwf	_DISPLAY_MODE,c
 44443                           
 44444                           ;octave.c: 23: DIGIT_MODE = 0;
 44445  00962C  0E00               	movlw	0
 44446  00962E  6E59               	movwf	_DIGIT_MODE,c
 44447                           
 44448                           ;octave.c: 24: number_to_display = n;
 44449  009630  C001  F05B         	movff	i2printThisNumber@n,_number_to_display
 44450  009634  C002  F05C         	movff	i2printThisNumber@n+1,_number_to_display+1
 44451  009638  0012               	return		;funcret
 44452  00963A                     __end_ofi2_printThisNumber:
 44453                           	opt stack 0
 44454                           pclatu	equ	0xFFB
 44455                           pclath	equ	0xFFA
 44456                           tblptru	equ	0xFF8
 44457                           tblptrh	equ	0xFF7
 44458                           tblptrl	equ	0xFF6
 44459                           tablat	equ	0xFF5
 44460                           prodh	equ	0xFF4
 44461                           prodl	equ	0xFF3
 44462                           intcon	equ	0xFF2
 44463                           intcon2	equ	0xFF1
 44464                           postinc0	equ	0xFEE
 44465                           fsr0h	equ	0xFEA
 44466                           fsr0l	equ	0xFE9
 44467                           wreg	equ	0xFE8
 44468                           indf1	equ	0xFE7
 44469                           postinc1	equ	0xFE6
 44470                           postdec1	equ	0xFE5
 44471                           fsr1h	equ	0xFE2
 44472                           fsr1l	equ	0xFE1
 44473                           indf2	equ	0xFDF
 44474                           postinc2	equ	0xFDE
 44475                           postdec2	equ	0xFDD
 44476                           plusw2	equ	0xFDB
 44477                           fsr2h	equ	0xFDA
 44478                           fsr2l	equ	0xFD9
 44479                           status	equ	0xFD8
 44480                           
 44481 ;; *************** function i2___lbmod *****************
 44482 ;; Defined at:
 44483 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbmod.c"
 44484 ;; Parameters:    Size  Location     Type
 44485 ;;  dividend        1    wreg     unsigned char 
 44486 ;;  divisor         1    0[COMRAM] unsigned char 
 44487 ;; Auto vars:     Size  Location     Type
 44488 ;;  dividend        1    1[COMRAM] unsigned char 
 44489 ;;  __lbmod         1    3[COMRAM] unsigned char 
 44490 ;;  __lbmod         1    2[COMRAM] unsigned char 
 44491 ;; Return value:  Size  Location     Type
 44492 ;;                  1    wreg      unsigned char 
 44493 ;; Registers used:
 44494 ;;		wreg, status,2, status,0
 44495 ;; Tracked objects:
 44496 ;;		On entry : 0/0
 44497 ;;		On exit  : 0/0
 44498 ;;		Unchanged: 0/0
 44499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44500 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44501 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44503 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44504 ;;Total ram usage:        4 bytes
 44505 ;; Hardware stack levels used:    1
 44506 ;; This function calls:
 44507 ;;		Nothing
 44508 ;; This function is called by:
 44509 ;;		_ISR
 44510 ;; This function uses a non-reentrant model
 44511 ;;
 44512                           
 44513                           	psect	text141
 44514  00942A                     __ptext141:
 44515                           	opt stack 0
 44516  00942A                     i2___lbmod:
 44517                           	opt stack 17
 44518                           
 44519                           ;incstack = 0
 44520                           ;i2___lbmod@dividend stored from wreg
 44521  00942A  6E02               	movwf	i2___lbmod@dividend,c
 44522  00942C  0E08               	movlw	8
 44523  00942E  6E03               	movwf	i2___lbmod@counter,c
 44524  009430  0E00               	movlw	0
 44525  009432  6E04               	movwf	i2___lbmod@rem,c
 44526  009434  90D8               	bcf	status,0,c
 44527  009436  3402               	rlcf	i2___lbmod@dividend,w,c
 44528  009438  3404               	rlcf	i2___lbmod@rem,w,c
 44529  00943A  6E04               	movwf	i2___lbmod@rem,c
 44530  00943C  90D8               	bcf	status,0,c
 44531  00943E  3602               	rlcf	i2___lbmod@dividend,f,c
 44532  009440  5001               	movf	i2___lbmod@divisor,w,c
 44533  009442  5C04               	subwf	i2___lbmod@rem,w,c
 44534  009444  A0D8               	btfss	status,0,c
 44535  009446  D002               	goto	i2l5767
 44536  009448  5001               	movf	i2___lbmod@divisor,w,c
 44537  00944A  5E04               	subwf	i2___lbmod@rem,f,c
 44538  00944C                     i2l5767:
 44539  00944C  2E03               	decfsz	i2___lbmod@counter,f,c
 44540  00944E  D7F2               	goto	i2l5766
 44541  009450  5004               	movf	i2___lbmod@rem,w,c
 44542  009452  0012               	return	
 44543  009454                     __end_ofi2___lbmod:
 44544                           	opt stack 0
 44545                           pclatu	equ	0xFFB
 44546                           pclath	equ	0xFFA
 44547                           tblptru	equ	0xFF8
 44548                           tblptrh	equ	0xFF7
 44549                           tblptrl	equ	0xFF6
 44550                           tablat	equ	0xFF5
 44551                           prodh	equ	0xFF4
 44552                           prodl	equ	0xFF3
 44553                           intcon	equ	0xFF2
 44554                           intcon2	equ	0xFF1
 44555                           postinc0	equ	0xFEE
 44556                           fsr0h	equ	0xFEA
 44557                           fsr0l	equ	0xFE9
 44558                           wreg	equ	0xFE8
 44559                           indf1	equ	0xFE7
 44560                           postinc1	equ	0xFE6
 44561                           postdec1	equ	0xFE5
 44562                           fsr1h	equ	0xFE2
 44563                           fsr1l	equ	0xFE1
 44564                           indf2	equ	0xFDF
 44565                           postinc2	equ	0xFDE
 44566                           postdec2	equ	0xFDD
 44567                           plusw2	equ	0xFDB
 44568                           fsr2h	equ	0xFDA
 44569                           fsr2l	equ	0xFD9
 44570                           status	equ	0xFD8
 44571                           
 44572 ;; *************** function _playArpeggio *****************
 44573 ;; Defined at:
 44574 ;;		line 275 in file "arpeggio.c"
 44575 ;; Parameters:    Size  Location     Type
 44576 ;;		None
 44577 ;; Auto vars:     Size  Location     Type
 44578 ;;		None
 44579 ;; Return value:  Size  Location     Type
 44580 ;;                  1    wreg      void 
 44581 ;; Registers used:
 44582 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 44583 ;; Tracked objects:
 44584 ;;		On entry : 0/0
 44585 ;;		On exit  : 0/0
 44586 ;;		Unchanged: 0/0
 44587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44590 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44591 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44592 ;;Total ram usage:        6 bytes
 44593 ;; Hardware stack levels used:    1
 44594 ;; Hardware stack levels required when called:    3
 44595 ;; This function calls:
 44596 ;;		_sort_pitches
 44597 ;;		i2___awmod
 44598 ;;		i2_noteOff
 44599 ;;		i2_noteOn
 44600 ;;		i2_rand
 44601 ;;		i2_random_pitches
 44602 ;;		i2_random_pitches_non_repeating
 44603 ;; This function is called by:
 44604 ;;		_ISR
 44605 ;; This function uses a non-reentrant model
 44606 ;;
 44607                           
 44608                           	psect	text142
 44609  000A42                     __ptext142:
 44610                           	opt stack 0
 44611  000A42                     _playArpeggio:
 44612                           	opt stack 14
 44613                           
 44614                           ;arpeggio.c: 278: if(NUM_NOTES_PRESSED == 0){return;}
 44615                           
 44616                           ;incstack = 0
 44617  000A42  0100               	movlb	0	; () banked
 44618  000A44  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44619  000A46  B4D8               	btfsc	status,2,c
 44620  000A48  0012               	return	
 44621                           
 44622                           ; BSR set to: 0
 44623                           ;arpeggio.c: 286: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE == A
      +                          S_PRESSED) {
 44624                           
 44625                           ; BSR set to: 0
 44626                           
 44627                           ; BSR set to: 0
 44628  000A4A  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 44629  000A4C  B4D8               	btfsc	status,2,c
 44630  000A4E  D008               	goto	i2u3803_40
 44631                           
 44632                           ; BSR set to: 0
 44633  000A50  0E02               	movlw	2
 44634  000A52  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44635  000A54  B4D8               	btfsc	status,2,c
 44636  000A56  D004               	goto	i2u3803_40
 44637                           
 44638                           ; BSR set to: 0
 44639  000A58  0E06               	movlw	6
 44640  000A5A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44641  000A5C  A4D8               	btfss	status,2,c
 44642  000A5E  D0B8               	goto	i2l5307
 44643  000A60                     i2u3803_40:
 44644                           
 44645                           ; BSR set to: 0
 44646                           ;arpeggio.c: 288: if(startingDirection == UP){
 44647                           
 44648                           ; BSR set to: 0
 44649  000A60  51E9               	movf	_startingDirection& (0+255),w,b
 44650  000A62  B4D8               	btfsc	status,2,c
 44651                           
 44652                           ; BSR set to: 0
 44653                           ;arpeggio.c: 290: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 44654  000A64  A633               	btfss	_overflow/(0+8),_overflow& (0+7),c
 44655  000A66  D026               	goto	i2l5296
 44656                           
 44657                           ; BSR set to: 0
 44658  000A68  5056               	movf	_which_octave,w,c
 44659  000A6A  0A80               	xorlw	128
 44660  000A6C  0F7F               	addlw	-129
 44661  000A6E  B0D8               	btfsc	status,0,c
 44662                           
 44663                           ; BSR set to: 0
 44664  000A70  B433               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44665  000A72  D020               	goto	i2l5296
 44666                           
 44667                           ; BSR set to: 0
 44668  000A74  B033               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 44669  000A76  D01E               	goto	i2l5296
 44670                           
 44671                           ; BSR set to: 0
 44672                           ;arpeggio.c: 293: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - 1) * 12),velocity);
 44673  000A78  0EFF               	movlw	255
 44674  000A7A  6E18               	movwf	??_playArpeggio& (0+255),c
 44675  000A7C  0EFF               	movlw	255
 44676  000A7E  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44677  000A80  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44678  000A82  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44679  000A84  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44680  000A86  5018               	movf	??_playArpeggio,w,c
 44681  000A88  261A               	addwf	??_playArpeggio+2,f,c
 44682  000A8A  5019               	movf	??_playArpeggio+1,w,c
 44683  000A8C  221B               	addwfc	??_playArpeggio+3,f,c
 44684  000A8E  501A               	movf	??_playArpeggio+2,w,c
 44685  000A90  244F               	addwf	_arpeggioPtr,w,c
 44686  000A92  6ED9               	movwf	fsr2l,c
 44687  000A94  501B               	movf	??_playArpeggio+3,w,c
 44688  000A96  2050               	addwfc	_arpeggioPtr+1,w,c
 44689  000A98  6EDA               	movwf	fsr2h,c
 44690  000A9A  50DF               	movf	indf2,w,c
 44691  000A9C  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44692  000A9E  0456               	decf	_which_octave,w,c
 44693  000AA0  0D0C               	mullw	12
 44694  000AA2  50F3               	movf	prodl,w,c
 44695  000AA4  241C               	addwf	??_playArpeggio+4,w,c
 44696  000AA6  6E0C               	movwf	i2noteOff@pitch,c
 44697  000AA8  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44698  000AAC  51F6               	movf	_channel& (0+255),w,b
 44699  000AAE  ECD1  F048         	call	i2_noteOff
 44700                           
 44701                           ;arpeggio.c: 294: overflow = 0;
 44702  000AB2  9633               	bcf	_overflow/(0+8),_overflow& (0+7),c
 44703  000AB4                     i2l5296:
 44704                           
 44705                           ;arpeggio.c: 295: }
 44706                           ;arpeggio.c: 296: }
 44707                           ;arpeggio.c: 298: if(startingDirection == DOWN){
 44708  000AB4  0100               	movlb	0	; () banked
 44709  000AB6  05E9               	decf	_startingDirection& (0+255),w,b
 44710  000AB8  B4D8               	btfsc	status,2,c
 44711                           
 44712                           ; BSR set to: 0
 44713                           ;arpeggio.c: 300: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 44714  000ABA  A633               	btfss	_overflow/(0+8),_overflow& (0+7),c
 44715  000ABC  D028               	goto	i2l5298
 44716                           
 44717                           ; BSR set to: 0
 44718  000ABE  5056               	movf	_which_octave,w,c
 44719  000AC0  0A80               	xorlw	128
 44720  000AC2  0F7F               	addlw	-129
 44721  000AC4  B0D8               	btfsc	status,0,c
 44722                           
 44723                           ; BSR set to: 0
 44724  000AC6  B433               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44725  000AC8  D022               	goto	i2l5298
 44726                           
 44727                           ; BSR set to: 0
 44728  000ACA  B033               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 44729  000ACC  D020               	goto	i2l5298
 44730                           
 44731                           ; BSR set to: 0
 44732                           ;arpeggio.c: 301: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - OCTAVES) * 12),velocity);
 44733  000ACE  0EFF               	movlw	255
 44734  000AD0  6E18               	movwf	??_playArpeggio& (0+255),c
 44735  000AD2  0EFF               	movlw	255
 44736  000AD4  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44737  000AD6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44738  000AD8  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44739  000ADA  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44740  000ADC  5018               	movf	??_playArpeggio,w,c
 44741  000ADE  261A               	addwf	??_playArpeggio+2,f,c
 44742  000AE0  5019               	movf	??_playArpeggio+1,w,c
 44743  000AE2  221B               	addwfc	??_playArpeggio+3,f,c
 44744  000AE4  501A               	movf	??_playArpeggio+2,w,c
 44745  000AE6  244F               	addwf	_arpeggioPtr,w,c
 44746  000AE8  6ED9               	movwf	fsr2l,c
 44747  000AEA  501B               	movf	??_playArpeggio+3,w,c
 44748  000AEC  2050               	addwfc	_arpeggioPtr+1,w,c
 44749  000AEE  6EDA               	movwf	fsr2h,c
 44750  000AF0  50DF               	movf	indf2,w,c
 44751  000AF2  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44752  000AF4  51F8               	movf	_OCTAVES& (0+255),w,b
 44753  000AF6  0800               	sublw	0
 44754  000AF8  2456               	addwf	_which_octave,w,c
 44755  000AFA  0D0C               	mullw	12
 44756  000AFC  50F3               	movf	prodl,w,c
 44757  000AFE  241C               	addwf	??_playArpeggio+4,w,c
 44758  000B00  6E0C               	movwf	i2noteOff@pitch,c
 44759  000B02  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44760  000B06  51F6               	movf	_channel& (0+255),w,b
 44761  000B08  ECD1  F048         	call	i2_noteOff
 44762                           
 44763                           ;arpeggio.c: 302: overflow = 0;
 44764  000B0C  9633               	bcf	_overflow/(0+8),_overflow& (0+7),c
 44765  000B0E                     i2l5298:
 44766                           
 44767                           ;arpeggio.c: 303: }
 44768                           ;arpeggio.c: 304: }
 44769                           ;arpeggio.c: 306: if(octave_overflow == 1){
 44770  000B0E  A433               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44771  000B10  D05F               	goto	i2l5307
 44772                           
 44773                           ;arpeggio.c: 307: if(startingDirection == UP) {
 44774  000B12  0100               	movlb	0	; () banked
 44775  000B14  51E9               	movf	_startingDirection& (0+255),w,b
 44776  000B16  A4D8               	btfss	status,2,c
 44777  000B18  D020               	goto	i2l5300
 44778                           
 44779                           ; BSR set to: 0
 44780                           ;arpeggio.c: 309: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + ((OCTAVES - 1) * 12),velocity);}
 44781  000B1A  BE32               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 44782  000B1C  D01D               	goto	i2l5301
 44783                           
 44784                           ; BSR set to: 0
 44785  000B1E  0EFF               	movlw	255
 44786  000B20  6E18               	movwf	??_playArpeggio& (0+255),c
 44787  000B22  0EFF               	movlw	255
 44788  000B24  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44789  000B26  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44790  000B28  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44791  000B2A  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44792  000B2C  5018               	movf	??_playArpeggio,w,c
 44793  000B2E  261A               	addwf	??_playArpeggio+2,f,c
 44794  000B30  5019               	movf	??_playArpeggio+1,w,c
 44795  000B32  221B               	addwfc	??_playArpeggio+3,f,c
 44796  000B34  501A               	movf	??_playArpeggio+2,w,c
 44797  000B36  244F               	addwf	_arpeggioPtr,w,c
 44798  000B38  6ED9               	movwf	fsr2l,c
 44799  000B3A  501B               	movf	??_playArpeggio+3,w,c
 44800  000B3C  2050               	addwfc	_arpeggioPtr+1,w,c
 44801  000B3E  6EDA               	movwf	fsr2h,c
 44802  000B40  50DF               	movf	indf2,w,c
 44803  000B42  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44804  000B44  05F8               	decf	_OCTAVES& (0+255),w,b
 44805  000B46  0D0C               	mullw	12
 44806  000B48  50F3               	movf	prodl,w,c
 44807  000B4A  241C               	addwf	??_playArpeggio+4,w,c
 44808  000B4C  6E0C               	movwf	i2noteOff@pitch,c
 44809  000B4E  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44810  000B52  51F6               	movf	_channel& (0+255),w,b
 44811  000B54  ECD1  F048         	call	i2_noteOff
 44812  000B58                     i2l5301:
 44813                           
 44814                           ;arpeggio.c: 310: octave_overflow = 0;
 44815  000B58  9433               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44816  000B5A                     i2l5300:
 44817                           
 44818                           ;arpeggio.c: 311: }
 44819                           ;arpeggio.c: 313: if(startingDirection == DOWN){
 44820  000B5A  0100               	movlb	0	; () banked
 44821  000B5C  05E9               	decf	_startingDirection& (0+255),w,b
 44822  000B5E  A4D8               	btfss	status,2,c
 44823  000B60  D01B               	goto	i2l5302
 44824                           
 44825                           ; BSR set to: 0
 44826                           ;arpeggio.c: 315: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )),velocity);}
 44827  000B62  BE32               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 44828  000B64  D018               	goto	i2l5303
 44829                           
 44830                           ; BSR set to: 0
 44831  000B66  0EFF               	movlw	255
 44832  000B68  6E18               	movwf	??_playArpeggio& (0+255),c
 44833  000B6A  0EFF               	movlw	255
 44834  000B6C  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44835  000B6E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44836  000B70  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44837  000B72  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44838  000B74  5018               	movf	??_playArpeggio,w,c
 44839  000B76  261A               	addwf	??_playArpeggio+2,f,c
 44840  000B78  5019               	movf	??_playArpeggio+1,w,c
 44841  000B7A  221B               	addwfc	??_playArpeggio+3,f,c
 44842  000B7C  501A               	movf	??_playArpeggio+2,w,c
 44843  000B7E  244F               	addwf	_arpeggioPtr,w,c
 44844  000B80  6ED9               	movwf	fsr2l,c
 44845  000B82  501B               	movf	??_playArpeggio+3,w,c
 44846  000B84  2050               	addwfc	_arpeggioPtr+1,w,c
 44847  000B86  6EDA               	movwf	fsr2h,c
 44848  000B88  50DF               	movf	indf2,w,c
 44849  000B8A  6E0C               	movwf	i2noteOff@pitch,c
 44850  000B8C  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44851  000B90  51F6               	movf	_channel& (0+255),w,b
 44852  000B92  ECD1  F048         	call	i2_noteOff
 44853  000B96                     i2l5303:
 44854                           
 44855                           ;arpeggio.c: 316: octave_overflow = 0;
 44856  000B96  9433               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44857  000B98                     i2l5302:
 44858                           
 44859                           ;arpeggio.c: 317: }
 44860                           ;arpeggio.c: 321: if(skipFirstLast == 1){
 44861  000B98  A834               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 44862  000B9A  D013               	goto	i2l5306
 44863                           
 44864                           ;arpeggio.c: 322: if(NUM_NOTES_PRESSED > 1){
 44865  000B9C  0E01               	movlw	1
 44866  000B9E  0100               	movlb	0	; () banked
 44867  000BA0  65E5               	cpfsgt	_NUM_NOTES_PRESSED& (0+255),b
 44868  000BA2  D003               	goto	i2l5305
 44869                           
 44870                           ; BSR set to: 0
 44871                           ;arpeggio.c: 323: which_note = 1;
 44872  000BA4  0E01               	movlw	1
 44873  000BA6  6E57               	movwf	_which_note,c
 44874                           
 44875                           ; BSR set to: 0
 44876                           ;arpeggio.c: 324: suppress_note_off = 1;
 44877  000BA8  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 44878  000BAA                     i2l5305:
 44879                           
 44880                           ; BSR set to: 0
 44881                           ;arpeggio.c: 325: }
 44882                           ;arpeggio.c: 329: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 44883                           
 44884                           ; BSR set to: 0
 44885  000BAA  05E5               	decf	_NUM_NOTES_PRESSED& (0+255),w,b
 44886  000BAC  A4D8               	btfss	status,2,c
 44887  000BAE  D009               	goto	i2l5306
 44888                           
 44889                           ; BSR set to: 0
 44890  000BB0  0E01               	movlw	1
 44891  000BB2  65F8               	cpfsgt	_OCTAVES& (0+255),b
 44892  000BB4  D006               	goto	i2l5306
 44893                           
 44894                           ; BSR set to: 0
 44895                           ;arpeggio.c: 330: flag1 = 1;
 44896  000BB6  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 44897                           
 44898                           ; BSR set to: 0
 44899                           ;arpeggio.c: 332: which_note = 0;
 44900  000BB8  0E00               	movlw	0
 44901  000BBA  6E57               	movwf	_which_note,c
 44902                           
 44903                           ; BSR set to: 0
 44904                           ;arpeggio.c: 333: which_octave--;
 44905  000BBC  0656               	decf	_which_octave,f,c
 44906                           
 44907                           ; BSR set to: 0
 44908                           ;arpeggio.c: 334: stored_octave = which_octave;
 44909  000BBE  C056  F0E7         	movff	_which_octave,_stored_octave
 44910  000BC2                     i2l5306:
 44911                           
 44912                           ;arpeggio.c: 335: }
 44913                           ;arpeggio.c: 336: }
 44914                           ;arpeggio.c: 339: if(ARPEGGIO_TYPE == UP_DOWN) {ARPEGGIO_TYPE = DOWN_UP;}
 44915                           
 44916                           ; BSR set to: 0
 44917                           
 44918                           ; BSR set to: 0
 44919  000BC2  0E02               	movlw	2
 44920  000BC4  0100               	movlb	0	; () banked
 44921  000BC6  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44922  000BC8  A4D8               	btfss	status,2,c
 44923  000BCA  D002               	goto	i2l5307
 44924                           
 44925                           ; BSR set to: 0
 44926  000BCC  0E03               	movlw	3
 44927  000BCE  6FEA               	movwf	_ARPEGGIO_TYPE& (0+255),b
 44928  000BD0                     i2l5307:
 44929                           
 44930                           ;arpeggio.c: 340: }
 44931                           ;arpeggio.c: 341: }
 44932                           ;arpeggio.c: 344: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP) {
 44933                           
 44934                           ; BSR set to: 0
 44935                           
 44936                           ; BSR set to: 0
 44937                           
 44938                           ; BSR set to: 0
 44939  000BD0  0100               	movlb	0	; () banked
 44940  000BD2  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 44941  000BD4  B4D8               	btfsc	status,2,c
 44942  000BD6  D004               	goto	i2u3825_40
 44943                           
 44944                           ; BSR set to: 0
 44945  000BD8  0E03               	movlw	3
 44946  000BDA  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44947  000BDC  A4D8               	btfss	status,2,c
 44948  000BDE  D0BF               	goto	i2l5323
 44949  000BE0                     i2u3825_40:
 44950                           
 44951                           ; BSR set to: 0
 44952                           ;arpeggio.c: 346: if(startingDirection == UP){
 44953                           
 44954                           ; BSR set to: 0
 44955  000BE0  51E9               	movf	_startingDirection& (0+255),w,b
 44956  000BE2  B4D8               	btfsc	status,2,c
 44957                           
 44958                           ; BSR set to: 0
 44959                           ;arpeggio.c: 348: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 44960  000BE4  A633               	btfss	_overflow/(0+8),_overflow& (0+7),c
 44961  000BE6  D024               	goto	i2l5312
 44962                           
 44963                           ; BSR set to: 0
 44964  000BE8  BE56               	btfsc	_which_octave,7,c
 44965                           
 44966                           ; BSR set to: 0
 44967  000BEA  B433               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44968  000BEC  D021               	goto	i2l5312
 44969                           
 44970                           ; BSR set to: 0
 44971  000BEE  B033               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 44972  000BF0  D01F               	goto	i2l5312
 44973                           
 44974                           ; BSR set to: 0
 44975                           ;arpeggio.c: 349: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((OCTAVES +
      +                           which_octave) * 12),velocity);
 44976  000BF2  0EFF               	movlw	255
 44977  000BF4  6E18               	movwf	??_playArpeggio& (0+255),c
 44978  000BF6  0EFF               	movlw	255
 44979  000BF8  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44980  000BFA  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44981  000BFC  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44982  000BFE  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44983  000C00  5018               	movf	??_playArpeggio,w,c
 44984  000C02  261A               	addwf	??_playArpeggio+2,f,c
 44985  000C04  5019               	movf	??_playArpeggio+1,w,c
 44986  000C06  221B               	addwfc	??_playArpeggio+3,f,c
 44987  000C08  501A               	movf	??_playArpeggio+2,w,c
 44988  000C0A  244F               	addwf	_arpeggioPtr,w,c
 44989  000C0C  6ED9               	movwf	fsr2l,c
 44990  000C0E  501B               	movf	??_playArpeggio+3,w,c
 44991  000C10  2050               	addwfc	_arpeggioPtr+1,w,c
 44992  000C12  6EDA               	movwf	fsr2h,c
 44993  000C14  50DF               	movf	indf2,w,c
 44994  000C16  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44995  000C18  5056               	movf	_which_octave,w,c
 44996  000C1A  25F8               	addwf	_OCTAVES& (0+255),w,b
 44997  000C1C  0D0C               	mullw	12
 44998  000C1E  50F3               	movf	prodl,w,c
 44999  000C20  241C               	addwf	??_playArpeggio+4,w,c
 45000  000C22  6E0C               	movwf	i2noteOff@pitch,c
 45001  000C24  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45002  000C28  51F6               	movf	_channel& (0+255),w,b
 45003  000C2A  ECD1  F048         	call	i2_noteOff
 45004                           
 45005                           ;arpeggio.c: 350: overflow = 0;
 45006  000C2E  9633               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45007  000C30                     i2l5312:
 45008                           
 45009                           ;arpeggio.c: 351: }
 45010                           ;arpeggio.c: 352: }
 45011                           ;arpeggio.c: 354: if(startingDirection == DOWN) {
 45012  000C30  0100               	movlb	0	; () banked
 45013  000C32  05E9               	decf	_startingDirection& (0+255),w,b
 45014  000C34  B4D8               	btfsc	status,2,c
 45015                           
 45016                           ; BSR set to: 0
 45017                           ;arpeggio.c: 356: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45018  000C36  A633               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45019  000C38  D023               	goto	i2l5314
 45020                           
 45021                           ; BSR set to: 0
 45022  000C3A  BE56               	btfsc	_which_octave,7,c
 45023                           
 45024                           ; BSR set to: 0
 45025  000C3C  B433               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45026  000C3E  D020               	goto	i2l5314
 45027                           
 45028                           ; BSR set to: 0
 45029  000C40  B033               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45030  000C42  D01E               	goto	i2l5314
 45031                           
 45032                           ; BSR set to: 0
 45033                           ;arpeggio.c: 357: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave + 1) * 12),velocity);
 45034  000C44  0EFF               	movlw	255
 45035  000C46  6E18               	movwf	??_playArpeggio& (0+255),c
 45036  000C48  0EFF               	movlw	255
 45037  000C4A  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45038  000C4C  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45039  000C4E  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45040  000C50  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45041  000C52  5018               	movf	??_playArpeggio,w,c
 45042  000C54  261A               	addwf	??_playArpeggio+2,f,c
 45043  000C56  5019               	movf	??_playArpeggio+1,w,c
 45044  000C58  221B               	addwfc	??_playArpeggio+3,f,c
 45045  000C5A  501A               	movf	??_playArpeggio+2,w,c
 45046  000C5C  244F               	addwf	_arpeggioPtr,w,c
 45047  000C5E  6ED9               	movwf	fsr2l,c
 45048  000C60  501B               	movf	??_playArpeggio+3,w,c
 45049  000C62  2050               	addwfc	_arpeggioPtr+1,w,c
 45050  000C64  6EDA               	movwf	fsr2h,c
 45051  000C66  50DF               	movf	indf2,w,c
 45052  000C68  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45053  000C6A  2856               	incf	_which_octave,w,c
 45054  000C6C  0D0C               	mullw	12
 45055  000C6E  50F3               	movf	prodl,w,c
 45056  000C70  241C               	addwf	??_playArpeggio+4,w,c
 45057  000C72  6E0C               	movwf	i2noteOff@pitch,c
 45058  000C74  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45059  000C78  51F6               	movf	_channel& (0+255),w,b
 45060  000C7A  ECD1  F048         	call	i2_noteOff
 45061                           
 45062                           ;arpeggio.c: 358: overflow = 0;
 45063  000C7E  9633               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45064  000C80                     i2l5314:
 45065                           
 45066                           ;arpeggio.c: 359: }
 45067                           ;arpeggio.c: 360: }
 45068                           ;arpeggio.c: 362: if(octave_overflow == 1){
 45069  000C80  A433               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45070  000C82  D06D               	goto	i2l5323
 45071                           
 45072                           ;arpeggio.c: 364: if(startingDirection == UP){
 45073  000C84  0100               	movlb	0	; () banked
 45074  000C86  51E9               	movf	_startingDirection& (0+255),w,b
 45075  000C88  A4D8               	btfss	status,2,c
 45076  000C8A  D024               	goto	i2l5316
 45077                           
 45078                           ; BSR set to: 0
 45079                           ;arpeggio.c: 366: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + OCTAVES) * 12),velocity);}
 45080  000C8C  BE32               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45081  000C8E  D021               	goto	i2l5317
 45082                           
 45083                           ; BSR set to: 0
 45084  000C90  0EFF               	movlw	255
 45085  000C92  6E18               	movwf	??_playArpeggio& (0+255),c
 45086  000C94  0EFF               	movlw	255
 45087  000C96  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45088  000C98  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45089  000C9A  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45090  000C9C  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45091  000C9E  5018               	movf	??_playArpeggio,w,c
 45092  000CA0  261A               	addwf	??_playArpeggio+2,f,c
 45093  000CA2  5019               	movf	??_playArpeggio+1,w,c
 45094  000CA4  221B               	addwfc	??_playArpeggio+3,f,c
 45095  000CA6  501A               	movf	??_playArpeggio+2,w,c
 45096  000CA8  244F               	addwf	_arpeggioPtr,w,c
 45097  000CAA  6ED9               	movwf	fsr2l,c
 45098  000CAC  501B               	movf	??_playArpeggio+3,w,c
 45099  000CAE  2050               	addwfc	_arpeggioPtr+1,w,c
 45100  000CB0  6EDA               	movwf	fsr2h,c
 45101  000CB2  50DF               	movf	indf2,w,c
 45102  000CB4  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45103  000CB6  51F8               	movf	_OCTAVES& (0+255),w,b
 45104  000CB8  0D01               	mullw	1
 45105  000CBA  50F3               	movf	prodl,w,c
 45106  000CBC  0800               	sublw	0
 45107  000CBE  25F8               	addwf	_OCTAVES& (0+255),w,b
 45108  000CC0  0D0C               	mullw	12
 45109  000CC2  50F3               	movf	prodl,w,c
 45110  000CC4  241C               	addwf	??_playArpeggio+4,w,c
 45111  000CC6  6E0C               	movwf	i2noteOff@pitch,c
 45112  000CC8  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45113  000CCC  51F6               	movf	_channel& (0+255),w,b
 45114  000CCE  ECD1  F048         	call	i2_noteOff
 45115  000CD2                     i2l5317:
 45116                           
 45117                           ;arpeggio.c: 367: octave_overflow = 0;
 45118  000CD2  9433               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45119  000CD4                     i2l5316:
 45120                           
 45121                           ;arpeggio.c: 368: }
 45122                           ;arpeggio.c: 370: if(startingDirection == DOWN){
 45123  000CD4  0100               	movlb	0	; () banked
 45124  000CD6  05E9               	decf	_startingDirection& (0+255),w,b
 45125  000CD8  A4D8               	btfss	status,2,c
 45126  000CDA  D025               	goto	i2l5318
 45127                           
 45128                           ; BSR set to: 0
 45129                           ;arpeggio.c: 372: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + 1) * 12),velocity);}
 45130  000CDC  BE32               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45131  000CDE  D022               	goto	i2l5319
 45132                           
 45133                           ; BSR set to: 0
 45134  000CE0  0EFF               	movlw	255
 45135  000CE2  6E18               	movwf	??_playArpeggio& (0+255),c
 45136  000CE4  0EFF               	movlw	255
 45137  000CE6  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45138  000CE8  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45139  000CEA  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45140  000CEC  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45141  000CEE  5018               	movf	??_playArpeggio,w,c
 45142  000CF0  261A               	addwf	??_playArpeggio+2,f,c
 45143  000CF2  5019               	movf	??_playArpeggio+1,w,c
 45144  000CF4  221B               	addwfc	??_playArpeggio+3,f,c
 45145  000CF6  501A               	movf	??_playArpeggio+2,w,c
 45146  000CF8  244F               	addwf	_arpeggioPtr,w,c
 45147  000CFA  6ED9               	movwf	fsr2l,c
 45148  000CFC  501B               	movf	??_playArpeggio+3,w,c
 45149  000CFE  2050               	addwfc	_arpeggioPtr+1,w,c
 45150  000D00  6EDA               	movwf	fsr2h,c
 45151  000D02  50DF               	movf	indf2,w,c
 45152  000D04  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45153  000D06  51F8               	movf	_OCTAVES& (0+255),w,b
 45154  000D08  0D01               	mullw	1
 45155  000D0A  50F3               	movf	prodl,w,c
 45156  000D0C  0800               	sublw	0
 45157  000D0E  6E1D               	movwf	(??_playArpeggio+5)& (0+255),c
 45158  000D10  281D               	incf	??_playArpeggio+5,w,c
 45159  000D12  0D0C               	mullw	12
 45160  000D14  50F3               	movf	prodl,w,c
 45161  000D16  241C               	addwf	??_playArpeggio+4,w,c
 45162  000D18  6E0C               	movwf	i2noteOff@pitch,c
 45163  000D1A  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45164  000D1E  51F6               	movf	_channel& (0+255),w,b
 45165  000D20  ECD1  F048         	call	i2_noteOff
 45166  000D24                     i2l5319:
 45167                           
 45168                           ;arpeggio.c: 373: octave_overflow = 0;
 45169  000D24  9433               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45170  000D26                     i2l5318:
 45171                           
 45172                           ;arpeggio.c: 374: }
 45173                           ;arpeggio.c: 378: if(skipFirstLast == 1){
 45174  000D26  A834               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 45175  000D28  D013               	goto	i2l5322
 45176                           
 45177                           ;arpeggio.c: 379: if(NUM_NOTES_PRESSED > 1){
 45178  000D2A  0E01               	movlw	1
 45179  000D2C  0100               	movlb	0	; () banked
 45180  000D2E  65E5               	cpfsgt	_NUM_NOTES_PRESSED& (0+255),b
 45181  000D30  D003               	goto	i2l5321
 45182                           
 45183                           ; BSR set to: 0
 45184                           ;arpeggio.c: 380: which_note = 1;
 45185  000D32  0E01               	movlw	1
 45186  000D34  6E57               	movwf	_which_note,c
 45187                           
 45188                           ; BSR set to: 0
 45189                           ;arpeggio.c: 381: suppress_note_off = 1;
 45190  000D36  8833               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45191  000D38                     i2l5321:
 45192                           
 45193                           ; BSR set to: 0
 45194                           ;arpeggio.c: 382: }
 45195                           ;arpeggio.c: 386: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 45196                           
 45197                           ; BSR set to: 0
 45198  000D38  05E5               	decf	_NUM_NOTES_PRESSED& (0+255),w,b
 45199  000D3A  A4D8               	btfss	status,2,c
 45200  000D3C  D009               	goto	i2l5322
 45201                           
 45202                           ; BSR set to: 0
 45203  000D3E  0E01               	movlw	1
 45204  000D40  65F8               	cpfsgt	_OCTAVES& (0+255),b
 45205  000D42  D006               	goto	i2l5322
 45206                           
 45207                           ; BSR set to: 0
 45208                           ;arpeggio.c: 387: flag1 = 1;
 45209  000D44  8033               	bsf	_flag1/(0+8),_flag1& (0+7),c
 45210                           
 45211                           ; BSR set to: 0
 45212                           ;arpeggio.c: 389: which_note = 0;
 45213  000D46  0E00               	movlw	0
 45214  000D48  6E57               	movwf	_which_note,c
 45215                           
 45216                           ; BSR set to: 0
 45217                           ;arpeggio.c: 390: which_octave++;
 45218  000D4A  2A56               	incf	_which_octave,f,c
 45219                           
 45220                           ; BSR set to: 0
 45221                           ;arpeggio.c: 391: stored_octave = which_octave;
 45222  000D4C  C056  F0E7         	movff	_which_octave,_stored_octave
 45223  000D50                     i2l5322:
 45224                           
 45225                           ;arpeggio.c: 392: }
 45226                           ;arpeggio.c: 393: }
 45227                           ;arpeggio.c: 395: if(ARPEGGIO_TYPE == DOWN_UP) {ARPEGGIO_TYPE = UP_DOWN;}
 45228                           
 45229                           ; BSR set to: 0
 45230                           
 45231                           ; BSR set to: 0
 45232  000D50  0E03               	movlw	3
 45233  000D52  0100               	movlb	0	; () banked
 45234  000D54  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45235  000D56  A4D8               	btfss	status,2,c
 45236  000D58  D002               	goto	i2l5323
 45237                           
 45238                           ; BSR set to: 0
 45239  000D5A  0E02               	movlw	2
 45240  000D5C  6FEA               	movwf	_ARPEGGIO_TYPE& (0+255),b
 45241  000D5E                     i2l5323:
 45242                           
 45243                           ;arpeggio.c: 396: }
 45244                           ;arpeggio.c: 397: }
 45245                           ;arpeggio.c: 400: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){
 45246                           
 45247                           ; BSR set to: 0
 45248                           
 45249                           ; BSR set to: 0
 45250                           
 45251                           ; BSR set to: 0
 45252  000D5E  0E05               	movlw	5
 45253  000D60  0100               	movlb	0	; () banked
 45254  000D62  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45255  000D64  B4D8               	btfsc	status,2,c
 45256  000D66  D004               	goto	i2u3847_40
 45257                           
 45258                           ; BSR set to: 0
 45259  000D68  0E04               	movlw	4
 45260  000D6A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45261  000D6C  A4D8               	btfss	status,2,c
 45262  000D6E  D056               	goto	i2l5329
 45263  000D70                     i2u3847_40:
 45264                           
 45265                           ; BSR set to: 0
 45266                           ;arpeggio.c: 402: last_octave = which_octave;
 45267  000D70  C056  F055         	movff	_which_octave,_last_octave
 45268                           
 45269                           ;arpeggio.c: 404: if((overflow == 1) && (flag1 == 0)){
 45270  000D74  B633               	btfsc	_overflow/(0+8),_overflow& (0+7),c
 45271                           
 45272                           ; BSR set to: 0
 45273  000D76  B033               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45274  000D78  D00B               	goto	i2l5327
 45275                           
 45276                           ; BSR set to: 0
 45277                           ;arpeggio.c: 405: noteOff(channel,last_note + (last_octave * 12),velocity);
 45278  000D7A  5055               	movf	_last_octave,w,c
 45279  000D7C  0D0C               	mullw	12
 45280  000D7E  50F3               	movf	prodl,w,c
 45281  000D80  25E8               	addwf	_last_note& (0+255),w,b
 45282  000D82  6E0C               	movwf	i2noteOff@pitch,c
 45283  000D84  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45284  000D88  51F6               	movf	_channel& (0+255),w,b
 45285  000D8A  ECD1  F048         	call	i2_noteOff
 45286                           
 45287                           ;arpeggio.c: 406: overflow = 0;
 45288  000D8E  9633               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45289  000D90                     i2l5327:
 45290                           
 45291                           ;arpeggio.c: 407: }
 45292                           ;arpeggio.c: 409: if((which_note > 0) && (suppress_note_off == 0)){noteOff(channel,*(arp
      +                          eggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 45293  000D90  5057               	movf	_which_note,w,c
 45294  000D92  A4D8               	btfss	status,2,c
 45295  000D94  B833               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45296  000D96  D01E               	goto	i2l5328
 45297  000D98  0EFF               	movlw	255
 45298  000D9A  6E18               	movwf	??_playArpeggio& (0+255),c
 45299  000D9C  0EFF               	movlw	255
 45300  000D9E  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45301  000DA0  5057               	movf	_which_note,w,c
 45302  000DA2  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45303  000DA4  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45304  000DA6  5018               	movf	??_playArpeggio,w,c
 45305  000DA8  261A               	addwf	??_playArpeggio+2,f,c
 45306  000DAA  5019               	movf	??_playArpeggio+1,w,c
 45307  000DAC  221B               	addwfc	??_playArpeggio+3,f,c
 45308  000DAE  501A               	movf	??_playArpeggio+2,w,c
 45309  000DB0  244F               	addwf	_arpeggioPtr,w,c
 45310  000DB2  6ED9               	movwf	fsr2l,c
 45311  000DB4  501B               	movf	??_playArpeggio+3,w,c
 45312  000DB6  2050               	addwfc	_arpeggioPtr+1,w,c
 45313  000DB8  6EDA               	movwf	fsr2h,c
 45314  000DBA  50DF               	movf	indf2,w,c
 45315  000DBC  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45316  000DBE  5056               	movf	_which_octave,w,c
 45317  000DC0  0D0C               	mullw	12
 45318  000DC2  50F3               	movf	prodl,w,c
 45319  000DC4  241C               	addwf	??_playArpeggio+4,w,c
 45320  000DC6  6E0C               	movwf	i2noteOff@pitch,c
 45321  000DC8  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45322  000DCC  0100               	movlb	0	; () banked
 45323  000DCE  51F6               	movf	_channel& (0+255),w,b
 45324  000DD0  ECD1  F048         	call	i2_noteOff
 45325  000DD4                     i2l5328:
 45326                           
 45327                           ;arpeggio.c: 410: which_octave = rand() % OCTAVES;
 45328  000DD4  ECF2  F046         	call	i2_rand	;wreg free
 45329  000DD8  C00D  F00F         	movff	?i2_rand,i2___awmod@dividend
 45330  000DDC  C00E  F010         	movff	?i2_rand+1,i2___awmod@dividend+1
 45331  000DE0  C0F8  F011         	movff	_OCTAVES,i2___awmod@divisor
 45332  000DE4  6A12               	clrf	i2___awmod@divisor+1,c
 45333  000DE6  EC04  F043         	call	i2___awmod	;wreg free
 45334  000DEA  500F               	movf	?i2___awmod,w,c
 45335  000DEC  6E56               	movwf	_which_octave,c
 45336                           
 45337                           ;arpeggio.c: 411: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 45338  000DEE  BA33               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45339  000DF0  D015               	goto	i2l5329
 45340  000DF2  5057               	movf	_which_note,w,c
 45341  000DF4  0D01               	mullw	1
 45342  000DF6  50F3               	movf	prodl,w,c
 45343  000DF8  244F               	addwf	_arpeggioPtr,w,c
 45344  000DFA  6ED9               	movwf	fsr2l,c
 45345  000DFC  50F4               	movf	prodh,w,c
 45346  000DFE  2050               	addwfc	_arpeggioPtr+1,w,c
 45347  000E00  6EDA               	movwf	fsr2h,c
 45348  000E02  50DF               	movf	indf2,w,c
 45349  000E04  6E18               	movwf	??_playArpeggio& (0+255),c
 45350  000E06  5056               	movf	_which_octave,w,c
 45351  000E08  0D0C               	mullw	12
 45352  000E0A  50F3               	movf	prodl,w,c
 45353  000E0C  2418               	addwf	??_playArpeggio,w,c
 45354  000E0E  6E0F               	movwf	i2noteOn@pitch,c
 45355  000E10  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45356  000E14  0100               	movlb	0	; () banked
 45357  000E16  51F6               	movf	_channel& (0+255),w,b
 45358  000E18  ECBE  F045         	call	i2_noteOn
 45359  000E1C                     i2l5329:
 45360                           
 45361                           ;arpeggio.c: 412: }
 45362                           ;arpeggio.c: 414: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE =
      +                          = AS_PRESSED)) {
 45363  000E1C  0100               	movlb	0	; () banked
 45364  000E1E  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 45365  000E20  B4D8               	btfsc	status,2,c
 45366  000E22  D008               	goto	i2u3855_40
 45367                           
 45368                           ; BSR set to: 0
 45369  000E24  0E02               	movlw	2
 45370  000E26  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45371  000E28  B4D8               	btfsc	status,2,c
 45372  000E2A  D004               	goto	i2u3855_40
 45373                           
 45374                           ; BSR set to: 0
 45375  000E2C  0E06               	movlw	6
 45376  000E2E  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45377  000E30  A4D8               	btfss	status,2,c
 45378  000E32  D07F               	goto	i2l5340
 45379  000E34                     i2u3855_40:
 45380                           
 45381                           ; BSR set to: 0
 45382                           ;arpeggio.c: 416: SORT_DIRECTION = 0;
 45383                           
 45384                           ; BSR set to: 0
 45385  000E34  9A35               	bcf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 45386                           
 45387                           ; BSR set to: 0
 45388                           ;arpeggio.c: 417: sort_pitches();
 45389  000E36  ECFB  F030         	call	_sort_pitches	;wreg free
 45390                           
 45391                           ;arpeggio.c: 419: if(startingDirection == UP){
 45392  000E3A  0100               	movlb	0	; () banked
 45393  000E3C  51E9               	movf	_startingDirection& (0+255),w,b
 45394  000E3E  A4D8               	btfss	status,2,c
 45395  000E40  D038               	goto	i2l5337
 45396                           
 45397                           ; BSR set to: 0
 45398                           ;arpeggio.c: 421: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 45399  000E42  5057               	movf	_which_note,w,c
 45400  000E44  A4D8               	btfss	status,2,c
 45401                           
 45402                           ; BSR set to: 0
 45403  000E46  B833               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45404  000E48  D01D               	goto	i2l5336
 45405                           
 45406                           ; BSR set to: 0
 45407  000E4A  0EFF               	movlw	255
 45408  000E4C  6E18               	movwf	??_playArpeggio& (0+255),c
 45409  000E4E  0EFF               	movlw	255
 45410  000E50  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45411  000E52  5057               	movf	_which_note,w,c
 45412  000E54  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45413  000E56  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45414  000E58  5018               	movf	??_playArpeggio,w,c
 45415  000E5A  261A               	addwf	??_playArpeggio+2,f,c
 45416  000E5C  5019               	movf	??_playArpeggio+1,w,c
 45417  000E5E  221B               	addwfc	??_playArpeggio+3,f,c
 45418  000E60  501A               	movf	??_playArpeggio+2,w,c
 45419  000E62  244F               	addwf	_arpeggioPtr,w,c
 45420  000E64  6ED9               	movwf	fsr2l,c
 45421  000E66  501B               	movf	??_playArpeggio+3,w,c
 45422  000E68  2050               	addwfc	_arpeggioPtr+1,w,c
 45423  000E6A  6EDA               	movwf	fsr2h,c
 45424  000E6C  50DF               	movf	indf2,w,c
 45425  000E6E  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45426  000E70  5056               	movf	_which_octave,w,c
 45427  000E72  0D0C               	mullw	12
 45428  000E74  50F3               	movf	prodl,w,c
 45429  000E76  241C               	addwf	??_playArpeggio+4,w,c
 45430  000E78  6E0C               	movwf	i2noteOff@pitch,c
 45431  000E7A  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45432  000E7E  51F6               	movf	_channel& (0+255),w,b
 45433  000E80  ECD1  F048         	call	i2_noteOff
 45434  000E84                     i2l5336:
 45435                           
 45436                           ;arpeggio.c: 422: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 45437  000E84  BA33               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45438  000E86  D015               	goto	i2l5337
 45439  000E88  5057               	movf	_which_note,w,c
 45440  000E8A  0D01               	mullw	1
 45441  000E8C  50F3               	movf	prodl,w,c
 45442  000E8E  244F               	addwf	_arpeggioPtr,w,c
 45443  000E90  6ED9               	movwf	fsr2l,c
 45444  000E92  50F4               	movf	prodh,w,c
 45445  000E94  2050               	addwfc	_arpeggioPtr+1,w,c
 45446  000E96  6EDA               	movwf	fsr2h,c
 45447  000E98  50DF               	movf	indf2,w,c
 45448  000E9A  6E18               	movwf	??_playArpeggio& (0+255),c
 45449  000E9C  5056               	movf	_which_octave,w,c
 45450  000E9E  0D0C               	mullw	12
 45451  000EA0  50F3               	movf	prodl,w,c
 45452  000EA2  2418               	addwf	??_playArpeggio,w,c
 45453  000EA4  6E0F               	movwf	i2noteOn@pitch,c
 45454  000EA6  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45455  000EAA  0100               	movlb	0	; () banked
 45456  000EAC  51F6               	movf	_channel& (0+255),w,b
 45457  000EAE  ECBE  F045         	call	i2_noteOn
 45458  000EB2                     i2l5337:
 45459                           
 45460                           ;arpeggio.c: 423: }
 45461                           ;arpeggio.c: 425: if(startingDirection == DOWN) {
 45462  000EB2  0100               	movlb	0	; () banked
 45463  000EB4  05E9               	decf	_startingDirection& (0+255),w,b
 45464  000EB6  A4D8               	btfss	status,2,c
 45465  000EB8  D03C               	goto	i2l5340
 45466                           
 45467                           ; BSR set to: 0
 45468                           ;arpeggio.c: 427: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 45469  000EBA  5057               	movf	_which_note,w,c
 45470  000EBC  A4D8               	btfss	status,2,c
 45471                           
 45472                           ; BSR set to: 0
 45473  000EBE  B833               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45474  000EC0  D01F               	goto	i2l5339
 45475                           
 45476                           ; BSR set to: 0
 45477  000EC2  0EFF               	movlw	255
 45478  000EC4  6E18               	movwf	??_playArpeggio& (0+255),c
 45479  000EC6  0EFF               	movlw	255
 45480  000EC8  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45481  000ECA  5057               	movf	_which_note,w,c
 45482  000ECC  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45483  000ECE  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45484  000ED0  5018               	movf	??_playArpeggio,w,c
 45485  000ED2  261A               	addwf	??_playArpeggio+2,f,c
 45486  000ED4  5019               	movf	??_playArpeggio+1,w,c
 45487  000ED6  221B               	addwfc	??_playArpeggio+3,f,c
 45488  000ED8  501A               	movf	??_playArpeggio+2,w,c
 45489  000EDA  244F               	addwf	_arpeggioPtr,w,c
 45490  000EDC  6ED9               	movwf	fsr2l,c
 45491  000EDE  501B               	movf	??_playArpeggio+3,w,c
 45492  000EE0  2050               	addwfc	_arpeggioPtr+1,w,c
 45493  000EE2  6EDA               	movwf	fsr2h,c
 45494  000EE4  50DF               	movf	indf2,w,c
 45495  000EE6  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45496  000EE8  05F8               	decf	_OCTAVES& (0+255),w,b
 45497  000EEA  0800               	sublw	0
 45498  000EEC  2456               	addwf	_which_octave,w,c
 45499  000EEE  0D0C               	mullw	12
 45500  000EF0  50F3               	movf	prodl,w,c
 45501  000EF2  241C               	addwf	??_playArpeggio+4,w,c
 45502  000EF4  6E0C               	movwf	i2noteOff@pitch,c
 45503  000EF6  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45504  000EFA  51F6               	movf	_channel& (0+255),w,b
 45505  000EFC  ECD1  F048         	call	i2_noteOff
 45506  000F00                     i2l5339:
 45507                           
 45508                           ;arpeggio.c: 428: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 45509  000F00  BA33               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45510  000F02  D017               	goto	i2l5340
 45511  000F04  5057               	movf	_which_note,w,c
 45512  000F06  0D01               	mullw	1
 45513  000F08  50F3               	movf	prodl,w,c
 45514  000F0A  244F               	addwf	_arpeggioPtr,w,c
 45515  000F0C  6ED9               	movwf	fsr2l,c
 45516  000F0E  50F4               	movf	prodh,w,c
 45517  000F10  2050               	addwfc	_arpeggioPtr+1,w,c
 45518  000F12  6EDA               	movwf	fsr2h,c
 45519  000F14  50DF               	movf	indf2,w,c
 45520  000F16  6E18               	movwf	??_playArpeggio& (0+255),c
 45521  000F18  0100               	movlb	0	; () banked
 45522  000F1A  05F8               	decf	_OCTAVES& (0+255),w,b
 45523  000F1C  0800               	sublw	0
 45524  000F1E  2456               	addwf	_which_octave,w,c
 45525  000F20  0D0C               	mullw	12
 45526  000F22  50F3               	movf	prodl,w,c
 45527  000F24  2418               	addwf	??_playArpeggio,w,c
 45528  000F26  6E0F               	movwf	i2noteOn@pitch,c
 45529  000F28  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45530  000F2C  51F6               	movf	_channel& (0+255),w,b
 45531  000F2E  ECBE  F045         	call	i2_noteOn
 45532  000F32                     i2l5340:
 45533                           
 45534                           ;arpeggio.c: 429: }
 45535                           ;arpeggio.c: 430: }
 45536                           ;arpeggio.c: 432: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 45537  000F32  0100               	movlb	0	; () banked
 45538  000F34  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 45539  000F36  B4D8               	btfsc	status,2,c
 45540  000F38  D004               	goto	i2u3865_40
 45541                           
 45542                           ; BSR set to: 0
 45543  000F3A  0E03               	movlw	3
 45544  000F3C  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45545  000F3E  A4D8               	btfss	status,2,c
 45546  000F40  D082               	goto	i2l5349
 45547  000F42                     i2u3865_40:
 45548                           
 45549                           ; BSR set to: 0
 45550                           ;arpeggio.c: 434: SORT_DIRECTION = 1;
 45551  000F42  8A35               	bsf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 45552                           
 45553                           ; BSR set to: 0
 45554                           ;arpeggio.c: 435: sort_pitches();
 45555  000F44  ECFB  F030         	call	_sort_pitches	;wreg free
 45556                           
 45557                           ;arpeggio.c: 437: suppress_note_on = 0;
 45558  000F48  9A33               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45559                           
 45560                           ;arpeggio.c: 439: if(startingDirection == UP){
 45561  000F4A  0100               	movlb	0	; () banked
 45562  000F4C  51E9               	movf	_startingDirection& (0+255),w,b
 45563  000F4E  A4D8               	btfss	status,2,c
 45564  000F50  D03E               	goto	i2l5346
 45565                           
 45566                           ; BSR set to: 0
 45567                           ;arpeggio.c: 441: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 45568  000F52  5057               	movf	_which_note,w,c
 45569  000F54  A4D8               	btfss	status,2,c
 45570                           
 45571                           ; BSR set to: 0
 45572  000F56  B833               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45573  000F58  D020               	goto	i2l5345
 45574                           
 45575                           ; BSR set to: 0
 45576  000F5A  0EFF               	movlw	255
 45577  000F5C  6E18               	movwf	??_playArpeggio& (0+255),c
 45578  000F5E  0EFF               	movlw	255
 45579  000F60  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45580  000F62  5057               	movf	_which_note,w,c
 45581  000F64  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45582  000F66  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45583  000F68  5018               	movf	??_playArpeggio,w,c
 45584  000F6A  261A               	addwf	??_playArpeggio+2,f,c
 45585  000F6C  5019               	movf	??_playArpeggio+1,w,c
 45586  000F6E  221B               	addwfc	??_playArpeggio+3,f,c
 45587  000F70  501A               	movf	??_playArpeggio+2,w,c
 45588  000F72  244F               	addwf	_arpeggioPtr,w,c
 45589  000F74  6ED9               	movwf	fsr2l,c
 45590  000F76  501B               	movf	??_playArpeggio+3,w,c
 45591  000F78  2050               	addwfc	_arpeggioPtr+1,w,c
 45592  000F7A  6EDA               	movwf	fsr2h,c
 45593  000F7C  50DF               	movf	indf2,w,c
 45594  000F7E  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45595  000F80  51F8               	movf	_OCTAVES& (0+255),w,b
 45596  000F82  2456               	addwf	_which_octave,w,c
 45597  000F84  6E1D               	movwf	(??_playArpeggio+5)& (0+255),c
 45598  000F86  041D               	decf	??_playArpeggio+5,w,c
 45599  000F88  0D0C               	mullw	12
 45600  000F8A  50F3               	movf	prodl,w,c
 45601  000F8C  241C               	addwf	??_playArpeggio+4,w,c
 45602  000F8E  6E0C               	movwf	i2noteOff@pitch,c
 45603  000F90  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45604  000F94  51F6               	movf	_channel& (0+255),w,b
 45605  000F96  ECD1  F048         	call	i2_noteOff
 45606  000F9A                     i2l5345:
 45607                           
 45608                           ;arpeggio.c: 442: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 45609  000F9A  BA33               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45610  000F9C  D018               	goto	i2l5346
 45611  000F9E  5057               	movf	_which_note,w,c
 45612  000FA0  0D01               	mullw	1
 45613  000FA2  50F3               	movf	prodl,w,c
 45614  000FA4  244F               	addwf	_arpeggioPtr,w,c
 45615  000FA6  6ED9               	movwf	fsr2l,c
 45616  000FA8  50F4               	movf	prodh,w,c
 45617  000FAA  2050               	addwfc	_arpeggioPtr+1,w,c
 45618  000FAC  6EDA               	movwf	fsr2h,c
 45619  000FAE  50DF               	movf	indf2,w,c
 45620  000FB0  6E18               	movwf	??_playArpeggio& (0+255),c
 45621  000FB2  0100               	movlb	0	; () banked
 45622  000FB4  51F8               	movf	_OCTAVES& (0+255),w,b
 45623  000FB6  2456               	addwf	_which_octave,w,c
 45624  000FB8  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45625  000FBA  0419               	decf	??_playArpeggio+1,w,c
 45626  000FBC  0D0C               	mullw	12
 45627  000FBE  50F3               	movf	prodl,w,c
 45628  000FC0  2418               	addwf	??_playArpeggio,w,c
 45629  000FC2  6E0F               	movwf	i2noteOn@pitch,c
 45630  000FC4  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45631  000FC8  51F6               	movf	_channel& (0+255),w,b
 45632  000FCA  ECBE  F045         	call	i2_noteOn
 45633  000FCE                     i2l5346:
 45634                           
 45635                           ;arpeggio.c: 443: }
 45636                           ;arpeggio.c: 445: if(startingDirection == DOWN){
 45637  000FCE  0100               	movlb	0	; () banked
 45638  000FD0  05E9               	decf	_startingDirection& (0+255),w,b
 45639  000FD2  A4D8               	btfss	status,2,c
 45640  000FD4  D038               	goto	i2l5349
 45641                           
 45642                           ; BSR set to: 0
 45643                           ;arpeggio.c: 447: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave) * 12),velocity);}
 45644  000FD6  5057               	movf	_which_note,w,c
 45645  000FD8  A4D8               	btfss	status,2,c
 45646                           
 45647                           ; BSR set to: 0
 45648  000FDA  B833               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45649  000FDC  D01D               	goto	i2l5348
 45650                           
 45651                           ; BSR set to: 0
 45652  000FDE  0EFF               	movlw	255
 45653  000FE0  6E18               	movwf	??_playArpeggio& (0+255),c
 45654  000FE2  0EFF               	movlw	255
 45655  000FE4  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45656  000FE6  5057               	movf	_which_note,w,c
 45657  000FE8  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45658  000FEA  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45659  000FEC  5018               	movf	??_playArpeggio,w,c
 45660  000FEE  261A               	addwf	??_playArpeggio+2,f,c
 45661  000FF0  5019               	movf	??_playArpeggio+1,w,c
 45662  000FF2  221B               	addwfc	??_playArpeggio+3,f,c
 45663  000FF4  501A               	movf	??_playArpeggio+2,w,c
 45664  000FF6  244F               	addwf	_arpeggioPtr,w,c
 45665  000FF8  6ED9               	movwf	fsr2l,c
 45666  000FFA  501B               	movf	??_playArpeggio+3,w,c
 45667  000FFC  2050               	addwfc	_arpeggioPtr+1,w,c
 45668  000FFE  6EDA               	movwf	fsr2h,c
 45669  001000  50DF               	movf	indf2,w,c
 45670  001002  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45671  001004  5056               	movf	_which_octave,w,c
 45672  001006  0D0C               	mullw	12
 45673  001008  50F3               	movf	prodl,w,c
 45674  00100A  241C               	addwf	??_playArpeggio+4,w,c
 45675  00100C  6E0C               	movwf	i2noteOff@pitch,c
 45676  00100E  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45677  001012  51F6               	movf	_channel& (0+255),w,b
 45678  001014  ECD1  F048         	call	i2_noteOff
 45679  001018                     i2l5348:
 45680                           
 45681                           ;arpeggio.c: 448: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 45682  001018  BA33               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45683  00101A  D015               	goto	i2l5349
 45684  00101C  5057               	movf	_which_note,w,c
 45685  00101E  0D01               	mullw	1
 45686  001020  50F3               	movf	prodl,w,c
 45687  001022  244F               	addwf	_arpeggioPtr,w,c
 45688  001024  6ED9               	movwf	fsr2l,c
 45689  001026  50F4               	movf	prodh,w,c
 45690  001028  2050               	addwfc	_arpeggioPtr+1,w,c
 45691  00102A  6EDA               	movwf	fsr2h,c
 45692  00102C  50DF               	movf	indf2,w,c
 45693  00102E  6E18               	movwf	??_playArpeggio& (0+255),c
 45694  001030  5056               	movf	_which_octave,w,c
 45695  001032  0D0C               	mullw	12
 45696  001034  50F3               	movf	prodl,w,c
 45697  001036  2418               	addwf	??_playArpeggio,w,c
 45698  001038  6E0F               	movwf	i2noteOn@pitch,c
 45699  00103A  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45700  00103E  0100               	movlb	0	; () banked
 45701  001040  51F6               	movf	_channel& (0+255),w,b
 45702  001042  ECBE  F045         	call	i2_noteOn
 45703  001046                     i2l5349:
 45704                           
 45705                           ;arpeggio.c: 449: }
 45706                           ;arpeggio.c: 450: }
 45707                           ;arpeggio.c: 452: last_note = *(arpeggioPtr + which_note);
 45708  001046  5057               	movf	_which_note,w,c
 45709  001048  0D01               	mullw	1
 45710  00104A  50F3               	movf	prodl,w,c
 45711  00104C  244F               	addwf	_arpeggioPtr,w,c
 45712  00104E  6ED9               	movwf	fsr2l,c
 45713  001050  50F4               	movf	prodh,w,c
 45714  001052  2050               	addwfc	_arpeggioPtr+1,w,c
 45715  001054  6EDA               	movwf	fsr2h,c
 45716  001056  50DF               	movf	indf2,w,c
 45717  001058  0100               	movlb	0	; () banked
 45718  00105A  6FE8               	movwf	_last_note& (0+255),b
 45719                           
 45720                           ; BSR set to: 0
 45721                           ;arpeggio.c: 453: which_note++;
 45722  00105C  2A57               	incf	_which_note,f,c
 45723                           
 45724                           ; BSR set to: 0
 45725                           ;arpeggio.c: 454: suppress_note_off = 0;
 45726  00105E  9833               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45727                           
 45728                           ; BSR set to: 0
 45729                           ;arpeggio.c: 466: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | (ARPEGGIO_TYPE
      +                           == RANDOM) | (ARPEGGIO_TYPE == RANDOM_NON_REPEATING) | ARPEGGIO_TYPE == AS_PRESSED) {
 45730  001060  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 45731  001062  B4D8               	btfsc	status,2,c
 45732  001064  D010               	goto	i2u3878_40
 45733                           
 45734                           ; BSR set to: 0
 45735  001066  0E02               	movlw	2
 45736  001068  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45737  00106A  B4D8               	btfsc	status,2,c
 45738  00106C  D00C               	goto	i2u3878_40
 45739                           
 45740                           ; BSR set to: 0
 45741  00106E  0E05               	movlw	5
 45742  001070  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45743  001072  B4D8               	btfsc	status,2,c
 45744  001074  D008               	goto	i2u3878_40
 45745                           
 45746                           ; BSR set to: 0
 45747  001076  0E04               	movlw	4
 45748  001078  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45749  00107A  B4D8               	btfsc	status,2,c
 45750  00107C  D004               	goto	i2u3878_40
 45751                           
 45752                           ; BSR set to: 0
 45753  00107E  0E06               	movlw	6
 45754  001080  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45755  001082  A4D8               	btfss	status,2,c
 45756  001084  D039               	goto	i2l5361
 45757  001086                     i2u3878_40:
 45758                           
 45759                           ; BSR set to: 0
 45760                           ;arpeggio.c: 468: if(which_note >= (NUM_NOTES_PRESSED)){
 45761                           
 45762                           ; BSR set to: 0
 45763  001086  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45764  001088  5C57               	subwf	_which_note,w,c
 45765  00108A  A0D8               	btfss	status,0,c
 45766  00108C  D01E               	goto	i2l5360
 45767                           
 45768                           ; BSR set to: 0
 45769                           ;arpeggio.c: 470: which_note = 0;
 45770  00108E  0E00               	movlw	0
 45771  001090  6E57               	movwf	_which_note,c
 45772                           
 45773                           ;arpeggio.c: 473: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | ARPEGGIO_TYPE 
      +                          == AS_PRESSED) {
 45774  001092  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 45775  001094  B4D8               	btfsc	status,2,c
 45776  001096  D007               	goto	i2u3882_40
 45777                           
 45778                           ; BSR set to: 0
 45779  001098  0E02               	movlw	2
 45780  00109A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45781  00109C  B4D8               	btfsc	status,2,c
 45782  00109E  D003               	goto	i2u3882_40
 45783                           
 45784                           ; BSR set to: 0
 45785  0010A0  0E06               	movlw	6
 45786  0010A2  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45787  0010A4  B4D8               	btfsc	status,2,c
 45788  0010A6                     i2u3882_40:
 45789                           
 45790                           ; BSR set to: 0
 45791                           ;arpeggio.c: 474: which_octave++;
 45792                           
 45793                           ; BSR set to: 0
 45794  0010A6  2A56               	incf	_which_octave,f,c
 45795                           
 45796                           ; BSR set to: 0
 45797                           ;arpeggio.c: 475: }
 45798                           ;arpeggio.c: 477: overflow = 1;
 45799                           
 45800                           ; BSR set to: 0
 45801  0010A8  8633               	bsf	_overflow/(0+8),_overflow& (0+7),c
 45802                           
 45803                           ; BSR set to: 0
 45804                           ;arpeggio.c: 478: flag1 = 0;
 45805  0010AA  9033               	bcf	_flag1/(0+8),_flag1& (0+7),c
 45806                           
 45807                           ; BSR set to: 0
 45808                           ;arpeggio.c: 481: if(ARPEGGIO_TYPE == RANDOM) {
 45809  0010AC  0E05               	movlw	5
 45810  0010AE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45811  0010B0  B4D8               	btfsc	status,2,c
 45812                           
 45813                           ; BSR set to: 0
 45814                           ;arpeggio.c: 482: if(AUTO_RANDOMIZE == 0) {random_pitches();}
 45815  0010B2  BA34               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 45816  0010B4  D002               	goto	i2l5358
 45817                           
 45818                           ; BSR set to: 0
 45819  0010B6  EC19  F046         	call	i2_random_pitches	;wreg free
 45820  0010BA                     i2l5358:
 45821                           
 45822                           ;arpeggio.c: 483: }
 45823                           ;arpeggio.c: 484: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {
 45824  0010BA  0E04               	movlw	4
 45825  0010BC  0100               	movlb	0	; () banked
 45826  0010BE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45827  0010C0  B4D8               	btfsc	status,2,c
 45828                           
 45829                           ; BSR set to: 0
 45830                           ;arpeggio.c: 485: if(AUTO_RANDOMIZE == 0) {random_pitches_non_repeating();}
 45831  0010C2  BA34               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 45832  0010C4  D002               	goto	i2l5360
 45833                           
 45834                           ; BSR set to: 0
 45835  0010C6  EC79  F03E         	call	i2_random_pitches_non_repeating	;wreg free
 45836  0010CA                     i2l5360:
 45837                           
 45838                           ;arpeggio.c: 486: }
 45839                           ;arpeggio.c: 487: }
 45840                           ;arpeggio.c: 489: if(which_octave>=OCTAVES) {
 45841  0010CA  0100               	movlb	0	; () banked
 45842  0010CC  51F8               	movf	_OCTAVES& (0+255),w,b
 45843  0010CE  6E18               	movwf	??_playArpeggio& (0+255),c
 45844  0010D0  6A19               	clrf	(??_playArpeggio+1)& (0+255),c
 45845  0010D2  C056  F01A         	movff	_which_octave,??_playArpeggio+2
 45846  0010D6  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45847  0010D8  BE1A               	btfsc	(??_playArpeggio+2)& (0+255),7,c
 45848  0010DA  061B               	decf	(??_playArpeggio+3)& (0+255),f,c
 45849  0010DC  5018               	movf	??_playArpeggio,w,c
 45850  0010DE  5C1A               	subwf	??_playArpeggio+2,w,c
 45851  0010E0  501B               	movf	??_playArpeggio+3,w,c
 45852  0010E2  0A80               	xorlw	128
 45853  0010E4  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45854  0010E6  5019               	movf	??_playArpeggio+1,w,c
 45855  0010E8  0A80               	xorlw	128
 45856  0010EA  581C               	subwfb	(??_playArpeggio+4)& (0+255),w,c
 45857  0010EC  A0D8               	btfss	status,0,c
 45858  0010EE  D004               	goto	i2l5361
 45859                           
 45860                           ; BSR set to: 0
 45861                           ;arpeggio.c: 490: which_octave = 0;
 45862  0010F0  0E00               	movlw	0
 45863  0010F2  6E56               	movwf	_which_octave,c
 45864                           
 45865                           ; BSR set to: 0
 45866                           ;arpeggio.c: 491: octave_overflow = 1;
 45867  0010F4  8433               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45868                           
 45869                           ; BSR set to: 0
 45870                           ;arpeggio.c: 492: flag2 = 0;
 45871  0010F6  9E32               	bcf	_flag2/(0+8),_flag2& (0+7),c
 45872  0010F8                     i2l5361:
 45873                           
 45874                           ; BSR set to: 0
 45875                           ;arpeggio.c: 493: }
 45876                           ;arpeggio.c: 494: }
 45877                           ;arpeggio.c: 497: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 45878                           
 45879                           ; BSR set to: 0
 45880                           
 45881                           ; BSR set to: 0
 45882  0010F8  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 45883  0010FA  B4D8               	btfsc	status,2,c
 45884  0010FC  D004               	goto	i2u3889_40
 45885                           
 45886                           ; BSR set to: 0
 45887  0010FE  0E03               	movlw	3
 45888  001100  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45889  001102  A4D8               	btfss	status,2,c
 45890  001104  0012               	return	
 45891  001106                     i2u3889_40:
 45892                           
 45893                           ; BSR set to: 0
 45894                           ;arpeggio.c: 499: if(which_note>=(NUM_NOTES_PRESSED)){
 45895                           
 45896                           ; BSR set to: 0
 45897  001106  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45898  001108  5C57               	subwf	_which_note,w,c
 45899  00110A  A0D8               	btfss	status,0,c
 45900  00110C  D005               	goto	i2l5365
 45901                           
 45902                           ; BSR set to: 0
 45903                           ;arpeggio.c: 500: which_note = 0;
 45904  00110E  0E00               	movlw	0
 45905  001110  6E57               	movwf	_which_note,c
 45906                           
 45907                           ; BSR set to: 0
 45908                           ;arpeggio.c: 501: which_octave--;
 45909  001112  0656               	decf	_which_octave,f,c
 45910                           
 45911                           ; BSR set to: 0
 45912                           ;arpeggio.c: 502: overflow = 1;
 45913  001114  8633               	bsf	_overflow/(0+8),_overflow& (0+7),c
 45914                           
 45915                           ; BSR set to: 0
 45916                           ;arpeggio.c: 503: flag1 = 0;
 45917  001116  9033               	bcf	_flag1/(0+8),_flag1& (0+7),c
 45918  001118                     i2l5365:
 45919                           
 45920                           ; BSR set to: 0
 45921                           ;arpeggio.c: 504: }
 45922                           ;arpeggio.c: 505: if(which_octave <= (OCTAVES * -1)) {
 45923                           
 45924                           ; BSR set to: 0
 45925  001118  C056  F018         	movff	_which_octave,??_playArpeggio
 45926  00111C  6A19               	clrf	(??_playArpeggio+1)& (0+255),c
 45927  00111E  BE18               	btfsc	??_playArpeggio& (0+255),7,c
 45928  001120  0619               	decf	(??_playArpeggio+1)& (0+255),f,c
 45929  001122  51F8               	movf	_OCTAVES& (0+255),w,b
 45930  001124  0D01               	mullw	1
 45931  001126  1EF3               	comf	prodl,f,c
 45932  001128  1EF4               	comf	prodh,f,c
 45933  00112A  4AF3               	infsnz	prodl,f,c
 45934  00112C  2AF4               	incf	prodh,f,c
 45935  00112E  5018               	movf	??_playArpeggio,w,c
 45936  001130  5CF3               	subwf	prodl,w,c
 45937  001132  50F4               	movf	prodh,w,c
 45938  001134  0A80               	xorlw	128
 45939  001136  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45940  001138  5019               	movf	??_playArpeggio+1,w,c
 45941  00113A  0A80               	xorlw	128
 45942  00113C  581A               	subwfb	(??_playArpeggio+2)& (0+255),w,c
 45943  00113E  A0D8               	btfss	status,0,c
 45944  001140  0012               	return	
 45945                           
 45946                           ; BSR set to: 0
 45947                           ;arpeggio.c: 506: which_octave = 0;
 45948  001142  0E00               	movlw	0
 45949  001144  6E56               	movwf	_which_octave,c
 45950                           
 45951                           ; BSR set to: 0
 45952                           ;arpeggio.c: 507: octave_overflow = 1;
 45953  001146  8433               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45954                           
 45955                           ; BSR set to: 0
 45956                           ;arpeggio.c: 508: flag2 = 0;
 45957  001148  9E32               	bcf	_flag2/(0+8),_flag2& (0+7),c
 45958                           
 45959                           ; BSR set to: 0
 45960  00114A  0012               	return	
 45961  00114C                     __end_of_playArpeggio:
 45962                           	opt stack 0
 45963                           pclatu	equ	0xFFB
 45964                           pclath	equ	0xFFA
 45965                           tblptru	equ	0xFF8
 45966                           tblptrh	equ	0xFF7
 45967                           tblptrl	equ	0xFF6
 45968                           tablat	equ	0xFF5
 45969                           prodh	equ	0xFF4
 45970                           prodl	equ	0xFF3
 45971                           intcon	equ	0xFF2
 45972                           intcon2	equ	0xFF1
 45973                           postinc0	equ	0xFEE
 45974                           fsr0h	equ	0xFEA
 45975                           fsr0l	equ	0xFE9
 45976                           wreg	equ	0xFE8
 45977                           indf1	equ	0xFE7
 45978                           postinc1	equ	0xFE6
 45979                           postdec1	equ	0xFE5
 45980                           fsr1h	equ	0xFE2
 45981                           fsr1l	equ	0xFE1
 45982                           indf2	equ	0xFDF
 45983                           postinc2	equ	0xFDE
 45984                           postdec2	equ	0xFDD
 45985                           plusw2	equ	0xFDB
 45986                           fsr2h	equ	0xFDA
 45987                           fsr2l	equ	0xFD9
 45988                           status	equ	0xFD8
 45989                           
 45990 ;; *************** function i2_random_pitches_non_repeating *****************
 45991 ;; Defined at:
 45992 ;;		line 263 in file "arpeggio.c"
 45993 ;; Parameters:    Size  Location     Type
 45994 ;;		None
 45995 ;; Auto vars:     Size  Location     Type
 45996 ;;  random_pitch    1   22[COMRAM] unsigned char 
 45997 ;;  random_pitch    1   21[COMRAM] unsigned char 
 45998 ;;  random_pitch    1   20[COMRAM] unsigned char 
 45999 ;; Return value:  Size  Location     Type
 46000 ;;                  1    wreg      void 
 46001 ;; Registers used:
 46002 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 46003 ;; Tracked objects:
 46004 ;;		On entry : 0/0
 46005 ;;		On exit  : 0/0
 46006 ;;		Unchanged: 0/0
 46007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46009 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46011 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46012 ;;Total ram usage:        3 bytes
 46013 ;; Hardware stack levels used:    1
 46014 ;; Hardware stack levels required when called:    2
 46015 ;; This function calls:
 46016 ;;		i2___awmod
 46017 ;;		i2_rand
 46018 ;; This function is called by:
 46019 ;;		_playArpeggio
 46020 ;; This function uses a non-reentrant model
 46021 ;;
 46022                           
 46023                           	psect	text143
 46024  007CF2                     __ptext143:
 46025                           	opt stack 0
 46026  007CF2                     i2_random_pitches_non_repeating:
 46027                           	opt stack 14
 46028                           
 46029                           ;arpeggio.c: 265: if(NUM_NOTES_PRESSED == 0){return;}
 46030                           
 46031                           ; BSR set to: 0
 46032                           ;incstack = 0
 46033  007CF2  0100               	movlb	0	; () banked
 46034  007CF4  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 46035  007CF6  B4D8               	btfsc	status,2,c
 46036  007CF8  0012               	return	
 46037                           
 46038                           ; BSR set to: 0
 46039                           ;arpeggio.c: 267: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++) {
 46040                           
 46041                           ; BSR set to: 0
 46042                           
 46043                           ; BSR set to: 0
 46044  007CFA  0E00               	movlw	0
 46045  007CFC  6E17               	movwf	i2random_pitches_non_repeating@i,c
 46046  007CFE  D034               	goto	i2l5285
 46047  007D00                     
 46048                           ; BSR set to: 0
 46049                           ;arpeggio.c: 268: unsigned char temp = ARPEGGIO_RANDOM[i];
 46050                           
 46051                           ; BSR set to: 0
 46052  007D00  5017               	movf	i2random_pitches_non_repeating@i,w,c
 46053  007D02  0D01               	mullw	1
 46054  007D04  0E8C               	movlw	low _ARPEGGIO_RANDOM
 46055  007D06  24F3               	addwf	prodl,w,c
 46056  007D08  6ED9               	movwf	fsr2l,c
 46057  007D0A  0E02               	movlw	high _ARPEGGIO_RANDOM
 46058  007D0C  20F4               	addwfc	prodh,w,c
 46059  007D0E  6EDA               	movwf	fsr2h,c
 46060  007D10  50DF               	movf	indf2,w,c
 46061  007D12  6E15               	movwf	i2random_pitches_non_repeating@temp,c
 46062                           
 46063                           ; BSR set to: 0
 46064                           ;arpeggio.c: 269: unsigned char randomIndex = rand() % NUM_NOTES_PRESSED;
 46065  007D14  ECF2  F046         	call	i2_rand	;wreg free
 46066  007D18  C00D  F00F         	movff	?i2_rand,i2___awmod@dividend
 46067  007D1C  C00E  F010         	movff	?i2_rand+1,i2___awmod@dividend+1
 46068  007D20  C0E5  F011         	movff	_NUM_NOTES_PRESSED,i2___awmod@divisor
 46069  007D24  6A12               	clrf	i2___awmod@divisor+1,c
 46070  007D26  EC04  F043         	call	i2___awmod	;wreg free
 46071  007D2A  500F               	movf	?i2___awmod,w,c
 46072  007D2C  6E16               	movwf	i2random_pitches_non_repeating@randomIndex,c
 46073                           
 46074                           ;arpeggio.c: 270: ARPEGGIO_RANDOM[i] = ARPEGGIO_RANDOM[randomIndex];
 46075  007D2E  5016               	movf	i2random_pitches_non_repeating@randomIndex,w,c
 46076  007D30  0D01               	mullw	1
 46077  007D32  0E8C               	movlw	low _ARPEGGIO_RANDOM
 46078  007D34  24F3               	addwf	prodl,w,c
 46079  007D36  6ED9               	movwf	fsr2l,c
 46080  007D38  0E02               	movlw	high _ARPEGGIO_RANDOM
 46081  007D3A  20F4               	addwfc	prodh,w,c
 46082  007D3C  6EDA               	movwf	fsr2h,c
 46083  007D3E  5017               	movf	i2random_pitches_non_repeating@i,w,c
 46084  007D40  0D01               	mullw	1
 46085  007D42  0E8C               	movlw	low _ARPEGGIO_RANDOM
 46086  007D44  24F3               	addwf	prodl,w,c
 46087  007D46  6EE1               	movwf	fsr1l,c
 46088  007D48  0E02               	movlw	high _ARPEGGIO_RANDOM
 46089  007D4A  20F4               	addwfc	prodh,w,c
 46090  007D4C  6EE2               	movwf	fsr1h,c
 46091  007D4E  CFDF FFE7          	movff	indf2,indf1
 46092                           
 46093                           ;arpeggio.c: 271: ARPEGGIO_RANDOM[randomIndex] = temp;
 46094  007D52  5016               	movf	i2random_pitches_non_repeating@randomIndex,w,c
 46095  007D54  0D01               	mullw	1
 46096  007D56  0E8C               	movlw	low _ARPEGGIO_RANDOM
 46097  007D58  24F3               	addwf	prodl,w,c
 46098  007D5A  6ED9               	movwf	fsr2l,c
 46099  007D5C  0E02               	movlw	high _ARPEGGIO_RANDOM
 46100  007D5E  20F4               	addwfc	prodh,w,c
 46101  007D60  6EDA               	movwf	fsr2h,c
 46102  007D62  C015  FFDF         	movff	i2random_pitches_non_repeating@temp,indf2
 46103  007D66  2A17               	incf	i2random_pitches_non_repeating@i,f,c
 46104  007D68                     i2l5285:
 46105  007D68  0100               	movlb	0	; () banked
 46106  007D6A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 46107  007D6C  5C17               	subwf	i2random_pitches_non_repeating@i,w,c
 46108  007D6E  B0D8               	btfsc	status,0,c
 46109  007D70  0012               	return	
 46110  007D72  D7C6               	goto	i2l5286
 46111  007D74                     __end_ofi2_random_pitches_non_repeating:
 46112                           	opt stack 0
 46113                           pclatu	equ	0xFFB
 46114                           pclath	equ	0xFFA
 46115                           tblptru	equ	0xFF8
 46116                           tblptrh	equ	0xFF7
 46117                           tblptrl	equ	0xFF6
 46118                           tablat	equ	0xFF5
 46119                           prodh	equ	0xFF4
 46120                           prodl	equ	0xFF3
 46121                           intcon	equ	0xFF2
 46122                           intcon2	equ	0xFF1
 46123                           postinc0	equ	0xFEE
 46124                           fsr0h	equ	0xFEA
 46125                           fsr0l	equ	0xFE9
 46126                           wreg	equ	0xFE8
 46127                           indf1	equ	0xFE7
 46128                           postinc1	equ	0xFE6
 46129                           postdec1	equ	0xFE5
 46130                           fsr1h	equ	0xFE2
 46131                           fsr1l	equ	0xFE1
 46132                           indf2	equ	0xFDF
 46133                           postinc2	equ	0xFDE
 46134                           postdec2	equ	0xFDD
 46135                           plusw2	equ	0xFDB
 46136                           fsr2h	equ	0xFDA
 46137                           fsr2l	equ	0xFD9
 46138                           status	equ	0xFD8
 46139                           
 46140 ;; *************** function i2_random_pitches *****************
 46141 ;; Defined at:
 46142 ;;		line 252 in file "arpeggio.c"
 46143 ;; Parameters:    Size  Location     Type
 46144 ;;		None
 46145 ;; Auto vars:     Size  Location     Type
 46146 ;;  random_pitch    1   21[COMRAM] unsigned char 
 46147 ;;  random_pitch    1   20[COMRAM] unsigned char 
 46148 ;; Return value:  Size  Location     Type
 46149 ;;                  1    wreg      void 
 46150 ;; Registers used:
 46151 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 46152 ;; Tracked objects:
 46153 ;;		On entry : 0/0
 46154 ;;		On exit  : 0/0
 46155 ;;		Unchanged: 0/0
 46156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46158 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46160 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46161 ;;Total ram usage:        2 bytes
 46162 ;; Hardware stack levels used:    1
 46163 ;; Hardware stack levels required when called:    2
 46164 ;; This function calls:
 46165 ;;		i2___awmod
 46166 ;;		i2_rand
 46167 ;; This function is called by:
 46168 ;;		_playArpeggio
 46169 ;; This function uses a non-reentrant model
 46170 ;;
 46171                           
 46172                           	psect	text144
 46173  008C32                     __ptext144:
 46174                           	opt stack 0
 46175  008C32                     i2_random_pitches:
 46176                           	opt stack 14
 46177                           
 46178                           ;arpeggio.c: 254: if(NUM_NOTES_PRESSED == 0){return;}
 46179                           
 46180                           ; BSR set to: 0
 46181                           ;incstack = 0
 46182  008C32  0100               	movlb	0	; () banked
 46183  008C34  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 46184  008C36  B4D8               	btfsc	status,2,c
 46185  008C38  0012               	return	
 46186                           
 46187                           ; BSR set to: 0
 46188                           ;arpeggio.c: 256: for (unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 46189                           
 46190                           ; BSR set to: 0
 46191                           
 46192                           ; BSR set to: 0
 46193  008C3A  0E00               	movlw	0
 46194  008C3C  6E16               	movwf	i2random_pitches@i,c
 46195  008C3E  D020               	goto	i2l5278
 46196  008C40                     
 46197                           ; BSR set to: 0
 46198                           ;arpeggio.c: 257: unsigned char random_array_index = rand() % (NUM_NOTES_PRESSED);
 46199                           
 46200                           ; BSR set to: 0
 46201  008C40  ECF2  F046         	call	i2_rand	;wreg free
 46202  008C44  C00D  F00F         	movff	?i2_rand,i2___awmod@dividend
 46203  008C48  C00E  F010         	movff	?i2_rand+1,i2___awmod@dividend+1
 46204  008C4C  C0E5  F011         	movff	_NUM_NOTES_PRESSED,i2___awmod@divisor
 46205  008C50  6A12               	clrf	i2___awmod@divisor+1,c
 46206  008C52  EC04  F043         	call	i2___awmod	;wreg free
 46207  008C56  500F               	movf	?i2___awmod,w,c
 46208  008C58  6E15               	movwf	i2random_pitches@random_array_index,c
 46209                           
 46210                           ;arpeggio.c: 258: ARPEGGIO_RANDOM[i] = ARPEGGIO[random_array_index];
 46211  008C5A  5015               	movf	i2random_pitches@random_array_index,w,c
 46212  008C5C  0D01               	mullw	1
 46213  008C5E  0E72               	movlw	low _ARPEGGIO
 46214  008C60  24F3               	addwf	prodl,w,c
 46215  008C62  6ED9               	movwf	fsr2l,c
 46216  008C64  0E01               	movlw	high _ARPEGGIO
 46217  008C66  20F4               	addwfc	prodh,w,c
 46218  008C68  6EDA               	movwf	fsr2h,c
 46219  008C6A  5016               	movf	i2random_pitches@i,w,c
 46220  008C6C  0D01               	mullw	1
 46221  008C6E  0E8C               	movlw	low _ARPEGGIO_RANDOM
 46222  008C70  24F3               	addwf	prodl,w,c
 46223  008C72  6EE1               	movwf	fsr1l,c
 46224  008C74  0E02               	movlw	high _ARPEGGIO_RANDOM
 46225  008C76  20F4               	addwfc	prodh,w,c
 46226  008C78  6EE2               	movwf	fsr1h,c
 46227  008C7A  CFDF FFE7          	movff	indf2,indf1
 46228  008C7E  2A16               	incf	i2random_pitches@i,f,c
 46229  008C80                     i2l5278:
 46230  008C80  0100               	movlb	0	; () banked
 46231  008C82  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 46232  008C84  5C16               	subwf	i2random_pitches@i,w,c
 46233  008C86  B0D8               	btfsc	status,0,c
 46234  008C88  0012               	return	
 46235  008C8A  D7DA               	goto	i2l5279
 46236  008C8C                     __end_ofi2_random_pitches:
 46237                           	opt stack 0
 46238                           pclatu	equ	0xFFB
 46239                           pclath	equ	0xFFA
 46240                           tblptru	equ	0xFF8
 46241                           tblptrh	equ	0xFF7
 46242                           tblptrl	equ	0xFF6
 46243                           tablat	equ	0xFF5
 46244                           prodh	equ	0xFF4
 46245                           prodl	equ	0xFF3
 46246                           intcon	equ	0xFF2
 46247                           intcon2	equ	0xFF1
 46248                           postinc0	equ	0xFEE
 46249                           fsr0h	equ	0xFEA
 46250                           fsr0l	equ	0xFE9
 46251                           wreg	equ	0xFE8
 46252                           indf1	equ	0xFE7
 46253                           postinc1	equ	0xFE6
 46254                           postdec1	equ	0xFE5
 46255                           fsr1h	equ	0xFE2
 46256                           fsr1l	equ	0xFE1
 46257                           indf2	equ	0xFDF
 46258                           postinc2	equ	0xFDE
 46259                           postdec2	equ	0xFDD
 46260                           plusw2	equ	0xFDB
 46261                           fsr2h	equ	0xFDA
 46262                           fsr2l	equ	0xFD9
 46263                           status	equ	0xFD8
 46264                           
 46265 ;; *************** function i2_rand *****************
 46266 ;; Defined at:
 46267 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 46268 ;; Parameters:    Size  Location     Type
 46269 ;;		None
 46270 ;; Auto vars:     Size  Location     Type
 46271 ;;		None
 46272 ;; Return value:  Size  Location     Type
 46273 ;;                  2   12[COMRAM] int 
 46274 ;; Registers used:
 46275 ;;		wreg, status,2, status,0, cstack
 46276 ;; Tracked objects:
 46277 ;;		On entry : 0/0
 46278 ;;		On exit  : 0/0
 46279 ;;		Unchanged: 0/0
 46280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46281 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46284 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46285 ;;Total ram usage:        2 bytes
 46286 ;; Hardware stack levels used:    1
 46287 ;; Hardware stack levels required when called:    1
 46288 ;; This function calls:
 46289 ;;		i2___lmul
 46290 ;; This function is called by:
 46291 ;;		_playArpeggio
 46292 ;;		i2_random_pitches
 46293 ;;		i2_random_pitches_non_repeating
 46294 ;; This function uses a non-reentrant model
 46295 ;;
 46296                           
 46297                           	psect	text145
 46298  008DE4                     __ptext145:
 46299                           	opt stack 0
 46300  008DE4                     i2_rand:
 46301                           	opt stack 14
 46302                           
 46303                           ; BSR set to: 0
 46304                           ;incstack = 0
 46305  008DE4  C1E7  F001         	movff	_randx,i2___lmul@multiplier
 46306  008DE8  C1E8  F002         	movff	_randx+1,i2___lmul@multiplier+1
 46307  008DEC  C1E9  F003         	movff	_randx+2,i2___lmul@multiplier+2
 46308  008DF0  C1EA  F004         	movff	_randx+3,i2___lmul@multiplier+3
 46309  008DF4  0E6D               	movlw	109
 46310  008DF6  6E05               	movwf	i2___lmul@multiplicand,c
 46311  008DF8  0E4E               	movlw	78
 46312  008DFA  6E06               	movwf	i2___lmul@multiplicand+1,c
 46313  008DFC  0EC6               	movlw	198
 46314  008DFE  6E07               	movwf	i2___lmul@multiplicand+2,c
 46315  008E00  0E41               	movlw	65
 46316  008E02  6E08               	movwf	i2___lmul@multiplicand+3,c
 46317  008E04  EC9D  F046         	call	i2___lmul	;wreg free
 46318  008E08  C001  F1E7         	movff	?i2___lmul,_randx
 46319  008E0C  C002  F1E8         	movff	?i2___lmul+1,_randx+1
 46320  008E10  C003  F1E9         	movff	?i2___lmul+2,_randx+2
 46321  008E14  C004  F1EA         	movff	?i2___lmul+3,_randx+3
 46322  008E18  0E39               	movlw	57
 46323  008E1A  0101               	movlb	1	; () banked
 46324  008E1C  27E7               	addwf	_randx& (0+255),f,b
 46325  008E1E  0E30               	movlw	48
 46326  008E20  23E8               	addwfc	(_randx+1)& (0+255),f,b
 46327  008E22  0E00               	movlw	0
 46328  008E24  23E9               	addwfc	(_randx+2)& (0+255),f,b
 46329  008E26  0E00               	movlw	0
 46330  008E28  23EA               	addwfc	(_randx+3)& (0+255),f,b
 46331                           
 46332                           ; BSR set to: 1
 46333  008E2A  0EFF               	movlw	255
 46334  008E2C  15E9               	andwf	(_randx+2)& (0+255),w,b
 46335  008E2E  6E0D               	movwf	?i2_rand,c
 46336  008E30  0E7F               	movlw	127
 46337  008E32  15EA               	andwf	(_randx+3)& (0+255),w,b
 46338  008E34  6E0E               	movwf	?i2_rand+1,c
 46339  008E36  0012               	return	
 46340  008E38                     __end_ofi2_rand:
 46341                           	opt stack 0
 46342                           pclatu	equ	0xFFB
 46343                           pclath	equ	0xFFA
 46344                           tblptru	equ	0xFF8
 46345                           tblptrh	equ	0xFF7
 46346                           tblptrl	equ	0xFF6
 46347                           tablat	equ	0xFF5
 46348                           prodh	equ	0xFF4
 46349                           prodl	equ	0xFF3
 46350                           intcon	equ	0xFF2
 46351                           intcon2	equ	0xFF1
 46352                           postinc0	equ	0xFEE
 46353                           fsr0h	equ	0xFEA
 46354                           fsr0l	equ	0xFE9
 46355                           wreg	equ	0xFE8
 46356                           indf1	equ	0xFE7
 46357                           postinc1	equ	0xFE6
 46358                           postdec1	equ	0xFE5
 46359                           fsr1h	equ	0xFE2
 46360                           fsr1l	equ	0xFE1
 46361                           indf2	equ	0xFDF
 46362                           postinc2	equ	0xFDE
 46363                           postdec2	equ	0xFDD
 46364                           plusw2	equ	0xFDB
 46365                           fsr2h	equ	0xFDA
 46366                           fsr2l	equ	0xFD9
 46367                           status	equ	0xFD8
 46368                           
 46369 ;; *************** function i2___lmul *****************
 46370 ;; Defined at:
 46371 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 46372 ;; Parameters:    Size  Location     Type
 46373 ;;  multiplier      4    0[COMRAM] unsigned long 
 46374 ;;  multiplicand    4    4[COMRAM] unsigned long 
 46375 ;; Auto vars:     Size  Location     Type
 46376 ;;  __lmul          4    8[COMRAM] unsigned long 
 46377 ;; Return value:  Size  Location     Type
 46378 ;;                  4    0[COMRAM] unsigned long 
 46379 ;; Registers used:
 46380 ;;		wreg, status,2, status,0
 46381 ;; Tracked objects:
 46382 ;;		On entry : 0/0
 46383 ;;		On exit  : 0/0
 46384 ;;		Unchanged: 0/0
 46385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46386 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46387 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46389 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46390 ;;Total ram usage:       12 bytes
 46391 ;; Hardware stack levels used:    1
 46392 ;; This function calls:
 46393 ;;		Nothing
 46394 ;; This function is called by:
 46395 ;;		i2_rand
 46396 ;; This function uses a non-reentrant model
 46397 ;;
 46398                           
 46399                           	psect	text146
 46400  008D3A                     __ptext146:
 46401                           	opt stack 0
 46402  008D3A                     i2___lmul:
 46403                           	opt stack 14
 46404                           
 46405                           ; BSR set to: 1
 46406                           ;incstack = 0
 46407  008D3A  0E00               	movlw	0
 46408  008D3C  6E09               	movwf	i2___lmul@product,c
 46409  008D3E  0E00               	movlw	0
 46410  008D40  6E0A               	movwf	i2___lmul@product+1,c
 46411  008D42  0E00               	movlw	0
 46412  008D44  6E0B               	movwf	i2___lmul@product+2,c
 46413  008D46  0E00               	movlw	0
 46414  008D48  6E0C               	movwf	i2___lmul@product+3,c
 46415  008D4A  A001               	btfss	i2___lmul@multiplier,0,c
 46416  008D4C  D008               	goto	i2l5440
 46417  008D4E  5005               	movf	i2___lmul@multiplicand,w,c
 46418  008D50  2609               	addwf	i2___lmul@product,f,c
 46419  008D52  5006               	movf	i2___lmul@multiplicand+1,w,c
 46420  008D54  220A               	addwfc	i2___lmul@product+1,f,c
 46421  008D56  5007               	movf	i2___lmul@multiplicand+2,w,c
 46422  008D58  220B               	addwfc	i2___lmul@product+2,f,c
 46423  008D5A  5008               	movf	i2___lmul@multiplicand+3,w,c
 46424  008D5C  220C               	addwfc	i2___lmul@product+3,f,c
 46425  008D5E                     i2l5440:
 46426  008D5E  90D8               	bcf	status,0,c
 46427  008D60  3605               	rlcf	i2___lmul@multiplicand,f,c
 46428  008D62  3606               	rlcf	i2___lmul@multiplicand+1,f,c
 46429  008D64  3607               	rlcf	i2___lmul@multiplicand+2,f,c
 46430  008D66  3608               	rlcf	i2___lmul@multiplicand+3,f,c
 46431  008D68  90D8               	bcf	status,0,c
 46432  008D6A  3204               	rrcf	i2___lmul@multiplier+3,f,c
 46433  008D6C  3203               	rrcf	i2___lmul@multiplier+2,f,c
 46434  008D6E  3202               	rrcf	i2___lmul@multiplier+1,f,c
 46435  008D70  3201               	rrcf	i2___lmul@multiplier,f,c
 46436  008D72  5001               	movf	i2___lmul@multiplier,w,c
 46437  008D74  1002               	iorwf	i2___lmul@multiplier+1,w,c
 46438  008D76  1003               	iorwf	i2___lmul@multiplier+2,w,c
 46439  008D78  1004               	iorwf	i2___lmul@multiplier+3,w,c
 46440  008D7A  A4D8               	btfss	status,2,c
 46441  008D7C  D7E6               	goto	i2l5439
 46442  008D7E  C009  F001         	movff	i2___lmul@product,?i2___lmul
 46443  008D82  C00A  F002         	movff	i2___lmul@product+1,?i2___lmul+1
 46444  008D86  C00B  F003         	movff	i2___lmul@product+2,?i2___lmul+2
 46445  008D8A  C00C  F004         	movff	i2___lmul@product+3,?i2___lmul+3
 46446  008D8E  0012               	return		;funcret
 46447  008D90                     __end_ofi2___lmul:
 46448                           	opt stack 0
 46449                           pclatu	equ	0xFFB
 46450                           pclath	equ	0xFFA
 46451                           tblptru	equ	0xFF8
 46452                           tblptrh	equ	0xFF7
 46453                           tblptrl	equ	0xFF6
 46454                           tablat	equ	0xFF5
 46455                           prodh	equ	0xFF4
 46456                           prodl	equ	0xFF3
 46457                           intcon	equ	0xFF2
 46458                           intcon2	equ	0xFF1
 46459                           postinc0	equ	0xFEE
 46460                           fsr0h	equ	0xFEA
 46461                           fsr0l	equ	0xFE9
 46462                           wreg	equ	0xFE8
 46463                           indf1	equ	0xFE7
 46464                           postinc1	equ	0xFE6
 46465                           postdec1	equ	0xFE5
 46466                           fsr1h	equ	0xFE2
 46467                           fsr1l	equ	0xFE1
 46468                           indf2	equ	0xFDF
 46469                           postinc2	equ	0xFDE
 46470                           postdec2	equ	0xFDD
 46471                           plusw2	equ	0xFDB
 46472                           fsr2h	equ	0xFDA
 46473                           fsr2l	equ	0xFD9
 46474                           status	equ	0xFD8
 46475                           
 46476 ;; *************** function i2_noteOn *****************
 46477 ;; Defined at:
 46478 ;;		line 83 in file "midi.c"
 46479 ;; Parameters:    Size  Location     Type
 46480 ;;  channel         1    wreg     unsigned char 
 46481 ;;  pitch           1   14[COMRAM] unsigned char 
 46482 ;;  velocity        1   15[COMRAM] unsigned char 
 46483 ;; Auto vars:     Size  Location     Type
 46484 ;;  channel         1   16[COMRAM] unsigned char 
 46485 ;; Return value:  Size  Location     Type
 46486 ;;                  1    wreg      void 
 46487 ;; Registers used:
 46488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 46489 ;; Tracked objects:
 46490 ;;		On entry : 0/0
 46491 ;;		On exit  : 0/0
 46492 ;;		Unchanged: 0/0
 46493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46494 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46495 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46497 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46498 ;;Total ram usage:        3 bytes
 46499 ;; Hardware stack levels used:    1
 46500 ;; Hardware stack levels required when called:    2
 46501 ;; This function calls:
 46502 ;;		i2_noteOff
 46503 ;;		i2_sendOut
 46504 ;;		i2_sendUSB
 46505 ;; This function is called by:
 46506 ;;		_playArpeggio
 46507 ;; This function uses a non-reentrant model
 46508 ;;
 46509                           
 46510                           	psect	text147
 46511  008B7C                     __ptext147:
 46512                           	opt stack 0
 46513  008B7C                     i2_noteOn:
 46514                           	opt stack 14
 46515                           
 46516                           ;incstack = 0
 46517                           ;i2noteOn@channel stored from wreg
 46518  008B7C  6E11               	movwf	i2noteOn@channel,c
 46519                           
 46520                           ;midi.c: 85: noteNumber = pitch + semitone + ((octave + 1) * 12);
 46521  008B7E  0100               	movlb	0	; () banked
 46522  008B80  29FC               	incf	_octave& (0+255),w,b
 46523  008B82  0D0C               	mullw	12
 46524  008B84  50F3               	movf	prodl,w,c
 46525  008B86  240F               	addwf	i2noteOn@pitch,w,c
 46526  008B88  25F3               	addwf	_semitone& (0+255),w,b
 46527  008B8A  6FF4               	movwf	_noteNumber& (0+255),b
 46528                           
 46529                           ; BSR set to: 0
 46530                           ;midi.c: 86: statusByte = channel | note_on;
 46531  008B8C  5011               	movf	i2noteOn@channel,w,c
 46532  008B8E  0990               	iorlw	144
 46533  008B90  6FF5               	movwf	_statusByte& (0+255),b
 46534                           
 46535                           ; BSR set to: 0
 46536                           ;midi.c: 89: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 46537  008B92  5010               	movf	i2noteOn@velocity,w,c
 46538  008B94  A4D8               	btfss	status,2,c
 46539  008B96  D008               	goto	i2l451
 46540                           
 46541                           ; BSR set to: 0
 46542  008B98  C00F  F00C         	movff	i2noteOn@pitch,i2noteOff@pitch
 46543  008B9C  C010  F00D         	movff	i2noteOn@velocity,i2noteOff@velocity
 46544  008BA0  5011               	movf	i2noteOn@channel,w,c
 46545  008BA2  ECD1  F048         	call	i2_noteOff
 46546  008BA6  0012               	return	
 46547  008BA8                     i2l451:
 46548                           
 46549                           ;midi.c: 92: sendUSB(statusByte, noteNumber, velocity);
 46550  008BA8  C0F4  F001         	movff	_noteNumber,i2sendUSB@message2
 46551  008BAC  C010  F002         	movff	i2noteOn@velocity,i2sendUSB@message3
 46552  008BB0  0100               	movlb	0	; () banked
 46553  008BB2  51F5               	movf	_statusByte& (0+255),w,b
 46554  008BB4  ECAD  F03A         	call	i2_sendUSB
 46555                           
 46556                           ;midi.c: 95: if(velocity > 0) {
 46557  008BB8  5010               	movf	i2noteOn@velocity,w,c
 46558  008BBA  B4D8               	btfsc	status,2,c
 46559  008BBC  D00B               	goto	i2l453
 46560                           
 46561                           ;midi.c: 96: sendOut(statusByte);
 46562  008BBE  0100               	movlb	0	; () banked
 46563  008BC0  51F5               	movf	_statusByte& (0+255),w,b
 46564  008BC2  ECDC  F04A         	call	i2_sendOut
 46565                           
 46566                           ;midi.c: 97: sendOut(noteNumber);
 46567  008BC6  0100               	movlb	0	; () banked
 46568  008BC8  51F4               	movf	_noteNumber& (0+255),w,b
 46569  008BCA  ECDC  F04A         	call	i2_sendOut
 46570                           
 46571                           ;midi.c: 98: sendOut(velocity);
 46572  008BCE  5010               	movf	i2noteOn@velocity,w,c
 46573  008BD0  ECDC  F04A         	call	i2_sendOut
 46574  008BD4                     i2l453:
 46575                           
 46576                           ;midi.c: 99: }
 46577                           ;midi.c: 101: note_off_was_sent = 0;
 46578  008BD4  9233               	bcf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 46579  008BD6  0012               	return		;funcret
 46580  008BD8                     __end_ofi2_noteOn:
 46581                           	opt stack 0
 46582                           pclatu	equ	0xFFB
 46583                           pclath	equ	0xFFA
 46584                           tblptru	equ	0xFF8
 46585                           tblptrh	equ	0xFF7
 46586                           tblptrl	equ	0xFF6
 46587                           tablat	equ	0xFF5
 46588                           prodh	equ	0xFF4
 46589                           prodl	equ	0xFF3
 46590                           intcon	equ	0xFF2
 46591                           intcon2	equ	0xFF1
 46592                           postinc0	equ	0xFEE
 46593                           fsr0h	equ	0xFEA
 46594                           fsr0l	equ	0xFE9
 46595                           wreg	equ	0xFE8
 46596                           indf1	equ	0xFE7
 46597                           postinc1	equ	0xFE6
 46598                           postdec1	equ	0xFE5
 46599                           fsr1h	equ	0xFE2
 46600                           fsr1l	equ	0xFE1
 46601                           indf2	equ	0xFDF
 46602                           postinc2	equ	0xFDE
 46603                           postdec2	equ	0xFDD
 46604                           plusw2	equ	0xFDB
 46605                           fsr2h	equ	0xFDA
 46606                           fsr2l	equ	0xFD9
 46607                           status	equ	0xFD8
 46608                           
 46609 ;; *************** function i2_noteOff *****************
 46610 ;; Defined at:
 46611 ;;		line 66 in file "midi.c"
 46612 ;; Parameters:    Size  Location     Type
 46613 ;;  channel         1    wreg     unsigned char 
 46614 ;;  pitch           1   11[COMRAM] unsigned char 
 46615 ;;  velocity        1   12[COMRAM] unsigned char 
 46616 ;; Auto vars:     Size  Location     Type
 46617 ;;  channel         1   13[COMRAM] unsigned char 
 46618 ;; Return value:  Size  Location     Type
 46619 ;;                  1    wreg      void 
 46620 ;; Registers used:
 46621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 46622 ;; Tracked objects:
 46623 ;;		On entry : 0/0
 46624 ;;		On exit  : 0/0
 46625 ;;		Unchanged: 0/0
 46626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46627 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46628 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46630 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46631 ;;Total ram usage:        3 bytes
 46632 ;; Hardware stack levels used:    1
 46633 ;; Hardware stack levels required when called:    1
 46634 ;; This function calls:
 46635 ;;		i2_sendOut
 46636 ;;		i2_sendUSB
 46637 ;; This function is called by:
 46638 ;;		_playArpeggio
 46639 ;;		i2_noteOn
 46640 ;; This function uses a non-reentrant model
 46641 ;;
 46642                           
 46643                           	psect	text148
 46644  0091A2                     __ptext148:
 46645                           	opt stack 0
 46646  0091A2                     i2_noteOff:
 46647                           	opt stack 14
 46648                           
 46649                           ;incstack = 0
 46650                           ;i2noteOff@channel stored from wreg
 46651  0091A2  6E0E               	movwf	i2noteOff@channel,c
 46652                           
 46653                           ;midi.c: 68: noteNumber = pitch + semitone + ((octave + 1)* 12);
 46654  0091A4  0100               	movlb	0	; () banked
 46655  0091A6  29FC               	incf	_octave& (0+255),w,b
 46656  0091A8  0D0C               	mullw	12
 46657  0091AA  50F3               	movf	prodl,w,c
 46658  0091AC  240C               	addwf	i2noteOff@pitch,w,c
 46659  0091AE  25F3               	addwf	_semitone& (0+255),w,b
 46660  0091B0  6FF4               	movwf	_noteNumber& (0+255),b
 46661                           
 46662                           ; BSR set to: 0
 46663                           ;midi.c: 69: statusByte = channel | note_off;
 46664  0091B2  500E               	movf	i2noteOff@channel,w,c
 46665  0091B4  0980               	iorlw	128
 46666  0091B6  6FF5               	movwf	_statusByte& (0+255),b
 46667                           
 46668                           ; BSR set to: 0
 46669                           ;midi.c: 73: sendUSB(statusByte, noteNumber, velocity);
 46670  0091B8  C0F4  F001         	movff	_noteNumber,i2sendUSB@message2
 46671  0091BC  C00D  F002         	movff	i2noteOff@velocity,i2sendUSB@message3
 46672  0091C0  51F5               	movf	_statusByte& (0+255),w,b
 46673  0091C2  ECAD  F03A         	call	i2_sendUSB
 46674                           
 46675                           ;midi.c: 76: sendOut(statusByte);
 46676  0091C6  0100               	movlb	0	; () banked
 46677  0091C8  51F5               	movf	_statusByte& (0+255),w,b
 46678  0091CA  ECDC  F04A         	call	i2_sendOut
 46679                           
 46680                           ;midi.c: 77: sendOut(noteNumber);
 46681  0091CE  0100               	movlb	0	; () banked
 46682  0091D0  51F4               	movf	_noteNumber& (0+255),w,b
 46683  0091D2  ECDC  F04A         	call	i2_sendOut
 46684                           
 46685                           ;midi.c: 78: sendOut(velocity);
 46686  0091D6  500D               	movf	i2noteOff@velocity,w,c
 46687  0091D8  ECDC  F04A         	call	i2_sendOut
 46688  0091DC  0012               	return		;funcret
 46689  0091DE                     __end_ofi2_noteOff:
 46690                           	opt stack 0
 46691                           pclatu	equ	0xFFB
 46692                           pclath	equ	0xFFA
 46693                           tblptru	equ	0xFF8
 46694                           tblptrh	equ	0xFF7
 46695                           tblptrl	equ	0xFF6
 46696                           tablat	equ	0xFF5
 46697                           prodh	equ	0xFF4
 46698                           prodl	equ	0xFF3
 46699                           intcon	equ	0xFF2
 46700                           intcon2	equ	0xFF1
 46701                           postinc0	equ	0xFEE
 46702                           fsr0h	equ	0xFEA
 46703                           fsr0l	equ	0xFE9
 46704                           wreg	equ	0xFE8
 46705                           indf1	equ	0xFE7
 46706                           postinc1	equ	0xFE6
 46707                           postdec1	equ	0xFE5
 46708                           fsr1h	equ	0xFE2
 46709                           fsr1l	equ	0xFE1
 46710                           indf2	equ	0xFDF
 46711                           postinc2	equ	0xFDE
 46712                           postdec2	equ	0xFDD
 46713                           plusw2	equ	0xFDB
 46714                           fsr2h	equ	0xFDA
 46715                           fsr2l	equ	0xFD9
 46716                           status	equ	0xFD8
 46717                           
 46718 ;; *************** function i2_sendUSB *****************
 46719 ;; Defined at:
 46720 ;;		line 32 in file "midi.c"
 46721 ;; Parameters:    Size  Location     Type
 46722 ;;  message1        1    wreg     unsigned char 
 46723 ;;  message2        1    0[COMRAM] unsigned char 
 46724 ;;  message3        1    1[COMRAM] unsigned char 
 46725 ;; Auto vars:     Size  Location     Type
 46726 ;;  message1        1    8[COMRAM] unsigned char 
 46727 ;;  sendUSB         3    5[COMRAM] unsigned char [3]
 46728 ;;  sendUSB         1   10[COMRAM] unsigned char 
 46729 ;;  sendUSB         1    9[COMRAM] unsigned char 
 46730 ;; Return value:  Size  Location     Type
 46731 ;;                  1    wreg      void 
 46732 ;; Registers used:
 46733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 46734 ;; Tracked objects:
 46735 ;;		On entry : 0/0
 46736 ;;		On exit  : 0/0
 46737 ;;		Unchanged: 0/0
 46738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46739 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46740 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46741 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46742 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46743 ;;Total ram usage:       11 bytes
 46744 ;; Hardware stack levels used:    1
 46745 ;; This function calls:
 46746 ;;		Nothing
 46747 ;; This function is called by:
 46748 ;;		i2_noteOff
 46749 ;;		i2_noteOn
 46750 ;; This function uses a non-reentrant model
 46751 ;;
 46752                           
 46753                           	psect	text149
 46754  00755A                     __ptext149:
 46755                           	opt stack 0
 46756  00755A                     i2_sendUSB:
 46757                           	opt stack 15
 46758                           
 46759                           ;incstack = 0
 46760                           ;i2sendUSB@message1 stored from wreg
 46761  00755A  6E09               	movwf	i2sendUSB@message1,c
 46762                           
 46763                           ;midi.c: 34: unsigned char midiMessage[3];
 46764                           ;midi.c: 36: midiMessage[0]=message1;
 46765  00755C  C009  F006         	movff	i2sendUSB@message1,i2sendUSB@midiMessage
 46766                           
 46767                           ;midi.c: 37: midiMessage[1]=message2;
 46768  007560  C001  F007         	movff	i2sendUSB@message2,i2sendUSB@midiMessage+1
 46769                           
 46770                           ;midi.c: 38: midiMessage[2]=message3;
 46771  007564  C002  F008         	movff	i2sendUSB@message3,i2sendUSB@midiMessage+2
 46772                           
 46773                           ;midi.c: 40: RA5 = 0;
 46774  007568  9A80               	bcf	3968,5,c	;volatile
 46775                           
 46776                           ;midi.c: 41: RB2 = 1;
 46777  00756A  8481               	bsf	3969,2,c	;volatile
 46778                           
 46779                           ;midi.c: 42: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46780  00756C  0E53               	movlw	83
 46781  00756E                     i2u4501_47:
 46782  00756E  2EE8               	decfsz	wreg,f,c
 46783  007570  D7FE               	bra	i2u4501_47
 46784  007572  F000               	nop	
 46785                           
 46786                           ;midi.c: 44: for(unsigned char i=0;i<3;i++){
 46787  007574  0E00               	movlw	0
 46788  007576  6E0A               	movwf	i2sendUSB@i,c
 46789  007578                     i2l19399:
 46790  007578  0E02               	movlw	2
 46791  00757A  640A               	cpfsgt	i2sendUSB@i,c
 46792  00757C  D001               	goto	i2l441
 46793  00757E  D034               	goto	i2u3002_40
 46794  007580                     i2l441:
 46795                           
 46796                           ;midi.c: 45: for(unsigned char ii=0;ii<8;ii++){
 46797  007580  0E00               	movlw	0
 46798  007582  6E0B               	movwf	i2sendUSB@ii,c
 46799  007584                     i2l19405:
 46800  007584  0E07               	movlw	7
 46801  007586  640B               	cpfsgt	i2sendUSB@ii,c
 46802  007588  D001               	goto	i2l443
 46803  00758A  D02C               	goto	i2u3001_40
 46804  00758C                     i2l443:
 46805                           
 46806                           ;midi.c: 48: RE2 = !!(midiMessage[i] & (1 << ii));
 46807  00758C  500A               	movf	i2sendUSB@i,w,c
 46808  00758E  0D01               	mullw	1
 46809  007590  0E06               	movlw	low i2sendUSB@midiMessage
 46810  007592  24F3               	addwf	prodl,w,c
 46811  007594  6ED9               	movwf	fsr2l,c
 46812  007596  0E00               	movlw	high i2sendUSB@midiMessage
 46813  007598  20F4               	addwfc	prodh,w,c
 46814  00759A  6EDA               	movwf	fsr2h,c
 46815  00759C  50DF               	movf	indf2,w,c
 46816  00759E  6E03               	movwf	??i2_sendUSB& (0+255),c
 46817  0075A0  C00B  F004         	movff	i2sendUSB@ii,??i2_sendUSB+1
 46818  0075A4  0E01               	movlw	1
 46819  0075A6  6E05               	movwf	(??i2_sendUSB+2)& (0+255),c
 46820  0075A8  2A04               	incf	??i2_sendUSB+1,f,c
 46821  0075AA  D002               	goto	i2u2998_44
 46822  0075AC                     i2u2998_45:
 46823  0075AC  90D8               	bcf	status,0,c
 46824  0075AE  3605               	rlcf	??i2_sendUSB+2,f,c
 46825  0075B0                     i2u2998_44:
 46826  0075B0  2E04               	decfsz	??i2_sendUSB+1,f,c
 46827  0075B2  D7FC               	goto	i2u2998_45
 46828  0075B4  5005               	movf	??i2_sendUSB+2,w,c
 46829  0075B6  1403               	andwf	??i2_sendUSB,w,c
 46830  0075B8  0900               	iorlw	0
 46831  0075BA  B4D8               	btfsc	status,2,c
 46832  0075BC  D002               	goto	i2u2999_40
 46833  0075BE  8484               	bsf	3972,2,c	;volatile
 46834  0075C0  D001               	goto	i2u3000_45
 46835  0075C2                     i2u2999_40:
 46836  0075C2  9484               	bcf	3972,2,c	;volatile
 46837  0075C4                     i2u3000_45:
 46838                           
 46839                           ;midi.c: 50: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46840  0075C4  0E53               	movlw	83
 46841  0075C6                     i2u4502_47:
 46842  0075C6  2EE8               	decfsz	wreg,f,c
 46843  0075C8  D7FE               	bra	i2u4502_47
 46844  0075CA  F000               	nop	
 46845                           
 46846                           ;midi.c: 52: RA5 = 1;
 46847  0075CC  8A80               	bsf	3968,5,c	;volatile
 46848                           
 46849                           ;midi.c: 53: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46850  0075CE  0E53               	movlw	83
 46851  0075D0                     i2u4503_47:
 46852  0075D0  2EE8               	decfsz	wreg,f,c
 46853  0075D2  D7FE               	bra	i2u4503_47
 46854  0075D4  F000               	nop	
 46855                           
 46856                           ;midi.c: 55: RA5 = 0;
 46857  0075D6  9A80               	bcf	3968,5,c	;volatile
 46858                           
 46859                           ;midi.c: 56: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46860  0075D8  0E53               	movlw	83
 46861  0075DA                     i2u4504_47:
 46862  0075DA  2EE8               	decfsz	wreg,f,c
 46863  0075DC  D7FE               	bra	i2u4504_47
 46864  0075DE  F000               	nop	
 46865  0075E0  2A0B               	incf	i2sendUSB@ii,f,c
 46866  0075E2  D7D0               	goto	i2l19405
 46867  0075E4                     i2u3001_40:
 46868  0075E4  2A0A               	incf	i2sendUSB@i,f,c
 46869  0075E6  D7C8               	goto	i2l19399
 46870  0075E8                     i2u3002_40:
 46871                           
 46872                           ;midi.c: 57: }
 46873                           ;midi.c: 58: }
 46874                           ;midi.c: 60: RB2 = 0;
 46875  0075E8  9481               	bcf	3969,2,c	;volatile
 46876                           
 46877                           ;midi.c: 61: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46878  0075EA  0E53               	movlw	83
 46879  0075EC                     i2u4505_47:
 46880  0075EC  2EE8               	decfsz	wreg,f,c
 46881  0075EE  D7FE               	bra	i2u4505_47
 46882  0075F0  F000               	nop	
 46883  0075F2  0012               	return		;funcret
 46884  0075F4                     __end_ofi2_sendUSB:
 46885                           	opt stack 0
 46886                           pclatu	equ	0xFFB
 46887                           pclath	equ	0xFFA
 46888                           tblptru	equ	0xFF8
 46889                           tblptrh	equ	0xFF7
 46890                           tblptrl	equ	0xFF6
 46891                           tablat	equ	0xFF5
 46892                           prodh	equ	0xFF4
 46893                           prodl	equ	0xFF3
 46894                           intcon	equ	0xFF2
 46895                           intcon2	equ	0xFF1
 46896                           postinc0	equ	0xFEE
 46897                           fsr0h	equ	0xFEA
 46898                           fsr0l	equ	0xFE9
 46899                           wreg	equ	0xFE8
 46900                           indf1	equ	0xFE7
 46901                           postinc1	equ	0xFE6
 46902                           postdec1	equ	0xFE5
 46903                           fsr1h	equ	0xFE2
 46904                           fsr1l	equ	0xFE1
 46905                           indf2	equ	0xFDF
 46906                           postinc2	equ	0xFDE
 46907                           postdec2	equ	0xFDD
 46908                           plusw2	equ	0xFDB
 46909                           fsr2h	equ	0xFDA
 46910                           fsr2l	equ	0xFD9
 46911                           status	equ	0xFD8
 46912                           
 46913 ;; *************** function i2_sendOut *****************
 46914 ;; Defined at:
 46915 ;;		line 22 in file "midi.c"
 46916 ;; Parameters:    Size  Location     Type
 46917 ;;  a               1    wreg     unsigned char 
 46918 ;; Auto vars:     Size  Location     Type
 46919 ;;  a               1    0[COMRAM] unsigned char 
 46920 ;; Return value:  Size  Location     Type
 46921 ;;                  1    wreg      void 
 46922 ;; Registers used:
 46923 ;;		wreg, status,2, cstack
 46924 ;; Tracked objects:
 46925 ;;		On entry : 0/0
 46926 ;;		On exit  : 0/0
 46927 ;;		Unchanged: 0/0
 46928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46933 ;;Total ram usage:        1 bytes
 46934 ;; Hardware stack levels used:    1
 46935 ;; This function calls:
 46936 ;;		Nothing
 46937 ;; This function is called by:
 46938 ;;		i2_noteOff
 46939 ;;		i2_noteOn
 46940 ;; This function uses a non-reentrant model
 46941 ;;
 46942                           
 46943                           	psect	text150
 46944  0095B8                     __ptext150:
 46945                           	opt stack 0
 46946  0095B8                     i2_sendOut:
 46947                           	opt stack 15
 46948                           
 46949                           ;incstack = 0
 46950                           ;i2sendOut@a stored from wreg
 46951  0095B8  6E01               	movwf	i2sendOut@a,c
 46952                           
 46953                           ;midi.c: 24: TXREG = a;
 46954  0095BA  C001  FFAD         	movff	i2sendOut@a,4013	;volatile
 46955  0095BE  A89E               	btfss	3998,4,c	;volatile
 46956  0095C0  D7FE               	goto	i2l436
 46957                           
 46958                           ;midi.c: 26: TXIF = 0;
 46959  0095C2  989E               	bcf	3998,4,c	;volatile
 46960                           
 46961                           ;midi.c: 27: _delay((unsigned long)((320)*(20000000/4000000.0)));
 46962  0095C4  0EE4               	movlw	228
 46963  0095C6                     i2u4506_47:
 46964  0095C6  D000               	nop2	
 46965  0095C8  D000               	nop2	
 46966  0095CA  2EE8               	decfsz	wreg,f,c
 46967  0095CC  D7FC               	bra	i2u4506_47
 46968  0095CE  D000               	nop2	
 46969  0095D0  D000               	nop2	
 46970  0095D2  0012               	return		;funcret
 46971  0095D4                     __end_ofi2_sendOut:
 46972                           	opt stack 0
 46973                           pclatu	equ	0xFFB
 46974                           pclath	equ	0xFFA
 46975                           tblptru	equ	0xFF8
 46976                           tblptrh	equ	0xFF7
 46977                           tblptrl	equ	0xFF6
 46978                           tablat	equ	0xFF5
 46979                           prodh	equ	0xFF4
 46980                           prodl	equ	0xFF3
 46981                           intcon	equ	0xFF2
 46982                           intcon2	equ	0xFF1
 46983                           postinc0	equ	0xFEE
 46984                           fsr0h	equ	0xFEA
 46985                           fsr0l	equ	0xFE9
 46986                           wreg	equ	0xFE8
 46987                           indf1	equ	0xFE7
 46988                           postinc1	equ	0xFE6
 46989                           postdec1	equ	0xFE5
 46990                           fsr1h	equ	0xFE2
 46991                           fsr1l	equ	0xFE1
 46992                           indf2	equ	0xFDF
 46993                           postinc2	equ	0xFDE
 46994                           postdec2	equ	0xFDD
 46995                           plusw2	equ	0xFDB
 46996                           fsr2h	equ	0xFDA
 46997                           fsr2l	equ	0xFD9
 46998                           status	equ	0xFD8
 46999                           
 47000 ;; *************** function _sort_pitches *****************
 47001 ;; Defined at:
 47002 ;;		line 220 in file "arpeggio.c"
 47003 ;; Parameters:    Size  Location     Type
 47004 ;;		None
 47005 ;; Auto vars:     Size  Location     Type
 47006 ;;  j               1    3[COMRAM] unsigned char 
 47007 ;;  i               1    4[COMRAM] unsigned char 
 47008 ;;  a               1    2[COMRAM] unsigned char 
 47009 ;; Return value:  Size  Location     Type
 47010 ;;                  1    wreg      void 
 47011 ;; Registers used:
 47012 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 47013 ;; Tracked objects:
 47014 ;;		On entry : 0/0
 47015 ;;		On exit  : 0/0
 47016 ;;		Unchanged: 0/0
 47017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47019 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47020 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47021 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47022 ;;Total ram usage:        5 bytes
 47023 ;; Hardware stack levels used:    1
 47024 ;; This function calls:
 47025 ;;		Nothing
 47026 ;; This function is called by:
 47027 ;;		_playArpeggio
 47028 ;; This function uses a non-reentrant model
 47029 ;;
 47030                           
 47031                           	psect	text151
 47032  0061F6                     __ptext151:
 47033                           	opt stack 0
 47034  0061F6                     _sort_pitches:
 47035                           	opt stack 16
 47036                           
 47037                           ;arpeggio.c: 222: if(NUM_NOTES_PRESSED == 0){return;}
 47038                           
 47039                           ;incstack = 0
 47040  0061F6  0100               	movlb	0	; () banked
 47041  0061F8  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 47042  0061FA  B4D8               	btfsc	status,2,c
 47043  0061FC  0012               	return	
 47044                           
 47045                           ; BSR set to: 0
 47046                           ;arpeggio.c: 224: unsigned char a;
 47047                           ;arpeggio.c: 225: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; ++i){
 47048                           
 47049                           ; BSR set to: 0
 47050                           
 47051                           ; BSR set to: 0
 47052  0061FE  0E00               	movlw	0
 47053  006200  6E05               	movwf	sort_pitches@i,c
 47054  006202  D081               	goto	i2l5264
 47055  006204                     
 47056                           ; BSR set to: 0
 47057                           ;arpeggio.c: 226: for(unsigned char j = i + 1; j < NUM_NOTES_PRESSED; ++j){
 47058                           
 47059                           ; BSR set to: 0
 47060  006204  2805               	incf	sort_pitches@i,w,c
 47061  006206  6E04               	movwf	sort_pitches@j,c
 47062  006208  D079               	goto	i2l5266
 47063  00620A                     i2l5267:
 47064                           
 47065                           ; BSR set to: 0
 47066                           ;arpeggio.c: 232: if(SORT_DIRECTION == 0) {
 47067  00620A  BA35               	btfsc	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 47068  00620C  D03A               	goto	i2l5269
 47069                           
 47070                           ; BSR set to: 0
 47071                           ;arpeggio.c: 233: if(ARPEGGIO_SORTED[i] > ARPEGGIO_SORTED[j]){
 47072  00620E  5005               	movf	sort_pitches@i,w,c
 47073  006210  0D01               	mullw	1
 47074  006212  0E9C               	movlw	low _ARPEGGIO_SORTED
 47075  006214  24F3               	addwf	prodl,w,c
 47076  006216  6ED9               	movwf	fsr2l,c
 47077  006218  0E02               	movlw	high _ARPEGGIO_SORTED
 47078  00621A  20F4               	addwfc	prodh,w,c
 47079  00621C  6EDA               	movwf	fsr2h,c
 47080  00621E  5004               	movf	sort_pitches@j,w,c
 47081  006220  0D01               	mullw	1
 47082  006222  0E9C               	movlw	low _ARPEGGIO_SORTED
 47083  006224  24F3               	addwf	prodl,w,c
 47084  006226  6EE1               	movwf	fsr1l,c
 47085  006228  0E02               	movlw	high _ARPEGGIO_SORTED
 47086  00622A  20F4               	addwfc	prodh,w,c
 47087  00622C  6EE2               	movwf	fsr1h,c
 47088  00622E  50DE               	movf	postinc2,w,c
 47089  006230  5CE6               	subwf	postinc1,w,c
 47090  006232  B0D8               	btfsc	status,0,c
 47091  006234  D026               	goto	i2l5269
 47092                           
 47093                           ; BSR set to: 0
 47094                           ;arpeggio.c: 234: a = ARPEGGIO_SORTED[i];
 47095  006236  5005               	movf	sort_pitches@i,w,c
 47096  006238  0D01               	mullw	1
 47097  00623A  0E9C               	movlw	low _ARPEGGIO_SORTED
 47098  00623C  24F3               	addwf	prodl,w,c
 47099  00623E  6ED9               	movwf	fsr2l,c
 47100  006240  0E02               	movlw	high _ARPEGGIO_SORTED
 47101  006242  20F4               	addwfc	prodh,w,c
 47102  006244  6EDA               	movwf	fsr2h,c
 47103  006246  50DF               	movf	indf2,w,c
 47104  006248  6E03               	movwf	sort_pitches@a,c
 47105                           
 47106                           ; BSR set to: 0
 47107                           ;arpeggio.c: 235: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 47108  00624A  5004               	movf	sort_pitches@j,w,c
 47109  00624C  0D01               	mullw	1
 47110  00624E  0E9C               	movlw	low _ARPEGGIO_SORTED
 47111  006250  24F3               	addwf	prodl,w,c
 47112  006252  6ED9               	movwf	fsr2l,c
 47113  006254  0E02               	movlw	high _ARPEGGIO_SORTED
 47114  006256  20F4               	addwfc	prodh,w,c
 47115  006258  6EDA               	movwf	fsr2h,c
 47116  00625A  5005               	movf	sort_pitches@i,w,c
 47117  00625C  0D01               	mullw	1
 47118  00625E  0E9C               	movlw	low _ARPEGGIO_SORTED
 47119  006260  24F3               	addwf	prodl,w,c
 47120  006262  6EE1               	movwf	fsr1l,c
 47121  006264  0E02               	movlw	high _ARPEGGIO_SORTED
 47122  006266  20F4               	addwfc	prodh,w,c
 47123  006268  6EE2               	movwf	fsr1h,c
 47124  00626A  CFDF FFE7          	movff	indf2,indf1
 47125                           
 47126                           ; BSR set to: 0
 47127                           ;arpeggio.c: 236: ARPEGGIO_SORTED[j] = a;
 47128  00626E  5004               	movf	sort_pitches@j,w,c
 47129  006270  0D01               	mullw	1
 47130  006272  0E9C               	movlw	low _ARPEGGIO_SORTED
 47131  006274  24F3               	addwf	prodl,w,c
 47132  006276  6ED9               	movwf	fsr2l,c
 47133  006278  0E02               	movlw	high _ARPEGGIO_SORTED
 47134  00627A  20F4               	addwfc	prodh,w,c
 47135  00627C  6EDA               	movwf	fsr2h,c
 47136  00627E  C003  FFDF         	movff	sort_pitches@a,indf2
 47137  006282                     i2l5269:
 47138                           
 47139                           ; BSR set to: 0
 47140                           ;arpeggio.c: 237: }
 47141                           ;arpeggio.c: 238: }
 47142                           ;arpeggio.c: 240: if(SORT_DIRECTION == 1) {
 47143                           
 47144                           ; BSR set to: 0
 47145                           
 47146                           ; BSR set to: 0
 47147  006282  AA35               	btfss	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 47148  006284  D03A               	goto	i2l5271
 47149                           
 47150                           ; BSR set to: 0
 47151                           ;arpeggio.c: 241: if(ARPEGGIO_SORTED[i] < ARPEGGIO_SORTED[j]){
 47152  006286  5004               	movf	sort_pitches@j,w,c
 47153  006288  0D01               	mullw	1
 47154  00628A  0E9C               	movlw	low _ARPEGGIO_SORTED
 47155  00628C  24F3               	addwf	prodl,w,c
 47156  00628E  6ED9               	movwf	fsr2l,c
 47157  006290  0E02               	movlw	high _ARPEGGIO_SORTED
 47158  006292  20F4               	addwfc	prodh,w,c
 47159  006294  6EDA               	movwf	fsr2h,c
 47160  006296  5005               	movf	sort_pitches@i,w,c
 47161  006298  0D01               	mullw	1
 47162  00629A  0E9C               	movlw	low _ARPEGGIO_SORTED
 47163  00629C  24F3               	addwf	prodl,w,c
 47164  00629E  6EE1               	movwf	fsr1l,c
 47165  0062A0  0E02               	movlw	high _ARPEGGIO_SORTED
 47166  0062A2  20F4               	addwfc	prodh,w,c
 47167  0062A4  6EE2               	movwf	fsr1h,c
 47168  0062A6  50DE               	movf	postinc2,w,c
 47169  0062A8  5CE6               	subwf	postinc1,w,c
 47170  0062AA  B0D8               	btfsc	status,0,c
 47171  0062AC  D026               	goto	i2l5271
 47172                           
 47173                           ; BSR set to: 0
 47174                           ;arpeggio.c: 242: a = ARPEGGIO_SORTED[i];
 47175  0062AE  5005               	movf	sort_pitches@i,w,c
 47176  0062B0  0D01               	mullw	1
 47177  0062B2  0E9C               	movlw	low _ARPEGGIO_SORTED
 47178  0062B4  24F3               	addwf	prodl,w,c
 47179  0062B6  6ED9               	movwf	fsr2l,c
 47180  0062B8  0E02               	movlw	high _ARPEGGIO_SORTED
 47181  0062BA  20F4               	addwfc	prodh,w,c
 47182  0062BC  6EDA               	movwf	fsr2h,c
 47183  0062BE  50DF               	movf	indf2,w,c
 47184  0062C0  6E03               	movwf	sort_pitches@a,c
 47185                           
 47186                           ; BSR set to: 0
 47187                           ;arpeggio.c: 243: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 47188  0062C2  5004               	movf	sort_pitches@j,w,c
 47189  0062C4  0D01               	mullw	1
 47190  0062C6  0E9C               	movlw	low _ARPEGGIO_SORTED
 47191  0062C8  24F3               	addwf	prodl,w,c
 47192  0062CA  6ED9               	movwf	fsr2l,c
 47193  0062CC  0E02               	movlw	high _ARPEGGIO_SORTED
 47194  0062CE  20F4               	addwfc	prodh,w,c
 47195  0062D0  6EDA               	movwf	fsr2h,c
 47196  0062D2  5005               	movf	sort_pitches@i,w,c
 47197  0062D4  0D01               	mullw	1
 47198  0062D6  0E9C               	movlw	low _ARPEGGIO_SORTED
 47199  0062D8  24F3               	addwf	prodl,w,c
 47200  0062DA  6EE1               	movwf	fsr1l,c
 47201  0062DC  0E02               	movlw	high _ARPEGGIO_SORTED
 47202  0062DE  20F4               	addwfc	prodh,w,c
 47203  0062E0  6EE2               	movwf	fsr1h,c
 47204  0062E2  CFDF FFE7          	movff	indf2,indf1
 47205                           
 47206                           ; BSR set to: 0
 47207                           ;arpeggio.c: 244: ARPEGGIO_SORTED[j] = a;
 47208  0062E6  5004               	movf	sort_pitches@j,w,c
 47209  0062E8  0D01               	mullw	1
 47210  0062EA  0E9C               	movlw	low _ARPEGGIO_SORTED
 47211  0062EC  24F3               	addwf	prodl,w,c
 47212  0062EE  6ED9               	movwf	fsr2l,c
 47213  0062F0  0E02               	movlw	high _ARPEGGIO_SORTED
 47214  0062F2  20F4               	addwfc	prodh,w,c
 47215  0062F4  6EDA               	movwf	fsr2h,c
 47216  0062F6  C003  FFDF         	movff	sort_pitches@a,indf2
 47217  0062FA                     i2l5271:
 47218                           
 47219                           ; BSR set to: 0
 47220                           
 47221                           ; BSR set to: 0
 47222                           
 47223                           ; BSR set to: 0
 47224  0062FA  2A04               	incf	sort_pitches@j,f,c
 47225  0062FC                     i2l5266:
 47226                           
 47227                           ; BSR set to: 0
 47228                           
 47229                           ; BSR set to: 0
 47230  0062FC  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 47231  0062FE  5C04               	subwf	sort_pitches@j,w,c
 47232  006300  A0D8               	btfss	status,0,c
 47233  006302  D783               	goto	i2l5267
 47234                           
 47235                           ; BSR set to: 0
 47236                           
 47237                           ; BSR set to: 0
 47238  006304  2A05               	incf	sort_pitches@i,f,c
 47239  006306                     i2l5264:
 47240                           
 47241                           ; BSR set to: 0
 47242                           
 47243                           ; BSR set to: 0
 47244  006306  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 47245  006308  5C05               	subwf	sort_pitches@i,w,c
 47246  00630A  B0D8               	btfsc	status,0,c
 47247  00630C  0012               	return	
 47248  00630E  D77A               	goto	i2l5265
 47249  006310                     __end_of_sort_pitches:
 47250                           	opt stack 0
 47251                           pclatu	equ	0xFFB
 47252                           pclath	equ	0xFFA
 47253                           tblptru	equ	0xFF8
 47254                           tblptrh	equ	0xFF7
 47255                           tblptrl	equ	0xFF6
 47256                           tablat	equ	0xFF5
 47257                           prodh	equ	0xFF4
 47258                           prodl	equ	0xFF3
 47259                           intcon	equ	0xFF2
 47260                           intcon2	equ	0xFF1
 47261                           postinc0	equ	0xFEE
 47262                           fsr0h	equ	0xFEA
 47263                           fsr0l	equ	0xFE9
 47264                           wreg	equ	0xFE8
 47265                           indf1	equ	0xFE7
 47266                           postinc1	equ	0xFE6
 47267                           postdec1	equ	0xFE5
 47268                           fsr1h	equ	0xFE2
 47269                           fsr1l	equ	0xFE1
 47270                           indf2	equ	0xFDF
 47271                           postinc2	equ	0xFDE
 47272                           postdec2	equ	0xFDD
 47273                           plusw2	equ	0xFDB
 47274                           fsr2h	equ	0xFDA
 47275                           fsr2l	equ	0xFD9
 47276                           status	equ	0xFD8
 47277                           
 47278 ;; *************** function _encoderInputsBuxton *****************
 47279 ;; Defined at:
 47280 ;;		line 27 in file "encoder.c"
 47281 ;; Parameters:    Size  Location     Type
 47282 ;;		None
 47283 ;; Auto vars:     Size  Location     Type
 47284 ;;  pinstate        1    5[COMRAM] unsigned char 
 47285 ;;  tempB           1    4[COMRAM] unsigned char 
 47286 ;;  tempA           1    3[COMRAM] unsigned char 
 47287 ;; Return value:  Size  Location     Type
 47288 ;;                  1    wreg      void 
 47289 ;; Registers used:
 47290 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 47291 ;; Tracked objects:
 47292 ;;		On entry : 0/0
 47293 ;;		On exit  : 0/0
 47294 ;;		Unchanged: 0/0
 47295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47297 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47298 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47299 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47300 ;;Total ram usage:        6 bytes
 47301 ;; Hardware stack levels used:    1
 47302 ;; This function calls:
 47303 ;;		Nothing
 47304 ;; This function is called by:
 47305 ;;		_ISR
 47306 ;; This function uses a non-reentrant model
 47307 ;;
 47308                           
 47309                           	psect	text152
 47310  007DF4                     __ptext152:
 47311                           	opt stack 0
 47312  007DF4                     _encoderInputsBuxton:
 47313                           	opt stack 17
 47314                           
 47315                           ;encoder.c: 30: if(encoderPolarity == 0){
 47316                           
 47317                           ; BSR set to: 0
 47318                           ;incstack = 0
 47319  007DF4  B236               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 47320  007DF6  D006               	goto	i2l807
 47321                           
 47322                           ;encoder.c: 31: encoderA = RB5;
 47323  007DF8  8636               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 47324  007DFA  AA81               	btfss	3969,5,c	;volatile
 47325  007DFC  9636               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 47326                           
 47327                           ;encoder.c: 32: encoderB = RB4;
 47328  007DFE  8436               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 47329  007E00  A881               	btfss	3969,4,c	;volatile
 47330  007E02  9436               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 47331  007E04                     i2l807:
 47332                           
 47333                           ;encoder.c: 33: }
 47334                           ;encoder.c: 36: if(encoderPolarity == 1){
 47335  007E04  A236               	btfss	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 47336  007E06  D006               	goto	i2l808
 47337                           
 47338                           ;encoder.c: 37: encoderA = RB4;
 47339  007E08  8636               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 47340  007E0A  A881               	btfss	3969,4,c	;volatile
 47341  007E0C  9636               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 47342                           
 47343                           ;encoder.c: 38: encoderB = RB5;
 47344  007E0E  8436               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 47345  007E10  AA81               	btfss	3969,5,c	;volatile
 47346  007E12  9436               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 47347  007E14                     i2l808:
 47348                           
 47349                           ;encoder.c: 39: }
 47350                           ;encoder.c: 42: unsigned char tempA = encoderA << 1;
 47351  007E14  A636               	btfss	_encoderA/(0+8),_encoderA& (0+7),c
 47352  007E16  D003               	goto	i2u3789_40
 47353  007E18  6A01               	clrf	??_encoderInputsBuxton& (0+255),c
 47354  007E1A  2A01               	incf	??_encoderInputsBuxton& (0+255),f,c
 47355  007E1C  D001               	goto	i2u3790_48
 47356  007E1E                     i2u3789_40:
 47357  007E1E  6A01               	clrf	??_encoderInputsBuxton& (0+255),c
 47358  007E20                     i2u3790_48:
 47359  007E20  90D8               	bcf	status,0,c
 47360  007E22  3401               	rlcf	??_encoderInputsBuxton,w,c
 47361  007E24  6E04               	movwf	encoderInputsBuxton@tempA,c
 47362                           
 47363                           ;encoder.c: 43: unsigned char tempB = encoderB;
 47364  007E26  0E00               	movlw	0
 47365  007E28  B436               	btfsc	_encoderB/(0+8),_encoderB& (0+7),c
 47366  007E2A  0E01               	movlw	1
 47367  007E2C  6E05               	movwf	encoderInputsBuxton@tempB,c
 47368                           
 47369                           ;encoder.c: 44: unsigned char pinstate = tempA | tempB;
 47370  007E2E  5004               	movf	encoderInputsBuxton@tempA,w,c
 47371  007E30  1005               	iorwf	encoderInputsBuxton@tempB,w,c
 47372  007E32  6E06               	movwf	encoderInputsBuxton@pinstate,c
 47373                           
 47374                           ;encoder.c: 46: state = ttable[state & 0xf][pinstate];
 47375  007E34  C058  F001         	movff	_state,??_encoderInputsBuxton
 47376  007E38  0E0F               	movlw	15
 47377  007E3A  1601               	andwf	??_encoderInputsBuxton,f,c
 47378  007E3C  5001               	movf	??_encoderInputsBuxton,w,c
 47379  007E3E  0D04               	mullw	4
 47380  007E40  0E3D               	movlw	low _ttable
 47381  007E42  6E02               	movwf	(??_encoderInputsBuxton+1)& (0+255),c
 47382  007E44  0EF3               	movlw	high _ttable
 47383  007E46  6E03               	movwf	(??_encoderInputsBuxton+2)& (0+255),c
 47384  007E48  50F3               	movf	prodl,w,c
 47385  007E4A  2602               	addwf	??_encoderInputsBuxton+1,f,c
 47386  007E4C  50F4               	movf	prodh,w,c
 47387  007E4E  2203               	addwfc	??_encoderInputsBuxton+2,f,c
 47388  007E50  5006               	movf	encoderInputsBuxton@pinstate,w,c
 47389  007E52  0D01               	mullw	1
 47390  007E54  50F3               	movf	prodl,w,c
 47391  007E56  2602               	addwf	??_encoderInputsBuxton+1,f,c
 47392  007E58  50F4               	movf	prodh,w,c
 47393  007E5A  2203               	addwfc	??_encoderInputsBuxton+2,f,c
 47394  007E5C  C002  FFF6         	movff	??_encoderInputsBuxton+1,tblptrl
 47395  007E60  C003  FFF7         	movff	??_encoderInputsBuxton+2,tblptrh
 47396  007E64                     	if	0	;tblptru may be non-zero
 47397  007E64                     	endif
 47398  007E64                     	if	0	;tblptru may be non-zero
 47399  007E64                     	endif
 47400  007E64  0008               	tblrd		*
 47401  007E66  CFF5 F058          	movff	tablat,_state
 47402                           
 47403                           ;encoder.c: 47: encoder_direction = state & 0x30;
 47404  007E6A  5058               	movf	_state,w,c
 47405  007E6C  0B30               	andlw	48
 47406  007E6E  0100               	movlb	0	; () banked
 47407  007E70  6FEB               	movwf	_encoder_direction& (0+255),b
 47408                           
 47409                           ; BSR set to: 0
 47410  007E72  0012               	return		;funcret
 47411  007E74                     __end_of_encoderInputsBuxton:
 47412                           	opt stack 0
 47413                           pclatu	equ	0xFFB
 47414                           pclath	equ	0xFFA
 47415                           tblptru	equ	0xFF8
 47416                           tblptrh	equ	0xFF7
 47417                           tblptrl	equ	0xFF6
 47418                           tablat	equ	0xFF5
 47419                           prodh	equ	0xFF4
 47420                           prodl	equ	0xFF3
 47421                           intcon	equ	0xFF2
 47422                           intcon2	equ	0xFF1
 47423                           postinc0	equ	0xFEE
 47424                           fsr0h	equ	0xFEA
 47425                           fsr0l	equ	0xFE9
 47426                           wreg	equ	0xFE8
 47427                           indf1	equ	0xFE7
 47428                           postinc1	equ	0xFE6
 47429                           postdec1	equ	0xFE5
 47430                           fsr1h	equ	0xFE2
 47431                           fsr1l	equ	0xFE1
 47432                           indf2	equ	0xFDF
 47433                           postinc2	equ	0xFDE
 47434                           postdec2	equ	0xFDD
 47435                           plusw2	equ	0xFDB
 47436                           fsr2h	equ	0xFDA
 47437                           fsr2l	equ	0xFD9
 47438                           status	equ	0xFD8
 47439                           
 47440 ;; *************** function _display *****************
 47441 ;; Defined at:
 47442 ;;		line 21 in file "segment.c"
 47443 ;; Parameters:    Size  Location     Type
 47444 ;;		None
 47445 ;; Auto vars:     Size  Location     Type
 47446 ;;		None
 47447 ;; Return value:  Size  Location     Type
 47448 ;;                  1    wreg      void 
 47449 ;; Registers used:
 47450 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 47451 ;; Tracked objects:
 47452 ;;		On entry : 0/0
 47453 ;;		On exit  : 0/0
 47454 ;;		Unchanged: 0/0
 47455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47460 ;;Total ram usage:        0 bytes
 47461 ;; Hardware stack levels used:    1
 47462 ;; Hardware stack levels required when called:    2
 47463 ;; This function calls:
 47464 ;;		_displayDigits
 47465 ;;		_displayString
 47466 ;; This function is called by:
 47467 ;;		_ISR
 47468 ;; This function uses a non-reentrant model
 47469 ;;
 47470                           
 47471                           	psect	text153
 47472  009602                     __ptext153:
 47473                           	opt stack 0
 47474  009602                     _display:
 47475                           	opt stack 15
 47476                           
 47477                           ;segment.c: 22: if (DISPLAY_MODE == 0) {displayDigits();}
 47478                           
 47479                           ; BSR set to: 0
 47480                           ;incstack = 0
 47481  009602  505A               	movf	_DISPLAY_MODE,w,c
 47482  009604  B4D8               	btfsc	status,2,c
 47483  009606  EC20  F020         	call	_displayDigits	;wreg free
 47484                           
 47485                           ;segment.c: 23: if (DISPLAY_MODE == 1) {displayString();}
 47486  00960A  045A               	decf	_DISPLAY_MODE,w,c
 47487  00960C  A4D8               	btfss	status,2,c
 47488  00960E  0012               	return	
 47489  009610  EC0E  F033         	call	_displayString	;wreg free
 47490  009614  0012               	return	
 47491  009616                     __end_of_display:
 47492                           	opt stack 0
 47493                           pclatu	equ	0xFFB
 47494                           pclath	equ	0xFFA
 47495                           tblptru	equ	0xFF8
 47496                           tblptrh	equ	0xFF7
 47497                           tblptrl	equ	0xFF6
 47498                           tablat	equ	0xFF5
 47499                           prodh	equ	0xFF4
 47500                           prodl	equ	0xFF3
 47501                           intcon	equ	0xFF2
 47502                           intcon2	equ	0xFF1
 47503                           postinc0	equ	0xFEE
 47504                           fsr0h	equ	0xFEA
 47505                           fsr0l	equ	0xFE9
 47506                           wreg	equ	0xFE8
 47507                           indf1	equ	0xFE7
 47508                           postinc1	equ	0xFE6
 47509                           postdec1	equ	0xFE5
 47510                           fsr1h	equ	0xFE2
 47511                           fsr1l	equ	0xFE1
 47512                           indf2	equ	0xFDF
 47513                           postinc2	equ	0xFDE
 47514                           postdec2	equ	0xFDD
 47515                           plusw2	equ	0xFDB
 47516                           fsr2h	equ	0xFDA
 47517                           fsr2l	equ	0xFD9
 47518                           status	equ	0xFD8
 47519                           
 47520 ;; *************** function _displayString *****************
 47521 ;; Defined at:
 47522 ;;		line 164 in file "segment.c"
 47523 ;; Parameters:    Size  Location     Type
 47524 ;;		None
 47525 ;; Auto vars:     Size  Location     Type
 47526 ;;  i               1    1[COMRAM] unsigned char 
 47527 ;; Return value:  Size  Location     Type
 47528 ;;                  1    wreg      void 
 47529 ;; Registers used:
 47530 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 47531 ;; Tracked objects:
 47532 ;;		On entry : 0/0
 47533 ;;		On exit  : 0/0
 47534 ;;		Unchanged: 0/0
 47535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47537 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47539 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47540 ;;Total ram usage:        2 bytes
 47541 ;; Hardware stack levels used:    1
 47542 ;; This function calls:
 47543 ;;		Nothing
 47544 ;; This function is called by:
 47545 ;;		_display
 47546 ;; This function uses a non-reentrant model
 47547 ;;
 47548                           
 47549                           	psect	text154
 47550  00661C                     __ptext154:
 47551                           	opt stack 0
 47552  00661C                     _displayString:
 47553                           	opt stack 16
 47554                           
 47555                           ;segment.c: 166: static unsigned char letter[4];
 47556                           ;segment.c: 167: static unsigned char letter_counter;
 47557                           ;segment.c: 170: for(unsigned char i=0;i<4;i++) {
 47558                           
 47559                           ;incstack = 0
 47560  00661C  0E00               	movlw	0
 47561  00661E  6E02               	movwf	displayString@i,c
 47562  006620                     i2l22645:
 47563  006620  0E03               	movlw	3
 47564  006622  6402               	cpfsgt	displayString@i,c
 47565  006624  D001               	goto	i2l2908
 47566  006626  D02A               	goto	i2u3692_40
 47567  006628                     i2l2908:
 47568                           
 47569                           ;segment.c: 171: if(string_to_display[i] > (unsigned char) 'z') {letter[i] = 'z';}
 47570  006628  5002               	movf	displayString@i,w,c
 47571  00662A  0D01               	mullw	1
 47572  00662C  0EEE               	movlw	low _string_to_display
 47573  00662E  24F3               	addwf	prodl,w,c
 47574  006630  6ED9               	movwf	fsr2l,c
 47575  006632  0E01               	movlw	high _string_to_display
 47576  006634  20F4               	addwfc	prodh,w,c
 47577  006636  6EDA               	movwf	fsr2h,c
 47578  006638  0E7A               	movlw	122
 47579  00663A  64DF               	cpfsgt	indf2,c
 47580  00663C  D00A               	goto	i2l2910
 47581  00663E  5002               	movf	displayString@i,w,c
 47582  006640  0D01               	mullw	1
 47583  006642  0E00               	movlw	low displayString@letter
 47584  006644  24F3               	addwf	prodl,w,c
 47585  006646  6ED9               	movwf	fsr2l,c
 47586  006648  0E01               	movlw	high displayString@letter
 47587  00664A  20F4               	addwfc	prodh,w,c
 47588  00664C  6EDA               	movwf	fsr2h,c
 47589  00664E  0E7A               	movlw	122
 47590  006650  D012               	goto	L25
 47591  006652                     i2l2910:
 47592                           
 47593                           ;segment.c: 172: else letter[i] = string_to_display[i] - '0';
 47594  006652  5002               	movf	displayString@i,w,c
 47595  006654  0D01               	mullw	1
 47596  006656  0E00               	movlw	low displayString@letter
 47597  006658  24F3               	addwf	prodl,w,c
 47598  00665A  6ED9               	movwf	fsr2l,c
 47599  00665C  0E01               	movlw	high displayString@letter
 47600  00665E  20F4               	addwfc	prodh,w,c
 47601  006660  6EDA               	movwf	fsr2h,c
 47602  006662  5002               	movf	displayString@i,w,c
 47603  006664  0D01               	mullw	1
 47604  006666  0EEE               	movlw	low _string_to_display
 47605  006668  24F3               	addwf	prodl,w,c
 47606  00666A  6EE1               	movwf	fsr1l,c
 47607  00666C  0E01               	movlw	high _string_to_display
 47608  00666E  20F4               	addwfc	prodh,w,c
 47609  006670  6EE2               	movwf	fsr1h,c
 47610  006672  50E7               	movf	indf1,w,c
 47611  006674  0FD0               	addlw	208
 47612  006676                     L25:
 47613  006676  6EDF               	movwf	indf2,c
 47614  006678  2A02               	incf	displayString@i,f,c
 47615  00667A  D7D2               	goto	i2l22645
 47616  00667C                     i2u3692_40:
 47617                           
 47618                           ;segment.c: 173: }
 47619                           ;segment.c: 175: if(letter_counter == 0){
 47620  00667C  5051               	movf	displayString@letter_counter,w,c
 47621  00667E  A4D8               	btfss	status,2,c
 47622  006680  D00E               	goto	i2l2912
 47623                           
 47624                           ;segment.c: 176: RC3 = 0;
 47625  006682  9682               	bcf	3970,3,c	;volatile
 47626                           
 47627                           ;segment.c: 177: PORTD = seg_ascii[letter[0]];
 47628  006684  0101               	movlb	1	; () banked
 47629  006686  5100               	movf	displayString@letter& (0+255),w,b
 47630  006688  0D01               	mullw	1
 47631  00668A  0E20               	movlw	low _seg_ascii
 47632  00668C  24F3               	addwf	prodl,w,c
 47633  00668E  6EF6               	movwf	tblptrl,c
 47634  006690  0EF2               	movlw	high _seg_ascii
 47635  006692  20F4               	addwfc	prodh,w,c
 47636  006694  6EF7               	movwf	tblptrh,c
 47637  006696                     	if	0	;There are less than 3 active tblptr bytes
 47638  006696                     	endif
 47639  006696  0008               	tblrd		*
 47640  006698  CFF5 FF83          	movff	tablat,3971	;volatile
 47641                           
 47642                           ; BSR set to: 1
 47643                           ;segment.c: 178: RC0 = 1;
 47644  00669C  8082               	bsf	3970,0,c	;volatile
 47645  00669E                     i2l2912:
 47646                           
 47647                           ;segment.c: 179: }
 47648                           ;segment.c: 180: if(letter_counter == 1){
 47649                           
 47650                           ; BSR set to: 1
 47651  00669E  0451               	decf	displayString@letter_counter,w,c
 47652  0066A0  A4D8               	btfss	status,2,c
 47653  0066A2  D00E               	goto	i2l2913
 47654                           
 47655                           ;segment.c: 181: RC0 = 0;
 47656  0066A4  9082               	bcf	3970,0,c	;volatile
 47657                           
 47658                           ;segment.c: 182: PORTD = seg_ascii[letter[1]];
 47659  0066A6  0101               	movlb	1	; () banked
 47660  0066A8  5101               	movf	(displayString@letter+1)& (0+255),w,b
 47661  0066AA  0D01               	mullw	1
 47662  0066AC  0E20               	movlw	low _seg_ascii
 47663  0066AE  24F3               	addwf	prodl,w,c
 47664  0066B0  6EF6               	movwf	tblptrl,c
 47665  0066B2  0EF2               	movlw	high _seg_ascii
 47666  0066B4  20F4               	addwfc	prodh,w,c
 47667  0066B6  6EF7               	movwf	tblptrh,c
 47668  0066B8                     	if	0	;There are less than 3 active tblptr bytes
 47669  0066B8                     	endif
 47670  0066B8  0008               	tblrd		*
 47671  0066BA  CFF5 FF83          	movff	tablat,3971	;volatile
 47672                           
 47673                           ; BSR set to: 1
 47674                           ;segment.c: 183: RC1 = 1;
 47675  0066BE  8282               	bsf	3970,1,c	;volatile
 47676  0066C0                     i2l2913:
 47677                           
 47678                           ;segment.c: 184: }
 47679                           ;segment.c: 185: if(letter_counter == 2){
 47680                           
 47681                           ; BSR set to: 1
 47682  0066C0  0E02               	movlw	2
 47683  0066C2  1851               	xorwf	displayString@letter_counter,w,c
 47684  0066C4  A4D8               	btfss	status,2,c
 47685  0066C6  D00E               	goto	i2l2914
 47686                           
 47687                           ;segment.c: 186: RC1 = 0;
 47688  0066C8  9282               	bcf	3970,1,c	;volatile
 47689                           
 47690                           ;segment.c: 187: PORTD = seg_ascii[letter[2]];
 47691  0066CA  0101               	movlb	1	; () banked
 47692  0066CC  5102               	movf	(displayString@letter+2)& (0+255),w,b
 47693  0066CE  0D01               	mullw	1
 47694  0066D0  0E20               	movlw	low _seg_ascii
 47695  0066D2  24F3               	addwf	prodl,w,c
 47696  0066D4  6EF6               	movwf	tblptrl,c
 47697  0066D6  0EF2               	movlw	high _seg_ascii
 47698  0066D8  20F4               	addwfc	prodh,w,c
 47699  0066DA  6EF7               	movwf	tblptrh,c
 47700  0066DC                     	if	0	;There are less than 3 active tblptr bytes
 47701  0066DC                     	endif
 47702  0066DC  0008               	tblrd		*
 47703  0066DE  CFF5 FF83          	movff	tablat,3971	;volatile
 47704                           
 47705                           ; BSR set to: 1
 47706                           ;segment.c: 188: RC2 = 1;
 47707  0066E2  8482               	bsf	3970,2,c	;volatile
 47708  0066E4                     i2l2914:
 47709                           
 47710                           ;segment.c: 189: }
 47711                           ;segment.c: 190: if(letter_counter == 3){
 47712                           
 47713                           ; BSR set to: 1
 47714  0066E4  0E03               	movlw	3
 47715  0066E6  1851               	xorwf	displayString@letter_counter,w,c
 47716  0066E8  A4D8               	btfss	status,2,c
 47717  0066EA  D00E               	goto	i2l2915
 47718                           
 47719                           ;segment.c: 191: RC2 = 0;
 47720  0066EC  9482               	bcf	3970,2,c	;volatile
 47721                           
 47722                           ;segment.c: 192: PORTD = seg_ascii[letter[3]];
 47723  0066EE  0101               	movlb	1	; () banked
 47724  0066F0  5103               	movf	(displayString@letter+3)& (0+255),w,b
 47725  0066F2  0D01               	mullw	1
 47726  0066F4  0E20               	movlw	low _seg_ascii
 47727  0066F6  24F3               	addwf	prodl,w,c
 47728  0066F8  6EF6               	movwf	tblptrl,c
 47729  0066FA  0EF2               	movlw	high _seg_ascii
 47730  0066FC  20F4               	addwfc	prodh,w,c
 47731  0066FE  6EF7               	movwf	tblptrh,c
 47732  006700                     	if	0	;There are less than 3 active tblptr bytes
 47733  006700                     	endif
 47734  006700  0008               	tblrd		*
 47735  006702  CFF5 FF83          	movff	tablat,3971	;volatile
 47736                           
 47737                           ; BSR set to: 1
 47738                           ;segment.c: 193: RC3 = 1;
 47739  006706  8682               	bsf	3970,3,c	;volatile
 47740  006708                     i2l2915:
 47741                           
 47742                           ;segment.c: 194: }
 47743                           ;segment.c: 197: letter_counter++;
 47744                           
 47745                           ; BSR set to: 1
 47746  006708  2A51               	incf	displayString@letter_counter,f,c
 47747                           
 47748                           ;segment.c: 198: if(letter_counter > 3){letter_counter = 0;}
 47749  00670A  0E03               	movlw	3
 47750  00670C  6451               	cpfsgt	displayString@letter_counter,c
 47751  00670E  0012               	return	
 47752  006710  0E00               	movlw	0
 47753  006712  6E51               	movwf	displayString@letter_counter,c
 47754  006714  0012               	return	
 47755  006716                     __end_of_displayString:
 47756                           	opt stack 0
 47757                           pclatu	equ	0xFFB
 47758                           pclath	equ	0xFFA
 47759                           tblptru	equ	0xFF8
 47760                           tblptrh	equ	0xFF7
 47761                           tblptrl	equ	0xFF6
 47762                           tablat	equ	0xFF5
 47763                           prodh	equ	0xFF4
 47764                           prodl	equ	0xFF3
 47765                           intcon	equ	0xFF2
 47766                           intcon2	equ	0xFF1
 47767                           postinc0	equ	0xFEE
 47768                           fsr0h	equ	0xFEA
 47769                           fsr0l	equ	0xFE9
 47770                           wreg	equ	0xFE8
 47771                           indf1	equ	0xFE7
 47772                           postinc1	equ	0xFE6
 47773                           postdec1	equ	0xFE5
 47774                           fsr1h	equ	0xFE2
 47775                           fsr1l	equ	0xFE1
 47776                           indf2	equ	0xFDF
 47777                           postinc2	equ	0xFDE
 47778                           postdec2	equ	0xFDD
 47779                           plusw2	equ	0xFDB
 47780                           fsr2h	equ	0xFDA
 47781                           fsr2l	equ	0xFD9
 47782                           status	equ	0xFD8
 47783                           
 47784 ;; *************** function _displayDigits *****************
 47785 ;; Defined at:
 47786 ;;		line 54 in file "segment.c"
 47787 ;; Parameters:    Size  Location     Type
 47788 ;;		None
 47789 ;; Auto vars:     Size  Location     Type
 47790 ;;  highByte        1   24[COMRAM] unsigned char 
 47791 ;;  lowByte         1   23[COMRAM] unsigned char 
 47792 ;; Return value:  Size  Location     Type
 47793 ;;                  1    wreg      void 
 47794 ;; Registers used:
 47795 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 47796 ;; Tracked objects:
 47797 ;;		On entry : 0/0
 47798 ;;		On exit  : 0/0
 47799 ;;		Unchanged: 0/0
 47800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47802 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47803 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47804 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47805 ;;Total ram usage:        5 bytes
 47806 ;; Hardware stack levels used:    1
 47807 ;; Hardware stack levels required when called:    1
 47808 ;; This function calls:
 47809 ;;		i2___awdiv
 47810 ;;		i2___awmod
 47811 ;; This function is called by:
 47812 ;;		_display
 47813 ;; This function uses a non-reentrant model
 47814 ;;
 47815                           
 47816                           	psect	text155
 47817  004040                     __ptext155:
 47818                           	opt stack 0
 47819  004040                     _displayDigits:
 47820                           	opt stack 15
 47821                           
 47822                           ;segment.c: 60: static unsigned char digit[4];
 47823                           ;segment.c: 61: static unsigned char digit_counter;
 47824                           ;segment.c: 62: static signed int number_to_display_last;
 47825                           ;segment.c: 63: static signed int number_to_display_temp;
 47826                           ;segment.c: 66: if(number_to_display != number_to_display_last){
 47827                           
 47828                           ;incstack = 0
 47829  004040  0101               	movlb	1	; () banked
 47830  004042  516B               	movf	displayDigits@number_to_display_last& (0+255),w,b
 47831  004044  185B               	xorwf	_number_to_display,w,c
 47832  004046  E104               	bnz	i2u3651_40
 47833  004048  516C               	movf	(displayDigits@number_to_display_last+1)& (0+255),w,b
 47834  00404A  185C               	xorwf	_number_to_display+1,w,c
 47835  00404C  B4D8               	btfsc	status,2,c
 47836  00404E  D0B1               	goto	i2l2869
 47837  004050                     i2u3651_40:
 47838                           
 47839                           ; BSR set to: 1
 47840                           ;segment.c: 68: if(DIGIT_MODE == 0) {
 47841  004050  5059               	movf	_DIGIT_MODE,w,c
 47842  004052  A4D8               	btfss	status,2,c
 47843  004054  D062               	goto	i2l2870
 47844                           
 47845                           ; BSR set to: 1
 47846                           ;segment.c: 70: if(number_to_display >= 0){number_to_display_temp = number_to_display;}
 47847  004056  BE5C               	btfsc	_number_to_display+1,7,c
 47848  004058  D004               	goto	i2l2871
 47849                           
 47850                           ; BSR set to: 1
 47851  00405A  C05B  F04D         	movff	_number_to_display,displayDigits@number_to_display_temp
 47852  00405E  C05C  F04E         	movff	_number_to_display+1,displayDigits@number_to_display_temp+1
 47853  004062                     i2l2871:
 47854                           
 47855                           ; BSR set to: 1
 47856                           ;segment.c: 71: if(number_to_display < 0){number_to_display_temp = 0 - number_to_display
      +                          ;}
 47857                           
 47858                           ; BSR set to: 1
 47859  004062  AE5C               	btfss	_number_to_display+1,7,c
 47860  004064  D00C               	goto	i2l2872
 47861                           
 47862                           ; BSR set to: 1
 47863  004066  C05B  F015         	movff	_number_to_display,??_displayDigits
 47864  00406A  C05C  F016         	movff	_number_to_display+1,??_displayDigits+1
 47865  00406E  1E15               	comf	??_displayDigits,f,c
 47866  004070  1E16               	comf	??_displayDigits+1,f,c
 47867  004072  4A15               	infsnz	??_displayDigits,f,c
 47868  004074  2A16               	incf	??_displayDigits+1,f,c
 47869  004076  C015  F04D         	movff	??_displayDigits,displayDigits@number_to_display_temp
 47870  00407A  C016  F04E         	movff	??_displayDigits+1,displayDigits@number_to_display_temp+1
 47871  00407E                     i2l2872:
 47872                           
 47873                           ; BSR set to: 1
 47874                           ;segment.c: 73: digit[0] = (number_to_display_temp / 1000) % 10;
 47875                           
 47876                           ; BSR set to: 1
 47877  00407E  0E03               	movlw	3
 47878  004080  6E04               	movwf	i2___awdiv@divisor+1,c
 47879  004082  0EE8               	movlw	232
 47880  004084  6E03               	movwf	i2___awdiv@divisor,c
 47881  004086  C04D  F001         	movff	displayDigits@number_to_display_temp,i2___awdiv@dividend
 47882  00408A  C04E  F002         	movff	displayDigits@number_to_display_temp+1,i2___awdiv@dividend+1
 47883  00408E  EC37  F03E         	call	i2___awdiv	;wreg free
 47884  004092  C001  F00F         	movff	?i2___awdiv,i2___awmod@dividend
 47885  004096  C002  F010         	movff	?i2___awdiv+1,i2___awmod@dividend+1
 47886  00409A  0E00               	movlw	0
 47887  00409C  6E12               	movwf	i2___awmod@divisor+1,c
 47888  00409E  0E0A               	movlw	10
 47889  0040A0  6E11               	movwf	i2___awmod@divisor,c
 47890  0040A2  EC04  F043         	call	i2___awmod	;wreg free
 47891  0040A6  500F               	movf	?i2___awmod,w,c
 47892  0040A8  6E37               	movwf	displayDigits@digit,c
 47893                           
 47894                           ;segment.c: 74: digit[1] = (number_to_display_temp / 100) % 10;
 47895  0040AA  0E00               	movlw	0
 47896  0040AC  6E04               	movwf	i2___awdiv@divisor+1,c
 47897  0040AE  0E64               	movlw	100
 47898  0040B0  6E03               	movwf	i2___awdiv@divisor,c
 47899  0040B2  C04D  F001         	movff	displayDigits@number_to_display_temp,i2___awdiv@dividend
 47900  0040B6  C04E  F002         	movff	displayDigits@number_to_display_temp+1,i2___awdiv@dividend+1
 47901  0040BA  EC37  F03E         	call	i2___awdiv	;wreg free
 47902  0040BE  C001  F00F         	movff	?i2___awdiv,i2___awmod@dividend
 47903  0040C2  C002  F010         	movff	?i2___awdiv+1,i2___awmod@dividend+1
 47904  0040C6  0E00               	movlw	0
 47905  0040C8  6E12               	movwf	i2___awmod@divisor+1,c
 47906  0040CA  0E0A               	movlw	10
 47907  0040CC  6E11               	movwf	i2___awmod@divisor,c
 47908  0040CE  EC04  F043         	call	i2___awmod	;wreg free
 47909  0040D2  500F               	movf	?i2___awmod,w,c
 47910  0040D4  6E38               	movwf	displayDigits@digit+1,c
 47911                           
 47912                           ;segment.c: 75: digit[2] = (number_to_display_temp / 10) % 10;
 47913  0040D6  0E00               	movlw	0
 47914  0040D8  6E04               	movwf	i2___awdiv@divisor+1,c
 47915  0040DA  0E0A               	movlw	10
 47916  0040DC  6E03               	movwf	i2___awdiv@divisor,c
 47917  0040DE  C04D  F001         	movff	displayDigits@number_to_display_temp,i2___awdiv@dividend
 47918  0040E2  C04E  F002         	movff	displayDigits@number_to_display_temp+1,i2___awdiv@dividend+1
 47919  0040E6  EC37  F03E         	call	i2___awdiv	;wreg free
 47920  0040EA  C001  F00F         	movff	?i2___awdiv,i2___awmod@dividend
 47921  0040EE  C002  F010         	movff	?i2___awdiv+1,i2___awmod@dividend+1
 47922  0040F2  0E00               	movlw	0
 47923  0040F4  6E12               	movwf	i2___awmod@divisor+1,c
 47924  0040F6  0E0A               	movlw	10
 47925  0040F8  6E11               	movwf	i2___awmod@divisor,c
 47926  0040FA  EC04  F043         	call	i2___awmod	;wreg free
 47927  0040FE  500F               	movf	?i2___awmod,w,c
 47928  004100  6E39               	movwf	displayDigits@digit+2,c
 47929                           
 47930                           ;segment.c: 76: digit[3] = number_to_display_temp % 10;
 47931  004102  C04D  F00F         	movff	displayDigits@number_to_display_temp,i2___awmod@dividend
 47932  004106  C04E  F010         	movff	displayDigits@number_to_display_temp+1,i2___awmod@dividend+1
 47933  00410A  0E00               	movlw	0
 47934  00410C  6E12               	movwf	i2___awmod@divisor+1,c
 47935  00410E  0E0A               	movlw	10
 47936  004110  6E11               	movwf	i2___awmod@divisor,c
 47937  004112  EC04  F043         	call	i2___awmod	;wreg free
 47938  004116  500F               	movf	?i2___awmod,w,c
 47939  004118  6E3A               	movwf	displayDigits@digit+3,c
 47940  00411A                     i2l2870:
 47941                           
 47942                           ;segment.c: 77: }
 47943                           ;segment.c: 79: if(DIGIT_MODE == 1) {
 47944  00411A  0459               	decf	_DIGIT_MODE,w,c
 47945  00411C  A4D8               	btfss	status,2,c
 47946  00411E  D022               	goto	i2l2873
 47947                           
 47948                           ;segment.c: 80: digit[0] = (number_to_display >> 12) % 16;
 47949  004120  C05B  F015         	movff	_number_to_display,??_displayDigits
 47950  004124  C05C  F016         	movff	_number_to_display+1,??_displayDigits+1
 47951  004128  0E0C               	movlw	12
 47952  00412A  6E17               	movwf	(??_displayDigits+2)& (0+255),c
 47953  00412C                     i2u3656_45:
 47954  00412C  3416               	rlcf	??_displayDigits+1,w,c
 47955  00412E  3216               	rrcf	??_displayDigits+1,f,c
 47956  004130  3215               	rrcf	??_displayDigits,f,c
 47957  004132  2E17               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47958  004134  D7FB               	goto	i2u3656_45
 47959  004136  5015               	movf	??_displayDigits,w,c
 47960  004138  0B0F               	andlw	15
 47961  00413A  6E37               	movwf	displayDigits@digit,c
 47962                           
 47963                           ;segment.c: 81: digit[1] = (number_to_display >> 8) % 16;
 47964  00413C  505C               	movf	_number_to_display+1,w,c
 47965  00413E  0B0F               	andlw	15
 47966  004140  6E38               	movwf	displayDigits@digit+1,c
 47967                           
 47968                           ;segment.c: 82: digit[2] = (number_to_display >> 4) % 16;
 47969  004142  C05B  F015         	movff	_number_to_display,??_displayDigits
 47970  004146  C05C  F016         	movff	_number_to_display+1,??_displayDigits+1
 47971  00414A  0E04               	movlw	4
 47972  00414C  6E17               	movwf	(??_displayDigits+2)& (0+255),c
 47973  00414E                     i2u3657_45:
 47974  00414E  3416               	rlcf	??_displayDigits+1,w,c
 47975  004150  3216               	rrcf	??_displayDigits+1,f,c
 47976  004152  3215               	rrcf	??_displayDigits,f,c
 47977  004154  2E17               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47978  004156  D7FB               	goto	i2u3657_45
 47979  004158  5015               	movf	??_displayDigits,w,c
 47980  00415A  0B0F               	andlw	15
 47981  00415C  6E39               	movwf	displayDigits@digit+2,c
 47982                           
 47983                           ;segment.c: 83: digit[3] = number_to_display % 16;
 47984  00415E  505B               	movf	_number_to_display,w,c
 47985  004160  0B0F               	andlw	15
 47986  004162  6E3A               	movwf	displayDigits@digit+3,c
 47987  004164                     i2l2873:
 47988                           
 47989                           ;segment.c: 84: }
 47990                           ;segment.c: 86: if(DIGIT_MODE == 2) {
 47991  004164  0E02               	movlw	2
 47992  004166  1859               	xorwf	_DIGIT_MODE,w,c
 47993  004168  A4D8               	btfss	status,2,c
 47994  00416A  D01F               	goto	i2l2874
 47995                           
 47996                           ;segment.c: 88: unsigned char lowByte = number_to_display & 0x7F;
 47997  00416C  505B               	movf	_number_to_display,w,c
 47998  00416E  0B7F               	andlw	127
 47999  004170  6E18               	movwf	displayDigits@lowByte,c
 48000                           
 48001                           ;segment.c: 89: unsigned char highByte = (number_to_display >> 7) & 0x7F;
 48002  004172  C05B  F015         	movff	_number_to_display,??_displayDigits
 48003  004176  C05C  F016         	movff	_number_to_display+1,??_displayDigits+1
 48004  00417A  0E07               	movlw	7
 48005  00417C  6E17               	movwf	(??_displayDigits+2)& (0+255),c
 48006  00417E                     i2u3659_45:
 48007  00417E  3416               	rlcf	??_displayDigits+1,w,c
 48008  004180  3216               	rrcf	??_displayDigits+1,f,c
 48009  004182  3215               	rrcf	??_displayDigits,f,c
 48010  004184  2E17               	decfsz	(??_displayDigits+2)& (0+255),f,c
 48011  004186  D7FB               	goto	i2u3659_45
 48012  004188  5015               	movf	??_displayDigits,w,c
 48013  00418A  0B7F               	andlw	127
 48014  00418C  6E19               	movwf	displayDigits@highByte,c
 48015                           
 48016                           ;segment.c: 91: digit[0] = (highByte >> 4) % 0x8;
 48017  00418E  3819               	swapf	displayDigits@highByte,w,c
 48018  004190  0B0F               	andlw	15
 48019  004192  0B07               	andlw	7
 48020  004194  6E37               	movwf	displayDigits@digit,c
 48021                           
 48022                           ;segment.c: 92: digit[1] = highByte % 16;
 48023  004196  5019               	movf	displayDigits@highByte,w,c
 48024  004198  0B0F               	andlw	15
 48025  00419A  6E38               	movwf	displayDigits@digit+1,c
 48026                           
 48027                           ;segment.c: 93: digit[2] = (lowByte >> 4) % 0x8;
 48028  00419C  3818               	swapf	displayDigits@lowByte,w,c
 48029  00419E  0B0F               	andlw	15
 48030  0041A0  0B07               	andlw	7
 48031  0041A2  6E39               	movwf	displayDigits@digit+2,c
 48032                           
 48033                           ;segment.c: 94: digit[3] = lowByte % 16;
 48034  0041A4  5018               	movf	displayDigits@lowByte,w,c
 48035  0041A6  0B0F               	andlw	15
 48036  0041A8  6E3A               	movwf	displayDigits@digit+3,c
 48037  0041AA                     i2l2874:
 48038                           
 48039                           ;segment.c: 96: }
 48040                           ;segment.c: 99: number_to_display_last = number_to_display;
 48041  0041AA  C05B  F16B         	movff	_number_to_display,displayDigits@number_to_display_last
 48042  0041AE  C05C  F16C         	movff	_number_to_display+1,displayDigits@number_to_display_last+1
 48043  0041B2                     i2l2869:
 48044                           
 48045                           ;segment.c: 100: }
 48046                           ;segment.c: 103: if (DIGIT_MODE == 0 || DIGIT_MODE == 1 || DIGIT_MODE == 2) {
 48047  0041B2  5059               	movf	_DIGIT_MODE,w,c
 48048  0041B4  B4D8               	btfsc	status,2,c
 48049  0041B6  D007               	goto	i2u3662_40
 48050  0041B8  0459               	decf	_DIGIT_MODE,w,c
 48051  0041BA  B4D8               	btfsc	status,2,c
 48052  0041BC  D004               	goto	i2u3662_40
 48053  0041BE  0E02               	movlw	2
 48054  0041C0  1859               	xorwf	_DIGIT_MODE,w,c
 48055  0041C2  A4D8               	btfss	status,2,c
 48056  0041C4  D08A               	goto	i2l2898
 48057  0041C6                     i2u3662_40:
 48058                           
 48059                           ;segment.c: 108: if(digit_counter == 0){
 48060  0041C6  5052               	movf	displayDigits@digit_counter,w,c
 48061  0041C8  A4D8               	btfss	status,2,c
 48062  0041CA  D022               	goto	i2l2885
 48063                           
 48064                           ;segment.c: 109: RC3 = 0;
 48065  0041CC  9682               	bcf	3970,3,c	;volatile
 48066                           
 48067                           ;segment.c: 112: if(DIGIT_MODE == 0 && number_to_display < 0){
 48068  0041CE  5059               	movf	_DIGIT_MODE,w,c
 48069  0041D0  B4D8               	btfsc	status,2,c
 48070  0041D2  AE5C               	btfss	_number_to_display+1,7,c
 48071  0041D4  D00A               	goto	i2l2879
 48072                           
 48073                           ;segment.c: 115: if(digit[1] > 0){PORTD = 0x40; RC0 = 1;}
 48074  0041D6  5038               	movf	displayDigits@digit+1,w,c
 48075  0041D8  B4D8               	btfsc	status,2,c
 48076  0041DA  D003               	goto	i2l2880
 48077  0041DC  0E40               	movlw	64
 48078  0041DE  6E83               	movwf	3971,c	;volatile
 48079  0041E0  8082               	bsf	3970,0,c	;volatile
 48080  0041E2                     i2l2880:
 48081                           
 48082                           ;segment.c: 116: if(light_decimal_points == 1){PORTD |= 0x80;}
 48083  0041E2  AC36               	btfss	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48084  0041E4  D015               	goto	i2l2885
 48085  0041E6  8E83               	bsf	3971,7,c	;volatile
 48086                           
 48087                           ;segment.c: 117: }
 48088  0041E8  D013               	goto	i2l2885
 48089  0041EA                     i2l2879:
 48090                           
 48091                           ;segment.c: 119: else {
 48092                           ;segment.c: 120: PORTD = seg_bcd_hex[digit[0]];
 48093  0041EA  5037               	movf	displayDigits@digit,w,c
 48094  0041EC  0D01               	mullw	1
 48095  0041EE  0E59               	movlw	low _seg_bcd_hex
 48096  0041F0  24F3               	addwf	prodl,w,c
 48097  0041F2  6EF6               	movwf	tblptrl,c
 48098  0041F4  0EF3               	movlw	high _seg_bcd_hex
 48099  0041F6  20F4               	addwfc	prodh,w,c
 48100  0041F8  6EF7               	movwf	tblptrh,c
 48101  0041FA                     	if	0	;There are less than 3 active tblptr bytes
 48102  0041FA                     	endif
 48103  0041FA  0008               	tblrd		*
 48104  0041FC  CFF5 FF83          	movff	tablat,3971	;volatile
 48105                           
 48106                           ;segment.c: 121: if(light_decimal_points == 1){PORTD |= 0x80;}
 48107  004200  BC36               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48108  004202  8E83               	bsf	3971,7,c	;volatile
 48109                           
 48110                           ;segment.c: 122: if(digit[0] == 0){RC0 = 0;}
 48111  004204  5037               	movf	displayDigits@digit,w,c
 48112  004206  A4D8               	btfss	status,2,c
 48113  004208  D002               	goto	i2l2884
 48114  00420A  9082               	bcf	3970,0,c	;volatile
 48115  00420C  D001               	goto	i2l2885
 48116  00420E                     i2l2884:
 48117                           
 48118                           ;segment.c: 123: else{RC0 = 1;}
 48119  00420E  8082               	bsf	3970,0,c	;volatile
 48120  004210                     i2l2885:
 48121                           
 48122                           ;segment.c: 124: }
 48123                           ;segment.c: 125: }
 48124                           ;segment.c: 126: if(digit_counter == 1){
 48125  004210  0452               	decf	displayDigits@digit_counter,w,c
 48126  004212  A4D8               	btfss	status,2,c
 48127  004214  D024               	goto	i2l2891
 48128                           
 48129                           ;segment.c: 127: RC0 = 0;
 48130  004216  9082               	bcf	3970,0,c	;volatile
 48131                           
 48132                           ;segment.c: 128: PORTD = seg_bcd_hex[digit[1]];
 48133  004218  5038               	movf	displayDigits@digit+1,w,c
 48134  00421A  0D01               	mullw	1
 48135  00421C  0E59               	movlw	low _seg_bcd_hex
 48136  00421E  24F3               	addwf	prodl,w,c
 48137  004220  6EF6               	movwf	tblptrl,c
 48138  004222  0EF3               	movlw	high _seg_bcd_hex
 48139  004224  20F4               	addwfc	prodh,w,c
 48140  004226  6EF7               	movwf	tblptrh,c
 48141  004228                     	if	0	;There are less than 3 active tblptr bytes
 48142  004228                     	endif
 48143  004228  0008               	tblrd		*
 48144  00422A  CFF5 FF83          	movff	tablat,3971	;volatile
 48145                           
 48146                           ;segment.c: 129: if(light_decimal_points == 1){PORTD |= 0x80;}
 48147  00422E  BC36               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48148  004230  8E83               	bsf	3971,7,c	;volatile
 48149                           
 48150                           ;segment.c: 130: if(digit[0] == 0 && digit[1] == 0){RC1 = 0;}
 48151  004232  5037               	movf	displayDigits@digit,w,c
 48152  004234  A4D8               	btfss	status,2,c
 48153  004236  D005               	goto	i2l2888
 48154  004238  5038               	movf	displayDigits@digit+1,w,c
 48155  00423A  A4D8               	btfss	status,2,c
 48156  00423C  D002               	goto	i2l2888
 48157  00423E  9282               	bcf	3970,1,c	;volatile
 48158  004240  D001               	goto	i2l2889
 48159  004242                     i2l2888:
 48160                           
 48161                           ;segment.c: 131: else{RC1 = 1;}
 48162  004242  8282               	bsf	3970,1,c	;volatile
 48163  004244                     i2l2889:
 48164                           
 48165                           ;segment.c: 133: if(DIGIT_MODE == 0 && number_to_display < 0){
 48166  004244  5059               	movf	_DIGIT_MODE,w,c
 48167  004246  B4D8               	btfsc	status,2,c
 48168  004248  AE5C               	btfss	_number_to_display+1,7,c
 48169  00424A  D009               	goto	i2l2891
 48170                           
 48171                           ;segment.c: 135: if(digit[2] > 0 && digit[1] == 0){PORTD = 0x40; RC1 = 1;}
 48172  00424C  5039               	movf	displayDigits@digit+2,w,c
 48173  00424E  B4D8               	btfsc	status,2,c
 48174  004250  D006               	goto	i2l2891
 48175  004252  5038               	movf	displayDigits@digit+1,w,c
 48176  004254  A4D8               	btfss	status,2,c
 48177  004256  D003               	goto	i2l2891
 48178  004258  0E40               	movlw	64
 48179  00425A  6E83               	movwf	3971,c	;volatile
 48180  00425C  8282               	bsf	3970,1,c	;volatile
 48181  00425E                     i2l2891:
 48182                           
 48183                           ;segment.c: 136: }
 48184                           ;segment.c: 137: }
 48185                           ;segment.c: 138: if(digit_counter == 2){
 48186  00425E  0E02               	movlw	2
 48187  004260  1852               	xorwf	displayDigits@digit_counter,w,c
 48188  004262  A4D8               	btfss	status,2,c
 48189  004264  D027               	goto	i2l2897
 48190                           
 48191                           ;segment.c: 139: RC1 = 0;
 48192  004266  9282               	bcf	3970,1,c	;volatile
 48193                           
 48194                           ;segment.c: 140: PORTD = seg_bcd_hex[digit[2]];
 48195  004268  5039               	movf	displayDigits@digit+2,w,c
 48196  00426A  0D01               	mullw	1
 48197  00426C  0E59               	movlw	low _seg_bcd_hex
 48198  00426E  24F3               	addwf	prodl,w,c
 48199  004270  6EF6               	movwf	tblptrl,c
 48200  004272  0EF3               	movlw	high _seg_bcd_hex
 48201  004274  20F4               	addwfc	prodh,w,c
 48202  004276  6EF7               	movwf	tblptrh,c
 48203  004278                     	if	0	;There are less than 3 active tblptr bytes
 48204  004278                     	endif
 48205  004278  0008               	tblrd		*
 48206  00427A  CFF5 FF83          	movff	tablat,3971	;volatile
 48207                           
 48208                           ;segment.c: 141: if(light_decimal_points == 1){PORTD |= 0x80;}
 48209  00427E  BC36               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48210  004280  8E83               	bsf	3971,7,c	;volatile
 48211                           
 48212                           ;segment.c: 142: if(digit[0] == 0 && digit[1] == 0 && digit[2] == 0){RC2 = 0;}
 48213  004282  5037               	movf	displayDigits@digit,w,c
 48214  004284  A4D8               	btfss	status,2,c
 48215  004286  D008               	goto	i2l2894
 48216  004288  5038               	movf	displayDigits@digit+1,w,c
 48217  00428A  A4D8               	btfss	status,2,c
 48218  00428C  D005               	goto	i2l2894
 48219  00428E  5039               	movf	displayDigits@digit+2,w,c
 48220  004290  A4D8               	btfss	status,2,c
 48221  004292  D002               	goto	i2l2894
 48222  004294  9482               	bcf	3970,2,c	;volatile
 48223  004296  D001               	goto	i2l2895
 48224  004298                     i2l2894:
 48225                           
 48226                           ;segment.c: 143: else{RC2 = 1;}
 48227  004298  8482               	bsf	3970,2,c	;volatile
 48228  00429A                     i2l2895:
 48229                           
 48230                           ;segment.c: 145: if(DIGIT_MODE == 0 && number_to_display < 0){
 48231  00429A  5059               	movf	_DIGIT_MODE,w,c
 48232  00429C  B4D8               	btfsc	status,2,c
 48233  00429E  AE5C               	btfss	_number_to_display+1,7,c
 48234  0042A0  D009               	goto	i2l2897
 48235                           
 48236                           ;segment.c: 146: if(digit[3] > 0 && digit[2] == 0){PORTD = 0x40; RC2 = 1;}
 48237  0042A2  503A               	movf	displayDigits@digit+3,w,c
 48238  0042A4  B4D8               	btfsc	status,2,c
 48239  0042A6  D006               	goto	i2l2897
 48240  0042A8  5039               	movf	displayDigits@digit+2,w,c
 48241  0042AA  A4D8               	btfss	status,2,c
 48242  0042AC  D003               	goto	i2l2897
 48243  0042AE  0E40               	movlw	64
 48244  0042B0  6E83               	movwf	3971,c	;volatile
 48245  0042B2  8482               	bsf	3970,2,c	;volatile
 48246  0042B4                     i2l2897:
 48247                           
 48248                           ;segment.c: 147: }
 48249                           ;segment.c: 148: }
 48250                           ;segment.c: 149: if(digit_counter == 3){
 48251  0042B4  0E03               	movlw	3
 48252  0042B6  1852               	xorwf	displayDigits@digit_counter,w,c
 48253  0042B8  A4D8               	btfss	status,2,c
 48254  0042BA  D00F               	goto	i2l2898
 48255                           
 48256                           ;segment.c: 150: RC2 = 0;
 48257  0042BC  9482               	bcf	3970,2,c	;volatile
 48258                           
 48259                           ;segment.c: 151: PORTD = seg_bcd_hex[digit[3]];
 48260  0042BE  503A               	movf	displayDigits@digit+3,w,c
 48261  0042C0  0D01               	mullw	1
 48262  0042C2  0E59               	movlw	low _seg_bcd_hex
 48263  0042C4  24F3               	addwf	prodl,w,c
 48264  0042C6  6EF6               	movwf	tblptrl,c
 48265  0042C8  0EF3               	movlw	high _seg_bcd_hex
 48266  0042CA  20F4               	addwfc	prodh,w,c
 48267  0042CC  6EF7               	movwf	tblptrh,c
 48268  0042CE                     	if	0	;There are less than 3 active tblptr bytes
 48269  0042CE                     	endif
 48270  0042CE  0008               	tblrd		*
 48271  0042D0  CFF5 FF83          	movff	tablat,3971	;volatile
 48272                           
 48273                           ;segment.c: 152: if(light_decimal_points == 1){PORTD |= 0x80;}
 48274  0042D4  BC36               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48275  0042D6  8E83               	bsf	3971,7,c	;volatile
 48276                           
 48277                           ;segment.c: 153: RC3 = 1;
 48278  0042D8  8682               	bsf	3970,3,c	;volatile
 48279  0042DA                     i2l2898:
 48280                           
 48281                           ;segment.c: 154: }
 48282                           ;segment.c: 155: }
 48283                           ;segment.c: 158: digit_counter++;
 48284  0042DA  2A52               	incf	displayDigits@digit_counter,f,c
 48285                           
 48286                           ;segment.c: 159: if(digit_counter > 3){digit_counter = 0;}
 48287  0042DC  0E03               	movlw	3
 48288  0042DE  6452               	cpfsgt	displayDigits@digit_counter,c
 48289  0042E0  0012               	return	
 48290  0042E2  0E00               	movlw	0
 48291  0042E4  6E52               	movwf	displayDigits@digit_counter,c
 48292  0042E6  0012               	return	
 48293  0042E8                     __end_of_displayDigits:
 48294                           	opt stack 0
 48295                           pclatu	equ	0xFFB
 48296                           pclath	equ	0xFFA
 48297                           tblptru	equ	0xFF8
 48298                           tblptrh	equ	0xFF7
 48299                           tblptrl	equ	0xFF6
 48300                           tablat	equ	0xFF5
 48301                           prodh	equ	0xFF4
 48302                           prodl	equ	0xFF3
 48303                           intcon	equ	0xFF2
 48304                           intcon2	equ	0xFF1
 48305                           postinc0	equ	0xFEE
 48306                           fsr0h	equ	0xFEA
 48307                           fsr0l	equ	0xFE9
 48308                           wreg	equ	0xFE8
 48309                           indf1	equ	0xFE7
 48310                           postinc1	equ	0xFE6
 48311                           postdec1	equ	0xFE5
 48312                           fsr1h	equ	0xFE2
 48313                           fsr1l	equ	0xFE1
 48314                           indf2	equ	0xFDF
 48315                           postinc2	equ	0xFDE
 48316                           postdec2	equ	0xFDD
 48317                           plusw2	equ	0xFDB
 48318                           fsr2h	equ	0xFDA
 48319                           fsr2l	equ	0xFD9
 48320                           status	equ	0xFD8
 48321                           
 48322 ;; *************** function i2___awmod *****************
 48323 ;; Defined at:
 48324 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 48325 ;; Parameters:    Size  Location     Type
 48326 ;;  dividend        2   14[COMRAM] int 
 48327 ;;  divisor         2   16[COMRAM] int 
 48328 ;; Auto vars:     Size  Location     Type
 48329 ;;  __awmod         1   19[COMRAM] unsigned char 
 48330 ;;  __awmod         1   18[COMRAM] unsigned char 
 48331 ;; Return value:  Size  Location     Type
 48332 ;;                  2   14[COMRAM] int 
 48333 ;; Registers used:
 48334 ;;		wreg, status,2, status,0
 48335 ;; Tracked objects:
 48336 ;;		On entry : 0/0
 48337 ;;		On exit  : 0/0
 48338 ;;		Unchanged: 0/0
 48339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 48340 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48341 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48343 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48344 ;;Total ram usage:        6 bytes
 48345 ;; Hardware stack levels used:    1
 48346 ;; This function calls:
 48347 ;;		Nothing
 48348 ;; This function is called by:
 48349 ;;		_displayDigits
 48350 ;;		_playArpeggio
 48351 ;;		i2_random_pitches
 48352 ;;		i2_random_pitches_non_repeating
 48353 ;; This function uses a non-reentrant model
 48354 ;;
 48355                           
 48356                           	psect	text156
 48357  008608                     __ptext156:
 48358                           	opt stack 0
 48359  008608                     i2___awmod:
 48360                           	opt stack 15
 48361                           
 48362                           ;incstack = 0
 48363  008608  0E00               	movlw	0
 48364  00860A  6E14               	movwf	i2___awmod@sign,c
 48365  00860C  AE10               	btfss	i2___awmod@dividend+1,7,c
 48366  00860E  D006               	goto	i2l5608
 48367  008610  6C0F               	negf	i2___awmod@dividend,c
 48368  008612  1E10               	comf	i2___awmod@dividend+1,f,c
 48369  008614  B0D8               	btfsc	status,0,c
 48370  008616  2A10               	incf	i2___awmod@dividend+1,f,c
 48371  008618  0E01               	movlw	1
 48372  00861A  6E14               	movwf	i2___awmod@sign,c
 48373  00861C                     i2l5608:
 48374  00861C  AE12               	btfss	i2___awmod@divisor+1,7,c
 48375  00861E  D004               	goto	i2l5609
 48376  008620  6C11               	negf	i2___awmod@divisor,c
 48377  008622  1E12               	comf	i2___awmod@divisor+1,f,c
 48378  008624  B0D8               	btfsc	status,0,c
 48379  008626  2A12               	incf	i2___awmod@divisor+1,f,c
 48380  008628                     i2l5609:
 48381  008628  5011               	movf	i2___awmod@divisor,w,c
 48382  00862A  1012               	iorwf	i2___awmod@divisor+1,w,c
 48383  00862C  B4D8               	btfsc	status,2,c
 48384  00862E  D018               	goto	i2l5616
 48385  008630  0E01               	movlw	1
 48386  008632  6E13               	movwf	i2___awmod@counter,c
 48387  008634  D004               	goto	i2l5611
 48388  008636  90D8               	bcf	status,0,c
 48389  008638  3611               	rlcf	i2___awmod@divisor,f,c
 48390  00863A  3612               	rlcf	i2___awmod@divisor+1,f,c
 48391  00863C  2A13               	incf	i2___awmod@counter,f,c
 48392  00863E                     i2l5611:
 48393  00863E  AE12               	btfss	i2___awmod@divisor+1,7,c
 48394  008640  D7FA               	goto	i2l5612
 48395  008642                     i2u3422_40:
 48396  008642  5011               	movf	i2___awmod@divisor,w,c
 48397  008644  5C0F               	subwf	i2___awmod@dividend,w,c
 48398  008646  5012               	movf	i2___awmod@divisor+1,w,c
 48399  008648  5810               	subwfb	i2___awmod@dividend+1,w,c
 48400  00864A  A0D8               	btfss	status,0,c
 48401  00864C  D004               	goto	i2l5615
 48402  00864E  5011               	movf	i2___awmod@divisor,w,c
 48403  008650  5E0F               	subwf	i2___awmod@dividend,f,c
 48404  008652  5012               	movf	i2___awmod@divisor+1,w,c
 48405  008654  5A10               	subwfb	i2___awmod@dividend+1,f,c
 48406  008656                     i2l5615:
 48407  008656  90D8               	bcf	status,0,c
 48408  008658  3212               	rrcf	i2___awmod@divisor+1,f,c
 48409  00865A  3211               	rrcf	i2___awmod@divisor,f,c
 48410  00865C  2E13               	decfsz	i2___awmod@counter,f,c
 48411  00865E  D7F1               	goto	i2u3422_40
 48412  008660                     i2l5616:
 48413  008660  5014               	movf	i2___awmod@sign,w,c
 48414  008662  B4D8               	btfsc	status,2,c
 48415  008664  D004               	goto	i2l5617
 48416  008666  6C0F               	negf	i2___awmod@dividend,c
 48417  008668  1E10               	comf	i2___awmod@dividend+1,f,c
 48418  00866A  B0D8               	btfsc	status,0,c
 48419  00866C  2A10               	incf	i2___awmod@dividend+1,f,c
 48420  00866E                     i2l5617:
 48421  00866E  C00F  F00F         	movff	i2___awmod@dividend,?i2___awmod
 48422  008672  C010  F010         	movff	i2___awmod@dividend+1,?i2___awmod+1
 48423  008676  0012               	return	
 48424  008678                     __end_ofi2___awmod:
 48425                           	opt stack 0
 48426                           pclatu	equ	0xFFB
 48427                           pclath	equ	0xFFA
 48428                           tblptru	equ	0xFF8
 48429                           tblptrh	equ	0xFF7
 48430                           tblptrl	equ	0xFF6
 48431                           tablat	equ	0xFF5
 48432                           prodh	equ	0xFF4
 48433                           prodl	equ	0xFF3
 48434                           intcon	equ	0xFF2
 48435                           intcon2	equ	0xFF1
 48436                           postinc0	equ	0xFEE
 48437                           fsr0h	equ	0xFEA
 48438                           fsr0l	equ	0xFE9
 48439                           wreg	equ	0xFE8
 48440                           indf1	equ	0xFE7
 48441                           postinc1	equ	0xFE6
 48442                           postdec1	equ	0xFE5
 48443                           fsr1h	equ	0xFE2
 48444                           fsr1l	equ	0xFE1
 48445                           indf2	equ	0xFDF
 48446                           postinc2	equ	0xFDE
 48447                           postdec2	equ	0xFDD
 48448                           plusw2	equ	0xFDB
 48449                           fsr2h	equ	0xFDA
 48450                           fsr2l	equ	0xFD9
 48451                           status	equ	0xFD8
 48452                           
 48453 ;; *************** function i2___awdiv *****************
 48454 ;; Defined at:
 48455 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 48456 ;; Parameters:    Size  Location     Type
 48457 ;;  dividend        2    0[COMRAM] int 
 48458 ;;  divisor         2    2[COMRAM] int 
 48459 ;; Auto vars:     Size  Location     Type
 48460 ;;  __awdiv         2    6[COMRAM] int 
 48461 ;;  __awdiv         1    5[COMRAM] unsigned char 
 48462 ;;  __awdiv         1    4[COMRAM] unsigned char 
 48463 ;; Return value:  Size  Location     Type
 48464 ;;                  2    0[COMRAM] int 
 48465 ;; Registers used:
 48466 ;;		wreg, status,2, status,0
 48467 ;; Tracked objects:
 48468 ;;		On entry : 0/0
 48469 ;;		On exit  : 0/0
 48470 ;;		Unchanged: 0/0
 48471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 48472 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48473 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48475 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48476 ;;Total ram usage:        8 bytes
 48477 ;; Hardware stack levels used:    1
 48478 ;; This function calls:
 48479 ;;		Nothing
 48480 ;; This function is called by:
 48481 ;;		_displayDigits
 48482 ;; This function uses a non-reentrant model
 48483 ;;
 48484                           
 48485                           	psect	text157
 48486  007C6E                     __ptext157:
 48487                           	opt stack 0
 48488  007C6E                     i2___awdiv:
 48489                           	opt stack 15
 48490                           
 48491                           ;incstack = 0
 48492  007C6E  0E00               	movlw	0
 48493  007C70  6E06               	movwf	i2___awdiv@sign,c
 48494  007C72  AE04               	btfss	i2___awdiv@divisor+1,7,c
 48495  007C74  D006               	goto	i2l5595
 48496  007C76  6C03               	negf	i2___awdiv@divisor,c
 48497  007C78  1E04               	comf	i2___awdiv@divisor+1,f,c
 48498  007C7A  B0D8               	btfsc	status,0,c
 48499  007C7C  2A04               	incf	i2___awdiv@divisor+1,f,c
 48500  007C7E  0E01               	movlw	1
 48501  007C80  6E06               	movwf	i2___awdiv@sign,c
 48502  007C82                     i2l5595:
 48503  007C82  AE02               	btfss	i2___awdiv@dividend+1,7,c
 48504  007C84  D006               	goto	i2l5596
 48505  007C86  6C01               	negf	i2___awdiv@dividend,c
 48506  007C88  1E02               	comf	i2___awdiv@dividend+1,f,c
 48507  007C8A  B0D8               	btfsc	status,0,c
 48508  007C8C  2A02               	incf	i2___awdiv@dividend+1,f,c
 48509  007C8E  0E01               	movlw	1
 48510  007C90  1A06               	xorwf	i2___awdiv@sign,f,c
 48511  007C92                     i2l5596:
 48512  007C92  0E00               	movlw	0
 48513  007C94  6E08               	movwf	i2___awdiv@quotient+1,c
 48514  007C96  0E00               	movlw	0
 48515  007C98  6E07               	movwf	i2___awdiv@quotient,c
 48516  007C9A  5003               	movf	i2___awdiv@divisor,w,c
 48517  007C9C  1004               	iorwf	i2___awdiv@divisor+1,w,c
 48518  007C9E  B4D8               	btfsc	status,2,c
 48519  007CA0  D01C               	goto	i2l5603
 48520  007CA2  0E01               	movlw	1
 48521  007CA4  6E05               	movwf	i2___awdiv@counter,c
 48522  007CA6  D004               	goto	i2l5598
 48523  007CA8  90D8               	bcf	status,0,c
 48524  007CAA  3603               	rlcf	i2___awdiv@divisor,f,c
 48525  007CAC  3604               	rlcf	i2___awdiv@divisor+1,f,c
 48526  007CAE  2A05               	incf	i2___awdiv@counter,f,c
 48527  007CB0                     i2l5598:
 48528  007CB0  AE04               	btfss	i2___awdiv@divisor+1,7,c
 48529  007CB2  D7FA               	goto	i2l5599
 48530  007CB4                     i2u3416_40:
 48531  007CB4  90D8               	bcf	status,0,c
 48532  007CB6  3607               	rlcf	i2___awdiv@quotient,f,c
 48533  007CB8  3608               	rlcf	i2___awdiv@quotient+1,f,c
 48534  007CBA  5003               	movf	i2___awdiv@divisor,w,c
 48535  007CBC  5C01               	subwf	i2___awdiv@dividend,w,c
 48536  007CBE  5004               	movf	i2___awdiv@divisor+1,w,c
 48537  007CC0  5802               	subwfb	i2___awdiv@dividend+1,w,c
 48538  007CC2  A0D8               	btfss	status,0,c
 48539  007CC4  D005               	goto	i2l5602
 48540  007CC6  5003               	movf	i2___awdiv@divisor,w,c
 48541  007CC8  5E01               	subwf	i2___awdiv@dividend,f,c
 48542  007CCA  5004               	movf	i2___awdiv@divisor+1,w,c
 48543  007CCC  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 48544  007CCE  8007               	bsf	i2___awdiv@quotient,0,c
 48545  007CD0                     i2l5602:
 48546  007CD0  90D8               	bcf	status,0,c
 48547  007CD2  3204               	rrcf	i2___awdiv@divisor+1,f,c
 48548  007CD4  3203               	rrcf	i2___awdiv@divisor,f,c
 48549  007CD6  2E05               	decfsz	i2___awdiv@counter,f,c
 48550  007CD8  D7ED               	goto	i2u3416_40
 48551  007CDA                     i2l5603:
 48552  007CDA  5006               	movf	i2___awdiv@sign,w,c
 48553  007CDC  B4D8               	btfsc	status,2,c
 48554  007CDE  D004               	goto	i2l5604
 48555  007CE0  6C07               	negf	i2___awdiv@quotient,c
 48556  007CE2  1E08               	comf	i2___awdiv@quotient+1,f,c
 48557  007CE4  B0D8               	btfsc	status,0,c
 48558  007CE6  2A08               	incf	i2___awdiv@quotient+1,f,c
 48559  007CE8                     i2l5604:
 48560  007CE8  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 48561  007CEC  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 48562  007CF0  0012               	return	
 48563  007CF2                     __end_ofi2___awdiv:
 48564                           	opt stack 0
 48565                           pclatu	equ	0xFFB
 48566                           pclath	equ	0xFFA
 48567                           tblptru	equ	0xFF8
 48568                           tblptrh	equ	0xFF7
 48569                           tblptrl	equ	0xFF6
 48570                           tablat	equ	0xFF5
 48571                           prodh	equ	0xFF4
 48572                           prodl	equ	0xFF3
 48573                           intcon	equ	0xFF2
 48574                           intcon2	equ	0xFF1
 48575                           postinc0	equ	0xFEE
 48576                           fsr0h	equ	0xFEA
 48577                           fsr0l	equ	0xFE9
 48578                           wreg	equ	0xFE8
 48579                           indf1	equ	0xFE7
 48580                           postinc1	equ	0xFE6
 48581                           postdec1	equ	0xFE5
 48582                           fsr1h	equ	0xFE2
 48583                           fsr1l	equ	0xFE1
 48584                           indf2	equ	0xFDF
 48585                           postinc2	equ	0xFDE
 48586                           postdec2	equ	0xFDD
 48587                           plusw2	equ	0xFDB
 48588                           fsr2h	equ	0xFDA
 48589                           fsr2l	equ	0xFD9
 48590                           status	equ	0xFD8
 48591                           pclatu	equ	0xFFB
 48592                           pclath	equ	0xFFA
 48593                           tblptru	equ	0xFF8
 48594                           tblptrh	equ	0xFF7
 48595                           tblptrl	equ	0xFF6
 48596                           tablat	equ	0xFF5
 48597                           prodh	equ	0xFF4
 48598                           prodl	equ	0xFF3
 48599                           intcon	equ	0xFF2
 48600                           intcon2	equ	0xFF1
 48601                           postinc0	equ	0xFEE
 48602                           fsr0h	equ	0xFEA
 48603                           fsr0l	equ	0xFE9
 48604                           wreg	equ	0xFE8
 48605                           indf1	equ	0xFE7
 48606                           postinc1	equ	0xFE6
 48607                           postdec1	equ	0xFE5
 48608                           fsr1h	equ	0xFE2
 48609                           fsr1l	equ	0xFE1
 48610                           indf2	equ	0xFDF
 48611                           postinc2	equ	0xFDE
 48612                           postdec2	equ	0xFDD
 48613                           plusw2	equ	0xFDB
 48614                           fsr2h	equ	0xFDA
 48615                           fsr2l	equ	0xFD9
 48616                           status	equ	0xFD8
 48617                           
 48618                           	psect	rparam
 48619  0000                     pclatu	equ	0xFFB
 48620                           pclath	equ	0xFFA
 48621                           tblptru	equ	0xFF8
 48622                           tblptrh	equ	0xFF7
 48623                           tblptrl	equ	0xFF6
 48624                           tablat	equ	0xFF5
 48625                           prodh	equ	0xFF4
 48626                           prodl	equ	0xFF3
 48627                           intcon	equ	0xFF2
 48628                           intcon2	equ	0xFF1
 48629                           postinc0	equ	0xFEE
 48630                           fsr0h	equ	0xFEA
 48631                           fsr0l	equ	0xFE9
 48632                           wreg	equ	0xFE8
 48633                           indf1	equ	0xFE7
 48634                           postinc1	equ	0xFE6
 48635                           postdec1	equ	0xFE5
 48636                           fsr1h	equ	0xFE2
 48637                           fsr1l	equ	0xFE1
 48638                           indf2	equ	0xFDF
 48639                           postinc2	equ	0xFDE
 48640                           postdec2	equ	0xFDD
 48641                           plusw2	equ	0xFDB
 48642                           fsr2h	equ	0xFDA
 48643                           fsr2l	equ	0xFD9
 48644                           status	equ	0xFD8
 48645                           
 48646                           	psect	temp
 48647  00005F                     btemp:
 48648                           	opt stack 0
 48649  00005F                     	ds	1
 48650  0000                     int$flags	set	btemp
 48651  0000                     wtemp6	set	btemp+1
 48652                           pclatu	equ	0xFFB
 48653                           pclath	equ	0xFFA
 48654                           tblptru	equ	0xFF8
 48655                           tblptrh	equ	0xFF7
 48656                           tblptrl	equ	0xFF6
 48657                           tablat	equ	0xFF5
 48658                           prodh	equ	0xFF4
 48659                           prodl	equ	0xFF3
 48660                           intcon	equ	0xFF2
 48661                           intcon2	equ	0xFF1
 48662                           postinc0	equ	0xFEE
 48663                           fsr0h	equ	0xFEA
 48664                           fsr0l	equ	0xFE9
 48665                           wreg	equ	0xFE8
 48666                           indf1	equ	0xFE7
 48667                           postinc1	equ	0xFE6
 48668                           postdec1	equ	0xFE5
 48669                           fsr1h	equ	0xFE2
 48670                           fsr1l	equ	0xFE1
 48671                           indf2	equ	0xFDF
 48672                           postinc2	equ	0xFDE
 48673                           postdec2	equ	0xFDD
 48674                           plusw2	equ	0xFDB
 48675                           fsr2h	equ	0xFDA
 48676                           fsr2l	equ	0xFD9
 48677                           status	equ	0xFD8


Data Sizes:
    Strings     667
    Constant    5281
    Data        238
    BSS         382
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      94
    BANK0           160    112     160
    BANK1           256     80     255
    BANK2           256      0     252
    BANK3           256      0     105
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_60(CODE[5]), STR_58(CODE[5]), STR_55(CODE[5]), STR_53(CODE[5]), 
		 -> STR_43(CODE[5]), STR_41(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    arpeggioPtr	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), ARPEGGIO_RANDOM(BANK2[16]), ARPEGGIO_SORTED(BANK2[16]), ARPEGGIO(BANK1[16]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    playThisNote8@mode_p	PTR unsigned char  size(2) Largest target is 15
		 -> locrian_key(CODE[15]), aeolian_key(CODE[15]), mixolydian_key(CODE[15]), lydian_key(CODE[15]), 
		 -> phrygian_key(CODE[15]), dorian_key(CODE[15]), ionian_key(CODE[15]), 

    playSeventh@seventh_p	PTR unsigned char  size(2) Largest target is 4
		 -> diminished_7th(BANK2[4]), half_diminished_7th(BANK2[4]), minor_7th(BANK2[4]), major_7th(BANK2[4]), 
		 -> dominant_7th(BANK2[4]), 

    playTriad@triad_p	PTR unsigned char  size(2) Largest target is 3
		 -> diminished_triad(BANK1[3]), augmented_triad(BANK1[3]), minor_triad(BANK1[3]), major_triad(BANK1[3]), 

    Lcd_Print_String@a	PTR unsigned char  size(2) Largest target is 2397
		 -> STR_74(CODE[16]), STR_73(CODE[12]), STR_72(CODE[10]), STR_71(CODE[12]), 
		 -> STR_70(CODE[10]), STR_69(CODE[12]), STR_68(CODE[10]), STR_67(CODE[12]), 
		 -> STR_66(CODE[10]), STR_65(CODE[12]), STR_64(CODE[13]), STR_63(CODE[15]), 
		 -> STR_62(CODE[15]), STR_61(CODE[16]), STR_59(CODE[14]), STR_57(CODE[12]), 
		 -> STR_56(CODE[15]), STR_54(CODE[14]), STR_52(CODE[15]), STR_51(CODE[17]), 
		 -> STR_50(CODE[9]), STR_49(CODE[10]), STR_48(CODE[13]), STR_47(CODE[13]), 
		 -> STR_46(CODE[17]), STR_45(CODE[14]), STR_44(CODE[14]), STR_42(CODE[15]), 
		 -> STR_40(CODE[16]), STR_39(CODE[17]), STR_38(CODE[13]), STR_37(CODE[17]), 
		 -> STR_36(CODE[8]), STR_35(CODE[8]), STR_34(CODE[12]), STR_33(CODE[17]), 
		 -> STR_32(CODE[15]), STR_31(CODE[14]), STR_30(CODE[17]), STR_29(CODE[15]), 
		 -> STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[16]), STR_25(CODE[14]), 
		 -> STR_24(CODE[12]), LCD_STRINGS(CODE[2397]), STR_23(CODE[13]), STR_22(CODE[17]), 
		 -> STR_21(CODE[16]), STR_20(CODE[5]), STR_19(CODE[11]), STR_18(CODE[11]), 
		 -> STR_17(CODE[11]), STR_16(CODE[10]), STR_15(CODE[11]), STR_14(CODE[11]), 
		 -> STR_13(CODE[11]), STR_12(CODE[10]), string2display(BANK1[5]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_playArpeggio
    _playArpeggio->i2_random_pitches_non_repeating
    i2_random_pitches_non_repeating->i2___awmod
    i2_random_pitches->i2___awmod
    i2_rand->i2___lmul
    i2_noteOn->i2_noteOff
    i2_noteOff->i2_sendUSB
    _display->_displayDigits
    _displayDigits->i2___awmod
    i2___awmod->i2_rand

Critical Paths under _main in BANK0

    _main->_menu_lcd
    _panic_button->_controlChange
    _menu_lcd->_Function_G
    _Lcd_Clear->_Lcd_Cmd
    _Function_H_9->_Function_H_9_1
    _Function_H_9->_Function_H_9_2
    _Function_H_9->_Function_H_9_3
    _Function_H_9->_Function_H_9_4
    _Function_H_9_4->_Lcd_Print_String
    _Function_H_9_3->_Lcd_Print_String
    _Function_H_9_2->_Lcd_Print_String
    _Function_H_9_1->_Lcd_Print_String
    _Function_H_8->_Lcd_Print_String
    _Function_H_8_2->_Lcd_Print_String
    _Function_H_8_1->_Lcd_Print_String
    _Function_H_7->_Lcd_Print_String
    _Function_H_6_2->_Lcd_Print_String
    _Function_H_6_1->_doTheUnLatch
    _Function_H_5->_Lcd_Print_String
    _Function_H_3->_int2string
    _Function_H_2->_calculate_pulse_length
    _Function_H_1->_Lcd_Print_String
    _Function_G->_Function_G_2
    _Function_G_4->_exitFunction
    _exitFunction->_Lcd_Print_String
    _Function_G_3->_Lcd_Print_String
    _loadFromEEPROM->_calculate_pulse_length
    _calculate_pulse_length->___fltol
    _exitLoad->_Lcd_Print_String
    _Function_G_1->_saveToEEPROM
    _exitSave->_Lcd_Print_String
    _eepromExit->_Lcd_Print_String
    _Function_F->_int2string
    _programChange->_sendUSB
    _Function_E_2->_int2string
    _Function_E_1->_int2string
    _Function_D_5->_setControllerNumbers
    _Function_D_4->_setControllerNumbers
    _Function_D_3->_setControllerNumbers
    _setControllerNumbers->_int2string
    _calculate_alpha->___fldiv
    ___fldiv->___flmul
    _Function_D_1->_Lcd_Print_String
    _Function_C->_Function_C_2
    _Function_C->_Function_C_3
    _Function_C_3->_int2string
    _Function_C_2->_int2string
    _int2string->___awmod
    _Function_C_1->_Lcd_Print_String
    _Function_B->_Lcd_Print_String
    _Function_A->_Function_A_1
    _Function_A->_Function_A_2
    _Function_A->_Function_A_3
    _Function_A_3->_Lcd_Print_String
    _Function_A_2->_Lcd_Print_String
    _Function_A_1->_Lcd_Print_String
    _clear_row2->_Lcd_Print_String
    _clear_row1->_Lcd_Print_String
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->___wmul
    _Lcd_Print_Char->_Lcd_SetBit
    _initializeSaveSlotsOnce->_saveToEEPROM
    _saveToEEPROM->_Write_b_eep
    _initializeMenuArray->___wmul
    _displayTest->_strcpy
    _digitalInputs->_processOctave
    _processOctave->_doTheUnLatch
    _doTheUnLatch->_playThisNote8
    _doTheLatch->_strcpy
    ___wmul->___lbmod
    _processKeyboard->_keyboard_eight_note_efficient
    _keyboard_sharps_only_efficient->_playThisNotePentatonic
    _keyboard_eight_note_efficient->_playThisNote8
    _playThisNote8->_playDiatonicSeventhMajor
    _playThisNote8->_playDiatonicSeventhMinor
    _playThisNote8->_playDiatonicTriadMajor
    _playThisNote8->_playDiatonicTriadMinor
    _keyboard_all_note_efficient->_playThisNote
    _playThisNote->_playSeventh
    _playThisNote->_playTriad
    _noteOn->_noteOff
    _setupArpeggio->_random_pitches_non_repeating
    _random_pitches_non_repeating->___awmod
    _random_pitches->___awmod
    _rand->___lmul
    ___awmod->_rand
    _delete_notes_from_arpeggio->_rotateArrayLeft
    _add_notes_to_arpeggio->_rotateArrayLeft
    _processDrumpad->_noteOnDrum
    _noteOnDrum->_noteOff
    _noteOffDrum->_sendUSB
    _key_press_release_note_off->_noteOff
    _noteOff->_sendUSB
    _analogInputs->_readPotentiometers
    _readPotentiometers->___fltol
    _processPotentiometers->_controlChange
    _processPotentiometers->_pitchBend
    _pitchBend->_sendUSB
    _controlChange->_sendUSB
    _map->___aldiv
    ___aldiv->___lmul
    ___fltol->___fladd
    ___flneg->___fldiv
    ___flmul->___xxtofl
    ___fladd->___flneg
    _Lcd_Start->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_SetBit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _selectSlotOnBoot->_loadFromEEPROM
    _Function_G_2->_loadFromEEPROM

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0 9895578
                                            111 BANK0      1     1      0
                     _ADC_Initialize
                          _Lcd_Start
                         _Read_b_eep
                       _analogInputs
                    _calculate_alpha
             _calculate_pulse_length
                      _digitalInputs
                        _displayTest
                _initializeMenuArray
            _initializeSaveSlotsOnce
                           _menu_lcd
                       _panic_button
               _processEncoderBuxton
                   _selectSlotOnBoot
                              _setup
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectSlotOnBoot                                     1     1      0   10873
                                            108 BANK0      1     1      0
                         _Read_b_eep
                     _loadFromEEPROM
 ---------------------------------------------------------------------------------
 (1) _panic_button                                         0     0      0    7555
                      _controlChange
 ---------------------------------------------------------------------------------
 (1) _menu_lcd                                             1     1      0 4193144
                                            110 BANK0      1     1      0
                         _Function_A
                         _Function_B
                         _Function_C
                         _Function_D
                         _Function_E
                         _Function_F
                         _Function_G
                         _Function_H
                          _Lcd_Clear
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                       _exitFunction
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Function_H                                           1     1      0 3245459
                                            108 BANK0      1     1      0
                       _Function_H_1
                       _Function_H_2
                       _Function_H_3
                       _Function_H_4
                       _Function_H_5
                       _Function_H_6
                       _Function_H_7
                       _Function_H_8
                       _Function_H_9
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_9                                         1     1      0  182290
                                             17 BANK0      1     1      0
                     _Function_H_9_1
                     _Function_H_9_2
                     _Function_H_9_3
                     _Function_H_9_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_4                                       1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_3                                       1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_2                                       1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_1                                       1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_8                                         1     1      0   72250
                                             16 BANK0      1     1      0
                     _Function_H_8_1
                     _Function_H_8_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_2                                       0     0      0   17896
                   _Lcd_Print_String
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_1                                       0     0      0   27908
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_7                                         0     0      0   30263
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _Function_H_6                                         1     1      0 2780479
                                             44 BANK0      1     1      0
                     _Function_H_6_1
                     _Function_H_6_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_2                                       0     0      0   30263
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_1                                       0     0      0 2723770
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                         _doTheLatch
                       _doTheUnLatch
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_5                                         2     2      0   36548
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_4                                         1     1      0   41539
                                             23 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
                      _setupArpeggio
 ---------------------------------------------------------------------------------
 (3) _Function_H_3                                         0     0      0   23683
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_2                                         0     0      0   31710
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
             _calculate_pulse_length
                         _clear_row2
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_1                                         0     0      0   20251
                   _Lcd_Print_String
                         _clear_row2
               _processEncoderBuxton
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Function_G                                           1     1      0  289283
                                            109 BANK0      1     1      0
                       _Function_G_1
                       _Function_G_2
                       _Function_G_3
                       _Function_G_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                         _eepromExit
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_G_4                                         1     1      0   55508
                                             18 BANK0      1     1      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                       _exitFunction
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _exitFunction                                         2     2      0   17896
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_3                                         2     2      0   29062
                                             16 BANK0      2     2      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                         _clear_row1
                         _clear_row2
 ---------------------------------------------------------------------------------
 (3) _Function_G_2                                         1     1      0   83808
                                            108 BANK0      1     1      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitLoad
                     _loadFromEEPROM
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _loadFromEEPROM                                      80    80      0   10404
                                              0 BANK1     80    80      0
                         _Read_b_eep
             _calculate_pulse_length
 ---------------------------------------------------------------------------------
 (3) _calculate_pulse_length                              10     8      2    8027
                                             98 BANK0     10     8      2
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) _exitLoad                                             2     2      0   17896
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_1                                         1     1      0   76563
                                             84 BANK0      1     1      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitSave
               _processEncoderBuxton
                       _saveToEEPROM
 ---------------------------------------------------------------------------------
 (4) _exitSave                                             2     2      0   17896
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _eepromExit                                           2     2      0   17896
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (2) _Function_F                                           0     0      0   25288
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
               _processEncoderBuxton
                      _programChange
 ---------------------------------------------------------------------------------
 (3) _programChange                                        3     1      2    1605
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _Function_E                                           1     1      0   53788
                                             26 BANK0      1     1      0
                       _Function_E_1
                       _Function_E_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_E_2                                         0     0      0   13671
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_E_1                                         0     0      0   13671
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _Function_D                                           1     1      0  232876
                                             64 BANK0      1     1      0
                       _Function_D_1
                       _Function_D_2
                       _Function_D_3
                       _Function_D_4
                       _Function_D_5
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_D_5                                         2     2      0   50856
                                             28 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
               _setControllerNumbers
 ---------------------------------------------------------------------------------
 (3) _Function_D_4                                         2     2      0   50856
                                             28 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
               _setControllerNumbers
 ---------------------------------------------------------------------------------
 (3) _Function_D_3                                         2     2      0   50856
                                             28 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
               _setControllerNumbers
 ---------------------------------------------------------------------------------
 (4) _setControllerNumbers                                 2     2      0   14375
                                             26 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
 ---------------------------------------------------------------------------------
 (3) _Function_D_2                                         0     0      0   17336
                           _Busy_eep
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                        _Write_b_eep
                    _calculate_alpha
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _calculate_alpha                                      0     0      0    2511
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    1809
                                             39 BANK0     25    17      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Function_D_1                                         1     1      0   36526
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
            _setControllerResolution
 ---------------------------------------------------------------------------------
 (4) _setControllerResolution                              1     1      0      68
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Function_C                                           1     1      0  147616
                                             28 BANK0      1     1      0
                       _Function_C_1
                       _Function_C_2
                       _Function_C_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_C_3                                         2     2      0   42356
                                             26 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_C_2                                         2     2      0   42356
                                             26 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _int2string                                           6     4      2    3659
                                             20 BANK0      6     4      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     904
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _Function_C_1                                         1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _Function_B                                           1     1      0   26446
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _Function_A                                           1     1      0  135820
                                             17 BANK0      1     1      0
                       _Function_A_1
                       _Function_A_2
                       _Function_A_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_A_3                                         1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_A_2                                         1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_A_1                                         1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (1) _processEncoderBuxton                                 7     7      0       0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _clear_row2                                           0     0      0   10012
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (3) _clear_row1                                           0     0      0   10012
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (4) _Lcd_Set_Cursor                                       5     4      1    2128
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Print_String                                     6     4      2    7884
                                             10 BANK0      6     4      2
                     _Lcd_Print_Char
                            ___lbmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Lcd_Print_Char                                       7     7      0     270
                                              1 BANK0      7     7      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1    2919
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _initializeSaveSlotsOnce                              1     1      0    4760
                                             84 BANK0      1     1      0
                           _Busy_eep
                         _Read_b_eep
                        _Write_b_eep
                       _saveToEEPROM
 ---------------------------------------------------------------------------------
 (4) _saveToEEPROM                                        80    80      0    3159
                                              4 BANK0     80    80      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (4) _Write_b_eep                                          4     1      3    1154
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (4) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2     424
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initializeMenuArray                                  3     3      0    5744
                                             10 BANK0      3     3      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _displayTest                                          2     2      0    2355
                                              6 BANK0      2     2      0
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _digitalInputs                                        0     0      0 5640833
                 _buttonInputsSerial
                  _keyboardTranspose
                     _processDrumpad
                    _processKeyboard
                      _processOctave
 ---------------------------------------------------------------------------------
 (2) _processOctave                                        2     2      0 2784988
                                             44 BANK0      2     2      0
                            ___awmod
                             ___wmul
                         _doTheLatch
                       _doTheUnLatch
         _key_press_release_note_off
                    _printThisNumber
                     _random_pitches
       _random_pitches_non_repeating
                      _resetArpeggio
                             _strcpy
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (5) _doTheUnLatch                                         4     4      0 2693507
                                             40 BANK0      4     4      0
                       _playThisNote
                      _playThisNote8
             _playThisNotePentatonic
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _doTheLatch                                           0     0      0    2355
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    2355
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    5631
                                              4 BANK0      6     2      4
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _processKeyboard                                      0     0      0 2694602
        _keyboard_all_note_efficient
      _keyboard_eight_note_efficient
     _keyboard_sharps_only_efficient
 ---------------------------------------------------------------------------------
 (3) _keyboard_sharps_only_efficient                       2     2      0  301152
                                             29 BANK0      2     2      0
             _playThisNotePentatonic
 ---------------------------------------------------------------------------------
 (6) _playThisNotePentatonic                               7     6      1  300232
                                             23 BANK0      6     5      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (3) _keyboard_eight_note_efficient                        2     2      0 1497011
                                             40 BANK0      2     2      0
                      _playThisNote8
 ---------------------------------------------------------------------------------
 (6) _playThisNote8                                        9     8      1 1495631
                                             31 BANK0      9     8      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
           _playDiatonicSeventhMajor
           _playDiatonicSeventhMinor
             _playDiatonicTriadMajor
             _playDiatonicTriadMinor
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _playDiatonicTriadMinor                               8     7      1  298597
                                             23 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _playDiatonicTriadMajor                               8     7      1  298421
                                             23 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _playDiatonicSeventhMinor                             8     7      1  298597
                                             23 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _playDiatonicSeventhMajor                             8     7      1  298421
                                             23 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (3) _keyboard_all_note_efficient                          1     1      0  896439
                                             37 BANK0      1     1      0
                       _playThisNote
 ---------------------------------------------------------------------------------
 (6) _playThisNote                                         5     5      0  895289
                                             32 BANK0      5     5      0
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                        _playSeventh
                          _playTriad
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _playTriad                                            9     9      0  298349
                                             23 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _playSeventh                                          9     9      0  298350
                                             23 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _noteOn                                               3     1      2  145212
                                             14 BANK0      3     1      2
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (7) _finish_arpeggio_setup                                0     0      0    5081
                      _resetArpeggio
                      _setupArpeggio
 ---------------------------------------------------------------------------------
 (8) _setupArpeggio                                        0     0      0    5081
                         _copy_array
                     _random_pitches
       _random_pitches_non_repeating
 ---------------------------------------------------------------------------------
 (9) _random_pitches_non_repeating                         3     3      0    2518
                                             20 BANK0      3     3      0
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (9) _random_pitches                                       2     2      0    2451
                                             20 BANK0      2     2      0
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (10) _rand                                                2     0      2     522
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (10) ___awmod                                             6     2      4    1860
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (9) _copy_array                                           1     1      0     112
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _resetArpeggio                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _delete_notes_from_arpeggio                           2     2      0     269
                                              9 BANK0      2     2      0
                     _findArrayIndex
                    _rotateArrayLeft
 ---------------------------------------------------------------------------------
 (8) _findArrayIndex                                       3     3      0     112
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (7) _add_notes_to_arpeggio                                8     8      0     156
                                              9 BANK0      8     8      0
                    _rotateArrayLeft
 ---------------------------------------------------------------------------------
 (8) _rotateArrayLeft                                      9     9      0     112
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (2) _processDrumpad                                       0     0      0   86840
                      _controlChange
                        _noteOffDrum
                         _noteOnDrum
 ---------------------------------------------------------------------------------
 (3) _noteOnDrum                                           3     1      2   76616
                                             14 BANK0      3     1      2
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (3) _noteOffDrum                                          3     1      2    2669
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _keyboardTranspose                                    0     0      0   74311
         _key_press_release_note_off
                    _printThisNumber
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (7) _wait_one_pulse                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _printThisNumber                                      2     0      2     452
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (7) _key_press_release_note_off                           0     0      0   73837
                            _noteOff
 ---------------------------------------------------------------------------------
 (8) _noteOff                                              3     1      2   73837
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _buttonInputsSerial                                   6     6      0      92
                                              0 BANK0      6     6      0
                              _clock
                               _load
 ---------------------------------------------------------------------------------
 (3) _load                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clock                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _analogInputs                                         0     0      0   19010
                 _readPotentiometers
 ---------------------------------------------------------------------------------
 (2) _readPotentiometers                                  12    12      0   19010
                                             98 BANK0     12    12      0
                           _ADC_Read
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _map
              _processPotentiometers
 ---------------------------------------------------------------------------------
 (3) _processPotentiometers                                6     6      0    9930
                                             14 BANK0      6     6      0
                      _controlChange
                          _pitchBend
 ---------------------------------------------------------------------------------
 (4) _pitchBend                                            3     1      2    1779
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _controlChange                                        3     1      2    7555
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (3) _sendUSB                                             11     9      2    1343
                                              0 BANK0     11     9      2
 ---------------------------------------------------------------------------------
 (3) _sendOut                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _map                                                 32    12     20    1888
                                             26 BANK0     32    12     20
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (11) ___lmul                                             12     4      8     522
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     452
                                             12 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     702
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     381
                                             88 BANK0     10     6      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     197
                                             64 BANK0      4     0      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    2200
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    2692
                                             68 BANK0     20    12      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             5     3      2      23
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Start                                            3     3      0     244
                                              3 BANK0      3     3      0
                            _Lcd_Cmd
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (5) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (6) _Lcd_SetBit                                           1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _ISR                                                20    20      0    8044
                                             29 COMRAM    20    20      0
                            _display
                _encoderInputsBuxton
                       _playArpeggio
                          i2___lbmod
                  i2_printThisNumber
 ---------------------------------------------------------------------------------
 (14) i2_printThisNumber                                   2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (14) i2___lbmod                                           4     3      1     211
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (14) _playArpeggio                                        6     6      0    6376
                                             23 COMRAM     6     6      0
                       _sort_pitches
                          i2___awmod
                          i2_noteOff
                           i2_noteOn
                             i2_rand
                   i2_random_pitches
     i2_random_pitches_non_repeating
 ---------------------------------------------------------------------------------
 (15) i2_random_pitches_non_repeating                      3     3      0     940
                                             20 COMRAM     3     3      0
                          i2___awmod
                             i2_rand
 ---------------------------------------------------------------------------------
 (15) i2_random_pitches                                    2     2      0     873
                                             20 COMRAM     2     2      0
                          i2___awmod
                             i2_rand
 ---------------------------------------------------------------------------------
 (16) i2_rand                                              2     0      2     144
                                             12 COMRAM     2     0      2
                           i2___lmul
 ---------------------------------------------------------------------------------
 (17) i2___lmul                                           12     4      8     144
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (15) i2_noteOn                                            3     1      2    2116
                                             14 COMRAM     3     1      2
                          i2_noteOff
                          i2_sendOut
                          i2_sendUSB
 ---------------------------------------------------------------------------------
 (16) i2_noteOff                                           3     1      2    1263
                                             11 COMRAM     3     1      2
                          i2_sendOut
                          i2_sendUSB
 ---------------------------------------------------------------------------------
 (16) i2_sendUSB                                          11     9      2     373
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (16) i2_sendOut                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (15) _sort_pitches                                        5     5      0     380
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (14) _encoderInputsBuxton                                 6     6      0      69
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (14) _display                                             0     0      0    1340
                      _displayDigits
                      _displayString
 ---------------------------------------------------------------------------------
 (15) _displayString                                       2     2      0     134
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (15) _displayDigits                                       5     5      0    1206
                                             20 COMRAM     5     5      0
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (16) i2___awmod                                           6     2      4     660
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                             i2_rand (ARG)
 ---------------------------------------------------------------------------------
 (16) i2___awdiv                                           8     4      4     456
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _Lcd_Start
     _Lcd_Cmd
       _Lcd_SetBit
     _Lcd_SetBit
   _Read_b_eep
   _analogInputs
     _readPotentiometers
       _ADC_Read
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         ___xxtofl (ARG)
       ___flneg
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _map
         ___aldiv
           ___lmul (ARG)
         ___lmul
       _processPotentiometers
         _controlChange
           _sendOut
           _sendUSB
         _pitchBend
           _sendOut
           _sendUSB
   _calculate_alpha
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _calculate_pulse_length
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       ___xxtofl (ARG)
     ___flneg
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _digitalInputs
     _buttonInputsSerial
       _clock
       _load
     _keyboardTranspose
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _printThisNumber
       _wait_one_pulse
     _processDrumpad
       _controlChange
         _sendOut
         _sendUSB
       _noteOffDrum
         _sendOut
         _sendUSB
       _noteOnDrum
         _noteOff
           _sendOut
           _sendUSB
         _sendOut
         _sendUSB
     _processKeyboard
       _keyboard_all_note_efficient
         _playThisNote
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playSeventh
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playTriad
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_eight_note_efficient
         _playThisNote8
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playDiatonicSeventhMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicSeventhMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_sharps_only_efficient
         _playThisNotePentatonic
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
     _processOctave
       ___awmod
         ___awdiv (ARG)
         _rand (ARG)
           ___lmul
       ___wmul
         ___lbmod (ARG)
       _doTheLatch
         _strcpy
       _doTheUnLatch
         _playThisNote
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playSeventh
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playTriad
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
         _playThisNote8
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playDiatonicSeventhMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicSeventhMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
         _playThisNotePentatonic
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
         _strcpy
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _printThisNumber
       _random_pitches
         ___awmod
           ___awdiv (ARG)
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _random_pitches_non_repeating
         ___awmod
           ___awdiv (ARG)
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _resetArpeggio
       _strcpy
       _wait_one_pulse
   _displayTest
     _strcpy
   _initializeMenuArray
     ___wmul
       ___lbmod (ARG)
   _initializeSaveSlotsOnce
     _Busy_eep
     _Read_b_eep
     _Write_b_eep
     _saveToEEPROM
       _Busy_eep
       _Write_b_eep
   _menu_lcd
     _Function_A
       _Function_A_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_A_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_A_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_B
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_C
       _Function_C_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_C_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_C_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_D
       _Function_D_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setControllerResolution
       _Function_D_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _Write_b_eep
         _calculate_alpha
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_D_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
       _Function_D_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
       _Function_D_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_E
       _Function_E_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_E_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_F
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_SetBit
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _int2string
         ___awdiv
         ___awmod
           ___awdiv (ARG)
           _rand (ARG)
             ___lmul
       _processEncoderBuxton
       _programChange
         _sendOut
         _sendUSB
     _Function_G
       _Function_G_1
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitSave
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _processEncoderBuxton
         _saveToEEPROM
           _Busy_eep
           _Write_b_eep
       _Function_G_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitLoad
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _loadFromEEPROM
           _Read_b_eep
           _calculate_pulse_length
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
         _processEncoderBuxton
       _Function_G_3
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _Function_G_4
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _exitFunction
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _eepromExit
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _processEncoderBuxton
     _Function_H
       _Function_H_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _strcpy
       _Function_H_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _calculate_pulse_length
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul
             ___xxtofl (ARG)
           ___flneg
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_H_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_H_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setupArpeggio
           _copy_array
           _random_pitches
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
             _rand
               ___lmul
           _random_pitches_non_repeating
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
             _rand
               ___lmul
       _Function_H_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_H_6
         _Function_H_6_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _doTheLatch
             _strcpy
           _doTheUnLatch
             _playThisNote
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _playSeventh
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playTriad
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _wait_one_pulse
             _playThisNote8
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _playDiatonicSeventhMajor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicSeventhMinor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicTriadMajor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicTriadMinor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                         ___awdiv (ARG)
                         _rand (ARG)
                           ___lmul
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _wait_one_pulse
             _playThisNotePentatonic
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _strcpy
           _processEncoderBuxton
         _Function_H_6_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
           _strcpy
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_H_7
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _strcpy
       _Function_H_8
         _Function_H_8_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Function_H_8_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_H_9
         _Function_H_9_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Function_H_9_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Function_H_9_3
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Function_H_9_4
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_SetBit
     _Lcd_Print_String
       _Lcd_Print_Char
         _Lcd_SetBit
       ___lbmod (ARG)
       ___wmul (ARG)
         ___lbmod (ARG)
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_SetBit
     ___lbmod
     ___wmul
       ___lbmod (ARG)
     _exitFunction
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _clear_row1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
   _panic_button
     _controlChange
       _sendOut
       _sendUSB
   _processEncoderBuxton
   _selectSlotOnBoot
     _Read_b_eep
     _loadFromEEPROM
       _Read_b_eep
       _calculate_pulse_length
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul
           ___xxtofl (ARG)
         ___flneg
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
   _setup
   _srand

 _ISR (ROOT)
   _display
     _displayDigits
       i2___awdiv
       i2___awmod
         i2___awdiv (ARG)
         i2_rand (ARG)
           i2___lmul
     _displayString
   _encoderInputsBuxton
   _playArpeggio
     _sort_pitches
     i2___awmod
       i2___awdiv (ARG)
       i2_rand (ARG)
         i2___lmul
     i2_noteOff
       i2_sendOut
       i2_sendUSB
     i2_noteOn
       i2_noteOff
         i2_sendOut
         i2_sendUSB
       i2_sendOut
       i2_sendUSB
     i2_rand
       i2___lmul
     i2_random_pitches
       i2___awmod
         i2___awdiv (ARG)
         i2_rand (ARG)
           i2___lmul
       i2_rand
         i2___lmul
     i2_random_pitches_non_repeating
       i2___awmod
         i2___awdiv (ARG)
         i2_rand (ARG)
           i2___lmul
       i2_rand
         i2___lmul
   i2___lbmod
   i2_printThisNumber

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      69      11       41.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FC       9       98.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100     50      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     70      A0       5      100.0%
BITCOMRAM           5E      0       5       0        5.3%
COMRAM              5E     31      5E       1      100.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     362      20        0.0%
DATA                 0      0     362       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Aug 14 19:13:23 2023

                   _arpeggiatorAutoLatchOnOffMenu 0120                           playThisNote8@temp_pitch 0085  
                       ?_playDiatonicSeventhMinor 0077                           _readPotentiometers$5806 00C7  
                              i2printThisNumber@n 0001                                      ___fldiv@aexp 009F  
                                    ___fldiv@bexp 009E                                _RESET_ON_KEY_PRESS 01AB  
                                    ___fldiv@sign 0093                                      ?_displayTest 0001  
                                              l20 935A                                                l21 9362  
                                              l22 9364                                                l23 936C  
                                              l24 936E                                                l25 9376  
                                              l42 77D2                                                l50 7BE6  
                                              l19 9358                                                l36 8C06  
                                              l54 81AA                                                l47 7B98  
                                              l55 8170                                                l48 7BB0  
                                              l49 7BCE                                                l88 9234  
                                    ___awdiv@sign 0065                     __size_of_processEncoderBuxton 0A30  
                             ___wmul@multiplicand 0066                                       __CFG_BORV$3 000000  
                                  ?_programChange 006B                   __size_of_playDiatonicTriadMajor 0190  
                                    __CFG_CP0$OFF 000000                                      __CFG_CP1$OFF 000000  
                                    __CFG_CP2$OFF 000000                                      __CFG_CP3$OFF 000000  
                                     __CFG_OSC$HS 000000                   __size_of_playDiatonicTriadMinor 025E  
                        _LAST_NOTE_MODE_KEY_PRESS 01A2                           playDiatonicTriadMajor@i 007C  
                            __end_of_doTheUnLatch 5236                                               l441 73AA  
                                             l443 73B6                                               l451 89DA  
                                             l436 95A2                                               l453 8A08  
                                             l459 8D0A                                               l820 00E6  
                                             l901 07EC                                               l830 020E  
                                             l822 0120                                               l911 0840  
                                             l903 07FA                                               l840 036A  
                                             l832 0252                                               l824 0158  
                                             l816 0068                                               l921 089A  
                                             l913 0852                                               l905 080A  
                                             l850 0436                                               l842 0380  
                                             l834 0298                                               l826 019C  
                                             l818 00A2                                               l931 08F0  
                                             l923 08AC                                               l915 0868  
                                             l907 081C                                               l940 0944  
                                             l860 0524                                               l852 044A  
                                             l844 0396                                               l836 02DE  
                                             l828 01D6                                               l933 0900  
                                             l925 08BE                                               l917 087E  
                                             l909 082E                                               l942 0956  
                                             l862 055C                                               l854 045E  
                                             l846 03DC                                               l838 0324  
                                             l951 09BC                                               l935 090E  
                                             l927 08D0                                               l919 088C  
                                             l871 061E                                               l863 056A  
                                             l960 0A3A                                               l952 09CC  
                                             l944 0968                                               l936 091C  
                                             l880 06FA                                               l856 04A4  
                                             l848 0422                                               l953 09DC  
                                             l929 08DE                                               l873 0664  
                                             l865 057E                                               l946 097A  
                                             l938 0930                                               l882 0734  
                                             l874 0674                                               l858 04EA  
                                             l955 09EC                                               l947 098A  
                                             l891 079E                                               l883 0742  
                                             l875 0684                                               l867 0592  
                                             l956 09FA                                               l948 099A  
                                             l884 0752                                               l876 0694  
                                             l957 0A0A                                               l949 09AA  
                                             l893 07AE                                               l885 0762  
                                             l869 05D8                                               l958 0A1A  
                                             l886 0772                                               l878 06DA  
                                             l959 0A2A                                               l895 07BE  
                                             l879 06EA                                               l897 07CC  
                                             l889 078E                                               l899 07DC  
                                             _GIE 007F97                              _RESET_ON_KEY_RELEASE 01AA  
                                             _BPM 00FF                                      __CFG_CPB$OFF 000000  
                                             _RB0 007C08                                               _RB1 007C09  
                                             _RB2 007C0A                                               _RC0 007C10  
                                             _RA5 007C05                                               _RC1 007C11  
                                             _RB4 007C0C                                               _RC2 007C12  
                                             _RB5 007C0D                                               _RC3 007C13  
                                             _RE0 007C20                                               _RC4 007C14  
                                             _RE1 007C21                                               _RC5 007C15  
                                             _RD4 007C1C                                               _RE2 007C22  
                                             _RD5 007C1D                                               _RD6 007C1E  
                                             _RD7 007C1F                                   random_pitches@i 0075  
                                    __CFG_CPD$OFF 000000                                               _ISR 0008  
                                             _PSA 007EAB                                               _map 67FE  
                         playDiatonicTriadMinor@i 007D                              __size_of_Write_b_eep 0042  
                                    ___awmod@sign 0073                                               prod 000FF3  
                                             wreg 000FE8                                    ?_displayDigits 0001  
                                ??_wait_one_pulse 0060                                      ___flmul@aexp 007F  
                                    ___flmul@bexp 0080                    __end_of_playThisNotePentatonic 5562  
                                    ___flmul@sign 007A                                      ___flmul@temp 0085  
                                    ___flmul@prod 0081                          loadFromEEPROM@slotNumber 01D4  
                                    __CFG_LVP$OFF 000000                                              ?_ISR 0001  
                     _potentiometer_filtered_last 0200                                      ___fltol@exp1 00C1  
                                    __CFG_WDT$OFF 000000                                    ?_displayString 0001  
                                            l1402 5B4A                                              l1411 58B6  
                                            l2300 1CB6                                              l1420 58E8  
                                            l1412 588A                                              l1404 5B6E  
                                            l1500 1B44                                              l1340 5454  
                                            l2301 1CD0                                              l1413 58D8  
                                            l1405 5B76                                              l1501 1B5E  
                                            l1341 547A                                              l2310 1D8E  
                                            l2302 1D40                                              l1422 590C  
                                            l1414 5894                                              l1406 5B8A  
                                            l1510 1C48                                              l1502 1B78  
                                            l1350 5518                                              l2311 1DA8  
                                            l2303 1CF2                                              l1423 5932  
                                            l1415 589C                                              l1503 1B92  
                                            l1343 549E                                              l2320 1E66  
                                            l2312 1E18                                              l2304 1D08  
                                            l1416 58A4                                              l1504 1BAC  
                                            l1520 2694                                              l1352 5544  
                                            l1344 54BC                                              l1360 3B52  
                                            l2321 1E80                                              l2313 1DCA  
                                            l2305 1D22                                              l1433 59CA  
                                            l1425 59A8                                              l1417 58AC  
                                            l1505 1BC6                                              l1601 55B6  
                                            l1521 269C                                              l1353 554C  
                                            l1345 54F2                                              l1337 5400  
                                            l1361 3B74                                              l2330 1F3E  
                                            l2322 1EF0                                              l2314 1DE0  
                                            l2306 1D3C                                              l1426 5960  
                                            l1506 1BE0                                              l1602 55F6  
                                            l1530 2766                                              l1522 26A4  
                                            l1354 555A                                              l1346 54E0  
                                            l1338 5426                                              l1370 3CA6  
                                            l1362 3B96                                              l2331 1F58  
                                            l2323 1EA2                                              l2315 1DFA  
                                            l2307 1DAC                                              l1435 59EE  
                                            l1507 1BFA                                              l1531 278C  
                                            l1515 26B6                                              l1523 26AC  
                                            l1371 3CC8                                              l1363 3BB8  
                                            l2332 1FC8                                              l2324 1EB8  
                                            l2316 1E14                                              l2308 1D5E  
                                            l1436 59F6                                              l1428 596E  
                                            l1452 64FC                                              l1444 643C  
                                            l1508 1C14                                              l1612 56AC  
                                            l1604 5688                                              l1540 28AA  
                                            l1516 267A                                              l1700 2D88  
                                            l1372 3CEA                                              l1364 3BDA  
                                            l2341 201C                                              l2333 1F7A  
                                            l2325 1ED2                                              l2317 1E84  
                                            l2309 1D74                                              l1437 5A0A  
                                            l1381 5A3C                                              l1453 64B2  
                                            l1445 6450                                              l1509 1C2E  
                                            l1605 5626                                              l1541 28C8  
                                            l1517 26E4                                              l1701 2DAA  
                                            l1373 3D0C                                              l1365 3BFC  
                                            l2350 20BE                                              l2342 2032  
                                            l2334 1F90                                              l2326 1EEC  
                                            l2318 1E36                                              l1382 5A18  
                                            l1470 1838                                              l1462 1768  
                                            l1614 56D0                                              l1622 45A4  
                                            l1534 27CC                                              l1518 2684  
                                            l1702 2DCC                                              l1374 3D2E  
                                            l1366 3C1E                                              l1358 3B0E  
                                            l2351 20D4                                              l2335 1FAA  
                                            l2327 1F5C                                              l2319 1E4C  
                                            l1391 5A8C                                              l1383 5A58  
                                            l1455 64DE                                              l1447 648E  
                                            l1471 1852                                              l1463 1782  
                                            l1615 56D8                                              l1607 5634  
                                            l1631 4780                                              l1543 28F8  
                                            l1535 27FE                                              l1527 2712  
                                            l1519 268C                                              l1703 2DEE  
                                            l1375 3D50                                              l1367 3C40  
                                            l1359 3B30                                              l2344 2052  
                                            l2336 1FC4                                              l2328 1F0E  
                                            l1392 5AB2                                              l1384 5A22  
                                            l1456 64E6                                              l1448 647A  
                                            l1480 193C                                              l1472 186C  
                                            l1464 179C                                              l1616 56EC  
                                            l1632 46D6                                              l1552 2A48  
                                            l1560 2A0E                                              l1544 2930  
                                            l1528 2738                                              l1704 2E10  
                                            l1376 3D72                                              l1368 3C62  
                                            l2353 20F4                                              l2345 2068  
                                            l2329 1F24                                              l1385 5A2A  
                                            l1457 64F4                                              l1481 1956  
                                            l1473 1886                                              l1465 17B6  
                                            l1641 47A4                                              l1625 45CE  
                                            l1553 29A0                                              l1545 297C  
                                            l1537 2846                                              l1705 2E32  
                                            l1369 3C84                                              l2354 210A  
                                            l2338 1FE6                                              l1394 5B28  
                                            l1386 5A32                                              l1458 650C  
                                            l1490 1A40                                              l1482 1970  
                                            l1474 18A0                                              l1466 17D0  
                                            l1634 46E4                                              l1626 45F4  
                                            l1570 2A84                                              l1546 2954  
                                            l1538 2888                                              l1706 2E54  
                                            l2347 2088                                              l2339 1FFC  
                                            l1395 5AE0                                              l1491 1A5A  
                                            l1483 198A                                              l1475 18BA  
                                            l1467 17EA                                              l1651 4802  
                                            l1643 47C8                                              l1563 2A42  
                                            l1555 29BE                                              l1707 2E76  
                                            l3411 693C                                              l2356 212A  
                                            l2348 209E                                              l1492 1A74  
                                            l1484 19A4                                              l1476 18D4  
                                            l1468 1804                                              l1660 49DC  
                                            l1644 47D0                                              l1636 4710  
                                            l1628 4650                                              l1548 2972  
                                            l3420 6976                                              l2357 2140  
                                            l1397 5AEE                                              l1389 5A68  
                                            l1493 1A8E                                              l1485 19BE  
                                            l1477 18EE                                              l1469 181E  
                                            l1661 4934                                              l1581 5818  
                                            l1645 47E4                                              l1637 476C  
                                            l1629 46A6                                              l3413 6990  
                                            l3421 6980                                              l1494 1AA8  
                                            l1486 19D8                                              l1478 1908  
                                            l1654 482C                                              l1590 5860  
                                            l1582 57B8                                              l1558 29E2  
                                            l3342 6ACE                                              l3502 79A6  
                                            l3422 698A                                              l3414 6944  
                                            l2359 2162                                              l1495 1AC2  
                                            l1487 19F2                                              l1479 1922  
                                            l1671 4A24                                              l1663 4942  
                                            l1655 4852                                              l1591 5868  
                                            l1559 29EA                                              l3343 6AD8  
                                            l3503 7962                                              l6000 5F38  
                                            l2720 4318                                              l1496 1ADC  
                                            l1488 1A0C                                              l1672 4A2C  
                                            l1592 587C                                              l1584 57C6  
                                            l1576 570A                                              l1568 2A5C  
                                            l1680 2AE0                                              l2800 36C8  
                                            l3328 4D04                                              l3344 6AE0  
                                            l3504 79A4                                              l3360 2228  
                                            l3416 694E                                              l2721 4330  
                                            l2297 1CD4                                              l1497 1AF6  
                                            l1489 1A26                                              l1673 4A40  
                                            l1665 496E                                              l1657 48AE  
                                            l1569 2A70                                              l1681 2B02  
                                            l2801 36AE                                              l3329 4C8C  
                                            l3441 7B60                                              l3521 8988  
                                            l3601 72B4                                              l3417 6958  
                                            l2730 4404                                              l2722 4348  
                                            l2298 1C86                                              l5210 9590  
                                            l1498 1B10                                              l1666 49CA  
                                            l1658 4904                                              l1578 5748  
                                            l1690 2C34                                              l1682 2B24  
                                            l2810 376E                                              l3434 80E2  
                                            l3442 7AF4                                              l3450 7FC4  
                                            l3514 793A                                              l3522 895C  
                                            l3370 23EA                                              l3362 227E  
                                            l3602 72D6                                              l3418 6962  
                                            l2731 441C                                              l2723 4360  
                                            l2299 1C9C                                              l1499 1B2A  
                                            l1579 5788                                              l1691 2C56  
                                            l1683 2B46                                              l2803 36BA  
                                            l3427 815E                                              l3435 807E  
                                            l3443 7B4E                                              l3515 78DE  
                                            l3363 23F0                                              l3355 218C  
                                            l3419 696C                                              l6004 5F62  
                                            l5220 5C0E                                              l2740 44F2  
                                            l2732 4434                                              l2724 4378  
                                            l5204 9310                                              l1588 583C  
                                            l1692 2C78                                              l1684 2B68  
                                            l3428 80FA                                              l3436 80D2  
                                            l3516 7938                                              l3380 25FA  
                                            l3372 2482                                              l3612 7494  
                                            l3620 7696                                              l6005 5F94  
                                            l5221 5C30                                              l2741 450A  
                                            l2733 444C                                              l2725 4390  
                                            l1669 4A00                                              l1693 2C9A  
                                            l1685 2B8A                                              l2813 37E6  
                                            l2805 377E                                              l3429 814E  
                                            l3349 93E2                                              l3381 2634  
                                            l3365 22E0                                              l3357 2284  
                                            l3541 7EDC                                              l3613 7438  
                                            l3621 76DE                                              l5222 5C46  
                                            l5214 5BA6                                              l2742 4522  
                                            l2734 4464                                              l2726 43A8  
                                            l1694 2CBC                                              l1686 2BAC  
                                            l2806 3732                                              l3382 266E  
                                            l3374 24BA                                              l3366 231C  
                                            l3534 7F5A                                              l3542 7E80  
                                            l3550 7AAA                                              l3614 7492  
                                            l5223 5C66                                              l5215 5BB8  
                                            l2743 4536                                              l2735 447A  
                                            l2727 43BE                                              l2719 4300  
                                            l1599 5578                                              l1695 2CDE  
                                            l1687 2BCE                                              l1679 2ABE  
                                            l3375 24F4                                              l3367 2358  
                                            l3527 8340                                              l3535 7EFE  
                                            l3543 7EDA                                              l3631 6EAA  
                                            l5224 5C8A                                              l2736 4492  
                                            l2728 43D6                                              l1696 2D00  
                                            l1688 2BF0                                              l2816 37FC  
                                            l3448 7FC6                                              l3480 6180  
                                            l3472 6136                                              l3376 252E  
                                            l3368 2394                                              l3528 82E4  
                                            l3536 7F58                                              l3560 8F1A  
                                            l4280 4A74                                              l3704 6FA2  
                                            l3632 6E66                                              l5225 5CAE  
                                            l2745 455A                                              l2737 44AA  
                                            l2729 43EE                                              l5209 9586  
                                            l1697 2D22                                              l1689 2C12  
                                            l2761 50C0                                              l2817 3822  
                                            l2809 3748                                              l3449 7F7E  
                                            l3465 7792                                              l3481 61B8  
                                            l3473 60DA                                              l3529 833E  
                                            l3561 8EE6                                              l4281 4A84  
                                            l3705 6F1E                                              l3713 850A  
                                            l3633 6EA8                                              l5226 5CD2  
                                            l5218 5CB0                                              l2738 44C2  
                                            l5234 9152                                              l1698 2D44  
                                            l2770 515E                                              l4290 4EBE  
                                            l3458 7DEE                                              l3466 7736  
                                            l3482 61B4                                              l3474 6134  
                                            l3378 25C2                                              l4282 4A94  
                                            l3650 7512                                              l3714 84C0  
                                            l3722 6D9C                                              l5227 5CF0  
                                            l5219 5BE8                                              l2747 4568  
                                            l2739 44DA                                              l5243 8216  
                                            l1699 2D66                                              l2755 5180  
                                            l4291 4ECE                                              l3459 7D88  
                                            l3467 7790                                              l4283 4AA2  
                                            l3619 76E0                                              l3651 7546  
                                            l3707 6F6C                                              l3715 8508  
                                            l3723 6D14                                              l3731 83B8  
                                            l3900 16F4                                              l2748 4576  
                                            l5244 822C                                              l2764 50DC  
                                            l3492 6022                                              l3548 7AAC  
                                            l3572 85EC                                              l4284 4AD8  
                                            l3708 6FA0                                              l3732 8368  
                                            l3740 8874                                              l3901 1742  
                                            l2773 517E                                              l3477 614A  
                                            l3493 60C8                                              l3549 7A68  
                                            l3573 85A2                                              l3581 8734  
                                            l3725 6D66                                              l3741 8836  
                                            l2790 3580                                              l4294 5074  
                                            l3478 61F0                                              l3494 605C  
                                            l3566 8ECC                                              l3574 85EA  
                                            l3582 86F2                                              l3590 7340  
                                            l3670 6CB2                                              l3726 6D9A  
                                            l3734 839C                                              l3750 844E  
                                            ?_map 007A                                              l3911 3FAE  
                                            l5247 8242                                              l2767 5118  
                                            l3479 6184                                              l3495 6058  
                                            l3487 600E                                              l3567 8E98  
                                            l3583 870C                                              l4279 4A64  
                                            l3647 7548                                              l3663 8A5E  
                                            l3671 6C56                                              l3735 83B6  
                                            l3743 8858                                              l3751 8496  
                                            l5440 8CB2                                              l2776 51A6  
                                            l4288 4E9E                                              l3496 6090  
                                            l3488 5FB2                                              l3592 7356  
                                            l3648 74D6                                              l3656 880A  
                                            l3664 8A1C                                              l3672 6CB0  
                                            l3744 8872                                              l3913 3FFE  
                                            l5193 9424                                              l5257 8942  
                                            l2777 51CA                                              l2793 35BA  
                                            l5425 8FE6                                              l4289 4EAE  
                                            l3497 608C                                              l3489 600C  
                                            l3593 7378                                              l3657 87C8  
                                            l3665 8A36                                              l3761 720E  
                                            l3906 3E2A                                              l5258 88F8  
                                            l2778 5200                                              l5602 7A3C  
                                            l3658 87E2                                              l3674 6CE6  
                                            l3762 7228                                              l3770 716C  
                                            l3907 3E5E                                              l5611 855E  
                                            l2795 3644                                              l5603 7A46  
                                            l3683 6DC4                                              l3771 7186  
                                            l3908 3E9C                                              l5612 8556  
                                            l2796 3624                                              l2788 353C  
                                            l5604 7A54                                              l3588 7342  
                                            l3780 70E4                                              l3909 3EDC  
                                            l5189 941C                                              l5197 65A8  
                                            l5285 7C64                                              l2789 3548  
                                            l3589 72EA                                              l3597 72A0  
                                            l3677 6CF8                                              l3693 78A6  
                                            l3749 8498                                              l5198 65F8  
                                            l5278 8B16                                              l5286 7BF8  
                                            l2798 3636                                              l3598 7248  
                                            l3686 6E3E                                              l3694 7856  
                                            l3758 722A                                              l5439 8C9E  
                                            l5615 8576                                              l5279 8AD2  
                                            l3599 729E                                              l3687 6DE2  
                                            l3759 71B0                                              l3767 7188  
                                            l4831 6400                                              l3880 11B6  
                                            l5616 8580                                              l5608 853C  
                                            l3688 6E3C                                              l3696 788A  
                                            l3768 710E                                              l3776 70E6  
                                            l5617 858E                                              l5609 8548  
                                            l3697 78A4                                              l3777 706C  
                                            l3785 7044                                              l4825 63EA  
                                            l5634 9338                                              l5490 6C10  
                                            l3890 1422                                              l3882 12FC  
                                            l3786 6FCA                                              l3794 7658  
                                            l5491 6C1E                                              l5483 6B96  
                                            l3779 70CA                                              l3795 7600  
                                            l5660 6A42                                              l5492 6C34  
                                            l5484 6BAE                                              l4780 82A2  
                                            l3788 7028                                              l3796 7656  
                                            l4828 63FC                                              l3877 115A  
                                            l3789 7042                                              l5486 6BDC  
                                            l3886 1338                                              l5911 3506  
                                            l5487 6BD0                                              l3887 171E  
                                            l3895 1566                                              l3879 11A6  
                                            l5912 350E                                              l5904 349A  
                                            l3896 15A2                                              l5913 3510  
                                            l5665 6A76                                              l5657 69E6  
                                            l5921 3866                                              l5666 6A6A  
                                            l3898 16AC                                              l4778 8284  
                                            l5930 3914                                              l5922 3862  
                                            l5907 34E0                                              l5659 6A52  
                                            l3899 16E4                                              l5595 79EE  
                                            l5931 39C2                                              l5668 6A92  
                                            l4788 8DCC                                              l5596 79FE  
                                            l5932 3972                                              l5933 399A  
                                            l5925 38A6                                              l5870 3264  
                                            l5766 9388                                              l5598 7A1C  
                                            l5950 3ACC                                              l5926 38A2  
                                            l5767 93A0                                              l5599 7A14  
                                            l5951 3ACE                                              l5935 39C0  
                                            l5872 32C4                                              l5864 3220  
                                            l5960 2F0A                                              l5928 38EC  
                                            l5873 3288                                              l5865 321C  
                                            l5961 2F1E                                              l5945 3A2E  
                                            l5890 3426                                              l5882 339E  
                                            l5962 2F3C                                              l5938 39F6  
                                            l5883 3364                                              l5955 2ECE  
                                            l5947 3A72                                              l5939 39D8  
                                            l5892 3436                                              l5876 3340  
                                            l5956 2ECA                                              l5948 3A96  
                                            l5877 331E                                              l5869 3268  
                                            l5973 3134                                              l5957 2EDE  
                                            l5949 3AC0                                              l5886 3388  
                                            l5878 332C                                              l5966 30FC  
                                            l5990 5EA4                                              l5895 345A  
                                            l5887 338C                                              l5879 3330  
                                            l5975 3178                                              l5967 30DE  
                                            l5959 2F0E                                              l5991 5EC2  
                                            l5983 92CA                                              l5976 3196  
                                            l5984 92C0                                              l5897 3470  
                                            l5993 5ED4                                              l5978 31BA  
                                            l5994 5EC8                                              l5899 347A  
                                            l5979 31D8                                              l5996 5F12  
                                            _ADON 007E10                                              l5997 5EFA  
                                            l5989 5E94                             __size_of_sort_pitches 011A  
                                            l5999 5F44                                              STR_1 FFE6  
                                            STR_2 FFE1                                              STR_3 FFFA  
                                            STR_4 FFF0                                              STR_5 FFDC  
                                            STR_6 FFEB                                              STR_7 FFF5  
                                            STR_8 FFD7                                              STR_9 FD70  
                                            _BRGH 007D62                            __end_of_random_pitches 8B20  
                                            _CREN 007D5C                                              _T0CS 007EAD  
                                            _IPEN 007E87                                              _PEIE 007F96  
                                            _RBIE 007F93                                              _RBIF 007F90  
                                            _TMR0 000FD6                                              _TMR2 000FCC  
                                            _SPEN 007D5F                                              _PPQN 005E  
                                            _TXIF 007CF4                                              _TXEN 007D65  
                                            _SYNC 007D64                          _LAST_NOTE_MODE_TRANSPOSE 01A0  
                                            _main 6310                                              _drum 00EC  
                                            _load 9668                                              _rand 8B20  
                                            fsr0h 000FEA                                              fsr1h 000FE2  
                                            fsr2h 000FDA                                              fsr0l 000FE9  
                                            indf1 000FE7                                              indf2 000FDF  
                                            fsr1l 000FE1                                              map@x 007A  
                                            fsr2l 000FD9                                              btemp 005F  
                                __end_of_ADC_Read 924E                          __end_ofi2_random_pitches 8C8C  
                    ??_key_press_release_note_off 006E                                              prodh 000FF4  
                                            prodl 000FF3                keyboard_eight_note_efficient@index 0089  
                                 ??_setupArpeggio 0077                                              start 000E  
                              Lcd_Print_Char@i_57 0066                keyboard_eight_note_efficient@pitch 0088  
                                   __CFG_IESO$OFF 000000                                   ___fldiv@new_exp 0098  
                              Lcd_Print_Char@data 0063                              __end_of_analogInputs 967A  
                                  _drumCCTypeMenu 015F                                   __end_of_Lcd_Cmd 951A  
                                   __CFG_MCLRE$ON 000000                                   _rotateArrayLeft 83CA  
                                    ___param_bank 000000                                             ??_ISR 001E  
                                           ??_map 008E                   __end_of_setControllerResolution 9400  
                       _arpeggiatorLatchOnOffMenu 0123                                    noteOff@channel 006D  
                                      _Lcd_SetBit 934A                                             l22203 4390  
                                           l22221 43D6                                             l22303 4522  
                                           l22231 4404                                             l22215 43BE  
                            programChange@channel 006D                                             l22209 43A8  
                                           l22243 4434                                             l22227 43EE  
                                           l21435 6DBC                                             l23053 827C  
                                           l22261 447A                                             l22237 441C  
                                           l22173 4318                                             l22255 4464  
                                           l22191 4360                                             l22167 4300  
                                           l16121 73AE                                             l22273 44AA  
                                           l22249 444C                                             l22185 4348  
                                           l22417 3644                                             l16115 73A2  
                                           l23067 829A                                             l22291 44F2  
                                           l22267 4492                                             l22179 4330  
                                           l22285 44DA                                             l22197 4378  
                                           l23175 77DE                                             l23167 77C4  
                                           l22279 44C2                                             l22297 450A  
                                           l17019 493A                                             l16405 919E  
                                           l16503 5A60                                             l17063 4A24  
                                           l22479 377E                                             l16605 58E0  
                                           l16533 5AE6                                             l17181 5544  
                                           l17255 64DE                                             l22971 11AE  
                                           l22955 1152                                             l16395 9170  
                                           l16635 5966                                             l16571 5B6E  
                                           l16723 57BE                                             l17419 29E2  
                                           l22983 12F4                                             l16823 46DC  
                                           l16673 59EE                                             l16761 5860  
                                           l19057 503A                                             l16917 562C  
                                           l16693 5702                                             l16955 56D0  
                                           l16867 47C8                                             l16779 459C  
                                           l16887 5570                                             l16975 47FA  
                                           l17795 3AC0                                             l18749 93DA  
                                   ___fltol@sign1 00C0                                   __end_of___aldiv 6C46  
                                 __end_of___fladd 352C                                             ?_main 0001  
                                           ?_load 0001                                   __end_of___fldiv 3AEA  
                                           ?_rand 006C                                   __end_of___awdiv 7A5E  
                                ?_calculate_alpha 0001                                   __end_of___flneg 934A  
                                           _EEADR 000FA9                                             STR_10 FD64  
                                           STR_11 FD64                                             STR_12 FD6B  
                                           STR_20 FFC3                                             STR_13 FF9E  
                                           STR_21 FDFD                                             STR_14 FF88  
                                           STR_30 FDA8                                             STR_22 FD75  
                                           STR_15 FF93                                             STR_23 FF18  
                                           STR_31 FEC4                                             STR_16 FD6B  
                                           STR_24 FF58                                             STR_32 FE4D  
                                           STR_40 FE3D                                             STR_17 FF9E  
                                           STR_41 FFCD                                             STR_25 FED2  
                                           STR_33 FD97                                             STR_18 FF88  
                                           STR_50 FF0F                                             STR_34 FF4C  
                                           STR_42 FE98                                             STR_26 FE2D  
                                           STR_19 FF93                                             STR_43 FFD2  
                                           STR_35 FFBB                                             STR_27 FEE0  
                                           STR_51 FDDB                                             STR_60 FFC8  
                                           STR_36 FFB3                                             STR_44 FEB6  
                                           STR_52 FE89                                             STR_28 FDCA  
                                 __end_of___awmod 8598                                             STR_53 FFDC  
                                           STR_45 FEEE                                             STR_29 FE6B  
                                           STR_61 FE1D                                             STR_37 FD86  
                                           STR_70 FFA9                                             STR_38 FF25  
                                           STR_54 FF0A                                             STR_62 FEA7  
                                           STR_46 FDB9                                             STR_71 FF7C  
                                           STR_55 FFF0                                             STR_47 FF32  
                                           STR_63 FE7A                                             STR_39 FDEC  
                                           STR_72 FFA9                                             STR_48 FDDF  
                                           STR_64 FF3F                                             STR_56 FE5C  
                                           STR_49 FE8E                                             STR_73 FF7C  
                                           STR_65 FF70                                             STR_57 FF64  
                                           STR_58 FF6B                                             STR_66 FFA9  
                                           STR_74 FE0D                                             STR_67 FF7C  
                                           STR_59 FEFC                                             STR_68 FFA9  
                                 __end_of___lbmod 93A8                                             STR_69 FF7C  
                                 __end_of___flmul 31EE                                   __end_of___fltol 6AA4  
                                           _CMCON 000FB4                                             _T0CON 000FD5  
                                 ___awdiv@divisor 0062                                             _T2CON 000FCA  
                                           u23160 7BB0                                             u22540 73EE  
                                           u23180 7BE6                                             u22534 73DA  
                                           u22470 8562                                             u23510 5938  
                                           u23350 5B18                                             u24230 55FC  
                                           u24070 4770                                             u22535 73D6  
                                           u22560 7412                                             u26010 3496  
                                           u22570 7416                                             u22730 8224  
                                           u23450 5B7E                                             u23290 5AB8  
                                           u24170 47D8                                             u22555 73F0  
                                           u22750 823A                                             _LATCH 01A9  
                                           u22840 940E                                             u33160 77B0  
                                           u22770 8252                                             u23570 5998  
                                           u24290 5678                                             u23730 578E  
                                           u26060 34EC                                             u25500 29B8  
                                           u25420 296C                                             u26300 3A80  
                                           u23670 59FE                                             u24390 56E0  
                                           u24710 81A0                                             u26310 3AA4  
                                           u22855 9410                                             u26400 2F2A  
                                           u24720 81D8                                             u33360 7948  
                                           u26410 30A0                                             u24570 49CE  
                                           u24490 490A                                             u26500 31A4  
                                           u25620 2A2E                                             u34340 86C8  
                                           u33620 7556                                             u34085 3F30  
                                           u24717 8196                                             u24670 4A34  
                                           u23790 580A                                             u34270 868E  
                                           u26270 3A2A                                             u26415 3096  
                                           u24727 81CE                                             u33375 794A  
                                           u25800 32F4                                             u26600 6A04  
                                           u25640 2A36                                             u25560 2A00  
                                           u34360 86DE                                             u33560 74A2  
                                           u25810 3304                                             u23890 5870  
                                           u25820 3306                                             u26460 3130  
                                           u36300 368E                                             u29100 4AD8  
                                           u33740 6CE2                                             u33900 6DAA  
                                           u26605 69FA                                             u23990 46AC  
                                           u28310 50D2                                             u26550 7A20  
                                           u29110 4AF0                                             u33575 74A4  
                                           u26640 6A7C                                             u26720 5F4E  
                                           u28240 509C                                             u36240 3604  
                                           u33760 6CF4                                             u25850 3348  
                                           u26490 3186                                             u29210 4C1C  
                                           u29130 4AFC                                             u28420 5152  
                                           u28340 50EE                                             u29205 4BF6  
                                           u29125 4AF2                                             u37150 7DEA  
                                           u29310 4C58                                             u29230 4C28  
                                           u29150 4B08                                             u28280 50B6  
                                           u36440 37C6                                             u36360 3712  
                                           u29305 4C4E                                             u29225 4C1E  
                                           u29145 4AFE                                             u28450 5172  
                                           u29330 4C64                                             u29250 4C34  
                                           u29170 4B54                                             u25980 347E  
                                           u28540 51D8                                             u37165 7DEC  
                                           u29325 4C5A                                             u29245 4C2A  
                                           u29165 4B0A                                             u29350 4C70  
                                           u29270 4C40                                             u29190 4BF4  
                                           u29430 78B4                                             u29510 6FB0  
                                           u29345 4C66                                             u29265 4C36  
                                           u29185 4B56                                             u37530 13F2  
                                           u29370 4C7C                                             u29290 4C4C  
                                           u44730 63E6                                             u37700 82BE  
                                           u28580 520C                                             u28645 8FF4  
                                           u29365 4C72                                             u29285 4C42  
                                           u29445 78B6                                             u37550 1400  
                                           u37470 11AA                                             u28646 8FF6  
                                           u29630 8882                                             u44750 63F8  
                                           u44670 635E                                             u37650 1748  
                                           u37490 12F0                                             u29570 83C6  
                                           u29810 70F4                                             u44907 7396  
                                           u44917 73F2                                             u44837 905C  
                                           u44685 6360                                             u37590 158A  
                                           u37670 8296                                             u29750 7196  
                                           u44927 73FC                                             u44847 8AB2  
                                           u29920 6BE0                                             u44937 7406  
                                           u44857 9098                                             u37690 82BC  
                                           u29690 7238                                             u44947 741A  
                                           u44867 90D4                                             u37860 77DE  
                                           u44957 95AA                                             u44877 9110  
                                           u29870 7052                                             u44967 922C  
                                           u44887 8014                                             i2l441 7580  
                                           u44977 77EC                                             u44897 8040  
                                           i2l443 758C                                             i2l451 8BA8  
                                           u44987 7804                                             i2l436 95BE  
                                           u37980 8DB0                             _processPotentiometers 3D98  
                                           i2l453 8BD4                                             u44997 950C  
                                           i2l807 7E04                                             i2l808 7E14  
                                 ___awdiv@counter 0064                                     _controlChange 9282  
                                           _SPBRG 000FAF                                             _PORTA 000F80  
                                           _PORTB 000F81                                             _PORTC 000F82  
                                           _PORTD 000F83                                             _PORTE 000F84  
                                    _sort_pitches 61F6                           __size_of_Lcd_Set_Cursor 005A  
                                           _TRISA 000F92                                             _TRISB 000F93  
                                           _TRISC 000F94                                             _TRISD 000F95  
                                           _TRISE 000F96                                             _TXREG 000FAD  
                  ?_keyboard_eight_note_efficient 0001                                     __CFG_PWRT$OFF 000000  
                           __end_of_playThisNote8 2A9A                                     __CFG_WRT0$OFF 000000  
                                   __CFG_WRT1$OFF 000000                        __size_of_keyboardTranspose 02A6  
                                   __CFG_WRT2$OFF 000000                               ___lmul@multiplicand 0064  
                                   __CFG_WRT3$OFF 000000                       encoderInputsBuxton@pinstate 0006  
                                  __CFG_EBTR0$OFF 000000                                    __CFG_FCMEN$OFF 000000  
                                  __CFG_EBTR1$OFF 000000                                    __CFG_EBTR2$OFF 000000  
                                  __CFG_EBTR3$OFF 000000                                     __CFG_WRTB$OFF 000000  
                                 __end_of_display 9616                                     __CFG_WRTC$OFF 000000  
                                   __CFG_WRTD$OFF 000000                                    Read_b_eep@badd 0060  
                                 ??_processOctave 008C                                    __CFG_EBTRB$OFF 000000  
                                           _flag1 0198                                             _flag2 0197  
                                   _transposeMenu 0162                                             _clock 966E  
                 ?_keyboard_sharps_only_efficient 0001                  ??_keyboard_sharps_only_efficient 007D  
             __size_of_key_press_release_note_off 0162                            Write_b_eep@GIE_BIT_VAL 0063  
                                           _randx 01E7                                    noteOn@velocity 006F  
                                           _setup 8886                                             _srand 963A  
                                           _state 0058                                   __end_of_sendUSB 7422  
                                     copy_array@i 0060                                   __end_of_sendOut 95B8  
                                 ?_random_pitches 0001                                    __pbitbssCOMRAM 0190  
                                 __end_of_noteOff 903A                                    __CFG_BOREN$OFF 000000  
                                           pclath 000FFA                                        i2sendUSB@i 000A  
                                           tablat 000FF5                            _playDiatonicTriadMajor 56F4  
                                _suppress_note_on 019D                                  __end_ofi2___lmul 8D90  
                  __size_of_finish_arpeggio_setup 001E                            _playDiatonicTriadMinor 458E  
                                           plusw2 000FDB                     __end_of_finish_arpeggio_setup 959A  
                       __size_of_Lcd_Print_String 007C                __end_of_delete_notes_from_arpeggio 931A  
                      _delete_notes_from_arpeggio 92E8                    keyboardTranspose@semitone_temp 0053  
                                           status 000FD8                                        i2sendOut@a 0001  
                                   _UN_LATCH_MODE 01A8                                             wtemp6 0060  
                                   i2___lbmod@rem 0004                                _encoder_state_last 016F  
       i2random_pitches_non_repeating@randomIndex 0016           random_pitches_non_repeating@randomIndex 0075  
                              __size_ofi2___awdiv 0084                                __size_ofi2___awmod 0070  
                                __end_ofi2_noteOn 8BD8                                __size_ofi2___lbmod 002A  
                            _LAST_NOTE_MODE_RESET 019F                           __size_of_Lcd_Print_Char 0084  
                     __size_of_buttonInputsSerial 007C                                     ?_Function_A_1 0001  
                                   ?_Function_A_2 0001                                     ?_Function_A_3 0001  
                                   ?_Function_C_1 0001                                     ?_Function_C_2 0001  
                                   ?_Function_C_3 0001                                     ?_Function_D_1 0001  
                                   ?_Function_D_2 0001                                     ?_Function_D_3 0001  
                                   ?_Function_D_4 0001                                     ?_Function_E_1 0001  
                                   ?_Function_D_5 0001                                     ?_Function_E_2 0001  
                                   ?_Function_G_1 0001                                     ?_Function_G_2 0001  
                                   ?_Function_G_3 0001                                     ?_Function_G_4 0001  
                                   ?_Function_H_1 0001                                     ?_Function_H_2 0001  
                                   ?_Function_H_3 0001                                     ?_Function_H_4 0001  
                                   ?_Function_H_5 0001                                     ?_Function_H_6 0001  
                                   ?_Function_H_7 0001                                     ?_Function_H_8 0001  
                                   ?_Function_H_9 0001                                   __initialization 6716  
                                    __end_of_main 641A                                      __end_of_load 966E  
                                    __end_of_rand 8B7C                                   ??_programChange 006D  
                                      _Read_b_eep 95D4                                  __end_of_Busy_eep 9668  
                             _half_diminished_7th 02EC                           _initializeSaveSlotsOnce 8F6E  
                              __size_ofi2_sendUSB 009A                                        _Function_A 7F70  
                                      _Function_B 7D74                                        _Function_C 7950  
                              __size_ofi2_sendOut 001C                                        _Function_D 7A5E  
                                      _Function_E 8598                                        _Function_F 86E4  
                                      _Function_G 768C                                        _Function_H 6E5C  
                              __size_ofi2_noteOff 003C                           __size_of_loadFromEEPROM 0238  
                                          ??_main 00CF                            _arpeggiatorOctavesMenu 012F  
                                          ??_load 0060                                            ??_rand 006E  
                                  ?_controlChange 006B                                __size_of_Lcd_Clear 000E  
                                   __activetblptr 000002                                   ??_displayDigits 0015  
                                    ?_playSeventh 0001                                __size_of_Lcd_Start 008C  
                      rotateArrayLeft@array_index 0067                              displayDigits@lowByte 0018  
                                 ??_displayString 0001                i2random_pitches_non_repeating@temp 0015  
                random_pitches_non_repeating@temp 0074                                            ?_clock 0001  
                                          _ADCON0 000FC2                                            _ADCON1 000FC1  
                                          _ADCON2 000FC0                                            _ADRESH 000FC4  
                                          _EEADRH 000FAA                                            _ADRESL 000FC3  
                                          _EEDATA 000FA8                                            _EECON2 000FA7  
                                          _T08BIT 007EAE                                  ___awdiv@dividend 0060  
                                          ?_setup 0001                                            ?_srand 0060  
                    calculate_pulse_length@s_tick 00C4                                   __CFG_BBSIZ$1024 000000  
                                    ?_noteOffDrum 006B                               saveToEEPROM@to_save 0064  
                                          _INT0IE 007F94                                            _INT0IF 007F91  
                                   ?_exitFunction 0001                                            i2l5300 0B5A  
                                          i2l5301 0B58                                            i2l2910 6652  
                                          i2l5302 0B98                                            i2l5303 0B96  
                                          i2l2912 669E                                            i2l5312 0C30  
                                          i2l2913 66C0                                            i2l5321 0D38  
                                          i2l5305 0BAA                                            i2l2914 66E4  
                                          i2l5322 0D50                                            i2l5314 0C80  
                                          i2l5306 0BC2                                            i2l2915 6708  
                                          i2l5323 0D5E                                            i2l5307 0BD0  
                                          i2l2908 6628                                            i2l5340 0F32  
                                          i2l5316 0CD4                                            i2l5317 0CD2  
                                          i2l2870 411A                                            i2l5318 0D26  
                                          i2l2871 4062                                            i2l5271 62FA  
                                          i2l5327 0D90                                            i2l5319 0D24  
                                          i2l2880 41E2                                            i2l2872 407E  
                                          i2l5264 6306                                            i2l5440 8D5E  
                                          i2l5360 10CA                                            i2l5336 0E84  
                                          i2l5328 0DD4                                            i2l2873 4164  
                                          i2l5265 6204                                            i2l5361 10F8  
                                          i2l5345 0F9A                                            i2l5337 0EB2  
                                          i2l5329 0E1C                                            i2l5602 7CD0  
                                          i2l2874 41AA                                            i2l5266 62FC  
                                          i2l5346 0FCE                                            i2l4810 5366  
                                          i2l5603 7CDA                                            i2l5611 863E  
                                          i2l2891 425E                                            i2l5267 620A  
                                          i2l5339 0F00                                            i2l4811 5376  
                                          i2l5604 7CE8                                            i2l5612 8636  
                                          i2l2884 420E                                            i2l5348 1018  
                                          i2l2885 4210                                            i2l2869 41B2  
                                          i2l5269 6282                                            i2l5285 7D68  
                                          i2l5365 1118                                            i2l5349 1046  
                                          i2l4805 532A                                            i2l2894 4298  
                                          i2l5278 8C80                                            i2l5286 7D00  
                                          i2l5358 10BA                                            i2l4806 534A  
                                          i2l5615 8656                                            i2l2895 429A  
                                          i2l2879 41EA                                            i2l5439 8D4A  
                                          i2l5279 8C40                                            i2l5616 8660  
                                          i2l5608 861C                                            i2l2888 4242  
                                          i2l5296 0AB4                                            i2l5617 866E  
                                          i2l5609 8628                                            i2l2897 42B4  
                                          i2l2889 4244                                            i2l2898 42DA  
                                          i2l5298 0B0E                                            i2l5595 7C82  
                                          i2l4795 529C                                            i2l5596 7C92  
                                          i2l4796 52B6                                            i2l5598 7CB0  
                                          i2l5766 9434                                            i2l4798 52C0  
                                          i2l5599 7CA8                                            i2l5767 944C  
                                          i2l4799 5382                                         ??_Lcd_Cmd 0061  
                                          _TMR0IE 007F95                                            _TMR0IF 007F92  
                                          _TMR2IE 007CE9                                            _TMR2IF 007CF1  
                                          _TMR0ON 007EAF                                  i2___lmul@product 0009  
                                          _TMR2ON 007E52                           __end_of_rotateArrayLeft 8442  
                                          _ON_OFF 01B5                                  __end_of___xxtofl 5FA6  
                                          i2_rand 8DE4                      __size_of_initializeMenuArray 0202  
                        __end_of_selectSlotOnBoot 955C                                    ??_Function_A_1 0070  
                                  ??_Function_A_2 0070                                    ??_Function_A_3 0070  
                                  ??_Function_C_1 0070                                    ??_Function_C_2 007A  
                                  ??_Function_C_3 007A                                    ??_Function_D_1 0070  
                                  ??_Function_D_2 00A0                                    ??_Function_D_3 007C  
                                  ??_Function_D_4 007C                                    ??_Function_D_5 007C  
                                  ??_Function_E_1 007A                                    ??_Function_E_2 007A  
                                  ??_Function_G_1 00B4                                    ??_Function_G_2 00CC  
                                  ??_Function_G_3 0070                                    ??_Function_G_4 0072  
                                  ??_Function_H_1 0070                                    ??_Function_H_2 00CC  
                                  ??_Function_H_3 007A                                    ??_Function_H_4 0077  
                                  ??_Function_H_5 0070                                    ??_Function_H_6 008C  
                                  ??_Function_H_7 0070                                    ??_Function_H_8 0070  
                                  ??_Function_H_9 0071                                     ?_panic_button 0001  
                           __end_of_resetArpeggio 9166                                    __CFG_XINST$OFF 000000  
                                 noteOff@velocity 006C                           __size_of_Function_H_6_1 0088  
                         __size_of_Function_H_6_2 00AC                           __size_of_Function_H_8_1 0078  
                         __size_of_Function_H_8_2 0066                           __size_of_Function_H_9_1 00A2  
                         __size_of_Function_H_9_2 00A2                           __size_of_Function_H_9_3 00A2  
                         __size_of_Function_H_9_4 00A2                                  ??_processDrumpad 0071  
                        readPotentiometers@i_3357 00CB                          readPotentiometers@i_3358 00CD  
                                          ___lmul 8C8C                                  ascii@LCD_STRINGS E8C3  
                                       ??___aldiv 0074                                         ??___fladd 00AC  
                                          ___wmul 94CC                                         ??___fldiv 008F  
                                       ??___awdiv 0064                                         ??___flneg 00A4  
                                       ??___awmod 0072                                         ??___lbmod 0061  
                                       ??___flmul 0076                                         ??___fltol 00BC  
                           __size_of_doTheUnLatch 01C0                           ??_add_notes_to_arpeggio 0069  
                                     ?_Lcd_SetBit 0001                                  __end_of_exitLoad 90B2  
                                __end_of_exitSave 90EE                                            _octave 00FC  
                                          clear_0 67BC                                            clear_1 67C8  
                                          clear_2 67D4                                            clear_3 67EA  
                                __end_of_menu_lcd 69C6                                  ___awdiv@quotient 0066  
                                 ___awmod@divisor 0070                                            _noteOn 89AC  
                                 ___awmod@counter 0072                            ?_processPotentiometers 0001  
                                          _ttable F33D                              __size_of_displayTest 007E  
                                          _strcpy 92B6                                         ??_display 001A  
                       _arpeggiatorNoteLengthMenu 0129                                    i2___awdiv@sign 0006  
                               _programChangeMenu 0144                                 _latch_was_pressed 01A6  
                                    __pdataCOMRAM 005B                                       i2sendUSB@ii 000B  
                               __end_ofi2___awdiv 7CF2                                 __end_ofi2___awmod 8678  
                               __end_ofi2___lbmod 9454                                         ?_ADC_Read 0060  
                                       ??_sendUSB 0062                          __size_of_printThisNumber 0012  
                               _suppress_note_off 019C                                         ??_sendOut 0060  
                                    __mediumconst E8C2                  keyboard_all_note_efficient@pitch 0085  
                                       ??_noteOff 006D                                            tblptrh 000FF7  
                                          tblptrl 000FF6                                            tblptru 000FF8  
                                          srand@x 0060                                    i2___awmod@sign 0014  
                                  ??_exitFunction 0070                                   Lcd_Set_Cursor@a 0064  
                                 Lcd_Set_Cursor@b 0063                                   Lcd_Set_Cursor@y 0066  
                                 Lcd_Set_Cursor@z 0065                      __size_of_encoderInputsBuxton 0080  
                                 noteOnDrum@pitch 006E                         loadFromEEPROM@baseAddress 01D2  
                                    ___xxtofl@arg 006A                                      ___xxtofl@exp 0069  
                            selectSlotOnBoot@slot 00CC                             __size_of_analogInputs 0006  
                                    ___xxtofl@val 0060                                   ___lbmod@divisor 0060  
                      _LAST_NOTE_MODE_KEY_RELEASE 01A1                                 __end_ofi2_sendUSB 75F4  
                                      __accesstop 0060                           __end_of__initialization 67F0  
                                 ___lbmod@counter 0062                                 __end_ofi2_sendOut 95D4  
                                 __CFG_PBADEN$OFF 000000                                        ___flneg@f1 00A0  
                               __end_ofi2_noteOff 91DE                __end_of_key_press_release_note_off 5CF4  
                      _key_press_release_note_off 5B92                                     _MAX_NUM_NOTES F39D  
                                    _doTheUnLatch 5076                                 __end_of_Lcd_Clear 9658  
                        __size_of_processKeyboard 006C                                     ___rparam_used 000001  
                                  ??_panic_button 006E                                 _button_state_last 00D4  
                                      ___fltol@f1 00B8                             __end_of_digitalInputs 8DE4  
                               __end_of_Lcd_Start 7840                     processPotentiometers@highByte 0072  
                   __size_of_setControllerNumbers 04F8                                    __pcstackCOMRAM 0001  
                          _diatonic_seventh_major F2A7                         ??_initializeSaveSlotsOnce 00B4  
                    ?_keyboard_all_note_efficient 0001                              initializeMenuArray@i 006C  
                                    __pidataBANK0 9658                                      __pidataBANK1 9454  
                                    __pidataBANK2 8E38                                      __pidataBANK3 874E  
                          _diatonic_seventh_minor F26B                               buttonInputsSerial@i 0064  
                                   __end_of_clock 9674                                       ?_Read_b_eep 0060  
                                   _stored_octave 00E7                                     __end_of_setup 88EA  
                                   __end_of_srand 964A                                   ??_controlChange 006D  
                                     ?_Function_A 0001                                       ?_Function_B 0001  
                                     ?_Function_C 0001                                       ?_Function_D 0001  
                                     ?_Function_E 0001                                       ?_Function_F 0001  
                                     ?_Function_G 0001                                       ?_Function_H 0001  
                     _arpeggiatorLastNoteModeMenu 00DC                               ADC_Read@adc_channel 0064  
                                       ?i2___lmul 0001                           Function_C_2@array_index 007B  
                                   ?_playArpeggio 0001                              _number_of_interrupts 0288  
                                  _Lcd_Set_Cursor 8BD8                                        ??_ADC_Read 0062  
                                   ?_saveToEEPROM 0001                                      _analogInputs 9674  
                    __end_of_pentatonic_major_key F39D                                   _slidepotsCCMenu 014D  
                               i2_printThisNumber 9628                        add_notes_to_arpeggio@pitch 0070  
                                       ?i2_noteOn 000F                                  playSeventh@pitch 007F  
delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT 006A                        __end_of_readPotentiometers 174C  
                                         ??_clock 0060                                ?i2_printThisNumber 0001  
                                 findArrayIndex@i 0062                      __end_of_processEncoderBuxton 0A42  
                                         ??_setup 0060                                           ??_srand 0062  
                           displayDigits@highByte 0019                                        __pbssBANK0 00D0  
                                      __pbssBANK1 0100                                        __pbssBANK2 0200  
                                      _doTheLatch 955C                i2random_pitches@random_array_index 0015  
                random_pitches@random_array_index 0074                                     ?_playThisNote 0001  
                                _Lcd_Print_String 8164                         keyboardTranspose@keyPress 0193  
                             __size_of_Lcd_SetBit 0030                                         ?_Busy_eep 0001  
                    __end_of_pentatonic_minor_key F392                                  ?_rotateArrayLeft 0001  
                          _drum_button_state_last 00ED                               ??i2_printThisNumber 0003  
                                         ?i2_rand 000D                                    _Lcd_Print_Char 7B66  
                               ?i2_random_pitches 0001                          ??_calculate_pulse_length 00C4  
                    ??_delete_notes_from_arpeggio 0069                                      _DISPLAY_MODE 005A  
                                      _clear_row1 94A4                                        _clear_row2 947C  
                              ??i2_random_pitches 0015                                           ?___lmul 0060  
                                         ?___wmul 0064                            saveToEEPROM@byte_count 00B2  
                    playDiatonicTriadMajor@i_1679 007D                                __size_of_playTriad 0180  
                              __size_of_pitchBend 0034                     ??_keyboard_all_note_efficient 0085  
                                  ___lmul@product 0068                                Lcd_SetBit@data_bit 0060  
                                  _loadFromEEPROM 4A48                                           ?_noteOn 006E  
                          __end_of_Lcd_Set_Cursor 8C32                                     ??_Write_b_eep 0063  
                                  ??_playArpeggio 0018                           __size_of_ADC_Initialize 0014  
                                         ?_strcpy 0060                                        ??i2___lmul 0009  
                         Function_C_3@array_index 007B                         __end_ofi2_printThisNumber 963A  
                               _number_to_display 005B                                        _eepromMenu 013B  
                                      _eepromExit 90EE                           __size_of_findArrayIndex 003C  
                                         i2l22645 6620                                    ??_saveToEEPROM 0064  
                                         _INTEDG0 007F8E                                           i2l19405 7584  
                                         _DRUM_CC 01D7                                           i2l19399 7578  
                                       ?___xxtofl 0060                                           _OCTAVES 00F8  
              findArrayIndex@pitch_of_key_release 0061                                  ??_random_pitches 0074  
                            __end_of_Function_A_1 8164                  int2string@number_to_display_temp 0078  
                            __end_of_Function_A_2 80E8                              __end_of_Function_A_3 7B66  
                            __end_of_Function_C_1 77B4                              __end_of_Function_C_2 61F6  
                            __end_of_Function_C_3 60CE                              __end_of_Function_D_1 7950  
                            __end_of_Function_D_2 89AC                              __end_of_Function_D_3 8352  
                            __end_of_Function_D_4 7F70                              __end_of_Function_D_5 7EF2  
                            __end_of_Function_E_1 8F24                              __end_of_Function_E_2 8ED6  
                            __end_of_Function_G_1 7380                              __end_of_Function_G_2 72DE  
                            __end_of_Function_G_3 8AC4                              __end_of_Function_G_4 74C0  
                            __end_of_Function_H_1 755A                              __end_of_Function_H_2 8820  
                            __end_of_Function_H_3 8A68                              __end_of_Function_H_4 6CFE  
                            __end_of_Function_H_5 6E5C                              __end_of_Function_H_6 8526  
                            __end_of_Function_H_7 6DAE                              __end_of_Function_H_8 84B4  
                            __end_of_Function_H_9 768C                                        ??i2_noteOn 0011  
                        ?_setControllerResolution 0001                              __size_of_playSeventh 018E  
                 __end_of_initializeSaveSlotsOnce 8FB8                           ?_playDiatonicTriadMajor 0077  
                         ?_playDiatonicTriadMinor 0077                                        _drumCCMenu 0159  
                                  ??_playThisNote 0080               _arpeggiatorLastNoteModeKeyPressMenu 0111  
                               ??_printThisNumber 0062                               __size_of_Read_b_eep 001A  
                                doTheUnLatch@once 0192                                        _int2string 6AA4  
                                 _ARPEGGIO_RANDOM 028C                                   Lcd_Print_Char@i 0064  
                                      _dorian_key FD46                                        ??_Busy_eep 0060  
                                         _Lcd_Cmd 94F4                            __end_of_Lcd_Print_Char 7BEA  
                                      _drumNNMenu 015C                                         ?_exitLoad 0001  
                            __size_of_noteOffDrum 0038                                        _copy_array 88EA  
                                       ?_exitSave 0001                       ?_delete_notes_from_arpeggio 0001  
                                     noteOn@pitch 006E                                   _ARPEGGIO_SORTED 029C  
                             __size_of_Function_A 007E                               __size_of_Function_B 0080  
                             __size_of_Function_C 0088                               __size_of_Function_D 0084  
                             __size_of_Function_E 0070                               __size_of_Function_F 006A  
                             __size_of_Function_G 0094                               __size_of_Function_H 00AC  
                                       ?_menu_lcd 0001                          _playDiatonicSeventhMajor 5562  
                 ??_keyboard_eight_note_efficient 0088                          _playDiatonicSeventhMinor 47EC  
                                 __size_ofi2_rand 0054                              i2sendUSB@midiMessage 0006  
                 i2random_pitches_non_repeating@i 0017                     random_pitches_non_repeating@i 0076  
                                         __Hparam 0000                                      _CONTROL_MODE 0194  
                       playDiatonicSeventhMajor@i 007C                                    _mixolydian_key FD19  
                                         __Lparam 0000                                 _potentiometer_raw 0260  
                           __end_of_setupArpeggio 825C                                    _Function_H_6_1 7840  
                                  _Function_H_6_2 6F08                                    _Function_H_8_1 8352  
                                  _Function_H_8_2 8820                                    _Function_H_9_1 719A  
                                  _Function_H_9_2 70F8                                    _Function_H_9_3 7056  
                                  _Function_H_9_4 6FB4            __end_of_keyboard_sharps_only_efficient 3D98  
         __size_of_keyboard_sharps_only_efficient 02AE                    _keyboard_sharps_only_efficient 3AEA  
                       playDiatonicSeventhMinor@i 007D                                           ___aldiv 6B78  
                                         ___fladd 31EE                                   _midiChannelMenu 0147  
                                         ___fldiv 3834                                           ___awdiv 79D8  
                                         ___flneg 931A                                   __size_of___lmul 0058  
                                         ___awmod 8526                                           ___lbmod 937A  
                                         ___flmul 2E9C                            __end_of_loadFromEEPROM 4C80  
                                         ___fltol 69C6                                   __size_of___wmul 0028  
                               ??_processKeyboard 008A                              __end_of_exitFunction 9076  
                                 __CFG_STVREN$OFF 000000                                           _channel 00F6  
                                         __pcinit 6716                                           __ramtop 0D00  
                                 ?_Lcd_Set_Cursor 0063                                        _ionian_key FD55  
                                 __size_of_noteOn 0060                                           _ema_sum 0240  
                               __end_of_major_key F387                                           __ptext0 6310  
                                         __ptext1 963A                                           __ptext2 8886  
                                         __ptext3 953C                                           __ptext4 951A  
                                         __ptext5 68E4                                           __ptext6 964A  
                                         __ptext7 6E5C                                           __ptext8 75F4  
                                         __ptext9 6FB4                                           _command 01ED  
                              _NOTE_LENGTH_PULSES 00F7                                           _display 9602  
                                 __size_of_strcpy 0032                                      __size_of_ISR 53C6  
                             _initializeMenuArray 4C80                                      __size_of_map 00E6  
                                      ??___xxtofl 0064                            saveToEEPROM@slotNumber 00B1  
                                ___awmod@dividend 006E                              __end_of_panic_button 953C  
                                         _sendUSB 7380                                  ___aldiv@dividend 006C  
                  __end_of_playDiatonicTriadMajor 5884                                           _sendOut 959A  
                  __end_of_playDiatonicTriadMinor 47EC                                  rotateArrayLeft@i 0068  
                                         _noteOff 8FFA                                  noteOffDrum@pitch 006B  
                             __end_of_Write_b_eep 8FFA             _arpeggiatorLastNoteModeKeyReleaseMenu 010E  
                                playTriad@triad_p 007B                                 __end_of_seg_ascii F26B  
                         saveToEEPROM@baseAddress 00AF                          __end_ofascii@LCD_STRINGS F220  
            __size_of_keyboard_all_note_efficient 051A                                 __end_of_minor_key F378  
                        __size_of_calculate_alpha 004A                   setControllerNumbers@array_index 007B  
                                       _DRUM_MODE 0195                                         _DRUM_NOTE 01DF  
                                  __pintcode_body 5236              __end_of_random_pitches_non_repeating 7C6E  
           __size_of_random_pitches_non_repeating 0084                             __end_of_processOctave 3834  
                ??i2_random_pitches_non_repeating 0015                   ?i2_random_pitches_non_repeating 0001  
                    _random_pitches_non_repeating 7BEA                              end_of_initialization 67F0  
                               __end_of_playTriad 5B92                                       ?_doTheLatch 0001  
                               __end_of_pitchBend 9282                                   ?_Lcd_Print_Char 0001  
                                      ??_exitLoad 0070                                     __Lmediumconst E8C2  
                            _light_decimal_points 01B6                                           int_func 5236  
                                      ??_exitSave 0070                                        ??_menu_lcd 00CE  
                      __end_of_buttonInputsSerial 82D8                                        _noteOnDrum 8CE4  
                                  displayString@i 0002                            __end_of_mixolydian_key FD28  
                                       i2u3000_45 75C4                                         i2u3001_40 75E4  
                         __size_of_wait_one_pulse 002A                                         i2u3002_40 75E8  
                            ?_initializeMenuArray 0001                            __end_of_Function_H_6_1 78C8  
                          __end_of_Function_H_6_2 6FB4                            __end_of_Function_H_8_1 83CA  
                          __end_of_Function_H_8_2 8886                            __end_of_Function_H_9_1 723C  
                          __end_of_Function_H_9_2 719A                            __end_of_Function_H_9_3 70F8  
                          __end_of_Function_H_9_4 7056                                         i2u3422_40 8642  
                           _finish_arpeggio_setup 957C                                         i2u3416_40 7CB4  
                                       i2u4500_47 52A6                                         i2u4501_47 756E  
                                       i2u4502_47 75C6                                         i2u4503_47 75D0  
                                       i2u4504_47 75DA                                        _noteNumber 00F4  
                                       i2u4505_47 75EC                                         i2u4506_47 95C6  
                                       i2u3651_40 4050                                         i2u3803_40 0A60  
                                       i2u4460_40 5346                                         i2u3662_40 41C6  
                                       i2u4456_40 52FE                                         i2u3656_45 412C  
                                       i2u3825_40 0BE0                                         i2u3657_45 414E  
                                       i2u3659_45 417E                                         i2u3692_40 667C  
                               ?_selectSlotOnBoot 0001                                         i2u3790_48 7E20  
                                       i2u3855_40 0E34                                         i2u3847_40 0D70  
                                       i2u3865_40 0F42                                         i2u3882_40 10A6  
                                       i2u3789_40 7E1E                                 pitchBend@highByte 006C  
                                       i2u3878_40 1086                                         i2u2998_44 75B0  
                                       i2u2998_45 75AC                                         i2u2999_40 75C2  
                                      _lydian_key FD28                                         i2u3889_40 1106  
                 __size_of_calculate_pulse_length 015E                                       ?_clear_row1 0001  
                                     ?_clear_row2 0001                                    _diatonic_major F310  
                                  _diatonic_minor F2E3                            __size_of_playThisNote8 0426  
                            _pentatonic_major_key F392                                    _joystickCCMenu 014A  
                                       _PRESCALER 005D                                        _potsCCMenu 0150  
                                ___aldiv@quotient 0076                                ??_selectSlotOnBoot 00CC  
                                         postdec1 000FE5                                           postdec2 000FDD  
                                         postinc0 000FEE                                           postinc1 000FE6  
                                         postinc2 000FDE                           ??_processPotentiometers 006E  
                             i2___lmul@multiplier 0001                                   _drumChannelMenu 013E  
                                 ?_loadFromEEPROM 0001                               noteOffDrum@velocity 006C  
                              controlChange@value 006C                               _encoderInputsBuxton 7DF4  
                                    ??_Lcd_SetBit 0060                              _processEncoderBuxton 0012  
                           __end_of_programChange 93D4                                 playThisNote@pitch 0084  
                  __size_of_add_notes_to_arpeggio 00FE                          ??_playThisNotePentatonic 0078  
                   __end_of_add_notes_to_arpeggio 661C                                    _string2display 0182  
                               _encoder_direction 00EB                              _pentatonic_minor_key F387  
                      __size_ofi2_printThisNumber 0012                                        _which_mode 00F1  
                                      _which_note 0057                                       ?_eepromExit 0001  
                                     ___fladd@grs 00B7                                  ___lbmod@dividend 0061  
                           __end_of_displayDigits 42E8                                     ___xxtofl@sign 0068  
                           loadFromEEPROM@to_load 0187                                       ___fldiv@grs 009A  
                                     ___fldiv@rem 0094                                 __size_of_ADC_Read 0038  
                                       i2___awdiv 7C6E                                         i2___awmod 8608  
                                       i2___lbmod 942A                             __end_of_displayString 6716  
                            ?_encoderInputsBuxton 0001                      playDiatonicTriadMinor@i_1689 007E  
                                 _TIMER_OVERFLOWS 0054                                      _dominant_7th 02F8  
                             __end_of_aeolian_key FD19                                        map@out_max 008A  
                                      map@out_min 0086                                       ?_int2string 0074  
                            _arpeggiatorLatchMenu 0126                                       ___lbmod@rem 0063  
                                      _statusByte 00F5                                       ___flmul@grs 007B  
                   ?_random_pitches_non_repeating 0001                              _arpeggiatorOnOffMenu 0135  
                                     ?_copy_array 0001                                programChange@data1 006B  
                              programChange@data2 006C                        _potentiometer_filtered_now 0220  
                              __end_of_Lcd_SetBit 937A                             ??_initializeMenuArray 006A  
                     ?_key_press_release_note_off 0001                              __end_of_playArpeggio 114C  
                              i2___awdiv@dividend 0001                        _arpeggiatorUnLatchModeMenu 011D  
                          __end_of_diatonic_major F33D                                   ?_Function_H_6_1 0001  
                                 ?_Function_H_6_2 0001                                   ?_Function_H_8_1 0001  
                                 ?_Function_H_8_2 0001                                   ?_Function_H_9_1 0001  
                                 ?_Function_H_9_2 0001                                   ?_Function_H_9_3 0001  
                                 ?_Function_H_9_4 0001                            __end_of_diatonic_minor F310  
                                       i2_sendUSB 755A                              __end_of_saveToEEPROM 5076  
                                  __end_ofi2_rand 8E38                                         i2_sendOut 95B8  
                                       i2_noteOff 91A2                                     noteOn@channel 0070  
                                       _Lcd_Clear 964A             __end_of_keyboard_eight_note_efficient 2E9C  
          __size_of_keyboard_eight_note_efficient 0402                     _keyboard_eight_note_efficient 2A9A  
                              displayDigits@digit 0037                       _calculate_pulse_length$5807 00C8  
                                   ??_displayTest 0066                                      ??_Read_b_eep 0062  
                                       _Lcd_Start 77B4                             ?_processEncoderBuxton 0001  
                                  __end_of___lmul 8CE4                                    __end_of___wmul 94F4  
                                   __pidataCOMRAM 967A                              __end_of_playThisNote 651E  
                                    ??_Function_A 0071                                      ??_Function_B 0070  
                                    ??_Function_C 007C                                      ??_Function_D 00A0  
                                    ??_Function_E 007A                                      ??_Function_F 007A  
                                    ??_Function_G 00CD                                      ??_Function_H 00CC  
                           __size_of_Function_A_1 007C                             __size_of_Function_A_2 007C  
                             __size_of_doTheLatch 0020                             __size_of_Function_A_3 0084  
                           __size_of_Function_C_1 0094                             __size_of_Function_C_2 0128  
                           __size_of_Function_C_3 0128                             __size_of_Function_D_1 0088  
                           __size_of_Function_D_2 0060                             __size_of_Function_D_3 007A  
                           __size_of_Function_D_4 007E                             __size_of_Function_D_5 007E  
                           __size_of_Function_E_1 004E                             __size_of_Function_E_2 004E  
                           __size_of_Function_G_1 00A2                             __size_of_Function_G_2 00A2  
                           __size_of_Function_G_3 005C                             __size_of_Function_G_4 009E  
                           __size_of_Function_H_1 009A                             __size_of_Function_H_2 0068  
                           __size_of_Function_H_3 005C                             __size_of_Function_H_4 00B8  
                           __size_of_Function_H_5 00AE                             __size_of_Function_H_6 0072  
                           __size_of_Function_H_7 00B0                             __size_of_Function_H_8 0072  
                           __size_of_Function_H_9 0098                                    _ADC_Initialize 95EE  
                        __end_of_Lcd_Print_String 81E0                          setControllerResolution@i 0060  
                                     _Write_b_eep 8FB8                       playThisNotePentatonic@index 0077  
                                  __end_of_noteOn 8A0C                                    _TRANSPOSE_MODE 01AE  
                     playThisNotePentatonic@pitch 0001                                 i2sendUSB@message1 0009  
                               i2sendUSB@message2 0001                                 i2sendUSB@message3 0002  
                                  _findArrayIndex 9166                                    __end_of_ttable F359  
                            _arpeggiatorTempoMenu 0132                   readPotentiometers@FIRST_READING 0190  
                                  __end_of_strcpy 92E8                      __end_of_setControllerNumbers 2674  
                             start_initialization 6716                            _calculate_pulse_length 5CF4  
                               _encoder_state_now 0170                                 __size_ofi2___lmul 0056  
                              i2___awdiv@quotient 0007                                       __end_of_ISR 53CE  
                                   _playThisNote8 2674                            __size_of_resetArpeggio 003C  
                                     __end_of_map 68E4                               __size_of_clear_row1 0028  
                             __size_of_clear_row2 0028                                wait_one_pulse@mode 0060  
                                      ?i2___awdiv 0001                             ??_encoderInputsBuxton 0001  
                                      ?i2___awmod 000F                                        ?i2___lbmod 0001  
                               __size_ofi2_noteOn 005C                                 playSeventh@i_1662 007E  
                playThisNotePentatonic@temp_pitch 007C                                __end_of_Read_b_eep 95EE  
                  __end_of_diatonic_seventh_major F2E3                            ?_finish_arpeggio_setup 0001  
                  __end_of_diatonic_seventh_minor F2A7                                       ?_noteOnDrum 006E  
                               Lcd_Print_String@a 006A                                 Lcd_Print_String@i 006E  
                                    _lastNoteMode 01A3                                 ??_calculate_alpha 00A0  
                                        ??i2_rand 000F                                __end_of_Function_A 7FEE  
                              __end_of_Function_B 7DF4                                __end_of_Function_C 79D8  
                              __end_of_Function_D 7AE2                                __end_of_Function_E 8608  
                              __end_of_Function_F 874E                                __end_of_Function_G 7720  
                              __end_of_Function_H 6F08                                 __size_of_Busy_eep 0006  
                              _readPotentiometers 114C                                        ?i2_sendUSB 0001  
                             __size_of_eepromExit 003C                                     _ARPEGGIO_TYPE 00EA  
                                      ?i2_sendOut 0001                                        ?i2_noteOff 000C  
                           __size_of_exitFunction 003C                                      _Function_A_1 80E8  
                                    _Function_A_2 806C                                      _Function_A_3 7AE2  
                                    _Function_C_1 7720                                      _Function_C_2 60CE  
                                    _Function_C_3 5FA6                                      _Function_D_1 78C8  
                                    _Function_D_2 894C                                      _Function_D_3 82D8  
                                    _Function_D_4 7EF2                                      _Function_D_5 7E74  
                                    _Function_E_1 8ED6                                      _Function_E_2 8E88  
                                    _Function_G_1 72DE                                      _Function_G_2 723C  
                                    _Function_G_3 8A68                                      _Function_G_4 7422  
                                    _Function_H_1 74C0                                      _Function_H_2 87B8  
                                    _Function_H_3 8A0C                                      _Function_H_4 6C46  
                                    _Function_H_5 6DAE                                      _Function_H_6 84B4  
                                    _Function_H_7 6CFE                                      _Function_H_8 8442  
                                    _Function_H_9 75F4                                   _encoderPolarity 01B1  
                                      ?_Lcd_Clear 0001                                          ??___lmul 0068  
                             displayString@letter 0100                                          ??___wmul 0068  
                                      ?_Lcd_Start 0001                            __end_of_ADC_Initialize 9602  
                         readPotentiometers@count 0280                               ?_readPotentiometers 0001  
                                     __pdataBANK0 00F7                                       __pdataBANK1 01D7  
                                     __pdataBANK2 02AC                                       __pdataBANK3 0300  
                                __CFG_LPT1OSC$OFF 000000                               __end_of_LCD_STRINGS FCFB  
                           __size_of_panic_button 0022                        Lcd_Print_Char@Lower_Nibble 0061  
                          __end_of_findArrayIndex 91A2                                          ??_noteOn 0070  
                             __size_of_int2string 00D4                               _encoderPolarityMenu 0138  
                           __end_of_controlChange 92B6                                          ??_strcpy 0064  
                 __size_of_playThisNotePentatonic 0194                                         ___fladd@a 00A8  
                                       ___fladd@b 00A4                               __size_of_copy_array 0062  
                       __size_ofi2_random_pitches 005A                                   _printThisNumber 9616  
                                   ?_sort_pitches 0001                                         ___fldiv@a 008B  
                                       ___fldiv@b 0087                                     _TIMER_PRELOAD 016D  
                             __end_of_displayTest 806C                           Function_D_3@array_index 007D  
                         __size_of_processDrumpad 0516                                         ___flmul@a 0072  
                                       ___flmul@b 006E                                       __pbssCOMRAM 0037  
                                     _aeolian_key FD0A                                  _button_state_now 00D8  
                      displayDigits@digit_counter 0052                                    ?_playThisNote8 007F  
                                   __pcstackBANK0 0060                                     __pcstackBANK1 0187  
                          __size_of_digitalInputs 0054                        ??_playDiatonicSeventhMajor 0078  
                _arpeggiatorLastNoteModeResetMenu 0108                        ??_playDiatonicSeventhMinor 0078  
                               __size_of___xxtofl 0154                                     sort_pitches@a 0003  
                     displayString@letter_counter 0051                                     sort_pitches@i 0005  
                                   sort_pitches@j 0004                              ??_readPotentiometers 00C2  
                          processPotentiometers@i 0073                                      _exitFunction 903A  
                                     _ARPEGGIO_ON 01AC                                          ?_Lcd_Cmd 0001  
                                    _keyboardMenu 004A                                   _processKeyboard 8678  
                                  _wait_one_pulse 9400                                  printThisNumber@n 0060  
                        ?_initializeSaveSlotsOnce 0001                             _drum_button_state_now 00EE  
                __size_of_setControllerResolution 002C                                 __size_of_exitLoad 003C  
                            __end_of_phrygian_key FD46                                 __size_of_exitSave 003C  
                             readPotentiometers@i 00CC                                 __size_of_menu_lcd 00E2  
                                    _panic_button 951A                    ??_random_pitches_non_repeating 0074  
                                   _resetArpeggio 912A                                  ??_Lcd_Set_Cursor 0064  
                                       _ema_alpha 0104                                     Function_H_5@i 0071  
                                       __pintcode 0008                                     __pmediumconst E8C2  
                          ??_processEncoderBuxton 0060                                          ?___aldiv 006C  
                                        ?___fladd 00A4                                   _arpeggiatorMenu 003B  
                                        ?___fldiv 0087                          __size_of_rotateArrayLeft 0078  
                                        ?___awdiv 0060                                         __ptext100 8B20  
                                       __ptext101 8526                                         __ptext110 91DE  
                                       __ptext102 88EA                                          ?___flneg 00A0  
                                       __ptext111 42E8                                         __ptext103 912A  
                                       __ptext120 114C                                         __ptext112 9400  
                                       __ptext104 92E8                                         __ptext121 3D98  
                                       __ptext113 9616                                         __ptext105 9166  
                                       __ptext130 69C6                                         __ptext122 924E  
                                       __ptext114 5B92                                         __ptext106 651E  
                                       __ptext131 931A                                         __ptext123 9282  
                                       __ptext115 8FFA                                         __ptext107 83CA  
                                       __ptext140 9628                                         __ptext132 2E9C  
                                       __ptext124 7380                                         __ptext116 825C  
                                       __ptext108 1C66                                         __ptext141 942A  
                                       __ptext133 31EE                                         __ptext125 959A  
                                       __ptext117 9668                                         __ptext109 8CE4  
                                       __ptext150 95B8                                         __ptext142 0A42  
                                       __ptext134 9216                                         __ptext126 67FE  
                                       __ptext118 966E                                         __ptext151 61F6  
                                       __ptext143 7CF2                                         __ptext135 77B4  
                                       __ptext127 8C8C                                         __ptext119 9674  
                                       __ptext152 7DF4                                         __ptext144 8C32  
                                       __ptext136 94F4                                         __ptext128 6B78  
                                       __ptext153 9602                                         __ptext145 8DE4  
                                       __ptext137 934A                                         __ptext129 5E52  
                                       __ptext154 661C                                         __ptext146 8D3A  
                                       __ptext138 95EE                                         __ptext155 4040  
                                       __ptext147 8B7C                                         __ptext156 8608  
                                       __ptext148 91A2                                         __ptext157 7C6E  
                                       __ptext149 755A                                          ?___awmod 006E  
                                        ?___lbmod 0060                                          ?___flmul 006E  
                                        ?___fltol 00B8                                   ?_ADC_Initialize 0001  
                                      playTriad@i 007D                                       _ARRAY_INDEX 00E4  
            _arpeggiatorLastNoteModeTransposeMenu 010B                                    _diminished_7th 02E8  
                                 ?_findArrayIndex 0001                                       _ema_integer 00FB  
                                  ??_sort_pitches 0001                                          ?_display 0001  
                                   ??_playSeventh 0077                    playDiatonicSeventhMajor@i_1684 007D  
                             __size_of_noteOnDrum 0056                                         _count_ISR 0284  
                   controlChange@controllerNumber 006B                          encoderInputsBuxton@tempA 0004  
                        encoderInputsBuxton@tempB 0005                           Function_D_4@array_index 007D  
                                       _major_7th 02F4                                   playTriad@i_1657 007E  
                                        _ADC_Read 9216                                          ?_sendUSB 0060  
                                        ?_sendOut 0001                                 i2random_pitches@i 0016  
                                       _major_key F378                                          ?_noteOff 006B  
                                       _last_note 00E8                                  ??_Lcd_Print_Char 0061  
                                       _menuArray 0300                                      _patch_number 0171  
                                  __size_of_clock 0006                                      playSeventh@i 007D  
                                        _ARPEGGIO 0172                                       ??i2___awdiv 0005  
                                     ??i2___awmod 0013                                       ??i2___lbmod 0002  
                           __size_of_playArpeggio 070A                                     ??_noteOffDrum 006D  
                                  __size_of_setup 0064                                    __size_of_srand 0010  
                                    ??_doTheLatch 0066                            __end_of_wait_one_pulse 942A  
                           __size_of_saveToEEPROM 01F4                                         _minor_7th 02F0  
                                 ___aldiv@divisor 0070                                noteOffDrum@channel 006D  
                                       _seg_ascii F220                                   ___aldiv@counter 0074  
                          _playThisNotePentatonic 53CE                                         _minor_key F369  
                                  ___wmul@product 0068                                         _playTriad 5A12  
                            int2string@isNegative 0191                                         _pitchBend 924E  
                                ??_loadFromEEPROM 00CC                                  pitchBend@channel 006D  
                                       _savesMenu 00DF                                       ??i2_sendUSB 0003  
                                     _arpeggioPtr 004F                                    ?_resetArpeggio 0001  
                                     ??i2_sendOut 0001                                     _digitalInputs 8D90  
                                        Lcd_Cmd@a 0062                                       ??i2_noteOff 000E  
                                    ??_clear_row1 0070                                      ??_clear_row2 0070  
                            _setControllerNumbers 217C                                       _LCD_STRINGS F39E  
                           __size_of_playThisNote 0104                                          _GO_nDONE 007E11  
             __end_of_keyboard_all_note_efficient 1C66                       _keyboard_all_note_efficient 174C  
                                     ??_Lcd_Clear 0063                                  __CFG_WDTPS$32768 000000  
      initializeSaveSlotsOnce@initializeSlotsOnce 00B4                                          _HYST_VAL 01EB  
          __end_ofi2_random_pitches_non_repeating 7D74           __size_ofi2_random_pitches_non_repeating 0082  
                  i2_random_pitches_non_repeating 7CF2                                  _diminished_triad 01F3  
                         __end_of_printThisNumber 9628                                       ??_Lcd_Start 0063  
                                pitchBend@lowByte 006B                                       _displayTest 7FEE  
                             __end_of_locrian_key FD0A                                          _POT_MODE 01B4  
                             __end_of_seg_bcd_hex F369                    key_press_release_note_off@temp 00E2  
                  __size_of_processPotentiometers 02A8                                _buttonInputsSerial 825C  
                   __end_of_processPotentiometers 4040                                         map@in_max 0082  
                                       map@in_min 007E                                         _triadMenu 0044  
                        buttonInputsSerial@i_4382 0065                                __end_of_doTheLatch 957C  
                               ___wmul@multiplier 0064                                     _skipFirstLast 01A4  
                                        i2___lmul 8D3A                                   ??_playThisNote8 0080  
                                    _playArpeggio 0A42                                   Write_b_eep@badd 0060  
                                 Write_b_eep@bdat 0062                                      ??_eepromExit 0070  
                    _arpeggiatorSkipFirstLastMenu 0114                         __size_of_selectSlotOnBoot 0020  
                    _arpeggiatorRandomizeSkipMenu 011A                           Function_D_5@array_index 007D  
                             ?_buttonInputsSerial 0001                                 i2___awdiv@divisor 0003  
                                    _saveToEEPROM 4E82                                 i2___awdiv@counter 0005  
                                        i2_noteOn 8B7C                           __end_of_processKeyboard 86E4  
                          __size_of_setupArpeggio 007C                                 _string_to_display 01EE  
                                    noteOff@pitch 006B                                 ___lmul@multiplier 0060  
                              __end_of_clear_row1 94CC                                __end_of_clear_row2 94A4  
                             __end_of_playSeventh 5A12                                         copy_data0 672A  
                                       copy_data1 674A                                         copy_data2 676A  
                                       copy_data3 678A                                         copy_data4 67AA  
                                ??_Function_H_6_1 008C                                  ??_Function_H_6_2 0070  
                                ??_Function_H_8_1 0070                                  ??_Function_H_8_2 0070  
                                ??_Function_H_9_1 0070                                  ??_Function_H_9_2 0070  
                                ??_Function_H_9_3 0070                                  ??_Function_H_9_4 0070  
                              i2___awmod@dividend 000F               displayDigits@number_to_display_last 016B  
                    _arpeggiatorRandomizeTypeMenu 0117                                      ??_int2string 0076  
                                 ?_wait_one_pulse 0001               displayDigits@number_to_display_temp 004D  
                                    _playThisNote 641A                                          _Busy_eep 9662  
                                    ??_copy_array 0060                             __end_of_MAX_NUM_NOTES F39E  
                               _NUM_NOTES_PRESSED 00E5                           __size_of_random_pitches 005C  
                                   ?_doTheUnLatch 0001                                  __size_of_Lcd_Cmd 0026  
                                      ?_playTriad 0001                                        _EECON1bits 000FA6  
                                      ?_pitchBend 006B                               __end_of_noteOffDrum 9216  
                                 _octave_overflow 019A                                    ?_digitalInputs 0001  
                            ??_buttonInputsSerial 0060                                       _major_triad 01FC  
                                        __Hrparam 0000                             ?_setControllerNumbers 0001  
                             _arpeggiatorTypeMenu 012C                                          __Lrparam 0000  
                                 _augmented_triad 01F6                                __end_of_eepromExit 912A  
                                      _DIGIT_MODE 0059                                  __size_of___aldiv 00CE  
                                __size_of___fladd 033E                                  __size_of___fldiv 02B6  
                                __size_of___awdiv 0086                                  __size_of___flneg 0030  
                                     _last_octave 0055                                  __size_of___awmod 0072  
                                __size_of___lbmod 002E                                  __size_of___flmul 0352  
                                __size_of___fltol 00DE                                       _drumchannel 00FE  
                          __size_of_processOctave 0308                              playSeventh@seventh_p 007B  
                                    ?_Write_b_eep 0060                           ?_calculate_pulse_length 00C2  
                               ?_Lcd_Print_String 006A                                __end_of_int2string 6B78  
                                i2_random_pitches 8C32                                 ??_rotateArrayLeft 0060  
                              __end_of_dorian_key FD55                                         sendUSB@ii 006A  
                                  _processDrumpad 1C66                                  __size_of_display 0014  
                              __end_of_copy_array 894C                                          ___xxtofl 5E52  
                           _add_notes_to_arpeggio 651E                                ??_Lcd_Print_String 006C  
                                   ?_analogInputs 0001                                   _mainChannelMenu 0141  
                __end_of_playDiatonicSeventhMajor 56F4                  __end_of_playDiatonicSeventhMinor 4A48  
                                __size_of_sendUSB 00A2                                   _calculate_alpha 8F24  
                                __size_of_sendOut 001E                                  __size_of_noteOff 0040  
                                        __ptext10 7056                                          __ptext11 70F8  
                                        __ptext20 6DAE                                          __ptext12 719A  
                                        __ptext21 6C46                                          __ptext13 8442  
                                        __ptext30 4A48                                          __ptext22 8A0C  
                                        __ptext14 8820                                          __ptext31 5CF4  
                                        __ptext23 87B8                                          __ptext15 8352  
                                        __ptext40 8ED6                                          __ptext32 9076  
                                        __ptext24 74C0                                          __ptext16 6CFE  
                                        __ptext41 7A5E                                          __ptext33 72DE  
                                        __ptext25 768C                                          __ptext17 84B4  
                                        __ptext50 93D4                                          __ptext42 7E74  
                                        __ptext34 90B2                                          __ptext26 7422  
                                        __ptext18 6F08                                          __ptext51 7950  
                                        __ptext43 7EF2                                          __ptext35 90EE  
                                        __ptext27 903A                                          __ptext19 7840  
                                        __ptext60 806C                                          __ptext52 5FA6  
                                        __ptext44 82D8                                          __ptext36 86E4  
                                        __ptext28 8A68                                          __ptext61 80E8  
                                        __ptext53 60CE                                          __ptext45 217C  
                                        __ptext37 93A8                                          __ptext29 723C  
                                        __ptext70 4E82                                          __ptext62 0012  
                                        __ptext54 6AA4                                          __ptext46 894C  
                                        __ptext38 8598                                          __ptext71 8FB8  
                                        __ptext63 947C                                          __ptext55 79D8  
                                        __ptext47 8F24                                          __ptext39 8E88  
                                        __ptext80 92B6                                          __ptext72 9662  
                                        __ptext64 94A4                                          __ptext56 7720  
                                        __ptext48 3834                                          __ptext81 94CC  
                                        __ptext73 95D4                                          __ptext65 8BD8  
                                        __ptext57 7D74                                          __ptext49 78C8  
                                        __ptext90 5562                                          __ptext82 8678  
                                        __ptext74 4C80                                          __ptext66 8164  
                                        __ptext58 7F70                                          __ptext91 174C  
                                        __ptext83 3AEA                                          __ptext75 7FEE  
                                        __ptext67 7B66                                          __ptext59 7AE2  
                                        __ptext92 641A                                          __ptext84 53CE  
                                        __ptext76 8D90                                          __ptext68 937A  
                                        __ptext93 5A12                                          __ptext85 2A9A  
                                        __ptext77 352C                                          __ptext69 8F6E  
                                        __ptext94 5884                                          __ptext86 2674  
                                        __ptext78 5076                                          __ptext95 89AC  
                                        __ptext87 458E                                          __ptext79 955C  
                                        __ptext96 957C                                          __ptext88 56F4  
                                        __ptext97 81E0                                          __ptext89 47EC  
                                        __ptext98 7BEA                                          __ptext99 8AC4  
                     __end_of_initializeMenuArray 4E82                                          _encoderA 01B3  
                                        _encoderB 01B2                           ??_finish_arpeggio_setup 0077  
                                        _mainMenu 0168                                i2___lbmod@dividend 0002  
                    processPotentiometers@lowByte 0071                               _DISPLAY_STEP_NUMBER 0196  
                                      strcpy@from 0062                                          _drumMenu 0041  
                                  ??_doTheUnLatch 0088                            __size_of_programChange 002C  
                                        _exitLoad 9076                                          _keyboard 00D0  
                                   __size_of_main 010A                                          _exitSave 90B2  
                               _startingDirection 00E9                                          _modeMenu 0047  
                                   __size_of_load 0006                                     __size_of_rand 005C  
                                    ??_noteOnDrum 0070                     playDiatonicSeventhMajor@index 0077  
                                        _menu_lcd 68E4                                          _parallel 00E6  
                                 ??_resetArpeggio 0060                     playDiatonicSeventhMajor@pitch 007E  
                         _setControllerResolution 93D4                              __end_of_sort_pitches 6310  
                                  playTriad@pitch 007F                                __end_of_ionian_key FD64  
                                     _locrian_key FCFB                    playDiatonicSeventhMinor@i_1694 007E  
                                     _seg_bcd_hex F359                                          _semitone 00F3  
                          __size_of_displayDigits 02A8                                        _AUTO_LATCH 01A7  
                                   _potsAlphaMenu 0153                                     _setupArpeggio 81E0  
                             playThisNote8@mode_p 0086                                          _potsMenu 003E  
                                        _velocity 00FD                                          _overflow 019B  
                                        int$flags 005F                                  ?_printThisNumber 0060  
                               i2noteOff@velocity 000D                        Lcd_Print_Char@Upper_Nibble 0062  
                  __end_of_calculate_pulse_length 5E52                                       _minor_triad 01F9  
                          __size_of_displayString 00FA                          ??_playDiatonicTriadMajor 0078  
                                 sendUSB@message1 0065                                   sendUSB@message2 0060  
                                 sendUSB@message3 0061                          ??_playDiatonicTriadMinor 0078  
                               _note_off_was_sent 0199                       playDiatonicTriadMajor@index 0077  
                          __end_of_processDrumpad 217C                       playDiatonicTriadMajor@pitch 007E  
                            controlChange@channel 006D                                 i2___awmod@divisor 0011  
                     __end_of_encoderInputsBuxton 7E74                                    ??_analogInputs 00CE  
                               i2___awmod@counter 0013                                       _playSeventh 5884  
                                      _INTCONbits 000FF2                             i2___lmul@multiplicand 0005  
                              __end_of_noteOnDrum 8D3A                                      _phrygian_key FD37  
                                ?_processKeyboard 0001                                     _encoder_click 01B0  
                              __end_of_lydian_key FD37                                 _keyboardTranspose 42E8  
                                     _noteOffDrum 91DE                                          intlevel2 0000  
                                        sendUSB@i 0069                                ?_keyboardTranspose 0001  
                                   _processOctave 352C                                  i2noteOff@channel 000E  
                                  _AUTO_RANDOMIZE 01A5                                          sendOut@a 0060  
                                 ??_digitalInputs 008E                   delete_notes_from_arpeggio@pitch 0069  
                                     ??_playTriad 0077                            ??_setControllerNumbers 007A  
                                     ??_pitchBend 006D                                 i2___lbmod@divisor 0001  
                                  _SORT_DIRECTION 01AD                                    _iterator_focus 00FA  
                               i2___lbmod@counter 0003                                  int2string@number 0074  
             initializeMenuArray@NumberOfElements 006B                                  ??_ADC_Initialize 0060  
                             ??_keyboardTranspose 006E                          _NOTE_LENGTH_PULSES_ARRAY 02DC  
                                  ?_setupArpeggio 0001                                     _which_seventh 00EF  
                                ??_findArrayIndex 0060                                playThisNote8@index 007F  
                                  _lcd_print_once 01AF                                playThisNote8@pitch 0084  
                   playDiatonicSeventhMinor@index 0077                     playDiatonicSeventhMinor@pitch 007C  
                                i2noteOn@velocity 0010               keyboard_sharps_only_efficient@index 007E  
                                  _finishLastNote 019E                                Lcd_Set_Cursor@temp 0067  
             keyboard_sharps_only_efficient@pitch 007D                          loadFromEEPROM@byte_count 01D5  
                                 i2noteOn@channel 0011                                     _programChange 93A8  
                                      Lcd_Start@i 0064                           __end_of_calculate_alpha 8F6E  
                                 ?_processDrumpad 0001                  __size_of_initializeSaveSlotsOnce 004A  
                                  _inputPotsArray 02AC                            ?_add_notes_to_arpeggio 0001  
                                _selectSlotOnBoot 953C                                       _seventhMenu 0165  
                                        strcpy@cp 0064                                          strcpy@to 0060  
                               noteOnDrum@channel 0070                                      _which_octave 0056  
                       __end_of_keyboardTranspose 458E                                      _which_screen 00F9  
                                    ___aldiv@sign 0075                                      _potsResoMenu 0156  
                                   _displayDigits 4040                       playDiatonicTriadMinor@index 0077  
                              noteOnDrum@velocity 006F                       playDiatonicTriadMinor@pitch 007C  
             __size_of_delete_notes_from_arpeggio 0032                                     ___fladd@signs 00B4  
                         ?_playThisNotePentatonic 0077                                    ?_processOctave 0001  
                     __size_of_readPotentiometers 0600                                     _displayString 661C  
                       ??_setControllerResolution 0060                                    i2noteOff@pitch 000C  
                                     _which_triad 00F0                                     _KEYBOARD_MODE 00F2  
                                    ___fladd@aexp 00B5                                      ___fladd@bexp 00B6  
                                  _random_pitches 8AC4                                      _toggle_state 00E3  
                                   i2noteOn@pitch 000F                            __size_of_controlChange 0034  
                              sendUSB@midiMessage 0066                 __size_of_playDiatonicSeventhMajor 0192  
               __size_of_playDiatonicSeventhMinor 025C                         ?_playDiatonicSeventhMajor 0077  

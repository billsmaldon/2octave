

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 12 20:23:17 2023

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4680
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     9                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
    10                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
    11                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    22                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    25                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	text0,global,reloc=2,class=CODE,delta=1
    27                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text2,global,reloc=2,class=CODE,delta=1
    29                           	psect	text3,global,reloc=2,class=CODE,delta=1
    30                           	psect	text4,global,reloc=2,class=CODE,delta=1
    31                           	psect	text5,global,reloc=2,class=CODE,delta=1
    32                           	psect	text6,global,reloc=2,class=CODE,delta=1
    33                           	psect	text7,global,reloc=2,class=CODE,delta=1
    34                           	psect	text8,global,reloc=2,class=CODE,delta=1
    35                           	psect	text9,global,reloc=2,class=CODE,delta=1
    36                           	psect	text10,global,reloc=2,class=CODE,delta=1
    37                           	psect	text11,global,reloc=2,class=CODE,delta=1
    38                           	psect	text12,global,reloc=2,class=CODE,delta=1
    39                           	psect	text13,global,reloc=2,class=CODE,delta=1
    40                           	psect	text14,global,reloc=2,class=CODE,delta=1
    41                           	psect	text15,global,reloc=2,class=CODE,delta=1
    42                           	psect	text16,global,reloc=2,class=CODE,delta=1
    43                           	psect	text17,global,reloc=2,class=CODE,delta=1
    44                           	psect	text18,global,reloc=2,class=CODE,delta=1
    45                           	psect	text19,global,reloc=2,class=CODE,delta=1
    46                           	psect	text20,global,reloc=2,class=CODE,delta=1
    47                           	psect	text21,global,reloc=2,class=CODE,delta=1
    48                           	psect	text22,global,reloc=2,class=CODE,delta=1
    49                           	psect	text23,global,reloc=2,class=CODE,delta=1
    50                           	psect	text24,global,reloc=2,class=CODE,delta=1
    51                           	psect	text25,global,reloc=2,class=CODE,delta=1
    52                           	psect	text26,global,reloc=2,class=CODE,delta=1
    53                           	psect	text27,global,reloc=2,class=CODE,delta=1
    54                           	psect	text28,global,reloc=2,class=CODE,delta=1
    55                           	psect	text29,global,reloc=2,class=CODE,delta=1
    56                           	psect	text30,global,reloc=2,class=CODE,delta=1
    57                           	psect	text31,global,reloc=2,class=CODE,delta=1
    58                           	psect	text32,global,reloc=2,class=CODE,delta=1
    59                           	psect	text33,global,reloc=2,class=CODE,delta=1
    60                           	psect	text34,global,reloc=2,class=CODE,delta=1
    61                           	psect	text35,global,reloc=2,class=CODE,delta=1
    62                           	psect	text36,global,reloc=2,class=CODE,delta=1
    63                           	psect	text37,global,reloc=2,class=CODE,delta=1
    64                           	psect	text38,global,reloc=2,class=CODE,delta=1
    65                           	psect	text39,global,reloc=2,class=CODE,delta=1
    66                           	psect	text40,global,reloc=2,class=CODE,delta=1
    67                           	psect	text41,global,reloc=2,class=CODE,delta=1
    68                           	psect	text42,global,reloc=2,class=CODE,delta=1
    69                           	psect	text43,global,reloc=2,class=CODE,delta=1
    70                           	psect	text44,global,reloc=2,class=CODE,delta=1
    71                           	psect	text45,global,reloc=2,class=CODE,delta=1
    72                           	psect	text46,global,reloc=2,class=CODE,delta=1
    73                           	psect	text47,global,reloc=2,class=CODE,delta=1
    74                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    75                           	psect	text49,global,reloc=2,class=CODE,delta=1
    76                           	psect	text50,global,reloc=2,class=CODE,delta=1
    77                           	psect	text51,global,reloc=2,class=CODE,delta=1
    78                           	psect	text52,global,reloc=2,class=CODE,delta=1
    79                           	psect	text53,global,reloc=2,class=CODE,delta=1
    80                           	psect	text54,global,reloc=2,class=CODE,delta=1
    81                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=2
    82                           	psect	text56,global,reloc=2,class=CODE,delta=1
    83                           	psect	text57,global,reloc=2,class=CODE,delta=1
    84                           	psect	text58,global,reloc=2,class=CODE,delta=1
    85                           	psect	text59,global,reloc=2,class=CODE,delta=1
    86                           	psect	text60,global,reloc=2,class=CODE,delta=1
    87                           	psect	text61,global,reloc=2,class=CODE,delta=1
    88                           	psect	text62,global,reloc=2,class=CODE,delta=1
    89                           	psect	text63,global,reloc=2,class=CODE,delta=1
    90                           	psect	text64,global,reloc=2,class=CODE,delta=1
    91                           	psect	text65,global,reloc=2,class=CODE,delta=1
    92                           	psect	text66,global,reloc=2,class=CODE,delta=1
    93                           	psect	text67,global,reloc=2,class=CODE,delta=1
    94                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=2
    95                           	psect	text69,global,reloc=2,class=CODE,delta=1
    96                           	psect	text70,global,reloc=2,class=CODE,delta=1
    97                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text74,global,reloc=2,class=CODE,delta=1
   101                           	psect	text75,global,reloc=2,class=CODE,delta=1
   102                           	psect	text76,global,reloc=2,class=CODE,delta=1
   103                           	psect	text77,global,reloc=2,class=CODE,delta=1
   104                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=2
   105                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=2
   106                           	psect	text80,global,reloc=2,class=CODE,delta=1
   107                           	psect	text81,global,reloc=2,class=CODE,delta=1
   108                           	psect	text82,global,reloc=2,class=CODE,delta=1
   109                           	psect	text83,global,reloc=2,class=CODE,delta=1
   110                           	psect	text84,global,reloc=2,class=CODE,delta=1
   111                           	psect	text85,global,reloc=2,class=CODE,delta=1
   112                           	psect	text86,global,reloc=2,class=CODE,delta=1
   113                           	psect	text87,global,reloc=2,class=CODE,delta=1
   114                           	psect	text88,global,reloc=2,class=CODE,delta=1
   115                           	psect	text89,global,reloc=2,class=CODE,delta=1
   116                           	psect	text90,global,reloc=2,class=CODE,delta=1
   117                           	psect	text91,global,reloc=2,class=CODE,delta=1
   118                           	psect	text92,global,reloc=2,class=CODE,delta=1
   119                           	psect	text93,global,reloc=2,class=CODE,delta=1
   120                           	psect	text94,global,reloc=2,class=CODE,delta=1
   121                           	psect	text95,global,reloc=2,class=CODE,delta=1
   122                           	psect	text96,global,reloc=2,class=CODE,delta=1
   123                           	psect	text97,global,reloc=2,class=CODE,delta=1
   124                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=2
   125                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=2
   126                           	psect	text100,global,reloc=2,class=CODE,delta=1
   127                           	psect	text101,global,reloc=2,class=CODE,delta=1
   128                           	psect	text102,global,reloc=2,class=CODE,delta=1
   129                           	psect	text103,global,reloc=2,class=CODE,delta=1
   130                           	psect	text104,global,reloc=2,class=CODE,delta=1
   131                           	psect	text105,global,reloc=2,class=CODE,delta=1
   132                           	psect	text106,global,reloc=2,class=CODE,delta=1
   133                           	psect	text107,global,reloc=2,class=CODE,delta=1
   134                           	psect	text108,global,reloc=2,class=CODE,delta=1
   135                           	psect	text109,global,reloc=2,class=CODE,delta=1
   136                           	psect	text110,global,reloc=2,class=CODE,delta=1
   137                           	psect	text111,global,reloc=2,class=CODE,delta=1
   138                           	psect	text112,global,reloc=2,class=CODE,delta=1
   139                           	psect	text113,global,reloc=2,class=CODE,delta=1
   140                           	psect	text114,global,reloc=2,class=CODE,delta=1
   141                           	psect	text115,global,reloc=2,class=CODE,delta=1
   142                           	psect	text116,global,reloc=2,class=CODE,delta=1
   143                           	psect	text117,global,reloc=2,class=CODE,delta=1
   144                           	psect	text118,global,reloc=2,class=CODE,delta=1
   145                           	psect	text119,global,reloc=2,class=CODE,delta=1
   146                           	psect	text120,global,reloc=2,class=CODE,delta=1
   147                           	psect	text121,global,reloc=2,class=CODE,delta=1
   148                           	psect	text122,global,reloc=2,class=CODE,delta=1
   149                           	psect	text123,global,reloc=2,class=CODE,delta=1
   150                           	psect	text124,global,reloc=2,class=CODE,delta=1
   151                           	psect	text125,global,reloc=2,class=CODE,delta=1,group=2
   152                           	psect	text126,global,reloc=2,class=CODE,delta=1,group=2
   153                           	psect	text127,global,reloc=2,class=CODE,delta=1,group=2
   154                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=2
   155                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=2
   156                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=2
   157                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=2
   158                           	psect	text132,global,reloc=2,class=CODE,delta=1
   159                           	psect	text133,global,reloc=2,class=CODE,delta=1
   160                           	psect	text134,global,reloc=2,class=CODE,delta=1
   161                           	psect	text135,global,reloc=2,class=CODE,delta=1
   162                           	psect	text136,global,reloc=2,class=CODE,delta=1
   163                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   164                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   165                           	psect	text138,global,reloc=2,class=CODE,delta=1
   166                           	psect	text139,global,reloc=2,class=CODE,delta=1
   167                           	psect	text140,global,reloc=2,class=CODE,delta=1
   168                           	psect	text141,global,reloc=2,class=CODE,delta=1
   169                           	psect	text142,global,reloc=2,class=CODE,delta=1
   170                           	psect	text143,global,reloc=2,class=CODE,delta=1
   171                           	psect	text144,global,reloc=2,class=CODE,delta=1
   172                           	psect	text145,global,reloc=2,class=CODE,delta=1
   173                           	psect	text146,global,reloc=2,class=CODE,delta=1
   174                           	psect	text147,global,reloc=2,class=CODE,delta=1
   175                           	psect	text148,global,reloc=2,class=CODE,delta=1
   176                           	psect	text149,global,reloc=2,class=CODE,delta=1
   177                           	psect	text150,global,reloc=2,class=CODE,delta=1
   178                           	psect	text151,global,reloc=2,class=CODE,delta=1
   179                           	psect	text152,global,reloc=2,class=CODE,delta=1
   180                           	psect	text153,global,reloc=2,class=CODE,delta=1
   181                           	psect	text154,global,reloc=2,class=CODE,delta=1
   182                           	psect	text155,global,reloc=2,class=CODE,delta=1
   183                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   184                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   185                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   186  0000                     
   187                           ; Version 1.45
   188                           ; Generated 16/11/2017 GMT
   189                           ; 
   190                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   191                           ; All rights reserved.
   192                           ; 
   193                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   194                           ; 
   195                           ; Redistribution and use in source and binary forms, with or without modification, are
   196                           ; permitted provided that the following conditions are met:
   197                           ; 
   198                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   199                           ;        conditions and the following disclaimer.
   200                           ; 
   201                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   202                           ;        of conditions and the following disclaimer in the documentation and/or other
   203                           ;        materials provided with the distribution.
   204                           ; 
   205                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   206                           ;        software without specific prior written permission.
   207                           ; 
   208                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   209                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   210                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   211                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   212                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   213                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   214                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   215                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   216                           ; 
   217                           ; 
   218                           ; Code-generator required, PIC18F4680 Definitions
   219                           ; 
   220                           ; SFR Addresses
   221  0000                     
   222                           	psect	eeprom_data
   223  F00000  00 24 00 32 FF FF FF FF 	db	0,36,0,50,255,255,255,255	;# 
   224  0000                     
   225                           	psect	idataCOMRAM
   226  0095F2                     __pidataCOMRAM:
   227                           	opt stack 0
   228                           
   229                           ;initializer for _number_to_display
   230  0095F2  FF80               	dw	65408
   231                           
   232                           ;initializer for _PRESCALER
   233  0095F4  04                 	db	4
   234                           
   235                           ;initializer for _PPQN
   236  0095F5  30                 	db	48
   237                           
   238                           	psect	idataBANK0
   239  0095D0                     __pidataBANK0:
   240                           	opt stack 0
   241                           
   242                           ;initializer for _NOTE_LENGTH_PULSES
   243  0095D0  0C                 	db	12
   244                           
   245                           ;initializer for _OCTAVES
   246  0095D1  03                 	db	3
   247                           
   248                           ;initializer for _which_screen
   249  0095D2  02                 	db	2
   250                           
   251                           ;initializer for _iterator_focus
   252  0095D3  FF                 	db	255
   253                           
   254                           ;initializer for _ema_integer
   255  0095D4  32                 	db	50
   256                           
   257                           ;initializer for _octave
   258  0095D5  04                 	db	4
   259                           
   260                           ;initializer for _velocity
   261  0095D6  7F                 	db	127
   262                           
   263                           ;initializer for _drumchannel
   264  0095D7  09                 	db	9
   265                           
   266                           ;initializer for _BPM
   267  0095D8  78                 	db	120
   268                           
   269                           	psect	idataBANK1
   270  0093EC                     __pidataBANK1:
   271                           	opt stack 0
   272                           
   273                           ;initializer for _DRUM_CC
   274  0093EC  50                 	db	80
   275  0093ED  51                 	db	81
   276  0093EE  52                 	db	82
   277  0093EF  53                 	db	83
   278  0093F0  55                 	db	85
   279  0093F1  56                 	db	86
   280  0093F2  57                 	db	87
   281  0093F3  58                 	db	88
   282                           
   283                           ;initializer for _DRUM_NOTE
   284  0093F4  24                 	db	36
   285  0093F5  26                 	db	38
   286  0093F6  27                 	db	39
   287  0093F7  28                 	db	40
   288  0093F8  2A                 	db	42
   289  0093F9  2E                 	db	46
   290  0093FA  31                 	db	49
   291  0093FB  36                 	db	54
   292                           
   293                           ;initializer for _randx
   294  0093FC  0001               	dw	1
   295  0093FE  0000               	dw	0
   296                           
   297                           ;initializer for _HYST_VAL
   298  009400  0010               	dw	16
   299                           
   300                           ;initializer for _command
   301  009402  80                 	db	128
   302                           
   303                           ;initializer for _string_to_display
   304  009403  74                 	db	116
   305  009404  45                 	db	69
   306  009405  53                 	db	83
   307  009406  74                 	db	116
   308  009407  00                 	db	0
   309                           
   310                           ;initializer for _diminished_triad
   311  009408  00                 	db	0
   312  009409  03                 	db	3
   313  00940A  06                 	db	6
   314                           
   315                           ;initializer for _augmented_triad
   316  00940B  00                 	db	0
   317  00940C  04                 	db	4
   318  00940D  08                 	db	8
   319                           
   320                           ;initializer for _minor_triad
   321  00940E  00                 	db	0
   322  00940F  03                 	db	3
   323  009410  07                 	db	7
   324                           
   325                           ;initializer for _major_triad
   326  009411  00                 	db	0
   327  009412  04                 	db	4
   328  009413  07                 	db	7
   329                           
   330                           	psect	idataBANK2
   331  008DD0                     __pidataBANK2:
   332                           	opt stack 0
   333                           
   334                           ;initializer for _inputPotsArray
   335  008DD0  00                 	db	0
   336  008DD1  46                 	db	70
   337  008DD2  10                 	db	16
   338  008DD3  00                 	db	0
   339  008DD4  47                 	db	71
   340  008DD5  11                 	db	17
   341  008DD6  00                 	db	0
   342  008DD7  48                 	db	72
   343  008DD8  12                 	db	18
   344  008DD9  00                 	db	0
   345  008DDA  49                 	db	73
   346  008DDB  13                 	db	19
   347  008DDC  00                 	db	0
   348  008DDD  4A                 	db	74
   349  008DDE  14                 	db	20
   350  008DDF  00                 	db	0
   351  008DE0  4B                 	db	75
   352  008DE1  15                 	db	21
   353  008DE2  00                 	db	0
   354  008DE3  4C                 	db	76
   355  008DE4  16                 	db	22
   356  008DE5  00                 	db	0
   357  008DE6  66                 	db	102
   358  008DE7  17                 	db	23
   359  008DE8  00                 	db	0
   360  008DE9  67                 	db	103
   361  008DEA  18                 	db	24
   362  008DEB  00                 	db	0
   363  008DEC  68                 	db	104
   364  008DED  19                 	db	25
   365  008DEE  00                 	db	0
   366  008DEF  6A                 	db	106
   367  008DF0  1A                 	db	26
   368  008DF1  00                 	db	0
   369  008DF2  6B                 	db	107
   370  008DF3  1B                 	db	27
   371  008DF4  00                 	db	0
   372  008DF5  6C                 	db	108
   373  008DF6  1C                 	db	28
   374  008DF7  00                 	db	0
   375  008DF8  6D                 	db	109
   376  008DF9  1D                 	db	29
   377  008DFA  00                 	db	0
   378  008DFB  FD                 	db	253
   379  008DFC  FD                 	db	253
   380  008DFD  00                 	db	0
   381  008DFE  FE                 	db	254
   382  008DFF  FE                 	db	254
   383                           
   384                           ;initializer for _NOTE_LENGTH_PULSES_ARRAY
   385  008E00  30                 	db	48
   386  008E01  48                 	db	72
   387  008E02  20                 	db	32
   388  008E03  18                 	db	24
   389  008E04  24                 	db	36
   390  008E05  10                 	db	16
   391  008E06  0C                 	db	12
   392  008E07  12                 	db	18
   393  008E08  08                 	db	8
   394  008E09  06                 	db	6
   395  008E0A  09                 	db	9
   396  008E0B  04                 	db	4
   397                           
   398                           ;initializer for _diminished_7th
   399  008E0C  00                 	db	0
   400  008E0D  03                 	db	3
   401  008E0E  06                 	db	6
   402  008E0F  09                 	db	9
   403                           
   404                           ;initializer for _half_diminished_7th
   405  008E10  00                 	db	0
   406  008E11  03                 	db	3
   407  008E12  06                 	db	6
   408  008E13  0A                 	db	10
   409                           
   410                           ;initializer for _minor_7th
   411  008E14  00                 	db	0
   412  008E15  03                 	db	3
   413  008E16  07                 	db	7
   414  008E17  0A                 	db	10
   415                           
   416                           ;initializer for _major_7th
   417  008E18  00                 	db	0
   418  008E19  04                 	db	4
   419  008E1A  07                 	db	7
   420  008E1B  0B                 	db	11
   421                           
   422                           ;initializer for _dominant_7th
   423  008E1C  00                 	db	0
   424  008E1D  04                 	db	4
   425  008E1E  07                 	db	7
   426  008E1F  0A                 	db	10
   427                           
   428                           	psect	idataBANK3
   429  0086E6                     __pidataBANK3:
   430                           	opt stack 0
   431                           
   432                           ;initializer for _menuArray
   433  0086E6  08                 	db	8
   434  0086E7  00                 	db	0
   435  0086E8  00                 	db	0
   436  0086E9  0C                 	db	12
   437  0086EA  00                 	db	0
   438  0086EB  00                 	db	0
   439  0086EC  07                 	db	7
   440  0086ED  00                 	db	0
   441  0086EE  00                 	db	0
   442  0086EF  04                 	db	4
   443  0086F0  00                 	db	0
   444  0086F1  00                 	db	0
   445  0086F2  05                 	db	5
   446  0086F3  00                 	db	0
   447  0086F4  00                 	db	0
   448  0086F5  02                 	db	2
   449  0086F6  00                 	db	0
   450  0086F7  00                 	db	0
   451  0086F8  05                 	db	5
   452  0086F9  00                 	db	0
   453  0086FA  00                 	db	0
   454  0086FB  02                 	db	2
   455  0086FC  00                 	db	0
   456  0086FD  00                 	db	0
   457  0086FE  08                 	db	8
   458  0086FF  00                 	db	0
   459  008700  00                 	db	0
   460  008701  08                 	db	8
   461  008702  00                 	db	0
   462  008703  00                 	db	0
   463  008704  05                 	db	5
   464  008705  00                 	db	0
   465  008706  00                 	db	0
   466  008707  02                 	db	2
   467  008708  00                 	db	0
   468  008709  00                 	db	0
   469  00870A  07                 	db	7
   470  00870B  00                 	db	0
   471  00870C  00                 	db	0
   472  00870D  07                 	db	7
   473  00870E  00                 	db	0
   474  00870F  00                 	db	0
   475  008710  02                 	db	2
   476  008711  00                 	db	0
   477  008712  00                 	db	0
   478  008713  02                 	db	2
   479  008714  00                 	db	0
   480  008715  00                 	db	0
   481  008716  05                 	db	5
   482  008717  00                 	db	0
   483  008718  00                 	db	0
   484  008719  05                 	db	5
   485  00871A  00                 	db	0
   486  00871B  00                 	db	0
   487  00871C  02                 	db	2
   488  00871D  00                 	db	0
   489  00871E  00                 	db	0
   490  00871F  09                 	db	9
   491  008720  00                 	db	0
   492  008721  00                 	db	0
   493  008722  02                 	db	2
   494  008723  00                 	db	0
   495  008724  00                 	db	0
   496  008725  07                 	db	7
   497  008726  00                 	db	0
   498  008727  00                 	db	0
   499  008728  0C                 	db	12
   500  008729  00                 	db	0
   501  00872A  00                 	db	0
   502  00872B  02                 	db	2
   503  00872C  00                 	db	0
   504  00872D  00                 	db	0
   505  00872E  01                 	db	1
   506  00872F  00                 	db	0
   507  008730  00                 	db	0
   508  008731  01                 	db	1
   509  008732  00                 	db	0
   510  008733  00                 	db	0
   511  008734  01                 	db	1
   512  008735  00                 	db	0
   513  008736  00                 	db	0
   514  008737  02                 	db	2
   515  008738  00                 	db	0
   516  008739  00                 	db	0
   517  00873A  01                 	db	1
   518  00873B  00                 	db	0
   519  00873C  00                 	db	0
   520  00873D  01                 	db	1
   521  00873E  00                 	db	0
   522  00873F  00                 	db	0
   523  008740  04                 	db	4
   524  008741  00                 	db	0
   525  008742  00                 	db	0
   526  008743  01                 	db	1
   527  008744  00                 	db	0
   528  008745  00                 	db	0
   529  008746  01                 	db	1
   530  008747  00                 	db	0
   531  008748  00                 	db	0
   532  008749  01                 	db	1
   533  00874A  00                 	db	0
   534  00874B  00                 	db	0
   535  00874C  01                 	db	1
   536  00874D  00                 	db	0
   537  00874E  00                 	db	0
   538                           
   539                           	psect	mediumconst
   540  00E8C2                     __pmediumconst:
   541                           	opt stack 0
   542  00E8C2  00                 	db	0
   543  00E8C3  4B                 	db	75
   544  00E8C4  45                 	db	69
   545  00E8C5  59                 	db	89
   546  00E8C6  42                 	db	66
   547  00E8C7  4F                 	db	79
   548  00E8C8  41                 	db	65
   549  00E8C9  52                 	db	82
   550  00E8CA  44                 	db	68
   551  00E8CB  20                 	db	32
   552  00E8CC  4D                 	db	77
   553  00E8CD  4F                 	db	79
   554  00E8CE  44                 	db	68
   555  00E8CF  45                 	db	69
   556  00E8D0  3A                 	db	58
   557  00E8D1  00                 	db	0
   558  00E8D2  00                 	db	0
   559  00E8D3  00                 	db	0
   560  00E8D4  41                 	db	65
   561  00E8D5  52                 	db	82
   562  00E8D6  50                 	db	80
   563  00E8D7  45                 	db	69
   564  00E8D8  47                 	db	71
   565  00E8D9  47                 	db	71
   566  00E8DA  49                 	db	73
   567  00E8DB  4F                 	db	79
   568  00E8DC  20                 	db	32
   569  00E8DD  4D                 	db	77
   570  00E8DE  45                 	db	69
   571  00E8DF  4E                 	db	78
   572  00E8E0  55                 	db	85
   573  00E8E1  3A                 	db	58
   574  00E8E2  00                 	db	0
   575  00E8E3  00                 	db	0
   576  00E8E4  00                 	db	0
   577  00E8E5  54                 	db	84
   578  00E8E6  52                 	db	82
   579  00E8E7  41                 	db	65
   580  00E8E8  4E                 	db	78
   581  00E8E9  53                 	db	83
   582  00E8EA  50                 	db	80
   583  00E8EB  4F                 	db	79
   584  00E8EC  53                 	db	83
   585  00E8ED  45                 	db	69
   586  00E8EE  20                 	db	32
   587  00E8EF  4D                 	db	77
   588  00E8F0  4F                 	db	79
   589  00E8F1  44                 	db	68
   590  00E8F2  45                 	db	69
   591  00E8F3  3A                 	db	58
   592  00E8F4  00                 	db	0
   593  00E8F5  00                 	db	0
   594  00E8F6  44                 	db	68
   595  00E8F7  52                 	db	82
   596  00E8F8  55                 	db	85
   597  00E8F9  4D                 	db	77
   598  00E8FA  20                 	db	32
   599  00E8FB  4D                 	db	77
   600  00E8FC  4F                 	db	79
   601  00E8FD  44                 	db	68
   602  00E8FE  45                 	db	69
   603  00E8FF  3A                 	db	58
   604  00E900  00                 	db	0
   605  00E901  00                 	db	0
   606  00E902  00                 	db	0
   607  00E903  00                 	db	0
   608  00E904  00                 	db	0
   609  00E905  00                 	db	0
   610  00E906  00                 	db	0
   611  00E907  50                 	db	80
   612  00E908  4F                 	db	79
   613  00E909  54                 	db	84
   614  00E90A  53                 	db	83
   615  00E90B  20                 	db	32
   616  00E90C  4D                 	db	77
   617  00E90D  4F                 	db	79
   618  00E90E  44                 	db	68
   619  00E90F  45                 	db	69
   620  00E910  3A                 	db	58
   621  00E911  00                 	db	0
   622  00E912  00                 	db	0
   623  00E913  00                 	db	0
   624  00E914  00                 	db	0
   625  00E915  00                 	db	0
   626  00E916  00                 	db	0
   627  00E917  00                 	db	0
   628  00E918  4D                 	db	77
   629  00E919  49                 	db	73
   630  00E91A  44                 	db	68
   631  00E91B  49                 	db	73
   632  00E91C  20                 	db	32
   633  00E91D  43                 	db	67
   634  00E91E  48                 	db	72
   635  00E91F  41                 	db	65
   636  00E920  4E                 	db	78
   637  00E921  4E                 	db	78
   638  00E922  45                 	db	69
   639  00E923  4C                 	db	76
   640  00E924  53                 	db	83
   641  00E925  3A                 	db	58
   642  00E926  00                 	db	0
   643  00E927  00                 	db	0
   644  00E928  00                 	db	0
   645  00E929  50                 	db	80
   646  00E92A  52                 	db	82
   647  00E92B  4F                 	db	79
   648  00E92C  47                 	db	71
   649  00E92D  52                 	db	82
   650  00E92E  41                 	db	65
   651  00E92F  4D                 	db	77
   652  00E930  20                 	db	32
   653  00E931  43                 	db	67
   654  00E932  48                 	db	72
   655  00E933  41                 	db	65
   656  00E934  4E                 	db	78
   657  00E935  47                 	db	71
   658  00E936  45                 	db	69
   659  00E937  3A                 	db	58
   660  00E938  00                 	db	0
   661  00E939  00                 	db	0
   662  00E93A  45                 	db	69
   663  00E93B  45                 	db	69
   664  00E93C  50                 	db	80
   665  00E93D  52                 	db	82
   666  00E93E  4F                 	db	79
   667  00E93F  4D                 	db	77
   668  00E940  20                 	db	32
   669  00E941  4D                 	db	77
   670  00E942  45                 	db	69
   671  00E943  4E                 	db	78
   672  00E944  55                 	db	85
   673  00E945  3A                 	db	58
   674  00E946  00                 	db	0
   675  00E947  00                 	db	0
   676  00E948  00                 	db	0
   677  00E949  00                 	db	0
   678  00E94A  00                 	db	0
   679  00E94B  43                 	db	67
   680  00E94C  48                 	db	72
   681  00E94D  52                 	db	82
   682  00E94E  4F                 	db	79
   683  00E94F  4D                 	db	77
   684  00E950  41                 	db	65
   685  00E951  54                 	db	84
   686  00E952  49                 	db	73
   687  00E953  43                 	db	67
   688  00E954  00                 	db	0
   689  00E955  00                 	db	0
   690  00E956  00                 	db	0
   691  00E957  00                 	db	0
   692  00E958  00                 	db	0
   693  00E959  00                 	db	0
   694  00E95A  00                 	db	0
   695  00E95B  00                 	db	0
   696  00E95C  4D                 	db	77
   697  00E95D  41                 	db	65
   698  00E95E  4A                 	db	74
   699  00E95F  4F                 	db	79
   700  00E960  52                 	db	82
   701  00E961  00                 	db	0
   702  00E962  00                 	db	0
   703  00E963  00                 	db	0
   704  00E964  00                 	db	0
   705  00E965  00                 	db	0
   706  00E966  00                 	db	0
   707  00E967  00                 	db	0
   708  00E968  00                 	db	0
   709  00E969  00                 	db	0
   710  00E96A  00                 	db	0
   711  00E96B  00                 	db	0
   712  00E96C  00                 	db	0
   713  00E96D  4D                 	db	77
   714  00E96E  49                 	db	73
   715  00E96F  4E                 	db	78
   716  00E970  4F                 	db	79
   717  00E971  52                 	db	82
   718  00E972  00                 	db	0
   719  00E973  00                 	db	0
   720  00E974  00                 	db	0
   721  00E975  00                 	db	0
   722  00E976  00                 	db	0
   723  00E977  00                 	db	0
   724  00E978  00                 	db	0
   725  00E979  00                 	db	0
   726  00E97A  00                 	db	0
   727  00E97B  00                 	db	0
   728  00E97C  00                 	db	0
   729  00E97D  00                 	db	0
   730  00E97E  4D                 	db	77
   731  00E97F  4F                 	db	79
   732  00E980  44                 	db	68
   733  00E981  45                 	db	69
   734  00E982  53                 	db	83
   735  00E983  00                 	db	0
   736  00E984  00                 	db	0
   737  00E985  00                 	db	0
   738  00E986  00                 	db	0
   739  00E987  00                 	db	0
   740  00E988  00                 	db	0
   741  00E989  00                 	db	0
   742  00E98A  00                 	db	0
   743  00E98B  00                 	db	0
   744  00E98C  00                 	db	0
   745  00E98D  00                 	db	0
   746  00E98E  00                 	db	0
   747  00E98F  50                 	db	80
   748  00E990  45                 	db	69
   749  00E991  4E                 	db	78
   750  00E992  54                 	db	84
   751  00E993  41                 	db	65
   752  00E994  54                 	db	84
   753  00E995  4F                 	db	79
   754  00E996  4E                 	db	78
   755  00E997  49                 	db	73
   756  00E998  43                 	db	67
   757  00E999  20                 	db	32
   758  00E99A  4D                 	db	77
   759  00E99B  41                 	db	65
   760  00E99C  4A                 	db	74
   761  00E99D  4F                 	db	79
   762  00E99E  52                 	db	82
   763  00E99F  00                 	db	0
   764  00E9A0  50                 	db	80
   765  00E9A1  45                 	db	69
   766  00E9A2  4E                 	db	78
   767  00E9A3  54                 	db	84
   768  00E9A4  41                 	db	65
   769  00E9A5  54                 	db	84
   770  00E9A6  4F                 	db	79
   771  00E9A7  4E                 	db	78
   772  00E9A8  49                 	db	73
   773  00E9A9  43                 	db	67
   774  00E9AA  20                 	db	32
   775  00E9AB  4D                 	db	77
   776  00E9AC  49                 	db	73
   777  00E9AD  4E                 	db	78
   778  00E9AE  4F                 	db	79
   779  00E9AF  52                 	db	82
   780  00E9B0  00                 	db	0
   781  00E9B1  54                 	db	84
   782  00E9B2  52                 	db	82
   783  00E9B3  49                 	db	73
   784  00E9B4  41                 	db	65
   785  00E9B5  44                 	db	68
   786  00E9B6  00                 	db	0
   787  00E9B7  00                 	db	0
   788  00E9B8  00                 	db	0
   789  00E9B9  00                 	db	0
   790  00E9BA  00                 	db	0
   791  00E9BB  00                 	db	0
   792  00E9BC  00                 	db	0
   793  00E9BD  00                 	db	0
   794  00E9BE  00                 	db	0
   795  00E9BF  00                 	db	0
   796  00E9C0  00                 	db	0
   797  00E9C1  00                 	db	0
   798  00E9C2  44                 	db	68
   799  00E9C3  49                 	db	73
   800  00E9C4  41                 	db	65
   801  00E9C5  54                 	db	84
   802  00E9C6  4F                 	db	79
   803  00E9C7  4E                 	db	78
   804  00E9C8  49                 	db	73
   805  00E9C9  43                 	db	67
   806  00E9CA  20                 	db	32
   807  00E9CB  54                 	db	84
   808  00E9CC  20                 	db	32
   809  00E9CD  4D                 	db	77
   810  00E9CE  41                 	db	65
   811  00E9CF  4A                 	db	74
   812  00E9D0  4F                 	db	79
   813  00E9D1  52                 	db	82
   814  00E9D2  00                 	db	0
   815  00E9D3  44                 	db	68
   816  00E9D4  49                 	db	73
   817  00E9D5  41                 	db	65
   818  00E9D6  54                 	db	84
   819  00E9D7  4F                 	db	79
   820  00E9D8  4E                 	db	78
   821  00E9D9  49                 	db	73
   822  00E9DA  43                 	db	67
   823  00E9DB  20                 	db	32
   824  00E9DC  54                 	db	84
   825  00E9DD  20                 	db	32
   826  00E9DE  4D                 	db	77
   827  00E9DF  49                 	db	73
   828  00E9E0  4E                 	db	78
   829  00E9E1  4F                 	db	79
   830  00E9E2  52                 	db	82
   831  00E9E3  00                 	db	0
   832  00E9E4  53                 	db	83
   833  00E9E5  45                 	db	69
   834  00E9E6  56                 	db	86
   835  00E9E7  45                 	db	69
   836  00E9E8  4E                 	db	78
   837  00E9E9  54                 	db	84
   838  00E9EA  48                 	db	72
   839  00E9EB  00                 	db	0
   840  00E9EC  00                 	db	0
   841  00E9ED  00                 	db	0
   842  00E9EE  00                 	db	0
   843  00E9EF  00                 	db	0
   844  00E9F0  00                 	db	0
   845  00E9F1  00                 	db	0
   846  00E9F2  00                 	db	0
   847  00E9F3  00                 	db	0
   848  00E9F4  00                 	db	0
   849  00E9F5  44                 	db	68
   850  00E9F6  49                 	db	73
   851  00E9F7  41                 	db	65
   852  00E9F8  54                 	db	84
   853  00E9F9  4F                 	db	79
   854  00E9FA  4E                 	db	78
   855  00E9FB  49                 	db	73
   856  00E9FC  43                 	db	67
   857  00E9FD  20                 	db	32
   858  00E9FE  37                 	db	55
   859  00E9FF  20                 	db	32
   860  00EA00  4D                 	db	77
   861  00EA01  41                 	db	65
   862  00EA02  4A                 	db	74
   863  00EA03  4F                 	db	79
   864  00EA04  52                 	db	82
   865  00EA05  00                 	db	0
   866  00EA06  44                 	db	68
   867  00EA07  49                 	db	73
   868  00EA08  41                 	db	65
   869  00EA09  54                 	db	84
   870  00EA0A  4F                 	db	79
   871  00EA0B  4E                 	db	78
   872  00EA0C  49                 	db	73
   873  00EA0D  43                 	db	67
   874  00EA0E  20                 	db	32
   875  00EA0F  37                 	db	55
   876  00EA10  20                 	db	32
   877  00EA11  4D                 	db	77
   878  00EA12  49                 	db	73
   879  00EA13  4E                 	db	78
   880  00EA14  4F                 	db	79
   881  00EA15  52                 	db	82
   882  00EA16  00                 	db	0
   883  00EA17  69                 	db	105
   884  00EA18  6F                 	db	111
   885  00EA19  6E                 	db	110
   886  00EA1A  69                 	db	105
   887  00EA1B  61                 	db	97
   888  00EA1C  6E                 	db	110
   889  00EA1D  00                 	db	0
   890  00EA1E  00                 	db	0
   891  00EA1F  00                 	db	0
   892  00EA20  00                 	db	0
   893  00EA21  00                 	db	0
   894  00EA22  00                 	db	0
   895  00EA23  00                 	db	0
   896  00EA24  00                 	db	0
   897  00EA25  00                 	db	0
   898  00EA26  00                 	db	0
   899  00EA27  00                 	db	0
   900  00EA28  64                 	db	100
   901  00EA29  6F                 	db	111
   902  00EA2A  72                 	db	114
   903  00EA2B  69                 	db	105
   904  00EA2C  61                 	db	97
   905  00EA2D  6E                 	db	110
   906  00EA2E  00                 	db	0
   907  00EA2F  00                 	db	0
   908  00EA30  00                 	db	0
   909  00EA31  00                 	db	0
   910  00EA32  00                 	db	0
   911  00EA33  00                 	db	0
   912  00EA34  00                 	db	0
   913  00EA35  00                 	db	0
   914  00EA36  00                 	db	0
   915  00EA37  00                 	db	0
   916  00EA38  00                 	db	0
   917  00EA39  70                 	db	112
   918  00EA3A  68                 	db	104
   919  00EA3B  72                 	db	114
   920  00EA3C  79                 	db	121
   921  00EA3D  67                 	db	103
   922  00EA3E  69                 	db	105
   923  00EA3F  61                 	db	97
   924  00EA40  6E                 	db	110
   925  00EA41  00                 	db	0
   926  00EA42  00                 	db	0
   927  00EA43  00                 	db	0
   928  00EA44  00                 	db	0
   929  00EA45  00                 	db	0
   930  00EA46  00                 	db	0
   931  00EA47  00                 	db	0
   932  00EA48  00                 	db	0
   933  00EA49  00                 	db	0
   934  00EA4A  6C                 	db	108
   935  00EA4B  79                 	db	121
   936  00EA4C  64                 	db	100
   937  00EA4D  69                 	db	105
   938  00EA4E  61                 	db	97
   939  00EA4F  6E                 	db	110
   940  00EA50  00                 	db	0
   941  00EA51  00                 	db	0
   942  00EA52  00                 	db	0
   943  00EA53  00                 	db	0
   944  00EA54  00                 	db	0
   945  00EA55  00                 	db	0
   946  00EA56  00                 	db	0
   947  00EA57  00                 	db	0
   948  00EA58  00                 	db	0
   949  00EA59  00                 	db	0
   950  00EA5A  00                 	db	0
   951  00EA5B  6D                 	db	109
   952  00EA5C  69                 	db	105
   953  00EA5D  78                 	db	120
   954  00EA5E  6F                 	db	111
   955  00EA5F  6C                 	db	108
   956  00EA60  79                 	db	121
   957  00EA61  64                 	db	100
   958  00EA62  69                 	db	105
   959  00EA63  61                 	db	97
   960  00EA64  6E                 	db	110
   961  00EA65  00                 	db	0
   962  00EA66  00                 	db	0
   963  00EA67  00                 	db	0
   964  00EA68  00                 	db	0
   965  00EA69  00                 	db	0
   966  00EA6A  00                 	db	0
   967  00EA6B  00                 	db	0
   968  00EA6C  61                 	db	97
   969  00EA6D  65                 	db	101
   970  00EA6E  6F                 	db	111
   971  00EA6F  6C                 	db	108
   972  00EA70  69                 	db	105
   973  00EA71  61                 	db	97
   974  00EA72  6E                 	db	110
   975  00EA73  00                 	db	0
   976  00EA74  00                 	db	0
   977  00EA75  00                 	db	0
   978  00EA76  00                 	db	0
   979  00EA77  00                 	db	0
   980  00EA78  00                 	db	0
   981  00EA79  00                 	db	0
   982  00EA7A  00                 	db	0
   983  00EA7B  00                 	db	0
   984  00EA7C  00                 	db	0
   985  00EA7D  6C                 	db	108
   986  00EA7E  6F                 	db	111
   987  00EA7F  63                 	db	99
   988  00EA80  72                 	db	114
   989  00EA81  69                 	db	105
   990  00EA82  61                 	db	97
   991  00EA83  6E                 	db	110
   992  00EA84  00                 	db	0
   993  00EA85  00                 	db	0
   994  00EA86  00                 	db	0
   995  00EA87  00                 	db	0
   996  00EA88  00                 	db	0
   997  00EA89  00                 	db	0
   998  00EA8A  00                 	db	0
   999  00EA8B  00                 	db	0
  1000  00EA8C  00                 	db	0
  1001  00EA8D  00                 	db	0
  1002  00EA8E  6D                 	db	109
  1003  00EA8F  61                 	db	97
  1004  00EA90  6A                 	db	106
  1005  00EA91  6F                 	db	111
  1006  00EA92  72                 	db	114
  1007  00EA93  20                 	db	32
  1008  00EA94  74                 	db	116
  1009  00EA95  72                 	db	114
  1010  00EA96  69                 	db	105
  1011  00EA97  61                 	db	97
  1012  00EA98  64                 	db	100
  1013  00EA99  00                 	db	0
  1014  00EA9A  00                 	db	0
  1015  00EA9B  00                 	db	0
  1016  00EA9C  00                 	db	0
  1017  00EA9D  00                 	db	0
  1018  00EA9E  00                 	db	0
  1019  00EA9F  6D                 	db	109
  1020  00EAA0  69                 	db	105
  1021  00EAA1  6E                 	db	110
  1022  00EAA2  6F                 	db	111
  1023  00EAA3  72                 	db	114
  1024  00EAA4  20                 	db	32
  1025  00EAA5  74                 	db	116
  1026  00EAA6  72                 	db	114
  1027  00EAA7  69                 	db	105
  1028  00EAA8  61                 	db	97
  1029  00EAA9  64                 	db	100
  1030  00EAAA  00                 	db	0
  1031  00EAAB  00                 	db	0
  1032  00EAAC  00                 	db	0
  1033  00EAAD  00                 	db	0
  1034  00EAAE  00                 	db	0
  1035  00EAAF  00                 	db	0
  1036  00EAB0  61                 	db	97
  1037  00EAB1  75                 	db	117
  1038  00EAB2  67                 	db	103
  1039  00EAB3  6D                 	db	109
  1040  00EAB4  65                 	db	101
  1041  00EAB5  6E                 	db	110
  1042  00EAB6  74                 	db	116
  1043  00EAB7  65                 	db	101
  1044  00EAB8  64                 	db	100
  1045  00EAB9  20                 	db	32
  1046  00EABA  74                 	db	116
  1047  00EABB  72                 	db	114
  1048  00EABC  69                 	db	105
  1049  00EABD  61                 	db	97
  1050  00EABE  64                 	db	100
  1051  00EABF  00                 	db	0
  1052  00EAC0  00                 	db	0
  1053  00EAC1  64                 	db	100
  1054  00EAC2  69                 	db	105
  1055  00EAC3  6D                 	db	109
  1056  00EAC4  69                 	db	105
  1057  00EAC5  6E                 	db	110
  1058  00EAC6  69                 	db	105
  1059  00EAC7  73                 	db	115
  1060  00EAC8  68                 	db	104
  1061  00EAC9  65                 	db	101
  1062  00EACA  64                 	db	100
  1063  00EACB  20                 	db	32
  1064  00EACC  74                 	db	116
  1065  00EACD  72                 	db	114
  1066  00EACE  69                 	db	105
  1067  00EACF  61                 	db	97
  1068  00EAD0  64                 	db	100
  1069  00EAD1  00                 	db	0
  1070  00EAD2  64                 	db	100
  1071  00EAD3  6F                 	db	111
  1072  00EAD4  6D                 	db	109
  1073  00EAD5  69                 	db	105
  1074  00EAD6  6E                 	db	110
  1075  00EAD7  61                 	db	97
  1076  00EAD8  6E                 	db	110
  1077  00EAD9  74                 	db	116
  1078  00EADA  20                 	db	32
  1079  00EADB  37                 	db	55
  1080  00EADC  74                 	db	116
  1081  00EADD  68                 	db	104
  1082  00EADE  00                 	db	0
  1083  00EADF  00                 	db	0
  1084  00EAE0  00                 	db	0
  1085  00EAE1  00                 	db	0
  1086  00EAE2  00                 	db	0
  1087  00EAE3  6D                 	db	109
  1088  00EAE4  61                 	db	97
  1089  00EAE5  6A                 	db	106
  1090  00EAE6  6F                 	db	111
  1091  00EAE7  72                 	db	114
  1092  00EAE8  20                 	db	32
  1093  00EAE9  37                 	db	55
  1094  00EAEA  74                 	db	116
  1095  00EAEB  68                 	db	104
  1096  00EAEC  00                 	db	0
  1097  00EAED  00                 	db	0
  1098  00EAEE  00                 	db	0
  1099  00EAEF  00                 	db	0
  1100  00EAF0  00                 	db	0
  1101  00EAF1  00                 	db	0
  1102  00EAF2  00                 	db	0
  1103  00EAF3  00                 	db	0
  1104  00EAF4  6D                 	db	109
  1105  00EAF5  69                 	db	105
  1106  00EAF6  6E                 	db	110
  1107  00EAF7  6F                 	db	111
  1108  00EAF8  72                 	db	114
  1109  00EAF9  20                 	db	32
  1110  00EAFA  37                 	db	55
  1111  00EAFB  74                 	db	116
  1112  00EAFC  68                 	db	104
  1113  00EAFD  00                 	db	0
  1114  00EAFE  00                 	db	0
  1115  00EAFF  00                 	db	0
  1116  00EB00  00                 	db	0
  1117  00EB01  00                 	db	0
  1118  00EB02  00                 	db	0
  1119  00EB03  00                 	db	0
  1120  00EB04  00                 	db	0
  1121  00EB05  68                 	db	104
  1122  00EB06  61                 	db	97
  1123  00EB07  6C                 	db	108
  1124  00EB08  66                 	db	102
  1125  00EB09  20                 	db	32
  1126  00EB0A  64                 	db	100
  1127  00EB0B  69                 	db	105
  1128  00EB0C  6D                 	db	109
  1129  00EB0D  69                 	db	105
  1130  00EB0E  6E                 	db	110
  1131  00EB0F  69                 	db	105
  1132  00EB10  73                 	db	115
  1133  00EB11  68                 	db	104
  1134  00EB12  65                 	db	101
  1135  00EB13  64                 	db	100
  1136  00EB14  00                 	db	0
  1137  00EB15  00                 	db	0
  1138  00EB16  64                 	db	100
  1139  00EB17  69                 	db	105
  1140  00EB18  6D                 	db	109
  1141  00EB19  69                 	db	105
  1142  00EB1A  6E                 	db	110
  1143  00EB1B  69                 	db	105
  1144  00EB1C  73                 	db	115
  1145  00EB1D  68                 	db	104
  1146  00EB1E  65                 	db	101
  1147  00EB1F  64                 	db	100
  1148  00EB20  20                 	db	32
  1149  00EB21  37                 	db	55
  1150  00EB22  74                 	db	116
  1151  00EB23  68                 	db	104
  1152  00EB24  00                 	db	0
  1153  00EB25  00                 	db	0
  1154  00EB26  00                 	db	0
  1155  00EB27  48                 	db	72
  1156  00EB28  41                 	db	65
  1157  00EB29  4C                 	db	76
  1158  00EB2A  46                 	db	70
  1159  00EB2B  20                 	db	32
  1160  00EB2C  53                 	db	83
  1161  00EB2D  54                 	db	84
  1162  00EB2E  45                 	db	69
  1163  00EB2F  50                 	db	80
  1164  00EB30  00                 	db	0
  1165  00EB31  00                 	db	0
  1166  00EB32  00                 	db	0
  1167  00EB33  00                 	db	0
  1168  00EB34  00                 	db	0
  1169  00EB35  00                 	db	0
  1170  00EB36  00                 	db	0
  1171  00EB37  00                 	db	0
  1172  00EB38  43                 	db	67
  1173  00EB39  49                 	db	73
  1174  00EB3A  52                 	db	82
  1175  00EB3B  43                 	db	67
  1176  00EB3C  4C                 	db	76
  1177  00EB3D  45                 	db	69
  1178  00EB3E  20                 	db	32
  1179  00EB3F  4F                 	db	79
  1180  00EB40  46                 	db	70
  1181  00EB41  20                 	db	32
  1182  00EB42  46                 	db	70
  1183  00EB43  49                 	db	73
  1184  00EB44  46                 	db	70
  1185  00EB45  54                 	db	84
  1186  00EB46  48                 	db	72
  1187  00EB47  53                 	db	83
  1188  00EB48  00                 	db	0
  1189  00EB49  44                 	db	68
  1190  00EB4A  52                 	db	82
  1191  00EB4B  55                 	db	85
  1192  00EB4C  4D                 	db	77
  1193  00EB4D  20                 	db	32
  1194  00EB4E  49                 	db	73
  1195  00EB4F  53                 	db	83
  1196  00EB50  20                 	db	32
  1197  00EB51  4E                 	db	78
  1198  00EB52  4F                 	db	79
  1199  00EB53  54                 	db	84
  1200  00EB54  45                 	db	69
  1201  00EB55  20                 	db	32
  1202  00EB56  4F                 	db	79
  1203  00EB57  4E                 	db	78
  1204  00EB58  00                 	db	0
  1205  00EB59  00                 	db	0
  1206  00EB5A  44                 	db	68
  1207  00EB5B  52                 	db	82
  1208  00EB5C  55                 	db	85
  1209  00EB5D  4D                 	db	77
  1210  00EB5E  20                 	db	32
  1211  00EB5F  49                 	db	73
  1212  00EB60  53                 	db	83
  1213  00EB61  20                 	db	32
  1214  00EB62  43                 	db	67
  1215  00EB63  43                 	db	67
  1216  00EB64  00                 	db	0
  1217  00EB65  00                 	db	0
  1218  00EB66  00                 	db	0
  1219  00EB67  00                 	db	0
  1220  00EB68  00                 	db	0
  1221  00EB69  00                 	db	0
  1222  00EB6A  00                 	db	0
  1223  00EB6B  44                 	db	68
  1224  00EB6C  52                 	db	82
  1225  00EB6D  55                 	db	85
  1226  00EB6E  4D                 	db	77
  1227  00EB6F  20                 	db	32
  1228  00EB70  43                 	db	67
  1229  00EB71  43                 	db	67
  1230  00EB72  20                 	db	32
  1231  00EB73  54                 	db	84
  1232  00EB74  59                 	db	89
  1233  00EB75  50                 	db	80
  1234  00EB76  45                 	db	69
  1235  00EB77  00                 	db	0
  1236  00EB78  00                 	db	0
  1237  00EB79  00                 	db	0
  1238  00EB7A  00                 	db	0
  1239  00EB7B  00                 	db	0
  1240  00EB7C  44                 	db	68
  1241  00EB7D  52                 	db	82
  1242  00EB7E  55                 	db	85
  1243  00EB7F  4D                 	db	77
  1244  00EB80  20                 	db	32
  1245  00EB81  53                 	db	83
  1246  00EB82  45                 	db	69
  1247  00EB83  54                 	db	84
  1248  00EB84  20                 	db	32
  1249  00EB85  4E                 	db	78
  1250  00EB86  4E                 	db	78
  1251  00EB87  23                 	db	35
  1252  00EB88  00                 	db	0
  1253  00EB89  00                 	db	0
  1254  00EB8A  00                 	db	0
  1255  00EB8B  00                 	db	0
  1256  00EB8C  00                 	db	0
  1257  00EB8D  44                 	db	68
  1258  00EB8E  52                 	db	82
  1259  00EB8F  55                 	db	85
  1260  00EB90  4D                 	db	77
  1261  00EB91  20                 	db	32
  1262  00EB92  53                 	db	83
  1263  00EB93  45                 	db	69
  1264  00EB94  54                 	db	84
  1265  00EB95  20                 	db	32
  1266  00EB96  43                 	db	67
  1267  00EB97  43                 	db	67
  1268  00EB98  23                 	db	35
  1269  00EB99  00                 	db	0
  1270  00EB9A  00                 	db	0
  1271  00EB9B  00                 	db	0
  1272  00EB9C  00                 	db	0
  1273  00EB9D  00                 	db	0
  1274  00EB9E  44                 	db	68
  1275  00EB9F  52                 	db	82
  1276  00EBA0  55                 	db	85
  1277  00EBA1  4D                 	db	77
  1278  00EBA2  20                 	db	32
  1279  00EBA3  43                 	db	67
  1280  00EBA4  43                 	db	67
  1281  00EBA5  20                 	db	32
  1282  00EBA6  54                 	db	84
  1283  00EBA7  52                 	db	82
  1284  00EBA8  49                 	db	73
  1285  00EBA9  47                 	db	71
  1286  00EBAA  47                 	db	71
  1287  00EBAB  45                 	db	69
  1288  00EBAC  52                 	db	82
  1289  00EBAD  00                 	db	0
  1290  00EBAE  00                 	db	0
  1291  00EBAF  44                 	db	68
  1292  00EBB0  52                 	db	82
  1293  00EBB1  55                 	db	85
  1294  00EBB2  4D                 	db	77
  1295  00EBB3  20                 	db	32
  1296  00EBB4  43                 	db	67
  1297  00EBB5  43                 	db	67
  1298  00EBB6  20                 	db	32
  1299  00EBB7  54                 	db	84
  1300  00EBB8  4F                 	db	79
  1301  00EBB9  47                 	db	71
  1302  00EBBA  47                 	db	71
  1303  00EBBB  4C                 	db	76
  1304  00EBBC  45                 	db	69
  1305  00EBBD  00                 	db	0
  1306  00EBBE  00                 	db	0
  1307  00EBBF  00                 	db	0
  1308  00EBC0  44                 	db	68
  1309  00EBC1  52                 	db	82
  1310  00EBC2  55                 	db	85
  1311  00EBC3  4D                 	db	77
  1312  00EBC4  20                 	db	32
  1313  00EBC5  31                 	db	49
  1314  00EBC6  20                 	db	32
  1315  00EBC7  4E                 	db	78
  1316  00EBC8  4E                 	db	78
  1317  00EBC9  3A                 	db	58
  1318  00EBCA  20                 	db	32
  1319  00EBCB  00                 	db	0
  1320  00EBCC  00                 	db	0
  1321  00EBCD  00                 	db	0
  1322  00EBCE  00                 	db	0
  1323  00EBCF  00                 	db	0
  1324  00EBD0  00                 	db	0
  1325  00EBD1  44                 	db	68
  1326  00EBD2  52                 	db	82
  1327  00EBD3  55                 	db	85
  1328  00EBD4  4D                 	db	77
  1329  00EBD5  20                 	db	32
  1330  00EBD6  32                 	db	50
  1331  00EBD7  20                 	db	32
  1332  00EBD8  4E                 	db	78
  1333  00EBD9  4E                 	db	78
  1334  00EBDA  3A                 	db	58
  1335  00EBDB  20                 	db	32
  1336  00EBDC  00                 	db	0
  1337  00EBDD  00                 	db	0
  1338  00EBDE  00                 	db	0
  1339  00EBDF  00                 	db	0
  1340  00EBE0  00                 	db	0
  1341  00EBE1  00                 	db	0
  1342  00EBE2  44                 	db	68
  1343  00EBE3  52                 	db	82
  1344  00EBE4  55                 	db	85
  1345  00EBE5  4D                 	db	77
  1346  00EBE6  20                 	db	32
  1347  00EBE7  33                 	db	51
  1348  00EBE8  20                 	db	32
  1349  00EBE9  4E                 	db	78
  1350  00EBEA  4E                 	db	78
  1351  00EBEB  3A                 	db	58
  1352  00EBEC  20                 	db	32
  1353  00EBED  00                 	db	0
  1354  00EBEE  00                 	db	0
  1355  00EBEF  00                 	db	0
  1356  00EBF0  00                 	db	0
  1357  00EBF1  00                 	db	0
  1358  00EBF2  00                 	db	0
  1359  00EBF3  44                 	db	68
  1360  00EBF4  52                 	db	82
  1361  00EBF5  55                 	db	85
  1362  00EBF6  4D                 	db	77
  1363  00EBF7  20                 	db	32
  1364  00EBF8  34                 	db	52
  1365  00EBF9  20                 	db	32
  1366  00EBFA  4E                 	db	78
  1367  00EBFB  4E                 	db	78
  1368  00EBFC  3A                 	db	58
  1369  00EBFD  20                 	db	32
  1370  00EBFE  00                 	db	0
  1371  00EBFF  00                 	db	0
  1372  00EC00  00                 	db	0
  1373  00EC01  00                 	db	0
  1374  00EC02  00                 	db	0
  1375  00EC03  00                 	db	0
  1376  00EC04  44                 	db	68
  1377  00EC05  52                 	db	82
  1378  00EC06  55                 	db	85
  1379  00EC07  4D                 	db	77
  1380  00EC08  20                 	db	32
  1381  00EC09  35                 	db	53
  1382  00EC0A  20                 	db	32
  1383  00EC0B  4E                 	db	78
  1384  00EC0C  4E                 	db	78
  1385  00EC0D  3A                 	db	58
  1386  00EC0E  20                 	db	32
  1387  00EC0F  00                 	db	0
  1388  00EC10  00                 	db	0
  1389  00EC11  00                 	db	0
  1390  00EC12  00                 	db	0
  1391  00EC13  00                 	db	0
  1392  00EC14  00                 	db	0
  1393  00EC15  44                 	db	68
  1394  00EC16  52                 	db	82
  1395  00EC17  55                 	db	85
  1396  00EC18  4D                 	db	77
  1397  00EC19  20                 	db	32
  1398  00EC1A  36                 	db	54
  1399  00EC1B  20                 	db	32
  1400  00EC1C  4E                 	db	78
  1401  00EC1D  4E                 	db	78
  1402  00EC1E  3A                 	db	58
  1403  00EC1F  20                 	db	32
  1404  00EC20  00                 	db	0
  1405  00EC21  00                 	db	0
  1406  00EC22  00                 	db	0
  1407  00EC23  00                 	db	0
  1408  00EC24  00                 	db	0
  1409  00EC25  00                 	db	0
  1410  00EC26  44                 	db	68
  1411  00EC27  52                 	db	82
  1412  00EC28  55                 	db	85
  1413  00EC29  4D                 	db	77
  1414  00EC2A  20                 	db	32
  1415  00EC2B  37                 	db	55
  1416  00EC2C  20                 	db	32
  1417  00EC2D  4E                 	db	78
  1418  00EC2E  4E                 	db	78
  1419  00EC2F  3A                 	db	58
  1420  00EC30  20                 	db	32
  1421  00EC31  00                 	db	0
  1422  00EC32  00                 	db	0
  1423  00EC33  00                 	db	0
  1424  00EC34  00                 	db	0
  1425  00EC35  00                 	db	0
  1426  00EC36  00                 	db	0
  1427  00EC37  44                 	db	68
  1428  00EC38  52                 	db	82
  1429  00EC39  55                 	db	85
  1430  00EC3A  4D                 	db	77
  1431  00EC3B  20                 	db	32
  1432  00EC3C  38                 	db	56
  1433  00EC3D  20                 	db	32
  1434  00EC3E  4E                 	db	78
  1435  00EC3F  4E                 	db	78
  1436  00EC40  3A                 	db	58
  1437  00EC41  20                 	db	32
  1438  00EC42  00                 	db	0
  1439  00EC43  00                 	db	0
  1440  00EC44  00                 	db	0
  1441  00EC45  00                 	db	0
  1442  00EC46  00                 	db	0
  1443  00EC47  00                 	db	0
  1444  00EC48  44                 	db	68
  1445  00EC49  52                 	db	82
  1446  00EC4A  55                 	db	85
  1447  00EC4B  4D                 	db	77
  1448  00EC4C  20                 	db	32
  1449  00EC4D  31                 	db	49
  1450  00EC4E  20                 	db	32
  1451  00EC4F  43                 	db	67
  1452  00EC50  43                 	db	67
  1453  00EC51  3A                 	db	58
  1454  00EC52  20                 	db	32
  1455  00EC53  00                 	db	0
  1456  00EC54  00                 	db	0
  1457  00EC55  00                 	db	0
  1458  00EC56  00                 	db	0
  1459  00EC57  00                 	db	0
  1460  00EC58  00                 	db	0
  1461  00EC59  44                 	db	68
  1462  00EC5A  52                 	db	82
  1463  00EC5B  55                 	db	85
  1464  00EC5C  4D                 	db	77
  1465  00EC5D  20                 	db	32
  1466  00EC5E  32                 	db	50
  1467  00EC5F  20                 	db	32
  1468  00EC60  43                 	db	67
  1469  00EC61  43                 	db	67
  1470  00EC62  3A                 	db	58
  1471  00EC63  20                 	db	32
  1472  00EC64  00                 	db	0
  1473  00EC65  00                 	db	0
  1474  00EC66  00                 	db	0
  1475  00EC67  00                 	db	0
  1476  00EC68  00                 	db	0
  1477  00EC69  00                 	db	0
  1478  00EC6A  44                 	db	68
  1479  00EC6B  52                 	db	82
  1480  00EC6C  55                 	db	85
  1481  00EC6D  4D                 	db	77
  1482  00EC6E  20                 	db	32
  1483  00EC6F  33                 	db	51
  1484  00EC70  20                 	db	32
  1485  00EC71  43                 	db	67
  1486  00EC72  43                 	db	67
  1487  00EC73  3A                 	db	58
  1488  00EC74  20                 	db	32
  1489  00EC75  00                 	db	0
  1490  00EC76  00                 	db	0
  1491  00EC77  00                 	db	0
  1492  00EC78  00                 	db	0
  1493  00EC79  00                 	db	0
  1494  00EC7A  00                 	db	0
  1495  00EC7B  44                 	db	68
  1496  00EC7C  52                 	db	82
  1497  00EC7D  55                 	db	85
  1498  00EC7E  4D                 	db	77
  1499  00EC7F  20                 	db	32
  1500  00EC80  34                 	db	52
  1501  00EC81  20                 	db	32
  1502  00EC82  43                 	db	67
  1503  00EC83  43                 	db	67
  1504  00EC84  3A                 	db	58
  1505  00EC85  20                 	db	32
  1506  00EC86  00                 	db	0
  1507  00EC87  00                 	db	0
  1508  00EC88  00                 	db	0
  1509  00EC89  00                 	db	0
  1510  00EC8A  00                 	db	0
  1511  00EC8B  00                 	db	0
  1512  00EC8C  44                 	db	68
  1513  00EC8D  52                 	db	82
  1514  00EC8E  55                 	db	85
  1515  00EC8F  4D                 	db	77
  1516  00EC90  20                 	db	32
  1517  00EC91  35                 	db	53
  1518  00EC92  20                 	db	32
  1519  00EC93  43                 	db	67
  1520  00EC94  43                 	db	67
  1521  00EC95  3A                 	db	58
  1522  00EC96  20                 	db	32
  1523  00EC97  00                 	db	0
  1524  00EC98  00                 	db	0
  1525  00EC99  00                 	db	0
  1526  00EC9A  00                 	db	0
  1527  00EC9B  00                 	db	0
  1528  00EC9C  00                 	db	0
  1529  00EC9D  44                 	db	68
  1530  00EC9E  52                 	db	82
  1531  00EC9F  55                 	db	85
  1532  00ECA0  4D                 	db	77
  1533  00ECA1  20                 	db	32
  1534  00ECA2  36                 	db	54
  1535  00ECA3  20                 	db	32
  1536  00ECA4  43                 	db	67
  1537  00ECA5  43                 	db	67
  1538  00ECA6  3A                 	db	58
  1539  00ECA7  20                 	db	32
  1540  00ECA8  00                 	db	0
  1541  00ECA9  00                 	db	0
  1542  00ECAA  00                 	db	0
  1543  00ECAB  00                 	db	0
  1544  00ECAC  00                 	db	0
  1545  00ECAD  00                 	db	0
  1546  00ECAE  44                 	db	68
  1547  00ECAF  52                 	db	82
  1548  00ECB0  55                 	db	85
  1549  00ECB1  4D                 	db	77
  1550  00ECB2  20                 	db	32
  1551  00ECB3  37                 	db	55
  1552  00ECB4  20                 	db	32
  1553  00ECB5  43                 	db	67
  1554  00ECB6  43                 	db	67
  1555  00ECB7  3A                 	db	58
  1556  00ECB8  20                 	db	32
  1557  00ECB9  00                 	db	0
  1558  00ECBA  00                 	db	0
  1559  00ECBB  00                 	db	0
  1560  00ECBC  00                 	db	0
  1561  00ECBD  00                 	db	0
  1562  00ECBE  00                 	db	0
  1563  00ECBF  44                 	db	68
  1564  00ECC0  52                 	db	82
  1565  00ECC1  55                 	db	85
  1566  00ECC2  4D                 	db	77
  1567  00ECC3  20                 	db	32
  1568  00ECC4  38                 	db	56
  1569  00ECC5  20                 	db	32
  1570  00ECC6  43                 	db	67
  1571  00ECC7  43                 	db	67
  1572  00ECC8  3A                 	db	58
  1573  00ECC9  20                 	db	32
  1574  00ECCA  00                 	db	0
  1575  00ECCB  00                 	db	0
  1576  00ECCC  00                 	db	0
  1577  00ECCD  00                 	db	0
  1578  00ECCE  00                 	db	0
  1579  00ECCF  00                 	db	0
  1580  00ECD0  50                 	db	80
  1581  00ECD1  4F                 	db	79
  1582  00ECD2  54                 	db	84
  1583  00ECD3  53                 	db	83
  1584  00ECD4  20                 	db	32
  1585  00ECD5  52                 	db	82
  1586  00ECD6  45                 	db	69
  1587  00ECD7  53                 	db	83
  1588  00ECD8  4F                 	db	79
  1589  00ECD9  4C                 	db	76
  1590  00ECDA  55                 	db	85
  1591  00ECDB  54                 	db	84
  1592  00ECDC  49                 	db	73
  1593  00ECDD  4F                 	db	79
  1594  00ECDE  4E                 	db	78
  1595  00ECDF  00                 	db	0
  1596  00ECE0  00                 	db	0
  1597  00ECE1  50                 	db	80
  1598  00ECE2  4F                 	db	79
  1599  00ECE3  54                 	db	84
  1600  00ECE4  53                 	db	83
  1601  00ECE5  20                 	db	32
  1602  00ECE6  41                 	db	65
  1603  00ECE7  4C                 	db	76
  1604  00ECE8  50                 	db	80
  1605  00ECE9  48                 	db	72
  1606  00ECEA  41                 	db	65
  1607  00ECEB  00                 	db	0
  1608  00ECEC  00                 	db	0
  1609  00ECED  00                 	db	0
  1610  00ECEE  00                 	db	0
  1611  00ECEF  00                 	db	0
  1612  00ECF0  00                 	db	0
  1613  00ECF1  00                 	db	0
  1614  00ECF2  50                 	db	80
  1615  00ECF3  4F                 	db	79
  1616  00ECF4  54                 	db	84
  1617  00ECF5  53                 	db	83
  1618  00ECF6  20                 	db	32
  1619  00ECF7  53                 	db	83
  1620  00ECF8  45                 	db	69
  1621  00ECF9  54                 	db	84
  1622  00ECFA  20                 	db	32
  1623  00ECFB  43                 	db	67
  1624  00ECFC  43                 	db	67
  1625  00ECFD  23                 	db	35
  1626  00ECFE  00                 	db	0
  1627  00ECFF  00                 	db	0
  1628  00ED00  00                 	db	0
  1629  00ED01  00                 	db	0
  1630  00ED02  00                 	db	0
  1631  00ED03  53                 	db	83
  1632  00ED04  4C                 	db	76
  1633  00ED05  49                 	db	73
  1634  00ED06  44                 	db	68
  1635  00ED07  45                 	db	69
  1636  00ED08  50                 	db	80
  1637  00ED09  4F                 	db	79
  1638  00ED0A  54                 	db	84
  1639  00ED0B  20                 	db	32
  1640  00ED0C  53                 	db	83
  1641  00ED0D  45                 	db	69
  1642  00ED0E  54                 	db	84
  1643  00ED0F  20                 	db	32
  1644  00ED10  43                 	db	67
  1645  00ED11  43                 	db	67
  1646  00ED12  23                 	db	35
  1647  00ED13  00                 	db	0
  1648  00ED14  4A                 	db	74
  1649  00ED15  4F                 	db	79
  1650  00ED16  59                 	db	89
  1651  00ED17  53                 	db	83
  1652  00ED18  54                 	db	84
  1653  00ED19  49                 	db	73
  1654  00ED1A  43                 	db	67
  1655  00ED1B  4B                 	db	75
  1656  00ED1C  20                 	db	32
  1657  00ED1D  53                 	db	83
  1658  00ED1E  45                 	db	69
  1659  00ED1F  54                 	db	84
  1660  00ED20  20                 	db	32
  1661  00ED21  43                 	db	67
  1662  00ED22  43                 	db	67
  1663  00ED23  23                 	db	35
  1664  00ED24  00                 	db	0
  1665  00ED25  50                 	db	80
  1666  00ED26  4F                 	db	79
  1667  00ED27  54                 	db	84
  1668  00ED28  53                 	db	83
  1669  00ED29  20                 	db	32
  1670  00ED2A  4C                 	db	76
  1671  00ED2B  4F                 	db	79
  1672  00ED2C  20                 	db	32
  1673  00ED2D  52                 	db	82
  1674  00ED2E  45                 	db	69
  1675  00ED2F  53                 	db	83
  1676  00ED30  00                 	db	0
  1677  00ED31  00                 	db	0
  1678  00ED32  00                 	db	0
  1679  00ED33  00                 	db	0
  1680  00ED34  00                 	db	0
  1681  00ED35  00                 	db	0
  1682  00ED36  50                 	db	80
  1683  00ED37  4F                 	db	79
  1684  00ED38  54                 	db	84
  1685  00ED39  53                 	db	83
  1686  00ED3A  20                 	db	32
  1687  00ED3B  48                 	db	72
  1688  00ED3C  49                 	db	73
  1689  00ED3D  20                 	db	32
  1690  00ED3E  52                 	db	82
  1691  00ED3F  45                 	db	69
  1692  00ED40  53                 	db	83
  1693  00ED41  00                 	db	0
  1694  00ED42  00                 	db	0
  1695  00ED43  00                 	db	0
  1696  00ED44  00                 	db	0
  1697  00ED45  00                 	db	0
  1698  00ED46  00                 	db	0
  1699  00ED47  50                 	db	80
  1700  00ED48  31                 	db	49
  1701  00ED49  20                 	db	32
  1702  00ED4A  43                 	db	67
  1703  00ED4B  43                 	db	67
  1704  00ED4C  3A                 	db	58
  1705  00ED4D  00                 	db	0
  1706  00ED4E  00                 	db	0
  1707  00ED4F  00                 	db	0
  1708  00ED50  00                 	db	0
  1709  00ED51  00                 	db	0
  1710  00ED52  00                 	db	0
  1711  00ED53  00                 	db	0
  1712  00ED54  00                 	db	0
  1713  00ED55  00                 	db	0
  1714  00ED56  00                 	db	0
  1715  00ED57  00                 	db	0
  1716  00ED58  50                 	db	80
  1717  00ED59  32                 	db	50
  1718  00ED5A  20                 	db	32
  1719  00ED5B  43                 	db	67
  1720  00ED5C  43                 	db	67
  1721  00ED5D  3A                 	db	58
  1722  00ED5E  00                 	db	0
  1723  00ED5F  00                 	db	0
  1724  00ED60  00                 	db	0
  1725  00ED61  00                 	db	0
  1726  00ED62  00                 	db	0
  1727  00ED63  00                 	db	0
  1728  00ED64  00                 	db	0
  1729  00ED65  00                 	db	0
  1730  00ED66  00                 	db	0
  1731  00ED67  00                 	db	0
  1732  00ED68  00                 	db	0
  1733  00ED69  50                 	db	80
  1734  00ED6A  33                 	db	51
  1735  00ED6B  20                 	db	32
  1736  00ED6C  43                 	db	67
  1737  00ED6D  43                 	db	67
  1738  00ED6E  3A                 	db	58
  1739  00ED6F  00                 	db	0
  1740  00ED70  00                 	db	0
  1741  00ED71  00                 	db	0
  1742  00ED72  00                 	db	0
  1743  00ED73  00                 	db	0
  1744  00ED74  00                 	db	0
  1745  00ED75  00                 	db	0
  1746  00ED76  00                 	db	0
  1747  00ED77  00                 	db	0
  1748  00ED78  00                 	db	0
  1749  00ED79  00                 	db	0
  1750  00ED7A  50                 	db	80
  1751  00ED7B  34                 	db	52
  1752  00ED7C  20                 	db	32
  1753  00ED7D  43                 	db	67
  1754  00ED7E  43                 	db	67
  1755  00ED7F  3A                 	db	58
  1756  00ED80  00                 	db	0
  1757  00ED81  00                 	db	0
  1758  00ED82  00                 	db	0
  1759  00ED83  00                 	db	0
  1760  00ED84  00                 	db	0
  1761  00ED85  00                 	db	0
  1762  00ED86  00                 	db	0
  1763  00ED87  00                 	db	0
  1764  00ED88  00                 	db	0
  1765  00ED89  00                 	db	0
  1766  00ED8A  00                 	db	0
  1767  00ED8B  50                 	db	80
  1768  00ED8C  35                 	db	53
  1769  00ED8D  20                 	db	32
  1770  00ED8E  43                 	db	67
  1771  00ED8F  43                 	db	67
  1772  00ED90  3A                 	db	58
  1773  00ED91  00                 	db	0
  1774  00ED92  00                 	db	0
  1775  00ED93  00                 	db	0
  1776  00ED94  00                 	db	0
  1777  00ED95  00                 	db	0
  1778  00ED96  00                 	db	0
  1779  00ED97  00                 	db	0
  1780  00ED98  00                 	db	0
  1781  00ED99  00                 	db	0
  1782  00ED9A  00                 	db	0
  1783  00ED9B  00                 	db	0
  1784  00ED9C  50                 	db	80
  1785  00ED9D  36                 	db	54
  1786  00ED9E  20                 	db	32
  1787  00ED9F  43                 	db	67
  1788  00EDA0  43                 	db	67
  1789  00EDA1  3A                 	db	58
  1790  00EDA2  00                 	db	0
  1791  00EDA3  00                 	db	0
  1792  00EDA4  00                 	db	0
  1793  00EDA5  00                 	db	0
  1794  00EDA6  00                 	db	0
  1795  00EDA7  00                 	db	0
  1796  00EDA8  00                 	db	0
  1797  00EDA9  00                 	db	0
  1798  00EDAA  00                 	db	0
  1799  00EDAB  00                 	db	0
  1800  00EDAC  00                 	db	0
  1801  00EDAD  50                 	db	80
  1802  00EDAE  37                 	db	55
  1803  00EDAF  20                 	db	32
  1804  00EDB0  43                 	db	67
  1805  00EDB1  43                 	db	67
  1806  00EDB2  3A                 	db	58
  1807  00EDB3  00                 	db	0
  1808  00EDB4  00                 	db	0
  1809  00EDB5  00                 	db	0
  1810  00EDB6  00                 	db	0
  1811  00EDB7  00                 	db	0
  1812  00EDB8  00                 	db	0
  1813  00EDB9  00                 	db	0
  1814  00EDBA  00                 	db	0
  1815  00EDBB  00                 	db	0
  1816  00EDBC  00                 	db	0
  1817  00EDBD  00                 	db	0
  1818  00EDBE  53                 	db	83
  1819  00EDBF  31                 	db	49
  1820  00EDC0  20                 	db	32
  1821  00EDC1  43                 	db	67
  1822  00EDC2  43                 	db	67
  1823  00EDC3  3A                 	db	58
  1824  00EDC4  20                 	db	32
  1825  00EDC5  00                 	db	0
  1826  00EDC6  00                 	db	0
  1827  00EDC7  00                 	db	0
  1828  00EDC8  00                 	db	0
  1829  00EDC9  00                 	db	0
  1830  00EDCA  00                 	db	0
  1831  00EDCB  00                 	db	0
  1832  00EDCC  00                 	db	0
  1833  00EDCD  00                 	db	0
  1834  00EDCE  00                 	db	0
  1835  00EDCF  53                 	db	83
  1836  00EDD0  32                 	db	50
  1837  00EDD1  20                 	db	32
  1838  00EDD2  43                 	db	67
  1839  00EDD3  43                 	db	67
  1840  00EDD4  3A                 	db	58
  1841  00EDD5  20                 	db	32
  1842  00EDD6  00                 	db	0
  1843  00EDD7  00                 	db	0
  1844  00EDD8  00                 	db	0
  1845  00EDD9  00                 	db	0
  1846  00EDDA  00                 	db	0
  1847  00EDDB  00                 	db	0
  1848  00EDDC  00                 	db	0
  1849  00EDDD  00                 	db	0
  1850  00EDDE  00                 	db	0
  1851  00EDDF  00                 	db	0
  1852  00EDE0  53                 	db	83
  1853  00EDE1  33                 	db	51
  1854  00EDE2  20                 	db	32
  1855  00EDE3  43                 	db	67
  1856  00EDE4  43                 	db	67
  1857  00EDE5  3A                 	db	58
  1858  00EDE6  20                 	db	32
  1859  00EDE7  00                 	db	0
  1860  00EDE8  00                 	db	0
  1861  00EDE9  00                 	db	0
  1862  00EDEA  00                 	db	0
  1863  00EDEB  00                 	db	0
  1864  00EDEC  00                 	db	0
  1865  00EDED  00                 	db	0
  1866  00EDEE  00                 	db	0
  1867  00EDEF  00                 	db	0
  1868  00EDF0  00                 	db	0
  1869  00EDF1  53                 	db	83
  1870  00EDF2  34                 	db	52
  1871  00EDF3  20                 	db	32
  1872  00EDF4  43                 	db	67
  1873  00EDF5  43                 	db	67
  1874  00EDF6  3A                 	db	58
  1875  00EDF7  20                 	db	32
  1876  00EDF8  00                 	db	0
  1877  00EDF9  00                 	db	0
  1878  00EDFA  00                 	db	0
  1879  00EDFB  00                 	db	0
  1880  00EDFC  00                 	db	0
  1881  00EDFD  00                 	db	0
  1882  00EDFE  00                 	db	0
  1883  00EDFF  00                 	db	0
  1884  00EE00  00                 	db	0
  1885  00EE01  00                 	db	0
  1886  00EE02  53                 	db	83
  1887  00EE03  35                 	db	53
  1888  00EE04  20                 	db	32
  1889  00EE05  43                 	db	67
  1890  00EE06  43                 	db	67
  1891  00EE07  3A                 	db	58
  1892  00EE08  20                 	db	32
  1893  00EE09  00                 	db	0
  1894  00EE0A  00                 	db	0
  1895  00EE0B  00                 	db	0
  1896  00EE0C  00                 	db	0
  1897  00EE0D  00                 	db	0
  1898  00EE0E  00                 	db	0
  1899  00EE0F  00                 	db	0
  1900  00EE10  00                 	db	0
  1901  00EE11  00                 	db	0
  1902  00EE12  00                 	db	0
  1903  00EE13  53                 	db	83
  1904  00EE14  36                 	db	54
  1905  00EE15  20                 	db	32
  1906  00EE16  43                 	db	67
  1907  00EE17  43                 	db	67
  1908  00EE18  3A                 	db	58
  1909  00EE19  20                 	db	32
  1910  00EE1A  00                 	db	0
  1911  00EE1B  00                 	db	0
  1912  00EE1C  00                 	db	0
  1913  00EE1D  00                 	db	0
  1914  00EE1E  00                 	db	0
  1915  00EE1F  00                 	db	0
  1916  00EE20  00                 	db	0
  1917  00EE21  00                 	db	0
  1918  00EE22  00                 	db	0
  1919  00EE23  00                 	db	0
  1920  00EE24  53                 	db	83
  1921  00EE25  37                 	db	55
  1922  00EE26  20                 	db	32
  1923  00EE27  43                 	db	67
  1924  00EE28  43                 	db	67
  1925  00EE29  3A                 	db	58
  1926  00EE2A  20                 	db	32
  1927  00EE2B  00                 	db	0
  1928  00EE2C  00                 	db	0
  1929  00EE2D  00                 	db	0
  1930  00EE2E  00                 	db	0
  1931  00EE2F  00                 	db	0
  1932  00EE30  00                 	db	0
  1933  00EE31  00                 	db	0
  1934  00EE32  00                 	db	0
  1935  00EE33  00                 	db	0
  1936  00EE34  00                 	db	0
  1937  00EE35  4A                 	db	74
  1938  00EE36  58                 	db	88
  1939  00EE37  20                 	db	32
  1940  00EE38  43                 	db	67
  1941  00EE39  43                 	db	67
  1942  00EE3A  3A                 	db	58
  1943  00EE3B  20                 	db	32
  1944  00EE3C  00                 	db	0
  1945  00EE3D  00                 	db	0
  1946  00EE3E  00                 	db	0
  1947  00EE3F  00                 	db	0
  1948  00EE40  00                 	db	0
  1949  00EE41  00                 	db	0
  1950  00EE42  00                 	db	0
  1951  00EE43  00                 	db	0
  1952  00EE44  00                 	db	0
  1953  00EE45  00                 	db	0
  1954  00EE46  4A                 	db	74
  1955  00EE47  59                 	db	89
  1956  00EE48  20                 	db	32
  1957  00EE49  43                 	db	67
  1958  00EE4A  43                 	db	67
  1959  00EE4B  3A                 	db	58
  1960  00EE4C  20                 	db	32
  1961  00EE4D  00                 	db	0
  1962  00EE4E  00                 	db	0
  1963  00EE4F  00                 	db	0
  1964  00EE50  00                 	db	0
  1965  00EE51  00                 	db	0
  1966  00EE52  00                 	db	0
  1967  00EE53  00                 	db	0
  1968  00EE54  00                 	db	0
  1969  00EE55  00                 	db	0
  1970  00EE56  00                 	db	0
  1971  00EE57  4D                 	db	77
  1972  00EE58  61                 	db	97
  1973  00EE59  69                 	db	105
  1974  00EE5A  6E                 	db	110
  1975  00EE5B  20                 	db	32
  1976  00EE5C  63                 	db	99
  1977  00EE5D  68                 	db	104
  1978  00EE5E  61                 	db	97
  1979  00EE5F  6E                 	db	110
  1980  00EE60  6E                 	db	110
  1981  00EE61  65                 	db	101
  1982  00EE62  6C                 	db	108
  1983  00EE63  00                 	db	0
  1984  00EE64  00                 	db	0
  1985  00EE65  00                 	db	0
  1986  00EE66  00                 	db	0
  1987  00EE67  00                 	db	0
  1988  00EE68  44                 	db	68
  1989  00EE69  72                 	db	114
  1990  00EE6A  75                 	db	117
  1991  00EE6B  6D                 	db	109
  1992  00EE6C  20                 	db	32
  1993  00EE6D  63                 	db	99
  1994  00EE6E  68                 	db	104
  1995  00EE6F  61                 	db	97
  1996  00EE70  6E                 	db	110
  1997  00EE71  6E                 	db	110
  1998  00EE72  65                 	db	101
  1999  00EE73  6C                 	db	108
  2000  00EE74  00                 	db	0
  2001  00EE75  00                 	db	0
  2002  00EE76  00                 	db	0
  2003  00EE77  00                 	db	0
  2004  00EE78  00                 	db	0
  2005  00EE79  53                 	db	83
  2006  00EE7A  61                 	db	97
  2007  00EE7B  76                 	db	118
  2008  00EE7C  65                 	db	101
  2009  00EE7D  20                 	db	32
  2010  00EE7E  73                 	db	115
  2011  00EE7F  65                 	db	101
  2012  00EE80  74                 	db	116
  2013  00EE81  74                 	db	116
  2014  00EE82  69                 	db	105
  2015  00EE83  6E                 	db	110
  2016  00EE84  67                 	db	103
  2017  00EE85  73                 	db	115
  2018  00EE86  00                 	db	0
  2019  00EE87  00                 	db	0
  2020  00EE88  00                 	db	0
  2021  00EE89  00                 	db	0
  2022  00EE8A  4C                 	db	76
  2023  00EE8B  6F                 	db	111
  2024  00EE8C  61                 	db	97
  2025  00EE8D  64                 	db	100
  2026  00EE8E  20                 	db	32
  2027  00EE8F  73                 	db	115
  2028  00EE90  65                 	db	101
  2029  00EE91  74                 	db	116
  2030  00EE92  74                 	db	116
  2031  00EE93  69                 	db	105
  2032  00EE94  6E                 	db	110
  2033  00EE95  67                 	db	103
  2034  00EE96  73                 	db	115
  2035  00EE97  00                 	db	0
  2036  00EE98  00                 	db	0
  2037  00EE99  00                 	db	0
  2038  00EE9A  00                 	db	0
  2039  00EE9B  52                 	db	82
  2040  00EE9C  65                 	db	101
  2041  00EE9D  73                 	db	115
  2042  00EE9E  74                 	db	116
  2043  00EE9F  6F                 	db	111
  2044  00EEA0  72                 	db	114
  2045  00EEA1  65                 	db	101
  2046  00EEA2  20                 	db	32
  2047  00EEA3  64                 	db	100
  2048  00EEA4  65                 	db	101
  2049  00EEA5  66                 	db	102
  2050  00EEA6  61                 	db	97
  2051  00EEA7  75                 	db	117
  2052  00EEA8  6C                 	db	108
  2053  00EEA9  74                 	db	116
  2054  00EEAA  73                 	db	115
  2055  00EEAB  00                 	db	0
  2056  00EEAC  45                 	db	69
  2057  00EEAD  6E                 	db	110
  2058  00EEAE  63                 	db	99
  2059  00EEAF  6F                 	db	111
  2060  00EEB0  64                 	db	100
  2061  00EEB1  65                 	db	101
  2062  00EEB2  72                 	db	114
  2063  00EEB3  20                 	db	32
  2064  00EEB4  50                 	db	80
  2065  00EEB5  6F                 	db	111
  2066  00EEB6  6C                 	db	108
  2067  00EEB7  61                 	db	97
  2068  00EEB8  72                 	db	114
  2069  00EEB9  69                 	db	105
  2070  00EEBA  74                 	db	116
  2071  00EEBB  79                 	db	121
  2072  00EEBC  00                 	db	0
  2073  00EEBD  45                 	db	69
  2074  00EEBE  78                 	db	120
  2075  00EEBF  69                 	db	105
  2076  00EEC0  74                 	db	116
  2077  00EEC1  00                 	db	0
  2078  00EEC2  00                 	db	0
  2079  00EEC3  00                 	db	0
  2080  00EEC4  00                 	db	0
  2081  00EEC5  00                 	db	0
  2082  00EEC6  00                 	db	0
  2083  00EEC7  00                 	db	0
  2084  00EEC8  00                 	db	0
  2085  00EEC9  00                 	db	0
  2086  00EECA  00                 	db	0
  2087  00EECB  00                 	db	0
  2088  00EECC  00                 	db	0
  2089  00EECD  00                 	db	0
  2090  00EECE  53                 	db	83
  2091  00EECF  6C                 	db	108
  2092  00EED0  6F                 	db	111
  2093  00EED1  74                 	db	116
  2094  00EED2  20                 	db	32
  2095  00EED3  31                 	db	49
  2096  00EED4  00                 	db	0
  2097  00EED5  00                 	db	0
  2098  00EED6  00                 	db	0
  2099  00EED7  00                 	db	0
  2100  00EED8  00                 	db	0
  2101  00EED9  00                 	db	0
  2102  00EEDA  00                 	db	0
  2103  00EEDB  00                 	db	0
  2104  00EEDC  00                 	db	0
  2105  00EEDD  00                 	db	0
  2106  00EEDE  00                 	db	0
  2107  00EEDF  53                 	db	83
  2108  00EEE0  6C                 	db	108
  2109  00EEE1  6F                 	db	111
  2110  00EEE2  74                 	db	116
  2111  00EEE3  20                 	db	32
  2112  00EEE4  32                 	db	50
  2113  00EEE5  00                 	db	0
  2114  00EEE6  00                 	db	0
  2115  00EEE7  00                 	db	0
  2116  00EEE8  00                 	db	0
  2117  00EEE9  00                 	db	0
  2118  00EEEA  00                 	db	0
  2119  00EEEB  00                 	db	0
  2120  00EEEC  00                 	db	0
  2121  00EEED  00                 	db	0
  2122  00EEEE  00                 	db	0
  2123  00EEEF  00                 	db	0
  2124  00EEF0  53                 	db	83
  2125  00EEF1  6C                 	db	108
  2126  00EEF2  6F                 	db	111
  2127  00EEF3  74                 	db	116
  2128  00EEF4  20                 	db	32
  2129  00EEF5  33                 	db	51
  2130  00EEF6  00                 	db	0
  2131  00EEF7  00                 	db	0
  2132  00EEF8  00                 	db	0
  2133  00EEF9  00                 	db	0
  2134  00EEFA  00                 	db	0
  2135  00EEFB  00                 	db	0
  2136  00EEFC  00                 	db	0
  2137  00EEFD  00                 	db	0
  2138  00EEFE  00                 	db	0
  2139  00EEFF  00                 	db	0
  2140  00EF00  00                 	db	0
  2141  00EF01  53                 	db	83
  2142  00EF02  6C                 	db	108
  2143  00EF03  6F                 	db	111
  2144  00EF04  74                 	db	116
  2145  00EF05  20                 	db	32
  2146  00EF06  34                 	db	52
  2147  00EF07  00                 	db	0
  2148  00EF08  00                 	db	0
  2149  00EF09  00                 	db	0
  2150  00EF0A  00                 	db	0
  2151  00EF0B  00                 	db	0
  2152  00EF0C  00                 	db	0
  2153  00EF0D  00                 	db	0
  2154  00EF0E  00                 	db	0
  2155  00EF0F  00                 	db	0
  2156  00EF10  00                 	db	0
  2157  00EF11  00                 	db	0
  2158  00EF12  45                 	db	69
  2159  00EF13  78                 	db	120
  2160  00EF14  69                 	db	105
  2161  00EF15  74                 	db	116
  2162  00EF16  00                 	db	0
  2163  00EF17  00                 	db	0
  2164  00EF18  00                 	db	0
  2165  00EF19  00                 	db	0
  2166  00EF1A  00                 	db	0
  2167  00EF1B  00                 	db	0
  2168  00EF1C  00                 	db	0
  2169  00EF1D  00                 	db	0
  2170  00EF1E  00                 	db	0
  2171  00EF1F  00                 	db	0
  2172  00EF20  00                 	db	0
  2173  00EF21  00                 	db	0
  2174  00EF22  00                 	db	0
  2175  00EF23  43                 	db	67
  2176  00EF24  57                 	db	87
  2177  00EF25  20                 	db	32
  2178  00EF26  49                 	db	73
  2179  00EF27  53                 	db	83
  2180  00EF28  20                 	db	32
  2181  00EF29  49                 	db	73
  2182  00EF2A  4E                 	db	78
  2183  00EF2B  43                 	db	67
  2184  00EF2C  52                 	db	82
  2185  00EF2D  45                 	db	69
  2186  00EF2E  41                 	db	65
  2187  00EF2F  53                 	db	83
  2188  00EF30  45                 	db	69
  2189  00EF31  00                 	db	0
  2190  00EF32  00                 	db	0
  2191  00EF33  00                 	db	0
  2192  00EF34  43                 	db	67
  2193  00EF35  43                 	db	67
  2194  00EF36  57                 	db	87
  2195  00EF37  20                 	db	32
  2196  00EF38  49                 	db	73
  2197  00EF39  53                 	db	83
  2198  00EF3A  20                 	db	32
  2199  00EF3B  49                 	db	73
  2200  00EF3C  4E                 	db	78
  2201  00EF3D  43                 	db	67
  2202  00EF3E  52                 	db	82
  2203  00EF3F  45                 	db	69
  2204  00EF40  41                 	db	65
  2205  00EF41  53                 	db	83
  2206  00EF42  45                 	db	69
  2207  00EF43  00                 	db	0
  2208  00EF44  00                 	db	0
  2209  00EF45  41                 	db	65
  2210  00EF46  72                 	db	114
  2211  00EF47  70                 	db	112
  2212  00EF48  65                 	db	101
  2213  00EF49  67                 	db	103
  2214  00EF4A  67                 	db	103
  2215  00EF4B  69                 	db	105
  2216  00EF4C  6F                 	db	111
  2217  00EF4D  20                 	db	32
  2218  00EF4E  4F                 	db	79
  2219  00EF4F  46                 	db	70
  2220  00EF50  46                 	db	70
  2221  00EF51  2F                 	db	47
  2222  00EF52  4F                 	db	79
  2223  00EF53  4E                 	db	78
  2224  00EF54  00                 	db	0
  2225  00EF55  00                 	db	0
  2226  00EF56  54                 	db	84
  2227  00EF57  65                 	db	101
  2228  00EF58  6D                 	db	109
  2229  00EF59  70                 	db	112
  2230  00EF5A  6F                 	db	111
  2231  00EF5B  00                 	db	0
  2232  00EF5C  00                 	db	0
  2233  00EF5D  00                 	db	0
  2234  00EF5E  00                 	db	0
  2235  00EF5F  00                 	db	0
  2236  00EF60  00                 	db	0
  2237  00EF61  00                 	db	0
  2238  00EF62  00                 	db	0
  2239  00EF63  00                 	db	0
  2240  00EF64  00                 	db	0
  2241  00EF65  00                 	db	0
  2242  00EF66  00                 	db	0
  2243  00EF67  4F                 	db	79
  2244  00EF68  63                 	db	99
  2245  00EF69  74                 	db	116
  2246  00EF6A  61                 	db	97
  2247  00EF6B  76                 	db	118
  2248  00EF6C  65                 	db	101
  2249  00EF6D  20                 	db	32
  2250  00EF6E  52                 	db	82
  2251  00EF6F  61                 	db	97
  2252  00EF70  6E                 	db	110
  2253  00EF71  67                 	db	103
  2254  00EF72  65                 	db	101
  2255  00EF73  00                 	db	0
  2256  00EF74  00                 	db	0
  2257  00EF75  00                 	db	0
  2258  00EF76  00                 	db	0
  2259  00EF77  00                 	db	0
  2260  00EF78  41                 	db	65
  2261  00EF79  72                 	db	114
  2262  00EF7A  70                 	db	112
  2263  00EF7B  65                 	db	101
  2264  00EF7C  67                 	db	103
  2265  00EF7D  67                 	db	103
  2266  00EF7E  69                 	db	105
  2267  00EF7F  6F                 	db	111
  2268  00EF80  20                 	db	32
  2269  00EF81  54                 	db	84
  2270  00EF82  79                 	db	121
  2271  00EF83  70                 	db	112
  2272  00EF84  65                 	db	101
  2273  00EF85  00                 	db	0
  2274  00EF86  00                 	db	0
  2275  00EF87  00                 	db	0
  2276  00EF88  00                 	db	0
  2277  00EF89  4E                 	db	78
  2278  00EF8A  6F                 	db	111
  2279  00EF8B  74                 	db	116
  2280  00EF8C  65                 	db	101
  2281  00EF8D  20                 	db	32
  2282  00EF8E  4C                 	db	76
  2283  00EF8F  65                 	db	101
  2284  00EF90  6E                 	db	110
  2285  00EF91  67                 	db	103
  2286  00EF92  74                 	db	116
  2287  00EF93  68                 	db	104
  2288  00EF94  00                 	db	0
  2289  00EF95  00                 	db	0
  2290  00EF96  00                 	db	0
  2291  00EF97  00                 	db	0
  2292  00EF98  00                 	db	0
  2293  00EF99  00                 	db	0
  2294  00EF9A  4C                 	db	76
  2295  00EF9B  61                 	db	97
  2296  00EF9C  74                 	db	116
  2297  00EF9D  63                 	db	99
  2298  00EF9E  68                 	db	104
  2299  00EF9F  2F                 	db	47
  2300  00EFA0  41                 	db	65
  2301  00EFA1  75                 	db	117
  2302  00EFA2  74                 	db	116
  2303  00EFA3  6F                 	db	111
  2304  00EFA4  20                 	db	32
  2305  00EFA5  4C                 	db	76
  2306  00EFA6  61                 	db	97
  2307  00EFA7  74                 	db	116
  2308  00EFA8  63                 	db	99
  2309  00EFA9  68                 	db	104
  2310  00EFAA  00                 	db	0
  2311  00EFAB  55                 	db	85
  2312  00EFAC  6E                 	db	110
  2313  00EFAD  2D                 	db	45
  2314  00EFAE  6C                 	db	108
  2315  00EFAF  61                 	db	97
  2316  00EFB0  74                 	db	116
  2317  00EFB1  63                 	db	99
  2318  00EFB2  68                 	db	104
  2319  00EFB3  20                 	db	32
  2320  00EFB4  4D                 	db	77
  2321  00EFB5  6F                 	db	111
  2322  00EFB6  64                 	db	100
  2323  00EFB7  65                 	db	101
  2324  00EFB8  00                 	db	0
  2325  00EFB9  00                 	db	0
  2326  00EFBA  00                 	db	0
  2327  00EFBB  00                 	db	0
  2328  00EFBC  52                 	db	82
  2329  00EFBD  61                 	db	97
  2330  00EFBE  6E                 	db	110
  2331  00EFBF  64                 	db	100
  2332  00EFC0  6F                 	db	111
  2333  00EFC1  6D                 	db	109
  2334  00EFC2  69                 	db	105
  2335  00EFC3  7A                 	db	122
  2336  00EFC4  65                 	db	101
  2337  00EFC5  2F                 	db	47
  2338  00EFC6  53                 	db	83
  2339  00EFC7  6B                 	db	107
  2340  00EFC8  69                 	db	105
  2341  00EFC9  70                 	db	112
  2342  00EFCA  00                 	db	0
  2343  00EFCB  00                 	db	0
  2344  00EFCC  00                 	db	0
  2345  00EFCD  4C                 	db	76
  2346  00EFCE  61                 	db	97
  2347  00EFCF  73                 	db	115
  2348  00EFD0  74                 	db	116
  2349  00EFD1  20                 	db	32
  2350  00EFD2  4E                 	db	78
  2351  00EFD3  6F                 	db	111
  2352  00EFD4  74                 	db	116
  2353  00EFD5  65                 	db	101
  2354  00EFD6  20                 	db	32
  2355  00EFD7  4D                 	db	77
  2356  00EFD8  6F                 	db	111
  2357  00EFD9  64                 	db	100
  2358  00EFDA  65                 	db	101
  2359  00EFDB  00                 	db	0
  2360  00EFDC  00                 	db	0
  2361  00EFDD  00                 	db	0
  2362  00EFDE  41                 	db	65
  2363  00EFDF  52                 	db	82
  2364  00EFE0  50                 	db	80
  2365  00EFE1  45                 	db	69
  2366  00EFE2  47                 	db	71
  2367  00EFE3  47                 	db	71
  2368  00EFE4  49                 	db	73
  2369  00EFE5  41                 	db	65
  2370  00EFE6  54                 	db	84
  2371  00EFE7  4F                 	db	79
  2372  00EFE8  52                 	db	82
  2373  00EFE9  20                 	db	32
  2374  00EFEA  4F                 	db	79
  2375  00EFEB  46                 	db	70
  2376  00EFEC  46                 	db	70
  2377  00EFED  00                 	db	0
  2378  00EFEE  00                 	db	0
  2379  00EFEF  41                 	db	65
  2380  00EFF0  52                 	db	82
  2381  00EFF1  50                 	db	80
  2382  00EFF2  45                 	db	69
  2383  00EFF3  47                 	db	71
  2384  00EFF4  47                 	db	71
  2385  00EFF5  49                 	db	73
  2386  00EFF6  41                 	db	65
  2387  00EFF7  54                 	db	84
  2388  00EFF8  4F                 	db	79
  2389  00EFF9  52                 	db	82
  2390  00EFFA  20                 	db	32
  2391  00EFFB  4F                 	db	79
  2392  00EFFC  4E                 	db	78
  2393  00EFFD  00                 	db	0
  2394  00EFFE  00                 	db	0
  2395  00EFFF  00                 	db	0
  2396  00F000  55                 	db	85
  2397  00F001  50                 	db	80
  2398  00F002  00                 	db	0
  2399  00F003  00                 	db	0
  2400  00F004  00                 	db	0
  2401  00F005  00                 	db	0
  2402  00F006  00                 	db	0
  2403  00F007  00                 	db	0
  2404  00F008  00                 	db	0
  2405  00F009  00                 	db	0
  2406  00F00A  00                 	db	0
  2407  00F00B  00                 	db	0
  2408  00F00C  00                 	db	0
  2409  00F00D  00                 	db	0
  2410  00F00E  00                 	db	0
  2411  00F00F  00                 	db	0
  2412  00F010  00                 	db	0
  2413  00F011  44                 	db	68
  2414  00F012  4F                 	db	79
  2415  00F013  57                 	db	87
  2416  00F014  4E                 	db	78
  2417  00F015  00                 	db	0
  2418  00F016  00                 	db	0
  2419  00F017  00                 	db	0
  2420  00F018  00                 	db	0
  2421  00F019  00                 	db	0
  2422  00F01A  00                 	db	0
  2423  00F01B  00                 	db	0
  2424  00F01C  00                 	db	0
  2425  00F01D  00                 	db	0
  2426  00F01E  00                 	db	0
  2427  00F01F  00                 	db	0
  2428  00F020  00                 	db	0
  2429  00F021  00                 	db	0
  2430  00F022  55                 	db	85
  2431  00F023  50                 	db	80
  2432  00F024  2F                 	db	47
  2433  00F025  44                 	db	68
  2434  00F026  4F                 	db	79
  2435  00F027  57                 	db	87
  2436  00F028  4E                 	db	78
  2437  00F029  00                 	db	0
  2438  00F02A  00                 	db	0
  2439  00F02B  00                 	db	0
  2440  00F02C  00                 	db	0
  2441  00F02D  00                 	db	0
  2442  00F02E  00                 	db	0
  2443  00F02F  00                 	db	0
  2444  00F030  00                 	db	0
  2445  00F031  00                 	db	0
  2446  00F032  00                 	db	0
  2447  00F033  44                 	db	68
  2448  00F034  4F                 	db	79
  2449  00F035  57                 	db	87
  2450  00F036  4E                 	db	78
  2451  00F037  2F                 	db	47
  2452  00F038  55                 	db	85
  2453  00F039  50                 	db	80
  2454  00F03A  00                 	db	0
  2455  00F03B  00                 	db	0
  2456  00F03C  00                 	db	0
  2457  00F03D  00                 	db	0
  2458  00F03E  00                 	db	0
  2459  00F03F  00                 	db	0
  2460  00F040  00                 	db	0
  2461  00F041  00                 	db	0
  2462  00F042  00                 	db	0
  2463  00F043  00                 	db	0
  2464  00F044  53                 	db	83
  2465  00F045  48                 	db	72
  2466  00F046  55                 	db	85
  2467  00F047  46                 	db	70
  2468  00F048  46                 	db	70
  2469  00F049  4C                 	db	76
  2470  00F04A  45                 	db	69
  2471  00F04B  00                 	db	0
  2472  00F04C  00                 	db	0
  2473  00F04D  00                 	db	0
  2474  00F04E  00                 	db	0
  2475  00F04F  00                 	db	0
  2476  00F050  00                 	db	0
  2477  00F051  00                 	db	0
  2478  00F052  00                 	db	0
  2479  00F053  00                 	db	0
  2480  00F054  00                 	db	0
  2481  00F055  52                 	db	82
  2482  00F056  41                 	db	65
  2483  00F057  4E                 	db	78
  2484  00F058  44                 	db	68
  2485  00F059  4F                 	db	79
  2486  00F05A  4D                 	db	77
  2487  00F05B  00                 	db	0
  2488  00F05C  00                 	db	0
  2489  00F05D  00                 	db	0
  2490  00F05E  00                 	db	0
  2491  00F05F  00                 	db	0
  2492  00F060  00                 	db	0
  2493  00F061  00                 	db	0
  2494  00F062  00                 	db	0
  2495  00F063  00                 	db	0
  2496  00F064  00                 	db	0
  2497  00F065  00                 	db	0
  2498  00F066  41                 	db	65
  2499  00F067  53                 	db	83
  2500  00F068  20                 	db	32
  2501  00F069  50                 	db	80
  2502  00F06A  52                 	db	82
  2503  00F06B  45                 	db	69
  2504  00F06C  53                 	db	83
  2505  00F06D  53                 	db	83
  2506  00F06E  45                 	db	69
  2507  00F06F  44                 	db	68
  2508  00F070  00                 	db	0
  2509  00F071  00                 	db	0
  2510  00F072  00                 	db	0
  2511  00F073  00                 	db	0
  2512  00F074  00                 	db	0
  2513  00F075  00                 	db	0
  2514  00F076  00                 	db	0
  2515  00F077  31                 	db	49
  2516  00F078  2F                 	db	47
  2517  00F079  34                 	db	52
  2518  00F07A  00                 	db	0
  2519  00F07B  00                 	db	0
  2520  00F07C  00                 	db	0
  2521  00F07D  00                 	db	0
  2522  00F07E  00                 	db	0
  2523  00F07F  00                 	db	0
  2524  00F080  00                 	db	0
  2525  00F081  00                 	db	0
  2526  00F082  00                 	db	0
  2527  00F083  00                 	db	0
  2528  00F084  00                 	db	0
  2529  00F085  00                 	db	0
  2530  00F086  00                 	db	0
  2531  00F087  00                 	db	0
  2532  00F088  31                 	db	49
  2533  00F089  2F                 	db	47
  2534  00F08A  34                 	db	52
  2535  00F08B  20                 	db	32
  2536  00F08C  44                 	db	68
  2537  00F08D  4F                 	db	79
  2538  00F08E  54                 	db	84
  2539  00F08F  54                 	db	84
  2540  00F090  45                 	db	69
  2541  00F091  44                 	db	68
  2542  00F092  00                 	db	0
  2543  00F093  00                 	db	0
  2544  00F094  00                 	db	0
  2545  00F095  00                 	db	0
  2546  00F096  00                 	db	0
  2547  00F097  00                 	db	0
  2548  00F098  00                 	db	0
  2549  00F099  31                 	db	49
  2550  00F09A  2F                 	db	47
  2551  00F09B  34                 	db	52
  2552  00F09C  20                 	db	32
  2553  00F09D  54                 	db	84
  2554  00F09E  52                 	db	82
  2555  00F09F  49                 	db	73
  2556  00F0A0  50                 	db	80
  2557  00F0A1  4C                 	db	76
  2558  00F0A2  45                 	db	69
  2559  00F0A3  54                 	db	84
  2560  00F0A4  00                 	db	0
  2561  00F0A5  00                 	db	0
  2562  00F0A6  00                 	db	0
  2563  00F0A7  00                 	db	0
  2564  00F0A8  00                 	db	0
  2565  00F0A9  00                 	db	0
  2566  00F0AA  31                 	db	49
  2567  00F0AB  2F                 	db	47
  2568  00F0AC  38                 	db	56
  2569  00F0AD  00                 	db	0
  2570  00F0AE  00                 	db	0
  2571  00F0AF  00                 	db	0
  2572  00F0B0  00                 	db	0
  2573  00F0B1  00                 	db	0
  2574  00F0B2  00                 	db	0
  2575  00F0B3  00                 	db	0
  2576  00F0B4  00                 	db	0
  2577  00F0B5  00                 	db	0
  2578  00F0B6  00                 	db	0
  2579  00F0B7  00                 	db	0
  2580  00F0B8  00                 	db	0
  2581  00F0B9  00                 	db	0
  2582  00F0BA  00                 	db	0
  2583  00F0BB  31                 	db	49
  2584  00F0BC  2F                 	db	47
  2585  00F0BD  38                 	db	56
  2586  00F0BE  20                 	db	32
  2587  00F0BF  44                 	db	68
  2588  00F0C0  4F                 	db	79
  2589  00F0C1  54                 	db	84
  2590  00F0C2  54                 	db	84
  2591  00F0C3  45                 	db	69
  2592  00F0C4  44                 	db	68
  2593  00F0C5  00                 	db	0
  2594  00F0C6  00                 	db	0
  2595  00F0C7  00                 	db	0
  2596  00F0C8  00                 	db	0
  2597  00F0C9  00                 	db	0
  2598  00F0CA  00                 	db	0
  2599  00F0CB  00                 	db	0
  2600  00F0CC  31                 	db	49
  2601  00F0CD  2F                 	db	47
  2602  00F0CE  38                 	db	56
  2603  00F0CF  20                 	db	32
  2604  00F0D0  54                 	db	84
  2605  00F0D1  52                 	db	82
  2606  00F0D2  49                 	db	73
  2607  00F0D3  50                 	db	80
  2608  00F0D4  4C                 	db	76
  2609  00F0D5  45                 	db	69
  2610  00F0D6  54                 	db	84
  2611  00F0D7  00                 	db	0
  2612  00F0D8  00                 	db	0
  2613  00F0D9  00                 	db	0
  2614  00F0DA  00                 	db	0
  2615  00F0DB  00                 	db	0
  2616  00F0DC  00                 	db	0
  2617  00F0DD  31                 	db	49
  2618  00F0DE  2F                 	db	47
  2619  00F0DF  31                 	db	49
  2620  00F0E0  36                 	db	54
  2621  00F0E1  00                 	db	0
  2622  00F0E2  00                 	db	0
  2623  00F0E3  00                 	db	0
  2624  00F0E4  00                 	db	0
  2625  00F0E5  00                 	db	0
  2626  00F0E6  00                 	db	0
  2627  00F0E7  00                 	db	0
  2628  00F0E8  00                 	db	0
  2629  00F0E9  00                 	db	0
  2630  00F0EA  00                 	db	0
  2631  00F0EB  00                 	db	0
  2632  00F0EC  00                 	db	0
  2633  00F0ED  00                 	db	0
  2634  00F0EE  31                 	db	49
  2635  00F0EF  2F                 	db	47
  2636  00F0F0  31                 	db	49
  2637  00F0F1  36                 	db	54
  2638  00F0F2  20                 	db	32
  2639  00F0F3  44                 	db	68
  2640  00F0F4  4F                 	db	79
  2641  00F0F5  54                 	db	84
  2642  00F0F6  54                 	db	84
  2643  00F0F7  45                 	db	69
  2644  00F0F8  44                 	db	68
  2645  00F0F9  00                 	db	0
  2646  00F0FA  00                 	db	0
  2647  00F0FB  00                 	db	0
  2648  00F0FC  00                 	db	0
  2649  00F0FD  00                 	db	0
  2650  00F0FE  00                 	db	0
  2651  00F0FF  31                 	db	49
  2652  00F100  2F                 	db	47
  2653  00F101  31                 	db	49
  2654  00F102  36                 	db	54
  2655  00F103  20                 	db	32
  2656  00F104  54                 	db	84
  2657  00F105  52                 	db	82
  2658  00F106  49                 	db	73
  2659  00F107  50                 	db	80
  2660  00F108  4C                 	db	76
  2661  00F109  45                 	db	69
  2662  00F10A  54                 	db	84
  2663  00F10B  00                 	db	0
  2664  00F10C  00                 	db	0
  2665  00F10D  00                 	db	0
  2666  00F10E  00                 	db	0
  2667  00F10F  00                 	db	0
  2668  00F110  31                 	db	49
  2669  00F111  2F                 	db	47
  2670  00F112  33                 	db	51
  2671  00F113  32                 	db	50
  2672  00F114  00                 	db	0
  2673  00F115  00                 	db	0
  2674  00F116  00                 	db	0
  2675  00F117  00                 	db	0
  2676  00F118  00                 	db	0
  2677  00F119  00                 	db	0
  2678  00F11A  00                 	db	0
  2679  00F11B  00                 	db	0
  2680  00F11C  00                 	db	0
  2681  00F11D  00                 	db	0
  2682  00F11E  00                 	db	0
  2683  00F11F  00                 	db	0
  2684  00F120  00                 	db	0
  2685  00F121  31                 	db	49
  2686  00F122  2F                 	db	47
  2687  00F123  33                 	db	51
  2688  00F124  32                 	db	50
  2689  00F125  20                 	db	32
  2690  00F126  44                 	db	68
  2691  00F127  4F                 	db	79
  2692  00F128  54                 	db	84
  2693  00F129  54                 	db	84
  2694  00F12A  45                 	db	69
  2695  00F12B  44                 	db	68
  2696  00F12C  00                 	db	0
  2697  00F12D  00                 	db	0
  2698  00F12E  00                 	db	0
  2699  00F12F  00                 	db	0
  2700  00F130  00                 	db	0
  2701  00F131  00                 	db	0
  2702  00F132  31                 	db	49
  2703  00F133  2F                 	db	47
  2704  00F134  33                 	db	51
  2705  00F135  32                 	db	50
  2706  00F136  20                 	db	32
  2707  00F137  54                 	db	84
  2708  00F138  52                 	db	82
  2709  00F139  49                 	db	73
  2710  00F13A  50                 	db	80
  2711  00F13B  4C                 	db	76
  2712  00F13C  45                 	db	69
  2713  00F13D  54                 	db	84
  2714  00F13E  00                 	db	0
  2715  00F13F  00                 	db	0
  2716  00F140  00                 	db	0
  2717  00F141  00                 	db	0
  2718  00F142  00                 	db	0
  2719  00F143  53                 	db	83
  2720  00F144  45                 	db	69
  2721  00F145  54                 	db	84
  2722  00F146  2F                 	db	47
  2723  00F147  43                 	db	67
  2724  00F148  4C                 	db	76
  2725  00F149  45                 	db	69
  2726  00F14A  41                 	db	65
  2727  00F14B  52                 	db	82
  2728  00F14C  20                 	db	32
  2729  00F14D  4C                 	db	76
  2730  00F14E  41                 	db	65
  2731  00F14F  54                 	db	84
  2732  00F150  43                 	db	67
  2733  00F151  48                 	db	72
  2734  00F152  00                 	db	0
  2735  00F153  00                 	db	0
  2736  00F154  41                 	db	65
  2737  00F155  55                 	db	85
  2738  00F156  54                 	db	84
  2739  00F157  4F                 	db	79
  2740  00F158  20                 	db	32
  2741  00F159  4C                 	db	76
  2742  00F15A  41                 	db	65
  2743  00F15B  54                 	db	84
  2744  00F15C  43                 	db	67
  2745  00F15D  48                 	db	72
  2746  00F15E  00                 	db	0
  2747  00F15F  00                 	db	0
  2748  00F160  00                 	db	0
  2749  00F161  00                 	db	0
  2750  00F162  00                 	db	0
  2751  00F163  00                 	db	0
  2752  00F164  00                 	db	0
  2753  00F165  55                 	db	85
  2754  00F166  6E                 	db	110
  2755  00F167  2D                 	db	45
  2756  00F168  4C                 	db	76
  2757  00F169  61                 	db	97
  2758  00F16A  74                 	db	116
  2759  00F16B  63                 	db	99
  2760  00F16C  68                 	db	104
  2761  00F16D  20                 	db	32
  2762  00F16E  4D                 	db	77
  2763  00F16F  6F                 	db	111
  2764  00F170  64                 	db	100
  2765  00F171  65                 	db	101
  2766  00F172  00                 	db	0
  2767  00F173  00                 	db	0
  2768  00F174  00                 	db	0
  2769  00F175  00                 	db	0
  2770  00F176  55                 	db	85
  2771  00F177  4E                 	db	78
  2772  00F178  4C                 	db	76
  2773  00F179  41                 	db	65
  2774  00F17A  54                 	db	84
  2775  00F17B  43                 	db	67
  2776  00F17C  48                 	db	72
  2777  00F17D  20                 	db	32
  2778  00F17E  41                 	db	65
  2779  00F17F  4C                 	db	76
  2780  00F180  4C                 	db	76
  2781  00F181  00                 	db	0
  2782  00F182  00                 	db	0
  2783  00F183  00                 	db	0
  2784  00F184  00                 	db	0
  2785  00F185  00                 	db	0
  2786  00F186  00                 	db	0
  2787  00F187  4F                 	db	79
  2788  00F188  4E                 	db	78
  2789  00F189  45                 	db	69
  2790  00F18A  20                 	db	32
  2791  00F18B  41                 	db	65
  2792  00F18C  54                 	db	84
  2793  00F18D  20                 	db	32
  2794  00F18E  41                 	db	65
  2795  00F18F  20                 	db	32
  2796  00F190  54                 	db	84
  2797  00F191  49                 	db	73
  2798  00F192  4D                 	db	77
  2799  00F193  45                 	db	69
  2800  00F194  00                 	db	0
  2801  00F195  00                 	db	0
  2802  00F196  00                 	db	0
  2803  00F197  00                 	db	0
  2804  00F198  52                 	db	82
  2805  00F199  61                 	db	97
  2806  00F19A  6E                 	db	110
  2807  00F19B  64                 	db	100
  2808  00F19C  6F                 	db	111
  2809  00F19D  6D                 	db	109
  2810  00F19E  69                 	db	105
  2811  00F19F  7A                 	db	122
  2812  00F1A0  65                 	db	101
  2813  00F1A1  00                 	db	0
  2814  00F1A2  00                 	db	0
  2815  00F1A3  00                 	db	0
  2816  00F1A4  00                 	db	0
  2817  00F1A5  00                 	db	0
  2818  00F1A6  00                 	db	0
  2819  00F1A7  00                 	db	0
  2820  00F1A8  00                 	db	0
  2821  00F1A9  53                 	db	83
  2822  00F1AA  6B                 	db	107
  2823  00F1AB  69                 	db	105
  2824  00F1AC  70                 	db	112
  2825  00F1AD  20                 	db	32
  2826  00F1AE  46                 	db	70
  2827  00F1AF  69                 	db	105
  2828  00F1B0  72                 	db	114
  2829  00F1B1  73                 	db	115
  2830  00F1B2  74                 	db	116
  2831  00F1B3  2F                 	db	47
  2832  00F1B4  4C                 	db	76
  2833  00F1B5  61                 	db	97
  2834  00F1B6  73                 	db	115
  2835  00F1B7  74                 	db	116
  2836  00F1B8  00                 	db	0
  2837  00F1B9  00                 	db	0
  2838  00F1BA  52                 	db	82
  2839  00F1BB  41                 	db	65
  2840  00F1BC  4E                 	db	78
  2841  00F1BD  44                 	db	68
  2842  00F1BE  4F                 	db	79
  2843  00F1BF  4D                 	db	77
  2844  00F1C0  49                 	db	73
  2845  00F1C1  5A                 	db	90
  2846  00F1C2  45                 	db	69
  2847  00F1C3  20                 	db	32
  2848  00F1C4  41                 	db	65
  2849  00F1C5  55                 	db	85
  2850  00F1C6  54                 	db	84
  2851  00F1C7  4F                 	db	79
  2852  00F1C8  00                 	db	0
  2853  00F1C9  00                 	db	0
  2854  00F1CA  00                 	db	0
  2855  00F1CB  52                 	db	82
  2856  00F1CC  41                 	db	65
  2857  00F1CD  4E                 	db	78
  2858  00F1CE  44                 	db	68
  2859  00F1CF  4F                 	db	79
  2860  00F1D0  4D                 	db	77
  2861  00F1D1  49                 	db	73
  2862  00F1D2  5A                 	db	90
  2863  00F1D3  45                 	db	69
  2864  00F1D4  20                 	db	32
  2865  00F1D5  4F                 	db	79
  2866  00F1D6  4E                 	db	78
  2867  00F1D7  43                 	db	67
  2868  00F1D8  45                 	db	69
  2869  00F1D9  00                 	db	0
  2870  00F1DA  00                 	db	0
  2871  00F1DB  00                 	db	0
  2872  00F1DC  4B                 	db	75
  2873  00F1DD  65                 	db	101
  2874  00F1DE  79                 	db	121
  2875  00F1DF  20                 	db	32
  2876  00F1E0  70                 	db	112
  2877  00F1E1  72                 	db	114
  2878  00F1E2  65                 	db	101
  2879  00F1E3  73                 	db	115
  2880  00F1E4  73                 	db	115
  2881  00F1E5  00                 	db	0
  2882  00F1E6  00                 	db	0
  2883  00F1E7  00                 	db	0
  2884  00F1E8  00                 	db	0
  2885  00F1E9  00                 	db	0
  2886  00F1EA  00                 	db	0
  2887  00F1EB  00                 	db	0
  2888  00F1EC  00                 	db	0
  2889  00F1ED  4B                 	db	75
  2890  00F1EE  65                 	db	101
  2891  00F1EF  79                 	db	121
  2892  00F1F0  20                 	db	32
  2893  00F1F1  72                 	db	114
  2894  00F1F2  65                 	db	101
  2895  00F1F3  6C                 	db	108
  2896  00F1F4  65                 	db	101
  2897  00F1F5  61                 	db	97
  2898  00F1F6  73                 	db	115
  2899  00F1F7  65                 	db	101
  2900  00F1F8  00                 	db	0
  2901  00F1F9  00                 	db	0
  2902  00F1FA  00                 	db	0
  2903  00F1FB  00                 	db	0
  2904  00F1FC  00                 	db	0
  2905  00F1FD  00                 	db	0
  2906  00F1FE  54                 	db	84
  2907  00F1FF  72                 	db	114
  2908  00F200  61                 	db	97
  2909  00F201  6E                 	db	110
  2910  00F202  73                 	db	115
  2911  00F203  70                 	db	112
  2912  00F204  6F                 	db	111
  2913  00F205  73                 	db	115
  2914  00F206  65                 	db	101
  2915  00F207  00                 	db	0
  2916  00F208  00                 	db	0
  2917  00F209  00                 	db	0
  2918  00F20A  00                 	db	0
  2919  00F20B  00                 	db	0
  2920  00F20C  00                 	db	0
  2921  00F20D  00                 	db	0
  2922  00F20E  00                 	db	0
  2923  00F20F  52                 	db	82
  2924  00F210  65                 	db	101
  2925  00F211  73                 	db	115
  2926  00F212  65                 	db	101
  2927  00F213  74                 	db	116
  2928  00F214  00                 	db	0
  2929  00F215  00                 	db	0
  2930  00F216  00                 	db	0
  2931  00F217  00                 	db	0
  2932  00F218  00                 	db	0
  2933  00F219  00                 	db	0
  2934  00F21A  00                 	db	0
  2935  00F21B  00                 	db	0
  2936  00F21C  00                 	db	0
  2937  00F21D  00                 	db	0
  2938  00F21E  00                 	db	0
  2939  00F21F  00                 	db	0
  2940  00F220                     __end_ofascii@LCD_STRINGS:
  2941                           	opt stack 0
  2942  00F220                     _seg_ascii:
  2943                           	opt stack 0
  2944  00F220  3F                 	db	63
  2945  00F221  06                 	db	6
  2946  00F222  5B                 	db	91
  2947  00F223  4F                 	db	79
  2948  00F224  66                 	db	102
  2949  00F225  6D                 	db	109
  2950  00F226  7D                 	db	125
  2951  00F227  07                 	db	7
  2952  00F228  7F                 	db	127
  2953  00F229  6F                 	db	111
  2954  00F22A  00                 	db	0
  2955  00F22B  00                 	db	0
  2956  00F22C  00                 	db	0
  2957  00F22D  00                 	db	0
  2958  00F22E  00                 	db	0
  2959  00F22F  00                 	db	0
  2960  00F230  00                 	db	0
  2961  00F231  77                 	db	119
  2962  00F232  00                 	db	0
  2963  00F233  39                 	db	57
  2964  00F234  00                 	db	0
  2965  00F235  79                 	db	121
  2966  00F236  71                 	db	113
  2967  00F237  3D                 	db	61
  2968  00F238  76                 	db	118
  2969  00F239  30                 	db	48
  2970  00F23A  1E                 	db	30
  2971  00F23B  00                 	db	0
  2972  00F23C  38                 	db	56
  2973  00F23D  00                 	db	0
  2974  00F23E  00                 	db	0
  2975  00F23F  3F                 	db	63
  2976  00F240  73                 	db	115
  2977  00F241  00                 	db	0
  2978  00F242  00                 	db	0
  2979  00F243  6D                 	db	109
  2980  00F244  00                 	db	0
  2981  00F245  3E                 	db	62
  2982  00F246  00                 	db	0
  2983  00F247  00                 	db	0
  2984  00F248  00                 	db	0
  2985  00F249  00                 	db	0
  2986  00F24A  00                 	db	0
  2987  00F24B  00                 	db	0
  2988  00F24C  00                 	db	0
  2989  00F24D  00                 	db	0
  2990  00F24E  00                 	db	0
  2991  00F24F  00                 	db	0
  2992  00F250  00                 	db	0
  2993  00F251  5F                 	db	95
  2994  00F252  7C                 	db	124
  2995  00F253  58                 	db	88
  2996  00F254  5E                 	db	94
  2997  00F255  00                 	db	0
  2998  00F256  00                 	db	0
  2999  00F257  00                 	db	0
  3000  00F258  74                 	db	116
  3001  00F259  00                 	db	0
  3002  00F25A  00                 	db	0
  3003  00F25B  00                 	db	0
  3004  00F25C  00                 	db	0
  3005  00F25D  00                 	db	0
  3006  00F25E  54                 	db	84
  3007  00F25F  5C                 	db	92
  3008  00F260  00                 	db	0
  3009  00F261  67                 	db	103
  3010  00F262  50                 	db	80
  3011  00F263  00                 	db	0
  3012  00F264  78                 	db	120
  3013  00F265  1C                 	db	28
  3014  00F266  00                 	db	0
  3015  00F267  00                 	db	0
  3016  00F268  00                 	db	0
  3017  00F269  6E                 	db	110
  3018  00F26A  00                 	db	0
  3019  00F26B                     __end_of_seg_ascii:
  3020                           	opt stack 0
  3021  00F26B                     _diatonic_seventh_minor:
  3022                           	opt stack 0
  3023  00F26B  00                 	db	0
  3024  00F26C  03                 	db	3
  3025  00F26D  07                 	db	7
  3026  00F26E  0A                 	db	10
  3027  00F26F  02                 	db	2
  3028  00F270  03                 	db	3
  3029  00F271  06                 	db	6
  3030  00F272  0A                 	db	10
  3031  00F273  03                 	db	3
  3032  00F274  04                 	db	4
  3033  00F275  07                 	db	7
  3034  00F276  0B                 	db	11
  3035  00F277  05                 	db	5
  3036  00F278  03                 	db	3
  3037  00F279  07                 	db	7
  3038  00F27A  0A                 	db	10
  3039  00F27B  07                 	db	7
  3040  00F27C  03                 	db	3
  3041  00F27D  07                 	db	7
  3042  00F27E  0A                 	db	10
  3043  00F27F  08                 	db	8
  3044  00F280  04                 	db	4
  3045  00F281  07                 	db	7
  3046  00F282  0B                 	db	11
  3047  00F283  0A                 	db	10
  3048  00F284  04                 	db	4
  3049  00F285  07                 	db	7
  3050  00F286  0A                 	db	10
  3051  00F287  0C                 	db	12
  3052  00F288  03                 	db	3
  3053  00F289  07                 	db	7
  3054  00F28A  0A                 	db	10
  3055  00F28B  0E                 	db	14
  3056  00F28C  03                 	db	3
  3057  00F28D  06                 	db	6
  3058  00F28E  0A                 	db	10
  3059  00F28F  0F                 	db	15
  3060  00F290  04                 	db	4
  3061  00F291  07                 	db	7
  3062  00F292  0B                 	db	11
  3063  00F293  11                 	db	17
  3064  00F294  03                 	db	3
  3065  00F295  07                 	db	7
  3066  00F296  0A                 	db	10
  3067  00F297  13                 	db	19
  3068  00F298  03                 	db	3
  3069  00F299  07                 	db	7
  3070  00F29A  0A                 	db	10
  3071  00F29B  14                 	db	20
  3072  00F29C  04                 	db	4
  3073  00F29D  07                 	db	7
  3074  00F29E  0B                 	db	11
  3075  00F29F  16                 	db	22
  3076  00F2A0  04                 	db	4
  3077  00F2A1  07                 	db	7
  3078  00F2A2  0A                 	db	10
  3079  00F2A3  18                 	db	24
  3080  00F2A4  03                 	db	3
  3081  00F2A5  07                 	db	7
  3082  00F2A6  0A                 	db	10
  3083  00F2A7                     __end_of_diatonic_seventh_minor:
  3084                           	opt stack 0
  3085  00F2A7                     _diatonic_seventh_major:
  3086                           	opt stack 0
  3087  00F2A7  00                 	db	0
  3088  00F2A8  04                 	db	4
  3089  00F2A9  07                 	db	7
  3090  00F2AA  0B                 	db	11
  3091  00F2AB  00                 	db	0
  3092  00F2AC  03                 	db	3
  3093  00F2AD  07                 	db	7
  3094  00F2AE  0A                 	db	10
  3095  00F2AF  00                 	db	0
  3096  00F2B0  03                 	db	3
  3097  00F2B1  07                 	db	7
  3098  00F2B2  0A                 	db	10
  3099  00F2B3  00                 	db	0
  3100  00F2B4  04                 	db	4
  3101  00F2B5  07                 	db	7
  3102  00F2B6  0B                 	db	11
  3103  00F2B7  00                 	db	0
  3104  00F2B8  04                 	db	4
  3105  00F2B9  07                 	db	7
  3106  00F2BA  0A                 	db	10
  3107  00F2BB  00                 	db	0
  3108  00F2BC  03                 	db	3
  3109  00F2BD  07                 	db	7
  3110  00F2BE  0A                 	db	10
  3111  00F2BF  00                 	db	0
  3112  00F2C0  03                 	db	3
  3113  00F2C1  06                 	db	6
  3114  00F2C2  0A                 	db	10
  3115  00F2C3  00                 	db	0
  3116  00F2C4  04                 	db	4
  3117  00F2C5  07                 	db	7
  3118  00F2C6  0B                 	db	11
  3119  00F2C7  00                 	db	0
  3120  00F2C8  03                 	db	3
  3121  00F2C9  07                 	db	7
  3122  00F2CA  0A                 	db	10
  3123  00F2CB  00                 	db	0
  3124  00F2CC  03                 	db	3
  3125  00F2CD  07                 	db	7
  3126  00F2CE  0A                 	db	10
  3127  00F2CF  00                 	db	0
  3128  00F2D0  04                 	db	4
  3129  00F2D1  07                 	db	7
  3130  00F2D2  0B                 	db	11
  3131  00F2D3  00                 	db	0
  3132  00F2D4  04                 	db	4
  3133  00F2D5  07                 	db	7
  3134  00F2D6  0A                 	db	10
  3135  00F2D7  00                 	db	0
  3136  00F2D8  03                 	db	3
  3137  00F2D9  07                 	db	7
  3138  00F2DA  0A                 	db	10
  3139  00F2DB  00                 	db	0
  3140  00F2DC  03                 	db	3
  3141  00F2DD  06                 	db	6
  3142  00F2DE  0A                 	db	10
  3143  00F2DF  00                 	db	0
  3144  00F2E0  04                 	db	4
  3145  00F2E1  07                 	db	7
  3146  00F2E2  0B                 	db	11
  3147  00F2E3                     __end_of_diatonic_seventh_major:
  3148                           	opt stack 0
  3149  00F2E3                     _diatonic_minor:
  3150                           	opt stack 0
  3151  00F2E3  00                 	db	0
  3152  00F2E4  03                 	db	3
  3153  00F2E5  07                 	db	7
  3154  00F2E6  02                 	db	2
  3155  00F2E7  03                 	db	3
  3156  00F2E8  06                 	db	6
  3157  00F2E9  03                 	db	3
  3158  00F2EA  04                 	db	4
  3159  00F2EB  07                 	db	7
  3160  00F2EC  05                 	db	5
  3161  00F2ED  03                 	db	3
  3162  00F2EE  07                 	db	7
  3163  00F2EF  07                 	db	7
  3164  00F2F0  03                 	db	3
  3165  00F2F1  07                 	db	7
  3166  00F2F2  08                 	db	8
  3167  00F2F3  04                 	db	4
  3168  00F2F4  07                 	db	7
  3169  00F2F5  0A                 	db	10
  3170  00F2F6  04                 	db	4
  3171  00F2F7  07                 	db	7
  3172  00F2F8  0C                 	db	12
  3173  00F2F9  03                 	db	3
  3174  00F2FA  07                 	db	7
  3175  00F2FB  0E                 	db	14
  3176  00F2FC  03                 	db	3
  3177  00F2FD  06                 	db	6
  3178  00F2FE  0F                 	db	15
  3179  00F2FF  04                 	db	4
  3180  00F300  07                 	db	7
  3181  00F301  11                 	db	17
  3182  00F302  03                 	db	3
  3183  00F303  07                 	db	7
  3184  00F304  13                 	db	19
  3185  00F305  03                 	db	3
  3186  00F306  07                 	db	7
  3187  00F307  14                 	db	20
  3188  00F308  04                 	db	4
  3189  00F309  07                 	db	7
  3190  00F30A  16                 	db	22
  3191  00F30B  04                 	db	4
  3192  00F30C  07                 	db	7
  3193  00F30D  18                 	db	24
  3194  00F30E  03                 	db	3
  3195  00F30F  07                 	db	7
  3196  00F310                     __end_of_diatonic_minor:
  3197                           	opt stack 0
  3198  00F310                     _diatonic_major:
  3199                           	opt stack 0
  3200  00F310  00                 	db	0
  3201  00F311  04                 	db	4
  3202  00F312  07                 	db	7
  3203  00F313  00                 	db	0
  3204  00F314  03                 	db	3
  3205  00F315  07                 	db	7
  3206  00F316  00                 	db	0
  3207  00F317  03                 	db	3
  3208  00F318  07                 	db	7
  3209  00F319  00                 	db	0
  3210  00F31A  04                 	db	4
  3211  00F31B  07                 	db	7
  3212  00F31C  00                 	db	0
  3213  00F31D  04                 	db	4
  3214  00F31E  07                 	db	7
  3215  00F31F  00                 	db	0
  3216  00F320  03                 	db	3
  3217  00F321  07                 	db	7
  3218  00F322  00                 	db	0
  3219  00F323  03                 	db	3
  3220  00F324  06                 	db	6
  3221  00F325  00                 	db	0
  3222  00F326  04                 	db	4
  3223  00F327  07                 	db	7
  3224  00F328  00                 	db	0
  3225  00F329  03                 	db	3
  3226  00F32A  07                 	db	7
  3227  00F32B  00                 	db	0
  3228  00F32C  03                 	db	3
  3229  00F32D  07                 	db	7
  3230  00F32E  00                 	db	0
  3231  00F32F  04                 	db	4
  3232  00F330  07                 	db	7
  3233  00F331  00                 	db	0
  3234  00F332  04                 	db	4
  3235  00F333  07                 	db	7
  3236  00F334  00                 	db	0
  3237  00F335  03                 	db	3
  3238  00F336  07                 	db	7
  3239  00F337  00                 	db	0
  3240  00F338  03                 	db	3
  3241  00F339  06                 	db	6
  3242  00F33A  00                 	db	0
  3243  00F33B  04                 	db	4
  3244  00F33C  07                 	db	7
  3245  00F33D                     __end_of_diatonic_major:
  3246                           	opt stack 0
  3247  00F33D                     _ttable:
  3248                           	opt stack 0
  3249  00F33D  00                 	db	0
  3250  00F33E  02                 	db	2
  3251  00F33F  04                 	db	4
  3252  00F340  00                 	db	0
  3253  00F341  03                 	db	3
  3254  00F342  00                 	db	0
  3255  00F343  01                 	db	1
  3256  00F344  10                 	db	16
  3257  00F345  03                 	db	3
  3258  00F346  02                 	db	2
  3259  00F347  00                 	db	0
  3260  00F348  00                 	db	0
  3261  00F349  03                 	db	3
  3262  00F34A  02                 	db	2
  3263  00F34B  01                 	db	1
  3264  00F34C  00                 	db	0
  3265  00F34D  06                 	db	6
  3266  00F34E  00                 	db	0
  3267  00F34F  04                 	db	4
  3268  00F350  00                 	db	0
  3269  00F351  06                 	db	6
  3270  00F352  05                 	db	5
  3271  00F353  00                 	db	0
  3272  00F354  20                 	db	32
  3273  00F355  06                 	db	6
  3274  00F356  05                 	db	5
  3275  00F357  04                 	db	4
  3276  00F358  00                 	db	0
  3277  00F359                     __end_of_ttable:
  3278                           	opt stack 0
  3279  00F359                     _seg_bcd_hex:
  3280                           	opt stack 0
  3281  00F359  3F                 	db	63
  3282  00F35A  06                 	db	6
  3283  00F35B  5B                 	db	91
  3284  00F35C  4F                 	db	79
  3285  00F35D  66                 	db	102
  3286  00F35E  6D                 	db	109
  3287  00F35F  7D                 	db	125
  3288  00F360  07                 	db	7
  3289  00F361  7F                 	db	127
  3290  00F362  6F                 	db	111
  3291  00F363  77                 	db	119
  3292  00F364  7C                 	db	124
  3293  00F365  39                 	db	57
  3294  00F366  5E                 	db	94
  3295  00F367  79                 	db	121
  3296  00F368  71                 	db	113
  3297  00F369                     __end_of_seg_bcd_hex:
  3298                           	opt stack 0
  3299  00F369                     _minor_key:
  3300                           	opt stack 0
  3301  00F369  00                 	db	0
  3302  00F36A  02                 	db	2
  3303  00F36B  03                 	db	3
  3304  00F36C  05                 	db	5
  3305  00F36D  07                 	db	7
  3306  00F36E  08                 	db	8
  3307  00F36F  0A                 	db	10
  3308  00F370  0C                 	db	12
  3309  00F371  0E                 	db	14
  3310  00F372  0F                 	db	15
  3311  00F373  11                 	db	17
  3312  00F374  13                 	db	19
  3313  00F375  14                 	db	20
  3314  00F376  16                 	db	22
  3315  00F377  18                 	db	24
  3316  00F378                     __end_of_minor_key:
  3317                           	opt stack 0
  3318  00F378                     _major_key:
  3319                           	opt stack 0
  3320  00F378  00                 	db	0
  3321  00F379  02                 	db	2
  3322  00F37A  04                 	db	4
  3323  00F37B  05                 	db	5
  3324  00F37C  07                 	db	7
  3325  00F37D  09                 	db	9
  3326  00F37E  0B                 	db	11
  3327  00F37F  0C                 	db	12
  3328  00F380  0E                 	db	14
  3329  00F381  10                 	db	16
  3330  00F382  11                 	db	17
  3331  00F383  13                 	db	19
  3332  00F384  15                 	db	21
  3333  00F385  17                 	db	23
  3334  00F386  18                 	db	24
  3335  00F387                     __end_of_major_key:
  3336                           	opt stack 0
  3337  00F387                     _pentatonic_minor_key:
  3338                           	opt stack 0
  3339  00F387  00                 	db	0
  3340  00F388  03                 	db	3
  3341  00F389  05                 	db	5
  3342  00F38A  07                 	db	7
  3343  00F38B  0A                 	db	10
  3344  00F38C  0C                 	db	12
  3345  00F38D  0F                 	db	15
  3346  00F38E  11                 	db	17
  3347  00F38F  13                 	db	19
  3348  00F390  16                 	db	22
  3349  00F391  18                 	db	24
  3350  00F392                     __end_of_pentatonic_minor_key:
  3351                           	opt stack 0
  3352  00F392                     _pentatonic_major_key:
  3353                           	opt stack 0
  3354  00F392  00                 	db	0
  3355  00F393  02                 	db	2
  3356  00F394  04                 	db	4
  3357  00F395  07                 	db	7
  3358  00F396  09                 	db	9
  3359  00F397  0C                 	db	12
  3360  00F398  0E                 	db	14
  3361  00F399  10                 	db	16
  3362  00F39A  13                 	db	19
  3363  00F39B  15                 	db	21
  3364  00F39C  18                 	db	24
  3365  00F39D                     __end_of_pentatonic_major_key:
  3366                           	opt stack 0
  3367  00F39D                     _MAX_NUM_NOTES:
  3368                           	opt stack 0
  3369  00F39D  10                 	db	16
  3370  00F39E                     __end_of_MAX_NUM_NOTES:
  3371                           	opt stack 0
  3372  00F39E                     _LCD_STRINGS:
  3373                           	opt stack 0
  3374  00F39E  4B                 	db	75
  3375  00F39F  45                 	db	69
  3376  00F3A0  59                 	db	89
  3377  00F3A1  42                 	db	66
  3378  00F3A2  4F                 	db	79
  3379  00F3A3  41                 	db	65
  3380  00F3A4  52                 	db	82
  3381  00F3A5  44                 	db	68
  3382  00F3A6  20                 	db	32
  3383  00F3A7  4D                 	db	77
  3384  00F3A8  4F                 	db	79
  3385  00F3A9  44                 	db	68
  3386  00F3AA  45                 	db	69
  3387  00F3AB  3A                 	db	58
  3388  00F3AC  00                 	db	0
  3389  00F3AD  00                 	db	0
  3390  00F3AE  00                 	db	0
  3391  00F3AF  41                 	db	65
  3392  00F3B0  52                 	db	82
  3393  00F3B1  50                 	db	80
  3394  00F3B2  45                 	db	69
  3395  00F3B3  47                 	db	71
  3396  00F3B4  47                 	db	71
  3397  00F3B5  49                 	db	73
  3398  00F3B6  4F                 	db	79
  3399  00F3B7  20                 	db	32
  3400  00F3B8  4D                 	db	77
  3401  00F3B9  45                 	db	69
  3402  00F3BA  4E                 	db	78
  3403  00F3BB  55                 	db	85
  3404  00F3BC  3A                 	db	58
  3405  00F3BD  00                 	db	0
  3406  00F3BE  00                 	db	0
  3407  00F3BF  00                 	db	0
  3408  00F3C0  54                 	db	84
  3409  00F3C1  52                 	db	82
  3410  00F3C2  41                 	db	65
  3411  00F3C3  4E                 	db	78
  3412  00F3C4  53                 	db	83
  3413  00F3C5  50                 	db	80
  3414  00F3C6  4F                 	db	79
  3415  00F3C7  53                 	db	83
  3416  00F3C8  45                 	db	69
  3417  00F3C9  20                 	db	32
  3418  00F3CA  4D                 	db	77
  3419  00F3CB  4F                 	db	79
  3420  00F3CC  44                 	db	68
  3421  00F3CD  45                 	db	69
  3422  00F3CE  3A                 	db	58
  3423  00F3CF  00                 	db	0
  3424  00F3D0  00                 	db	0
  3425  00F3D1  44                 	db	68
  3426  00F3D2  52                 	db	82
  3427  00F3D3  55                 	db	85
  3428  00F3D4  4D                 	db	77
  3429  00F3D5  20                 	db	32
  3430  00F3D6  4D                 	db	77
  3431  00F3D7  4F                 	db	79
  3432  00F3D8  44                 	db	68
  3433  00F3D9  45                 	db	69
  3434  00F3DA  3A                 	db	58
  3435  00F3DB  00                 	db	0
  3436  00F3DC  00                 	db	0
  3437  00F3DD  00                 	db	0
  3438  00F3DE  00                 	db	0
  3439  00F3DF  00                 	db	0
  3440  00F3E0  00                 	db	0
  3441  00F3E1  00                 	db	0
  3442  00F3E2  50                 	db	80
  3443  00F3E3  4F                 	db	79
  3444  00F3E4  54                 	db	84
  3445  00F3E5  53                 	db	83
  3446  00F3E6  20                 	db	32
  3447  00F3E7  4D                 	db	77
  3448  00F3E8  4F                 	db	79
  3449  00F3E9  44                 	db	68
  3450  00F3EA  45                 	db	69
  3451  00F3EB  3A                 	db	58
  3452  00F3EC  00                 	db	0
  3453  00F3ED  00                 	db	0
  3454  00F3EE  00                 	db	0
  3455  00F3EF  00                 	db	0
  3456  00F3F0  00                 	db	0
  3457  00F3F1  00                 	db	0
  3458  00F3F2  00                 	db	0
  3459  00F3F3  4D                 	db	77
  3460  00F3F4  49                 	db	73
  3461  00F3F5  44                 	db	68
  3462  00F3F6  49                 	db	73
  3463  00F3F7  20                 	db	32
  3464  00F3F8  43                 	db	67
  3465  00F3F9  48                 	db	72
  3466  00F3FA  41                 	db	65
  3467  00F3FB  4E                 	db	78
  3468  00F3FC  4E                 	db	78
  3469  00F3FD  45                 	db	69
  3470  00F3FE  4C                 	db	76
  3471  00F3FF  53                 	db	83
  3472  00F400  3A                 	db	58
  3473  00F401  00                 	db	0
  3474  00F402  00                 	db	0
  3475  00F403  00                 	db	0
  3476  00F404  50                 	db	80
  3477  00F405  52                 	db	82
  3478  00F406  4F                 	db	79
  3479  00F407  47                 	db	71
  3480  00F408  52                 	db	82
  3481  00F409  41                 	db	65
  3482  00F40A  4D                 	db	77
  3483  00F40B  20                 	db	32
  3484  00F40C  43                 	db	67
  3485  00F40D  48                 	db	72
  3486  00F40E  41                 	db	65
  3487  00F40F  4E                 	db	78
  3488  00F410  47                 	db	71
  3489  00F411  45                 	db	69
  3490  00F412  3A                 	db	58
  3491  00F413  00                 	db	0
  3492  00F414  00                 	db	0
  3493  00F415  45                 	db	69
  3494  00F416  45                 	db	69
  3495  00F417  50                 	db	80
  3496  00F418  52                 	db	82
  3497  00F419  4F                 	db	79
  3498  00F41A  4D                 	db	77
  3499  00F41B  20                 	db	32
  3500  00F41C  4D                 	db	77
  3501  00F41D  45                 	db	69
  3502  00F41E  4E                 	db	78
  3503  00F41F  55                 	db	85
  3504  00F420  3A                 	db	58
  3505  00F421  00                 	db	0
  3506  00F422  00                 	db	0
  3507  00F423  00                 	db	0
  3508  00F424  00                 	db	0
  3509  00F425  00                 	db	0
  3510  00F426  43                 	db	67
  3511  00F427  48                 	db	72
  3512  00F428  52                 	db	82
  3513  00F429  4F                 	db	79
  3514  00F42A  4D                 	db	77
  3515  00F42B  41                 	db	65
  3516  00F42C  54                 	db	84
  3517  00F42D  49                 	db	73
  3518  00F42E  43                 	db	67
  3519  00F42F  00                 	db	0
  3520  00F430  00                 	db	0
  3521  00F431  00                 	db	0
  3522  00F432  00                 	db	0
  3523  00F433  00                 	db	0
  3524  00F434  00                 	db	0
  3525  00F435  00                 	db	0
  3526  00F436  00                 	db	0
  3527  00F437  4D                 	db	77
  3528  00F438  41                 	db	65
  3529  00F439  4A                 	db	74
  3530  00F43A  4F                 	db	79
  3531  00F43B  52                 	db	82
  3532  00F43C  00                 	db	0
  3533  00F43D  00                 	db	0
  3534  00F43E  00                 	db	0
  3535  00F43F  00                 	db	0
  3536  00F440  00                 	db	0
  3537  00F441  00                 	db	0
  3538  00F442  00                 	db	0
  3539  00F443  00                 	db	0
  3540  00F444  00                 	db	0
  3541  00F445  00                 	db	0
  3542  00F446  00                 	db	0
  3543  00F447  00                 	db	0
  3544  00F448  4D                 	db	77
  3545  00F449  49                 	db	73
  3546  00F44A  4E                 	db	78
  3547  00F44B  4F                 	db	79
  3548  00F44C  52                 	db	82
  3549  00F44D  00                 	db	0
  3550  00F44E  00                 	db	0
  3551  00F44F  00                 	db	0
  3552  00F450  00                 	db	0
  3553  00F451  00                 	db	0
  3554  00F452  00                 	db	0
  3555  00F453  00                 	db	0
  3556  00F454  00                 	db	0
  3557  00F455  00                 	db	0
  3558  00F456  00                 	db	0
  3559  00F457  00                 	db	0
  3560  00F458  00                 	db	0
  3561  00F459  4D                 	db	77
  3562  00F45A  4F                 	db	79
  3563  00F45B  44                 	db	68
  3564  00F45C  45                 	db	69
  3565  00F45D  53                 	db	83
  3566  00F45E  00                 	db	0
  3567  00F45F  00                 	db	0
  3568  00F460  00                 	db	0
  3569  00F461  00                 	db	0
  3570  00F462  00                 	db	0
  3571  00F463  00                 	db	0
  3572  00F464  00                 	db	0
  3573  00F465  00                 	db	0
  3574  00F466  00                 	db	0
  3575  00F467  00                 	db	0
  3576  00F468  00                 	db	0
  3577  00F469  00                 	db	0
  3578  00F46A  50                 	db	80
  3579  00F46B  45                 	db	69
  3580  00F46C  4E                 	db	78
  3581  00F46D  54                 	db	84
  3582  00F46E  41                 	db	65
  3583  00F46F  54                 	db	84
  3584  00F470  4F                 	db	79
  3585  00F471  4E                 	db	78
  3586  00F472  49                 	db	73
  3587  00F473  43                 	db	67
  3588  00F474  20                 	db	32
  3589  00F475  4D                 	db	77
  3590  00F476  41                 	db	65
  3591  00F477  4A                 	db	74
  3592  00F478  4F                 	db	79
  3593  00F479  52                 	db	82
  3594  00F47A  00                 	db	0
  3595  00F47B  50                 	db	80
  3596  00F47C  45                 	db	69
  3597  00F47D  4E                 	db	78
  3598  00F47E  54                 	db	84
  3599  00F47F  41                 	db	65
  3600  00F480  54                 	db	84
  3601  00F481  4F                 	db	79
  3602  00F482  4E                 	db	78
  3603  00F483  49                 	db	73
  3604  00F484  43                 	db	67
  3605  00F485  20                 	db	32
  3606  00F486  4D                 	db	77
  3607  00F487  49                 	db	73
  3608  00F488  4E                 	db	78
  3609  00F489  4F                 	db	79
  3610  00F48A  52                 	db	82
  3611  00F48B  00                 	db	0
  3612  00F48C  54                 	db	84
  3613  00F48D  52                 	db	82
  3614  00F48E  49                 	db	73
  3615  00F48F  41                 	db	65
  3616  00F490  44                 	db	68
  3617  00F491  00                 	db	0
  3618  00F492  00                 	db	0
  3619  00F493  00                 	db	0
  3620  00F494  00                 	db	0
  3621  00F495  00                 	db	0
  3622  00F496  00                 	db	0
  3623  00F497  00                 	db	0
  3624  00F498  00                 	db	0
  3625  00F499  00                 	db	0
  3626  00F49A  00                 	db	0
  3627  00F49B  00                 	db	0
  3628  00F49C  00                 	db	0
  3629  00F49D  44                 	db	68
  3630  00F49E  49                 	db	73
  3631  00F49F  41                 	db	65
  3632  00F4A0  54                 	db	84
  3633  00F4A1  4F                 	db	79
  3634  00F4A2  4E                 	db	78
  3635  00F4A3  49                 	db	73
  3636  00F4A4  43                 	db	67
  3637  00F4A5  20                 	db	32
  3638  00F4A6  54                 	db	84
  3639  00F4A7  20                 	db	32
  3640  00F4A8  4D                 	db	77
  3641  00F4A9  41                 	db	65
  3642  00F4AA  4A                 	db	74
  3643  00F4AB  4F                 	db	79
  3644  00F4AC  52                 	db	82
  3645  00F4AD  00                 	db	0
  3646  00F4AE  44                 	db	68
  3647  00F4AF  49                 	db	73
  3648  00F4B0  41                 	db	65
  3649  00F4B1  54                 	db	84
  3650  00F4B2  4F                 	db	79
  3651  00F4B3  4E                 	db	78
  3652  00F4B4  49                 	db	73
  3653  00F4B5  43                 	db	67
  3654  00F4B6  20                 	db	32
  3655  00F4B7  54                 	db	84
  3656  00F4B8  20                 	db	32
  3657  00F4B9  4D                 	db	77
  3658  00F4BA  49                 	db	73
  3659  00F4BB  4E                 	db	78
  3660  00F4BC  4F                 	db	79
  3661  00F4BD  52                 	db	82
  3662  00F4BE  00                 	db	0
  3663  00F4BF  53                 	db	83
  3664  00F4C0  45                 	db	69
  3665  00F4C1  56                 	db	86
  3666  00F4C2  45                 	db	69
  3667  00F4C3  4E                 	db	78
  3668  00F4C4  54                 	db	84
  3669  00F4C5  48                 	db	72
  3670  00F4C6  00                 	db	0
  3671  00F4C7  00                 	db	0
  3672  00F4C8  00                 	db	0
  3673  00F4C9  00                 	db	0
  3674  00F4CA  00                 	db	0
  3675  00F4CB  00                 	db	0
  3676  00F4CC  00                 	db	0
  3677  00F4CD  00                 	db	0
  3678  00F4CE  00                 	db	0
  3679  00F4CF  00                 	db	0
  3680  00F4D0  44                 	db	68
  3681  00F4D1  49                 	db	73
  3682  00F4D2  41                 	db	65
  3683  00F4D3  54                 	db	84
  3684  00F4D4  4F                 	db	79
  3685  00F4D5  4E                 	db	78
  3686  00F4D6  49                 	db	73
  3687  00F4D7  43                 	db	67
  3688  00F4D8  20                 	db	32
  3689  00F4D9  37                 	db	55
  3690  00F4DA  20                 	db	32
  3691  00F4DB  4D                 	db	77
  3692  00F4DC  41                 	db	65
  3693  00F4DD  4A                 	db	74
  3694  00F4DE  4F                 	db	79
  3695  00F4DF  52                 	db	82
  3696  00F4E0  00                 	db	0
  3697  00F4E1  44                 	db	68
  3698  00F4E2  49                 	db	73
  3699  00F4E3  41                 	db	65
  3700  00F4E4  54                 	db	84
  3701  00F4E5  4F                 	db	79
  3702  00F4E6  4E                 	db	78
  3703  00F4E7  49                 	db	73
  3704  00F4E8  43                 	db	67
  3705  00F4E9  20                 	db	32
  3706  00F4EA  37                 	db	55
  3707  00F4EB  20                 	db	32
  3708  00F4EC  4D                 	db	77
  3709  00F4ED  49                 	db	73
  3710  00F4EE  4E                 	db	78
  3711  00F4EF  4F                 	db	79
  3712  00F4F0  52                 	db	82
  3713  00F4F1  00                 	db	0
  3714  00F4F2  69                 	db	105
  3715  00F4F3  6F                 	db	111
  3716  00F4F4  6E                 	db	110
  3717  00F4F5  69                 	db	105
  3718  00F4F6  61                 	db	97
  3719  00F4F7  6E                 	db	110
  3720  00F4F8  00                 	db	0
  3721  00F4F9  00                 	db	0
  3722  00F4FA  00                 	db	0
  3723  00F4FB  00                 	db	0
  3724  00F4FC  00                 	db	0
  3725  00F4FD  00                 	db	0
  3726  00F4FE  00                 	db	0
  3727  00F4FF  00                 	db	0
  3728  00F500  00                 	db	0
  3729  00F501  00                 	db	0
  3730  00F502  00                 	db	0
  3731  00F503  64                 	db	100
  3732  00F504  6F                 	db	111
  3733  00F505  72                 	db	114
  3734  00F506  69                 	db	105
  3735  00F507  61                 	db	97
  3736  00F508  6E                 	db	110
  3737  00F509  00                 	db	0
  3738  00F50A  00                 	db	0
  3739  00F50B  00                 	db	0
  3740  00F50C  00                 	db	0
  3741  00F50D  00                 	db	0
  3742  00F50E  00                 	db	0
  3743  00F50F  00                 	db	0
  3744  00F510  00                 	db	0
  3745  00F511  00                 	db	0
  3746  00F512  00                 	db	0
  3747  00F513  00                 	db	0
  3748  00F514  70                 	db	112
  3749  00F515  68                 	db	104
  3750  00F516  72                 	db	114
  3751  00F517  79                 	db	121
  3752  00F518  67                 	db	103
  3753  00F519  69                 	db	105
  3754  00F51A  61                 	db	97
  3755  00F51B  6E                 	db	110
  3756  00F51C  00                 	db	0
  3757  00F51D  00                 	db	0
  3758  00F51E  00                 	db	0
  3759  00F51F  00                 	db	0
  3760  00F520  00                 	db	0
  3761  00F521  00                 	db	0
  3762  00F522  00                 	db	0
  3763  00F523  00                 	db	0
  3764  00F524  00                 	db	0
  3765  00F525  6C                 	db	108
  3766  00F526  79                 	db	121
  3767  00F527  64                 	db	100
  3768  00F528  69                 	db	105
  3769  00F529  61                 	db	97
  3770  00F52A  6E                 	db	110
  3771  00F52B  00                 	db	0
  3772  00F52C  00                 	db	0
  3773  00F52D  00                 	db	0
  3774  00F52E  00                 	db	0
  3775  00F52F  00                 	db	0
  3776  00F530  00                 	db	0
  3777  00F531  00                 	db	0
  3778  00F532  00                 	db	0
  3779  00F533  00                 	db	0
  3780  00F534  00                 	db	0
  3781  00F535  00                 	db	0
  3782  00F536  6D                 	db	109
  3783  00F537  69                 	db	105
  3784  00F538  78                 	db	120
  3785  00F539  6F                 	db	111
  3786  00F53A  6C                 	db	108
  3787  00F53B  79                 	db	121
  3788  00F53C  64                 	db	100
  3789  00F53D  69                 	db	105
  3790  00F53E  61                 	db	97
  3791  00F53F  6E                 	db	110
  3792  00F540  00                 	db	0
  3793  00F541  00                 	db	0
  3794  00F542  00                 	db	0
  3795  00F543  00                 	db	0
  3796  00F544  00                 	db	0
  3797  00F545  00                 	db	0
  3798  00F546  00                 	db	0
  3799  00F547  61                 	db	97
  3800  00F548  65                 	db	101
  3801  00F549  6F                 	db	111
  3802  00F54A  6C                 	db	108
  3803  00F54B  69                 	db	105
  3804  00F54C  61                 	db	97
  3805  00F54D  6E                 	db	110
  3806  00F54E  00                 	db	0
  3807  00F54F  00                 	db	0
  3808  00F550  00                 	db	0
  3809  00F551  00                 	db	0
  3810  00F552  00                 	db	0
  3811  00F553  00                 	db	0
  3812  00F554  00                 	db	0
  3813  00F555  00                 	db	0
  3814  00F556  00                 	db	0
  3815  00F557  00                 	db	0
  3816  00F558  6C                 	db	108
  3817  00F559  6F                 	db	111
  3818  00F55A  63                 	db	99
  3819  00F55B  72                 	db	114
  3820  00F55C  69                 	db	105
  3821  00F55D  61                 	db	97
  3822  00F55E  6E                 	db	110
  3823  00F55F  00                 	db	0
  3824  00F560  00                 	db	0
  3825  00F561  00                 	db	0
  3826  00F562  00                 	db	0
  3827  00F563  00                 	db	0
  3828  00F564  00                 	db	0
  3829  00F565  00                 	db	0
  3830  00F566  00                 	db	0
  3831  00F567  00                 	db	0
  3832  00F568  00                 	db	0
  3833  00F569  6D                 	db	109
  3834  00F56A  61                 	db	97
  3835  00F56B  6A                 	db	106
  3836  00F56C  6F                 	db	111
  3837  00F56D  72                 	db	114
  3838  00F56E  20                 	db	32
  3839  00F56F  74                 	db	116
  3840  00F570  72                 	db	114
  3841  00F571  69                 	db	105
  3842  00F572  61                 	db	97
  3843  00F573  64                 	db	100
  3844  00F574  00                 	db	0
  3845  00F575  00                 	db	0
  3846  00F576  00                 	db	0
  3847  00F577  00                 	db	0
  3848  00F578  00                 	db	0
  3849  00F579  00                 	db	0
  3850  00F57A  6D                 	db	109
  3851  00F57B  69                 	db	105
  3852  00F57C  6E                 	db	110
  3853  00F57D  6F                 	db	111
  3854  00F57E  72                 	db	114
  3855  00F57F  20                 	db	32
  3856  00F580  74                 	db	116
  3857  00F581  72                 	db	114
  3858  00F582  69                 	db	105
  3859  00F583  61                 	db	97
  3860  00F584  64                 	db	100
  3861  00F585  00                 	db	0
  3862  00F586  00                 	db	0
  3863  00F587  00                 	db	0
  3864  00F588  00                 	db	0
  3865  00F589  00                 	db	0
  3866  00F58A  00                 	db	0
  3867  00F58B  61                 	db	97
  3868  00F58C  75                 	db	117
  3869  00F58D  67                 	db	103
  3870  00F58E  6D                 	db	109
  3871  00F58F  65                 	db	101
  3872  00F590  6E                 	db	110
  3873  00F591  74                 	db	116
  3874  00F592  65                 	db	101
  3875  00F593  64                 	db	100
  3876  00F594  20                 	db	32
  3877  00F595  74                 	db	116
  3878  00F596  72                 	db	114
  3879  00F597  69                 	db	105
  3880  00F598  61                 	db	97
  3881  00F599  64                 	db	100
  3882  00F59A  00                 	db	0
  3883  00F59B  00                 	db	0
  3884  00F59C  64                 	db	100
  3885  00F59D  69                 	db	105
  3886  00F59E  6D                 	db	109
  3887  00F59F  69                 	db	105
  3888  00F5A0  6E                 	db	110
  3889  00F5A1  69                 	db	105
  3890  00F5A2  73                 	db	115
  3891  00F5A3  68                 	db	104
  3892  00F5A4  65                 	db	101
  3893  00F5A5  64                 	db	100
  3894  00F5A6  20                 	db	32
  3895  00F5A7  74                 	db	116
  3896  00F5A8  72                 	db	114
  3897  00F5A9  69                 	db	105
  3898  00F5AA  61                 	db	97
  3899  00F5AB  64                 	db	100
  3900  00F5AC  00                 	db	0
  3901  00F5AD  64                 	db	100
  3902  00F5AE  6F                 	db	111
  3903  00F5AF  6D                 	db	109
  3904  00F5B0  69                 	db	105
  3905  00F5B1  6E                 	db	110
  3906  00F5B2  61                 	db	97
  3907  00F5B3  6E                 	db	110
  3908  00F5B4  74                 	db	116
  3909  00F5B5  20                 	db	32
  3910  00F5B6  37                 	db	55
  3911  00F5B7  74                 	db	116
  3912  00F5B8  68                 	db	104
  3913  00F5B9  00                 	db	0
  3914  00F5BA  00                 	db	0
  3915  00F5BB  00                 	db	0
  3916  00F5BC  00                 	db	0
  3917  00F5BD  00                 	db	0
  3918  00F5BE  6D                 	db	109
  3919  00F5BF  61                 	db	97
  3920  00F5C0  6A                 	db	106
  3921  00F5C1  6F                 	db	111
  3922  00F5C2  72                 	db	114
  3923  00F5C3  20                 	db	32
  3924  00F5C4  37                 	db	55
  3925  00F5C5  74                 	db	116
  3926  00F5C6  68                 	db	104
  3927  00F5C7  00                 	db	0
  3928  00F5C8  00                 	db	0
  3929  00F5C9  00                 	db	0
  3930  00F5CA  00                 	db	0
  3931  00F5CB  00                 	db	0
  3932  00F5CC  00                 	db	0
  3933  00F5CD  00                 	db	0
  3934  00F5CE  00                 	db	0
  3935  00F5CF  6D                 	db	109
  3936  00F5D0  69                 	db	105
  3937  00F5D1  6E                 	db	110
  3938  00F5D2  6F                 	db	111
  3939  00F5D3  72                 	db	114
  3940  00F5D4  20                 	db	32
  3941  00F5D5  37                 	db	55
  3942  00F5D6  74                 	db	116
  3943  00F5D7  68                 	db	104
  3944  00F5D8  00                 	db	0
  3945  00F5D9  00                 	db	0
  3946  00F5DA  00                 	db	0
  3947  00F5DB  00                 	db	0
  3948  00F5DC  00                 	db	0
  3949  00F5DD  00                 	db	0
  3950  00F5DE  00                 	db	0
  3951  00F5DF  00                 	db	0
  3952  00F5E0  68                 	db	104
  3953  00F5E1  61                 	db	97
  3954  00F5E2  6C                 	db	108
  3955  00F5E3  66                 	db	102
  3956  00F5E4  20                 	db	32
  3957  00F5E5  64                 	db	100
  3958  00F5E6  69                 	db	105
  3959  00F5E7  6D                 	db	109
  3960  00F5E8  69                 	db	105
  3961  00F5E9  6E                 	db	110
  3962  00F5EA  69                 	db	105
  3963  00F5EB  73                 	db	115
  3964  00F5EC  68                 	db	104
  3965  00F5ED  65                 	db	101
  3966  00F5EE  64                 	db	100
  3967  00F5EF  00                 	db	0
  3968  00F5F0  00                 	db	0
  3969  00F5F1  64                 	db	100
  3970  00F5F2  69                 	db	105
  3971  00F5F3  6D                 	db	109
  3972  00F5F4  69                 	db	105
  3973  00F5F5  6E                 	db	110
  3974  00F5F6  69                 	db	105
  3975  00F5F7  73                 	db	115
  3976  00F5F8  68                 	db	104
  3977  00F5F9  65                 	db	101
  3978  00F5FA  64                 	db	100
  3979  00F5FB  20                 	db	32
  3980  00F5FC  37                 	db	55
  3981  00F5FD  74                 	db	116
  3982  00F5FE  68                 	db	104
  3983  00F5FF  00                 	db	0
  3984  00F600  00                 	db	0
  3985  00F601  00                 	db	0
  3986  00F602  48                 	db	72
  3987  00F603  41                 	db	65
  3988  00F604  4C                 	db	76
  3989  00F605  46                 	db	70
  3990  00F606  20                 	db	32
  3991  00F607  53                 	db	83
  3992  00F608  54                 	db	84
  3993  00F609  45                 	db	69
  3994  00F60A  50                 	db	80
  3995  00F60B  00                 	db	0
  3996  00F60C  00                 	db	0
  3997  00F60D  00                 	db	0
  3998  00F60E  00                 	db	0
  3999  00F60F  00                 	db	0
  4000  00F610  00                 	db	0
  4001  00F611  00                 	db	0
  4002  00F612  00                 	db	0
  4003  00F613  43                 	db	67
  4004  00F614  49                 	db	73
  4005  00F615  52                 	db	82
  4006  00F616  43                 	db	67
  4007  00F617  4C                 	db	76
  4008  00F618  45                 	db	69
  4009  00F619  20                 	db	32
  4010  00F61A  4F                 	db	79
  4011  00F61B  46                 	db	70
  4012  00F61C  20                 	db	32
  4013  00F61D  46                 	db	70
  4014  00F61E  49                 	db	73
  4015  00F61F  46                 	db	70
  4016  00F620  54                 	db	84
  4017  00F621  48                 	db	72
  4018  00F622  53                 	db	83
  4019  00F623  00                 	db	0
  4020  00F624  44                 	db	68
  4021  00F625  52                 	db	82
  4022  00F626  55                 	db	85
  4023  00F627  4D                 	db	77
  4024  00F628  20                 	db	32
  4025  00F629  49                 	db	73
  4026  00F62A  53                 	db	83
  4027  00F62B  20                 	db	32
  4028  00F62C  4E                 	db	78
  4029  00F62D  4F                 	db	79
  4030  00F62E  54                 	db	84
  4031  00F62F  45                 	db	69
  4032  00F630  20                 	db	32
  4033  00F631  4F                 	db	79
  4034  00F632  4E                 	db	78
  4035  00F633  00                 	db	0
  4036  00F634  00                 	db	0
  4037  00F635  44                 	db	68
  4038  00F636  52                 	db	82
  4039  00F637  55                 	db	85
  4040  00F638  4D                 	db	77
  4041  00F639  20                 	db	32
  4042  00F63A  49                 	db	73
  4043  00F63B  53                 	db	83
  4044  00F63C  20                 	db	32
  4045  00F63D  43                 	db	67
  4046  00F63E  43                 	db	67
  4047  00F63F  00                 	db	0
  4048  00F640  00                 	db	0
  4049  00F641  00                 	db	0
  4050  00F642  00                 	db	0
  4051  00F643  00                 	db	0
  4052  00F644  00                 	db	0
  4053  00F645  00                 	db	0
  4054  00F646  44                 	db	68
  4055  00F647  52                 	db	82
  4056  00F648  55                 	db	85
  4057  00F649  4D                 	db	77
  4058  00F64A  20                 	db	32
  4059  00F64B  43                 	db	67
  4060  00F64C  43                 	db	67
  4061  00F64D  20                 	db	32
  4062  00F64E  54                 	db	84
  4063  00F64F  59                 	db	89
  4064  00F650  50                 	db	80
  4065  00F651  45                 	db	69
  4066  00F652  00                 	db	0
  4067  00F653  00                 	db	0
  4068  00F654  00                 	db	0
  4069  00F655  00                 	db	0
  4070  00F656  00                 	db	0
  4071  00F657  44                 	db	68
  4072  00F658  52                 	db	82
  4073  00F659  55                 	db	85
  4074  00F65A  4D                 	db	77
  4075  00F65B  20                 	db	32
  4076  00F65C  53                 	db	83
  4077  00F65D  45                 	db	69
  4078  00F65E  54                 	db	84
  4079  00F65F  20                 	db	32
  4080  00F660  4E                 	db	78
  4081  00F661  4E                 	db	78
  4082  00F662  23                 	db	35
  4083  00F663  00                 	db	0
  4084  00F664  00                 	db	0
  4085  00F665  00                 	db	0
  4086  00F666  00                 	db	0
  4087  00F667  00                 	db	0
  4088  00F668  44                 	db	68
  4089  00F669  52                 	db	82
  4090  00F66A  55                 	db	85
  4091  00F66B  4D                 	db	77
  4092  00F66C  20                 	db	32
  4093  00F66D  53                 	db	83
  4094  00F66E  45                 	db	69
  4095  00F66F  54                 	db	84
  4096  00F670  20                 	db	32
  4097  00F671  43                 	db	67
  4098  00F672  43                 	db	67
  4099  00F673  23                 	db	35
  4100  00F674  00                 	db	0
  4101  00F675  00                 	db	0
  4102  00F676  00                 	db	0
  4103  00F677  00                 	db	0
  4104  00F678  00                 	db	0
  4105  00F679  44                 	db	68
  4106  00F67A  52                 	db	82
  4107  00F67B  55                 	db	85
  4108  00F67C  4D                 	db	77
  4109  00F67D  20                 	db	32
  4110  00F67E  43                 	db	67
  4111  00F67F  43                 	db	67
  4112  00F680  20                 	db	32
  4113  00F681  54                 	db	84
  4114  00F682  52                 	db	82
  4115  00F683  49                 	db	73
  4116  00F684  47                 	db	71
  4117  00F685  47                 	db	71
  4118  00F686  45                 	db	69
  4119  00F687  52                 	db	82
  4120  00F688  00                 	db	0
  4121  00F689  00                 	db	0
  4122  00F68A  44                 	db	68
  4123  00F68B  52                 	db	82
  4124  00F68C  55                 	db	85
  4125  00F68D  4D                 	db	77
  4126  00F68E  20                 	db	32
  4127  00F68F  43                 	db	67
  4128  00F690  43                 	db	67
  4129  00F691  20                 	db	32
  4130  00F692  54                 	db	84
  4131  00F693  4F                 	db	79
  4132  00F694  47                 	db	71
  4133  00F695  47                 	db	71
  4134  00F696  4C                 	db	76
  4135  00F697  45                 	db	69
  4136  00F698  00                 	db	0
  4137  00F699  00                 	db	0
  4138  00F69A  00                 	db	0
  4139  00F69B  44                 	db	68
  4140  00F69C  52                 	db	82
  4141  00F69D  55                 	db	85
  4142  00F69E  4D                 	db	77
  4143  00F69F  20                 	db	32
  4144  00F6A0  31                 	db	49
  4145  00F6A1  20                 	db	32
  4146  00F6A2  4E                 	db	78
  4147  00F6A3  4E                 	db	78
  4148  00F6A4  3A                 	db	58
  4149  00F6A5  20                 	db	32
  4150  00F6A6  00                 	db	0
  4151  00F6A7  00                 	db	0
  4152  00F6A8  00                 	db	0
  4153  00F6A9  00                 	db	0
  4154  00F6AA  00                 	db	0
  4155  00F6AB  00                 	db	0
  4156  00F6AC  44                 	db	68
  4157  00F6AD  52                 	db	82
  4158  00F6AE  55                 	db	85
  4159  00F6AF  4D                 	db	77
  4160  00F6B0  20                 	db	32
  4161  00F6B1  32                 	db	50
  4162  00F6B2  20                 	db	32
  4163  00F6B3  4E                 	db	78
  4164  00F6B4  4E                 	db	78
  4165  00F6B5  3A                 	db	58
  4166  00F6B6  20                 	db	32
  4167  00F6B7  00                 	db	0
  4168  00F6B8  00                 	db	0
  4169  00F6B9  00                 	db	0
  4170  00F6BA  00                 	db	0
  4171  00F6BB  00                 	db	0
  4172  00F6BC  00                 	db	0
  4173  00F6BD  44                 	db	68
  4174  00F6BE  52                 	db	82
  4175  00F6BF  55                 	db	85
  4176  00F6C0  4D                 	db	77
  4177  00F6C1  20                 	db	32
  4178  00F6C2  33                 	db	51
  4179  00F6C3  20                 	db	32
  4180  00F6C4  4E                 	db	78
  4181  00F6C5  4E                 	db	78
  4182  00F6C6  3A                 	db	58
  4183  00F6C7  20                 	db	32
  4184  00F6C8  00                 	db	0
  4185  00F6C9  00                 	db	0
  4186  00F6CA  00                 	db	0
  4187  00F6CB  00                 	db	0
  4188  00F6CC  00                 	db	0
  4189  00F6CD  00                 	db	0
  4190  00F6CE  44                 	db	68
  4191  00F6CF  52                 	db	82
  4192  00F6D0  55                 	db	85
  4193  00F6D1  4D                 	db	77
  4194  00F6D2  20                 	db	32
  4195  00F6D3  34                 	db	52
  4196  00F6D4  20                 	db	32
  4197  00F6D5  4E                 	db	78
  4198  00F6D6  4E                 	db	78
  4199  00F6D7  3A                 	db	58
  4200  00F6D8  20                 	db	32
  4201  00F6D9  00                 	db	0
  4202  00F6DA  00                 	db	0
  4203  00F6DB  00                 	db	0
  4204  00F6DC  00                 	db	0
  4205  00F6DD  00                 	db	0
  4206  00F6DE  00                 	db	0
  4207  00F6DF  44                 	db	68
  4208  00F6E0  52                 	db	82
  4209  00F6E1  55                 	db	85
  4210  00F6E2  4D                 	db	77
  4211  00F6E3  20                 	db	32
  4212  00F6E4  35                 	db	53
  4213  00F6E5  20                 	db	32
  4214  00F6E6  4E                 	db	78
  4215  00F6E7  4E                 	db	78
  4216  00F6E8  3A                 	db	58
  4217  00F6E9  20                 	db	32
  4218  00F6EA  00                 	db	0
  4219  00F6EB  00                 	db	0
  4220  00F6EC  00                 	db	0
  4221  00F6ED  00                 	db	0
  4222  00F6EE  00                 	db	0
  4223  00F6EF  00                 	db	0
  4224  00F6F0  44                 	db	68
  4225  00F6F1  52                 	db	82
  4226  00F6F2  55                 	db	85
  4227  00F6F3  4D                 	db	77
  4228  00F6F4  20                 	db	32
  4229  00F6F5  36                 	db	54
  4230  00F6F6  20                 	db	32
  4231  00F6F7  4E                 	db	78
  4232  00F6F8  4E                 	db	78
  4233  00F6F9  3A                 	db	58
  4234  00F6FA  20                 	db	32
  4235  00F6FB  00                 	db	0
  4236  00F6FC  00                 	db	0
  4237  00F6FD  00                 	db	0
  4238  00F6FE  00                 	db	0
  4239  00F6FF  00                 	db	0
  4240  00F700  00                 	db	0
  4241  00F701  44                 	db	68
  4242  00F702  52                 	db	82
  4243  00F703  55                 	db	85
  4244  00F704  4D                 	db	77
  4245  00F705  20                 	db	32
  4246  00F706  37                 	db	55
  4247  00F707  20                 	db	32
  4248  00F708  4E                 	db	78
  4249  00F709  4E                 	db	78
  4250  00F70A  3A                 	db	58
  4251  00F70B  20                 	db	32
  4252  00F70C  00                 	db	0
  4253  00F70D  00                 	db	0
  4254  00F70E  00                 	db	0
  4255  00F70F  00                 	db	0
  4256  00F710  00                 	db	0
  4257  00F711  00                 	db	0
  4258  00F712  44                 	db	68
  4259  00F713  52                 	db	82
  4260  00F714  55                 	db	85
  4261  00F715  4D                 	db	77
  4262  00F716  20                 	db	32
  4263  00F717  38                 	db	56
  4264  00F718  20                 	db	32
  4265  00F719  4E                 	db	78
  4266  00F71A  4E                 	db	78
  4267  00F71B  3A                 	db	58
  4268  00F71C  20                 	db	32
  4269  00F71D  00                 	db	0
  4270  00F71E  00                 	db	0
  4271  00F71F  00                 	db	0
  4272  00F720  00                 	db	0
  4273  00F721  00                 	db	0
  4274  00F722  00                 	db	0
  4275  00F723  44                 	db	68
  4276  00F724  52                 	db	82
  4277  00F725  55                 	db	85
  4278  00F726  4D                 	db	77
  4279  00F727  20                 	db	32
  4280  00F728  31                 	db	49
  4281  00F729  20                 	db	32
  4282  00F72A  43                 	db	67
  4283  00F72B  43                 	db	67
  4284  00F72C  3A                 	db	58
  4285  00F72D  20                 	db	32
  4286  00F72E  00                 	db	0
  4287  00F72F  00                 	db	0
  4288  00F730  00                 	db	0
  4289  00F731  00                 	db	0
  4290  00F732  00                 	db	0
  4291  00F733  00                 	db	0
  4292  00F734  44                 	db	68
  4293  00F735  52                 	db	82
  4294  00F736  55                 	db	85
  4295  00F737  4D                 	db	77
  4296  00F738  20                 	db	32
  4297  00F739  32                 	db	50
  4298  00F73A  20                 	db	32
  4299  00F73B  43                 	db	67
  4300  00F73C  43                 	db	67
  4301  00F73D  3A                 	db	58
  4302  00F73E  20                 	db	32
  4303  00F73F  00                 	db	0
  4304  00F740  00                 	db	0
  4305  00F741  00                 	db	0
  4306  00F742  00                 	db	0
  4307  00F743  00                 	db	0
  4308  00F744  00                 	db	0
  4309  00F745  44                 	db	68
  4310  00F746  52                 	db	82
  4311  00F747  55                 	db	85
  4312  00F748  4D                 	db	77
  4313  00F749  20                 	db	32
  4314  00F74A  33                 	db	51
  4315  00F74B  20                 	db	32
  4316  00F74C  43                 	db	67
  4317  00F74D  43                 	db	67
  4318  00F74E  3A                 	db	58
  4319  00F74F  20                 	db	32
  4320  00F750  00                 	db	0
  4321  00F751  00                 	db	0
  4322  00F752  00                 	db	0
  4323  00F753  00                 	db	0
  4324  00F754  00                 	db	0
  4325  00F755  00                 	db	0
  4326  00F756  44                 	db	68
  4327  00F757  52                 	db	82
  4328  00F758  55                 	db	85
  4329  00F759  4D                 	db	77
  4330  00F75A  20                 	db	32
  4331  00F75B  34                 	db	52
  4332  00F75C  20                 	db	32
  4333  00F75D  43                 	db	67
  4334  00F75E  43                 	db	67
  4335  00F75F  3A                 	db	58
  4336  00F760  20                 	db	32
  4337  00F761  00                 	db	0
  4338  00F762  00                 	db	0
  4339  00F763  00                 	db	0
  4340  00F764  00                 	db	0
  4341  00F765  00                 	db	0
  4342  00F766  00                 	db	0
  4343  00F767  44                 	db	68
  4344  00F768  52                 	db	82
  4345  00F769  55                 	db	85
  4346  00F76A  4D                 	db	77
  4347  00F76B  20                 	db	32
  4348  00F76C  35                 	db	53
  4349  00F76D  20                 	db	32
  4350  00F76E  43                 	db	67
  4351  00F76F  43                 	db	67
  4352  00F770  3A                 	db	58
  4353  00F771  20                 	db	32
  4354  00F772  00                 	db	0
  4355  00F773  00                 	db	0
  4356  00F774  00                 	db	0
  4357  00F775  00                 	db	0
  4358  00F776  00                 	db	0
  4359  00F777  00                 	db	0
  4360  00F778  44                 	db	68
  4361  00F779  52                 	db	82
  4362  00F77A  55                 	db	85
  4363  00F77B  4D                 	db	77
  4364  00F77C  20                 	db	32
  4365  00F77D  36                 	db	54
  4366  00F77E  20                 	db	32
  4367  00F77F  43                 	db	67
  4368  00F780  43                 	db	67
  4369  00F781  3A                 	db	58
  4370  00F782  20                 	db	32
  4371  00F783  00                 	db	0
  4372  00F784  00                 	db	0
  4373  00F785  00                 	db	0
  4374  00F786  00                 	db	0
  4375  00F787  00                 	db	0
  4376  00F788  00                 	db	0
  4377  00F789  44                 	db	68
  4378  00F78A  52                 	db	82
  4379  00F78B  55                 	db	85
  4380  00F78C  4D                 	db	77
  4381  00F78D  20                 	db	32
  4382  00F78E  37                 	db	55
  4383  00F78F  20                 	db	32
  4384  00F790  43                 	db	67
  4385  00F791  43                 	db	67
  4386  00F792  3A                 	db	58
  4387  00F793  20                 	db	32
  4388  00F794  00                 	db	0
  4389  00F795  00                 	db	0
  4390  00F796  00                 	db	0
  4391  00F797  00                 	db	0
  4392  00F798  00                 	db	0
  4393  00F799  00                 	db	0
  4394  00F79A  44                 	db	68
  4395  00F79B  52                 	db	82
  4396  00F79C  55                 	db	85
  4397  00F79D  4D                 	db	77
  4398  00F79E  20                 	db	32
  4399  00F79F  38                 	db	56
  4400  00F7A0  20                 	db	32
  4401  00F7A1  43                 	db	67
  4402  00F7A2  43                 	db	67
  4403  00F7A3  3A                 	db	58
  4404  00F7A4  20                 	db	32
  4405  00F7A5  00                 	db	0
  4406  00F7A6  00                 	db	0
  4407  00F7A7  00                 	db	0
  4408  00F7A8  00                 	db	0
  4409  00F7A9  00                 	db	0
  4410  00F7AA  00                 	db	0
  4411  00F7AB  50                 	db	80
  4412  00F7AC  4F                 	db	79
  4413  00F7AD  54                 	db	84
  4414  00F7AE  53                 	db	83
  4415  00F7AF  20                 	db	32
  4416  00F7B0  52                 	db	82
  4417  00F7B1  45                 	db	69
  4418  00F7B2  53                 	db	83
  4419  00F7B3  4F                 	db	79
  4420  00F7B4  4C                 	db	76
  4421  00F7B5  55                 	db	85
  4422  00F7B6  54                 	db	84
  4423  00F7B7  49                 	db	73
  4424  00F7B8  4F                 	db	79
  4425  00F7B9  4E                 	db	78
  4426  00F7BA  00                 	db	0
  4427  00F7BB  00                 	db	0
  4428  00F7BC  50                 	db	80
  4429  00F7BD  4F                 	db	79
  4430  00F7BE  54                 	db	84
  4431  00F7BF  53                 	db	83
  4432  00F7C0  20                 	db	32
  4433  00F7C1  41                 	db	65
  4434  00F7C2  4C                 	db	76
  4435  00F7C3  50                 	db	80
  4436  00F7C4  48                 	db	72
  4437  00F7C5  41                 	db	65
  4438  00F7C6  00                 	db	0
  4439  00F7C7  00                 	db	0
  4440  00F7C8  00                 	db	0
  4441  00F7C9  00                 	db	0
  4442  00F7CA  00                 	db	0
  4443  00F7CB  00                 	db	0
  4444  00F7CC  00                 	db	0
  4445  00F7CD  50                 	db	80
  4446  00F7CE  4F                 	db	79
  4447  00F7CF  54                 	db	84
  4448  00F7D0  53                 	db	83
  4449  00F7D1  20                 	db	32
  4450  00F7D2  53                 	db	83
  4451  00F7D3  45                 	db	69
  4452  00F7D4  54                 	db	84
  4453  00F7D5  20                 	db	32
  4454  00F7D6  43                 	db	67
  4455  00F7D7  43                 	db	67
  4456  00F7D8  23                 	db	35
  4457  00F7D9  00                 	db	0
  4458  00F7DA  00                 	db	0
  4459  00F7DB  00                 	db	0
  4460  00F7DC  00                 	db	0
  4461  00F7DD  00                 	db	0
  4462  00F7DE  53                 	db	83
  4463  00F7DF  4C                 	db	76
  4464  00F7E0  49                 	db	73
  4465  00F7E1  44                 	db	68
  4466  00F7E2  45                 	db	69
  4467  00F7E3  50                 	db	80
  4468  00F7E4  4F                 	db	79
  4469  00F7E5  54                 	db	84
  4470  00F7E6  20                 	db	32
  4471  00F7E7  53                 	db	83
  4472  00F7E8  45                 	db	69
  4473  00F7E9  54                 	db	84
  4474  00F7EA  20                 	db	32
  4475  00F7EB  43                 	db	67
  4476  00F7EC  43                 	db	67
  4477  00F7ED  23                 	db	35
  4478  00F7EE  00                 	db	0
  4479  00F7EF  4A                 	db	74
  4480  00F7F0  4F                 	db	79
  4481  00F7F1  59                 	db	89
  4482  00F7F2  53                 	db	83
  4483  00F7F3  54                 	db	84
  4484  00F7F4  49                 	db	73
  4485  00F7F5  43                 	db	67
  4486  00F7F6  4B                 	db	75
  4487  00F7F7  20                 	db	32
  4488  00F7F8  53                 	db	83
  4489  00F7F9  45                 	db	69
  4490  00F7FA  54                 	db	84
  4491  00F7FB  20                 	db	32
  4492  00F7FC  43                 	db	67
  4493  00F7FD  43                 	db	67
  4494  00F7FE  23                 	db	35
  4495  00F7FF  00                 	db	0
  4496  00F800  50                 	db	80
  4497  00F801  4F                 	db	79
  4498  00F802  54                 	db	84
  4499  00F803  53                 	db	83
  4500  00F804  20                 	db	32
  4501  00F805  4C                 	db	76
  4502  00F806  4F                 	db	79
  4503  00F807  20                 	db	32
  4504  00F808  52                 	db	82
  4505  00F809  45                 	db	69
  4506  00F80A  53                 	db	83
  4507  00F80B  00                 	db	0
  4508  00F80C  00                 	db	0
  4509  00F80D  00                 	db	0
  4510  00F80E  00                 	db	0
  4511  00F80F  00                 	db	0
  4512  00F810  00                 	db	0
  4513  00F811  50                 	db	80
  4514  00F812  4F                 	db	79
  4515  00F813  54                 	db	84
  4516  00F814  53                 	db	83
  4517  00F815  20                 	db	32
  4518  00F816  48                 	db	72
  4519  00F817  49                 	db	73
  4520  00F818  20                 	db	32
  4521  00F819  52                 	db	82
  4522  00F81A  45                 	db	69
  4523  00F81B  53                 	db	83
  4524  00F81C  00                 	db	0
  4525  00F81D  00                 	db	0
  4526  00F81E  00                 	db	0
  4527  00F81F  00                 	db	0
  4528  00F820  00                 	db	0
  4529  00F821  00                 	db	0
  4530  00F822  50                 	db	80
  4531  00F823  31                 	db	49
  4532  00F824  20                 	db	32
  4533  00F825  43                 	db	67
  4534  00F826  43                 	db	67
  4535  00F827  3A                 	db	58
  4536  00F828  00                 	db	0
  4537  00F829  00                 	db	0
  4538  00F82A  00                 	db	0
  4539  00F82B  00                 	db	0
  4540  00F82C  00                 	db	0
  4541  00F82D  00                 	db	0
  4542  00F82E  00                 	db	0
  4543  00F82F  00                 	db	0
  4544  00F830  00                 	db	0
  4545  00F831  00                 	db	0
  4546  00F832  00                 	db	0
  4547  00F833  50                 	db	80
  4548  00F834  32                 	db	50
  4549  00F835  20                 	db	32
  4550  00F836  43                 	db	67
  4551  00F837  43                 	db	67
  4552  00F838  3A                 	db	58
  4553  00F839  00                 	db	0
  4554  00F83A  00                 	db	0
  4555  00F83B  00                 	db	0
  4556  00F83C  00                 	db	0
  4557  00F83D  00                 	db	0
  4558  00F83E  00                 	db	0
  4559  00F83F  00                 	db	0
  4560  00F840  00                 	db	0
  4561  00F841  00                 	db	0
  4562  00F842  00                 	db	0
  4563  00F843  00                 	db	0
  4564  00F844  50                 	db	80
  4565  00F845  33                 	db	51
  4566  00F846  20                 	db	32
  4567  00F847  43                 	db	67
  4568  00F848  43                 	db	67
  4569  00F849  3A                 	db	58
  4570  00F84A  00                 	db	0
  4571  00F84B  00                 	db	0
  4572  00F84C  00                 	db	0
  4573  00F84D  00                 	db	0
  4574  00F84E  00                 	db	0
  4575  00F84F  00                 	db	0
  4576  00F850  00                 	db	0
  4577  00F851  00                 	db	0
  4578  00F852  00                 	db	0
  4579  00F853  00                 	db	0
  4580  00F854  00                 	db	0
  4581  00F855  50                 	db	80
  4582  00F856  34                 	db	52
  4583  00F857  20                 	db	32
  4584  00F858  43                 	db	67
  4585  00F859  43                 	db	67
  4586  00F85A  3A                 	db	58
  4587  00F85B  00                 	db	0
  4588  00F85C  00                 	db	0
  4589  00F85D  00                 	db	0
  4590  00F85E  00                 	db	0
  4591  00F85F  00                 	db	0
  4592  00F860  00                 	db	0
  4593  00F861  00                 	db	0
  4594  00F862  00                 	db	0
  4595  00F863  00                 	db	0
  4596  00F864  00                 	db	0
  4597  00F865  00                 	db	0
  4598  00F866  50                 	db	80
  4599  00F867  35                 	db	53
  4600  00F868  20                 	db	32
  4601  00F869  43                 	db	67
  4602  00F86A  43                 	db	67
  4603  00F86B  3A                 	db	58
  4604  00F86C  00                 	db	0
  4605  00F86D  00                 	db	0
  4606  00F86E  00                 	db	0
  4607  00F86F  00                 	db	0
  4608  00F870  00                 	db	0
  4609  00F871  00                 	db	0
  4610  00F872  00                 	db	0
  4611  00F873  00                 	db	0
  4612  00F874  00                 	db	0
  4613  00F875  00                 	db	0
  4614  00F876  00                 	db	0
  4615  00F877  50                 	db	80
  4616  00F878  36                 	db	54
  4617  00F879  20                 	db	32
  4618  00F87A  43                 	db	67
  4619  00F87B  43                 	db	67
  4620  00F87C  3A                 	db	58
  4621  00F87D  00                 	db	0
  4622  00F87E  00                 	db	0
  4623  00F87F  00                 	db	0
  4624  00F880  00                 	db	0
  4625  00F881  00                 	db	0
  4626  00F882  00                 	db	0
  4627  00F883  00                 	db	0
  4628  00F884  00                 	db	0
  4629  00F885  00                 	db	0
  4630  00F886  00                 	db	0
  4631  00F887  00                 	db	0
  4632  00F888  50                 	db	80
  4633  00F889  37                 	db	55
  4634  00F88A  20                 	db	32
  4635  00F88B  43                 	db	67
  4636  00F88C  43                 	db	67
  4637  00F88D  3A                 	db	58
  4638  00F88E  00                 	db	0
  4639  00F88F  00                 	db	0
  4640  00F890  00                 	db	0
  4641  00F891  00                 	db	0
  4642  00F892  00                 	db	0
  4643  00F893  00                 	db	0
  4644  00F894  00                 	db	0
  4645  00F895  00                 	db	0
  4646  00F896  00                 	db	0
  4647  00F897  00                 	db	0
  4648  00F898  00                 	db	0
  4649  00F899  53                 	db	83
  4650  00F89A  31                 	db	49
  4651  00F89B  20                 	db	32
  4652  00F89C  43                 	db	67
  4653  00F89D  43                 	db	67
  4654  00F89E  3A                 	db	58
  4655  00F89F  20                 	db	32
  4656  00F8A0  00                 	db	0
  4657  00F8A1  00                 	db	0
  4658  00F8A2  00                 	db	0
  4659  00F8A3  00                 	db	0
  4660  00F8A4  00                 	db	0
  4661  00F8A5  00                 	db	0
  4662  00F8A6  00                 	db	0
  4663  00F8A7  00                 	db	0
  4664  00F8A8  00                 	db	0
  4665  00F8A9  00                 	db	0
  4666  00F8AA  53                 	db	83
  4667  00F8AB  32                 	db	50
  4668  00F8AC  20                 	db	32
  4669  00F8AD  43                 	db	67
  4670  00F8AE  43                 	db	67
  4671  00F8AF  3A                 	db	58
  4672  00F8B0  20                 	db	32
  4673  00F8B1  00                 	db	0
  4674  00F8B2  00                 	db	0
  4675  00F8B3  00                 	db	0
  4676  00F8B4  00                 	db	0
  4677  00F8B5  00                 	db	0
  4678  00F8B6  00                 	db	0
  4679  00F8B7  00                 	db	0
  4680  00F8B8  00                 	db	0
  4681  00F8B9  00                 	db	0
  4682  00F8BA  00                 	db	0
  4683  00F8BB  53                 	db	83
  4684  00F8BC  33                 	db	51
  4685  00F8BD  20                 	db	32
  4686  00F8BE  43                 	db	67
  4687  00F8BF  43                 	db	67
  4688  00F8C0  3A                 	db	58
  4689  00F8C1  20                 	db	32
  4690  00F8C2  00                 	db	0
  4691  00F8C3  00                 	db	0
  4692  00F8C4  00                 	db	0
  4693  00F8C5  00                 	db	0
  4694  00F8C6  00                 	db	0
  4695  00F8C7  00                 	db	0
  4696  00F8C8  00                 	db	0
  4697  00F8C9  00                 	db	0
  4698  00F8CA  00                 	db	0
  4699  00F8CB  00                 	db	0
  4700  00F8CC  53                 	db	83
  4701  00F8CD  34                 	db	52
  4702  00F8CE  20                 	db	32
  4703  00F8CF  43                 	db	67
  4704  00F8D0  43                 	db	67
  4705  00F8D1  3A                 	db	58
  4706  00F8D2  20                 	db	32
  4707  00F8D3  00                 	db	0
  4708  00F8D4  00                 	db	0
  4709  00F8D5  00                 	db	0
  4710  00F8D6  00                 	db	0
  4711  00F8D7  00                 	db	0
  4712  00F8D8  00                 	db	0
  4713  00F8D9  00                 	db	0
  4714  00F8DA  00                 	db	0
  4715  00F8DB  00                 	db	0
  4716  00F8DC  00                 	db	0
  4717  00F8DD  53                 	db	83
  4718  00F8DE  35                 	db	53
  4719  00F8DF  20                 	db	32
  4720  00F8E0  43                 	db	67
  4721  00F8E1  43                 	db	67
  4722  00F8E2  3A                 	db	58
  4723  00F8E3  20                 	db	32
  4724  00F8E4  00                 	db	0
  4725  00F8E5  00                 	db	0
  4726  00F8E6  00                 	db	0
  4727  00F8E7  00                 	db	0
  4728  00F8E8  00                 	db	0
  4729  00F8E9  00                 	db	0
  4730  00F8EA  00                 	db	0
  4731  00F8EB  00                 	db	0
  4732  00F8EC  00                 	db	0
  4733  00F8ED  00                 	db	0
  4734  00F8EE  53                 	db	83
  4735  00F8EF  36                 	db	54
  4736  00F8F0  20                 	db	32
  4737  00F8F1  43                 	db	67
  4738  00F8F2  43                 	db	67
  4739  00F8F3  3A                 	db	58
  4740  00F8F4  20                 	db	32
  4741  00F8F5  00                 	db	0
  4742  00F8F6  00                 	db	0
  4743  00F8F7  00                 	db	0
  4744  00F8F8  00                 	db	0
  4745  00F8F9  00                 	db	0
  4746  00F8FA  00                 	db	0
  4747  00F8FB  00                 	db	0
  4748  00F8FC  00                 	db	0
  4749  00F8FD  00                 	db	0
  4750  00F8FE  00                 	db	0
  4751  00F8FF  53                 	db	83
  4752  00F900  37                 	db	55
  4753  00F901  20                 	db	32
  4754  00F902  43                 	db	67
  4755  00F903  43                 	db	67
  4756  00F904  3A                 	db	58
  4757  00F905  20                 	db	32
  4758  00F906  00                 	db	0
  4759  00F907  00                 	db	0
  4760  00F908  00                 	db	0
  4761  00F909  00                 	db	0
  4762  00F90A  00                 	db	0
  4763  00F90B  00                 	db	0
  4764  00F90C  00                 	db	0
  4765  00F90D  00                 	db	0
  4766  00F90E  00                 	db	0
  4767  00F90F  00                 	db	0
  4768  00F910  4A                 	db	74
  4769  00F911  58                 	db	88
  4770  00F912  20                 	db	32
  4771  00F913  43                 	db	67
  4772  00F914  43                 	db	67
  4773  00F915  3A                 	db	58
  4774  00F916  20                 	db	32
  4775  00F917  00                 	db	0
  4776  00F918  00                 	db	0
  4777  00F919  00                 	db	0
  4778  00F91A  00                 	db	0
  4779  00F91B  00                 	db	0
  4780  00F91C  00                 	db	0
  4781  00F91D  00                 	db	0
  4782  00F91E  00                 	db	0
  4783  00F91F  00                 	db	0
  4784  00F920  00                 	db	0
  4785  00F921  4A                 	db	74
  4786  00F922  59                 	db	89
  4787  00F923  20                 	db	32
  4788  00F924  43                 	db	67
  4789  00F925  43                 	db	67
  4790  00F926  3A                 	db	58
  4791  00F927  20                 	db	32
  4792  00F928  00                 	db	0
  4793  00F929  00                 	db	0
  4794  00F92A  00                 	db	0
  4795  00F92B  00                 	db	0
  4796  00F92C  00                 	db	0
  4797  00F92D  00                 	db	0
  4798  00F92E  00                 	db	0
  4799  00F92F  00                 	db	0
  4800  00F930  00                 	db	0
  4801  00F931  00                 	db	0
  4802  00F932  4D                 	db	77
  4803  00F933  61                 	db	97
  4804  00F934  69                 	db	105
  4805  00F935  6E                 	db	110
  4806  00F936  20                 	db	32
  4807  00F937  63                 	db	99
  4808  00F938  68                 	db	104
  4809  00F939  61                 	db	97
  4810  00F93A  6E                 	db	110
  4811  00F93B  6E                 	db	110
  4812  00F93C  65                 	db	101
  4813  00F93D  6C                 	db	108
  4814  00F93E  00                 	db	0
  4815  00F93F  00                 	db	0
  4816  00F940  00                 	db	0
  4817  00F941  00                 	db	0
  4818  00F942  00                 	db	0
  4819  00F943  44                 	db	68
  4820  00F944  72                 	db	114
  4821  00F945  75                 	db	117
  4822  00F946  6D                 	db	109
  4823  00F947  20                 	db	32
  4824  00F948  63                 	db	99
  4825  00F949  68                 	db	104
  4826  00F94A  61                 	db	97
  4827  00F94B  6E                 	db	110
  4828  00F94C  6E                 	db	110
  4829  00F94D  65                 	db	101
  4830  00F94E  6C                 	db	108
  4831  00F94F  00                 	db	0
  4832  00F950  00                 	db	0
  4833  00F951  00                 	db	0
  4834  00F952  00                 	db	0
  4835  00F953  00                 	db	0
  4836  00F954  53                 	db	83
  4837  00F955  61                 	db	97
  4838  00F956  76                 	db	118
  4839  00F957  65                 	db	101
  4840  00F958  20                 	db	32
  4841  00F959  73                 	db	115
  4842  00F95A  65                 	db	101
  4843  00F95B  74                 	db	116
  4844  00F95C  74                 	db	116
  4845  00F95D  69                 	db	105
  4846  00F95E  6E                 	db	110
  4847  00F95F  67                 	db	103
  4848  00F960  73                 	db	115
  4849  00F961  00                 	db	0
  4850  00F962  00                 	db	0
  4851  00F963  00                 	db	0
  4852  00F964  00                 	db	0
  4853  00F965  4C                 	db	76
  4854  00F966  6F                 	db	111
  4855  00F967  61                 	db	97
  4856  00F968  64                 	db	100
  4857  00F969  20                 	db	32
  4858  00F96A  73                 	db	115
  4859  00F96B  65                 	db	101
  4860  00F96C  74                 	db	116
  4861  00F96D  74                 	db	116
  4862  00F96E  69                 	db	105
  4863  00F96F  6E                 	db	110
  4864  00F970  67                 	db	103
  4865  00F971  73                 	db	115
  4866  00F972  00                 	db	0
  4867  00F973  00                 	db	0
  4868  00F974  00                 	db	0
  4869  00F975  00                 	db	0
  4870  00F976  52                 	db	82
  4871  00F977  65                 	db	101
  4872  00F978  73                 	db	115
  4873  00F979  74                 	db	116
  4874  00F97A  6F                 	db	111
  4875  00F97B  72                 	db	114
  4876  00F97C  65                 	db	101
  4877  00F97D  20                 	db	32
  4878  00F97E  64                 	db	100
  4879  00F97F  65                 	db	101
  4880  00F980  66                 	db	102
  4881  00F981  61                 	db	97
  4882  00F982  75                 	db	117
  4883  00F983  6C                 	db	108
  4884  00F984  74                 	db	116
  4885  00F985  73                 	db	115
  4886  00F986  00                 	db	0
  4887  00F987  45                 	db	69
  4888  00F988  6E                 	db	110
  4889  00F989  63                 	db	99
  4890  00F98A  6F                 	db	111
  4891  00F98B  64                 	db	100
  4892  00F98C  65                 	db	101
  4893  00F98D  72                 	db	114
  4894  00F98E  20                 	db	32
  4895  00F98F  50                 	db	80
  4896  00F990  6F                 	db	111
  4897  00F991  6C                 	db	108
  4898  00F992  61                 	db	97
  4899  00F993  72                 	db	114
  4900  00F994  69                 	db	105
  4901  00F995  74                 	db	116
  4902  00F996  79                 	db	121
  4903  00F997  00                 	db	0
  4904  00F998  45                 	db	69
  4905  00F999  78                 	db	120
  4906  00F99A  69                 	db	105
  4907  00F99B  74                 	db	116
  4908  00F99C  00                 	db	0
  4909  00F99D  00                 	db	0
  4910  00F99E  00                 	db	0
  4911  00F99F  00                 	db	0
  4912  00F9A0  00                 	db	0
  4913  00F9A1  00                 	db	0
  4914  00F9A2  00                 	db	0
  4915  00F9A3  00                 	db	0
  4916  00F9A4  00                 	db	0
  4917  00F9A5  00                 	db	0
  4918  00F9A6  00                 	db	0
  4919  00F9A7  00                 	db	0
  4920  00F9A8  00                 	db	0
  4921  00F9A9  53                 	db	83
  4922  00F9AA  6C                 	db	108
  4923  00F9AB  6F                 	db	111
  4924  00F9AC  74                 	db	116
  4925  00F9AD  20                 	db	32
  4926  00F9AE  31                 	db	49
  4927  00F9AF  00                 	db	0
  4928  00F9B0  00                 	db	0
  4929  00F9B1  00                 	db	0
  4930  00F9B2  00                 	db	0
  4931  00F9B3  00                 	db	0
  4932  00F9B4  00                 	db	0
  4933  00F9B5  00                 	db	0
  4934  00F9B6  00                 	db	0
  4935  00F9B7  00                 	db	0
  4936  00F9B8  00                 	db	0
  4937  00F9B9  00                 	db	0
  4938  00F9BA  53                 	db	83
  4939  00F9BB  6C                 	db	108
  4940  00F9BC  6F                 	db	111
  4941  00F9BD  74                 	db	116
  4942  00F9BE  20                 	db	32
  4943  00F9BF  32                 	db	50
  4944  00F9C0  00                 	db	0
  4945  00F9C1  00                 	db	0
  4946  00F9C2  00                 	db	0
  4947  00F9C3  00                 	db	0
  4948  00F9C4  00                 	db	0
  4949  00F9C5  00                 	db	0
  4950  00F9C6  00                 	db	0
  4951  00F9C7  00                 	db	0
  4952  00F9C8  00                 	db	0
  4953  00F9C9  00                 	db	0
  4954  00F9CA  00                 	db	0
  4955  00F9CB  53                 	db	83
  4956  00F9CC  6C                 	db	108
  4957  00F9CD  6F                 	db	111
  4958  00F9CE  74                 	db	116
  4959  00F9CF  20                 	db	32
  4960  00F9D0  33                 	db	51
  4961  00F9D1  00                 	db	0
  4962  00F9D2  00                 	db	0
  4963  00F9D3  00                 	db	0
  4964  00F9D4  00                 	db	0
  4965  00F9D5  00                 	db	0
  4966  00F9D6  00                 	db	0
  4967  00F9D7  00                 	db	0
  4968  00F9D8  00                 	db	0
  4969  00F9D9  00                 	db	0
  4970  00F9DA  00                 	db	0
  4971  00F9DB  00                 	db	0
  4972  00F9DC  53                 	db	83
  4973  00F9DD  6C                 	db	108
  4974  00F9DE  6F                 	db	111
  4975  00F9DF  74                 	db	116
  4976  00F9E0  20                 	db	32
  4977  00F9E1  34                 	db	52
  4978  00F9E2  00                 	db	0
  4979  00F9E3  00                 	db	0
  4980  00F9E4  00                 	db	0
  4981  00F9E5  00                 	db	0
  4982  00F9E6  00                 	db	0
  4983  00F9E7  00                 	db	0
  4984  00F9E8  00                 	db	0
  4985  00F9E9  00                 	db	0
  4986  00F9EA  00                 	db	0
  4987  00F9EB  00                 	db	0
  4988  00F9EC  00                 	db	0
  4989  00F9ED  45                 	db	69
  4990  00F9EE  78                 	db	120
  4991  00F9EF  69                 	db	105
  4992  00F9F0  74                 	db	116
  4993  00F9F1  00                 	db	0
  4994  00F9F2  00                 	db	0
  4995  00F9F3  00                 	db	0
  4996  00F9F4  00                 	db	0
  4997  00F9F5  00                 	db	0
  4998  00F9F6  00                 	db	0
  4999  00F9F7  00                 	db	0
  5000  00F9F8  00                 	db	0
  5001  00F9F9  00                 	db	0
  5002  00F9FA  00                 	db	0
  5003  00F9FB  00                 	db	0
  5004  00F9FC  00                 	db	0
  5005  00F9FD  00                 	db	0
  5006  00F9FE  43                 	db	67
  5007  00F9FF  57                 	db	87
  5008  00FA00  20                 	db	32
  5009  00FA01  49                 	db	73
  5010  00FA02  53                 	db	83
  5011  00FA03  20                 	db	32
  5012  00FA04  49                 	db	73
  5013  00FA05  4E                 	db	78
  5014  00FA06  43                 	db	67
  5015  00FA07  52                 	db	82
  5016  00FA08  45                 	db	69
  5017  00FA09  41                 	db	65
  5018  00FA0A  53                 	db	83
  5019  00FA0B  45                 	db	69
  5020  00FA0C  00                 	db	0
  5021  00FA0D  00                 	db	0
  5022  00FA0E  00                 	db	0
  5023  00FA0F  43                 	db	67
  5024  00FA10  43                 	db	67
  5025  00FA11  57                 	db	87
  5026  00FA12  20                 	db	32
  5027  00FA13  49                 	db	73
  5028  00FA14  53                 	db	83
  5029  00FA15  20                 	db	32
  5030  00FA16  49                 	db	73
  5031  00FA17  4E                 	db	78
  5032  00FA18  43                 	db	67
  5033  00FA19  52                 	db	82
  5034  00FA1A  45                 	db	69
  5035  00FA1B  41                 	db	65
  5036  00FA1C  53                 	db	83
  5037  00FA1D  45                 	db	69
  5038  00FA1E  00                 	db	0
  5039  00FA1F  00                 	db	0
  5040  00FA20  41                 	db	65
  5041  00FA21  72                 	db	114
  5042  00FA22  70                 	db	112
  5043  00FA23  65                 	db	101
  5044  00FA24  67                 	db	103
  5045  00FA25  67                 	db	103
  5046  00FA26  69                 	db	105
  5047  00FA27  6F                 	db	111
  5048  00FA28  20                 	db	32
  5049  00FA29  4F                 	db	79
  5050  00FA2A  46                 	db	70
  5051  00FA2B  46                 	db	70
  5052  00FA2C  2F                 	db	47
  5053  00FA2D  4F                 	db	79
  5054  00FA2E  4E                 	db	78
  5055  00FA2F  00                 	db	0
  5056  00FA30  00                 	db	0
  5057  00FA31  54                 	db	84
  5058  00FA32  65                 	db	101
  5059  00FA33  6D                 	db	109
  5060  00FA34  70                 	db	112
  5061  00FA35  6F                 	db	111
  5062  00FA36  00                 	db	0
  5063  00FA37  00                 	db	0
  5064  00FA38  00                 	db	0
  5065  00FA39  00                 	db	0
  5066  00FA3A  00                 	db	0
  5067  00FA3B  00                 	db	0
  5068  00FA3C  00                 	db	0
  5069  00FA3D  00                 	db	0
  5070  00FA3E  00                 	db	0
  5071  00FA3F  00                 	db	0
  5072  00FA40  00                 	db	0
  5073  00FA41  00                 	db	0
  5074  00FA42  4F                 	db	79
  5075  00FA43  63                 	db	99
  5076  00FA44  74                 	db	116
  5077  00FA45  61                 	db	97
  5078  00FA46  76                 	db	118
  5079  00FA47  65                 	db	101
  5080  00FA48  20                 	db	32
  5081  00FA49  52                 	db	82
  5082  00FA4A  61                 	db	97
  5083  00FA4B  6E                 	db	110
  5084  00FA4C  67                 	db	103
  5085  00FA4D  65                 	db	101
  5086  00FA4E  00                 	db	0
  5087  00FA4F  00                 	db	0
  5088  00FA50  00                 	db	0
  5089  00FA51  00                 	db	0
  5090  00FA52  00                 	db	0
  5091  00FA53  41                 	db	65
  5092  00FA54  72                 	db	114
  5093  00FA55  70                 	db	112
  5094  00FA56  65                 	db	101
  5095  00FA57  67                 	db	103
  5096  00FA58  67                 	db	103
  5097  00FA59  69                 	db	105
  5098  00FA5A  6F                 	db	111
  5099  00FA5B  20                 	db	32
  5100  00FA5C  54                 	db	84
  5101  00FA5D  79                 	db	121
  5102  00FA5E  70                 	db	112
  5103  00FA5F  65                 	db	101
  5104  00FA60  00                 	db	0
  5105  00FA61  00                 	db	0
  5106  00FA62  00                 	db	0
  5107  00FA63  00                 	db	0
  5108  00FA64  4E                 	db	78
  5109  00FA65  6F                 	db	111
  5110  00FA66  74                 	db	116
  5111  00FA67  65                 	db	101
  5112  00FA68  20                 	db	32
  5113  00FA69  4C                 	db	76
  5114  00FA6A  65                 	db	101
  5115  00FA6B  6E                 	db	110
  5116  00FA6C  67                 	db	103
  5117  00FA6D  74                 	db	116
  5118  00FA6E  68                 	db	104
  5119  00FA6F  00                 	db	0
  5120  00FA70  00                 	db	0
  5121  00FA71  00                 	db	0
  5122  00FA72  00                 	db	0
  5123  00FA73  00                 	db	0
  5124  00FA74  00                 	db	0
  5125  00FA75  4C                 	db	76
  5126  00FA76  61                 	db	97
  5127  00FA77  74                 	db	116
  5128  00FA78  63                 	db	99
  5129  00FA79  68                 	db	104
  5130  00FA7A  2F                 	db	47
  5131  00FA7B  41                 	db	65
  5132  00FA7C  75                 	db	117
  5133  00FA7D  74                 	db	116
  5134  00FA7E  6F                 	db	111
  5135  00FA7F  20                 	db	32
  5136  00FA80  4C                 	db	76
  5137  00FA81  61                 	db	97
  5138  00FA82  74                 	db	116
  5139  00FA83  63                 	db	99
  5140  00FA84  68                 	db	104
  5141  00FA85  00                 	db	0
  5142  00FA86  55                 	db	85
  5143  00FA87  6E                 	db	110
  5144  00FA88  2D                 	db	45
  5145  00FA89  6C                 	db	108
  5146  00FA8A  61                 	db	97
  5147  00FA8B  74                 	db	116
  5148  00FA8C  63                 	db	99
  5149  00FA8D  68                 	db	104
  5150  00FA8E  20                 	db	32
  5151  00FA8F  4D                 	db	77
  5152  00FA90  6F                 	db	111
  5153  00FA91  64                 	db	100
  5154  00FA92  65                 	db	101
  5155  00FA93  00                 	db	0
  5156  00FA94  00                 	db	0
  5157  00FA95  00                 	db	0
  5158  00FA96  00                 	db	0
  5159  00FA97  52                 	db	82
  5160  00FA98  61                 	db	97
  5161  00FA99  6E                 	db	110
  5162  00FA9A  64                 	db	100
  5163  00FA9B  6F                 	db	111
  5164  00FA9C  6D                 	db	109
  5165  00FA9D  69                 	db	105
  5166  00FA9E  7A                 	db	122
  5167  00FA9F  65                 	db	101
  5168  00FAA0  2F                 	db	47
  5169  00FAA1  53                 	db	83
  5170  00FAA2  6B                 	db	107
  5171  00FAA3  69                 	db	105
  5172  00FAA4  70                 	db	112
  5173  00FAA5  00                 	db	0
  5174  00FAA6  00                 	db	0
  5175  00FAA7  00                 	db	0
  5176  00FAA8  4C                 	db	76
  5177  00FAA9  61                 	db	97
  5178  00FAAA  73                 	db	115
  5179  00FAAB  74                 	db	116
  5180  00FAAC  20                 	db	32
  5181  00FAAD  4E                 	db	78
  5182  00FAAE  6F                 	db	111
  5183  00FAAF  74                 	db	116
  5184  00FAB0  65                 	db	101
  5185  00FAB1  20                 	db	32
  5186  00FAB2  4D                 	db	77
  5187  00FAB3  6F                 	db	111
  5188  00FAB4  64                 	db	100
  5189  00FAB5  65                 	db	101
  5190  00FAB6  00                 	db	0
  5191  00FAB7  00                 	db	0
  5192  00FAB8  00                 	db	0
  5193  00FAB9  41                 	db	65
  5194  00FABA  52                 	db	82
  5195  00FABB  50                 	db	80
  5196  00FABC  45                 	db	69
  5197  00FABD  47                 	db	71
  5198  00FABE  47                 	db	71
  5199  00FABF  49                 	db	73
  5200  00FAC0  41                 	db	65
  5201  00FAC1  54                 	db	84
  5202  00FAC2  4F                 	db	79
  5203  00FAC3  52                 	db	82
  5204  00FAC4  20                 	db	32
  5205  00FAC5  4F                 	db	79
  5206  00FAC6  46                 	db	70
  5207  00FAC7  46                 	db	70
  5208  00FAC8  00                 	db	0
  5209  00FAC9  00                 	db	0
  5210  00FACA  41                 	db	65
  5211  00FACB  52                 	db	82
  5212  00FACC  50                 	db	80
  5213  00FACD  45                 	db	69
  5214  00FACE  47                 	db	71
  5215  00FACF  47                 	db	71
  5216  00FAD0  49                 	db	73
  5217  00FAD1  41                 	db	65
  5218  00FAD2  54                 	db	84
  5219  00FAD3  4F                 	db	79
  5220  00FAD4  52                 	db	82
  5221  00FAD5  20                 	db	32
  5222  00FAD6  4F                 	db	79
  5223  00FAD7  4E                 	db	78
  5224  00FAD8  00                 	db	0
  5225  00FAD9  00                 	db	0
  5226  00FADA  00                 	db	0
  5227  00FADB  55                 	db	85
  5228  00FADC  50                 	db	80
  5229  00FADD  00                 	db	0
  5230  00FADE  00                 	db	0
  5231  00FADF  00                 	db	0
  5232  00FAE0  00                 	db	0
  5233  00FAE1  00                 	db	0
  5234  00FAE2  00                 	db	0
  5235  00FAE3  00                 	db	0
  5236  00FAE4  00                 	db	0
  5237  00FAE5  00                 	db	0
  5238  00FAE6  00                 	db	0
  5239  00FAE7  00                 	db	0
  5240  00FAE8  00                 	db	0
  5241  00FAE9  00                 	db	0
  5242  00FAEA  00                 	db	0
  5243  00FAEB  00                 	db	0
  5244  00FAEC  44                 	db	68
  5245  00FAED  4F                 	db	79
  5246  00FAEE  57                 	db	87
  5247  00FAEF  4E                 	db	78
  5248  00FAF0  00                 	db	0
  5249  00FAF1  00                 	db	0
  5250  00FAF2  00                 	db	0
  5251  00FAF3  00                 	db	0
  5252  00FAF4  00                 	db	0
  5253  00FAF5  00                 	db	0
  5254  00FAF6  00                 	db	0
  5255  00FAF7  00                 	db	0
  5256  00FAF8  00                 	db	0
  5257  00FAF9  00                 	db	0
  5258  00FAFA  00                 	db	0
  5259  00FAFB  00                 	db	0
  5260  00FAFC  00                 	db	0
  5261  00FAFD  55                 	db	85
  5262  00FAFE  50                 	db	80
  5263  00FAFF  2F                 	db	47
  5264  00FB00  44                 	db	68
  5265  00FB01  4F                 	db	79
  5266  00FB02  57                 	db	87
  5267  00FB03  4E                 	db	78
  5268  00FB04  00                 	db	0
  5269  00FB05  00                 	db	0
  5270  00FB06  00                 	db	0
  5271  00FB07  00                 	db	0
  5272  00FB08  00                 	db	0
  5273  00FB09  00                 	db	0
  5274  00FB0A  00                 	db	0
  5275  00FB0B  00                 	db	0
  5276  00FB0C  00                 	db	0
  5277  00FB0D  00                 	db	0
  5278  00FB0E  44                 	db	68
  5279  00FB0F  4F                 	db	79
  5280  00FB10  57                 	db	87
  5281  00FB11  4E                 	db	78
  5282  00FB12  2F                 	db	47
  5283  00FB13  55                 	db	85
  5284  00FB14  50                 	db	80
  5285  00FB15  00                 	db	0
  5286  00FB16  00                 	db	0
  5287  00FB17  00                 	db	0
  5288  00FB18  00                 	db	0
  5289  00FB19  00                 	db	0
  5290  00FB1A  00                 	db	0
  5291  00FB1B  00                 	db	0
  5292  00FB1C  00                 	db	0
  5293  00FB1D  00                 	db	0
  5294  00FB1E  00                 	db	0
  5295  00FB1F  53                 	db	83
  5296  00FB20  48                 	db	72
  5297  00FB21  55                 	db	85
  5298  00FB22  46                 	db	70
  5299  00FB23  46                 	db	70
  5300  00FB24  4C                 	db	76
  5301  00FB25  45                 	db	69
  5302  00FB26  00                 	db	0
  5303  00FB27  00                 	db	0
  5304  00FB28  00                 	db	0
  5305  00FB29  00                 	db	0
  5306  00FB2A  00                 	db	0
  5307  00FB2B  00                 	db	0
  5308  00FB2C  00                 	db	0
  5309  00FB2D  00                 	db	0
  5310  00FB2E  00                 	db	0
  5311  00FB2F  00                 	db	0
  5312  00FB30  52                 	db	82
  5313  00FB31  41                 	db	65
  5314  00FB32  4E                 	db	78
  5315  00FB33  44                 	db	68
  5316  00FB34  4F                 	db	79
  5317  00FB35  4D                 	db	77
  5318  00FB36  00                 	db	0
  5319  00FB37  00                 	db	0
  5320  00FB38  00                 	db	0
  5321  00FB39  00                 	db	0
  5322  00FB3A  00                 	db	0
  5323  00FB3B  00                 	db	0
  5324  00FB3C  00                 	db	0
  5325  00FB3D  00                 	db	0
  5326  00FB3E  00                 	db	0
  5327  00FB3F  00                 	db	0
  5328  00FB40  00                 	db	0
  5329  00FB41  41                 	db	65
  5330  00FB42  53                 	db	83
  5331  00FB43  20                 	db	32
  5332  00FB44  50                 	db	80
  5333  00FB45  52                 	db	82
  5334  00FB46  45                 	db	69
  5335  00FB47  53                 	db	83
  5336  00FB48  53                 	db	83
  5337  00FB49  45                 	db	69
  5338  00FB4A  44                 	db	68
  5339  00FB4B  00                 	db	0
  5340  00FB4C  00                 	db	0
  5341  00FB4D  00                 	db	0
  5342  00FB4E  00                 	db	0
  5343  00FB4F  00                 	db	0
  5344  00FB50  00                 	db	0
  5345  00FB51  00                 	db	0
  5346  00FB52  31                 	db	49
  5347  00FB53  2F                 	db	47
  5348  00FB54  34                 	db	52
  5349  00FB55  00                 	db	0
  5350  00FB56  00                 	db	0
  5351  00FB57  00                 	db	0
  5352  00FB58  00                 	db	0
  5353  00FB59  00                 	db	0
  5354  00FB5A  00                 	db	0
  5355  00FB5B  00                 	db	0
  5356  00FB5C  00                 	db	0
  5357  00FB5D  00                 	db	0
  5358  00FB5E  00                 	db	0
  5359  00FB5F  00                 	db	0
  5360  00FB60  00                 	db	0
  5361  00FB61  00                 	db	0
  5362  00FB62  00                 	db	0
  5363  00FB63  31                 	db	49
  5364  00FB64  2F                 	db	47
  5365  00FB65  34                 	db	52
  5366  00FB66  20                 	db	32
  5367  00FB67  44                 	db	68
  5368  00FB68  4F                 	db	79
  5369  00FB69  54                 	db	84
  5370  00FB6A  54                 	db	84
  5371  00FB6B  45                 	db	69
  5372  00FB6C  44                 	db	68
  5373  00FB6D  00                 	db	0
  5374  00FB6E  00                 	db	0
  5375  00FB6F  00                 	db	0
  5376  00FB70  00                 	db	0
  5377  00FB71  00                 	db	0
  5378  00FB72  00                 	db	0
  5379  00FB73  00                 	db	0
  5380  00FB74  31                 	db	49
  5381  00FB75  2F                 	db	47
  5382  00FB76  34                 	db	52
  5383  00FB77  20                 	db	32
  5384  00FB78  54                 	db	84
  5385  00FB79  52                 	db	82
  5386  00FB7A  49                 	db	73
  5387  00FB7B  50                 	db	80
  5388  00FB7C  4C                 	db	76
  5389  00FB7D  45                 	db	69
  5390  00FB7E  54                 	db	84
  5391  00FB7F  00                 	db	0
  5392  00FB80  00                 	db	0
  5393  00FB81  00                 	db	0
  5394  00FB82  00                 	db	0
  5395  00FB83  00                 	db	0
  5396  00FB84  00                 	db	0
  5397  00FB85  31                 	db	49
  5398  00FB86  2F                 	db	47
  5399  00FB87  38                 	db	56
  5400  00FB88  00                 	db	0
  5401  00FB89  00                 	db	0
  5402  00FB8A  00                 	db	0
  5403  00FB8B  00                 	db	0
  5404  00FB8C  00                 	db	0
  5405  00FB8D  00                 	db	0
  5406  00FB8E  00                 	db	0
  5407  00FB8F  00                 	db	0
  5408  00FB90  00                 	db	0
  5409  00FB91  00                 	db	0
  5410  00FB92  00                 	db	0
  5411  00FB93  00                 	db	0
  5412  00FB94  00                 	db	0
  5413  00FB95  00                 	db	0
  5414  00FB96  31                 	db	49
  5415  00FB97  2F                 	db	47
  5416  00FB98  38                 	db	56
  5417  00FB99  20                 	db	32
  5418  00FB9A  44                 	db	68
  5419  00FB9B  4F                 	db	79
  5420  00FB9C  54                 	db	84
  5421  00FB9D  54                 	db	84
  5422  00FB9E  45                 	db	69
  5423  00FB9F  44                 	db	68
  5424  00FBA0  00                 	db	0
  5425  00FBA1  00                 	db	0
  5426  00FBA2  00                 	db	0
  5427  00FBA3  00                 	db	0
  5428  00FBA4  00                 	db	0
  5429  00FBA5  00                 	db	0
  5430  00FBA6  00                 	db	0
  5431  00FBA7  31                 	db	49
  5432  00FBA8  2F                 	db	47
  5433  00FBA9  38                 	db	56
  5434  00FBAA  20                 	db	32
  5435  00FBAB  54                 	db	84
  5436  00FBAC  52                 	db	82
  5437  00FBAD  49                 	db	73
  5438  00FBAE  50                 	db	80
  5439  00FBAF  4C                 	db	76
  5440  00FBB0  45                 	db	69
  5441  00FBB1  54                 	db	84
  5442  00FBB2  00                 	db	0
  5443  00FBB3  00                 	db	0
  5444  00FBB4  00                 	db	0
  5445  00FBB5  00                 	db	0
  5446  00FBB6  00                 	db	0
  5447  00FBB7  00                 	db	0
  5448  00FBB8  31                 	db	49
  5449  00FBB9  2F                 	db	47
  5450  00FBBA  31                 	db	49
  5451  00FBBB  36                 	db	54
  5452  00FBBC  00                 	db	0
  5453  00FBBD  00                 	db	0
  5454  00FBBE  00                 	db	0
  5455  00FBBF  00                 	db	0
  5456  00FBC0  00                 	db	0
  5457  00FBC1  00                 	db	0
  5458  00FBC2  00                 	db	0
  5459  00FBC3  00                 	db	0
  5460  00FBC4  00                 	db	0
  5461  00FBC5  00                 	db	0
  5462  00FBC6  00                 	db	0
  5463  00FBC7  00                 	db	0
  5464  00FBC8  00                 	db	0
  5465  00FBC9  31                 	db	49
  5466  00FBCA  2F                 	db	47
  5467  00FBCB  31                 	db	49
  5468  00FBCC  36                 	db	54
  5469  00FBCD  20                 	db	32
  5470  00FBCE  44                 	db	68
  5471  00FBCF  4F                 	db	79
  5472  00FBD0  54                 	db	84
  5473  00FBD1  54                 	db	84
  5474  00FBD2  45                 	db	69
  5475  00FBD3  44                 	db	68
  5476  00FBD4  00                 	db	0
  5477  00FBD5  00                 	db	0
  5478  00FBD6  00                 	db	0
  5479  00FBD7  00                 	db	0
  5480  00FBD8  00                 	db	0
  5481  00FBD9  00                 	db	0
  5482  00FBDA  31                 	db	49
  5483  00FBDB  2F                 	db	47
  5484  00FBDC  31                 	db	49
  5485  00FBDD  36                 	db	54
  5486  00FBDE  20                 	db	32
  5487  00FBDF  54                 	db	84
  5488  00FBE0  52                 	db	82
  5489  00FBE1  49                 	db	73
  5490  00FBE2  50                 	db	80
  5491  00FBE3  4C                 	db	76
  5492  00FBE4  45                 	db	69
  5493  00FBE5  54                 	db	84
  5494  00FBE6  00                 	db	0
  5495  00FBE7  00                 	db	0
  5496  00FBE8  00                 	db	0
  5497  00FBE9  00                 	db	0
  5498  00FBEA  00                 	db	0
  5499  00FBEB  31                 	db	49
  5500  00FBEC  2F                 	db	47
  5501  00FBED  33                 	db	51
  5502  00FBEE  32                 	db	50
  5503  00FBEF  00                 	db	0
  5504  00FBF0  00                 	db	0
  5505  00FBF1  00                 	db	0
  5506  00FBF2  00                 	db	0
  5507  00FBF3  00                 	db	0
  5508  00FBF4  00                 	db	0
  5509  00FBF5  00                 	db	0
  5510  00FBF6  00                 	db	0
  5511  00FBF7  00                 	db	0
  5512  00FBF8  00                 	db	0
  5513  00FBF9  00                 	db	0
  5514  00FBFA  00                 	db	0
  5515  00FBFB  00                 	db	0
  5516  00FBFC  31                 	db	49
  5517  00FBFD  2F                 	db	47
  5518  00FBFE  33                 	db	51
  5519  00FBFF  32                 	db	50
  5520  00FC00  20                 	db	32
  5521  00FC01  44                 	db	68
  5522  00FC02  4F                 	db	79
  5523  00FC03  54                 	db	84
  5524  00FC04  54                 	db	84
  5525  00FC05  45                 	db	69
  5526  00FC06  44                 	db	68
  5527  00FC07  00                 	db	0
  5528  00FC08  00                 	db	0
  5529  00FC09  00                 	db	0
  5530  00FC0A  00                 	db	0
  5531  00FC0B  00                 	db	0
  5532  00FC0C  00                 	db	0
  5533  00FC0D  31                 	db	49
  5534  00FC0E  2F                 	db	47
  5535  00FC0F  33                 	db	51
  5536  00FC10  32                 	db	50
  5537  00FC11  20                 	db	32
  5538  00FC12  54                 	db	84
  5539  00FC13  52                 	db	82
  5540  00FC14  49                 	db	73
  5541  00FC15  50                 	db	80
  5542  00FC16  4C                 	db	76
  5543  00FC17  45                 	db	69
  5544  00FC18  54                 	db	84
  5545  00FC19  00                 	db	0
  5546  00FC1A  00                 	db	0
  5547  00FC1B  00                 	db	0
  5548  00FC1C  00                 	db	0
  5549  00FC1D  00                 	db	0
  5550  00FC1E  53                 	db	83
  5551  00FC1F  45                 	db	69
  5552  00FC20  54                 	db	84
  5553  00FC21  2F                 	db	47
  5554  00FC22  43                 	db	67
  5555  00FC23  4C                 	db	76
  5556  00FC24  45                 	db	69
  5557  00FC25  41                 	db	65
  5558  00FC26  52                 	db	82
  5559  00FC27  20                 	db	32
  5560  00FC28  4C                 	db	76
  5561  00FC29  41                 	db	65
  5562  00FC2A  54                 	db	84
  5563  00FC2B  43                 	db	67
  5564  00FC2C  48                 	db	72
  5565  00FC2D  00                 	db	0
  5566  00FC2E  00                 	db	0
  5567  00FC2F  41                 	db	65
  5568  00FC30  55                 	db	85
  5569  00FC31  54                 	db	84
  5570  00FC32  4F                 	db	79
  5571  00FC33  20                 	db	32
  5572  00FC34  4C                 	db	76
  5573  00FC35  41                 	db	65
  5574  00FC36  54                 	db	84
  5575  00FC37  43                 	db	67
  5576  00FC38  48                 	db	72
  5577  00FC39  00                 	db	0
  5578  00FC3A  00                 	db	0
  5579  00FC3B  00                 	db	0
  5580  00FC3C  00                 	db	0
  5581  00FC3D  00                 	db	0
  5582  00FC3E  00                 	db	0
  5583  00FC3F  00                 	db	0
  5584  00FC40  55                 	db	85
  5585  00FC41  6E                 	db	110
  5586  00FC42  2D                 	db	45
  5587  00FC43  4C                 	db	76
  5588  00FC44  61                 	db	97
  5589  00FC45  74                 	db	116
  5590  00FC46  63                 	db	99
  5591  00FC47  68                 	db	104
  5592  00FC48  20                 	db	32
  5593  00FC49  4D                 	db	77
  5594  00FC4A  6F                 	db	111
  5595  00FC4B  64                 	db	100
  5596  00FC4C  65                 	db	101
  5597  00FC4D  00                 	db	0
  5598  00FC4E  00                 	db	0
  5599  00FC4F  00                 	db	0
  5600  00FC50  00                 	db	0
  5601  00FC51  55                 	db	85
  5602  00FC52  4E                 	db	78
  5603  00FC53  4C                 	db	76
  5604  00FC54  41                 	db	65
  5605  00FC55  54                 	db	84
  5606  00FC56  43                 	db	67
  5607  00FC57  48                 	db	72
  5608  00FC58  20                 	db	32
  5609  00FC59  41                 	db	65
  5610  00FC5A  4C                 	db	76
  5611  00FC5B  4C                 	db	76
  5612  00FC5C  00                 	db	0
  5613  00FC5D  00                 	db	0
  5614  00FC5E  00                 	db	0
  5615  00FC5F  00                 	db	0
  5616  00FC60  00                 	db	0
  5617  00FC61  00                 	db	0
  5618  00FC62  4F                 	db	79
  5619  00FC63  4E                 	db	78
  5620  00FC64  45                 	db	69
  5621  00FC65  20                 	db	32
  5622  00FC66  41                 	db	65
  5623  00FC67  54                 	db	84
  5624  00FC68  20                 	db	32
  5625  00FC69  41                 	db	65
  5626  00FC6A  20                 	db	32
  5627  00FC6B  54                 	db	84
  5628  00FC6C  49                 	db	73
  5629  00FC6D  4D                 	db	77
  5630  00FC6E  45                 	db	69
  5631  00FC6F  00                 	db	0
  5632  00FC70  00                 	db	0
  5633  00FC71  00                 	db	0
  5634  00FC72  00                 	db	0
  5635  00FC73  52                 	db	82
  5636  00FC74  61                 	db	97
  5637  00FC75  6E                 	db	110
  5638  00FC76  64                 	db	100
  5639  00FC77  6F                 	db	111
  5640  00FC78  6D                 	db	109
  5641  00FC79  69                 	db	105
  5642  00FC7A  7A                 	db	122
  5643  00FC7B  65                 	db	101
  5644  00FC7C  00                 	db	0
  5645  00FC7D  00                 	db	0
  5646  00FC7E  00                 	db	0
  5647  00FC7F  00                 	db	0
  5648  00FC80  00                 	db	0
  5649  00FC81  00                 	db	0
  5650  00FC82  00                 	db	0
  5651  00FC83  00                 	db	0
  5652  00FC84  53                 	db	83
  5653  00FC85  6B                 	db	107
  5654  00FC86  69                 	db	105
  5655  00FC87  70                 	db	112
  5656  00FC88  20                 	db	32
  5657  00FC89  46                 	db	70
  5658  00FC8A  69                 	db	105
  5659  00FC8B  72                 	db	114
  5660  00FC8C  73                 	db	115
  5661  00FC8D  74                 	db	116
  5662  00FC8E  2F                 	db	47
  5663  00FC8F  4C                 	db	76
  5664  00FC90  61                 	db	97
  5665  00FC91  73                 	db	115
  5666  00FC92  74                 	db	116
  5667  00FC93  00                 	db	0
  5668  00FC94  00                 	db	0
  5669  00FC95  52                 	db	82
  5670  00FC96  41                 	db	65
  5671  00FC97  4E                 	db	78
  5672  00FC98  44                 	db	68
  5673  00FC99  4F                 	db	79
  5674  00FC9A  4D                 	db	77
  5675  00FC9B  49                 	db	73
  5676  00FC9C  5A                 	db	90
  5677  00FC9D  45                 	db	69
  5678  00FC9E  20                 	db	32
  5679  00FC9F  41                 	db	65
  5680  00FCA0  55                 	db	85
  5681  00FCA1  54                 	db	84
  5682  00FCA2  4F                 	db	79
  5683  00FCA3  00                 	db	0
  5684  00FCA4  00                 	db	0
  5685  00FCA5  00                 	db	0
  5686  00FCA6  52                 	db	82
  5687  00FCA7  41                 	db	65
  5688  00FCA8  4E                 	db	78
  5689  00FCA9  44                 	db	68
  5690  00FCAA  4F                 	db	79
  5691  00FCAB  4D                 	db	77
  5692  00FCAC  49                 	db	73
  5693  00FCAD  5A                 	db	90
  5694  00FCAE  45                 	db	69
  5695  00FCAF  20                 	db	32
  5696  00FCB0  4F                 	db	79
  5697  00FCB1  4E                 	db	78
  5698  00FCB2  43                 	db	67
  5699  00FCB3  45                 	db	69
  5700  00FCB4  00                 	db	0
  5701  00FCB5  00                 	db	0
  5702  00FCB6  00                 	db	0
  5703  00FCB7  4B                 	db	75
  5704  00FCB8  65                 	db	101
  5705  00FCB9  79                 	db	121
  5706  00FCBA  20                 	db	32
  5707  00FCBB  70                 	db	112
  5708  00FCBC  72                 	db	114
  5709  00FCBD  65                 	db	101
  5710  00FCBE  73                 	db	115
  5711  00FCBF  73                 	db	115
  5712  00FCC0  00                 	db	0
  5713  00FCC1  00                 	db	0
  5714  00FCC2  00                 	db	0
  5715  00FCC3  00                 	db	0
  5716  00FCC4  00                 	db	0
  5717  00FCC5  00                 	db	0
  5718  00FCC6  00                 	db	0
  5719  00FCC7  00                 	db	0
  5720  00FCC8  4B                 	db	75
  5721  00FCC9  65                 	db	101
  5722  00FCCA  79                 	db	121
  5723  00FCCB  20                 	db	32
  5724  00FCCC  72                 	db	114
  5725  00FCCD  65                 	db	101
  5726  00FCCE  6C                 	db	108
  5727  00FCCF  65                 	db	101
  5728  00FCD0  61                 	db	97
  5729  00FCD1  73                 	db	115
  5730  00FCD2  65                 	db	101
  5731  00FCD3  00                 	db	0
  5732  00FCD4  00                 	db	0
  5733  00FCD5  00                 	db	0
  5734  00FCD6  00                 	db	0
  5735  00FCD7  00                 	db	0
  5736  00FCD8  00                 	db	0
  5737  00FCD9  54                 	db	84
  5738  00FCDA  72                 	db	114
  5739  00FCDB  61                 	db	97
  5740  00FCDC  6E                 	db	110
  5741  00FCDD  73                 	db	115
  5742  00FCDE  70                 	db	112
  5743  00FCDF  6F                 	db	111
  5744  00FCE0  73                 	db	115
  5745  00FCE1  65                 	db	101
  5746  00FCE2  00                 	db	0
  5747  00FCE3  00                 	db	0
  5748  00FCE4  00                 	db	0
  5749  00FCE5  00                 	db	0
  5750  00FCE6  00                 	db	0
  5751  00FCE7  00                 	db	0
  5752  00FCE8  00                 	db	0
  5753  00FCE9  00                 	db	0
  5754  00FCEA  52                 	db	82
  5755  00FCEB  65                 	db	101
  5756  00FCEC  73                 	db	115
  5757  00FCED  65                 	db	101
  5758  00FCEE  74                 	db	116
  5759  00FCEF  00                 	db	0
  5760  00FCF0  00                 	db	0
  5761  00FCF1  00                 	db	0
  5762  00FCF2  00                 	db	0
  5763  00FCF3  00                 	db	0
  5764  00FCF4  00                 	db	0
  5765  00FCF5  00                 	db	0
  5766  00FCF6  00                 	db	0
  5767  00FCF7  00                 	db	0
  5768  00FCF8  00                 	db	0
  5769  00FCF9  00                 	db	0
  5770  00FCFA  00                 	db	0
  5771  00FCFB                     __end_of_LCD_STRINGS:
  5772                           	opt stack 0
  5773  00FCFB                     _locrian_key:
  5774                           	opt stack 0
  5775  00FCFB  0B                 	db	11
  5776  00FCFC  01                 	db	1
  5777  00FCFD  03                 	db	3
  5778  00FCFE  05                 	db	5
  5779  00FCFF  06                 	db	6
  5780  00FD00  08                 	db	8
  5781  00FD01  0A                 	db	10
  5782  00FD02  0C                 	db	12
  5783  00FD03  0D                 	db	13
  5784  00FD04  0F                 	db	15
  5785  00FD05  11                 	db	17
  5786  00FD06  12                 	db	18
  5787  00FD07  14                 	db	20
  5788  00FD08  16                 	db	22
  5789  00FD09  18                 	db	24
  5790  00FD0A                     __end_of_locrian_key:
  5791                           	opt stack 0
  5792  00FD0A                     _aeolian_key:
  5793                           	opt stack 0
  5794  00FD0A  09                 	db	9
  5795  00FD0B  02                 	db	2
  5796  00FD0C  03                 	db	3
  5797  00FD0D  05                 	db	5
  5798  00FD0E  07                 	db	7
  5799  00FD0F  08                 	db	8
  5800  00FD10  0A                 	db	10
  5801  00FD11  0C                 	db	12
  5802  00FD12  0E                 	db	14
  5803  00FD13  0F                 	db	15
  5804  00FD14  11                 	db	17
  5805  00FD15  13                 	db	19
  5806  00FD16  14                 	db	20
  5807  00FD17  16                 	db	22
  5808  00FD18  18                 	db	24
  5809  00FD19                     __end_of_aeolian_key:
  5810                           	opt stack 0
  5811  00FD19                     _mixolydian_key:
  5812                           	opt stack 0
  5813  00FD19  07                 	db	7
  5814  00FD1A  02                 	db	2
  5815  00FD1B  04                 	db	4
  5816  00FD1C  05                 	db	5
  5817  00FD1D  07                 	db	7
  5818  00FD1E  09                 	db	9
  5819  00FD1F  0A                 	db	10
  5820  00FD20  0C                 	db	12
  5821  00FD21  0E                 	db	14
  5822  00FD22  10                 	db	16
  5823  00FD23  11                 	db	17
  5824  00FD24  13                 	db	19
  5825  00FD25  15                 	db	21
  5826  00FD26  16                 	db	22
  5827  00FD27  18                 	db	24
  5828  00FD28                     __end_of_mixolydian_key:
  5829                           	opt stack 0
  5830  00FD28                     _lydian_key:
  5831                           	opt stack 0
  5832  00FD28  05                 	db	5
  5833  00FD29  02                 	db	2
  5834  00FD2A  04                 	db	4
  5835  00FD2B  06                 	db	6
  5836  00FD2C  07                 	db	7
  5837  00FD2D  09                 	db	9
  5838  00FD2E  0B                 	db	11
  5839  00FD2F  0C                 	db	12
  5840  00FD30  0E                 	db	14
  5841  00FD31  10                 	db	16
  5842  00FD32  12                 	db	18
  5843  00FD33  13                 	db	19
  5844  00FD34  15                 	db	21
  5845  00FD35  17                 	db	23
  5846  00FD36  18                 	db	24
  5847  00FD37                     __end_of_lydian_key:
  5848                           	opt stack 0
  5849  00FD37                     _phrygian_key:
  5850                           	opt stack 0
  5851  00FD37  04                 	db	4
  5852  00FD38  01                 	db	1
  5853  00FD39  03                 	db	3
  5854  00FD3A  05                 	db	5
  5855  00FD3B  07                 	db	7
  5856  00FD3C  08                 	db	8
  5857  00FD3D  0A                 	db	10
  5858  00FD3E  0C                 	db	12
  5859  00FD3F  0D                 	db	13
  5860  00FD40  0F                 	db	15
  5861  00FD41  11                 	db	17
  5862  00FD42  13                 	db	19
  5863  00FD43  14                 	db	20
  5864  00FD44  16                 	db	22
  5865  00FD45  18                 	db	24
  5866  00FD46                     __end_of_phrygian_key:
  5867                           	opt stack 0
  5868  00FD46                     _dorian_key:
  5869                           	opt stack 0
  5870  00FD46  02                 	db	2
  5871  00FD47  02                 	db	2
  5872  00FD48  03                 	db	3
  5873  00FD49  05                 	db	5
  5874  00FD4A  07                 	db	7
  5875  00FD4B  09                 	db	9
  5876  00FD4C  0A                 	db	10
  5877  00FD4D  0C                 	db	12
  5878  00FD4E  0E                 	db	14
  5879  00FD4F  0F                 	db	15
  5880  00FD50  11                 	db	17
  5881  00FD51  13                 	db	19
  5882  00FD52  15                 	db	21
  5883  00FD53  16                 	db	22
  5884  00FD54  18                 	db	24
  5885  00FD55                     __end_of_dorian_key:
  5886                           	opt stack 0
  5887  00FD55                     _ionian_key:
  5888                           	opt stack 0
  5889  00FD55  00                 	db	0
  5890  00FD56  02                 	db	2
  5891  00FD57  04                 	db	4
  5892  00FD58  05                 	db	5
  5893  00FD59  07                 	db	7
  5894  00FD5A  09                 	db	9
  5895  00FD5B  0B                 	db	11
  5896  00FD5C  0C                 	db	12
  5897  00FD5D  0E                 	db	14
  5898  00FD5E  10                 	db	16
  5899  00FD5F  11                 	db	17
  5900  00FD60  13                 	db	19
  5901  00FD61  15                 	db	21
  5902  00FD62  17                 	db	23
  5903  00FD63  18                 	db	24
  5904  00FD64                     __end_of_ionian_key:
  5905                           	opt stack 0
  5906  0000                     _TMR0	set	4054
  5907  0000                     _EECON2	set	4007
  5908  0000                     _INTCONbits	set	4082
  5909  0000                     _EEDATA	set	4008
  5910  0000                     _EEADR	set	4009
  5911  0000                     _EEADRH	set	4010
  5912  0000                     _EECON1bits	set	4006
  5913  0000                     _SPBRG	set	4015
  5914  0000                     _TMR2	set	4044
  5915  0000                     _T2CON	set	4042
  5916  0000                     _T0CON	set	4053
  5917  0000                     _PORTE	set	3972
  5918  0000                     _PORTC	set	3970
  5919  0000                     _PORTB	set	3969
  5920  0000                     _TRISE	set	3990
  5921  0000                     _TRISD	set	3989
  5922  0000                     _TRISC	set	3988
  5923  0000                     _TRISB	set	3987
  5924  0000                     _TRISA	set	3986
  5925  0000                     _PORTD	set	3971
  5926  0000                     _TXREG	set	4013
  5927  0000                     _ADRESL	set	4035
  5928  0000                     _ADRESH	set	4036
  5929  0000                     _PORTA	set	3968
  5930  0000                     _ADCON2	set	4032
  5931  0000                     _ADCON1	set	4033
  5932  0000                     _ADCON0	set	4034
  5933  0000                     _CMCON	set	4020
  5934  0000                     _TMR0IF	set	32658
  5935  0000                     _RB0	set	31752
  5936  0000                     _TMR2IF	set	31985
  5937  0000                     _RC4	set	31764
  5938  0000                     _RC5	set	31765
  5939  0000                     _RB1	set	31753
  5940  0000                     _GIE	set	32663
  5941  0000                     _PEIE	set	32662
  5942  0000                     _BRGH	set	32098
  5943  0000                     _CREN	set	32092
  5944  0000                     _SPEN	set	32095
  5945  0000                     _SYNC	set	32100
  5946  0000                     _TXEN	set	32101
  5947  0000                     _TMR2IE	set	31977
  5948  0000                     _TMR2ON	set	32338
  5949  0000                     _TMR0IE	set	32661
  5950  0000                     _PSA	set	32427
  5951  0000                     _T0CS	set	32429
  5952  0000                     _T08BIT	set	32430
  5953  0000                     _INT0IE	set	32660
  5954  0000                     _INT0IF	set	32657
  5955  0000                     _INTEDG0	set	32654
  5956  0000                     _RBIE	set	32659
  5957  0000                     _RBIF	set	32656
  5958  0000                     _IPEN	set	32391
  5959  0000                     _RC2	set	31762
  5960  0000                     _RC1	set	31761
  5961  0000                     _RC0	set	31760
  5962  0000                     _RC3	set	31763
  5963  0000                     _TMR0ON	set	32431
  5964  0000                     _RB4	set	31756
  5965  0000                     _RB5	set	31757
  5966  0000                     _RE2	set	31778
  5967  0000                     _RB2	set	31754
  5968  0000                     _RA5	set	31749
  5969  0000                     _TXIF	set	31988
  5970  0000                     _GO_nDONE	set	32273
  5971  0000                     _ADON	set	32272
  5972  0000                     _RE1	set	31777
  5973  0000                     _RE0	set	31776
  5974  0000                     _RD7	set	31775
  5975  0000                     _RD6	set	31774
  5976  0000                     _RD5	set	31773
  5977  0000                     _RD4	set	31772
  5978  00FD64                     STR_10:
  5979  00FD64  20                 	db	32
  5980  00FD65  20                 	db	32
  5981  00FD66  20                 	db	32
  5982  00FD67  20                 	db	32
  5983  00FD68  20                 	db	32
  5984  00FD69  20                 	db	32
  5985  00FD6A  20                 	db	32
  5986  00FD6B  20                 	db	32
  5987  00FD6C  20                 	db	32
  5988  00FD6D  20                 	db	32
  5989  00FD6E  20                 	db	32
  5990  00FD6F  20                 	db	32
  5991  00FD70  20                 	db	32
  5992  00FD71  20                 	db	32
  5993  00FD72  20                 	db	32
  5994  00FD73  20                 	db	32
  5995  00FD74  00                 	db	0
  5996  00FD75                     STR_22:
  5997  00FD75  53                 	db	83	;'S'
  5998  00FD76  65                 	db	101	;'e'
  5999  00FD77  74                 	db	116	;'t'
  6000  00FD78  74                 	db	116	;'t'
  6001  00FD79  69                 	db	105	;'i'
  6002  00FD7A  6E                 	db	110	;'n'
  6003  00FD7B  67                 	db	103	;'g'
  6004  00FD7C  73                 	db	115	;'s'
  6005  00FD7D  20                 	db	32
  6006  00FD7E  4C                 	db	76	;'L'
  6007  00FD7F  6F                 	db	111	;'o'
  6008  00FD80  61                 	db	97	;'a'
  6009  00FD81  64                 	db	100	;'d'
  6010  00FD82  65                 	db	101	;'e'
  6011  00FD83  64                 	db	100	;'d'
  6012  00FD84  21                 	db	33
  6013  00FD85  00                 	db	0
  6014  00FD86                     STR_37:
  6015  00FD86  52                 	db	82	;'R'
  6016  00FD87  65                 	db	101	;'e'
  6017  00FD88  73                 	db	115	;'s'
  6018  00FD89  74                 	db	116	;'t'
  6019  00FD8A  6F                 	db	111	;'o'
  6020  00FD8B  72                 	db	114	;'r'
  6021  00FD8C  65                 	db	101	;'e'
  6022  00FD8D  20                 	db	32
  6023  00FD8E  53                 	db	83	;'S'
  6024  00FD8F  65                 	db	101	;'e'
  6025  00FD90  74                 	db	116	;'t'
  6026  00FD91  74                 	db	116	;'t'
  6027  00FD92  69                 	db	105	;'i'
  6028  00FD93  6E                 	db	110	;'n'
  6029  00FD94  67                 	db	103	;'g'
  6030  00FD95  21                 	db	33
  6031  00FD96  00                 	db	0
  6032  00FD97                     STR_33:
  6033  00FD97  53                 	db	83	;'S'
  6034  00FD98  65                 	db	101	;'e'
  6035  00FD99  74                 	db	116	;'t'
  6036  00FD9A  20                 	db	32
  6037  00FD9B  4A                 	db	74	;'J'
  6038  00FD9C  6F                 	db	111	;'o'
  6039  00FD9D  79                 	db	121	;'y'
  6040  00FD9E  73                 	db	115	;'s'
  6041  00FD9F  74                 	db	116	;'t'
  6042  00FDA0  69                 	db	105	;'i'
  6043  00FDA1  63                 	db	99	;'c'
  6044  00FDA2  6B                 	db	107	;'k'
  6045  00FDA3  20                 	db	32
  6046  00FDA4  43                 	db	67	;'C'
  6047  00FDA5  43                 	db	67	;'C'
  6048  00FDA6  23                 	db	35
  6049  00FDA7  00                 	db	0
  6050  00FDA8                     STR_30:
  6051  00FDA8  50                 	db	80	;'P'
  6052  00FDA9  6F                 	db	111	;'o'
  6053  00FDAA  74                 	db	116	;'t'
  6054  00FDAB  73                 	db	115	;'s'
  6055  00FDAC  20                 	db	32
  6056  00FDAD  52                 	db	82	;'R'
  6057  00FDAE  65                 	db	101	;'e'
  6058  00FDAF  73                 	db	115	;'s'
  6059  00FDB0  6F                 	db	111	;'o'
  6060  00FDB1  6C                 	db	108	;'l'
  6061  00FDB2  75                 	db	117	;'u'
  6062  00FDB3  74                 	db	116	;'t'
  6063  00FDB4  69                 	db	105	;'i'
  6064  00FDB5  6F                 	db	111	;'o'
  6065  00FDB6  6E                 	db	110	;'n'
  6066  00FDB7  3A                 	db	58	;':'
  6067  00FDB8  00                 	db	0
  6068  00FDB9                     STR_46:
  6069  00FDB9  53                 	db	83	;'S'
  6070  00FDBA  65                 	db	101	;'e'
  6071  00FDBB  6C                 	db	108	;'l'
  6072  00FDBC  65                 	db	101	;'e'
  6073  00FDBD  63                 	db	99	;'c'
  6074  00FDBE  74                 	db	116	;'t'
  6075  00FDBF  20                 	db	32
  6076  00FDC0  41                 	db	65	;'A'
  6077  00FDC1  72                 	db	114	;'r'
  6078  00FDC2  70                 	db	112	;'p'
  6079  00FDC3  65                 	db	101	;'e'
  6080  00FDC4  67                 	db	103	;'g'
  6081  00FDC5  67                 	db	103	;'g'
  6082  00FDC6  69                 	db	105	;'i'
  6083  00FDC7  6F                 	db	111	;'o'
  6084  00FDC8  3A                 	db	58	;':'
  6085  00FDC9  00                 	db	0
  6086  00FDCA                     STR_28:
  6087  00FDCA  53                 	db	83	;'S'
  6088  00FDCB  65                 	db	101	;'e'
  6089  00FDCC  74                 	db	116	;'t'
  6090  00FDCD  20                 	db	32
  6091  00FDCE  4E                 	db	78	;'N'
  6092  00FDCF  6F                 	db	111	;'o'
  6093  00FDD0  74                 	db	116	;'t'
  6094  00FDD1  65                 	db	101	;'e'
  6095  00FDD2  20                 	db	32
  6096  00FDD3  4E                 	db	78	;'N'
  6097  00FDD4  75                 	db	117	;'u'
  6098  00FDD5  6D                 	db	109	;'m'
  6099  00FDD6  62                 	db	98	;'b'
  6100  00FDD7  65                 	db	101	;'e'
  6101  00FDD8  72                 	db	114	;'r'
  6102  00FDD9  3A                 	db	58	;':'
  6103  00FDDA  00                 	db	0
  6104  00FDDB                     STR_53:
  6105  00FDDB  41                 	db	65	;'A'
  6106  00FDDC  75                 	db	117	;'u'
  6107  00FDDD  74                 	db	116	;'t'
  6108  00FDDE  6F                 	db	111	;'o'
  6109  00FDDF  4C                 	db	76	;'L'
  6110  00FDE0  61                 	db	97	;'a'
  6111  00FDE1  74                 	db	116	;'t'
  6112  00FDE2  63                 	db	99	;'c'
  6113  00FDE3  68                 	db	104	;'h'
  6114  00FDE4  20                 	db	32
  6115  00FDE5  4F                 	db	79	;'O'
  6116  00FDE6  4E                 	db	78	;'N'
  6117  00FDE7  2F                 	db	47
  6118  00FDE8  4F                 	db	79	;'O'
  6119  00FDE9  46                 	db	70	;'F'
  6120  00FDEA  46                 	db	70	;'F'
  6121  00FDEB  00                 	db	0
  6122  00FDEC                     STR_39:
  6123  00FDEC  45                 	db	69	;'E'
  6124  00FDED  6E                 	db	110	;'n'
  6125  00FDEE  63                 	db	99	;'c'
  6126  00FDEF  6F                 	db	111	;'o'
  6127  00FDF0  64                 	db	100	;'d'
  6128  00FDF1  65                 	db	101	;'e'
  6129  00FDF2  72                 	db	114	;'r'
  6130  00FDF3  20                 	db	32
  6131  00FDF4  50                 	db	80	;'P'
  6132  00FDF5  6F                 	db	111	;'o'
  6133  00FDF6  6C                 	db	108	;'l'
  6134  00FDF7  61                 	db	97	;'a'
  6135  00FDF8  72                 	db	114	;'r'
  6136  00FDF9  69                 	db	105	;'i'
  6137  00FDFA  74                 	db	116	;'t'
  6138  00FDFB  79                 	db	121	;'y'
  6139  00FDFC  00                 	db	0
  6140  00FDFD                     STR_21:
  6141  00FDFD  53                 	db	83	;'S'
  6142  00FDFE  65                 	db	101	;'e'
  6143  00FDFF  74                 	db	116	;'t'
  6144  00FE00  74                 	db	116	;'t'
  6145  00FE01  69                 	db	105	;'i'
  6146  00FE02  6E                 	db	110	;'n'
  6147  00FE03  67                 	db	103	;'g'
  6148  00FE04  73                 	db	115	;'s'
  6149  00FE05  20                 	db	32
  6150  00FE06  53                 	db	83	;'S'
  6151  00FE07  61                 	db	97	;'a'
  6152  00FE08  76                 	db	118	;'v'
  6153  00FE09  65                 	db	101	;'e'
  6154  00FE0A  64                 	db	100	;'d'
  6155  00FE0B  21                 	db	33
  6156  00FE0C  00                 	db	0
  6157  00FE0D                     STR_76:
  6158  00FE0D  4C                 	db	76	;'L'
  6159  00FE0E  61                 	db	97	;'a'
  6160  00FE0F  73                 	db	115	;'s'
  6161  00FE10  74                 	db	116	;'t'
  6162  00FE11  20                 	db	32
  6163  00FE12  4E                 	db	78	;'N'
  6164  00FE13  6F                 	db	111	;'o'
  6165  00FE14  74                 	db	116	;'t'
  6166  00FE15  65                 	db	101	;'e'
  6167  00FE16  20                 	db	32
  6168  00FE17  4D                 	db	77	;'M'
  6169  00FE18  6F                 	db	111	;'o'
  6170  00FE19  64                 	db	100	;'d'
  6171  00FE1A  65                 	db	101	;'e'
  6172  00FE1B  3A                 	db	58	;':'
  6173  00FE1C  00                 	db	0
  6174  00FE1D                     STR_63:
  6175  00FE1D  52                 	db	82	;'R'
  6176  00FE1E  61                 	db	97	;'a'
  6177  00FE1F  6E                 	db	110	;'n'
  6178  00FE20  64                 	db	100	;'d'
  6179  00FE21  6F                 	db	111	;'o'
  6180  00FE22  6D                 	db	109	;'m'
  6181  00FE23  69                 	db	105	;'i'
  6182  00FE24  7A                 	db	122	;'z'
  6183  00FE25  65                 	db	101	;'e'
  6184  00FE26  20                 	db	32
  6185  00FE27  54                 	db	84	;'T'
  6186  00FE28  79                 	db	121	;'y'
  6187  00FE29  70                 	db	112	;'p'
  6188  00FE2A  65                 	db	101	;'e'
  6189  00FE2B  3A                 	db	58	;':'
  6190  00FE2C  00                 	db	0
  6191  00FE2D                     STR_26:
  6192  00FE2D  53                 	db	83	;'S'
  6193  00FE2E  65                 	db	101	;'e'
  6194  00FE2F  6C                 	db	108	;'l'
  6195  00FE30  65                 	db	101	;'e'
  6196  00FE31  63                 	db	99	;'c'
  6197  00FE32  74                 	db	116	;'t'
  6198  00FE33  20                 	db	32
  6199  00FE34  53                 	db	83	;'S'
  6200  00FE35  65                 	db	101	;'e'
  6201  00FE36  76                 	db	118	;'v'
  6202  00FE37  65                 	db	101	;'e'
  6203  00FE38  6E                 	db	110	;'n'
  6204  00FE39  74                 	db	116	;'t'
  6205  00FE3A  68                 	db	104	;'h'
  6206  00FE3B  3A                 	db	58	;':'
  6207  00FE3C  00                 	db	0
  6208  00FE3D                     STR_40:
  6209  00FE3D  41                 	db	65	;'A'
  6210  00FE3E  52                 	db	82	;'R'
  6211  00FE3F  50                 	db	80	;'P'
  6212  00FE40  45                 	db	69	;'E'
  6213  00FE41  47                 	db	71	;'G'
  6214  00FE42  47                 	db	71	;'G'
  6215  00FE43  49                 	db	73	;'I'
  6216  00FE44  41                 	db	65	;'A'
  6217  00FE45  54                 	db	84	;'T'
  6218  00FE46  4F                 	db	79	;'O'
  6219  00FE47  52                 	db	82	;'R'
  6220  00FE48  20                 	db	32
  6221  00FE49  4F                 	db	79	;'O'
  6222  00FE4A  46                 	db	70	;'F'
  6223  00FE4B  46                 	db	70	;'F'
  6224  00FE4C  00                 	db	0
  6225  00FE4D                     STR_32:
  6226  00FE4D  53                 	db	83	;'S'
  6227  00FE4E  6C                 	db	108	;'l'
  6228  00FE4F  69                 	db	105	;'i'
  6229  00FE50  64                 	db	100	;'d'
  6230  00FE51  65                 	db	101	;'e'
  6231  00FE52  70                 	db	112	;'p'
  6232  00FE53  6F                 	db	111	;'o'
  6233  00FE54  74                 	db	116	;'t'
  6234  00FE55  73                 	db	115	;'s'
  6235  00FE56  20                 	db	32
  6236  00FE57  43                 	db	67	;'C'
  6237  00FE58  43                 	db	67	;'C'
  6238  00FE59  23                 	db	35
  6239  00FE5A  3A                 	db	58	;':'
  6240  00FE5B  00                 	db	0
  6241  00FE5C                     STR_58:
  6242  00FE5C  55                 	db	85	;'U'
  6243  00FE5D  6E                 	db	110	;'n'
  6244  00FE5E  2D                 	db	45
  6245  00FE5F  6C                 	db	108	;'l'
  6246  00FE60  61                 	db	97	;'a'
  6247  00FE61  74                 	db	116	;'t'
  6248  00FE62  63                 	db	99	;'c'
  6249  00FE63  68                 	db	104	;'h'
  6250  00FE64  20                 	db	32
  6251  00FE65  4D                 	db	77	;'M'
  6252  00FE66  6F                 	db	111	;'o'
  6253  00FE67  64                 	db	100	;'d'
  6254  00FE68  65                 	db	101	;'e'
  6255  00FE69  3A                 	db	58	;':'
  6256  00FE6A  00                 	db	0
  6257  00FE6B                     STR_29:
  6258  00FE6B  53                 	db	83	;'S'
  6259  00FE6C  65                 	db	101	;'e'
  6260  00FE6D  74                 	db	116	;'t'
  6261  00FE6E  20                 	db	32
  6262  00FE6F  43                 	db	67	;'C'
  6263  00FE70  43                 	db	67	;'C'
  6264  00FE71  20                 	db	32
  6265  00FE72  4E                 	db	78	;'N'
  6266  00FE73  75                 	db	117	;'u'
  6267  00FE74  6D                 	db	109	;'m'
  6268  00FE75  62                 	db	98	;'b'
  6269  00FE76  65                 	db	101	;'e'
  6270  00FE77  72                 	db	114	;'r'
  6271  00FE78  3A                 	db	58	;':'
  6272  00FE79  00                 	db	0
  6273  00FE7A                     STR_65:
  6274  00FE7A  52                 	db	82	;'R'
  6275  00FE7B  41                 	db	65	;'A'
  6276  00FE7C  4E                 	db	78	;'N'
  6277  00FE7D  44                 	db	68	;'D'
  6278  00FE7E  4F                 	db	79	;'O'
  6279  00FE7F  4D                 	db	77	;'M'
  6280  00FE80  49                 	db	73	;'I'
  6281  00FE81  5A                 	db	90	;'Z'
  6282  00FE82  45                 	db	69	;'E'
  6283  00FE83  20                 	db	32
  6284  00FE84  4F                 	db	79	;'O'
  6285  00FE85  4E                 	db	78	;'N'
  6286  00FE86  43                 	db	67	;'C'
  6287  00FE87  45                 	db	69	;'E'
  6288  00FE88  00                 	db	0
  6289  00FE89                     STR_54:
  6290  00FE89  41                 	db	65	;'A'
  6291  00FE8A  75                 	db	117	;'u'
  6292  00FE8B  74                 	db	116	;'t'
  6293  00FE8C  6F                 	db	111	;'o'
  6294  00FE8D  20                 	db	32
  6295  00FE8E  4C                 	db	76	;'L'
  6296  00FE8F  61                 	db	97	;'a'
  6297  00FE90  74                 	db	116	;'t'
  6298  00FE91  63                 	db	99	;'c'
  6299  00FE92  68                 	db	104	;'h'
  6300  00FE93  20                 	db	32
  6301  00FE94  4F                 	db	79	;'O'
  6302  00FE95  46                 	db	70	;'F'
  6303  00FE96  46                 	db	70	;'F'
  6304  00FE97  00                 	db	0
  6305  00FE98                     STR_42:
  6306  00FE98  41                 	db	65	;'A'
  6307  00FE99  52                 	db	82	;'R'
  6308  00FE9A  50                 	db	80	;'P'
  6309  00FE9B  45                 	db	69	;'E'
  6310  00FE9C  47                 	db	71	;'G'
  6311  00FE9D  47                 	db	71	;'G'
  6312  00FE9E  49                 	db	73	;'I'
  6313  00FE9F  41                 	db	65	;'A'
  6314  00FEA0  54                 	db	84	;'T'
  6315  00FEA1  4F                 	db	79	;'O'
  6316  00FEA2  52                 	db	82	;'R'
  6317  00FEA3  20                 	db	32
  6318  00FEA4  4F                 	db	79	;'O'
  6319  00FEA5  4E                 	db	78	;'N'
  6320  00FEA6  00                 	db	0
  6321  00FEA7                     STR_64:
  6322  00FEA7  52                 	db	82	;'R'
  6323  00FEA8  41                 	db	65	;'A'
  6324  00FEA9  4E                 	db	78	;'N'
  6325  00FEAA  44                 	db	68	;'D'
  6326  00FEAB  4F                 	db	79	;'O'
  6327  00FEAC  4D                 	db	77	;'M'
  6328  00FEAD  49                 	db	73	;'I'
  6329  00FEAE  5A                 	db	90	;'Z'
  6330  00FEAF  45                 	db	69	;'E'
  6331  00FEB0  20                 	db	32
  6332  00FEB1  41                 	db	65	;'A'
  6333  00FEB2  55                 	db	85	;'U'
  6334  00FEB3  54                 	db	84	;'T'
  6335  00FEB4  4F                 	db	79	;'O'
  6336  00FEB5  00                 	db	0
  6337  00FEB6                     STR_44:
  6338  00FEB6  54                 	db	84	;'T'
  6339  00FEB7  65                 	db	101	;'e'
  6340  00FEB8  6D                 	db	109	;'m'
  6341  00FEB9  70                 	db	112	;'p'
  6342  00FEBA  6F                 	db	111	;'o'
  6343  00FEBB  20                 	db	32
  6344  00FEBC  28                 	db	40
  6345  00FEBD  42                 	db	66	;'B'
  6346  00FEBE  50                 	db	80	;'P'
  6347  00FEBF  4D                 	db	77	;'M'
  6348  00FEC0  29                 	db	41
  6349  00FEC1  3A                 	db	58	;':'
  6350  00FEC2  20                 	db	32
  6351  00FEC3  00                 	db	0
  6352  00FEC4                     STR_31:
  6353  00FEC4  53                 	db	83	;'S'
  6354  00FEC5  65                 	db	101	;'e'
  6355  00FEC6  74                 	db	116	;'t'
  6356  00FEC7  20                 	db	32
  6357  00FEC8  50                 	db	80	;'P'
  6358  00FEC9  6F                 	db	111	;'o'
  6359  00FECA  74                 	db	116	;'t'
  6360  00FECB  73                 	db	115	;'s'
  6361  00FECC  20                 	db	32
  6362  00FECD  43                 	db	67	;'C'
  6363  00FECE  43                 	db	67	;'C'
  6364  00FECF  23                 	db	35
  6365  00FED0  3A                 	db	58	;':'
  6366  00FED1  00                 	db	0
  6367  00FED2                     STR_25:
  6368  00FED2  53                 	db	83	;'S'
  6369  00FED3  65                 	db	101	;'e'
  6370  00FED4  6C                 	db	108	;'l'
  6371  00FED5  65                 	db	101	;'e'
  6372  00FED6  63                 	db	99	;'c'
  6373  00FED7  74                 	db	116	;'t'
  6374  00FED8  20                 	db	32
  6375  00FED9  54                 	db	84	;'T'
  6376  00FEDA  72                 	db	114	;'r'
  6377  00FEDB  69                 	db	105	;'i'
  6378  00FEDC  61                 	db	97	;'a'
  6379  00FEDD  64                 	db	100	;'d'
  6380  00FEDE  3A                 	db	58	;':'
  6381  00FEDF  00                 	db	0
  6382  00FEE0                     STR_27:
  6383  00FEE0  44                 	db	68	;'D'
  6384  00FEE1  72                 	db	114	;'r'
  6385  00FEE2  75                 	db	117	;'u'
  6386  00FEE3  6D                 	db	109	;'m'
  6387  00FEE4  20                 	db	32
  6388  00FEE5  43                 	db	67	;'C'
  6389  00FEE6  43                 	db	67	;'C'
  6390  00FEE7  20                 	db	32
  6391  00FEE8  4D                 	db	77	;'M'
  6392  00FEE9  6F                 	db	111	;'o'
  6393  00FEEA  64                 	db	100	;'d'
  6394  00FEEB  65                 	db	101	;'e'
  6395  00FEEC  3A                 	db	58	;':'
  6396  00FEED  00                 	db	0
  6397  00FEEE                     STR_45:
  6398  00FEEE  4F                 	db	79	;'O'
  6399  00FEEF  63                 	db	99	;'c'
  6400  00FEF0  74                 	db	116	;'t'
  6401  00FEF1  61                 	db	97	;'a'
  6402  00FEF2  76                 	db	118	;'v'
  6403  00FEF3  65                 	db	101	;'e'
  6404  00FEF4  20                 	db	32
  6405  00FEF5  52                 	db	82	;'R'
  6406  00FEF6  61                 	db	97	;'a'
  6407  00FEF7  6E                 	db	110	;'n'
  6408  00FEF8  67                 	db	103	;'g'
  6409  00FEF9  65                 	db	101	;'e'
  6410  00FEFA  3A                 	db	58	;':'
  6411  00FEFB  00                 	db	0
  6412  00FEFC                     STR_61:
  6413  00FEFC  4F                 	db	79	;'O'
  6414  00FEFD  4E                 	db	78	;'N'
  6415  00FEFE  45                 	db	69	;'E'
  6416  00FEFF  20                 	db	32
  6417  00FF00  41                 	db	65	;'A'
  6418  00FF01  54                 	db	84	;'T'
  6419  00FF02  20                 	db	32
  6420  00FF03  41                 	db	65	;'A'
  6421  00FF04  20                 	db	32
  6422  00FF05  54                 	db	84	;'T'
  6423  00FF06  49                 	db	73	;'I'
  6424  00FF07  4D                 	db	77	;'M'
  6425  00FF08  45                 	db	69	;'E'
  6426  00FF09  00                 	db	0
  6427  00FF0A                     STR_56:
  6428  00FF0A  41                 	db	65	;'A'
  6429  00FF0B  75                 	db	117	;'u'
  6430  00FF0C  74                 	db	116	;'t'
  6431  00FF0D  6F                 	db	111	;'o'
  6432  00FF0E  20                 	db	32
  6433  00FF0F  4C                 	db	76	;'L'
  6434  00FF10  61                 	db	97	;'a'
  6435  00FF11  74                 	db	116	;'t'
  6436  00FF12  63                 	db	99	;'c'
  6437  00FF13  68                 	db	104	;'h'
  6438  00FF14  20                 	db	32
  6439  00FF15  4F                 	db	79	;'O'
  6440  00FF16  4E                 	db	78	;'N'
  6441  00FF17  00                 	db	0
  6442  00FF18                     STR_23:
  6443  00FF18  45                 	db	69	;'E'
  6444  00FF19  78                 	db	120	;'x'
  6445  00FF1A  69                 	db	105	;'i'
  6446  00FF1B  74                 	db	116	;'t'
  6447  00FF1C  20                 	db	32
  6448  00FF1D  45                 	db	69	;'E'
  6449  00FF1E  45                 	db	69	;'E'
  6450  00FF1F  50                 	db	80	;'P'
  6451  00FF20  52                 	db	82	;'R'
  6452  00FF21  4F                 	db	79	;'O'
  6453  00FF22  4D                 	db	77	;'M'
  6454  00FF23  21                 	db	33
  6455  00FF24  00                 	db	0
  6456  00FF25                     STR_38:
  6457  00FF25  52                 	db	82	;'R'
  6458  00FF26  65                 	db	101	;'e'
  6459  00FF27  62                 	db	98	;'b'
  6460  00FF28  6F                 	db	111	;'o'
  6461  00FF29  6F                 	db	111	;'o'
  6462  00FF2A  74                 	db	116	;'t'
  6463  00FF2B  69                 	db	105	;'i'
  6464  00FF2C  6E                 	db	110	;'n'
  6465  00FF2D  67                 	db	103	;'g'
  6466  00FF2E  2E                 	db	46
  6467  00FF2F  2E                 	db	46
  6468  00FF30  2E                 	db	46
  6469  00FF31  00                 	db	0
  6470  00FF32                     STR_47:
  6471  00FF32  4E                 	db	78	;'N'
  6472  00FF33  6F                 	db	111	;'o'
  6473  00FF34  74                 	db	116	;'t'
  6474  00FF35  65                 	db	101	;'e'
  6475  00FF36  20                 	db	32
  6476  00FF37  4C                 	db	76	;'L'
  6477  00FF38  65                 	db	101	;'e'
  6478  00FF39  6E                 	db	110	;'n'
  6479  00FF3A  67                 	db	103	;'g'
  6480  00FF3B  74                 	db	116	;'t'
  6481  00FF3C  68                 	db	104	;'h'
  6482  00FF3D  3A                 	db	58	;':'
  6483  00FF3E  00                 	db	0
  6484  00FF3F                     STR_66:
  6485  00FF3F  53                 	db	83	;'S'
  6486  00FF40  6B                 	db	107	;'k'
  6487  00FF41  69                 	db	105	;'i'
  6488  00FF42  70                 	db	112	;'p'
  6489  00FF43  20                 	db	32
  6490  00FF44  46                 	db	70	;'F'
  6491  00FF45  2F                 	db	47
  6492  00FF46  4C                 	db	76	;'L'
  6493  00FF47  20                 	db	32
  6494  00FF48  4F                 	db	79	;'O'
  6495  00FF49  46                 	db	70	;'F'
  6496  00FF4A  46                 	db	70	;'F'
  6497  00FF4B  00                 	db	0
  6498  00FF4C                     STR_34:
  6499  00FF4C  50                 	db	80	;'P'
  6500  00FF4D  72                 	db	114	;'r'
  6501  00FF4E  6F                 	db	111	;'o'
  6502  00FF4F  67                 	db	103	;'g'
  6503  00FF50  72                 	db	114	;'r'
  6504  00FF51  61                 	db	97	;'a'
  6505  00FF52  6D                 	db	109	;'m'
  6506  00FF53  20                 	db	32
  6507  00FF54  23                 	db	35
  6508  00FF55  3A                 	db	58	;':'
  6509  00FF56  20                 	db	32
  6510  00FF57  00                 	db	0
  6511  00FF58                     STR_24:
  6512  00FF58  45                 	db	69	;'E'
  6513  00FF59  6E                 	db	110	;'n'
  6514  00FF5A  74                 	db	116	;'t'
  6515  00FF5B  65                 	db	101	;'e'
  6516  00FF5C  72                 	db	114	;'r'
  6517  00FF5D  20                 	db	32
  6518  00FF5E  4D                 	db	77	;'M'
  6519  00FF5F  6F                 	db	111	;'o'
  6520  00FF60  64                 	db	100	;'d'
  6521  00FF61  65                 	db	101	;'e'
  6522  00FF62  3A                 	db	58	;':'
  6523  00FF63  00                 	db	0
  6524  00FF64                     STR_59:
  6525  00FF64  55                 	db	85	;'U'
  6526  00FF65  4E                 	db	78	;'N'
  6527  00FF66  4C                 	db	76	;'L'
  6528  00FF67  41                 	db	65	;'A'
  6529  00FF68  54                 	db	84	;'T'
  6530  00FF69  43                 	db	67	;'C'
  6531  00FF6A  48                 	db	72	;'H'
  6532  00FF6B  20                 	db	32
  6533  00FF6C  41                 	db	65	;'A'
  6534  00FF6D  4C                 	db	76	;'L'
  6535  00FF6E  4C                 	db	76	;'L'
  6536  00FF6F  00                 	db	0
  6537  00FF70                     STR_67:
  6538  00FF70  53                 	db	83	;'S'
  6539  00FF71  6B                 	db	107	;'k'
  6540  00FF72  69                 	db	105	;'i'
  6541  00FF73  70                 	db	112	;'p'
  6542  00FF74  20                 	db	32
  6543  00FF75  46                 	db	70	;'F'
  6544  00FF76  2F                 	db	47
  6545  00FF77  4C                 	db	76	;'L'
  6546  00FF78  20                 	db	32
  6547  00FF79  4F                 	db	79	;'O'
  6548  00FF7A  4E                 	db	78	;'N'
  6549  00FF7B  00                 	db	0
  6550  00FF7C                     STR_69:
  6551  00FF7C  46                 	db	70	;'F'
  6552  00FF7D  49                 	db	73	;'I'
  6553  00FF7E  4E                 	db	78	;'N'
  6554  00FF7F  49                 	db	73	;'I'
  6555  00FF80  53                 	db	83	;'S'
  6556  00FF81  48                 	db	72	;'H'
  6557  00FF82  20                 	db	32
  6558  00FF83  4C                 	db	76	;'L'
  6559  00FF84  41                 	db	65	;'A'
  6560  00FF85  53                 	db	83	;'S'
  6561  00FF86  54                 	db	84	;'T'
  6562  00FF87  00                 	db	0
  6563  00FF88                     STR_14:
  6564  00FF88  20                 	db	32
  6565  00FF89  50                 	db	80	;'P'
  6566  00FF8A  49                 	db	73	;'I'
  6567  00FF8B  54                 	db	84	;'T'
  6568  00FF8C  43                 	db	67	;'C'
  6569  00FF8D  48                 	db	72	;'H'
  6570  00FF8E  42                 	db	66	;'B'
  6571  00FF8F  45                 	db	69	;'E'
  6572  00FF90  4E                 	db	78	;'N'
  6573  00FF91  44                 	db	68	;'D'
  6574  00FF92  00                 	db	0
  6575  00FF93                     STR_15:
  6576  00FF93  20                 	db	32
  6577  00FF94  4D                 	db	77	;'M'
  6578  00FF95  4F                 	db	79	;'O'
  6579  00FF96  44                 	db	68	;'D'
  6580  00FF97  2E                 	db	46
  6581  00FF98  57                 	db	87	;'W'
  6582  00FF99  48                 	db	72	;'H'
  6583  00FF9A  45                 	db	69	;'E'
  6584  00FF9B  45                 	db	69	;'E'
  6585  00FF9C  4C                 	db	76	;'L'
  6586  00FF9D  00                 	db	0
  6587  00FF9E                     STR_13:
  6588  00FF9E  20                 	db	32
  6589  00FF9F  20                 	db	32
  6590  00FFA0  56                 	db	86	;'V'
  6591  00FFA1  45                 	db	69	;'E'
  6592  00FFA2  4C                 	db	76	;'L'
  6593  00FFA3  4F                 	db	79	;'O'
  6594  00FFA4  43                 	db	67	;'C'
  6595  00FFA5  49                 	db	73	;'I'
  6596  00FFA6  54                 	db	84	;'T'
  6597  00FFA7  59                 	db	89	;'Y'
  6598  00FFA8  00                 	db	0
  6599  00FFA9                     STR_68:
  6600  00FFA9  49                 	db	73	;'I'
  6601  00FFAA  4D                 	db	77	;'M'
  6602  00FFAB  4D                 	db	77	;'M'
  6603  00FFAC  45                 	db	69	;'E'
  6604  00FFAD  44                 	db	68	;'D'
  6605  00FFAE  49                 	db	73	;'I'
  6606  00FFAF  41                 	db	65	;'A'
  6607  00FFB0  54                 	db	84	;'T'
  6608  00FFB1  45                 	db	69	;'E'
  6609  00FFB2  00                 	db	0
  6610  00FFB3                     STR_36:
  6611  00FFB3  4C                 	db	76	;'L'
  6612  00FFB4  6F                 	db	111	;'o'
  6613  00FFB5  61                 	db	97	;'a'
  6614  00FFB6  64                 	db	100	;'d'
  6615  00FFB7  20                 	db	32
  6616  00FFB8  23                 	db	35
  6617  00FFB9  3A                 	db	58	;':'
  6618  00FFBA  00                 	db	0
  6619  00FFBB                     STR_35:
  6620  00FFBB  53                 	db	83	;'S'
  6621  00FFBC  61                 	db	97	;'a'
  6622  00FFBD  76                 	db	118	;'v'
  6623  00FFBE  65                 	db	101	;'e'
  6624  00FFBF  20                 	db	32
  6625  00FFC0  23                 	db	35
  6626  00FFC1  3A                 	db	58	;':'
  6627  00FFC2  00                 	db	0
  6628  00FFC3                     STR_20:
  6629  00FFC3  53                 	db	83	;'S'
  6630  00FFC4  65                 	db	101	;'e'
  6631  00FFC5  74                 	db	116	;'t'
  6632  00FFC6  21                 	db	33
  6633  00FFC7  00                 	db	0
  6634  00FFC8                     STR_62:
  6635  00FFC8  20                 	db	32
  6636  00FFC9  4F                 	db	79	;'O'
  6637  00FFCA  6E                 	db	110	;'n'
  6638  00FFCB  45                 	db	69	;'E'
  6639  00FFCC  00                 	db	0
  6640  00FFCD                     STR_41:
  6641  00FFCD  41                 	db	65	;'A'
  6642  00FFCE  6F                 	db	111	;'o'
  6643  00FFCF  46                 	db	70	;'F'
  6644  00FFD0  46                 	db	70	;'F'
  6645  00FFD1  00                 	db	0
  6646  00FFD2                     STR_43:
  6647  00FFD2  20                 	db	32
  6648  00FFD3  41                 	db	65	;'A'
  6649  00FFD4  72                 	db	114	;'r'
  6650  00FFD5  50                 	db	80	;'P'
  6651  00FFD6  00                 	db	0
  6652  00FFD7                     STR_8:
  6653  00FFD7  74                 	db	116	;'t'
  6654  00FFD8  45                 	db	69	;'E'
  6655  00FFD9  53                 	db	83	;'S'
  6656  00FFDA  74                 	db	116	;'t'
  6657  00FFDB  00                 	db	0
  6658  00FFDC                     STR_5:
  6659  00FFDC  20                 	db	32
  6660  00FFDD  6F                 	db	111	;'o'
  6661  00FFDE  46                 	db	70	;'F'
  6662  00FFDF  46                 	db	70	;'F'
  6663  00FFE0  00                 	db	0
  6664  00FFE1                     STR_2:
  6665  00FFE1  20                 	db	32
  6666  00FFE2  64                 	db	100	;'d'
  6667  00FFE3  45                 	db	69	;'E'
  6668  00FFE4  4C                 	db	76	;'L'
  6669  00FFE5  00                 	db	0
  6670  00FFE6                     STR_1:
  6671  00FFE6  48                 	db	72	;'H'
  6672  00FFE7  6F                 	db	111	;'o'
  6673  00FFE8  4C                 	db	76	;'L'
  6674  00FFE9  64                 	db	100	;'d'
  6675  00FFEA  00                 	db	0
  6676  00FFEB                     STR_6:
  6677  00FFEB  72                 	db	114	;'r'
  6678  00FFEC  41                 	db	65	;'A'
  6679  00FFED  6E                 	db	110	;'n'
  6680  00FFEE  64                 	db	100	;'d'
  6681  00FFEF  00                 	db	0
  6682  00FFF0                     STR_4:
  6683  00FFF0  41                 	db	65	;'A'
  6684  00FFF1  75                 	db	117	;'u'
  6685  00FFF2  74                 	db	116	;'t'
  6686  00FFF3  6F                 	db	111	;'o'
  6687  00FFF4  00                 	db	0
  6688  00FFF5                     STR_7:
  6689  00FFF5  72                 	db	114	;'r'
  6690  00FFF6  53                 	db	83	;'S'
  6691  00FFF7  45                 	db	69	;'E'
  6692  00FFF8  74                 	db	116	;'t'
  6693  00FFF9  00                 	db	0
  6694  00FFFA                     STR_3:
  6695  00FFFA  4C                 	db	76	;'L'
  6696  00FFFB  61                 	db	97	;'a'
  6697  00FFFC  53                 	db	83	;'S'
  6698  00FFFD  74                 	db	116	;'t'
  6699  00FFFE  00                 	db	0
  6700  0000                     
  6701                           ; #config settings
  6702  00FFFF  00                 	db	0	; dummy byte at the end
  6703  0000                     
  6704                           	psect	cinit
  6705  0065EC                     __pcinit:
  6706                           	opt stack 0
  6707  0065EC                     start_initialization:
  6708                           	opt stack 0
  6709  0065EC                     __initialization:
  6710                           	opt stack 0
  6711                           
  6712                           ; Initialize objects allocated to BANK3 (105 bytes)
  6713                           ; load TBLPTR registers with __pidataBANK3
  6714  0065EC  0EE6               	movlw	low __pidataBANK3
  6715  0065EE  6EF6               	movwf	tblptrl,c
  6716  0065F0  0E86               	movlw	high __pidataBANK3
  6717  0065F2  6EF7               	movwf	tblptrh,c
  6718  0065F4  0E00               	movlw	low (__pidataBANK3 shr (0+16))
  6719  0065F6  6EF8               	movwf	tblptru,c
  6720  0065F8  EE03  F000         	lfsr	0,__pdataBANK3
  6721  0065FC  EE10 F069          	lfsr	1,105
  6722  006600                     copy_data0:
  6723  006600  0009               	tblrd		*+
  6724  006602  CFF5 FFEE          	movff	tablat,postinc0
  6725  006606  50E5               	movf	postdec1,w,c
  6726  006608  50E1               	movf	fsr1l,w,c
  6727  00660A  E1FA               	bnz	copy_data0
  6728                           
  6729                           ; Initialize objects allocated to BANK2 (80 bytes)
  6730                           ; load TBLPTR registers with __pidataBANK2
  6731  00660C  0ED0               	movlw	low __pidataBANK2
  6732  00660E  6EF6               	movwf	tblptrl,c
  6733  006610  0E8D               	movlw	high __pidataBANK2
  6734  006612  6EF7               	movwf	tblptrh,c
  6735  006614  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  6736  006616  6EF8               	movwf	tblptru,c
  6737  006618  EE02  F0AC         	lfsr	0,__pdataBANK2
  6738  00661C  EE10 F050          	lfsr	1,80
  6739  006620                     copy_data1:
  6740  006620  0009               	tblrd		*+
  6741  006622  CFF5 FFEE          	movff	tablat,postinc0
  6742  006626  50E5               	movf	postdec1,w,c
  6743  006628  50E1               	movf	fsr1l,w,c
  6744  00662A  E1FA               	bnz	copy_data1
  6745                           
  6746                           ; Initialize objects allocated to BANK1 (40 bytes)
  6747                           ; load TBLPTR registers with __pidataBANK1
  6748  00662C  0EEC               	movlw	low __pidataBANK1
  6749  00662E  6EF6               	movwf	tblptrl,c
  6750  006630  0E93               	movlw	high __pidataBANK1
  6751  006632  6EF7               	movwf	tblptrh,c
  6752  006634  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  6753  006636  6EF8               	movwf	tblptru,c
  6754  006638  EE01  F0D7         	lfsr	0,__pdataBANK1
  6755  00663C  EE10 F028          	lfsr	1,40
  6756  006640                     copy_data2:
  6757  006640  0009               	tblrd		*+
  6758  006642  CFF5 FFEE          	movff	tablat,postinc0
  6759  006646  50E5               	movf	postdec1,w,c
  6760  006648  50E1               	movf	fsr1l,w,c
  6761  00664A  E1FA               	bnz	copy_data2
  6762                           
  6763                           ; Initialize objects allocated to BANK0 (9 bytes)
  6764                           ; load TBLPTR registers with __pidataBANK0
  6765  00664C  0ED0               	movlw	low __pidataBANK0
  6766  00664E  6EF6               	movwf	tblptrl,c
  6767  006650  0E95               	movlw	high __pidataBANK0
  6768  006652  6EF7               	movwf	tblptrh,c
  6769  006654  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  6770  006656  6EF8               	movwf	tblptru,c
  6771  006658  EE00  F0F7         	lfsr	0,__pdataBANK0
  6772  00665C  EE10 F009          	lfsr	1,9
  6773  006660                     copy_data3:
  6774  006660  0009               	tblrd		*+
  6775  006662  CFF5 FFEE          	movff	tablat,postinc0
  6776  006666  50E5               	movf	postdec1,w,c
  6777  006668  50E1               	movf	fsr1l,w,c
  6778  00666A  E1FA               	bnz	copy_data3
  6779                           
  6780                           ; Initialize objects allocated to COMRAM (4 bytes)
  6781                           ; load TBLPTR registers with __pidataCOMRAM
  6782  00666C  0EF2               	movlw	low __pidataCOMRAM
  6783  00666E  6EF6               	movwf	tblptrl,c
  6784  006670  0E95               	movlw	high __pidataCOMRAM
  6785  006672  6EF7               	movwf	tblptrh,c
  6786  006674  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  6787  006676  6EF8               	movwf	tblptru,c
  6788  006678  EE00  F05B         	lfsr	0,__pdataCOMRAM
  6789  00667C  EE10 F004          	lfsr	1,4
  6790  006680                     copy_data4:
  6791  006680  0009               	tblrd		*+
  6792  006682  CFF5 FFEE          	movff	tablat,postinc0
  6793  006686  50E5               	movf	postdec1,w,c
  6794  006688  50E1               	movf	fsr1l,w,c
  6795  00668A  E1FA               	bnz	copy_data4
  6796                           
  6797                           ; Clear objects allocated to BANK2 (172 bytes)
  6798  00668C  EE02  F000         	lfsr	0,__pbssBANK2
  6799  006690  0EAC               	movlw	172
  6800  006692                     clear_0:
  6801  006692  6AEE               	clrf	postinc0,c
  6802  006694  06E8               	decf	wreg,f,c
  6803  006696  E1FD               	bnz	clear_0
  6804                           
  6805                           ; Clear objects allocated to BANK1 (135 bytes)
  6806  006698  EE01  F000         	lfsr	0,__pbssBANK1
  6807  00669C  0E87               	movlw	135
  6808  00669E                     clear_1:
  6809  00669E  6AEE               	clrf	postinc0,c
  6810  0066A0  06E8               	decf	wreg,f,c
  6811  0066A2  E1FD               	bnz	clear_1
  6812                           
  6813                           ; Clear objects allocated to BANK0 (39 bytes)
  6814  0066A4  EE00  F0D0         	lfsr	0,__pbssBANK0
  6815  0066A8  0E27               	movlw	39
  6816  0066AA                     clear_2:
  6817  0066AA  6AEE               	clrf	postinc0,c
  6818  0066AC  06E8               	decf	wreg,f,c
  6819  0066AE  E1FD               	bnz	clear_2
  6820                           
  6821                           ; Clear objects allocated to BITCOMRAM (5 bytes)
  6822  0066B0  6A36               	clrf	((__pbitbssCOMRAM/(0+8)+4))& (0+255),c
  6823  0066B2  6A35               	clrf	((__pbitbssCOMRAM/(0+8)+3))& (0+255),c
  6824  0066B4  6A34               	clrf	((__pbitbssCOMRAM/(0+8)+2))& (0+255),c
  6825  0066B6  6A33               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
  6826  0066B8  6A32               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  6827                           
  6828                           ; Clear objects allocated to COMRAM (36 bytes)
  6829  0066BA  EE00  F037         	lfsr	0,__pbssCOMRAM
  6830  0066BE  0E24               	movlw	36
  6831  0066C0                     clear_3:
  6832  0066C0  6AEE               	clrf	postinc0,c
  6833  0066C2  06E8               	decf	wreg,f,c
  6834  0066C4  E1FD               	bnz	clear_3
  6835  0066C6                     end_of_initialization:
  6836                           	opt stack 0
  6837  0066C6                     __end_of__initialization:
  6838                           	opt stack 0
  6839  0066C6  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  6840  0066C8  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6841  0066CA  0E00               	movlw	low (__Lmediumconst shr (0+16))
  6842  0066CC  6EF8               	movwf	tblptru,c
  6843  0066CE  0100               	movlb	0
  6844  0066D0  EF8E  F035         	goto	_main	;jump to C main() function
  6845                           tblptru	equ	0xFF8
  6846                           tblptrh	equ	0xFF7
  6847                           tblptrl	equ	0xFF6
  6848                           tablat	equ	0xFF5
  6849                           postinc0	equ	0xFEE
  6850                           wreg	equ	0xFE8
  6851                           postdec1	equ	0xFE5
  6852                           fsr1l	equ	0xFE1
  6853                           
  6854                           	psect	bitbssCOMRAM
  6855  000190                     __pbitbssCOMRAM:
  6856                           	opt stack 0
  6857  000190                     readPotentiometers@FIRST_READING:
  6858                           	opt stack 0
  6859  000190                     	ds	1
  6860  000191                     int2string@isNegative:
  6861                           	opt stack 0
  6862  000191                     	ds	1
  6863  000192                     keyboardTranspose@keyPress:
  6864                           	opt stack 0
  6865  000192                     	ds	1
  6866  000193                     _CONTROL_MODE:
  6867                           	opt stack 0
  6868  000193                     	ds	1
  6869  000194                     _DRUM_MODE:
  6870                           	opt stack 0
  6871  000194                     	ds	1
  6872  000195                     _DISPLAY_STEP_NUMBER:
  6873                           	opt stack 0
  6874  000195                     	ds	1
  6875  000196                     _flag2:
  6876                           	opt stack 0
  6877  000196                     	ds	1
  6878  000197                     _flag1:
  6879                           	opt stack 0
  6880  000197                     	ds	1
  6881  000198                     _note_off_was_sent:
  6882                           	opt stack 0
  6883  000198                     	ds	1
  6884  000199                     _octave_overflow:
  6885                           	opt stack 0
  6886  000199                     	ds	1
  6887  00019A                     _overflow:
  6888                           	opt stack 0
  6889  00019A                     	ds	1
  6890  00019B                     _suppress_note_off:
  6891                           	opt stack 0
  6892  00019B                     	ds	1
  6893  00019C                     _suppress_note_on:
  6894                           	opt stack 0
  6895  00019C                     	ds	1
  6896  00019D                     _finishLastNote:
  6897                           	opt stack 0
  6898  00019D                     	ds	1
  6899  00019E                     _LAST_NOTE_MODE_RESET:
  6900                           	opt stack 0
  6901  00019E                     	ds	1
  6902  00019F                     _LAST_NOTE_MODE_TRANSPOSE:
  6903                           	opt stack 0
  6904  00019F                     	ds	1
  6905  0001A0                     _LAST_NOTE_MODE_KEY_RELEASE:
  6906                           	opt stack 0
  6907  0001A0                     	ds	1
  6908  0001A1                     _LAST_NOTE_MODE_KEY_PRESS:
  6909                           	opt stack 0
  6910  0001A1                     	ds	1
  6911  0001A2                     _lastNoteMode:
  6912                           	opt stack 0
  6913  0001A2                     	ds	1
  6914  0001A3                     _skipFirstLast:
  6915                           	opt stack 0
  6916  0001A3                     	ds	1
  6917  0001A4                     _AUTO_RANDOMIZE:
  6918                           	opt stack 0
  6919  0001A4                     	ds	1
  6920  0001A5                     _latch_was_pressed:
  6921                           	opt stack 0
  6922  0001A5                     	ds	1
  6923  0001A6                     _AUTO_LATCH:
  6924                           	opt stack 0
  6925  0001A6                     	ds	1
  6926  0001A7                     _UN_LATCH_MODE:
  6927                           	opt stack 0
  6928  0001A7                     	ds	1
  6929  0001A8                     _LATCH:
  6930                           	opt stack 0
  6931  0001A8                     	ds	1
  6932  0001A9                     _RESET_ON_KEY_RELEASE:
  6933                           	opt stack 0
  6934  0001A9                     	ds	1
  6935  0001AA                     _RESET_ON_KEY_PRESS:
  6936                           	opt stack 0
  6937  0001AA                     	ds	1
  6938  0001AB                     _ARPEGGIO_ON:
  6939                           	opt stack 0
  6940  0001AB                     	ds	1
  6941  0001AC                     _SORT_DIRECTION:
  6942                           	opt stack 0
  6943  0001AC                     	ds	1
  6944  0001AD                     _TRANSPOSE_MODE:
  6945                           	opt stack 0
  6946  0001AD                     	ds	1
  6947  0001AE                     _lcd_print_once:
  6948                           	opt stack 0
  6949  0001AE                     	ds	1
  6950  0001AF                     _encoder_click:
  6951                           	opt stack 0
  6952  0001AF                     	ds	1
  6953  0001B0                     _encoderPolarity:
  6954                           	opt stack 0
  6955  0001B0                     	ds	1
  6956  0001B1                     _encoderB:
  6957                           	opt stack 0
  6958  0001B1                     	ds	1
  6959  0001B2                     _encoderA:
  6960                           	opt stack 0
  6961  0001B2                     	ds	1
  6962  0001B3                     _POT_MODE:
  6963                           	opt stack 0
  6964  0001B3                     	ds	1
  6965  0001B4                     _ON_OFF:
  6966                           	opt stack 0
  6967  0001B4                     	ds	1
  6968  0001B5                     _light_decimal_points:
  6969                           	opt stack 0
  6970  0001B5                     	ds	1
  6971                           tblptru	equ	0xFF8
  6972                           tblptrh	equ	0xFF7
  6973                           tblptrl	equ	0xFF6
  6974                           tablat	equ	0xFF5
  6975                           postinc0	equ	0xFEE
  6976                           wreg	equ	0xFE8
  6977                           postdec1	equ	0xFE5
  6978                           fsr1l	equ	0xFE1
  6979                           
  6980                           	psect	bssCOMRAM
  6981  000037                     __pbssCOMRAM:
  6982                           	opt stack 0
  6983  000037                     displayDigits@digit:
  6984                           	opt stack 0
  6985  000037                     	ds	4
  6986  00003B                     _arpeggiatorMenu:
  6987                           	opt stack 0
  6988  00003B                     	ds	3
  6989  00003E                     _potsMenu:
  6990                           	opt stack 0
  6991  00003E                     	ds	3
  6992  000041                     _drumMenu:
  6993                           	opt stack 0
  6994  000041                     	ds	3
  6995  000044                     _triadMenu:
  6996                           	opt stack 0
  6997  000044                     	ds	3
  6998  000047                     _modeMenu:
  6999                           	opt stack 0
  7000  000047                     	ds	3
  7001  00004A                     _keyboardMenu:
  7002                           	opt stack 0
  7003  00004A                     	ds	3
  7004  00004D                     displayDigits@number_to_display_temp:
  7005                           	opt stack 0
  7006  00004D                     	ds	2
  7007  00004F                     _arpeggioPtr:
  7008                           	opt stack 0
  7009  00004F                     	ds	2
  7010  000051                     displayString@letter_counter:
  7011                           	opt stack 0
  7012  000051                     	ds	1
  7013  000052                     displayDigits@digit_counter:
  7014                           	opt stack 0
  7015  000052                     	ds	1
  7016  000053                     keyboardTranspose@semitone_temp:
  7017                           	opt stack 0
  7018  000053                     	ds	1
  7019  000054                     _TIMER_OVERFLOWS:
  7020                           	opt stack 0
  7021  000054                     	ds	1
  7022  000055                     _last_octave:
  7023                           	opt stack 0
  7024  000055                     	ds	1
  7025  000056                     _which_octave:
  7026                           	opt stack 0
  7027  000056                     	ds	1
  7028  000057                     _which_note:
  7029                           	opt stack 0
  7030  000057                     	ds	1
  7031  000058                     _state:
  7032                           	opt stack 0
  7033  000058                     	ds	1
  7034  000059                     _DIGIT_MODE:
  7035                           	opt stack 0
  7036  000059                     	ds	1
  7037  00005A                     _DISPLAY_MODE:
  7038                           	opt stack 0
  7039  00005A                     	ds	1
  7040                           tblptru	equ	0xFF8
  7041                           tblptrh	equ	0xFF7
  7042                           tblptrl	equ	0xFF6
  7043                           tablat	equ	0xFF5
  7044                           postinc0	equ	0xFEE
  7045                           wreg	equ	0xFE8
  7046                           postdec1	equ	0xFE5
  7047                           fsr1l	equ	0xFE1
  7048                           
  7049                           	psect	dataCOMRAM
  7050  00005B                     __pdataCOMRAM:
  7051                           	opt stack 0
  7052  00005B                     _number_to_display:
  7053                           	opt stack 0
  7054  00005B                     	ds	2
  7055  00005D                     _PRESCALER:
  7056                           	opt stack 0
  7057  00005D                     	ds	1
  7058  00005E                     _PPQN:
  7059                           	opt stack 0
  7060  00005E                     	ds	1
  7061                           tblptru	equ	0xFF8
  7062                           tblptrh	equ	0xFF7
  7063                           tblptrl	equ	0xFF6
  7064                           tablat	equ	0xFF5
  7065                           postinc0	equ	0xFEE
  7066                           wreg	equ	0xFE8
  7067                           postdec1	equ	0xFE5
  7068                           fsr1l	equ	0xFE1
  7069                           
  7070                           	psect	bssBANK0
  7071  0000D0                     __pbssBANK0:
  7072                           	opt stack 0
  7073  0000D0                     _keyboard:
  7074                           	opt stack 0
  7075  0000D0                     	ds	4
  7076  0000D4                     _button_state_last:
  7077                           	opt stack 0
  7078  0000D4                     	ds	4
  7079  0000D8                     _button_state_now:
  7080                           	opt stack 0
  7081  0000D8                     	ds	4
  7082  0000DC                     _arpeggiatorLastNoteModeMenu:
  7083                           	opt stack 0
  7084  0000DC                     	ds	3
  7085  0000DF                     _savesMenu:
  7086                           	opt stack 0
  7087  0000DF                     	ds	3
  7088  0000E2                     key_press_release_note_off@temp:
  7089                           	opt stack 0
  7090  0000E2                     	ds	1
  7091  0000E3                     _toggle_state:
  7092                           	opt stack 0
  7093  0000E3                     	ds	1
  7094  0000E4                     _ARRAY_INDEX:
  7095                           	opt stack 0
  7096  0000E4                     	ds	1
  7097  0000E5                     _NUM_NOTES_PRESSED:
  7098                           	opt stack 0
  7099  0000E5                     	ds	1
  7100  0000E6                     _parallel:
  7101                           	opt stack 0
  7102  0000E6                     	ds	1
  7103  0000E7                     _stored_octave:
  7104                           	opt stack 0
  7105  0000E7                     	ds	1
  7106  0000E8                     _last_note:
  7107                           	opt stack 0
  7108  0000E8                     	ds	1
  7109  0000E9                     _startingDirection:
  7110                           	opt stack 0
  7111  0000E9                     	ds	1
  7112  0000EA                     _ARPEGGIO_TYPE:
  7113                           	opt stack 0
  7114  0000EA                     	ds	1
  7115  0000EB                     _encoder_direction:
  7116                           	opt stack 0
  7117  0000EB                     	ds	1
  7118  0000EC                     _drum:
  7119                           	opt stack 0
  7120  0000EC                     	ds	1
  7121  0000ED                     _drum_button_state_last:
  7122                           	opt stack 0
  7123  0000ED                     	ds	1
  7124  0000EE                     _drum_button_state_now:
  7125                           	opt stack 0
  7126  0000EE                     	ds	1
  7127  0000EF                     _which_seventh:
  7128                           	opt stack 0
  7129  0000EF                     	ds	1
  7130  0000F0                     _which_triad:
  7131                           	opt stack 0
  7132  0000F0                     	ds	1
  7133  0000F1                     _which_mode:
  7134                           	opt stack 0
  7135  0000F1                     	ds	1
  7136  0000F2                     _KEYBOARD_MODE:
  7137                           	opt stack 0
  7138  0000F2                     	ds	1
  7139  0000F3                     _semitone:
  7140                           	opt stack 0
  7141  0000F3                     	ds	1
  7142  0000F4                     _noteNumber:
  7143                           	opt stack 0
  7144  0000F4                     	ds	1
  7145  0000F5                     _statusByte:
  7146                           	opt stack 0
  7147  0000F5                     	ds	1
  7148  0000F6                     _channel:
  7149                           	opt stack 0
  7150  0000F6                     	ds	1
  7151                           tblptru	equ	0xFF8
  7152                           tblptrh	equ	0xFF7
  7153                           tblptrl	equ	0xFF6
  7154                           tablat	equ	0xFF5
  7155                           postinc0	equ	0xFEE
  7156                           wreg	equ	0xFE8
  7157                           postdec1	equ	0xFE5
  7158                           fsr1l	equ	0xFE1
  7159                           
  7160                           	psect	dataBANK0
  7161  0000F7                     __pdataBANK0:
  7162                           	opt stack 0
  7163  0000F7                     _NOTE_LENGTH_PULSES:
  7164                           	opt stack 0
  7165  0000F7                     	ds	1
  7166  0000F8                     _OCTAVES:
  7167                           	opt stack 0
  7168  0000F8                     	ds	1
  7169  0000F9                     _which_screen:
  7170                           	opt stack 0
  7171  0000F9                     	ds	1
  7172  0000FA                     _iterator_focus:
  7173                           	opt stack 0
  7174  0000FA                     	ds	1
  7175  0000FB                     _ema_integer:
  7176                           	opt stack 0
  7177  0000FB                     	ds	1
  7178  0000FC                     _octave:
  7179                           	opt stack 0
  7180  0000FC                     	ds	1
  7181  0000FD                     _velocity:
  7182                           	opt stack 0
  7183  0000FD                     	ds	1
  7184  0000FE                     _drumchannel:
  7185                           	opt stack 0
  7186  0000FE                     	ds	1
  7187  0000FF                     _BPM:
  7188                           	opt stack 0
  7189  0000FF                     	ds	1
  7190                           tblptru	equ	0xFF8
  7191                           tblptrh	equ	0xFF7
  7192                           tblptrl	equ	0xFF6
  7193                           tablat	equ	0xFF5
  7194                           postinc0	equ	0xFEE
  7195                           wreg	equ	0xFE8
  7196                           postdec1	equ	0xFE5
  7197                           fsr1l	equ	0xFE1
  7198                           
  7199                           	psect	bssBANK1
  7200  000100                     __pbssBANK1:
  7201                           	opt stack 0
  7202  000100                     displayString@letter:
  7203                           	opt stack 0
  7204  000100                     	ds	4
  7205  000104                     _ema_alpha:
  7206                           	opt stack 0
  7207  000104                     	ds	4
  7208  000108                     _arpeggiatorLastNoteModeResetMenu:
  7209                           	opt stack 0
  7210  000108                     	ds	3
  7211  00010B                     _arpeggiatorLastNoteModeTransposeMenu:
  7212                           	opt stack 0
  7213  00010B                     	ds	3
  7214  00010E                     _arpeggiatorLastNoteModeKeyReleaseMenu:
  7215                           	opt stack 0
  7216  00010E                     	ds	3
  7217  000111                     _arpeggiatorLastNoteModeKeyPressMenu:
  7218                           	opt stack 0
  7219  000111                     	ds	3
  7220  000114                     _arpeggiatorSkipFirstLastMenu:
  7221                           	opt stack 0
  7222  000114                     	ds	3
  7223  000117                     _arpeggiatorRandomizeTypeMenu:
  7224                           	opt stack 0
  7225  000117                     	ds	3
  7226  00011A                     _arpeggiatorRandomizeSkipMenu:
  7227                           	opt stack 0
  7228  00011A                     	ds	3
  7229  00011D                     _arpeggiatorUnLatchModeMenu:
  7230                           	opt stack 0
  7231  00011D                     	ds	3
  7232  000120                     _arpeggiatorAutoLatchOnOffMenu:
  7233                           	opt stack 0
  7234  000120                     	ds	3
  7235  000123                     _arpeggiatorLatchOnOffMenu:
  7236                           	opt stack 0
  7237  000123                     	ds	3
  7238  000126                     _arpeggiatorLatchMenu:
  7239                           	opt stack 0
  7240  000126                     	ds	3
  7241  000129                     _arpeggiatorNoteLengthMenu:
  7242                           	opt stack 0
  7243  000129                     	ds	3
  7244  00012C                     _arpeggiatorTypeMenu:
  7245                           	opt stack 0
  7246  00012C                     	ds	3
  7247  00012F                     _arpeggiatorOctavesMenu:
  7248                           	opt stack 0
  7249  00012F                     	ds	3
  7250  000132                     _arpeggiatorTempoMenu:
  7251                           	opt stack 0
  7252  000132                     	ds	3
  7253  000135                     _arpeggiatorOnOffMenu:
  7254                           	opt stack 0
  7255  000135                     	ds	3
  7256  000138                     _encoderPolarityMenu:
  7257                           	opt stack 0
  7258  000138                     	ds	3
  7259  00013B                     _eepromMenu:
  7260                           	opt stack 0
  7261  00013B                     	ds	3
  7262  00013E                     _drumChannelMenu:
  7263                           	opt stack 0
  7264  00013E                     	ds	3
  7265  000141                     _mainChannelMenu:
  7266                           	opt stack 0
  7267  000141                     	ds	3
  7268  000144                     _programChangeMenu:
  7269                           	opt stack 0
  7270  000144                     	ds	3
  7271  000147                     _midiChannelMenu:
  7272                           	opt stack 0
  7273  000147                     	ds	3
  7274  00014A                     _joystickCCMenu:
  7275                           	opt stack 0
  7276  00014A                     	ds	3
  7277  00014D                     _slidepotsCCMenu:
  7278                           	opt stack 0
  7279  00014D                     	ds	3
  7280  000150                     _potsCCMenu:
  7281                           	opt stack 0
  7282  000150                     	ds	3
  7283  000153                     _potsAlphaMenu:
  7284                           	opt stack 0
  7285  000153                     	ds	3
  7286  000156                     _potsResoMenu:
  7287                           	opt stack 0
  7288  000156                     	ds	3
  7289  000159                     _drumCCMenu:
  7290                           	opt stack 0
  7291  000159                     	ds	3
  7292  00015C                     _drumNNMenu:
  7293                           	opt stack 0
  7294  00015C                     	ds	3
  7295  00015F                     _drumCCTypeMenu:
  7296                           	opt stack 0
  7297  00015F                     	ds	3
  7298  000162                     _transposeMenu:
  7299                           	opt stack 0
  7300  000162                     	ds	3
  7301  000165                     _seventhMenu:
  7302                           	opt stack 0
  7303  000165                     	ds	3
  7304  000168                     _mainMenu:
  7305                           	opt stack 0
  7306  000168                     	ds	3
  7307  00016B                     displayDigits@number_to_display_last:
  7308                           	opt stack 0
  7309  00016B                     	ds	2
  7310  00016D                     _TIMER_PRELOAD:
  7311                           	opt stack 0
  7312  00016D                     	ds	2
  7313  00016F                     _encoder_state_last:
  7314                           	opt stack 0
  7315  00016F                     	ds	1
  7316  000170                     _encoder_state_now:
  7317                           	opt stack 0
  7318  000170                     	ds	1
  7319  000171                     _patch_number:
  7320                           	opt stack 0
  7321  000171                     	ds	1
  7322  000172                     _ARPEGGIO:
  7323                           	opt stack 0
  7324  000172                     	ds	16
  7325  000182                     _string2display:
  7326                           	opt stack 0
  7327  000182                     	ds	5
  7328                           tblptru	equ	0xFF8
  7329                           tblptrh	equ	0xFF7
  7330                           tblptrl	equ	0xFF6
  7331                           tablat	equ	0xFF5
  7332                           postinc0	equ	0xFEE
  7333                           wreg	equ	0xFE8
  7334                           postdec1	equ	0xFE5
  7335                           fsr1l	equ	0xFE1
  7336                           
  7337                           	psect	dataBANK1
  7338  0001D7                     __pdataBANK1:
  7339                           	opt stack 0
  7340  0001D7                     _DRUM_CC:
  7341                           	opt stack 0
  7342  0001D7                     	ds	8
  7343  0001DF                     _DRUM_NOTE:
  7344                           	opt stack 0
  7345  0001DF                     	ds	8
  7346  0001E7                     _randx:
  7347                           	opt stack 0
  7348  0001E7                     	ds	4
  7349  0001EB                     _HYST_VAL:
  7350                           	opt stack 0
  7351  0001EB                     	ds	2
  7352  0001ED                     _command:
  7353                           	opt stack 0
  7354  0001ED                     	ds	1
  7355  0001EE                     _string_to_display:
  7356                           	opt stack 0
  7357  0001EE                     	ds	5
  7358  0001F3                     _diminished_triad:
  7359                           	opt stack 0
  7360  0001F3                     	ds	3
  7361  0001F6                     _augmented_triad:
  7362                           	opt stack 0
  7363  0001F6                     	ds	3
  7364  0001F9                     _minor_triad:
  7365                           	opt stack 0
  7366  0001F9                     	ds	3
  7367  0001FC                     _major_triad:
  7368                           	opt stack 0
  7369  0001FC                     	ds	3
  7370                           tblptru	equ	0xFF8
  7371                           tblptrh	equ	0xFF7
  7372                           tblptrl	equ	0xFF6
  7373                           tablat	equ	0xFF5
  7374                           postinc0	equ	0xFEE
  7375                           wreg	equ	0xFE8
  7376                           postdec1	equ	0xFE5
  7377                           fsr1l	equ	0xFE1
  7378                           
  7379                           	psect	bssBANK2
  7380  000200                     __pbssBANK2:
  7381                           	opt stack 0
  7382  000200                     _potentiometer_filtered_last:
  7383                           	opt stack 0
  7384  000200                     	ds	32
  7385  000220                     _potentiometer_filtered_now:
  7386                           	opt stack 0
  7387  000220                     	ds	32
  7388  000240                     _ema_sum:
  7389                           	opt stack 0
  7390  000240                     	ds	32
  7391  000260                     _potentiometer_raw:
  7392                           	opt stack 0
  7393  000260                     	ds	32
  7394  000280                     readPotentiometers@count:
  7395                           	opt stack 0
  7396  000280                     	ds	4
  7397  000284                     _count_ISR:
  7398                           	opt stack 0
  7399  000284                     	ds	4
  7400  000288                     _number_of_interrupts:
  7401                           	opt stack 0
  7402  000288                     	ds	4
  7403  00028C                     _ARPEGGIO_RANDOM:
  7404                           	opt stack 0
  7405  00028C                     	ds	16
  7406  00029C                     _ARPEGGIO_SORTED:
  7407                           	opt stack 0
  7408  00029C                     	ds	16
  7409                           tblptru	equ	0xFF8
  7410                           tblptrh	equ	0xFF7
  7411                           tblptrl	equ	0xFF6
  7412                           tablat	equ	0xFF5
  7413                           postinc0	equ	0xFEE
  7414                           wreg	equ	0xFE8
  7415                           postdec1	equ	0xFE5
  7416                           fsr1l	equ	0xFE1
  7417                           
  7418                           	psect	dataBANK2
  7419  0002AC                     __pdataBANK2:
  7420                           	opt stack 0
  7421  0002AC                     _inputPotsArray:
  7422                           	opt stack 0
  7423  0002AC                     	ds	48
  7424  0002DC                     _NOTE_LENGTH_PULSES_ARRAY:
  7425                           	opt stack 0
  7426  0002DC                     	ds	12
  7427  0002E8                     _diminished_7th:
  7428                           	opt stack 0
  7429  0002E8                     	ds	4
  7430  0002EC                     _half_diminished_7th:
  7431                           	opt stack 0
  7432  0002EC                     	ds	4
  7433  0002F0                     _minor_7th:
  7434                           	opt stack 0
  7435  0002F0                     	ds	4
  7436  0002F4                     _major_7th:
  7437                           	opt stack 0
  7438  0002F4                     	ds	4
  7439  0002F8                     _dominant_7th:
  7440                           	opt stack 0
  7441  0002F8                     	ds	4
  7442                           tblptru	equ	0xFF8
  7443                           tblptrh	equ	0xFF7
  7444                           tblptrl	equ	0xFF6
  7445                           tablat	equ	0xFF5
  7446                           postinc0	equ	0xFEE
  7447                           wreg	equ	0xFE8
  7448                           postdec1	equ	0xFE5
  7449                           fsr1l	equ	0xFE1
  7450                           
  7451                           	psect	dataBANK3
  7452  000300                     __pdataBANK3:
  7453                           	opt stack 0
  7454  000300                     _menuArray:
  7455                           	opt stack 0
  7456  000300                     	ds	105
  7457                           tblptru	equ	0xFF8
  7458                           tblptrh	equ	0xFF7
  7459                           tblptrl	equ	0xFF6
  7460                           tablat	equ	0xFF5
  7461                           postinc0	equ	0xFEE
  7462                           wreg	equ	0xFE8
  7463                           postdec1	equ	0xFE5
  7464                           fsr1l	equ	0xFE1
  7465                           
  7466                           	psect	cstackBANK1
  7467  000187                     __pcstackBANK1:
  7468                           	opt stack 0
  7469  000187                     loadFromEEPROM@to_load:
  7470                           	opt stack 0
  7471                           
  7472                           ; 75 bytes @ 0x0
  7473  000187                     	ds	75
  7474  0001D2                     loadFromEEPROM@baseAddress:
  7475                           	opt stack 0
  7476                           
  7477                           ; 2 bytes @ 0x4B
  7478  0001D2                     	ds	2
  7479  0001D4                     loadFromEEPROM@slotNumber:
  7480                           	opt stack 0
  7481                           
  7482                           ; 1 bytes @ 0x4D
  7483  0001D4                     	ds	1
  7484  0001D5                     loadFromEEPROM@byte_count:
  7485                           	opt stack 0
  7486                           
  7487                           ; 2 bytes @ 0x4E
  7488  0001D5                     	ds	2
  7489                           tblptru	equ	0xFF8
  7490                           tblptrh	equ	0xFF7
  7491                           tblptrl	equ	0xFF6
  7492                           tablat	equ	0xFF5
  7493                           postinc0	equ	0xFEE
  7494                           wreg	equ	0xFE8
  7495                           postdec1	equ	0xFE5
  7496                           fsr1l	equ	0xFE1
  7497                           
  7498                           	psect	cstackBANK0
  7499  000060                     __pcstackBANK0:
  7500                           	opt stack 0
  7501  000060                     ??_add_notes_to_arpeggio:
  7502  000060                     ??_rotateArrayLeft:
  7503  000060                     ??_processEncoderBuxton:
  7504  000060                     ??_buttonInputsSerial:
  7505  000060                     ?_ADC_Read:
  7506                           	opt stack 0
  7507  000060                     ?___awdiv:
  7508                           	opt stack 0
  7509  000060                     ?___lmul:
  7510                           	opt stack 0
  7511  000060                     ?___xxtofl:
  7512                           	opt stack 0
  7513  000060                     Lcd_SetBit@data_bit:
  7514                           	opt stack 0
  7515  000060                     sendOut@a:
  7516                           	opt stack 0
  7517  000060                     sendUSB@message2:
  7518                           	opt stack 0
  7519  000060                     setControllerResolution@i:
  7520                           	opt stack 0
  7521  000060                     wait_one_pulse@mode:
  7522                           	opt stack 0
  7523  000060                     copy_array@i:
  7524                           	opt stack 0
  7525  000060                     ___lbmod@divisor:
  7526                           	opt stack 0
  7527  000060                     printThisNumber@n:
  7528                           	opt stack 0
  7529  000060                     Read_b_eep@badd:
  7530                           	opt stack 0
  7531  000060                     Write_b_eep@badd:
  7532                           	opt stack 0
  7533  000060                     ___awdiv@dividend:
  7534                           	opt stack 0
  7535  000060                     srand@x:
  7536                           	opt stack 0
  7537  000060                     strcpy@to:
  7538                           	opt stack 0
  7539  000060                     ___lmul@multiplier:
  7540                           	opt stack 0
  7541  000060                     ___xxtofl@val:
  7542                           	opt stack 0
  7543                           
  7544                           ; 4 bytes @ 0x0
  7545  000060                     	ds	1
  7546  000061                     ??_Lcd_Cmd:
  7547  000061                     Lcd_Print_Char@Lower_Nibble:
  7548                           	opt stack 0
  7549  000061                     sendUSB@message3:
  7550                           	opt stack 0
  7551  000061                     findArrayIndex@pitch_of_key_release:
  7552                           	opt stack 0
  7553  000061                     ___lbmod@dividend:
  7554                           	opt stack 0
  7555                           
  7556                           ; 1 bytes @ 0x1
  7557  000061                     	ds	1
  7558  000062                     ??_ADC_Read:
  7559  000062                     ??_sendUSB:
  7560  000062                     Lcd_Cmd@a:
  7561                           	opt stack 0
  7562  000062                     Lcd_Print_Char@Upper_Nibble:
  7563                           	opt stack 0
  7564  000062                     findArrayIndex@i:
  7565                           	opt stack 0
  7566  000062                     Write_b_eep@bdat:
  7567                           	opt stack 0
  7568  000062                     ___lbmod@counter:
  7569                           	opt stack 0
  7570  000062                     ___awdiv@divisor:
  7571                           	opt stack 0
  7572  000062                     strcpy@from:
  7573                           	opt stack 0
  7574                           
  7575                           ; 2 bytes @ 0x2
  7576  000062                     	ds	1
  7577  000063                     ??_Lcd_Start:
  7578  000063                     Lcd_Set_Cursor@b:
  7579                           	opt stack 0
  7580  000063                     Lcd_Print_Char@data:
  7581                           	opt stack 0
  7582  000063                     Write_b_eep@GIE_BIT_VAL:
  7583                           	opt stack 0
  7584  000063                     ___lbmod@rem:
  7585                           	opt stack 0
  7586                           
  7587                           ; 1 bytes @ 0x3
  7588  000063                     	ds	1
  7589  000064                     ??___xxtofl:
  7590  000064                     ?___wmul:
  7591                           	opt stack 0
  7592  000064                     Lcd_Set_Cursor@a:
  7593                           	opt stack 0
  7594  000064                     ADC_Read@adc_channel:
  7595                           	opt stack 0
  7596  000064                     buttonInputsSerial@i:
  7597                           	opt stack 0
  7598  000064                     ___awdiv@counter:
  7599                           	opt stack 0
  7600  000064                     Lcd_Start@i:
  7601                           	opt stack 0
  7602  000064                     Lcd_Print_Char@i:
  7603                           	opt stack 0
  7604  000064                     ___wmul@multiplier:
  7605                           	opt stack 0
  7606  000064                     strcpy@cp:
  7607                           	opt stack 0
  7608  000064                     ___lmul@multiplicand:
  7609                           	opt stack 0
  7610  000064                     saveToEEPROM@to_save:
  7611                           	opt stack 0
  7612                           
  7613                           ; 75 bytes @ 0x4
  7614  000064                     	ds	1
  7615  000065                     Lcd_Set_Cursor@z:
  7616                           	opt stack 0
  7617  000065                     sendUSB@message1:
  7618                           	opt stack 0
  7619  000065                     buttonInputsSerial@i_4380:
  7620                           	opt stack 0
  7621  000065                     ___awdiv@sign:
  7622                           	opt stack 0
  7623                           
  7624                           ; 1 bytes @ 0x5
  7625  000065                     	ds	1
  7626  000066                     ??_displayTest:
  7627  000066                     Lcd_Set_Cursor@y:
  7628                           	opt stack 0
  7629  000066                     Lcd_Print_Char@i_57:
  7630                           	opt stack 0
  7631  000066                     ___wmul@multiplicand:
  7632                           	opt stack 0
  7633  000066                     ___awdiv@quotient:
  7634                           	opt stack 0
  7635  000066                     sendUSB@midiMessage:
  7636                           	opt stack 0
  7637                           
  7638                           ; 3 bytes @ 0x6
  7639  000066                     	ds	1
  7640  000067                     Lcd_Set_Cursor@temp:
  7641                           	opt stack 0
  7642  000067                     add_notes_to_arpeggio@pitch:
  7643                           	opt stack 0
  7644  000067                     rotateArrayLeft@array_index:
  7645                           	opt stack 0
  7646                           
  7647                           ; 1 bytes @ 0x7
  7648  000067                     	ds	1
  7649  000068                     rotateArrayLeft@i:
  7650                           	opt stack 0
  7651  000068                     ___xxtofl@sign:
  7652                           	opt stack 0
  7653  000068                     ___wmul@product:
  7654                           	opt stack 0
  7655  000068                     ___lmul@product:
  7656                           	opt stack 0
  7657                           
  7658                           ; 4 bytes @ 0x8
  7659  000068                     	ds	1
  7660  000069                     sendUSB@i:
  7661                           	opt stack 0
  7662  000069                     delete_notes_from_arpeggio@pitch:
  7663                           	opt stack 0
  7664  000069                     ___xxtofl@exp:
  7665                           	opt stack 0
  7666                           
  7667                           ; 1 bytes @ 0x9
  7668  000069                     	ds	1
  7669  00006A                     ??_initializeMenuArray:
  7670  00006A                     sendUSB@ii:
  7671                           	opt stack 0
  7672  00006A                     delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT:
  7673                           	opt stack 0
  7674  00006A                     Lcd_Print_String@a:
  7675                           	opt stack 0
  7676  00006A                     ___xxtofl@arg:
  7677                           	opt stack 0
  7678                           
  7679                           ; 4 bytes @ 0xA
  7680  00006A                     	ds	1
  7681  00006B                     noteOff@pitch:
  7682                           	opt stack 0
  7683  00006B                     noteOffDrum@pitch:
  7684                           	opt stack 0
  7685  00006B                     controlChange@controllerNumber:
  7686                           	opt stack 0
  7687  00006B                     pitchBend@lowByte:
  7688                           	opt stack 0
  7689  00006B                     programChange@data1:
  7690                           	opt stack 0
  7691  00006B                     initializeMenuArray@NumberOfElements:
  7692                           	opt stack 0
  7693                           
  7694                           ; 1 bytes @ 0xB
  7695  00006B                     	ds	1
  7696  00006C                     ??_Lcd_Print_String:
  7697  00006C                     ?_rand:
  7698                           	opt stack 0
  7699  00006C                     ?___aldiv:
  7700                           	opt stack 0
  7701  00006C                     noteOff@velocity:
  7702                           	opt stack 0
  7703  00006C                     noteOffDrum@velocity:
  7704                           	opt stack 0
  7705  00006C                     controlChange@value:
  7706                           	opt stack 0
  7707  00006C                     pitchBend@highByte:
  7708                           	opt stack 0
  7709  00006C                     programChange@data2:
  7710                           	opt stack 0
  7711  00006C                     initializeMenuArray@i:
  7712                           	opt stack 0
  7713  00006C                     ___aldiv@dividend:
  7714                           	opt stack 0
  7715                           
  7716                           ; 4 bytes @ 0xC
  7717  00006C                     	ds	1
  7718  00006D                     noteOff@channel:
  7719                           	opt stack 0
  7720  00006D                     noteOffDrum@channel:
  7721                           	opt stack 0
  7722  00006D                     controlChange@channel:
  7723                           	opt stack 0
  7724  00006D                     pitchBend@channel:
  7725                           	opt stack 0
  7726  00006D                     programChange@channel:
  7727                           	opt stack 0
  7728                           
  7729                           ; 1 bytes @ 0xD
  7730  00006D                     	ds	1
  7731  00006E                     ??_processPotentiometers:
  7732  00006E                     ?___awmod:
  7733                           	opt stack 0
  7734  00006E                     ?___flmul:
  7735                           	opt stack 0
  7736  00006E                     noteOn@pitch:
  7737                           	opt stack 0
  7738  00006E                     noteOnDrum@pitch:
  7739                           	opt stack 0
  7740  00006E                     Lcd_Print_String@i:
  7741                           	opt stack 0
  7742  00006E                     ___awmod@dividend:
  7743                           	opt stack 0
  7744  00006E                     ___flmul@b:
  7745                           	opt stack 0
  7746                           
  7747                           ; 4 bytes @ 0xE
  7748  00006E                     	ds	1
  7749  00006F                     noteOn@velocity:
  7750                           	opt stack 0
  7751  00006F                     noteOnDrum@velocity:
  7752                           	opt stack 0
  7753                           
  7754                           ; 1 bytes @ 0xF
  7755  00006F                     	ds	1
  7756  000070                     ??_Function_B:
  7757  000070                     ??_Function_H_5:
  7758  000070                     ??_Function_H_8:
  7759  000070                     ??_exitFunction:
  7760  000070                     ??_exitSave:
  7761  000070                     ??_exitLoad:
  7762  000070                     ??_eepromExit:
  7763  000070                     ??_Function_A_1:
  7764  000070                     ??_Function_A_2:
  7765  000070                     ??_Function_A_3:
  7766  000070                     ??_Function_C_1:
  7767  000070                     ??_Function_D_1:
  7768  000070                     ??_Function_G_3:
  7769  000070                     ??_Function_H_9_1:
  7770  000070                     ??_Function_H_9_2:
  7771  000070                     ??_Function_H_9_3:
  7772  000070                     ??_Function_H_9_4:
  7773  000070                     noteOn@channel:
  7774                           	opt stack 0
  7775  000070                     noteOnDrum@channel:
  7776                           	opt stack 0
  7777  000070                     ___awmod@divisor:
  7778                           	opt stack 0
  7779  000070                     ___aldiv@divisor:
  7780                           	opt stack 0
  7781                           
  7782                           ; 4 bytes @ 0x10
  7783  000070                     	ds	1
  7784  000071                     ??_Function_A:
  7785  000071                     ??_Function_H_9:
  7786  000071                     Function_H_5@i:
  7787                           	opt stack 0
  7788  000071                     processPotentiometers@lowByte:
  7789                           	opt stack 0
  7790                           
  7791                           ; 1 bytes @ 0x11
  7792  000071                     	ds	1
  7793  000072                     ??_Function_G_4:
  7794  000072                     processPotentiometers@highByte:
  7795                           	opt stack 0
  7796  000072                     ___awmod@counter:
  7797                           	opt stack 0
  7798  000072                     ___flmul@a:
  7799                           	opt stack 0
  7800                           
  7801                           ; 4 bytes @ 0x12
  7802  000072                     	ds	1
  7803  000073                     processPotentiometers@i:
  7804                           	opt stack 0
  7805  000073                     ___awmod@sign:
  7806                           	opt stack 0
  7807                           
  7808                           ; 1 bytes @ 0x13
  7809  000073                     	ds	1
  7810  000074                     random_pitches@random_array_index:
  7811                           	opt stack 0
  7812  000074                     random_pitches_non_repeating@temp:
  7813                           	opt stack 0
  7814  000074                     ___aldiv@counter:
  7815                           	opt stack 0
  7816  000074                     int2string@number:
  7817                           	opt stack 0
  7818                           
  7819                           ; 2 bytes @ 0x14
  7820  000074                     	ds	1
  7821  000075                     random_pitches@i:
  7822                           	opt stack 0
  7823  000075                     random_pitches_non_repeating@randomIndex:
  7824                           	opt stack 0
  7825  000075                     ___aldiv@sign:
  7826                           	opt stack 0
  7827                           
  7828                           ; 1 bytes @ 0x15
  7829  000075                     	ds	1
  7830  000076                     ??___flmul:
  7831  000076                     ??_int2string:
  7832  000076                     random_pitches_non_repeating@i:
  7833                           	opt stack 0
  7834  000076                     ___aldiv@quotient:
  7835                           	opt stack 0
  7836                           
  7837                           ; 4 bytes @ 0x16
  7838  000076                     	ds	1
  7839  000077                     ??_Function_H_4:
  7840  000077                     ??_playTriad:
  7841  000077                     ??_playSeventh:
  7842  000077                     playThisNotePentatonic@index:
  7843                           	opt stack 0
  7844  000077                     playDiatonicTriadMajor@index:
  7845                           	opt stack 0
  7846  000077                     playDiatonicSeventhMajor@index:
  7847                           	opt stack 0
  7848  000077                     playDiatonicTriadMinor@index:
  7849                           	opt stack 0
  7850  000077                     playDiatonicSeventhMinor@index:
  7851                           	opt stack 0
  7852                           
  7853                           ; 1 bytes @ 0x17
  7854  000077                     	ds	1
  7855  000078                     ??_playDiatonicTriadMajor:
  7856  000078                     ??_playDiatonicTriadMinor:
  7857  000078                     ??_playDiatonicSeventhMajor:
  7858  000078                     ??_playDiatonicSeventhMinor:
  7859  000078                     ??_playThisNotePentatonic:
  7860  000078                     int2string@number_to_display_temp:
  7861                           	opt stack 0
  7862                           
  7863                           ; 2 bytes @ 0x18
  7864  000078                     	ds	2
  7865  00007A                     ??_Function_E:
  7866  00007A                     ??_Function_C_2:
  7867  00007A                     ??_Function_C_3:
  7868  00007A                     ?_map:
  7869                           	opt stack 0
  7870  00007A                     ___flmul@sign:
  7871                           	opt stack 0
  7872  00007A                     map@x:
  7873                           	opt stack 0
  7874                           
  7875                           ; 4 bytes @ 0x1A
  7876  00007A                     	ds	1
  7877  00007B                     setControllerNumbers@array_index:
  7878                           	opt stack 0
  7879  00007B                     Function_C_2@array_index:
  7880                           	opt stack 0
  7881  00007B                     Function_C_3@array_index:
  7882                           	opt stack 0
  7883  00007B                     playTriad@triad_p:
  7884                           	opt stack 0
  7885  00007B                     playSeventh@seventh_p:
  7886                           	opt stack 0
  7887  00007B                     ___flmul@grs:
  7888                           	opt stack 0
  7889                           
  7890                           ; 4 bytes @ 0x1B
  7891  00007B                     	ds	1
  7892  00007C                     ??_Function_C:
  7893  00007C                     ??_Function_D_3:
  7894  00007C                     ??_Function_D_4:
  7895  00007C                     ??_Function_D_5:
  7896  00007C                     playThisNotePentatonic@temp_pitch:
  7897                           	opt stack 0
  7898  00007C                     playDiatonicTriadMajor@i:
  7899                           	opt stack 0
  7900  00007C                     playDiatonicSeventhMajor@i:
  7901                           	opt stack 0
  7902  00007C                     playDiatonicTriadMinor@pitch:
  7903                           	opt stack 0
  7904  00007C                     playDiatonicSeventhMinor@pitch:
  7905                           	opt stack 0
  7906                           
  7907                           ; 1 bytes @ 0x1C
  7908  00007C                     	ds	1
  7909  00007D                     keyboard_sharps_only_efficient@pitch:
  7910                           	opt stack 0
  7911  00007D                     playTriad@i:
  7912                           	opt stack 0
  7913  00007D                     playSeventh@i:
  7914                           	opt stack 0
  7915  00007D                     playDiatonicTriadMajor@i_1679:
  7916                           	opt stack 0
  7917  00007D                     playDiatonicSeventhMajor@i_1684:
  7918                           	opt stack 0
  7919  00007D                     playDiatonicTriadMinor@i:
  7920                           	opt stack 0
  7921  00007D                     playDiatonicSeventhMinor@i:
  7922                           	opt stack 0
  7923  00007D                     Function_D_3@array_index:
  7924                           	opt stack 0
  7925  00007D                     Function_D_4@array_index:
  7926                           	opt stack 0
  7927  00007D                     Function_D_5@array_index:
  7928                           	opt stack 0
  7929                           
  7930                           ; 1 bytes @ 0x1D
  7931  00007D                     	ds	1
  7932  00007E                     keyboard_sharps_only_efficient@index:
  7933                           	opt stack 0
  7934  00007E                     playTriad@i_1657:
  7935                           	opt stack 0
  7936  00007E                     playSeventh@i_1662:
  7937                           	opt stack 0
  7938  00007E                     playDiatonicTriadMajor@pitch:
  7939                           	opt stack 0
  7940  00007E                     playDiatonicSeventhMajor@pitch:
  7941                           	opt stack 0
  7942  00007E                     playDiatonicTriadMinor@i_1689:
  7943                           	opt stack 0
  7944  00007E                     playDiatonicSeventhMinor@i_1694:
  7945                           	opt stack 0
  7946  00007E                     map@in_min:
  7947                           	opt stack 0
  7948                           
  7949                           ; 4 bytes @ 0x1E
  7950  00007E                     	ds	1
  7951  00007F                     playTriad@pitch:
  7952                           	opt stack 0
  7953  00007F                     playSeventh@pitch:
  7954                           	opt stack 0
  7955  00007F                     playThisNote8@index:
  7956                           	opt stack 0
  7957  00007F                     ___flmul@aexp:
  7958                           	opt stack 0
  7959                           
  7960                           ; 1 bytes @ 0x1F
  7961  00007F                     	ds	1
  7962  000080                     ??_playThisNote:
  7963  000080                     ??_playThisNote8:
  7964  000080                     ___flmul@bexp:
  7965                           	opt stack 0
  7966                           
  7967                           ; 1 bytes @ 0x20
  7968  000080                     	ds	1
  7969  000081                     ___flmul@prod:
  7970                           	opt stack 0
  7971                           
  7972                           ; 4 bytes @ 0x21
  7973  000081                     	ds	1
  7974  000082                     map@in_max:
  7975                           	opt stack 0
  7976                           
  7977                           ; 4 bytes @ 0x22
  7978  000082                     	ds	2
  7979  000084                     playThisNote@pitch:
  7980                           	opt stack 0
  7981  000084                     playThisNote8@pitch:
  7982                           	opt stack 0
  7983                           
  7984                           ; 1 bytes @ 0x24
  7985  000084                     	ds	1
  7986  000085                     keyboard_all_note_efficient@pitch:
  7987                           	opt stack 0
  7988  000085                     playThisNote8@temp_pitch:
  7989                           	opt stack 0
  7990  000085                     ___flmul@temp:
  7991                           	opt stack 0
  7992                           
  7993                           ; 2 bytes @ 0x25
  7994  000085                     	ds	1
  7995  000086                     playThisNote8@mode_p:
  7996                           	opt stack 0
  7997  000086                     map@out_min:
  7998                           	opt stack 0
  7999                           
  8000                           ; 4 bytes @ 0x26
  8001  000086                     	ds	1
  8002  000087                     ?___fldiv:
  8003                           	opt stack 0
  8004  000087                     ___fldiv@b:
  8005                           	opt stack 0
  8006                           
  8007                           ; 4 bytes @ 0x27
  8008  000087                     	ds	1
  8009  000088                     ??_Function_H_6:
  8010  000088                     ??_processOctave:
  8011  000088                     keyboard_eight_note_efficient@pitch:
  8012                           	opt stack 0
  8013                           
  8014                           ; 1 bytes @ 0x28
  8015  000088                     	ds	1
  8016  000089                     keyboard_eight_note_efficient@index:
  8017                           	opt stack 0
  8018                           
  8019                           ; 1 bytes @ 0x29
  8020  000089                     	ds	1
  8021  00008A                     map@out_max:
  8022                           	opt stack 0
  8023                           
  8024                           ; 4 bytes @ 0x2A
  8025  00008A                     	ds	1
  8026  00008B                     ___fldiv@a:
  8027                           	opt stack 0
  8028                           
  8029                           ; 4 bytes @ 0x2B
  8030  00008B                     	ds	3
  8031  00008E                     ??_map:
  8032                           
  8033                           ; 1 bytes @ 0x2E
  8034  00008E                     	ds	1
  8035  00008F                     ??___fldiv:
  8036                           
  8037                           ; 1 bytes @ 0x2F
  8038  00008F                     	ds	4
  8039  000093                     ___fldiv@sign:
  8040                           	opt stack 0
  8041                           
  8042                           ; 1 bytes @ 0x33
  8043  000093                     	ds	1
  8044  000094                     ___fldiv@rem:
  8045                           	opt stack 0
  8046                           
  8047                           ; 4 bytes @ 0x34
  8048  000094                     	ds	4
  8049  000098                     ___fldiv@new_exp:
  8050                           	opt stack 0
  8051                           
  8052                           ; 2 bytes @ 0x38
  8053  000098                     	ds	2
  8054  00009A                     ___fldiv@grs:
  8055                           	opt stack 0
  8056                           
  8057                           ; 4 bytes @ 0x3A
  8058  00009A                     	ds	4
  8059  00009E                     ___fldiv@bexp:
  8060                           	opt stack 0
  8061                           
  8062                           ; 1 bytes @ 0x3E
  8063  00009E                     	ds	1
  8064  00009F                     ___fldiv@aexp:
  8065                           	opt stack 0
  8066                           
  8067                           ; 1 bytes @ 0x3F
  8068  00009F                     	ds	1
  8069  0000A0                     ??_Function_D:
  8070  0000A0                     ?___flneg:
  8071                           	opt stack 0
  8072  0000A0                     ___flneg@f1:
  8073                           	opt stack 0
  8074                           
  8075                           ; 4 bytes @ 0x40
  8076  0000A0                     	ds	4
  8077  0000A4                     ?___fladd:
  8078                           	opt stack 0
  8079  0000A4                     ___fladd@b:
  8080                           	opt stack 0
  8081                           
  8082                           ; 4 bytes @ 0x44
  8083  0000A4                     	ds	4
  8084  0000A8                     ___fladd@a:
  8085                           	opt stack 0
  8086                           
  8087                           ; 4 bytes @ 0x48
  8088  0000A8                     	ds	4
  8089  0000AC                     ??___fladd:
  8090                           
  8091                           ; 1 bytes @ 0x4C
  8092  0000AC                     	ds	3
  8093  0000AF                     saveToEEPROM@baseAddress:
  8094                           	opt stack 0
  8095                           
  8096                           ; 2 bytes @ 0x4F
  8097  0000AF                     	ds	2
  8098  0000B1                     saveToEEPROM@slotNumber:
  8099                           	opt stack 0
  8100                           
  8101                           ; 1 bytes @ 0x51
  8102  0000B1                     	ds	1
  8103  0000B2                     saveToEEPROM@byte_count:
  8104                           	opt stack 0
  8105                           
  8106                           ; 2 bytes @ 0x52
  8107  0000B2                     	ds	2
  8108  0000B4                     ??_Function_G_1:
  8109  0000B4                     initializeSaveSlotsOnce@initializeSlotsOnce:
  8110                           	opt stack 0
  8111  0000B4                     ___fladd@signs:
  8112                           	opt stack 0
  8113                           
  8114                           ; 1 bytes @ 0x54
  8115  0000B4                     	ds	1
  8116  0000B5                     ___fladd@aexp:
  8117                           	opt stack 0
  8118                           
  8119                           ; 1 bytes @ 0x55
  8120  0000B5                     	ds	1
  8121  0000B6                     ___fladd@bexp:
  8122                           	opt stack 0
  8123                           
  8124                           ; 1 bytes @ 0x56
  8125  0000B6                     	ds	1
  8126  0000B7                     ___fladd@grs:
  8127                           	opt stack 0
  8128                           
  8129                           ; 1 bytes @ 0x57
  8130  0000B7                     	ds	1
  8131  0000B8                     ?___fltol:
  8132                           	opt stack 0
  8133  0000B8                     ___fltol@f1:
  8134                           	opt stack 0
  8135                           
  8136                           ; 4 bytes @ 0x58
  8137  0000B8                     	ds	4
  8138  0000BC                     ??___fltol:
  8139                           
  8140                           ; 1 bytes @ 0x5C
  8141  0000BC                     	ds	4
  8142  0000C0                     ___fltol@sign1:
  8143                           	opt stack 0
  8144                           
  8145                           ; 1 bytes @ 0x60
  8146  0000C0                     	ds	1
  8147  0000C1                     ___fltol@exp1:
  8148                           	opt stack 0
  8149                           
  8150                           ; 1 bytes @ 0x61
  8151  0000C1                     	ds	1
  8152  0000C2                     ??_readPotentiometers:
  8153  0000C2                     ?_calculate_pulse_length:
  8154                           	opt stack 0
  8155                           
  8156                           ; 2 bytes @ 0x62
  8157  0000C2                     	ds	2
  8158  0000C4                     calculate_pulse_length@s_tick:
  8159                           	opt stack 0
  8160                           
  8161                           ; 4 bytes @ 0x64
  8162  0000C4                     	ds	3
  8163  0000C7                     _readPotentiometers$5800:
  8164                           	opt stack 0
  8165                           
  8166                           ; 4 bytes @ 0x67
  8167  0000C7                     	ds	1
  8168  0000C8                     _calculate_pulse_length$5801:
  8169                           	opt stack 0
  8170                           
  8171                           ; 4 bytes @ 0x68
  8172  0000C8                     	ds	3
  8173  0000CB                     readPotentiometers@i_3355:
  8174                           	opt stack 0
  8175                           
  8176                           ; 1 bytes @ 0x6B
  8177  0000CB                     	ds	1
  8178  0000CC                     ??_Function_H:
  8179  0000CC                     ??_Function_G_2:
  8180  0000CC                     readPotentiometers@i:
  8181                           	opt stack 0
  8182  0000CC                     selectSlotOnBoot@slot:
  8183                           	opt stack 0
  8184                           
  8185                           ; 1 bytes @ 0x6C
  8186  0000CC                     	ds	1
  8187  0000CD                     ??_Function_G:
  8188  0000CD                     readPotentiometers@i_3356:
  8189                           	opt stack 0
  8190                           
  8191                           ; 1 bytes @ 0x6D
  8192  0000CD                     	ds	1
  8193  0000CE                     ??_menu_lcd:
  8194  0000CE                     
  8195                           ; 1 bytes @ 0x6E
  8196  0000CE                     	ds	1
  8197  0000CF                     ??_main:
  8198                           
  8199                           ; 1 bytes @ 0x6F
  8200  0000CF                     	ds	1
  8201                           tblptru	equ	0xFF8
  8202                           tblptrh	equ	0xFF7
  8203                           tblptrl	equ	0xFF6
  8204                           tablat	equ	0xFF5
  8205                           postinc0	equ	0xFEE
  8206                           wreg	equ	0xFE8
  8207                           postdec1	equ	0xFE5
  8208                           fsr1l	equ	0xFE1
  8209                           
  8210                           	psect	cstackCOMRAM
  8211  000001                     __pcstackCOMRAM:
  8212                           	opt stack 0
  8213  000001                     ??_encoderInputsBuxton:
  8214  000001                     ?i2___awdiv:
  8215                           	opt stack 0
  8216  000001                     ?i2___lmul:
  8217                           	opt stack 0
  8218  000001                     i2sendOut@a:
  8219                           	opt stack 0
  8220  000001                     i2sendUSB@message2:
  8221                           	opt stack 0
  8222  000001                     i2___lbmod@divisor:
  8223                           	opt stack 0
  8224  000001                     i2printThisNumber@n:
  8225                           	opt stack 0
  8226  000001                     i2___awdiv@dividend:
  8227                           	opt stack 0
  8228  000001                     i2___lmul@multiplier:
  8229                           	opt stack 0
  8230                           
  8231                           ; 4 bytes @ 0x0
  8232  000001                     	ds	1
  8233  000002                     displayString@i:
  8234                           	opt stack 0
  8235  000002                     i2sendUSB@message3:
  8236                           	opt stack 0
  8237  000002                     i2___lbmod@dividend:
  8238                           	opt stack 0
  8239                           
  8240                           ; 1 bytes @ 0x1
  8241  000002                     	ds	1
  8242  000003                     ??i2_sendUSB:
  8243  000003                     sort_pitches@a:
  8244                           	opt stack 0
  8245  000003                     i2___lbmod@counter:
  8246                           	opt stack 0
  8247  000003                     i2___awdiv@divisor:
  8248                           	opt stack 0
  8249                           
  8250                           ; 2 bytes @ 0x2
  8251  000003                     	ds	1
  8252  000004                     encoderInputsBuxton@tempA:
  8253                           	opt stack 0
  8254  000004                     sort_pitches@j:
  8255                           	opt stack 0
  8256  000004                     i2___lbmod@rem:
  8257                           	opt stack 0
  8258                           
  8259                           ; 1 bytes @ 0x3
  8260  000004                     	ds	1
  8261  000005                     encoderInputsBuxton@tempB:
  8262                           	opt stack 0
  8263  000005                     sort_pitches@i:
  8264                           	opt stack 0
  8265  000005                     i2___awdiv@counter:
  8266                           	opt stack 0
  8267  000005                     i2___lmul@multiplicand:
  8268                           	opt stack 0
  8269                           
  8270                           ; 4 bytes @ 0x4
  8271  000005                     	ds	1
  8272  000006                     encoderInputsBuxton@pinstate:
  8273                           	opt stack 0
  8274  000006                     i2___awdiv@sign:
  8275                           	opt stack 0
  8276  000006                     i2sendUSB@midiMessage:
  8277                           	opt stack 0
  8278                           
  8279                           ; 3 bytes @ 0x5
  8280  000006                     	ds	1
  8281  000007                     i2___awdiv@quotient:
  8282                           	opt stack 0
  8283                           
  8284                           ; 2 bytes @ 0x6
  8285  000007                     	ds	2
  8286  000009                     i2sendUSB@message1:
  8287                           	opt stack 0
  8288  000009                     i2___lmul@product:
  8289                           	opt stack 0
  8290                           
  8291                           ; 4 bytes @ 0x8
  8292  000009                     	ds	1
  8293  00000A                     i2sendUSB@i:
  8294                           	opt stack 0
  8295                           
  8296                           ; 1 bytes @ 0x9
  8297  00000A                     	ds	1
  8298  00000B                     i2sendUSB@ii:
  8299                           	opt stack 0
  8300                           
  8301                           ; 1 bytes @ 0xA
  8302  00000B                     	ds	1
  8303  00000C                     i2noteOff@pitch:
  8304                           	opt stack 0
  8305                           
  8306                           ; 1 bytes @ 0xB
  8307  00000C                     	ds	1
  8308  00000D                     ?i2_rand:
  8309                           	opt stack 0
  8310  00000D                     i2noteOff@velocity:
  8311                           	opt stack 0
  8312                           
  8313                           ; 1 bytes @ 0xC
  8314  00000D                     	ds	1
  8315  00000E                     i2noteOff@channel:
  8316                           	opt stack 0
  8317                           
  8318                           ; 1 bytes @ 0xD
  8319  00000E                     	ds	1
  8320  00000F                     ?i2___awmod:
  8321                           	opt stack 0
  8322  00000F                     i2noteOn@pitch:
  8323                           	opt stack 0
  8324  00000F                     i2___awmod@dividend:
  8325                           	opt stack 0
  8326                           
  8327                           ; 2 bytes @ 0xE
  8328  00000F                     	ds	1
  8329  000010                     i2noteOn@velocity:
  8330                           	opt stack 0
  8331                           
  8332                           ; 1 bytes @ 0xF
  8333  000010                     	ds	1
  8334  000011                     i2noteOn@channel:
  8335                           	opt stack 0
  8336  000011                     i2___awmod@divisor:
  8337                           	opt stack 0
  8338                           
  8339                           ; 2 bytes @ 0x10
  8340  000011                     	ds	2
  8341  000013                     i2___awmod@counter:
  8342                           	opt stack 0
  8343                           
  8344                           ; 1 bytes @ 0x12
  8345  000013                     	ds	1
  8346  000014                     i2___awmod@sign:
  8347                           	opt stack 0
  8348                           
  8349                           ; 1 bytes @ 0x13
  8350  000014                     	ds	1
  8351  000015                     ??_displayDigits:
  8352  000015                     i2random_pitches@random_array_index:
  8353                           	opt stack 0
  8354  000015                     i2random_pitches_non_repeating@temp:
  8355                           	opt stack 0
  8356                           
  8357                           ; 1 bytes @ 0x14
  8358  000015                     	ds	1
  8359  000016                     i2random_pitches@i:
  8360                           	opt stack 0
  8361  000016                     i2random_pitches_non_repeating@randomIndex:
  8362                           	opt stack 0
  8363                           
  8364                           ; 1 bytes @ 0x15
  8365  000016                     	ds	1
  8366  000017                     i2random_pitches_non_repeating@i:
  8367                           	opt stack 0
  8368                           
  8369                           ; 1 bytes @ 0x16
  8370  000017                     	ds	1
  8371  000018                     ??_playArpeggio:
  8372  000018                     displayDigits@lowByte:
  8373                           	opt stack 0
  8374                           
  8375                           ; 1 bytes @ 0x17
  8376  000018                     	ds	1
  8377  000019                     displayDigits@highByte:
  8378                           	opt stack 0
  8379                           
  8380                           ; 1 bytes @ 0x18
  8381  000019                     	ds	1
  8382  00001A                     
  8383                           ; 1 bytes @ 0x19
  8384  00001A                     	ds	4
  8385  00001E                     ??_ISR:
  8386                           
  8387                           ; 1 bytes @ 0x1D
  8388  00001E                     	ds	20
  8389                           tblptru	equ	0xFF8
  8390                           tblptrh	equ	0xFF7
  8391                           tblptrl	equ	0xFF6
  8392                           tablat	equ	0xFF5
  8393                           postinc0	equ	0xFEE
  8394                           wreg	equ	0xFE8
  8395                           postdec1	equ	0xFE5
  8396                           fsr1l	equ	0xFE1
  8397                           
  8398 ;;
  8399 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  8400 ;;
  8401 ;; *************** function _main *****************
  8402 ;; Defined at:
  8403 ;;		line 441 in file "main.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;		None
  8406 ;; Auto vars:     Size  Location     Type
  8407 ;;		None
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  2  4823[None  ] int 
  8410 ;; Registers used:
  8411 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;Total ram usage:        1 bytes
  8422 ;; Hardware stack levels required when called:   16
  8423 ;; This function calls:
  8424 ;;		_ADC_Initialize
  8425 ;;		_Lcd_Start
  8426 ;;		_Read_b_eep
  8427 ;;		_analogInputs
  8428 ;;		_calculate_alpha
  8429 ;;		_calculate_pulse_length
  8430 ;;		_digitalInputs
  8431 ;;		_displayTest
  8432 ;;		_initializeMenuArray
  8433 ;;		_initializeSaveSlotsOnce
  8434 ;;		_menu_lcd
  8435 ;;		_panic_button
  8436 ;;		_processEncoderBuxton
  8437 ;;		_selectSlotOnBoot
  8438 ;;		_setup
  8439 ;;		_srand
  8440 ;; This function is called by:
  8441 ;;		Startup code after reset
  8442 ;; This function uses a non-reentrant model
  8443 ;;
  8444                           
  8445                           	psect	text0
  8446  006B1C                     __ptext0:
  8447                           	opt stack 0
  8448  006B1C                     _main:
  8449                           	opt stack 15
  8450                           
  8451                           ;main.c: 444: setup();
  8452                           
  8453                           ;incstack = 0
  8454  006B1C  EC0F  F044         	call	_setup	;wreg free
  8455                           
  8456                           ;main.c: 445: ADC_Initialize();
  8457  006B20  ECB3  F04A         	call	_ADC_Initialize	;wreg free
  8458                           
  8459                           ;main.c: 446: initializeMenuArray();
  8460  006B24  ECEC  F026         	call	_initializeMenuArray	;wreg free
  8461                           
  8462                           ;main.c: 447: Lcd_Start();
  8463  006B28  ECAB  F03B         	call	_Lcd_Start	;wreg free
  8464                           
  8465                           ;main.c: 450: state = 0x0;
  8466  006B2C  0E00               	movlw	0
  8467  006B2E  6E58               	movwf	_state,c
  8468                           
  8469                           ;main.c: 451: POT_MODE = 0;
  8470  006B30  9636               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
  8471                           
  8472                           ;main.c: 452: which_screen = MAIN_MENU;
  8473  006B32  0E02               	movlw	2
  8474  006B34  0100               	movlb	0	; () banked
  8475  006B36  6FF9               	movwf	_which_screen& (0+255),b
  8476                           
  8477                           ; BSR set to: 0
  8478                           ;main.c: 453: menu_lcd();
  8479  006B38  ECDD  F033         	call	_menu_lcd	;wreg free
  8480                           
  8481                           ;main.c: 454: panic_button();
  8482  006B3C  EC59  F04A         	call	_panic_button	;wreg free
  8483                           
  8484                           ;main.c: 456: srand(2048);
  8485  006B40  0E08               	movlw	8
  8486  006B42  0100               	movlb	0	; () banked
  8487  006B44  6F61               	movwf	(srand@x+1)& (0+255),b
  8488  006B46  0E00               	movlw	0
  8489  006B48  6F60               	movwf	srand@x& (0+255),b
  8490  006B4A  ECD9  F04A         	call	_srand	;wreg free
  8491                           
  8492                           ;main.c: 459: encoderPolarity = Read_b_eep(0x02);
  8493  006B4E  0E00               	movlw	0
  8494  006B50  0100               	movlb	0	; () banked
  8495  006B52  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8496  006B54  0E02               	movlw	2
  8497  006B56  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8498  006B58  ECA6  F04A         	call	_Read_b_eep	;wreg free
  8499  006B5C  0100               	movlb	0	; () banked
  8500  006B5E  6FCF               	movwf	??_main& (0+255),b
  8501  006B60  31CF               	rrcf	??_main& (0+255),w,b
  8502  006B62  A0D8               	btfss	status,0,c
  8503  006B64  D002               	goto	u44680
  8504  006B66  8036               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8505  006B68  D001               	goto	u44695
  8506  006B6A                     u44680:
  8507  006B6A  9036               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8508  006B6C                     u44695:
  8509                           
  8510                           ;main.c: 461: ema_integer = Read_b_eep(0x03);
  8511  006B6C  0E00               	movlw	0
  8512  006B6E  0100               	movlb	0	; () banked
  8513  006B70  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8514  006B72  0E03               	movlw	3
  8515  006B74  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8516  006B76  ECA6  F04A         	call	_Read_b_eep	;wreg free
  8517  006B7A  0100               	movlb	0	; () banked
  8518  006B7C  6FFB               	movwf	_ema_integer& (0+255),b
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;main.c: 463: calculate_alpha();
  8522  006B7E  EC5E  F047         	call	_calculate_alpha	;wreg free
  8523                           
  8524                           ;main.c: 466: number_of_interrupts = (int) 500 / 2.5;
  8525  006B82  0EC8               	movlw	200
  8526  006B84  0102               	movlb	2	; () banked
  8527  006B86  6F88               	movwf	_number_of_interrupts& (0+255),b
  8528  006B88  0E00               	movlw	0
  8529  006B8A  6F89               	movwf	(_number_of_interrupts+1)& (0+255),b
  8530  006B8C  0E00               	movlw	0
  8531  006B8E  6F8A               	movwf	(_number_of_interrupts+2)& (0+255),b
  8532  006B90  0E00               	movlw	0
  8533  006B92  6F8B               	movwf	(_number_of_interrupts+3)& (0+255),b
  8534                           
  8535                           ; BSR set to: 2
  8536                           ;main.c: 469: ARPEGGIO_ON = 0;
  8537  006B94  9635               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
  8538                           
  8539                           ; BSR set to: 2
  8540                           ;main.c: 472: TIMER_PRELOAD = calculate_pulse_length();
  8541  006B96  EC46  F02E         	call	_calculate_pulse_length	;wreg free
  8542  006B9A  C0C2  F16D         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
  8543  006B9E  C0C3  F16E         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
  8544                           
  8545                           ;main.c: 475: LATCH = 0;
  8546  006BA2  9035               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
  8547                           
  8548                           ;main.c: 476: UN_LATCH_MODE = 0;
  8549  006BA4  9E34               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
  8550                           
  8551                           ;main.c: 478: AUTO_LATCH = 0;
  8552  006BA6  9C34               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
  8553                           
  8554                           ;main.c: 481: AUTO_RANDOMIZE = 0;
  8555  006BA8  9834               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
  8556                           
  8557                           ;main.c: 485: RESET_ON_KEY_PRESS = 1;
  8558  006BAA  8435               	bsf	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
  8559                           
  8560                           ;main.c: 486: RESET_ON_KEY_RELEASE = 1;
  8561  006BAC  8235               	bsf	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
  8562                           
  8563                           ;main.c: 489: LAST_NOTE_MODE_KEY_PRESS = 0;
  8564  006BAE  9234               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
  8565                           
  8566                           ;main.c: 490: LAST_NOTE_MODE_KEY_RELEASE = 0;
  8567  006BB0  9034               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
  8568                           
  8569                           ;main.c: 491: LAST_NOTE_MODE_TRANSPOSE = 1;
  8570  006BB2  8E33               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  8571                           
  8572                           ;main.c: 492: LAST_NOTE_MODE_RESET = 1;
  8573  006BB4  8C33               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  8574                           
  8575                           ;main.c: 495: skipFirstLast = 0;
  8576  006BB6  9634               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
  8577                           
  8578                           ;main.c: 498: DISPLAY_STEP_NUMBER = 0;
  8579  006BB8  9A32               	bcf	_DISPLAY_STEP_NUMBER/(0+8),_DISPLAY_STEP_NUMBER& (0+7),c
  8580                           
  8581                           ;main.c: 500: TMR0IE = 1;
  8582  006BBA  8AF2               	bsf	intcon,5,c	;volatile
  8583                           
  8584                           ;main.c: 501: TMR0ON = 0;
  8585  006BBC  9ED5               	bcf	4053,7,c	;volatile
  8586                           
  8587                           ;main.c: 503: TMR2IE = 1;
  8588  006BBE  829D               	bsf	3997,1,c	;volatile
  8589                           
  8590                           ;main.c: 504: TMR2ON = 1;
  8591  006BC0  84CA               	bsf	4042,2,c	;volatile
  8592                           
  8593                           ;main.c: 507: initializeSaveSlotsOnce();
  8594  006BC2  EC83  F047         	call	_initializeSaveSlotsOnce	;wreg free
  8595                           
  8596                           ;main.c: 508: selectSlotOnBoot();
  8597  006BC6  EC6A  F04A         	call	_selectSlotOnBoot	;wreg free
  8598                           
  8599                           ;main.c: 510: displayTest();
  8600  006BCA  EC84  F03F         	call	_displayTest	;wreg free
  8601  006BCE                     
  8602                           ;main.c: 514: digitalInputs();
  8603  006BCE  EC94  F046         	call	_digitalInputs	;wreg free
  8604                           
  8605                           ;main.c: 515: analogInputs();
  8606  006BD2  ECF6  F04A         	call	_analogInputs	;wreg free
  8607                           
  8608                           ;main.c: 516: processEncoderBuxton();
  8609  006BD6  EC09  F000         	call	_processEncoderBuxton	;wreg free
  8610                           
  8611                           ;main.c: 519: TMR2ON = 0;
  8612  006BDA  94CA               	bcf	4042,2,c	;volatile
  8613                           
  8614                           ;main.c: 520: PORTC &= 0xF0;
  8615  006BDC  0EF0               	movlw	240
  8616  006BDE  1682               	andwf	3970,f,c	;volatile
  8617                           
  8618                           ;main.c: 521: menu_lcd();
  8619  006BE0  ECDD  F033         	call	_menu_lcd	;wreg free
  8620                           
  8621                           ;main.c: 522: TMR2ON = 1;
  8622  006BE4  84CA               	bsf	4042,2,c	;volatile
  8623  006BE6  D7F3               	goto	l4824
  8624  006BE8                     __end_of_main:
  8625                           	opt stack 0
  8626                           tblptru	equ	0xFF8
  8627                           tblptrh	equ	0xFF7
  8628                           tblptrl	equ	0xFF6
  8629                           tablat	equ	0xFF5
  8630                           intcon	equ	0xFF2
  8631                           postinc0	equ	0xFEE
  8632                           wreg	equ	0xFE8
  8633                           postdec1	equ	0xFE5
  8634                           fsr1l	equ	0xFE1
  8635                           status	equ	0xFD8
  8636                           
  8637 ;; *************** function _srand *****************
  8638 ;; Defined at:
  8639 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;  x               2    0[BANK0 ] unsigned int 
  8642 ;; Auto vars:     Size  Location     Type
  8643 ;;		None
  8644 ;; Return value:  Size  Location     Type
  8645 ;;                  1    wreg      void 
  8646 ;; Registers used:
  8647 ;;		status,2
  8648 ;; Tracked objects:
  8649 ;;		On entry : 0/0
  8650 ;;		On exit  : 0/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8653 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;Total ram usage:        2 bytes
  8658 ;; Hardware stack levels used:    1
  8659 ;; Hardware stack levels required when called:    5
  8660 ;; This function calls:
  8661 ;;		Nothing
  8662 ;; This function is called by:
  8663 ;;		_main
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           	psect	text1
  8668  0095B2                     __ptext1:
  8669                           	opt stack 0
  8670  0095B2                     _srand:
  8671                           	opt stack 25
  8672                           
  8673                           ;incstack = 0
  8674  0095B2  C060  F1E7         	movff	srand@x,_randx
  8675  0095B6  C061  F1E8         	movff	srand@x+1,_randx+1
  8676  0095BA  0101               	movlb	1	; () banked
  8677  0095BC  6BE9               	clrf	(_randx+2)& (0+255),b
  8678  0095BE  6BEA               	clrf	(_randx+3)& (0+255),b
  8679                           
  8680                           ; BSR set to: 1
  8681  0095C0  0012               	return		;funcret
  8682  0095C2                     __end_of_srand:
  8683                           	opt stack 0
  8684                           tblptru	equ	0xFF8
  8685                           tblptrh	equ	0xFF7
  8686                           tblptrl	equ	0xFF6
  8687                           tablat	equ	0xFF5
  8688                           intcon	equ	0xFF2
  8689                           postinc0	equ	0xFEE
  8690                           wreg	equ	0xFE8
  8691                           postdec1	equ	0xFE5
  8692                           fsr1l	equ	0xFE1
  8693                           status	equ	0xFD8
  8694                           
  8695 ;; *************** function _setup *****************
  8696 ;; Defined at:
  8697 ;;		line 172 in file "main.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;		None
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;		None
  8702 ;; Return value:  Size  Location     Type
  8703 ;;                  1    wreg      void 
  8704 ;; Registers used:
  8705 ;;		wreg, status,2, status,0
  8706 ;; Tracked objects:
  8707 ;;		On entry : 0/0
  8708 ;;		On exit  : 0/0
  8709 ;;		Unchanged: 0/0
  8710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;Total ram usage:        0 bytes
  8716 ;; Hardware stack levels used:    1
  8717 ;; Hardware stack levels required when called:    5
  8718 ;; This function calls:
  8719 ;;		Nothing
  8720 ;; This function is called by:
  8721 ;;		_main
  8722 ;; This function uses a non-reentrant model
  8723 ;;
  8724                           
  8725                           	psect	text2
  8726  00881E                     __ptext2:
  8727                           	opt stack 0
  8728  00881E                     _setup:
  8729                           	opt stack 25
  8730                           
  8731                           ;main.c: 175: TRISA = 0b000001;
  8732                           
  8733                           ; BSR set to: 1
  8734                           ;incstack = 0
  8735  00881E  0E01               	movlw	1
  8736  008820  6E92               	movwf	3986,c	;volatile
  8737                           
  8738                           ;main.c: 179: TRISB = 0b00110001;
  8739  008822  0E31               	movlw	49
  8740  008824  6E93               	movwf	3987,c	;volatile
  8741                           
  8742                           ;main.c: 187: TRISC = 0b10010000;
  8743  008826  0E90               	movlw	144
  8744  008828  6E94               	movwf	3988,c	;volatile
  8745                           
  8746                           ;main.c: 193: TRISD = 0b00000000;
  8747  00882A  0E00               	movlw	0
  8748  00882C  6E95               	movwf	3989,c	;volatile
  8749                           
  8750                           ;main.c: 196: TRISE = 0b000;
  8751  00882E  0E00               	movlw	0
  8752  008830  6E96               	movwf	3990,c	;volatile
  8753                           
  8754                           ;main.c: 201: PORTA = 0x00;
  8755  008832  0E00               	movlw	0
  8756  008834  6E80               	movwf	3968,c	;volatile
  8757                           
  8758                           ;main.c: 202: PORTB = 0x00;
  8759  008836  0E00               	movlw	0
  8760  008838  6E81               	movwf	3969,c	;volatile
  8761                           
  8762                           ;main.c: 203: PORTC = 0x00;
  8763  00883A  0E00               	movlw	0
  8764  00883C  6E82               	movwf	3970,c	;volatile
  8765                           
  8766                           ;main.c: 204: PORTD = 0x00;
  8767  00883E  0E00               	movlw	0
  8768  008840  6E83               	movwf	3971,c	;volatile
  8769                           
  8770                           ;main.c: 205: PORTE = 0x00;
  8771  008842  0E00               	movlw	0
  8772  008844  6E84               	movwf	3972,c	;volatile
  8773                           
  8774                           ;main.c: 208: IPEN = 0;
  8775  008846  9ED0               	bcf	4048,7,c	;volatile
  8776                           
  8777                           ;main.c: 211: RBIF = 0;
  8778  008848  90F2               	bcf	intcon,0,c	;volatile
  8779                           
  8780                           ;main.c: 212: RBIE = 1;
  8781  00884A  86F2               	bsf	intcon,3,c	;volatile
  8782                           
  8783                           ;main.c: 214: INTEDG0 = 0;
  8784  00884C  9CF1               	bcf	intcon2,6,c	;volatile
  8785                           
  8786                           ;main.c: 215: INT0IF = 0;
  8787  00884E  92F2               	bcf	intcon,1,c	;volatile
  8788                           
  8789                           ;main.c: 216: INT0IE = 1;
  8790  008850  88F2               	bsf	intcon,4,c	;volatile
  8791                           
  8792                           ;main.c: 219: T08BIT = 0;
  8793  008852  9CD5               	bcf	4053,6,c	;volatile
  8794                           
  8795                           ;main.c: 220: T0CS = 0;
  8796  008854  9AD5               	bcf	4053,5,c	;volatile
  8797                           
  8798                           ;main.c: 221: T0CON &= 0b11111000;
  8799  008856  0EF8               	movlw	248
  8800  008858  16D5               	andwf	4053,f,c	;volatile
  8801                           
  8802                           ;main.c: 222: T0CON |= 0b00000001;
  8803  00885A  80D5               	bsf	4053,0,c	;volatile
  8804                           
  8805                           ;main.c: 223: PSA = 0;
  8806  00885C  96D5               	bcf	4053,3,c	;volatile
  8807                           
  8808                           ;main.c: 224: TMR0ON = 0;
  8809  00885E  9ED5               	bcf	4053,7,c	;volatile
  8810                           
  8811                           ;main.c: 225: TMR0IE = 1;
  8812  008860  8AF2               	bsf	intcon,5,c	;volatile
  8813                           
  8814                           ;main.c: 228: T2CON = 0b01000001;
  8815  008862  0E41               	movlw	65
  8816  008864  6ECA               	movwf	4042,c	;volatile
  8817                           
  8818                           ;main.c: 229: TMR2 = 0x83;
  8819  008866  0E83               	movlw	131
  8820  008868  6ECC               	movwf	4044,c	;volatile
  8821                           
  8822                           ;main.c: 230: TMR2ON = 0;
  8823  00886A  94CA               	bcf	4042,2,c	;volatile
  8824                           
  8825                           ;main.c: 231: TMR2IE = 1;
  8826  00886C  829D               	bsf	3997,1,c	;volatile
  8827                           
  8828                           ;main.c: 235: TXEN = 1;
  8829  00886E  8AAC               	bsf	4012,5,c	;volatile
  8830                           
  8831                           ;main.c: 236: SYNC = 0;
  8832  008870  98AC               	bcf	4012,4,c	;volatile
  8833                           
  8834                           ;main.c: 239: SPEN = 1;
  8835  008872  8EAB               	bsf	4011,7,c	;volatile
  8836                           
  8837                           ;main.c: 240: CREN = 1;
  8838  008874  88AB               	bsf	4011,4,c	;volatile
  8839                           
  8840                           ;main.c: 243: BRGH = 0;
  8841  008876  94AC               	bcf	4012,2,c	;volatile
  8842                           
  8843                           ;main.c: 244: SPBRG = 9;
  8844  008878  0E09               	movlw	9
  8845  00887A  6EAF               	movwf	4015,c	;volatile
  8846                           
  8847                           ;main.c: 246: PEIE = 1;
  8848  00887C  8CF2               	bsf	intcon,6,c	;volatile
  8849                           
  8850                           ;main.c: 247: GIE = 1;
  8851  00887E  8EF2               	bsf	intcon,7,c	;volatile
  8852  008880  0012               	return		;funcret
  8853  008882                     __end_of_setup:
  8854                           	opt stack 0
  8855                           tblptru	equ	0xFF8
  8856                           tblptrh	equ	0xFF7
  8857                           tblptrl	equ	0xFF6
  8858                           tablat	equ	0xFF5
  8859                           intcon	equ	0xFF2
  8860                           intcon2	equ	0xFF1
  8861                           postinc0	equ	0xFEE
  8862                           wreg	equ	0xFE8
  8863                           postdec1	equ	0xFE5
  8864                           fsr1l	equ	0xFE1
  8865                           status	equ	0xFD8
  8866                           
  8867 ;; *************** function _selectSlotOnBoot *****************
  8868 ;; Defined at:
  8869 ;;		line 41 in file "eeprom.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;		None
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;  slot            1  108[BANK0 ] unsigned char 
  8874 ;; Return value:  Size  Location     Type
  8875 ;;                  1    wreg      void 
  8876 ;; Registers used:
  8877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8878 ;; Tracked objects:
  8879 ;;		On entry : 0/0
  8880 ;;		On exit  : 0/0
  8881 ;;		Unchanged: 0/0
  8882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8884 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8886 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8887 ;;Total ram usage:        1 bytes
  8888 ;; Hardware stack levels used:    1
  8889 ;; Hardware stack levels required when called:    8
  8890 ;; This function calls:
  8891 ;;		_Read_b_eep
  8892 ;;		_loadFromEEPROM
  8893 ;; This function is called by:
  8894 ;;		_main
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           	psect	text3
  8899  0094D4                     __ptext3:
  8900                           	opt stack 0
  8901  0094D4                     _selectSlotOnBoot:
  8902                           	opt stack 22
  8903                           
  8904                           ;eeprom.c: 43: unsigned char slot = Read_b_eep(0);
  8905                           
  8906                           ;incstack = 0
  8907  0094D4  0E00               	movlw	0
  8908  0094D6  0100               	movlb	0	; () banked
  8909  0094D8  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8910  0094DA  0E00               	movlw	0
  8911  0094DC  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8912  0094DE  ECA6  F04A         	call	_Read_b_eep	;wreg free
  8913  0094E2  0100               	movlb	0	; () banked
  8914  0094E4  6FCC               	movwf	selectSlotOnBoot@slot& (0+255),b
  8915                           
  8916                           ; BSR set to: 0
  8917                           ;eeprom.c: 45: if (slot == DEFAULT){
  8918  0094E6  51CC               	movf	selectSlotOnBoot@slot& (0+255),w,b
  8919  0094E8  B4D8               	btfsc	status,2,c
  8920  0094EA  0012               	return	
  8921                           
  8922                           ; BSR set to: 0
  8923                           ;eeprom.c: 49: else {
  8924                           ;eeprom.c: 50: loadFromEEPROM(slot);
  8925                           
  8926                           ; BSR set to: 0
  8927                           
  8928                           ; BSR set to: 0
  8929                           ;eeprom.c: 47: }
  8930                           
  8931                           ; BSR set to: 0
  8932                           ;eeprom.c: 46: return;
  8933  0094EC  51CC               	movf	selectSlotOnBoot@slot& (0+255),w,b
  8934  0094EE  ECD0  F025         	call	_loadFromEEPROM
  8935  0094F2  0012               	return	
  8936  0094F4                     __end_of_selectSlotOnBoot:
  8937                           	opt stack 0
  8938                           tblptru	equ	0xFF8
  8939                           tblptrh	equ	0xFF7
  8940                           tblptrl	equ	0xFF6
  8941                           tablat	equ	0xFF5
  8942                           intcon	equ	0xFF2
  8943                           intcon2	equ	0xFF1
  8944                           postinc0	equ	0xFEE
  8945                           wreg	equ	0xFE8
  8946                           postdec1	equ	0xFE5
  8947                           fsr1l	equ	0xFE1
  8948                           status	equ	0xFD8
  8949                           
  8950 ;; *************** function _panic_button *****************
  8951 ;; Defined at:
  8952 ;;		line 426 in file "main.c"
  8953 ;; Parameters:    Size  Location     Type
  8954 ;;		None
  8955 ;; Auto vars:     Size  Location     Type
  8956 ;;		None
  8957 ;; Return value:  Size  Location     Type
  8958 ;;                  1    wreg      void 
  8959 ;; Registers used:
  8960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8961 ;; Tracked objects:
  8962 ;;		On entry : 0/0
  8963 ;;		On exit  : 0/0
  8964 ;;		Unchanged: 0/0
  8965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8970 ;;Total ram usage:        0 bytes
  8971 ;; Hardware stack levels used:    1
  8972 ;; Hardware stack levels required when called:    7
  8973 ;; This function calls:
  8974 ;;		_controlChange
  8975 ;; This function is called by:
  8976 ;;		_main
  8977 ;; This function uses a non-reentrant model
  8978 ;;
  8979                           
  8980                           	psect	text4
  8981  0094B2                     __ptext4:
  8982                           	opt stack 0
  8983  0094B2                     _panic_button:
  8984                           	opt stack 23
  8985                           
  8986                           ;main.c: 427: controlChange (channel, all_notes_off, 0x00);
  8987                           
  8988                           ;incstack = 0
  8989  0094B2  0E7B               	movlw	123
  8990  0094B4  0100               	movlb	0	; () banked
  8991  0094B6  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
  8992  0094B8  0E00               	movlw	0
  8993  0094BA  6F6C               	movwf	controlChange@value& (0+255),b
  8994  0094BC  51F6               	movf	_channel& (0+255),w,b
  8995  0094BE  EC0D  F049         	call	_controlChange
  8996                           
  8997                           ;main.c: 428: controlChange (drumchannel, all_notes_off, 0x00);
  8998  0094C2  0E7B               	movlw	123
  8999  0094C4  0100               	movlb	0	; () banked
  9000  0094C6  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
  9001  0094C8  0E00               	movlw	0
  9002  0094CA  6F6C               	movwf	controlChange@value& (0+255),b
  9003  0094CC  51FE               	movf	_drumchannel& (0+255),w,b
  9004  0094CE  EC0D  F049         	call	_controlChange
  9005  0094D2  0012               	return		;funcret
  9006  0094D4                     __end_of_panic_button:
  9007                           	opt stack 0
  9008                           tblptru	equ	0xFF8
  9009                           tblptrh	equ	0xFF7
  9010                           tblptrl	equ	0xFF6
  9011                           tablat	equ	0xFF5
  9012                           intcon	equ	0xFF2
  9013                           intcon2	equ	0xFF1
  9014                           postinc0	equ	0xFEE
  9015                           wreg	equ	0xFE8
  9016                           postdec1	equ	0xFE5
  9017                           fsr1l	equ	0xFE1
  9018                           status	equ	0xFD8
  9019                           
  9020 ;; *************** function _menu_lcd *****************
  9021 ;; Defined at:
  9022 ;;		line 294 in file "menu.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;		None
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;		None
  9027 ;; Return value:  Size  Location     Type
  9028 ;;                  1    wreg      void 
  9029 ;; Registers used:
  9030 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9031 ;; Tracked objects:
  9032 ;;		On entry : 0/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;Total ram usage:        1 bytes
  9041 ;; Hardware stack levels used:    1
  9042 ;; Hardware stack levels required when called:   15
  9043 ;; This function calls:
  9044 ;;		_Function_A
  9045 ;;		_Function_B
  9046 ;;		_Function_C
  9047 ;;		_Function_D
  9048 ;;		_Function_E
  9049 ;;		_Function_F
  9050 ;;		_Function_G
  9051 ;;		_Function_H
  9052 ;;		_Lcd_Clear
  9053 ;;		_Lcd_Print_String
  9054 ;;		_Lcd_Set_Cursor
  9055 ;;		___lbmod
  9056 ;;		___wmul
  9057 ;;		_exitFunction
  9058 ;; This function is called by:
  9059 ;;		_main
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           	psect	text5
  9064  0067BA                     __ptext5:
  9065                           	opt stack 0
  9066  0067BA                     _menu_lcd:
  9067                           	opt stack 15
  9068                           
  9069                           ;menu.c: 296: which_screen = MAIN_MENU;
  9070                           
  9071                           ;incstack = 0
  9072  0067BA  0E02               	movlw	2
  9073  0067BC  0100               	movlb	0	; () banked
  9074  0067BE  6FF9               	movwf	_which_screen& (0+255),b
  9075                           
  9076                           ; BSR set to: 0
  9077                           ;menu.c: 299: if (lcd_print_once == 0) {
  9078  0067C0  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9079  0067C2  D027               	goto	l3398
  9080                           
  9081                           ; BSR set to: 0
  9082                           ;menu.c: 301: Lcd_Clear();
  9083  0067C4  ECE1  F04A         	call	_Lcd_Clear	;wreg free
  9084                           
  9085                           ;menu.c: 302: Lcd_Set_Cursor(1,1);
  9086  0067C8  0E01               	movlw	1
  9087  0067CA  0100               	movlb	0	; () banked
  9088  0067CC  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9089  0067CE  0E01               	movlw	1
  9090  0067D0  ECB8  F045         	call	_Lcd_Set_Cursor
  9091                           
  9092                           ;menu.c: 308: Lcd_Print_String(LCD_STRINGS[(mainMenu.selector % mainMenu.number) + mainM
      +                          enu.address]);
  9093  0067D4  C168  F060         	movff	_mainMenu,___lbmod@divisor
  9094  0067D8  0101               	movlb	1	; () banked
  9095  0067DA  516A               	movf	(_mainMenu+2)& (0+255),w,b
  9096  0067DC  EC89  F049         	call	___lbmod
  9097  0067E0  0100               	movlb	0	; () banked
  9098  0067E2  6FCE               	movwf	??_menu_lcd& (0+255),b
  9099  0067E4  51CE               	movf	??_menu_lcd& (0+255),w,b
  9100  0067E6  0101               	movlb	1	; () banked
  9101  0067E8  2569               	addwf	(_mainMenu+1)& (0+255),w,b
  9102  0067EA  0100               	movlb	0	; () banked
  9103  0067EC  6F64               	movwf	___wmul@multiplier& (0+255),b
  9104  0067EE  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9105  0067F0  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9106  0067F2  0E00               	movlw	0
  9107  0067F4  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9108  0067F6  0E11               	movlw	17
  9109  0067F8  6F66               	movwf	___wmul@multiplicand& (0+255),b
  9110  0067FA  EC32  F04A         	call	___wmul	;wreg free
  9111  0067FE  0E9E               	movlw	low _LCD_STRINGS
  9112  006800  0100               	movlb	0	; () banked
  9113  006802  2564               	addwf	?___wmul& (0+255),w,b
  9114  006804  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9115  006806  0EF3               	movlw	high _LCD_STRINGS
  9116  006808  2165               	addwfc	(?___wmul+1)& (0+255),w,b
  9117  00680A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9118  00680C  EC7E  F040         	call	_Lcd_Print_String	;wreg free
  9119                           
  9120                           ;menu.c: 310: lcd_print_once = 1;
  9121  006810  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9122  006812                     l3398:
  9123                           
  9124                           ;menu.c: 311: }
  9125                           ;menu.c: 313: if(encoder_click == 1) {
  9126  006812  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9127  006814  0012               	return	
  9128                           
  9129                           ;menu.c: 315: encoder_click = 0;
  9130  006816  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9131                           
  9132                           ;menu.c: 317: switch (mainMenu.selector) {
  9133  006818  D026               	goto	l3400
  9134  00681A                     
  9135                           ;menu.c: 319: Function_A();
  9136  00681A  EC45  F03F         	call	_Function_A	;wreg free
  9137                           
  9138                           ;menu.c: 320: exitFunction();
  9139  00681E  ECE9  F047         	call	_exitFunction	;wreg free
  9140                           
  9141                           ;menu.c: 321: break;
  9142  006822  0012               	return	
  9143  006824                     
  9144                           ;menu.c: 323: Function_H();
  9145  006824  ECFF  F036         	call	_Function_H	;wreg free
  9146                           
  9147                           ;menu.c: 324: exitFunction();
  9148  006828  ECE9  F047         	call	_exitFunction	;wreg free
  9149                           
  9150                           ;menu.c: 325: break;
  9151  00682C  0012               	return	
  9152  00682E                     
  9153                           ;menu.c: 327: Function_B();
  9154  00682E  EC47  F03E         	call	_Function_B	;wreg free
  9155                           
  9156                           ;menu.c: 328: exitFunction();
  9157  006832  ECE9  F047         	call	_exitFunction	;wreg free
  9158                           
  9159                           ;menu.c: 329: break;
  9160  006836  0012               	return	
  9161  006838                     
  9162                           ;menu.c: 331: Function_C();
  9163  006838  EC35  F03C         	call	_Function_C	;wreg free
  9164                           
  9165                           ;menu.c: 332: exitFunction();
  9166  00683C  ECE9  F047         	call	_exitFunction	;wreg free
  9167                           
  9168                           ;menu.c: 333: break;
  9169  006840  0012               	return	
  9170  006842                     
  9171                           ;menu.c: 335: Function_D();
  9172  006842  ECBC  F03C         	call	_Function_D	;wreg free
  9173                           
  9174                           ;menu.c: 336: exitFunction();
  9175  006846  ECE9  F047         	call	_exitFunction	;wreg free
  9176                           
  9177                           ;menu.c: 337: break;
  9178  00684A  0012               	return	
  9179  00684C                     
  9180                           ;menu.c: 339: Function_E();
  9181  00684C  EC98  F042         	call	_Function_E	;wreg free
  9182                           
  9183                           ;menu.c: 340: exitFunction();
  9184  006850  ECE9  F047         	call	_exitFunction	;wreg free
  9185                           
  9186                           ;menu.c: 341: break;
  9187  006854  0012               	return	
  9188  006856                     
  9189                           ;menu.c: 343: Function_F();
  9190  006856  EC3E  F043         	call	_Function_F	;wreg free
  9191                           
  9192                           ;menu.c: 344: exitFunction();
  9193  00685A  ECE9  F047         	call	_exitFunction	;wreg free
  9194                           
  9195                           ;menu.c: 345: break;
  9196  00685E  0012               	return	
  9197  006860                     
  9198                           ;menu.c: 347: Function_G();
  9199  006860  EC17  F03B         	call	_Function_G	;wreg free
  9200                           
  9201                           ;menu.c: 353: }
  9202                           
  9203                           ;menu.c: 352: break;
  9204                           
  9205                           ;menu.c: 351: default:
  9206                           
  9207                           ;menu.c: 349: break;
  9208  006864  0012               	return	
  9209  006866                     l3400:
  9210  006866  0101               	movlb	1	; () banked
  9211  006868  516A               	movf	(_mainMenu+2)& (0+255),w,b
  9212                           
  9213                           ; Switch size 1, requested type "space"
  9214                           ; Number of cases is 8, Range of values is 0 to 7
  9215                           ; switch strategies available:
  9216                           ; Name         Instructions Cycles
  9217                           ; simple_byte           25    13 (average)
  9218                           ;	Chosen strategy is simple_byte
  9219  00686A  0A00               	xorlw	0	; case 0
  9220  00686C  B4D8               	btfsc	status,2,c
  9221  00686E  D7D5               	goto	l3401
  9222  006870  0A01               	xorlw	1	; case 1
  9223  006872  B4D8               	btfsc	status,2,c
  9224  006874  D7D7               	goto	l3403
  9225  006876  0A03               	xorlw	3	; case 2
  9226  006878  B4D8               	btfsc	status,2,c
  9227  00687A  D7D9               	goto	l3404
  9228  00687C  0A01               	xorlw	1	; case 3
  9229  00687E  B4D8               	btfsc	status,2,c
  9230  006880  D7DB               	goto	l3405
  9231  006882  0A07               	xorlw	7	; case 4
  9232  006884  B4D8               	btfsc	status,2,c
  9233  006886  D7DD               	goto	l3406
  9234  006888  0A01               	xorlw	1	; case 5
  9235  00688A  B4D8               	btfsc	status,2,c
  9236  00688C  D7DF               	goto	l3407
  9237  00688E  0A03               	xorlw	3	; case 6
  9238  006890  B4D8               	btfsc	status,2,c
  9239  006892  D7E1               	goto	l3408
  9240  006894  0A01               	xorlw	1	; case 7
  9241  006896  A4D8               	btfss	status,2,c
  9242                           
  9243                           ; BSR set to: 1
  9244  006898  0012               	return	
  9245  00689A  D7E2               	goto	l3409
  9246  00689C                     __end_of_menu_lcd:
  9247                           	opt stack 0
  9248                           tblptru	equ	0xFF8
  9249                           tblptrh	equ	0xFF7
  9250                           tblptrl	equ	0xFF6
  9251                           tablat	equ	0xFF5
  9252                           intcon	equ	0xFF2
  9253                           intcon2	equ	0xFF1
  9254                           postinc0	equ	0xFEE
  9255                           wreg	equ	0xFE8
  9256                           postdec1	equ	0xFE5
  9257                           fsr1l	equ	0xFE1
  9258                           status	equ	0xFD8
  9259                           
  9260 ;; *************** function _Lcd_Clear *****************
  9261 ;; Defined at:
  9262 ;;		line 53 in file "lcd.c"
  9263 ;; Parameters:    Size  Location     Type
  9264 ;;		None
  9265 ;; Auto vars:     Size  Location     Type
  9266 ;;		None
  9267 ;; Return value:  Size  Location     Type
  9268 ;;                  1    wreg      void 
  9269 ;; Registers used:
  9270 ;;		wreg, status,2, cstack
  9271 ;; Tracked objects:
  9272 ;;		On entry : 0/0
  9273 ;;		On exit  : 0/0
  9274 ;;		Unchanged: 0/0
  9275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;Total ram usage:        0 bytes
  9281 ;; Hardware stack levels used:    1
  9282 ;; Hardware stack levels required when called:    7
  9283 ;; This function calls:
  9284 ;;		_Lcd_Cmd
  9285 ;; This function is called by:
  9286 ;;		_menu_lcd
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           	psect	text6
  9291  0095C2                     __ptext6:
  9292                           	opt stack 0
  9293  0095C2                     _Lcd_Clear:
  9294                           	opt stack 22
  9295                           
  9296                           ;lcd.c: 55: Lcd_Cmd(0);
  9297                           
  9298                           ;incstack = 0
  9299  0095C2  0E00               	movlw	0
  9300  0095C4  EC46  F04A         	call	_Lcd_Cmd
  9301                           
  9302                           ;lcd.c: 56: Lcd_Cmd(1);
  9303  0095C8  0E01               	movlw	1
  9304  0095CA  EC46  F04A         	call	_Lcd_Cmd
  9305  0095CE  0012               	return		;funcret
  9306  0095D0                     __end_of_Lcd_Clear:
  9307                           	opt stack 0
  9308                           tblptru	equ	0xFF8
  9309                           tblptrh	equ	0xFF7
  9310                           tblptrl	equ	0xFF6
  9311                           tablat	equ	0xFF5
  9312                           intcon	equ	0xFF2
  9313                           intcon2	equ	0xFF1
  9314                           postinc0	equ	0xFEE
  9315                           wreg	equ	0xFE8
  9316                           postdec1	equ	0xFE5
  9317                           fsr1l	equ	0xFE1
  9318                           status	equ	0xFD8
  9319                           
  9320 ;; *************** function _Function_H *****************
  9321 ;; Defined at:
  9322 ;;		line 986 in file "menu.c"
  9323 ;; Parameters:    Size  Location     Type
  9324 ;;		None
  9325 ;; Auto vars:     Size  Location     Type
  9326 ;;		None
  9327 ;; Return value:  Size  Location     Type
  9328 ;;                  1    wreg      void 
  9329 ;; Registers used:
  9330 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9331 ;; Tracked objects:
  9332 ;;		On entry : 0/0
  9333 ;;		On exit  : 0/0
  9334 ;;		Unchanged: 0/0
  9335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9338 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;Total ram usage:        1 bytes
  9341 ;; Hardware stack levels used:    1
  9342 ;; Hardware stack levels required when called:   14
  9343 ;; This function calls:
  9344 ;;		_Function_H_1
  9345 ;;		_Function_H_2
  9346 ;;		_Function_H_3
  9347 ;;		_Function_H_4
  9348 ;;		_Function_H_5
  9349 ;;		_Function_H_6
  9350 ;;		_Function_H_7
  9351 ;;		_Function_H_8
  9352 ;;		_Function_H_9
  9353 ;;		_Lcd_Print_String
  9354 ;;		___lbmod
  9355 ;;		___wmul
  9356 ;;		_clear_row2
  9357 ;;		_processEncoderBuxton
  9358 ;; This function is called by:
  9359 ;;		_menu_lcd
  9360 ;; This function uses a non-reentrant model
  9361 ;;
  9362                           
  9363                           	psect	text7
  9364  006DFE                     __ptext7:
  9365                           	opt stack 0
  9366  006DFE                     _Function_H:
  9367                           	opt stack 15
  9368                           
  9369                           ;menu.c: 988: which_screen = ARPEGGIATOR_MENU;
  9370                           
  9371                           ;incstack = 0
  9372  006DFE  0E19               	movlw	25
  9373  006E00  0100               	movlb	0	; () banked
  9374  006E02  6FF9               	movwf	_which_screen& (0+255),b
  9375                           
  9376                           ; BSR set to: 0
  9377                           ;menu.c: 989: lcd_print_once = 0;
  9378  006E04  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9379                           
  9380                           ;menu.c: 991: while(encoder_click == 0) {
  9381  006E06  D022               	goto	l3618
  9382  006E08                     
  9383                           ;menu.c: 992: processEncoderBuxton();
  9384                           
  9385                           ; BSR set to: 0
  9386  006E08  EC09  F000         	call	_processEncoderBuxton	;wreg free
  9387                           
  9388                           ;menu.c: 993: if (lcd_print_once == 0) {
  9389  006E0C  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9390  006E0E  D01D               	goto	l3620
  9391                           
  9392                           ;menu.c: 994: clear_row2();
  9393  006E10  EC0A  F04A         	call	_clear_row2	;wreg free
  9394                           
  9395                           ;menu.c: 995: Lcd_Print_String(LCD_STRINGS[(arpeggiatorMenu.selector % arpeggiatorMenu.n
      +                          umber) + arpeggiatorMenu.address]);
  9396  006E14  C03B  F060         	movff	_arpeggiatorMenu,___lbmod@divisor
  9397  006E18  503D               	movf	_arpeggiatorMenu+2,w,c
  9398  006E1A  EC89  F049         	call	___lbmod
  9399  006E1E  0100               	movlb	0	; () banked
  9400  006E20  6FCC               	movwf	??_Function_H& (0+255),b
  9401  006E22  51CC               	movf	??_Function_H& (0+255),w,b
  9402  006E24  243C               	addwf	_arpeggiatorMenu+1,w,c
  9403  006E26  6F64               	movwf	___wmul@multiplier& (0+255),b
  9404  006E28  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9405  006E2A  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9406  006E2C  0E00               	movlw	0
  9407  006E2E  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9408  006E30  0E11               	movlw	17
  9409  006E32  6F66               	movwf	___wmul@multiplicand& (0+255),b
  9410  006E34  EC32  F04A         	call	___wmul	;wreg free
  9411  006E38  0E9E               	movlw	low _LCD_STRINGS
  9412  006E3A  0100               	movlb	0	; () banked
  9413  006E3C  2564               	addwf	?___wmul& (0+255),w,b
  9414  006E3E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9415  006E40  0EF3               	movlw	high _LCD_STRINGS
  9416  006E42  2165               	addwfc	(?___wmul+1)& (0+255),w,b
  9417  006E44  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9418  006E46  EC7E  F040         	call	_Lcd_Print_String	;wreg free
  9419  006E4A                     l3620:
  9420                           
  9421                           ;menu.c: 996: }
  9422                           ;menu.c: 997: lcd_print_once = 1;
  9423  006E4A  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9424  006E4C                     l3618:
  9425  006E4C  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9426  006E4E  D7DC               	goto	l3619
  9427                           
  9428                           ;menu.c: 998: }
  9429                           ;menu.c: 1000: if(arpeggiatorMenu.selector == 0) {Function_H_1();}
  9430  006E50  503D               	movf	_arpeggiatorMenu+2,w,c
  9431  006E52  B4D8               	btfsc	status,2,c
  9432  006E54  EC31  F03A         	call	_Function_H_1	;wreg free
  9433                           
  9434                           ;menu.c: 1001: if(arpeggiatorMenu.selector == 1) {Function_H_2();}
  9435  006E58  043D               	decf	_arpeggiatorMenu+2,w,c
  9436  006E5A  B4D8               	btfsc	status,2,c
  9437  006E5C  ECA8  F043         	call	_Function_H_2	;wreg free
  9438                           
  9439                           ;menu.c: 1002: if(arpeggiatorMenu.selector == 2) {Function_H_3();}
  9440  006E60  0E02               	movlw	2
  9441  006E62  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9442  006E64  B4D8               	btfsc	status,2,c
  9443  006E66  ECD2  F044         	call	_Function_H_3	;wreg free
  9444                           
  9445                           ;menu.c: 1003: if(arpeggiatorMenu.selector == 3) {Function_H_4();}
  9446  006E6A  0E03               	movlw	3
  9447  006E6C  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9448  006E6E  B4D8               	btfsc	status,2,c
  9449  006E70  ECF4  F035         	call	_Function_H_4	;wreg free
  9450                           
  9451                           ;menu.c: 1004: if(arpeggiatorMenu.selector == 4) {Function_H_5();}
  9452  006E74  0E04               	movlw	4
  9453  006E76  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9454  006E78  B4D8               	btfsc	status,2,c
  9455  006E7A  ECA8  F036         	call	_Function_H_5	;wreg free
  9456                           
  9457                           ;menu.c: 1005: if(arpeggiatorMenu.selector == 5) {Function_H_6();}
  9458  006E7E  0E05               	movlw	5
  9459  006E80  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9460  006E82  B4D8               	btfsc	status,2,c
  9461  006E84  EC26  F042         	call	_Function_H_6	;wreg free
  9462                           
  9463                           ;menu.c: 1006: if(arpeggiatorMenu.selector == 6) {Function_H_7();}
  9464  006E88  0E06               	movlw	6
  9465  006E8A  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9466  006E8C  B4D8               	btfsc	status,2,c
  9467  006E8E  EC50  F036         	call	_Function_H_7	;wreg free
  9468                           
  9469                           ;menu.c: 1007: if(arpeggiatorMenu.selector == 7) {Function_H_8();}
  9470  006E92  0E07               	movlw	7
  9471  006E94  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9472  006E96  B4D8               	btfsc	status,2,c
  9473  006E98  ECED  F041         	call	_Function_H_8	;wreg free
  9474                           
  9475                           ;menu.c: 1008: if(arpeggiatorMenu.selector == 8) {Function_H_9();}
  9476  006E9C  0E08               	movlw	8
  9477  006E9E  183D               	xorwf	_arpeggiatorMenu+2,w,c
  9478  006EA0  A4D8               	btfss	status,2,c
  9479  006EA2  0012               	return	
  9480  006EA4  ECCB  F03A         	call	_Function_H_9	;wreg free
  9481  006EA8  0012               	return	
  9482  006EAA                     __end_of_Function_H:
  9483                           	opt stack 0
  9484                           tblptru	equ	0xFF8
  9485                           tblptrh	equ	0xFF7
  9486                           tblptrl	equ	0xFF6
  9487                           tablat	equ	0xFF5
  9488                           intcon	equ	0xFF2
  9489                           intcon2	equ	0xFF1
  9490                           postinc0	equ	0xFEE
  9491                           wreg	equ	0xFE8
  9492                           postdec1	equ	0xFE5
  9493                           fsr1l	equ	0xFE1
  9494                           status	equ	0xFD8
  9495                           
  9496 ;; *************** function _Function_H_9 *****************
  9497 ;; Defined at:
  9498 ;;		line 1474 in file "menu.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;		None
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;		None
  9503 ;; Return value:  Size  Location     Type
  9504 ;;                  1    wreg      void 
  9505 ;; Registers used:
  9506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9507 ;; Tracked objects:
  9508 ;;		On entry : 0/0
  9509 ;;		On exit  : 0/0
  9510 ;;		Unchanged: 0/0
  9511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;Total ram usage:        1 bytes
  9517 ;; Hardware stack levels used:    1
  9518 ;; Hardware stack levels required when called:   10
  9519 ;; This function calls:
  9520 ;;		_Function_H_9_1
  9521 ;;		_Function_H_9_2
  9522 ;;		_Function_H_9_3
  9523 ;;		_Function_H_9_4
  9524 ;;		_Lcd_Print_String
  9525 ;;		___lbmod
  9526 ;;		___wmul
  9527 ;;		_clear_row1
  9528 ;;		_clear_row2
  9529 ;;		_processEncoderBuxton
  9530 ;; This function is called by:
  9531 ;;		_Function_H
  9532 ;; This function uses a non-reentrant model
  9533 ;;
  9534                           
  9535                           	psect	text8
  9536  007596                     __ptext8:
  9537                           	opt stack 0
  9538  007596                     _Function_H_9:
  9539                           	opt stack 18
  9540                           
  9541                           ;menu.c: 1476: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_MENU,
  9542                           ;menu.c: 1477: lcd_print_once = 0;
  9543                           
  9544                           ;incstack = 0
  9545  007596  0E26               	movlw	38
  9546  007598  0100               	movlb	0	; () banked
  9547  00759A  6FF9               	movwf	_which_screen& (0+255),b
  9548                           
  9549                           ; BSR set to: 0
  9550  00759C  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9551                           
  9552                           ; BSR set to: 0
  9553                           ;menu.c: 1478: encoder_click = 0;
  9554  00759E  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9555                           
  9556                           ;menu.c: 1480: while(encoder_click == 0) {
  9557  0075A0  D02C               	goto	l3793
  9558  0075A2                     
  9559                           ;menu.c: 1481: processEncoderBuxton();
  9560                           
  9561                           ; BSR set to: 0
  9562  0075A2  EC09  F000         	call	_processEncoderBuxton	;wreg free
  9563                           
  9564                           ;menu.c: 1482: if (lcd_print_once == 0) {
  9565  0075A6  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9566  0075A8  D027               	goto	l3795
  9567                           
  9568                           ;menu.c: 1483: clear_row1();
  9569  0075AA  EC1E  F04A         	call	_clear_row1	;wreg free
  9570                           
  9571                           ;menu.c: 1484: Lcd_Print_String("Last Note Mode:");
  9572  0075AE  0E0D               	movlw	low STR_76
  9573  0075B0  0100               	movlb	0	; () banked
  9574  0075B2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9575  0075B4  0EFE               	movlw	high STR_76
  9576  0075B6  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9577  0075B8  EC7E  F040         	call	_Lcd_Print_String	;wreg free
  9578                           
  9579                           ;menu.c: 1485: clear_row2();
  9580  0075BC  EC0A  F04A         	call	_clear_row2	;wreg free
  9581                           
  9582                           ;menu.c: 1486: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9583  0075C0  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
  9584  0075C4  0100               	movlb	0	; () banked
  9585  0075C6  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9586  0075C8  EC89  F049         	call	___lbmod
  9587  0075CC  0100               	movlb	0	; () banked
  9588  0075CE  6F71               	movwf	??_Function_H_9& (0+255),b
  9589  0075D0  5171               	movf	??_Function_H_9& (0+255),w,b
  9590  0075D2  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9591  0075D4  6F64               	movwf	___wmul@multiplier& (0+255),b
  9592  0075D6  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9593  0075D8  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9594  0075DA  0E00               	movlw	0
  9595  0075DC  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9596  0075DE  0E11               	movlw	17
  9597  0075E0  6F66               	movwf	___wmul@multiplicand& (0+255),b
  9598  0075E2  EC32  F04A         	call	___wmul	;wreg free
  9599  0075E6  0E9E               	movlw	low _LCD_STRINGS
  9600  0075E8  0100               	movlb	0	; () banked
  9601  0075EA  2564               	addwf	?___wmul& (0+255),w,b
  9602  0075EC  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9603  0075EE  0EF3               	movlw	high _LCD_STRINGS
  9604  0075F0  2165               	addwfc	(?___wmul+1)& (0+255),w,b
  9605  0075F2  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9606  0075F4  EC7E  F040         	call	_Lcd_Print_String	;wreg free
  9607  0075F8                     l3795:
  9608                           
  9609                           ;menu.c: 1487: }
  9610                           ;menu.c: 1488: lcd_print_once = 1;
  9611  0075F8  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9612  0075FA                     l3793:
  9613  0075FA  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9614  0075FC  D7D2               	goto	l3794
  9615                           
  9616                           ;menu.c: 1489: }
  9617                           ;menu.c: 1492: if(arpeggiatorLastNoteModeMenu.selector == 0) {Function_H_9_1();}
  9618  0075FE  0100               	movlb	0	; () banked
  9619  007600  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9620  007602  B4D8               	btfsc	status,2,c
  9621                           
  9622                           ; BSR set to: 0
  9623  007604  EC9E  F038         	call	_Function_H_9_1	;wreg free
  9624                           
  9625                           ;menu.c: 1493: if(arpeggiatorLastNoteModeMenu.selector == 1) {Function_H_9_2();}
  9626  007608  0100               	movlb	0	; () banked
  9627  00760A  05DE               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9628  00760C  B4D8               	btfsc	status,2,c
  9629                           
  9630                           ; BSR set to: 0
  9631  00760E  EC4D  F038         	call	_Function_H_9_2	;wreg free
  9632                           
  9633                           ;menu.c: 1494: if(arpeggiatorLastNoteModeMenu.selector == 2) {Function_H_9_3();}
  9634  007612  0E02               	movlw	2
  9635  007614  0100               	movlb	0	; () banked
  9636  007616  19DE               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9637  007618  B4D8               	btfsc	status,2,c
  9638                           
  9639                           ; BSR set to: 0
  9640  00761A  ECFC  F037         	call	_Function_H_9_3	;wreg free
  9641                           
  9642                           ;menu.c: 1495: if(arpeggiatorLastNoteModeMenu.selector == 3) {Function_H_9_4();}
  9643  00761E  0E03               	movlw	3
  9644  007620  0100               	movlb	0	; () banked
  9645  007622  19DE               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9646  007624  A4D8               	btfss	status,2,c
  9647  007626  0012               	return	
  9648                           
  9649                           ; BSR set to: 0
  9650  007628  ECAB  F037         	call	_Function_H_9_4	;wreg free
  9651  00762C  0012               	return	
  9652  00762E                     __end_of_Function_H_9:
  9653                           	opt stack 0
  9654                           tblptru	equ	0xFF8
  9655                           tblptrh	equ	0xFF7
  9656                           tblptrl	equ	0xFF6
  9657                           tablat	equ	0xFF5
  9658                           intcon	equ	0xFF2
  9659                           intcon2	equ	0xFF1
  9660                           postinc0	equ	0xFEE
  9661                           wreg	equ	0xFE8
  9662                           postdec1	equ	0xFE5
  9663                           fsr1l	equ	0xFE1
  9664                           status	equ	0xFD8
  9665                           
  9666 ;; *************** function _Function_H_9_4 *****************
  9667 ;; Defined at:
  9668 ;;		line 1449 in file "menu.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;		None
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;		None
  9673 ;; Return value:  Size  Location     Type
  9674 ;;                  1    wreg      void 
  9675 ;; Registers used:
  9676 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;Total ram usage:        1 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    9
  9689 ;; This function calls:
  9690 ;;		_Lcd_Print_String
  9691 ;;		___lbmod
  9692 ;;		___wmul
  9693 ;;		_clear_row1
  9694 ;;		_clear_row2
  9695 ;;		_processEncoderBuxton
  9696 ;; This function is called by:
  9697 ;;		_Function_H_9
  9698 ;; This function uses a non-reentrant model
  9699 ;;
  9700                           
  9701                           	psect	text9
  9702  006F56                     __ptext9:
  9703                           	opt stack 0
  9704  006F56                     _Function_H_9_4:
  9705                           	opt stack 18
  9706                           
  9707                           ;menu.c: 1451: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU;
  9708                           
  9709                           ;incstack = 0
  9710  006F56  0E2A               	movlw	42
  9711  006F58  0100               	movlb	0	; () banked
  9712  006F5A  6FF9               	movwf	_which_screen& (0+255),b
  9713                           
  9714                           ; BSR set to: 0
  9715                           ;menu.c: 1452: lcd_print_once = 0;
  9716  006F5C  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9717                           
  9718                           ; BSR set to: 0
  9719                           ;menu.c: 1453: encoder_click = 0;
  9720  006F5E  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9721                           
  9722                           ;menu.c: 1455: arpeggiatorLastNoteModeResetMenu.selector = LAST_NOTE_MODE_RESET;
  9723  006F60  0E00               	movlw	0
  9724  006F62  BC33               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9725  006F64  0E01               	movlw	1
  9726  006F66  0101               	movlb	1	; () banked
  9727  006F68  6F0A               	movwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),b
  9728                           
  9729                           ;menu.c: 1457: while(encoder_click == 0) {
  9730  006F6A  D03D               	goto	l3784
  9731  006F6C                     
  9732                           ;menu.c: 1458: processEncoderBuxton();
  9733                           
  9734                           ; BSR set to: 1
  9735  006F6C  EC09  F000         	call	_processEncoderBuxton	;wreg free
  9736                           
  9737                           ;menu.c: 1459: if (lcd_print_once == 0) {
  9738  006F70  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9739  006F72  D038               	goto	l3788
  9740                           
  9741                           ;menu.c: 1460: clear_row1();
  9742  006F74  EC1E  F04A         	call	_clear_row1	;wreg free
  9743                           
  9744                           ;menu.c: 1461: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9745  006F78  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
  9746  006F7C  0100               	movlb	0	; () banked
  9747  006F7E  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9748  006F80  EC89  F049         	call	___lbmod
  9749  006F84  0100               	movlb	0	; () banked
  9750  006F86  6F70               	movwf	??_Function_H_9_4& (0+255),b
  9751  006F88  5170               	movf	??_Function_H_9_4& (0+255),w,b
  9752  006F8A  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9753  006F8C  6F64               	movwf	___wmul@multiplier& (0+255),b
  9754  006F8E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9755  006F90  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9756  006F92  0E00               	movlw	0
  9757  006F94  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9758  006F96  0E11               	movlw	17
  9759  006F98  6F66               	movwf	___wmul@multiplicand& (0+255),b
  9760  006F9A  EC32  F04A         	call	___wmul	;wreg free
  9761  006F9E  0E9E               	movlw	low _LCD_STRINGS
  9762  006FA0  0100               	movlb	0	; () banked
  9763  006FA2  2564               	addwf	?___wmul& (0+255),w,b
  9764  006FA4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9765  006FA6  0EF3               	movlw	high _LCD_STRINGS
  9766  006FA8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
  9767  006FAA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9768  006FAC  EC7E  F040         	call	_Lcd_Print_String	;wreg free
  9769                           
  9770                           ;menu.c: 1462: if(arpeggiatorLastNoteModeResetMenu.selector == 0) {clear_row2();Lcd_Prin
      +                          t_String("IMMEDIATE");}
  9771  006FB0  0101               	movlb	1	; () banked
  9772  006FB2  510A               	movf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9773  006FB4  A4D8               	btfss	status,2,c
  9774  006FB6  D009               	goto	l3787
  9775                           
  9776                           ; BSR set to: 1
  9777  006FB8  EC0A  F04A         	call	_clear_row2	;wreg free
  9778  006FBC  0EA9               	movlw	low STR_68
  9779  006FBE  0100               	movlb	0	; () banked
  9780  006FC0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9781  006FC2  0EFF               	movlw	high STR_68
  9782  006FC4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9783  006FC6  EC7E  F040         	call	_Lcd_Print_String	;wreg free
  9784  006FCA                     l3787:
  9785                           
  9786                           ;menu.c: 1463: if(arpeggiatorLastNoteModeResetMenu.selector == 1) {clear_row2();Lcd_Prin
      +                          t_String("FINISH LAST");}
  9787  006FCA  0101               	movlb	1	; () banked
  9788  006FCC  050A               	decf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9789  006FCE  A4D8               	btfss	status,2,c
  9790  006FD0  D009               	goto	l3788
  9791                           
  9792                           ; BSR set to: 1
  9793  006FD2  EC0A  F04A         	call	_clear_row2	;wreg free
  9794  006FD6  0E7C               	movlw	low STR_69
  9795  006FD8  0100               	movlb	0	; () banked
  9796  006FDA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9797  006FDC  0EFF               	movlw	high STR_69
  9798  006FDE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9799  006FE0  EC7E  F040         	call	_Lcd_Print_String	;wreg free
  9800  006FE4                     l3788:
  9801                           
  9802                           ;menu.c: 1464: }
  9803                           ;menu.c: 1465: lcd_print_once = 1;
  9804  006FE4  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9805  006FE6                     l3784:
  9806  006FE6  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9807  006FE8  D7C1               	goto	l3785
  9808                           
  9809                           ;menu.c: 1466: }
  9810                           ;menu.c: 1468: LAST_NOTE_MODE_RESET = arpeggiatorLastNoteModeResetMenu.selector;
  9811  006FEA  0101               	movlb	1	; () banked
  9812  006FEC  A10A               	btfss	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),0,b
  9813  006FEE  D002               	goto	u29590
  9814  006FF0  8C33               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9815  006FF2  0012               	return	
  9816  006FF4                     u29590:
  9817  006FF4  9C33               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9818  006FF6  0012               	return		;funcret
  9819  006FF8                     __end_of_Function_H_9_4:
  9820                           	opt stack 0
  9821                           tblptru	equ	0xFF8
  9822                           tblptrh	equ	0xFF7
  9823                           tblptrl	equ	0xFF6
  9824                           tablat	equ	0xFF5
  9825                           intcon	equ	0xFF2
  9826                           intcon2	equ	0xFF1
  9827                           postinc0	equ	0xFEE
  9828                           wreg	equ	0xFE8
  9829                           postdec1	equ	0xFE5
  9830                           fsr1l	equ	0xFE1
  9831                           status	equ	0xFD8
  9832                           
  9833 ;; *************** function _Function_H_9_3 *****************
  9834 ;; Defined at:
  9835 ;;		line 1425 in file "menu.c"
  9836 ;; Parameters:    Size  Location     Type
  9837 ;;		None
  9838 ;; Auto vars:     Size  Location     Type
  9839 ;;		None
  9840 ;; Return value:  Size  Location     Type
  9841 ;;                  1    wreg      void 
  9842 ;; Registers used:
  9843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9844 ;; Tracked objects:
  9845 ;;		On entry : 0/0
  9846 ;;		On exit  : 0/0
  9847 ;;		Unchanged: 0/0
  9848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;Total ram usage:        1 bytes
  9854 ;; Hardware stack levels used:    1
  9855 ;; Hardware stack levels required when called:    9
  9856 ;; This function calls:
  9857 ;;		_Lcd_Print_String
  9858 ;;		___lbmod
  9859 ;;		___wmul
  9860 ;;		_clear_row1
  9861 ;;		_clear_row2
  9862 ;;		_processEncoderBuxton
  9863 ;; This function is called by:
  9864 ;;		_Function_H_9
  9865 ;; This function uses a non-reentrant model
  9866 ;;
  9867                           
  9868                           	psect	text10
  9869  006FF8                     __ptext10:
  9870                           	opt stack 0
  9871  006FF8                     _Function_H_9_3:
  9872                           	opt stack 18
  9873                           
  9874                           ;menu.c: 1427: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU;
  9875                           
  9876                           ;incstack = 0
  9877  006FF8  0E29               	movlw	41
  9878  006FFA  0100               	movlb	0	; () banked
  9879  006FFC  6FF9               	movwf	_which_screen& (0+255),b
  9880                           
  9881                           ; BSR set to: 0
  9882                           ;menu.c: 1428: lcd_print_once = 0;
  9883  006FFE  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;menu.c: 1429: encoder_click = 0;
  9887  007000  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9888                           
  9889                           ;menu.c: 1431: arpeggiatorLastNoteModeTransposeMenu.selector = LAST_NOTE_MODE_TRANSPOSE;
  9890  007002  0E00               	movlw	0
  9891  007004  BE33               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9892  007006  0E01               	movlw	1
  9893  007008  0101               	movlb	1	; () banked
  9894  00700A  6F0D               	movwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),b
  9895                           
  9896                           ;menu.c: 1433: while(encoder_click == 0) {
  9897  00700C  D03D               	goto	l3775
  9898  00700E                     
  9899                           ;menu.c: 1434: processEncoderBuxton();
  9900                           
  9901                           ; BSR set to: 1
  9902  00700E  EC09  F000         	call	_processEncoderBuxton	;wreg free
  9903                           
  9904                           ;menu.c: 1435: if (lcd_print_once == 0) {
  9905  007012  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9906  007014  D038               	goto	l3779
  9907                           
  9908                           ;menu.c: 1436: clear_row1();
  9909  007016  EC1E  F04A         	call	_clear_row1	;wreg free
  9910                           
  9911                           ;menu.c: 1437: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9912  00701A  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
  9913  00701E  0100               	movlb	0	; () banked
  9914  007020  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9915  007022  EC89  F049         	call	___lbmod
  9916  007026  0100               	movlb	0	; () banked
  9917  007028  6F70               	movwf	??_Function_H_9_3& (0+255),b
  9918  00702A  5170               	movf	??_Function_H_9_3& (0+255),w,b
  9919  00702C  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9920  00702E  6F64               	movwf	___wmul@multiplier& (0+255),b
  9921  007030  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
  9922  007032  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9923  007034  0E00               	movlw	0
  9924  007036  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9925  007038  0E11               	movlw	17
  9926  00703A  6F66               	movwf	___wmul@multiplicand& (0+255),b
  9927  00703C  EC32  F04A         	call	___wmul	;wreg free
  9928  007040  0E9E               	movlw	low _LCD_STRINGS
  9929  007042  0100               	movlb	0	; () banked
  9930  007044  2564               	addwf	?___wmul& (0+255),w,b
  9931  007046  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9932  007048  0EF3               	movlw	high _LCD_STRINGS
  9933  00704A  2165               	addwfc	(?___wmul+1)& (0+255),w,b
  9934  00704C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9935  00704E  EC7E  F040         	call	_Lcd_Print_String	;wreg free
  9936                           
  9937                           ;menu.c: 1438: if(arpeggiatorLastNoteModeTransposeMenu.selector == 0) {clear_row2();Lcd_
      +                          Print_String("IMMEDIATE");}
  9938  007052  0101               	movlb	1	; () banked
  9939  007054  510D               	movf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
  9940  007056  A4D8               	btfss	status,2,c
  9941  007058  D009               	goto	l3778
  9942                           
  9943                           ; BSR set to: 1
  9944  00705A  EC0A  F04A         	call	_clear_row2	;wreg free
  9945  00705E  0EA9               	movlw	low STR_68
  9946  007060  0100               	movlb	0	; () banked
  9947  007062  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9948  007064  0EFF               	movlw	high STR_68
  9949  007066  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9950  007068  EC7E  F040         	call	_Lcd_Print_String	;wreg free
  9951  00706C                     l3778:
  9952                           
  9953                           ;menu.c: 1439: if(arpeggiatorLastNoteModeTransposeMenu.selector == 1) {clear_row2();Lcd_
      +                          Print_String("FINISH LAST");}
  9954  00706C  0101               	movlb	1	; () banked
  9955  00706E  050D               	decf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
  9956  007070  A4D8               	btfss	status,2,c
  9957  007072  D009               	goto	l3779
  9958                           
  9959                           ; BSR set to: 1
  9960  007074  EC0A  F04A         	call	_clear_row2	;wreg free
  9961  007078  0E7C               	movlw	low STR_69
  9962  00707A  0100               	movlb	0	; () banked
  9963  00707C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
  9964  00707E  0EFF               	movlw	high STR_69
  9965  007080  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9966  007082  EC7E  F040         	call	_Lcd_Print_String	;wreg free
  9967  007086                     l3779:
  9968                           
  9969                           ;menu.c: 1440: }
  9970                           ;menu.c: 1441: lcd_print_once = 1;
  9971  007086  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9972  007088                     l3775:
  9973  007088  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9974  00708A  D7C1               	goto	l3776
  9975                           
  9976                           ;menu.c: 1442: }
  9977                           ;menu.c: 1444: LAST_NOTE_MODE_TRANSPOSE = arpeggiatorLastNoteModeTransposeMenu.selector;
  9978  00708C  0101               	movlb	1	; () banked
  9979  00708E  A10D               	btfss	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),0,b
  9980  007090  D002               	goto	u29530
  9981  007092  8E33               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9982  007094  0012               	return	
  9983  007096                     u29530:
  9984  007096  9E33               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9985  007098  0012               	return		;funcret
  9986  00709A                     __end_of_Function_H_9_3:
  9987                           	opt stack 0
  9988                           tblptru	equ	0xFF8
  9989                           tblptrh	equ	0xFF7
  9990                           tblptrl	equ	0xFF6
  9991                           tablat	equ	0xFF5
  9992                           intcon	equ	0xFF2
  9993                           intcon2	equ	0xFF1
  9994                           postinc0	equ	0xFEE
  9995                           wreg	equ	0xFE8
  9996                           postdec1	equ	0xFE5
  9997                           fsr1l	equ	0xFE1
  9998                           status	equ	0xFD8
  9999                           
 10000 ;; *************** function _Function_H_9_2 *****************
 10001 ;; Defined at:
 10002 ;;		line 1402 in file "menu.c"
 10003 ;; Parameters:    Size  Location     Type
 10004 ;;		None
 10005 ;; Auto vars:     Size  Location     Type
 10006 ;;		None
 10007 ;; Return value:  Size  Location     Type
 10008 ;;                  1    wreg      void 
 10009 ;; Registers used:
 10010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10011 ;; Tracked objects:
 10012 ;;		On entry : 0/0
 10013 ;;		On exit  : 0/0
 10014 ;;		Unchanged: 0/0
 10015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;Total ram usage:        1 bytes
 10021 ;; Hardware stack levels used:    1
 10022 ;; Hardware stack levels required when called:    9
 10023 ;; This function calls:
 10024 ;;		_Lcd_Print_String
 10025 ;;		___lbmod
 10026 ;;		___wmul
 10027 ;;		_clear_row1
 10028 ;;		_clear_row2
 10029 ;;		_processEncoderBuxton
 10030 ;; This function is called by:
 10031 ;;		_Function_H_9
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           	psect	text11
 10036  00709A                     __ptext11:
 10037                           	opt stack 0
 10038  00709A                     _Function_H_9_2:
 10039                           	opt stack 18
 10040                           
 10041                           ;menu.c: 1404: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU;
 10042                           
 10043                           ;incstack = 0
 10044  00709A  0E28               	movlw	40
 10045  00709C  0100               	movlb	0	; () banked
 10046  00709E  6FF9               	movwf	_which_screen& (0+255),b
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;menu.c: 1405: lcd_print_once = 0;
 10050  0070A0  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10051                           
 10052                           ; BSR set to: 0
 10053                           ;menu.c: 1406: encoder_click = 0;
 10054  0070A2  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10055                           
 10056                           ;menu.c: 1408: arpeggiatorLastNoteModeKeyReleaseMenu.selector = LAST_NOTE_MODE_KEY_RELEA
      +                          SE;
 10057  0070A4  0E00               	movlw	0
 10058  0070A6  B034               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10059  0070A8  0E01               	movlw	1
 10060  0070AA  0101               	movlb	1	; () banked
 10061  0070AC  6F10               	movwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),b
 10062                           
 10063                           ;menu.c: 1410: while(encoder_click == 0) {
 10064  0070AE  D03D               	goto	l3766
 10065  0070B0                     
 10066                           ;menu.c: 1411: processEncoderBuxton();
 10067                           
 10068                           ; BSR set to: 1
 10069  0070B0  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10070                           
 10071                           ;menu.c: 1412: if (lcd_print_once == 0) {
 10072  0070B4  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10073  0070B6  D038               	goto	l3770
 10074                           
 10075                           ;menu.c: 1413: clear_row1();
 10076  0070B8  EC1E  F04A         	call	_clear_row1	;wreg free
 10077                           
 10078                           ;menu.c: 1414: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10079  0070BC  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
 10080  0070C0  0100               	movlb	0	; () banked
 10081  0070C2  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10082  0070C4  EC89  F049         	call	___lbmod
 10083  0070C8  0100               	movlb	0	; () banked
 10084  0070CA  6F70               	movwf	??_Function_H_9_2& (0+255),b
 10085  0070CC  5170               	movf	??_Function_H_9_2& (0+255),w,b
 10086  0070CE  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10087  0070D0  6F64               	movwf	___wmul@multiplier& (0+255),b
 10088  0070D2  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 10089  0070D4  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10090  0070D6  0E00               	movlw	0
 10091  0070D8  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10092  0070DA  0E11               	movlw	17
 10093  0070DC  6F66               	movwf	___wmul@multiplicand& (0+255),b
 10094  0070DE  EC32  F04A         	call	___wmul	;wreg free
 10095  0070E2  0E9E               	movlw	low _LCD_STRINGS
 10096  0070E4  0100               	movlb	0	; () banked
 10097  0070E6  2564               	addwf	?___wmul& (0+255),w,b
 10098  0070E8  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10099  0070EA  0EF3               	movlw	high _LCD_STRINGS
 10100  0070EC  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 10101  0070EE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10102  0070F0  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10103                           
 10104                           ;menu.c: 1415: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 0) {clear_row2();Lcd
      +                          _Print_String("IMMEDIATE");}
 10105  0070F4  0101               	movlb	1	; () banked
 10106  0070F6  5110               	movf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10107  0070F8  A4D8               	btfss	status,2,c
 10108  0070FA  D009               	goto	l3769
 10109                           
 10110                           ; BSR set to: 1
 10111  0070FC  EC0A  F04A         	call	_clear_row2	;wreg free
 10112  007100  0EA9               	movlw	low STR_68
 10113  007102  0100               	movlb	0	; () banked
 10114  007104  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10115  007106  0EFF               	movlw	high STR_68
 10116  007108  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10117  00710A  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10118  00710E                     l3769:
 10119                           
 10120                           ;menu.c: 1416: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 1) {clear_row2();Lcd
      +                          _Print_String("FINISH LAST");}
 10121  00710E  0101               	movlb	1	; () banked
 10122  007110  0510               	decf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10123  007112  A4D8               	btfss	status,2,c
 10124  007114  D009               	goto	l3770
 10125                           
 10126                           ; BSR set to: 1
 10127  007116  EC0A  F04A         	call	_clear_row2	;wreg free
 10128  00711A  0E7C               	movlw	low STR_69
 10129  00711C  0100               	movlb	0	; () banked
 10130  00711E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10131  007120  0EFF               	movlw	high STR_69
 10132  007122  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10133  007124  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10134  007128                     l3770:
 10135                           
 10136                           ;menu.c: 1417: }
 10137                           ;menu.c: 1418: lcd_print_once = 1;
 10138  007128  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10139  00712A                     l3766:
 10140  00712A  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10141  00712C  D7C1               	goto	l3767
 10142                           
 10143                           ;menu.c: 1419: }
 10144                           ;menu.c: 1421: LAST_NOTE_MODE_KEY_RELEASE = arpeggiatorLastNoteModeKeyReleaseMenu.select
      +                          or;
 10145  00712E  0101               	movlb	1	; () banked
 10146  007130  A110               	btfss	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),0,b
 10147  007132  D002               	goto	u29470
 10148  007134  8034               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10149  007136  0012               	return	
 10150  007138                     u29470:
 10151  007138  9034               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10152  00713A  0012               	return		;funcret
 10153  00713C                     __end_of_Function_H_9_2:
 10154                           	opt stack 0
 10155                           tblptru	equ	0xFF8
 10156                           tblptrh	equ	0xFF7
 10157                           tblptrl	equ	0xFF6
 10158                           tablat	equ	0xFF5
 10159                           intcon	equ	0xFF2
 10160                           intcon2	equ	0xFF1
 10161                           postinc0	equ	0xFEE
 10162                           wreg	equ	0xFE8
 10163                           postdec1	equ	0xFE5
 10164                           fsr1l	equ	0xFE1
 10165                           status	equ	0xFD8
 10166                           
 10167 ;; *************** function _Function_H_9_1 *****************
 10168 ;; Defined at:
 10169 ;;		line 1379 in file "menu.c"
 10170 ;; Parameters:    Size  Location     Type
 10171 ;;		None
 10172 ;; Auto vars:     Size  Location     Type
 10173 ;;		None
 10174 ;; Return value:  Size  Location     Type
 10175 ;;                  1    wreg      void 
 10176 ;; Registers used:
 10177 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10178 ;; Tracked objects:
 10179 ;;		On entry : 0/0
 10180 ;;		On exit  : 0/0
 10181 ;;		Unchanged: 0/0
 10182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10186 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10187 ;;Total ram usage:        1 bytes
 10188 ;; Hardware stack levels used:    1
 10189 ;; Hardware stack levels required when called:    9
 10190 ;; This function calls:
 10191 ;;		_Lcd_Print_String
 10192 ;;		___lbmod
 10193 ;;		___wmul
 10194 ;;		_clear_row1
 10195 ;;		_clear_row2
 10196 ;;		_processEncoderBuxton
 10197 ;; This function is called by:
 10198 ;;		_Function_H_9
 10199 ;; This function uses a non-reentrant model
 10200 ;;
 10201                           
 10202                           	psect	text12
 10203  00713C                     __ptext12:
 10204                           	opt stack 0
 10205  00713C                     _Function_H_9_1:
 10206                           	opt stack 18
 10207                           
 10208                           ;menu.c: 1381: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU;
 10209                           
 10210                           ;incstack = 0
 10211  00713C  0E27               	movlw	39
 10212  00713E  0100               	movlb	0	; () banked
 10213  007140  6FF9               	movwf	_which_screen& (0+255),b
 10214                           
 10215                           ; BSR set to: 0
 10216                           ;menu.c: 1382: lcd_print_once = 0;
 10217  007142  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10218                           
 10219                           ; BSR set to: 0
 10220                           ;menu.c: 1383: encoder_click = 0;
 10221  007144  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10222                           
 10223                           ;menu.c: 1385: arpeggiatorLastNoteModeKeyPressMenu.selector = LAST_NOTE_MODE_KEY_PRESS;
 10224  007146  0E00               	movlw	0
 10225  007148  B234               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10226  00714A  0E01               	movlw	1
 10227  00714C  0101               	movlb	1	; () banked
 10228  00714E  6F13               	movwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),b
 10229                           
 10230                           ;menu.c: 1387: while(encoder_click == 0) {
 10231  007150  D03D               	goto	l3757
 10232  007152                     
 10233                           ;menu.c: 1388: processEncoderBuxton();
 10234                           
 10235                           ; BSR set to: 1
 10236  007152  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10237                           
 10238                           ;menu.c: 1389: if (lcd_print_once == 0) {
 10239  007156  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10240  007158  D038               	goto	l3761
 10241                           
 10242                           ;menu.c: 1390: clear_row1();
 10243  00715A  EC1E  F04A         	call	_clear_row1	;wreg free
 10244                           
 10245                           ;menu.c: 1391: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10246  00715E  C0DC  F060         	movff	_arpeggiatorLastNoteModeMenu,___lbmod@divisor
 10247  007162  0100               	movlb	0	; () banked
 10248  007164  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10249  007166  EC89  F049         	call	___lbmod
 10250  00716A  0100               	movlb	0	; () banked
 10251  00716C  6F70               	movwf	??_Function_H_9_1& (0+255),b
 10252  00716E  5170               	movf	??_Function_H_9_1& (0+255),w,b
 10253  007170  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10254  007172  6F64               	movwf	___wmul@multiplier& (0+255),b
 10255  007174  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 10256  007176  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10257  007178  0E00               	movlw	0
 10258  00717A  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10259  00717C  0E11               	movlw	17
 10260  00717E  6F66               	movwf	___wmul@multiplicand& (0+255),b
 10261  007180  EC32  F04A         	call	___wmul	;wreg free
 10262  007184  0E9E               	movlw	low _LCD_STRINGS
 10263  007186  0100               	movlb	0	; () banked
 10264  007188  2564               	addwf	?___wmul& (0+255),w,b
 10265  00718A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10266  00718C  0EF3               	movlw	high _LCD_STRINGS
 10267  00718E  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 10268  007190  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10269  007192  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10270                           
 10271                           ;menu.c: 1392: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 0) {clear_row2();Lcd_P
      +                          rint_String("IMMEDIATE");}
 10272  007196  0101               	movlb	1	; () banked
 10273  007198  5113               	movf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10274  00719A  A4D8               	btfss	status,2,c
 10275  00719C  D009               	goto	l3760
 10276                           
 10277                           ; BSR set to: 1
 10278  00719E  EC0A  F04A         	call	_clear_row2	;wreg free
 10279  0071A2  0EA9               	movlw	low STR_68
 10280  0071A4  0100               	movlb	0	; () banked
 10281  0071A6  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10282  0071A8  0EFF               	movlw	high STR_68
 10283  0071AA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10284  0071AC  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10285  0071B0                     l3760:
 10286                           
 10287                           ;menu.c: 1393: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 1) {clear_row2();Lcd_P
      +                          rint_String("FINISH LAST");}
 10288  0071B0  0101               	movlb	1	; () banked
 10289  0071B2  0513               	decf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10290  0071B4  A4D8               	btfss	status,2,c
 10291  0071B6  D009               	goto	l3761
 10292                           
 10293                           ; BSR set to: 1
 10294  0071B8  EC0A  F04A         	call	_clear_row2	;wreg free
 10295  0071BC  0E7C               	movlw	low STR_69
 10296  0071BE  0100               	movlb	0	; () banked
 10297  0071C0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10298  0071C2  0EFF               	movlw	high STR_69
 10299  0071C4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10300  0071C6  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10301  0071CA                     l3761:
 10302                           
 10303                           ;menu.c: 1394: }
 10304                           ;menu.c: 1395: lcd_print_once = 1;
 10305  0071CA  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10306  0071CC                     l3757:
 10307  0071CC  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10308  0071CE  D7C1               	goto	l3758
 10309                           
 10310                           ;menu.c: 1396: }
 10311                           ;menu.c: 1398: LAST_NOTE_MODE_KEY_PRESS = arpeggiatorLastNoteModeKeyPressMenu.selector;
 10312  0071D0  0101               	movlb	1	; () banked
 10313  0071D2  A113               	btfss	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),0,b
 10314  0071D4  D002               	goto	u29410
 10315  0071D6  8234               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10316  0071D8  0012               	return	
 10317  0071DA                     u29410:
 10318  0071DA  9234               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10319  0071DC  0012               	return		;funcret
 10320  0071DE                     __end_of_Function_H_9_1:
 10321                           	opt stack 0
 10322                           tblptru	equ	0xFF8
 10323                           tblptrh	equ	0xFF7
 10324                           tblptrl	equ	0xFF6
 10325                           tablat	equ	0xFF5
 10326                           intcon	equ	0xFF2
 10327                           intcon2	equ	0xFF1
 10328                           postinc0	equ	0xFEE
 10329                           wreg	equ	0xFE8
 10330                           postdec1	equ	0xFE5
 10331                           fsr1l	equ	0xFE1
 10332                           status	equ	0xFD8
 10333                           
 10334 ;; *************** function _Function_H_8 *****************
 10335 ;; Defined at:
 10336 ;;		line 1357 in file "menu.c"
 10337 ;; Parameters:    Size  Location     Type
 10338 ;;		None
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;		None
 10341 ;; Return value:  Size  Location     Type
 10342 ;;                  1    wreg      void 
 10343 ;; Registers used:
 10344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10345 ;; Tracked objects:
 10346 ;;		On entry : 0/0
 10347 ;;		On exit  : 0/0
 10348 ;;		Unchanged: 0/0
 10349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10354 ;;Total ram usage:        1 bytes
 10355 ;; Hardware stack levels used:    1
 10356 ;; Hardware stack levels required when called:   10
 10357 ;; This function calls:
 10358 ;;		_Function_H_8_1
 10359 ;;		_Function_H_8_2
 10360 ;;		_Lcd_Print_String
 10361 ;;		___lbmod
 10362 ;;		___wmul
 10363 ;;		_clear_row2
 10364 ;;		_processEncoderBuxton
 10365 ;; This function is called by:
 10366 ;;		_Function_H
 10367 ;; This function uses a non-reentrant model
 10368 ;;
 10369                           
 10370                           	psect	text13
 10371  0083DA                     __ptext13:
 10372                           	opt stack 0
 10373  0083DA                     _Function_H_8:
 10374                           	opt stack 18
 10375                           
 10376                           ;menu.c: 1359: which_screen = ARPEGGIATOR_RANDOMIZE_SKIP_MENU;
 10377                           
 10378                           ;incstack = 0
 10379  0083DA  0E23               	movlw	35
 10380  0083DC  0100               	movlb	0	; () banked
 10381  0083DE  6FF9               	movwf	_which_screen& (0+255),b
 10382                           
 10383                           ; BSR set to: 0
 10384                           ;menu.c: 1360: lcd_print_once = 0;
 10385  0083E0  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10386                           
 10387                           ; BSR set to: 0
 10388                           ;menu.c: 1361: encoder_click = 0;
 10389  0083E2  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10390                           
 10391                           ;menu.c: 1363: while(encoder_click == 0) {
 10392  0083E4  D025               	goto	l3748
 10393  0083E6                     
 10394                           ;menu.c: 1364: processEncoderBuxton();
 10395                           
 10396                           ; BSR set to: 0
 10397  0083E6  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10398                           
 10399                           ;menu.c: 1365: if (lcd_print_once == 0) {
 10400  0083EA  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10401  0083EC  D020               	goto	l3750
 10402                           
 10403                           ;menu.c: 1366: clear_row2();
 10404  0083EE  EC0A  F04A         	call	_clear_row2	;wreg free
 10405                           
 10406                           ;menu.c: 1367: Lcd_Print_String(LCD_STRINGS[(arpeggiatorRandomizeSkipMenu.selector % arp
      +                          eggiatorRandomizeSkipMenu.number) + arpeggiatorRandomizeSkipMenu.address]);
 10407  0083F2  C11A  F060         	movff	_arpeggiatorRandomizeSkipMenu,___lbmod@divisor
 10408  0083F6  0101               	movlb	1	; () banked
 10409  0083F8  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10410  0083FA  EC89  F049         	call	___lbmod
 10411  0083FE  0100               	movlb	0	; () banked
 10412  008400  6F70               	movwf	??_Function_H_8& (0+255),b
 10413  008402  5170               	movf	??_Function_H_8& (0+255),w,b
 10414  008404  0101               	movlb	1	; () banked
 10415  008406  251B               	addwf	(_arpeggiatorRandomizeSkipMenu+1)& (0+255),w,b
 10416  008408  0100               	movlb	0	; () banked
 10417  00840A  6F64               	movwf	___wmul@multiplier& (0+255),b
 10418  00840C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 10419  00840E  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10420  008410  0E00               	movlw	0
 10421  008412  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10422  008414  0E11               	movlw	17
 10423  008416  6F66               	movwf	___wmul@multiplicand& (0+255),b
 10424  008418  EC32  F04A         	call	___wmul	;wreg free
 10425  00841C  0E9E               	movlw	low _LCD_STRINGS
 10426  00841E  0100               	movlb	0	; () banked
 10427  008420  2564               	addwf	?___wmul& (0+255),w,b
 10428  008422  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10429  008424  0EF3               	movlw	high _LCD_STRINGS
 10430  008426  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 10431  008428  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10432  00842A  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10433  00842E                     l3750:
 10434                           
 10435                           ;menu.c: 1368: }
 10436                           ;menu.c: 1369: lcd_print_once = 1;
 10437  00842E  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10438  008430                     l3748:
 10439  008430  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10440  008432  D7D9               	goto	l3749
 10441                           
 10442                           ;menu.c: 1370: }
 10443                           ;menu.c: 1373: if(arpeggiatorRandomizeSkipMenu.selector == 0) {Function_H_8_1();}
 10444  008434  0101               	movlb	1	; () banked
 10445  008436  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10446  008438  B4D8               	btfsc	status,2,c
 10447                           
 10448                           ; BSR set to: 1
 10449  00843A  EC75  F041         	call	_Function_H_8_1	;wreg free
 10450                           
 10451                           ;menu.c: 1374: if(arpeggiatorRandomizeSkipMenu.selector == 1) {Function_H_8_2();}
 10452  00843E  0101               	movlb	1	; () banked
 10453  008440  051C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10454  008442  A4D8               	btfss	status,2,c
 10455  008444  0012               	return	
 10456                           
 10457                           ; BSR set to: 1
 10458  008446  ECDC  F043         	call	_Function_H_8_2	;wreg free
 10459  00844A  0012               	return	
 10460  00844C                     __end_of_Function_H_8:
 10461                           	opt stack 0
 10462                           tblptru	equ	0xFF8
 10463                           tblptrh	equ	0xFF7
 10464                           tblptrl	equ	0xFF6
 10465                           tablat	equ	0xFF5
 10466                           intcon	equ	0xFF2
 10467                           intcon2	equ	0xFF1
 10468                           postinc0	equ	0xFEE
 10469                           wreg	equ	0xFE8
 10470                           postdec1	equ	0xFE5
 10471                           fsr1l	equ	0xFE1
 10472                           status	equ	0xFD8
 10473                           
 10474 ;; *************** function _Function_H_8_2 *****************
 10475 ;; Defined at:
 10476 ;;		line 1335 in file "menu.c"
 10477 ;; Parameters:    Size  Location     Type
 10478 ;;		None
 10479 ;; Auto vars:     Size  Location     Type
 10480 ;;		None
 10481 ;; Return value:  Size  Location     Type
 10482 ;;                  1    wreg      void 
 10483 ;; Registers used:
 10484 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10485 ;; Tracked objects:
 10486 ;;		On entry : 0/0
 10487 ;;		On exit  : 0/0
 10488 ;;		Unchanged: 0/0
 10489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;Total ram usage:        0 bytes
 10495 ;; Hardware stack levels used:    1
 10496 ;; Hardware stack levels required when called:    9
 10497 ;; This function calls:
 10498 ;;		_Lcd_Print_String
 10499 ;;		_clear_row2
 10500 ;;		_processEncoderBuxton
 10501 ;; This function is called by:
 10502 ;;		_Function_H_8
 10503 ;; This function uses a non-reentrant model
 10504 ;;
 10505                           
 10506                           	psect	text14
 10507  0087B8                     __ptext14:
 10508                           	opt stack 0
 10509  0087B8                     _Function_H_8_2:
 10510                           	opt stack 18
 10511                           
 10512                           ;menu.c: 1337: which_screen = ARPEGGIATOR_SKIP_FIRST_LAST_MENU;
 10513                           
 10514                           ;incstack = 0
 10515  0087B8  0E25               	movlw	37
 10516  0087BA  0100               	movlb	0	; () banked
 10517  0087BC  6FF9               	movwf	_which_screen& (0+255),b
 10518                           
 10519                           ; BSR set to: 0
 10520                           ;menu.c: 1338: lcd_print_once = 0;
 10521  0087BE  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10522                           
 10523                           ; BSR set to: 0
 10524                           ;menu.c: 1339: encoder_click = 0;
 10525  0087C0  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10526                           
 10527                           ;menu.c: 1341: arpeggiatorSkipFirstLastMenu.selector = skipFirstLast;
 10528  0087C2  0E00               	movlw	0
 10529  0087C4  B634               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10530  0087C6  0E01               	movlw	1
 10531  0087C8  0101               	movlb	1	; () banked
 10532  0087CA  6F16               	movwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),b
 10533                           
 10534                           ;menu.c: 1343: while(encoder_click == 0) {
 10535  0087CC  D01F               	goto	l3739
 10536  0087CE                     
 10537                           ;menu.c: 1344: processEncoderBuxton();
 10538                           
 10539                           ; BSR set to: 1
 10540  0087CE  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10541                           
 10542                           ;menu.c: 1345: if (lcd_print_once == 0) {
 10543  0087D2  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10544  0087D4  D01A               	goto	l3743
 10545                           
 10546                           ;menu.c: 1346: if(arpeggiatorSkipFirstLastMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L OFF");}
 10547  0087D6  0101               	movlb	1	; () banked
 10548  0087D8  5116               	movf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10549  0087DA  A4D8               	btfss	status,2,c
 10550  0087DC  D009               	goto	l3742
 10551                           
 10552                           ; BSR set to: 1
 10553  0087DE  EC0A  F04A         	call	_clear_row2	;wreg free
 10554  0087E2  0E3F               	movlw	low STR_66
 10555  0087E4  0100               	movlb	0	; () banked
 10556  0087E6  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10557  0087E8  0EFF               	movlw	high STR_66
 10558  0087EA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10559  0087EC  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10560  0087F0                     l3742:
 10561                           
 10562                           ;menu.c: 1347: if(arpeggiatorSkipFirstLastMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L ON");}
 10563  0087F0  0101               	movlb	1	; () banked
 10564  0087F2  0516               	decf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10565  0087F4  A4D8               	btfss	status,2,c
 10566  0087F6  D009               	goto	l3743
 10567                           
 10568                           ; BSR set to: 1
 10569  0087F8  EC0A  F04A         	call	_clear_row2	;wreg free
 10570  0087FC  0E70               	movlw	low STR_67
 10571  0087FE  0100               	movlb	0	; () banked
 10572  008800  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10573  008802  0EFF               	movlw	high STR_67
 10574  008804  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10575  008806  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10576  00880A                     l3743:
 10577                           
 10578                           ;menu.c: 1348: }
 10579                           ;menu.c: 1349: lcd_print_once = 1;
 10580  00880A  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10581  00880C                     l3739:
 10582  00880C  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10583  00880E  D7DF               	goto	l3740
 10584                           
 10585                           ;menu.c: 1350: }
 10586                           ;menu.c: 1352: skipFirstLast = arpeggiatorSkipFirstLastMenu.selector;
 10587  008810  0101               	movlb	1	; () banked
 10588  008812  A116               	btfss	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),0,b
 10589  008814  D002               	goto	u29350
 10590  008816  8634               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10591  008818  0012               	return	
 10592  00881A                     u29350:
 10593  00881A  9634               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10594  00881C  0012               	return		;funcret
 10595  00881E                     __end_of_Function_H_8_2:
 10596                           	opt stack 0
 10597                           tblptru	equ	0xFF8
 10598                           tblptrh	equ	0xFF7
 10599                           tblptrl	equ	0xFF6
 10600                           tablat	equ	0xFF5
 10601                           intcon	equ	0xFF2
 10602                           intcon2	equ	0xFF1
 10603                           postinc0	equ	0xFEE
 10604                           wreg	equ	0xFE8
 10605                           postdec1	equ	0xFE5
 10606                           fsr1l	equ	0xFE1
 10607                           status	equ	0xFD8
 10608                           
 10609 ;; *************** function _Function_H_8_1 *****************
 10610 ;; Defined at:
 10611 ;;		line 1309 in file "menu.c"
 10612 ;; Parameters:    Size  Location     Type
 10613 ;;		None
 10614 ;; Auto vars:     Size  Location     Type
 10615 ;;		None
 10616 ;; Return value:  Size  Location     Type
 10617 ;;                  1    wreg      void 
 10618 ;; Registers used:
 10619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10620 ;; Tracked objects:
 10621 ;;		On entry : 0/0
 10622 ;;		On exit  : 0/0
 10623 ;;		Unchanged: 0/0
 10624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;Total ram usage:        0 bytes
 10630 ;; Hardware stack levels used:    1
 10631 ;; Hardware stack levels required when called:    9
 10632 ;; This function calls:
 10633 ;;		_Lcd_Print_String
 10634 ;;		_clear_row1
 10635 ;;		_clear_row2
 10636 ;;		_processEncoderBuxton
 10637 ;; This function is called by:
 10638 ;;		_Function_H_8
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           	psect	text15
 10643  0082EA                     __ptext15:
 10644                           	opt stack 0
 10645  0082EA                     _Function_H_8_1:
 10646                           	opt stack 18
 10647                           
 10648                           ;menu.c: 1311: which_screen = ARPEGGIATOR_RANDOMIZE_TYPE_MENU;
 10649                           
 10650                           ;incstack = 0
 10651  0082EA  0E24               	movlw	36
 10652  0082EC  0100               	movlb	0	; () banked
 10653  0082EE  6FF9               	movwf	_which_screen& (0+255),b
 10654                           
 10655                           ; BSR set to: 0
 10656                           ;menu.c: 1312: lcd_print_once = 0;
 10657  0082F0  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10658                           
 10659                           ; BSR set to: 0
 10660                           ;menu.c: 1313: encoder_click = 0;
 10661  0082F2  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10662                           
 10663                           ;menu.c: 1315: arpeggiatorRandomizeTypeMenu.selector = AUTO_RANDOMIZE;
 10664  0082F4  0E00               	movlw	0
 10665  0082F6  B834               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10666  0082F8  0E01               	movlw	1
 10667  0082FA  0101               	movlb	1	; () banked
 10668  0082FC  6F19               	movwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),b
 10669                           
 10670                           ;menu.c: 1317: while(encoder_click == 0) {
 10671  0082FE  D028               	goto	l3730
 10672  008300                     
 10673                           ;menu.c: 1318: processEncoderBuxton();
 10674                           
 10675                           ; BSR set to: 1
 10676  008300  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10677                           
 10678                           ;menu.c: 1319: if (lcd_print_once == 0) {
 10679  008304  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10680  008306  D023               	goto	l3734
 10681                           
 10682                           ;menu.c: 1320: clear_row1();
 10683  008308  EC1E  F04A         	call	_clear_row1	;wreg free
 10684                           
 10685                           ;menu.c: 1321: Lcd_Print_String("Randomize Type:");
 10686  00830C  0E1D               	movlw	low STR_63
 10687  00830E  0100               	movlb	0	; () banked
 10688  008310  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10689  008312  0EFE               	movlw	high STR_63
 10690  008314  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10691  008316  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10692                           
 10693                           ;menu.c: 1324: if(arpeggiatorRandomizeTypeMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE AUTO");}
 10694  00831A  0101               	movlb	1	; () banked
 10695  00831C  5119               	movf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10696  00831E  A4D8               	btfss	status,2,c
 10697  008320  D009               	goto	l3733
 10698                           
 10699                           ; BSR set to: 1
 10700  008322  EC0A  F04A         	call	_clear_row2	;wreg free
 10701  008326  0EA7               	movlw	low STR_64
 10702  008328  0100               	movlb	0	; () banked
 10703  00832A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10704  00832C  0EFE               	movlw	high STR_64
 10705  00832E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10706  008330  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10707  008334                     l3733:
 10708                           
 10709                           ;menu.c: 1325: if(arpeggiatorRandomizeTypeMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE ONCE");}
 10710  008334  0101               	movlb	1	; () banked
 10711  008336  0519               	decf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10712  008338  A4D8               	btfss	status,2,c
 10713  00833A  D009               	goto	l3734
 10714                           
 10715                           ; BSR set to: 1
 10716  00833C  EC0A  F04A         	call	_clear_row2	;wreg free
 10717  008340  0E7A               	movlw	low STR_65
 10718  008342  0100               	movlb	0	; () banked
 10719  008344  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10720  008346  0EFE               	movlw	high STR_65
 10721  008348  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10722  00834A  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10723  00834E                     l3734:
 10724                           
 10725                           ;menu.c: 1326: }
 10726                           ;menu.c: 1327: lcd_print_once = 1;
 10727  00834E  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10728  008350                     l3730:
 10729  008350  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10730  008352  D7D6               	goto	l3731
 10731                           
 10732                           ;menu.c: 1328: }
 10733                           ;menu.c: 1330: AUTO_RANDOMIZE = arpeggiatorRandomizeTypeMenu.selector;
 10734  008354  0101               	movlb	1	; () banked
 10735  008356  A119               	btfss	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),0,b
 10736  008358  D002               	goto	u29290
 10737  00835A  8834               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10738  00835C  0012               	return	
 10739  00835E                     u29290:
 10740  00835E  9834               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10741  008360  0012               	return		;funcret
 10742  008362                     __end_of_Function_H_8_1:
 10743                           	opt stack 0
 10744                           tblptru	equ	0xFF8
 10745                           tblptrh	equ	0xFF7
 10746                           tblptrl	equ	0xFF6
 10747                           tablat	equ	0xFF5
 10748                           intcon	equ	0xFF2
 10749                           intcon2	equ	0xFF1
 10750                           postinc0	equ	0xFEE
 10751                           wreg	equ	0xFE8
 10752                           postdec1	equ	0xFE5
 10753                           fsr1l	equ	0xFE1
 10754                           status	equ	0xFD8
 10755                           
 10756 ;; *************** function _Function_H_7 *****************
 10757 ;; Defined at:
 10758 ;;		line 1276 in file "menu.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;		None
 10761 ;; Auto vars:     Size  Location     Type
 10762 ;;		None
 10763 ;; Return value:  Size  Location     Type
 10764 ;;                  1    wreg      void 
 10765 ;; Registers used:
 10766 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10767 ;; Tracked objects:
 10768 ;;		On entry : 0/0
 10769 ;;		On exit  : 0/0
 10770 ;;		Unchanged: 0/0
 10771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;Total ram usage:        0 bytes
 10777 ;; Hardware stack levels used:    1
 10778 ;; Hardware stack levels required when called:    9
 10779 ;; This function calls:
 10780 ;;		_Lcd_Print_String
 10781 ;;		_clear_row1
 10782 ;;		_clear_row2
 10783 ;;		_processEncoderBuxton
 10784 ;;		_strcpy
 10785 ;; This function is called by:
 10786 ;;		_Function_H
 10787 ;; This function uses a non-reentrant model
 10788 ;;
 10789                           
 10790                           	psect	text16
 10791  006CA0                     __ptext16:
 10792                           	opt stack 0
 10793  006CA0                     _Function_H_7:
 10794                           	opt stack 19
 10795                           
 10796                           ;menu.c: 1278: which_screen = ARPEGGIATOR_UN_LATCH_MODE_MENU;
 10797                           
 10798                           ;incstack = 0
 10799  006CA0  0E22               	movlw	34
 10800  006CA2  0100               	movlb	0	; () banked
 10801  006CA4  6FF9               	movwf	_which_screen& (0+255),b
 10802                           
 10803                           ; BSR set to: 0
 10804                           ;menu.c: 1279: lcd_print_once = 0;
 10805  006CA6  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;menu.c: 1280: encoder_click = 0;
 10809  006CA8  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10810                           
 10811                           ;menu.c: 1282: arpeggiatorUnLatchModeMenu.selector = UN_LATCH_MODE;
 10812  006CAA  0E00               	movlw	0
 10813  006CAC  BE34               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10814  006CAE  0E01               	movlw	1
 10815  006CB0  0101               	movlb	1	; () banked
 10816  006CB2  6F1F               	movwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),b
 10817                           
 10818                           ;menu.c: 1284: while(encoder_click == 0) {
 10819  006CB4  D044               	goto	l3721
 10820  006CB6                     
 10821                           ;menu.c: 1285: processEncoderBuxton();
 10822                           
 10823                           ; BSR set to: 1
 10824  006CB6  EC09  F000         	call	_processEncoderBuxton	;wreg free
 10825                           
 10826                           ;menu.c: 1286: if (lcd_print_once == 0) {
 10827  006CBA  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10828  006CBC  D03F               	goto	l3725
 10829                           
 10830                           ;menu.c: 1287: clear_row1();
 10831  006CBE  EC1E  F04A         	call	_clear_row1	;wreg free
 10832                           
 10833                           ;menu.c: 1288: Lcd_Print_String("Un-latch Mode:");
 10834  006CC2  0E5C               	movlw	low STR_58
 10835  006CC4  0100               	movlb	0	; () banked
 10836  006CC6  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10837  006CC8  0EFE               	movlw	high STR_58
 10838  006CCA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10839  006CCC  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10840                           
 10841                           ;menu.c: 1289: clear_row2();
 10842  006CD0  EC0A  F04A         	call	_clear_row2	;wreg free
 10843                           
 10844                           ;menu.c: 1291: if(arpeggiatorUnLatchModeMenu.selector == 0) {
 10845  006CD4  0101               	movlb	1	; () banked
 10846  006CD6  511F               	movf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10847  006CD8  A4D8               	btfss	status,2,c
 10848  006CDA  D016               	goto	l3724
 10849                           
 10850                           ; BSR set to: 1
 10851                           ;menu.c: 1292: clear_row2();Lcd_Print_String("UNLATCH ALL");
 10852  006CDC  EC0A  F04A         	call	_clear_row2	;wreg free
 10853  006CE0  0E64               	movlw	low STR_59
 10854  006CE2  0100               	movlb	0	; () banked
 10855  006CE4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10856  006CE6  0EFF               	movlw	high STR_59
 10857  006CE8  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10858  006CEA  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10859                           
 10860                           ;menu.c: 1293: DISPLAY_MODE = 1;
 10861  006CEE  0E01               	movlw	1
 10862  006CF0  6E5A               	movwf	_DISPLAY_MODE,c
 10863                           
 10864                           ;menu.c: 1294: strcpy(string_to_display, " ALL");
 10865  006CF2  0EEE               	movlw	low _string_to_display
 10866  006CF4  0100               	movlb	0	; () banked
 10867  006CF6  6F60               	movwf	strcpy@to& (0+255),b
 10868  006CF8  0E01               	movlw	high _string_to_display
 10869  006CFA  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10870  006CFC  0E6B               	movlw	low (STR_59+7)
 10871  006CFE  6F62               	movwf	strcpy@from& (0+255),b
 10872  006D00  0EFF               	movlw	high (STR_59+7)
 10873  006D02  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10874  006D04  EC27  F049         	call	_strcpy	;wreg free
 10875  006D08                     l3724:
 10876                           
 10877                           ;menu.c: 1295: }
 10878                           ;menu.c: 1296: if(arpeggiatorUnLatchModeMenu.selector == 1) {
 10879  006D08  0101               	movlb	1	; () banked
 10880  006D0A  051F               	decf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10881  006D0C  A4D8               	btfss	status,2,c
 10882  006D0E  D016               	goto	l3725
 10883                           
 10884                           ; BSR set to: 1
 10885                           ;menu.c: 1297: clear_row2();Lcd_Print_String("ONE AT A TIME");
 10886  006D10  EC0A  F04A         	call	_clear_row2	;wreg free
 10887  006D14  0EFC               	movlw	low STR_61
 10888  006D16  0100               	movlb	0	; () banked
 10889  006D18  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 10890  006D1A  0EFE               	movlw	high STR_61
 10891  006D1C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10892  006D1E  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 10893                           
 10894                           ;menu.c: 1298: DISPLAY_MODE = 1;
 10895  006D22  0E01               	movlw	1
 10896  006D24  6E5A               	movwf	_DISPLAY_MODE,c
 10897                           
 10898                           ;menu.c: 1299: strcpy(string_to_display, " OnE");
 10899  006D26  0EEE               	movlw	low _string_to_display
 10900  006D28  0100               	movlb	0	; () banked
 10901  006D2A  6F60               	movwf	strcpy@to& (0+255),b
 10902  006D2C  0E01               	movlw	high _string_to_display
 10903  006D2E  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10904  006D30  0EC8               	movlw	low STR_62
 10905  006D32  6F62               	movwf	strcpy@from& (0+255),b
 10906  006D34  0EFF               	movlw	high STR_62
 10907  006D36  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10908  006D38  EC27  F049         	call	_strcpy	;wreg free
 10909  006D3C                     l3725:
 10910                           
 10911                           ;menu.c: 1300: }
 10912                           ;menu.c: 1301: }
 10913                           ;menu.c: 1302: lcd_print_once = 1;
 10914  006D3C  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10915  006D3E                     l3721:
 10916  006D3E  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10917  006D40  D7BA               	goto	l3722
 10918                           
 10919                           ;menu.c: 1303: }
 10920                           ;menu.c: 1305: UN_LATCH_MODE = arpeggiatorUnLatchModeMenu.selector;
 10921  006D42  0101               	movlb	1	; () banked
 10922  006D44  A11F               	btfss	(_arpeggiatorUnLatchModeMenu+2)& (0+255),0,b
 10923  006D46  D002               	goto	u33620
 10924  006D48  8E34               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10925  006D4A  0012               	return	
 10926  006D4C                     u33620:
 10927  006D4C  9E34               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10928  006D4E  0012               	return		;funcret
 10929  006D50                     __end_of_Function_H_7:
 10930                           	opt stack 0
 10931                           tblptru	equ	0xFF8
 10932                           tblptrh	equ	0xFF7
 10933                           tblptrl	equ	0xFF6
 10934                           tablat	equ	0xFF5
 10935                           intcon	equ	0xFF2
 10936                           intcon2	equ	0xFF1
 10937                           postinc0	equ	0xFEE
 10938                           wreg	equ	0xFE8
 10939                           postdec1	equ	0xFE5
 10940                           fsr1l	equ	0xFE1
 10941                           status	equ	0xFD8
 10942                           
 10943 ;; *************** function _Function_H_6 *****************
 10944 ;; Defined at:
 10945 ;;		line 1255 in file "menu.c"
 10946 ;; Parameters:    Size  Location     Type
 10947 ;;		None
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;		None
 10950 ;; Return value:  Size  Location     Type
 10951 ;;                  1    wreg      void 
 10952 ;; Registers used:
 10953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10954 ;; Tracked objects:
 10955 ;;		On entry : 0/0
 10956 ;;		On exit  : 0/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;Total ram usage:        1 bytes
 10964 ;; Hardware stack levels used:    1
 10965 ;; Hardware stack levels required when called:   13
 10966 ;; This function calls:
 10967 ;;		_Function_H_6_1
 10968 ;;		_Function_H_6_2
 10969 ;;		_Lcd_Print_String
 10970 ;;		___lbmod
 10971 ;;		___wmul
 10972 ;;		_clear_row2
 10973 ;;		_processEncoderBuxton
 10974 ;; This function is called by:
 10975 ;;		_Function_H
 10976 ;; This function uses a non-reentrant model
 10977 ;;
 10978                           
 10979                           	psect	text17
 10980  00844C                     __ptext17:
 10981                           	opt stack 0
 10982  00844C                     _Function_H_6:
 10983                           	opt stack 15
 10984                           
 10985                           ;menu.c: 1257: which_screen = ARPEGGIATOR_LATCH_MENU;
 10986                           
 10987                           ;incstack = 0
 10988  00844C  0E1F               	movlw	31
 10989  00844E  0100               	movlb	0	; () banked
 10990  008450  6FF9               	movwf	_which_screen& (0+255),b
 10991                           
 10992                           ; BSR set to: 0
 10993                           ;menu.c: 1258: lcd_print_once = 0;
 10994  008452  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10995                           
 10996                           ; BSR set to: 0
 10997                           ;menu.c: 1259: encoder_click = 0;
 10998  008454  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10999                           
 11000                           ;menu.c: 1261: while(encoder_click == 0) {
 11001  008456  D025               	goto	l3712
 11002  008458                     
 11003                           ;menu.c: 1262: processEncoderBuxton();
 11004                           
 11005                           ; BSR set to: 0
 11006  008458  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11007                           
 11008                           ;menu.c: 1263: if (lcd_print_once == 0) {
 11009  00845C  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11010  00845E  D020               	goto	l3714
 11011                           
 11012                           ;menu.c: 1264: clear_row2();
 11013  008460  EC0A  F04A         	call	_clear_row2	;wreg free
 11014                           
 11015                           ;menu.c: 1265: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLatchMenu.selector % arpeggiator
      +                          LatchMenu.number) + arpeggiatorLatchMenu.address]);
 11016  008464  C126  F060         	movff	_arpeggiatorLatchMenu,___lbmod@divisor
 11017  008468  0101               	movlb	1	; () banked
 11018  00846A  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 11019  00846C  EC89  F049         	call	___lbmod
 11020  008470  0100               	movlb	0	; () banked
 11021  008472  6F88               	movwf	??_Function_H_6& (0+255),b
 11022  008474  5188               	movf	??_Function_H_6& (0+255),w,b
 11023  008476  0101               	movlb	1	; () banked
 11024  008478  2527               	addwf	(_arpeggiatorLatchMenu+1)& (0+255),w,b
 11025  00847A  0100               	movlb	0	; () banked
 11026  00847C  6F64               	movwf	___wmul@multiplier& (0+255),b
 11027  00847E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 11028  008480  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11029  008482  0E00               	movlw	0
 11030  008484  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11031  008486  0E11               	movlw	17
 11032  008488  6F66               	movwf	___wmul@multiplicand& (0+255),b
 11033  00848A  EC32  F04A         	call	___wmul	;wreg free
 11034  00848E  0E9E               	movlw	low _LCD_STRINGS
 11035  008490  0100               	movlb	0	; () banked
 11036  008492  2564               	addwf	?___wmul& (0+255),w,b
 11037  008494  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11038  008496  0EF3               	movlw	high _LCD_STRINGS
 11039  008498  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 11040  00849A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11041  00849C  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 11042  0084A0                     l3714:
 11043                           
 11044                           ;menu.c: 1266: }
 11045                           ;menu.c: 1267: lcd_print_once = 1;
 11046  0084A0  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11047  0084A2                     l3712:
 11048  0084A2  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11049  0084A4  D7D9               	goto	l3713
 11050                           
 11051                           ;menu.c: 1268: }
 11052                           ;menu.c: 1271: if(arpeggiatorLatchMenu.selector == 0) {Function_H_6_1();}
 11053  0084A6  0101               	movlb	1	; () banked
 11054  0084A8  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 11055  0084AA  B4D8               	btfsc	status,2,c
 11056                           
 11057                           ; BSR set to: 1
 11058  0084AC  EC9F  F02F         	call	_Function_H_6_1	;wreg free
 11059                           
 11060                           ;menu.c: 1272: if(arpeggiatorLatchMenu.selector == 1) {Function_H_6_2();}
 11061  0084B0  0101               	movlb	1	; () banked
 11062  0084B2  0528               	decf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 11063  0084B4  A4D8               	btfss	status,2,c
 11064  0084B6  0012               	return	
 11065                           
 11066                           ; BSR set to: 1
 11067  0084B8  EC55  F037         	call	_Function_H_6_2	;wreg free
 11068  0084BC  0012               	return	
 11069  0084BE                     __end_of_Function_H_6:
 11070                           	opt stack 0
 11071                           tblptru	equ	0xFF8
 11072                           tblptrh	equ	0xFF7
 11073                           tblptrl	equ	0xFF6
 11074                           tablat	equ	0xFF5
 11075                           intcon	equ	0xFF2
 11076                           intcon2	equ	0xFF1
 11077                           postinc0	equ	0xFEE
 11078                           wreg	equ	0xFE8
 11079                           postdec1	equ	0xFE5
 11080                           fsr1l	equ	0xFE1
 11081                           status	equ	0xFD8
 11082                           
 11083 ;; *************** function _Function_H_6_2 *****************
 11084 ;; Defined at:
 11085 ;;		line 1224 in file "menu.c"
 11086 ;; Parameters:    Size  Location     Type
 11087 ;;		None
 11088 ;; Auto vars:     Size  Location     Type
 11089 ;;		None
 11090 ;; Return value:  Size  Location     Type
 11091 ;;                  1    wreg      void 
 11092 ;; Registers used:
 11093 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11094 ;; Tracked objects:
 11095 ;;		On entry : 0/0
 11096 ;;		On exit  : 0/0
 11097 ;;		Unchanged: 0/0
 11098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;Total ram usage:        0 bytes
 11104 ;; Hardware stack levels used:    1
 11105 ;; Hardware stack levels required when called:    9
 11106 ;; This function calls:
 11107 ;;		_Lcd_Print_String
 11108 ;;		_clear_row1
 11109 ;;		_clear_row2
 11110 ;;		_processEncoderBuxton
 11111 ;;		_strcpy
 11112 ;; This function is called by:
 11113 ;;		_Function_H_6
 11114 ;; This function uses a non-reentrant model
 11115 ;;
 11116                           
 11117                           	psect	text18
 11118  006EAA                     __ptext18:
 11119                           	opt stack 0
 11120  006EAA                     _Function_H_6_2:
 11121                           	opt stack 18
 11122                           
 11123                           ;menu.c: 1226: which_screen = ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU;
 11124                           
 11125                           ;incstack = 0
 11126  006EAA  0E21               	movlw	33
 11127  006EAC  0100               	movlb	0	; () banked
 11128  006EAE  6FF9               	movwf	_which_screen& (0+255),b
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;menu.c: 1227: lcd_print_once = 0;
 11132  006EB0  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11133                           
 11134                           ; BSR set to: 0
 11135                           ;menu.c: 1228: encoder_click = 0;
 11136  006EB2  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11137                           
 11138                           ;menu.c: 1230: arpeggiatorAutoLatchOnOffMenu.selector = AUTO_LATCH;
 11139  006EB4  0E00               	movlw	0
 11140  006EB6  BC34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11141  006EB8  0E01               	movlw	1
 11142  006EBA  0101               	movlb	1	; () banked
 11143  006EBC  6F22               	movwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),b
 11144                           
 11145                           ;menu.c: 1232: while(encoder_click == 0) {
 11146  006EBE  D042               	goto	l3703
 11147  006EC0                     
 11148                           ;menu.c: 1233: processEncoderBuxton();
 11149                           
 11150                           ; BSR set to: 1
 11151  006EC0  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11152                           
 11153                           ;menu.c: 1234: if (lcd_print_once == 0) {
 11154  006EC4  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11155  006EC6  D03D               	goto	l3707
 11156                           
 11157                           ;menu.c: 1235: clear_row1();Lcd_Print_String("AutoLatch ON/OFF");
 11158  006EC8  EC1E  F04A         	call	_clear_row1	;wreg free
 11159  006ECC  0EDB               	movlw	low STR_53
 11160  006ECE  0100               	movlb	0	; () banked
 11161  006ED0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11162  006ED2  0EFD               	movlw	high STR_53
 11163  006ED4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11164  006ED6  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 11165                           
 11166                           ;menu.c: 1236: if(arpeggiatorAutoLatchOnOffMenu.selector == 0) {
 11167  006EDA  0101               	movlb	1	; () banked
 11168  006EDC  5122               	movf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11169  006EDE  A4D8               	btfss	status,2,c
 11170  006EE0  D016               	goto	l3706
 11171                           
 11172                           ; BSR set to: 1
 11173                           ;menu.c: 1237: clear_row2();Lcd_Print_String("Auto Latch OFF");
 11174  006EE2  EC0A  F04A         	call	_clear_row2	;wreg free
 11175  006EE6  0E89               	movlw	low STR_54
 11176  006EE8  0100               	movlb	0	; () banked
 11177  006EEA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11178  006EEC  0EFE               	movlw	high STR_54
 11179  006EEE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11180  006EF0  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 11181                           
 11182                           ;menu.c: 1238: DISPLAY_MODE = 1;
 11183  006EF4  0E01               	movlw	1
 11184  006EF6  6E5A               	movwf	_DISPLAY_MODE,c
 11185                           
 11186                           ;menu.c: 1239: strcpy(string_to_display, " oFF");
 11187  006EF8  0EEE               	movlw	low _string_to_display
 11188  006EFA  0100               	movlb	0	; () banked
 11189  006EFC  6F60               	movwf	strcpy@to& (0+255),b
 11190  006EFE  0E01               	movlw	high _string_to_display
 11191  006F00  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11192  006F02  0EDC               	movlw	low STR_5
 11193  006F04  6F62               	movwf	strcpy@from& (0+255),b
 11194  006F06  0EFF               	movlw	high STR_5
 11195  006F08  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11196  006F0A  EC27  F049         	call	_strcpy	;wreg free
 11197  006F0E                     l3706:
 11198                           
 11199                           ;menu.c: 1240: }
 11200                           ;menu.c: 1241: if(arpeggiatorAutoLatchOnOffMenu.selector == 1) {
 11201  006F0E  0101               	movlb	1	; () banked
 11202  006F10  0522               	decf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11203  006F12  A4D8               	btfss	status,2,c
 11204  006F14  D016               	goto	l3707
 11205                           
 11206                           ; BSR set to: 1
 11207                           ;menu.c: 1242: clear_row2();Lcd_Print_String("Auto Latch ON");
 11208  006F16  EC0A  F04A         	call	_clear_row2	;wreg free
 11209  006F1A  0E0A               	movlw	low STR_56
 11210  006F1C  0100               	movlb	0	; () banked
 11211  006F1E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11212  006F20  0EFF               	movlw	high STR_56
 11213  006F22  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11214  006F24  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 11215                           
 11216                           ;menu.c: 1243: DISPLAY_MODE = 1;
 11217  006F28  0E01               	movlw	1
 11218  006F2A  6E5A               	movwf	_DISPLAY_MODE,c
 11219                           
 11220                           ;menu.c: 1244: strcpy(string_to_display, "Auto");
 11221  006F2C  0EEE               	movlw	low _string_to_display
 11222  006F2E  0100               	movlb	0	; () banked
 11223  006F30  6F60               	movwf	strcpy@to& (0+255),b
 11224  006F32  0E01               	movlw	high _string_to_display
 11225  006F34  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11226  006F36  0EF0               	movlw	low STR_4
 11227  006F38  6F62               	movwf	strcpy@from& (0+255),b
 11228  006F3A  0EFF               	movlw	high STR_4
 11229  006F3C  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11230  006F3E  EC27  F049         	call	_strcpy	;wreg free
 11231  006F42                     l3707:
 11232                           
 11233                           ;menu.c: 1245: }
 11234                           ;menu.c: 1246: }
 11235                           ;menu.c: 1247: lcd_print_once = 1;
 11236  006F42  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11237  006F44                     l3703:
 11238  006F44  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11239  006F46  D7BC               	goto	l3704
 11240                           
 11241                           ;menu.c: 1248: }
 11242                           ;menu.c: 1250: AUTO_LATCH = arpeggiatorAutoLatchOnOffMenu.selector;
 11243  006F48  0101               	movlb	1	; () banked
 11244  006F4A  A122               	btfss	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),0,b
 11245  006F4C  D002               	goto	u29230
 11246  006F4E  8C34               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11247  006F50  0012               	return	
 11248  006F52                     u29230:
 11249  006F52  9C34               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11250  006F54  0012               	return		;funcret
 11251  006F56                     __end_of_Function_H_6_2:
 11252                           	opt stack 0
 11253                           tblptru	equ	0xFF8
 11254                           tblptrh	equ	0xFF7
 11255                           tblptrl	equ	0xFF6
 11256                           tablat	equ	0xFF5
 11257                           intcon	equ	0xFF2
 11258                           intcon2	equ	0xFF1
 11259                           postinc0	equ	0xFEE
 11260                           wreg	equ	0xFE8
 11261                           postdec1	equ	0xFE5
 11262                           fsr1l	equ	0xFE1
 11263                           status	equ	0xFD8
 11264                           
 11265 ;; *************** function _Function_H_6_1 *****************
 11266 ;; Defined at:
 11267 ;;		line 1170 in file "menu.c"
 11268 ;; Parameters:    Size  Location     Type
 11269 ;;		None
 11270 ;; Auto vars:     Size  Location     Type
 11271 ;;		None
 11272 ;; Return value:  Size  Location     Type
 11273 ;;                  1    wreg      void 
 11274 ;; Registers used:
 11275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11276 ;; Tracked objects:
 11277 ;;		On entry : 0/0
 11278 ;;		On exit  : 0/0
 11279 ;;		Unchanged: 0/0
 11280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;Total ram usage:        0 bytes
 11286 ;; Hardware stack levels used:    1
 11287 ;; Hardware stack levels required when called:   12
 11288 ;; This function calls:
 11289 ;;		_Lcd_Print_String
 11290 ;;		_clear_row1
 11291 ;;		_clear_row2
 11292 ;;		_playThisNote
 11293 ;;		_playThisNote8
 11294 ;;		_playThisNotePentatonic
 11295 ;;		_processEncoderBuxton
 11296 ;;		_strcpy
 11297 ;; This function is called by:
 11298 ;;		_Function_H_6
 11299 ;; This function uses a non-reentrant model
 11300 ;;
 11301                           
 11302                           	psect	text19
 11303  005F3E                     __ptext19:
 11304                           	opt stack 0
 11305  005F3E                     _Function_H_6_1:
 11306                           	opt stack 15
 11307                           
 11308                           ;menu.c: 1172: which_screen = ARPEGGIATOR_LATCH_ON_OFF_MENU;
 11309                           
 11310                           ;incstack = 0
 11311  005F3E  0E20               	movlw	32
 11312  005F40  0100               	movlb	0	; () banked
 11313  005F42  6FF9               	movwf	_which_screen& (0+255),b
 11314                           
 11315                           ; BSR set to: 0
 11316                           ;menu.c: 1173: lcd_print_once = 0;
 11317  005F44  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11318                           
 11319                           ; BSR set to: 0
 11320                           ;menu.c: 1174: encoder_click = 0;
 11321  005F46  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11322                           
 11323                           ;menu.c: 1176: arpeggiatorLatchOnOffMenu.selector = LATCH;
 11324  005F48  0E00               	movlw	0
 11325  005F4A  B035               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11326  005F4C  0E01               	movlw	1
 11327  005F4E  0101               	movlb	1	; () banked
 11328  005F50  6F25               	movwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),b
 11329                           
 11330                           ;menu.c: 1178: while(encoder_click == 0) {
 11331  005F52  D028               	goto	l3680
 11332  005F54                     
 11333                           ;menu.c: 1179: processEncoderBuxton();
 11334                           
 11335                           ; BSR set to: 1
 11336  005F54  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11337                           
 11338                           ;menu.c: 1180: if (lcd_print_once == 0) {
 11339  005F58  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11340  005F5A  D023               	goto	l3684
 11341                           
 11342                           ;menu.c: 1181: clear_row1();Lcd_Print_String("Latch ON/OFF");
 11343  005F5C  EC1E  F04A         	call	_clear_row1	;wreg free
 11344  005F60  0EDF               	movlw	low (STR_53+4)
 11345  005F62  0100               	movlb	0	; () banked
 11346  005F64  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11347  005F66  0EFD               	movlw	high (STR_53+4)
 11348  005F68  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11349  005F6A  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 11350                           
 11351                           ;menu.c: 1182: if(arpeggiatorLatchOnOffMenu.selector == 0) {
 11352  005F6E  0101               	movlb	1	; () banked
 11353  005F70  5125               	movf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11354  005F72  A4D8               	btfss	status,2,c
 11355  005F74  D009               	goto	l3683
 11356                           
 11357                           ; BSR set to: 1
 11358                           ;menu.c: 1183: clear_row2();
 11359  005F76  EC0A  F04A         	call	_clear_row2	;wreg free
 11360                           
 11361                           ;menu.c: 1184: Lcd_Print_String("Latch OFF");
 11362  005F7A  0E8E               	movlw	low (STR_54+5)
 11363  005F7C  0100               	movlb	0	; () banked
 11364  005F7E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11365  005F80  0EFE               	movlw	high (STR_54+5)
 11366  005F82  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11367  005F84  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 11368  005F88                     l3683:
 11369                           
 11370                           ;menu.c: 1185: }
 11371                           ;menu.c: 1186: if(arpeggiatorLatchOnOffMenu.selector == 1) {
 11372  005F88  0101               	movlb	1	; () banked
 11373  005F8A  0525               	decf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11374  005F8C  A4D8               	btfss	status,2,c
 11375  005F8E  D009               	goto	l3684
 11376                           
 11377                           ; BSR set to: 1
 11378                           ;menu.c: 1187: clear_row2();
 11379  005F90  EC0A  F04A         	call	_clear_row2	;wreg free
 11380                           
 11381                           ;menu.c: 1188: Lcd_Print_String("Latch ON");
 11382  005F94  0E0F               	movlw	low (STR_56+5)
 11383  005F96  0100               	movlb	0	; () banked
 11384  005F98  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11385  005F9A  0EFF               	movlw	high (STR_56+5)
 11386  005F9C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11387  005F9E  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 11388  005FA2                     l3684:
 11389                           
 11390                           ;menu.c: 1189: }
 11391                           ;menu.c: 1190: }
 11392                           ;menu.c: 1191: lcd_print_once = 1;
 11393  005FA2  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11394  005FA4                     l3680:
 11395  005FA4  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11396  005FA6  D7D6               	goto	l3681
 11397                           
 11398                           ;menu.c: 1192: }
 11399                           ;menu.c: 1194: LATCH = arpeggiatorLatchOnOffMenu.selector;
 11400  005FA8  0101               	movlb	1	; () banked
 11401  005FAA  A125               	btfss	(_arpeggiatorLatchOnOffMenu+2)& (0+255),0,b
 11402  005FAC  D002               	goto	u29000
 11403  005FAE  8035               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 11404  005FB0  D001               	goto	u29015
 11405  005FB2                     u29000:
 11406  005FB2  9035               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 11407  005FB4                     u29015:
 11408                           
 11409                           ;menu.c: 1196: if(LATCH == 1){
 11410  005FB4  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 11411  005FB6  D00E               	goto	l3686
 11412                           
 11413                           ;menu.c: 1197: latch_was_pressed = 1;
 11414  005FB8  8A34               	bsf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 11415                           
 11416                           ;menu.c: 1198: DISPLAY_MODE = 1;
 11417  005FBA  0E01               	movlw	1
 11418  005FBC  6E5A               	movwf	_DISPLAY_MODE,c
 11419                           
 11420                           ;menu.c: 1199: strcpy(string_to_display, "HoLd");
 11421  005FBE  0EEE               	movlw	low _string_to_display
 11422  005FC0  0100               	movlb	0	; () banked
 11423  005FC2  6F60               	movwf	strcpy@to& (0+255),b
 11424  005FC4  0E01               	movlw	high _string_to_display
 11425  005FC6  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11426  005FC8  0EE6               	movlw	low STR_1
 11427  005FCA  6F62               	movwf	strcpy@from& (0+255),b
 11428  005FCC  0EFF               	movlw	high STR_1
 11429  005FCE  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11430  005FD0  EC27  F049         	call	_strcpy	;wreg free
 11431  005FD4                     l3686:
 11432                           
 11433                           ;menu.c: 1200: }
 11434                           ;menu.c: 1202: if(LATCH == 0){
 11435  005FD4  B035               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11436  005FD6  0012               	return	
 11437                           
 11438                           ;menu.c: 1203: DISPLAY_MODE = 1;
 11439  005FD8  0E01               	movlw	1
 11440  005FDA  6E5A               	movwf	_DISPLAY_MODE,c
 11441                           
 11442                           ;menu.c: 1204: strcpy(string_to_display, " oFF");
 11443  005FDC  0EEE               	movlw	low _string_to_display
 11444  005FDE  0100               	movlb	0	; () banked
 11445  005FE0  6F60               	movwf	strcpy@to& (0+255),b
 11446  005FE2  0E01               	movlw	high _string_to_display
 11447  005FE4  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11448  005FE6  0EDC               	movlw	low STR_5
 11449  005FE8  6F62               	movwf	strcpy@from& (0+255),b
 11450  005FEA  0EFF               	movlw	high STR_5
 11451  005FEC  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11452  005FEE  EC27  F049         	call	_strcpy	;wreg free
 11453                           
 11454                           ;menu.c: 1205: ON_OFF = 0;
 11455  005FF2  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 11456                           
 11457                           ;menu.c: 1210: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_MO
      +                          DE == SEVENTH) {
 11458  005FF4  0100               	movlb	0	; () banked
 11459  005FF6  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 11460  005FF8  B4D8               	btfsc	status,2,c
 11461  005FFA  D008               	goto	u29060
 11462                           
 11463                           ; BSR set to: 0
 11464  005FFC  0E06               	movlw	6
 11465  005FFE  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 11466  006000  B4D8               	btfsc	status,2,c
 11467  006002  D004               	goto	u29060
 11468                           
 11469                           ; BSR set to: 0
 11470  006004  0E09               	movlw	9
 11471  006006  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 11472  006008  A4D8               	btfss	status,2,c
 11473  00600A  D006               	goto	l3691
 11474  00600C                     u29060:
 11475                           
 11476                           ; BSR set to: 0
 11477                           ;menu.c: 1211: if(NUM_NOTES_PRESSED > 0) {playThisNote(0);}
 11478                           
 11479                           ; BSR set to: 0
 11480  00600C  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 11481  00600E  B4D8               	btfsc	status,2,c
 11482  006010  D003               	goto	l3691
 11483                           
 11484                           ; BSR set to: 0
 11485  006012  0E00               	movlw	0
 11486  006014  ECF7  F031         	call	_playThisNote
 11487  006018                     l3691:
 11488                           
 11489                           ;menu.c: 1212: }
 11490                           ;menu.c: 1214: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_MOD
      +                          E == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_TRI
      +                          AD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MINO
      +                          R
 11491  006018  0100               	movlb	0	; () banked
 11492  00601A  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 11493  00601C  B4D8               	btfsc	status,2,c
 11494  00601E  D018               	goto	u29140
 11495                           
 11496                           ; BSR set to: 0
 11497  006020  0E02               	movlw	2
 11498  006022  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 11499  006024  B4D8               	btfsc	status,2,c
 11500  006026  D014               	goto	u29140
 11501                           
 11502                           ; BSR set to: 0
 11503  006028  0E03               	movlw	3
 11504  00602A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 11505  00602C  B4D8               	btfsc	status,2,c
 11506  00602E  D010               	goto	u29140
 11507                           
 11508                           ; BSR set to: 0
 11509  006030  0E07               	movlw	7
 11510  006032  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 11511  006034  B4D8               	btfsc	status,2,c
 11512  006036  D00C               	goto	u29140
 11513                           
 11514                           ; BSR set to: 0
 11515  006038  0E08               	movlw	8
 11516  00603A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 11517  00603C  B4D8               	btfsc	status,2,c
 11518  00603E  D008               	goto	u29140
 11519                           
 11520                           ; BSR set to: 0
 11521  006040  0E0A               	movlw	10
 11522  006042  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 11523  006044  B4D8               	btfsc	status,2,c
 11524  006046  D004               	goto	u29140
 11525                           
 11526                           ; BSR set to: 0
 11527  006048  0E0B               	movlw	11
 11528  00604A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 11529  00604C  A4D8               	btfss	status,2,c
 11530  00604E  D008               	goto	l3695
 11531  006050                     u29140:
 11532                           
 11533                           ; BSR set to: 0
 11534                           ;menu.c: 1215: if(NUM_NOTES_PRESSED > 0) {playThisNote8(0,0);}
 11535                           
 11536                           ; BSR set to: 0
 11537  006050  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 11538  006052  B4D8               	btfsc	status,2,c
 11539  006054  D005               	goto	l3695
 11540                           
 11541                           ; BSR set to: 0
 11542  006056  0E00               	movlw	0
 11543  006058  6F7F               	movwf	playThisNote8@index& (0+255),b
 11544  00605A  0E00               	movlw	0
 11545  00605C  EC6A  F015         	call	_playThisNote8
 11546  006060                     l3695:
 11547                           
 11548                           ;menu.c: 1216: }
 11549                           ;menu.c: 1218: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC_M
      +                          INOR)){
 11550  006060  0E04               	movlw	4
 11551  006062  0100               	movlb	0	; () banked
 11552  006064  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 11553  006066  B4D8               	btfsc	status,2,c
 11554  006068  D004               	goto	u29170
 11555                           
 11556                           ; BSR set to: 0
 11557  00606A  0E05               	movlw	5
 11558  00606C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 11559  00606E  A4D8               	btfss	status,2,c
 11560  006070  0012               	return	
 11561  006072                     u29170:
 11562                           
 11563                           ; BSR set to: 0
 11564                           ;menu.c: 1219: if(NUM_NOTES_PRESSED > 0) {playThisNotePentatonic(0,0);}
 11565                           
 11566                           ; BSR set to: 0
 11567  006072  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 11568  006074  B4D8               	btfsc	status,2,c
 11569  006076  0012               	return	
 11570                           
 11571                           ; BSR set to: 0
 11572  006078  0E00               	movlw	0
 11573  00607A  6F77               	movwf	playThisNotePentatonic@index& (0+255),b
 11574  00607C  0E00               	movlw	0
 11575  00607E  ECB3  F029         	call	_playThisNotePentatonic
 11576  006082  0012               	return	
 11577  006084                     __end_of_Function_H_6_1:
 11578                           	opt stack 0
 11579                           tblptru	equ	0xFF8
 11580                           tblptrh	equ	0xFF7
 11581                           tblptrl	equ	0xFF6
 11582                           tablat	equ	0xFF5
 11583                           intcon	equ	0xFF2
 11584                           intcon2	equ	0xFF1
 11585                           postinc0	equ	0xFEE
 11586                           wreg	equ	0xFE8
 11587                           postdec1	equ	0xFE5
 11588                           fsr1l	equ	0xFE1
 11589                           status	equ	0xFD8
 11590                           
 11591 ;; *************** function _Function_H_5 *****************
 11592 ;; Defined at:
 11593 ;;		line 1137 in file "menu.c"
 11594 ;; Parameters:    Size  Location     Type
 11595 ;;		None
 11596 ;; Auto vars:     Size  Location     Type
 11597 ;;  i               1   17[BANK0 ] unsigned char 
 11598 ;; Return value:  Size  Location     Type
 11599 ;;                  1    wreg      void 
 11600 ;; Registers used:
 11601 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11602 ;; Tracked objects:
 11603 ;;		On entry : 0/0
 11604 ;;		On exit  : 0/0
 11605 ;;		Unchanged: 0/0
 11606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11608 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11610 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11611 ;;Total ram usage:        2 bytes
 11612 ;; Hardware stack levels used:    1
 11613 ;; Hardware stack levels required when called:    9
 11614 ;; This function calls:
 11615 ;;		_Lcd_Print_String
 11616 ;;		___lbmod
 11617 ;;		___wmul
 11618 ;;		_clear_row1
 11619 ;;		_clear_row2
 11620 ;;		_processEncoderBuxton
 11621 ;; This function is called by:
 11622 ;;		_Function_H
 11623 ;; This function uses a non-reentrant model
 11624 ;;
 11625                           
 11626                           	psect	text20
 11627  006D50                     __ptext20:
 11628                           	opt stack 0
 11629  006D50                     _Function_H_5:
 11630                           	opt stack 19
 11631                           
 11632                           ;menu.c: 1139: which_screen = ARPEGGIATOR_NOTE_LENGTH_MENU,
 11633                           ;menu.c: 1140: lcd_print_once = 0;
 11634                           
 11635                           ;incstack = 0
 11636  006D50  0E1E               	movlw	30
 11637  006D52  0100               	movlb	0	; () banked
 11638  006D54  6FF9               	movwf	_which_screen& (0+255),b
 11639                           
 11640                           ; BSR set to: 0
 11641  006D56  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11642                           
 11643                           ; BSR set to: 0
 11644                           ;menu.c: 1141: encoder_click = 0;
 11645  006D58  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11646                           
 11647                           ;menu.c: 1144: for(unsigned char i = 0; i < 12; i++) {
 11648  006D5A  0E00               	movlw	0
 11649  006D5C  6F71               	movwf	Function_H_5@i& (0+255),b
 11650  006D5E                     l21317:
 11651                           
 11652                           ; BSR set to: 0
 11653  006D5E  0E0B               	movlw	11
 11654  006D60  6571               	cpfsgt	Function_H_5@i& (0+255),b
 11655  006D62  D001               	goto	l3670
 11656  006D64  D03D               	goto	l3673
 11657  006D66                     l3670:
 11658                           
 11659                           ; BSR set to: 0
 11660                           ;menu.c: 1145: if(NOTE_LENGTH_PULSES_ARRAY[i] == NOTE_LENGTH_PULSES) {
 11661                           
 11662                           ; BSR set to: 0
 11663  006D66  5171               	movf	Function_H_5@i& (0+255),w,b
 11664  006D68  0D01               	mullw	1
 11665  006D6A  0EDC               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11666  006D6C  24F3               	addwf	prodl,w,c
 11667  006D6E  6ED9               	movwf	fsr2l,c
 11668  006D70  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11669  006D72  20F4               	addwfc	prodh,w,c
 11670  006D74  6EDA               	movwf	fsr2h,c
 11671  006D76  51F7               	movf	_NOTE_LENGTH_PULSES& (0+255),w,b
 11672  006D78  18DE               	xorwf	postinc2,w,c
 11673  006D7A  B4D8               	btfsc	status,2,c
 11674                           
 11675                           ; BSR set to: 0
 11676                           ;menu.c: 1147: arpeggiatorNoteLengthMenu.selector = i;
 11677  006D7C  C071  F12B         	movff	Function_H_5@i,_arpeggiatorNoteLengthMenu+2
 11678                           
 11679                           ; BSR set to: 0
 11680                           
 11681                           ; BSR set to: 0
 11682  006D80  2B71               	incf	Function_H_5@i& (0+255),f,b
 11683  006D82  D7ED               	goto	l21317
 11684  006D84                     
 11685                           ;menu.c: 1154: processEncoderBuxton();
 11686                           
 11687                           ; BSR set to: 0
 11688  006D84  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11689                           
 11690                           ;menu.c: 1155: if (lcd_print_once == 0) {
 11691  006D88  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11692  006D8A  D029               	goto	l3675
 11693                           
 11694                           ;menu.c: 1156: clear_row1();
 11695  006D8C  EC1E  F04A         	call	_clear_row1	;wreg free
 11696                           
 11697                           ;menu.c: 1157: Lcd_Print_String("Note Length:");
 11698  006D90  0E32               	movlw	low STR_47
 11699  006D92  0100               	movlb	0	; () banked
 11700  006D94  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11701  006D96  0EFF               	movlw	high STR_47
 11702  006D98  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11703  006D9A  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 11704                           
 11705                           ;menu.c: 1158: clear_row2();
 11706  006D9E  EC0A  F04A         	call	_clear_row2	;wreg free
 11707                           
 11708                           ;menu.c: 1159: Lcd_Print_String(LCD_STRINGS[(arpeggiatorNoteLengthMenu.selector % arpegg
      +                          iatorNoteLengthMenu.number) + arpeggiatorNoteLengthMenu.address]);
 11709  006DA2  C129  F060         	movff	_arpeggiatorNoteLengthMenu,___lbmod@divisor
 11710  006DA6  0101               	movlb	1	; () banked
 11711  006DA8  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11712  006DAA  EC89  F049         	call	___lbmod
 11713  006DAE  0100               	movlb	0	; () banked
 11714  006DB0  6F70               	movwf	??_Function_H_5& (0+255),b
 11715  006DB2  5170               	movf	??_Function_H_5& (0+255),w,b
 11716  006DB4  0101               	movlb	1	; () banked
 11717  006DB6  252A               	addwf	(_arpeggiatorNoteLengthMenu+1)& (0+255),w,b
 11718  006DB8  0100               	movlb	0	; () banked
 11719  006DBA  6F64               	movwf	___wmul@multiplier& (0+255),b
 11720  006DBC  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 11721  006DBE  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11722  006DC0  0E00               	movlw	0
 11723  006DC2  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11724  006DC4  0E11               	movlw	17
 11725  006DC6  6F66               	movwf	___wmul@multiplicand& (0+255),b
 11726  006DC8  EC32  F04A         	call	___wmul	;wreg free
 11727  006DCC  0E9E               	movlw	low _LCD_STRINGS
 11728  006DCE  0100               	movlb	0	; () banked
 11729  006DD0  2564               	addwf	?___wmul& (0+255),w,b
 11730  006DD2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11731  006DD4  0EF3               	movlw	high _LCD_STRINGS
 11732  006DD6  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 11733  006DD8  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11734  006DDA  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 11735  006DDE                     l3675:
 11736                           
 11737                           ;menu.c: 1160: }
 11738                           ;menu.c: 1161: lcd_print_once = 1;
 11739  006DDE  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11740  006DE0                     l3673:
 11741  006DE0  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11742  006DE2  D7D0               	goto	l3674
 11743                           
 11744                           ;menu.c: 1162: }
 11745                           ;menu.c: 1165: NOTE_LENGTH_PULSES = NOTE_LENGTH_PULSES_ARRAY[arpeggiatorNoteLengthMenu.s
      +                          elector];
 11746  006DE4  0101               	movlb	1	; () banked
 11747  006DE6  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11748  006DE8  0D01               	mullw	1
 11749  006DEA  0EDC               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11750  006DEC  24F3               	addwf	prodl,w,c
 11751  006DEE  6ED9               	movwf	fsr2l,c
 11752  006DF0  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11753  006DF2  20F4               	addwfc	prodh,w,c
 11754  006DF4  6EDA               	movwf	fsr2h,c
 11755  006DF6  50DF               	movf	indf2,w,c
 11756  006DF8  0100               	movlb	0	; () banked
 11757  006DFA  6FF7               	movwf	_NOTE_LENGTH_PULSES& (0+255),b
 11758                           
 11759                           ; BSR set to: 0
 11760  006DFC  0012               	return		;funcret
 11761  006DFE                     __end_of_Function_H_5:
 11762                           	opt stack 0
 11763                           tblptru	equ	0xFF8
 11764                           tblptrh	equ	0xFF7
 11765                           tblptrl	equ	0xFF6
 11766                           tablat	equ	0xFF5
 11767                           prodh	equ	0xFF4
 11768                           prodl	equ	0xFF3
 11769                           intcon	equ	0xFF2
 11770                           intcon2	equ	0xFF1
 11771                           postinc0	equ	0xFEE
 11772                           wreg	equ	0xFE8
 11773                           postdec1	equ	0xFE5
 11774                           fsr1l	equ	0xFE1
 11775                           indf2	equ	0xFDF
 11776                           postinc2	equ	0xFDE
 11777                           fsr2h	equ	0xFDA
 11778                           fsr2l	equ	0xFD9
 11779                           status	equ	0xFD8
 11780                           
 11781 ;; *************** function _Function_H_4 *****************
 11782 ;; Defined at:
 11783 ;;		line 1103 in file "menu.c"
 11784 ;; Parameters:    Size  Location     Type
 11785 ;;		None
 11786 ;; Auto vars:     Size  Location     Type
 11787 ;;		None
 11788 ;; Return value:  Size  Location     Type
 11789 ;;                  1    wreg      void 
 11790 ;; Registers used:
 11791 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11792 ;; Tracked objects:
 11793 ;;		On entry : 0/0
 11794 ;;		On exit  : 0/0
 11795 ;;		Unchanged: 0/0
 11796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11800 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11801 ;;Total ram usage:        1 bytes
 11802 ;; Hardware stack levels used:    1
 11803 ;; Hardware stack levels required when called:    9
 11804 ;; This function calls:
 11805 ;;		_Lcd_Print_String
 11806 ;;		___lbmod
 11807 ;;		___wmul
 11808 ;;		_clear_row1
 11809 ;;		_clear_row2
 11810 ;;		_processEncoderBuxton
 11811 ;;		_setupArpeggio
 11812 ;; This function is called by:
 11813 ;;		_Function_H
 11814 ;; This function uses a non-reentrant model
 11815 ;;
 11816                           
 11817                           	psect	text21
 11818  006BE8                     __ptext21:
 11819                           	opt stack 0
 11820  006BE8                     _Function_H_4:
 11821                           	opt stack 19
 11822                           
 11823                           ;menu.c: 1105: which_screen = ARPEGGIATOR_ARPEGGIO_TYPE_MENU,
 11824                           ;menu.c: 1106: lcd_print_once = 0;
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;incstack = 0
 11828  006BE8  0E1D               	movlw	29
 11829  006BEA  0100               	movlb	0	; () banked
 11830  006BEC  6FF9               	movwf	_which_screen& (0+255),b
 11831                           
 11832                           ; BSR set to: 0
 11833  006BEE  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11834                           
 11835                           ; BSR set to: 0
 11836                           ;menu.c: 1107: encoder_click = 0;
 11837  006BF0  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11838                           
 11839                           ; BSR set to: 0
 11840                           ;menu.c: 1109: arpeggiatorTypeMenu.selector = ARPEGGIO_TYPE;
 11841  006BF2  C0EA  F12E         	movff	_ARPEGGIO_TYPE,_arpeggiatorTypeMenu+2
 11842                           
 11843                           ;menu.c: 1111: while(encoder_click == 0) {
 11844  006BF6  D02E               	goto	l3657
 11845  006BF8                     
 11846                           ;menu.c: 1112: processEncoderBuxton();
 11847                           
 11848                           ; BSR set to: 0
 11849  006BF8  EC09  F000         	call	_processEncoderBuxton	;wreg free
 11850                           
 11851                           ;menu.c: 1113: if (lcd_print_once == 0) {
 11852  006BFC  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11853  006BFE  D029               	goto	l3659
 11854                           
 11855                           ;menu.c: 1114: clear_row1();
 11856  006C00  EC1E  F04A         	call	_clear_row1	;wreg free
 11857                           
 11858                           ;menu.c: 1115: Lcd_Print_String("Select Arpeggio:");
 11859  006C04  0EB9               	movlw	low STR_46
 11860  006C06  0100               	movlb	0	; () banked
 11861  006C08  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11862  006C0A  0EFD               	movlw	high STR_46
 11863  006C0C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11864  006C0E  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 11865                           
 11866                           ;menu.c: 1116: clear_row2();
 11867  006C12  EC0A  F04A         	call	_clear_row2	;wreg free
 11868                           
 11869                           ;menu.c: 1117: Lcd_Print_String(LCD_STRINGS[(arpeggiatorTypeMenu.selector % arpeggiatorT
      +                          ypeMenu.number) + arpeggiatorTypeMenu.address]);
 11870  006C16  C12C  F060         	movff	_arpeggiatorTypeMenu,___lbmod@divisor
 11871  006C1A  0101               	movlb	1	; () banked
 11872  006C1C  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 11873  006C1E  EC89  F049         	call	___lbmod
 11874  006C22  0100               	movlb	0	; () banked
 11875  006C24  6F77               	movwf	??_Function_H_4& (0+255),b
 11876  006C26  5177               	movf	??_Function_H_4& (0+255),w,b
 11877  006C28  0101               	movlb	1	; () banked
 11878  006C2A  252D               	addwf	(_arpeggiatorTypeMenu+1)& (0+255),w,b
 11879  006C2C  0100               	movlb	0	; () banked
 11880  006C2E  6F64               	movwf	___wmul@multiplier& (0+255),b
 11881  006C30  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 11882  006C32  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11883  006C34  0E00               	movlw	0
 11884  006C36  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11885  006C38  0E11               	movlw	17
 11886  006C3A  6F66               	movwf	___wmul@multiplicand& (0+255),b
 11887  006C3C  EC32  F04A         	call	___wmul	;wreg free
 11888  006C40  0E9E               	movlw	low _LCD_STRINGS
 11889  006C42  0100               	movlb	0	; () banked
 11890  006C44  2564               	addwf	?___wmul& (0+255),w,b
 11891  006C46  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 11892  006C48  0EF3               	movlw	high _LCD_STRINGS
 11893  006C4A  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 11894  006C4C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11895  006C4E  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 11896  006C52                     l3659:
 11897                           
 11898                           ;menu.c: 1118: }
 11899                           ;menu.c: 1119: lcd_print_once = 1;
 11900  006C52  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11901  006C54                     l3657:
 11902  006C54  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11903  006C56  D7D0               	goto	l3658
 11904                           
 11905                           ;menu.c: 1120: }
 11906                           ;menu.c: 1122: ARPEGGIO_TYPE = arpeggiatorTypeMenu.selector;
 11907  006C58  C12E  F0EA         	movff	_arpeggiatorTypeMenu+2,_ARPEGGIO_TYPE
 11908                           
 11909                           ;menu.c: 1124: if((ARPEGGIO_TYPE == AS_PRESSED) | (ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE
      +                           == UP_DOWN) | (ARPEGGIO_TYPE == RANDOM) | (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) {
 11910  006C5C  0E06               	movlw	6
 11911  006C5E  0100               	movlb	0	; () banked
 11912  006C60  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11913  006C62  B4D8               	btfsc	status,2,c
 11914  006C64  D00F               	goto	u33460
 11915                           
 11916                           ; BSR set to: 0
 11917  006C66  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 11918  006C68  B4D8               	btfsc	status,2,c
 11919  006C6A  D00C               	goto	u33460
 11920                           
 11921                           ; BSR set to: 0
 11922  006C6C  0E02               	movlw	2
 11923  006C6E  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11924  006C70  B4D8               	btfsc	status,2,c
 11925  006C72  D008               	goto	u33460
 11926                           
 11927                           ; BSR set to: 0
 11928  006C74  0E05               	movlw	5
 11929  006C76  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11930  006C78  B4D8               	btfsc	status,2,c
 11931  006C7A  D004               	goto	u33460
 11932                           
 11933                           ; BSR set to: 0
 11934  006C7C  0E04               	movlw	4
 11935  006C7E  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11936  006C80  A4D8               	btfss	status,2,c
 11937  006C82  D002               	goto	l3661
 11938  006C84                     u33460:
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;menu.c: 1125: startingDirection = UP;
 11942                           
 11943                           ; BSR set to: 0
 11944  006C84  0E00               	movlw	0
 11945  006C86  6FE9               	movwf	_startingDirection& (0+255),b
 11946  006C88                     l3661:
 11947                           
 11948                           ; BSR set to: 0
 11949                           ;menu.c: 1126: }
 11950                           ;menu.c: 1128: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 11951                           
 11952                           ; BSR set to: 0
 11953  006C88  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 11954  006C8A  B4D8               	btfsc	status,2,c
 11955  006C8C  D004               	goto	u33480
 11956                           
 11957                           ; BSR set to: 0
 11958  006C8E  0E03               	movlw	3
 11959  006C90  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 11960  006C92  A4D8               	btfss	status,2,c
 11961  006C94  D002               	goto	l3664
 11962  006C96                     u33480:
 11963                           
 11964                           ; BSR set to: 0
 11965                           ;menu.c: 1129: startingDirection = DOWN;
 11966                           
 11967                           ; BSR set to: 0
 11968  006C96  0E01               	movlw	1
 11969  006C98  6FE9               	movwf	_startingDirection& (0+255),b
 11970  006C9A                     l3664:
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;menu.c: 1130: }
 11974                           ;menu.c: 1132: setupArpeggio();
 11975                           
 11976                           ; BSR set to: 0
 11977  006C9A  ECBC  F040         	call	_setupArpeggio	;wreg free
 11978  006C9E  0012               	return		;funcret
 11979  006CA0                     __end_of_Function_H_4:
 11980                           	opt stack 0
 11981                           tblptru	equ	0xFF8
 11982                           tblptrh	equ	0xFF7
 11983                           tblptrl	equ	0xFF6
 11984                           tablat	equ	0xFF5
 11985                           prodh	equ	0xFF4
 11986                           prodl	equ	0xFF3
 11987                           intcon	equ	0xFF2
 11988                           intcon2	equ	0xFF1
 11989                           postinc0	equ	0xFEE
 11990                           wreg	equ	0xFE8
 11991                           postdec1	equ	0xFE5
 11992                           fsr1l	equ	0xFE1
 11993                           indf2	equ	0xFDF
 11994                           postinc2	equ	0xFDE
 11995                           fsr2h	equ	0xFDA
 11996                           fsr2l	equ	0xFD9
 11997                           status	equ	0xFD8
 11998                           
 11999 ;; *************** function _Function_H_3 *****************
 12000 ;; Defined at:
 12001 ;;		line 1076 in file "menu.c"
 12002 ;; Parameters:    Size  Location     Type
 12003 ;;		None
 12004 ;; Auto vars:     Size  Location     Type
 12005 ;;		None
 12006 ;; Return value:  Size  Location     Type
 12007 ;;                  1    wreg      void 
 12008 ;; Registers used:
 12009 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12010 ;; Tracked objects:
 12011 ;;		On entry : 0/0
 12012 ;;		On exit  : 0/0
 12013 ;;		Unchanged: 0/0
 12014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;Total ram usage:        0 bytes
 12020 ;; Hardware stack levels used:    1
 12021 ;; Hardware stack levels required when called:    9
 12022 ;; This function calls:
 12023 ;;		_Lcd_Print_String
 12024 ;;		_Lcd_Set_Cursor
 12025 ;;		_clear_row2
 12026 ;;		_int2string
 12027 ;;		_processEncoderBuxton
 12028 ;; This function is called by:
 12029 ;;		_Function_H
 12030 ;; This function uses a non-reentrant model
 12031 ;;
 12032                           
 12033                           	psect	text22
 12034  0089A4                     __ptext22:
 12035                           	opt stack 0
 12036  0089A4                     _Function_H_3:
 12037                           	opt stack 19
 12038                           
 12039                           ;menu.c: 1078: which_screen = ARPEGGIATOR_OCTAVES_MENU;
 12040                           
 12041                           ;incstack = 0
 12042  0089A4  0E1C               	movlw	28
 12043  0089A6  0100               	movlb	0	; () banked
 12044  0089A8  6FF9               	movwf	_which_screen& (0+255),b
 12045                           
 12046                           ; BSR set to: 0
 12047                           ;menu.c: 1079: lcd_print_once = 0;
 12048  0089AA  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12049                           
 12050                           ; BSR set to: 0
 12051                           ;menu.c: 1080: encoder_click = 0;
 12052  0089AC  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;menu.c: 1082: arpeggiatorOctavesMenu.selector = OCTAVES;
 12056  0089AE  C0F8  F131         	movff	_OCTAVES,_arpeggiatorOctavesMenu+2
 12057                           
 12058                           ;menu.c: 1084: while(encoder_click == 0) {
 12059  0089B2  D021               	goto	l3650
 12060  0089B4                     
 12061                           ;menu.c: 1085: processEncoderBuxton();
 12062                           
 12063                           ; BSR set to: 0
 12064  0089B4  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12065                           
 12066                           ;menu.c: 1086: if (lcd_print_once == 0) {
 12067  0089B8  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12068  0089BA  D009               	goto	l3652
 12069                           
 12070                           ;menu.c: 1087: clear_row2();
 12071  0089BC  EC0A  F04A         	call	_clear_row2	;wreg free
 12072                           
 12073                           ;menu.c: 1088: Lcd_Print_String("Octave Range:");
 12074  0089C0  0EEE               	movlw	low STR_45
 12075  0089C2  0100               	movlb	0	; () banked
 12076  0089C4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12077  0089C6  0EFE               	movlw	high STR_45
 12078  0089C8  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12079  0089CA  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 12080  0089CE                     l3652:
 12081                           
 12082                           ;menu.c: 1089: }
 12083                           ;menu.c: 1090: lcd_print_once = 1;
 12084  0089CE  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12085                           
 12086                           ;menu.c: 1093: int2string(arpeggiatorOctavesMenu.selector);
 12087  0089D0  C131  F074         	movff	_arpeggiatorOctavesMenu+2,int2string@number
 12088  0089D4  0100               	movlb	0	; () banked
 12089  0089D6  6B75               	clrf	(int2string@number+1)& (0+255),b
 12090  0089D8  ECBD  F034         	call	_int2string	;wreg free
 12091                           
 12092                           ;menu.c: 1094: Lcd_Set_Cursor(2,13);
 12093  0089DC  0E0D               	movlw	13
 12094  0089DE  0100               	movlb	0	; () banked
 12095  0089E0  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 12096  0089E2  0E02               	movlw	2
 12097  0089E4  ECB8  F045         	call	_Lcd_Set_Cursor
 12098                           
 12099                           ;menu.c: 1095: Lcd_Print_String(string2display);
 12100  0089E8  0E82               	movlw	low _string2display
 12101  0089EA  0100               	movlb	0	; () banked
 12102  0089EC  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12103  0089EE  0E01               	movlw	high _string2display
 12104  0089F0  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12105  0089F2  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 12106  0089F6                     l3650:
 12107  0089F6  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12108  0089F8  D7DD               	goto	l3651
 12109                           
 12110                           ;menu.c: 1096: }
 12111                           ;menu.c: 1098: OCTAVES = arpeggiatorOctavesMenu.selector;
 12112  0089FA  C131  F0F8         	movff	_arpeggiatorOctavesMenu+2,_OCTAVES
 12113  0089FE  0012               	return		;funcret
 12114  008A00                     __end_of_Function_H_3:
 12115                           	opt stack 0
 12116                           tblptru	equ	0xFF8
 12117                           tblptrh	equ	0xFF7
 12118                           tblptrl	equ	0xFF6
 12119                           tablat	equ	0xFF5
 12120                           prodh	equ	0xFF4
 12121                           prodl	equ	0xFF3
 12122                           intcon	equ	0xFF2
 12123                           intcon2	equ	0xFF1
 12124                           postinc0	equ	0xFEE
 12125                           wreg	equ	0xFE8
 12126                           postdec1	equ	0xFE5
 12127                           fsr1l	equ	0xFE1
 12128                           indf2	equ	0xFDF
 12129                           postinc2	equ	0xFDE
 12130                           fsr2h	equ	0xFDA
 12131                           fsr2l	equ	0xFD9
 12132                           status	equ	0xFD8
 12133                           
 12134 ;; *************** function _Function_H_2 *****************
 12135 ;; Defined at:
 12136 ;;		line 1049 in file "menu.c"
 12137 ;; Parameters:    Size  Location     Type
 12138 ;;		None
 12139 ;; Auto vars:     Size  Location     Type
 12140 ;;		None
 12141 ;; Return value:  Size  Location     Type
 12142 ;;                  1    wreg      void 
 12143 ;; Registers used:
 12144 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12145 ;; Tracked objects:
 12146 ;;		On entry : 0/0
 12147 ;;		On exit  : 0/0
 12148 ;;		Unchanged: 0/0
 12149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;Total ram usage:        0 bytes
 12155 ;; Hardware stack levels used:    1
 12156 ;; Hardware stack levels required when called:    9
 12157 ;; This function calls:
 12158 ;;		_Lcd_Print_String
 12159 ;;		_Lcd_Set_Cursor
 12160 ;;		_calculate_pulse_length
 12161 ;;		_clear_row2
 12162 ;;		_int2string
 12163 ;;		_processEncoderBuxton
 12164 ;; This function is called by:
 12165 ;;		_Function_H
 12166 ;; This function uses a non-reentrant model
 12167 ;;
 12168                           
 12169                           	psect	text23
 12170  008750                     __ptext23:
 12171                           	opt stack 0
 12172  008750                     _Function_H_2:
 12173                           	opt stack 19
 12174                           
 12175                           ;menu.c: 1051: which_screen = ARPEGGIATOR_TEMPO_MENU;
 12176                           
 12177                           ;incstack = 0
 12178  008750  0E1B               	movlw	27
 12179  008752  0100               	movlb	0	; () banked
 12180  008754  6FF9               	movwf	_which_screen& (0+255),b
 12181                           
 12182                           ; BSR set to: 0
 12183                           ;menu.c: 1052: lcd_print_once = 0;
 12184  008756  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12185                           
 12186                           ; BSR set to: 0
 12187                           ;menu.c: 1053: encoder_click = 0;
 12188  008758  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12189                           
 12190                           ; BSR set to: 0
 12191                           ;menu.c: 1055: arpeggiatorTempoMenu.selector = BPM;
 12192  00875A  C0FF  F134         	movff	_BPM,_arpeggiatorTempoMenu+2
 12193                           
 12194                           ;menu.c: 1057: while(encoder_click == 0) {
 12195  00875E  D021               	goto	l3643
 12196  008760                     
 12197                           ;menu.c: 1058: processEncoderBuxton();
 12198                           
 12199                           ; BSR set to: 0
 12200  008760  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12201                           
 12202                           ;menu.c: 1059: if (lcd_print_once == 0) {
 12203  008764  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12204  008766  D009               	goto	l3645
 12205                           
 12206                           ;menu.c: 1060: clear_row2();
 12207  008768  EC0A  F04A         	call	_clear_row2	;wreg free
 12208                           
 12209                           ;menu.c: 1061: Lcd_Print_String("Tempo (BPM): ");
 12210  00876C  0EB6               	movlw	low STR_44
 12211  00876E  0100               	movlb	0	; () banked
 12212  008770  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12213  008772  0EFE               	movlw	high STR_44
 12214  008774  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12215  008776  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 12216  00877A                     l3645:
 12217                           
 12218                           ;menu.c: 1062: }
 12219                           ;menu.c: 1063: lcd_print_once = 1;
 12220  00877A  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12221                           
 12222                           ;menu.c: 1066: int2string(arpeggiatorTempoMenu.selector);
 12223  00877C  C134  F074         	movff	_arpeggiatorTempoMenu+2,int2string@number
 12224  008780  0100               	movlb	0	; () banked
 12225  008782  6B75               	clrf	(int2string@number+1)& (0+255),b
 12226  008784  ECBD  F034         	call	_int2string	;wreg free
 12227                           
 12228                           ;menu.c: 1067: Lcd_Set_Cursor(2,13);
 12229  008788  0E0D               	movlw	13
 12230  00878A  0100               	movlb	0	; () banked
 12231  00878C  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 12232  00878E  0E02               	movlw	2
 12233  008790  ECB8  F045         	call	_Lcd_Set_Cursor
 12234                           
 12235                           ;menu.c: 1068: Lcd_Print_String(string2display);
 12236  008794  0E82               	movlw	low _string2display
 12237  008796  0100               	movlb	0	; () banked
 12238  008798  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12239  00879A  0E01               	movlw	high _string2display
 12240  00879C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12241  00879E  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 12242  0087A2                     l3643:
 12243  0087A2  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12244  0087A4  D7DD               	goto	l3644
 12245                           
 12246                           ;menu.c: 1069: }
 12247                           ;menu.c: 1071: BPM = arpeggiatorTempoMenu.selector;
 12248  0087A6  C134  F0FF         	movff	_arpeggiatorTempoMenu+2,_BPM
 12249                           
 12250                           ;menu.c: 1072: TIMER_PRELOAD = calculate_pulse_length();
 12251  0087AA  EC46  F02E         	call	_calculate_pulse_length	;wreg free
 12252  0087AE  C0C2  F16D         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 12253  0087B2  C0C3  F16E         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 12254  0087B6  0012               	return		;funcret
 12255  0087B8                     __end_of_Function_H_2:
 12256                           	opt stack 0
 12257                           tblptru	equ	0xFF8
 12258                           tblptrh	equ	0xFF7
 12259                           tblptrl	equ	0xFF6
 12260                           tablat	equ	0xFF5
 12261                           prodh	equ	0xFF4
 12262                           prodl	equ	0xFF3
 12263                           intcon	equ	0xFF2
 12264                           intcon2	equ	0xFF1
 12265                           postinc0	equ	0xFEE
 12266                           wreg	equ	0xFE8
 12267                           postdec1	equ	0xFE5
 12268                           fsr1l	equ	0xFE1
 12269                           indf2	equ	0xFDF
 12270                           postinc2	equ	0xFDE
 12271                           fsr2h	equ	0xFDA
 12272                           fsr2l	equ	0xFD9
 12273                           status	equ	0xFD8
 12274                           
 12275 ;; *************** function _Function_H_1 *****************
 12276 ;; Defined at:
 12277 ;;		line 1013 in file "menu.c"
 12278 ;; Parameters:    Size  Location     Type
 12279 ;;		None
 12280 ;; Auto vars:     Size  Location     Type
 12281 ;;		None
 12282 ;; Return value:  Size  Location     Type
 12283 ;;                  1    wreg      void 
 12284 ;; Registers used:
 12285 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12286 ;; Tracked objects:
 12287 ;;		On entry : 0/0
 12288 ;;		On exit  : 0/0
 12289 ;;		Unchanged: 0/0
 12290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12295 ;;Total ram usage:        0 bytes
 12296 ;; Hardware stack levels used:    1
 12297 ;; Hardware stack levels required when called:    9
 12298 ;; This function calls:
 12299 ;;		_Lcd_Print_String
 12300 ;;		_clear_row2
 12301 ;;		_processEncoderBuxton
 12302 ;;		_strcpy
 12303 ;; This function is called by:
 12304 ;;		_Function_H
 12305 ;; This function uses a non-reentrant model
 12306 ;;
 12307                           
 12308                           	psect	text24
 12309  007462                     __ptext24:
 12310                           	opt stack 0
 12311  007462                     _Function_H_1:
 12312                           	opt stack 19
 12313                           
 12314                           ;menu.c: 1015: which_screen = ARPEGGIATOR_ON_OFF_MENU;
 12315                           
 12316                           ;incstack = 0
 12317  007462  0E1A               	movlw	26
 12318  007464  0100               	movlb	0	; () banked
 12319  007466  6FF9               	movwf	_which_screen& (0+255),b
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;menu.c: 1016: lcd_print_once = 0;
 12323  007468  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12324                           
 12325                           ; BSR set to: 0
 12326                           ;menu.c: 1017: encoder_click = 0;
 12327  00746A  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12328                           
 12329                           ;menu.c: 1019: arpeggiatorOnOffMenu.selector = ARPEGGIO_ON;
 12330  00746C  0E00               	movlw	0
 12331  00746E  B635               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12332  007470  0E01               	movlw	1
 12333  007472  0101               	movlb	1	; () banked
 12334  007474  6F37               	movwf	(_arpeggiatorOnOffMenu+2)& (0+255),b
 12335                           
 12336                           ;menu.c: 1021: while(encoder_click == 0) {
 12337  007476  D039               	goto	l3634
 12338  007478                     
 12339                           ;menu.c: 1022: processEncoderBuxton();
 12340                           
 12341                           ; BSR set to: 1
 12342  007478  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12343                           
 12344                           ;menu.c: 1023: if (lcd_print_once == 0) {
 12345  00747C  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12346  00747E  D034               	goto	l3638
 12347                           
 12348                           ;menu.c: 1028: if(arpeggiatorOnOffMenu.selector == 0) {
 12349  007480  0101               	movlb	1	; () banked
 12350  007482  5137               	movf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12351  007484  A4D8               	btfss	status,2,c
 12352  007486  D016               	goto	l3637
 12353                           
 12354                           ; BSR set to: 1
 12355                           ;menu.c: 1029: clear_row2();
 12356  007488  EC0A  F04A         	call	_clear_row2	;wreg free
 12357                           
 12358                           ;menu.c: 1030: Lcd_Print_String("ARPEGGIATOR OFF");
 12359  00748C  0E3D               	movlw	low STR_40
 12360  00748E  0100               	movlb	0	; () banked
 12361  007490  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12362  007492  0EFE               	movlw	high STR_40
 12363  007494  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12364  007496  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 12365                           
 12366                           ;menu.c: 1031: DISPLAY_MODE = 1;
 12367  00749A  0E01               	movlw	1
 12368  00749C  6E5A               	movwf	_DISPLAY_MODE,c
 12369                           
 12370                           ;menu.c: 1032: strcpy(string_to_display, "AoFF");
 12371  00749E  0EEE               	movlw	low _string_to_display
 12372  0074A0  0100               	movlb	0	; () banked
 12373  0074A2  6F60               	movwf	strcpy@to& (0+255),b
 12374  0074A4  0E01               	movlw	high _string_to_display
 12375  0074A6  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12376  0074A8  0ECD               	movlw	low STR_41
 12377  0074AA  6F62               	movwf	strcpy@from& (0+255),b
 12378  0074AC  0EFF               	movlw	high STR_41
 12379  0074AE  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12380  0074B0  EC27  F049         	call	_strcpy	;wreg free
 12381  0074B4                     l3637:
 12382                           
 12383                           ;menu.c: 1033: }
 12384                           ;menu.c: 1034: if(arpeggiatorOnOffMenu.selector == 1) {
 12385  0074B4  0101               	movlb	1	; () banked
 12386  0074B6  0537               	decf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12387  0074B8  A4D8               	btfss	status,2,c
 12388  0074BA  D016               	goto	l3638
 12389                           
 12390                           ; BSR set to: 1
 12391                           ;menu.c: 1035: clear_row2();
 12392  0074BC  EC0A  F04A         	call	_clear_row2	;wreg free
 12393                           
 12394                           ;menu.c: 1036: Lcd_Print_String("ARPEGGIATOR ON");
 12395  0074C0  0E98               	movlw	low STR_42
 12396  0074C2  0100               	movlb	0	; () banked
 12397  0074C4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12398  0074C6  0EFE               	movlw	high STR_42
 12399  0074C8  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12400  0074CA  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 12401                           
 12402                           ;menu.c: 1037: DISPLAY_MODE = 1;
 12403  0074CE  0E01               	movlw	1
 12404  0074D0  6E5A               	movwf	_DISPLAY_MODE,c
 12405                           
 12406                           ;menu.c: 1038: strcpy(string_to_display, " ArP");
 12407  0074D2  0EEE               	movlw	low _string_to_display
 12408  0074D4  0100               	movlb	0	; () banked
 12409  0074D6  6F60               	movwf	strcpy@to& (0+255),b
 12410  0074D8  0E01               	movlw	high _string_to_display
 12411  0074DA  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12412  0074DC  0ED2               	movlw	low STR_43
 12413  0074DE  6F62               	movwf	strcpy@from& (0+255),b
 12414  0074E0  0EFF               	movlw	high STR_43
 12415  0074E2  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12416  0074E4  EC27  F049         	call	_strcpy	;wreg free
 12417  0074E8                     l3638:
 12418                           
 12419                           ;menu.c: 1039: }
 12420                           ;menu.c: 1040: }
 12421                           ;menu.c: 1041: lcd_print_once = 1;
 12422  0074E8  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12423  0074EA                     l3634:
 12424  0074EA  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12425  0074EC  D7C5               	goto	l3635
 12426                           
 12427                           ;menu.c: 1042: }
 12428                           ;menu.c: 1044: ARPEGGIO_ON = arpeggiatorOnOffMenu.selector;
 12429  0074EE  0101               	movlb	1	; () banked
 12430  0074F0  A137               	btfss	(_arpeggiatorOnOffMenu+2)& (0+255),0,b
 12431  0074F2  D002               	goto	u33340
 12432  0074F4  8635               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12433  0074F6  0012               	return	
 12434  0074F8                     u33340:
 12435  0074F8  9635               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12436  0074FA  0012               	return		;funcret
 12437  0074FC                     __end_of_Function_H_1:
 12438                           	opt stack 0
 12439                           tblptru	equ	0xFF8
 12440                           tblptrh	equ	0xFF7
 12441                           tblptrl	equ	0xFF6
 12442                           tablat	equ	0xFF5
 12443                           prodh	equ	0xFF4
 12444                           prodl	equ	0xFF3
 12445                           intcon	equ	0xFF2
 12446                           intcon2	equ	0xFF1
 12447                           postinc0	equ	0xFEE
 12448                           wreg	equ	0xFE8
 12449                           postdec1	equ	0xFE5
 12450                           fsr1l	equ	0xFE1
 12451                           indf2	equ	0xFDF
 12452                           postinc2	equ	0xFDE
 12453                           fsr2h	equ	0xFDA
 12454                           fsr2l	equ	0xFD9
 12455                           status	equ	0xFD8
 12456                           
 12457 ;; *************** function _Function_G *****************
 12458 ;; Defined at:
 12459 ;;		line 962 in file "menu.c"
 12460 ;; Parameters:    Size  Location     Type
 12461 ;;		None
 12462 ;; Auto vars:     Size  Location     Type
 12463 ;;		None
 12464 ;; Return value:  Size  Location     Type
 12465 ;;                  1    wreg      void 
 12466 ;; Registers used:
 12467 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12468 ;; Tracked objects:
 12469 ;;		On entry : 0/0
 12470 ;;		On exit  : 0/0
 12471 ;;		Unchanged: 0/0
 12472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12475 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12476 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;Total ram usage:        1 bytes
 12478 ;; Hardware stack levels used:    1
 12479 ;; Hardware stack levels required when called:   11
 12480 ;; This function calls:
 12481 ;;		_Function_G_1
 12482 ;;		_Function_G_2
 12483 ;;		_Function_G_3
 12484 ;;		_Function_G_4
 12485 ;;		_Lcd_Print_String
 12486 ;;		___lbmod
 12487 ;;		___wmul
 12488 ;;		_clear_row2
 12489 ;;		_eepromExit
 12490 ;;		_processEncoderBuxton
 12491 ;; This function is called by:
 12492 ;;		_menu_lcd
 12493 ;; This function uses a non-reentrant model
 12494 ;;
 12495                           
 12496                           	psect	text25
 12497  00762E                     __ptext25:
 12498                           	opt stack 0
 12499  00762E                     _Function_G:
 12500                           	opt stack 18
 12501                           
 12502                           ;menu.c: 964: which_screen = EEPROM_MENU;
 12503                           
 12504                           ;incstack = 0
 12505  00762E  0E16               	movlw	22
 12506  007630  0100               	movlb	0	; () banked
 12507  007632  6FF9               	movwf	_which_screen& (0+255),b
 12508                           
 12509                           ; BSR set to: 0
 12510                           ;menu.c: 965: lcd_print_once = 0;
 12511  007634  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12512                           
 12513                           ;menu.c: 967: while(encoder_click == 0) {
 12514  007636  D025               	goto	l3606
 12515  007638                     
 12516                           ;menu.c: 968: processEncoderBuxton();
 12517                           
 12518                           ; BSR set to: 0
 12519  007638  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12520                           
 12521                           ;menu.c: 969: if (lcd_print_once == 0) {
 12522  00763C  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12523  00763E  D020               	goto	l3608
 12524                           
 12525                           ;menu.c: 970: clear_row2();
 12526  007640  EC0A  F04A         	call	_clear_row2	;wreg free
 12527                           
 12528                           ;menu.c: 971: Lcd_Print_String(LCD_STRINGS[(eepromMenu.selector % eepromMenu.number) + e
      +                          epromMenu.address]);
 12529  007644  C13B  F060         	movff	_eepromMenu,___lbmod@divisor
 12530  007648  0101               	movlb	1	; () banked
 12531  00764A  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12532  00764C  EC89  F049         	call	___lbmod
 12533  007650  0100               	movlb	0	; () banked
 12534  007652  6FCD               	movwf	??_Function_G& (0+255),b
 12535  007654  51CD               	movf	??_Function_G& (0+255),w,b
 12536  007656  0101               	movlb	1	; () banked
 12537  007658  253C               	addwf	(_eepromMenu+1)& (0+255),w,b
 12538  00765A  0100               	movlb	0	; () banked
 12539  00765C  6F64               	movwf	___wmul@multiplier& (0+255),b
 12540  00765E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 12541  007660  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12542  007662  0E00               	movlw	0
 12543  007664  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12544  007666  0E11               	movlw	17
 12545  007668  6F66               	movwf	___wmul@multiplicand& (0+255),b
 12546  00766A  EC32  F04A         	call	___wmul	;wreg free
 12547  00766E  0E9E               	movlw	low _LCD_STRINGS
 12548  007670  0100               	movlb	0	; () banked
 12549  007672  2564               	addwf	?___wmul& (0+255),w,b
 12550  007674  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12551  007676  0EF3               	movlw	high _LCD_STRINGS
 12552  007678  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 12553  00767A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12554  00767C  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 12555  007680                     l3608:
 12556                           
 12557                           ;menu.c: 972: }
 12558                           ;menu.c: 973: lcd_print_once = 1;
 12559  007680  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12560  007682                     l3606:
 12561  007682  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12562  007684  D7D9               	goto	l3607
 12563                           
 12564                           ;menu.c: 974: }
 12565                           ;menu.c: 976: if(eepromMenu.selector == 0) {Function_G_1();}
 12566  007686  0101               	movlb	1	; () banked
 12567  007688  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12568  00768A  B4D8               	btfsc	status,2,c
 12569                           
 12570                           ; BSR set to: 1
 12571  00768C  EC40  F039         	call	_Function_G_1	;wreg free
 12572                           
 12573                           ;menu.c: 977: if(eepromMenu.selector == 1) {Function_G_2();}
 12574  007690  0101               	movlb	1	; () banked
 12575  007692  053D               	decf	(_eepromMenu+2)& (0+255),w,b
 12576  007694  B4D8               	btfsc	status,2,c
 12577                           
 12578                           ; BSR set to: 1
 12579  007696  ECEF  F038         	call	_Function_G_2	;wreg free
 12580                           
 12581                           ;menu.c: 978: if(eepromMenu.selector == 2) {Function_G_3();}
 12582  00769A  0E02               	movlw	2
 12583  00769C  0101               	movlb	1	; () banked
 12584  00769E  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12585  0076A0  B4D8               	btfsc	status,2,c
 12586                           
 12587                           ; BSR set to: 1
 12588  0076A2  EC00  F045         	call	_Function_G_3	;wreg free
 12589                           
 12590                           ;menu.c: 979: if(eepromMenu.selector == 3) {Function_G_4();}
 12591  0076A6  0E03               	movlw	3
 12592  0076A8  0101               	movlb	1	; () banked
 12593  0076AA  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12594  0076AC  B4D8               	btfsc	status,2,c
 12595                           
 12596                           ; BSR set to: 1
 12597  0076AE  ECE2  F039         	call	_Function_G_4	;wreg free
 12598                           
 12599                           ;menu.c: 980: if(eepromMenu.selector == 4) {eepromExit();}
 12600  0076B2  0E04               	movlw	4
 12601  0076B4  0101               	movlb	1	; () banked
 12602  0076B6  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12603  0076B8  A4D8               	btfss	status,2,c
 12604  0076BA  0012               	return	
 12605                           
 12606                           ; BSR set to: 1
 12607  0076BC  EC43  F048         	call	_eepromExit	;wreg free
 12608  0076C0  0012               	return	
 12609  0076C2                     __end_of_Function_G:
 12610                           	opt stack 0
 12611                           tblptru	equ	0xFF8
 12612                           tblptrh	equ	0xFF7
 12613                           tblptrl	equ	0xFF6
 12614                           tablat	equ	0xFF5
 12615                           prodh	equ	0xFF4
 12616                           prodl	equ	0xFF3
 12617                           intcon	equ	0xFF2
 12618                           intcon2	equ	0xFF1
 12619                           postinc0	equ	0xFEE
 12620                           wreg	equ	0xFE8
 12621                           postdec1	equ	0xFE5
 12622                           fsr1l	equ	0xFE1
 12623                           indf2	equ	0xFDF
 12624                           postinc2	equ	0xFDE
 12625                           fsr2h	equ	0xFDA
 12626                           fsr2l	equ	0xFD9
 12627                           status	equ	0xFD8
 12628                           
 12629 ;; *************** function _Function_G_4 *****************
 12630 ;; Defined at:
 12631 ;;		line 933 in file "menu.c"
 12632 ;; Parameters:    Size  Location     Type
 12633 ;;		None
 12634 ;; Auto vars:     Size  Location     Type
 12635 ;;		None
 12636 ;; Return value:  Size  Location     Type
 12637 ;;                  1    wreg      void 
 12638 ;; Registers used:
 12639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12640 ;; Tracked objects:
 12641 ;;		On entry : 0/0
 12642 ;;		On exit  : 0/0
 12643 ;;		Unchanged: 0/0
 12644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12647 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12648 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12649 ;;Total ram usage:        1 bytes
 12650 ;; Hardware stack levels used:    1
 12651 ;; Hardware stack levels required when called:   10
 12652 ;; This function calls:
 12653 ;;		_Busy_eep
 12654 ;;		_Lcd_Print_String
 12655 ;;		_Write_b_eep
 12656 ;;		___lbmod
 12657 ;;		___wmul
 12658 ;;		_clear_row1
 12659 ;;		_clear_row2
 12660 ;;		_exitFunction
 12661 ;;		_processEncoderBuxton
 12662 ;; This function is called by:
 12663 ;;		_Function_G
 12664 ;; This function uses a non-reentrant model
 12665 ;;
 12666                           
 12667                           	psect	text26
 12668  0073C4                     __ptext26:
 12669                           	opt stack 0
 12670  0073C4                     _Function_G_4:
 12671                           	opt stack 18
 12672                           
 12673                           ;menu.c: 937: which_screen = ENCODER_POLARITY_MENU;
 12674                           
 12675                           ;incstack = 0
 12676  0073C4  0E18               	movlw	24
 12677  0073C6  0100               	movlb	0	; () banked
 12678  0073C8  6FF9               	movwf	_which_screen& (0+255),b
 12679                           
 12680                           ; BSR set to: 0
 12681                           ;menu.c: 938: lcd_print_once = 0;
 12682  0073CA  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12683                           
 12684                           ; BSR set to: 0
 12685                           ;menu.c: 939: encoder_click = 0;
 12686  0073CC  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12687                           
 12688                           ;menu.c: 941: encoderPolarityMenu.selector = encoderPolarity;
 12689  0073CE  0E00               	movlw	0
 12690  0073D0  B036               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12691  0073D2  0E01               	movlw	1
 12692  0073D4  0101               	movlb	1	; () banked
 12693  0073D6  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 12694                           
 12695                           ;menu.c: 943: while(encoder_click == 0) {
 12696  0073D8  D02E               	goto	l3599
 12697  0073DA                     
 12698                           ;menu.c: 944: processEncoderBuxton();
 12699                           
 12700                           ; BSR set to: 1
 12701  0073DA  EC09  F000         	call	_processEncoderBuxton	;wreg free
 12702                           
 12703                           ;menu.c: 945: if (lcd_print_once == 0) {
 12704  0073DE  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12705  0073E0  D029               	goto	l3601
 12706                           
 12707                           ;menu.c: 946: clear_row1();
 12708  0073E2  EC1E  F04A         	call	_clear_row1	;wreg free
 12709                           
 12710                           ;menu.c: 947: Lcd_Print_String("Encoder Polarity");
 12711  0073E6  0EEC               	movlw	low STR_39
 12712  0073E8  0100               	movlb	0	; () banked
 12713  0073EA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12714  0073EC  0EFD               	movlw	high STR_39
 12715  0073EE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12716  0073F0  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 12717                           
 12718                           ;menu.c: 948: clear_row2();
 12719  0073F4  EC0A  F04A         	call	_clear_row2	;wreg free
 12720                           
 12721                           ;menu.c: 949: Lcd_Print_String(LCD_STRINGS[(encoderPolarityMenu.selector % encoderPolari
      +                          tyMenu.number) + encoderPolarityMenu.address]);
 12722  0073F8  C138  F060         	movff	_encoderPolarityMenu,___lbmod@divisor
 12723  0073FC  0101               	movlb	1	; () banked
 12724  0073FE  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 12725  007400  EC89  F049         	call	___lbmod
 12726  007404  0100               	movlb	0	; () banked
 12727  007406  6F72               	movwf	??_Function_G_4& (0+255),b
 12728  007408  5172               	movf	??_Function_G_4& (0+255),w,b
 12729  00740A  0101               	movlb	1	; () banked
 12730  00740C  2539               	addwf	(_encoderPolarityMenu+1)& (0+255),w,b
 12731  00740E  0100               	movlb	0	; () banked
 12732  007410  6F64               	movwf	___wmul@multiplier& (0+255),b
 12733  007412  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 12734  007414  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12735  007416  0E00               	movlw	0
 12736  007418  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12737  00741A  0E11               	movlw	17
 12738  00741C  6F66               	movwf	___wmul@multiplicand& (0+255),b
 12739  00741E  EC32  F04A         	call	___wmul	;wreg free
 12740  007422  0E9E               	movlw	low _LCD_STRINGS
 12741  007424  0100               	movlb	0	; () banked
 12742  007426  2564               	addwf	?___wmul& (0+255),w,b
 12743  007428  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12744  00742A  0EF3               	movlw	high _LCD_STRINGS
 12745  00742C  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 12746  00742E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12747  007430  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 12748  007434                     l3601:
 12749                           
 12750                           ;menu.c: 950: }
 12751                           ;menu.c: 951: lcd_print_once = 1;
 12752  007434  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12753  007436                     l3599:
 12754  007436  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12755  007438  D7D0               	goto	l3600
 12756                           
 12757                           ;menu.c: 952: }
 12758                           ;menu.c: 955: encoderPolarity = encoderPolarityMenu.selector;
 12759  00743A  0101               	movlb	1	; () banked
 12760  00743C  A13A               	btfss	(_encoderPolarityMenu+2)& (0+255),0,b
 12761  00743E  D002               	goto	u33280
 12762  007440  8036               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12763  007442  D001               	goto	u33295
 12764  007444                     u33280:
 12765  007444  9036               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12766  007446                     u33295:
 12767                           
 12768                           ;menu.c: 956: (Busy_eep(), Write_b_eep(0x02,encoderPolarityMenu.selector));
 12769  007446  ECED  F04A         	call	_Busy_eep	;wreg free
 12770  00744A  0E00               	movlw	0
 12771  00744C  0100               	movlb	0	; () banked
 12772  00744E  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12773  007450  0E02               	movlw	2
 12774  007452  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12775  007454  C13A  F062         	movff	_encoderPolarityMenu+2,Write_b_eep@bdat
 12776  007458  ECA8  F047         	call	_Write_b_eep	;wreg free
 12777                           
 12778                           ;menu.c: 957: exitFunction();
 12779  00745C  ECE9  F047         	call	_exitFunction	;wreg free
 12780  007460  0012               	return		;funcret
 12781  007462                     __end_of_Function_G_4:
 12782                           	opt stack 0
 12783                           tblptru	equ	0xFF8
 12784                           tblptrh	equ	0xFF7
 12785                           tblptrl	equ	0xFF6
 12786                           tablat	equ	0xFF5
 12787                           prodh	equ	0xFF4
 12788                           prodl	equ	0xFF3
 12789                           intcon	equ	0xFF2
 12790                           intcon2	equ	0xFF1
 12791                           postinc0	equ	0xFEE
 12792                           wreg	equ	0xFE8
 12793                           postdec1	equ	0xFE5
 12794                           fsr1l	equ	0xFE1
 12795                           indf2	equ	0xFDF
 12796                           postinc2	equ	0xFDE
 12797                           fsr2h	equ	0xFDA
 12798                           fsr2l	equ	0xFD9
 12799                           status	equ	0xFD8
 12800                           
 12801 ;; *************** function _exitFunction *****************
 12802 ;; Defined at:
 12803 ;;		line 242 in file "menu.c"
 12804 ;; Parameters:    Size  Location     Type
 12805 ;;		None
 12806 ;; Auto vars:     Size  Location     Type
 12807 ;;		None
 12808 ;; Return value:  Size  Location     Type
 12809 ;;                  1    wreg      void 
 12810 ;; Registers used:
 12811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12812 ;; Tracked objects:
 12813 ;;		On entry : 0/0
 12814 ;;		On exit  : 0/0
 12815 ;;		Unchanged: 0/0
 12816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12819 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;Total ram usage:        2 bytes
 12822 ;; Hardware stack levels used:    1
 12823 ;; Hardware stack levels required when called:    9
 12824 ;; This function calls:
 12825 ;;		_Lcd_Print_String
 12826 ;;		_clear_row1
 12827 ;; This function is called by:
 12828 ;;		_menu_lcd
 12829 ;;		_Function_G_4
 12830 ;; This function uses a non-reentrant model
 12831 ;;
 12832                           
 12833                           	psect	text27
 12834  008FD2                     __ptext27:
 12835                           	opt stack 0
 12836  008FD2                     _exitFunction:
 12837                           	opt stack 20
 12838                           
 12839                           ;menu.c: 244: while(encoder_click == 0);
 12840                           
 12841                           ;incstack = 0
 12842  008FD2  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12843  008FD4  D7FE               	goto	_exitFunction
 12844                           
 12845                           ;menu.c: 245: clear_row1();
 12846  008FD6  EC1E  F04A         	call	_clear_row1	;wreg free
 12847                           
 12848                           ;menu.c: 246: Lcd_Print_String("Set!");
 12849  008FDA  0EC3               	movlw	low STR_20
 12850  008FDC  0100               	movlb	0	; () banked
 12851  008FDE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12852  008FE0  0EFF               	movlw	high STR_20
 12853  008FE2  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12854  008FE4  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 12855                           
 12856                           ;menu.c: 247: _delay((unsigned long)((500)*(20000000/4000.0)));
 12857  008FE8  0E0D               	movlw	13
 12858  008FEA  0100               	movlb	0	; () banked
 12859  008FEC  6F71               	movwf	(??_exitFunction+1)& (0+255),b
 12860  008FEE  0EAF               	movlw	175
 12861  008FF0  6F70               	movwf	??_exitFunction& (0+255),b
 12862  008FF2  0EB6               	movlw	182
 12863  008FF4                     u44777:
 12864  008FF4  2EE8               	decfsz	wreg,f,c
 12865  008FF6  D7FE               	bra	u44777
 12866  008FF8  2F70               	decfsz	??_exitFunction& (0+255),f,b
 12867  008FFA  D7FC               	bra	u44777
 12868  008FFC  2F71               	decfsz	(??_exitFunction+1)& (0+255),f,b
 12869  008FFE  D7FA               	bra	u44777
 12870  009000  F000               	nop	
 12871                           
 12872                           ;menu.c: 248: which_screen = MAIN_MENU;
 12873  009002  0E02               	movlw	2
 12874  009004  0100               	movlb	0	; () banked
 12875  009006  6FF9               	movwf	_which_screen& (0+255),b
 12876                           
 12877                           ; BSR set to: 0
 12878                           ;menu.c: 249: lcd_print_once = 0;
 12879  009008  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;menu.c: 250: encoder_click = 0;
 12883  00900A  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12884                           
 12885                           ; BSR set to: 0
 12886  00900C  0012               	return		;funcret
 12887  00900E                     __end_of_exitFunction:
 12888                           	opt stack 0
 12889                           tblptru	equ	0xFF8
 12890                           tblptrh	equ	0xFF7
 12891                           tblptrl	equ	0xFF6
 12892                           tablat	equ	0xFF5
 12893                           prodh	equ	0xFF4
 12894                           prodl	equ	0xFF3
 12895                           intcon	equ	0xFF2
 12896                           intcon2	equ	0xFF1
 12897                           postinc0	equ	0xFEE
 12898                           wreg	equ	0xFE8
 12899                           postdec1	equ	0xFE5
 12900                           fsr1l	equ	0xFE1
 12901                           indf2	equ	0xFDF
 12902                           postinc2	equ	0xFDE
 12903                           fsr2h	equ	0xFDA
 12904                           fsr2l	equ	0xFD9
 12905                           status	equ	0xFD8
 12906                           
 12907 ;; *************** function _Function_G_3 *****************
 12908 ;; Defined at:
 12909 ;;		line 918 in file "menu.c"
 12910 ;; Parameters:    Size  Location     Type
 12911 ;;		None
 12912 ;; Auto vars:     Size  Location     Type
 12913 ;;		None
 12914 ;; Return value:  Size  Location     Type
 12915 ;;                  1    wreg      void 
 12916 ;; Registers used:
 12917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12918 ;; Tracked objects:
 12919 ;;		On entry : 0/0
 12920 ;;		On exit  : 0/0
 12921 ;;		Unchanged: 0/0
 12922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12925 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12926 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12927 ;;Total ram usage:        2 bytes
 12928 ;; Hardware stack levels used:    1
 12929 ;; Hardware stack levels required when called:    9
 12930 ;; This function calls:
 12931 ;;		_Busy_eep
 12932 ;;		_Lcd_Print_String
 12933 ;;		_Write_b_eep
 12934 ;;		_clear_row1
 12935 ;;		_clear_row2
 12936 ;; This function is called by:
 12937 ;;		_Function_G
 12938 ;; This function uses a non-reentrant model
 12939 ;;
 12940                           
 12941                           	psect	text28
 12942  008A00                     __ptext28:
 12943                           	opt stack 0
 12944  008A00                     _Function_G_3:
 12945                           	opt stack 19
 12946                           
 12947                           ;menu.c: 920: while(encoder_click == 0);
 12948                           
 12949                           ; BSR set to: 0
 12950                           ;incstack = 0
 12951  008A00  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12952  008A02  D7FE               	goto	_Function_G_3
 12953                           
 12954                           ;menu.c: 922: (Busy_eep(), Write_b_eep(0,0x00));
 12955  008A04  ECED  F04A         	call	_Busy_eep	;wreg free
 12956  008A08  0E00               	movlw	0
 12957  008A0A  0100               	movlb	0	; () banked
 12958  008A0C  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12959  008A0E  0E00               	movlw	0
 12960  008A10  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12961  008A12  0E00               	movlw	0
 12962  008A14  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 12963  008A16  ECA8  F047         	call	_Write_b_eep	;wreg free
 12964                           
 12965                           ;menu.c: 924: clear_row1();
 12966  008A1A  EC1E  F04A         	call	_clear_row1	;wreg free
 12967                           
 12968                           ;menu.c: 925: Lcd_Print_String("Restore Setting!");
 12969  008A1E  0E86               	movlw	low STR_37
 12970  008A20  0100               	movlb	0	; () banked
 12971  008A22  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12972  008A24  0EFD               	movlw	high STR_37
 12973  008A26  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12974  008A28  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 12975                           
 12976                           ;menu.c: 926: clear_row2();
 12977  008A2C  EC0A  F04A         	call	_clear_row2	;wreg free
 12978                           
 12979                           ;menu.c: 927: Lcd_Print_String("Rebooting...");
 12980  008A30  0E25               	movlw	low STR_38
 12981  008A32  0100               	movlb	0	; () banked
 12982  008A34  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 12983  008A36  0EFF               	movlw	high STR_38
 12984  008A38  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12985  008A3A  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 12986                           
 12987                           ;menu.c: 928: _delay((unsigned long)((2500)*(20000000/4000.0)));
 12988  008A3E  0E40               	movlw	64
 12989  008A40  0100               	movlb	0	; () banked
 12990  008A42  6F71               	movwf	(??_Function_G_3+1)& (0+255),b
 12991  008A44  0E6A               	movlw	106
 12992  008A46  6F70               	movwf	??_Function_G_3& (0+255),b
 12993  008A48  0E97               	movlw	151
 12994  008A4A                     u44787:
 12995  008A4A  2EE8               	decfsz	wreg,f,c
 12996  008A4C  D7FE               	bra	u44787
 12997  008A4E  2F70               	decfsz	??_Function_G_3& (0+255),f,b
 12998  008A50  D7FC               	bra	u44787
 12999  008A52  2F71               	decfsz	(??_Function_G_3+1)& (0+255),f,b
 13000  008A54  D7FA               	bra	u44787
 13001  008A56  D000               	nop2	
 13002  008A58  00FF               	reset		;# 
 13003  008A5A  0012               	return		;funcret
 13004  008A5C                     __end_of_Function_G_3:
 13005                           	opt stack 0
 13006                           tblptru	equ	0xFF8
 13007                           tblptrh	equ	0xFF7
 13008                           tblptrl	equ	0xFF6
 13009                           tablat	equ	0xFF5
 13010                           prodh	equ	0xFF4
 13011                           prodl	equ	0xFF3
 13012                           intcon	equ	0xFF2
 13013                           intcon2	equ	0xFF1
 13014                           postinc0	equ	0xFEE
 13015                           wreg	equ	0xFE8
 13016                           postdec1	equ	0xFE5
 13017                           fsr1l	equ	0xFE1
 13018                           indf2	equ	0xFDF
 13019                           postinc2	equ	0xFDE
 13020                           fsr2h	equ	0xFDA
 13021                           fsr2l	equ	0xFD9
 13022                           status	equ	0xFD8
 13023                           
 13024 ;; *************** function _Function_G_2 *****************
 13025 ;; Defined at:
 13026 ;;		line 889 in file "menu.c"
 13027 ;; Parameters:    Size  Location     Type
 13028 ;;		None
 13029 ;; Auto vars:     Size  Location     Type
 13030 ;;		None
 13031 ;; Return value:  Size  Location     Type
 13032 ;;                  1    wreg      void 
 13033 ;; Registers used:
 13034 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13035 ;; Tracked objects:
 13036 ;;		On entry : 0/0
 13037 ;;		On exit  : 0/0
 13038 ;;		Unchanged: 0/0
 13039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13043 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13044 ;;Total ram usage:        1 bytes
 13045 ;; Hardware stack levels used:    1
 13046 ;; Hardware stack levels required when called:   10
 13047 ;; This function calls:
 13048 ;;		_Busy_eep
 13049 ;;		_Lcd_Print_String
 13050 ;;		_Write_b_eep
 13051 ;;		___lbmod
 13052 ;;		___wmul
 13053 ;;		_clear_row1
 13054 ;;		_clear_row2
 13055 ;;		_eepromExit
 13056 ;;		_exitLoad
 13057 ;;		_loadFromEEPROM
 13058 ;;		_processEncoderBuxton
 13059 ;; This function is called by:
 13060 ;;		_Function_G
 13061 ;; This function uses a non-reentrant model
 13062 ;;
 13063                           
 13064                           	psect	text29
 13065  0071DE                     __ptext29:
 13066                           	opt stack 0
 13067  0071DE                     _Function_G_2:
 13068                           	opt stack 18
 13069                           
 13070                           ;menu.c: 891: which_screen = SAVES_MENU;
 13071                           
 13072                           ;incstack = 0
 13073  0071DE  0E17               	movlw	23
 13074  0071E0  0100               	movlb	0	; () banked
 13075  0071E2  6FF9               	movwf	_which_screen& (0+255),b
 13076                           
 13077                           ; BSR set to: 0
 13078                           ;menu.c: 892: encoder_click = 0;
 13079  0071E4  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13080                           
 13081                           ; BSR set to: 0
 13082                           ;menu.c: 893: lcd_print_once = 0;
 13083  0071E6  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13084                           
 13085                           ;menu.c: 895: while(encoder_click == 0) {
 13086  0071E8  D02C               	goto	l3584
 13087  0071EA                     
 13088                           ;menu.c: 896: processEncoderBuxton();
 13089                           
 13090                           ; BSR set to: 0
 13091  0071EA  EC09  F000         	call	_processEncoderBuxton	;wreg free
 13092                           
 13093                           ;menu.c: 897: if (lcd_print_once == 0) {
 13094  0071EE  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13095  0071F0  D027               	goto	l3586
 13096                           
 13097                           ;menu.c: 898: clear_row1();
 13098  0071F2  EC1E  F04A         	call	_clear_row1	;wreg free
 13099                           
 13100                           ;menu.c: 899: Lcd_Print_String("Load #:");
 13101  0071F6  0EB3               	movlw	low STR_36
 13102  0071F8  0100               	movlb	0	; () banked
 13103  0071FA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 13104  0071FC  0EFF               	movlw	high STR_36
 13105  0071FE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13106  007200  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 13107                           
 13108                           ;menu.c: 900: clear_row2();
 13109  007204  EC0A  F04A         	call	_clear_row2	;wreg free
 13110                           
 13111                           ;menu.c: 901: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sav
      +                          esMenu.address]);
 13112  007208  C0DF  F060         	movff	_savesMenu,___lbmod@divisor
 13113  00720C  0100               	movlb	0	; () banked
 13114  00720E  51E1               	movf	(_savesMenu+2)& (0+255),w,b
 13115  007210  EC89  F049         	call	___lbmod
 13116  007214  0100               	movlb	0	; () banked
 13117  007216  6FCC               	movwf	??_Function_G_2& (0+255),b
 13118  007218  51CC               	movf	??_Function_G_2& (0+255),w,b
 13119  00721A  25E0               	addwf	(_savesMenu+1)& (0+255),w,b
 13120  00721C  6F64               	movwf	___wmul@multiplier& (0+255),b
 13121  00721E  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 13122  007220  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 13123  007222  0E00               	movlw	0
 13124  007224  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13125  007226  0E11               	movlw	17
 13126  007228  6F66               	movwf	___wmul@multiplicand& (0+255),b
 13127  00722A  EC32  F04A         	call	___wmul	;wreg free
 13128  00722E  0E9E               	movlw	low _LCD_STRINGS
 13129  007230  0100               	movlb	0	; () banked
 13130  007232  2564               	addwf	?___wmul& (0+255),w,b
 13131  007234  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 13132  007236  0EF3               	movlw	high _LCD_STRINGS
 13133  007238  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 13134  00723A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13135  00723C  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 13136  007240                     l3586:
 13137                           
 13138                           ;menu.c: 902: }
 13139                           ;menu.c: 903: lcd_print_once = 1;
 13140  007240  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13141  007242                     l3584:
 13142  007242  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13143  007244  D7D2               	goto	l3585
 13144                           
 13145                           ;menu.c: 904: }
 13146                           ;menu.c: 906: if(savesMenu.selector == 4){eepromExit();}
 13147  007246  0E04               	movlw	4
 13148  007248  0100               	movlb	0	; () banked
 13149  00724A  19E1               	xorwf	(_savesMenu+2)& (0+255),w,b
 13150  00724C  A4D8               	btfss	status,2,c
 13151  00724E  D003               	goto	l3588
 13152                           
 13153                           ; BSR set to: 0
 13154  007250  EC43  F048         	call	_eepromExit	;wreg free
 13155  007254  D011               	goto	l3589
 13156  007256                     l3588:
 13157                           
 13158                           ;menu.c: 907: else {
 13159                           ;menu.c: 909: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 13160  007256  ECED  F04A         	call	_Busy_eep	;wreg free
 13161  00725A  0E00               	movlw	0
 13162  00725C  0100               	movlb	0	; () banked
 13163  00725E  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 13164  007260  0E00               	movlw	0
 13165  007262  6F60               	movwf	Write_b_eep@badd& (0+255),b
 13166  007264  29E1               	incf	(_savesMenu+2)& (0+255),w,b
 13167  007266  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 13168  007268  ECA8  F047         	call	_Write_b_eep	;wreg free
 13169                           
 13170                           ;menu.c: 910: loadFromEEPROM(savesMenu.selector + 1);
 13171  00726C  0100               	movlb	0	; () banked
 13172  00726E  29E1               	incf	(_savesMenu+2)& (0+255),w,b
 13173  007270  ECD0  F025         	call	_loadFromEEPROM
 13174                           
 13175                           ;menu.c: 911: exitLoad();
 13176  007274  EC07  F048         	call	_exitLoad	;wreg free
 13177  007278                     l3589:
 13178                           
 13179                           ;menu.c: 912: }
 13180                           ;menu.c: 914: savesMenu.selector = 0;
 13181  007278  0E00               	movlw	0
 13182  00727A  0100               	movlb	0	; () banked
 13183  00727C  6FE1               	movwf	(_savesMenu+2)& (0+255),b
 13184                           
 13185                           ; BSR set to: 0
 13186  00727E  0012               	return		;funcret
 13187  007280                     __end_of_Function_G_2:
 13188                           	opt stack 0
 13189                           tblptru	equ	0xFF8
 13190                           tblptrh	equ	0xFF7
 13191                           tblptrl	equ	0xFF6
 13192                           tablat	equ	0xFF5
 13193                           prodh	equ	0xFF4
 13194                           prodl	equ	0xFF3
 13195                           intcon	equ	0xFF2
 13196                           intcon2	equ	0xFF1
 13197                           postinc0	equ	0xFEE
 13198                           wreg	equ	0xFE8
 13199                           postdec1	equ	0xFE5
 13200                           fsr1l	equ	0xFE1
 13201                           indf2	equ	0xFDF
 13202                           postinc2	equ	0xFDE
 13203                           fsr2h	equ	0xFDA
 13204                           fsr2l	equ	0xFD9
 13205                           status	equ	0xFD8
 13206                           
 13207 ;; *************** function _loadFromEEPROM *****************
 13208 ;; Defined at:
 13209 ;;		line 54 in file "eeprom.c"
 13210 ;; Parameters:    Size  Location     Type
 13211 ;;  slotNumber      1    wreg     unsigned char 
 13212 ;; Auto vars:     Size  Location     Type
 13213 ;;  slotNumber      1   77[BANK1 ] unsigned char 
 13214 ;;  byte_count      2   78[BANK1 ] unsigned int 
 13215 ;;  to_load        75    0[BANK1 ] unsigned char [75]
 13216 ;;  baseAddress     2   75[BANK1 ] unsigned int 
 13217 ;; Return value:  Size  Location     Type
 13218 ;;                  1    wreg      void 
 13219 ;; Registers used:
 13220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13221 ;; Tracked objects:
 13222 ;;		On entry : 0/0
 13223 ;;		On exit  : 0/0
 13224 ;;		Unchanged: 0/0
 13225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13227 ;;      Locals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13229 ;;      Totals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13230 ;;Total ram usage:       80 bytes
 13231 ;; Hardware stack levels used:    1
 13232 ;; Hardware stack levels required when called:    7
 13233 ;; This function calls:
 13234 ;;		_Read_b_eep
 13235 ;;		_calculate_pulse_length
 13236 ;; This function is called by:
 13237 ;;		_Function_G_2
 13238 ;;		_selectSlotOnBoot
 13239 ;; This function uses a non-reentrant model
 13240 ;;
 13241                           
 13242                           	psect	text30
 13243  004BA0                     __ptext30:
 13244                           	opt stack 0
 13245  004BA0                     _loadFromEEPROM:
 13246                           	opt stack 22
 13247                           
 13248                           ; BSR set to: 0
 13249                           ;incstack = 0
 13250                           ;loadFromEEPROM@slotNumber stored from wreg
 13251  004BA0  0101               	movlb	1	; () banked
 13252  004BA2  6FD4               	movwf	loadFromEEPROM@slotNumber& (0+255),b
 13253                           
 13254                           ;eeprom.c: 56: unsigned int baseAddress = 0;
 13255  004BA4  0E00               	movlw	0
 13256  004BA6  0101               	movlb	1	; () banked
 13257  004BA8  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13258  004BAA  0E00               	movlw	0
 13259  004BAC  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13260                           
 13261                           ; BSR set to: 1
 13262                           ;eeprom.c: 59: if (slotNumber == SLOT1) {baseAddress = 128;}
 13263  004BAE  05D4               	decf	loadFromEEPROM@slotNumber& (0+255),w,b
 13264  004BB0  A4D8               	btfss	status,2,c
 13265  004BB2  D004               	goto	l4278
 13266                           
 13267                           ; BSR set to: 1
 13268  004BB4  0E00               	movlw	0
 13269  004BB6  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13270  004BB8  0E80               	movlw	128
 13271  004BBA  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13272  004BBC                     l4278:
 13273                           
 13274                           ; BSR set to: 1
 13275                           ;eeprom.c: 60: if (slotNumber == SLOT2) {baseAddress = 256;}
 13276                           
 13277                           ; BSR set to: 1
 13278  004BBC  0E02               	movlw	2
 13279  004BBE  19D4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13280  004BC0  A4D8               	btfss	status,2,c
 13281  004BC2  D004               	goto	l4279
 13282                           
 13283                           ; BSR set to: 1
 13284  004BC4  0E01               	movlw	1
 13285  004BC6  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13286  004BC8  0E00               	movlw	0
 13287  004BCA  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13288  004BCC                     l4279:
 13289                           
 13290                           ; BSR set to: 1
 13291                           ;eeprom.c: 61: if (slotNumber == SLOT3) {baseAddress = 384;}
 13292                           
 13293                           ; BSR set to: 1
 13294  004BCC  0E03               	movlw	3
 13295  004BCE  19D4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13296  004BD0  A4D8               	btfss	status,2,c
 13297  004BD2  D004               	goto	l4280
 13298                           
 13299                           ; BSR set to: 1
 13300  004BD4  0E01               	movlw	1
 13301  004BD6  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13302  004BD8  0E80               	movlw	128
 13303  004BDA  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13304  004BDC                     l4280:
 13305                           
 13306                           ; BSR set to: 1
 13307                           ;eeprom.c: 62: if (slotNumber == SLOT4) {baseAddress = 512;}
 13308                           
 13309                           ; BSR set to: 1
 13310  004BDC  0E04               	movlw	4
 13311  004BDE  19D4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13312  004BE0  A4D8               	btfss	status,2,c
 13313  004BE2  D004               	goto	l4281
 13314                           
 13315                           ; BSR set to: 1
 13316  004BE4  0E02               	movlw	2
 13317  004BE6  6FD3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13318  004BE8  0E00               	movlw	0
 13319  004BEA  6FD2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13320  004BEC                     l4281:
 13321                           
 13322                           ; BSR set to: 1
 13323                           ;eeprom.c: 65: unsigned char to_load[75];
 13324                           ;eeprom.c: 68: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 13325  004BEC  0E00               	movlw	0
 13326  004BEE  6FD6               	movwf	(loadFromEEPROM@byte_count+1)& (0+255),b
 13327  004BF0  0E00               	movlw	0
 13328  004BF2  6FD5               	movwf	loadFromEEPROM@byte_count& (0+255),b
 13329                           
 13330                           ; BSR set to: 1
 13331  004BF4  51D6               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13332  004BF6  E11C               	bnz	l4283
 13333  004BF8  D017               	goto	L1
 13334  004BFA                     
 13335                           ; BSR set to: 1
 13336                           ;eeprom.c: 69: to_load[byte_count] = Read_b_eep(byte_count + baseAddress);
 13337                           
 13338                           ; BSR set to: 1
 13339  004BFA  0E87               	movlw	low loadFromEEPROM@to_load
 13340  004BFC  25D5               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13341  004BFE  6ED9               	movwf	fsr2l,c
 13342  004C00  0E01               	movlw	high loadFromEEPROM@to_load
 13343  004C02  21D6               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13344  004C04  6EDA               	movwf	fsr2h,c
 13345  004C06  51D2               	movf	loadFromEEPROM@baseAddress& (0+255),w,b
 13346  004C08  25D5               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13347  004C0A  0100               	movlb	0	; () banked
 13348  004C0C  6F60               	movwf	Read_b_eep@badd& (0+255),b
 13349  004C0E  0101               	movlb	1	; () banked
 13350  004C10  51D3               	movf	(loadFromEEPROM@baseAddress+1)& (0+255),w,b
 13351  004C12  21D6               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13352  004C14  0100               	movlb	0	; () banked
 13353  004C16  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 13354  004C18  ECA6  F04A         	call	_Read_b_eep	;wreg free
 13355  004C1C  6EDF               	movwf	indf2,c
 13356  004C1E  0101               	movlb	1	; () banked
 13357  004C20  4BD5               	infsnz	loadFromEEPROM@byte_count& (0+255),f,b
 13358  004C22  2BD6               	incf	(loadFromEEPROM@byte_count+1)& (0+255),f,b
 13359                           
 13360                           ; BSR set to: 1
 13361  004C24  51D6               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13362  004C26  E104               	bnz	u28670
 13363  004C28                     L1:
 13364  004C28  0E4B               	movlw	75
 13365  004C2A  5DD5               	subwf	loadFromEEPROM@byte_count& (0+255),w,b
 13366  004C2C  A0D8               	btfss	status,0,c
 13367  004C2E  D7E5               	goto	l4282
 13368  004C30                     u28670:
 13369  004C30                     l4283:
 13370                           
 13371                           ; BSR set to: 1
 13372                           ;eeprom.c: 70: }
 13373                           ;eeprom.c: 75: KEYBOARD_MODE = to_load[0];
 13374  004C30  C187  F0F2         	movff	loadFromEEPROM@to_load,_KEYBOARD_MODE
 13375                           
 13376                           ;eeprom.c: 76: which_mode = to_load[1];
 13377  004C34  C188  F0F1         	movff	loadFromEEPROM@to_load+1,_which_mode
 13378                           
 13379                           ;eeprom.c: 77: which_triad = to_load[2];
 13380  004C38  C189  F0F0         	movff	loadFromEEPROM@to_load+2,_which_triad
 13381                           
 13382                           ;eeprom.c: 78: which_seventh = to_load[3];
 13383  004C3C  C18A  F0EF         	movff	loadFromEEPROM@to_load+3,_which_seventh
 13384                           
 13385                           ;eeprom.c: 81: TRANSPOSE_MODE = to_load[4];
 13386  004C40  A18B               	btfss	(loadFromEEPROM@to_load+4)& (0+255),0,b
 13387  004C42  D002               	goto	u28680
 13388  004C44  8A35               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13389  004C46  D001               	goto	u28695
 13390  004C48                     u28680:
 13391  004C48  9A35               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13392  004C4A                     u28695:
 13393                           
 13394                           ;eeprom.c: 84: DRUM_MODE = to_load[5];
 13395  004C4A  0101               	movlb	1	; () banked
 13396  004C4C  A18C               	btfss	(loadFromEEPROM@to_load+5)& (0+255),0,b
 13397  004C4E  D002               	goto	u28700
 13398  004C50  8832               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13399  004C52  D001               	goto	u28715
 13400  004C54                     u28700:
 13401  004C54  9832               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13402  004C56                     u28715:
 13403                           
 13404                           ;eeprom.c: 85: CONTROL_MODE = to_load[6];
 13405  004C56  0101               	movlb	1	; () banked
 13406  004C58  A18D               	btfss	(loadFromEEPROM@to_load+6)& (0+255),0,b
 13407  004C5A  D002               	goto	u28720
 13408  004C5C  8632               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13409  004C5E  D001               	goto	u28735
 13410  004C60                     u28720:
 13411  004C60  9632               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13412  004C62                     u28735:
 13413                           
 13414                           ;eeprom.c: 88: DRUM_NOTE[0] = to_load[7];
 13415  004C62  C18E  F1DF         	movff	loadFromEEPROM@to_load+7,_DRUM_NOTE
 13416                           
 13417                           ;eeprom.c: 89: DRUM_NOTE[1] = to_load[8];
 13418  004C66  C18F  F1E0         	movff	loadFromEEPROM@to_load+8,_DRUM_NOTE+1
 13419                           
 13420                           ;eeprom.c: 90: DRUM_NOTE[2] = to_load[9];
 13421  004C6A  C190  F1E1         	movff	loadFromEEPROM@to_load+9,_DRUM_NOTE+2
 13422                           
 13423                           ;eeprom.c: 91: DRUM_NOTE[3] = to_load[10];
 13424  004C6E  C191  F1E2         	movff	loadFromEEPROM@to_load+10,_DRUM_NOTE+3
 13425                           
 13426                           ;eeprom.c: 92: DRUM_NOTE[4] = to_load[11];
 13427  004C72  C192  F1E3         	movff	loadFromEEPROM@to_load+11,_DRUM_NOTE+4
 13428                           
 13429                           ;eeprom.c: 93: DRUM_NOTE[5] = to_load[12];
 13430  004C76  C193  F1E4         	movff	loadFromEEPROM@to_load+12,_DRUM_NOTE+5
 13431                           
 13432                           ;eeprom.c: 94: DRUM_NOTE[6] = to_load[13];
 13433  004C7A  C194  F1E5         	movff	loadFromEEPROM@to_load+13,_DRUM_NOTE+6
 13434                           
 13435                           ;eeprom.c: 95: DRUM_NOTE[7] = to_load[14];
 13436  004C7E  C195  F1E6         	movff	loadFromEEPROM@to_load+14,_DRUM_NOTE+7
 13437                           
 13438                           ;eeprom.c: 98: DRUM_CC[0] = to_load[15];
 13439  004C82  C196  F1D7         	movff	loadFromEEPROM@to_load+15,_DRUM_CC
 13440                           
 13441                           ;eeprom.c: 99: DRUM_CC[1] = to_load[16];
 13442  004C86  C197  F1D8         	movff	loadFromEEPROM@to_load+16,_DRUM_CC+1
 13443                           
 13444                           ;eeprom.c: 100: DRUM_CC[2] = to_load[17];
 13445  004C8A  C198  F1D9         	movff	loadFromEEPROM@to_load+17,_DRUM_CC+2
 13446                           
 13447                           ;eeprom.c: 101: DRUM_CC[3] = to_load[18];
 13448  004C8E  C199  F1DA         	movff	loadFromEEPROM@to_load+18,_DRUM_CC+3
 13449                           
 13450                           ;eeprom.c: 102: DRUM_CC[4] = to_load[19];
 13451  004C92  C19A  F1DB         	movff	loadFromEEPROM@to_load+19,_DRUM_CC+4
 13452                           
 13453                           ;eeprom.c: 103: DRUM_CC[5] = to_load[20];
 13454  004C96  C19B  F1DC         	movff	loadFromEEPROM@to_load+20,_DRUM_CC+5
 13455                           
 13456                           ;eeprom.c: 104: DRUM_CC[6] = to_load[21];
 13457  004C9A  C19C  F1DD         	movff	loadFromEEPROM@to_load+21,_DRUM_CC+6
 13458                           
 13459                           ;eeprom.c: 105: DRUM_CC[7] = to_load[22];
 13460  004C9E  C19D  F1DE         	movff	loadFromEEPROM@to_load+22,_DRUM_CC+7
 13461                           
 13462                           ;eeprom.c: 108: POT_MODE = to_load[23];
 13463  004CA2  0101               	movlb	1	; () banked
 13464  004CA4  A19E               	btfss	(loadFromEEPROM@to_load+23)& (0+255),0,b
 13465  004CA6  D002               	goto	u28740
 13466  004CA8  8636               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13467  004CAA  D001               	goto	u28755
 13468  004CAC                     u28740:
 13469  004CAC  9636               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13470  004CAE                     u28755:
 13471                           
 13472                           ;eeprom.c: 111: inputPotsArray[0].controller_number = to_load[24];
 13473  004CAE  C19F  F2AD         	movff	loadFromEEPROM@to_load+24,_inputPotsArray+1
 13474                           
 13475                           ;eeprom.c: 112: inputPotsArray[0].controller_number_two_byte = to_load[25];
 13476  004CB2  C1A0  F2AE         	movff	loadFromEEPROM@to_load+25,_inputPotsArray+2
 13477                           
 13478                           ;eeprom.c: 114: inputPotsArray[1].controller_number = to_load[26];
 13479  004CB6  C1A1  F2B0         	movff	loadFromEEPROM@to_load+26,_inputPotsArray+4
 13480                           
 13481                           ;eeprom.c: 115: inputPotsArray[1].controller_number_two_byte = to_load[27];
 13482  004CBA  C1A2  F2B1         	movff	loadFromEEPROM@to_load+27,_inputPotsArray+5
 13483                           
 13484                           ;eeprom.c: 117: inputPotsArray[2].controller_number = to_load[28];
 13485  004CBE  C1A3  F2B3         	movff	loadFromEEPROM@to_load+28,_inputPotsArray+7
 13486                           
 13487                           ;eeprom.c: 118: inputPotsArray[2].controller_number_two_byte = to_load[29];
 13488  004CC2  C1A4  F2B4         	movff	loadFromEEPROM@to_load+29,_inputPotsArray+8
 13489                           
 13490                           ;eeprom.c: 120: inputPotsArray[3].controller_number = to_load[30];
 13491  004CC6  C1A5  F2B6         	movff	loadFromEEPROM@to_load+30,_inputPotsArray+10
 13492                           
 13493                           ;eeprom.c: 121: inputPotsArray[3].controller_number_two_byte = to_load[31];
 13494  004CCA  C1A6  F2B7         	movff	loadFromEEPROM@to_load+31,_inputPotsArray+11
 13495                           
 13496                           ;eeprom.c: 123: inputPotsArray[4].controller_number = to_load[32];
 13497  004CCE  C1A7  F2B9         	movff	loadFromEEPROM@to_load+32,_inputPotsArray+13
 13498                           
 13499                           ;eeprom.c: 124: inputPotsArray[4].controller_number_two_byte = to_load[33];
 13500  004CD2  C1A8  F2BA         	movff	loadFromEEPROM@to_load+33,_inputPotsArray+14
 13501                           
 13502                           ;eeprom.c: 126: inputPotsArray[5].controller_number = to_load[34];
 13503  004CD6  C1A9  F2BC         	movff	loadFromEEPROM@to_load+34,_inputPotsArray+16
 13504                           
 13505                           ;eeprom.c: 127: inputPotsArray[5].controller_number_two_byte = to_load[35];
 13506  004CDA  C1AA  F2BD         	movff	loadFromEEPROM@to_load+35,_inputPotsArray+17
 13507                           
 13508                           ;eeprom.c: 129: inputPotsArray[6].controller_number = to_load[36];
 13509  004CDE  C1AB  F2BF         	movff	loadFromEEPROM@to_load+36,_inputPotsArray+19
 13510                           
 13511                           ;eeprom.c: 130: inputPotsArray[6].controller_number_two_byte = to_load[37];
 13512  004CE2  C1AC  F2C0         	movff	loadFromEEPROM@to_load+37,_inputPotsArray+20
 13513                           
 13514                           ;eeprom.c: 134: inputPotsArray[7].controller_number = to_load[38];
 13515  004CE6  C1AD  F2C2         	movff	loadFromEEPROM@to_load+38,_inputPotsArray+22
 13516                           
 13517                           ;eeprom.c: 135: inputPotsArray[7].controller_number_two_byte = to_load[39];
 13518  004CEA  C1AE  F2C3         	movff	loadFromEEPROM@to_load+39,_inputPotsArray+23
 13519                           
 13520                           ;eeprom.c: 137: inputPotsArray[8].controller_number = to_load[40];
 13521  004CEE  C1AF  F2C5         	movff	loadFromEEPROM@to_load+40,_inputPotsArray+25
 13522                           
 13523                           ;eeprom.c: 138: inputPotsArray[8].controller_number_two_byte = to_load[41];
 13524  004CF2  C1B0  F2C6         	movff	loadFromEEPROM@to_load+41,_inputPotsArray+26
 13525                           
 13526                           ;eeprom.c: 140: inputPotsArray[9].controller_number = to_load[42];
 13527  004CF6  C1B1  F2C8         	movff	loadFromEEPROM@to_load+42,_inputPotsArray+28
 13528                           
 13529                           ;eeprom.c: 141: inputPotsArray[9].controller_number_two_byte = to_load[43];
 13530  004CFA  C1B2  F2C9         	movff	loadFromEEPROM@to_load+43,_inputPotsArray+29
 13531                           
 13532                           ;eeprom.c: 143: inputPotsArray[10].controller_number = to_load[44];
 13533  004CFE  C1B3  F2CB         	movff	loadFromEEPROM@to_load+44,_inputPotsArray+31
 13534                           
 13535                           ;eeprom.c: 144: inputPotsArray[10].controller_number_two_byte = to_load[45];
 13536  004D02  C1B4  F2CC         	movff	loadFromEEPROM@to_load+45,_inputPotsArray+32
 13537                           
 13538                           ;eeprom.c: 146: inputPotsArray[11].controller_number = to_load[46];
 13539  004D06  C1B5  F2CE         	movff	loadFromEEPROM@to_load+46,_inputPotsArray+34
 13540                           
 13541                           ;eeprom.c: 147: inputPotsArray[11].controller_number_two_byte = to_load[47];
 13542  004D0A  C1B6  F2CF         	movff	loadFromEEPROM@to_load+47,_inputPotsArray+35
 13543                           
 13544                           ;eeprom.c: 149: inputPotsArray[12].controller_number = to_load[48];
 13545  004D0E  C1B7  F2D1         	movff	loadFromEEPROM@to_load+48,_inputPotsArray+37
 13546                           
 13547                           ;eeprom.c: 150: inputPotsArray[12].controller_number_two_byte = to_load[49];
 13548  004D12  C1B8  F2D2         	movff	loadFromEEPROM@to_load+49,_inputPotsArray+38
 13549                           
 13550                           ;eeprom.c: 152: inputPotsArray[13].controller_number = to_load[50];
 13551  004D16  C1B9  F2D4         	movff	loadFromEEPROM@to_load+50,_inputPotsArray+40
 13552                           
 13553                           ;eeprom.c: 153: inputPotsArray[13].controller_number_two_byte = to_load[51];
 13554  004D1A  C1BA  F2D5         	movff	loadFromEEPROM@to_load+51,_inputPotsArray+41
 13555                           
 13556                           ;eeprom.c: 155: inputPotsArray[14].controller_number = to_load[52];
 13557  004D1E  C1BB  F2D7         	movff	loadFromEEPROM@to_load+52,_inputPotsArray+43
 13558                           
 13559                           ;eeprom.c: 156: inputPotsArray[14].controller_number_two_byte = to_load[53];
 13560  004D22  C1BC  F2D8         	movff	loadFromEEPROM@to_load+53,_inputPotsArray+44
 13561                           
 13562                           ;eeprom.c: 158: inputPotsArray[15].controller_number = to_load[54];
 13563  004D26  C1BD  F2DA         	movff	loadFromEEPROM@to_load+54,_inputPotsArray+46
 13564                           
 13565                           ;eeprom.c: 159: inputPotsArray[15].controller_number_two_byte = to_load[55];
 13566  004D2A  C1BE  F2DB         	movff	loadFromEEPROM@to_load+55,_inputPotsArray+47
 13567                           
 13568                           ;eeprom.c: 163: channel = to_load[56];
 13569  004D2E  C1BF  F0F6         	movff	loadFromEEPROM@to_load+56,_channel
 13570                           
 13571                           ;eeprom.c: 164: drumchannel = to_load[57];
 13572  004D32  C1C0  F0FE         	movff	loadFromEEPROM@to_load+57,_drumchannel
 13573                           
 13574                           ;eeprom.c: 167: octave = to_load[58];
 13575  004D36  C1C1  F0FC         	movff	loadFromEEPROM@to_load+58,_octave
 13576                           
 13577                           ;eeprom.c: 168: semitone = to_load[59];
 13578  004D3A  C1C2  F0F3         	movff	loadFromEEPROM@to_load+59,_semitone
 13579                           
 13580                           ;eeprom.c: 171: patch_number = to_load[60];
 13581  004D3E  C1C3  F171         	movff	loadFromEEPROM@to_load+60,_patch_number
 13582                           
 13583                           ;eeprom.c: 174: ARPEGGIO_ON = to_load[61];
 13584  004D42  0101               	movlb	1	; () banked
 13585  004D44  A1C4               	btfss	(loadFromEEPROM@to_load+61)& (0+255),0,b
 13586  004D46  D002               	goto	u28760
 13587  004D48  8635               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13588  004D4A  D001               	goto	u28775
 13589  004D4C                     u28760:
 13590  004D4C  9635               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13591  004D4E                     u28775:
 13592                           
 13593                           ;eeprom.c: 175: BPM = to_load[62];
 13594  004D4E  C1C5  F0FF         	movff	loadFromEEPROM@to_load+62,_BPM
 13595                           
 13596                           ;eeprom.c: 177: TIMER_PRELOAD = calculate_pulse_length();
 13597  004D52  EC46  F02E         	call	_calculate_pulse_length	;wreg free
 13598  004D56  C0C2  F16D         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 13599  004D5A  C0C3  F16E         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 13600                           
 13601                           ;eeprom.c: 179: OCTAVES = to_load[63];
 13602  004D5E  C1C6  F0F8         	movff	loadFromEEPROM@to_load+63,_OCTAVES
 13603                           
 13604                           ;eeprom.c: 180: ARPEGGIO_TYPE = to_load[64];
 13605  004D62  C1C7  F0EA         	movff	loadFromEEPROM@to_load+64,_ARPEGGIO_TYPE
 13606                           
 13607                           ;eeprom.c: 181: NOTE_LENGTH_PULSES = to_load[65];
 13608  004D66  C1C8  F0F7         	movff	loadFromEEPROM@to_load+65,_NOTE_LENGTH_PULSES
 13609                           
 13610                           ;eeprom.c: 182: LATCH = to_load[66];
 13611  004D6A  0101               	movlb	1	; () banked
 13612  004D6C  A1C9               	btfss	(loadFromEEPROM@to_load+66)& (0+255),0,b
 13613  004D6E  D002               	goto	u28780
 13614  004D70  8035               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 13615  004D72  D001               	goto	u28795
 13616  004D74                     u28780:
 13617  004D74  9035               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 13618  004D76                     u28795:
 13619                           
 13620                           ;eeprom.c: 183: AUTO_LATCH = to_load[67];
 13621  004D76  0101               	movlb	1	; () banked
 13622  004D78  A1CA               	btfss	(loadFromEEPROM@to_load+67)& (0+255),0,b
 13623  004D7A  D002               	goto	u28800
 13624  004D7C  8C34               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13625  004D7E  D001               	goto	u28815
 13626  004D80                     u28800:
 13627  004D80  9C34               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13628  004D82                     u28815:
 13629                           
 13630                           ;eeprom.c: 184: UN_LATCH_MODE = to_load[68];
 13631  004D82  0101               	movlb	1	; () banked
 13632  004D84  A1CB               	btfss	(loadFromEEPROM@to_load+68)& (0+255),0,b
 13633  004D86  D002               	goto	u28820
 13634  004D88  8E34               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13635  004D8A  D001               	goto	u28835
 13636  004D8C                     u28820:
 13637  004D8C  9E34               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13638  004D8E                     u28835:
 13639                           
 13640                           ;eeprom.c: 185: AUTO_RANDOMIZE = to_load[69];
 13641  004D8E  0101               	movlb	1	; () banked
 13642  004D90  A1CC               	btfss	(loadFromEEPROM@to_load+69)& (0+255),0,b
 13643  004D92  D002               	goto	u28840
 13644  004D94  8834               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13645  004D96  D001               	goto	u28855
 13646  004D98                     u28840:
 13647  004D98  9834               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13648  004D9A                     u28855:
 13649                           
 13650                           ;eeprom.c: 186: skipFirstLast = to_load[70];
 13651  004D9A  0101               	movlb	1	; () banked
 13652  004D9C  A1CD               	btfss	(loadFromEEPROM@to_load+70)& (0+255),0,b
 13653  004D9E  D002               	goto	u28860
 13654  004DA0  8634               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13655  004DA2  D001               	goto	u28875
 13656  004DA4                     u28860:
 13657  004DA4  9634               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13658  004DA6                     u28875:
 13659                           
 13660                           ;eeprom.c: 187: LAST_NOTE_MODE_KEY_PRESS = to_load[71];
 13661  004DA6  0101               	movlb	1	; () banked
 13662  004DA8  A1CE               	btfss	(loadFromEEPROM@to_load+71)& (0+255),0,b
 13663  004DAA  D002               	goto	u28880
 13664  004DAC  8234               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13665  004DAE  D001               	goto	u28895
 13666  004DB0                     u28880:
 13667  004DB0  9234               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13668  004DB2                     u28895:
 13669                           
 13670                           ;eeprom.c: 188: LAST_NOTE_MODE_KEY_RELEASE = to_load[72];
 13671  004DB2  0101               	movlb	1	; () banked
 13672  004DB4  A1CF               	btfss	(loadFromEEPROM@to_load+72)& (0+255),0,b
 13673  004DB6  D002               	goto	u28900
 13674  004DB8  8034               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13675  004DBA  D001               	goto	u28915
 13676  004DBC                     u28900:
 13677  004DBC  9034               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13678  004DBE                     u28915:
 13679                           
 13680                           ;eeprom.c: 189: LAST_NOTE_MODE_TRANSPOSE = to_load[73];
 13681  004DBE  0101               	movlb	1	; () banked
 13682  004DC0  A1D0               	btfss	(loadFromEEPROM@to_load+73)& (0+255),0,b
 13683  004DC2  D002               	goto	u28920
 13684  004DC4  8E33               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13685  004DC6  D001               	goto	u28935
 13686  004DC8                     u28920:
 13687  004DC8  9E33               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13688  004DCA                     u28935:
 13689                           
 13690                           ;eeprom.c: 190: LAST_NOTE_MODE_RESET = to_load[74];
 13691  004DCA  0101               	movlb	1	; () banked
 13692  004DCC  A1D1               	btfss	(loadFromEEPROM@to_load+74)& (0+255),0,b
 13693  004DCE  D002               	goto	u28940
 13694  004DD0  8C33               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13695  004DD2  0012               	return	
 13696  004DD4                     u28940:
 13697  004DD4  9C33               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13698  004DD6  0012               	return		;funcret
 13699  004DD8                     __end_of_loadFromEEPROM:
 13700                           	opt stack 0
 13701                           tblptru	equ	0xFF8
 13702                           tblptrh	equ	0xFF7
 13703                           tblptrl	equ	0xFF6
 13704                           tablat	equ	0xFF5
 13705                           prodh	equ	0xFF4
 13706                           prodl	equ	0xFF3
 13707                           intcon	equ	0xFF2
 13708                           intcon2	equ	0xFF1
 13709                           postinc0	equ	0xFEE
 13710                           wreg	equ	0xFE8
 13711                           postdec1	equ	0xFE5
 13712                           fsr1l	equ	0xFE1
 13713                           indf2	equ	0xFDF
 13714                           postinc2	equ	0xFDE
 13715                           fsr2h	equ	0xFDA
 13716                           fsr2l	equ	0xFD9
 13717                           status	equ	0xFD8
 13718                           
 13719 ;; *************** function _calculate_pulse_length *****************
 13720 ;; Defined at:
 13721 ;;		line 137 in file "arpeggio.c"
 13722 ;; Parameters:    Size  Location     Type
 13723 ;;		None
 13724 ;; Auto vars:     Size  Location     Type
 13725 ;;  s_tick          4  100[BANK0 ] void 
 13726 ;; Return value:  Size  Location     Type
 13727 ;;                  2   98[BANK0 ] unsigned short 
 13728 ;; Registers used:
 13729 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13730 ;; Tracked objects:
 13731 ;;		On entry : 0/0
 13732 ;;		On exit  : 0/0
 13733 ;;		Unchanged: 0/0
 13734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13735 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13739 ;;Total ram usage:       10 bytes
 13740 ;; Hardware stack levels used:    1
 13741 ;; Hardware stack levels required when called:    6
 13742 ;; This function calls:
 13743 ;;		___fladd
 13744 ;;		___fldiv
 13745 ;;		___flmul
 13746 ;;		___flneg
 13747 ;;		___fltol
 13748 ;;		___xxtofl
 13749 ;; This function is called by:
 13750 ;;		_Function_H_2
 13751 ;;		_loadFromEEPROM
 13752 ;;		_main
 13753 ;; This function uses a non-reentrant model
 13754 ;;
 13755                           
 13756                           	psect	text31
 13757  005C8C                     __ptext31:
 13758                           	opt stack 0
 13759  005C8C                     _calculate_pulse_length:
 13760                           	opt stack 22
 13761                           
 13762                           ;arpeggio.c: 144: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13763                           
 13764                           ;incstack = 0
 13765  005C8C  0E00               	movlw	0
 13766  005C8E  0100               	movlb	0	; () banked
 13767  005C90  6F8B               	movwf	___fldiv@a& (0+255),b
 13768  005C92  0E00               	movlw	0
 13769  005C94  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 13770  005C96  0E70               	movlw	112
 13771  005C98  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 13772  005C9A  0E42               	movlw	66
 13773  005C9C  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 13774  005C9E  51FF               	movf	_BPM& (0+255),w,b
 13775  005CA0  025E               	mulwf	_PPQN,c
 13776  005CA2  CFF3 F060          	movff	prodl,___xxtofl@val
 13777  005CA6  CFF4 F061          	movff	prodh,___xxtofl@val+1
 13778  005CAA  0E00               	movlw	0
 13779  005CAC  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 13780  005CAE  0EFF               	movlw	-1
 13781  005CB0  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 13782  005CB2  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 13783  005CB4  0E01               	movlw	1
 13784  005CB6  ECF5  F02E         	call	___xxtofl
 13785  005CBA  C060  F087         	movff	?___xxtofl,___fldiv@b
 13786  005CBE  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 13787  005CC2  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 13788  005CC6  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 13789  005CCA  ECC6  F01C         	call	___fldiv	;wreg free
 13790  005CCE  C087  F0C8         	movff	?___fldiv,_calculate_pulse_length$5801
 13791  005CD2  C088  F0C9         	movff	?___fldiv+1,_calculate_pulse_length$5801+1
 13792  005CD6  C089  F0CA         	movff	?___fldiv+2,_calculate_pulse_length$5801+2
 13793  005CDA  C08A  F0CB         	movff	?___fldiv+3,_calculate_pulse_length$5801+3
 13794                           
 13795                           ;arpeggio.c: 144: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13796  005CDE  0E00               	movlw	0
 13797  005CE0  0100               	movlb	0	; () banked
 13798  005CE2  6F87               	movwf	___fldiv@b& (0+255),b
 13799  005CE4  0E00               	movlw	0
 13800  005CE6  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 13801  005CE8  0E80               	movlw	128
 13802  005CEA  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 13803  005CEC  0E3F               	movlw	63
 13804  005CEE  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 13805  005CF0  C0C8  F08B         	movff	_calculate_pulse_length$5801,___fldiv@a
 13806  005CF4  C0C9  F08C         	movff	_calculate_pulse_length$5801+1,___fldiv@a+1
 13807  005CF8  C0CA  F08D         	movff	_calculate_pulse_length$5801+2,___fldiv@a+2
 13808  005CFC  C0CB  F08E         	movff	_calculate_pulse_length$5801+3,___fldiv@a+3
 13809  005D00  ECC6  F01C         	call	___fldiv	;wreg free
 13810  005D04  C087  F0C4         	movff	?___fldiv,calculate_pulse_length@s_tick
 13811  005D08  C088  F0C5         	movff	?___fldiv+1,calculate_pulse_length@s_tick+1
 13812  005D0C  C089  F0C6         	movff	?___fldiv+2,calculate_pulse_length@s_tick+2
 13813  005D10  C08A  F0C7         	movff	?___fldiv+3,calculate_pulse_length@s_tick+3
 13814                           
 13815                           ;arpeggio.c: 145: return (unsigned short) ((65535.0 - (s_tick * 20000000.0) / ( 4.0 * PR
      +                          ESCALER)) + 0.5);
 13816  005D14  0E80               	movlw	128
 13817  005D16  0100               	movlb	0	; () banked
 13818  005D18  6FA8               	movwf	___fladd@a& (0+255),b
 13819  005D1A  0EFF               	movlw	255
 13820  005D1C  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 13821  005D1E  0E7F               	movlw	127
 13822  005D20  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 13823  005D22  0E47               	movlw	71
 13824  005D24  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 13825  005D26  0E00               	movlw	0
 13826  005D28  6F72               	movwf	___flmul@a& (0+255),b
 13827  005D2A  0E00               	movlw	0
 13828  005D2C  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13829  005D2E  0E80               	movlw	128
 13830  005D30  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13831  005D32  0E40               	movlw	64
 13832  005D34  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13833  005D36  505D               	movf	_PRESCALER,w,c
 13834  005D38  6F60               	movwf	___xxtofl@val& (0+255),b
 13835  005D3A  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 13836  005D3C  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 13837  005D3E  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 13838  005D40  0E00               	movlw	0
 13839  005D42  ECF5  F02E         	call	___xxtofl
 13840  005D46  C060  F06E         	movff	?___xxtofl,___flmul@b
 13841  005D4A  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 13842  005D4E  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 13843  005D52  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 13844  005D56  EC7E  F019         	call	___flmul	;wreg free
 13845  005D5A  C06E  F08B         	movff	?___flmul,___fldiv@a
 13846  005D5E  C06F  F08C         	movff	?___flmul+1,___fldiv@a+1
 13847  005D62  C070  F08D         	movff	?___flmul+2,___fldiv@a+2
 13848  005D66  C071  F08E         	movff	?___flmul+3,___fldiv@a+3
 13849  005D6A  0E80               	movlw	128
 13850  005D6C  0100               	movlb	0	; () banked
 13851  005D6E  6F72               	movwf	___flmul@a& (0+255),b
 13852  005D70  0E96               	movlw	150
 13853  005D72  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13854  005D74  0E98               	movlw	152
 13855  005D76  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13856  005D78  0E4B               	movlw	75
 13857  005D7A  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13858  005D7C  C0C4  F06E         	movff	calculate_pulse_length@s_tick,___flmul@b
 13859  005D80  C0C5  F06F         	movff	calculate_pulse_length@s_tick+1,___flmul@b+1
 13860  005D84  C0C6  F070         	movff	calculate_pulse_length@s_tick+2,___flmul@b+2
 13861  005D88  C0C7  F071         	movff	calculate_pulse_length@s_tick+3,___flmul@b+3
 13862  005D8C  EC7E  F019         	call	___flmul	;wreg free
 13863  005D90  C06E  F087         	movff	?___flmul,___fldiv@b
 13864  005D94  C06F  F088         	movff	?___flmul+1,___fldiv@b+1
 13865  005D98  C070  F089         	movff	?___flmul+2,___fldiv@b+2
 13866  005D9C  C071  F08A         	movff	?___flmul+3,___fldiv@b+3
 13867  005DA0  ECC6  F01C         	call	___fldiv	;wreg free
 13868  005DA4  C087  F0A0         	movff	?___fldiv,___flneg@f1
 13869  005DA8  C088  F0A1         	movff	?___fldiv+1,___flneg@f1+1
 13870  005DAC  C089  F0A2         	movff	?___fldiv+2,___flneg@f1+2
 13871  005DB0  C08A  F0A3         	movff	?___fldiv+3,___flneg@f1+3
 13872  005DB4  EC59  F049         	call	___flneg	;wreg free
 13873  005DB8  C0A0  F0A4         	movff	?___flneg,___fladd@b
 13874  005DBC  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 13875  005DC0  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 13876  005DC4  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 13877  005DC8  EC27  F01B         	call	___fladd	;wreg free
 13878  005DCC  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 13879  005DD0  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 13880  005DD4  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 13881  005DD8  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 13882  005DDC  EC4E  F034         	call	___fltol	;wreg free
 13883  005DE0  C0B8  F0C2         	movff	?___fltol,?_calculate_pulse_length
 13884  005DE4  C0B9  F0C3         	movff	?___fltol+1,?_calculate_pulse_length+1
 13885  005DE8  0012               	return	
 13886  005DEA                     __end_of_calculate_pulse_length:
 13887                           	opt stack 0
 13888                           tblptru	equ	0xFF8
 13889                           tblptrh	equ	0xFF7
 13890                           tblptrl	equ	0xFF6
 13891                           tablat	equ	0xFF5
 13892                           prodh	equ	0xFF4
 13893                           prodl	equ	0xFF3
 13894                           intcon	equ	0xFF2
 13895                           intcon2	equ	0xFF1
 13896                           postinc0	equ	0xFEE
 13897                           wreg	equ	0xFE8
 13898                           postdec1	equ	0xFE5
 13899                           fsr1l	equ	0xFE1
 13900                           indf2	equ	0xFDF
 13901                           postinc2	equ	0xFDE
 13902                           fsr2h	equ	0xFDA
 13903                           fsr2l	equ	0xFD9
 13904                           status	equ	0xFD8
 13905                           
 13906 ;; *************** function _exitLoad *****************
 13907 ;; Defined at:
 13908 ;;		line 268 in file "menu.c"
 13909 ;; Parameters:    Size  Location     Type
 13910 ;;		None
 13911 ;; Auto vars:     Size  Location     Type
 13912 ;;		None
 13913 ;; Return value:  Size  Location     Type
 13914 ;;                  1    wreg      void 
 13915 ;; Registers used:
 13916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13917 ;; Tracked objects:
 13918 ;;		On entry : 0/0
 13919 ;;		On exit  : 0/0
 13920 ;;		Unchanged: 0/0
 13921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13924 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13925 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13926 ;;Total ram usage:        2 bytes
 13927 ;; Hardware stack levels used:    1
 13928 ;; Hardware stack levels required when called:    9
 13929 ;; This function calls:
 13930 ;;		_Lcd_Print_String
 13931 ;;		_clear_row1
 13932 ;; This function is called by:
 13933 ;;		_Function_G_2
 13934 ;; This function uses a non-reentrant model
 13935 ;;
 13936                           
 13937                           	psect	text32
 13938  00900E                     __ptext32:
 13939                           	opt stack 0
 13940  00900E                     _exitLoad:
 13941                           	opt stack 18
 13942                           
 13943                           ;menu.c: 270: while(encoder_click == 0);
 13944                           
 13945                           ;incstack = 0
 13946  00900E  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13947  009010  D7FE               	goto	_exitLoad
 13948                           
 13949                           ;menu.c: 271: clear_row1();
 13950  009012  EC1E  F04A         	call	_clear_row1	;wreg free
 13951                           
 13952                           ;menu.c: 272: Lcd_Print_String("Settings Loaded!");
 13953  009016  0E75               	movlw	low STR_22
 13954  009018  0100               	movlb	0	; () banked
 13955  00901A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 13956  00901C  0EFD               	movlw	high STR_22
 13957  00901E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13958  009020  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 13959                           
 13960                           ;menu.c: 273: _delay((unsigned long)((500)*(20000000/4000.0)));
 13961  009024  0E0D               	movlw	13
 13962  009026  0100               	movlb	0	; () banked
 13963  009028  6F71               	movwf	(??_exitLoad+1)& (0+255),b
 13964  00902A  0EAF               	movlw	175
 13965  00902C  6F70               	movwf	??_exitLoad& (0+255),b
 13966  00902E  0EB6               	movlw	182
 13967  009030                     u44797:
 13968  009030  2EE8               	decfsz	wreg,f,c
 13969  009032  D7FE               	bra	u44797
 13970  009034  2F70               	decfsz	??_exitLoad& (0+255),f,b
 13971  009036  D7FC               	bra	u44797
 13972  009038  2F71               	decfsz	(??_exitLoad+1)& (0+255),f,b
 13973  00903A  D7FA               	bra	u44797
 13974  00903C  F000               	nop	
 13975                           
 13976                           ;menu.c: 274: which_screen = MAIN_MENU;
 13977  00903E  0E02               	movlw	2
 13978  009040  0100               	movlb	0	; () banked
 13979  009042  6FF9               	movwf	_which_screen& (0+255),b
 13980                           
 13981                           ; BSR set to: 0
 13982                           ;menu.c: 275: lcd_print_once = 0;
 13983  009044  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13984                           
 13985                           ; BSR set to: 0
 13986                           ;menu.c: 276: encoder_click = 0;
 13987  009046  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13988                           
 13989                           ; BSR set to: 0
 13990  009048  0012               	return		;funcret
 13991  00904A                     __end_of_exitLoad:
 13992                           	opt stack 0
 13993                           tblptru	equ	0xFF8
 13994                           tblptrh	equ	0xFF7
 13995                           tblptrl	equ	0xFF6
 13996                           tablat	equ	0xFF5
 13997                           prodh	equ	0xFF4
 13998                           prodl	equ	0xFF3
 13999                           intcon	equ	0xFF2
 14000                           intcon2	equ	0xFF1
 14001                           postinc0	equ	0xFEE
 14002                           wreg	equ	0xFE8
 14003                           postdec1	equ	0xFE5
 14004                           fsr1l	equ	0xFE1
 14005                           indf2	equ	0xFDF
 14006                           postinc2	equ	0xFDE
 14007                           fsr2h	equ	0xFDA
 14008                           fsr2l	equ	0xFD9
 14009                           status	equ	0xFD8
 14010                           
 14011 ;; *************** function _Function_G_1 *****************
 14012 ;; Defined at:
 14013 ;;		line 860 in file "menu.c"
 14014 ;; Parameters:    Size  Location     Type
 14015 ;;		None
 14016 ;; Auto vars:     Size  Location     Type
 14017 ;;		None
 14018 ;; Return value:  Size  Location     Type
 14019 ;;                  1    wreg      void 
 14020 ;; Registers used:
 14021 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14022 ;; Tracked objects:
 14023 ;;		On entry : 0/0
 14024 ;;		On exit  : 0/0
 14025 ;;		Unchanged: 0/0
 14026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14030 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14031 ;;Total ram usage:        1 bytes
 14032 ;; Hardware stack levels used:    1
 14033 ;; Hardware stack levels required when called:   10
 14034 ;; This function calls:
 14035 ;;		_Busy_eep
 14036 ;;		_Lcd_Print_String
 14037 ;;		_Write_b_eep
 14038 ;;		___lbmod
 14039 ;;		___wmul
 14040 ;;		_clear_row1
 14041 ;;		_clear_row2
 14042 ;;		_eepromExit
 14043 ;;		_exitSave
 14044 ;;		_processEncoderBuxton
 14045 ;;		_saveToEEPROM
 14046 ;; This function is called by:
 14047 ;;		_Function_G
 14048 ;; This function uses a non-reentrant model
 14049 ;;
 14050                           
 14051                           	psect	text33
 14052  007280                     __ptext33:
 14053                           	opt stack 0
 14054  007280                     _Function_G_1:
 14055                           	opt stack 18
 14056                           
 14057                           ;menu.c: 862: which_screen = SAVES_MENU;
 14058                           
 14059                           ; BSR set to: 0
 14060                           ;incstack = 0
 14061  007280  0E17               	movlw	23
 14062  007282  0100               	movlb	0	; () banked
 14063  007284  6FF9               	movwf	_which_screen& (0+255),b
 14064                           
 14065                           ; BSR set to: 0
 14066                           ;menu.c: 863: encoder_click = 0;
 14067  007286  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14068                           
 14069                           ; BSR set to: 0
 14070                           ;menu.c: 864: lcd_print_once = 0;
 14071  007288  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14072                           
 14073                           ;menu.c: 866: while(encoder_click == 0) {
 14074  00728A  D02C               	goto	l3575
 14075  00728C                     
 14076                           ;menu.c: 867: processEncoderBuxton();
 14077                           
 14078                           ; BSR set to: 0
 14079  00728C  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14080                           
 14081                           ;menu.c: 868: if (lcd_print_once == 0) {
 14082  007290  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14083  007292  D027               	goto	l3577
 14084                           
 14085                           ;menu.c: 869: clear_row1();
 14086  007294  EC1E  F04A         	call	_clear_row1	;wreg free
 14087                           
 14088                           ;menu.c: 870: Lcd_Print_String("Save #:");
 14089  007298  0EBB               	movlw	low STR_35
 14090  00729A  0100               	movlb	0	; () banked
 14091  00729C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14092  00729E  0EFF               	movlw	high STR_35
 14093  0072A0  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14094  0072A2  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 14095                           
 14096                           ;menu.c: 871: clear_row2();
 14097  0072A6  EC0A  F04A         	call	_clear_row2	;wreg free
 14098                           
 14099                           ;menu.c: 872: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sav
      +                          esMenu.address]);
 14100  0072AA  C0DF  F060         	movff	_savesMenu,___lbmod@divisor
 14101  0072AE  0100               	movlb	0	; () banked
 14102  0072B0  51E1               	movf	(_savesMenu+2)& (0+255),w,b
 14103  0072B2  EC89  F049         	call	___lbmod
 14104  0072B6  0100               	movlb	0	; () banked
 14105  0072B8  6FB4               	movwf	??_Function_G_1& (0+255),b
 14106  0072BA  51B4               	movf	??_Function_G_1& (0+255),w,b
 14107  0072BC  25E0               	addwf	(_savesMenu+1)& (0+255),w,b
 14108  0072BE  6F64               	movwf	___wmul@multiplier& (0+255),b
 14109  0072C0  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 14110  0072C2  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14111  0072C4  0E00               	movlw	0
 14112  0072C6  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14113  0072C8  0E11               	movlw	17
 14114  0072CA  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14115  0072CC  EC32  F04A         	call	___wmul	;wreg free
 14116  0072D0  0E9E               	movlw	low _LCD_STRINGS
 14117  0072D2  0100               	movlb	0	; () banked
 14118  0072D4  2564               	addwf	?___wmul& (0+255),w,b
 14119  0072D6  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14120  0072D8  0EF3               	movlw	high _LCD_STRINGS
 14121  0072DA  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14122  0072DC  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14123  0072DE  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 14124  0072E2                     l3577:
 14125                           
 14126                           ;menu.c: 873: }
 14127                           ;menu.c: 874: lcd_print_once = 1;
 14128  0072E2  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14129  0072E4                     l3575:
 14130  0072E4  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14131  0072E6  D7D2               	goto	l3576
 14132                           
 14133                           ;menu.c: 875: }
 14134                           ;menu.c: 877: if(savesMenu.selector == 4){eepromExit();}
 14135  0072E8  0E04               	movlw	4
 14136  0072EA  0100               	movlb	0	; () banked
 14137  0072EC  19E1               	xorwf	(_savesMenu+2)& (0+255),w,b
 14138  0072EE  A4D8               	btfss	status,2,c
 14139  0072F0  D003               	goto	l3579
 14140                           
 14141                           ; BSR set to: 0
 14142  0072F2  EC43  F048         	call	_eepromExit	;wreg free
 14143  0072F6  D011               	goto	l3580
 14144  0072F8                     l3579:
 14145                           
 14146                           ;menu.c: 878: else {
 14147                           ;menu.c: 880: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 14148  0072F8  ECED  F04A         	call	_Busy_eep	;wreg free
 14149  0072FC  0E00               	movlw	0
 14150  0072FE  0100               	movlb	0	; () banked
 14151  007300  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 14152  007302  0E00               	movlw	0
 14153  007304  6F60               	movwf	Write_b_eep@badd& (0+255),b
 14154  007306  29E1               	incf	(_savesMenu+2)& (0+255),w,b
 14155  007308  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 14156  00730A  ECA8  F047         	call	_Write_b_eep	;wreg free
 14157                           
 14158                           ;menu.c: 881: saveToEEPROM(savesMenu.selector + 1);
 14159  00730E  0100               	movlb	0	; () banked
 14160  007310  29E1               	incf	(_savesMenu+2)& (0+255),w,b
 14161  007312  ECED  F027         	call	_saveToEEPROM
 14162                           
 14163                           ;menu.c: 882: exitSave();
 14164  007316  EC25  F048         	call	_exitSave	;wreg free
 14165  00731A                     l3580:
 14166                           
 14167                           ;menu.c: 883: }
 14168                           ;menu.c: 885: savesMenu.selector = 0;
 14169  00731A  0E00               	movlw	0
 14170  00731C  0100               	movlb	0	; () banked
 14171  00731E  6FE1               	movwf	(_savesMenu+2)& (0+255),b
 14172                           
 14173                           ; BSR set to: 0
 14174  007320  0012               	return		;funcret
 14175  007322                     __end_of_Function_G_1:
 14176                           	opt stack 0
 14177                           tblptru	equ	0xFF8
 14178                           tblptrh	equ	0xFF7
 14179                           tblptrl	equ	0xFF6
 14180                           tablat	equ	0xFF5
 14181                           prodh	equ	0xFF4
 14182                           prodl	equ	0xFF3
 14183                           intcon	equ	0xFF2
 14184                           intcon2	equ	0xFF1
 14185                           postinc0	equ	0xFEE
 14186                           wreg	equ	0xFE8
 14187                           postdec1	equ	0xFE5
 14188                           fsr1l	equ	0xFE1
 14189                           indf2	equ	0xFDF
 14190                           postinc2	equ	0xFDE
 14191                           fsr2h	equ	0xFDA
 14192                           fsr2l	equ	0xFD9
 14193                           status	equ	0xFD8
 14194                           
 14195 ;; *************** function _exitSave *****************
 14196 ;; Defined at:
 14197 ;;		line 255 in file "menu.c"
 14198 ;; Parameters:    Size  Location     Type
 14199 ;;		None
 14200 ;; Auto vars:     Size  Location     Type
 14201 ;;		None
 14202 ;; Return value:  Size  Location     Type
 14203 ;;                  1    wreg      void 
 14204 ;; Registers used:
 14205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14206 ;; Tracked objects:
 14207 ;;		On entry : 0/0
 14208 ;;		On exit  : 0/0
 14209 ;;		Unchanged: 0/0
 14210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14213 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14215 ;;Total ram usage:        2 bytes
 14216 ;; Hardware stack levels used:    1
 14217 ;; Hardware stack levels required when called:    9
 14218 ;; This function calls:
 14219 ;;		_Lcd_Print_String
 14220 ;;		_clear_row1
 14221 ;; This function is called by:
 14222 ;;		_Function_G_1
 14223 ;; This function uses a non-reentrant model
 14224 ;;
 14225                           
 14226                           	psect	text34
 14227  00904A                     __ptext34:
 14228                           	opt stack 0
 14229  00904A                     _exitSave:
 14230                           	opt stack 18
 14231                           
 14232                           ;menu.c: 257: while(encoder_click == 0);
 14233                           
 14234                           ; BSR set to: 0
 14235                           ;incstack = 0
 14236  00904A  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14237  00904C  D7FE               	goto	_exitSave
 14238                           
 14239                           ;menu.c: 258: clear_row1();
 14240  00904E  EC1E  F04A         	call	_clear_row1	;wreg free
 14241                           
 14242                           ;menu.c: 259: Lcd_Print_String("Settings Saved!");
 14243  009052  0EFD               	movlw	low STR_21
 14244  009054  0100               	movlb	0	; () banked
 14245  009056  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14246  009058  0EFD               	movlw	high STR_21
 14247  00905A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14248  00905C  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 14249                           
 14250                           ;menu.c: 260: _delay((unsigned long)((500)*(20000000/4000.0)));
 14251  009060  0E0D               	movlw	13
 14252  009062  0100               	movlb	0	; () banked
 14253  009064  6F71               	movwf	(??_exitSave+1)& (0+255),b
 14254  009066  0EAF               	movlw	175
 14255  009068  6F70               	movwf	??_exitSave& (0+255),b
 14256  00906A  0EB6               	movlw	182
 14257  00906C                     u44807:
 14258  00906C  2EE8               	decfsz	wreg,f,c
 14259  00906E  D7FE               	bra	u44807
 14260  009070  2F70               	decfsz	??_exitSave& (0+255),f,b
 14261  009072  D7FC               	bra	u44807
 14262  009074  2F71               	decfsz	(??_exitSave+1)& (0+255),f,b
 14263  009076  D7FA               	bra	u44807
 14264  009078  F000               	nop	
 14265                           
 14266                           ;menu.c: 261: which_screen = MAIN_MENU;
 14267  00907A  0E02               	movlw	2
 14268  00907C  0100               	movlb	0	; () banked
 14269  00907E  6FF9               	movwf	_which_screen& (0+255),b
 14270                           
 14271                           ; BSR set to: 0
 14272                           ;menu.c: 262: lcd_print_once = 0;
 14273  009080  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14274                           
 14275                           ; BSR set to: 0
 14276                           ;menu.c: 263: encoder_click = 0;
 14277  009082  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14278                           
 14279                           ; BSR set to: 0
 14280  009084  0012               	return		;funcret
 14281  009086                     __end_of_exitSave:
 14282                           	opt stack 0
 14283                           tblptru	equ	0xFF8
 14284                           tblptrh	equ	0xFF7
 14285                           tblptrl	equ	0xFF6
 14286                           tablat	equ	0xFF5
 14287                           prodh	equ	0xFF4
 14288                           prodl	equ	0xFF3
 14289                           intcon	equ	0xFF2
 14290                           intcon2	equ	0xFF1
 14291                           postinc0	equ	0xFEE
 14292                           wreg	equ	0xFE8
 14293                           postdec1	equ	0xFE5
 14294                           fsr1l	equ	0xFE1
 14295                           indf2	equ	0xFDF
 14296                           postinc2	equ	0xFDE
 14297                           fsr2h	equ	0xFDA
 14298                           fsr2l	equ	0xFD9
 14299                           status	equ	0xFD8
 14300                           
 14301 ;; *************** function _eepromExit *****************
 14302 ;; Defined at:
 14303 ;;		line 281 in file "menu.c"
 14304 ;; Parameters:    Size  Location     Type
 14305 ;;		None
 14306 ;; Auto vars:     Size  Location     Type
 14307 ;;		None
 14308 ;; Return value:  Size  Location     Type
 14309 ;;                  1    wreg      void 
 14310 ;; Registers used:
 14311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14312 ;; Tracked objects:
 14313 ;;		On entry : 0/0
 14314 ;;		On exit  : 0/0
 14315 ;;		Unchanged: 0/0
 14316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14320 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14321 ;;Total ram usage:        2 bytes
 14322 ;; Hardware stack levels used:    1
 14323 ;; Hardware stack levels required when called:    9
 14324 ;; This function calls:
 14325 ;;		_Lcd_Print_String
 14326 ;;		_clear_row1
 14327 ;; This function is called by:
 14328 ;;		_Function_G_1
 14329 ;;		_Function_G_2
 14330 ;;		_Function_G
 14331 ;; This function uses a non-reentrant model
 14332 ;;
 14333                           
 14334                           	psect	text35
 14335  009086                     __ptext35:
 14336                           	opt stack 0
 14337  009086                     _eepromExit:
 14338                           	opt stack 19
 14339                           
 14340                           ;menu.c: 283: while(encoder_click == 0);
 14341                           
 14342                           ; BSR set to: 0
 14343                           ;incstack = 0
 14344  009086  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14345  009088  D7FE               	goto	_eepromExit
 14346                           
 14347                           ;menu.c: 284: clear_row1();
 14348  00908A  EC1E  F04A         	call	_clear_row1	;wreg free
 14349                           
 14350                           ;menu.c: 285: Lcd_Print_String("Exit EEPROM!");
 14351  00908E  0E18               	movlw	low STR_23
 14352  009090  0100               	movlb	0	; () banked
 14353  009092  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14354  009094  0EFF               	movlw	high STR_23
 14355  009096  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14356  009098  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 14357                           
 14358                           ;menu.c: 286: _delay((unsigned long)((500)*(20000000/4000.0)));
 14359  00909C  0E0D               	movlw	13
 14360  00909E  0100               	movlb	0	; () banked
 14361  0090A0  6F71               	movwf	(??_eepromExit+1)& (0+255),b
 14362  0090A2  0EAF               	movlw	175
 14363  0090A4  6F70               	movwf	??_eepromExit& (0+255),b
 14364  0090A6  0EB6               	movlw	182
 14365  0090A8                     u44817:
 14366  0090A8  2EE8               	decfsz	wreg,f,c
 14367  0090AA  D7FE               	bra	u44817
 14368  0090AC  2F70               	decfsz	??_eepromExit& (0+255),f,b
 14369  0090AE  D7FC               	bra	u44817
 14370  0090B0  2F71               	decfsz	(??_eepromExit+1)& (0+255),f,b
 14371  0090B2  D7FA               	bra	u44817
 14372  0090B4  F000               	nop	
 14373                           
 14374                           ;menu.c: 287: which_screen = MAIN_MENU;
 14375  0090B6  0E02               	movlw	2
 14376  0090B8  0100               	movlb	0	; () banked
 14377  0090BA  6FF9               	movwf	_which_screen& (0+255),b
 14378                           
 14379                           ; BSR set to: 0
 14380                           ;menu.c: 288: lcd_print_once = 0;
 14381  0090BC  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14382                           
 14383                           ; BSR set to: 0
 14384                           ;menu.c: 289: encoder_click = 0;
 14385  0090BE  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14386                           
 14387                           ; BSR set to: 0
 14388  0090C0  0012               	return		;funcret
 14389  0090C2                     __end_of_eepromExit:
 14390                           	opt stack 0
 14391                           tblptru	equ	0xFF8
 14392                           tblptrh	equ	0xFF7
 14393                           tblptrl	equ	0xFF6
 14394                           tablat	equ	0xFF5
 14395                           prodh	equ	0xFF4
 14396                           prodl	equ	0xFF3
 14397                           intcon	equ	0xFF2
 14398                           intcon2	equ	0xFF1
 14399                           postinc0	equ	0xFEE
 14400                           wreg	equ	0xFE8
 14401                           postdec1	equ	0xFE5
 14402                           fsr1l	equ	0xFE1
 14403                           indf2	equ	0xFDF
 14404                           postinc2	equ	0xFDE
 14405                           fsr2h	equ	0xFDA
 14406                           fsr2l	equ	0xFD9
 14407                           status	equ	0xFD8
 14408                           
 14409 ;; *************** function _Function_F *****************
 14410 ;; Defined at:
 14411 ;;		line 834 in file "menu.c"
 14412 ;; Parameters:    Size  Location     Type
 14413 ;;		None
 14414 ;; Auto vars:     Size  Location     Type
 14415 ;;		None
 14416 ;; Return value:  Size  Location     Type
 14417 ;;                  1    wreg      void 
 14418 ;; Registers used:
 14419 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14420 ;; Tracked objects:
 14421 ;;		On entry : 0/0
 14422 ;;		On exit  : 0/0
 14423 ;;		Unchanged: 0/0
 14424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14429 ;;Total ram usage:        0 bytes
 14430 ;; Hardware stack levels used:    1
 14431 ;; Hardware stack levels required when called:    9
 14432 ;; This function calls:
 14433 ;;		_Lcd_Print_String
 14434 ;;		_Lcd_Set_Cursor
 14435 ;;		_clear_row2
 14436 ;;		_int2string
 14437 ;;		_processEncoderBuxton
 14438 ;;		_programChange
 14439 ;; This function is called by:
 14440 ;;		_menu_lcd
 14441 ;; This function uses a non-reentrant model
 14442 ;;
 14443                           
 14444                           	psect	text36
 14445  00867C                     __ptext36:
 14446                           	opt stack 0
 14447  00867C                     _Function_F:
 14448                           	opt stack 20
 14449                           
 14450                           ;menu.c: 836: which_screen = PROGRAM_CHANGE_MENU;
 14451                           
 14452                           ; BSR set to: 0
 14453                           ;incstack = 0
 14454  00867C  0E08               	movlw	8
 14455  00867E  0100               	movlb	0	; () banked
 14456  008680  6FF9               	movwf	_which_screen& (0+255),b
 14457                           
 14458                           ; BSR set to: 0
 14459                           ;menu.c: 837: lcd_print_once = 0;
 14460  008682  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14461                           
 14462                           ; BSR set to: 0
 14463                           ;menu.c: 839: programChangeMenu.selector = patch_number;
 14464  008684  C171  F146         	movff	_patch_number,_programChangeMenu+2
 14465                           
 14466                           ;menu.c: 841: while(encoder_click == 0) {
 14467  008688  D021               	goto	l3568
 14468  00868A                     
 14469                           ;menu.c: 842: processEncoderBuxton();
 14470                           
 14471                           ; BSR set to: 0
 14472  00868A  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14473                           
 14474                           ;menu.c: 843: if (lcd_print_once == 0) {
 14475  00868E  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14476  008690  D009               	goto	l3570
 14477                           
 14478                           ;menu.c: 844: clear_row2();
 14479  008692  EC0A  F04A         	call	_clear_row2	;wreg free
 14480                           
 14481                           ;menu.c: 845: Lcd_Print_String("Program #: ");
 14482  008696  0E4C               	movlw	low STR_34
 14483  008698  0100               	movlb	0	; () banked
 14484  00869A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14485  00869C  0EFF               	movlw	high STR_34
 14486  00869E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14487  0086A0  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 14488  0086A4                     l3570:
 14489                           
 14490                           ;menu.c: 846: }
 14491                           ;menu.c: 847: lcd_print_once = 1;
 14492  0086A4  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14493                           
 14494                           ;menu.c: 850: int2string(programChangeMenu.selector);
 14495  0086A6  C146  F074         	movff	_programChangeMenu+2,int2string@number
 14496  0086AA  0100               	movlb	0	; () banked
 14497  0086AC  6B75               	clrf	(int2string@number+1)& (0+255),b
 14498  0086AE  ECBD  F034         	call	_int2string	;wreg free
 14499                           
 14500                           ;menu.c: 851: Lcd_Set_Cursor(2,13);
 14501  0086B2  0E0D               	movlw	13
 14502  0086B4  0100               	movlb	0	; () banked
 14503  0086B6  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14504  0086B8  0E02               	movlw	2
 14505  0086BA  ECB8  F045         	call	_Lcd_Set_Cursor
 14506                           
 14507                           ;menu.c: 852: Lcd_Print_String(string2display);
 14508  0086BE  0E82               	movlw	low _string2display
 14509  0086C0  0100               	movlb	0	; () banked
 14510  0086C2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14511  0086C4  0E01               	movlw	high _string2display
 14512  0086C6  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14513  0086C8  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 14514  0086CC                     l3568:
 14515  0086CC  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14516  0086CE  D7DD               	goto	l3569
 14517                           
 14518                           ;menu.c: 853: }
 14519                           ;menu.c: 855: patch_number = programChangeMenu.selector;
 14520  0086D0  C146  F171         	movff	_programChangeMenu+2,_patch_number
 14521                           
 14522                           ;menu.c: 856: programChange(channel, programChangeMenu.selector, 0x00);
 14523  0086D4  C146  F06B         	movff	_programChangeMenu+2,programChange@data1
 14524  0086D8  0E00               	movlw	0
 14525  0086DA  0100               	movlb	0	; () banked
 14526  0086DC  6F6C               	movwf	programChange@data2& (0+255),b
 14527  0086DE  51F6               	movf	_channel& (0+255),w,b
 14528  0086E0  ECA0  F049         	call	_programChange
 14529  0086E4  0012               	return		;funcret
 14530  0086E6                     __end_of_Function_F:
 14531                           	opt stack 0
 14532                           tblptru	equ	0xFF8
 14533                           tblptrh	equ	0xFF7
 14534                           tblptrl	equ	0xFF6
 14535                           tablat	equ	0xFF5
 14536                           prodh	equ	0xFF4
 14537                           prodl	equ	0xFF3
 14538                           intcon	equ	0xFF2
 14539                           intcon2	equ	0xFF1
 14540                           postinc0	equ	0xFEE
 14541                           wreg	equ	0xFE8
 14542                           postdec1	equ	0xFE5
 14543                           fsr1l	equ	0xFE1
 14544                           indf2	equ	0xFDF
 14545                           postinc2	equ	0xFDE
 14546                           fsr2h	equ	0xFDA
 14547                           fsr2l	equ	0xFD9
 14548                           status	equ	0xFD8
 14549                           
 14550 ;; *************** function _programChange *****************
 14551 ;; Defined at:
 14552 ;;		line 166 in file "midi.c"
 14553 ;; Parameters:    Size  Location     Type
 14554 ;;  channel         1    wreg     unsigned char 
 14555 ;;  data1           1   11[BANK0 ] unsigned char 
 14556 ;;  data2           1   12[BANK0 ] unsigned char 
 14557 ;; Auto vars:     Size  Location     Type
 14558 ;;  channel         1   13[BANK0 ] unsigned char 
 14559 ;; Return value:  Size  Location     Type
 14560 ;;                  1    wreg      void 
 14561 ;; Registers used:
 14562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14563 ;; Tracked objects:
 14564 ;;		On entry : 0/0
 14565 ;;		On exit  : 0/0
 14566 ;;		Unchanged: 0/0
 14567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14568 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14569 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14571 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14572 ;;Total ram usage:        3 bytes
 14573 ;; Hardware stack levels used:    1
 14574 ;; Hardware stack levels required when called:    6
 14575 ;; This function calls:
 14576 ;;		_sendOut
 14577 ;;		_sendUSB
 14578 ;; This function is called by:
 14579 ;;		_Function_F
 14580 ;; This function uses a non-reentrant model
 14581 ;;
 14582                           
 14583                           	psect	text37
 14584  009340                     __ptext37:
 14585                           	opt stack 0
 14586  009340                     _programChange:
 14587                           	opt stack 22
 14588                           
 14589                           ;incstack = 0
 14590                           ;programChange@channel stored from wreg
 14591  009340  0100               	movlb	0	; () banked
 14592  009342  6F6D               	movwf	programChange@channel& (0+255),b
 14593                           
 14594                           ;midi.c: 168: statusByte = channel | program_change;
 14595  009344  0100               	movlb	0	; () banked
 14596  009346  516D               	movf	programChange@channel& (0+255),w,b
 14597  009348  09C0               	iorlw	192
 14598  00934A  6FF5               	movwf	_statusByte& (0+255),b
 14599                           
 14600                           ; BSR set to: 0
 14601                           ;midi.c: 171: sendUSB(statusByte, data1, data2);
 14602  00934C  C06B  F060         	movff	programChange@data1,sendUSB@message2
 14603  009350  C06C  F061         	movff	programChange@data2,sendUSB@message3
 14604  009354  51F5               	movf	_statusByte& (0+255),w,b
 14605  009356  EC91  F039         	call	_sendUSB
 14606                           
 14607                           ;midi.c: 174: sendOut(statusByte);
 14608  00935A  0100               	movlb	0	; () banked
 14609  00935C  51F5               	movf	_statusByte& (0+255),w,b
 14610  00935E  EC89  F04A         	call	_sendOut
 14611                           
 14612                           ;midi.c: 175: sendOut(data1);
 14613  009362  0100               	movlb	0	; () banked
 14614  009364  516B               	movf	programChange@data1& (0+255),w,b
 14615  009366  EC89  F04A         	call	_sendOut
 14616  00936A  0012               	return		;funcret
 14617  00936C                     __end_of_programChange:
 14618                           	opt stack 0
 14619                           tblptru	equ	0xFF8
 14620                           tblptrh	equ	0xFF7
 14621                           tblptrl	equ	0xFF6
 14622                           tablat	equ	0xFF5
 14623                           prodh	equ	0xFF4
 14624                           prodl	equ	0xFF3
 14625                           intcon	equ	0xFF2
 14626                           intcon2	equ	0xFF1
 14627                           postinc0	equ	0xFEE
 14628                           wreg	equ	0xFE8
 14629                           postdec1	equ	0xFE5
 14630                           fsr1l	equ	0xFE1
 14631                           indf2	equ	0xFDF
 14632                           postinc2	equ	0xFDE
 14633                           fsr2h	equ	0xFDA
 14634                           fsr2l	equ	0xFD9
 14635                           status	equ	0xFD8
 14636                           
 14637 ;; *************** function _Function_E *****************
 14638 ;; Defined at:
 14639 ;;		line 815 in file "menu.c"
 14640 ;; Parameters:    Size  Location     Type
 14641 ;;		None
 14642 ;; Auto vars:     Size  Location     Type
 14643 ;;		None
 14644 ;; Return value:  Size  Location     Type
 14645 ;;                  1    wreg      void 
 14646 ;; Registers used:
 14647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14648 ;; Tracked objects:
 14649 ;;		On entry : 0/0
 14650 ;;		On exit  : 0/0
 14651 ;;		Unchanged: 0/0
 14652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14656 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14657 ;;Total ram usage:        1 bytes
 14658 ;; Hardware stack levels used:    1
 14659 ;; Hardware stack levels required when called:    9
 14660 ;; This function calls:
 14661 ;;		_Function_E_1
 14662 ;;		_Function_E_2
 14663 ;;		_Lcd_Print_String
 14664 ;;		___lbmod
 14665 ;;		___wmul
 14666 ;;		_clear_row2
 14667 ;;		_processEncoderBuxton
 14668 ;; This function is called by:
 14669 ;;		_menu_lcd
 14670 ;; This function uses a non-reentrant model
 14671 ;;
 14672                           
 14673                           	psect	text38
 14674  008530                     __ptext38:
 14675                           	opt stack 0
 14676  008530                     _Function_E:
 14677                           	opt stack 20
 14678                           
 14679                           ;menu.c: 817: which_screen = MIDI_CHANNEL_MENU;
 14680                           
 14681                           ;incstack = 0
 14682  008530  0E07               	movlw	7
 14683  008532  0100               	movlb	0	; () banked
 14684  008534  6FF9               	movwf	_which_screen& (0+255),b
 14685                           
 14686                           ; BSR set to: 0
 14687                           ;menu.c: 818: lcd_print_once = 0;
 14688  008536  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14689                           
 14690                           ;menu.c: 820: while(encoder_click == 0) {
 14691  008538  D025               	goto	l3559
 14692  00853A                     
 14693                           ;menu.c: 821: processEncoderBuxton();
 14694                           
 14695                           ; BSR set to: 0
 14696  00853A  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14697                           
 14698                           ;menu.c: 822: if (lcd_print_once == 0) {
 14699  00853E  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14700  008540  D020               	goto	l3561
 14701                           
 14702                           ;menu.c: 823: clear_row2();
 14703  008542  EC0A  F04A         	call	_clear_row2	;wreg free
 14704                           
 14705                           ;menu.c: 824: Lcd_Print_String(LCD_STRINGS[(midiChannelMenu.selector % midiChannelMenu.n
      +                          umber) + midiChannelMenu.address]);
 14706  008546  C147  F060         	movff	_midiChannelMenu,___lbmod@divisor
 14707  00854A  0101               	movlb	1	; () banked
 14708  00854C  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14709  00854E  EC89  F049         	call	___lbmod
 14710  008552  0100               	movlb	0	; () banked
 14711  008554  6F7A               	movwf	??_Function_E& (0+255),b
 14712  008556  517A               	movf	??_Function_E& (0+255),w,b
 14713  008558  0101               	movlb	1	; () banked
 14714  00855A  2548               	addwf	(_midiChannelMenu+1)& (0+255),w,b
 14715  00855C  0100               	movlb	0	; () banked
 14716  00855E  6F64               	movwf	___wmul@multiplier& (0+255),b
 14717  008560  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 14718  008562  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14719  008564  0E00               	movlw	0
 14720  008566  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14721  008568  0E11               	movlw	17
 14722  00856A  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14723  00856C  EC32  F04A         	call	___wmul	;wreg free
 14724  008570  0E9E               	movlw	low _LCD_STRINGS
 14725  008572  0100               	movlb	0	; () banked
 14726  008574  2564               	addwf	?___wmul& (0+255),w,b
 14727  008576  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14728  008578  0EF3               	movlw	high _LCD_STRINGS
 14729  00857A  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14730  00857C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14731  00857E  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 14732  008582                     l3561:
 14733                           
 14734                           ;menu.c: 825: }
 14735                           ;menu.c: 826: lcd_print_once = 1;
 14736  008582  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14737  008584                     l3559:
 14738  008584  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14739  008586  D7D9               	goto	l3560
 14740                           
 14741                           ;menu.c: 827: }
 14742                           ;menu.c: 829: if(midiChannelMenu.selector == 0) {Function_E_1();}
 14743  008588  0101               	movlb	1	; () banked
 14744  00858A  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14745  00858C  B4D8               	btfsc	status,2,c
 14746                           
 14747                           ; BSR set to: 1
 14748  00858E  EC37  F047         	call	_Function_E_1	;wreg free
 14749                           
 14750                           ;menu.c: 830: if(midiChannelMenu.selector == 1) {Function_E_2();}
 14751  008592  0101               	movlb	1	; () banked
 14752  008594  0549               	decf	(_midiChannelMenu+2)& (0+255),w,b
 14753  008596  A4D8               	btfss	status,2,c
 14754  008598  0012               	return	
 14755                           
 14756                           ; BSR set to: 1
 14757  00859A  EC10  F047         	call	_Function_E_2	;wreg free
 14758  00859E  0012               	return	
 14759  0085A0                     __end_of_Function_E:
 14760                           	opt stack 0
 14761                           tblptru	equ	0xFF8
 14762                           tblptrh	equ	0xFF7
 14763                           tblptrl	equ	0xFF6
 14764                           tablat	equ	0xFF5
 14765                           prodh	equ	0xFF4
 14766                           prodl	equ	0xFF3
 14767                           intcon	equ	0xFF2
 14768                           intcon2	equ	0xFF1
 14769                           postinc0	equ	0xFEE
 14770                           wreg	equ	0xFE8
 14771                           postdec1	equ	0xFE5
 14772                           fsr1l	equ	0xFE1
 14773                           indf2	equ	0xFDF
 14774                           postinc2	equ	0xFDE
 14775                           fsr2h	equ	0xFDA
 14776                           fsr2l	equ	0xFD9
 14777                           status	equ	0xFD8
 14778                           
 14779 ;; *************** function _Function_E_2 *****************
 14780 ;; Defined at:
 14781 ;;		line 796 in file "menu.c"
 14782 ;; Parameters:    Size  Location     Type
 14783 ;;		None
 14784 ;; Auto vars:     Size  Location     Type
 14785 ;;		None
 14786 ;; Return value:  Size  Location     Type
 14787 ;;                  1    wreg      void 
 14788 ;; Registers used:
 14789 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14790 ;; Tracked objects:
 14791 ;;		On entry : 0/0
 14792 ;;		On exit  : 0/0
 14793 ;;		Unchanged: 0/0
 14794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14799 ;;Total ram usage:        0 bytes
 14800 ;; Hardware stack levels used:    1
 14801 ;; Hardware stack levels required when called:    8
 14802 ;; This function calls:
 14803 ;;		_Lcd_Print_String
 14804 ;;		_Lcd_Set_Cursor
 14805 ;;		_int2string
 14806 ;;		_processEncoderBuxton
 14807 ;; This function is called by:
 14808 ;;		_Function_E
 14809 ;; This function uses a non-reentrant model
 14810 ;;
 14811                           
 14812                           	psect	text39
 14813  008E20                     __ptext39:
 14814                           	opt stack 0
 14815  008E20                     _Function_E_2:
 14816                           	opt stack 20
 14817                           
 14818                           ;menu.c: 798: which_screen = DRUM_CH_MENU;
 14819                           
 14820                           ;incstack = 0
 14821  008E20  0E15               	movlw	21
 14822  008E22  0100               	movlb	0	; () banked
 14823  008E24  6FF9               	movwf	_which_screen& (0+255),b
 14824                           
 14825                           ; BSR set to: 0
 14826                           ;menu.c: 799: lcd_print_once = 0;
 14827  008E26  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14828                           
 14829                           ; BSR set to: 0
 14830                           ;menu.c: 800: encoder_click = 0;
 14831  008E28  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14832                           
 14833                           ; BSR set to: 0
 14834                           ;menu.c: 801: drumChannelMenu.selector = drumchannel;
 14835  008E2A  C0FE  F140         	movff	_drumchannel,_drumChannelMenu+2
 14836                           
 14837                           ;menu.c: 803: while(encoder_click == 0) {
 14838  008E2E  D01A               	goto	l3553
 14839  008E30                     
 14840                           ;menu.c: 804: processEncoderBuxton();
 14841                           
 14842                           ; BSR set to: 0
 14843  008E30  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14844                           
 14845                           ;menu.c: 805: lcd_print_once = 1;
 14846  008E34  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14847                           
 14848                           ;menu.c: 806: int2string((drumChannelMenu.selector) + 1);
 14849  008E36  0E01               	movlw	1
 14850  008E38  0101               	movlb	1	; () banked
 14851  008E3A  2540               	addwf	(_drumChannelMenu+2)& (0+255),w,b
 14852  008E3C  0100               	movlb	0	; () banked
 14853  008E3E  6F74               	movwf	int2string@number& (0+255),b
 14854  008E40  6B75               	clrf	(int2string@number+1)& (0+255),b
 14855  008E42  0E00               	movlw	0
 14856  008E44  2375               	addwfc	(int2string@number+1)& (0+255),f,b
 14857  008E46  ECBD  F034         	call	_int2string	;wreg free
 14858                           
 14859                           ;menu.c: 807: Lcd_Set_Cursor(2,13);
 14860  008E4A  0E0D               	movlw	13
 14861  008E4C  0100               	movlb	0	; () banked
 14862  008E4E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14863  008E50  0E02               	movlw	2
 14864  008E52  ECB8  F045         	call	_Lcd_Set_Cursor
 14865                           
 14866                           ;menu.c: 808: Lcd_Print_String(string2display);
 14867  008E56  0E82               	movlw	low _string2display
 14868  008E58  0100               	movlb	0	; () banked
 14869  008E5A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14870  008E5C  0E01               	movlw	high _string2display
 14871  008E5E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14872  008E60  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 14873  008E64                     l3553:
 14874  008E64  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14875  008E66  D7E4               	goto	l3554
 14876                           
 14877                           ;menu.c: 809: }
 14878                           ;menu.c: 811: drumchannel = drumChannelMenu.selector;
 14879  008E68  C140  F0FE         	movff	_drumChannelMenu+2,_drumchannel
 14880  008E6C  0012               	return		;funcret
 14881  008E6E                     __end_of_Function_E_2:
 14882                           	opt stack 0
 14883                           tblptru	equ	0xFF8
 14884                           tblptrh	equ	0xFF7
 14885                           tblptrl	equ	0xFF6
 14886                           tablat	equ	0xFF5
 14887                           prodh	equ	0xFF4
 14888                           prodl	equ	0xFF3
 14889                           intcon	equ	0xFF2
 14890                           intcon2	equ	0xFF1
 14891                           postinc0	equ	0xFEE
 14892                           wreg	equ	0xFE8
 14893                           postdec1	equ	0xFE5
 14894                           fsr1l	equ	0xFE1
 14895                           indf2	equ	0xFDF
 14896                           postinc2	equ	0xFDE
 14897                           fsr2h	equ	0xFDA
 14898                           fsr2l	equ	0xFD9
 14899                           status	equ	0xFD8
 14900                           
 14901 ;; *************** function _Function_E_1 *****************
 14902 ;; Defined at:
 14903 ;;		line 775 in file "menu.c"
 14904 ;; Parameters:    Size  Location     Type
 14905 ;;		None
 14906 ;; Auto vars:     Size  Location     Type
 14907 ;;		None
 14908 ;; Return value:  Size  Location     Type
 14909 ;;                  1    wreg      void 
 14910 ;; Registers used:
 14911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14912 ;; Tracked objects:
 14913 ;;		On entry : 0/0
 14914 ;;		On exit  : 0/0
 14915 ;;		Unchanged: 0/0
 14916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14921 ;;Total ram usage:        0 bytes
 14922 ;; Hardware stack levels used:    1
 14923 ;; Hardware stack levels required when called:    8
 14924 ;; This function calls:
 14925 ;;		_Lcd_Print_String
 14926 ;;		_Lcd_Set_Cursor
 14927 ;;		_int2string
 14928 ;;		_processEncoderBuxton
 14929 ;; This function is called by:
 14930 ;;		_Function_E
 14931 ;; This function uses a non-reentrant model
 14932 ;;
 14933                           
 14934                           	psect	text40
 14935  008E6E                     __ptext40:
 14936                           	opt stack 0
 14937  008E6E                     _Function_E_1:
 14938                           	opt stack 20
 14939                           
 14940                           ;menu.c: 777: which_screen = MAIN_CH_MENU;
 14941                           
 14942                           ;incstack = 0
 14943  008E6E  0E14               	movlw	20
 14944  008E70  0100               	movlb	0	; () banked
 14945  008E72  6FF9               	movwf	_which_screen& (0+255),b
 14946                           
 14947                           ; BSR set to: 0
 14948                           ;menu.c: 778: lcd_print_once = 0;
 14949  008E74  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14950                           
 14951                           ; BSR set to: 0
 14952                           ;menu.c: 779: encoder_click = 0;
 14953  008E76  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14954                           
 14955                           ; BSR set to: 0
 14956                           ;menu.c: 780: mainChannelMenu.selector = channel;
 14957  008E78  C0F6  F143         	movff	_channel,_mainChannelMenu+2
 14958                           
 14959                           ;menu.c: 782: while(encoder_click == 0) {
 14960  008E7C  D01A               	goto	l3547
 14961  008E7E                     
 14962                           ;menu.c: 783: processEncoderBuxton();
 14963                           
 14964                           ; BSR set to: 0
 14965  008E7E  EC09  F000         	call	_processEncoderBuxton	;wreg free
 14966                           
 14967                           ;menu.c: 784: lcd_print_once = 1;
 14968  008E82  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14969                           
 14970                           ;menu.c: 786: int2string((mainChannelMenu.selector) + 1);
 14971  008E84  0E01               	movlw	1
 14972  008E86  0101               	movlb	1	; () banked
 14973  008E88  2543               	addwf	(_mainChannelMenu+2)& (0+255),w,b
 14974  008E8A  0100               	movlb	0	; () banked
 14975  008E8C  6F74               	movwf	int2string@number& (0+255),b
 14976  008E8E  6B75               	clrf	(int2string@number+1)& (0+255),b
 14977  008E90  0E00               	movlw	0
 14978  008E92  2375               	addwfc	(int2string@number+1)& (0+255),f,b
 14979  008E94  ECBD  F034         	call	_int2string	;wreg free
 14980                           
 14981                           ;menu.c: 788: Lcd_Set_Cursor(2,13);
 14982  008E98  0E0D               	movlw	13
 14983  008E9A  0100               	movlb	0	; () banked
 14984  008E9C  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14985  008E9E  0E02               	movlw	2
 14986  008EA0  ECB8  F045         	call	_Lcd_Set_Cursor
 14987                           
 14988                           ;menu.c: 789: Lcd_Print_String(string2display);
 14989  008EA4  0E82               	movlw	low _string2display
 14990  008EA6  0100               	movlb	0	; () banked
 14991  008EA8  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 14992  008EAA  0E01               	movlw	high _string2display
 14993  008EAC  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14994  008EAE  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 14995  008EB2                     l3547:
 14996  008EB2  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14997  008EB4  D7E4               	goto	l3548
 14998                           
 14999                           ;menu.c: 790: }
 15000                           ;menu.c: 792: channel = mainChannelMenu.selector;
 15001  008EB6  C143  F0F6         	movff	_mainChannelMenu+2,_channel
 15002  008EBA  0012               	return		;funcret
 15003  008EBC                     __end_of_Function_E_1:
 15004                           	opt stack 0
 15005                           tblptru	equ	0xFF8
 15006                           tblptrh	equ	0xFF7
 15007                           tblptrl	equ	0xFF6
 15008                           tablat	equ	0xFF5
 15009                           prodh	equ	0xFF4
 15010                           prodl	equ	0xFF3
 15011                           intcon	equ	0xFF2
 15012                           intcon2	equ	0xFF1
 15013                           postinc0	equ	0xFEE
 15014                           wreg	equ	0xFE8
 15015                           postdec1	equ	0xFE5
 15016                           fsr1l	equ	0xFE1
 15017                           indf2	equ	0xFDF
 15018                           postinc2	equ	0xFDE
 15019                           fsr2h	equ	0xFDA
 15020                           fsr2l	equ	0xFD9
 15021                           status	equ	0xFD8
 15022                           
 15023 ;; *************** function _Function_D *****************
 15024 ;; Defined at:
 15025 ;;		line 752 in file "menu.c"
 15026 ;; Parameters:    Size  Location     Type
 15027 ;;		None
 15028 ;; Auto vars:     Size  Location     Type
 15029 ;;		None
 15030 ;; Return value:  Size  Location     Type
 15031 ;;                  1    wreg      void 
 15032 ;; Registers used:
 15033 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15034 ;; Tracked objects:
 15035 ;;		On entry : 0/0
 15036 ;;		On exit  : 0/0
 15037 ;;		Unchanged: 0/0
 15038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15041 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15042 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15043 ;;Total ram usage:        1 bytes
 15044 ;; Hardware stack levels used:    1
 15045 ;; Hardware stack levels required when called:   10
 15046 ;; This function calls:
 15047 ;;		_Function_D_1
 15048 ;;		_Function_D_2
 15049 ;;		_Function_D_3
 15050 ;;		_Function_D_4
 15051 ;;		_Function_D_5
 15052 ;;		_Lcd_Print_String
 15053 ;;		___lbmod
 15054 ;;		___wmul
 15055 ;;		_clear_row2
 15056 ;;		_processEncoderBuxton
 15057 ;; This function is called by:
 15058 ;;		_menu_lcd
 15059 ;; This function uses a non-reentrant model
 15060 ;;
 15061                           
 15062                           	psect	text41
 15063  007978                     __ptext41:
 15064                           	opt stack 0
 15065  007978                     _Function_D:
 15066                           	opt stack 19
 15067                           
 15068                           ;menu.c: 754: which_screen = POTENTIOMETER_MENU;
 15069                           
 15070                           ;incstack = 0
 15071  007978  0E06               	movlw	6
 15072  00797A  0100               	movlb	0	; () banked
 15073  00797C  6FF9               	movwf	_which_screen& (0+255),b
 15074                           
 15075                           ; BSR set to: 0
 15076                           ;menu.c: 755: lcd_print_once = 0;
 15077  00797E  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15078                           
 15079                           ;menu.c: 757: while(encoder_click == 0) {
 15080  007980  D022               	goto	l3535
 15081  007982                     
 15082                           ;menu.c: 758: processEncoderBuxton();
 15083                           
 15084                           ; BSR set to: 0
 15085  007982  EC09  F000         	call	_processEncoderBuxton	;wreg free
 15086                           
 15087                           ;menu.c: 759: if (lcd_print_once == 0) {
 15088  007986  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15089  007988  D01D               	goto	l3537
 15090                           
 15091                           ;menu.c: 760: clear_row2();
 15092  00798A  EC0A  F04A         	call	_clear_row2	;wreg free
 15093                           
 15094                           ;menu.c: 761: Lcd_Print_String(LCD_STRINGS[(potsMenu.selector % potsMenu.number) + potsM
      +                          enu.address]);
 15095  00798E  C03E  F060         	movff	_potsMenu,___lbmod@divisor
 15096  007992  5040               	movf	_potsMenu+2,w,c
 15097  007994  EC89  F049         	call	___lbmod
 15098  007998  0100               	movlb	0	; () banked
 15099  00799A  6FA0               	movwf	??_Function_D& (0+255),b
 15100  00799C  51A0               	movf	??_Function_D& (0+255),w,b
 15101  00799E  243F               	addwf	_potsMenu+1,w,c
 15102  0079A0  6F64               	movwf	___wmul@multiplier& (0+255),b
 15103  0079A2  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 15104  0079A4  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15105  0079A6  0E00               	movlw	0
 15106  0079A8  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15107  0079AA  0E11               	movlw	17
 15108  0079AC  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15109  0079AE  EC32  F04A         	call	___wmul	;wreg free
 15110  0079B2  0E9E               	movlw	low _LCD_STRINGS
 15111  0079B4  0100               	movlb	0	; () banked
 15112  0079B6  2564               	addwf	?___wmul& (0+255),w,b
 15113  0079B8  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15114  0079BA  0EF3               	movlw	high _LCD_STRINGS
 15115  0079BC  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15116  0079BE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15117  0079C0  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 15118  0079C4                     l3537:
 15119                           
 15120                           ;menu.c: 762: }
 15121                           ;menu.c: 763: lcd_print_once = 1;
 15122  0079C4  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15123  0079C6                     l3535:
 15124  0079C6  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15125  0079C8  D7DC               	goto	l3536
 15126                           
 15127                           ;menu.c: 764: }
 15128                           ;menu.c: 766: if(potsMenu.selector == 0) {Function_D_1();}
 15129  0079CA  5040               	movf	_potsMenu+2,w,c
 15130  0079CC  B4D8               	btfsc	status,2,c
 15131  0079CE  ECF1  F03B         	call	_Function_D_1	;wreg free
 15132                           
 15133                           ;menu.c: 767: if(potsMenu.selector == 1) {Function_D_2();}
 15134  0079D2  0440               	decf	_potsMenu+2,w,c
 15135  0079D4  B4D8               	btfsc	status,2,c
 15136  0079D6  EC72  F044         	call	_Function_D_2	;wreg free
 15137                           
 15138                           ;menu.c: 768: if(potsMenu.selector == 2) {Function_D_3();}
 15139  0079DA  0E02               	movlw	2
 15140  0079DC  1840               	xorwf	_potsMenu+2,w,c
 15141  0079DE  B4D8               	btfsc	status,2,c
 15142  0079E0  EC38  F041         	call	_Function_D_3	;wreg free
 15143                           
 15144                           ;menu.c: 769: if(potsMenu.selector == 3) {Function_D_4();}
 15145  0079E4  0E03               	movlw	3
 15146  0079E6  1840               	xorwf	_potsMenu+2,w,c
 15147  0079E8  B4D8               	btfsc	status,2,c
 15148  0079EA  EC06  F03F         	call	_Function_D_4	;wreg free
 15149                           
 15150                           ;menu.c: 770: if(potsMenu.selector == 4) {Function_D_5();}
 15151  0079EE  0E04               	movlw	4
 15152  0079F0  1840               	xorwf	_potsMenu+2,w,c
 15153  0079F2  A4D8               	btfss	status,2,c
 15154  0079F4  0012               	return	
 15155  0079F6  ECC7  F03E         	call	_Function_D_5	;wreg free
 15156  0079FA  0012               	return	
 15157  0079FC                     __end_of_Function_D:
 15158                           	opt stack 0
 15159                           tblptru	equ	0xFF8
 15160                           tblptrh	equ	0xFF7
 15161                           tblptrl	equ	0xFF6
 15162                           tablat	equ	0xFF5
 15163                           prodh	equ	0xFF4
 15164                           prodl	equ	0xFF3
 15165                           intcon	equ	0xFF2
 15166                           intcon2	equ	0xFF1
 15167                           postinc0	equ	0xFEE
 15168                           wreg	equ	0xFE8
 15169                           postdec1	equ	0xFE5
 15170                           fsr1l	equ	0xFE1
 15171                           indf2	equ	0xFDF
 15172                           postinc2	equ	0xFDE
 15173                           fsr2h	equ	0xFDA
 15174                           fsr2l	equ	0xFD9
 15175                           status	equ	0xFD8
 15176                           
 15177 ;; *************** function _Function_D_5 *****************
 15178 ;; Defined at:
 15179 ;;		line 726 in file "menu.c"
 15180 ;; Parameters:    Size  Location     Type
 15181 ;;		None
 15182 ;; Auto vars:     Size  Location     Type
 15183 ;;  array_index     1   29[BANK0 ] unsigned char 
 15184 ;; Return value:  Size  Location     Type
 15185 ;;                  1    wreg      void 
 15186 ;; Registers used:
 15187 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15188 ;; Tracked objects:
 15189 ;;		On entry : 0/0
 15190 ;;		On exit  : 0/0
 15191 ;;		Unchanged: 0/0
 15192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15195 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15196 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15197 ;;Total ram usage:        2 bytes
 15198 ;; Hardware stack levels used:    1
 15199 ;; Hardware stack levels required when called:    9
 15200 ;; This function calls:
 15201 ;;		_Lcd_Print_String
 15202 ;;		___lbmod
 15203 ;;		___wmul
 15204 ;;		_clear_row1
 15205 ;;		_clear_row2
 15206 ;;		_processEncoderBuxton
 15207 ;;		_setControllerNumbers
 15208 ;; This function is called by:
 15209 ;;		_Function_D
 15210 ;; This function uses a non-reentrant model
 15211 ;;
 15212                           
 15213                           	psect	text42
 15214  007D8E                     __ptext42:
 15215                           	opt stack 0
 15216  007D8E                     _Function_D_5:
 15217                           	opt stack 19
 15218                           
 15219                           ;menu.c: 728: which_screen = JOYSTICK_CC_MENU;
 15220                           
 15221                           ;incstack = 0
 15222  007D8E  0E13               	movlw	19
 15223  007D90  0100               	movlb	0	; () banked
 15224  007D92  6FF9               	movwf	_which_screen& (0+255),b
 15225                           
 15226                           ; BSR set to: 0
 15227                           ;menu.c: 730: lcd_print_once = 0;
 15228  007D94  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15229                           
 15230                           ; BSR set to: 0
 15231                           ;menu.c: 731: encoder_click = 0;
 15232  007D96  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15233                           
 15234                           ;menu.c: 733: while(encoder_click == 0) {
 15235  007D98  D02E               	goto	l3528
 15236  007D9A                     
 15237                           ;menu.c: 734: processEncoderBuxton();
 15238                           
 15239                           ; BSR set to: 0
 15240  007D9A  EC09  F000         	call	_processEncoderBuxton	;wreg free
 15241                           
 15242                           ;menu.c: 735: if (lcd_print_once == 0) {
 15243  007D9E  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15244  007DA0  D029               	goto	l3530
 15245                           
 15246                           ;menu.c: 736: clear_row1();
 15247  007DA2  EC1E  F04A         	call	_clear_row1	;wreg free
 15248                           
 15249                           ;menu.c: 737: Lcd_Print_String("Set Joystick CC#");
 15250  007DA6  0E97               	movlw	low STR_33
 15251  007DA8  0100               	movlb	0	; () banked
 15252  007DAA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15253  007DAC  0EFD               	movlw	high STR_33
 15254  007DAE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15255  007DB0  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 15256                           
 15257                           ;menu.c: 738: clear_row2();
 15258  007DB4  EC0A  F04A         	call	_clear_row2	;wreg free
 15259                           
 15260                           ;menu.c: 739: Lcd_Print_String(LCD_STRINGS[(joystickCCMenu.selector % joystickCCMenu.num
      +                          ber) + joystickCCMenu.address]);
 15261  007DB8  C14A  F060         	movff	_joystickCCMenu,___lbmod@divisor
 15262  007DBC  0101               	movlb	1	; () banked
 15263  007DBE  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15264  007DC0  EC89  F049         	call	___lbmod
 15265  007DC4  0100               	movlb	0	; () banked
 15266  007DC6  6F7C               	movwf	??_Function_D_5& (0+255),b
 15267  007DC8  517C               	movf	??_Function_D_5& (0+255),w,b
 15268  007DCA  0101               	movlb	1	; () banked
 15269  007DCC  254B               	addwf	(_joystickCCMenu+1)& (0+255),w,b
 15270  007DCE  0100               	movlb	0	; () banked
 15271  007DD0  6F64               	movwf	___wmul@multiplier& (0+255),b
 15272  007DD2  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 15273  007DD4  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15274  007DD6  0E00               	movlw	0
 15275  007DD8  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15276  007DDA  0E11               	movlw	17
 15277  007DDC  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15278  007DDE  EC32  F04A         	call	___wmul	;wreg free
 15279  007DE2  0E9E               	movlw	low _LCD_STRINGS
 15280  007DE4  0100               	movlb	0	; () banked
 15281  007DE6  2564               	addwf	?___wmul& (0+255),w,b
 15282  007DE8  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15283  007DEA  0EF3               	movlw	high _LCD_STRINGS
 15284  007DEC  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15285  007DEE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15286  007DF0  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 15287  007DF4                     l3530:
 15288                           
 15289                           ;menu.c: 740: }
 15290                           ;menu.c: 741: lcd_print_once = 1;
 15291  007DF4  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15292  007DF6                     l3528:
 15293  007DF6  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15294  007DF8  D7D0               	goto	l3529
 15295                           
 15296                           ;menu.c: 742: }
 15297                           ;menu.c: 746: unsigned char array_index = (joystickCCMenu.selector) + 14;
 15298  007DFA  0101               	movlb	1	; () banked
 15299  007DFC  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15300  007DFE  0F0E               	addlw	14
 15301  007E00  0100               	movlb	0	; () banked
 15302  007E02  6F7D               	movwf	Function_D_5@array_index& (0+255),b
 15303                           
 15304                           ; BSR set to: 0
 15305                           ;menu.c: 747: setControllerNumbers(array_index);
 15306  007E04  517D               	movf	Function_D_5@array_index& (0+255),w,b
 15307  007E06  ECBE  F010         	call	_setControllerNumbers
 15308  007E0A  0012               	return		;funcret
 15309  007E0C                     __end_of_Function_D_5:
 15310                           	opt stack 0
 15311                           tblptru	equ	0xFF8
 15312                           tblptrh	equ	0xFF7
 15313                           tblptrl	equ	0xFF6
 15314                           tablat	equ	0xFF5
 15315                           prodh	equ	0xFF4
 15316                           prodl	equ	0xFF3
 15317                           intcon	equ	0xFF2
 15318                           intcon2	equ	0xFF1
 15319                           postinc0	equ	0xFEE
 15320                           wreg	equ	0xFE8
 15321                           postdec1	equ	0xFE5
 15322                           fsr1l	equ	0xFE1
 15323                           indf2	equ	0xFDF
 15324                           postinc2	equ	0xFDE
 15325                           fsr2h	equ	0xFDA
 15326                           fsr2l	equ	0xFD9
 15327                           status	equ	0xFD8
 15328                           
 15329 ;; *************** function _Function_D_4 *****************
 15330 ;; Defined at:
 15331 ;;		line 699 in file "menu.c"
 15332 ;; Parameters:    Size  Location     Type
 15333 ;;		None
 15334 ;; Auto vars:     Size  Location     Type
 15335 ;;  array_index     1   29[BANK0 ] unsigned char 
 15336 ;; Return value:  Size  Location     Type
 15337 ;;                  1    wreg      void 
 15338 ;; Registers used:
 15339 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15340 ;; Tracked objects:
 15341 ;;		On entry : 0/0
 15342 ;;		On exit  : 0/0
 15343 ;;		Unchanged: 0/0
 15344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15347 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15348 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15349 ;;Total ram usage:        2 bytes
 15350 ;; Hardware stack levels used:    1
 15351 ;; Hardware stack levels required when called:    9
 15352 ;; This function calls:
 15353 ;;		_Lcd_Print_String
 15354 ;;		___lbmod
 15355 ;;		___wmul
 15356 ;;		_clear_row1
 15357 ;;		_clear_row2
 15358 ;;		_processEncoderBuxton
 15359 ;;		_setControllerNumbers
 15360 ;; This function is called by:
 15361 ;;		_Function_D
 15362 ;; This function uses a non-reentrant model
 15363 ;;
 15364                           
 15365                           	psect	text43
 15366  007E0C                     __ptext43:
 15367                           	opt stack 0
 15368  007E0C                     _Function_D_4:
 15369                           	opt stack 19
 15370                           
 15371                           ;menu.c: 701: which_screen = SLIDEPOTS_CC_MENU;
 15372                           
 15373                           ;incstack = 0
 15374  007E0C  0E12               	movlw	18
 15375  007E0E  0100               	movlb	0	; () banked
 15376  007E10  6FF9               	movwf	_which_screen& (0+255),b
 15377                           
 15378                           ; BSR set to: 0
 15379                           ;menu.c: 703: lcd_print_once = 0;
 15380  007E12  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15381                           
 15382                           ; BSR set to: 0
 15383                           ;menu.c: 704: encoder_click = 0;
 15384  007E14  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15385                           
 15386                           ;menu.c: 706: while(encoder_click == 0) {
 15387  007E16  D02E               	goto	l3521
 15388  007E18                     
 15389                           ;menu.c: 707: processEncoderBuxton();
 15390                           
 15391                           ; BSR set to: 0
 15392  007E18  EC09  F000         	call	_processEncoderBuxton	;wreg free
 15393                           
 15394                           ;menu.c: 708: if (lcd_print_once == 0) {
 15395  007E1C  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15396  007E1E  D029               	goto	l3523
 15397                           
 15398                           ;menu.c: 709: clear_row1();
 15399  007E20  EC1E  F04A         	call	_clear_row1	;wreg free
 15400                           
 15401                           ;menu.c: 710: Lcd_Print_String("Slidepots CC#:");
 15402  007E24  0E4D               	movlw	low STR_32
 15403  007E26  0100               	movlb	0	; () banked
 15404  007E28  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15405  007E2A  0EFE               	movlw	high STR_32
 15406  007E2C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15407  007E2E  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 15408                           
 15409                           ;menu.c: 711: clear_row2();
 15410  007E32  EC0A  F04A         	call	_clear_row2	;wreg free
 15411                           
 15412                           ;menu.c: 712: Lcd_Print_String(LCD_STRINGS[(slidepotsCCMenu.selector % slidepotsCCMenu.n
      +                          umber) + slidepotsCCMenu.address]);
 15413  007E36  C14D  F060         	movff	_slidepotsCCMenu,___lbmod@divisor
 15414  007E3A  0101               	movlb	1	; () banked
 15415  007E3C  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15416  007E3E  EC89  F049         	call	___lbmod
 15417  007E42  0100               	movlb	0	; () banked
 15418  007E44  6F7C               	movwf	??_Function_D_4& (0+255),b
 15419  007E46  517C               	movf	??_Function_D_4& (0+255),w,b
 15420  007E48  0101               	movlb	1	; () banked
 15421  007E4A  254E               	addwf	(_slidepotsCCMenu+1)& (0+255),w,b
 15422  007E4C  0100               	movlb	0	; () banked
 15423  007E4E  6F64               	movwf	___wmul@multiplier& (0+255),b
 15424  007E50  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 15425  007E52  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15426  007E54  0E00               	movlw	0
 15427  007E56  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15428  007E58  0E11               	movlw	17
 15429  007E5A  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15430  007E5C  EC32  F04A         	call	___wmul	;wreg free
 15431  007E60  0E9E               	movlw	low _LCD_STRINGS
 15432  007E62  0100               	movlb	0	; () banked
 15433  007E64  2564               	addwf	?___wmul& (0+255),w,b
 15434  007E66  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15435  007E68  0EF3               	movlw	high _LCD_STRINGS
 15436  007E6A  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15437  007E6C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15438  007E6E  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 15439  007E72                     l3523:
 15440                           
 15441                           ;menu.c: 713: }
 15442                           ;menu.c: 714: lcd_print_once = 1;
 15443  007E72  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15444  007E74                     l3521:
 15445  007E74  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15446  007E76  D7D0               	goto	l3522
 15447                           
 15448                           ;menu.c: 715: }
 15449                           ;menu.c: 720: unsigned char array_index = (slidepotsCCMenu.selector) + 7;
 15450  007E78  0101               	movlb	1	; () banked
 15451  007E7A  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15452  007E7C  0F07               	addlw	7
 15453  007E7E  0100               	movlb	0	; () banked
 15454  007E80  6F7D               	movwf	Function_D_4@array_index& (0+255),b
 15455                           
 15456                           ; BSR set to: 0
 15457                           ;menu.c: 721: setControllerNumbers(array_index);
 15458  007E82  517D               	movf	Function_D_4@array_index& (0+255),w,b
 15459  007E84  ECBE  F010         	call	_setControllerNumbers
 15460  007E88  0012               	return		;funcret
 15461  007E8A                     __end_of_Function_D_4:
 15462                           	opt stack 0
 15463                           tblptru	equ	0xFF8
 15464                           tblptrh	equ	0xFF7
 15465                           tblptrl	equ	0xFF6
 15466                           tablat	equ	0xFF5
 15467                           prodh	equ	0xFF4
 15468                           prodl	equ	0xFF3
 15469                           intcon	equ	0xFF2
 15470                           intcon2	equ	0xFF1
 15471                           postinc0	equ	0xFEE
 15472                           wreg	equ	0xFE8
 15473                           postdec1	equ	0xFE5
 15474                           fsr1l	equ	0xFE1
 15475                           indf2	equ	0xFDF
 15476                           postinc2	equ	0xFDE
 15477                           fsr2h	equ	0xFDA
 15478                           fsr2l	equ	0xFD9
 15479                           status	equ	0xFD8
 15480                           
 15481 ;; *************** function _Function_D_3 *****************
 15482 ;; Defined at:
 15483 ;;		line 675 in file "menu.c"
 15484 ;; Parameters:    Size  Location     Type
 15485 ;;		None
 15486 ;; Auto vars:     Size  Location     Type
 15487 ;;  array_index     1   29[BANK0 ] unsigned char 
 15488 ;; Return value:  Size  Location     Type
 15489 ;;                  1    wreg      void 
 15490 ;; Registers used:
 15491 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15492 ;; Tracked objects:
 15493 ;;		On entry : 0/0
 15494 ;;		On exit  : 0/0
 15495 ;;		Unchanged: 0/0
 15496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15498 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15499 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15500 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15501 ;;Total ram usage:        2 bytes
 15502 ;; Hardware stack levels used:    1
 15503 ;; Hardware stack levels required when called:    9
 15504 ;; This function calls:
 15505 ;;		_Lcd_Print_String
 15506 ;;		___lbmod
 15507 ;;		___wmul
 15508 ;;		_clear_row1
 15509 ;;		_clear_row2
 15510 ;;		_processEncoderBuxton
 15511 ;;		_setControllerNumbers
 15512 ;; This function is called by:
 15513 ;;		_Function_D
 15514 ;; This function uses a non-reentrant model
 15515 ;;
 15516                           
 15517                           	psect	text44
 15518  008270                     __ptext44:
 15519                           	opt stack 0
 15520  008270                     _Function_D_3:
 15521                           	opt stack 19
 15522                           
 15523                           ;menu.c: 677: which_screen = POTS_CC_MENU;
 15524                           
 15525                           ;incstack = 0
 15526  008270  0E11               	movlw	17
 15527  008272  0100               	movlb	0	; () banked
 15528  008274  6FF9               	movwf	_which_screen& (0+255),b
 15529                           
 15530                           ; BSR set to: 0
 15531                           ;menu.c: 679: lcd_print_once = 0;
 15532  008276  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15533                           
 15534                           ; BSR set to: 0
 15535                           ;menu.c: 680: encoder_click = 0;
 15536  008278  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15537                           
 15538                           ;menu.c: 682: while(encoder_click == 0) {
 15539  00827A  D02E               	goto	l3514
 15540  00827C                     
 15541                           ;menu.c: 683: processEncoderBuxton();
 15542                           
 15543                           ; BSR set to: 0
 15544  00827C  EC09  F000         	call	_processEncoderBuxton	;wreg free
 15545                           
 15546                           ;menu.c: 684: if (lcd_print_once == 0) {
 15547  008280  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15548  008282  D029               	goto	l3516
 15549                           
 15550                           ;menu.c: 685: clear_row1();
 15551  008284  EC1E  F04A         	call	_clear_row1	;wreg free
 15552                           
 15553                           ;menu.c: 686: Lcd_Print_String("Set Pots CC#:");
 15554  008288  0EC4               	movlw	low STR_31
 15555  00828A  0100               	movlb	0	; () banked
 15556  00828C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15557  00828E  0EFE               	movlw	high STR_31
 15558  008290  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15559  008292  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 15560                           
 15561                           ;menu.c: 687: clear_row2();
 15562  008296  EC0A  F04A         	call	_clear_row2	;wreg free
 15563                           
 15564                           ;menu.c: 688: Lcd_Print_String(LCD_STRINGS[(potsCCMenu.selector % potsCCMenu.number) + p
      +                          otsCCMenu.address]);
 15565  00829A  C150  F060         	movff	_potsCCMenu,___lbmod@divisor
 15566  00829E  0101               	movlb	1	; () banked
 15567  0082A0  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 15568  0082A2  EC89  F049         	call	___lbmod
 15569  0082A6  0100               	movlb	0	; () banked
 15570  0082A8  6F7C               	movwf	??_Function_D_3& (0+255),b
 15571  0082AA  517C               	movf	??_Function_D_3& (0+255),w,b
 15572  0082AC  0101               	movlb	1	; () banked
 15573  0082AE  2551               	addwf	(_potsCCMenu+1)& (0+255),w,b
 15574  0082B0  0100               	movlb	0	; () banked
 15575  0082B2  6F64               	movwf	___wmul@multiplier& (0+255),b
 15576  0082B4  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 15577  0082B6  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15578  0082B8  0E00               	movlw	0
 15579  0082BA  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15580  0082BC  0E11               	movlw	17
 15581  0082BE  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15582  0082C0  EC32  F04A         	call	___wmul	;wreg free
 15583  0082C4  0E9E               	movlw	low _LCD_STRINGS
 15584  0082C6  0100               	movlb	0	; () banked
 15585  0082C8  2564               	addwf	?___wmul& (0+255),w,b
 15586  0082CA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 15587  0082CC  0EF3               	movlw	high _LCD_STRINGS
 15588  0082CE  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15589  0082D0  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15590  0082D2  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 15591  0082D6                     l3516:
 15592                           
 15593                           ;menu.c: 689: }
 15594                           ;menu.c: 690: lcd_print_once = 1;
 15595  0082D6  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15596  0082D8                     l3514:
 15597  0082D8  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15598  0082DA  D7D0               	goto	l3515
 15599                           
 15600                           ;menu.c: 691: }
 15601                           ;menu.c: 693: unsigned char array_index = potsCCMenu.selector;
 15602  0082DC  C152  F07D         	movff	_potsCCMenu+2,Function_D_3@array_index
 15603                           
 15604                           ;menu.c: 694: setControllerNumbers(array_index);
 15605  0082E0  0100               	movlb	0	; () banked
 15606  0082E2  517D               	movf	Function_D_3@array_index& (0+255),w,b
 15607  0082E4  ECBE  F010         	call	_setControllerNumbers
 15608  0082E8  0012               	return		;funcret
 15609  0082EA                     __end_of_Function_D_3:
 15610                           	opt stack 0
 15611                           tblptru	equ	0xFF8
 15612                           tblptrh	equ	0xFF7
 15613                           tblptrl	equ	0xFF6
 15614                           tablat	equ	0xFF5
 15615                           prodh	equ	0xFF4
 15616                           prodl	equ	0xFF3
 15617                           intcon	equ	0xFF2
 15618                           intcon2	equ	0xFF1
 15619                           postinc0	equ	0xFEE
 15620                           wreg	equ	0xFE8
 15621                           postdec1	equ	0xFE5
 15622                           fsr1l	equ	0xFE1
 15623                           indf2	equ	0xFDF
 15624                           postinc2	equ	0xFDE
 15625                           fsr2h	equ	0xFDA
 15626                           fsr2l	equ	0xFD9
 15627                           status	equ	0xFD8
 15628                           
 15629 ;; *************** function _setControllerNumbers *****************
 15630 ;; Defined at:
 15631 ;;		line 125 in file "menu.c"
 15632 ;; Parameters:    Size  Location     Type
 15633 ;;  array_index     1    wreg     unsigned char 
 15634 ;; Auto vars:     Size  Location     Type
 15635 ;;  array_index     1   27[BANK0 ] unsigned char 
 15636 ;; Return value:  Size  Location     Type
 15637 ;;                  1    wreg      void 
 15638 ;; Registers used:
 15639 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15640 ;; Tracked objects:
 15641 ;;		On entry : 0/0
 15642 ;;		On exit  : 0/0
 15643 ;;		Unchanged: 0/0
 15644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15647 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15649 ;;Total ram usage:        2 bytes
 15650 ;; Hardware stack levels used:    1
 15651 ;; Hardware stack levels required when called:    8
 15652 ;; This function calls:
 15653 ;;		_Lcd_Print_String
 15654 ;;		_Lcd_Set_Cursor
 15655 ;;		_int2string
 15656 ;; This function is called by:
 15657 ;;		_Function_D_3
 15658 ;;		_Function_D_4
 15659 ;;		_Function_D_5
 15660 ;;		_initializeControllerNumbers
 15661 ;; This function uses a non-reentrant model
 15662 ;;
 15663                           
 15664                           	psect	text45
 15665  00217C                     __ptext45:
 15666                           	opt stack 0
 15667  00217C                     _setControllerNumbers:
 15668                           	opt stack 19
 15669                           
 15670                           ;incstack = 0
 15671                           ;setControllerNumbers@array_index stored from wreg
 15672  00217C  0100               	movlb	0	; () banked
 15673  00217E  6F7B               	movwf	setControllerNumbers@array_index& (0+255),b
 15674                           
 15675                           ;menu.c: 127: which_screen = BLANK;
 15676  002180  0E00               	movlw	0
 15677  002182  0100               	movlb	0	; () banked
 15678  002184  6FF9               	movwf	_which_screen& (0+255),b
 15679                           
 15680                           ; BSR set to: 0
 15681                           ;menu.c: 128: lcd_print_once = 0;
 15682  002186  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15683                           
 15684                           ; BSR set to: 0
 15685                           ;menu.c: 129: encoder_click = 0;
 15686  002188  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15687                           
 15688                           ;menu.c: 131: while(encoder_click == 0) {
 15689  00218A  D271               	goto	l3369
 15690  00218C                     l3342:
 15691                           
 15692                           ;menu.c: 136: if(lcd_print_once == 0) {
 15693  00218C  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15694  00218E  D1CF               	goto	l3363
 15695                           
 15696                           ;menu.c: 138: if (encoder_direction == 0x10) {
 15697  002190  0E10               	movlw	16
 15698  002192  0100               	movlb	0	; () banked
 15699  002194  19EB               	xorwf	_encoder_direction& (0+255),w,b
 15700  002196  A4D8               	btfss	status,2,c
 15701  002198  D075               	goto	l3344
 15702                           
 15703                           ; BSR set to: 0
 15704                           ;menu.c: 140: if(inputPotsArray[array_index].controller_resolution == 0){
 15705  00219A  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15706  00219C  0D03               	mullw	3
 15707  00219E  0EAC               	movlw	low _inputPotsArray
 15708  0021A0  24F3               	addwf	prodl,w,c
 15709  0021A2  6ED9               	movwf	fsr2l,c
 15710  0021A4  0E02               	movlw	high _inputPotsArray
 15711  0021A6  20F4               	addwfc	prodh,w,c
 15712  0021A8  6EDA               	movwf	fsr2h,c
 15713  0021AA  0102               	movlb	2	; () banked
 15714  0021AC  B0DF               	btfsc	indf2,0,c
 15715  0021AE  D03C               	goto	l3347
 15716                           
 15717                           ; BSR set to: 2
 15718                           ;menu.c: 141: if(inputPotsArray[array_index].controller_number < 119) {
 15719  0021B0  0100               	movlb	0	; () banked
 15720  0021B2  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15721  0021B4  0D03               	mullw	3
 15722  0021B6  0E01               	movlw	1
 15723  0021B8  26F3               	addwf	prodl,f,c
 15724  0021BA  0E00               	movlw	0
 15725  0021BC  22F4               	addwfc	prodh,f,c
 15726  0021BE  0EAC               	movlw	low _inputPotsArray
 15727  0021C0  24F3               	addwf	prodl,w,c
 15728  0021C2  6ED9               	movwf	fsr2l,c
 15729  0021C4  0E02               	movlw	high _inputPotsArray
 15730  0021C6  20F4               	addwfc	prodh,w,c
 15731  0021C8  6EDA               	movwf	fsr2h,c
 15732  0021CA  50DF               	movf	indf2,w,c
 15733  0021CC  0A80               	xorlw	128
 15734  0021CE  0F09               	addlw	-247
 15735  0021D0  B0D8               	btfsc	status,0,c
 15736  0021D2  D02A               	goto	l3347
 15737                           
 15738                           ; BSR set to: 0
 15739                           ;menu.c: 142: inputPotsArray[array_index].controller_number++;
 15740  0021D4  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15741  0021D6  0D03               	mullw	3
 15742  0021D8  0E01               	movlw	1
 15743  0021DA  26F3               	addwf	prodl,f,c
 15744  0021DC  0E00               	movlw	0
 15745  0021DE  22F4               	addwfc	prodh,f,c
 15746  0021E0  0EAC               	movlw	low _inputPotsArray
 15747  0021E2  24F3               	addwf	prodl,w,c
 15748  0021E4  6ED9               	movwf	fsr2l,c
 15749  0021E6  0E02               	movlw	high _inputPotsArray
 15750  0021E8  20F4               	addwfc	prodh,w,c
 15751  0021EA  6EDA               	movwf	fsr2h,c
 15752  0021EC  2ADF               	incf	indf2,f,c
 15753                           
 15754                           ;menu.c: 143: if(inputPotsArray[array_index].controller_number == 0){inputPotsArray[arra
      +                          y_index].controller_number = 64;}
 15755  0021EE  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15756  0021F0  0D03               	mullw	3
 15757  0021F2  0E01               	movlw	1
 15758  0021F4  26F3               	addwf	prodl,f,c
 15759  0021F6  0E00               	movlw	0
 15760  0021F8  22F4               	addwfc	prodh,f,c
 15761  0021FA  0EAC               	movlw	low _inputPotsArray
 15762  0021FC  24F3               	addwf	prodl,w,c
 15763  0021FE  6ED9               	movwf	fsr2l,c
 15764  002200  0E02               	movlw	high _inputPotsArray
 15765  002202  20F4               	addwfc	prodh,w,c
 15766  002204  6EDA               	movwf	fsr2h,c
 15767  002206  50DF               	movf	indf2,w,c
 15768  002208  A4D8               	btfss	status,2,c
 15769  00220A  D00E               	goto	l3347
 15770                           
 15771                           ; BSR set to: 0
 15772  00220C  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15773  00220E  0D03               	mullw	3
 15774  002210  0E01               	movlw	1
 15775  002212  26F3               	addwf	prodl,f,c
 15776  002214  0E00               	movlw	0
 15777  002216  22F4               	addwfc	prodh,f,c
 15778  002218  0EAC               	movlw	low _inputPotsArray
 15779  00221A  24F3               	addwf	prodl,w,c
 15780  00221C  6ED9               	movwf	fsr2l,c
 15781  00221E  0E02               	movlw	high _inputPotsArray
 15782  002220  20F4               	addwfc	prodh,w,c
 15783  002222  6EDA               	movwf	fsr2h,c
 15784  002224  0E40               	movlw	64
 15785  002226  6EDF               	movwf	indf2,c
 15786  002228                     l3347:
 15787                           
 15788                           ;menu.c: 144: }
 15789                           ;menu.c: 145: }
 15790                           ;menu.c: 147: if(inputPotsArray[array_index].controller_resolution == 1){
 15791                           
 15792                           ; BSR set to: 0
 15793                           
 15794                           ; BSR set to: 0
 15795  002228  0100               	movlb	0	; () banked
 15796  00222A  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15797  00222C  0D03               	mullw	3
 15798  00222E  0EAC               	movlw	low _inputPotsArray
 15799  002230  24F3               	addwf	prodl,w,c
 15800  002232  6ED9               	movwf	fsr2l,c
 15801  002234  0E02               	movlw	high _inputPotsArray
 15802  002236  20F4               	addwfc	prodh,w,c
 15803  002238  6EDA               	movwf	fsr2h,c
 15804  00223A  0102               	movlb	2	; () banked
 15805  00223C  A0DF               	btfss	indf2,0,c
 15806  00223E  D01F               	goto	l3349
 15807                           
 15808                           ; BSR set to: 2
 15809                           ;menu.c: 148: if(inputPotsArray[array_index].controller_number_two_byte < 31) {
 15810  002240  0100               	movlb	0	; () banked
 15811  002242  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15812  002244  0D03               	mullw	3
 15813  002246  0E02               	movlw	2
 15814  002248  26F3               	addwf	prodl,f,c
 15815  00224A  0E00               	movlw	0
 15816  00224C  22F4               	addwfc	prodh,f,c
 15817  00224E  0EAC               	movlw	low _inputPotsArray
 15818  002250  24F3               	addwf	prodl,w,c
 15819  002252  6ED9               	movwf	fsr2l,c
 15820  002254  0E02               	movlw	high _inputPotsArray
 15821  002256  20F4               	addwfc	prodh,w,c
 15822  002258  6EDA               	movwf	fsr2h,c
 15823  00225A  50DF               	movf	indf2,w,c
 15824  00225C  0A80               	xorlw	128
 15825  00225E  0F61               	addlw	-159
 15826  002260  B0D8               	btfsc	status,0,c
 15827  002262  D00D               	goto	l3349
 15828                           
 15829                           ; BSR set to: 0
 15830                           ;menu.c: 149: inputPotsArray[array_index].controller_number_two_byte++;
 15831  002264  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15832  002266  0D03               	mullw	3
 15833  002268  0E02               	movlw	2
 15834  00226A  26F3               	addwf	prodl,f,c
 15835  00226C  0E00               	movlw	0
 15836  00226E  22F4               	addwfc	prodh,f,c
 15837  002270  0EAC               	movlw	low _inputPotsArray
 15838  002272  24F3               	addwf	prodl,w,c
 15839  002274  6ED9               	movwf	fsr2l,c
 15840  002276  0E02               	movlw	high _inputPotsArray
 15841  002278  20F4               	addwfc	prodh,w,c
 15842  00227A  6EDA               	movwf	fsr2h,c
 15843  00227C  2ADF               	incf	indf2,f,c
 15844  00227E                     l3349:
 15845                           
 15846                           ;menu.c: 150: }
 15847                           ;menu.c: 151: }
 15848                           ;menu.c: 153: encoder_direction = 0x00;
 15849                           
 15850                           ; BSR set to: 0
 15851                           
 15852                           ; BSR set to: 0
 15853  00227E  0E00               	movlw	0
 15854  002280  0100               	movlb	0	; () banked
 15855  002282  6FEB               	movwf	_encoder_direction& (0+255),b
 15856  002284                     l3344:
 15857                           
 15858                           ; BSR set to: 0
 15859                           ;menu.c: 154: }
 15860                           ;menu.c: 158: if (encoder_direction == 0x20) {
 15861                           
 15862                           ; BSR set to: 0
 15863  002284  0E20               	movlw	32
 15864  002286  19EB               	xorwf	_encoder_direction& (0+255),w,b
 15865  002288  A4D8               	btfss	status,2,c
 15866  00228A  D0B2               	goto	l3350
 15867                           
 15868                           ; BSR set to: 0
 15869                           ;menu.c: 160: if(inputPotsArray[array_index].controller_resolution == 0){
 15870  00228C  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15871  00228E  0D03               	mullw	3
 15872  002290  0EAC               	movlw	low _inputPotsArray
 15873  002292  24F3               	addwf	prodl,w,c
 15874  002294  6ED9               	movwf	fsr2l,c
 15875  002296  0E02               	movlw	high _inputPotsArray
 15876  002298  20F4               	addwfc	prodh,w,c
 15877  00229A  6EDA               	movwf	fsr2h,c
 15878  00229C  0102               	movlb	2	; () banked
 15879  00229E  B0DF               	btfsc	indf2,0,c
 15880  0022A0  D079               	goto	l3355
 15881                           
 15882                           ; BSR set to: 2
 15883                           ;menu.c: 162: if(inputPotsArray[array_index].controller_number > -3) {
 15884  0022A2  0100               	movlb	0	; () banked
 15885  0022A4  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15886  0022A6  0D03               	mullw	3
 15887  0022A8  0E01               	movlw	1
 15888  0022AA  26F3               	addwf	prodl,f,c
 15889  0022AC  0E00               	movlw	0
 15890  0022AE  22F4               	addwfc	prodh,f,c
 15891  0022B0  0EAC               	movlw	low _inputPotsArray
 15892  0022B2  24F3               	addwf	prodl,w,c
 15893  0022B4  6ED9               	movwf	fsr2l,c
 15894  0022B6  0E02               	movlw	high _inputPotsArray
 15895  0022B8  20F4               	addwfc	prodh,w,c
 15896  0022BA  6EDA               	movwf	fsr2h,c
 15897  0022BC  50DF               	movf	indf2,w,c
 15898  0022BE  0A80               	xorlw	128
 15899  0022C0  0F82               	addlw	130
 15900  0022C2  A0D8               	btfss	status,0,c
 15901  0022C4  D00D               	goto	l3352
 15902                           
 15903                           ; BSR set to: 0
 15904                           ;menu.c: 163: inputPotsArray[array_index].controller_number--;
 15905  0022C6  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15906  0022C8  0D03               	mullw	3
 15907  0022CA  0E01               	movlw	1
 15908  0022CC  26F3               	addwf	prodl,f,c
 15909  0022CE  0E00               	movlw	0
 15910  0022D0  22F4               	addwfc	prodh,f,c
 15911  0022D2  0EAC               	movlw	low _inputPotsArray
 15912  0022D4  24F3               	addwf	prodl,w,c
 15913  0022D6  6ED9               	movwf	fsr2l,c
 15914  0022D8  0E02               	movlw	high _inputPotsArray
 15915  0022DA  20F4               	addwfc	prodh,w,c
 15916  0022DC  6EDA               	movwf	fsr2h,c
 15917  0022DE  06DF               	decf	indf2,f,c
 15918  0022E0                     l3352:
 15919                           
 15920                           ; BSR set to: 0
 15921                           ;menu.c: 164: }
 15922                           ;menu.c: 165: if(inputPotsArray[array_index].controller_number == 61) {inputPotsArray[ar
      +                          ray_index].controller_number = -3;}
 15923  0022E0  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15924  0022E2  0D03               	mullw	3
 15925  0022E4  0E01               	movlw	1
 15926  0022E6  26F3               	addwf	prodl,f,c
 15927  0022E8  0E00               	movlw	0
 15928  0022EA  22F4               	addwfc	prodh,f,c
 15929  0022EC  0EAC               	movlw	low _inputPotsArray
 15930  0022EE  24F3               	addwf	prodl,w,c
 15931  0022F0  6ED9               	movwf	fsr2l,c
 15932  0022F2  0E02               	movlw	high _inputPotsArray
 15933  0022F4  20F4               	addwfc	prodh,w,c
 15934  0022F6  6EDA               	movwf	fsr2h,c
 15935  0022F8  0E3D               	movlw	61
 15936  0022FA  18DE               	xorwf	postinc2,w,c
 15937  0022FC  A4D8               	btfss	status,2,c
 15938  0022FE  D00E               	goto	l3353
 15939                           
 15940                           ; BSR set to: 0
 15941  002300  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15942  002302  0D03               	mullw	3
 15943  002304  0E01               	movlw	1
 15944  002306  26F3               	addwf	prodl,f,c
 15945  002308  0E00               	movlw	0
 15946  00230A  22F4               	addwfc	prodh,f,c
 15947  00230C  0EAC               	movlw	low _inputPotsArray
 15948  00230E  24F3               	addwf	prodl,w,c
 15949  002310  6ED9               	movwf	fsr2l,c
 15950  002312  0E02               	movlw	high _inputPotsArray
 15951  002314  20F4               	addwfc	prodh,w,c
 15952  002316  6EDA               	movwf	fsr2h,c
 15953  002318  0EFD               	movlw	253
 15954  00231A  6EDF               	movwf	indf2,c
 15955  00231C                     l3353:
 15956                           
 15957                           ; BSR set to: 0
 15958                           ;menu.c: 166: if(inputPotsArray[array_index].controller_number == 62) {inputPotsArray[ar
      +                          ray_index].controller_number = -2;}
 15959  00231C  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15960  00231E  0D03               	mullw	3
 15961  002320  0E01               	movlw	1
 15962  002322  26F3               	addwf	prodl,f,c
 15963  002324  0E00               	movlw	0
 15964  002326  22F4               	addwfc	prodh,f,c
 15965  002328  0EAC               	movlw	low _inputPotsArray
 15966  00232A  24F3               	addwf	prodl,w,c
 15967  00232C  6ED9               	movwf	fsr2l,c
 15968  00232E  0E02               	movlw	high _inputPotsArray
 15969  002330  20F4               	addwfc	prodh,w,c
 15970  002332  6EDA               	movwf	fsr2h,c
 15971  002334  0E3E               	movlw	62
 15972  002336  18DE               	xorwf	postinc2,w,c
 15973  002338  A4D8               	btfss	status,2,c
 15974  00233A  D00E               	goto	l3354
 15975                           
 15976                           ; BSR set to: 0
 15977  00233C  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15978  00233E  0D03               	mullw	3
 15979  002340  0E01               	movlw	1
 15980  002342  26F3               	addwf	prodl,f,c
 15981  002344  0E00               	movlw	0
 15982  002346  22F4               	addwfc	prodh,f,c
 15983  002348  0EAC               	movlw	low _inputPotsArray
 15984  00234A  24F3               	addwf	prodl,w,c
 15985  00234C  6ED9               	movwf	fsr2l,c
 15986  00234E  0E02               	movlw	high _inputPotsArray
 15987  002350  20F4               	addwfc	prodh,w,c
 15988  002352  6EDA               	movwf	fsr2h,c
 15989  002354  0EFE               	movlw	254
 15990  002356  6EDF               	movwf	indf2,c
 15991  002358                     l3354:
 15992                           
 15993                           ; BSR set to: 0
 15994                           ;menu.c: 167: if(inputPotsArray[array_index].controller_number == 63) {inputPotsArray[ar
      +                          ray_index].controller_number = -1;}
 15995  002358  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 15996  00235A  0D03               	mullw	3
 15997  00235C  0E01               	movlw	1
 15998  00235E  26F3               	addwf	prodl,f,c
 15999  002360  0E00               	movlw	0
 16000  002362  22F4               	addwfc	prodh,f,c
 16001  002364  0EAC               	movlw	low _inputPotsArray
 16002  002366  24F3               	addwf	prodl,w,c
 16003  002368  6ED9               	movwf	fsr2l,c
 16004  00236A  0E02               	movlw	high _inputPotsArray
 16005  00236C  20F4               	addwfc	prodh,w,c
 16006  00236E  6EDA               	movwf	fsr2h,c
 16007  002370  0E3F               	movlw	63
 16008  002372  18DE               	xorwf	postinc2,w,c
 16009  002374  A4D8               	btfss	status,2,c
 16010  002376  D00E               	goto	l3355
 16011                           
 16012                           ; BSR set to: 0
 16013  002378  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16014  00237A  0D03               	mullw	3
 16015  00237C  0E01               	movlw	1
 16016  00237E  26F3               	addwf	prodl,f,c
 16017  002380  0E00               	movlw	0
 16018  002382  22F4               	addwfc	prodh,f,c
 16019  002384  0EAC               	movlw	low _inputPotsArray
 16020  002386  24F3               	addwf	prodl,w,c
 16021  002388  6ED9               	movwf	fsr2l,c
 16022  00238A  0E02               	movlw	high _inputPotsArray
 16023  00238C  20F4               	addwfc	prodh,w,c
 16024  00238E  6EDA               	movwf	fsr2h,c
 16025  002390  0EFF               	movlw	255
 16026  002392  6EDF               	movwf	indf2,c
 16027  002394                     l3355:
 16028                           
 16029                           ;menu.c: 169: }
 16030                           ;menu.c: 171: if(inputPotsArray[array_index].controller_resolution == 1){
 16031                           
 16032                           ; BSR set to: 0
 16033  002394  0100               	movlb	0	; () banked
 16034  002396  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16035  002398  0D03               	mullw	3
 16036  00239A  0EAC               	movlw	low _inputPotsArray
 16037  00239C  24F3               	addwf	prodl,w,c
 16038  00239E  6ED9               	movwf	fsr2l,c
 16039  0023A0  0E02               	movlw	high _inputPotsArray
 16040  0023A2  20F4               	addwfc	prodh,w,c
 16041  0023A4  6EDA               	movwf	fsr2h,c
 16042  0023A6  0102               	movlb	2	; () banked
 16043  0023A8  A0DF               	btfss	indf2,0,c
 16044  0023AA  D01F               	goto	l3357
 16045                           
 16046                           ; BSR set to: 2
 16047                           ;menu.c: 173: if(inputPotsArray[array_index].controller_number_two_byte > -3) {
 16048  0023AC  0100               	movlb	0	; () banked
 16049  0023AE  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16050  0023B0  0D03               	mullw	3
 16051  0023B2  0E02               	movlw	2
 16052  0023B4  26F3               	addwf	prodl,f,c
 16053  0023B6  0E00               	movlw	0
 16054  0023B8  22F4               	addwfc	prodh,f,c
 16055  0023BA  0EAC               	movlw	low _inputPotsArray
 16056  0023BC  24F3               	addwf	prodl,w,c
 16057  0023BE  6ED9               	movwf	fsr2l,c
 16058  0023C0  0E02               	movlw	high _inputPotsArray
 16059  0023C2  20F4               	addwfc	prodh,w,c
 16060  0023C4  6EDA               	movwf	fsr2h,c
 16061  0023C6  50DF               	movf	indf2,w,c
 16062  0023C8  0A80               	xorlw	128
 16063  0023CA  0F82               	addlw	130
 16064  0023CC  A0D8               	btfss	status,0,c
 16065  0023CE  D00D               	goto	l3357
 16066                           
 16067                           ; BSR set to: 0
 16068                           ;menu.c: 174: inputPotsArray[array_index].controller_number_two_byte--;
 16069  0023D0  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16070  0023D2  0D03               	mullw	3
 16071  0023D4  0E02               	movlw	2
 16072  0023D6  26F3               	addwf	prodl,f,c
 16073  0023D8  0E00               	movlw	0
 16074  0023DA  22F4               	addwfc	prodh,f,c
 16075  0023DC  0EAC               	movlw	low _inputPotsArray
 16076  0023DE  24F3               	addwf	prodl,w,c
 16077  0023E0  6ED9               	movwf	fsr2l,c
 16078  0023E2  0E02               	movlw	high _inputPotsArray
 16079  0023E4  20F4               	addwfc	prodh,w,c
 16080  0023E6  6EDA               	movwf	fsr2h,c
 16081  0023E8  06DF               	decf	indf2,f,c
 16082  0023EA                     l3357:
 16083                           
 16084                           ;menu.c: 175: }
 16085                           ;menu.c: 177: }
 16086                           ;menu.c: 179: encoder_direction = 0x00;
 16087                           
 16088                           ; BSR set to: 0
 16089                           
 16090                           ; BSR set to: 0
 16091  0023EA  0E00               	movlw	0
 16092  0023EC  0100               	movlb	0	; () banked
 16093  0023EE  6FEB               	movwf	_encoder_direction& (0+255),b
 16094  0023F0                     l3350:
 16095                           
 16096                           ; BSR set to: 0
 16097                           ;menu.c: 180: }
 16098                           ;menu.c: 182: if(inputPotsArray[array_index].controller_resolution == 0){
 16099                           
 16100                           ; BSR set to: 0
 16101  0023F0  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16102  0023F2  0D03               	mullw	3
 16103  0023F4  0EAC               	movlw	low _inputPotsArray
 16104  0023F6  24F3               	addwf	prodl,w,c
 16105  0023F8  6ED9               	movwf	fsr2l,c
 16106  0023FA  0E02               	movlw	high _inputPotsArray
 16107  0023FC  20F4               	addwfc	prodh,w,c
 16108  0023FE  6EDA               	movwf	fsr2h,c
 16109  002400  0102               	movlb	2	; () banked
 16110  002402  B0DF               	btfsc	indf2,0,c
 16111  002404  D094               	goto	l3363
 16112                           
 16113                           ; BSR set to: 2
 16114                           ;menu.c: 184: if(inputPotsArray[array_index].controller_number >= 0) {
 16115  002406  0100               	movlb	0	; () banked
 16116  002408  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16117  00240A  0D03               	mullw	3
 16118  00240C  0E01               	movlw	1
 16119  00240E  26F3               	addwf	prodl,f,c
 16120  002410  0E00               	movlw	0
 16121  002412  22F4               	addwfc	prodh,f,c
 16122  002414  0EAC               	movlw	low _inputPotsArray
 16123  002416  24F3               	addwf	prodl,w,c
 16124  002418  6ED9               	movwf	fsr2l,c
 16125  00241A  0E02               	movlw	high _inputPotsArray
 16126  00241C  20F4               	addwfc	prodh,w,c
 16127  00241E  6EDA               	movwf	fsr2h,c
 16128  002420  0E00               	movlw	0
 16129  002422  BEDB               	btfsc	plusw2,7,c
 16130  002424  D02E               	goto	l3359
 16131                           
 16132                           ; BSR set to: 0
 16133                           ;menu.c: 186: int2string(inputPotsArray[array_index].controller_number);
 16134  002426  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16135  002428  0D03               	mullw	3
 16136  00242A  0E01               	movlw	1
 16137  00242C  26F3               	addwf	prodl,f,c
 16138  00242E  0E00               	movlw	0
 16139  002430  22F4               	addwfc	prodh,f,c
 16140  002432  0EAC               	movlw	low _inputPotsArray
 16141  002434  24F3               	addwf	prodl,w,c
 16142  002436  6ED9               	movwf	fsr2l,c
 16143  002438  0E02               	movlw	high _inputPotsArray
 16144  00243A  20F4               	addwfc	prodh,w,c
 16145  00243C  6EDA               	movwf	fsr2h,c
 16146  00243E  50DF               	movf	indf2,w,c
 16147  002440  6F74               	movwf	int2string@number& (0+255),b
 16148  002442  6B75               	clrf	(int2string@number+1)& (0+255),b
 16149  002444  BF74               	btfsc	int2string@number& (0+255),7,b
 16150  002446  0775               	decf	(int2string@number+1)& (0+255),f,b
 16151  002448  ECBD  F034         	call	_int2string	;wreg free
 16152                           
 16153                           ;menu.c: 188: Lcd_Set_Cursor(2,7);
 16154  00244C  0E07               	movlw	7
 16155  00244E  0100               	movlb	0	; () banked
 16156  002450  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16157  002452  0E02               	movlw	2
 16158  002454  ECB8  F045         	call	_Lcd_Set_Cursor
 16159                           
 16160                           ;menu.c: 189: Lcd_Print_String("         ");
 16161  002458  0E6B               	movlw	low (STR_10+7)
 16162  00245A  0100               	movlb	0	; () banked
 16163  00245C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16164  00245E  0EFD               	movlw	high (STR_10+7)
 16165  002460  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16166  002462  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 16167                           
 16168                           ;menu.c: 190: Lcd_Set_Cursor(2,13);
 16169  002466  0E0D               	movlw	13
 16170  002468  0100               	movlb	0	; () banked
 16171  00246A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16172  00246C  0E02               	movlw	2
 16173  00246E  ECB8  F045         	call	_Lcd_Set_Cursor
 16174                           
 16175                           ;menu.c: 191: Lcd_Print_String(string2display);
 16176  002472  0E82               	movlw	low _string2display
 16177  002474  0100               	movlb	0	; () banked
 16178  002476  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16179  002478  0E01               	movlw	high _string2display
 16180  00247A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16181  00247C  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 16182                           
 16183                           ;menu.c: 192: }
 16184  002480  D056               	goto	l3363
 16185  002482                     l3359:
 16186                           
 16187                           ;menu.c: 193: else {
 16188                           ;menu.c: 194: if(inputPotsArray[array_index].controller_number == -1) {
 16189  002482  0100               	movlb	0	; () banked
 16190  002484  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16191  002486  0D03               	mullw	3
 16192  002488  0E01               	movlw	1
 16193  00248A  26F3               	addwf	prodl,f,c
 16194  00248C  0E00               	movlw	0
 16195  00248E  22F4               	addwfc	prodh,f,c
 16196  002490  0EAC               	movlw	low _inputPotsArray
 16197  002492  24F3               	addwf	prodl,w,c
 16198  002494  6ED9               	movwf	fsr2l,c
 16199  002496  0E02               	movlw	high _inputPotsArray
 16200  002498  20F4               	addwfc	prodh,w,c
 16201  00249A  6EDA               	movwf	fsr2h,c
 16202  00249C  28DE               	incf	postinc2,w,c
 16203  00249E  A4D8               	btfss	status,2,c
 16204  0024A0  D00C               	goto	l3361
 16205                           
 16206                           ; BSR set to: 0
 16207                           ;menu.c: 195: Lcd_Set_Cursor(2,7);
 16208  0024A2  0E07               	movlw	7
 16209  0024A4  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16210  0024A6  0E02               	movlw	2
 16211  0024A8  ECB8  F045         	call	_Lcd_Set_Cursor
 16212                           
 16213                           ;menu.c: 196: Lcd_Print_String("  VELOCITY");
 16214  0024AC  0E9E               	movlw	low STR_13
 16215  0024AE  0100               	movlb	0	; () banked
 16216  0024B0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16217  0024B2  0EFF               	movlw	high STR_13
 16218  0024B4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16219  0024B6  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 16220  0024BA                     l3361:
 16221                           
 16222                           ;menu.c: 197: }
 16223                           ;menu.c: 199: if(inputPotsArray[array_index].controller_number == -2) {
 16224  0024BA  0100               	movlb	0	; () banked
 16225  0024BC  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16226  0024BE  0D03               	mullw	3
 16227  0024C0  0E01               	movlw	1
 16228  0024C2  26F3               	addwf	prodl,f,c
 16229  0024C4  0E00               	movlw	0
 16230  0024C6  22F4               	addwfc	prodh,f,c
 16231  0024C8  0EAC               	movlw	low _inputPotsArray
 16232  0024CA  24F3               	addwf	prodl,w,c
 16233  0024CC  6ED9               	movwf	fsr2l,c
 16234  0024CE  0E02               	movlw	high _inputPotsArray
 16235  0024D0  20F4               	addwfc	prodh,w,c
 16236  0024D2  6EDA               	movwf	fsr2h,c
 16237  0024D4  0EFE               	movlw	254
 16238  0024D6  18DE               	xorwf	postinc2,w,c
 16239  0024D8  A4D8               	btfss	status,2,c
 16240  0024DA  D00C               	goto	l3362
 16241                           
 16242                           ; BSR set to: 0
 16243                           ;menu.c: 200: Lcd_Set_Cursor(2,7);
 16244  0024DC  0E07               	movlw	7
 16245  0024DE  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16246  0024E0  0E02               	movlw	2
 16247  0024E2  ECB8  F045         	call	_Lcd_Set_Cursor
 16248                           
 16249                           ;menu.c: 201: Lcd_Print_String(" PITCHBEND");
 16250  0024E6  0E88               	movlw	low STR_14
 16251  0024E8  0100               	movlb	0	; () banked
 16252  0024EA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16253  0024EC  0EFF               	movlw	high STR_14
 16254  0024EE  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16255  0024F0  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 16256  0024F4                     l3362:
 16257                           
 16258                           ;menu.c: 202: }
 16259                           ;menu.c: 203: if(inputPotsArray[array_index].controller_number == -3) {
 16260  0024F4  0100               	movlb	0	; () banked
 16261  0024F6  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16262  0024F8  0D03               	mullw	3
 16263  0024FA  0E01               	movlw	1
 16264  0024FC  26F3               	addwf	prodl,f,c
 16265  0024FE  0E00               	movlw	0
 16266  002500  22F4               	addwfc	prodh,f,c
 16267  002502  0EAC               	movlw	low _inputPotsArray
 16268  002504  24F3               	addwf	prodl,w,c
 16269  002506  6ED9               	movwf	fsr2l,c
 16270  002508  0E02               	movlw	high _inputPotsArray
 16271  00250A  20F4               	addwfc	prodh,w,c
 16272  00250C  6EDA               	movwf	fsr2h,c
 16273  00250E  0EFD               	movlw	253
 16274  002510  18DE               	xorwf	postinc2,w,c
 16275  002512  A4D8               	btfss	status,2,c
 16276  002514  D00C               	goto	l3363
 16277                           
 16278                           ; BSR set to: 0
 16279                           ;menu.c: 204: Lcd_Set_Cursor(2,7);
 16280  002516  0E07               	movlw	7
 16281  002518  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16282  00251A  0E02               	movlw	2
 16283  00251C  ECB8  F045         	call	_Lcd_Set_Cursor
 16284                           
 16285                           ;menu.c: 205: Lcd_Print_String(" MOD.WHEEL");
 16286  002520  0E93               	movlw	low STR_15
 16287  002522  0100               	movlb	0	; () banked
 16288  002524  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16289  002526  0EFF               	movlw	high STR_15
 16290  002528  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16291  00252A  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 16292  00252E                     l3363:
 16293                           
 16294                           ;menu.c: 206: }
 16295                           ;menu.c: 207: }
 16296                           ;menu.c: 208: }
 16297                           ;menu.c: 209: }
 16298                           ;menu.c: 211: if(inputPotsArray[array_index].controller_resolution == 1){
 16299  00252E  0100               	movlb	0	; () banked
 16300  002530  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16301  002532  0D03               	mullw	3
 16302  002534  0EAC               	movlw	low _inputPotsArray
 16303  002536  24F3               	addwf	prodl,w,c
 16304  002538  6ED9               	movwf	fsr2l,c
 16305  00253A  0E02               	movlw	high _inputPotsArray
 16306  00253C  20F4               	addwfc	prodh,w,c
 16307  00253E  6EDA               	movwf	fsr2h,c
 16308  002540  0102               	movlb	2	; () banked
 16309  002542  A0DF               	btfss	indf2,0,c
 16310  002544  D094               	goto	l3369
 16311                           
 16312                           ; BSR set to: 2
 16313                           ;menu.c: 213: if(inputPotsArray[array_index].controller_number_two_byte >= 0) {
 16314  002546  0100               	movlb	0	; () banked
 16315  002548  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16316  00254A  0D03               	mullw	3
 16317  00254C  0E02               	movlw	2
 16318  00254E  26F3               	addwf	prodl,f,c
 16319  002550  0E00               	movlw	0
 16320  002552  22F4               	addwfc	prodh,f,c
 16321  002554  0EAC               	movlw	low _inputPotsArray
 16322  002556  24F3               	addwf	prodl,w,c
 16323  002558  6ED9               	movwf	fsr2l,c
 16324  00255A  0E02               	movlw	high _inputPotsArray
 16325  00255C  20F4               	addwfc	prodh,w,c
 16326  00255E  6EDA               	movwf	fsr2h,c
 16327  002560  0E00               	movlw	0
 16328  002562  BEDB               	btfsc	plusw2,7,c
 16329  002564  D02E               	goto	l3365
 16330                           
 16331                           ; BSR set to: 0
 16332                           ;menu.c: 215: int2string(inputPotsArray[array_index].controller_number_two_byte);
 16333  002566  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16334  002568  0D03               	mullw	3
 16335  00256A  0E02               	movlw	2
 16336  00256C  26F3               	addwf	prodl,f,c
 16337  00256E  0E00               	movlw	0
 16338  002570  22F4               	addwfc	prodh,f,c
 16339  002572  0EAC               	movlw	low _inputPotsArray
 16340  002574  24F3               	addwf	prodl,w,c
 16341  002576  6ED9               	movwf	fsr2l,c
 16342  002578  0E02               	movlw	high _inputPotsArray
 16343  00257A  20F4               	addwfc	prodh,w,c
 16344  00257C  6EDA               	movwf	fsr2h,c
 16345  00257E  50DF               	movf	indf2,w,c
 16346  002580  6F74               	movwf	int2string@number& (0+255),b
 16347  002582  6B75               	clrf	(int2string@number+1)& (0+255),b
 16348  002584  BF74               	btfsc	int2string@number& (0+255),7,b
 16349  002586  0775               	decf	(int2string@number+1)& (0+255),f,b
 16350  002588  ECBD  F034         	call	_int2string	;wreg free
 16351                           
 16352                           ;menu.c: 217: Lcd_Set_Cursor(2,7);
 16353  00258C  0E07               	movlw	7
 16354  00258E  0100               	movlb	0	; () banked
 16355  002590  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16356  002592  0E02               	movlw	2
 16357  002594  ECB8  F045         	call	_Lcd_Set_Cursor
 16358                           
 16359                           ;menu.c: 218: Lcd_Print_String("         ");
 16360  002598  0E6B               	movlw	low (STR_10+7)
 16361  00259A  0100               	movlb	0	; () banked
 16362  00259C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16363  00259E  0EFD               	movlw	high (STR_10+7)
 16364  0025A0  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16365  0025A2  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 16366                           
 16367                           ;menu.c: 219: Lcd_Set_Cursor(2,13);
 16368  0025A6  0E0D               	movlw	13
 16369  0025A8  0100               	movlb	0	; () banked
 16370  0025AA  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16371  0025AC  0E02               	movlw	2
 16372  0025AE  ECB8  F045         	call	_Lcd_Set_Cursor
 16373                           
 16374                           ;menu.c: 220: Lcd_Print_String(string2display);
 16375  0025B2  0E82               	movlw	low _string2display
 16376  0025B4  0100               	movlb	0	; () banked
 16377  0025B6  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16378  0025B8  0E01               	movlw	high _string2display
 16379  0025BA  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16380  0025BC  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 16381                           
 16382                           ;menu.c: 221: }
 16383  0025C0  D056               	goto	l3369
 16384  0025C2                     l3365:
 16385                           
 16386                           ;menu.c: 222: else {
 16387                           ;menu.c: 223: if(inputPotsArray[array_index].controller_number_two_byte == -1) {
 16388  0025C2  0100               	movlb	0	; () banked
 16389  0025C4  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16390  0025C6  0D03               	mullw	3
 16391  0025C8  0E02               	movlw	2
 16392  0025CA  26F3               	addwf	prodl,f,c
 16393  0025CC  0E00               	movlw	0
 16394  0025CE  22F4               	addwfc	prodh,f,c
 16395  0025D0  0EAC               	movlw	low _inputPotsArray
 16396  0025D2  24F3               	addwf	prodl,w,c
 16397  0025D4  6ED9               	movwf	fsr2l,c
 16398  0025D6  0E02               	movlw	high _inputPotsArray
 16399  0025D8  20F4               	addwfc	prodh,w,c
 16400  0025DA  6EDA               	movwf	fsr2h,c
 16401  0025DC  28DE               	incf	postinc2,w,c
 16402  0025DE  A4D8               	btfss	status,2,c
 16403  0025E0  D00C               	goto	l3367
 16404                           
 16405                           ; BSR set to: 0
 16406                           ;menu.c: 224: Lcd_Set_Cursor(2,7);
 16407  0025E2  0E07               	movlw	7
 16408  0025E4  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16409  0025E6  0E02               	movlw	2
 16410  0025E8  ECB8  F045         	call	_Lcd_Set_Cursor
 16411                           
 16412                           ;menu.c: 225: Lcd_Print_String("  VELOCITY");
 16413  0025EC  0E9E               	movlw	low STR_13
 16414  0025EE  0100               	movlb	0	; () banked
 16415  0025F0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16416  0025F2  0EFF               	movlw	high STR_13
 16417  0025F4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16418  0025F6  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 16419  0025FA                     l3367:
 16420                           
 16421                           ;menu.c: 226: }
 16422                           ;menu.c: 228: if(inputPotsArray[array_index].controller_number_two_byte == -2) {
 16423  0025FA  0100               	movlb	0	; () banked
 16424  0025FC  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16425  0025FE  0D03               	mullw	3
 16426  002600  0E02               	movlw	2
 16427  002602  26F3               	addwf	prodl,f,c
 16428  002604  0E00               	movlw	0
 16429  002606  22F4               	addwfc	prodh,f,c
 16430  002608  0EAC               	movlw	low _inputPotsArray
 16431  00260A  24F3               	addwf	prodl,w,c
 16432  00260C  6ED9               	movwf	fsr2l,c
 16433  00260E  0E02               	movlw	high _inputPotsArray
 16434  002610  20F4               	addwfc	prodh,w,c
 16435  002612  6EDA               	movwf	fsr2h,c
 16436  002614  0EFE               	movlw	254
 16437  002616  18DE               	xorwf	postinc2,w,c
 16438  002618  A4D8               	btfss	status,2,c
 16439  00261A  D00C               	goto	l3368
 16440                           
 16441                           ; BSR set to: 0
 16442                           ;menu.c: 229: Lcd_Set_Cursor(2,7);
 16443  00261C  0E07               	movlw	7
 16444  00261E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16445  002620  0E02               	movlw	2
 16446  002622  ECB8  F045         	call	_Lcd_Set_Cursor
 16447                           
 16448                           ;menu.c: 230: Lcd_Print_String(" PITCHBEND");
 16449  002626  0E88               	movlw	low STR_14
 16450  002628  0100               	movlb	0	; () banked
 16451  00262A  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16452  00262C  0EFF               	movlw	high STR_14
 16453  00262E  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16454  002630  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 16455  002634                     l3368:
 16456                           
 16457                           ;menu.c: 231: }
 16458                           ;menu.c: 232: if(inputPotsArray[array_index].controller_number_two_byte == -3) {
 16459  002634  0100               	movlb	0	; () banked
 16460  002636  517B               	movf	setControllerNumbers@array_index& (0+255),w,b
 16461  002638  0D03               	mullw	3
 16462  00263A  0E02               	movlw	2
 16463  00263C  26F3               	addwf	prodl,f,c
 16464  00263E  0E00               	movlw	0
 16465  002640  22F4               	addwfc	prodh,f,c
 16466  002642  0EAC               	movlw	low _inputPotsArray
 16467  002644  24F3               	addwf	prodl,w,c
 16468  002646  6ED9               	movwf	fsr2l,c
 16469  002648  0E02               	movlw	high _inputPotsArray
 16470  00264A  20F4               	addwfc	prodh,w,c
 16471  00264C  6EDA               	movwf	fsr2h,c
 16472  00264E  0EFD               	movlw	253
 16473  002650  18DE               	xorwf	postinc2,w,c
 16474  002652  A4D8               	btfss	status,2,c
 16475  002654  D00C               	goto	l3369
 16476                           
 16477                           ; BSR set to: 0
 16478                           ;menu.c: 233: Lcd_Set_Cursor(2,7);
 16479  002656  0E07               	movlw	7
 16480  002658  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16481  00265A  0E02               	movlw	2
 16482  00265C  ECB8  F045         	call	_Lcd_Set_Cursor
 16483                           
 16484                           ;menu.c: 234: Lcd_Print_String(" MOD.WHEEL");
 16485  002660  0E93               	movlw	low STR_15
 16486  002662  0100               	movlb	0	; () banked
 16487  002664  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16488  002666  0EFF               	movlw	high STR_15
 16489  002668  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16490  00266A  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 16491  00266E                     l3369:
 16492  00266E  BE35               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 16493  002670  0012               	return	
 16494  002672  D58C               	goto	l3342
 16495  002674                     __end_of_setControllerNumbers:
 16496                           	opt stack 0
 16497                           tblptru	equ	0xFF8
 16498                           tblptrh	equ	0xFF7
 16499                           tblptrl	equ	0xFF6
 16500                           tablat	equ	0xFF5
 16501                           prodh	equ	0xFF4
 16502                           prodl	equ	0xFF3
 16503                           intcon	equ	0xFF2
 16504                           intcon2	equ	0xFF1
 16505                           postinc0	equ	0xFEE
 16506                           wreg	equ	0xFE8
 16507                           postdec1	equ	0xFE5
 16508                           fsr1l	equ	0xFE1
 16509                           indf2	equ	0xFDF
 16510                           postinc2	equ	0xFDE
 16511                           plusw2	equ	0xFDB
 16512                           fsr2h	equ	0xFDA
 16513                           fsr2l	equ	0xFD9
 16514                           status	equ	0xFD8
 16515                           
 16516 ;; *************** function _Function_D_2 *****************
 16517 ;; Defined at:
 16518 ;;		line 651 in file "menu.c"
 16519 ;; Parameters:    Size  Location     Type
 16520 ;;		None
 16521 ;; Auto vars:     Size  Location     Type
 16522 ;;		None
 16523 ;; Return value:  Size  Location     Type
 16524 ;;                  1    wreg      void 
 16525 ;; Registers used:
 16526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16527 ;; Tracked objects:
 16528 ;;		On entry : 0/0
 16529 ;;		On exit  : 0/0
 16530 ;;		Unchanged: 0/0
 16531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16536 ;;Total ram usage:        0 bytes
 16537 ;; Hardware stack levels used:    1
 16538 ;; Hardware stack levels required when called:    8
 16539 ;; This function calls:
 16540 ;;		_Busy_eep
 16541 ;;		_Lcd_Print_String
 16542 ;;		_Lcd_Set_Cursor
 16543 ;;		_Write_b_eep
 16544 ;;		_calculate_alpha
 16545 ;;		_int2string
 16546 ;;		_processEncoderBuxton
 16547 ;; This function is called by:
 16548 ;;		_Function_D
 16549 ;; This function uses a non-reentrant model
 16550 ;;
 16551                           
 16552                           	psect	text46
 16553  0088E4                     __ptext46:
 16554                           	opt stack 0
 16555  0088E4                     _Function_D_2:
 16556                           	opt stack 20
 16557                           
 16558                           ;menu.c: 653: which_screen = POTS_ALPHA_MENU;
 16559                           
 16560                           ;incstack = 0
 16561  0088E4  0E10               	movlw	16
 16562  0088E6  0100               	movlb	0	; () banked
 16563  0088E8  6FF9               	movwf	_which_screen& (0+255),b
 16564                           
 16565                           ; BSR set to: 0
 16566                           ;menu.c: 654: lcd_print_once = 0;
 16567  0088EA  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16568                           
 16569                           ; BSR set to: 0
 16570                           ;menu.c: 655: encoder_click = 0;
 16571  0088EC  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 16572                           
 16573                           ; BSR set to: 0
 16574                           ;menu.c: 657: potsAlphaMenu.selector = ema_integer;
 16575  0088EE  C0FB  F155         	movff	_ema_integer,_potsAlphaMenu+2
 16576                           
 16577                           ;menu.c: 659: while(encoder_click == 0) {
 16578  0088F2  D016               	goto	l3508
 16579  0088F4                     
 16580                           ;menu.c: 660: processEncoderBuxton();
 16581                           
 16582                           ; BSR set to: 0
 16583  0088F4  EC09  F000         	call	_processEncoderBuxton	;wreg free
 16584                           
 16585                           ;menu.c: 661: lcd_print_once = 1;
 16586  0088F8  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16587                           
 16588                           ;menu.c: 663: int2string(potsAlphaMenu.selector);
 16589  0088FA  C155  F074         	movff	_potsAlphaMenu+2,int2string@number
 16590  0088FE  0100               	movlb	0	; () banked
 16591  008900  6B75               	clrf	(int2string@number+1)& (0+255),b
 16592  008902  ECBD  F034         	call	_int2string	;wreg free
 16593                           
 16594                           ;menu.c: 664: Lcd_Set_Cursor(2,13);
 16595  008906  0E0D               	movlw	13
 16596  008908  0100               	movlb	0	; () banked
 16597  00890A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16598  00890C  0E02               	movlw	2
 16599  00890E  ECB8  F045         	call	_Lcd_Set_Cursor
 16600                           
 16601                           ;menu.c: 665: Lcd_Print_String(string2display);
 16602  008912  0E82               	movlw	low _string2display
 16603  008914  0100               	movlb	0	; () banked
 16604  008916  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 16605  008918  0E01               	movlw	high _string2display
 16606  00891A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16607  00891C  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 16608  008920                     l3508:
 16609  008920  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 16610  008922  D7E8               	goto	l3509
 16611                           
 16612                           ;menu.c: 666: }
 16613                           ;menu.c: 668: ema_integer = potsAlphaMenu.selector;
 16614  008924  C155  F0FB         	movff	_potsAlphaMenu+2,_ema_integer
 16615                           
 16616                           ;menu.c: 669: (Busy_eep(), Write_b_eep(0x03,ema_integer));
 16617  008928  ECED  F04A         	call	_Busy_eep	;wreg free
 16618  00892C  0E00               	movlw	0
 16619  00892E  0100               	movlb	0	; () banked
 16620  008930  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 16621  008932  0E03               	movlw	3
 16622  008934  6F60               	movwf	Write_b_eep@badd& (0+255),b
 16623  008936  C0FB  F062         	movff	_ema_integer,Write_b_eep@bdat
 16624  00893A  ECA8  F047         	call	_Write_b_eep	;wreg free
 16625                           
 16626                           ;menu.c: 670: calculate_alpha();
 16627  00893E  EC5E  F047         	call	_calculate_alpha	;wreg free
 16628  008942  0012               	return		;funcret
 16629  008944                     __end_of_Function_D_2:
 16630                           	opt stack 0
 16631                           tblptru	equ	0xFF8
 16632                           tblptrh	equ	0xFF7
 16633                           tblptrl	equ	0xFF6
 16634                           tablat	equ	0xFF5
 16635                           prodh	equ	0xFF4
 16636                           prodl	equ	0xFF3
 16637                           intcon	equ	0xFF2
 16638                           intcon2	equ	0xFF1
 16639                           postinc0	equ	0xFEE
 16640                           wreg	equ	0xFE8
 16641                           postdec1	equ	0xFE5
 16642                           fsr1l	equ	0xFE1
 16643                           indf2	equ	0xFDF
 16644                           postinc2	equ	0xFDE
 16645                           plusw2	equ	0xFDB
 16646                           fsr2h	equ	0xFDA
 16647                           fsr2l	equ	0xFD9
 16648                           status	equ	0xFD8
 16649                           
 16650 ;; *************** function _calculate_alpha *****************
 16651 ;; Defined at:
 16652 ;;		line 24 in file "potentiometers.c"
 16653 ;; Parameters:    Size  Location     Type
 16654 ;;		None
 16655 ;; Auto vars:     Size  Location     Type
 16656 ;;		None
 16657 ;; Return value:  Size  Location     Type
 16658 ;;                  1    wreg      void 
 16659 ;; Registers used:
 16660 ;;		wreg, status,2, status,0, cstack
 16661 ;; Tracked objects:
 16662 ;;		On entry : 0/0
 16663 ;;		On exit  : 0/0
 16664 ;;		Unchanged: 0/0
 16665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;Total ram usage:        0 bytes
 16671 ;; Hardware stack levels used:    1
 16672 ;; Hardware stack levels required when called:    6
 16673 ;; This function calls:
 16674 ;;		___fldiv
 16675 ;;		___xxtofl
 16676 ;; This function is called by:
 16677 ;;		_Function_D_2
 16678 ;;		_main
 16679 ;; This function uses a non-reentrant model
 16680 ;;
 16681                           
 16682                           	psect	text47
 16683  008EBC                     __ptext47:
 16684                           	opt stack 0
 16685  008EBC                     _calculate_alpha:
 16686                           	opt stack 21
 16687                           
 16688                           ;potentiometers.c: 25: (float)ema_alpha = (ema_integer / 100.0);
 16689                           
 16690                           ;incstack = 0
 16691  008EBC  0100               	movlb	0	; () banked
 16692  008EBE  51FB               	movf	_ema_integer& (0+255),w,b
 16693  008EC0  6F60               	movwf	___xxtofl@val& (0+255),b
 16694  008EC2  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 16695  008EC4  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 16696  008EC6  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 16697  008EC8  0E00               	movlw	0
 16698  008ECA  ECF5  F02E         	call	___xxtofl
 16699  008ECE  C060  F087         	movff	?___xxtofl,___fldiv@b
 16700  008ED2  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 16701  008ED6  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 16702  008EDA  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 16703  008EDE  0E00               	movlw	0
 16704  008EE0  0100               	movlb	0	; () banked
 16705  008EE2  6F8B               	movwf	___fldiv@a& (0+255),b
 16706  008EE4  0E00               	movlw	0
 16707  008EE6  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16708  008EE8  0EC8               	movlw	200
 16709  008EEA  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16710  008EEC  0E42               	movlw	66
 16711  008EEE  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16712  008EF0  ECC6  F01C         	call	___fldiv	;wreg free
 16713  008EF4  C087  F104         	movff	?___fldiv,_ema_alpha
 16714  008EF8  C088  F105         	movff	?___fldiv+1,_ema_alpha+1
 16715  008EFC  C089  F106         	movff	?___fldiv+2,_ema_alpha+2
 16716  008F00  C08A  F107         	movff	?___fldiv+3,_ema_alpha+3
 16717  008F04  0012               	return		;funcret
 16718  008F06                     __end_of_calculate_alpha:
 16719                           	opt stack 0
 16720                           tblptru	equ	0xFF8
 16721                           tblptrh	equ	0xFF7
 16722                           tblptrl	equ	0xFF6
 16723                           tablat	equ	0xFF5
 16724                           prodh	equ	0xFF4
 16725                           prodl	equ	0xFF3
 16726                           intcon	equ	0xFF2
 16727                           intcon2	equ	0xFF1
 16728                           postinc0	equ	0xFEE
 16729                           wreg	equ	0xFE8
 16730                           postdec1	equ	0xFE5
 16731                           fsr1l	equ	0xFE1
 16732                           indf2	equ	0xFDF
 16733                           postinc2	equ	0xFDE
 16734                           plusw2	equ	0xFDB
 16735                           fsr2h	equ	0xFDA
 16736                           fsr2l	equ	0xFD9
 16737                           status	equ	0xFD8
 16738                           
 16739 ;; *************** function ___fldiv *****************
 16740 ;; Defined at:
 16741 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
 16742 ;; Parameters:    Size  Location     Type
 16743 ;;  b               4   39[BANK0 ] void 
 16744 ;;  a               4   43[BANK0 ] void 
 16745 ;; Auto vars:     Size  Location     Type
 16746 ;;  grs             4   58[BANK0 ] unsigned long 
 16747 ;;  rem             4   52[BANK0 ] unsigned long 
 16748 ;;  new_exp         2   56[BANK0 ] int 
 16749 ;;  aexp            1   63[BANK0 ] unsigned char 
 16750 ;;  bexp            1   62[BANK0 ] unsigned char 
 16751 ;;  sign            1   51[BANK0 ] unsigned char 
 16752 ;; Return value:  Size  Location     Type
 16753 ;;                  4   39[BANK0 ] unsigned char 
 16754 ;; Registers used:
 16755 ;;		wreg, status,2, status,0
 16756 ;; Tracked objects:
 16757 ;;		On entry : 0/0
 16758 ;;		On exit  : 0/0
 16759 ;;		Unchanged: 0/0
 16760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16761 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16762 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16763 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16764 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16765 ;;Total ram usage:       25 bytes
 16766 ;; Hardware stack levels used:    1
 16767 ;; Hardware stack levels required when called:    5
 16768 ;; This function calls:
 16769 ;;		Nothing
 16770 ;; This function is called by:
 16771 ;;		_calculate_alpha
 16772 ;;		_calculate_pulse_length
 16773 ;; This function uses a non-reentrant model
 16774 ;;
 16775                           
 16776                           	psect	text48
 16777  00398C                     __ptext48:
 16778                           	opt stack 0
 16779  00398C                     ___fldiv:
 16780                           	opt stack 22
 16781                           
 16782                           ;incstack = 0
 16783  00398C  0100               	movlb	0	; () banked
 16784  00398E  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16785  003990  0B80               	andlw	128
 16786  003992  6F93               	movwf	___fldiv@sign& (0+255),b
 16787  003994  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16788  003996  258A               	addwf	(___fldiv@b+3)& (0+255),w,b
 16789  003998  6F9E               	movwf	___fldiv@bexp& (0+255),b
 16790                           
 16791                           ; BSR set to: 0
 16792  00399A  BF89               	btfsc	(___fldiv@b+2)& (0+255),7,b
 16793                           
 16794                           ; BSR set to: 0
 16795  00399C  819E               	bsf	___fldiv@bexp& (0+255),0,b
 16796                           
 16797                           ; BSR set to: 0
 16798                           
 16799                           ; BSR set to: 0
 16800  00399E  519E               	movf	___fldiv@bexp& (0+255),w,b
 16801  0039A0  B4D8               	btfsc	status,2,c
 16802  0039A2  D00D               	goto	l5913
 16803                           
 16804                           ; BSR set to: 0
 16805  0039A4  299E               	incf	___fldiv@bexp& (0+255),w,b
 16806  0039A6  A4D8               	btfss	status,2,c
 16807  0039A8  D008               	goto	l5914
 16808                           
 16809                           ; BSR set to: 0
 16810  0039AA  0E00               	movlw	0
 16811  0039AC  6F87               	movwf	___fldiv@b& (0+255),b
 16812  0039AE  0E00               	movlw	0
 16813  0039B0  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16814  0039B2  0E00               	movlw	0
 16815  0039B4  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16816  0039B6  0E00               	movlw	0
 16817  0039B8  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16818  0039BA                     l5914:
 16819                           
 16820                           ; BSR set to: 0
 16821                           
 16822                           ; BSR set to: 0
 16823  0039BA  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 16824  0039BC  D006               	goto	L2
 16825  0039BE                     l5913:
 16826                           
 16827                           ; BSR set to: 0
 16828                           
 16829                           ; BSR set to: 0
 16830  0039BE  0E00               	movlw	0
 16831  0039C0  6F87               	movwf	___fldiv@b& (0+255),b
 16832  0039C2  0E00               	movlw	0
 16833  0039C4  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16834  0039C6  0E00               	movlw	0
 16835  0039C8  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16836  0039CA                     L2:
 16837  0039CA  0E00               	movlw	0
 16838  0039CC  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16839                           
 16840                           ; BSR set to: 0
 16841                           
 16842                           ; BSR set to: 0
 16843  0039CE  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16844  0039D0  0B80               	andlw	128
 16845  0039D2  1B93               	xorwf	___fldiv@sign& (0+255),f,b
 16846                           
 16847                           ; BSR set to: 0
 16848  0039D4  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16849  0039D6  258E               	addwf	(___fldiv@a+3)& (0+255),w,b
 16850  0039D8  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16851                           
 16852                           ; BSR set to: 0
 16853  0039DA  BF8D               	btfsc	(___fldiv@a+2)& (0+255),7,b
 16854                           
 16855                           ; BSR set to: 0
 16856  0039DC  819F               	bsf	___fldiv@aexp& (0+255),0,b
 16857                           
 16858                           ; BSR set to: 0
 16859                           
 16860                           ; BSR set to: 0
 16861  0039DE  519F               	movf	___fldiv@aexp& (0+255),w,b
 16862  0039E0  B4D8               	btfsc	status,2,c
 16863  0039E2  D00D               	goto	l5917
 16864                           
 16865                           ; BSR set to: 0
 16866  0039E4  299F               	incf	___fldiv@aexp& (0+255),w,b
 16867  0039E6  A4D8               	btfss	status,2,c
 16868  0039E8  D008               	goto	l5918
 16869                           
 16870                           ; BSR set to: 0
 16871  0039EA  0E00               	movlw	0
 16872  0039EC  6F8B               	movwf	___fldiv@a& (0+255),b
 16873  0039EE  0E00               	movlw	0
 16874  0039F0  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16875  0039F2  0E00               	movlw	0
 16876  0039F4  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16877  0039F6  0E00               	movlw	0
 16878  0039F8  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16879  0039FA                     l5918:
 16880                           
 16881                           ; BSR set to: 0
 16882                           
 16883                           ; BSR set to: 0
 16884  0039FA  8F8D               	bsf	(___fldiv@a+2)& (0+255),7,b
 16885  0039FC  D006               	goto	L3
 16886  0039FE                     l5917:
 16887                           
 16888                           ; BSR set to: 0
 16889                           
 16890                           ; BSR set to: 0
 16891  0039FE  0E00               	movlw	0
 16892  003A00  6F8B               	movwf	___fldiv@a& (0+255),b
 16893  003A02  0E00               	movlw	0
 16894  003A04  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16895  003A06  0E00               	movlw	0
 16896  003A08  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16897  003A0A                     L3:
 16898  003A0A  0E00               	movlw	0
 16899  003A0C  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16900                           
 16901                           ; BSR set to: 0
 16902                           
 16903                           ; BSR set to: 0
 16904  003A0E  518B               	movf	___fldiv@a& (0+255),w,b
 16905  003A10  118C               	iorwf	(___fldiv@a+1)& (0+255),w,b
 16906  003A12  118D               	iorwf	(___fldiv@a+2)& (0+255),w,b
 16907  003A14  118E               	iorwf	(___fldiv@a+3)& (0+255),w,b
 16908  003A16  A4D8               	btfss	status,2,c
 16909  003A18  D015               	goto	l5920
 16910                           
 16911                           ; BSR set to: 0
 16912  003A1A  0E00               	movlw	0
 16913  003A1C  6F87               	movwf	___fldiv@b& (0+255),b
 16914  003A1E  0E00               	movlw	0
 16915  003A20  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16916  003A22  0E00               	movlw	0
 16917  003A24  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16918  003A26  0E00               	movlw	0
 16919  003A28  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16920                           
 16921                           ; BSR set to: 0
 16922  003A2A  0E80               	movlw	128
 16923  003A2C  1389               	iorwf	(___fldiv@b+2)& (0+255),f,b
 16924  003A2E  0E7F               	movlw	127
 16925  003A30  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 16926                           
 16927                           ; BSR set to: 0
 16928  003A32  C087  F087         	movff	___fldiv@b,?___fldiv
 16929  003A36  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16930  003A3A  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16931  003A3E  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16932                           
 16933                           ; BSR set to: 0
 16934  003A42  0012               	return	
 16935  003A44                     l5920:
 16936                           
 16937                           ; BSR set to: 0
 16938                           
 16939                           ; BSR set to: 0
 16940  003A44  519E               	movf	___fldiv@bexp& (0+255),w,b
 16941  003A46  A4D8               	btfss	status,2,c
 16942  003A48  D011               	goto	l5922
 16943                           
 16944                           ; BSR set to: 0
 16945  003A4A  0E00               	movlw	0
 16946  003A4C  6F87               	movwf	___fldiv@b& (0+255),b
 16947  003A4E  0E00               	movlw	0
 16948  003A50  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16949  003A52  0E00               	movlw	0
 16950  003A54  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16951  003A56  0E00               	movlw	0
 16952  003A58  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16953                           
 16954                           ; BSR set to: 0
 16955  003A5A  C087  F087         	movff	___fldiv@b,?___fldiv
 16956  003A5E  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16957  003A62  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16958  003A66  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16959                           
 16960                           ; BSR set to: 0
 16961  003A6A  0012               	return	
 16962  003A6C                     l5922:
 16963                           
 16964                           ; BSR set to: 0
 16965                           
 16966                           ; BSR set to: 0
 16967  003A6C  519F               	movf	___fldiv@aexp& (0+255),w,b
 16968  003A6E  6F8F               	movwf	??___fldiv& (0+255),b
 16969  003A70  6B90               	clrf	(??___fldiv+1)& (0+255),b
 16970  003A72  1F8F               	comf	??___fldiv& (0+255),f,b
 16971  003A74  1F90               	comf	(??___fldiv+1)& (0+255),f,b
 16972  003A76  4B8F               	infsnz	??___fldiv& (0+255),f,b
 16973  003A78  2B90               	incf	(??___fldiv+1)& (0+255),f,b
 16974  003A7A  519E               	movf	___fldiv@bexp& (0+255),w,b
 16975  003A7C  6F91               	movwf	(??___fldiv+2)& (0+255),b
 16976  003A7E  6B92               	clrf	(??___fldiv+3)& (0+255),b
 16977  003A80  518F               	movf	??___fldiv& (0+255),w,b
 16978  003A82  2791               	addwf	(??___fldiv+2)& (0+255),f,b
 16979  003A84  5190               	movf	(??___fldiv+1)& (0+255),w,b
 16980  003A86  2392               	addwfc	(??___fldiv+3)& (0+255),f,b
 16981  003A88  0E7F               	movlw	127
 16982  003A8A  2591               	addwf	(??___fldiv+2)& (0+255),w,b
 16983  003A8C  6F98               	movwf	___fldiv@new_exp& (0+255),b
 16984  003A8E  0E00               	movlw	0
 16985  003A90  2192               	addwfc	(??___fldiv+3)& (0+255),w,b
 16986  003A92  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 16987                           
 16988                           ; BSR set to: 0
 16989  003A94  C087  F094         	movff	___fldiv@b,___fldiv@rem
 16990  003A98  C088  F095         	movff	___fldiv@b+1,___fldiv@rem+1
 16991  003A9C  C089  F096         	movff	___fldiv@b+2,___fldiv@rem+2
 16992  003AA0  C08A  F097         	movff	___fldiv@b+3,___fldiv@rem+3
 16993                           
 16994                           ; BSR set to: 0
 16995  003AA4  0E00               	movlw	0
 16996  003AA6  6F87               	movwf	___fldiv@b& (0+255),b
 16997  003AA8  0E00               	movlw	0
 16998  003AAA  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16999  003AAC  0E00               	movlw	0
 17000  003AAE  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17001  003AB0  0E00               	movlw	0
 17002  003AB2  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17003                           
 17004                           ; BSR set to: 0
 17005  003AB4  0E00               	movlw	0
 17006  003AB6  6F9A               	movwf	___fldiv@grs& (0+255),b
 17007  003AB8  0E00               	movlw	0
 17008  003ABA  6F9B               	movwf	(___fldiv@grs+1)& (0+255),b
 17009  003ABC  0E00               	movlw	0
 17010  003ABE  6F9C               	movwf	(___fldiv@grs+2)& (0+255),b
 17011  003AC0  0E00               	movlw	0
 17012  003AC2  6F9D               	movwf	(___fldiv@grs+3)& (0+255),b
 17013                           
 17014                           ; BSR set to: 0
 17015  003AC4  0E00               	movlw	0
 17016  003AC6  6F9F               	movwf	___fldiv@aexp& (0+255),b
 17017  003AC8  D028               	goto	l5923
 17018  003ACA                     
 17019                           ; BSR set to: 0
 17020                           
 17021                           ; BSR set to: 0
 17022  003ACA  519F               	movf	___fldiv@aexp& (0+255),w,b
 17023  003ACC  B4D8               	btfsc	status,2,c
 17024  003ACE  D011               	goto	l5925
 17025                           
 17026                           ; BSR set to: 0
 17027  003AD0  90D8               	bcf	status,0,c
 17028  003AD2  3794               	rlcf	___fldiv@rem& (0+255),f,b
 17029  003AD4  3795               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 17030  003AD6  3796               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 17031  003AD8  3797               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 17032  003ADA  90D8               	bcf	status,0,c
 17033  003ADC  3787               	rlcf	___fldiv@b& (0+255),f,b
 17034  003ADE  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 17035  003AE0  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 17036  003AE2  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 17037                           
 17038                           ; BSR set to: 0
 17039  003AE4  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 17040                           
 17041                           ; BSR set to: 0
 17042  003AE6  8187               	bsf	___fldiv@b& (0+255),0,b
 17043                           
 17044                           ; BSR set to: 0
 17045  003AE8  90D8               	bcf	status,0,c
 17046  003AEA  379A               	rlcf	___fldiv@grs& (0+255),f,b
 17047  003AEC  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 17048  003AEE  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 17049  003AF0  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 17050  003AF2                     l5925:
 17051                           
 17052                           ; BSR set to: 0
 17053                           
 17054                           ; BSR set to: 0
 17055  003AF2  518B               	movf	___fldiv@a& (0+255),w,b
 17056  003AF4  5D94               	subwf	___fldiv@rem& (0+255),w,b
 17057  003AF6  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 17058  003AF8  5995               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 17059  003AFA  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 17060  003AFC  5996               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 17061  003AFE  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 17062  003B00  5997               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 17063  003B02  A0D8               	btfss	status,0,c
 17064  003B04  D009               	goto	l5927
 17065                           
 17066                           ; BSR set to: 0
 17067  003B06  8D9D               	bsf	(___fldiv@grs+3)& (0+255),6,b
 17068                           
 17069                           ; BSR set to: 0
 17070  003B08  518B               	movf	___fldiv@a& (0+255),w,b
 17071  003B0A  5F94               	subwf	___fldiv@rem& (0+255),f,b
 17072  003B0C  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 17073  003B0E  5B95               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 17074  003B10  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 17075  003B12  5B96               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 17076  003B14  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 17077  003B16  5B97               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 17078  003B18                     l5927:
 17079                           
 17080                           ; BSR set to: 0
 17081                           
 17082                           ; BSR set to: 0
 17083  003B18  2B9F               	incf	___fldiv@aexp& (0+255),f,b
 17084  003B1A                     l5923:
 17085                           
 17086                           ; BSR set to: 0
 17087  003B1A  0E19               	movlw	25
 17088  003B1C  659F               	cpfsgt	___fldiv@aexp& (0+255),b
 17089  003B1E  D7D5               	goto	l5924
 17090                           
 17091                           ; BSR set to: 0
 17092                           
 17093                           ; BSR set to: 0
 17094  003B20  5194               	movf	___fldiv@rem& (0+255),w,b
 17095  003B22  1195               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 17096  003B24  1196               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 17097  003B26  1197               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 17098  003B28  B4D8               	btfsc	status,2,c
 17099  003B2A  D011               	goto	l5930
 17100                           
 17101                           ; BSR set to: 0
 17102  003B2C  819A               	bsf	___fldiv@grs& (0+255),0,b
 17103                           
 17104                           ; BSR set to: 0
 17105  003B2E  D00F               	goto	l5930
 17106  003B30                     
 17107                           ; BSR set to: 0
 17108                           
 17109                           ; BSR set to: 0
 17110  003B30  90D8               	bcf	status,0,c
 17111  003B32  3787               	rlcf	___fldiv@b& (0+255),f,b
 17112  003B34  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 17113  003B36  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 17114  003B38  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 17115                           
 17116                           ; BSR set to: 0
 17117  003B3A  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 17118                           
 17119                           ; BSR set to: 0
 17120  003B3C  8187               	bsf	___fldiv@b& (0+255),0,b
 17121                           
 17122                           ; BSR set to: 0
 17123  003B3E  90D8               	bcf	status,0,c
 17124  003B40  379A               	rlcf	___fldiv@grs& (0+255),f,b
 17125  003B42  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 17126  003B44  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 17127  003B46  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 17128  003B48  0798               	decf	___fldiv@new_exp& (0+255),f,b
 17129  003B4A  A0D8               	btfss	status,0,c
 17130  003B4C  0799               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 17131  003B4E                     l5930:
 17132                           
 17133                           ; BSR set to: 0
 17134                           
 17135                           ; BSR set to: 0
 17136  003B4E  AF89               	btfss	(___fldiv@b+2)& (0+255),7,b
 17137  003B50  D7EF               	goto	l5931
 17138                           
 17139                           ; BSR set to: 0
 17140                           
 17141                           ; BSR set to: 0
 17142  003B52  0E00               	movlw	0
 17143  003B54  6F9F               	movwf	___fldiv@aexp& (0+255),b
 17144                           
 17145                           ; BSR set to: 0
 17146  003B56  AF9D               	btfss	(___fldiv@grs+3)& (0+255),7,b
 17147  003B58  D016               	goto	l5937
 17148                           
 17149                           ; BSR set to: 0
 17150  003B5A  0EFF               	movlw	255
 17151  003B5C  159A               	andwf	___fldiv@grs& (0+255),w,b
 17152  003B5E  6F8F               	movwf	??___fldiv& (0+255),b
 17153  003B60  0EFF               	movlw	255
 17154  003B62  159B               	andwf	(___fldiv@grs+1)& (0+255),w,b
 17155  003B64  6F90               	movwf	(??___fldiv+1)& (0+255),b
 17156  003B66  0EFF               	movlw	255
 17157  003B68  159C               	andwf	(___fldiv@grs+2)& (0+255),w,b
 17158  003B6A  6F91               	movwf	(??___fldiv+2)& (0+255),b
 17159  003B6C  0E7F               	movlw	127
 17160  003B6E  159D               	andwf	(___fldiv@grs+3)& (0+255),w,b
 17161  003B70  6F92               	movwf	(??___fldiv+3)& (0+255),b
 17162  003B72  518F               	movf	??___fldiv& (0+255),w,b
 17163  003B74  1190               	iorwf	(??___fldiv+1)& (0+255),w,b
 17164  003B76  1191               	iorwf	(??___fldiv+2)& (0+255),w,b
 17165  003B78  1192               	iorwf	(??___fldiv+3)& (0+255),w,b
 17166  003B7A  A4D8               	btfss	status,2,c
 17167  003B7C  D002               	goto	u25260
 17168                           
 17169                           ; BSR set to: 0
 17170                           
 17171                           ; BSR set to: 0
 17172  003B7E  A187               	btfss	___fldiv@b& (0+255),0,b
 17173  003B80  D002               	goto	l5937
 17174  003B82                     u25260:
 17175                           
 17176                           ; BSR set to: 0
 17177  003B82  0E01               	movlw	1
 17178  003B84  6F9F               	movwf	___fldiv@aexp& (0+255),b
 17179  003B86                     l5937:
 17180                           
 17181                           ; BSR set to: 0
 17182                           
 17183                           ; BSR set to: 0
 17184                           
 17185                           ; BSR set to: 0
 17186  003B86  519F               	movf	___fldiv@aexp& (0+255),w,b
 17187  003B88  B4D8               	btfsc	status,2,c
 17188  003B8A  D01F               	goto	l5939
 17189                           
 17190                           ; BSR set to: 0
 17191  003B8C  0E01               	movlw	1
 17192  003B8E  2787               	addwf	___fldiv@b& (0+255),f,b
 17193  003B90  0E00               	movlw	0
 17194  003B92  2388               	addwfc	(___fldiv@b+1)& (0+255),f,b
 17195  003B94  2389               	addwfc	(___fldiv@b+2)& (0+255),f,b
 17196  003B96  238A               	addwfc	(___fldiv@b+3)& (0+255),f,b
 17197                           
 17198                           ; BSR set to: 0
 17199  003B98  A18A               	btfss	(___fldiv@b+3)& (0+255),0,b
 17200  003B9A  D017               	goto	l5939
 17201                           
 17202                           ; BSR set to: 0
 17203  003B9C  C087  F08F         	movff	___fldiv@b,??___fldiv
 17204  003BA0  C088  F090         	movff	___fldiv@b+1,??___fldiv+1
 17205  003BA4  C089  F091         	movff	___fldiv@b+2,??___fldiv+2
 17206  003BA8  C08A  F092         	movff	___fldiv@b+3,??___fldiv+3
 17207  003BAC  3592               	rlcf	(??___fldiv+3)& (0+255),w,b
 17208  003BAE  3392               	rrcf	(??___fldiv+3)& (0+255),f,b
 17209  003BB0  3391               	rrcf	(??___fldiv+2)& (0+255),f,b
 17210  003BB2  3390               	rrcf	(??___fldiv+1)& (0+255),f,b
 17211  003BB4  338F               	rrcf	??___fldiv& (0+255),f,b
 17212  003BB6  C08F  F087         	movff	??___fldiv,___fldiv@b
 17213  003BBA  C090  F088         	movff	??___fldiv+1,___fldiv@b+1
 17214  003BBE  C091  F089         	movff	??___fldiv+2,___fldiv@b+2
 17215  003BC2  C092  F08A         	movff	??___fldiv+3,___fldiv@b+3
 17216                           
 17217                           ; BSR set to: 0
 17218  003BC6  4B98               	infsnz	___fldiv@new_exp& (0+255),f,b
 17219  003BC8  2B99               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 17220  003BCA                     l5939:
 17221                           
 17222                           ; BSR set to: 0
 17223                           
 17224                           ; BSR set to: 0
 17225                           
 17226                           ; BSR set to: 0
 17227  003BCA  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 17228  003BCC  D010               	goto	l5940
 17229  003BCE  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 17230  003BD0  E103               	bnz	u25290
 17231  003BD2  2998               	incf	___fldiv@new_exp& (0+255),w,b
 17232  003BD4  A0D8               	btfss	status,0,c
 17233  003BD6  D00B               	goto	l5940
 17234  003BD8                     u25290:
 17235                           
 17236                           ; BSR set to: 0
 17237  003BD8  0E00               	movlw	0
 17238  003BDA  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 17239  003BDC  6998               	setf	___fldiv@new_exp& (0+255),b
 17240  003BDE  0E00               	movlw	0
 17241  003BE0  6F87               	movwf	___fldiv@b& (0+255),b
 17242  003BE2  0E00               	movlw	0
 17243  003BE4  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17244  003BE6  0E00               	movlw	0
 17245  003BE8  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17246  003BEA  0E00               	movlw	0
 17247  003BEC  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17248  003BEE                     l5940:
 17249                           
 17250                           ; BSR set to: 0
 17251                           
 17252                           ; BSR set to: 0
 17253  003BEE  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 17254  003BF0  D005               	goto	u25300
 17255  003BF2  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 17256  003BF4  E111               	bnz	l17389
 17257  003BF6  0598               	decf	___fldiv@new_exp& (0+255),w,b
 17258  003BF8  B0D8               	btfsc	status,0,c
 17259  003BFA  D00E               	goto	l5941
 17260  003BFC                     u25300:
 17261                           
 17262                           ; BSR set to: 0
 17263  003BFC  0E00               	movlw	0
 17264  003BFE  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 17265  003C00  0E00               	movlw	0
 17266  003C02  6F98               	movwf	___fldiv@new_exp& (0+255),b
 17267  003C04  0E00               	movlw	0
 17268  003C06  6F87               	movwf	___fldiv@b& (0+255),b
 17269  003C08  0E00               	movlw	0
 17270  003C0A  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17271  003C0C  0E00               	movlw	0
 17272  003C0E  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17273  003C10  0E00               	movlw	0
 17274  003C12  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17275  003C14  0E00               	movlw	0
 17276  003C16  6F93               	movwf	___fldiv@sign& (0+255),b
 17277  003C18                     l5941:
 17278  003C18                     l17389:
 17279                           
 17280                           ; BSR set to: 0
 17281  003C18  C098  F09E         	movff	___fldiv@new_exp,___fldiv@bexp
 17282                           
 17283                           ; BSR set to: 0
 17284  003C1C  A19E               	btfss	___fldiv@bexp& (0+255),0,b
 17285  003C1E  D002               	goto	l5942
 17286                           
 17287                           ; BSR set to: 0
 17288  003C20  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 17289  003C22  D001               	goto	l5943
 17290  003C24                     l5942:
 17291                           
 17292                           ; BSR set to: 0
 17293                           
 17294                           ; BSR set to: 0
 17295  003C24  9F89               	bcf	(___fldiv@b+2)& (0+255),7,b
 17296  003C26                     l5943:
 17297                           
 17298                           ; BSR set to: 0
 17299                           
 17300                           ; BSR set to: 0
 17301  003C26  90D8               	bcf	status,0,c
 17302  003C28  319E               	rrcf	___fldiv@bexp& (0+255),w,b
 17303  003C2A  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17304                           
 17305                           ; BSR set to: 0
 17306  003C2C  5193               	movf	___fldiv@sign& (0+255),w,b
 17307  003C2E  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 17308                           
 17309                           ; BSR set to: 0
 17310  003C30  C087  F087         	movff	___fldiv@b,?___fldiv
 17311  003C34  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 17312  003C38  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 17313  003C3C  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 17314  003C40  0012               	return	
 17315  003C42                     __end_of___fldiv:
 17316                           	opt stack 0
 17317                           tblptru	equ	0xFF8
 17318                           tblptrh	equ	0xFF7
 17319                           tblptrl	equ	0xFF6
 17320                           tablat	equ	0xFF5
 17321                           prodh	equ	0xFF4
 17322                           prodl	equ	0xFF3
 17323                           intcon	equ	0xFF2
 17324                           intcon2	equ	0xFF1
 17325                           postinc0	equ	0xFEE
 17326                           wreg	equ	0xFE8
 17327                           postdec1	equ	0xFE5
 17328                           fsr1l	equ	0xFE1
 17329                           indf2	equ	0xFDF
 17330                           postinc2	equ	0xFDE
 17331                           plusw2	equ	0xFDB
 17332                           fsr2h	equ	0xFDA
 17333                           fsr2l	equ	0xFD9
 17334                           status	equ	0xFD8
 17335                           
 17336 ;; *************** function _Function_D_1 *****************
 17337 ;; Defined at:
 17338 ;;		line 622 in file "menu.c"
 17339 ;; Parameters:    Size  Location     Type
 17340 ;;		None
 17341 ;; Auto vars:     Size  Location     Type
 17342 ;;		None
 17343 ;; Return value:  Size  Location     Type
 17344 ;;                  1    wreg      void 
 17345 ;; Registers used:
 17346 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17347 ;; Tracked objects:
 17348 ;;		On entry : 0/0
 17349 ;;		On exit  : 0/0
 17350 ;;		Unchanged: 0/0
 17351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17356 ;;Total ram usage:        1 bytes
 17357 ;; Hardware stack levels used:    1
 17358 ;; Hardware stack levels required when called:    9
 17359 ;; This function calls:
 17360 ;;		_Lcd_Print_String
 17361 ;;		___lbmod
 17362 ;;		___wmul
 17363 ;;		_clear_row1
 17364 ;;		_clear_row2
 17365 ;;		_processEncoderBuxton
 17366 ;;		_setControllerResolution
 17367 ;; This function is called by:
 17368 ;;		_Function_D
 17369 ;; This function uses a non-reentrant model
 17370 ;;
 17371                           
 17372                           	psect	text49
 17373  0077E2                     __ptext49:
 17374                           	opt stack 0
 17375  0077E2                     _Function_D_1:
 17376                           	opt stack 19
 17377                           
 17378                           ;menu.c: 624: which_screen = POTS_RES_MENU;
 17379                           
 17380                           ; BSR set to: 0
 17381                           ;incstack = 0
 17382  0077E2  0E0F               	movlw	15
 17383  0077E4  0100               	movlb	0	; () banked
 17384  0077E6  6FF9               	movwf	_which_screen& (0+255),b
 17385                           
 17386                           ; BSR set to: 0
 17387                           ;menu.c: 625: lcd_print_once = 0;
 17388  0077E8  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17389                           
 17390                           ; BSR set to: 0
 17391                           ;menu.c: 626: encoder_click = 0;
 17392  0077EA  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17393                           
 17394                           ;menu.c: 628: potsResoMenu.selector = POT_MODE;
 17395  0077EC  0E00               	movlw	0
 17396  0077EE  B636               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17397  0077F0  0E01               	movlw	1
 17398  0077F2  0101               	movlb	1	; () banked
 17399  0077F4  6F58               	movwf	(_potsResoMenu+2)& (0+255),b
 17400                           
 17401                           ;menu.c: 630: while(encoder_click == 0) {
 17402  0077F6  D02E               	goto	l3501
 17403  0077F8                     
 17404                           ;menu.c: 631: processEncoderBuxton();
 17405                           
 17406                           ; BSR set to: 1
 17407  0077F8  EC09  F000         	call	_processEncoderBuxton	;wreg free
 17408                           
 17409                           ;menu.c: 632: if (lcd_print_once == 0) {
 17410  0077FC  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17411  0077FE  D029               	goto	l3503
 17412                           
 17413                           ;menu.c: 633: clear_row1();
 17414  007800  EC1E  F04A         	call	_clear_row1	;wreg free
 17415                           
 17416                           ;menu.c: 634: Lcd_Print_String("Pots Resolution:");
 17417  007804  0EA8               	movlw	low STR_30
 17418  007806  0100               	movlb	0	; () banked
 17419  007808  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17420  00780A  0EFD               	movlw	high STR_30
 17421  00780C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17422  00780E  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 17423                           
 17424                           ;menu.c: 635: clear_row2();
 17425  007812  EC0A  F04A         	call	_clear_row2	;wreg free
 17426                           
 17427                           ;menu.c: 636: Lcd_Print_String(LCD_STRINGS[(potsResoMenu.selector % potsResoMenu.number)
      +                           + potsResoMenu.address]);
 17428  007816  C156  F060         	movff	_potsResoMenu,___lbmod@divisor
 17429  00781A  0101               	movlb	1	; () banked
 17430  00781C  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 17431  00781E  EC89  F049         	call	___lbmod
 17432  007822  0100               	movlb	0	; () banked
 17433  007824  6F70               	movwf	??_Function_D_1& (0+255),b
 17434  007826  5170               	movf	??_Function_D_1& (0+255),w,b
 17435  007828  0101               	movlb	1	; () banked
 17436  00782A  2557               	addwf	(_potsResoMenu+1)& (0+255),w,b
 17437  00782C  0100               	movlb	0	; () banked
 17438  00782E  6F64               	movwf	___wmul@multiplier& (0+255),b
 17439  007830  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 17440  007832  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17441  007834  0E00               	movlw	0
 17442  007836  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17443  007838  0E11               	movlw	17
 17444  00783A  6F66               	movwf	___wmul@multiplicand& (0+255),b
 17445  00783C  EC32  F04A         	call	___wmul	;wreg free
 17446  007840  0E9E               	movlw	low _LCD_STRINGS
 17447  007842  0100               	movlb	0	; () banked
 17448  007844  2564               	addwf	?___wmul& (0+255),w,b
 17449  007846  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17450  007848  0EF3               	movlw	high _LCD_STRINGS
 17451  00784A  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 17452  00784C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17453  00784E  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 17454  007852                     l3503:
 17455                           
 17456                           ;menu.c: 637: }
 17457                           ;menu.c: 638: lcd_print_once = 1;
 17458  007852  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17459  007854                     l3501:
 17460  007854  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17461  007856  D7D0               	goto	l3502
 17462                           
 17463                           ;menu.c: 639: }
 17464                           ;menu.c: 645: POT_MODE = potsResoMenu.selector;
 17465  007858  0101               	movlb	1	; () banked
 17466  00785A  A158               	btfss	(_potsResoMenu+2)& (0+255),0,b
 17467  00785C  D002               	goto	u33080
 17468  00785E  8636               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17469  007860  D001               	goto	u33095
 17470  007862                     u33080:
 17471  007862  9636               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17472  007864                     u33095:
 17473                           
 17474                           ;menu.c: 646: setControllerResolution();
 17475  007864  ECB6  F049         	call	_setControllerResolution	;wreg free
 17476  007868  0012               	return		;funcret
 17477  00786A                     __end_of_Function_D_1:
 17478                           	opt stack 0
 17479                           tblptru	equ	0xFF8
 17480                           tblptrh	equ	0xFF7
 17481                           tblptrl	equ	0xFF6
 17482                           tablat	equ	0xFF5
 17483                           prodh	equ	0xFF4
 17484                           prodl	equ	0xFF3
 17485                           intcon	equ	0xFF2
 17486                           intcon2	equ	0xFF1
 17487                           postinc0	equ	0xFEE
 17488                           wreg	equ	0xFE8
 17489                           postdec1	equ	0xFE5
 17490                           fsr1l	equ	0xFE1
 17491                           indf2	equ	0xFDF
 17492                           postinc2	equ	0xFDE
 17493                           plusw2	equ	0xFDB
 17494                           fsr2h	equ	0xFDA
 17495                           fsr2l	equ	0xFD9
 17496                           status	equ	0xFD8
 17497                           
 17498 ;; *************** function _setControllerResolution *****************
 17499 ;; Defined at:
 17500 ;;		line 115 in file "menu.c"
 17501 ;; Parameters:    Size  Location     Type
 17502 ;;		None
 17503 ;; Auto vars:     Size  Location     Type
 17504 ;;  i               1    0[BANK0 ] unsigned char 
 17505 ;; Return value:  Size  Location     Type
 17506 ;;                  1    wreg      void 
 17507 ;; Registers used:
 17508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17509 ;; Tracked objects:
 17510 ;;		On entry : 0/0
 17511 ;;		On exit  : 0/0
 17512 ;;		Unchanged: 0/0
 17513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17515 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17517 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17518 ;;Total ram usage:        1 bytes
 17519 ;; Hardware stack levels used:    1
 17520 ;; Hardware stack levels required when called:    5
 17521 ;; This function calls:
 17522 ;;		Nothing
 17523 ;; This function is called by:
 17524 ;;		_Function_D_1
 17525 ;; This function uses a non-reentrant model
 17526 ;;
 17527                           
 17528                           	psect	text50
 17529  00936C                     __ptext50:
 17530                           	opt stack 0
 17531  00936C                     _setControllerResolution:
 17532                           	opt stack 22
 17533                           
 17534                           ;menu.c: 117: for(unsigned char i=0;i<16;i++){
 17535                           
 17536                           ;incstack = 0
 17537  00936C  0E00               	movlw	0
 17538  00936E  0100               	movlb	0	; () banked
 17539  009370  6F60               	movwf	setControllerResolution@i& (0+255),b
 17540  009372                     l18589:
 17541                           
 17542                           ; BSR set to: 0
 17543  009372  0E0F               	movlw	15
 17544  009374  6560               	cpfsgt	setControllerResolution@i& (0+255),b
 17545  009376  D001               	goto	l3336
 17546  009378  0012               	return	
 17547  00937A                     l3336:
 17548                           
 17549                           ; BSR set to: 0
 17550                           ;menu.c: 119: inputPotsArray[i].controller_resolution = POT_MODE;
 17551                           
 17552                           ; BSR set to: 0
 17553  00937A  5160               	movf	setControllerResolution@i& (0+255),w,b
 17554  00937C  0D03               	mullw	3
 17555  00937E  0EAC               	movlw	low _inputPotsArray
 17556  009380  24F3               	addwf	prodl,w,c
 17557  009382  6ED9               	movwf	fsr2l,c
 17558  009384  0E02               	movlw	high _inputPotsArray
 17559  009386  20F4               	addwfc	prodh,w,c
 17560  009388  6EDA               	movwf	fsr2h,c
 17561  00938A  0102               	movlb	2	; () banked
 17562  00938C  90DF               	bcf	indf2,0,c
 17563  00938E  B636               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17564  009390  80DF               	bsf	indf2,0,c
 17565  009392  0100               	movlb	0	; () banked
 17566  009394  2B60               	incf	setControllerResolution@i& (0+255),f,b
 17567  009396  D7ED               	goto	l18589
 17568  009398                     __end_of_setControllerResolution:
 17569                           	opt stack 0
 17570                           tblptru	equ	0xFF8
 17571                           tblptrh	equ	0xFF7
 17572                           tblptrl	equ	0xFF6
 17573                           tablat	equ	0xFF5
 17574                           prodh	equ	0xFF4
 17575                           prodl	equ	0xFF3
 17576                           intcon	equ	0xFF2
 17577                           intcon2	equ	0xFF1
 17578                           postinc0	equ	0xFEE
 17579                           wreg	equ	0xFE8
 17580                           postdec1	equ	0xFE5
 17581                           fsr1l	equ	0xFE1
 17582                           indf2	equ	0xFDF
 17583                           postinc2	equ	0xFDE
 17584                           plusw2	equ	0xFDB
 17585                           fsr2h	equ	0xFDA
 17586                           fsr2l	equ	0xFD9
 17587                           status	equ	0xFD8
 17588                           
 17589 ;; *************** function _Function_C *****************
 17590 ;; Defined at:
 17591 ;;		line 597 in file "menu.c"
 17592 ;; Parameters:    Size  Location     Type
 17593 ;;		None
 17594 ;; Auto vars:     Size  Location     Type
 17595 ;;		None
 17596 ;; Return value:  Size  Location     Type
 17597 ;;                  1    wreg      void 
 17598 ;; Registers used:
 17599 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17600 ;; Tracked objects:
 17601 ;;		On entry : 0/0
 17602 ;;		On exit  : 0/0
 17603 ;;		Unchanged: 0/0
 17604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17607 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17608 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17609 ;;Total ram usage:        1 bytes
 17610 ;; Hardware stack levels used:    1
 17611 ;; Hardware stack levels required when called:   10
 17612 ;; This function calls:
 17613 ;;		_Function_C_1
 17614 ;;		_Function_C_2
 17615 ;;		_Function_C_3
 17616 ;;		_Lcd_Print_String
 17617 ;;		___lbmod
 17618 ;;		___wmul
 17619 ;;		_clear_row2
 17620 ;;		_processEncoderBuxton
 17621 ;; This function is called by:
 17622 ;;		_menu_lcd
 17623 ;; This function uses a non-reentrant model
 17624 ;;
 17625                           
 17626                           	psect	text51
 17627  00786A                     __ptext51:
 17628                           	opt stack 0
 17629  00786A                     _Function_C:
 17630                           	opt stack 19
 17631                           
 17632                           ;menu.c: 599: which_screen = DRUM_MENU;
 17633                           
 17634                           ; BSR set to: 0
 17635                           ;incstack = 0
 17636  00786A  0E05               	movlw	5
 17637  00786C  0100               	movlb	0	; () banked
 17638  00786E  6FF9               	movwf	_which_screen& (0+255),b
 17639                           
 17640                           ; BSR set to: 0
 17641                           ;menu.c: 600: lcd_print_once = 0;
 17642  007870  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17643                           
 17644                           ;menu.c: 602: drumMenu.selector = DRUM_MODE;
 17645  007872  0E00               	movlw	0
 17646  007874  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17647  007876  0E01               	movlw	1
 17648  007878  6E43               	movwf	_drumMenu+2,c
 17649                           
 17650                           ;menu.c: 604: while(encoder_click == 0) {
 17651  00787A  D022               	goto	l3489
 17652  00787C                     
 17653                           ;menu.c: 605: processEncoderBuxton();
 17654                           
 17655                           ; BSR set to: 0
 17656  00787C  EC09  F000         	call	_processEncoderBuxton	;wreg free
 17657                           
 17658                           ;menu.c: 606: if (lcd_print_once == 0) {
 17659  007880  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17660  007882  D01D               	goto	l3491
 17661                           
 17662                           ;menu.c: 607: clear_row2();
 17663  007884  EC0A  F04A         	call	_clear_row2	;wreg free
 17664                           
 17665                           ;menu.c: 608: Lcd_Print_String(LCD_STRINGS[(drumMenu.selector % drumMenu.number) + drumM
      +                          enu.address]);
 17666  007888  C041  F060         	movff	_drumMenu,___lbmod@divisor
 17667  00788C  5043               	movf	_drumMenu+2,w,c
 17668  00788E  EC89  F049         	call	___lbmod
 17669  007892  0100               	movlb	0	; () banked
 17670  007894  6F7C               	movwf	??_Function_C& (0+255),b
 17671  007896  517C               	movf	??_Function_C& (0+255),w,b
 17672  007898  2442               	addwf	_drumMenu+1,w,c
 17673  00789A  6F64               	movwf	___wmul@multiplier& (0+255),b
 17674  00789C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 17675  00789E  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17676  0078A0  0E00               	movlw	0
 17677  0078A2  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17678  0078A4  0E11               	movlw	17
 17679  0078A6  6F66               	movwf	___wmul@multiplicand& (0+255),b
 17680  0078A8  EC32  F04A         	call	___wmul	;wreg free
 17681  0078AC  0E9E               	movlw	low _LCD_STRINGS
 17682  0078AE  0100               	movlb	0	; () banked
 17683  0078B0  2564               	addwf	?___wmul& (0+255),w,b
 17684  0078B2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17685  0078B4  0EF3               	movlw	high _LCD_STRINGS
 17686  0078B6  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 17687  0078B8  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17688  0078BA  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 17689  0078BE                     l3491:
 17690                           
 17691                           ;menu.c: 610: }
 17692                           ;menu.c: 611: lcd_print_once = 1;
 17693  0078BE  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17694  0078C0                     l3489:
 17695  0078C0  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17696  0078C2  D7DC               	goto	l3490
 17697                           
 17698                           ;menu.c: 612: }
 17699                           ;menu.c: 614: if(drumMenu.selector == 0){DRUM_MODE = 0;}
 17700  0078C4  5043               	movf	_drumMenu+2,w,c
 17701  0078C6  B4D8               	btfsc	status,2,c
 17702  0078C8  9832               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17703                           
 17704                           ;menu.c: 615: if(drumMenu.selector == 1){DRUM_MODE = 1;}
 17705  0078CA  0443               	decf	_drumMenu+2,w,c
 17706  0078CC  B4D8               	btfsc	status,2,c
 17707  0078CE  8832               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17708                           
 17709                           ;menu.c: 616: if(drumMenu.selector == 2) {Function_C_1();}
 17710  0078D0  0E02               	movlw	2
 17711  0078D2  1843               	xorwf	_drumMenu+2,w,c
 17712  0078D4  B4D8               	btfsc	status,2,c
 17713  0078D6  EC61  F03B         	call	_Function_C_1	;wreg free
 17714                           
 17715                           ;menu.c: 617: if(drumMenu.selector == 3) {Function_C_2();}
 17716  0078DA  0E03               	movlw	3
 17717  0078DC  1843               	xorwf	_drumMenu+2,w,c
 17718  0078DE  B4D8               	btfsc	status,2,c
 17719  0078E0  ECD6  F030         	call	_Function_C_2	;wreg free
 17720                           
 17721                           ;menu.c: 618: if(drumMenu.selector == 4) {Function_C_3();}
 17722  0078E4  0E04               	movlw	4
 17723  0078E6  1843               	xorwf	_drumMenu+2,w,c
 17724  0078E8  A4D8               	btfss	status,2,c
 17725  0078EA  0012               	return	
 17726  0078EC  EC42  F030         	call	_Function_C_3	;wreg free
 17727  0078F0  0012               	return	
 17728  0078F2                     __end_of_Function_C:
 17729                           	opt stack 0
 17730                           tblptru	equ	0xFF8
 17731                           tblptrh	equ	0xFF7
 17732                           tblptrl	equ	0xFF6
 17733                           tablat	equ	0xFF5
 17734                           prodh	equ	0xFF4
 17735                           prodl	equ	0xFF3
 17736                           intcon	equ	0xFF2
 17737                           intcon2	equ	0xFF1
 17738                           postinc0	equ	0xFEE
 17739                           wreg	equ	0xFE8
 17740                           postdec1	equ	0xFE5
 17741                           fsr1l	equ	0xFE1
 17742                           indf2	equ	0xFDF
 17743                           postinc2	equ	0xFDE
 17744                           plusw2	equ	0xFDB
 17745                           fsr2h	equ	0xFDA
 17746                           fsr2l	equ	0xFD9
 17747                           status	equ	0xFD8
 17748                           
 17749 ;; *************** function _Function_C_3 *****************
 17750 ;; Defined at:
 17751 ;;		line 550 in file "menu.c"
 17752 ;; Parameters:    Size  Location     Type
 17753 ;;		None
 17754 ;; Auto vars:     Size  Location     Type
 17755 ;;  array_index     1   27[BANK0 ] unsigned char 
 17756 ;; Return value:  Size  Location     Type
 17757 ;;                  1    wreg      void 
 17758 ;; Registers used:
 17759 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17760 ;; Tracked objects:
 17761 ;;		On entry : 0/0
 17762 ;;		On exit  : 0/0
 17763 ;;		Unchanged: 0/0
 17764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17767 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17768 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17769 ;;Total ram usage:        2 bytes
 17770 ;; Hardware stack levels used:    1
 17771 ;; Hardware stack levels required when called:    9
 17772 ;; This function calls:
 17773 ;;		_Lcd_Print_String
 17774 ;;		_Lcd_Set_Cursor
 17775 ;;		___lbmod
 17776 ;;		___wmul
 17777 ;;		_clear_row1
 17778 ;;		_clear_row2
 17779 ;;		_int2string
 17780 ;;		_processEncoderBuxton
 17781 ;; This function is called by:
 17782 ;;		_Function_C
 17783 ;; This function uses a non-reentrant model
 17784 ;;
 17785                           
 17786                           	psect	text52
 17787  006084                     __ptext52:
 17788                           	opt stack 0
 17789  006084                     _Function_C_3:
 17790                           	opt stack 19
 17791                           
 17792                           ;menu.c: 552: which_screen = DRUMS_CC_MENU;
 17793                           
 17794                           ;incstack = 0
 17795  006084  0E0E               	movlw	14
 17796  006086  0100               	movlb	0	; () banked
 17797  006088  6FF9               	movwf	_which_screen& (0+255),b
 17798                           
 17799                           ; BSR set to: 0
 17800                           ;menu.c: 553: lcd_print_once = 0;
 17801  00608A  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17802                           
 17803                           ; BSR set to: 0
 17804                           ;menu.c: 554: encoder_click = 0;
 17805  00608C  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17806                           
 17807                           ;menu.c: 556: while(encoder_click == 0) {
 17808  00608E  D02E               	goto	l3474
 17809  006090                     
 17810                           ;menu.c: 557: processEncoderBuxton();
 17811                           
 17812                           ; BSR set to: 0
 17813  006090  EC09  F000         	call	_processEncoderBuxton	;wreg free
 17814                           
 17815                           ;menu.c: 558: if (lcd_print_once == 0) {
 17816  006094  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17817  006096  D029               	goto	l3476
 17818                           
 17819                           ;menu.c: 559: clear_row1();
 17820  006098  EC1E  F04A         	call	_clear_row1	;wreg free
 17821                           
 17822                           ;menu.c: 560: Lcd_Print_String("Set CC Number:");
 17823  00609C  0E6B               	movlw	low STR_29
 17824  00609E  0100               	movlb	0	; () banked
 17825  0060A0  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17826  0060A2  0EFE               	movlw	high STR_29
 17827  0060A4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17828  0060A6  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 17829                           
 17830                           ;menu.c: 561: clear_row2();
 17831  0060AA  EC0A  F04A         	call	_clear_row2	;wreg free
 17832                           
 17833                           ;menu.c: 562: Lcd_Print_String(LCD_STRINGS[(drumCCMenu.selector % drumCCMenu.number) + d
      +                          rumCCMenu.address]);
 17834  0060AE  C159  F060         	movff	_drumCCMenu,___lbmod@divisor
 17835  0060B2  0101               	movlb	1	; () banked
 17836  0060B4  515B               	movf	(_drumCCMenu+2)& (0+255),w,b
 17837  0060B6  EC89  F049         	call	___lbmod
 17838  0060BA  0100               	movlb	0	; () banked
 17839  0060BC  6F7A               	movwf	??_Function_C_3& (0+255),b
 17840  0060BE  517A               	movf	??_Function_C_3& (0+255),w,b
 17841  0060C0  0101               	movlb	1	; () banked
 17842  0060C2  255A               	addwf	(_drumCCMenu+1)& (0+255),w,b
 17843  0060C4  0100               	movlb	0	; () banked
 17844  0060C6  6F64               	movwf	___wmul@multiplier& (0+255),b
 17845  0060C8  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 17846  0060CA  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17847  0060CC  0E00               	movlw	0
 17848  0060CE  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17849  0060D0  0E11               	movlw	17
 17850  0060D2  6F66               	movwf	___wmul@multiplicand& (0+255),b
 17851  0060D4  EC32  F04A         	call	___wmul	;wreg free
 17852  0060D8  0E9E               	movlw	low _LCD_STRINGS
 17853  0060DA  0100               	movlb	0	; () banked
 17854  0060DC  2564               	addwf	?___wmul& (0+255),w,b
 17855  0060DE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 17856  0060E0  0EF3               	movlw	high _LCD_STRINGS
 17857  0060E2  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 17858  0060E4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17859  0060E6  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 17860  0060EA                     l3476:
 17861                           
 17862                           ;menu.c: 563: }
 17863                           ;menu.c: 564: lcd_print_once = 1;
 17864  0060EA  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17865  0060EC                     l3474:
 17866  0060EC  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17867  0060EE  D7D0               	goto	l3475
 17868                           
 17869                           ;menu.c: 565: }
 17870                           ;menu.c: 567: which_screen = BLANK;
 17871  0060F0  0E00               	movlw	0
 17872  0060F2  0100               	movlb	0	; () banked
 17873  0060F4  6FF9               	movwf	_which_screen& (0+255),b
 17874                           
 17875                           ; BSR set to: 0
 17876                           ;menu.c: 568: lcd_print_once = 0;
 17877  0060F6  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17878                           
 17879                           ; BSR set to: 0
 17880                           ;menu.c: 569: encoder_click = 0;
 17881  0060F8  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17882                           
 17883                           ; BSR set to: 0
 17884                           ;menu.c: 570: unsigned char array_index = drumCCMenu.selector;
 17885  0060FA  C15B  F07B         	movff	_drumCCMenu+2,Function_C_3@array_index
 17886                           
 17887                           ;menu.c: 572: while(encoder_click == 0) {
 17888  0060FE  D053               	goto	l3480
 17889  006100                     l3479:
 17890                           
 17891                           ;menu.c: 574: if(lcd_print_once == 0) {
 17892  006100  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17893  006102  D051               	goto	l3480
 17894                           
 17895                           ;menu.c: 575: if (encoder_direction == 0x10) {
 17896  006104  0E10               	movlw	16
 17897  006106  0100               	movlb	0	; () banked
 17898  006108  19EB               	xorwf	_encoder_direction& (0+255),w,b
 17899  00610A  A4D8               	btfss	status,2,c
 17900  00610C  D016               	goto	l3481
 17901                           
 17902                           ; BSR set to: 0
 17903                           ;menu.c: 576: if(DRUM_CC[array_index] < 127) {
 17904  00610E  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17905  006110  0D01               	mullw	1
 17906  006112  0ED7               	movlw	low _DRUM_CC
 17907  006114  24F3               	addwf	prodl,w,c
 17908  006116  6ED9               	movwf	fsr2l,c
 17909  006118  0E01               	movlw	high _DRUM_CC
 17910  00611A  20F4               	addwfc	prodh,w,c
 17911  00611C  6EDA               	movwf	fsr2h,c
 17912  00611E  0E7F               	movlw	127
 17913  006120  60DF               	cpfslt	indf2,c
 17914  006122  D009               	goto	l3482
 17915                           
 17916                           ; BSR set to: 0
 17917                           ;menu.c: 577: DRUM_CC[array_index]++;
 17918  006124  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17919  006126  0D01               	mullw	1
 17920  006128  0ED7               	movlw	low _DRUM_CC
 17921  00612A  24F3               	addwf	prodl,w,c
 17922  00612C  6ED9               	movwf	fsr2l,c
 17923  00612E  0E01               	movlw	high _DRUM_CC
 17924  006130  20F4               	addwfc	prodh,w,c
 17925  006132  6EDA               	movwf	fsr2h,c
 17926  006134  2ADF               	incf	indf2,f,c
 17927  006136                     l3482:
 17928                           
 17929                           ; BSR set to: 0
 17930                           ;menu.c: 578: }
 17931                           ;menu.c: 579: encoder_direction = 0x00;
 17932                           
 17933                           ; BSR set to: 0
 17934  006136  0E00               	movlw	0
 17935  006138  6FEB               	movwf	_encoder_direction& (0+255),b
 17936  00613A                     l3481:
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;menu.c: 580: }
 17940                           ;menu.c: 582: if (encoder_direction == 0x20) {
 17941                           
 17942                           ; BSR set to: 0
 17943  00613A  0E20               	movlw	32
 17944  00613C  19EB               	xorwf	_encoder_direction& (0+255),w,b
 17945  00613E  A4D8               	btfss	status,2,c
 17946  006140  D016               	goto	l3483
 17947                           
 17948                           ; BSR set to: 0
 17949                           ;menu.c: 583: if(DRUM_CC[array_index] > 0) {
 17950  006142  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17951  006144  0D01               	mullw	1
 17952  006146  0ED7               	movlw	low _DRUM_CC
 17953  006148  24F3               	addwf	prodl,w,c
 17954  00614A  6ED9               	movwf	fsr2l,c
 17955  00614C  0E01               	movlw	high _DRUM_CC
 17956  00614E  20F4               	addwfc	prodh,w,c
 17957  006150  6EDA               	movwf	fsr2h,c
 17958  006152  50DF               	movf	indf2,w,c
 17959  006154  B4D8               	btfsc	status,2,c
 17960  006156  D009               	goto	l3484
 17961                           
 17962                           ; BSR set to: 0
 17963                           ;menu.c: 584: DRUM_CC[array_index]--;
 17964  006158  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17965  00615A  0D01               	mullw	1
 17966  00615C  0ED7               	movlw	low _DRUM_CC
 17967  00615E  24F3               	addwf	prodl,w,c
 17968  006160  6ED9               	movwf	fsr2l,c
 17969  006162  0E01               	movlw	high _DRUM_CC
 17970  006164  20F4               	addwfc	prodh,w,c
 17971  006166  6EDA               	movwf	fsr2h,c
 17972  006168  06DF               	decf	indf2,f,c
 17973  00616A                     l3484:
 17974                           
 17975                           ; BSR set to: 0
 17976                           ;menu.c: 585: }
 17977                           ;menu.c: 586: encoder_direction = 0x00;
 17978                           
 17979                           ; BSR set to: 0
 17980  00616A  0E00               	movlw	0
 17981  00616C  6FEB               	movwf	_encoder_direction& (0+255),b
 17982  00616E                     l3483:
 17983                           
 17984                           ; BSR set to: 0
 17985                           ;menu.c: 587: }
 17986                           ;menu.c: 589: int2string(DRUM_CC[array_index]);
 17987                           
 17988                           ; BSR set to: 0
 17989  00616E  517B               	movf	Function_C_3@array_index& (0+255),w,b
 17990  006170  0D01               	mullw	1
 17991  006172  0ED7               	movlw	low _DRUM_CC
 17992  006174  24F3               	addwf	prodl,w,c
 17993  006176  6ED9               	movwf	fsr2l,c
 17994  006178  0E01               	movlw	high _DRUM_CC
 17995  00617A  20F4               	addwfc	prodh,w,c
 17996  00617C  6EDA               	movwf	fsr2h,c
 17997  00617E  50DF               	movf	indf2,w,c
 17998  006180  6F7A               	movwf	??_Function_C_3& (0+255),b
 17999  006182  517A               	movf	??_Function_C_3& (0+255),w,b
 18000  006184  6F74               	movwf	int2string@number& (0+255),b
 18001  006186  6B75               	clrf	(int2string@number+1)& (0+255),b
 18002  006188  ECBD  F034         	call	_int2string	;wreg free
 18003                           
 18004                           ;menu.c: 590: Lcd_Set_Cursor(2,13);
 18005  00618C  0E0D               	movlw	13
 18006  00618E  0100               	movlb	0	; () banked
 18007  006190  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 18008  006192  0E02               	movlw	2
 18009  006194  ECB8  F045         	call	_Lcd_Set_Cursor
 18010                           
 18011                           ;menu.c: 591: Lcd_Print_String(string2display);
 18012  006198  0E82               	movlw	low _string2display
 18013  00619A  0100               	movlb	0	; () banked
 18014  00619C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18015  00619E  0E01               	movlw	high _string2display
 18016  0061A0  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18017  0061A2  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 18018  0061A6                     l3480:
 18019  0061A6  BE35               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 18020  0061A8  0012               	return	
 18021  0061AA  D7AA               	goto	l3479
 18022  0061AC                     __end_of_Function_C_3:
 18023                           	opt stack 0
 18024                           tblptru	equ	0xFF8
 18025                           tblptrh	equ	0xFF7
 18026                           tblptrl	equ	0xFF6
 18027                           tablat	equ	0xFF5
 18028                           prodh	equ	0xFF4
 18029                           prodl	equ	0xFF3
 18030                           intcon	equ	0xFF2
 18031                           intcon2	equ	0xFF1
 18032                           postinc0	equ	0xFEE
 18033                           wreg	equ	0xFE8
 18034                           postdec1	equ	0xFE5
 18035                           fsr1l	equ	0xFE1
 18036                           indf2	equ	0xFDF
 18037                           postinc2	equ	0xFDE
 18038                           plusw2	equ	0xFDB
 18039                           fsr2h	equ	0xFDA
 18040                           fsr2l	equ	0xFD9
 18041                           status	equ	0xFD8
 18042                           
 18043 ;; *************** function _Function_C_2 *****************
 18044 ;; Defined at:
 18045 ;;		line 502 in file "menu.c"
 18046 ;; Parameters:    Size  Location     Type
 18047 ;;		None
 18048 ;; Auto vars:     Size  Location     Type
 18049 ;;  array_index     1   27[BANK0 ] unsigned char 
 18050 ;; Return value:  Size  Location     Type
 18051 ;;                  1    wreg      void 
 18052 ;; Registers used:
 18053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18054 ;; Tracked objects:
 18055 ;;		On entry : 0/0
 18056 ;;		On exit  : 0/0
 18057 ;;		Unchanged: 0/0
 18058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18060 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18061 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18062 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18063 ;;Total ram usage:        2 bytes
 18064 ;; Hardware stack levels used:    1
 18065 ;; Hardware stack levels required when called:    9
 18066 ;; This function calls:
 18067 ;;		_Lcd_Print_String
 18068 ;;		_Lcd_Set_Cursor
 18069 ;;		___lbmod
 18070 ;;		___wmul
 18071 ;;		_clear_row1
 18072 ;;		_clear_row2
 18073 ;;		_int2string
 18074 ;;		_processEncoderBuxton
 18075 ;; This function is called by:
 18076 ;;		_Function_C
 18077 ;; This function uses a non-reentrant model
 18078 ;;
 18079                           
 18080                           	psect	text53
 18081  0061AC                     __ptext53:
 18082                           	opt stack 0
 18083  0061AC                     _Function_C_2:
 18084                           	opt stack 19
 18085                           
 18086                           ;menu.c: 504: which_screen = DRUMS_NN_MENU;
 18087                           
 18088                           ;incstack = 0
 18089  0061AC  0E0D               	movlw	13
 18090  0061AE  0100               	movlb	0	; () banked
 18091  0061B0  6FF9               	movwf	_which_screen& (0+255),b
 18092                           
 18093                           ; BSR set to: 0
 18094                           ;menu.c: 505: lcd_print_once = 0;
 18095  0061B2  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18096                           
 18097                           ; BSR set to: 0
 18098                           ;menu.c: 506: encoder_click = 0;
 18099  0061B4  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18100                           
 18101                           ;menu.c: 508: while(encoder_click == 0) {
 18102  0061B6  D02E               	goto	l3459
 18103  0061B8                     
 18104                           ;menu.c: 509: processEncoderBuxton();
 18105                           
 18106                           ; BSR set to: 0
 18107  0061B8  EC09  F000         	call	_processEncoderBuxton	;wreg free
 18108                           
 18109                           ;menu.c: 510: if (lcd_print_once == 0) {
 18110  0061BC  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18111  0061BE  D029               	goto	l3461
 18112                           
 18113                           ;menu.c: 511: clear_row1();
 18114  0061C0  EC1E  F04A         	call	_clear_row1	;wreg free
 18115                           
 18116                           ;menu.c: 512: Lcd_Print_String("Set Note Number:");
 18117  0061C4  0ECA               	movlw	low STR_28
 18118  0061C6  0100               	movlb	0	; () banked
 18119  0061C8  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18120  0061CA  0EFD               	movlw	high STR_28
 18121  0061CC  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18122  0061CE  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 18123                           
 18124                           ;menu.c: 513: clear_row2();
 18125  0061D2  EC0A  F04A         	call	_clear_row2	;wreg free
 18126                           
 18127                           ;menu.c: 514: Lcd_Print_String(LCD_STRINGS[(drumNNMenu.selector % drumNNMenu.number) + d
      +                          rumNNMenu.address]);
 18128  0061D6  C15C  F060         	movff	_drumNNMenu,___lbmod@divisor
 18129  0061DA  0101               	movlb	1	; () banked
 18130  0061DC  515E               	movf	(_drumNNMenu+2)& (0+255),w,b
 18131  0061DE  EC89  F049         	call	___lbmod
 18132  0061E2  0100               	movlb	0	; () banked
 18133  0061E4  6F7A               	movwf	??_Function_C_2& (0+255),b
 18134  0061E6  517A               	movf	??_Function_C_2& (0+255),w,b
 18135  0061E8  0101               	movlb	1	; () banked
 18136  0061EA  255D               	addwf	(_drumNNMenu+1)& (0+255),w,b
 18137  0061EC  0100               	movlb	0	; () banked
 18138  0061EE  6F64               	movwf	___wmul@multiplier& (0+255),b
 18139  0061F0  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 18140  0061F2  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18141  0061F4  0E00               	movlw	0
 18142  0061F6  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18143  0061F8  0E11               	movlw	17
 18144  0061FA  6F66               	movwf	___wmul@multiplicand& (0+255),b
 18145  0061FC  EC32  F04A         	call	___wmul	;wreg free
 18146  006200  0E9E               	movlw	low _LCD_STRINGS
 18147  006202  0100               	movlb	0	; () banked
 18148  006204  2564               	addwf	?___wmul& (0+255),w,b
 18149  006206  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18150  006208  0EF3               	movlw	high _LCD_STRINGS
 18151  00620A  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 18152  00620C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18153  00620E  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 18154  006212                     l3461:
 18155                           
 18156                           ;menu.c: 515: }
 18157                           ;menu.c: 516: lcd_print_once = 1;
 18158  006212  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18159  006214                     l3459:
 18160  006214  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 18161  006216  D7D0               	goto	l3460
 18162                           
 18163                           ;menu.c: 517: }
 18164                           ;menu.c: 519: which_screen = BLANK;
 18165  006218  0E00               	movlw	0
 18166  00621A  0100               	movlb	0	; () banked
 18167  00621C  6FF9               	movwf	_which_screen& (0+255),b
 18168                           
 18169                           ; BSR set to: 0
 18170                           ;menu.c: 520: lcd_print_once = 0;
 18171  00621E  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18172                           
 18173                           ; BSR set to: 0
 18174                           ;menu.c: 521: encoder_click = 0;
 18175  006220  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18176                           
 18177                           ; BSR set to: 0
 18178                           ;menu.c: 522: unsigned char array_index = drumNNMenu.selector;
 18179  006222  C15E  F07B         	movff	_drumNNMenu+2,Function_C_2@array_index
 18180                           
 18181                           ;menu.c: 524: while(encoder_click == 0) {
 18182  006226  D053               	goto	l3465
 18183  006228                     l3464:
 18184                           
 18185                           ;menu.c: 526: if(lcd_print_once == 0) {
 18186  006228  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18187  00622A  D051               	goto	l3465
 18188                           
 18189                           ;menu.c: 527: if (encoder_direction == 0x10) {
 18190  00622C  0E10               	movlw	16
 18191  00622E  0100               	movlb	0	; () banked
 18192  006230  19EB               	xorwf	_encoder_direction& (0+255),w,b
 18193  006232  A4D8               	btfss	status,2,c
 18194  006234  D016               	goto	l3466
 18195                           
 18196                           ; BSR set to: 0
 18197                           ;menu.c: 528: if(DRUM_NOTE[array_index] < 81) {
 18198  006236  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18199  006238  0D01               	mullw	1
 18200  00623A  0EDF               	movlw	low _DRUM_NOTE
 18201  00623C  24F3               	addwf	prodl,w,c
 18202  00623E  6ED9               	movwf	fsr2l,c
 18203  006240  0E01               	movlw	high _DRUM_NOTE
 18204  006242  20F4               	addwfc	prodh,w,c
 18205  006244  6EDA               	movwf	fsr2h,c
 18206  006246  0E51               	movlw	81
 18207  006248  60DF               	cpfslt	indf2,c
 18208  00624A  D009               	goto	l3467
 18209                           
 18210                           ; BSR set to: 0
 18211                           ;menu.c: 529: DRUM_NOTE[array_index]++;
 18212  00624C  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18213  00624E  0D01               	mullw	1
 18214  006250  0EDF               	movlw	low _DRUM_NOTE
 18215  006252  24F3               	addwf	prodl,w,c
 18216  006254  6ED9               	movwf	fsr2l,c
 18217  006256  0E01               	movlw	high _DRUM_NOTE
 18218  006258  20F4               	addwfc	prodh,w,c
 18219  00625A  6EDA               	movwf	fsr2h,c
 18220  00625C  2ADF               	incf	indf2,f,c
 18221  00625E                     l3467:
 18222                           
 18223                           ; BSR set to: 0
 18224                           ;menu.c: 530: }
 18225                           ;menu.c: 531: encoder_direction = 0x00;
 18226                           
 18227                           ; BSR set to: 0
 18228  00625E  0E00               	movlw	0
 18229  006260  6FEB               	movwf	_encoder_direction& (0+255),b
 18230  006262                     l3466:
 18231                           
 18232                           ; BSR set to: 0
 18233                           ;menu.c: 532: }
 18234                           ;menu.c: 534: if (encoder_direction == 0x20) {
 18235                           
 18236                           ; BSR set to: 0
 18237  006262  0E20               	movlw	32
 18238  006264  19EB               	xorwf	_encoder_direction& (0+255),w,b
 18239  006266  A4D8               	btfss	status,2,c
 18240  006268  D016               	goto	l3468
 18241                           
 18242                           ; BSR set to: 0
 18243                           ;menu.c: 535: if(DRUM_NOTE[array_index] > 35) {
 18244  00626A  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18245  00626C  0D01               	mullw	1
 18246  00626E  0EDF               	movlw	low _DRUM_NOTE
 18247  006270  24F3               	addwf	prodl,w,c
 18248  006272  6ED9               	movwf	fsr2l,c
 18249  006274  0E01               	movlw	high _DRUM_NOTE
 18250  006276  20F4               	addwfc	prodh,w,c
 18251  006278  6EDA               	movwf	fsr2h,c
 18252  00627A  0E23               	movlw	35
 18253  00627C  64DF               	cpfsgt	indf2,c
 18254  00627E  D009               	goto	l3469
 18255                           
 18256                           ; BSR set to: 0
 18257                           ;menu.c: 536: DRUM_NOTE[array_index]--;
 18258  006280  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18259  006282  0D01               	mullw	1
 18260  006284  0EDF               	movlw	low _DRUM_NOTE
 18261  006286  24F3               	addwf	prodl,w,c
 18262  006288  6ED9               	movwf	fsr2l,c
 18263  00628A  0E01               	movlw	high _DRUM_NOTE
 18264  00628C  20F4               	addwfc	prodh,w,c
 18265  00628E  6EDA               	movwf	fsr2h,c
 18266  006290  06DF               	decf	indf2,f,c
 18267  006292                     l3469:
 18268                           
 18269                           ; BSR set to: 0
 18270                           ;menu.c: 537: }
 18271                           ;menu.c: 538: encoder_direction = 0x00;
 18272                           
 18273                           ; BSR set to: 0
 18274  006292  0E00               	movlw	0
 18275  006294  6FEB               	movwf	_encoder_direction& (0+255),b
 18276  006296                     l3468:
 18277                           
 18278                           ; BSR set to: 0
 18279                           ;menu.c: 539: }
 18280                           ;menu.c: 541: int2string(DRUM_NOTE[array_index]);
 18281                           
 18282                           ; BSR set to: 0
 18283  006296  517B               	movf	Function_C_2@array_index& (0+255),w,b
 18284  006298  0D01               	mullw	1
 18285  00629A  0EDF               	movlw	low _DRUM_NOTE
 18286  00629C  24F3               	addwf	prodl,w,c
 18287  00629E  6ED9               	movwf	fsr2l,c
 18288  0062A0  0E01               	movlw	high _DRUM_NOTE
 18289  0062A2  20F4               	addwfc	prodh,w,c
 18290  0062A4  6EDA               	movwf	fsr2h,c
 18291  0062A6  50DF               	movf	indf2,w,c
 18292  0062A8  6F7A               	movwf	??_Function_C_2& (0+255),b
 18293  0062AA  517A               	movf	??_Function_C_2& (0+255),w,b
 18294  0062AC  6F74               	movwf	int2string@number& (0+255),b
 18295  0062AE  6B75               	clrf	(int2string@number+1)& (0+255),b
 18296  0062B0  ECBD  F034         	call	_int2string	;wreg free
 18297                           
 18298                           ;menu.c: 542: Lcd_Set_Cursor(2,13);
 18299  0062B4  0E0D               	movlw	13
 18300  0062B6  0100               	movlb	0	; () banked
 18301  0062B8  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 18302  0062BA  0E02               	movlw	2
 18303  0062BC  ECB8  F045         	call	_Lcd_Set_Cursor
 18304                           
 18305                           ;menu.c: 543: Lcd_Print_String(string2display);
 18306  0062C0  0E82               	movlw	low _string2display
 18307  0062C2  0100               	movlb	0	; () banked
 18308  0062C4  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18309  0062C6  0E01               	movlw	high _string2display
 18310  0062C8  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18311  0062CA  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 18312  0062CE                     l3465:
 18313  0062CE  BE35               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 18314  0062D0  0012               	return	
 18315  0062D2  D7AA               	goto	l3464
 18316  0062D4                     __end_of_Function_C_2:
 18317                           	opt stack 0
 18318                           tblptru	equ	0xFF8
 18319                           tblptrh	equ	0xFF7
 18320                           tblptrl	equ	0xFF6
 18321                           tablat	equ	0xFF5
 18322                           prodh	equ	0xFF4
 18323                           prodl	equ	0xFF3
 18324                           intcon	equ	0xFF2
 18325                           intcon2	equ	0xFF1
 18326                           postinc0	equ	0xFEE
 18327                           wreg	equ	0xFE8
 18328                           postdec1	equ	0xFE5
 18329                           fsr1l	equ	0xFE1
 18330                           indf2	equ	0xFDF
 18331                           postinc2	equ	0xFDE
 18332                           plusw2	equ	0xFDB
 18333                           fsr2h	equ	0xFDA
 18334                           fsr2l	equ	0xFD9
 18335                           status	equ	0xFD8
 18336                           
 18337 ;; *************** function _int2string *****************
 18338 ;; Defined at:
 18339 ;;		line 86 in file "menu.c"
 18340 ;; Parameters:    Size  Location     Type
 18341 ;;  number          2   20[BANK0 ] int 
 18342 ;; Auto vars:     Size  Location     Type
 18343 ;;  number_to_di    2   24[BANK0 ] int 
 18344 ;; Return value:  Size  Location     Type
 18345 ;;                  1    wreg      void 
 18346 ;; Registers used:
 18347 ;;		wreg, status,2, status,0, cstack
 18348 ;; Tracked objects:
 18349 ;;		On entry : 0/0
 18350 ;;		On exit  : 0/0
 18351 ;;		Unchanged: 0/0
 18352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18353 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18354 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18355 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18356 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18357 ;;Total ram usage:        6 bytes
 18358 ;; Hardware stack levels used:    1
 18359 ;; Hardware stack levels required when called:    6
 18360 ;; This function calls:
 18361 ;;		___awdiv
 18362 ;;		___awmod
 18363 ;; This function is called by:
 18364 ;;		_setControllerNumbers
 18365 ;;		_Function_C_2
 18366 ;;		_Function_C_3
 18367 ;;		_Function_D_2
 18368 ;;		_Function_E_1
 18369 ;;		_Function_E_2
 18370 ;;		_Function_F
 18371 ;;		_Function_H_2
 18372 ;;		_Function_H_3
 18373 ;; This function uses a non-reentrant model
 18374 ;;
 18375                           
 18376                           	psect	text54
 18377  00697A                     __ptext54:
 18378                           	opt stack 0
 18379  00697A                     _int2string:
 18380                           	opt stack 21
 18381                           
 18382                           ;menu.c: 88: static __bit isNegative = 0;
 18383                           ;menu.c: 89: signed int number_to_display_temp = 0;
 18384                           
 18385                           ;incstack = 0
 18386  00697A  0E00               	movlw	0
 18387  00697C  0100               	movlb	0	; () banked
 18388  00697E  6F79               	movwf	(int2string@number_to_display_temp+1)& (0+255),b
 18389  006980  0E00               	movlw	0
 18390  006982  6F78               	movwf	int2string@number_to_display_temp& (0+255),b
 18391                           
 18392                           ; BSR set to: 0
 18393                           ;menu.c: 91: if(number < 0) {
 18394  006984  AF75               	btfss	(int2string@number+1)& (0+255),7,b
 18395  006986  D00E               	goto	l3329
 18396                           
 18397                           ; BSR set to: 0
 18398                           ;menu.c: 92: isNegative = 1;
 18399  006988  8232               	bsf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18400                           
 18401                           ;menu.c: 93: number_to_display_temp = (0 - number);
 18402  00698A  C074  F076         	movff	int2string@number,??_int2string
 18403  00698E  C075  F077         	movff	int2string@number+1,??_int2string+1
 18404  006992  1F76               	comf	??_int2string& (0+255),f,b
 18405  006994  1F77               	comf	(??_int2string+1)& (0+255),f,b
 18406  006996  4B76               	infsnz	??_int2string& (0+255),f,b
 18407  006998  2B77               	incf	(??_int2string+1)& (0+255),f,b
 18408  00699A  C076  F078         	movff	??_int2string,int2string@number_to_display_temp
 18409  00699E  C077  F079         	movff	??_int2string+1,int2string@number_to_display_temp+1
 18410                           
 18411                           ;menu.c: 94: }
 18412  0069A2  D005               	goto	l3330
 18413  0069A4                     l3329:
 18414                           
 18415                           ; BSR set to: 0
 18416                           ;menu.c: 95: else {
 18417                           ;menu.c: 96: isNegative = 0;
 18418  0069A4  9232               	bcf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18419                           
 18420                           ;menu.c: 97: number_to_display_temp = number;
 18421  0069A6  C074  F078         	movff	int2string@number,int2string@number_to_display_temp
 18422  0069AA  C075  F079         	movff	int2string@number+1,int2string@number_to_display_temp+1
 18423  0069AE                     l3330:
 18424                           
 18425                           ; BSR set to: 0
 18426                           ;menu.c: 98: }
 18427                           ;menu.c: 101: if(isNegative) {
 18428  0069AE  A232               	btfss	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18429  0069B0  D002               	goto	l3331
 18430                           
 18431                           ; BSR set to: 0
 18432                           ;menu.c: 102: string2display[0] = '-';
 18433  0069B2  0E2D               	movlw	45
 18434  0069B4  D001               	goto	L4
 18435  0069B6                     l3331:
 18436                           
 18437                           ;menu.c: 104: else{string2display[0] = ' ';}
 18438                           
 18439                           ; BSR set to: 1
 18440  0069B6  0E20               	movlw	32
 18441  0069B8                     L4:
 18442  0069B8  0101               	movlb	1	; () banked
 18443  0069BA  6F82               	movwf	_string2display& (0+255),b
 18444                           
 18445                           ; BSR set to: 1
 18446                           ;menu.c: 107: string2display[1] = 48 + ((number_to_display_temp / 100) % 10);
 18447                           
 18448                           ; BSR set to: 1
 18449  0069BC  0E00               	movlw	0
 18450  0069BE  0100               	movlb	0	; () banked
 18451  0069C0  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18452  0069C2  0E64               	movlw	100
 18453  0069C4  6F62               	movwf	___awdiv@divisor& (0+255),b
 18454  0069C6  C078  F060         	movff	int2string@number_to_display_temp,___awdiv@dividend
 18455  0069CA  C079  F061         	movff	int2string@number_to_display_temp+1,___awdiv@dividend+1
 18456  0069CE  EC79  F03C         	call	___awdiv	;wreg free
 18457  0069D2  C060  F06E         	movff	?___awdiv,___awmod@dividend
 18458  0069D6  C061  F06F         	movff	?___awdiv+1,___awmod@dividend+1
 18459  0069DA  0E00               	movlw	0
 18460  0069DC  0100               	movlb	0	; () banked
 18461  0069DE  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 18462  0069E0  0E0A               	movlw	10
 18463  0069E2  6F70               	movwf	___awmod@divisor& (0+255),b
 18464  0069E4  EC5F  F042         	call	___awmod	;wreg free
 18465  0069E8  0100               	movlb	0	; () banked
 18466  0069EA  516E               	movf	?___awmod& (0+255),w,b
 18467  0069EC  0F30               	addlw	48
 18468  0069EE  0101               	movlb	1	; () banked
 18469  0069F0  6F83               	movwf	(_string2display+1)& (0+255),b
 18470                           
 18471                           ; BSR set to: 1
 18472                           ;menu.c: 108: string2display[2] = 48 + ((number_to_display_temp / 10) % 10);
 18473  0069F2  0E00               	movlw	0
 18474  0069F4  0100               	movlb	0	; () banked
 18475  0069F6  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18476  0069F8  0E0A               	movlw	10
 18477  0069FA  6F62               	movwf	___awdiv@divisor& (0+255),b
 18478  0069FC  C078  F060         	movff	int2string@number_to_display_temp,___awdiv@dividend
 18479  006A00  C079  F061         	movff	int2string@number_to_display_temp+1,___awdiv@dividend+1
 18480  006A04  EC79  F03C         	call	___awdiv	;wreg free
 18481  006A08  C060  F06E         	movff	?___awdiv,___awmod@dividend
 18482  006A0C  C061  F06F         	movff	?___awdiv+1,___awmod@dividend+1
 18483  006A10  0E00               	movlw	0
 18484  006A12  0100               	movlb	0	; () banked
 18485  006A14  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 18486  006A16  0E0A               	movlw	10
 18487  006A18  6F70               	movwf	___awmod@divisor& (0+255),b
 18488  006A1A  EC5F  F042         	call	___awmod	;wreg free
 18489  006A1E  0100               	movlb	0	; () banked
 18490  006A20  516E               	movf	?___awmod& (0+255),w,b
 18491  006A22  0F30               	addlw	48
 18492  006A24  0101               	movlb	1	; () banked
 18493  006A26  6F84               	movwf	(_string2display+2)& (0+255),b
 18494                           
 18495                           ; BSR set to: 1
 18496                           ;menu.c: 109: string2display[3] = 48 + (number_to_display_temp % 10);
 18497  006A28  C078  F06E         	movff	int2string@number_to_display_temp,___awmod@dividend
 18498  006A2C  C079  F06F         	movff	int2string@number_to_display_temp+1,___awmod@dividend+1
 18499  006A30  0E00               	movlw	0
 18500  006A32  0100               	movlb	0	; () banked
 18501  006A34  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 18502  006A36  0E0A               	movlw	10
 18503  006A38  6F70               	movwf	___awmod@divisor& (0+255),b
 18504  006A3A  EC5F  F042         	call	___awmod	;wreg free
 18505  006A3E  0100               	movlb	0	; () banked
 18506  006A40  516E               	movf	?___awmod& (0+255),w,b
 18507  006A42  0F30               	addlw	48
 18508  006A44  0101               	movlb	1	; () banked
 18509  006A46  6F85               	movwf	(_string2display+3)& (0+255),b
 18510                           
 18511                           ; BSR set to: 1
 18512                           ;menu.c: 110: string2display[4] = '\0';
 18513  006A48  0E00               	movlw	0
 18514  006A4A  6F86               	movwf	(_string2display+4)& (0+255),b
 18515                           
 18516                           ; BSR set to: 1
 18517  006A4C  0012               	return		;funcret
 18518  006A4E                     __end_of_int2string:
 18519                           	opt stack 0
 18520                           tblptru	equ	0xFF8
 18521                           tblptrh	equ	0xFF7
 18522                           tblptrl	equ	0xFF6
 18523                           tablat	equ	0xFF5
 18524                           prodh	equ	0xFF4
 18525                           prodl	equ	0xFF3
 18526                           intcon	equ	0xFF2
 18527                           intcon2	equ	0xFF1
 18528                           postinc0	equ	0xFEE
 18529                           wreg	equ	0xFE8
 18530                           postdec1	equ	0xFE5
 18531                           fsr1l	equ	0xFE1
 18532                           indf2	equ	0xFDF
 18533                           postinc2	equ	0xFDE
 18534                           plusw2	equ	0xFDB
 18535                           fsr2h	equ	0xFDA
 18536                           fsr2l	equ	0xFD9
 18537                           status	equ	0xFD8
 18538                           
 18539 ;; *************** function ___awdiv *****************
 18540 ;; Defined at:
 18541 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 18542 ;; Parameters:    Size  Location     Type
 18543 ;;  dividend        2    0[BANK0 ] int 
 18544 ;;  divisor         2    2[BANK0 ] int 
 18545 ;; Auto vars:     Size  Location     Type
 18546 ;;  quotient        2    6[BANK0 ] int 
 18547 ;;  sign            1    5[BANK0 ] unsigned char 
 18548 ;;  counter         1    4[BANK0 ] unsigned char 
 18549 ;; Return value:  Size  Location     Type
 18550 ;;                  2    0[BANK0 ] int 
 18551 ;; Registers used:
 18552 ;;		wreg, status,2, status,0
 18553 ;; Tracked objects:
 18554 ;;		On entry : 0/0
 18555 ;;		On exit  : 0/0
 18556 ;;		Unchanged: 0/0
 18557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18558 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18559 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18561 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18562 ;;Total ram usage:        8 bytes
 18563 ;; Hardware stack levels used:    1
 18564 ;; Hardware stack levels required when called:    5
 18565 ;; This function calls:
 18566 ;;		Nothing
 18567 ;; This function is called by:
 18568 ;;		_int2string
 18569 ;; This function uses a non-reentrant model
 18570 ;;
 18571                           
 18572                           	psect	text55
 18573  0078F2                     __ptext55:
 18574                           	opt stack 0
 18575  0078F2                     ___awdiv:
 18576                           	opt stack 21
 18577                           
 18578                           ; BSR set to: 1
 18579                           ;incstack = 0
 18580  0078F2  0E00               	movlw	0
 18581  0078F4  0100               	movlb	0	; () banked
 18582  0078F6  6F65               	movwf	___awdiv@sign& (0+255),b
 18583                           
 18584                           ; BSR set to: 0
 18585  0078F8  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 18586  0078FA  D006               	goto	l5587
 18587                           
 18588                           ; BSR set to: 0
 18589  0078FC  6D62               	negf	___awdiv@divisor& (0+255),b
 18590  0078FE  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 18591  007900  B0D8               	btfsc	status,0,c
 18592  007902  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 18593                           
 18594                           ; BSR set to: 0
 18595  007904  0E01               	movlw	1
 18596  007906  6F65               	movwf	___awdiv@sign& (0+255),b
 18597  007908                     l5587:
 18598                           
 18599                           ; BSR set to: 0
 18600                           
 18601                           ; BSR set to: 0
 18602  007908  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 18603  00790A  D006               	goto	l5588
 18604                           
 18605                           ; BSR set to: 0
 18606  00790C  6D60               	negf	___awdiv@dividend& (0+255),b
 18607  00790E  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 18608  007910  B0D8               	btfsc	status,0,c
 18609  007912  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 18610                           
 18611                           ; BSR set to: 0
 18612  007914  0E01               	movlw	1
 18613  007916  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 18614  007918                     l5588:
 18615                           
 18616                           ; BSR set to: 0
 18617                           
 18618                           ; BSR set to: 0
 18619  007918  0E00               	movlw	0
 18620  00791A  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 18621  00791C  0E00               	movlw	0
 18622  00791E  6F66               	movwf	___awdiv@quotient& (0+255),b
 18623                           
 18624                           ; BSR set to: 0
 18625  007920  5162               	movf	___awdiv@divisor& (0+255),w,b
 18626  007922  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 18627  007924  B4D8               	btfsc	status,2,c
 18628  007926  D01C               	goto	l5595
 18629                           
 18630                           ; BSR set to: 0
 18631  007928  0E01               	movlw	1
 18632  00792A  6F64               	movwf	___awdiv@counter& (0+255),b
 18633  00792C  D004               	goto	l5590
 18634  00792E                     
 18635                           ; BSR set to: 0
 18636                           
 18637                           ; BSR set to: 0
 18638  00792E  90D8               	bcf	status,0,c
 18639  007930  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 18640  007932  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 18641  007934  2B64               	incf	___awdiv@counter& (0+255),f,b
 18642  007936                     l5590:
 18643                           
 18644                           ; BSR set to: 0
 18645                           
 18646                           ; BSR set to: 0
 18647  007936  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 18648  007938  D7FA               	goto	l5591
 18649  00793A                     u25540:
 18650                           
 18651                           ; BSR set to: 0
 18652                           
 18653                           ; BSR set to: 0
 18654                           
 18655                           ; BSR set to: 0
 18656  00793A  90D8               	bcf	status,0,c
 18657  00793C  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 18658  00793E  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 18659                           
 18660                           ; BSR set to: 0
 18661  007940  5162               	movf	___awdiv@divisor& (0+255),w,b
 18662  007942  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 18663  007944  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 18664  007946  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 18665  007948  A0D8               	btfss	status,0,c
 18666  00794A  D005               	goto	l5594
 18667                           
 18668                           ; BSR set to: 0
 18669  00794C  5162               	movf	___awdiv@divisor& (0+255),w,b
 18670  00794E  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 18671  007950  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 18672  007952  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 18673                           
 18674                           ; BSR set to: 0
 18675  007954  8166               	bsf	___awdiv@quotient& (0+255),0,b
 18676  007956                     l5594:
 18677                           
 18678                           ; BSR set to: 0
 18679                           
 18680                           ; BSR set to: 0
 18681  007956  90D8               	bcf	status,0,c
 18682  007958  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 18683  00795A  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 18684                           
 18685                           ; BSR set to: 0
 18686  00795C  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 18687  00795E  D7ED               	goto	u25540
 18688  007960                     l5595:
 18689                           
 18690                           ; BSR set to: 0
 18691                           
 18692                           ; BSR set to: 0
 18693                           
 18694                           ; BSR set to: 0
 18695  007960  5165               	movf	___awdiv@sign& (0+255),w,b
 18696  007962  B4D8               	btfsc	status,2,c
 18697  007964  D004               	goto	l5596
 18698                           
 18699                           ; BSR set to: 0
 18700  007966  6D66               	negf	___awdiv@quotient& (0+255),b
 18701  007968  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 18702  00796A  B0D8               	btfsc	status,0,c
 18703  00796C  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 18704  00796E                     l5596:
 18705                           
 18706                           ; BSR set to: 0
 18707                           
 18708                           ; BSR set to: 0
 18709  00796E  C066  F060         	movff	___awdiv@quotient,?___awdiv
 18710  007972  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 18711  007976  0012               	return	
 18712  007978                     __end_of___awdiv:
 18713                           	opt stack 0
 18714                           tblptru	equ	0xFF8
 18715                           tblptrh	equ	0xFF7
 18716                           tblptrl	equ	0xFF6
 18717                           tablat	equ	0xFF5
 18718                           prodh	equ	0xFF4
 18719                           prodl	equ	0xFF3
 18720                           intcon	equ	0xFF2
 18721                           intcon2	equ	0xFF1
 18722                           postinc0	equ	0xFEE
 18723                           wreg	equ	0xFE8
 18724                           postdec1	equ	0xFE5
 18725                           fsr1l	equ	0xFE1
 18726                           indf2	equ	0xFDF
 18727                           postinc2	equ	0xFDE
 18728                           plusw2	equ	0xFDB
 18729                           fsr2h	equ	0xFDA
 18730                           fsr2l	equ	0xFD9
 18731                           status	equ	0xFD8
 18732                           
 18733 ;; *************** function _Function_C_1 *****************
 18734 ;; Defined at:
 18735 ;;		line 479 in file "menu.c"
 18736 ;; Parameters:    Size  Location     Type
 18737 ;;		None
 18738 ;; Auto vars:     Size  Location     Type
 18739 ;;		None
 18740 ;; Return value:  Size  Location     Type
 18741 ;;                  1    wreg      void 
 18742 ;; Registers used:
 18743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18744 ;; Tracked objects:
 18745 ;;		On entry : 0/0
 18746 ;;		On exit  : 0/0
 18747 ;;		Unchanged: 0/0
 18748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18752 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18753 ;;Total ram usage:        1 bytes
 18754 ;; Hardware stack levels used:    1
 18755 ;; Hardware stack levels required when called:    9
 18756 ;; This function calls:
 18757 ;;		_Lcd_Print_String
 18758 ;;		___lbmod
 18759 ;;		___wmul
 18760 ;;		_clear_row1
 18761 ;;		_clear_row2
 18762 ;;		_processEncoderBuxton
 18763 ;; This function is called by:
 18764 ;;		_Function_C
 18765 ;; This function uses a non-reentrant model
 18766 ;;
 18767                           
 18768                           	psect	text56
 18769  0076C2                     __ptext56:
 18770                           	opt stack 0
 18771  0076C2                     _Function_C_1:
 18772                           	opt stack 19
 18773                           
 18774                           ;menu.c: 481: which_screen = DRUMS_CC_TYPE_MENU;
 18775                           
 18776                           ; BSR set to: 0
 18777                           ;incstack = 0
 18778  0076C2  0E0C               	movlw	12
 18779  0076C4  0100               	movlb	0	; () banked
 18780  0076C6  6FF9               	movwf	_which_screen& (0+255),b
 18781                           
 18782                           ; BSR set to: 0
 18783                           ;menu.c: 482: lcd_print_once = 0;
 18784  0076C8  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18785                           
 18786                           ; BSR set to: 0
 18787                           ;menu.c: 483: encoder_click = 0;
 18788  0076CA  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18789                           
 18790                           ;menu.c: 485: drumCCTypeMenu.selector = CONTROL_MODE;
 18791  0076CC  0E00               	movlw	0
 18792  0076CE  B632               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18793  0076D0  0E01               	movlw	1
 18794  0076D2  0101               	movlb	1	; () banked
 18795  0076D4  6F61               	movwf	(_drumCCTypeMenu+2)& (0+255),b
 18796                           
 18797                           ;menu.c: 487: while(encoder_click == 0) {
 18798  0076D6  D02E               	goto	l3452
 18799  0076D8                     
 18800                           ;menu.c: 488: processEncoderBuxton();
 18801                           
 18802                           ; BSR set to: 1
 18803  0076D8  EC09  F000         	call	_processEncoderBuxton	;wreg free
 18804                           
 18805                           ;menu.c: 489: if (lcd_print_once == 0) {
 18806  0076DC  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18807  0076DE  D029               	goto	l3454
 18808                           
 18809                           ;menu.c: 490: clear_row1();
 18810  0076E0  EC1E  F04A         	call	_clear_row1	;wreg free
 18811                           
 18812                           ;menu.c: 491: Lcd_Print_String("Drum CC Mode:");
 18813  0076E4  0EE0               	movlw	low STR_27
 18814  0076E6  0100               	movlb	0	; () banked
 18815  0076E8  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18816  0076EA  0EFE               	movlw	high STR_27
 18817  0076EC  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18818  0076EE  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 18819                           
 18820                           ;menu.c: 492: clear_row2();
 18821  0076F2  EC0A  F04A         	call	_clear_row2	;wreg free
 18822                           
 18823                           ;menu.c: 493: Lcd_Print_String(LCD_STRINGS[(drumCCTypeMenu.selector % drumCCTypeMenu.num
      +                          ber) + drumCCTypeMenu.address]);
 18824  0076F6  C15F  F060         	movff	_drumCCTypeMenu,___lbmod@divisor
 18825  0076FA  0101               	movlb	1	; () banked
 18826  0076FC  5161               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18827  0076FE  EC89  F049         	call	___lbmod
 18828  007702  0100               	movlb	0	; () banked
 18829  007704  6F70               	movwf	??_Function_C_1& (0+255),b
 18830  007706  5170               	movf	??_Function_C_1& (0+255),w,b
 18831  007708  0101               	movlb	1	; () banked
 18832  00770A  2560               	addwf	(_drumCCTypeMenu+1)& (0+255),w,b
 18833  00770C  0100               	movlb	0	; () banked
 18834  00770E  6F64               	movwf	___wmul@multiplier& (0+255),b
 18835  007710  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 18836  007712  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18837  007714  0E00               	movlw	0
 18838  007716  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18839  007718  0E11               	movlw	17
 18840  00771A  6F66               	movwf	___wmul@multiplicand& (0+255),b
 18841  00771C  EC32  F04A         	call	___wmul	;wreg free
 18842  007720  0E9E               	movlw	low _LCD_STRINGS
 18843  007722  0100               	movlb	0	; () banked
 18844  007724  2564               	addwf	?___wmul& (0+255),w,b
 18845  007726  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18846  007728  0EF3               	movlw	high _LCD_STRINGS
 18847  00772A  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 18848  00772C  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18849  00772E  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 18850  007732                     l3454:
 18851                           
 18852                           ;menu.c: 494: }
 18853                           ;menu.c: 495: lcd_print_once = 1;
 18854  007732  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18855  007734                     l3452:
 18856  007734  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 18857  007736  D7D0               	goto	l3453
 18858                           
 18859                           ;menu.c: 496: }
 18860                           ;menu.c: 498: CONTROL_MODE = drumCCTypeMenu.selector % drumCCTypeMenu.number;
 18861  007738  C15F  F060         	movff	_drumCCTypeMenu,___lbmod@divisor
 18862  00773C  0101               	movlb	1	; () banked
 18863  00773E  5161               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18864  007740  EC89  F049         	call	___lbmod
 18865  007744  0100               	movlb	0	; () banked
 18866  007746  6F70               	movwf	??_Function_C_1& (0+255),b
 18867  007748  3170               	rrcf	??_Function_C_1& (0+255),w,b
 18868  00774A  A0D8               	btfss	status,0,c
 18869  00774C  D002               	goto	u32880
 18870  00774E  8632               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18871  007750  0012               	return	
 18872  007752                     u32880:
 18873  007752  9632               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18874  007754  0012               	return		;funcret
 18875  007756                     __end_of_Function_C_1:
 18876                           	opt stack 0
 18877                           tblptru	equ	0xFF8
 18878                           tblptrh	equ	0xFF7
 18879                           tblptrl	equ	0xFF6
 18880                           tablat	equ	0xFF5
 18881                           prodh	equ	0xFF4
 18882                           prodl	equ	0xFF3
 18883                           intcon	equ	0xFF2
 18884                           intcon2	equ	0xFF1
 18885                           postinc0	equ	0xFEE
 18886                           wreg	equ	0xFE8
 18887                           postdec1	equ	0xFE5
 18888                           fsr1l	equ	0xFE1
 18889                           indf2	equ	0xFDF
 18890                           postinc2	equ	0xFDE
 18891                           plusw2	equ	0xFDB
 18892                           fsr2h	equ	0xFDA
 18893                           fsr2l	equ	0xFD9
 18894                           status	equ	0xFD8
 18895                           
 18896 ;; *************** function _Function_B *****************
 18897 ;; Defined at:
 18898 ;;		line 460 in file "menu.c"
 18899 ;; Parameters:    Size  Location     Type
 18900 ;;		None
 18901 ;; Auto vars:     Size  Location     Type
 18902 ;;		None
 18903 ;; Return value:  Size  Location     Type
 18904 ;;                  1    wreg      void 
 18905 ;; Registers used:
 18906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18907 ;; Tracked objects:
 18908 ;;		On entry : 0/0
 18909 ;;		On exit  : 0/0
 18910 ;;		Unchanged: 0/0
 18911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18915 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18916 ;;Total ram usage:        1 bytes
 18917 ;; Hardware stack levels used:    1
 18918 ;; Hardware stack levels required when called:    9
 18919 ;; This function calls:
 18920 ;;		_Lcd_Print_String
 18921 ;;		___lbmod
 18922 ;;		___wmul
 18923 ;;		_clear_row2
 18924 ;;		_processEncoderBuxton
 18925 ;; This function is called by:
 18926 ;;		_menu_lcd
 18927 ;; This function uses a non-reentrant model
 18928 ;;
 18929                           
 18930                           	psect	text57
 18931  007C8E                     __ptext57:
 18932                           	opt stack 0
 18933  007C8E                     _Function_B:
 18934                           	opt stack 20
 18935                           
 18936                           ;menu.c: 462: which_screen = TRANSPOSE_MENU;
 18937                           
 18938                           ;incstack = 0
 18939  007C8E  0E04               	movlw	4
 18940  007C90  0100               	movlb	0	; () banked
 18941  007C92  6FF9               	movwf	_which_screen& (0+255),b
 18942                           
 18943                           ; BSR set to: 0
 18944                           ;menu.c: 463: lcd_print_once = 0;
 18945  007C94  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18946                           
 18947                           ;menu.c: 465: transposeMenu.selector = TRANSPOSE_MODE;
 18948  007C96  0E00               	movlw	0
 18949  007C98  BA35               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18950  007C9A  0E01               	movlw	1
 18951  007C9C  0101               	movlb	1	; () banked
 18952  007C9E  6F64               	movwf	(_transposeMenu+2)& (0+255),b
 18953                           
 18954                           ;menu.c: 467: while(encoder_click == 0) {
 18955  007CA0  D033               	goto	l3445
 18956  007CA2                     
 18957                           ;menu.c: 468: processEncoderBuxton();
 18958                           
 18959                           ; BSR set to: 1
 18960  007CA2  EC09  F000         	call	_processEncoderBuxton	;wreg free
 18961                           
 18962                           ;menu.c: 469: if (lcd_print_once == 0) {
 18963  007CA6  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18964  007CA8  D02E               	goto	u37175
 18965                           
 18966                           ;menu.c: 470: clear_row2();
 18967  007CAA  EC0A  F04A         	call	_clear_row2	;wreg free
 18968                           
 18969                           ;menu.c: 471: Lcd_Print_String(LCD_STRINGS[(transposeMenu.selector % transposeMenu.numbe
      +                          r) + transposeMenu.address]);
 18970  007CAE  C162  F060         	movff	_transposeMenu,___lbmod@divisor
 18971  007CB2  0101               	movlb	1	; () banked
 18972  007CB4  5164               	movf	(_transposeMenu+2)& (0+255),w,b
 18973  007CB6  EC89  F049         	call	___lbmod
 18974  007CBA  0100               	movlb	0	; () banked
 18975  007CBC  6F70               	movwf	??_Function_B& (0+255),b
 18976  007CBE  5170               	movf	??_Function_B& (0+255),w,b
 18977  007CC0  0101               	movlb	1	; () banked
 18978  007CC2  2563               	addwf	(_transposeMenu+1)& (0+255),w,b
 18979  007CC4  0100               	movlb	0	; () banked
 18980  007CC6  6F64               	movwf	___wmul@multiplier& (0+255),b
 18981  007CC8  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 18982  007CCA  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18983  007CCC  0E00               	movlw	0
 18984  007CCE  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18985  007CD0  0E11               	movlw	17
 18986  007CD2  6F66               	movwf	___wmul@multiplicand& (0+255),b
 18987  007CD4  EC32  F04A         	call	___wmul	;wreg free
 18988  007CD8  0E9E               	movlw	low _LCD_STRINGS
 18989  007CDA  0100               	movlb	0	; () banked
 18990  007CDC  2564               	addwf	?___wmul& (0+255),w,b
 18991  007CDE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 18992  007CE0  0EF3               	movlw	high _LCD_STRINGS
 18993  007CE2  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 18994  007CE4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18995  007CE6  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 18996                           
 18997                           ;menu.c: 472: TRANSPOSE_MODE = transposeMenu.selector % transposeMenu.number;
 18998  007CEA  C162  F060         	movff	_transposeMenu,___lbmod@divisor
 18999  007CEE  0101               	movlb	1	; () banked
 19000  007CF0  5164               	movf	(_transposeMenu+2)& (0+255),w,b
 19001  007CF2  EC89  F049         	call	___lbmod
 19002  007CF6  0100               	movlb	0	; () banked
 19003  007CF8  6F70               	movwf	??_Function_B& (0+255),b
 19004  007CFA  3170               	rrcf	??_Function_B& (0+255),w,b
 19005  007CFC  A0D8               	btfss	status,0,c
 19006  007CFE  D002               	goto	u37160
 19007  007D00  8A35               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 19008  007D02  D001               	goto	u37175
 19009  007D04                     u37160:
 19010  007D04  9A35               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 19011  007D06                     u37175:
 19012                           
 19013                           ;menu.c: 473: }
 19014                           ;menu.c: 474: lcd_print_once = 1;
 19015  007D06  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19016  007D08                     l3445:
 19017  007D08  BE35               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19018  007D0A  0012               	return	
 19019  007D0C  D7CA               	goto	l3446
 19020  007D0E                     __end_of_Function_B:
 19021                           	opt stack 0
 19022                           tblptru	equ	0xFF8
 19023                           tblptrh	equ	0xFF7
 19024                           tblptrl	equ	0xFF6
 19025                           tablat	equ	0xFF5
 19026                           prodh	equ	0xFF4
 19027                           prodl	equ	0xFF3
 19028                           intcon	equ	0xFF2
 19029                           intcon2	equ	0xFF1
 19030                           postinc0	equ	0xFEE
 19031                           wreg	equ	0xFE8
 19032                           postdec1	equ	0xFE5
 19033                           fsr1l	equ	0xFE1
 19034                           indf2	equ	0xFDF
 19035                           postinc2	equ	0xFDE
 19036                           plusw2	equ	0xFDB
 19037                           fsr2h	equ	0xFDA
 19038                           fsr2l	equ	0xFD9
 19039                           status	equ	0xFD8
 19040                           
 19041 ;; *************** function _Function_A *****************
 19042 ;; Defined at:
 19043 ;;		line 422 in file "menu.c"
 19044 ;; Parameters:    Size  Location     Type
 19045 ;;		None
 19046 ;; Auto vars:     Size  Location     Type
 19047 ;;		None
 19048 ;; Return value:  Size  Location     Type
 19049 ;;                  1    wreg      void 
 19050 ;; Registers used:
 19051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19052 ;; Tracked objects:
 19053 ;;		On entry : 0/0
 19054 ;;		On exit  : 0/0
 19055 ;;		Unchanged: 0/0
 19056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19059 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19060 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19061 ;;Total ram usage:        1 bytes
 19062 ;; Hardware stack levels used:    1
 19063 ;; Hardware stack levels required when called:   10
 19064 ;; This function calls:
 19065 ;;		_Function_A_1
 19066 ;;		_Function_A_2
 19067 ;;		_Function_A_3
 19068 ;;		_Lcd_Print_String
 19069 ;;		___lbmod
 19070 ;;		___wmul
 19071 ;;		_clear_row2
 19072 ;;		_processEncoderBuxton
 19073 ;; This function is called by:
 19074 ;;		_menu_lcd
 19075 ;; This function uses a non-reentrant model
 19076 ;;
 19077                           
 19078                           	psect	text58
 19079  007E8A                     __ptext58:
 19080                           	opt stack 0
 19081  007E8A                     _Function_A:
 19082                           	opt stack 19
 19083                           
 19084                           ;menu.c: 425: which_screen = KEYBOARD_MENU;
 19085                           
 19086                           ;incstack = 0
 19087  007E8A  0E03               	movlw	3
 19088  007E8C  0100               	movlb	0	; () banked
 19089  007E8E  6FF9               	movwf	_which_screen& (0+255),b
 19090                           
 19091                           ; BSR set to: 0
 19092                           ;menu.c: 426: lcd_print_once = 0;
 19093  007E90  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19094                           
 19095                           ; BSR set to: 0
 19096                           ;menu.c: 428: keyboardMenu.selector = KEYBOARD_MODE;
 19097  007E92  C0F2  F04C         	movff	_KEYBOARD_MODE,_keyboardMenu+2
 19098                           
 19099                           ;menu.c: 430: while(encoder_click == 0) {
 19100  007E96  D024               	goto	l3435
 19101  007E98                     
 19102                           ;menu.c: 431: processEncoderBuxton();
 19103                           
 19104                           ; BSR set to: 0
 19105  007E98  EC09  F000         	call	_processEncoderBuxton	;wreg free
 19106                           
 19107                           ;menu.c: 432: if (lcd_print_once == 0) {
 19108  007E9C  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19109  007E9E  D01F               	goto	l3437
 19110                           
 19111                           ;menu.c: 433: clear_row2();
 19112  007EA0  EC0A  F04A         	call	_clear_row2	;wreg free
 19113                           
 19114                           ;menu.c: 434: Lcd_Print_String(LCD_STRINGS[(keyboardMenu.selector % keyboardMenu.number)
      +                           + keyboardMenu.address]);
 19115  007EA4  C04A  F060         	movff	_keyboardMenu,___lbmod@divisor
 19116  007EA8  504C               	movf	_keyboardMenu+2,w,c
 19117  007EAA  EC89  F049         	call	___lbmod
 19118  007EAE  0100               	movlb	0	; () banked
 19119  007EB0  6F71               	movwf	??_Function_A& (0+255),b
 19120  007EB2  5171               	movf	??_Function_A& (0+255),w,b
 19121  007EB4  244B               	addwf	_keyboardMenu+1,w,c
 19122  007EB6  6F64               	movwf	___wmul@multiplier& (0+255),b
 19123  007EB8  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 19124  007EBA  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19125  007EBC  0E00               	movlw	0
 19126  007EBE  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19127  007EC0  0E11               	movlw	17
 19128  007EC2  6F66               	movwf	___wmul@multiplicand& (0+255),b
 19129  007EC4  EC32  F04A         	call	___wmul	;wreg free
 19130  007EC8  0E9E               	movlw	low _LCD_STRINGS
 19131  007ECA  0100               	movlb	0	; () banked
 19132  007ECC  2564               	addwf	?___wmul& (0+255),w,b
 19133  007ECE  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19134  007ED0  0EF3               	movlw	high _LCD_STRINGS
 19135  007ED2  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 19136  007ED4  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19137  007ED6  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 19138                           
 19139                           ;menu.c: 435: KEYBOARD_MODE = keyboardMenu.selector;
 19140  007EDA  C04C  F0F2         	movff	_keyboardMenu+2,_KEYBOARD_MODE
 19141  007EDE                     l3437:
 19142                           
 19143                           ;menu.c: 436: }
 19144                           ;menu.c: 437: lcd_print_once = 1;
 19145  007EDE  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19146  007EE0                     l3435:
 19147  007EE0  AE35               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 19148  007EE2  D7DA               	goto	l3436
 19149                           
 19150                           ;menu.c: 438: }
 19151                           ;menu.c: 440: lcd_print_once = 0;
 19152  007EE4  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19153                           
 19154                           ;menu.c: 443: if(keyboardMenu.selector == MODES) {
 19155  007EE6  0E03               	movlw	3
 19156  007EE8  184C               	xorwf	_keyboardMenu+2,w,c
 19157  007EEA  B4D8               	btfsc	status,2,c
 19158                           
 19159                           ;menu.c: 444: Function_A_1();
 19160  007EEC  EC40  F040         	call	_Function_A_1	;wreg free
 19161                           
 19162                           ;menu.c: 445: }
 19163                           ;menu.c: 448: if(keyboardMenu.selector == TRIAD) {
 19164  007EF0  0E06               	movlw	6
 19165  007EF2  184C               	xorwf	_keyboardMenu+2,w,c
 19166  007EF4  B4D8               	btfsc	status,2,c
 19167                           
 19168                           ;menu.c: 449: Function_A_2();
 19169  007EF6  EC02  F040         	call	_Function_A_2	;wreg free
 19170                           
 19171                           ;menu.c: 451: }
 19172                           ;menu.c: 453: if(keyboardMenu.selector == SEVENTH){
 19173  007EFA  0E09               	movlw	9
 19174  007EFC  184C               	xorwf	_keyboardMenu+2,w,c
 19175  007EFE  A4D8               	btfss	status,2,c
 19176  007F00  0012               	return	
 19177                           
 19178                           ;menu.c: 454: Function_A_3();
 19179  007F02  ECFE  F03C         	call	_Function_A_3	;wreg free
 19180  007F06  0012               	return	
 19181  007F08                     __end_of_Function_A:
 19182                           	opt stack 0
 19183                           tblptru	equ	0xFF8
 19184                           tblptrh	equ	0xFF7
 19185                           tblptrl	equ	0xFF6
 19186                           tablat	equ	0xFF5
 19187                           prodh	equ	0xFF4
 19188                           prodl	equ	0xFF3
 19189                           intcon	equ	0xFF2
 19190                           intcon2	equ	0xFF1
 19191                           postinc0	equ	0xFEE
 19192                           wreg	equ	0xFE8
 19193                           postdec1	equ	0xFE5
 19194                           fsr1l	equ	0xFE1
 19195                           indf2	equ	0xFDF
 19196                           postinc2	equ	0xFDE
 19197                           plusw2	equ	0xFDB
 19198                           fsr2h	equ	0xFDA
 19199                           fsr2l	equ	0xFD9
 19200                           status	equ	0xFD8
 19201                           
 19202 ;; *************** function _Function_A_3 *****************
 19203 ;; Defined at:
 19204 ;;		line 401 in file "menu.c"
 19205 ;; Parameters:    Size  Location     Type
 19206 ;;		None
 19207 ;; Auto vars:     Size  Location     Type
 19208 ;;		None
 19209 ;; Return value:  Size  Location     Type
 19210 ;;                  1    wreg      void 
 19211 ;; Registers used:
 19212 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19213 ;; Tracked objects:
 19214 ;;		On entry : 0/0
 19215 ;;		On exit  : 0/0
 19216 ;;		Unchanged: 0/0
 19217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19221 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19222 ;;Total ram usage:        1 bytes
 19223 ;; Hardware stack levels used:    1
 19224 ;; Hardware stack levels required when called:    9
 19225 ;; This function calls:
 19226 ;;		_Lcd_Print_String
 19227 ;;		___lbmod
 19228 ;;		___wmul
 19229 ;;		_clear_row1
 19230 ;;		_clear_row2
 19231 ;;		_processEncoderBuxton
 19232 ;; This function is called by:
 19233 ;;		_Function_A
 19234 ;; This function uses a non-reentrant model
 19235 ;;
 19236                           
 19237                           	psect	text59
 19238  0079FC                     __ptext59:
 19239                           	opt stack 0
 19240  0079FC                     _Function_A_3:
 19241                           	opt stack 19
 19242                           
 19243                           ;menu.c: 402: KEYBOARD_MODE = SEVENTH;
 19244                           
 19245                           ;incstack = 0
 19246  0079FC  0E09               	movlw	9
 19247  0079FE  0100               	movlb	0	; () banked
 19248  007A00  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19249                           
 19250                           ;menu.c: 403: which_screen = SEVENTHS_MENU;
 19251  007A02  0E0B               	movlw	11
 19252  007A04  6FF9               	movwf	_which_screen& (0+255),b
 19253                           
 19254                           ; BSR set to: 0
 19255                           ;menu.c: 404: encoder_click = 0;
 19256  007A06  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19257                           
 19258                           ; BSR set to: 0
 19259                           ;menu.c: 406: seventhMenu.selector = which_seventh;
 19260  007A08  C0EF  F167         	movff	_which_seventh,_seventhMenu+2
 19261                           
 19262                           ;menu.c: 408: while(encoder_click == 0) {
 19263  007A0C  D036               	goto	l3428
 19264  007A0E                     
 19265                           ; BSR set to: 0
 19266                           ;menu.c: 409: processEncoderBuxton();
 19267                           
 19268                           ; BSR set to: 0
 19269  007A0E  EC09  F000         	call	_processEncoderBuxton	;wreg free
 19270                           
 19271                           ;menu.c: 410: if (lcd_print_once == 0) {
 19272  007A12  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19273  007A14  D029               	goto	l3430
 19274                           
 19275                           ;menu.c: 411: clear_row1();
 19276  007A16  EC1E  F04A         	call	_clear_row1	;wreg free
 19277                           
 19278                           ;menu.c: 412: Lcd_Print_String("Select Seventh:");
 19279  007A1A  0E2D               	movlw	low STR_26
 19280  007A1C  0100               	movlb	0	; () banked
 19281  007A1E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19282  007A20  0EFE               	movlw	high STR_26
 19283  007A22  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19284  007A24  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 19285                           
 19286                           ;menu.c: 413: clear_row2();
 19287  007A28  EC0A  F04A         	call	_clear_row2	;wreg free
 19288                           
 19289                           ;menu.c: 414: Lcd_Print_String(LCD_STRINGS[(seventhMenu.selector % seventhMenu.number) +
      +                           seventhMenu.address]);
 19290  007A2C  C165  F060         	movff	_seventhMenu,___lbmod@divisor
 19291  007A30  0101               	movlb	1	; () banked
 19292  007A32  5167               	movf	(_seventhMenu+2)& (0+255),w,b
 19293  007A34  EC89  F049         	call	___lbmod
 19294  007A38  0100               	movlb	0	; () banked
 19295  007A3A  6F70               	movwf	??_Function_A_3& (0+255),b
 19296  007A3C  5170               	movf	??_Function_A_3& (0+255),w,b
 19297  007A3E  0101               	movlb	1	; () banked
 19298  007A40  2566               	addwf	(_seventhMenu+1)& (0+255),w,b
 19299  007A42  0100               	movlb	0	; () banked
 19300  007A44  6F64               	movwf	___wmul@multiplier& (0+255),b
 19301  007A46  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 19302  007A48  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19303  007A4A  0E00               	movlw	0
 19304  007A4C  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19305  007A4E  0E11               	movlw	17
 19306  007A50  6F66               	movwf	___wmul@multiplicand& (0+255),b
 19307  007A52  EC32  F04A         	call	___wmul	;wreg free
 19308  007A56  0E9E               	movlw	low _LCD_STRINGS
 19309  007A58  0100               	movlb	0	; () banked
 19310  007A5A  2564               	addwf	?___wmul& (0+255),w,b
 19311  007A5C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19312  007A5E  0EF3               	movlw	high _LCD_STRINGS
 19313  007A60  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 19314  007A62  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19315  007A64  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 19316  007A68                     l3430:
 19317                           
 19318                           ;menu.c: 415: }
 19319                           ;menu.c: 416: which_seventh = seventhMenu.selector % seventhMenu.number;
 19320  007A68  C165  F060         	movff	_seventhMenu,___lbmod@divisor
 19321  007A6C  0101               	movlb	1	; () banked
 19322  007A6E  5167               	movf	(_seventhMenu+2)& (0+255),w,b
 19323  007A70  EC89  F049         	call	___lbmod
 19324  007A74  0100               	movlb	0	; () banked
 19325  007A76  6FEF               	movwf	_which_seventh& (0+255),b
 19326                           
 19327                           ; BSR set to: 0
 19328                           ;menu.c: 417: lcd_print_once = 1;
 19329  007A78  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19330  007A7A                     l3428:
 19331                           
 19332                           ; BSR set to: 0
 19333                           
 19334                           ; BSR set to: 0
 19335  007A7A  BE35               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19336  007A7C  0012               	return	
 19337  007A7E  D7C7               	goto	l3429
 19338  007A80                     __end_of_Function_A_3:
 19339                           	opt stack 0
 19340                           tblptru	equ	0xFF8
 19341                           tblptrh	equ	0xFF7
 19342                           tblptrl	equ	0xFF6
 19343                           tablat	equ	0xFF5
 19344                           prodh	equ	0xFF4
 19345                           prodl	equ	0xFF3
 19346                           intcon	equ	0xFF2
 19347                           intcon2	equ	0xFF1
 19348                           postinc0	equ	0xFEE
 19349                           wreg	equ	0xFE8
 19350                           postdec1	equ	0xFE5
 19351                           fsr1l	equ	0xFE1
 19352                           indf2	equ	0xFDF
 19353                           postinc2	equ	0xFDE
 19354                           plusw2	equ	0xFDB
 19355                           fsr2h	equ	0xFDA
 19356                           fsr2l	equ	0xFD9
 19357                           status	equ	0xFD8
 19358                           
 19359 ;; *************** function _Function_A_2 *****************
 19360 ;; Defined at:
 19361 ;;		line 380 in file "menu.c"
 19362 ;; Parameters:    Size  Location     Type
 19363 ;;		None
 19364 ;; Auto vars:     Size  Location     Type
 19365 ;;		None
 19366 ;; Return value:  Size  Location     Type
 19367 ;;                  1    wreg      void 
 19368 ;; Registers used:
 19369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19370 ;; Tracked objects:
 19371 ;;		On entry : 0/0
 19372 ;;		On exit  : 0/0
 19373 ;;		Unchanged: 0/0
 19374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19377 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19378 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19379 ;;Total ram usage:        1 bytes
 19380 ;; Hardware stack levels used:    1
 19381 ;; Hardware stack levels required when called:    9
 19382 ;; This function calls:
 19383 ;;		_Lcd_Print_String
 19384 ;;		___lbmod
 19385 ;;		___wmul
 19386 ;;		_clear_row1
 19387 ;;		_clear_row2
 19388 ;;		_processEncoderBuxton
 19389 ;; This function is called by:
 19390 ;;		_Function_A
 19391 ;; This function uses a non-reentrant model
 19392 ;;
 19393                           
 19394                           	psect	text60
 19395  008004                     __ptext60:
 19396                           	opt stack 0
 19397  008004                     _Function_A_2:
 19398                           	opt stack 19
 19399                           
 19400                           ;menu.c: 381: KEYBOARD_MODE = TRIAD;
 19401                           
 19402                           ; BSR set to: 0
 19403                           ;incstack = 0
 19404  008004  0E06               	movlw	6
 19405  008006  0100               	movlb	0	; () banked
 19406  008008  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19407                           
 19408                           ;menu.c: 382: which_screen = TRIADS_MENU;
 19409  00800A  0E0A               	movlw	10
 19410  00800C  6FF9               	movwf	_which_screen& (0+255),b
 19411                           
 19412                           ; BSR set to: 0
 19413                           ;menu.c: 383: encoder_click = 0;
 19414  00800E  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19415                           
 19416                           ; BSR set to: 0
 19417                           ;menu.c: 385: triadMenu.selector = which_triad;
 19418  008010  C0F0  F046         	movff	_which_triad,_triadMenu+2
 19419                           
 19420                           ;menu.c: 387: while(encoder_click == 0) {
 19421  008014  D032               	goto	l3421
 19422  008016                     
 19423                           ; BSR set to: 0
 19424                           ;menu.c: 388: processEncoderBuxton();
 19425                           
 19426                           ; BSR set to: 0
 19427  008016  EC09  F000         	call	_processEncoderBuxton	;wreg free
 19428                           
 19429                           ;menu.c: 389: if (lcd_print_once == 0) {
 19430  00801A  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19431  00801C  D026               	goto	l3423
 19432                           
 19433                           ;menu.c: 390: clear_row1();
 19434  00801E  EC1E  F04A         	call	_clear_row1	;wreg free
 19435                           
 19436                           ;menu.c: 391: Lcd_Print_String("Select Triad:");
 19437  008022  0ED2               	movlw	low STR_25
 19438  008024  0100               	movlb	0	; () banked
 19439  008026  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19440  008028  0EFE               	movlw	high STR_25
 19441  00802A  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19442  00802C  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 19443                           
 19444                           ;menu.c: 392: clear_row2();
 19445  008030  EC0A  F04A         	call	_clear_row2	;wreg free
 19446                           
 19447                           ;menu.c: 393: Lcd_Print_String(LCD_STRINGS[(triadMenu.selector % triadMenu.number) + tri
      +                          adMenu.address]);
 19448  008034  C044  F060         	movff	_triadMenu,___lbmod@divisor
 19449  008038  5046               	movf	_triadMenu+2,w,c
 19450  00803A  EC89  F049         	call	___lbmod
 19451  00803E  0100               	movlb	0	; () banked
 19452  008040  6F70               	movwf	??_Function_A_2& (0+255),b
 19453  008042  5170               	movf	??_Function_A_2& (0+255),w,b
 19454  008044  2445               	addwf	_triadMenu+1,w,c
 19455  008046  6F64               	movwf	___wmul@multiplier& (0+255),b
 19456  008048  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 19457  00804A  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19458  00804C  0E00               	movlw	0
 19459  00804E  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19460  008050  0E11               	movlw	17
 19461  008052  6F66               	movwf	___wmul@multiplicand& (0+255),b
 19462  008054  EC32  F04A         	call	___wmul	;wreg free
 19463  008058  0E9E               	movlw	low _LCD_STRINGS
 19464  00805A  0100               	movlb	0	; () banked
 19465  00805C  2564               	addwf	?___wmul& (0+255),w,b
 19466  00805E  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19467  008060  0EF3               	movlw	high _LCD_STRINGS
 19468  008062  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 19469  008064  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19470  008066  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 19471  00806A                     l3423:
 19472                           
 19473                           ;menu.c: 394: }
 19474                           ;menu.c: 395: which_triad = triadMenu.selector % triadMenu.number;
 19475  00806A  C044  F060         	movff	_triadMenu,___lbmod@divisor
 19476  00806E  5046               	movf	_triadMenu+2,w,c
 19477  008070  EC89  F049         	call	___lbmod
 19478  008074  0100               	movlb	0	; () banked
 19479  008076  6FF0               	movwf	_which_triad& (0+255),b
 19480                           
 19481                           ; BSR set to: 0
 19482                           ;menu.c: 396: lcd_print_once = 1;
 19483  008078  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19484  00807A                     l3421:
 19485                           
 19486                           ; BSR set to: 0
 19487                           
 19488                           ; BSR set to: 0
 19489  00807A  BE35               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19490  00807C  0012               	return	
 19491  00807E  D7CB               	goto	l3422
 19492  008080                     __end_of_Function_A_2:
 19493                           	opt stack 0
 19494                           tblptru	equ	0xFF8
 19495                           tblptrh	equ	0xFF7
 19496                           tblptrl	equ	0xFF6
 19497                           tablat	equ	0xFF5
 19498                           prodh	equ	0xFF4
 19499                           prodl	equ	0xFF3
 19500                           intcon	equ	0xFF2
 19501                           intcon2	equ	0xFF1
 19502                           postinc0	equ	0xFEE
 19503                           wreg	equ	0xFE8
 19504                           postdec1	equ	0xFE5
 19505                           fsr1l	equ	0xFE1
 19506                           indf2	equ	0xFDF
 19507                           postinc2	equ	0xFDE
 19508                           plusw2	equ	0xFDB
 19509                           fsr2h	equ	0xFDA
 19510                           fsr2l	equ	0xFD9
 19511                           status	equ	0xFD8
 19512                           
 19513 ;; *************** function _Function_A_1 *****************
 19514 ;; Defined at:
 19515 ;;		line 358 in file "menu.c"
 19516 ;; Parameters:    Size  Location     Type
 19517 ;;		None
 19518 ;; Auto vars:     Size  Location     Type
 19519 ;;		None
 19520 ;; Return value:  Size  Location     Type
 19521 ;;                  1    wreg      void 
 19522 ;; Registers used:
 19523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19524 ;; Tracked objects:
 19525 ;;		On entry : 0/0
 19526 ;;		On exit  : 0/0
 19527 ;;		Unchanged: 0/0
 19528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19531 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19532 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19533 ;;Total ram usage:        1 bytes
 19534 ;; Hardware stack levels used:    1
 19535 ;; Hardware stack levels required when called:    9
 19536 ;; This function calls:
 19537 ;;		_Lcd_Print_String
 19538 ;;		___lbmod
 19539 ;;		___wmul
 19540 ;;		_clear_row1
 19541 ;;		_clear_row2
 19542 ;;		_processEncoderBuxton
 19543 ;; This function is called by:
 19544 ;;		_Function_A
 19545 ;; This function uses a non-reentrant model
 19546 ;;
 19547                           
 19548                           	psect	text61
 19549  008080                     __ptext61:
 19550                           	opt stack 0
 19551  008080                     _Function_A_1:
 19552                           	opt stack 19
 19553                           
 19554                           ;menu.c: 360: KEYBOARD_MODE = MODES;
 19555                           
 19556                           ; BSR set to: 0
 19557                           ;incstack = 0
 19558  008080  0E03               	movlw	3
 19559  008082  0100               	movlb	0	; () banked
 19560  008084  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19561                           
 19562                           ;menu.c: 361: which_screen = MODES_MENU;
 19563  008086  0E09               	movlw	9
 19564  008088  6FF9               	movwf	_which_screen& (0+255),b
 19565                           
 19566                           ; BSR set to: 0
 19567                           ;menu.c: 362: encoder_click = 0;
 19568  00808A  9E35               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19569                           
 19570                           ; BSR set to: 0
 19571                           ;menu.c: 364: modeMenu.selector = which_mode;
 19572  00808C  C0F1  F049         	movff	_which_mode,_modeMenu+2
 19573                           
 19574                           ;menu.c: 366: while(encoder_click == 0) {
 19575  008090  D032               	goto	l3414
 19576  008092                     
 19577                           ; BSR set to: 0
 19578                           ;menu.c: 367: processEncoderBuxton();
 19579                           
 19580                           ; BSR set to: 0
 19581  008092  EC09  F000         	call	_processEncoderBuxton	;wreg free
 19582                           
 19583                           ;menu.c: 368: if (lcd_print_once == 0) {
 19584  008096  BC35               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19585  008098  D026               	goto	l3416
 19586                           
 19587                           ;menu.c: 369: clear_row1();
 19588  00809A  EC1E  F04A         	call	_clear_row1	;wreg free
 19589                           
 19590                           ;menu.c: 370: Lcd_Print_String("Enter Mode:");
 19591  00809E  0E58               	movlw	low STR_24
 19592  0080A0  0100               	movlb	0	; () banked
 19593  0080A2  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19594  0080A4  0EFF               	movlw	high STR_24
 19595  0080A6  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19596  0080A8  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 19597                           
 19598                           ;menu.c: 371: clear_row2();
 19599  0080AC  EC0A  F04A         	call	_clear_row2	;wreg free
 19600                           
 19601                           ;menu.c: 372: Lcd_Print_String(LCD_STRINGS[(modeMenu.selector % modeMenu.number) + modeM
      +                          enu.address]);
 19602  0080B0  C047  F060         	movff	_modeMenu,___lbmod@divisor
 19603  0080B4  5049               	movf	_modeMenu+2,w,c
 19604  0080B6  EC89  F049         	call	___lbmod
 19605  0080BA  0100               	movlb	0	; () banked
 19606  0080BC  6F70               	movwf	??_Function_A_1& (0+255),b
 19607  0080BE  5170               	movf	??_Function_A_1& (0+255),w,b
 19608  0080C0  2448               	addwf	_modeMenu+1,w,c
 19609  0080C2  6F64               	movwf	___wmul@multiplier& (0+255),b
 19610  0080C4  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 19611  0080C6  3765               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19612  0080C8  0E00               	movlw	0
 19613  0080CA  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19614  0080CC  0E11               	movlw	17
 19615  0080CE  6F66               	movwf	___wmul@multiplicand& (0+255),b
 19616  0080D0  EC32  F04A         	call	___wmul	;wreg free
 19617  0080D4  0E9E               	movlw	low _LCD_STRINGS
 19618  0080D6  0100               	movlb	0	; () banked
 19619  0080D8  2564               	addwf	?___wmul& (0+255),w,b
 19620  0080DA  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 19621  0080DC  0EF3               	movlw	high _LCD_STRINGS
 19622  0080DE  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 19623  0080E0  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19624  0080E2  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 19625  0080E6                     l3416:
 19626                           
 19627                           ;menu.c: 373: }
 19628                           ;menu.c: 374: which_mode = modeMenu.selector % modeMenu.number;
 19629  0080E6  C047  F060         	movff	_modeMenu,___lbmod@divisor
 19630  0080EA  5049               	movf	_modeMenu+2,w,c
 19631  0080EC  EC89  F049         	call	___lbmod
 19632  0080F0  0100               	movlb	0	; () banked
 19633  0080F2  6FF1               	movwf	_which_mode& (0+255),b
 19634                           
 19635                           ; BSR set to: 0
 19636                           ;menu.c: 375: lcd_print_once = 1;
 19637  0080F4  8C35               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19638  0080F6                     l3414:
 19639                           
 19640                           ; BSR set to: 0
 19641                           
 19642                           ; BSR set to: 0
 19643  0080F6  BE35               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19644  0080F8  0012               	return	
 19645  0080FA  D7CB               	goto	l3415
 19646  0080FC                     __end_of_Function_A_1:
 19647                           	opt stack 0
 19648                           tblptru	equ	0xFF8
 19649                           tblptrh	equ	0xFF7
 19650                           tblptrl	equ	0xFF6
 19651                           tablat	equ	0xFF5
 19652                           prodh	equ	0xFF4
 19653                           prodl	equ	0xFF3
 19654                           intcon	equ	0xFF2
 19655                           intcon2	equ	0xFF1
 19656                           postinc0	equ	0xFEE
 19657                           wreg	equ	0xFE8
 19658                           postdec1	equ	0xFE5
 19659                           fsr1l	equ	0xFE1
 19660                           indf2	equ	0xFDF
 19661                           postinc2	equ	0xFDE
 19662                           plusw2	equ	0xFDB
 19663                           fsr2h	equ	0xFDA
 19664                           fsr2l	equ	0xFD9
 19665                           status	equ	0xFD8
 19666                           
 19667 ;; *************** function _processEncoderBuxton *****************
 19668 ;; Defined at:
 19669 ;;		line 51 in file "encoder.c"
 19670 ;; Parameters:    Size  Location     Type
 19671 ;;		None
 19672 ;; Auto vars:     Size  Location     Type
 19673 ;;		None
 19674 ;; Return value:  Size  Location     Type
 19675 ;;                  1    wreg      void 
 19676 ;; Registers used:
 19677 ;;		wreg, status,2, status,0
 19678 ;; Tracked objects:
 19679 ;;		On entry : 0/0
 19680 ;;		On exit  : 0/0
 19681 ;;		Unchanged: 0/0
 19682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19685 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19686 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19687 ;;Total ram usage:        7 bytes
 19688 ;; Hardware stack levels used:    1
 19689 ;; Hardware stack levels required when called:    5
 19690 ;; This function calls:
 19691 ;;		Nothing
 19692 ;; This function is called by:
 19693 ;;		_Function_A_1
 19694 ;;		_Function_A_2
 19695 ;;		_Function_A_3
 19696 ;;		_Function_A
 19697 ;;		_Function_B
 19698 ;;		_Function_C_1
 19699 ;;		_Function_C_2
 19700 ;;		_Function_C_3
 19701 ;;		_Function_C
 19702 ;;		_Function_D_1
 19703 ;;		_Function_D_2
 19704 ;;		_Function_D_3
 19705 ;;		_Function_D_4
 19706 ;;		_Function_D_5
 19707 ;;		_Function_D
 19708 ;;		_Function_E_1
 19709 ;;		_Function_E_2
 19710 ;;		_Function_E
 19711 ;;		_Function_F
 19712 ;;		_Function_G_1
 19713 ;;		_Function_G_2
 19714 ;;		_Function_G_4
 19715 ;;		_Function_G
 19716 ;;		_Function_H
 19717 ;;		_Function_H_1
 19718 ;;		_Function_H_2
 19719 ;;		_Function_H_3
 19720 ;;		_Function_H_4
 19721 ;;		_Function_H_5
 19722 ;;		_Function_H_6_1
 19723 ;;		_Function_H_6_2
 19724 ;;		_Function_H_6
 19725 ;;		_Function_H_7
 19726 ;;		_Function_H_8_1
 19727 ;;		_Function_H_8_2
 19728 ;;		_Function_H_8
 19729 ;;		_Function_H_9_1
 19730 ;;		_Function_H_9_2
 19731 ;;		_Function_H_9_3
 19732 ;;		_Function_H_9_4
 19733 ;;		_Function_H_9
 19734 ;;		_main
 19735 ;; This function uses a non-reentrant model
 19736 ;;
 19737                           
 19738                           	psect	text62
 19739  000012                     __ptext62:
 19740                           	opt stack 0
 19741  000012                     _processEncoderBuxton:
 19742                           	opt stack 25
 19743                           
 19744                           ;encoder.c: 53: if (encoder_direction == 0x00) {return;}
 19745                           
 19746                           ; BSR set to: 0
 19747                           ;incstack = 0
 19748  000012  0100               	movlb	0	; () banked
 19749  000014  51EB               	movf	_encoder_direction& (0+255),w,b
 19750  000016  B4D8               	btfsc	status,2,c
 19751  000018  0012               	return	
 19752                           
 19753                           ; BSR set to: 0
 19754                           ;encoder.c: 56: if (encoder_direction == 0x10) {
 19755                           
 19756                           ; BSR set to: 0
 19757                           
 19758                           ; BSR set to: 0
 19759  00001A  0E10               	movlw	16
 19760  00001C  19EB               	xorwf	_encoder_direction& (0+255),w,b
 19761  00001E  A4D8               	btfss	status,2,c
 19762  000020  D3A8               	goto	l886
 19763                           
 19764                           ; BSR set to: 0
 19765                           ;encoder.c: 58: lcd_print_once = 0;
 19766  000022  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19767                           
 19768                           ; BSR set to: 0
 19769                           ;encoder.c: 61: if (which_screen == MAIN_MENU) {
 19770  000024  0E02               	movlw	2
 19771  000026  19F9               	xorwf	_which_screen& (0+255),w,b
 19772  000028  A4D8               	btfss	status,2,c
 19773  00002A  D01E               	goto	l816
 19774                           
 19775                           ; BSR set to: 0
 19776                           ;encoder.c: 62: if(mainMenu.selector < mainMenu.number - 1){
 19777  00002C  0EFF               	movlw	255
 19778  00002E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19779  000030  0EFF               	movlw	255
 19780  000032  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19781  000034  0101               	movlb	1	; () banked
 19782  000036  5168               	movf	_mainMenu& (0+255),w,b
 19783  000038  0100               	movlb	0	; () banked
 19784  00003A  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19785  00003C  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19786  00003E  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19787  000040  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19788  000042  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19789  000044  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19790  000046  0101               	movlb	1	; () banked
 19791  000048  516A               	movf	(_mainMenu+2)& (0+255),w,b
 19792  00004A  0100               	movlb	0	; () banked
 19793  00004C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19794  00004E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19795  000050  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19796  000052  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19797  000054  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19798  000056  0A80               	xorlw	128
 19799  000058  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19800  00005A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19801  00005C  0A80               	xorlw	128
 19802  00005E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19803  000060  B0D8               	btfsc	status,0,c
 19804  000062  D002               	goto	l816
 19805                           
 19806                           ; BSR set to: 0
 19807                           ;encoder.c: 63: mainMenu.selector++;
 19808  000064  0101               	movlb	1	; () banked
 19809  000066  2B6A               	incf	(_mainMenu+2)& (0+255),f,b
 19810  000068                     l816:
 19811                           
 19812                           ;encoder.c: 64: }
 19813                           ;encoder.c: 65: }
 19814                           ;encoder.c: 66: if (which_screen == KEYBOARD_MENU) {
 19815                           
 19816                           ; BSR set to: 1
 19817                           
 19818                           ; BSR set to: 1
 19819  000068  0E03               	movlw	3
 19820  00006A  0100               	movlb	0	; () banked
 19821  00006C  19F9               	xorwf	_which_screen& (0+255),w,b
 19822  00006E  A4D8               	btfss	status,2,c
 19823  000070  D018               	goto	l818
 19824                           
 19825                           ; BSR set to: 0
 19826                           ;encoder.c: 67: if(keyboardMenu.selector < (keyboardMenu.number - 1)){
 19827  000072  0EFF               	movlw	255
 19828  000074  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19829  000076  0EFF               	movlw	255
 19830  000078  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19831  00007A  504A               	movf	_keyboardMenu,w,c
 19832  00007C  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19833  00007E  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19834  000080  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19835  000082  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19836  000084  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19837  000086  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19838  000088  504C               	movf	_keyboardMenu+2,w,c
 19839  00008A  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19840  00008C  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19841  00008E  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19842  000090  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19843  000092  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19844  000094  0A80               	xorlw	128
 19845  000096  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19846  000098  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19847  00009A  0A80               	xorlw	128
 19848  00009C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19849  00009E  A0D8               	btfss	status,0,c
 19850                           
 19851                           ; BSR set to: 0
 19852                           ;encoder.c: 68: keyboardMenu.selector++;
 19853  0000A0  2A4C               	incf	_keyboardMenu+2,f,c
 19854  0000A2                     l818:
 19855                           
 19856                           ; BSR set to: 0
 19857                           ;encoder.c: 69: }
 19858                           ;encoder.c: 70: }
 19859                           ;encoder.c: 71: if (which_screen == TRANSPOSE_MENU) {
 19860                           
 19861                           ; BSR set to: 0
 19862                           
 19863                           ; BSR set to: 0
 19864  0000A2  0E04               	movlw	4
 19865  0000A4  19F9               	xorwf	_which_screen& (0+255),w,b
 19866  0000A6  A4D8               	btfss	status,2,c
 19867  0000A8  D01E               	goto	l820
 19868                           
 19869                           ; BSR set to: 0
 19870                           ;encoder.c: 72: if(transposeMenu.selector < (transposeMenu.number - 1)){
 19871  0000AA  0EFF               	movlw	255
 19872  0000AC  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19873  0000AE  0EFF               	movlw	255
 19874  0000B0  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19875  0000B2  0101               	movlb	1	; () banked
 19876  0000B4  5162               	movf	_transposeMenu& (0+255),w,b
 19877  0000B6  0100               	movlb	0	; () banked
 19878  0000B8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19879  0000BA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19880  0000BC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19881  0000BE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19882  0000C0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19883  0000C2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19884  0000C4  0101               	movlb	1	; () banked
 19885  0000C6  5164               	movf	(_transposeMenu+2)& (0+255),w,b
 19886  0000C8  0100               	movlb	0	; () banked
 19887  0000CA  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19888  0000CC  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19889  0000CE  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19890  0000D0  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19891  0000D2  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19892  0000D4  0A80               	xorlw	128
 19893  0000D6  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19894  0000D8  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19895  0000DA  0A80               	xorlw	128
 19896  0000DC  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19897  0000DE  B0D8               	btfsc	status,0,c
 19898  0000E0  D002               	goto	l820
 19899                           
 19900                           ; BSR set to: 0
 19901                           ;encoder.c: 73: transposeMenu.selector++;
 19902  0000E2  0101               	movlb	1	; () banked
 19903  0000E4  2B64               	incf	(_transposeMenu+2)& (0+255),f,b
 19904  0000E6                     l820:
 19905                           
 19906                           ;encoder.c: 74: }
 19907                           ;encoder.c: 75: }
 19908                           ;encoder.c: 76: if (which_screen == DRUM_MENU) {
 19909                           
 19910                           ; BSR set to: 1
 19911                           
 19912                           ; BSR set to: 1
 19913  0000E6  0E05               	movlw	5
 19914  0000E8  0100               	movlb	0	; () banked
 19915  0000EA  19F9               	xorwf	_which_screen& (0+255),w,b
 19916  0000EC  A4D8               	btfss	status,2,c
 19917  0000EE  D018               	goto	l822
 19918                           
 19919                           ; BSR set to: 0
 19920                           ;encoder.c: 77: if(drumMenu.selector < (drumMenu.number - 1)){
 19921  0000F0  0EFF               	movlw	255
 19922  0000F2  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19923  0000F4  0EFF               	movlw	255
 19924  0000F6  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19925  0000F8  5041               	movf	_drumMenu,w,c
 19926  0000FA  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19927  0000FC  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19928  0000FE  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19929  000100  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19930  000102  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19931  000104  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19932  000106  5043               	movf	_drumMenu+2,w,c
 19933  000108  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19934  00010A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19935  00010C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19936  00010E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19937  000110  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19938  000112  0A80               	xorlw	128
 19939  000114  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19940  000116  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19941  000118  0A80               	xorlw	128
 19942  00011A  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19943  00011C  A0D8               	btfss	status,0,c
 19944                           
 19945                           ; BSR set to: 0
 19946                           ;encoder.c: 78: drumMenu.selector++;
 19947  00011E  2A43               	incf	_drumMenu+2,f,c
 19948  000120                     l822:
 19949                           
 19950                           ; BSR set to: 0
 19951                           ;encoder.c: 79: }
 19952                           ;encoder.c: 80: }
 19953                           ;encoder.c: 81: if (which_screen == POTENTIOMETER_MENU) {
 19954                           
 19955                           ; BSR set to: 0
 19956                           
 19957                           ; BSR set to: 0
 19958  000120  0E06               	movlw	6
 19959  000122  19F9               	xorwf	_which_screen& (0+255),w,b
 19960  000124  A4D8               	btfss	status,2,c
 19961  000126  D018               	goto	l824
 19962                           
 19963                           ; BSR set to: 0
 19964                           ;encoder.c: 82: if(potsMenu.selector < (potsMenu.number - 1)){
 19965  000128  0EFF               	movlw	255
 19966  00012A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19967  00012C  0EFF               	movlw	255
 19968  00012E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19969  000130  503E               	movf	_potsMenu,w,c
 19970  000132  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19971  000134  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19972  000136  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19973  000138  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19974  00013A  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19975  00013C  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19976  00013E  5040               	movf	_potsMenu+2,w,c
 19977  000140  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19978  000142  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19979  000144  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19980  000146  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19981  000148  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19982  00014A  0A80               	xorlw	128
 19983  00014C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19984  00014E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19985  000150  0A80               	xorlw	128
 19986  000152  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19987  000154  A0D8               	btfss	status,0,c
 19988                           
 19989                           ; BSR set to: 0
 19990                           ;encoder.c: 83: potsMenu.selector++;
 19991  000156  2A40               	incf	_potsMenu+2,f,c
 19992  000158                     l824:
 19993                           
 19994                           ; BSR set to: 0
 19995                           ;encoder.c: 84: }
 19996                           ;encoder.c: 85: }
 19997                           ;encoder.c: 86: if (which_screen == MIDI_CHANNEL_MENU) {
 19998                           
 19999                           ; BSR set to: 0
 20000                           
 20001                           ; BSR set to: 0
 20002  000158  0E07               	movlw	7
 20003  00015A  19F9               	xorwf	_which_screen& (0+255),w,b
 20004  00015C  A4D8               	btfss	status,2,c
 20005  00015E  D01E               	goto	l826
 20006                           
 20007                           ; BSR set to: 0
 20008                           ;encoder.c: 87: if(midiChannelMenu.selector < (midiChannelMenu.number - 1)){
 20009  000160  0EFF               	movlw	255
 20010  000162  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20011  000164  0EFF               	movlw	255
 20012  000166  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20013  000168  0101               	movlb	1	; () banked
 20014  00016A  5147               	movf	_midiChannelMenu& (0+255),w,b
 20015  00016C  0100               	movlb	0	; () banked
 20016  00016E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20017  000170  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20018  000172  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20019  000174  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20020  000176  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20021  000178  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20022  00017A  0101               	movlb	1	; () banked
 20023  00017C  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 20024  00017E  0100               	movlb	0	; () banked
 20025  000180  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20026  000182  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20027  000184  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20028  000186  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20029  000188  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20030  00018A  0A80               	xorlw	128
 20031  00018C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20032  00018E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20033  000190  0A80               	xorlw	128
 20034  000192  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20035  000194  B0D8               	btfsc	status,0,c
 20036  000196  D002               	goto	l826
 20037                           
 20038                           ; BSR set to: 0
 20039                           ;encoder.c: 88: midiChannelMenu.selector++;
 20040  000198  0101               	movlb	1	; () banked
 20041  00019A  2B49               	incf	(_midiChannelMenu+2)& (0+255),f,b
 20042  00019C                     l826:
 20043                           
 20044                           ;encoder.c: 89: }
 20045                           ;encoder.c: 90: }
 20046                           ;encoder.c: 92: if (which_screen == MODES_MENU) {
 20047                           
 20048                           ; BSR set to: 1
 20049                           
 20050                           ; BSR set to: 1
 20051  00019C  0E09               	movlw	9
 20052  00019E  0100               	movlb	0	; () banked
 20053  0001A0  19F9               	xorwf	_which_screen& (0+255),w,b
 20054  0001A2  A4D8               	btfss	status,2,c
 20055  0001A4  D018               	goto	l828
 20056                           
 20057                           ; BSR set to: 0
 20058                           ;encoder.c: 93: if(modeMenu.selector < (modeMenu.number - 1)){
 20059  0001A6  0EFF               	movlw	255
 20060  0001A8  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20061  0001AA  0EFF               	movlw	255
 20062  0001AC  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20063  0001AE  5047               	movf	_modeMenu,w,c
 20064  0001B0  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20065  0001B2  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20066  0001B4  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20067  0001B6  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20068  0001B8  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20069  0001BA  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20070  0001BC  5049               	movf	_modeMenu+2,w,c
 20071  0001BE  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20072  0001C0  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20073  0001C2  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20074  0001C4  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20075  0001C6  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20076  0001C8  0A80               	xorlw	128
 20077  0001CA  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20078  0001CC  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20079  0001CE  0A80               	xorlw	128
 20080  0001D0  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20081  0001D2  A0D8               	btfss	status,0,c
 20082                           
 20083                           ; BSR set to: 0
 20084                           ;encoder.c: 94: modeMenu.selector++;
 20085  0001D4  2A49               	incf	_modeMenu+2,f,c
 20086  0001D6                     l828:
 20087                           
 20088                           ; BSR set to: 0
 20089                           ;encoder.c: 95: }
 20090                           ;encoder.c: 96: }
 20091                           ;encoder.c: 97: if (which_screen == TRIADS_MENU) {
 20092                           
 20093                           ; BSR set to: 0
 20094                           
 20095                           ; BSR set to: 0
 20096  0001D6  0E0A               	movlw	10
 20097  0001D8  19F9               	xorwf	_which_screen& (0+255),w,b
 20098  0001DA  A4D8               	btfss	status,2,c
 20099  0001DC  D018               	goto	l830
 20100                           
 20101                           ; BSR set to: 0
 20102                           ;encoder.c: 98: if(triadMenu.selector < (triadMenu.number - 1)){
 20103  0001DE  0EFF               	movlw	255
 20104  0001E0  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20105  0001E2  0EFF               	movlw	255
 20106  0001E4  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20107  0001E6  5044               	movf	_triadMenu,w,c
 20108  0001E8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20109  0001EA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20110  0001EC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20111  0001EE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20112  0001F0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20113  0001F2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20114  0001F4  5046               	movf	_triadMenu+2,w,c
 20115  0001F6  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20116  0001F8  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20117  0001FA  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20118  0001FC  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20119  0001FE  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20120  000200  0A80               	xorlw	128
 20121  000202  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20122  000204  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20123  000206  0A80               	xorlw	128
 20124  000208  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20125  00020A  A0D8               	btfss	status,0,c
 20126                           
 20127                           ; BSR set to: 0
 20128                           ;encoder.c: 99: triadMenu.selector++;
 20129  00020C  2A46               	incf	_triadMenu+2,f,c
 20130  00020E                     l830:
 20131                           
 20132                           ; BSR set to: 0
 20133                           ;encoder.c: 100: }
 20134                           ;encoder.c: 101: }
 20135                           ;encoder.c: 102: if (which_screen == SEVENTHS_MENU) {
 20136                           
 20137                           ; BSR set to: 0
 20138                           
 20139                           ; BSR set to: 0
 20140  00020E  0E0B               	movlw	11
 20141  000210  19F9               	xorwf	_which_screen& (0+255),w,b
 20142  000212  A4D8               	btfss	status,2,c
 20143  000214  D01E               	goto	l832
 20144                           
 20145                           ; BSR set to: 0
 20146                           ;encoder.c: 103: if(seventhMenu.selector < (seventhMenu.number - 1)){
 20147  000216  0EFF               	movlw	255
 20148  000218  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20149  00021A  0EFF               	movlw	255
 20150  00021C  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20151  00021E  0101               	movlb	1	; () banked
 20152  000220  5165               	movf	_seventhMenu& (0+255),w,b
 20153  000222  0100               	movlb	0	; () banked
 20154  000224  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20155  000226  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20156  000228  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20157  00022A  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20158  00022C  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20159  00022E  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20160  000230  0101               	movlb	1	; () banked
 20161  000232  5167               	movf	(_seventhMenu+2)& (0+255),w,b
 20162  000234  0100               	movlb	0	; () banked
 20163  000236  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20164  000238  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20165  00023A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20166  00023C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20167  00023E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20168  000240  0A80               	xorlw	128
 20169  000242  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20170  000244  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20171  000246  0A80               	xorlw	128
 20172  000248  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20173  00024A  B0D8               	btfsc	status,0,c
 20174  00024C  D002               	goto	l832
 20175                           
 20176                           ; BSR set to: 0
 20177                           ;encoder.c: 104: seventhMenu.selector++;
 20178  00024E  0101               	movlb	1	; () banked
 20179  000250  2B67               	incf	(_seventhMenu+2)& (0+255),f,b
 20180  000252                     l832:
 20181                           
 20182                           ;encoder.c: 105: }
 20183                           ;encoder.c: 106: }
 20184                           ;encoder.c: 107: if (which_screen == DRUMS_CC_TYPE_MENU) {
 20185                           
 20186                           ; BSR set to: 1
 20187                           
 20188                           ; BSR set to: 1
 20189  000252  0E0C               	movlw	12
 20190  000254  0100               	movlb	0	; () banked
 20191  000256  19F9               	xorwf	_which_screen& (0+255),w,b
 20192  000258  A4D8               	btfss	status,2,c
 20193  00025A  D01E               	goto	l834
 20194                           
 20195                           ; BSR set to: 0
 20196                           ;encoder.c: 108: if(drumCCTypeMenu.selector < (drumCCTypeMenu.number - 1)){
 20197  00025C  0EFF               	movlw	255
 20198  00025E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20199  000260  0EFF               	movlw	255
 20200  000262  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20201  000264  0101               	movlb	1	; () banked
 20202  000266  515F               	movf	_drumCCTypeMenu& (0+255),w,b
 20203  000268  0100               	movlb	0	; () banked
 20204  00026A  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20205  00026C  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20206  00026E  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20207  000270  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20208  000272  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20209  000274  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20210  000276  0101               	movlb	1	; () banked
 20211  000278  5161               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 20212  00027A  0100               	movlb	0	; () banked
 20213  00027C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20214  00027E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20215  000280  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20216  000282  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20217  000284  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20218  000286  0A80               	xorlw	128
 20219  000288  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20220  00028A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20221  00028C  0A80               	xorlw	128
 20222  00028E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20223  000290  B0D8               	btfsc	status,0,c
 20224  000292  D002               	goto	l834
 20225                           
 20226                           ; BSR set to: 0
 20227                           ;encoder.c: 109: drumCCTypeMenu.selector++;
 20228  000294  0101               	movlb	1	; () banked
 20229  000296  2B61               	incf	(_drumCCTypeMenu+2)& (0+255),f,b
 20230  000298                     l834:
 20231                           
 20232                           ;encoder.c: 110: }
 20233                           ;encoder.c: 111: }
 20234                           ;encoder.c: 113: if (which_screen == DRUMS_NN_MENU) {
 20235                           
 20236                           ; BSR set to: 1
 20237                           
 20238                           ; BSR set to: 1
 20239  000298  0E0D               	movlw	13
 20240  00029A  0100               	movlb	0	; () banked
 20241  00029C  19F9               	xorwf	_which_screen& (0+255),w,b
 20242  00029E  A4D8               	btfss	status,2,c
 20243  0002A0  D01E               	goto	l836
 20244                           
 20245                           ; BSR set to: 0
 20246                           ;encoder.c: 114: if(drumNNMenu.selector < (drumNNMenu.number - 1)){
 20247  0002A2  0EFF               	movlw	255
 20248  0002A4  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20249  0002A6  0EFF               	movlw	255
 20250  0002A8  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20251  0002AA  0101               	movlb	1	; () banked
 20252  0002AC  515C               	movf	_drumNNMenu& (0+255),w,b
 20253  0002AE  0100               	movlb	0	; () banked
 20254  0002B0  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20255  0002B2  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20256  0002B4  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20257  0002B6  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20258  0002B8  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20259  0002BA  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20260  0002BC  0101               	movlb	1	; () banked
 20261  0002BE  515E               	movf	(_drumNNMenu+2)& (0+255),w,b
 20262  0002C0  0100               	movlb	0	; () banked
 20263  0002C2  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20264  0002C4  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20265  0002C6  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20266  0002C8  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20267  0002CA  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20268  0002CC  0A80               	xorlw	128
 20269  0002CE  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20270  0002D0  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20271  0002D2  0A80               	xorlw	128
 20272  0002D4  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20273  0002D6  B0D8               	btfsc	status,0,c
 20274  0002D8  D002               	goto	l836
 20275                           
 20276                           ; BSR set to: 0
 20277                           ;encoder.c: 115: drumNNMenu.selector++;
 20278  0002DA  0101               	movlb	1	; () banked
 20279  0002DC  2B5E               	incf	(_drumNNMenu+2)& (0+255),f,b
 20280  0002DE                     l836:
 20281                           
 20282                           ;encoder.c: 116: }
 20283                           ;encoder.c: 117: }
 20284                           ;encoder.c: 119: if (which_screen == DRUMS_CC_MENU) {
 20285                           
 20286                           ; BSR set to: 1
 20287                           
 20288                           ; BSR set to: 1
 20289  0002DE  0E0E               	movlw	14
 20290  0002E0  0100               	movlb	0	; () banked
 20291  0002E2  19F9               	xorwf	_which_screen& (0+255),w,b
 20292  0002E4  A4D8               	btfss	status,2,c
 20293  0002E6  D01E               	goto	l838
 20294                           
 20295                           ; BSR set to: 0
 20296                           ;encoder.c: 120: if(drumCCMenu.selector < (drumCCMenu.number - 1)){
 20297  0002E8  0EFF               	movlw	255
 20298  0002EA  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20299  0002EC  0EFF               	movlw	255
 20300  0002EE  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20301  0002F0  0101               	movlb	1	; () banked
 20302  0002F2  5159               	movf	_drumCCMenu& (0+255),w,b
 20303  0002F4  0100               	movlb	0	; () banked
 20304  0002F6  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20305  0002F8  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20306  0002FA  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20307  0002FC  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20308  0002FE  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20309  000300  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20310  000302  0101               	movlb	1	; () banked
 20311  000304  515B               	movf	(_drumCCMenu+2)& (0+255),w,b
 20312  000306  0100               	movlb	0	; () banked
 20313  000308  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20314  00030A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20315  00030C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20316  00030E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20317  000310  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20318  000312  0A80               	xorlw	128
 20319  000314  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20320  000316  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20321  000318  0A80               	xorlw	128
 20322  00031A  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20323  00031C  B0D8               	btfsc	status,0,c
 20324  00031E  D002               	goto	l838
 20325                           
 20326                           ; BSR set to: 0
 20327                           ;encoder.c: 121: drumCCMenu.selector++;
 20328  000320  0101               	movlb	1	; () banked
 20329  000322  2B5B               	incf	(_drumCCMenu+2)& (0+255),f,b
 20330  000324                     l838:
 20331                           
 20332                           ;encoder.c: 122: }
 20333                           ;encoder.c: 123: }
 20334                           ;encoder.c: 125: if (which_screen == POTS_RES_MENU) {
 20335                           
 20336                           ; BSR set to: 1
 20337                           
 20338                           ; BSR set to: 1
 20339  000324  0E0F               	movlw	15
 20340  000326  0100               	movlb	0	; () banked
 20341  000328  19F9               	xorwf	_which_screen& (0+255),w,b
 20342  00032A  A4D8               	btfss	status,2,c
 20343  00032C  D01E               	goto	l840
 20344                           
 20345                           ; BSR set to: 0
 20346                           ;encoder.c: 126: if(potsResoMenu.selector < (potsResoMenu.number - 1)){
 20347  00032E  0EFF               	movlw	255
 20348  000330  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20349  000332  0EFF               	movlw	255
 20350  000334  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20351  000336  0101               	movlb	1	; () banked
 20352  000338  5156               	movf	_potsResoMenu& (0+255),w,b
 20353  00033A  0100               	movlb	0	; () banked
 20354  00033C  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20355  00033E  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20356  000340  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20357  000342  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20358  000344  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20359  000346  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20360  000348  0101               	movlb	1	; () banked
 20361  00034A  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 20362  00034C  0100               	movlb	0	; () banked
 20363  00034E  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20364  000350  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20365  000352  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20366  000354  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20367  000356  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20368  000358  0A80               	xorlw	128
 20369  00035A  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20370  00035C  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20371  00035E  0A80               	xorlw	128
 20372  000360  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20373  000362  B0D8               	btfsc	status,0,c
 20374  000364  D002               	goto	l840
 20375                           
 20376                           ; BSR set to: 0
 20377                           ;encoder.c: 127: potsResoMenu.selector++;
 20378  000366  0101               	movlb	1	; () banked
 20379  000368  2B58               	incf	(_potsResoMenu+2)& (0+255),f,b
 20380  00036A                     l840:
 20381                           
 20382                           ;encoder.c: 128: }
 20383                           ;encoder.c: 129: }
 20384                           ;encoder.c: 131: if (which_screen == ENCODER_POLARITY_MENU) {
 20385                           
 20386                           ; BSR set to: 1
 20387                           
 20388                           ; BSR set to: 1
 20389  00036A  0E18               	movlw	24
 20390  00036C  0100               	movlb	0	; () banked
 20391  00036E  19F9               	xorwf	_which_screen& (0+255),w,b
 20392  000370  A4D8               	btfss	status,2,c
 20393  000372  D006               	goto	l842
 20394                           
 20395                           ; BSR set to: 0
 20396                           ;encoder.c: 135: if(encoderPolarityMenu.selector == 0){
 20397  000374  0101               	movlb	1	; () banked
 20398  000376  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 20399  000378  A4D8               	btfss	status,2,c
 20400  00037A  D002               	goto	l842
 20401                           
 20402                           ; BSR set to: 1
 20403                           ;encoder.c: 136: encoderPolarityMenu.selector = 1;
 20404  00037C  0E01               	movlw	1
 20405  00037E  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 20406  000380                     l842:
 20407                           
 20408                           ;encoder.c: 137: }
 20409                           ;encoder.c: 138: }
 20410                           ;encoder.c: 140: if (which_screen == POTS_ALPHA_MENU) {
 20411                           
 20412                           ; BSR set to: 1
 20413                           
 20414                           ; BSR set to: 1
 20415  000380  0E10               	movlw	16
 20416  000382  0100               	movlb	0	; () banked
 20417  000384  19F9               	xorwf	_which_screen& (0+255),w,b
 20418  000386  A4D8               	btfss	status,2,c
 20419  000388  D006               	goto	l844
 20420                           
 20421                           ; BSR set to: 0
 20422                           ;encoder.c: 141: if(potsAlphaMenu.selector <= 85){
 20423  00038A  0E56               	movlw	86
 20424  00038C  0101               	movlb	1	; () banked
 20425  00038E  6155               	cpfslt	(_potsAlphaMenu+2)& (0+255),b
 20426  000390  D002               	goto	l844
 20427                           
 20428                           ; BSR set to: 1
 20429                           ;encoder.c: 142: potsAlphaMenu.selector += 5;
 20430  000392  0E05               	movlw	5
 20431  000394  2755               	addwf	(_potsAlphaMenu+2)& (0+255),f,b
 20432  000396                     l844:
 20433                           
 20434                           ;encoder.c: 143: }
 20435                           ;encoder.c: 144: }
 20436                           ;encoder.c: 146: if (which_screen == POTS_CC_MENU) {
 20437                           
 20438                           ; BSR set to: 1
 20439  000396  0E11               	movlw	17
 20440  000398  0100               	movlb	0	; () banked
 20441  00039A  19F9               	xorwf	_which_screen& (0+255),w,b
 20442  00039C  A4D8               	btfss	status,2,c
 20443  00039E  D01E               	goto	l846
 20444                           
 20445                           ; BSR set to: 0
 20446                           ;encoder.c: 147: if(potsCCMenu.selector < (potsCCMenu.number - 1)){
 20447  0003A0  0EFF               	movlw	255
 20448  0003A2  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20449  0003A4  0EFF               	movlw	255
 20450  0003A6  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20451  0003A8  0101               	movlb	1	; () banked
 20452  0003AA  5150               	movf	_potsCCMenu& (0+255),w,b
 20453  0003AC  0100               	movlb	0	; () banked
 20454  0003AE  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20455  0003B0  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20456  0003B2  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20457  0003B4  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20458  0003B6  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20459  0003B8  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20460  0003BA  0101               	movlb	1	; () banked
 20461  0003BC  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 20462  0003BE  0100               	movlb	0	; () banked
 20463  0003C0  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20464  0003C2  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20465  0003C4  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20466  0003C6  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20467  0003C8  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20468  0003CA  0A80               	xorlw	128
 20469  0003CC  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20470  0003CE  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20471  0003D0  0A80               	xorlw	128
 20472  0003D2  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20473  0003D4  B0D8               	btfsc	status,0,c
 20474  0003D6  D002               	goto	l846
 20475                           
 20476                           ; BSR set to: 0
 20477                           ;encoder.c: 148: potsCCMenu.selector++;
 20478  0003D8  0101               	movlb	1	; () banked
 20479  0003DA  2B52               	incf	(_potsCCMenu+2)& (0+255),f,b
 20480  0003DC                     l846:
 20481                           
 20482                           ;encoder.c: 149: }
 20483                           ;encoder.c: 150: }
 20484                           ;encoder.c: 152: if (which_screen == SLIDEPOTS_CC_MENU) {
 20485                           
 20486                           ; BSR set to: 1
 20487                           
 20488                           ; BSR set to: 1
 20489  0003DC  0E12               	movlw	18
 20490  0003DE  0100               	movlb	0	; () banked
 20491  0003E0  19F9               	xorwf	_which_screen& (0+255),w,b
 20492  0003E2  A4D8               	btfss	status,2,c
 20493  0003E4  D01E               	goto	l848
 20494                           
 20495                           ; BSR set to: 0
 20496                           ;encoder.c: 153: if(slidepotsCCMenu.selector < (slidepotsCCMenu.number - 1)){
 20497  0003E6  0EFF               	movlw	255
 20498  0003E8  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20499  0003EA  0EFF               	movlw	255
 20500  0003EC  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20501  0003EE  0101               	movlb	1	; () banked
 20502  0003F0  514D               	movf	_slidepotsCCMenu& (0+255),w,b
 20503  0003F2  0100               	movlb	0	; () banked
 20504  0003F4  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20505  0003F6  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20506  0003F8  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20507  0003FA  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20508  0003FC  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20509  0003FE  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20510  000400  0101               	movlb	1	; () banked
 20511  000402  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 20512  000404  0100               	movlb	0	; () banked
 20513  000406  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20514  000408  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20515  00040A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20516  00040C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20517  00040E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20518  000410  0A80               	xorlw	128
 20519  000412  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20520  000414  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20521  000416  0A80               	xorlw	128
 20522  000418  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20523  00041A  B0D8               	btfsc	status,0,c
 20524  00041C  D002               	goto	l848
 20525                           
 20526                           ; BSR set to: 0
 20527                           ;encoder.c: 154: slidepotsCCMenu.selector++;
 20528  00041E  0101               	movlb	1	; () banked
 20529  000420  2B4F               	incf	(_slidepotsCCMenu+2)& (0+255),f,b
 20530  000422                     l848:
 20531                           
 20532                           ;encoder.c: 155: }
 20533                           ;encoder.c: 156: }
 20534                           ;encoder.c: 158: if (which_screen == PROGRAM_CHANGE_MENU) {
 20535                           
 20536                           ; BSR set to: 1
 20537                           
 20538                           ; BSR set to: 1
 20539  000422  0E08               	movlw	8
 20540  000424  0100               	movlb	0	; () banked
 20541  000426  19F9               	xorwf	_which_screen& (0+255),w,b
 20542  000428  A4D8               	btfss	status,2,c
 20543  00042A  D005               	goto	l850
 20544                           
 20545                           ; BSR set to: 0
 20546                           ;encoder.c: 159: if(programChangeMenu.selector < 127){
 20547  00042C  0E7F               	movlw	127
 20548  00042E  0101               	movlb	1	; () banked
 20549  000430  6146               	cpfslt	(_programChangeMenu+2)& (0+255),b
 20550  000432  D001               	goto	l850
 20551                           
 20552                           ; BSR set to: 1
 20553                           ;encoder.c: 160: programChangeMenu.selector++;
 20554  000434  2B46               	incf	(_programChangeMenu+2)& (0+255),f,b
 20555  000436                     l850:
 20556                           
 20557                           ;encoder.c: 161: }
 20558                           ;encoder.c: 162: }
 20559                           ;encoder.c: 164: if (which_screen == MAIN_CH_MENU) {
 20560                           
 20561                           ; BSR set to: 1
 20562                           
 20563                           ; BSR set to: 1
 20564  000436  0E14               	movlw	20
 20565  000438  0100               	movlb	0	; () banked
 20566  00043A  19F9               	xorwf	_which_screen& (0+255),w,b
 20567  00043C  A4D8               	btfss	status,2,c
 20568  00043E  D005               	goto	l852
 20569                           
 20570                           ; BSR set to: 0
 20571                           ;encoder.c: 165: if(mainChannelMenu.selector < 15){
 20572  000440  0E0F               	movlw	15
 20573  000442  0101               	movlb	1	; () banked
 20574  000444  6143               	cpfslt	(_mainChannelMenu+2)& (0+255),b
 20575  000446  D001               	goto	l852
 20576                           
 20577                           ; BSR set to: 1
 20578                           ;encoder.c: 166: mainChannelMenu.selector++;
 20579  000448  2B43               	incf	(_mainChannelMenu+2)& (0+255),f,b
 20580  00044A                     l852:
 20581                           
 20582                           ;encoder.c: 167: }
 20583                           ;encoder.c: 168: }
 20584                           ;encoder.c: 170: if (which_screen == DRUM_CH_MENU) {
 20585                           
 20586                           ; BSR set to: 1
 20587                           
 20588                           ; BSR set to: 1
 20589  00044A  0E15               	movlw	21
 20590  00044C  0100               	movlb	0	; () banked
 20591  00044E  19F9               	xorwf	_which_screen& (0+255),w,b
 20592  000450  A4D8               	btfss	status,2,c
 20593  000452  D005               	goto	l854
 20594                           
 20595                           ; BSR set to: 0
 20596                           ;encoder.c: 171: if(drumChannelMenu.selector < 15){
 20597  000454  0E0F               	movlw	15
 20598  000456  0101               	movlb	1	; () banked
 20599  000458  6140               	cpfslt	(_drumChannelMenu+2)& (0+255),b
 20600  00045A  D001               	goto	l854
 20601                           
 20602                           ; BSR set to: 1
 20603                           ;encoder.c: 172: drumChannelMenu.selector++;
 20604  00045C  2B40               	incf	(_drumChannelMenu+2)& (0+255),f,b
 20605  00045E                     l854:
 20606                           
 20607                           ;encoder.c: 173: }
 20608                           ;encoder.c: 174: }
 20609                           ;encoder.c: 175: if (which_screen == JOYSTICK_CC_MENU) {
 20610                           
 20611                           ; BSR set to: 1
 20612                           
 20613                           ; BSR set to: 1
 20614  00045E  0E13               	movlw	19
 20615  000460  0100               	movlb	0	; () banked
 20616  000462  19F9               	xorwf	_which_screen& (0+255),w,b
 20617  000464  A4D8               	btfss	status,2,c
 20618  000466  D01E               	goto	l856
 20619                           
 20620                           ; BSR set to: 0
 20621                           ;encoder.c: 176: if(joystickCCMenu.selector < (joystickCCMenu.number - 1)){
 20622  000468  0EFF               	movlw	255
 20623  00046A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20624  00046C  0EFF               	movlw	255
 20625  00046E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20626  000470  0101               	movlb	1	; () banked
 20627  000472  514A               	movf	_joystickCCMenu& (0+255),w,b
 20628  000474  0100               	movlb	0	; () banked
 20629  000476  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20630  000478  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20631  00047A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20632  00047C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20633  00047E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20634  000480  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20635  000482  0101               	movlb	1	; () banked
 20636  000484  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 20637  000486  0100               	movlb	0	; () banked
 20638  000488  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20639  00048A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20640  00048C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20641  00048E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20642  000490  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20643  000492  0A80               	xorlw	128
 20644  000494  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20645  000496  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20646  000498  0A80               	xorlw	128
 20647  00049A  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20648  00049C  B0D8               	btfsc	status,0,c
 20649  00049E  D002               	goto	l856
 20650                           
 20651                           ; BSR set to: 0
 20652                           ;encoder.c: 177: joystickCCMenu.selector++;
 20653  0004A0  0101               	movlb	1	; () banked
 20654  0004A2  2B4C               	incf	(_joystickCCMenu+2)& (0+255),f,b
 20655  0004A4                     l856:
 20656                           
 20657                           ;encoder.c: 178: }
 20658                           ;encoder.c: 179: }
 20659                           ;encoder.c: 180: if (which_screen == EEPROM_MENU) {
 20660                           
 20661                           ; BSR set to: 1
 20662                           
 20663                           ; BSR set to: 1
 20664  0004A4  0E16               	movlw	22
 20665  0004A6  0100               	movlb	0	; () banked
 20666  0004A8  19F9               	xorwf	_which_screen& (0+255),w,b
 20667  0004AA  A4D8               	btfss	status,2,c
 20668  0004AC  D01E               	goto	l858
 20669                           
 20670                           ; BSR set to: 0
 20671                           ;encoder.c: 181: if(eepromMenu.selector < (eepromMenu.number - 1)){
 20672  0004AE  0EFF               	movlw	255
 20673  0004B0  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20674  0004B2  0EFF               	movlw	255
 20675  0004B4  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20676  0004B6  0101               	movlb	1	; () banked
 20677  0004B8  513B               	movf	_eepromMenu& (0+255),w,b
 20678  0004BA  0100               	movlb	0	; () banked
 20679  0004BC  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20680  0004BE  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20681  0004C0  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20682  0004C2  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20683  0004C4  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20684  0004C6  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20685  0004C8  0101               	movlb	1	; () banked
 20686  0004CA  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 20687  0004CC  0100               	movlb	0	; () banked
 20688  0004CE  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20689  0004D0  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20690  0004D2  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20691  0004D4  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20692  0004D6  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20693  0004D8  0A80               	xorlw	128
 20694  0004DA  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20695  0004DC  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20696  0004DE  0A80               	xorlw	128
 20697  0004E0  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20698  0004E2  B0D8               	btfsc	status,0,c
 20699  0004E4  D002               	goto	l858
 20700                           
 20701                           ; BSR set to: 0
 20702                           ;encoder.c: 182: eepromMenu.selector++;
 20703  0004E6  0101               	movlb	1	; () banked
 20704  0004E8  2B3D               	incf	(_eepromMenu+2)& (0+255),f,b
 20705  0004EA                     l858:
 20706                           
 20707                           ;encoder.c: 183: }
 20708                           ;encoder.c: 184: }
 20709                           ;encoder.c: 185: if (which_screen == SAVES_MENU) {
 20710                           
 20711                           ; BSR set to: 1
 20712                           
 20713                           ; BSR set to: 1
 20714  0004EA  0E17               	movlw	23
 20715  0004EC  0100               	movlb	0	; () banked
 20716  0004EE  19F9               	xorwf	_which_screen& (0+255),w,b
 20717  0004F0  A4D8               	btfss	status,2,c
 20718  0004F2  D018               	goto	l860
 20719                           
 20720                           ; BSR set to: 0
 20721                           ;encoder.c: 186: if(savesMenu.selector < (savesMenu.number - 1)){
 20722  0004F4  0EFF               	movlw	255
 20723  0004F6  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20724  0004F8  0EFF               	movlw	255
 20725  0004FA  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20726  0004FC  51DF               	movf	_savesMenu& (0+255),w,b
 20727  0004FE  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20728  000500  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20729  000502  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20730  000504  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20731  000506  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20732  000508  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20733  00050A  51E1               	movf	(_savesMenu+2)& (0+255),w,b
 20734  00050C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20735  00050E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20736  000510  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20737  000512  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20738  000514  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20739  000516  0A80               	xorlw	128
 20740  000518  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20741  00051A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20742  00051C  0A80               	xorlw	128
 20743  00051E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20744  000520  A0D8               	btfss	status,0,c
 20745                           
 20746                           ; BSR set to: 0
 20747                           ;encoder.c: 187: savesMenu.selector++;
 20748  000522  2BE1               	incf	(_savesMenu+2)& (0+255),f,b
 20749  000524                     l860:
 20750                           
 20751                           ; BSR set to: 0
 20752                           ;encoder.c: 188: }
 20753                           ;encoder.c: 189: }
 20754                           ;encoder.c: 191: if (which_screen == ARPEGGIATOR_MENU) {
 20755                           
 20756                           ; BSR set to: 0
 20757                           
 20758                           ; BSR set to: 0
 20759  000524  0E19               	movlw	25
 20760  000526  19F9               	xorwf	_which_screen& (0+255),w,b
 20761  000528  A4D8               	btfss	status,2,c
 20762  00052A  D018               	goto	l862
 20763                           
 20764                           ; BSR set to: 0
 20765                           ;encoder.c: 192: if(arpeggiatorMenu.selector < (arpeggiatorMenu.number - 1)){
 20766  00052C  0EFF               	movlw	255
 20767  00052E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20768  000530  0EFF               	movlw	255
 20769  000532  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20770  000534  503B               	movf	_arpeggiatorMenu,w,c
 20771  000536  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20772  000538  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20773  00053A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20774  00053C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20775  00053E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20776  000540  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20777  000542  503D               	movf	_arpeggiatorMenu+2,w,c
 20778  000544  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20779  000546  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20780  000548  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20781  00054A  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20782  00054C  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20783  00054E  0A80               	xorlw	128
 20784  000550  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20785  000552  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20786  000554  0A80               	xorlw	128
 20787  000556  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20788  000558  A0D8               	btfss	status,0,c
 20789                           
 20790                           ; BSR set to: 0
 20791                           ;encoder.c: 193: arpeggiatorMenu.selector++;
 20792  00055A  2A3D               	incf	_arpeggiatorMenu+2,f,c
 20793  00055C                     l862:
 20794                           
 20795                           ; BSR set to: 0
 20796                           ;encoder.c: 194: }
 20797                           ;encoder.c: 195: }
 20798                           ;encoder.c: 197: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 20799                           
 20800                           ; BSR set to: 0
 20801                           
 20802                           ; BSR set to: 0
 20803  00055C  0E1A               	movlw	26
 20804  00055E  19F9               	xorwf	_which_screen& (0+255),w,b
 20805  000560  A4D8               	btfss	status,2,c
 20806  000562  D003               	goto	l863
 20807                           
 20808                           ; BSR set to: 0
 20809                           ;encoder.c: 198: arpeggiatorOnOffMenu.selector ^= 1;
 20810  000564  0E01               	movlw	1
 20811  000566  0101               	movlb	1	; () banked
 20812  000568  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 20813  00056A                     l863:
 20814                           
 20815                           ;encoder.c: 202: }
 20816                           ;encoder.c: 203: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 20817  00056A  0E1B               	movlw	27
 20818  00056C  0100               	movlb	0	; () banked
 20819  00056E  19F9               	xorwf	_which_screen& (0+255),w,b
 20820  000570  A4D8               	btfss	status,2,c
 20821  000572  D005               	goto	l865
 20822                           
 20823                           ; BSR set to: 0
 20824                           ;encoder.c: 204: if(arpeggiatorTempoMenu.selector < 250){
 20825  000574  0EFA               	movlw	250
 20826  000576  0101               	movlb	1	; () banked
 20827  000578  6134               	cpfslt	(_arpeggiatorTempoMenu+2)& (0+255),b
 20828  00057A  D001               	goto	l865
 20829                           
 20830                           ; BSR set to: 1
 20831                           ;encoder.c: 205: arpeggiatorTempoMenu.selector++;
 20832  00057C  2B34               	incf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 20833  00057E                     l865:
 20834                           
 20835                           ;encoder.c: 206: }
 20836                           ;encoder.c: 207: }
 20837                           ;encoder.c: 208: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 20838                           
 20839                           ; BSR set to: 1
 20840                           
 20841                           ; BSR set to: 1
 20842  00057E  0E1C               	movlw	28
 20843  000580  0100               	movlb	0	; () banked
 20844  000582  19F9               	xorwf	_which_screen& (0+255),w,b
 20845  000584  A4D8               	btfss	status,2,c
 20846  000586  D005               	goto	l867
 20847                           
 20848                           ; BSR set to: 0
 20849                           ;encoder.c: 209: if(arpeggiatorOctavesMenu.selector < 4){
 20850  000588  0E04               	movlw	4
 20851  00058A  0101               	movlb	1	; () banked
 20852  00058C  6131               	cpfslt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 20853  00058E  D001               	goto	l867
 20854                           
 20855                           ; BSR set to: 1
 20856                           ;encoder.c: 210: arpeggiatorOctavesMenu.selector++;
 20857  000590  2B31               	incf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 20858  000592                     l867:
 20859                           
 20860                           ;encoder.c: 211: }
 20861                           ;encoder.c: 212: }
 20862                           ;encoder.c: 213: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 20863                           
 20864                           ; BSR set to: 1
 20865                           
 20866                           ; BSR set to: 1
 20867  000592  0E1D               	movlw	29
 20868  000594  0100               	movlb	0	; () banked
 20869  000596  19F9               	xorwf	_which_screen& (0+255),w,b
 20870  000598  A4D8               	btfss	status,2,c
 20871  00059A  D01E               	goto	l869
 20872                           
 20873                           ; BSR set to: 0
 20874                           ;encoder.c: 214: if(arpeggiatorTypeMenu.selector < (arpeggiatorTypeMenu.number - 1)){
 20875  00059C  0EFF               	movlw	255
 20876  00059E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20877  0005A0  0EFF               	movlw	255
 20878  0005A2  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20879  0005A4  0101               	movlb	1	; () banked
 20880  0005A6  512C               	movf	_arpeggiatorTypeMenu& (0+255),w,b
 20881  0005A8  0100               	movlb	0	; () banked
 20882  0005AA  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20883  0005AC  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20884  0005AE  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20885  0005B0  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20886  0005B2  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20887  0005B4  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20888  0005B6  0101               	movlb	1	; () banked
 20889  0005B8  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 20890  0005BA  0100               	movlb	0	; () banked
 20891  0005BC  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20892  0005BE  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20893  0005C0  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20894  0005C2  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20895  0005C4  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20896  0005C6  0A80               	xorlw	128
 20897  0005C8  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20898  0005CA  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20899  0005CC  0A80               	xorlw	128
 20900  0005CE  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20901  0005D0  B0D8               	btfsc	status,0,c
 20902  0005D2  D002               	goto	l869
 20903                           
 20904                           ; BSR set to: 0
 20905                           ;encoder.c: 215: arpeggiatorTypeMenu.selector++;
 20906  0005D4  0101               	movlb	1	; () banked
 20907  0005D6  2B2E               	incf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 20908  0005D8                     l869:
 20909                           
 20910                           ;encoder.c: 216: }
 20911                           ;encoder.c: 217: }
 20912                           ;encoder.c: 218: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 20913                           
 20914                           ; BSR set to: 1
 20915                           
 20916                           ; BSR set to: 1
 20917  0005D8  0E1E               	movlw	30
 20918  0005DA  0100               	movlb	0	; () banked
 20919  0005DC  19F9               	xorwf	_which_screen& (0+255),w,b
 20920  0005DE  A4D8               	btfss	status,2,c
 20921  0005E0  D01E               	goto	l871
 20922                           
 20923                           ; BSR set to: 0
 20924                           ;encoder.c: 219: if(arpeggiatorNoteLengthMenu.selector < (arpeggiatorNoteLengthMenu.numb
      +                          er - 1)){
 20925  0005E2  0EFF               	movlw	255
 20926  0005E4  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20927  0005E6  0EFF               	movlw	255
 20928  0005E8  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20929  0005EA  0101               	movlb	1	; () banked
 20930  0005EC  5129               	movf	_arpeggiatorNoteLengthMenu& (0+255),w,b
 20931  0005EE  0100               	movlb	0	; () banked
 20932  0005F0  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20933  0005F2  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20934  0005F4  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20935  0005F6  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20936  0005F8  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20937  0005FA  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20938  0005FC  0101               	movlb	1	; () banked
 20939  0005FE  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 20940  000600  0100               	movlb	0	; () banked
 20941  000602  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20942  000604  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20943  000606  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20944  000608  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20945  00060A  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20946  00060C  0A80               	xorlw	128
 20947  00060E  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20948  000610  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20949  000612  0A80               	xorlw	128
 20950  000614  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20951  000616  B0D8               	btfsc	status,0,c
 20952  000618  D002               	goto	l871
 20953                           
 20954                           ; BSR set to: 0
 20955                           ;encoder.c: 220: arpeggiatorNoteLengthMenu.selector++;
 20956  00061A  0101               	movlb	1	; () banked
 20957  00061C  2B2B               	incf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 20958  00061E                     l871:
 20959                           
 20960                           ;encoder.c: 221: }
 20961                           ;encoder.c: 222: }
 20962                           ;encoder.c: 223: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 20963                           
 20964                           ; BSR set to: 1
 20965                           
 20966                           ; BSR set to: 1
 20967  00061E  0E1F               	movlw	31
 20968  000620  0100               	movlb	0	; () banked
 20969  000622  19F9               	xorwf	_which_screen& (0+255),w,b
 20970  000624  A4D8               	btfss	status,2,c
 20971  000626  D01E               	goto	l873
 20972                           
 20973                           ; BSR set to: 0
 20974                           ;encoder.c: 225: if(arpeggiatorLatchMenu.selector < (arpeggiatorLatchMenu.number - 1)){
 20975  000628  0EFF               	movlw	255
 20976  00062A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20977  00062C  0EFF               	movlw	255
 20978  00062E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20979  000630  0101               	movlb	1	; () banked
 20980  000632  5126               	movf	_arpeggiatorLatchMenu& (0+255),w,b
 20981  000634  0100               	movlb	0	; () banked
 20982  000636  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20983  000638  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20984  00063A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20985  00063C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20986  00063E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20987  000640  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20988  000642  0101               	movlb	1	; () banked
 20989  000644  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 20990  000646  0100               	movlb	0	; () banked
 20991  000648  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20992  00064A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20993  00064C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20994  00064E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20995  000650  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20996  000652  0A80               	xorlw	128
 20997  000654  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20998  000656  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20999  000658  0A80               	xorlw	128
 21000  00065A  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21001  00065C  B0D8               	btfsc	status,0,c
 21002  00065E  D002               	goto	l873
 21003                           
 21004                           ; BSR set to: 0
 21005                           ;encoder.c: 226: arpeggiatorLatchMenu.selector++;
 21006  000660  0101               	movlb	1	; () banked
 21007  000662  2B28               	incf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 21008  000664                     l873:
 21009                           
 21010                           ;encoder.c: 227: }
 21011                           ;encoder.c: 228: }
 21012                           ;encoder.c: 229: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 21013                           
 21014                           ; BSR set to: 1
 21015                           
 21016                           ; BSR set to: 1
 21017  000664  0E20               	movlw	32
 21018  000666  0100               	movlb	0	; () banked
 21019  000668  19F9               	xorwf	_which_screen& (0+255),w,b
 21020  00066A  A4D8               	btfss	status,2,c
 21021  00066C  D003               	goto	l874
 21022                           
 21023                           ; BSR set to: 0
 21024                           ;encoder.c: 230: arpeggiatorLatchOnOffMenu.selector ^= 1;
 21025  00066E  0E01               	movlw	1
 21026  000670  0101               	movlb	1	; () banked
 21027  000672  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 21028  000674                     l874:
 21029                           
 21030                           ;encoder.c: 231: }
 21031                           ;encoder.c: 232: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 21032  000674  0E21               	movlw	33
 21033  000676  0100               	movlb	0	; () banked
 21034  000678  19F9               	xorwf	_which_screen& (0+255),w,b
 21035  00067A  A4D8               	btfss	status,2,c
 21036  00067C  D003               	goto	l875
 21037                           
 21038                           ; BSR set to: 0
 21039                           ;encoder.c: 233: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 21040  00067E  0E01               	movlw	1
 21041  000680  0101               	movlb	1	; () banked
 21042  000682  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 21043  000684                     l875:
 21044                           
 21045                           ;encoder.c: 234: }
 21046                           ;encoder.c: 235: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 21047  000684  0E22               	movlw	34
 21048  000686  0100               	movlb	0	; () banked
 21049  000688  19F9               	xorwf	_which_screen& (0+255),w,b
 21050  00068A  A4D8               	btfss	status,2,c
 21051  00068C  D003               	goto	l876
 21052                           
 21053                           ; BSR set to: 0
 21054                           ;encoder.c: 236: arpeggiatorUnLatchModeMenu.selector ^= 1;
 21055  00068E  0E01               	movlw	1
 21056  000690  0101               	movlb	1	; () banked
 21057  000692  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 21058  000694                     l876:
 21059                           
 21060                           ;encoder.c: 237: }
 21061                           ;encoder.c: 238: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 21062  000694  0E23               	movlw	35
 21063  000696  0100               	movlb	0	; () banked
 21064  000698  19F9               	xorwf	_which_screen& (0+255),w,b
 21065  00069A  A4D8               	btfss	status,2,c
 21066  00069C  D01E               	goto	l878
 21067                           
 21068                           ; BSR set to: 0
 21069                           ;encoder.c: 239: if(arpeggiatorRandomizeSkipMenu.selector < (arpeggiatorRandomizeSkipMen
      +                          u.number - 1)){
 21070  00069E  0EFF               	movlw	255
 21071  0006A0  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21072  0006A2  0EFF               	movlw	255
 21073  0006A4  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21074  0006A6  0101               	movlb	1	; () banked
 21075  0006A8  511A               	movf	_arpeggiatorRandomizeSkipMenu& (0+255),w,b
 21076  0006AA  0100               	movlb	0	; () banked
 21077  0006AC  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21078  0006AE  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21079  0006B0  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21080  0006B2  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21081  0006B4  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21082  0006B6  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21083  0006B8  0101               	movlb	1	; () banked
 21084  0006BA  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 21085  0006BC  0100               	movlb	0	; () banked
 21086  0006BE  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21087  0006C0  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21088  0006C2  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21089  0006C4  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21090  0006C6  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21091  0006C8  0A80               	xorlw	128
 21092  0006CA  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21093  0006CC  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21094  0006CE  0A80               	xorlw	128
 21095  0006D0  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21096  0006D2  B0D8               	btfsc	status,0,c
 21097  0006D4  D002               	goto	l878
 21098                           
 21099                           ; BSR set to: 0
 21100                           ;encoder.c: 240: arpeggiatorRandomizeSkipMenu.selector++;
 21101  0006D6  0101               	movlb	1	; () banked
 21102  0006D8  2B1C               	incf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 21103  0006DA                     l878:
 21104                           
 21105                           ;encoder.c: 241: }
 21106                           ;encoder.c: 242: }
 21107                           ;encoder.c: 243: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 21108                           
 21109                           ; BSR set to: 1
 21110                           
 21111                           ; BSR set to: 1
 21112  0006DA  0E24               	movlw	36
 21113  0006DC  0100               	movlb	0	; () banked
 21114  0006DE  19F9               	xorwf	_which_screen& (0+255),w,b
 21115  0006E0  A4D8               	btfss	status,2,c
 21116  0006E2  D003               	goto	l879
 21117                           
 21118                           ; BSR set to: 0
 21119                           ;encoder.c: 244: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 21120  0006E4  0E01               	movlw	1
 21121  0006E6  0101               	movlb	1	; () banked
 21122  0006E8  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 21123  0006EA                     l879:
 21124                           
 21125                           ;encoder.c: 248: }
 21126                           ;encoder.c: 249: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 21127  0006EA  0E25               	movlw	37
 21128  0006EC  0100               	movlb	0	; () banked
 21129  0006EE  19F9               	xorwf	_which_screen& (0+255),w,b
 21130  0006F0  A4D8               	btfss	status,2,c
 21131  0006F2  D003               	goto	l880
 21132                           
 21133                           ; BSR set to: 0
 21134                           ;encoder.c: 250: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 21135  0006F4  0E01               	movlw	1
 21136  0006F6  0101               	movlb	1	; () banked
 21137  0006F8  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 21138  0006FA                     l880:
 21139                           
 21140                           ;encoder.c: 251: }
 21141                           ;encoder.c: 252: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 21142  0006FA  0E26               	movlw	38
 21143  0006FC  0100               	movlb	0	; () banked
 21144  0006FE  19F9               	xorwf	_which_screen& (0+255),w,b
 21145  000700  A4D8               	btfss	status,2,c
 21146  000702  D018               	goto	l882
 21147                           
 21148                           ; BSR set to: 0
 21149                           ;encoder.c: 253: if(arpeggiatorLastNoteModeMenu.selector < (arpeggiatorLastNoteModeMenu.
      +                          number - 1)){
 21150  000704  0EFF               	movlw	255
 21151  000706  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21152  000708  0EFF               	movlw	255
 21153  00070A  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21154  00070C  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 21155  00070E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21156  000710  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21157  000712  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21158  000714  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21159  000716  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21160  000718  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21161  00071A  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 21162  00071C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21163  00071E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21164  000720  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21165  000722  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21166  000724  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21167  000726  0A80               	xorlw	128
 21168  000728  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21169  00072A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21170  00072C  0A80               	xorlw	128
 21171  00072E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21172  000730  A0D8               	btfss	status,0,c
 21173                           
 21174                           ; BSR set to: 0
 21175                           ;encoder.c: 254: arpeggiatorLastNoteModeMenu.selector++;
 21176  000732  2BDE               	incf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 21177  000734                     l882:
 21178                           
 21179                           ; BSR set to: 0
 21180                           ;encoder.c: 255: }
 21181                           ;encoder.c: 256: }
 21182                           ;encoder.c: 257: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 21183                           
 21184                           ; BSR set to: 0
 21185                           
 21186                           ; BSR set to: 0
 21187  000734  0E27               	movlw	39
 21188  000736  19F9               	xorwf	_which_screen& (0+255),w,b
 21189  000738  A4D8               	btfss	status,2,c
 21190  00073A  D003               	goto	l883
 21191                           
 21192                           ; BSR set to: 0
 21193                           ;encoder.c: 258: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 21194  00073C  0E01               	movlw	1
 21195  00073E  0101               	movlb	1	; () banked
 21196  000740  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 21197  000742                     l883:
 21198                           
 21199                           ;encoder.c: 259: }
 21200                           ;encoder.c: 260: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 21201  000742  0E28               	movlw	40
 21202  000744  0100               	movlb	0	; () banked
 21203  000746  19F9               	xorwf	_which_screen& (0+255),w,b
 21204  000748  A4D8               	btfss	status,2,c
 21205  00074A  D003               	goto	l884
 21206                           
 21207                           ; BSR set to: 0
 21208                           ;encoder.c: 261: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 21209  00074C  0E01               	movlw	1
 21210  00074E  0101               	movlb	1	; () banked
 21211  000750  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 21212  000752                     l884:
 21213                           
 21214                           ;encoder.c: 262: }
 21215                           ;encoder.c: 263: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 21216  000752  0E29               	movlw	41
 21217  000754  0100               	movlb	0	; () banked
 21218  000756  19F9               	xorwf	_which_screen& (0+255),w,b
 21219  000758  A4D8               	btfss	status,2,c
 21220  00075A  D003               	goto	l885
 21221                           
 21222                           ; BSR set to: 0
 21223                           ;encoder.c: 264: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 21224  00075C  0E01               	movlw	1
 21225  00075E  0101               	movlb	1	; () banked
 21226  000760  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 21227  000762                     l885:
 21228                           
 21229                           ;encoder.c: 265: }
 21230                           ;encoder.c: 266: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 21231  000762  0E2A               	movlw	42
 21232  000764  0100               	movlb	0	; () banked
 21233  000766  19F9               	xorwf	_which_screen& (0+255),w,b
 21234  000768  A4D8               	btfss	status,2,c
 21235  00076A  D003               	goto	l886
 21236                           
 21237                           ; BSR set to: 0
 21238                           ;encoder.c: 267: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 21239  00076C  0E01               	movlw	1
 21240  00076E  0101               	movlb	1	; () banked
 21241  000770  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 21242  000772                     l886:
 21243                           
 21244                           ;encoder.c: 268: }
 21245                           ;encoder.c: 269: }
 21246                           ;encoder.c: 272: if (encoder_direction == 0x20) {
 21247                           
 21248                           ; BSR set to: 1
 21249  000772  0E20               	movlw	32
 21250  000774  0100               	movlb	0	; () banked
 21251  000776  19EB               	xorwf	_encoder_direction& (0+255),w,b
 21252  000778  A4D8               	btfss	status,2,c
 21253  00077A  D15F               	goto	l960
 21254                           
 21255                           ; BSR set to: 0
 21256                           ;encoder.c: 274: lcd_print_once = 0;
 21257  00077C  9C35               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 21258                           
 21259                           ; BSR set to: 0
 21260                           ;encoder.c: 277: if (which_screen == MAIN_MENU) {
 21261  00077E  0E02               	movlw	2
 21262  000780  19F9               	xorwf	_which_screen& (0+255),w,b
 21263  000782  A4D8               	btfss	status,2,c
 21264  000784  D004               	goto	l889
 21265                           
 21266                           ; BSR set to: 0
 21267                           ;encoder.c: 278: if(mainMenu.selector > 0){
 21268  000786  0101               	movlb	1	; () banked
 21269  000788  516A               	movf	(_mainMenu+2)& (0+255),w,b
 21270  00078A  A4D8               	btfss	status,2,c
 21271                           
 21272                           ; BSR set to: 1
 21273                           ;encoder.c: 279: mainMenu.selector--;
 21274  00078C  076A               	decf	(_mainMenu+2)& (0+255),f,b
 21275  00078E                     l889:
 21276                           
 21277                           ;encoder.c: 280: }
 21278                           ;encoder.c: 281: }
 21279                           ;encoder.c: 282: if (which_screen == KEYBOARD_MENU) {
 21280                           
 21281                           ; BSR set to: 1
 21282                           
 21283                           ; BSR set to: 1
 21284  00078E  0E03               	movlw	3
 21285  000790  0100               	movlb	0	; () banked
 21286  000792  19F9               	xorwf	_which_screen& (0+255),w,b
 21287  000794  A4D8               	btfss	status,2,c
 21288  000796  D003               	goto	l891
 21289                           
 21290                           ; BSR set to: 0
 21291                           ;encoder.c: 283: if(keyboardMenu.selector > 0){
 21292  000798  504C               	movf	_keyboardMenu+2,w,c
 21293  00079A  A4D8               	btfss	status,2,c
 21294                           
 21295                           ; BSR set to: 0
 21296                           ;encoder.c: 284: keyboardMenu.selector--;
 21297  00079C  064C               	decf	_keyboardMenu+2,f,c
 21298  00079E                     l891:
 21299                           
 21300                           ; BSR set to: 0
 21301                           ;encoder.c: 285: }
 21302                           ;encoder.c: 286: }
 21303                           ;encoder.c: 287: if (which_screen == TRANSPOSE_MENU) {
 21304                           
 21305                           ; BSR set to: 0
 21306                           
 21307                           ; BSR set to: 0
 21308  00079E  0E04               	movlw	4
 21309  0007A0  19F9               	xorwf	_which_screen& (0+255),w,b
 21310  0007A2  A4D8               	btfss	status,2,c
 21311  0007A4  D004               	goto	l893
 21312                           
 21313                           ; BSR set to: 0
 21314                           ;encoder.c: 288: if(transposeMenu.selector > 0){
 21315  0007A6  0101               	movlb	1	; () banked
 21316  0007A8  5164               	movf	(_transposeMenu+2)& (0+255),w,b
 21317  0007AA  A4D8               	btfss	status,2,c
 21318                           
 21319                           ; BSR set to: 1
 21320                           ;encoder.c: 289: transposeMenu.selector--;
 21321  0007AC  0764               	decf	(_transposeMenu+2)& (0+255),f,b
 21322  0007AE                     l893:
 21323                           
 21324                           ;encoder.c: 290: }
 21325                           ;encoder.c: 291: }
 21326                           ;encoder.c: 292: if (which_screen == DRUM_MENU) {
 21327                           
 21328                           ; BSR set to: 1
 21329                           
 21330                           ; BSR set to: 1
 21331  0007AE  0E05               	movlw	5
 21332  0007B0  0100               	movlb	0	; () banked
 21333  0007B2  19F9               	xorwf	_which_screen& (0+255),w,b
 21334  0007B4  A4D8               	btfss	status,2,c
 21335  0007B6  D003               	goto	l895
 21336                           
 21337                           ; BSR set to: 0
 21338                           ;encoder.c: 293: if(drumMenu.selector > 0){
 21339  0007B8  5043               	movf	_drumMenu+2,w,c
 21340  0007BA  A4D8               	btfss	status,2,c
 21341                           
 21342                           ; BSR set to: 0
 21343                           ;encoder.c: 294: drumMenu.selector--;
 21344  0007BC  0643               	decf	_drumMenu+2,f,c
 21345  0007BE                     l895:
 21346                           
 21347                           ; BSR set to: 0
 21348                           ;encoder.c: 295: }
 21349                           ;encoder.c: 296: }
 21350                           ;encoder.c: 297: if (which_screen == POTENTIOMETER_MENU) {
 21351                           
 21352                           ; BSR set to: 0
 21353                           
 21354                           ; BSR set to: 0
 21355  0007BE  0E06               	movlw	6
 21356  0007C0  19F9               	xorwf	_which_screen& (0+255),w,b
 21357  0007C2  A4D8               	btfss	status,2,c
 21358  0007C4  D003               	goto	l897
 21359                           
 21360                           ; BSR set to: 0
 21361                           ;encoder.c: 298: if(potsMenu.selector > 0){
 21362  0007C6  5040               	movf	_potsMenu+2,w,c
 21363  0007C8  A4D8               	btfss	status,2,c
 21364                           
 21365                           ; BSR set to: 0
 21366                           ;encoder.c: 299: potsMenu.selector--;
 21367  0007CA  0640               	decf	_potsMenu+2,f,c
 21368  0007CC                     l897:
 21369                           
 21370                           ; BSR set to: 0
 21371                           ;encoder.c: 300: }
 21372                           ;encoder.c: 301: }
 21373                           ;encoder.c: 302: if (which_screen == MIDI_CHANNEL_MENU) {
 21374                           
 21375                           ; BSR set to: 0
 21376                           
 21377                           ; BSR set to: 0
 21378  0007CC  0E07               	movlw	7
 21379  0007CE  19F9               	xorwf	_which_screen& (0+255),w,b
 21380  0007D0  A4D8               	btfss	status,2,c
 21381  0007D2  D004               	goto	l899
 21382                           
 21383                           ; BSR set to: 0
 21384                           ;encoder.c: 303: if(midiChannelMenu.selector > 0){
 21385  0007D4  0101               	movlb	1	; () banked
 21386  0007D6  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 21387  0007D8  A4D8               	btfss	status,2,c
 21388                           
 21389                           ; BSR set to: 1
 21390                           ;encoder.c: 304: midiChannelMenu.selector--;
 21391  0007DA  0749               	decf	(_midiChannelMenu+2)& (0+255),f,b
 21392  0007DC                     l899:
 21393                           
 21394                           ;encoder.c: 305: }
 21395                           ;encoder.c: 306: }
 21396                           ;encoder.c: 308: if (which_screen == MODES_MENU) {
 21397                           
 21398                           ; BSR set to: 1
 21399                           
 21400                           ; BSR set to: 1
 21401  0007DC  0E09               	movlw	9
 21402  0007DE  0100               	movlb	0	; () banked
 21403  0007E0  19F9               	xorwf	_which_screen& (0+255),w,b
 21404  0007E2  A4D8               	btfss	status,2,c
 21405  0007E4  D003               	goto	l901
 21406                           
 21407                           ; BSR set to: 0
 21408                           ;encoder.c: 309: if(modeMenu.selector > 0){
 21409  0007E6  5049               	movf	_modeMenu+2,w,c
 21410  0007E8  A4D8               	btfss	status,2,c
 21411                           
 21412                           ; BSR set to: 0
 21413                           ;encoder.c: 310: modeMenu.selector--;
 21414  0007EA  0649               	decf	_modeMenu+2,f,c
 21415  0007EC                     l901:
 21416                           
 21417                           ; BSR set to: 0
 21418                           ;encoder.c: 311: }
 21419                           ;encoder.c: 312: }
 21420                           ;encoder.c: 314: if (which_screen == TRIADS_MENU) {
 21421                           
 21422                           ; BSR set to: 0
 21423                           
 21424                           ; BSR set to: 0
 21425  0007EC  0E0A               	movlw	10
 21426  0007EE  19F9               	xorwf	_which_screen& (0+255),w,b
 21427  0007F0  A4D8               	btfss	status,2,c
 21428  0007F2  D003               	goto	l903
 21429                           
 21430                           ; BSR set to: 0
 21431                           ;encoder.c: 315: if(triadMenu.selector > 0){
 21432  0007F4  5046               	movf	_triadMenu+2,w,c
 21433  0007F6  A4D8               	btfss	status,2,c
 21434                           
 21435                           ; BSR set to: 0
 21436                           ;encoder.c: 316: triadMenu.selector--;
 21437  0007F8  0646               	decf	_triadMenu+2,f,c
 21438  0007FA                     l903:
 21439                           
 21440                           ; BSR set to: 0
 21441                           ;encoder.c: 317: }
 21442                           ;encoder.c: 318: }
 21443                           ;encoder.c: 319: if (which_screen == SEVENTHS_MENU) {
 21444                           
 21445                           ; BSR set to: 0
 21446                           
 21447                           ; BSR set to: 0
 21448  0007FA  0E0B               	movlw	11
 21449  0007FC  19F9               	xorwf	_which_screen& (0+255),w,b
 21450  0007FE  A4D8               	btfss	status,2,c
 21451  000800  D004               	goto	l905
 21452                           
 21453                           ; BSR set to: 0
 21454                           ;encoder.c: 320: if(seventhMenu.selector > 0){
 21455  000802  0101               	movlb	1	; () banked
 21456  000804  5167               	movf	(_seventhMenu+2)& (0+255),w,b
 21457  000806  A4D8               	btfss	status,2,c
 21458                           
 21459                           ; BSR set to: 1
 21460                           ;encoder.c: 321: seventhMenu.selector--;
 21461  000808  0767               	decf	(_seventhMenu+2)& (0+255),f,b
 21462  00080A                     l905:
 21463                           
 21464                           ;encoder.c: 322: }
 21465                           ;encoder.c: 323: }
 21466                           ;encoder.c: 324: if (which_screen == DRUMS_CC_TYPE_MENU) {
 21467                           
 21468                           ; BSR set to: 1
 21469                           
 21470                           ; BSR set to: 1
 21471  00080A  0E0C               	movlw	12
 21472  00080C  0100               	movlb	0	; () banked
 21473  00080E  19F9               	xorwf	_which_screen& (0+255),w,b
 21474  000810  A4D8               	btfss	status,2,c
 21475  000812  D004               	goto	l907
 21476                           
 21477                           ; BSR set to: 0
 21478                           ;encoder.c: 325: if(drumCCTypeMenu.selector > 0){
 21479  000814  0101               	movlb	1	; () banked
 21480  000816  5161               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 21481  000818  A4D8               	btfss	status,2,c
 21482                           
 21483                           ; BSR set to: 1
 21484                           ;encoder.c: 326: drumCCTypeMenu.selector--;
 21485  00081A  0761               	decf	(_drumCCTypeMenu+2)& (0+255),f,b
 21486  00081C                     l907:
 21487                           
 21488                           ;encoder.c: 327: }
 21489                           ;encoder.c: 328: }
 21490                           ;encoder.c: 330: if (which_screen == DRUMS_NN_MENU) {
 21491                           
 21492                           ; BSR set to: 1
 21493                           
 21494                           ; BSR set to: 1
 21495  00081C  0E0D               	movlw	13
 21496  00081E  0100               	movlb	0	; () banked
 21497  000820  19F9               	xorwf	_which_screen& (0+255),w,b
 21498  000822  A4D8               	btfss	status,2,c
 21499  000824  D004               	goto	l909
 21500                           
 21501                           ; BSR set to: 0
 21502                           ;encoder.c: 331: if(drumNNMenu.selector > 0){
 21503  000826  0101               	movlb	1	; () banked
 21504  000828  515E               	movf	(_drumNNMenu+2)& (0+255),w,b
 21505  00082A  A4D8               	btfss	status,2,c
 21506                           
 21507                           ; BSR set to: 1
 21508                           ;encoder.c: 332: drumNNMenu.selector--;
 21509  00082C  075E               	decf	(_drumNNMenu+2)& (0+255),f,b
 21510  00082E                     l909:
 21511                           
 21512                           ;encoder.c: 333: }
 21513                           ;encoder.c: 334: }
 21514                           ;encoder.c: 336: if (which_screen == DRUMS_CC_MENU) {
 21515                           
 21516                           ; BSR set to: 1
 21517                           
 21518                           ; BSR set to: 1
 21519  00082E  0E0E               	movlw	14
 21520  000830  0100               	movlb	0	; () banked
 21521  000832  19F9               	xorwf	_which_screen& (0+255),w,b
 21522  000834  A4D8               	btfss	status,2,c
 21523  000836  D004               	goto	l911
 21524                           
 21525                           ; BSR set to: 0
 21526                           ;encoder.c: 337: if(drumCCMenu.selector > 0){
 21527  000838  0101               	movlb	1	; () banked
 21528  00083A  515B               	movf	(_drumCCMenu+2)& (0+255),w,b
 21529  00083C  A4D8               	btfss	status,2,c
 21530                           
 21531                           ; BSR set to: 1
 21532                           ;encoder.c: 338: drumCCMenu.selector--;
 21533  00083E  075B               	decf	(_drumCCMenu+2)& (0+255),f,b
 21534  000840                     l911:
 21535                           
 21536                           ;encoder.c: 339: }
 21537                           ;encoder.c: 340: }
 21538                           ;encoder.c: 342: if (which_screen == POTS_RES_MENU) {
 21539                           
 21540                           ; BSR set to: 1
 21541                           
 21542                           ; BSR set to: 1
 21543  000840  0E0F               	movlw	15
 21544  000842  0100               	movlb	0	; () banked
 21545  000844  19F9               	xorwf	_which_screen& (0+255),w,b
 21546  000846  A4D8               	btfss	status,2,c
 21547  000848  D004               	goto	l913
 21548                           
 21549                           ; BSR set to: 0
 21550                           ;encoder.c: 343: if(potsResoMenu.selector > 0){
 21551  00084A  0101               	movlb	1	; () banked
 21552  00084C  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 21553  00084E  A4D8               	btfss	status,2,c
 21554                           
 21555                           ; BSR set to: 1
 21556                           ;encoder.c: 344: potsResoMenu.selector--;
 21557  000850  0758               	decf	(_potsResoMenu+2)& (0+255),f,b
 21558  000852                     l913:
 21559                           
 21560                           ;encoder.c: 345: }
 21561                           ;encoder.c: 346: }
 21562                           ;encoder.c: 348: if (which_screen == ENCODER_POLARITY_MENU) {
 21563                           
 21564                           ; BSR set to: 1
 21565                           
 21566                           ; BSR set to: 1
 21567  000852  0E18               	movlw	24
 21568  000854  0100               	movlb	0	; () banked
 21569  000856  19F9               	xorwf	_which_screen& (0+255),w,b
 21570  000858  A4D8               	btfss	status,2,c
 21571  00085A  D006               	goto	l915
 21572                           
 21573                           ; BSR set to: 0
 21574                           ;encoder.c: 349: if(encoderPolarityMenu.selector == 1){
 21575  00085C  0101               	movlb	1	; () banked
 21576  00085E  053A               	decf	(_encoderPolarityMenu+2)& (0+255),w,b
 21577  000860  A4D8               	btfss	status,2,c
 21578  000862  D002               	goto	l915
 21579                           
 21580                           ; BSR set to: 1
 21581                           ;encoder.c: 350: encoderPolarityMenu.selector = 0;
 21582  000864  0E00               	movlw	0
 21583  000866  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 21584  000868                     l915:
 21585                           
 21586                           ;encoder.c: 351: }
 21587                           ;encoder.c: 352: }
 21588                           ;encoder.c: 354: if (which_screen == POTS_ALPHA_MENU) {
 21589                           
 21590                           ; BSR set to: 1
 21591                           
 21592                           ; BSR set to: 1
 21593  000868  0E10               	movlw	16
 21594  00086A  0100               	movlb	0	; () banked
 21595  00086C  19F9               	xorwf	_which_screen& (0+255),w,b
 21596  00086E  A4D8               	btfss	status,2,c
 21597  000870  D006               	goto	l917
 21598                           
 21599                           ; BSR set to: 0
 21600                           ;encoder.c: 355: if(potsAlphaMenu.selector >= 15){
 21601  000872  0E0E               	movlw	14
 21602  000874  0101               	movlb	1	; () banked
 21603  000876  6555               	cpfsgt	(_potsAlphaMenu+2)& (0+255),b
 21604  000878  D002               	goto	l917
 21605                           
 21606                           ; BSR set to: 1
 21607                           ;encoder.c: 356: potsAlphaMenu.selector -= 5;
 21608  00087A  0E05               	movlw	5
 21609  00087C  5F55               	subwf	(_potsAlphaMenu+2)& (0+255),f,b
 21610  00087E                     l917:
 21611                           
 21612                           ;encoder.c: 361: if(potsCCMenu.selector > -2){
 21613                           
 21614                           ; BSR set to: 1
 21615  00087E  0E11               	movlw	17
 21616  000880  0100               	movlb	0	; () banked
 21617  000882  19F9               	xorwf	_which_screen& (0+255),w,b
 21618  000884  A4D8               	btfss	status,2,c
 21619  000886  D002               	goto	l919
 21620                           
 21621                           ; BSR set to: 0
 21622                           ;encoder.c: 362: potsCCMenu.selector--;
 21623  000888  0101               	movlb	1	; () banked
 21624  00088A  0752               	decf	(_potsCCMenu+2)& (0+255),f,b
 21625  00088C                     l919:
 21626                           
 21627                           ;encoder.c: 367: if(slidepotsCCMenu.selector > -2){
 21628                           
 21629                           ; BSR set to: 1
 21630                           
 21631                           ; BSR set to: 1
 21632  00088C  0E12               	movlw	18
 21633  00088E  0100               	movlb	0	; () banked
 21634  000890  19F9               	xorwf	_which_screen& (0+255),w,b
 21635  000892  A4D8               	btfss	status,2,c
 21636  000894  D002               	goto	l921
 21637                           
 21638                           ; BSR set to: 0
 21639                           ;encoder.c: 368: slidepotsCCMenu.selector--;
 21640  000896  0101               	movlb	1	; () banked
 21641  000898  074F               	decf	(_slidepotsCCMenu+2)& (0+255),f,b
 21642  00089A                     l921:
 21643                           
 21644                           ;encoder.c: 369: }
 21645                           ;encoder.c: 370: }
 21646                           ;encoder.c: 371: if (which_screen == PROGRAM_CHANGE_MENU) {
 21647                           
 21648                           ; BSR set to: 1
 21649                           
 21650                           ; BSR set to: 1
 21651  00089A  0E08               	movlw	8
 21652  00089C  0100               	movlb	0	; () banked
 21653  00089E  19F9               	xorwf	_which_screen& (0+255),w,b
 21654  0008A0  A4D8               	btfss	status,2,c
 21655  0008A2  D004               	goto	l923
 21656                           
 21657                           ; BSR set to: 0
 21658                           ;encoder.c: 372: if(programChangeMenu.selector > 0){
 21659  0008A4  0101               	movlb	1	; () banked
 21660  0008A6  5146               	movf	(_programChangeMenu+2)& (0+255),w,b
 21661  0008A8  A4D8               	btfss	status,2,c
 21662                           
 21663                           ; BSR set to: 1
 21664                           ;encoder.c: 373: programChangeMenu.selector--;
 21665  0008AA  0746               	decf	(_programChangeMenu+2)& (0+255),f,b
 21666  0008AC                     l923:
 21667                           
 21668                           ;encoder.c: 374: }
 21669                           ;encoder.c: 375: }
 21670                           ;encoder.c: 377: if (which_screen == MAIN_CH_MENU) {
 21671                           
 21672                           ; BSR set to: 1
 21673                           
 21674                           ; BSR set to: 1
 21675  0008AC  0E14               	movlw	20
 21676  0008AE  0100               	movlb	0	; () banked
 21677  0008B0  19F9               	xorwf	_which_screen& (0+255),w,b
 21678  0008B2  A4D8               	btfss	status,2,c
 21679  0008B4  D004               	goto	l925
 21680                           
 21681                           ; BSR set to: 0
 21682                           ;encoder.c: 378: if(mainChannelMenu.selector > 0){
 21683  0008B6  0101               	movlb	1	; () banked
 21684  0008B8  5143               	movf	(_mainChannelMenu+2)& (0+255),w,b
 21685  0008BA  A4D8               	btfss	status,2,c
 21686                           
 21687                           ; BSR set to: 1
 21688                           ;encoder.c: 379: mainChannelMenu.selector--;
 21689  0008BC  0743               	decf	(_mainChannelMenu+2)& (0+255),f,b
 21690  0008BE                     l925:
 21691                           
 21692                           ;encoder.c: 380: }
 21693                           ;encoder.c: 381: }
 21694                           ;encoder.c: 383: if (which_screen == DRUM_CH_MENU) {
 21695                           
 21696                           ; BSR set to: 1
 21697                           
 21698                           ; BSR set to: 1
 21699  0008BE  0E15               	movlw	21
 21700  0008C0  0100               	movlb	0	; () banked
 21701  0008C2  19F9               	xorwf	_which_screen& (0+255),w,b
 21702  0008C4  A4D8               	btfss	status,2,c
 21703  0008C6  D004               	goto	l927
 21704                           
 21705                           ; BSR set to: 0
 21706                           ;encoder.c: 384: if(drumChannelMenu.selector > 0){
 21707  0008C8  0101               	movlb	1	; () banked
 21708  0008CA  5140               	movf	(_drumChannelMenu+2)& (0+255),w,b
 21709  0008CC  A4D8               	btfss	status,2,c
 21710                           
 21711                           ; BSR set to: 1
 21712                           ;encoder.c: 385: drumChannelMenu.selector--;
 21713  0008CE  0740               	decf	(_drumChannelMenu+2)& (0+255),f,b
 21714  0008D0                     l927:
 21715                           
 21716                           ;encoder.c: 390: if(joystickCCMenu.selector > -2){
 21717                           
 21718                           ; BSR set to: 1
 21719                           
 21720                           ; BSR set to: 1
 21721  0008D0  0E13               	movlw	19
 21722  0008D2  0100               	movlb	0	; () banked
 21723  0008D4  19F9               	xorwf	_which_screen& (0+255),w,b
 21724  0008D6  A4D8               	btfss	status,2,c
 21725  0008D8  D002               	goto	l929
 21726                           
 21727                           ; BSR set to: 0
 21728                           ;encoder.c: 391: joystickCCMenu.selector--;
 21729  0008DA  0101               	movlb	1	; () banked
 21730  0008DC  074C               	decf	(_joystickCCMenu+2)& (0+255),f,b
 21731  0008DE                     l929:
 21732                           
 21733                           ;encoder.c: 392: }
 21734                           ;encoder.c: 393: }
 21735                           ;encoder.c: 394: if (which_screen == EEPROM_MENU) {
 21736                           
 21737                           ; BSR set to: 1
 21738                           
 21739                           ; BSR set to: 1
 21740  0008DE  0E16               	movlw	22
 21741  0008E0  0100               	movlb	0	; () banked
 21742  0008E2  19F9               	xorwf	_which_screen& (0+255),w,b
 21743  0008E4  A4D8               	btfss	status,2,c
 21744  0008E6  D004               	goto	l931
 21745                           
 21746                           ; BSR set to: 0
 21747                           ;encoder.c: 395: if(eepromMenu.selector > 0){
 21748  0008E8  0101               	movlb	1	; () banked
 21749  0008EA  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 21750  0008EC  A4D8               	btfss	status,2,c
 21751                           
 21752                           ; BSR set to: 1
 21753                           ;encoder.c: 396: eepromMenu.selector--;
 21754  0008EE  073D               	decf	(_eepromMenu+2)& (0+255),f,b
 21755  0008F0                     l931:
 21756                           
 21757                           ;encoder.c: 397: }
 21758                           ;encoder.c: 398: }
 21759                           ;encoder.c: 399: if (which_screen == SAVES_MENU) {
 21760                           
 21761                           ; BSR set to: 1
 21762                           
 21763                           ; BSR set to: 1
 21764  0008F0  0E17               	movlw	23
 21765  0008F2  0100               	movlb	0	; () banked
 21766  0008F4  19F9               	xorwf	_which_screen& (0+255),w,b
 21767  0008F6  A4D8               	btfss	status,2,c
 21768  0008F8  D003               	goto	l933
 21769                           
 21770                           ; BSR set to: 0
 21771                           ;encoder.c: 400: if(savesMenu.selector > 0){
 21772  0008FA  51E1               	movf	(_savesMenu+2)& (0+255),w,b
 21773  0008FC  A4D8               	btfss	status,2,c
 21774                           
 21775                           ; BSR set to: 0
 21776                           ;encoder.c: 401: savesMenu.selector--;
 21777  0008FE  07E1               	decf	(_savesMenu+2)& (0+255),f,b
 21778  000900                     l933:
 21779                           
 21780                           ; BSR set to: 0
 21781                           ;encoder.c: 402: }
 21782                           ;encoder.c: 403: }
 21783                           ;encoder.c: 404: if (which_screen == ARPEGGIATOR_MENU) {
 21784                           
 21785                           ; BSR set to: 0
 21786                           
 21787                           ; BSR set to: 0
 21788  000900  0E19               	movlw	25
 21789  000902  19F9               	xorwf	_which_screen& (0+255),w,b
 21790  000904  A4D8               	btfss	status,2,c
 21791  000906  D003               	goto	l935
 21792                           
 21793                           ; BSR set to: 0
 21794                           ;encoder.c: 405: if(arpeggiatorMenu.selector > 0){
 21795  000908  503D               	movf	_arpeggiatorMenu+2,w,c
 21796  00090A  A4D8               	btfss	status,2,c
 21797                           
 21798                           ; BSR set to: 0
 21799                           ;encoder.c: 406: arpeggiatorMenu.selector--;
 21800  00090C  063D               	decf	_arpeggiatorMenu+2,f,c
 21801  00090E                     l935:
 21802                           
 21803                           ; BSR set to: 0
 21804                           ;encoder.c: 407: }
 21805                           ;encoder.c: 408: }
 21806                           ;encoder.c: 409: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 21807                           
 21808                           ; BSR set to: 0
 21809                           
 21810                           ; BSR set to: 0
 21811  00090E  0E1A               	movlw	26
 21812  000910  19F9               	xorwf	_which_screen& (0+255),w,b
 21813  000912  A4D8               	btfss	status,2,c
 21814  000914  D003               	goto	l936
 21815                           
 21816                           ; BSR set to: 0
 21817                           ;encoder.c: 410: arpeggiatorOnOffMenu.selector ^= 1;
 21818  000916  0E01               	movlw	1
 21819  000918  0101               	movlb	1	; () banked
 21820  00091A  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 21821  00091C                     l936:
 21822                           
 21823                           ;encoder.c: 414: }
 21824                           ;encoder.c: 415: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 21825  00091C  0E1B               	movlw	27
 21826  00091E  0100               	movlb	0	; () banked
 21827  000920  19F9               	xorwf	_which_screen& (0+255),w,b
 21828  000922  A4D8               	btfss	status,2,c
 21829  000924  D005               	goto	l938
 21830                           
 21831                           ; BSR set to: 0
 21832                           ;encoder.c: 416: if(arpeggiatorTempoMenu.selector > 25){
 21833  000926  0E19               	movlw	25
 21834  000928  0101               	movlb	1	; () banked
 21835  00092A  6534               	cpfsgt	(_arpeggiatorTempoMenu+2)& (0+255),b
 21836  00092C  D001               	goto	l938
 21837                           
 21838                           ; BSR set to: 1
 21839                           ;encoder.c: 417: arpeggiatorTempoMenu.selector--;
 21840  00092E  0734               	decf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 21841  000930                     l938:
 21842                           
 21843                           ;encoder.c: 418: }
 21844                           ;encoder.c: 419: }
 21845                           ;encoder.c: 420: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 21846                           
 21847                           ; BSR set to: 1
 21848                           
 21849                           ; BSR set to: 1
 21850  000930  0E1C               	movlw	28
 21851  000932  0100               	movlb	0	; () banked
 21852  000934  19F9               	xorwf	_which_screen& (0+255),w,b
 21853  000936  A4D8               	btfss	status,2,c
 21854  000938  D005               	goto	l940
 21855                           
 21856                           ; BSR set to: 0
 21857                           ;encoder.c: 421: if(arpeggiatorOctavesMenu.selector > 1){
 21858  00093A  0E01               	movlw	1
 21859  00093C  0101               	movlb	1	; () banked
 21860  00093E  6531               	cpfsgt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 21861  000940  D001               	goto	l940
 21862                           
 21863                           ; BSR set to: 1
 21864                           ;encoder.c: 422: arpeggiatorOctavesMenu.selector--;
 21865  000942  0731               	decf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 21866  000944                     l940:
 21867                           
 21868                           ;encoder.c: 423: }
 21869                           ;encoder.c: 424: }
 21870                           ;encoder.c: 425: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 21871                           
 21872                           ; BSR set to: 1
 21873                           
 21874                           ; BSR set to: 1
 21875  000944  0E1D               	movlw	29
 21876  000946  0100               	movlb	0	; () banked
 21877  000948  19F9               	xorwf	_which_screen& (0+255),w,b
 21878  00094A  A4D8               	btfss	status,2,c
 21879  00094C  D004               	goto	l942
 21880                           
 21881                           ; BSR set to: 0
 21882                           ;encoder.c: 426: if(arpeggiatorTypeMenu.selector > 0){
 21883  00094E  0101               	movlb	1	; () banked
 21884  000950  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 21885  000952  A4D8               	btfss	status,2,c
 21886                           
 21887                           ; BSR set to: 1
 21888                           ;encoder.c: 427: arpeggiatorTypeMenu.selector--;
 21889  000954  072E               	decf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 21890  000956                     l942:
 21891                           
 21892                           ;encoder.c: 428: }
 21893                           ;encoder.c: 429: }
 21894                           ;encoder.c: 430: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 21895                           
 21896                           ; BSR set to: 1
 21897                           
 21898                           ; BSR set to: 1
 21899  000956  0E1E               	movlw	30
 21900  000958  0100               	movlb	0	; () banked
 21901  00095A  19F9               	xorwf	_which_screen& (0+255),w,b
 21902  00095C  A4D8               	btfss	status,2,c
 21903  00095E  D004               	goto	l944
 21904                           
 21905                           ; BSR set to: 0
 21906                           ;encoder.c: 431: if(arpeggiatorNoteLengthMenu.selector > 0){
 21907  000960  0101               	movlb	1	; () banked
 21908  000962  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 21909  000964  A4D8               	btfss	status,2,c
 21910                           
 21911                           ; BSR set to: 1
 21912                           ;encoder.c: 432: arpeggiatorNoteLengthMenu.selector--;
 21913  000966  072B               	decf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 21914  000968                     l944:
 21915                           
 21916                           ;encoder.c: 433: }
 21917                           ;encoder.c: 434: }
 21918                           ;encoder.c: 435: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 21919                           
 21920                           ; BSR set to: 1
 21921                           
 21922                           ; BSR set to: 1
 21923  000968  0E1F               	movlw	31
 21924  00096A  0100               	movlb	0	; () banked
 21925  00096C  19F9               	xorwf	_which_screen& (0+255),w,b
 21926  00096E  A4D8               	btfss	status,2,c
 21927  000970  D004               	goto	l946
 21928                           
 21929                           ; BSR set to: 0
 21930                           ;encoder.c: 437: if(arpeggiatorLatchMenu.selector > 0){
 21931  000972  0101               	movlb	1	; () banked
 21932  000974  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 21933  000976  A4D8               	btfss	status,2,c
 21934                           
 21935                           ; BSR set to: 1
 21936                           ;encoder.c: 438: arpeggiatorLatchMenu.selector--;
 21937  000978  0728               	decf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 21938  00097A                     l946:
 21939                           
 21940                           ;encoder.c: 439: }
 21941                           ;encoder.c: 440: }
 21942                           ;encoder.c: 441: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 21943                           
 21944                           ; BSR set to: 1
 21945                           
 21946                           ; BSR set to: 1
 21947  00097A  0E20               	movlw	32
 21948  00097C  0100               	movlb	0	; () banked
 21949  00097E  19F9               	xorwf	_which_screen& (0+255),w,b
 21950  000980  A4D8               	btfss	status,2,c
 21951  000982  D003               	goto	l947
 21952                           
 21953                           ; BSR set to: 0
 21954                           ;encoder.c: 442: arpeggiatorLatchOnOffMenu.selector ^= 1;
 21955  000984  0E01               	movlw	1
 21956  000986  0101               	movlb	1	; () banked
 21957  000988  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 21958  00098A                     l947:
 21959                           
 21960                           ;encoder.c: 443: }
 21961                           ;encoder.c: 444: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 21962  00098A  0E21               	movlw	33
 21963  00098C  0100               	movlb	0	; () banked
 21964  00098E  19F9               	xorwf	_which_screen& (0+255),w,b
 21965  000990  A4D8               	btfss	status,2,c
 21966  000992  D003               	goto	l948
 21967                           
 21968                           ; BSR set to: 0
 21969                           ;encoder.c: 445: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 21970  000994  0E01               	movlw	1
 21971  000996  0101               	movlb	1	; () banked
 21972  000998  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 21973  00099A                     l948:
 21974                           
 21975                           ;encoder.c: 446: }
 21976                           ;encoder.c: 447: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 21977  00099A  0E22               	movlw	34
 21978  00099C  0100               	movlb	0	; () banked
 21979  00099E  19F9               	xorwf	_which_screen& (0+255),w,b
 21980  0009A0  A4D8               	btfss	status,2,c
 21981  0009A2  D003               	goto	l949
 21982                           
 21983                           ; BSR set to: 0
 21984                           ;encoder.c: 448: arpeggiatorUnLatchModeMenu.selector ^= 1;
 21985  0009A4  0E01               	movlw	1
 21986  0009A6  0101               	movlb	1	; () banked
 21987  0009A8  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 21988  0009AA                     l949:
 21989                           
 21990                           ;encoder.c: 449: }
 21991                           ;encoder.c: 450: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 21992  0009AA  0E23               	movlw	35
 21993  0009AC  0100               	movlb	0	; () banked
 21994  0009AE  19F9               	xorwf	_which_screen& (0+255),w,b
 21995  0009B0  A4D8               	btfss	status,2,c
 21996  0009B2  D004               	goto	l951
 21997                           
 21998                           ; BSR set to: 0
 21999                           ;encoder.c: 451: if(arpeggiatorRandomizeSkipMenu.selector > 0){
 22000  0009B4  0101               	movlb	1	; () banked
 22001  0009B6  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 22002  0009B8  A4D8               	btfss	status,2,c
 22003                           
 22004                           ; BSR set to: 1
 22005                           ;encoder.c: 452: arpeggiatorRandomizeSkipMenu.selector--;
 22006  0009BA  071C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 22007  0009BC                     l951:
 22008                           
 22009                           ;encoder.c: 453: }
 22010                           ;encoder.c: 454: }
 22011                           ;encoder.c: 455: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 22012                           
 22013                           ; BSR set to: 1
 22014                           
 22015                           ; BSR set to: 1
 22016  0009BC  0E24               	movlw	36
 22017  0009BE  0100               	movlb	0	; () banked
 22018  0009C0  19F9               	xorwf	_which_screen& (0+255),w,b
 22019  0009C2  A4D8               	btfss	status,2,c
 22020  0009C4  D003               	goto	l952
 22021                           
 22022                           ; BSR set to: 0
 22023                           ;encoder.c: 456: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 22024  0009C6  0E01               	movlw	1
 22025  0009C8  0101               	movlb	1	; () banked
 22026  0009CA  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 22027  0009CC                     l952:
 22028                           
 22029                           ;encoder.c: 460: }
 22030                           ;encoder.c: 461: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 22031  0009CC  0E25               	movlw	37
 22032  0009CE  0100               	movlb	0	; () banked
 22033  0009D0  19F9               	xorwf	_which_screen& (0+255),w,b
 22034  0009D2  A4D8               	btfss	status,2,c
 22035  0009D4  D003               	goto	l953
 22036                           
 22037                           ; BSR set to: 0
 22038                           ;encoder.c: 462: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 22039  0009D6  0E01               	movlw	1
 22040  0009D8  0101               	movlb	1	; () banked
 22041  0009DA  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 22042  0009DC                     l953:
 22043                           
 22044                           ;encoder.c: 463: }
 22045                           ;encoder.c: 464: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 22046  0009DC  0E26               	movlw	38
 22047  0009DE  0100               	movlb	0	; () banked
 22048  0009E0  19F9               	xorwf	_which_screen& (0+255),w,b
 22049  0009E2  A4D8               	btfss	status,2,c
 22050  0009E4  D003               	goto	l955
 22051                           
 22052                           ; BSR set to: 0
 22053                           ;encoder.c: 465: if(arpeggiatorLastNoteModeMenu.selector > 0){
 22054  0009E6  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 22055  0009E8  A4D8               	btfss	status,2,c
 22056                           
 22057                           ; BSR set to: 0
 22058                           ;encoder.c: 466: arpeggiatorLastNoteModeMenu.selector--;
 22059  0009EA  07DE               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 22060  0009EC                     l955:
 22061                           
 22062                           ; BSR set to: 0
 22063                           ;encoder.c: 467: }
 22064                           ;encoder.c: 468: }
 22065                           ;encoder.c: 469: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 22066                           
 22067                           ; BSR set to: 0
 22068                           
 22069                           ; BSR set to: 0
 22070  0009EC  0E27               	movlw	39
 22071  0009EE  19F9               	xorwf	_which_screen& (0+255),w,b
 22072  0009F0  A4D8               	btfss	status,2,c
 22073  0009F2  D003               	goto	l956
 22074                           
 22075                           ; BSR set to: 0
 22076                           ;encoder.c: 470: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 22077  0009F4  0E01               	movlw	1
 22078  0009F6  0101               	movlb	1	; () banked
 22079  0009F8  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 22080  0009FA                     l956:
 22081                           
 22082                           ;encoder.c: 471: }
 22083                           ;encoder.c: 472: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 22084  0009FA  0E28               	movlw	40
 22085  0009FC  0100               	movlb	0	; () banked
 22086  0009FE  19F9               	xorwf	_which_screen& (0+255),w,b
 22087  000A00  A4D8               	btfss	status,2,c
 22088  000A02  D003               	goto	l957
 22089                           
 22090                           ; BSR set to: 0
 22091                           ;encoder.c: 473: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 22092  000A04  0E01               	movlw	1
 22093  000A06  0101               	movlb	1	; () banked
 22094  000A08  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 22095  000A0A                     l957:
 22096                           
 22097                           ;encoder.c: 474: }
 22098                           ;encoder.c: 475: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22099  000A0A  0E29               	movlw	41
 22100  000A0C  0100               	movlb	0	; () banked
 22101  000A0E  19F9               	xorwf	_which_screen& (0+255),w,b
 22102  000A10  A4D8               	btfss	status,2,c
 22103  000A12  D003               	goto	l958
 22104                           
 22105                           ; BSR set to: 0
 22106                           ;encoder.c: 476: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22107  000A14  0E01               	movlw	1
 22108  000A16  0101               	movlb	1	; () banked
 22109  000A18  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22110  000A1A                     l958:
 22111                           
 22112                           ;encoder.c: 477: }
 22113                           ;encoder.c: 478: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22114  000A1A  0E29               	movlw	41
 22115  000A1C  0100               	movlb	0	; () banked
 22116  000A1E  19F9               	xorwf	_which_screen& (0+255),w,b
 22117  000A20  A4D8               	btfss	status,2,c
 22118  000A22  D003               	goto	l959
 22119                           
 22120                           ; BSR set to: 0
 22121                           ;encoder.c: 479: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22122  000A24  0E01               	movlw	1
 22123  000A26  0101               	movlb	1	; () banked
 22124  000A28  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22125  000A2A                     l959:
 22126                           
 22127                           ;encoder.c: 480: }
 22128                           ;encoder.c: 481: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 22129  000A2A  0E2A               	movlw	42
 22130  000A2C  0100               	movlb	0	; () banked
 22131  000A2E  19F9               	xorwf	_which_screen& (0+255),w,b
 22132  000A30  A4D8               	btfss	status,2,c
 22133  000A32  D003               	goto	l960
 22134                           
 22135                           ; BSR set to: 0
 22136                           ;encoder.c: 482: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 22137  000A34  0E01               	movlw	1
 22138  000A36  0101               	movlb	1	; () banked
 22139  000A38  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 22140  000A3A                     l960:
 22141                           
 22142                           ;encoder.c: 483: }
 22143                           ;encoder.c: 484: }
 22144                           ;encoder.c: 486: encoder_direction = 0x00;
 22145                           
 22146                           ; BSR set to: 1
 22147                           
 22148                           ; BSR set to: 1
 22149  000A3A  0E00               	movlw	0
 22150  000A3C  0100               	movlb	0	; () banked
 22151  000A3E  6FEB               	movwf	_encoder_direction& (0+255),b
 22152                           
 22153                           ; BSR set to: 0
 22154  000A40  0012               	return		;funcret
 22155  000A42                     __end_of_processEncoderBuxton:
 22156                           	opt stack 0
 22157                           tblptru	equ	0xFF8
 22158                           tblptrh	equ	0xFF7
 22159                           tblptrl	equ	0xFF6
 22160                           tablat	equ	0xFF5
 22161                           prodh	equ	0xFF4
 22162                           prodl	equ	0xFF3
 22163                           intcon	equ	0xFF2
 22164                           intcon2	equ	0xFF1
 22165                           postinc0	equ	0xFEE
 22166                           wreg	equ	0xFE8
 22167                           postdec1	equ	0xFE5
 22168                           fsr1l	equ	0xFE1
 22169                           indf2	equ	0xFDF
 22170                           postinc2	equ	0xFDE
 22171                           plusw2	equ	0xFDB
 22172                           fsr2h	equ	0xFDA
 22173                           fsr2l	equ	0xFD9
 22174                           status	equ	0xFD8
 22175                           
 22176 ;; *************** function _clear_row2 *****************
 22177 ;; Defined at:
 22178 ;;		line 79 in file "menu.c"
 22179 ;; Parameters:    Size  Location     Type
 22180 ;;		None
 22181 ;; Auto vars:     Size  Location     Type
 22182 ;;		None
 22183 ;; Return value:  Size  Location     Type
 22184 ;;                  1    wreg      void 
 22185 ;; Registers used:
 22186 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 22187 ;; Tracked objects:
 22188 ;;		On entry : 0/0
 22189 ;;		On exit  : 0/0
 22190 ;;		Unchanged: 0/0
 22191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22196 ;;Total ram usage:        0 bytes
 22197 ;; Hardware stack levels used:    1
 22198 ;; Hardware stack levels required when called:    8
 22199 ;; This function calls:
 22200 ;;		_Lcd_Print_String
 22201 ;;		_Lcd_Set_Cursor
 22202 ;; This function is called by:
 22203 ;;		_Function_A_1
 22204 ;;		_Function_A_2
 22205 ;;		_Function_A_3
 22206 ;;		_Function_A
 22207 ;;		_Function_B
 22208 ;;		_Function_C_1
 22209 ;;		_Function_C_2
 22210 ;;		_Function_C_3
 22211 ;;		_Function_C
 22212 ;;		_Function_D_1
 22213 ;;		_Function_D_3
 22214 ;;		_Function_D_4
 22215 ;;		_Function_D_5
 22216 ;;		_Function_D
 22217 ;;		_Function_E
 22218 ;;		_Function_F
 22219 ;;		_Function_G_1
 22220 ;;		_Function_G_2
 22221 ;;		_Function_G_3
 22222 ;;		_Function_G_4
 22223 ;;		_Function_G
 22224 ;;		_Function_H
 22225 ;;		_Function_H_1
 22226 ;;		_Function_H_2
 22227 ;;		_Function_H_3
 22228 ;;		_Function_H_4
 22229 ;;		_Function_H_5
 22230 ;;		_Function_H_6_1
 22231 ;;		_Function_H_6_2
 22232 ;;		_Function_H_6
 22233 ;;		_Function_H_7
 22234 ;;		_Function_H_8_1
 22235 ;;		_Function_H_8_2
 22236 ;;		_Function_H_8
 22237 ;;		_Function_H_9_1
 22238 ;;		_Function_H_9_2
 22239 ;;		_Function_H_9_3
 22240 ;;		_Function_H_9_4
 22241 ;;		_Function_H_9
 22242 ;; This function uses a non-reentrant model
 22243 ;;
 22244                           
 22245                           	psect	text63
 22246  009414                     __ptext63:
 22247                           	opt stack 0
 22248  009414                     _clear_row2:
 22249                           	opt stack 20
 22250                           
 22251                           ;menu.c: 80: Lcd_Set_Cursor(2,1);
 22252                           
 22253                           ; BSR set to: 0
 22254                           ;incstack = 0
 22255  009414  0E01               	movlw	1
 22256  009416  0100               	movlb	0	; () banked
 22257  009418  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 22258  00941A  0E02               	movlw	2
 22259  00941C  ECB8  F045         	call	_Lcd_Set_Cursor
 22260                           
 22261                           ;menu.c: 81: Lcd_Print_String("                ");
 22262  009420  0E64               	movlw	low STR_10
 22263  009422  0100               	movlb	0	; () banked
 22264  009424  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 22265  009426  0EFD               	movlw	high STR_10
 22266  009428  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 22267  00942A  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 22268                           
 22269                           ;menu.c: 82: Lcd_Set_Cursor(2,1);
 22270  00942E  0E01               	movlw	1
 22271  009430  0100               	movlb	0	; () banked
 22272  009432  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 22273  009434  0E02               	movlw	2
 22274  009436  ECB8  F045         	call	_Lcd_Set_Cursor
 22275  00943A  0012               	return		;funcret
 22276  00943C                     __end_of_clear_row2:
 22277                           	opt stack 0
 22278                           tblptru	equ	0xFF8
 22279                           tblptrh	equ	0xFF7
 22280                           tblptrl	equ	0xFF6
 22281                           tablat	equ	0xFF5
 22282                           prodh	equ	0xFF4
 22283                           prodl	equ	0xFF3
 22284                           intcon	equ	0xFF2
 22285                           intcon2	equ	0xFF1
 22286                           postinc0	equ	0xFEE
 22287                           wreg	equ	0xFE8
 22288                           postdec1	equ	0xFE5
 22289                           fsr1l	equ	0xFE1
 22290                           indf2	equ	0xFDF
 22291                           postinc2	equ	0xFDE
 22292                           plusw2	equ	0xFDB
 22293                           fsr2h	equ	0xFDA
 22294                           fsr2l	equ	0xFD9
 22295                           status	equ	0xFD8
 22296                           
 22297 ;; *************** function _clear_row1 *****************
 22298 ;; Defined at:
 22299 ;;		line 72 in file "menu.c"
 22300 ;; Parameters:    Size  Location     Type
 22301 ;;		None
 22302 ;; Auto vars:     Size  Location     Type
 22303 ;;		None
 22304 ;; Return value:  Size  Location     Type
 22305 ;;                  1    wreg      void 
 22306 ;; Registers used:
 22307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 22308 ;; Tracked objects:
 22309 ;;		On entry : 0/0
 22310 ;;		On exit  : 0/0
 22311 ;;		Unchanged: 0/0
 22312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22317 ;;Total ram usage:        0 bytes
 22318 ;; Hardware stack levels used:    1
 22319 ;; Hardware stack levels required when called:    8
 22320 ;; This function calls:
 22321 ;;		_Lcd_Print_String
 22322 ;;		_Lcd_Set_Cursor
 22323 ;; This function is called by:
 22324 ;;		_exitFunction
 22325 ;;		_exitSave
 22326 ;;		_exitLoad
 22327 ;;		_eepromExit
 22328 ;;		_Function_A_1
 22329 ;;		_Function_A_2
 22330 ;;		_Function_A_3
 22331 ;;		_Function_C_1
 22332 ;;		_Function_C_2
 22333 ;;		_Function_C_3
 22334 ;;		_Function_D_1
 22335 ;;		_Function_D_3
 22336 ;;		_Function_D_4
 22337 ;;		_Function_D_5
 22338 ;;		_Function_G_1
 22339 ;;		_Function_G_2
 22340 ;;		_Function_G_3
 22341 ;;		_Function_G_4
 22342 ;;		_Function_H_4
 22343 ;;		_Function_H_5
 22344 ;;		_Function_H_6_1
 22345 ;;		_Function_H_6_2
 22346 ;;		_Function_H_7
 22347 ;;		_Function_H_8_1
 22348 ;;		_Function_H_9_1
 22349 ;;		_Function_H_9_2
 22350 ;;		_Function_H_9_3
 22351 ;;		_Function_H_9_4
 22352 ;;		_Function_H_9
 22353 ;; This function uses a non-reentrant model
 22354 ;;
 22355                           
 22356                           	psect	text64
 22357  00943C                     __ptext64:
 22358                           	opt stack 0
 22359  00943C                     _clear_row1:
 22360                           	opt stack 20
 22361                           
 22362                           ;menu.c: 73: Lcd_Set_Cursor(1,1);
 22363                           
 22364                           ;incstack = 0
 22365  00943C  0E01               	movlw	1
 22366  00943E  0100               	movlb	0	; () banked
 22367  009440  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 22368  009442  0E01               	movlw	1
 22369  009444  ECB8  F045         	call	_Lcd_Set_Cursor
 22370                           
 22371                           ;menu.c: 74: Lcd_Print_String("                ");
 22372  009448  0E64               	movlw	low STR_10
 22373  00944A  0100               	movlb	0	; () banked
 22374  00944C  6F6A               	movwf	Lcd_Print_String@a& (0+255),b
 22375  00944E  0EFD               	movlw	high STR_10
 22376  009450  6F6B               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 22377  009452  EC7E  F040         	call	_Lcd_Print_String	;wreg free
 22378                           
 22379                           ;menu.c: 75: Lcd_Set_Cursor(1,1);
 22380  009456  0E01               	movlw	1
 22381  009458  0100               	movlb	0	; () banked
 22382  00945A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 22383  00945C  0E01               	movlw	1
 22384  00945E  ECB8  F045         	call	_Lcd_Set_Cursor
 22385  009462  0012               	return		;funcret
 22386  009464                     __end_of_clear_row1:
 22387                           	opt stack 0
 22388                           tblptru	equ	0xFF8
 22389                           tblptrh	equ	0xFF7
 22390                           tblptrl	equ	0xFF6
 22391                           tablat	equ	0xFF5
 22392                           prodh	equ	0xFF4
 22393                           prodl	equ	0xFF3
 22394                           intcon	equ	0xFF2
 22395                           intcon2	equ	0xFF1
 22396                           postinc0	equ	0xFEE
 22397                           wreg	equ	0xFE8
 22398                           postdec1	equ	0xFE5
 22399                           fsr1l	equ	0xFE1
 22400                           indf2	equ	0xFDF
 22401                           postinc2	equ	0xFDE
 22402                           plusw2	equ	0xFDB
 22403                           fsr2h	equ	0xFDA
 22404                           fsr2l	equ	0xFD9
 22405                           status	equ	0xFD8
 22406                           
 22407 ;; *************** function _Lcd_Set_Cursor *****************
 22408 ;; Defined at:
 22409 ;;		line 59 in file "lcd.c"
 22410 ;; Parameters:    Size  Location     Type
 22411 ;;  a               1    wreg     unsigned char 
 22412 ;;  b               1    3[BANK0 ] unsigned char 
 22413 ;; Auto vars:     Size  Location     Type
 22414 ;;  a               1    4[BANK0 ] unsigned char 
 22415 ;;  temp            1    7[BANK0 ] unsigned char 
 22416 ;;  y               1    6[BANK0 ] unsigned char 
 22417 ;;  z               1    5[BANK0 ] unsigned char 
 22418 ;; Return value:  Size  Location     Type
 22419 ;;                  1    wreg      void 
 22420 ;; Registers used:
 22421 ;;		wreg, status,2, status,0, cstack
 22422 ;; Tracked objects:
 22423 ;;		On entry : 0/0
 22424 ;;		On exit  : 0/0
 22425 ;;		Unchanged: 0/0
 22426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22427 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22428 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22430 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22431 ;;Total ram usage:        5 bytes
 22432 ;; Hardware stack levels used:    1
 22433 ;; Hardware stack levels required when called:    7
 22434 ;; This function calls:
 22435 ;;		_Lcd_Cmd
 22436 ;; This function is called by:
 22437 ;;		_clear_row1
 22438 ;;		_clear_row2
 22439 ;;		_setControllerNumbers
 22440 ;;		_menu_lcd
 22441 ;;		_Function_C_2
 22442 ;;		_Function_C_3
 22443 ;;		_Function_D_2
 22444 ;;		_Function_E_1
 22445 ;;		_Function_E_2
 22446 ;;		_Function_F
 22447 ;;		_Function_H_2
 22448 ;;		_Function_H_3
 22449 ;; This function uses a non-reentrant model
 22450 ;;
 22451                           
 22452                           	psect	text65
 22453  008B70                     __ptext65:
 22454                           	opt stack 0
 22455  008B70                     _Lcd_Set_Cursor:
 22456                           	opt stack 20
 22457                           
 22458                           ;incstack = 0
 22459                           ;Lcd_Set_Cursor@a stored from wreg
 22460  008B70  0100               	movlb	0	; () banked
 22461  008B72  6F64               	movwf	Lcd_Set_Cursor@a& (0+255),b
 22462                           
 22463                           ;lcd.c: 61: char temp,z,y;
 22464                           ;lcd.c: 62: if(a== 1)
 22465  008B74  0100               	movlb	0	; () banked
 22466  008B76  0564               	decf	Lcd_Set_Cursor@a& (0+255),w,b
 22467  008B78  A4D8               	btfss	status,2,c
 22468  008B7A  D011               	goto	l36
 22469                           
 22470                           ; BSR set to: 0
 22471                           ;lcd.c: 63: {
 22472                           ;lcd.c: 64: temp = 0x80 + b - 1;
 22473  008B7C  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 22474  008B7E  0F7F               	addlw	127
 22475  008B80  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 22476                           
 22477                           ;lcd.c: 65: z = temp>>4;
 22478  008B82  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 22479  008B84  0B0F               	andlw	15
 22480  008B86  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 22481                           
 22482                           ;lcd.c: 66: y = temp & 0x0F;
 22483  008B88  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 22484  008B8A  0B0F               	andlw	15
 22485  008B8C  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 22486                           
 22487                           ; BSR set to: 0
 22488                           ;lcd.c: 67: Lcd_Cmd(z);
 22489  008B8E  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 22490  008B90  EC46  F04A         	call	_Lcd_Cmd
 22491                           
 22492                           ;lcd.c: 68: Lcd_Cmd(y);
 22493  008B94  0100               	movlb	0	; () banked
 22494  008B96  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 22495  008B98  EC46  F04A         	call	_Lcd_Cmd
 22496                           
 22497                           ;lcd.c: 69: }
 22498  008B9C  0012               	return	
 22499  008B9E                     l36:
 22500                           
 22501                           ;lcd.c: 70: else if(a== 2)
 22502  008B9E  0E02               	movlw	2
 22503  008BA0  0100               	movlb	0	; () banked
 22504  008BA2  1964               	xorwf	Lcd_Set_Cursor@a& (0+255),w,b
 22505  008BA4  A4D8               	btfss	status,2,c
 22506  008BA6  0012               	return	
 22507                           
 22508                           ; BSR set to: 0
 22509                           ;lcd.c: 71: {
 22510                           ;lcd.c: 72: temp = 0xC0 + b - 1;
 22511  008BA8  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 22512  008BAA  0FBF               	addlw	191
 22513  008BAC  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 22514                           
 22515                           ;lcd.c: 73: z = temp>>4;
 22516  008BAE  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 22517  008BB0  0B0F               	andlw	15
 22518  008BB2  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 22519                           
 22520                           ;lcd.c: 74: y = temp & 0x0F;
 22521  008BB4  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 22522  008BB6  0B0F               	andlw	15
 22523  008BB8  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 22524                           
 22525                           ; BSR set to: 0
 22526                           ;lcd.c: 75: Lcd_Cmd(z);
 22527  008BBA  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 22528  008BBC  EC46  F04A         	call	_Lcd_Cmd
 22529                           
 22530                           ;lcd.c: 76: Lcd_Cmd(y);
 22531  008BC0  0100               	movlb	0	; () banked
 22532  008BC2  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 22533  008BC4  EC46  F04A         	call	_Lcd_Cmd
 22534  008BC8  0012               	return	
 22535  008BCA                     __end_of_Lcd_Set_Cursor:
 22536                           	opt stack 0
 22537                           tblptru	equ	0xFF8
 22538                           tblptrh	equ	0xFF7
 22539                           tblptrl	equ	0xFF6
 22540                           tablat	equ	0xFF5
 22541                           prodh	equ	0xFF4
 22542                           prodl	equ	0xFF3
 22543                           intcon	equ	0xFF2
 22544                           intcon2	equ	0xFF1
 22545                           postinc0	equ	0xFEE
 22546                           wreg	equ	0xFE8
 22547                           postdec1	equ	0xFE5
 22548                           fsr1l	equ	0xFE1
 22549                           indf2	equ	0xFDF
 22550                           postinc2	equ	0xFDE
 22551                           plusw2	equ	0xFDB
 22552                           fsr2h	equ	0xFDA
 22553                           fsr2l	equ	0xFD9
 22554                           status	equ	0xFD8
 22555                           
 22556 ;; *************** function _Lcd_Print_String *****************
 22557 ;; Defined at:
 22558 ;;		line 114 in file "lcd.c"
 22559 ;; Parameters:    Size  Location     Type
 22560 ;;  a               2   10[BANK0 ] PTR unsigned char 
 22561 ;;		 -> STR_76(16), STR_75(12), STR_74(10), STR_73(12), 
 22562 ;;		 -> STR_72(10), STR_71(12), STR_70(10), STR_69(12), 
 22563 ;;		 -> STR_68(10), STR_67(12), STR_66(13), STR_65(15), 
 22564 ;;		 -> STR_64(15), STR_63(16), STR_61(14), STR_59(12), 
 22565 ;;		 -> STR_58(15), STR_56(14), STR_54(15), STR_53(17), 
 22566 ;;		 -> STR_50(9), STR_49(10), STR_48(13), STR_47(13), 
 22567 ;;		 -> STR_46(17), STR_45(14), STR_44(14), STR_42(15), 
 22568 ;;		 -> STR_40(16), STR_39(17), STR_38(13), STR_37(17), 
 22569 ;;		 -> STR_36(8), STR_35(8), STR_34(12), STR_33(17), 
 22570 ;;		 -> STR_32(15), STR_31(14), STR_30(17), STR_29(15), 
 22571 ;;		 -> STR_28(17), STR_27(14), STR_26(16), STR_25(14), 
 22572 ;;		 -> STR_24(12), LCD_STRINGS(2397), STR_23(13), STR_22(17), 
 22573 ;;		 -> STR_21(16), STR_20(5), STR_19(11), STR_18(11), 
 22574 ;;		 -> STR_17(11), STR_16(10), STR_15(11), STR_14(11), 
 22575 ;;		 -> STR_13(11), STR_12(10), string2display(5), STR_11(17), 
 22576 ;;		 -> STR_10(17), 
 22577 ;; Auto vars:     Size  Location     Type
 22578 ;;  i               2   14[BANK0 ] int 
 22579 ;; Return value:  Size  Location     Type
 22580 ;;                  1    wreg      void 
 22581 ;; Registers used:
 22582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 22583 ;; Tracked objects:
 22584 ;;		On entry : 0/0
 22585 ;;		On exit  : 0/0
 22586 ;;		Unchanged: 0/0
 22587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22588 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22589 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22590 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22591 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22592 ;;Total ram usage:        6 bytes
 22593 ;; Hardware stack levels used:    1
 22594 ;; Hardware stack levels required when called:    7
 22595 ;; This function calls:
 22596 ;;		_Lcd_Print_Char
 22597 ;; This function is called by:
 22598 ;;		_clear_row1
 22599 ;;		_clear_row2
 22600 ;;		_setControllerNumbers
 22601 ;;		_exitFunction
 22602 ;;		_exitSave
 22603 ;;		_exitLoad
 22604 ;;		_eepromExit
 22605 ;;		_menu_lcd
 22606 ;;		_Function_A_1
 22607 ;;		_Function_A_2
 22608 ;;		_Function_A_3
 22609 ;;		_Function_A
 22610 ;;		_Function_B
 22611 ;;		_Function_C_1
 22612 ;;		_Function_C_2
 22613 ;;		_Function_C_3
 22614 ;;		_Function_C
 22615 ;;		_Function_D_1
 22616 ;;		_Function_D_2
 22617 ;;		_Function_D_3
 22618 ;;		_Function_D_4
 22619 ;;		_Function_D_5
 22620 ;;		_Function_D
 22621 ;;		_Function_E_1
 22622 ;;		_Function_E_2
 22623 ;;		_Function_E
 22624 ;;		_Function_F
 22625 ;;		_Function_G_1
 22626 ;;		_Function_G_2
 22627 ;;		_Function_G_3
 22628 ;;		_Function_G_4
 22629 ;;		_Function_G
 22630 ;;		_Function_H
 22631 ;;		_Function_H_1
 22632 ;;		_Function_H_2
 22633 ;;		_Function_H_3
 22634 ;;		_Function_H_4
 22635 ;;		_Function_H_5
 22636 ;;		_Function_H_6_1
 22637 ;;		_Function_H_6_2
 22638 ;;		_Function_H_6
 22639 ;;		_Function_H_7
 22640 ;;		_Function_H_8_1
 22641 ;;		_Function_H_8_2
 22642 ;;		_Function_H_8
 22643 ;;		_Function_H_9_1
 22644 ;;		_Function_H_9_2
 22645 ;;		_Function_H_9_3
 22646 ;;		_Function_H_9_4
 22647 ;;		_Function_H_9
 22648 ;; This function uses a non-reentrant model
 22649 ;;
 22650                           
 22651                           	psect	text66
 22652  0080FC                     __ptext66:
 22653                           	opt stack 0
 22654  0080FC                     _Lcd_Print_String:
 22655                           	opt stack 20
 22656                           
 22657                           ;lcd.c: 116: int i;
 22658                           ;lcd.c: 117: for(i=0;a[i]!='\0';i++)
 22659                           
 22660                           ;incstack = 0
 22661  0080FC  0E00               	movlw	0
 22662  0080FE  0100               	movlb	0	; () banked
 22663  008100  6F6F               	movwf	(Lcd_Print_String@i+1)& (0+255),b
 22664  008102  0E00               	movlw	0
 22665  008104  6F6E               	movwf	Lcd_Print_String@i& (0+255),b
 22666  008106  D01D               	goto	l54
 22667  008108                     
 22668                           ;lcd.c: 118: Lcd_Print_Char(a[i]);
 22669                           
 22670                           ; BSR set to: 0
 22671  008108  0100               	movlb	0	; () banked
 22672  00810A  516E               	movf	Lcd_Print_String@i& (0+255),w,b
 22673  00810C  256A               	addwf	Lcd_Print_String@a& (0+255),w,b
 22674  00810E  6F6C               	movwf	??_Lcd_Print_String& (0+255),b
 22675  008110  516F               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 22676  008112  216B               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 22677  008114  6F6D               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 22678  008116  C06C  FFF6         	movff	??_Lcd_Print_String,tblptrl
 22679  00811A  C06D  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 22680  00811E  0E00               	movlw	low (__mediumconst shr (0+16))
 22681  008120  6EF8               	movwf	tblptru,c
 22682  008122  0E0C               	movlw	(high __ramtop+-1)
 22683  008124  64F7               	cpfsgt	tblptrh,c
 22684  008126  D003               	bra	u23187
 22685  008128  0008               	tblrd		*
 22686  00812A  50F5               	movf	tablat,w,c
 22687  00812C  D005               	bra	u23180
 22688  00812E                     u23187:
 22689  00812E  CFF6 FFE1          	movff	tblptrl,fsr1l
 22690  008132  CFF7 FFE2          	movff	tblptrh,fsr1h
 22691  008136  50E7               	movf	indf1,w,c
 22692  008138                     u23180:
 22693  008138  EC40  F03D         	call	_Lcd_Print_Char
 22694  00813C  0100               	movlb	0	; () banked
 22695  00813E  4B6E               	infsnz	Lcd_Print_String@i& (0+255),f,b
 22696  008140  2B6F               	incf	(Lcd_Print_String@i+1)& (0+255),f,b
 22697  008142                     l54:
 22698                           
 22699                           ; BSR set to: 0
 22700                           
 22701                           ; BSR set to: 0
 22702  008142  516E               	movf	Lcd_Print_String@i& (0+255),w,b
 22703  008144  256A               	addwf	Lcd_Print_String@a& (0+255),w,b
 22704  008146  6F6C               	movwf	??_Lcd_Print_String& (0+255),b
 22705  008148  516F               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 22706  00814A  216B               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 22707  00814C  6F6D               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 22708  00814E  C06C  FFF6         	movff	??_Lcd_Print_String,tblptrl
 22709  008152  C06D  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 22710  008156  0E00               	movlw	low (__mediumconst shr (0+16))
 22711  008158  6EF8               	movwf	tblptru,c
 22712  00815A  0E0C               	movlw	(high __ramtop+-1)
 22713  00815C  64F7               	cpfsgt	tblptrh,c
 22714  00815E  D003               	bra	u23197
 22715  008160  0008               	tblrd		*
 22716  008162  50F5               	movf	tablat,w,c
 22717  008164  D005               	bra	u23190
 22718  008166                     u23197:
 22719  008166  CFF6 FFE1          	movff	tblptrl,fsr1l
 22720  00816A  CFF7 FFE2          	movff	tblptrh,fsr1h
 22721  00816E  50E7               	movf	indf1,w,c
 22722  008170                     u23190:
 22723  008170  0900               	iorlw	0
 22724  008172  B4D8               	btfsc	status,2,c
 22725  008174  0012               	return	
 22726  008176  D7C8               	goto	l55
 22727  008178                     __end_of_Lcd_Print_String:
 22728                           	opt stack 0
 22729                           tblptru	equ	0xFF8
 22730                           tblptrh	equ	0xFF7
 22731                           tblptrl	equ	0xFF6
 22732                           tablat	equ	0xFF5
 22733                           prodh	equ	0xFF4
 22734                           prodl	equ	0xFF3
 22735                           intcon	equ	0xFF2
 22736                           intcon2	equ	0xFF1
 22737                           postinc0	equ	0xFEE
 22738                           wreg	equ	0xFE8
 22739                           indf1	equ	0xFE7
 22740                           postdec1	equ	0xFE5
 22741                           fsr1h	equ	0xFE2
 22742                           fsr1l	equ	0xFE1
 22743                           indf2	equ	0xFDF
 22744                           postinc2	equ	0xFDE
 22745                           plusw2	equ	0xFDB
 22746                           fsr2h	equ	0xFDA
 22747                           fsr2l	equ	0xFD9
 22748                           status	equ	0xFD8
 22749                           
 22750 ;; *************** function _Lcd_Print_Char *****************
 22751 ;; Defined at:
 22752 ;;		line 98 in file "lcd.c"
 22753 ;; Parameters:    Size  Location     Type
 22754 ;;  data            1    wreg     unsigned char 
 22755 ;; Auto vars:     Size  Location     Type
 22756 ;;  data            1    3[BANK0 ] unsigned char 
 22757 ;;  i               2    6[BANK0 ] int 
 22758 ;;  i               2    4[BANK0 ] int 
 22759 ;;  Upper_Nibble    1    2[BANK0 ] unsigned char 
 22760 ;;  Lower_Nibble    1    1[BANK0 ] unsigned char 
 22761 ;; Return value:  Size  Location     Type
 22762 ;;                  1    wreg      void 
 22763 ;; Registers used:
 22764 ;;		wreg, status,2, status,0, cstack
 22765 ;; Tracked objects:
 22766 ;;		On entry : 0/0
 22767 ;;		On exit  : 0/0
 22768 ;;		Unchanged: 0/0
 22769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22771 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22773 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22774 ;;Total ram usage:        7 bytes
 22775 ;; Hardware stack levels used:    1
 22776 ;; Hardware stack levels required when called:    6
 22777 ;; This function calls:
 22778 ;;		_Lcd_SetBit
 22779 ;; This function is called by:
 22780 ;;		_Lcd_Print_String
 22781 ;; This function uses a non-reentrant model
 22782 ;;
 22783                           
 22784                           	psect	text67
 22785  007A80                     __ptext67:
 22786                           	opt stack 0
 22787  007A80                     _Lcd_Print_Char:
 22788                           	opt stack 20
 22789                           
 22790                           ;incstack = 0
 22791                           ;Lcd_Print_Char@data stored from wreg
 22792  007A80  0100               	movlb	0	; () banked
 22793  007A82  6F63               	movwf	Lcd_Print_Char@data& (0+255),b
 22794                           
 22795                           ;lcd.c: 100: char Lower_Nibble,Upper_Nibble;
 22796                           ;lcd.c: 101: Lower_Nibble = data&0x0F;
 22797  007A84  0100               	movlb	0	; () banked
 22798  007A86  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 22799  007A88  0B0F               	andlw	15
 22800  007A8A  6F61               	movwf	Lcd_Print_Char@Lower_Nibble& (0+255),b
 22801                           
 22802                           ;lcd.c: 102: Upper_Nibble = data&0xF0;
 22803  007A8C  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 22804  007A8E  0BF0               	andlw	240
 22805  007A90  6F62               	movwf	Lcd_Print_Char@Upper_Nibble& (0+255),b
 22806                           
 22807                           ; BSR set to: 0
 22808                           ;lcd.c: 103: RE0 = 1;
 22809  007A92  8084               	bsf	3972,0,c	;volatile
 22810                           
 22811                           ; BSR set to: 0
 22812                           ;lcd.c: 104: Lcd_SetBit(Upper_Nibble>>4);
 22813  007A94  3962               	swapf	Lcd_Print_Char@Upper_Nibble& (0+255),w,b
 22814  007A96  0B0F               	andlw	15
 22815  007A98  EC71  F049         	call	_Lcd_SetBit
 22816                           
 22817                           ;lcd.c: 105: RE1 = 1;
 22818  007A9C  8284               	bsf	3972,1,c	;volatile
 22819                           
 22820                           ;lcd.c: 106: for(int i=2130483; i<=0; i--) __nop();
 22821  007A9E  0E82               	movlw	130
 22822  007AA0  0100               	movlb	0	; () banked
 22823  007AA2  6F65               	movwf	(Lcd_Print_Char@i+1)& (0+255),b
 22824  007AA4  0E33               	movlw	51
 22825  007AA6  6F64               	movwf	Lcd_Print_Char@i& (0+255),b
 22826                           
 22827                           ; BSR set to: 0
 22828  007AA8  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 22829  007AAA  D003               	goto	l47
 22830  007AAC  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 22831  007AAE  E10D               	bnz	l48
 22832  007AB0  D009               	goto	L5
 22833  007AB2                     l47:
 22834                           
 22835                           ; BSR set to: 0
 22836  007AB2  F000               	nop	
 22837  007AB4  0100               	movlb	0	; () banked
 22838  007AB6  0764               	decf	Lcd_Print_Char@i& (0+255),f,b
 22839  007AB8  A0D8               	btfss	status,0,c
 22840  007ABA  0765               	decf	(Lcd_Print_Char@i+1)& (0+255),f,b
 22841                           
 22842                           ; BSR set to: 0
 22843  007ABC  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 22844  007ABE  D7F9               	goto	l47
 22845  007AC0  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 22846  007AC2  E103               	bnz	u22800
 22847  007AC4                     L5:
 22848  007AC4  0564               	decf	Lcd_Print_Char@i& (0+255),w,b
 22849  007AC6  A0D8               	btfss	status,0,c
 22850  007AC8  D7F4               	goto	l47
 22851  007ACA                     u22800:
 22852  007ACA                     l48:
 22853                           
 22854                           ; BSR set to: 0
 22855                           ;lcd.c: 107: RE1 = 0;
 22856  007ACA  9284               	bcf	3972,1,c	;volatile
 22857                           
 22858                           ; BSR set to: 0
 22859                           ;lcd.c: 108: Lcd_SetBit(Lower_Nibble);
 22860  007ACC  5161               	movf	Lcd_Print_Char@Lower_Nibble& (0+255),w,b
 22861  007ACE  EC71  F049         	call	_Lcd_SetBit
 22862                           
 22863                           ;lcd.c: 109: RE1 = 1;
 22864  007AD2  8284               	bsf	3972,1,c	;volatile
 22865                           
 22866                           ;lcd.c: 110: for(int i=2130483; i<=0; i--) __nop();
 22867  007AD4  0E82               	movlw	130
 22868  007AD6  0100               	movlb	0	; () banked
 22869  007AD8  6F67               	movwf	(Lcd_Print_Char@i_57+1)& (0+255),b
 22870  007ADA  0E33               	movlw	51
 22871  007ADC  6F66               	movwf	Lcd_Print_Char@i_57& (0+255),b
 22872                           
 22873                           ; BSR set to: 0
 22874  007ADE  BF67               	btfsc	(Lcd_Print_Char@i_57+1)& (0+255),7,b
 22875  007AE0  D003               	goto	l49
 22876  007AE2  5167               	movf	(Lcd_Print_Char@i_57+1)& (0+255),w,b
 22877  007AE4  E10D               	bnz	l50
 22878  007AE6  D009               	goto	L6
 22879  007AE8                     l49:
 22880                           
 22881                           ; BSR set to: 0
 22882  007AE8  F000               	nop	
 22883  007AEA  0100               	movlb	0	; () banked
 22884  007AEC  0766               	decf	Lcd_Print_Char@i_57& (0+255),f,b
 22885  007AEE  A0D8               	btfss	status,0,c
 22886  007AF0  0767               	decf	(Lcd_Print_Char@i_57+1)& (0+255),f,b
 22887                           
 22888                           ; BSR set to: 0
 22889  007AF2  BF67               	btfsc	(Lcd_Print_Char@i_57+1)& (0+255),7,b
 22890  007AF4  D7F9               	goto	l49
 22891  007AF6  5167               	movf	(Lcd_Print_Char@i_57+1)& (0+255),w,b
 22892  007AF8  E103               	bnz	u22820
 22893  007AFA                     L6:
 22894  007AFA  0566               	decf	Lcd_Print_Char@i_57& (0+255),w,b
 22895  007AFC  A0D8               	btfss	status,0,c
 22896  007AFE  D7F4               	goto	l49
 22897  007B00                     u22820:
 22898  007B00                     l50:
 22899                           
 22900                           ; BSR set to: 0
 22901                           ;lcd.c: 111: RE1 = 0;
 22902  007B00  9284               	bcf	3972,1,c	;volatile
 22903                           
 22904                           ; BSR set to: 0
 22905  007B02  0012               	return		;funcret
 22906  007B04                     __end_of_Lcd_Print_Char:
 22907                           	opt stack 0
 22908                           tblptru	equ	0xFF8
 22909                           tblptrh	equ	0xFF7
 22910                           tblptrl	equ	0xFF6
 22911                           tablat	equ	0xFF5
 22912                           prodh	equ	0xFF4
 22913                           prodl	equ	0xFF3
 22914                           intcon	equ	0xFF2
 22915                           intcon2	equ	0xFF1
 22916                           postinc0	equ	0xFEE
 22917                           wreg	equ	0xFE8
 22918                           indf1	equ	0xFE7
 22919                           postdec1	equ	0xFE5
 22920                           fsr1h	equ	0xFE2
 22921                           fsr1l	equ	0xFE1
 22922                           indf2	equ	0xFDF
 22923                           postinc2	equ	0xFDE
 22924                           plusw2	equ	0xFDB
 22925                           fsr2h	equ	0xFDA
 22926                           fsr2l	equ	0xFD9
 22927                           status	equ	0xFD8
 22928                           
 22929 ;; *************** function ___lbmod *****************
 22930 ;; Defined at:
 22931 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbmod.c"
 22932 ;; Parameters:    Size  Location     Type
 22933 ;;  dividend        1    wreg     unsigned char 
 22934 ;;  divisor         1    0[BANK0 ] unsigned char 
 22935 ;; Auto vars:     Size  Location     Type
 22936 ;;  dividend        1    1[BANK0 ] unsigned char 
 22937 ;;  rem             1    3[BANK0 ] unsigned char 
 22938 ;;  counter         1    2[BANK0 ] unsigned char 
 22939 ;; Return value:  Size  Location     Type
 22940 ;;                  1    wreg      unsigned char 
 22941 ;; Registers used:
 22942 ;;		wreg, status,2, status,0
 22943 ;; Tracked objects:
 22944 ;;		On entry : 0/0
 22945 ;;		On exit  : 0/0
 22946 ;;		Unchanged: 0/0
 22947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22948 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22949 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22951 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22952 ;;Total ram usage:        4 bytes
 22953 ;; Hardware stack levels used:    1
 22954 ;; Hardware stack levels required when called:    5
 22955 ;; This function calls:
 22956 ;;		Nothing
 22957 ;; This function is called by:
 22958 ;;		_menu_lcd
 22959 ;;		_Function_A_1
 22960 ;;		_Function_A_2
 22961 ;;		_Function_A_3
 22962 ;;		_Function_A
 22963 ;;		_Function_B
 22964 ;;		_Function_C_1
 22965 ;;		_Function_C_2
 22966 ;;		_Function_C_3
 22967 ;;		_Function_C
 22968 ;;		_Function_D_1
 22969 ;;		_Function_D_3
 22970 ;;		_Function_D_4
 22971 ;;		_Function_D_5
 22972 ;;		_Function_D
 22973 ;;		_Function_E
 22974 ;;		_Function_G_1
 22975 ;;		_Function_G_2
 22976 ;;		_Function_G_4
 22977 ;;		_Function_G
 22978 ;;		_Function_H
 22979 ;;		_Function_H_4
 22980 ;;		_Function_H_5
 22981 ;;		_Function_H_6
 22982 ;;		_Function_H_8
 22983 ;;		_Function_H_9_1
 22984 ;;		_Function_H_9_2
 22985 ;;		_Function_H_9_3
 22986 ;;		_Function_H_9_4
 22987 ;;		_Function_H_9
 22988 ;; This function uses a non-reentrant model
 22989 ;;
 22990                           
 22991                           	psect	text68
 22992  009312                     __ptext68:
 22993                           	opt stack 0
 22994  009312                     ___lbmod:
 22995                           	opt stack 24
 22996                           
 22997                           ; BSR set to: 0
 22998                           ;incstack = 0
 22999                           ;___lbmod@dividend stored from wreg
 23000  009312  0100               	movlb	0	; () banked
 23001  009314  6F61               	movwf	___lbmod@dividend& (0+255),b
 23002  009316  0E08               	movlw	8
 23003  009318  0100               	movlb	0	; () banked
 23004  00931A  6F62               	movwf	___lbmod@counter& (0+255),b
 23005  00931C  0E00               	movlw	0
 23006  00931E  6F63               	movwf	___lbmod@rem& (0+255),b
 23007  009320                     
 23008                           ; BSR set to: 0
 23009                           
 23010                           ; BSR set to: 0
 23011  009320  90D8               	bcf	status,0,c
 23012  009322  3561               	rlcf	___lbmod@dividend& (0+255),w,b
 23013  009324  3563               	rlcf	___lbmod@rem& (0+255),w,b
 23014  009326  6F63               	movwf	___lbmod@rem& (0+255),b
 23015                           
 23016                           ; BSR set to: 0
 23017  009328  90D8               	bcf	status,0,c
 23018  00932A  3761               	rlcf	___lbmod@dividend& (0+255),f,b
 23019                           
 23020                           ; BSR set to: 0
 23021  00932C  5160               	movf	___lbmod@divisor& (0+255),w,b
 23022  00932E  5D63               	subwf	___lbmod@rem& (0+255),w,b
 23023  009330  A0D8               	btfss	status,0,c
 23024  009332  D002               	goto	l5759
 23025                           
 23026                           ; BSR set to: 0
 23027  009334  5160               	movf	___lbmod@divisor& (0+255),w,b
 23028  009336  5F63               	subwf	___lbmod@rem& (0+255),f,b
 23029  009338                     l5759:
 23030                           
 23031                           ; BSR set to: 0
 23032                           
 23033                           ; BSR set to: 0
 23034  009338  2F62               	decfsz	___lbmod@counter& (0+255),f,b
 23035  00933A  D7F2               	goto	l5758
 23036                           
 23037                           ; BSR set to: 0
 23038                           
 23039                           ; BSR set to: 0
 23040  00933C  5163               	movf	___lbmod@rem& (0+255),w,b
 23041  00933E  0012               	return	
 23042  009340                     __end_of___lbmod:
 23043                           	opt stack 0
 23044                           tblptru	equ	0xFF8
 23045                           tblptrh	equ	0xFF7
 23046                           tblptrl	equ	0xFF6
 23047                           tablat	equ	0xFF5
 23048                           prodh	equ	0xFF4
 23049                           prodl	equ	0xFF3
 23050                           intcon	equ	0xFF2
 23051                           intcon2	equ	0xFF1
 23052                           postinc0	equ	0xFEE
 23053                           wreg	equ	0xFE8
 23054                           indf1	equ	0xFE7
 23055                           postdec1	equ	0xFE5
 23056                           fsr1h	equ	0xFE2
 23057                           fsr1l	equ	0xFE1
 23058                           indf2	equ	0xFDF
 23059                           postinc2	equ	0xFDE
 23060                           plusw2	equ	0xFDB
 23061                           fsr2h	equ	0xFDA
 23062                           fsr2l	equ	0xFD9
 23063                           status	equ	0xFD8
 23064                           
 23065 ;; *************** function _initializeSaveSlotsOnce *****************
 23066 ;; Defined at:
 23067 ;;		line 28 in file "eeprom.c"
 23068 ;; Parameters:    Size  Location     Type
 23069 ;;		None
 23070 ;; Auto vars:     Size  Location     Type
 23071 ;;  initializeSl    1   84[BANK0 ] unsigned char 
 23072 ;; Return value:  Size  Location     Type
 23073 ;;                  1    wreg      void 
 23074 ;; Registers used:
 23075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23076 ;; Tracked objects:
 23077 ;;		On entry : 0/0
 23078 ;;		On exit  : 0/0
 23079 ;;		Unchanged: 0/0
 23080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23082 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23084 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23085 ;;Total ram usage:        1 bytes
 23086 ;; Hardware stack levels used:    1
 23087 ;; Hardware stack levels required when called:    7
 23088 ;; This function calls:
 23089 ;;		_Busy_eep
 23090 ;;		_Read_b_eep
 23091 ;;		_Write_b_eep
 23092 ;;		_saveToEEPROM
 23093 ;; This function is called by:
 23094 ;;		_main
 23095 ;; This function uses a non-reentrant model
 23096 ;;
 23097                           
 23098                           	psect	text69
 23099  008F06                     __ptext69:
 23100                           	opt stack 0
 23101  008F06                     _initializeSaveSlotsOnce:
 23102                           	opt stack 23
 23103                           
 23104                           ;eeprom.c: 30: unsigned char initializeSlotsOnce = Read_b_eep(0x01);
 23105                           
 23106                           ; BSR set to: 0
 23107                           ;incstack = 0
 23108  008F06  0E00               	movlw	0
 23109  008F08  0100               	movlb	0	; () banked
 23110  008F0A  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 23111  008F0C  0E01               	movlw	1
 23112  008F0E  6F60               	movwf	Read_b_eep@badd& (0+255),b
 23113  008F10  ECA6  F04A         	call	_Read_b_eep	;wreg free
 23114  008F14  0100               	movlb	0	; () banked
 23115  008F16  6FB4               	movwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),b
 23116                           
 23117                           ; BSR set to: 0
 23118                           ;eeprom.c: 32: if (initializeSlotsOnce == 0x24) {
 23119  008F18  0E24               	movlw	36
 23120  008F1A  19B4               	xorwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),w,b
 23121  008F1C  A4D8               	btfss	status,2,c
 23122  008F1E  0012               	return	
 23123                           
 23124                           ; BSR set to: 0
 23125                           ;eeprom.c: 33: saveToEEPROM(SLOT1);
 23126  008F20  0E01               	movlw	1
 23127  008F22  ECED  F027         	call	_saveToEEPROM
 23128                           
 23129                           ;eeprom.c: 34: saveToEEPROM(SLOT2);
 23130  008F26  0E02               	movlw	2
 23131  008F28  ECED  F027         	call	_saveToEEPROM
 23132                           
 23133                           ;eeprom.c: 35: saveToEEPROM(SLOT3);
 23134  008F2C  0E03               	movlw	3
 23135  008F2E  ECED  F027         	call	_saveToEEPROM
 23136                           
 23137                           ;eeprom.c: 36: saveToEEPROM(SLOT4);
 23138  008F32  0E04               	movlw	4
 23139  008F34  ECED  F027         	call	_saveToEEPROM
 23140                           
 23141                           ;eeprom.c: 37: (Busy_eep(), Write_b_eep(0x01,0x48));
 23142  008F38  ECED  F04A         	call	_Busy_eep	;wreg free
 23143  008F3C  0E00               	movlw	0
 23144  008F3E  0100               	movlb	0	; () banked
 23145  008F40  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 23146  008F42  0E01               	movlw	1
 23147  008F44  6F60               	movwf	Write_b_eep@badd& (0+255),b
 23148  008F46  0E48               	movlw	72
 23149  008F48  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 23150  008F4A  ECA8  F047         	call	_Write_b_eep	;wreg free
 23151  008F4E  0012               	return	
 23152  008F50                     __end_of_initializeSaveSlotsOnce:
 23153                           	opt stack 0
 23154                           tblptru	equ	0xFF8
 23155                           tblptrh	equ	0xFF7
 23156                           tblptrl	equ	0xFF6
 23157                           tablat	equ	0xFF5
 23158                           prodh	equ	0xFF4
 23159                           prodl	equ	0xFF3
 23160                           intcon	equ	0xFF2
 23161                           intcon2	equ	0xFF1
 23162                           postinc0	equ	0xFEE
 23163                           wreg	equ	0xFE8
 23164                           indf1	equ	0xFE7
 23165                           postdec1	equ	0xFE5
 23166                           fsr1h	equ	0xFE2
 23167                           fsr1l	equ	0xFE1
 23168                           indf2	equ	0xFDF
 23169                           postinc2	equ	0xFDE
 23170                           plusw2	equ	0xFDB
 23171                           fsr2h	equ	0xFDA
 23172                           fsr2l	equ	0xFD9
 23173                           status	equ	0xFD8
 23174                           
 23175 ;; *************** function _saveToEEPROM *****************
 23176 ;; Defined at:
 23177 ;;		line 194 in file "eeprom.c"
 23178 ;; Parameters:    Size  Location     Type
 23179 ;;  slotNumber      1    wreg     unsigned char 
 23180 ;; Auto vars:     Size  Location     Type
 23181 ;;  slotNumber      1   81[BANK0 ] unsigned char 
 23182 ;;  byte_count      2   82[BANK0 ] unsigned int 
 23183 ;;  to_save        75    4[BANK0 ] unsigned char [75]
 23184 ;;  baseAddress     2   79[BANK0 ] unsigned int 
 23185 ;; Return value:  Size  Location     Type
 23186 ;;                  1    wreg      void 
 23187 ;; Registers used:
 23188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23189 ;; Tracked objects:
 23190 ;;		On entry : 0/0
 23191 ;;		On exit  : 0/0
 23192 ;;		Unchanged: 0/0
 23193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23195 ;;      Locals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23197 ;;      Totals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23198 ;;Total ram usage:       80 bytes
 23199 ;; Hardware stack levels used:    1
 23200 ;; Hardware stack levels required when called:    6
 23201 ;; This function calls:
 23202 ;;		_Busy_eep
 23203 ;;		_Write_b_eep
 23204 ;; This function is called by:
 23205 ;;		_Function_G_1
 23206 ;;		_initializeSaveSlotsOnce
 23207 ;; This function uses a non-reentrant model
 23208 ;;
 23209                           
 23210                           	psect	text70
 23211  004FDA                     __ptext70:
 23212                           	opt stack 0
 23213  004FDA                     _saveToEEPROM:
 23214                           	opt stack 21
 23215                           
 23216                           ;incstack = 0
 23217                           ;saveToEEPROM@slotNumber stored from wreg
 23218  004FDA  0100               	movlb	0	; () banked
 23219  004FDC  6FB1               	movwf	saveToEEPROM@slotNumber& (0+255),b
 23220                           
 23221                           ;eeprom.c: 196: unsigned int baseAddress = 0;
 23222  004FDE  0E00               	movlw	0
 23223  004FE0  0100               	movlb	0	; () banked
 23224  004FE2  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23225  004FE4  0E00               	movlw	0
 23226  004FE6  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23227                           
 23228                           ; BSR set to: 0
 23229                           ;eeprom.c: 199: if (slotNumber == SLOT1) {baseAddress = 128;}
 23230  004FE8  05B1               	decf	saveToEEPROM@slotNumber& (0+255),w,b
 23231  004FEA  A4D8               	btfss	status,2,c
 23232  004FEC  D004               	goto	l4287
 23233                           
 23234                           ; BSR set to: 0
 23235  004FEE  0E00               	movlw	0
 23236  004FF0  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23237  004FF2  0E80               	movlw	128
 23238  004FF4  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23239  004FF6                     l4287:
 23240                           
 23241                           ; BSR set to: 0
 23242                           ;eeprom.c: 200: if (slotNumber == SLOT2) {baseAddress = 256;}
 23243                           
 23244                           ; BSR set to: 0
 23245  004FF6  0E02               	movlw	2
 23246  004FF8  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 23247  004FFA  A4D8               	btfss	status,2,c
 23248  004FFC  D004               	goto	l4288
 23249                           
 23250                           ; BSR set to: 0
 23251  004FFE  0E01               	movlw	1
 23252  005000  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23253  005002  0E00               	movlw	0
 23254  005004  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23255  005006                     l4288:
 23256                           
 23257                           ; BSR set to: 0
 23258                           ;eeprom.c: 201: if (slotNumber == SLOT3) {baseAddress = 384;}
 23259                           
 23260                           ; BSR set to: 0
 23261  005006  0E03               	movlw	3
 23262  005008  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 23263  00500A  A4D8               	btfss	status,2,c
 23264  00500C  D004               	goto	l4289
 23265                           
 23266                           ; BSR set to: 0
 23267  00500E  0E01               	movlw	1
 23268  005010  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23269  005012  0E80               	movlw	128
 23270  005014  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23271  005016                     l4289:
 23272                           
 23273                           ; BSR set to: 0
 23274                           ;eeprom.c: 202: if (slotNumber == SLOT4) {baseAddress = 512;}
 23275                           
 23276                           ; BSR set to: 0
 23277  005016  0E04               	movlw	4
 23278  005018  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 23279  00501A  A4D8               	btfss	status,2,c
 23280  00501C  D004               	goto	l4290
 23281                           
 23282                           ; BSR set to: 0
 23283  00501E  0E02               	movlw	2
 23284  005020  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 23285  005022  0E00               	movlw	0
 23286  005024  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 23287  005026                     l4290:
 23288                           
 23289                           ; BSR set to: 0
 23290                           ;eeprom.c: 205: unsigned char to_save[75];
 23291                           ;eeprom.c: 210: to_save[0] = KEYBOARD_MODE;
 23292                           
 23293                           ; BSR set to: 0
 23294  005026  C0F2  F064         	movff	_KEYBOARD_MODE,saveToEEPROM@to_save
 23295                           
 23296                           ; BSR set to: 0
 23297                           ;eeprom.c: 211: to_save[1] = which_mode;
 23298  00502A  C0F1  F065         	movff	_which_mode,saveToEEPROM@to_save+1
 23299                           
 23300                           ; BSR set to: 0
 23301                           ;eeprom.c: 212: to_save[2] = which_triad;
 23302  00502E  C0F0  F066         	movff	_which_triad,saveToEEPROM@to_save+2
 23303                           
 23304                           ; BSR set to: 0
 23305                           ;eeprom.c: 213: to_save[3] = which_seventh;
 23306  005032  C0EF  F067         	movff	_which_seventh,saveToEEPROM@to_save+3
 23307                           
 23308                           ;eeprom.c: 216: to_save[4] = TRANSPOSE_MODE;
 23309  005036  0E00               	movlw	0
 23310  005038  BA35               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 23311  00503A  0E01               	movlw	1
 23312  00503C  6F68               	movwf	(saveToEEPROM@to_save+4)& (0+255),b
 23313                           
 23314                           ;eeprom.c: 219: to_save[5] = DRUM_MODE;
 23315  00503E  0E00               	movlw	0
 23316  005040  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 23317  005042  0E01               	movlw	1
 23318  005044  6F69               	movwf	(saveToEEPROM@to_save+5)& (0+255),b
 23319                           
 23320                           ;eeprom.c: 220: to_save[6] = CONTROL_MODE;
 23321  005046  0E00               	movlw	0
 23322  005048  B632               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 23323  00504A  0E01               	movlw	1
 23324  00504C  6F6A               	movwf	(saveToEEPROM@to_save+6)& (0+255),b
 23325                           
 23326                           ; BSR set to: 0
 23327                           ;eeprom.c: 223: to_save[7] = DRUM_NOTE[0];
 23328  00504E  C1DF  F06B         	movff	_DRUM_NOTE,saveToEEPROM@to_save+7
 23329                           
 23330                           ; BSR set to: 0
 23331                           ;eeprom.c: 224: to_save[8] = DRUM_NOTE[1];
 23332  005052  C1E0  F06C         	movff	_DRUM_NOTE+1,saveToEEPROM@to_save+8
 23333                           
 23334                           ; BSR set to: 0
 23335                           ;eeprom.c: 225: to_save[9] = DRUM_NOTE[2];
 23336  005056  C1E1  F06D         	movff	_DRUM_NOTE+2,saveToEEPROM@to_save+9
 23337                           
 23338                           ; BSR set to: 0
 23339                           ;eeprom.c: 226: to_save[10] = DRUM_NOTE[3];
 23340  00505A  C1E2  F06E         	movff	_DRUM_NOTE+3,saveToEEPROM@to_save+10
 23341                           
 23342                           ; BSR set to: 0
 23343                           ;eeprom.c: 227: to_save[11] = DRUM_NOTE[4];
 23344  00505E  C1E3  F06F         	movff	_DRUM_NOTE+4,saveToEEPROM@to_save+11
 23345                           
 23346                           ; BSR set to: 0
 23347                           ;eeprom.c: 228: to_save[12] = DRUM_NOTE[5];
 23348  005062  C1E4  F070         	movff	_DRUM_NOTE+5,saveToEEPROM@to_save+12
 23349                           
 23350                           ; BSR set to: 0
 23351                           ;eeprom.c: 229: to_save[13] = DRUM_NOTE[6];
 23352  005066  C1E5  F071         	movff	_DRUM_NOTE+6,saveToEEPROM@to_save+13
 23353                           
 23354                           ; BSR set to: 0
 23355                           ;eeprom.c: 230: to_save[14] = DRUM_NOTE[7];
 23356  00506A  C1E6  F072         	movff	_DRUM_NOTE+7,saveToEEPROM@to_save+14
 23357                           
 23358                           ; BSR set to: 0
 23359                           ;eeprom.c: 233: to_save[15] = DRUM_CC[0];
 23360  00506E  C1D7  F073         	movff	_DRUM_CC,saveToEEPROM@to_save+15
 23361                           
 23362                           ; BSR set to: 0
 23363                           ;eeprom.c: 234: to_save[16] = DRUM_CC[1];
 23364  005072  C1D8  F074         	movff	_DRUM_CC+1,saveToEEPROM@to_save+16
 23365                           
 23366                           ; BSR set to: 0
 23367                           ;eeprom.c: 235: to_save[17] = DRUM_CC[2];
 23368  005076  C1D9  F075         	movff	_DRUM_CC+2,saveToEEPROM@to_save+17
 23369                           
 23370                           ; BSR set to: 0
 23371                           ;eeprom.c: 236: to_save[18] = DRUM_CC[3];
 23372  00507A  C1DA  F076         	movff	_DRUM_CC+3,saveToEEPROM@to_save+18
 23373                           
 23374                           ; BSR set to: 0
 23375                           ;eeprom.c: 237: to_save[19] = DRUM_CC[4];
 23376  00507E  C1DB  F077         	movff	_DRUM_CC+4,saveToEEPROM@to_save+19
 23377                           
 23378                           ; BSR set to: 0
 23379                           ;eeprom.c: 238: to_save[20] = DRUM_CC[5];
 23380  005082  C1DC  F078         	movff	_DRUM_CC+5,saveToEEPROM@to_save+20
 23381                           
 23382                           ; BSR set to: 0
 23383                           ;eeprom.c: 239: to_save[21] = DRUM_CC[6];
 23384  005086  C1DD  F079         	movff	_DRUM_CC+6,saveToEEPROM@to_save+21
 23385                           
 23386                           ; BSR set to: 0
 23387                           ;eeprom.c: 240: to_save[22] = DRUM_CC[7];
 23388  00508A  C1DE  F07A         	movff	_DRUM_CC+7,saveToEEPROM@to_save+22
 23389                           
 23390                           ;eeprom.c: 243: to_save[23] = POT_MODE;
 23391  00508E  0E00               	movlw	0
 23392  005090  B636               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 23393  005092  0E01               	movlw	1
 23394  005094  6F7B               	movwf	(saveToEEPROM@to_save+23)& (0+255),b
 23395                           
 23396                           ; BSR set to: 0
 23397                           ;eeprom.c: 246: to_save[24] = inputPotsArray[0].controller_number;
 23398  005096  C2AD  F07C         	movff	_inputPotsArray+1,saveToEEPROM@to_save+24
 23399                           
 23400                           ; BSR set to: 0
 23401                           ;eeprom.c: 247: to_save[25] = inputPotsArray[0].controller_number_two_byte;
 23402  00509A  C2AE  F07D         	movff	_inputPotsArray+2,saveToEEPROM@to_save+25
 23403                           
 23404                           ; BSR set to: 0
 23405                           ;eeprom.c: 249: to_save[26] = inputPotsArray[1].controller_number;
 23406  00509E  C2B0  F07E         	movff	_inputPotsArray+4,saveToEEPROM@to_save+26
 23407                           
 23408                           ; BSR set to: 0
 23409                           ;eeprom.c: 250: to_save[27] = inputPotsArray[1].controller_number_two_byte;
 23410  0050A2  C2B1  F07F         	movff	_inputPotsArray+5,saveToEEPROM@to_save+27
 23411                           
 23412                           ; BSR set to: 0
 23413                           ;eeprom.c: 252: to_save[28] = inputPotsArray[2].controller_number;
 23414  0050A6  C2B3  F080         	movff	_inputPotsArray+7,saveToEEPROM@to_save+28
 23415                           
 23416                           ; BSR set to: 0
 23417                           ;eeprom.c: 253: to_save[29] = inputPotsArray[2].controller_number_two_byte;
 23418  0050AA  C2B4  F081         	movff	_inputPotsArray+8,saveToEEPROM@to_save+29
 23419                           
 23420                           ; BSR set to: 0
 23421                           ;eeprom.c: 255: to_save[30] = inputPotsArray[3].controller_number;
 23422  0050AE  C2B6  F082         	movff	_inputPotsArray+10,saveToEEPROM@to_save+30
 23423                           
 23424                           ; BSR set to: 0
 23425                           ;eeprom.c: 256: to_save[31] = inputPotsArray[3].controller_number_two_byte;
 23426  0050B2  C2B7  F083         	movff	_inputPotsArray+11,saveToEEPROM@to_save+31
 23427                           
 23428                           ; BSR set to: 0
 23429                           ;eeprom.c: 258: to_save[32] = inputPotsArray[4].controller_number;
 23430  0050B6  C2B9  F084         	movff	_inputPotsArray+13,saveToEEPROM@to_save+32
 23431                           
 23432                           ; BSR set to: 0
 23433                           ;eeprom.c: 259: to_save[33] = inputPotsArray[4].controller_number_two_byte;
 23434  0050BA  C2BA  F085         	movff	_inputPotsArray+14,saveToEEPROM@to_save+33
 23435                           
 23436                           ; BSR set to: 0
 23437                           ;eeprom.c: 261: to_save[34] = inputPotsArray[5].controller_number;
 23438  0050BE  C2BC  F086         	movff	_inputPotsArray+16,saveToEEPROM@to_save+34
 23439                           
 23440                           ; BSR set to: 0
 23441                           ;eeprom.c: 262: to_save[35] = inputPotsArray[5].controller_number_two_byte;
 23442  0050C2  C2BD  F087         	movff	_inputPotsArray+17,saveToEEPROM@to_save+35
 23443                           
 23444                           ; BSR set to: 0
 23445                           ;eeprom.c: 264: to_save[36] = inputPotsArray[6].controller_number;
 23446  0050C6  C2BF  F088         	movff	_inputPotsArray+19,saveToEEPROM@to_save+36
 23447                           
 23448                           ; BSR set to: 0
 23449                           ;eeprom.c: 265: to_save[37] = inputPotsArray[6].controller_number_two_byte;
 23450  0050CA  C2C0  F089         	movff	_inputPotsArray+20,saveToEEPROM@to_save+37
 23451                           
 23452                           ; BSR set to: 0
 23453                           ;eeprom.c: 269: to_save[38] = inputPotsArray[7].controller_number;
 23454  0050CE  C2C2  F08A         	movff	_inputPotsArray+22,saveToEEPROM@to_save+38
 23455                           
 23456                           ; BSR set to: 0
 23457                           ;eeprom.c: 270: to_save[39] = inputPotsArray[7].controller_number_two_byte;
 23458  0050D2  C2C3  F08B         	movff	_inputPotsArray+23,saveToEEPROM@to_save+39
 23459                           
 23460                           ; BSR set to: 0
 23461                           ;eeprom.c: 272: to_save[40] = inputPotsArray[8].controller_number;
 23462  0050D6  C2C5  F08C         	movff	_inputPotsArray+25,saveToEEPROM@to_save+40
 23463                           
 23464                           ; BSR set to: 0
 23465                           ;eeprom.c: 273: to_save[41] = inputPotsArray[8].controller_number_two_byte;
 23466  0050DA  C2C6  F08D         	movff	_inputPotsArray+26,saveToEEPROM@to_save+41
 23467                           
 23468                           ; BSR set to: 0
 23469                           ;eeprom.c: 275: to_save[42] = inputPotsArray[9].controller_number;
 23470  0050DE  C2C8  F08E         	movff	_inputPotsArray+28,saveToEEPROM@to_save+42
 23471                           
 23472                           ; BSR set to: 0
 23473                           ;eeprom.c: 276: to_save[43] = inputPotsArray[9].controller_number_two_byte;
 23474  0050E2  C2C9  F08F         	movff	_inputPotsArray+29,saveToEEPROM@to_save+43
 23475                           
 23476                           ; BSR set to: 0
 23477                           ;eeprom.c: 278: to_save[44] = inputPotsArray[10].controller_number;
 23478  0050E6  C2CB  F090         	movff	_inputPotsArray+31,saveToEEPROM@to_save+44
 23479                           
 23480                           ; BSR set to: 0
 23481                           ;eeprom.c: 279: to_save[45] = inputPotsArray[10].controller_number_two_byte;
 23482  0050EA  C2CC  F091         	movff	_inputPotsArray+32,saveToEEPROM@to_save+45
 23483                           
 23484                           ; BSR set to: 0
 23485                           ;eeprom.c: 281: to_save[46] = inputPotsArray[11].controller_number;
 23486  0050EE  C2CE  F092         	movff	_inputPotsArray+34,saveToEEPROM@to_save+46
 23487                           
 23488                           ; BSR set to: 0
 23489                           ;eeprom.c: 282: to_save[47] = inputPotsArray[11].controller_number_two_byte;
 23490  0050F2  C2CF  F093         	movff	_inputPotsArray+35,saveToEEPROM@to_save+47
 23491                           
 23492                           ; BSR set to: 0
 23493                           ;eeprom.c: 284: to_save[48] = inputPotsArray[12].controller_number;
 23494  0050F6  C2D1  F094         	movff	_inputPotsArray+37,saveToEEPROM@to_save+48
 23495                           
 23496                           ; BSR set to: 0
 23497                           ;eeprom.c: 285: to_save[49] = inputPotsArray[12].controller_number_two_byte;
 23498  0050FA  C2D2  F095         	movff	_inputPotsArray+38,saveToEEPROM@to_save+49
 23499                           
 23500                           ; BSR set to: 0
 23501                           ;eeprom.c: 287: to_save[50] = inputPotsArray[13].controller_number;
 23502  0050FE  C2D4  F096         	movff	_inputPotsArray+40,saveToEEPROM@to_save+50
 23503                           
 23504                           ; BSR set to: 0
 23505                           ;eeprom.c: 288: to_save[51] = inputPotsArray[13].controller_number_two_byte;
 23506  005102  C2D5  F097         	movff	_inputPotsArray+41,saveToEEPROM@to_save+51
 23507                           
 23508                           ; BSR set to: 0
 23509                           ;eeprom.c: 290: to_save[52] = inputPotsArray[14].controller_number;
 23510  005106  C2D7  F098         	movff	_inputPotsArray+43,saveToEEPROM@to_save+52
 23511                           
 23512                           ; BSR set to: 0
 23513                           ;eeprom.c: 291: to_save[53] = inputPotsArray[14].controller_number_two_byte;
 23514  00510A  C2D8  F099         	movff	_inputPotsArray+44,saveToEEPROM@to_save+53
 23515                           
 23516                           ; BSR set to: 0
 23517                           ;eeprom.c: 293: to_save[54] = inputPotsArray[15].controller_number;
 23518  00510E  C2DA  F09A         	movff	_inputPotsArray+46,saveToEEPROM@to_save+54
 23519                           
 23520                           ; BSR set to: 0
 23521                           ;eeprom.c: 294: to_save[55] = inputPotsArray[15].controller_number_two_byte;
 23522  005112  C2DB  F09B         	movff	_inputPotsArray+47,saveToEEPROM@to_save+55
 23523                           
 23524                           ; BSR set to: 0
 23525                           ;eeprom.c: 298: to_save[56] = channel;
 23526  005116  C0F6  F09C         	movff	_channel,saveToEEPROM@to_save+56
 23527                           
 23528                           ; BSR set to: 0
 23529                           ;eeprom.c: 299: to_save[57] = drumchannel;
 23530  00511A  C0FE  F09D         	movff	_drumchannel,saveToEEPROM@to_save+57
 23531                           
 23532                           ; BSR set to: 0
 23533                           ;eeprom.c: 302: to_save[58] = octave;
 23534  00511E  C0FC  F09E         	movff	_octave,saveToEEPROM@to_save+58
 23535                           
 23536                           ; BSR set to: 0
 23537                           ;eeprom.c: 303: to_save[59] = semitone;
 23538  005122  C0F3  F09F         	movff	_semitone,saveToEEPROM@to_save+59
 23539                           
 23540                           ; BSR set to: 0
 23541                           ;eeprom.c: 306: to_save[60] = patch_number;
 23542  005126  C171  F0A0         	movff	_patch_number,saveToEEPROM@to_save+60
 23543                           
 23544                           ;eeprom.c: 309: to_save[61] = ARPEGGIO_ON;
 23545  00512A  0E00               	movlw	0
 23546  00512C  B635               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 23547  00512E  0E01               	movlw	1
 23548  005130  6FA1               	movwf	(saveToEEPROM@to_save+61)& (0+255),b
 23549                           
 23550                           ; BSR set to: 0
 23551                           ;eeprom.c: 310: to_save[62] = BPM;
 23552  005132  C0FF  F0A2         	movff	_BPM,saveToEEPROM@to_save+62
 23553                           
 23554                           ; BSR set to: 0
 23555                           ;eeprom.c: 311: to_save[63] = OCTAVES;
 23556  005136  C0F8  F0A3         	movff	_OCTAVES,saveToEEPROM@to_save+63
 23557                           
 23558                           ; BSR set to: 0
 23559                           ;eeprom.c: 312: to_save[64] = ARPEGGIO_TYPE;
 23560  00513A  C0EA  F0A4         	movff	_ARPEGGIO_TYPE,saveToEEPROM@to_save+64
 23561                           
 23562                           ; BSR set to: 0
 23563                           ;eeprom.c: 313: to_save[65] = NOTE_LENGTH_PULSES;
 23564  00513E  C0F7  F0A5         	movff	_NOTE_LENGTH_PULSES,saveToEEPROM@to_save+65
 23565                           
 23566                           ;eeprom.c: 314: to_save[66] = LATCH;
 23567  005142  0E00               	movlw	0
 23568  005144  B035               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 23569  005146  0E01               	movlw	1
 23570  005148  6FA6               	movwf	(saveToEEPROM@to_save+66)& (0+255),b
 23571                           
 23572                           ;eeprom.c: 315: to_save[67] = AUTO_LATCH;
 23573  00514A  0E00               	movlw	0
 23574  00514C  BC34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 23575  00514E  0E01               	movlw	1
 23576  005150  6FA7               	movwf	(saveToEEPROM@to_save+67)& (0+255),b
 23577                           
 23578                           ;eeprom.c: 316: to_save[68] = UN_LATCH_MODE;
 23579  005152  0E00               	movlw	0
 23580  005154  BE34               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23581  005156  0E01               	movlw	1
 23582  005158  6FA8               	movwf	(saveToEEPROM@to_save+68)& (0+255),b
 23583                           
 23584                           ;eeprom.c: 317: to_save[69] = AUTO_RANDOMIZE;
 23585  00515A  0E00               	movlw	0
 23586  00515C  B834               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 23587  00515E  0E01               	movlw	1
 23588  005160  6FA9               	movwf	(saveToEEPROM@to_save+69)& (0+255),b
 23589                           
 23590                           ;eeprom.c: 318: to_save[70] = skipFirstLast;
 23591  005162  0E00               	movlw	0
 23592  005164  B634               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 23593  005166  0E01               	movlw	1
 23594  005168  6FAA               	movwf	(saveToEEPROM@to_save+70)& (0+255),b
 23595                           
 23596                           ;eeprom.c: 319: to_save[71] = LAST_NOTE_MODE_KEY_PRESS;
 23597  00516A  0E00               	movlw	0
 23598  00516C  B234               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 23599  00516E  0E01               	movlw	1
 23600  005170  6FAB               	movwf	(saveToEEPROM@to_save+71)& (0+255),b
 23601                           
 23602                           ;eeprom.c: 320: to_save[72] = LAST_NOTE_MODE_KEY_RELEASE;
 23603  005172  0E00               	movlw	0
 23604  005174  B034               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 23605  005176  0E01               	movlw	1
 23606  005178  6FAC               	movwf	(saveToEEPROM@to_save+72)& (0+255),b
 23607                           
 23608                           ;eeprom.c: 321: to_save[73] = LAST_NOTE_MODE_TRANSPOSE;
 23609  00517A  0E00               	movlw	0
 23610  00517C  BE33               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 23611  00517E  0E01               	movlw	1
 23612  005180  6FAD               	movwf	(saveToEEPROM@to_save+73)& (0+255),b
 23613                           
 23614                           ;eeprom.c: 322: to_save[74] = LAST_NOTE_MODE_RESET;
 23615  005182  0E00               	movlw	0
 23616  005184  BC33               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 23617  005186  0E01               	movlw	1
 23618  005188  6FAE               	movwf	(saveToEEPROM@to_save+74)& (0+255),b
 23619                           
 23620                           ;eeprom.c: 325: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 23621  00518A  0E00               	movlw	0
 23622  00518C  6FB3               	movwf	(saveToEEPROM@byte_count+1)& (0+255),b
 23623  00518E  0E00               	movlw	0
 23624  005190  6FB2               	movwf	saveToEEPROM@byte_count& (0+255),b
 23625  005192                     l18897:
 23626                           
 23627                           ; BSR set to: 0
 23628  005192  51B3               	movf	(saveToEEPROM@byte_count+1)& (0+255),w,b
 23629  005194  E11B               	bnz	l4293
 23630  005196  0E4B               	movlw	75
 23631  005198  5DB2               	subwf	saveToEEPROM@byte_count& (0+255),w,b
 23632  00519A  B0D8               	btfsc	status,0,c
 23633  00519C  0012               	return	
 23634                           
 23635                           ; BSR set to: 0
 23636                           ;eeprom.c: 326: (Busy_eep(), Write_b_eep((byte_count + baseAddress),to_save[byte_count])
      +                          );
 23637                           
 23638                           ; BSR set to: 0
 23639                           
 23640                           ; BSR set to: 0
 23641  00519E  ECED  F04A         	call	_Busy_eep	;wreg free
 23642  0051A2  0100               	movlb	0	; () banked
 23643  0051A4  51AF               	movf	saveToEEPROM@baseAddress& (0+255),w,b
 23644  0051A6  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 23645  0051A8  6F60               	movwf	Write_b_eep@badd& (0+255),b
 23646  0051AA  51B0               	movf	(saveToEEPROM@baseAddress+1)& (0+255),w,b
 23647  0051AC  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 23648  0051AE  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 23649  0051B0  0E64               	movlw	low saveToEEPROM@to_save
 23650  0051B2  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 23651  0051B4  6ED9               	movwf	fsr2l,c
 23652  0051B6  0E00               	movlw	high saveToEEPROM@to_save
 23653  0051B8  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 23654  0051BA  6EDA               	movwf	fsr2h,c
 23655  0051BC  50DF               	movf	indf2,w,c
 23656  0051BE  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 23657  0051C0  ECA8  F047         	call	_Write_b_eep	;wreg free
 23658  0051C4  0100               	movlb	0	; () banked
 23659  0051C6  4BB2               	infsnz	saveToEEPROM@byte_count& (0+255),f,b
 23660  0051C8  2BB3               	incf	(saveToEEPROM@byte_count+1)& (0+255),f,b
 23661  0051CA  D7E3               	goto	l18897
 23662  0051CC                     l4293:
 23663                           
 23664                           ; BSR set to: 0
 23665  0051CC  0012               	return		;funcret
 23666  0051CE                     __end_of_saveToEEPROM:
 23667                           	opt stack 0
 23668                           tblptru	equ	0xFF8
 23669                           tblptrh	equ	0xFF7
 23670                           tblptrl	equ	0xFF6
 23671                           tablat	equ	0xFF5
 23672                           prodh	equ	0xFF4
 23673                           prodl	equ	0xFF3
 23674                           intcon	equ	0xFF2
 23675                           intcon2	equ	0xFF1
 23676                           postinc0	equ	0xFEE
 23677                           wreg	equ	0xFE8
 23678                           indf1	equ	0xFE7
 23679                           postdec1	equ	0xFE5
 23680                           fsr1h	equ	0xFE2
 23681                           fsr1l	equ	0xFE1
 23682                           indf2	equ	0xFDF
 23683                           postinc2	equ	0xFDE
 23684                           plusw2	equ	0xFDB
 23685                           fsr2h	equ	0xFDA
 23686                           fsr2l	equ	0xFD9
 23687                           status	equ	0xFD8
 23688                           
 23689 ;; *************** function _Write_b_eep *****************
 23690 ;; Defined at:
 23691 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\write_B.c"
 23692 ;; Parameters:    Size  Location     Type
 23693 ;;  badd            2    0[BANK0 ] unsigned int 
 23694 ;;  bdat            1    2[BANK0 ] unsigned char 
 23695 ;; Auto vars:     Size  Location     Type
 23696 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 23697 ;; Return value:  Size  Location     Type
 23698 ;;                  1    wreg      void 
 23699 ;; Registers used:
 23700 ;;		wreg, status,2, status,0
 23701 ;; Tracked objects:
 23702 ;;		On entry : 0/0
 23703 ;;		On exit  : 0/0
 23704 ;;		Unchanged: 0/0
 23705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23706 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23707 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23709 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23710 ;;Total ram usage:        4 bytes
 23711 ;; Hardware stack levels used:    1
 23712 ;; Hardware stack levels required when called:    5
 23713 ;; This function calls:
 23714 ;;		Nothing
 23715 ;; This function is called by:
 23716 ;;		_Function_D_2
 23717 ;;		_Function_G_1
 23718 ;;		_Function_G_2
 23719 ;;		_Function_G_3
 23720 ;;		_Function_G_4
 23721 ;;		_initializeSaveSlotsOnce
 23722 ;;		_saveToEEPROM
 23723 ;; This function uses a non-reentrant model
 23724 ;;
 23725                           
 23726                           	psect	text71
 23727  008F50                     __ptext71:
 23728                           	opt stack 0
 23729  008F50                     _Write_b_eep:
 23730                           	opt stack 22
 23731                           
 23732                           ; BSR set to: 0
 23733                           ;incstack = 0
 23734  008F50  0E00               	movlw	0
 23735  008F52  0100               	movlb	0	; () banked
 23736  008F54  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 23737                           
 23738                           ; BSR set to: 0
 23739  008F56  5161               	movf	(Write_b_eep@badd+1)& (0+255),w,b
 23740  008F58  0B03               	andlw	3
 23741  008F5A  6EAA               	movwf	4010,c	;volatile
 23742                           
 23743                           ; BSR set to: 0
 23744  008F5C  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 23745                           
 23746                           ; BSR set to: 0
 23747  008F60  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 23748                           
 23749                           ; BSR set to: 0
 23750  008F64  9EA6               	bcf	4006,7,c	;volsfr
 23751                           
 23752                           ; BSR set to: 0
 23753  008F66  9CA6               	bcf	4006,6,c	;volsfr
 23754                           
 23755                           ; BSR set to: 0
 23756  008F68  84A6               	bsf	4006,2,c	;volsfr
 23757                           
 23758                           ; BSR set to: 0
 23759  008F6A  0E00               	movlw	0
 23760  008F6C  BEF2               	btfsc	intcon,7,c	;volatile
 23761  008F6E  0E01               	movlw	1
 23762  008F70  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 23763                           
 23764                           ; BSR set to: 0
 23765  008F72  9EF2               	bcf	intcon,7,c	;volatile
 23766                           
 23767                           ; BSR set to: 0
 23768  008F74  0E55               	movlw	85
 23769  008F76  6EA7               	movwf	4007,c	;volsfr
 23770                           
 23771                           ; BSR set to: 0
 23772  008F78  0EAA               	movlw	170
 23773  008F7A  6EA7               	movwf	4007,c	;volsfr
 23774                           
 23775                           ; BSR set to: 0
 23776  008F7C  82A6               	bsf	4006,1,c	;volsfr
 23777  008F7E                     
 23778                           ; BSR set to: 0
 23779  008F7E  B2A6               	btfsc	4006,1,c	;volsfr
 23780  008F80  D7FE               	goto	l5417
 23781  008F82  0100               	movlb	0	; () banked
 23782  008F84  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 23783  008F86  D002               	bra	u28215
 23784  008F88  9EF2               	bcf	intcon,7,c	;volatile
 23785  008F8A  D001               	bra	u28216
 23786  008F8C                     u28215:
 23787  008F8C  8EF2               	bsf	intcon,7,c	;volatile
 23788  008F8E                     u28216:
 23789  008F8E  94A6               	bcf	4006,2,c	;volsfr
 23790  008F90  0012               	return		;funcret
 23791  008F92                     __end_of_Write_b_eep:
 23792                           	opt stack 0
 23793                           tblptru	equ	0xFF8
 23794                           tblptrh	equ	0xFF7
 23795                           tblptrl	equ	0xFF6
 23796                           tablat	equ	0xFF5
 23797                           prodh	equ	0xFF4
 23798                           prodl	equ	0xFF3
 23799                           intcon	equ	0xFF2
 23800                           intcon2	equ	0xFF1
 23801                           postinc0	equ	0xFEE
 23802                           wreg	equ	0xFE8
 23803                           indf1	equ	0xFE7
 23804                           postdec1	equ	0xFE5
 23805                           fsr1h	equ	0xFE2
 23806                           fsr1l	equ	0xFE1
 23807                           indf2	equ	0xFDF
 23808                           postinc2	equ	0xFDE
 23809                           plusw2	equ	0xFDB
 23810                           fsr2h	equ	0xFDA
 23811                           fsr2l	equ	0xFD9
 23812                           status	equ	0xFD8
 23813                           
 23814 ;; *************** function _Busy_eep *****************
 23815 ;; Defined at:
 23816 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\busy_eep.c"
 23817 ;; Parameters:    Size  Location     Type
 23818 ;;		None
 23819 ;; Auto vars:     Size  Location     Type
 23820 ;;		None
 23821 ;; Return value:  Size  Location     Type
 23822 ;;                  1    wreg      void 
 23823 ;; Registers used:
 23824 ;;		None
 23825 ;; Tracked objects:
 23826 ;;		On entry : 0/0
 23827 ;;		On exit  : 0/0
 23828 ;;		Unchanged: 0/0
 23829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23834 ;;Total ram usage:        0 bytes
 23835 ;; Hardware stack levels used:    1
 23836 ;; Hardware stack levels required when called:    5
 23837 ;; This function calls:
 23838 ;;		Nothing
 23839 ;; This function is called by:
 23840 ;;		_Function_D_2
 23841 ;;		_Function_G_1
 23842 ;;		_Function_G_2
 23843 ;;		_Function_G_3
 23844 ;;		_Function_G_4
 23845 ;;		_initializeSaveSlotsOnce
 23846 ;;		_saveToEEPROM
 23847 ;; This function uses a non-reentrant model
 23848 ;;
 23849                           
 23850                           	psect	text72
 23851  0095DA                     __ptext72:
 23852                           	opt stack 0
 23853  0095DA                     _Busy_eep:
 23854                           	opt stack 22
 23855                           
 23856                           ;incstack = 0
 23857  0095DA  B2A6               	btfsc	4006,1,c	;volsfr
 23858  0095DC  D7FE               	goto	_Busy_eep
 23859  0095DE  0012               	return	
 23860  0095E0                     __end_of_Busy_eep:
 23861                           	opt stack 0
 23862                           tblptru	equ	0xFF8
 23863                           tblptrh	equ	0xFF7
 23864                           tblptrl	equ	0xFF6
 23865                           tablat	equ	0xFF5
 23866                           prodh	equ	0xFF4
 23867                           prodl	equ	0xFF3
 23868                           intcon	equ	0xFF2
 23869                           intcon2	equ	0xFF1
 23870                           postinc0	equ	0xFEE
 23871                           wreg	equ	0xFE8
 23872                           indf1	equ	0xFE7
 23873                           postdec1	equ	0xFE5
 23874                           fsr1h	equ	0xFE2
 23875                           fsr1l	equ	0xFE1
 23876                           indf2	equ	0xFDF
 23877                           postinc2	equ	0xFDE
 23878                           plusw2	equ	0xFDB
 23879                           fsr2h	equ	0xFDA
 23880                           fsr2l	equ	0xFD9
 23881                           status	equ	0xFD8
 23882                           
 23883 ;; *************** function _Read_b_eep *****************
 23884 ;; Defined at:
 23885 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\read_B.c"
 23886 ;; Parameters:    Size  Location     Type
 23887 ;;  badd            2    0[BANK0 ] unsigned int 
 23888 ;; Auto vars:     Size  Location     Type
 23889 ;;		None
 23890 ;; Return value:  Size  Location     Type
 23891 ;;                  1    wreg      unsigned char 
 23892 ;; Registers used:
 23893 ;;		wreg, status,2, status,0
 23894 ;; Tracked objects:
 23895 ;;		On entry : 0/0
 23896 ;;		On exit  : 0/0
 23897 ;;		Unchanged: 0/0
 23898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23899 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23903 ;;Total ram usage:        2 bytes
 23904 ;; Hardware stack levels used:    1
 23905 ;; Hardware stack levels required when called:    5
 23906 ;; This function calls:
 23907 ;;		Nothing
 23908 ;; This function is called by:
 23909 ;;		_initializeSaveSlotsOnce
 23910 ;;		_selectSlotOnBoot
 23911 ;;		_loadFromEEPROM
 23912 ;;		_main
 23913 ;; This function uses a non-reentrant model
 23914 ;;
 23915                           
 23916                           	psect	text73
 23917  00954C                     __ptext73:
 23918                           	opt stack 0
 23919  00954C                     _Read_b_eep:
 23920                           	opt stack 23
 23921                           
 23922                           ;incstack = 0
 23923  00954C  0100               	movlb	0	; () banked
 23924  00954E  5161               	movf	(Read_b_eep@badd+1)& (0+255),w,b
 23925  009550  0B03               	andlw	3
 23926  009552  6EAA               	movwf	4010,c	;volatile
 23927                           
 23928                           ; BSR set to: 0
 23929  009554  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 23930                           
 23931                           ; BSR set to: 0
 23932  009558  9CA6               	bcf	4006,6,c	;volsfr
 23933                           
 23934                           ; BSR set to: 0
 23935  00955A  9EA6               	bcf	4006,7,c	;volsfr
 23936                           
 23937                           ; BSR set to: 0
 23938  00955C  80A6               	bsf	4006,0,c	;volsfr
 23939                           
 23940                           ; BSR set to: 0
 23941  00955E  F000               	nop	
 23942  009560  F000               	nop	
 23943  009562  50A8               	movf	4008,w,c	;volatile
 23944  009564  0012               	return	
 23945  009566                     __end_of_Read_b_eep:
 23946                           	opt stack 0
 23947                           tblptru	equ	0xFF8
 23948                           tblptrh	equ	0xFF7
 23949                           tblptrl	equ	0xFF6
 23950                           tablat	equ	0xFF5
 23951                           prodh	equ	0xFF4
 23952                           prodl	equ	0xFF3
 23953                           intcon	equ	0xFF2
 23954                           intcon2	equ	0xFF1
 23955                           postinc0	equ	0xFEE
 23956                           wreg	equ	0xFE8
 23957                           indf1	equ	0xFE7
 23958                           postdec1	equ	0xFE5
 23959                           fsr1h	equ	0xFE2
 23960                           fsr1l	equ	0xFE1
 23961                           indf2	equ	0xFDF
 23962                           postinc2	equ	0xFDE
 23963                           plusw2	equ	0xFDB
 23964                           fsr2h	equ	0xFDA
 23965                           fsr2l	equ	0xFD9
 23966                           status	equ	0xFD8
 23967                           
 23968 ;; *************** function _initializeMenuArray *****************
 23969 ;; Defined at:
 23970 ;;		line 27 in file "menu.c"
 23971 ;; Parameters:    Size  Location     Type
 23972 ;;		None
 23973 ;; Auto vars:     Size  Location     Type
 23974 ;;  i               1   12[BANK0 ] unsigned char 
 23975 ;;  NumberOfElem    1   11[BANK0 ] unsigned char 
 23976 ;; Return value:  Size  Location     Type
 23977 ;;                  1    wreg      void 
 23978 ;; Registers used:
 23979 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23980 ;; Tracked objects:
 23981 ;;		On entry : 0/0
 23982 ;;		On exit  : 0/0
 23983 ;;		Unchanged: 0/0
 23984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23986 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23988 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23989 ;;Total ram usage:        3 bytes
 23990 ;; Hardware stack levels used:    1
 23991 ;; Hardware stack levels required when called:    6
 23992 ;; This function calls:
 23993 ;;		___wmul
 23994 ;; This function is called by:
 23995 ;;		_main
 23996 ;; This function uses a non-reentrant model
 23997 ;;
 23998                           
 23999                           	psect	text74
 24000  004DD8                     __ptext74:
 24001                           	opt stack 0
 24002  004DD8                     _initializeMenuArray:
 24003                           	opt stack 24
 24004                           
 24005                           ;menu.c: 30: unsigned char NumberOfElements = sizeof(menuArray)/sizeof(menuArray[0]);
 24006                           
 24007                           ;incstack = 0
 24008  004DD8  0E23               	movlw	35
 24009  004DDA  0100               	movlb	0	; () banked
 24010  004DDC  6F6B               	movwf	initializeMenuArray@NumberOfElements& (0+255),b
 24011                           
 24012                           ;menu.c: 33: for(unsigned char i = 1;i<NumberOfElements;i++) {
 24013  004DDE  0E01               	movlw	1
 24014  004DE0  6F6C               	movwf	initializeMenuArray@i& (0+255),b
 24015  004DE2  D03C               	goto	l3315
 24016  004DE4                     
 24017                           ; BSR set to: 0
 24018                           ;menu.c: 34: menuArray[i].address = menuArray[i-1].address + menuArray[i-1].number;
 24019                           
 24020                           ; BSR set to: 0
 24021  004DE4  516C               	movf	initializeMenuArray@i& (0+255),w,b
 24022  004DE6  0D03               	mullw	3
 24023  004DE8  0E01               	movlw	1
 24024  004DEA  26F3               	addwf	prodl,f,c
 24025  004DEC  0E00               	movlw	0
 24026  004DEE  22F4               	addwfc	prodh,f,c
 24027  004DF0  0E00               	movlw	low _menuArray
 24028  004DF2  24F3               	addwf	prodl,w,c
 24029  004DF4  6ED9               	movwf	fsr2l,c
 24030  004DF6  0E03               	movlw	high _menuArray
 24031  004DF8  20F4               	addwfc	prodh,w,c
 24032  004DFA  6EDA               	movwf	fsr2h,c
 24033  004DFC  0EFF               	movlw	255
 24034  004DFE  256C               	addwf	initializeMenuArray@i& (0+255),w,b
 24035  004E00  6F64               	movwf	___wmul@multiplier& (0+255),b
 24036  004E02  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 24037  004E04  0EFF               	movlw	255
 24038  004E06  2365               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 24039  004E08  0E00               	movlw	0
 24040  004E0A  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24041  004E0C  0E03               	movlw	3
 24042  004E0E  6F66               	movwf	___wmul@multiplicand& (0+255),b
 24043  004E10  EC32  F04A         	call	___wmul	;wreg free
 24044  004E14  0E00               	movlw	low _menuArray
 24045  004E16  0100               	movlb	0	; () banked
 24046  004E18  2564               	addwf	?___wmul& (0+255),w,b
 24047  004E1A  6EE1               	movwf	fsr1l,c
 24048  004E1C  0E03               	movlw	high _menuArray
 24049  004E1E  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 24050  004E20  6EE2               	movwf	fsr1h,c
 24051  004E22  50E7               	movf	indf1,w,c
 24052  004E24  6F6A               	movwf	??_initializeMenuArray& (0+255),b
 24053  004E26  0EFF               	movlw	255
 24054  004E28  256C               	addwf	initializeMenuArray@i& (0+255),w,b
 24055  004E2A  6F64               	movwf	___wmul@multiplier& (0+255),b
 24056  004E2C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 24057  004E2E  0EFF               	movlw	255
 24058  004E30  2365               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 24059  004E32  0E00               	movlw	0
 24060  004E34  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24061  004E36  0E03               	movlw	3
 24062  004E38  6F66               	movwf	___wmul@multiplicand& (0+255),b
 24063  004E3A  EC32  F04A         	call	___wmul	;wreg free
 24064  004E3E  0E01               	movlw	1
 24065  004E40  0100               	movlb	0	; () banked
 24066  004E42  2764               	addwf	?___wmul& (0+255),f,b
 24067  004E44  0E00               	movlw	0
 24068  004E46  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 24069  004E48  0E00               	movlw	low _menuArray
 24070  004E4A  2564               	addwf	?___wmul& (0+255),w,b
 24071  004E4C  6EE1               	movwf	fsr1l,c
 24072  004E4E  0E03               	movlw	high _menuArray
 24073  004E50  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 24074  004E52  6EE2               	movwf	fsr1h,c
 24075  004E54  50E7               	movf	indf1,w,c
 24076  004E56  256A               	addwf	??_initializeMenuArray& (0+255),w,b
 24077  004E58  6EDF               	movwf	indf2,c
 24078                           
 24079                           ; BSR set to: 0
 24080  004E5A  2B6C               	incf	initializeMenuArray@i& (0+255),f,b
 24081  004E5C                     l3315:
 24082                           
 24083                           ; BSR set to: 0
 24084                           
 24085                           ; BSR set to: 0
 24086  004E5C  516B               	movf	initializeMenuArray@NumberOfElements& (0+255),w,b
 24087  004E5E  5D6C               	subwf	initializeMenuArray@i& (0+255),w,b
 24088  004E60  A0D8               	btfss	status,0,c
 24089  004E62  D7C0               	goto	l3316
 24090                           
 24091                           ; BSR set to: 0
 24092                           ;menu.c: 35: }
 24093                           ;menu.c: 38: mainMenu = menuArray[0];
 24094  004E64  C300  F168         	movff	_menuArray,_mainMenu
 24095  004E68  C301  F169         	movff	_menuArray+1,_mainMenu+1
 24096  004E6C  C302  F16A         	movff	_menuArray+2,_mainMenu+2
 24097                           
 24098                           ;menu.c: 39: keyboardMenu = menuArray[1];
 24099  004E70  C303  F04A         	movff	_menuArray+3,_keyboardMenu
 24100  004E74  C304  F04B         	movff	_menuArray+4,_keyboardMenu+1
 24101  004E78  C305  F04C         	movff	_menuArray+5,_keyboardMenu+2
 24102                           
 24103                           ;menu.c: 40: modeMenu = menuArray[2];
 24104  004E7C  C306  F047         	movff	_menuArray+6,_modeMenu
 24105  004E80  C307  F048         	movff	_menuArray+7,_modeMenu+1
 24106  004E84  C308  F049         	movff	_menuArray+8,_modeMenu+2
 24107                           
 24108                           ;menu.c: 41: triadMenu = menuArray[3];
 24109  004E88  C309  F044         	movff	_menuArray+9,_triadMenu
 24110  004E8C  C30A  F045         	movff	_menuArray+10,_triadMenu+1
 24111  004E90  C30B  F046         	movff	_menuArray+11,_triadMenu+2
 24112                           
 24113                           ;menu.c: 42: seventhMenu = menuArray[4];
 24114  004E94  C30C  F165         	movff	_menuArray+12,_seventhMenu
 24115  004E98  C30D  F166         	movff	_menuArray+13,_seventhMenu+1
 24116  004E9C  C30E  F167         	movff	_menuArray+14,_seventhMenu+2
 24117                           
 24118                           ;menu.c: 43: transposeMenu = menuArray[5];
 24119  004EA0  C30F  F162         	movff	_menuArray+15,_transposeMenu
 24120  004EA4  C310  F163         	movff	_menuArray+16,_transposeMenu+1
 24121  004EA8  C311  F164         	movff	_menuArray+17,_transposeMenu+2
 24122                           
 24123                           ;menu.c: 44: drumMenu = menuArray[6];
 24124  004EAC  C312  F041         	movff	_menuArray+18,_drumMenu
 24125  004EB0  C313  F042         	movff	_menuArray+19,_drumMenu+1
 24126  004EB4  C314  F043         	movff	_menuArray+20,_drumMenu+2
 24127                           
 24128                           ;menu.c: 45: drumCCTypeMenu = menuArray[7];
 24129  004EB8  C315  F15F         	movff	_menuArray+21,_drumCCTypeMenu
 24130  004EBC  C316  F160         	movff	_menuArray+22,_drumCCTypeMenu+1
 24131  004EC0  C317  F161         	movff	_menuArray+23,_drumCCTypeMenu+2
 24132                           
 24133                           ;menu.c: 46: drumNNMenu = menuArray[8];
 24134  004EC4  C318  F15C         	movff	_menuArray+24,_drumNNMenu
 24135  004EC8  C319  F15D         	movff	_menuArray+25,_drumNNMenu+1
 24136  004ECC  C31A  F15E         	movff	_menuArray+26,_drumNNMenu+2
 24137                           
 24138                           ;menu.c: 47: drumCCMenu = menuArray[9];
 24139  004ED0  C31B  F159         	movff	_menuArray+27,_drumCCMenu
 24140  004ED4  C31C  F15A         	movff	_menuArray+28,_drumCCMenu+1
 24141  004ED8  C31D  F15B         	movff	_menuArray+29,_drumCCMenu+2
 24142                           
 24143                           ;menu.c: 48: potsMenu = menuArray[10];
 24144  004EDC  C31E  F03E         	movff	_menuArray+30,_potsMenu
 24145  004EE0  C31F  F03F         	movff	_menuArray+31,_potsMenu+1
 24146  004EE4  C320  F040         	movff	_menuArray+32,_potsMenu+2
 24147                           
 24148                           ;menu.c: 49: potsResoMenu = menuArray[11];
 24149  004EE8  C321  F156         	movff	_menuArray+33,_potsResoMenu
 24150  004EEC  C322  F157         	movff	_menuArray+34,_potsResoMenu+1
 24151  004EF0  C323  F158         	movff	_menuArray+35,_potsResoMenu+2
 24152                           
 24153                           ;menu.c: 50: potsCCMenu = menuArray[12];
 24154  004EF4  C324  F150         	movff	_menuArray+36,_potsCCMenu
 24155  004EF8  C325  F151         	movff	_menuArray+37,_potsCCMenu+1
 24156  004EFC  C326  F152         	movff	_menuArray+38,_potsCCMenu+2
 24157                           
 24158                           ;menu.c: 51: slidepotsCCMenu = menuArray[13];
 24159  004F00  C327  F14D         	movff	_menuArray+39,_slidepotsCCMenu
 24160  004F04  C328  F14E         	movff	_menuArray+40,_slidepotsCCMenu+1
 24161  004F08  C329  F14F         	movff	_menuArray+41,_slidepotsCCMenu+2
 24162                           
 24163                           ;menu.c: 52: joystickCCMenu = menuArray[14];
 24164  004F0C  C32A  F14A         	movff	_menuArray+42,_joystickCCMenu
 24165  004F10  C32B  F14B         	movff	_menuArray+43,_joystickCCMenu+1
 24166  004F14  C32C  F14C         	movff	_menuArray+44,_joystickCCMenu+2
 24167                           
 24168                           ;menu.c: 53: midiChannelMenu = menuArray[15];
 24169  004F18  C32D  F147         	movff	_menuArray+45,_midiChannelMenu
 24170  004F1C  C32E  F148         	movff	_menuArray+46,_midiChannelMenu+1
 24171  004F20  C32F  F149         	movff	_menuArray+47,_midiChannelMenu+2
 24172                           
 24173                           ;menu.c: 54: eepromMenu = menuArray[16];
 24174  004F24  C330  F13B         	movff	_menuArray+48,_eepromMenu
 24175  004F28  C331  F13C         	movff	_menuArray+49,_eepromMenu+1
 24176  004F2C  C332  F13D         	movff	_menuArray+50,_eepromMenu+2
 24177                           
 24178                           ;menu.c: 55: savesMenu = menuArray[17];
 24179  004F30  C333  F0DF         	movff	_menuArray+51,_savesMenu
 24180  004F34  C334  F0E0         	movff	_menuArray+52,_savesMenu+1
 24181  004F38  C335  F0E1         	movff	_menuArray+53,_savesMenu+2
 24182                           
 24183                           ;menu.c: 56: encoderPolarityMenu = menuArray[18];
 24184  004F3C  C336  F138         	movff	_menuArray+54,_encoderPolarityMenu
 24185  004F40  C337  F139         	movff	_menuArray+55,_encoderPolarityMenu+1
 24186  004F44  C338  F13A         	movff	_menuArray+56,_encoderPolarityMenu+2
 24187                           
 24188                           ;menu.c: 57: arpeggiatorMenu = menuArray[19];
 24189  004F48  C339  F03B         	movff	_menuArray+57,_arpeggiatorMenu
 24190  004F4C  C33A  F03C         	movff	_menuArray+58,_arpeggiatorMenu+1
 24191  004F50  C33B  F03D         	movff	_menuArray+59,_arpeggiatorMenu+2
 24192                           
 24193                           ;menu.c: 58: arpeggiatorOnOffMenu = menuArray[20];
 24194  004F54  C33C  F135         	movff	_menuArray+60,_arpeggiatorOnOffMenu
 24195  004F58  C33D  F136         	movff	_menuArray+61,_arpeggiatorOnOffMenu+1
 24196  004F5C  C33E  F137         	movff	_menuArray+62,_arpeggiatorOnOffMenu+2
 24197                           
 24198                           ;menu.c: 59: arpeggiatorTypeMenu = menuArray[21];
 24199  004F60  C33F  F12C         	movff	_menuArray+63,_arpeggiatorTypeMenu
 24200  004F64  C340  F12D         	movff	_menuArray+64,_arpeggiatorTypeMenu+1
 24201  004F68  C341  F12E         	movff	_menuArray+65,_arpeggiatorTypeMenu+2
 24202                           
 24203                           ;menu.c: 60: arpeggiatorNoteLengthMenu = menuArray[22];
 24204  004F6C  C342  F129         	movff	_menuArray+66,_arpeggiatorNoteLengthMenu
 24205  004F70  C343  F12A         	movff	_menuArray+67,_arpeggiatorNoteLengthMenu+1
 24206  004F74  C344  F12B         	movff	_menuArray+68,_arpeggiatorNoteLengthMenu+2
 24207                           
 24208                           ;menu.c: 61: arpeggiatorLatchMenu = menuArray[23];
 24209  004F78  C345  F126         	movff	_menuArray+69,_arpeggiatorLatchMenu
 24210  004F7C  C346  F127         	movff	_menuArray+70,_arpeggiatorLatchMenu+1
 24211  004F80  C347  F128         	movff	_menuArray+71,_arpeggiatorLatchMenu+2
 24212                           
 24213                           ;menu.c: 62: arpeggiatorLatchOnOffMenu = menuArray[24];
 24214  004F84  C348  F123         	movff	_menuArray+72,_arpeggiatorLatchOnOffMenu
 24215  004F88  C349  F124         	movff	_menuArray+73,_arpeggiatorLatchOnOffMenu+1
 24216  004F8C  C34A  F125         	movff	_menuArray+74,_arpeggiatorLatchOnOffMenu+2
 24217                           
 24218                           ;menu.c: 63: arpeggiatorAutoLatchOnOffMenu = menuArray[25];
 24219  004F90  C34B  F120         	movff	_menuArray+75,_arpeggiatorAutoLatchOnOffMenu
 24220  004F94  C34C  F121         	movff	_menuArray+76,_arpeggiatorAutoLatchOnOffMenu+1
 24221  004F98  C34D  F122         	movff	_menuArray+77,_arpeggiatorAutoLatchOnOffMenu+2
 24222                           
 24223                           ;menu.c: 64: arpeggiatorUnLatchModeMenu = menuArray[26];
 24224  004F9C  C34E  F11D         	movff	_menuArray+78,_arpeggiatorUnLatchModeMenu
 24225  004FA0  C34F  F11E         	movff	_menuArray+79,_arpeggiatorUnLatchModeMenu+1
 24226  004FA4  C350  F11F         	movff	_menuArray+80,_arpeggiatorUnLatchModeMenu+2
 24227                           
 24228                           ;menu.c: 65: arpeggiatorRandomizeSkipMenu = menuArray[27];
 24229  004FA8  C351  F11A         	movff	_menuArray+81,_arpeggiatorRandomizeSkipMenu
 24230  004FAC  C352  F11B         	movff	_menuArray+82,_arpeggiatorRandomizeSkipMenu+1
 24231  004FB0  C353  F11C         	movff	_menuArray+83,_arpeggiatorRandomizeSkipMenu+2
 24232                           
 24233                           ;menu.c: 66: arpeggiatorRandomizeTypeMenu = menuArray[28];
 24234  004FB4  C354  F117         	movff	_menuArray+84,_arpeggiatorRandomizeTypeMenu
 24235  004FB8  C355  F118         	movff	_menuArray+85,_arpeggiatorRandomizeTypeMenu+1
 24236  004FBC  C356  F119         	movff	_menuArray+86,_arpeggiatorRandomizeTypeMenu+2
 24237                           
 24238                           ;menu.c: 67: arpeggiatorSkipFirstLastMenu = menuArray[29];
 24239  004FC0  C357  F114         	movff	_menuArray+87,_arpeggiatorSkipFirstLastMenu
 24240  004FC4  C358  F115         	movff	_menuArray+88,_arpeggiatorSkipFirstLastMenu+1
 24241  004FC8  C359  F116         	movff	_menuArray+89,_arpeggiatorSkipFirstLastMenu+2
 24242                           
 24243                           ;menu.c: 68: arpeggiatorLastNoteModeMenu = menuArray[30];
 24244  004FCC  C35A  F0DC         	movff	_menuArray+90,_arpeggiatorLastNoteModeMenu
 24245  004FD0  C35B  F0DD         	movff	_menuArray+91,_arpeggiatorLastNoteModeMenu+1
 24246  004FD4  C35C  F0DE         	movff	_menuArray+92,_arpeggiatorLastNoteModeMenu+2
 24247                           
 24248                           ; BSR set to: 0
 24249  004FD8  0012               	return		;funcret
 24250  004FDA                     __end_of_initializeMenuArray:
 24251                           	opt stack 0
 24252                           tblptru	equ	0xFF8
 24253                           tblptrh	equ	0xFF7
 24254                           tblptrl	equ	0xFF6
 24255                           tablat	equ	0xFF5
 24256                           prodh	equ	0xFF4
 24257                           prodl	equ	0xFF3
 24258                           intcon	equ	0xFF2
 24259                           intcon2	equ	0xFF1
 24260                           postinc0	equ	0xFEE
 24261                           wreg	equ	0xFE8
 24262                           indf1	equ	0xFE7
 24263                           postdec1	equ	0xFE5
 24264                           fsr1h	equ	0xFE2
 24265                           fsr1l	equ	0xFE1
 24266                           indf2	equ	0xFDF
 24267                           postinc2	equ	0xFDE
 24268                           plusw2	equ	0xFDB
 24269                           fsr2h	equ	0xFDA
 24270                           fsr2l	equ	0xFD9
 24271                           status	equ	0xFD8
 24272                           
 24273 ;; *************** function _displayTest *****************
 24274 ;; Defined at:
 24275 ;;		line 31 in file "segment.c"
 24276 ;; Parameters:    Size  Location     Type
 24277 ;;		None
 24278 ;; Auto vars:     Size  Location     Type
 24279 ;;		None
 24280 ;; Return value:  Size  Location     Type
 24281 ;;                  1    wreg      void 
 24282 ;; Registers used:
 24283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24284 ;; Tracked objects:
 24285 ;;		On entry : 0/0
 24286 ;;		On exit  : 0/0
 24287 ;;		Unchanged: 0/0
 24288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24291 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24292 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24293 ;;Total ram usage:        2 bytes
 24294 ;; Hardware stack levels used:    1
 24295 ;; Hardware stack levels required when called:    6
 24296 ;; This function calls:
 24297 ;;		_strcpy
 24298 ;; This function is called by:
 24299 ;;		_main
 24300 ;; This function uses a non-reentrant model
 24301 ;;
 24302                           
 24303                           	psect	text75
 24304  007F08                     __ptext75:
 24305                           	opt stack 0
 24306  007F08                     _displayTest:
 24307                           	opt stack 24
 24308                           
 24309                           ;segment.c: 37: DISPLAY_MODE = 1;
 24310                           
 24311                           ; BSR set to: 0
 24312                           ;incstack = 0
 24313  007F08  0E01               	movlw	1
 24314  007F0A  6E5A               	movwf	_DISPLAY_MODE,c
 24315                           
 24316                           ;segment.c: 38: strcpy(string_to_display,"tESt");
 24317  007F0C  0EEE               	movlw	low _string_to_display
 24318  007F0E  0100               	movlb	0	; () banked
 24319  007F10  6F60               	movwf	strcpy@to& (0+255),b
 24320  007F12  0E01               	movlw	high _string_to_display
 24321  007F14  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24322  007F16  0ED7               	movlw	low STR_8
 24323  007F18  6F62               	movwf	strcpy@from& (0+255),b
 24324  007F1A  0EFF               	movlw	high STR_8
 24325  007F1C  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24326  007F1E  EC27  F049         	call	_strcpy	;wreg free
 24327                           
 24328                           ;segment.c: 40: _delay((unsigned long)((500)*(20000000/4000.0)));
 24329  007F22  0E0D               	movlw	13
 24330  007F24  0100               	movlb	0	; () banked
 24331  007F26  6F67               	movwf	(??_displayTest+1)& (0+255),b
 24332  007F28  0EAF               	movlw	175
 24333  007F2A  6F66               	movwf	??_displayTest& (0+255),b
 24334  007F2C  0EB6               	movlw	182
 24335  007F2E                     u44827:
 24336  007F2E  2EE8               	decfsz	wreg,f,c
 24337  007F30  D7FE               	bra	u44827
 24338  007F32  2F66               	decfsz	??_displayTest& (0+255),f,b
 24339  007F34  D7FC               	bra	u44827
 24340  007F36  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 24341  007F38  D7FA               	bra	u44827
 24342  007F3A  F000               	nop	
 24343                           
 24344                           ;segment.c: 42: DISPLAY_MODE = 0;
 24345  007F3C  0E00               	movlw	0
 24346  007F3E  6E5A               	movwf	_DISPLAY_MODE,c
 24347                           
 24348                           ;segment.c: 43: DIGIT_MODE = 0;
 24349  007F40  0E00               	movlw	0
 24350  007F42  6E59               	movwf	_DIGIT_MODE,c
 24351                           
 24352                           ;segment.c: 44: number_to_display = 8888;
 24353  007F44  0E22               	movlw	34
 24354  007F46  6E5C               	movwf	_number_to_display+1,c
 24355  007F48  0EB8               	movlw	184
 24356  007F4A  6E5B               	movwf	_number_to_display,c
 24357                           
 24358                           ;segment.c: 45: light_decimal_points = 1;
 24359  007F4C  8A36               	bsf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 24360                           
 24361                           ;segment.c: 46: _delay((unsigned long)((1000)*(20000000/4000.0)));
 24362  007F4E  0E1A               	movlw	26
 24363  007F50  0100               	movlb	0	; () banked
 24364  007F52  6F67               	movwf	(??_displayTest+1)& (0+255),b
 24365  007F54  0E5E               	movlw	94
 24366  007F56  6F66               	movwf	??_displayTest& (0+255),b
 24367  007F58  0E6E               	movlw	110
 24368  007F5A                     u44837:
 24369  007F5A  2EE8               	decfsz	wreg,f,c
 24370  007F5C  D7FE               	bra	u44837
 24371  007F5E  2F66               	decfsz	??_displayTest& (0+255),f,b
 24372  007F60  D7FC               	bra	u44837
 24373  007F62  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 24374  007F64  D7FA               	bra	u44837
 24375  007F66  F000               	nop	
 24376                           
 24377                           ;segment.c: 47: light_decimal_points = 0;
 24378  007F68  9A36               	bcf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 24379                           
 24380                           ;segment.c: 49: DISPLAY_MODE = 1;
 24381  007F6A  0E01               	movlw	1
 24382  007F6C  6E5A               	movwf	_DISPLAY_MODE,c
 24383                           
 24384                           ;segment.c: 50: strcpy(string_to_display,"    ");
 24385  007F6E  0EEE               	movlw	low _string_to_display
 24386  007F70  0100               	movlb	0	; () banked
 24387  007F72  6F60               	movwf	strcpy@to& (0+255),b
 24388  007F74  0E01               	movlw	high _string_to_display
 24389  007F76  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24390  007F78  0E70               	movlw	low (STR_10+12)
 24391  007F7A  6F62               	movwf	strcpy@from& (0+255),b
 24392  007F7C  0EFD               	movlw	high (STR_10+12)
 24393  007F7E  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24394  007F80  EC27  F049         	call	_strcpy	;wreg free
 24395  007F84  0012               	return		;funcret
 24396  007F86                     __end_of_displayTest:
 24397                           	opt stack 0
 24398                           tblptru	equ	0xFF8
 24399                           tblptrh	equ	0xFF7
 24400                           tblptrl	equ	0xFF6
 24401                           tablat	equ	0xFF5
 24402                           prodh	equ	0xFF4
 24403                           prodl	equ	0xFF3
 24404                           intcon	equ	0xFF2
 24405                           intcon2	equ	0xFF1
 24406                           postinc0	equ	0xFEE
 24407                           wreg	equ	0xFE8
 24408                           indf1	equ	0xFE7
 24409                           postdec1	equ	0xFE5
 24410                           fsr1h	equ	0xFE2
 24411                           fsr1l	equ	0xFE1
 24412                           indf2	equ	0xFDF
 24413                           postinc2	equ	0xFDE
 24414                           plusw2	equ	0xFDB
 24415                           fsr2h	equ	0xFDA
 24416                           fsr2l	equ	0xFD9
 24417                           status	equ	0xFD8
 24418                           
 24419 ;; *************** function _digitalInputs *****************
 24420 ;; Defined at:
 24421 ;;		line 289 in file "main.c"
 24422 ;; Parameters:    Size  Location     Type
 24423 ;;		None
 24424 ;; Auto vars:     Size  Location     Type
 24425 ;;		None
 24426 ;; Return value:  Size  Location     Type
 24427 ;;                  1    wreg      void 
 24428 ;; Registers used:
 24429 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24430 ;; Tracked objects:
 24431 ;;		On entry : 0/0
 24432 ;;		On exit  : 0/0
 24433 ;;		Unchanged: 0/0
 24434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24439 ;;Total ram usage:        0 bytes
 24440 ;; Hardware stack levels used:    1
 24441 ;; Hardware stack levels required when called:   14
 24442 ;; This function calls:
 24443 ;;		_buttonInputsSerial
 24444 ;;		_keyboardTranspose
 24445 ;;		_processDrumpad
 24446 ;;		_processKeyboard
 24447 ;;		_processOctave
 24448 ;; This function is called by:
 24449 ;;		_main
 24450 ;; This function uses a non-reentrant model
 24451 ;;
 24452                           
 24453                           	psect	text76
 24454  008D28                     __ptext76:
 24455                           	opt stack 0
 24456  008D28                     _digitalInputs:
 24457                           	opt stack 16
 24458                           
 24459                           ;main.c: 291: buttonInputsSerial();
 24460                           
 24461                           ;incstack = 0
 24462  008D28  ECFA  F040         	call	_buttonInputsSerial	;wreg free
 24463                           
 24464                           ;main.c: 294: if(button_state_now != button_state_last) {
 24465  008D2C  0100               	movlb	0	; () banked
 24466  008D2E  51D4               	movf	_button_state_last& (0+255),w,b
 24467  008D30  19D8               	xorwf	_button_state_now& (0+255),w,b
 24468  008D32  E10A               	bnz	u37990
 24469  008D34  51D5               	movf	(_button_state_last+1)& (0+255),w,b
 24470  008D36  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 24471  008D38  E107               	bnz	u37990
 24472  008D3A  51D6               	movf	(_button_state_last+2)& (0+255),w,b
 24473  008D3C  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 24474  008D3E  E104               	bnz	u37990
 24475  008D40  51D7               	movf	(_button_state_last+3)& (0+255),w,b
 24476  008D42  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 24477  008D44  B4D8               	btfsc	status,2,c
 24478  008D46  D00E               	goto	l4787
 24479  008D48                     u37990:
 24480                           
 24481                           ; BSR set to: 0
 24482                           ;main.c: 295: processOctave();
 24483  008D48  EC3A  F013         	call	_processOctave	;wreg free
 24484                           
 24485                           ;main.c: 296: keyboardTranspose();
 24486  008D4C  EC20  F022         	call	_keyboardTranspose	;wreg free
 24487                           
 24488                           ;main.c: 297: processKeyboard();
 24489  008D50  EC08  F043         	call	_processKeyboard	;wreg free
 24490                           
 24491                           ;main.c: 298: button_state_last = button_state_now;
 24492  008D54  C0D8  F0D4         	movff	_button_state_now,_button_state_last
 24493  008D58  C0D9  F0D5         	movff	_button_state_now+1,_button_state_last+1
 24494  008D5C  C0DA  F0D6         	movff	_button_state_now+2,_button_state_last+2
 24495  008D60  C0DB  F0D7         	movff	_button_state_now+3,_button_state_last+3
 24496  008D64                     l4787:
 24497                           
 24498                           ;main.c: 299: }
 24499                           ;main.c: 302: if(drum_button_state_now != drum_button_state_last) {
 24500  008D64  0100               	movlb	0	; () banked
 24501  008D66  51ED               	movf	_drum_button_state_last& (0+255),w,b
 24502  008D68  19EE               	xorwf	_drum_button_state_now& (0+255),w,b
 24503  008D6A  B4D8               	btfsc	status,2,c
 24504  008D6C  0012               	return	
 24505                           
 24506                           ; BSR set to: 0
 24507                           ;main.c: 303: processOctave();
 24508  008D6E  EC3A  F013         	call	_processOctave	;wreg free
 24509                           
 24510                           ;main.c: 304: processDrumpad();
 24511  008D72  EC33  F00E         	call	_processDrumpad	;wreg free
 24512                           
 24513                           ;main.c: 305: drum_button_state_last = drum_button_state_now;
 24514  008D76  C0EE  F0ED         	movff	_drum_button_state_now,_drum_button_state_last
 24515  008D7A  0012               	return	
 24516  008D7C                     __end_of_digitalInputs:
 24517                           	opt stack 0
 24518                           tblptru	equ	0xFF8
 24519                           tblptrh	equ	0xFF7
 24520                           tblptrl	equ	0xFF6
 24521                           tablat	equ	0xFF5
 24522                           prodh	equ	0xFF4
 24523                           prodl	equ	0xFF3
 24524                           intcon	equ	0xFF2
 24525                           intcon2	equ	0xFF1
 24526                           postinc0	equ	0xFEE
 24527                           wreg	equ	0xFE8
 24528                           indf1	equ	0xFE7
 24529                           postdec1	equ	0xFE5
 24530                           fsr1h	equ	0xFE2
 24531                           fsr1l	equ	0xFE1
 24532                           indf2	equ	0xFDF
 24533                           postinc2	equ	0xFDE
 24534                           plusw2	equ	0xFDB
 24535                           fsr2h	equ	0xFDA
 24536                           fsr2l	equ	0xFD9
 24537                           status	equ	0xFD8
 24538                           
 24539 ;; *************** function _processOctave *****************
 24540 ;; Defined at:
 24541 ;;		line 189 in file "octave.c"
 24542 ;; Parameters:    Size  Location     Type
 24543 ;;		None
 24544 ;; Auto vars:     Size  Location     Type
 24545 ;;		None
 24546 ;; Return value:  Size  Location     Type
 24547 ;;                  1    wreg      void 
 24548 ;; Registers used:
 24549 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24550 ;; Tracked objects:
 24551 ;;		On entry : 0/0
 24552 ;;		On exit  : 0/0
 24553 ;;		Unchanged: 0/0
 24554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24557 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24558 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24559 ;;Total ram usage:        2 bytes
 24560 ;; Hardware stack levels used:    1
 24561 ;; Hardware stack levels required when called:   12
 24562 ;; This function calls:
 24563 ;;		___awmod
 24564 ;;		___wmul
 24565 ;;		_key_press_release_note_off
 24566 ;;		_playThisNote
 24567 ;;		_playThisNote8
 24568 ;;		_playThisNotePentatonic
 24569 ;;		_printThisNumber
 24570 ;;		_random_pitches
 24571 ;;		_random_pitches_non_repeating
 24572 ;;		_resetArpeggio
 24573 ;;		_strcpy
 24574 ;;		_wait_one_pulse
 24575 ;; This function is called by:
 24576 ;;		_digitalInputs
 24577 ;; This function uses a non-reentrant model
 24578 ;;
 24579                           
 24580                           	psect	text77
 24581  002674                     __ptext77:
 24582                           	opt stack 0
 24583  002674                     _processOctave:
 24584                           	opt stack 17
 24585                           
 24586                           ;octave.c: 194: if(ARPEGGIO_ON == 1) {
 24587                           
 24588                           ;incstack = 0
 24589  002674  A635               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 24590  002676  D0F1               	goto	l2778
 24591                           
 24592                           ;octave.c: 198: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x01))
 24593  002678  0100               	movlb	0	; () banked
 24594  00267A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24595                           
 24596                           ; BSR set to: 0
 24597  00267C  A1EE               	btfss	_drum_button_state_now& (0+255),0,b
 24598  00267E  D00E               	goto	l2753
 24599                           
 24600                           ; BSR set to: 0
 24601                           ;octave.c: 199: {
 24602                           ;octave.c: 200: LATCH = 1;
 24603  002680  8035               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 24604                           
 24605                           ;octave.c: 201: latch_was_pressed = 1;
 24606  002682  8A34               	bsf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 24607                           
 24608                           ; BSR set to: 0
 24609                           ;octave.c: 202: DISPLAY_MODE = 1;
 24610  002684  0E01               	movlw	1
 24611  002686  6E5A               	movwf	_DISPLAY_MODE,c
 24612                           
 24613                           ; BSR set to: 0
 24614                           ;octave.c: 203: strcpy(string_to_display, "HoLd");
 24615  002688  0EEE               	movlw	low _string_to_display
 24616  00268A  6F60               	movwf	strcpy@to& (0+255),b
 24617  00268C  0E01               	movlw	high _string_to_display
 24618  00268E  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24619  002690  0EE6               	movlw	low STR_1
 24620  002692  6F62               	movwf	strcpy@from& (0+255),b
 24621  002694  0EFF               	movlw	high STR_1
 24622  002696  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24623  002698  EC27  F049         	call	_strcpy	;wreg free
 24624  00269C                     l2753:
 24625                           
 24626                           ;octave.c: 204: }
 24627                           ;octave.c: 208: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x02))
 24628  00269C  0100               	movlb	0	; () banked
 24629  00269E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24630                           
 24631                           ; BSR set to: 0
 24632  0026A0  A3EE               	btfss	_drum_button_state_now& (0+255),1,b
 24633  0026A2  D0A2               	goto	l2772
 24634                           
 24635                           ; BSR set to: 0
 24636                           ;octave.c: 209: {
 24637                           ;octave.c: 210: LATCH = 0;
 24638  0026A4  9035               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 24639                           
 24640                           ;octave.c: 211: ON_OFF = 0;
 24641  0026A6  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24642                           
 24643                           ; BSR set to: 0
 24644                           ;octave.c: 219: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_M
      +                          ODE == SEVENTH) {
 24645  0026A8  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 24646  0026AA  B4D8               	btfsc	status,2,c
 24647  0026AC  D008               	goto	u35910
 24648                           
 24649                           ; BSR set to: 0
 24650  0026AE  0E06               	movlw	6
 24651  0026B0  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24652  0026B2  B4D8               	btfsc	status,2,c
 24653  0026B4  D004               	goto	u35910
 24654                           
 24655                           ; BSR set to: 0
 24656  0026B6  0E09               	movlw	9
 24657  0026B8  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24658  0026BA  A4D8               	btfss	status,2,c
 24659  0026BC  D006               	goto	l2758
 24660  0026BE                     u35910:
 24661                           
 24662                           ; BSR set to: 0
 24663                           ;octave.c: 220: if(NUM_NOTES_PRESSED > 0) {playThisNote(0);}
 24664                           
 24665                           ; BSR set to: 0
 24666  0026BE  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 24667  0026C0  B4D8               	btfsc	status,2,c
 24668  0026C2  D003               	goto	l2758
 24669                           
 24670                           ; BSR set to: 0
 24671  0026C4  0E00               	movlw	0
 24672  0026C6  ECF7  F031         	call	_playThisNote
 24673  0026CA                     l2758:
 24674                           
 24675                           ;octave.c: 221: }
 24676                           ;octave.c: 223: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_MO
      +                          DE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_TR
      +                          IAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MIN
      +                          OR
 24677  0026CA  0100               	movlb	0	; () banked
 24678  0026CC  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 24679  0026CE  B4D8               	btfsc	status,2,c
 24680  0026D0  D018               	goto	u35990
 24681                           
 24682                           ; BSR set to: 0
 24683  0026D2  0E02               	movlw	2
 24684  0026D4  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24685  0026D6  B4D8               	btfsc	status,2,c
 24686  0026D8  D014               	goto	u35990
 24687                           
 24688                           ; BSR set to: 0
 24689  0026DA  0E03               	movlw	3
 24690  0026DC  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24691  0026DE  B4D8               	btfsc	status,2,c
 24692  0026E0  D010               	goto	u35990
 24693                           
 24694                           ; BSR set to: 0
 24695  0026E2  0E07               	movlw	7
 24696  0026E4  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24697  0026E6  B4D8               	btfsc	status,2,c
 24698  0026E8  D00C               	goto	u35990
 24699                           
 24700                           ; BSR set to: 0
 24701  0026EA  0E08               	movlw	8
 24702  0026EC  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24703  0026EE  B4D8               	btfsc	status,2,c
 24704  0026F0  D008               	goto	u35990
 24705                           
 24706                           ; BSR set to: 0
 24707  0026F2  0E0A               	movlw	10
 24708  0026F4  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24709  0026F6  B4D8               	btfsc	status,2,c
 24710  0026F8  D004               	goto	u35990
 24711                           
 24712                           ; BSR set to: 0
 24713  0026FA  0E0B               	movlw	11
 24714  0026FC  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24715  0026FE  A4D8               	btfss	status,2,c
 24716  002700  D008               	goto	l2762
 24717  002702                     u35990:
 24718                           
 24719                           ; BSR set to: 0
 24720                           ;octave.c: 224: if(NUM_NOTES_PRESSED > 0) {playThisNote8(0,0);}
 24721                           
 24722                           ; BSR set to: 0
 24723  002702  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 24724  002704  B4D8               	btfsc	status,2,c
 24725  002706  D005               	goto	l2762
 24726                           
 24727                           ; BSR set to: 0
 24728  002708  0E00               	movlw	0
 24729  00270A  6F7F               	movwf	playThisNote8@index& (0+255),b
 24730  00270C  0E00               	movlw	0
 24731  00270E  EC6A  F015         	call	_playThisNote8
 24732  002712                     l2762:
 24733                           
 24734                           ;octave.c: 225: }
 24735                           ;octave.c: 227: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || KEYBOARD_MODE == PENTATONIC_M
      +                          INOR) {
 24736  002712  0E04               	movlw	4
 24737  002714  0100               	movlb	0	; () banked
 24738  002716  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24739  002718  B4D8               	btfsc	status,2,c
 24740  00271A  D004               	goto	u36020
 24741                           
 24742                           ; BSR set to: 0
 24743  00271C  0E05               	movlw	5
 24744  00271E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24745  002720  A4D8               	btfss	status,2,c
 24746  002722  D008               	goto	l2766
 24747  002724                     u36020:
 24748                           
 24749                           ; BSR set to: 0
 24750                           ;octave.c: 228: if(NUM_NOTES_PRESSED > 0) {playThisNotePentatonic(0,0);}
 24751                           
 24752                           ; BSR set to: 0
 24753  002724  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 24754  002726  B4D8               	btfsc	status,2,c
 24755  002728  D005               	goto	l2766
 24756                           
 24757                           ; BSR set to: 0
 24758  00272A  0E00               	movlw	0
 24759  00272C  6F77               	movwf	playThisNotePentatonic@index& (0+255),b
 24760  00272E  0E00               	movlw	0
 24761  002730  ECB3  F029         	call	_playThisNotePentatonic
 24762  002734                     l2766:
 24763                           
 24764                           ;octave.c: 229: }
 24765                           ;octave.c: 234: if((UN_LATCH_MODE == 1) && (latch_was_pressed == 1) && (NUM_NOTES_PRESSE
      +                          D > 1)){
 24766  002734  BE34               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 24767  002736  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 24768  002738  D010               	goto	l2767
 24769  00273A  0E01               	movlw	1
 24770  00273C  0100               	movlb	0	; () banked
 24771  00273E  65E5               	cpfsgt	_NUM_NOTES_PRESSED& (0+255),b
 24772  002740  D00C               	goto	l2767
 24773                           
 24774                           ; BSR set to: 0
 24775                           ;octave.c: 235: DISPLAY_MODE = 1;
 24776  002742  0E01               	movlw	1
 24777  002744  6E5A               	movwf	_DISPLAY_MODE,c
 24778                           
 24779                           ; BSR set to: 0
 24780                           ;octave.c: 236: strcpy(string_to_display, " dEL");
 24781  002746  0EEE               	movlw	low _string_to_display
 24782  002748  6F60               	movwf	strcpy@to& (0+255),b
 24783  00274A  0E01               	movlw	high _string_to_display
 24784  00274C  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24785  00274E  0EE1               	movlw	low STR_2
 24786  002750  6F62               	movwf	strcpy@from& (0+255),b
 24787  002752  0EFF               	movlw	high STR_2
 24788  002754  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24789  002756  EC27  F049         	call	_strcpy	;wreg free
 24790  00275A                     l2767:
 24791                           
 24792                           ;octave.c: 238: }
 24793                           ;octave.c: 242: if((UN_LATCH_MODE == 1) && (NUM_NOTES_PRESSED == 1)){
 24794  00275A  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 24795  00275C  D010               	goto	l2768
 24796  00275E  0100               	movlb	0	; () banked
 24797  002760  05E5               	decf	_NUM_NOTES_PRESSED& (0+255),w,b
 24798  002762  A4D8               	btfss	status,2,c
 24799  002764  D00C               	goto	l2768
 24800                           
 24801                           ; BSR set to: 0
 24802                           ;octave.c: 243: DISPLAY_MODE = 1;
 24803  002766  0E01               	movlw	1
 24804  002768  6E5A               	movwf	_DISPLAY_MODE,c
 24805                           
 24806                           ; BSR set to: 0
 24807                           ;octave.c: 244: strcpy(string_to_display, "LaSt");
 24808  00276A  0EEE               	movlw	low _string_to_display
 24809  00276C  6F60               	movwf	strcpy@to& (0+255),b
 24810  00276E  0E01               	movlw	high _string_to_display
 24811  002770  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24812  002772  0EFA               	movlw	low STR_3
 24813  002774  6F62               	movwf	strcpy@from& (0+255),b
 24814  002776  0EFF               	movlw	high STR_3
 24815  002778  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24816  00277A  EC27  F049         	call	_strcpy	;wreg free
 24817  00277E                     l2768:
 24818                           
 24819                           ;octave.c: 245: }
 24820                           ;octave.c: 249: if((AUTO_LATCH == 1) && (latch_was_pressed == 1) && ((UN_LATCH_MODE == 0
      +                          ) || (UN_LATCH_MODE == 1)) && (NUM_NOTES_PRESSED == 0)){
 24821  00277E  BC34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 24822  002780  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 24823  002782  D018               	goto	l2769
 24824  002784  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 24825  002786  D002               	goto	u36120
 24826  002788  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 24827  00278A  D014               	goto	l2769
 24828  00278C                     u36120:
 24829  00278C  0100               	movlb	0	; () banked
 24830  00278E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 24831  002790  A4D8               	btfss	status,2,c
 24832  002792  D010               	goto	l2769
 24833                           
 24834                           ; BSR set to: 0
 24835                           ;octave.c: 250: NUM_NOTES_PRESSED = 0;
 24836  002794  0E00               	movlw	0
 24837  002796  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 24838                           
 24839                           ;octave.c: 251: ARRAY_INDEX = 0;
 24840  002798  0E00               	movlw	0
 24841  00279A  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 24842                           
 24843                           ;octave.c: 253: DISPLAY_MODE = 1;
 24844  00279C  0E01               	movlw	1
 24845  00279E  6E5A               	movwf	_DISPLAY_MODE,c
 24846                           
 24847                           ; BSR set to: 0
 24848                           ;octave.c: 254: strcpy(string_to_display, "Auto");
 24849  0027A0  0EEE               	movlw	low _string_to_display
 24850  0027A2  6F60               	movwf	strcpy@to& (0+255),b
 24851  0027A4  0E01               	movlw	high _string_to_display
 24852  0027A6  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24853  0027A8  0EF0               	movlw	low STR_4
 24854  0027AA  6F62               	movwf	strcpy@from& (0+255),b
 24855  0027AC  0EFF               	movlw	high STR_4
 24856  0027AE  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24857  0027B0  EC27  F049         	call	_strcpy	;wreg free
 24858  0027B4                     l2769:
 24859                           
 24860                           ;octave.c: 255: }
 24861                           ;octave.c: 262: if((LATCH == 0) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (NU
      +                          M_NOTES_PRESSED == 0)){
 24862  0027B4  B035               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 24863  0027B6  D018               	goto	l2772
 24864  0027B8  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 24865  0027BA  D002               	goto	u36160
 24866  0027BC  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 24867  0027BE  D014               	goto	l2772
 24868  0027C0                     u36160:
 24869  0027C0  0100               	movlb	0	; () banked
 24870  0027C2  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 24871  0027C4  A4D8               	btfss	status,2,c
 24872  0027C6  D010               	goto	l2772
 24873                           
 24874                           ; BSR set to: 0
 24875                           ;octave.c: 263: NUM_NOTES_PRESSED = 0;
 24876  0027C8  0E00               	movlw	0
 24877  0027CA  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 24878                           
 24879                           ;octave.c: 264: ARRAY_INDEX = 0;
 24880  0027CC  0E00               	movlw	0
 24881  0027CE  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 24882                           
 24883                           ;octave.c: 265: DISPLAY_MODE = 1;
 24884  0027D0  0E01               	movlw	1
 24885  0027D2  6E5A               	movwf	_DISPLAY_MODE,c
 24886                           
 24887                           ; BSR set to: 0
 24888                           ;octave.c: 266: strcpy(string_to_display, " oFF");
 24889  0027D4  0EEE               	movlw	low _string_to_display
 24890  0027D6  6F60               	movwf	strcpy@to& (0+255),b
 24891  0027D8  0E01               	movlw	high _string_to_display
 24892  0027DA  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24893  0027DC  0EDC               	movlw	low STR_5
 24894  0027DE  6F62               	movwf	strcpy@from& (0+255),b
 24895  0027E0  0EFF               	movlw	high STR_5
 24896  0027E2  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24897  0027E4  EC27  F049         	call	_strcpy	;wreg free
 24898  0027E8                     l2772:
 24899                           
 24900                           ;octave.c: 267: }
 24901                           ;octave.c: 268: }
 24902                           ;octave.c: 272: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x04)){
 24903  0027E8  0100               	movlb	0	; () banked
 24904  0027EA  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24905                           
 24906                           ; BSR set to: 0
 24907  0027EC  A5EE               	btfss	_drum_button_state_now& (0+255),2,b
 24908  0027EE  D018               	goto	l2775
 24909                           
 24910                           ; BSR set to: 0
 24911                           ;octave.c: 275: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 24912  0027F0  0E05               	movlw	5
 24913  0027F2  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 24914  0027F4  B4D8               	btfsc	status,2,c
 24915                           
 24916                           ; BSR set to: 0
 24917  0027F6  EC2E  F045         	call	_random_pitches	;wreg free
 24918                           
 24919                           ;octave.c: 276: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING){random_pitches_non_repeating()
      +                          ;}
 24920  0027FA  0E04               	movlw	4
 24921  0027FC  0100               	movlb	0	; () banked
 24922  0027FE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 24923  002800  B4D8               	btfsc	status,2,c
 24924                           
 24925                           ; BSR set to: 0
 24926  002802  EC82  F03D         	call	_random_pitches_non_repeating	;wreg free
 24927                           
 24928                           ;octave.c: 278: DISPLAY_MODE = 1;
 24929  002806  0E01               	movlw	1
 24930  002808  6E5A               	movwf	_DISPLAY_MODE,c
 24931                           
 24932                           ;octave.c: 279: strcpy(string_to_display, "rAnd");
 24933  00280A  0EEE               	movlw	low _string_to_display
 24934  00280C  0100               	movlb	0	; () banked
 24935  00280E  6F60               	movwf	strcpy@to& (0+255),b
 24936  002810  0E01               	movlw	high _string_to_display
 24937  002812  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24938  002814  0EEB               	movlw	low STR_6
 24939  002816  6F62               	movwf	strcpy@from& (0+255),b
 24940  002818  0EFF               	movlw	high STR_6
 24941  00281A  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24942  00281C  EC27  F049         	call	_strcpy	;wreg free
 24943  002820                     l2775:
 24944                           
 24945                           ;octave.c: 281: }
 24946                           ;octave.c: 285: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x08)){
 24947  002820  0100               	movlb	0	; () banked
 24948  002822  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24949                           
 24950                           ; BSR set to: 0
 24951  002824  A7EE               	btfss	_drum_button_state_now& (0+255),3,b
 24952  002826  D019               	goto	l2778
 24953                           
 24954                           ; BSR set to: 0
 24955                           ;octave.c: 288: wait_one_pulse(LAST_NOTE_MODE_RESET);
 24956  002828  0E00               	movlw	0
 24957  00282A  BC33               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 24958  00282C  0E01               	movlw	1
 24959  00282E  ECCC  F049         	call	_wait_one_pulse
 24960                           
 24961                           ;octave.c: 289: note_off_was_sent = 1;
 24962  002832  8033               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24963                           
 24964                           ;octave.c: 290: key_press_release_note_off();
 24965  002834  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 24966                           
 24967                           ;octave.c: 293: resetArpeggio();
 24968  002838  EC61  F048         	call	_resetArpeggio	;wreg free
 24969                           
 24970                           ;octave.c: 296: TIMER_OVERFLOWS = 0;
 24971  00283C  0E00               	movlw	0
 24972  00283E  6E54               	movwf	_TIMER_OVERFLOWS,c
 24973                           
 24974                           ;octave.c: 298: DISPLAY_MODE = 1;
 24975  002840  0E01               	movlw	1
 24976  002842  6E5A               	movwf	_DISPLAY_MODE,c
 24977                           
 24978                           ;octave.c: 299: strcpy(string_to_display, "rSEt");
 24979  002844  0EEE               	movlw	low _string_to_display
 24980  002846  0100               	movlb	0	; () banked
 24981  002848  6F60               	movwf	strcpy@to& (0+255),b
 24982  00284A  0E01               	movlw	high _string_to_display
 24983  00284C  6F61               	movwf	(strcpy@to+1)& (0+255),b
 24984  00284E  0EF5               	movlw	low STR_7
 24985  002850  6F62               	movwf	strcpy@from& (0+255),b
 24986  002852  0EFF               	movlw	high STR_7
 24987  002854  6F63               	movwf	(strcpy@from+1)& (0+255),b
 24988  002856  EC27  F049         	call	_strcpy	;wreg free
 24989  00285A                     l2778:
 24990                           
 24991                           ;octave.c: 300: }
 24992                           ;octave.c: 301: }
 24993                           ;octave.c: 304: if(button_state_now == 0x04000000){
 24994  00285A  0E04               	movlw	4
 24995  00285C  0100               	movlb	0	; () banked
 24996  00285E  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 24997  002860  11D8               	iorwf	_button_state_now& (0+255),w,b
 24998  002862  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 24999  002864  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 25000  002866  A4D8               	btfss	status,2,c
 25001  002868  D03D               	goto	l2780
 25002                           
 25003                           ; BSR set to: 0
 25004                           ;octave.c: 305: if ((octave * 12 + semitone) <= 60) {
 25005  00286A  C0F3  F088         	movff	_semitone,??_processOctave
 25006  00286E  6B89               	clrf	(??_processOctave+1)& (0+255),b
 25007  002870  BF88               	btfsc	??_processOctave& (0+255),7,b
 25008  002872  0789               	decf	(??_processOctave+1)& (0+255),f,b
 25009  002874  51FC               	movf	_octave& (0+255),w,b
 25010  002876  6F64               	movwf	___wmul@multiplier& (0+255),b
 25011  002878  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 25012  00287A  BF64               	btfsc	___wmul@multiplier& (0+255),7,b
 25013  00287C  0765               	decf	(___wmul@multiplier+1)& (0+255),f,b
 25014  00287E  0E00               	movlw	0
 25015  002880  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 25016  002882  0E0C               	movlw	12
 25017  002884  6F66               	movwf	___wmul@multiplicand& (0+255),b
 25018  002886  EC32  F04A         	call	___wmul	;wreg free
 25019  00288A  0100               	movlb	0	; () banked
 25020  00288C  5188               	movf	??_processOctave& (0+255),w,b
 25021  00288E  2764               	addwf	?___wmul& (0+255),f,b
 25022  002890  5189               	movf	(??_processOctave+1)& (0+255),w,b
 25023  002892  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 25024  002894  BF65               	btfsc	(?___wmul+1)& (0+255),7,b
 25025  002896  D006               	goto	u36250
 25026  002898  5165               	movf	(?___wmul+1)& (0+255),w,b
 25027  00289A  E124               	bnz	l22383
 25028  00289C  0E3D               	movlw	61
 25029  00289E  5D64               	subwf	?___wmul& (0+255),w,b
 25030  0028A0  B0D8               	btfsc	status,0,c
 25031  0028A2  D020               	goto	l2780
 25032  0028A4                     u36250:
 25033                           
 25034                           ; BSR set to: 0
 25035                           ;octave.c: 308: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 25036  0028A4  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 25037  0028A6  D00E               	goto	l2781
 25038                           
 25039                           ; BSR set to: 0
 25040  0028A8  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25041  0028AA  B4D8               	btfsc	status,2,c
 25042  0028AC  D00B               	goto	l2781
 25043                           
 25044                           ; BSR set to: 0
 25045                           ;octave.c: 311: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 25046  0028AE  0E00               	movlw	0
 25047  0028B0  BE33               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 25048  0028B2  0E01               	movlw	1
 25049  0028B4  ECCC  F049         	call	_wait_one_pulse
 25050                           
 25051                           ;octave.c: 315: if(note_off_was_sent == 0) {key_press_release_note_off();}
 25052  0028B8  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 25053  0028BA  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 25054                           
 25055                           ;octave.c: 318: suppress_note_off = 1;
 25056  0028BE  8633               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 25057                           
 25058                           ;octave.c: 320: flag1 = 1;
 25059  0028C0  8E32               	bsf	_flag1/(0+8),_flag1& (0+7),c
 25060                           
 25061                           ;octave.c: 321: flag2 = 1;
 25062  0028C2  8C32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 25063  0028C4                     l2781:
 25064                           
 25065                           ;octave.c: 322: }
 25066                           ;octave.c: 324: octave++;
 25067  0028C4  0100               	movlb	0	; () banked
 25068  0028C6  2BFC               	incf	_octave& (0+255),f,b
 25069                           
 25070                           ; BSR set to: 0
 25071                           ;octave.c: 325: if (octave > 7) {octave = 7;}
 25072  0028C8  51FC               	movf	_octave& (0+255),w,b
 25073  0028CA  0A80               	xorlw	128
 25074  0028CC  0F78               	addlw	-136
 25075  0028CE  A0D8               	btfss	status,0,c
 25076  0028D0  D002               	goto	l2783
 25077                           
 25078                           ; BSR set to: 0
 25079  0028D2  0E07               	movlw	7
 25080  0028D4  6FFC               	movwf	_octave& (0+255),b
 25081  0028D6                     l2783:
 25082                           
 25083                           ; BSR set to: 0
 25084                           ;octave.c: 327: printThisNumber(octave);
 25085                           
 25086                           ; BSR set to: 0
 25087  0028D6  51FC               	movf	_octave& (0+255),w,b
 25088  0028D8  6F60               	movwf	printThisNumber@n& (0+255),b
 25089  0028DA  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 25090  0028DC  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 25091  0028DE  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 25092  0028E0  ECC7  F04A         	call	_printThisNumber	;wreg free
 25093  0028E4                     l2780:
 25094  0028E4                     l22383:
 25095                           
 25096                           ;octave.c: 328: }
 25097                           ;octave.c: 329: }
 25098                           ;octave.c: 332: if(button_state_now == 0x02000000){
 25099  0028E4  0E02               	movlw	2
 25100  0028E6  0100               	movlb	0	; () banked
 25101  0028E8  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 25102  0028EA  11D8               	iorwf	_button_state_now& (0+255),w,b
 25103  0028EC  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 25104  0028EE  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 25105  0028F0  A4D8               	btfss	status,2,c
 25106  0028F2  D03A               	goto	l2785
 25107                           
 25108                           ; BSR set to: 0
 25109                           ;octave.c: 333: if ((octave * 12 + semitone) >= 12) {
 25110  0028F4  C0F3  F088         	movff	_semitone,??_processOctave
 25111  0028F8  6B89               	clrf	(??_processOctave+1)& (0+255),b
 25112  0028FA  BF88               	btfsc	??_processOctave& (0+255),7,b
 25113  0028FC  0789               	decf	(??_processOctave+1)& (0+255),f,b
 25114  0028FE  51FC               	movf	_octave& (0+255),w,b
 25115  002900  6F64               	movwf	___wmul@multiplier& (0+255),b
 25116  002902  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 25117  002904  BF64               	btfsc	___wmul@multiplier& (0+255),7,b
 25118  002906  0765               	decf	(___wmul@multiplier+1)& (0+255),f,b
 25119  002908  0E00               	movlw	0
 25120  00290A  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 25121  00290C  0E0C               	movlw	12
 25122  00290E  6F66               	movwf	___wmul@multiplicand& (0+255),b
 25123  002910  EC32  F04A         	call	___wmul	;wreg free
 25124  002914  0100               	movlb	0	; () banked
 25125  002916  5188               	movf	??_processOctave& (0+255),w,b
 25126  002918  2764               	addwf	?___wmul& (0+255),f,b
 25127  00291A  5189               	movf	(??_processOctave+1)& (0+255),w,b
 25128  00291C  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 25129  00291E  BF65               	btfsc	(?___wmul+1)& (0+255),7,b
 25130  002920  D023               	goto	l2785
 25131  002922  5165               	movf	(?___wmul+1)& (0+255),w,b
 25132  002924  E104               	bnz	u36310
 25133  002926  0E0C               	movlw	12
 25134  002928  5D64               	subwf	?___wmul& (0+255),w,b
 25135  00292A  A0D8               	btfss	status,0,c
 25136  00292C  D01D               	goto	l2785
 25137  00292E                     u36310:
 25138                           
 25139                           ; BSR set to: 0
 25140                           ;octave.c: 336: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 25141  00292E  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 25142  002930  D00E               	goto	l2786
 25143                           
 25144                           ; BSR set to: 0
 25145  002932  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25146  002934  B4D8               	btfsc	status,2,c
 25147  002936  D00B               	goto	l2786
 25148                           
 25149                           ; BSR set to: 0
 25150                           ;octave.c: 339: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 25151  002938  0E00               	movlw	0
 25152  00293A  BE33               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 25153  00293C  0E01               	movlw	1
 25154  00293E  ECCC  F049         	call	_wait_one_pulse
 25155                           
 25156                           ;octave.c: 343: if(note_off_was_sent == 0) {key_press_release_note_off();}
 25157  002942  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 25158  002944  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 25159                           
 25160                           ;octave.c: 346: suppress_note_off = 1;
 25161  002948  8633               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 25162                           
 25163                           ;octave.c: 348: flag1 = 1;
 25164  00294A  8E32               	bsf	_flag1/(0+8),_flag1& (0+7),c
 25165                           
 25166                           ;octave.c: 350: flag2 = 1;
 25167  00294C  8C32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 25168  00294E                     l2786:
 25169                           
 25170                           ;octave.c: 351: }
 25171                           ;octave.c: 353: octave--;
 25172  00294E  0100               	movlb	0	; () banked
 25173  002950  07FC               	decf	_octave& (0+255),f,b
 25174                           
 25175                           ; BSR set to: 0
 25176                           ;octave.c: 354: if (octave < 0) {octave = 0;}
 25177  002952  AFFC               	btfss	_octave& (0+255),7,b
 25178  002954  D002               	goto	l2788
 25179                           
 25180                           ; BSR set to: 0
 25181  002956  0E00               	movlw	0
 25182  002958  6FFC               	movwf	_octave& (0+255),b
 25183  00295A                     l2788:
 25184                           
 25185                           ; BSR set to: 0
 25186                           ;octave.c: 356: printThisNumber(octave);
 25187                           
 25188                           ; BSR set to: 0
 25189  00295A  51FC               	movf	_octave& (0+255),w,b
 25190  00295C  6F60               	movwf	printThisNumber@n& (0+255),b
 25191  00295E  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 25192  002960  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 25193  002962  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 25194  002964  ECC7  F04A         	call	_printThisNumber	;wreg free
 25195  002968                     l2785:
 25196                           
 25197                           ;octave.c: 358: }
 25198                           ;octave.c: 359: }
 25199                           ;octave.c: 365: if(button_state_now == (0x04000000 | 0x08000000)){
 25200  002968  0E0C               	movlw	12
 25201  00296A  0100               	movlb	0	; () banked
 25202  00296C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 25203  00296E  11D8               	iorwf	_button_state_now& (0+255),w,b
 25204  002970  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 25205  002972  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 25206  002974  A4D8               	btfss	status,2,c
 25207  002976  D053               	goto	l2790
 25208                           
 25209                           ; BSR set to: 0
 25210                           ;octave.c: 367: if ((octave * 12 + semitone) < 72) {
 25211  002978  C0F3  F088         	movff	_semitone,??_processOctave
 25212  00297C  6B89               	clrf	(??_processOctave+1)& (0+255),b
 25213  00297E  BF88               	btfsc	??_processOctave& (0+255),7,b
 25214  002980  0789               	decf	(??_processOctave+1)& (0+255),f,b
 25215  002982  51FC               	movf	_octave& (0+255),w,b
 25216  002984  6F64               	movwf	___wmul@multiplier& (0+255),b
 25217  002986  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 25218  002988  BF64               	btfsc	___wmul@multiplier& (0+255),7,b
 25219  00298A  0765               	decf	(___wmul@multiplier+1)& (0+255),f,b
 25220  00298C  0E00               	movlw	0
 25221  00298E  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 25222  002990  0E0C               	movlw	12
 25223  002992  6F66               	movwf	___wmul@multiplicand& (0+255),b
 25224  002994  EC32  F04A         	call	___wmul	;wreg free
 25225  002998  0100               	movlb	0	; () banked
 25226  00299A  5188               	movf	??_processOctave& (0+255),w,b
 25227  00299C  2764               	addwf	?___wmul& (0+255),f,b
 25228  00299E  5189               	movf	(??_processOctave+1)& (0+255),w,b
 25229  0029A0  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 25230  0029A2  BF65               	btfsc	(?___wmul+1)& (0+255),7,b
 25231  0029A4  D006               	goto	u36370
 25232  0029A6  5165               	movf	(?___wmul+1)& (0+255),w,b
 25233  0029A8  E13A               	bnz	l22445
 25234  0029AA  0E48               	movlw	72
 25235  0029AC  5D64               	subwf	?___wmul& (0+255),w,b
 25236  0029AE  B0D8               	btfsc	status,0,c
 25237  0029B0  D036               	goto	l2790
 25238  0029B2                     u36370:
 25239                           
 25240                           ; BSR set to: 0
 25241                           ;octave.c: 370: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 25242  0029B2  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 25243  0029B4  D00E               	goto	l2791
 25244                           
 25245                           ; BSR set to: 0
 25246  0029B6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25247  0029B8  B4D8               	btfsc	status,2,c
 25248  0029BA  D00B               	goto	l2791
 25249                           
 25250                           ; BSR set to: 0
 25251                           ;octave.c: 373: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 25252  0029BC  0E00               	movlw	0
 25253  0029BE  BE33               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 25254  0029C0  0E01               	movlw	1
 25255  0029C2  ECCC  F049         	call	_wait_one_pulse
 25256                           
 25257                           ;octave.c: 377: if(note_off_was_sent == 0) {key_press_release_note_off();}
 25258  0029C6  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 25259  0029C8  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 25260                           
 25261                           ;octave.c: 380: suppress_note_off = 1;
 25262  0029CC  8633               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 25263                           
 25264                           ;octave.c: 382: flag1 = 1;
 25265  0029CE  8E32               	bsf	_flag1/(0+8),_flag1& (0+7),c
 25266                           
 25267                           ;octave.c: 383: flag2 = 1;
 25268  0029D0  8C32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 25269  0029D2                     l2791:
 25270                           
 25271                           ;octave.c: 384: }
 25272                           ;octave.c: 386: if (TRANSPOSE_MODE == 0) {
 25273  0029D2  BA35               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 25274  0029D4  D009               	goto	l2794
 25275                           
 25276                           ;octave.c: 387: semitone++;
 25277  0029D6  0100               	movlb	0	; () banked
 25278  0029D8  2BF3               	incf	_semitone& (0+255),f,b
 25279                           
 25280                           ; BSR set to: 0
 25281                           ;octave.c: 388: if (semitone > 12) {semitone = 12;}
 25282  0029DA  51F3               	movf	_semitone& (0+255),w,b
 25283  0029DC  0A80               	xorlw	128
 25284  0029DE  0F73               	addlw	-141
 25285  0029E0  A0D8               	btfss	status,0,c
 25286  0029E2  D002               	goto	l2794
 25287                           
 25288                           ; BSR set to: 0
 25289  0029E4  0E0C               	movlw	12
 25290  0029E6  6FF3               	movwf	_semitone& (0+255),b
 25291  0029E8                     l2794:
 25292                           
 25293                           ;octave.c: 389: }
 25294                           ;octave.c: 391: if (TRANSPOSE_MODE == 1) {
 25295                           
 25296                           ; BSR set to: 0
 25297                           
 25298                           ; BSR set to: 0
 25299  0029E8  AA35               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 25300  0029EA  D011               	goto	l2795
 25301                           
 25302                           ;octave.c: 392: semitone = (semitone +=7) % 12;
 25303  0029EC  0E07               	movlw	7
 25304  0029EE  0100               	movlb	0	; () banked
 25305  0029F0  27F3               	addwf	_semitone& (0+255),f,b
 25306  0029F2  51F3               	movf	_semitone& (0+255),w,b
 25307  0029F4  6F6E               	movwf	___awmod@dividend& (0+255),b
 25308  0029F6  6B6F               	clrf	(___awmod@dividend+1)& (0+255),b
 25309  0029F8  BF6E               	btfsc	___awmod@dividend& (0+255),7,b
 25310  0029FA  076F               	decf	(___awmod@dividend+1)& (0+255),f,b
 25311  0029FC  0E00               	movlw	0
 25312  0029FE  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 25313  002A00  0E0C               	movlw	12
 25314  002A02  6F70               	movwf	___awmod@divisor& (0+255),b
 25315  002A04  EC5F  F042         	call	___awmod	;wreg free
 25316  002A08  0100               	movlb	0	; () banked
 25317  002A0A  516E               	movf	?___awmod& (0+255),w,b
 25318  002A0C  6FF3               	movwf	_semitone& (0+255),b
 25319  002A0E                     l2795:
 25320                           
 25321                           ;octave.c: 393: }
 25322                           ;octave.c: 395: printThisNumber(semitone);
 25323                           
 25324                           ; BSR set to: 0
 25325  002A0E  0100               	movlb	0	; () banked
 25326  002A10  51F3               	movf	_semitone& (0+255),w,b
 25327  002A12  6F60               	movwf	printThisNumber@n& (0+255),b
 25328  002A14  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 25329  002A16  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 25330  002A18  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 25331  002A1A  ECC7  F04A         	call	_printThisNumber	;wreg free
 25332  002A1E                     l2790:
 25333  002A1E                     l22445:
 25334                           
 25335                           ;octave.c: 396: }
 25336                           ;octave.c: 397: }
 25337                           ;octave.c: 400: if(button_state_now == (0x02000000 | 0x08000000)){
 25338  002A1E  0E0A               	movlw	10
 25339  002A20  0100               	movlb	0	; () banked
 25340  002A22  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 25341  002A24  11D8               	iorwf	_button_state_now& (0+255),w,b
 25342  002A26  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 25343  002A28  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 25344  002A2A  A4D8               	btfss	status,2,c
 25345  002A2C  0012               	return	
 25346                           
 25347                           ; BSR set to: 0
 25348                           ;octave.c: 402: if ((octave * 12 + semitone) > 0 ) {
 25349  002A2E  C0F3  F088         	movff	_semitone,??_processOctave
 25350  002A32  6B89               	clrf	(??_processOctave+1)& (0+255),b
 25351  002A34  BF88               	btfsc	??_processOctave& (0+255),7,b
 25352  002A36  0789               	decf	(??_processOctave+1)& (0+255),f,b
 25353  002A38  51FC               	movf	_octave& (0+255),w,b
 25354  002A3A  6F64               	movwf	___wmul@multiplier& (0+255),b
 25355  002A3C  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 25356  002A3E  BF64               	btfsc	___wmul@multiplier& (0+255),7,b
 25357  002A40  0765               	decf	(___wmul@multiplier+1)& (0+255),f,b
 25358  002A42  0E00               	movlw	0
 25359  002A44  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 25360  002A46  0E0C               	movlw	12
 25361  002A48  6F66               	movwf	___wmul@multiplicand& (0+255),b
 25362  002A4A  EC32  F04A         	call	___wmul	;wreg free
 25363  002A4E  0100               	movlb	0	; () banked
 25364  002A50  5188               	movf	??_processOctave& (0+255),w,b
 25365  002A52  2764               	addwf	?___wmul& (0+255),f,b
 25366  002A54  5189               	movf	(??_processOctave+1)& (0+255),w,b
 25367  002A56  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 25368  002A58  BF65               	btfsc	(?___wmul+1)& (0+255),7,b
 25369  002A5A  0012               	return	
 25370  002A5C  5165               	movf	(?___wmul+1)& (0+255),w,b
 25371  002A5E  E103               	bnz	u36450
 25372  002A60  0564               	decf	?___wmul& (0+255),w,b
 25373  002A62  A0D8               	btfss	status,0,c
 25374  002A64  0012               	return	
 25375  002A66                     u36450:
 25376                           
 25377                           ; BSR set to: 0
 25378                           ;octave.c: 406: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 25379  002A66  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 25380  002A68  D00E               	goto	l2798
 25381                           
 25382                           ; BSR set to: 0
 25383  002A6A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 25384  002A6C  B4D8               	btfsc	status,2,c
 25385  002A6E  D00B               	goto	l2798
 25386                           
 25387                           ; BSR set to: 0
 25388                           ;octave.c: 409: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 25389  002A70  0E00               	movlw	0
 25390  002A72  BE33               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 25391  002A74  0E01               	movlw	1
 25392  002A76  ECCC  F049         	call	_wait_one_pulse
 25393                           
 25394                           ;octave.c: 413: if(note_off_was_sent == 0) {key_press_release_note_off();}
 25395  002A7A  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 25396  002A7C  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 25397                           
 25398                           ;octave.c: 416: suppress_note_off = 1;
 25399  002A80  8633               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 25400                           
 25401                           ;octave.c: 418: flag1 = 1;
 25402  002A82  8E32               	bsf	_flag1/(0+8),_flag1& (0+7),c
 25403                           
 25404                           ;octave.c: 419: flag2 = 1;
 25405  002A84  8C32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 25406  002A86                     l2798:
 25407                           
 25408                           ;octave.c: 420: }
 25409                           ;octave.c: 422: if (TRANSPOSE_MODE == 0) {
 25410  002A86  BA35               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 25411  002A88  D009               	goto	l2801
 25412                           
 25413                           ;octave.c: 423: semitone--;
 25414  002A8A  0100               	movlb	0	; () banked
 25415  002A8C  07F3               	decf	_semitone& (0+255),f,b
 25416                           
 25417                           ; BSR set to: 0
 25418                           ;octave.c: 424: if (semitone < -12) {semitone = -12;}
 25419  002A8E  51F3               	movf	_semitone& (0+255),w,b
 25420  002A90  0A80               	xorlw	128
 25421  002A92  0F8C               	addlw	140
 25422  002A94  B0D8               	btfsc	status,0,c
 25423  002A96  D002               	goto	l2801
 25424                           
 25425                           ; BSR set to: 0
 25426  002A98  0EF4               	movlw	244
 25427  002A9A  6FF3               	movwf	_semitone& (0+255),b
 25428  002A9C                     l2801:
 25429                           
 25430                           ;octave.c: 425: }
 25431                           ;octave.c: 427: if (TRANSPOSE_MODE == 1) {
 25432                           
 25433                           ; BSR set to: 0
 25434                           
 25435                           ; BSR set to: 0
 25436  002A9C  AA35               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 25437  002A9E  D011               	goto	l2802
 25438                           
 25439                           ;octave.c: 428: semitone = (semitone -=7) % 12;
 25440  002AA0  0EF9               	movlw	249
 25441  002AA2  0100               	movlb	0	; () banked
 25442  002AA4  27F3               	addwf	_semitone& (0+255),f,b
 25443  002AA6  51F3               	movf	_semitone& (0+255),w,b
 25444  002AA8  6F6E               	movwf	___awmod@dividend& (0+255),b
 25445  002AAA  6B6F               	clrf	(___awmod@dividend+1)& (0+255),b
 25446  002AAC  BF6E               	btfsc	___awmod@dividend& (0+255),7,b
 25447  002AAE  076F               	decf	(___awmod@dividend+1)& (0+255),f,b
 25448  002AB0  0E00               	movlw	0
 25449  002AB2  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
 25450  002AB4  0E0C               	movlw	12
 25451  002AB6  6F70               	movwf	___awmod@divisor& (0+255),b
 25452  002AB8  EC5F  F042         	call	___awmod	;wreg free
 25453  002ABC  0100               	movlb	0	; () banked
 25454  002ABE  516E               	movf	?___awmod& (0+255),w,b
 25455  002AC0  6FF3               	movwf	_semitone& (0+255),b
 25456  002AC2                     l2802:
 25457                           
 25458                           ;octave.c: 429: }
 25459                           ;octave.c: 431: printThisNumber(semitone);
 25460                           
 25461                           ; BSR set to: 0
 25462  002AC2  0100               	movlb	0	; () banked
 25463  002AC4  51F3               	movf	_semitone& (0+255),w,b
 25464  002AC6  6F60               	movwf	printThisNumber@n& (0+255),b
 25465  002AC8  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 25466  002ACA  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 25467  002ACC  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 25468  002ACE  ECC7  F04A         	call	_printThisNumber	;wreg free
 25469  002AD2  0012               	return	
 25470  002AD4                     __end_of_processOctave:
 25471                           	opt stack 0
 25472                           tblptru	equ	0xFF8
 25473                           tblptrh	equ	0xFF7
 25474                           tblptrl	equ	0xFF6
 25475                           tablat	equ	0xFF5
 25476                           prodh	equ	0xFF4
 25477                           prodl	equ	0xFF3
 25478                           intcon	equ	0xFF2
 25479                           intcon2	equ	0xFF1
 25480                           postinc0	equ	0xFEE
 25481                           wreg	equ	0xFE8
 25482                           indf1	equ	0xFE7
 25483                           postdec1	equ	0xFE5
 25484                           fsr1h	equ	0xFE2
 25485                           fsr1l	equ	0xFE1
 25486                           indf2	equ	0xFDF
 25487                           postinc2	equ	0xFDE
 25488                           plusw2	equ	0xFDB
 25489                           fsr2h	equ	0xFDA
 25490                           fsr2l	equ	0xFD9
 25491                           status	equ	0xFD8
 25492                           
 25493 ;; *************** function _strcpy *****************
 25494 ;; Defined at:
 25495 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
 25496 ;; Parameters:    Size  Location     Type
 25497 ;;  to              2    0[BANK0 ] PTR unsigned char 
 25498 ;;		 -> string_to_display(5), 
 25499 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 25500 ;;		 -> STR_62(5), STR_60(5), STR_57(5), STR_55(5), 
 25501 ;;		 -> STR_52(5), STR_51(5), STR_43(5), STR_41(5), 
 25502 ;;		 -> STR_9(5), STR_8(5), STR_7(5), STR_6(5), 
 25503 ;;		 -> STR_5(5), STR_4(5), STR_3(5), STR_2(5), 
 25504 ;;		 -> STR_1(5), 
 25505 ;; Auto vars:     Size  Location     Type
 25506 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 25507 ;;		 -> string_to_display(5), 
 25508 ;; Return value:  Size  Location     Type
 25509 ;;                  2    0[BANK0 ] PTR unsigned char 
 25510 ;; Registers used:
 25511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 25512 ;; Tracked objects:
 25513 ;;		On entry : 0/0
 25514 ;;		On exit  : 0/0
 25515 ;;		Unchanged: 0/0
 25516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25517 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25518 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25520 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25521 ;;Total ram usage:        6 bytes
 25522 ;; Hardware stack levels used:    1
 25523 ;; Hardware stack levels required when called:    5
 25524 ;; This function calls:
 25525 ;;		Nothing
 25526 ;; This function is called by:
 25527 ;;		_processOctave
 25528 ;;		_displayTest
 25529 ;;		_Function_H_1
 25530 ;;		_Function_H_6_1
 25531 ;;		_Function_H_6_2
 25532 ;;		_Function_H_7
 25533 ;; This function uses a non-reentrant model
 25534 ;;
 25535                           
 25536                           	psect	text78
 25537  00924E                     __ptext78:
 25538                           	opt stack 0
 25539  00924E                     _strcpy:
 25540                           	opt stack 22
 25541                           
 25542                           ;incstack = 0
 25543  00924E  C060  F064         	movff	strcpy@to,strcpy@cp
 25544  009252  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 25545  009256  D005               	goto	l5975
 25546  009258  0100               	movlb	0	; () banked
 25547  00925A  4B64               	infsnz	strcpy@cp& (0+255),f,b
 25548  00925C  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 25549  00925E  4B62               	infsnz	strcpy@from& (0+255),f,b
 25550  009260  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 25551  009262                     l5975:
 25552                           
 25553                           ; BSR set to: 0
 25554  009262  C062  FFF6         	movff	strcpy@from,tblptrl
 25555  009266  C063  FFF7         	movff	strcpy@from+1,tblptrh
 25556  00926A                     	if	0	;tblptru may be non-zero
 25557  00926A                     	endif
 25558  00926A                     	if	0	;tblptru may be non-zero
 25559  00926A                     	endif
 25560  00926A  C064  FFD9         	movff	strcpy@cp,fsr2l
 25561  00926E  C065  FFDA         	movff	strcpy@cp+1,fsr2h
 25562  009272  0008               	tblrd		*
 25563  009274  CFF5 FFDF          	movff	tablat,indf2
 25564  009278  50DF               	movf	indf2,w,c
 25565  00927A  B4D8               	btfsc	status,2,c
 25566  00927C  0012               	return	
 25567  00927E  D7EC               	goto	l5976
 25568  009280                     __end_of_strcpy:
 25569                           	opt stack 0
 25570                           tblptru	equ	0xFF8
 25571                           tblptrh	equ	0xFF7
 25572                           tblptrl	equ	0xFF6
 25573                           tablat	equ	0xFF5
 25574                           prodh	equ	0xFF4
 25575                           prodl	equ	0xFF3
 25576                           intcon	equ	0xFF2
 25577                           intcon2	equ	0xFF1
 25578                           postinc0	equ	0xFEE
 25579                           wreg	equ	0xFE8
 25580                           indf1	equ	0xFE7
 25581                           postdec1	equ	0xFE5
 25582                           fsr1h	equ	0xFE2
 25583                           fsr1l	equ	0xFE1
 25584                           indf2	equ	0xFDF
 25585                           postinc2	equ	0xFDE
 25586                           plusw2	equ	0xFDB
 25587                           fsr2h	equ	0xFDA
 25588                           fsr2l	equ	0xFD9
 25589                           status	equ	0xFD8
 25590                           
 25591 ;; *************** function ___wmul *****************
 25592 ;; Defined at:
 25593 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 25594 ;; Parameters:    Size  Location     Type
 25595 ;;  multiplier      2    4[BANK0 ] unsigned int 
 25596 ;;  multiplicand    2    6[BANK0 ] unsigned int 
 25597 ;; Auto vars:     Size  Location     Type
 25598 ;;  product         2    8[BANK0 ] unsigned int 
 25599 ;; Return value:  Size  Location     Type
 25600 ;;                  2    4[BANK0 ] unsigned int 
 25601 ;; Registers used:
 25602 ;;		wreg, status,2, status,0, prodl, prodh
 25603 ;; Tracked objects:
 25604 ;;		On entry : 0/0
 25605 ;;		On exit  : 0/0
 25606 ;;		Unchanged: 0/0
 25607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25608 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25609 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25611 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25612 ;;Total ram usage:        6 bytes
 25613 ;; Hardware stack levels used:    1
 25614 ;; Hardware stack levels required when called:    5
 25615 ;; This function calls:
 25616 ;;		Nothing
 25617 ;; This function is called by:
 25618 ;;		_processOctave
 25619 ;;		_initializeMenuArray
 25620 ;;		_menu_lcd
 25621 ;;		_Function_A_1
 25622 ;;		_Function_A_2
 25623 ;;		_Function_A_3
 25624 ;;		_Function_A
 25625 ;;		_Function_B
 25626 ;;		_Function_C_1
 25627 ;;		_Function_C_2
 25628 ;;		_Function_C_3
 25629 ;;		_Function_C
 25630 ;;		_Function_D_1
 25631 ;;		_Function_D_3
 25632 ;;		_Function_D_4
 25633 ;;		_Function_D_5
 25634 ;;		_Function_D
 25635 ;;		_Function_E
 25636 ;;		_Function_G_1
 25637 ;;		_Function_G_2
 25638 ;;		_Function_G_4
 25639 ;;		_Function_G
 25640 ;;		_Function_H
 25641 ;;		_Function_H_4
 25642 ;;		_Function_H_5
 25643 ;;		_Function_H_6
 25644 ;;		_Function_H_8
 25645 ;;		_Function_H_9_1
 25646 ;;		_Function_H_9_2
 25647 ;;		_Function_H_9_3
 25648 ;;		_Function_H_9_4
 25649 ;;		_Function_H_9
 25650 ;; This function uses a non-reentrant model
 25651 ;;
 25652                           
 25653                           	psect	text79
 25654  009464                     __ptext79:
 25655                           	opt stack 0
 25656  009464                     ___wmul:
 25657                           	opt stack 24
 25658                           
 25659                           ;incstack = 0
 25660  009464  0100               	movlb	0	; () banked
 25661  009466  5164               	movf	___wmul@multiplier& (0+255),w,b
 25662  009468  0366               	mulwf	___wmul@multiplicand& (0+255),b
 25663  00946A  CFF3 F068          	movff	prodl,___wmul@product
 25664  00946E  CFF4 F069          	movff	prodh,___wmul@product+1
 25665  009472  5164               	movf	___wmul@multiplier& (0+255),w,b
 25666  009474  0367               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 25667  009476  50F3               	movf	prodl,w,c
 25668  009478  2769               	addwf	(___wmul@product+1)& (0+255),f,b
 25669  00947A  5165               	movf	(___wmul@multiplier+1)& (0+255),w,b
 25670  00947C  0366               	mulwf	___wmul@multiplicand& (0+255),b
 25671  00947E  50F3               	movf	prodl,w,c
 25672  009480  2769               	addwf	(___wmul@product+1)& (0+255),f,b
 25673                           
 25674                           ; BSR set to: 0
 25675  009482  C068  F064         	movff	___wmul@product,?___wmul
 25676  009486  C069  F065         	movff	___wmul@product+1,?___wmul+1
 25677  00948A  0012               	return	
 25678  00948C                     __end_of___wmul:
 25679                           	opt stack 0
 25680                           tblptru	equ	0xFF8
 25681                           tblptrh	equ	0xFF7
 25682                           tblptrl	equ	0xFF6
 25683                           tablat	equ	0xFF5
 25684                           prodh	equ	0xFF4
 25685                           prodl	equ	0xFF3
 25686                           intcon	equ	0xFF2
 25687                           intcon2	equ	0xFF1
 25688                           postinc0	equ	0xFEE
 25689                           wreg	equ	0xFE8
 25690                           indf1	equ	0xFE7
 25691                           postdec1	equ	0xFE5
 25692                           fsr1h	equ	0xFE2
 25693                           fsr1l	equ	0xFE1
 25694                           indf2	equ	0xFDF
 25695                           postinc2	equ	0xFDE
 25696                           plusw2	equ	0xFDB
 25697                           fsr2h	equ	0xFDA
 25698                           fsr2l	equ	0xFD9
 25699                           status	equ	0xFD8
 25700                           
 25701 ;; *************** function _processKeyboard *****************
 25702 ;; Defined at:
 25703 ;;		line 23 in file "keyboard.c"
 25704 ;; Parameters:    Size  Location     Type
 25705 ;;		None
 25706 ;; Auto vars:     Size  Location     Type
 25707 ;;		None
 25708 ;; Return value:  Size  Location     Type
 25709 ;;                  1    wreg      void 
 25710 ;; Registers used:
 25711 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25712 ;; Tracked objects:
 25713 ;;		On entry : 0/0
 25714 ;;		On exit  : 0/0
 25715 ;;		Unchanged: 0/0
 25716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25721 ;;Total ram usage:        0 bytes
 25722 ;; Hardware stack levels used:    1
 25723 ;; Hardware stack levels required when called:   13
 25724 ;; This function calls:
 25725 ;;		_keyboard_all_note_efficient
 25726 ;;		_keyboard_eight_note_efficient
 25727 ;;		_keyboard_sharps_only_efficient
 25728 ;; This function is called by:
 25729 ;;		_digitalInputs
 25730 ;; This function uses a non-reentrant model
 25731 ;;
 25732                           
 25733                           	psect	text80
 25734  008610                     __ptext80:
 25735                           	opt stack 0
 25736  008610                     _processKeyboard:
 25737                           	opt stack 16
 25738                           
 25739                           ;keyboard.c: 25: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_
      +                          MODE == SEVENTH) {keyboard_all_note_efficient();}
 25740                           
 25741                           ; BSR set to: 0
 25742                           ;incstack = 0
 25743  008610  0100               	movlb	0	; () banked
 25744  008612  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 25745  008614  B4D8               	btfsc	status,2,c
 25746  008616  D007               	goto	u33990
 25747                           
 25748                           ; BSR set to: 0
 25749  008618  0E06               	movlw	6
 25750  00861A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25751  00861C  B4D8               	btfsc	status,2,c
 25752  00861E  D003               	goto	u33990
 25753                           
 25754                           ; BSR set to: 0
 25755  008620  0E09               	movlw	9
 25756  008622  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25757  008624  B4D8               	btfsc	status,2,c
 25758  008626                     u33990:
 25759                           
 25760                           ; BSR set to: 0
 25761                           
 25762                           ; BSR set to: 0
 25763  008626  ECA6  F00B         	call	_keyboard_all_note_efficient	;wreg free
 25764                           
 25765                           ;keyboard.c: 27: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_M
      +                          ODE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_T
      +                          RIAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MI
      +                          NOR
 25766  00862A  0100               	movlb	0	; () banked
 25767  00862C  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 25768  00862E  B4D8               	btfsc	status,2,c
 25769  008630  D017               	goto	u34060
 25770                           
 25771                           ; BSR set to: 0
 25772  008632  0E02               	movlw	2
 25773  008634  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25774  008636  B4D8               	btfsc	status,2,c
 25775  008638  D013               	goto	u34060
 25776                           
 25777                           ; BSR set to: 0
 25778  00863A  0E03               	movlw	3
 25779  00863C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25780  00863E  B4D8               	btfsc	status,2,c
 25781  008640  D00F               	goto	u34060
 25782                           
 25783                           ; BSR set to: 0
 25784  008642  0E07               	movlw	7
 25785  008644  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25786  008646  B4D8               	btfsc	status,2,c
 25787  008648  D00B               	goto	u34060
 25788                           
 25789                           ; BSR set to: 0
 25790  00864A  0E08               	movlw	8
 25791  00864C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25792  00864E  B4D8               	btfsc	status,2,c
 25793  008650  D007               	goto	u34060
 25794                           
 25795                           ; BSR set to: 0
 25796  008652  0E0A               	movlw	10
 25797  008654  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25798  008656  B4D8               	btfsc	status,2,c
 25799  008658  D003               	goto	u34060
 25800                           
 25801                           ; BSR set to: 0
 25802  00865A  0E0B               	movlw	11
 25803  00865C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25804  00865E  B4D8               	btfsc	status,2,c
 25805  008660                     u34060:
 25806                           
 25807                           ; BSR set to: 0
 25808                           
 25809                           ; BSR set to: 0
 25810  008660  EC7D  F017         	call	_keyboard_eight_note_efficient	;wreg free
 25811                           
 25812                           ;keyboard.c: 30: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC
      +                          _MINOR)) {keyboard_sharps_only_efficient();}
 25813  008664  0E04               	movlw	4
 25814  008666  0100               	movlb	0	; () banked
 25815  008668  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25816  00866A  B4D8               	btfsc	status,2,c
 25817  00866C  D004               	goto	u34080
 25818                           
 25819                           ; BSR set to: 0
 25820  00866E  0E05               	movlw	5
 25821  008670  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 25822  008672  A4D8               	btfss	status,2,c
 25823  008674  0012               	return	
 25824  008676                     u34080:
 25825                           
 25826                           ; BSR set to: 0
 25827                           
 25828                           ; BSR set to: 0
 25829  008676  EC21  F01E         	call	_keyboard_sharps_only_efficient	;wreg free
 25830  00867A  0012               	return	
 25831  00867C                     __end_of_processKeyboard:
 25832                           	opt stack 0
 25833                           tblptru	equ	0xFF8
 25834                           tblptrh	equ	0xFF7
 25835                           tblptrl	equ	0xFF6
 25836                           tablat	equ	0xFF5
 25837                           prodh	equ	0xFF4
 25838                           prodl	equ	0xFF3
 25839                           intcon	equ	0xFF2
 25840                           intcon2	equ	0xFF1
 25841                           postinc0	equ	0xFEE
 25842                           wreg	equ	0xFE8
 25843                           indf1	equ	0xFE7
 25844                           postdec1	equ	0xFE5
 25845                           fsr1h	equ	0xFE2
 25846                           fsr1l	equ	0xFE1
 25847                           indf2	equ	0xFDF
 25848                           postinc2	equ	0xFDE
 25849                           plusw2	equ	0xFDB
 25850                           fsr2h	equ	0xFDA
 25851                           fsr2l	equ	0xFD9
 25852                           status	equ	0xFD8
 25853                           
 25854 ;; *************** function _keyboard_sharps_only_efficient *****************
 25855 ;; Defined at:
 25856 ;;		line 123 in file "keyboard.c"
 25857 ;; Parameters:    Size  Location     Type
 25858 ;;		None
 25859 ;; Auto vars:     Size  Location     Type
 25860 ;;  index           1   30[BANK0 ] unsigned char 
 25861 ;;  pitch           1   29[BANK0 ] unsigned char 
 25862 ;; Return value:  Size  Location     Type
 25863 ;;                  1    wreg      void 
 25864 ;; Registers used:
 25865 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25866 ;; Tracked objects:
 25867 ;;		On entry : 0/0
 25868 ;;		On exit  : 0/0
 25869 ;;		Unchanged: 0/0
 25870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25872 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25875 ;;Total ram usage:        2 bytes
 25876 ;; Hardware stack levels used:    1
 25877 ;; Hardware stack levels required when called:   11
 25878 ;; This function calls:
 25879 ;;		_playThisNotePentatonic
 25880 ;; This function is called by:
 25881 ;;		_processKeyboard
 25882 ;; This function uses a non-reentrant model
 25883 ;;
 25884                           
 25885                           	psect	text81
 25886  003C42                     __ptext81:
 25887                           	opt stack 0
 25888  003C42                     _keyboard_sharps_only_efficient:
 25889                           	opt stack 17
 25890                           
 25891                           ;keyboard.c: 125: unsigned char pitch;
 25892                           ;keyboard.c: 126: unsigned char index;
 25893                           ;keyboard.c: 129: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2){
 25894                           
 25895                           ;incstack = 0
 25896  003C42  0100               	movlb	0	; () banked
 25897  003C44  B3D8               	btfsc	_button_state_now& (0+255),1,b
 25898                           
 25899                           ; BSR set to: 0
 25900  003C46  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25901  003C48  D00E               	goto	l1358
 25902                           
 25903                           ; BSR set to: 0
 25904  003C4A  B3D0               	btfsc	_keyboard& (0+255),1,b
 25905  003C4C  D00C               	goto	l1358
 25906                           
 25907                           ; BSR set to: 0
 25908                           ;keyboard.c: 130: pitch = Cs;
 25909  003C4E  0E01               	movlw	1
 25910  003C50  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 25911                           
 25912                           ;keyboard.c: 131: index = 0;
 25913  003C52  0E00               	movlw	0
 25914  003C54  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 25915                           
 25916                           ; BSR set to: 0
 25917                           ;keyboard.c: 132: ON_OFF = 1;
 25918  003C56  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25919                           
 25920                           ; BSR set to: 0
 25921                           ;keyboard.c: 133: playThisNotePentatonic(pitch, index);
 25922  003C58  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 25923  003C5C  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 25924  003C5E  ECB3  F029         	call	_playThisNotePentatonic
 25925                           
 25926                           ;keyboard.c: 134: keyboard.SW2 = 1;
 25927  003C62  0100               	movlb	0	; () banked
 25928  003C64  83D0               	bsf	_keyboard& (0+255),1,b
 25929  003C66                     l1358:
 25930                           
 25931                           ; BSR set to: 0
 25932                           ;keyboard.c: 135: }
 25933                           ;keyboard.c: 136: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4){
 25934                           
 25935                           ; BSR set to: 0
 25936  003C66  B7D8               	btfsc	_button_state_now& (0+255),3,b
 25937                           
 25938                           ; BSR set to: 0
 25939  003C68  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25940  003C6A  D00E               	goto	l1359
 25941                           
 25942                           ; BSR set to: 0
 25943  003C6C  B7D0               	btfsc	_keyboard& (0+255),3,b
 25944  003C6E  D00C               	goto	l1359
 25945                           
 25946                           ; BSR set to: 0
 25947                           ;keyboard.c: 137: pitch = Ds;
 25948  003C70  0E03               	movlw	3
 25949  003C72  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 25950                           
 25951                           ;keyboard.c: 138: index = 1;
 25952  003C74  0E01               	movlw	1
 25953  003C76  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 25954                           
 25955                           ; BSR set to: 0
 25956                           ;keyboard.c: 139: ON_OFF = 1;
 25957  003C78  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25958                           
 25959                           ; BSR set to: 0
 25960                           ;keyboard.c: 140: playThisNotePentatonic(pitch, index);
 25961  003C7A  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 25962  003C7E  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 25963  003C80  ECB3  F029         	call	_playThisNotePentatonic
 25964                           
 25965                           ;keyboard.c: 141: keyboard.SW4 = 1;
 25966  003C84  0100               	movlb	0	; () banked
 25967  003C86  87D0               	bsf	_keyboard& (0+255),3,b
 25968  003C88                     l1359:
 25969                           
 25970                           ; BSR set to: 0
 25971                           ;keyboard.c: 142: }
 25972                           ;keyboard.c: 143: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7){
 25973                           
 25974                           ; BSR set to: 0
 25975  003C88  BDD8               	btfsc	_button_state_now& (0+255),6,b
 25976                           
 25977                           ; BSR set to: 0
 25978  003C8A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25979  003C8C  D00E               	goto	l1360
 25980                           
 25981                           ; BSR set to: 0
 25982  003C8E  BDD0               	btfsc	_keyboard& (0+255),6,b
 25983  003C90  D00C               	goto	l1360
 25984                           
 25985                           ; BSR set to: 0
 25986                           ;keyboard.c: 144: pitch = Fs;
 25987  003C92  0E06               	movlw	6
 25988  003C94  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 25989                           
 25990                           ;keyboard.c: 145: index = 2;
 25991  003C96  0E02               	movlw	2
 25992  003C98  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 25993                           
 25994                           ; BSR set to: 0
 25995                           ;keyboard.c: 146: ON_OFF = 1;
 25996  003C9A  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25997                           
 25998                           ; BSR set to: 0
 25999                           ;keyboard.c: 147: playThisNotePentatonic(pitch, index);
 26000  003C9C  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26001  003CA0  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26002  003CA2  ECB3  F029         	call	_playThisNotePentatonic
 26003                           
 26004                           ;keyboard.c: 148: keyboard.SW7 = 1;
 26005  003CA6  0100               	movlb	0	; () banked
 26006  003CA8  8DD0               	bsf	_keyboard& (0+255),6,b
 26007  003CAA                     l1360:
 26008                           
 26009                           ; BSR set to: 0
 26010                           ;keyboard.c: 149: }
 26011                           ;keyboard.c: 150: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9){
 26012                           
 26013                           ; BSR set to: 0
 26014  003CAA  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 26015                           
 26016                           ; BSR set to: 0
 26017  003CAC  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26018  003CAE  D00E               	goto	l1361
 26019                           
 26020                           ; BSR set to: 0
 26021  003CB0  B1D1               	btfsc	(_keyboard+1)& (0+255),0,b
 26022  003CB2  D00C               	goto	l1361
 26023                           
 26024                           ; BSR set to: 0
 26025                           ;keyboard.c: 151: pitch = Gs;
 26026  003CB4  0E08               	movlw	8
 26027  003CB6  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26028                           
 26029                           ;keyboard.c: 152: index = 3;
 26030  003CB8  0E03               	movlw	3
 26031  003CBA  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26032                           
 26033                           ; BSR set to: 0
 26034                           ;keyboard.c: 153: ON_OFF = 1;
 26035  003CBC  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26036                           
 26037                           ; BSR set to: 0
 26038                           ;keyboard.c: 154: playThisNotePentatonic(pitch, index);
 26039  003CBE  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26040  003CC2  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26041  003CC4  ECB3  F029         	call	_playThisNotePentatonic
 26042                           
 26043                           ;keyboard.c: 155: keyboard.SW9 = 1;
 26044  003CC8  0100               	movlb	0	; () banked
 26045  003CCA  81D1               	bsf	(_keyboard+1)& (0+255),0,b
 26046  003CCC                     l1361:
 26047                           
 26048                           ; BSR set to: 0
 26049                           ;keyboard.c: 156: }
 26050                           ;keyboard.c: 157: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11){
 26051                           
 26052                           ; BSR set to: 0
 26053  003CCC  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 26054                           
 26055                           ; BSR set to: 0
 26056  003CCE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26057  003CD0  D00E               	goto	l1362
 26058                           
 26059                           ; BSR set to: 0
 26060  003CD2  B5D1               	btfsc	(_keyboard+1)& (0+255),2,b
 26061  003CD4  D00C               	goto	l1362
 26062                           
 26063                           ; BSR set to: 0
 26064                           ;keyboard.c: 158: pitch = As;
 26065  003CD6  0E0A               	movlw	10
 26066  003CD8  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26067                           
 26068                           ;keyboard.c: 159: index = 4;
 26069  003CDA  0E04               	movlw	4
 26070  003CDC  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26071                           
 26072                           ; BSR set to: 0
 26073                           ;keyboard.c: 160: ON_OFF = 1;
 26074  003CDE  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26075                           
 26076                           ; BSR set to: 0
 26077                           ;keyboard.c: 161: playThisNotePentatonic(pitch, index);
 26078  003CE0  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26079  003CE4  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26080  003CE6  ECB3  F029         	call	_playThisNotePentatonic
 26081                           
 26082                           ;keyboard.c: 162: keyboard.SW11 = 1;
 26083  003CEA  0100               	movlb	0	; () banked
 26084  003CEC  85D1               	bsf	(_keyboard+1)& (0+255),2,b
 26085  003CEE                     l1362:
 26086                           
 26087                           ; BSR set to: 0
 26088                           ;keyboard.c: 163: }
 26089                           ;keyboard.c: 165: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14){
 26090                           
 26091                           ; BSR set to: 0
 26092  003CEE  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 26093                           
 26094                           ; BSR set to: 0
 26095  003CF0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26096  003CF2  D00E               	goto	l1363
 26097                           
 26098                           ; BSR set to: 0
 26099  003CF4  BBD1               	btfsc	(_keyboard+1)& (0+255),5,b
 26100  003CF6  D00C               	goto	l1363
 26101                           
 26102                           ; BSR set to: 0
 26103                           ;keyboard.c: 166: pitch = C2s;
 26104  003CF8  0E0D               	movlw	13
 26105  003CFA  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26106                           
 26107                           ;keyboard.c: 167: index = 5;
 26108  003CFC  0E05               	movlw	5
 26109  003CFE  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26110                           
 26111                           ; BSR set to: 0
 26112                           ;keyboard.c: 168: ON_OFF = 1;
 26113  003D00  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26114                           
 26115                           ; BSR set to: 0
 26116                           ;keyboard.c: 169: playThisNotePentatonic(pitch, index);
 26117  003D02  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26118  003D06  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26119  003D08  ECB3  F029         	call	_playThisNotePentatonic
 26120                           
 26121                           ;keyboard.c: 170: keyboard.SW14 = 1;
 26122  003D0C  0100               	movlb	0	; () banked
 26123  003D0E  8BD1               	bsf	(_keyboard+1)& (0+255),5,b
 26124  003D10                     l1363:
 26125                           
 26126                           ; BSR set to: 0
 26127                           ;keyboard.c: 171: }
 26128                           ;keyboard.c: 172: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16){
 26129                           
 26130                           ; BSR set to: 0
 26131  003D10  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 26132                           
 26133                           ; BSR set to: 0
 26134  003D12  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26135  003D14  D00E               	goto	l1364
 26136                           
 26137                           ; BSR set to: 0
 26138  003D16  BFD1               	btfsc	(_keyboard+1)& (0+255),7,b
 26139  003D18  D00C               	goto	l1364
 26140                           
 26141                           ; BSR set to: 0
 26142                           ;keyboard.c: 173: pitch = D2s;
 26143  003D1A  0E0F               	movlw	15
 26144  003D1C  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26145                           
 26146                           ;keyboard.c: 174: index = 6;
 26147  003D1E  0E06               	movlw	6
 26148  003D20  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26149                           
 26150                           ; BSR set to: 0
 26151                           ;keyboard.c: 175: ON_OFF = 1;
 26152  003D22  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26153                           
 26154                           ; BSR set to: 0
 26155                           ;keyboard.c: 176: playThisNotePentatonic(pitch, index);
 26156  003D24  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26157  003D28  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26158  003D2A  ECB3  F029         	call	_playThisNotePentatonic
 26159                           
 26160                           ;keyboard.c: 177: keyboard.SW16 = 1;
 26161  003D2E  0100               	movlb	0	; () banked
 26162  003D30  8FD1               	bsf	(_keyboard+1)& (0+255),7,b
 26163  003D32                     l1364:
 26164                           
 26165                           ; BSR set to: 0
 26166                           ;keyboard.c: 178: }
 26167                           ;keyboard.c: 179: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19){
 26168                           
 26169                           ; BSR set to: 0
 26170  003D32  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 26171                           
 26172                           ; BSR set to: 0
 26173  003D34  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26174  003D36  D00E               	goto	l1365
 26175                           
 26176                           ; BSR set to: 0
 26177  003D38  B5D2               	btfsc	(_keyboard+2)& (0+255),2,b
 26178  003D3A  D00C               	goto	l1365
 26179                           
 26180                           ; BSR set to: 0
 26181                           ;keyboard.c: 180: pitch = F2s;
 26182  003D3C  0E12               	movlw	18
 26183  003D3E  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26184                           
 26185                           ;keyboard.c: 181: index = 7;
 26186  003D40  0E07               	movlw	7
 26187  003D42  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26188                           
 26189                           ; BSR set to: 0
 26190                           ;keyboard.c: 182: ON_OFF = 1;
 26191  003D44  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26192                           
 26193                           ; BSR set to: 0
 26194                           ;keyboard.c: 183: playThisNotePentatonic(pitch, index);
 26195  003D46  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26196  003D4A  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26197  003D4C  ECB3  F029         	call	_playThisNotePentatonic
 26198                           
 26199                           ;keyboard.c: 184: keyboard.SW19 = 1;
 26200  003D50  0100               	movlb	0	; () banked
 26201  003D52  85D2               	bsf	(_keyboard+2)& (0+255),2,b
 26202  003D54                     l1365:
 26203                           
 26204                           ; BSR set to: 0
 26205                           ;keyboard.c: 185: }
 26206                           ;keyboard.c: 186: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21){
 26207                           
 26208                           ; BSR set to: 0
 26209  003D54  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 26210                           
 26211                           ; BSR set to: 0
 26212  003D56  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26213  003D58  D00E               	goto	l1366
 26214                           
 26215                           ; BSR set to: 0
 26216  003D5A  B9D2               	btfsc	(_keyboard+2)& (0+255),4,b
 26217  003D5C  D00C               	goto	l1366
 26218                           
 26219                           ; BSR set to: 0
 26220                           ;keyboard.c: 187: pitch = G2s;
 26221  003D5E  0E14               	movlw	20
 26222  003D60  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26223                           
 26224                           ;keyboard.c: 188: index = 8;
 26225  003D62  0E08               	movlw	8
 26226  003D64  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26227                           
 26228                           ; BSR set to: 0
 26229                           ;keyboard.c: 189: ON_OFF = 1;
 26230  003D66  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26231                           
 26232                           ; BSR set to: 0
 26233                           ;keyboard.c: 190: playThisNotePentatonic(pitch, index);
 26234  003D68  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26235  003D6C  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26236  003D6E  ECB3  F029         	call	_playThisNotePentatonic
 26237                           
 26238                           ;keyboard.c: 191: keyboard.SW21 = 1;
 26239  003D72  0100               	movlb	0	; () banked
 26240  003D74  89D2               	bsf	(_keyboard+2)& (0+255),4,b
 26241  003D76                     l1366:
 26242                           
 26243                           ; BSR set to: 0
 26244                           ;keyboard.c: 192: }
 26245                           ;keyboard.c: 193: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23){
 26246                           
 26247                           ; BSR set to: 0
 26248  003D76  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 26249                           
 26250                           ; BSR set to: 0
 26251  003D78  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 26252  003D7A  D00E               	goto	l1367
 26253                           
 26254                           ; BSR set to: 0
 26255  003D7C  BDD2               	btfsc	(_keyboard+2)& (0+255),6,b
 26256  003D7E  D00C               	goto	l1367
 26257                           
 26258                           ; BSR set to: 0
 26259                           ;keyboard.c: 194: pitch = A2s;
 26260  003D80  0E16               	movlw	22
 26261  003D82  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26262                           
 26263                           ;keyboard.c: 195: index = 9;
 26264  003D84  0E09               	movlw	9
 26265  003D86  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26266                           
 26267                           ; BSR set to: 0
 26268                           ;keyboard.c: 196: ON_OFF = 1;
 26269  003D88  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26270                           
 26271                           ; BSR set to: 0
 26272                           ;keyboard.c: 197: playThisNotePentatonic(pitch, index);
 26273  003D8A  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26274  003D8E  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26275  003D90  ECB3  F029         	call	_playThisNotePentatonic
 26276                           
 26277                           ;keyboard.c: 198: keyboard.SW23 = 1;
 26278  003D94  0100               	movlb	0	; () banked
 26279  003D96  8DD2               	bsf	(_keyboard+2)& (0+255),6,b
 26280  003D98                     l1367:
 26281                           
 26282                           ; BSR set to: 0
 26283                           ;keyboard.c: 199: }
 26284                           ;keyboard.c: 202: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 26285                           
 26286                           ; BSR set to: 0
 26287  003D98  B3D4               	btfsc	_button_state_last& (0+255),1,b
 26288                           
 26289                           ; BSR set to: 0
 26290  003D9A  B3D8               	btfsc	_button_state_now& (0+255),1,b
 26291  003D9C  D00E               	goto	l1368
 26292                           
 26293                           ; BSR set to: 0
 26294  003D9E  A3D0               	btfss	_keyboard& (0+255),1,b
 26295  003DA0  D00C               	goto	l1368
 26296                           
 26297                           ; BSR set to: 0
 26298                           ;keyboard.c: 203: pitch = Cs;
 26299  003DA2  0E01               	movlw	1
 26300  003DA4  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26301                           
 26302                           ;keyboard.c: 204: index = 0;
 26303  003DA6  0E00               	movlw	0
 26304  003DA8  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26305                           
 26306                           ; BSR set to: 0
 26307                           ;keyboard.c: 205: ON_OFF = 0;
 26308  003DAA  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26309                           
 26310                           ; BSR set to: 0
 26311                           ;keyboard.c: 206: playThisNotePentatonic(pitch, index);
 26312  003DAC  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26313  003DB0  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26314  003DB2  ECB3  F029         	call	_playThisNotePentatonic
 26315                           
 26316                           ;keyboard.c: 207: keyboard.SW2 = 0;
 26317  003DB6  0100               	movlb	0	; () banked
 26318  003DB8  93D0               	bcf	_keyboard& (0+255),1,b
 26319  003DBA                     l1368:
 26320                           
 26321                           ; BSR set to: 0
 26322                           ;keyboard.c: 208: }
 26323                           ;keyboard.c: 209: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 26324                           
 26325                           ; BSR set to: 0
 26326  003DBA  B7D4               	btfsc	_button_state_last& (0+255),3,b
 26327                           
 26328                           ; BSR set to: 0
 26329  003DBC  B7D8               	btfsc	_button_state_now& (0+255),3,b
 26330  003DBE  D00E               	goto	l1369
 26331                           
 26332                           ; BSR set to: 0
 26333  003DC0  A7D0               	btfss	_keyboard& (0+255),3,b
 26334  003DC2  D00C               	goto	l1369
 26335                           
 26336                           ; BSR set to: 0
 26337                           ;keyboard.c: 210: pitch = Ds;
 26338  003DC4  0E03               	movlw	3
 26339  003DC6  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26340                           
 26341                           ;keyboard.c: 211: index = 1;
 26342  003DC8  0E01               	movlw	1
 26343  003DCA  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26344                           
 26345                           ; BSR set to: 0
 26346                           ;keyboard.c: 212: ON_OFF = 0;
 26347  003DCC  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26348                           
 26349                           ; BSR set to: 0
 26350                           ;keyboard.c: 213: playThisNotePentatonic(pitch, index);
 26351  003DCE  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26352  003DD2  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26353  003DD4  ECB3  F029         	call	_playThisNotePentatonic
 26354                           
 26355                           ;keyboard.c: 214: keyboard.SW4 = 0;
 26356  003DD8  0100               	movlb	0	; () banked
 26357  003DDA  97D0               	bcf	_keyboard& (0+255),3,b
 26358  003DDC                     l1369:
 26359                           
 26360                           ; BSR set to: 0
 26361                           ;keyboard.c: 215: }
 26362                           ;keyboard.c: 216: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 26363                           
 26364                           ; BSR set to: 0
 26365  003DDC  BDD4               	btfsc	_button_state_last& (0+255),6,b
 26366                           
 26367                           ; BSR set to: 0
 26368  003DDE  BDD8               	btfsc	_button_state_now& (0+255),6,b
 26369  003DE0  D00E               	goto	l1370
 26370                           
 26371                           ; BSR set to: 0
 26372  003DE2  ADD0               	btfss	_keyboard& (0+255),6,b
 26373  003DE4  D00C               	goto	l1370
 26374                           
 26375                           ; BSR set to: 0
 26376                           ;keyboard.c: 217: pitch = Fs;
 26377  003DE6  0E06               	movlw	6
 26378  003DE8  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26379                           
 26380                           ;keyboard.c: 218: index = 2;
 26381  003DEA  0E02               	movlw	2
 26382  003DEC  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26383                           
 26384                           ; BSR set to: 0
 26385                           ;keyboard.c: 219: ON_OFF = 0;
 26386  003DEE  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26387                           
 26388                           ; BSR set to: 0
 26389                           ;keyboard.c: 220: playThisNotePentatonic(pitch, index);
 26390  003DF0  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26391  003DF4  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26392  003DF6  ECB3  F029         	call	_playThisNotePentatonic
 26393                           
 26394                           ;keyboard.c: 221: keyboard.SW7 = 0;
 26395  003DFA  0100               	movlb	0	; () banked
 26396  003DFC  9DD0               	bcf	_keyboard& (0+255),6,b
 26397  003DFE                     l1370:
 26398                           
 26399                           ; BSR set to: 0
 26400                           ;keyboard.c: 222: }
 26401                           ;keyboard.c: 223: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 26402                           
 26403                           ; BSR set to: 0
 26404  003DFE  B1D5               	btfsc	(_button_state_last+1)& (0+255),0,b
 26405                           
 26406                           ; BSR set to: 0
 26407  003E00  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 26408  003E02  D00E               	goto	l1371
 26409                           
 26410                           ; BSR set to: 0
 26411  003E04  A1D1               	btfss	(_keyboard+1)& (0+255),0,b
 26412  003E06  D00C               	goto	l1371
 26413                           
 26414                           ; BSR set to: 0
 26415                           ;keyboard.c: 224: pitch = Gs;
 26416  003E08  0E08               	movlw	8
 26417  003E0A  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26418                           
 26419                           ;keyboard.c: 225: index = 3;
 26420  003E0C  0E03               	movlw	3
 26421  003E0E  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26422                           
 26423                           ; BSR set to: 0
 26424                           ;keyboard.c: 226: ON_OFF = 0;
 26425  003E10  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26426                           
 26427                           ; BSR set to: 0
 26428                           ;keyboard.c: 227: playThisNotePentatonic(pitch, index);
 26429  003E12  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26430  003E16  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26431  003E18  ECB3  F029         	call	_playThisNotePentatonic
 26432                           
 26433                           ;keyboard.c: 228: keyboard.SW9 = 0;
 26434  003E1C  0100               	movlb	0	; () banked
 26435  003E1E  91D1               	bcf	(_keyboard+1)& (0+255),0,b
 26436  003E20                     l1371:
 26437                           
 26438                           ; BSR set to: 0
 26439                           ;keyboard.c: 229: }
 26440                           ;keyboard.c: 230: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 26441                           
 26442                           ; BSR set to: 0
 26443  003E20  B5D5               	btfsc	(_button_state_last+1)& (0+255),2,b
 26444                           
 26445                           ; BSR set to: 0
 26446  003E22  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 26447  003E24  D00E               	goto	l1372
 26448                           
 26449                           ; BSR set to: 0
 26450  003E26  A5D1               	btfss	(_keyboard+1)& (0+255),2,b
 26451  003E28  D00C               	goto	l1372
 26452                           
 26453                           ; BSR set to: 0
 26454                           ;keyboard.c: 231: pitch = As;
 26455  003E2A  0E0A               	movlw	10
 26456  003E2C  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26457                           
 26458                           ;keyboard.c: 232: index = 4;
 26459  003E2E  0E04               	movlw	4
 26460  003E30  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26461                           
 26462                           ; BSR set to: 0
 26463                           ;keyboard.c: 233: ON_OFF = 0;
 26464  003E32  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26465                           
 26466                           ; BSR set to: 0
 26467                           ;keyboard.c: 234: playThisNotePentatonic(pitch, index);
 26468  003E34  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26469  003E38  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26470  003E3A  ECB3  F029         	call	_playThisNotePentatonic
 26471                           
 26472                           ;keyboard.c: 235: keyboard.SW11 = 0;
 26473  003E3E  0100               	movlb	0	; () banked
 26474  003E40  95D1               	bcf	(_keyboard+1)& (0+255),2,b
 26475  003E42                     l1372:
 26476                           
 26477                           ; BSR set to: 0
 26478                           ;keyboard.c: 236: }
 26479                           ;keyboard.c: 239: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 26480                           
 26481                           ; BSR set to: 0
 26482  003E42  BBD5               	btfsc	(_button_state_last+1)& (0+255),5,b
 26483                           
 26484                           ; BSR set to: 0
 26485  003E44  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 26486  003E46  D00E               	goto	l1373
 26487                           
 26488                           ; BSR set to: 0
 26489  003E48  ABD1               	btfss	(_keyboard+1)& (0+255),5,b
 26490  003E4A  D00C               	goto	l1373
 26491                           
 26492                           ; BSR set to: 0
 26493                           ;keyboard.c: 240: pitch = C2s;
 26494  003E4C  0E0D               	movlw	13
 26495  003E4E  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26496                           
 26497                           ;keyboard.c: 241: index = 5;
 26498  003E50  0E05               	movlw	5
 26499  003E52  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26500                           
 26501                           ; BSR set to: 0
 26502                           ;keyboard.c: 242: ON_OFF = 0;
 26503  003E54  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26504                           
 26505                           ; BSR set to: 0
 26506                           ;keyboard.c: 243: playThisNotePentatonic(pitch, index);
 26507  003E56  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26508  003E5A  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26509  003E5C  ECB3  F029         	call	_playThisNotePentatonic
 26510                           
 26511                           ;keyboard.c: 244: keyboard.SW14 = 0;
 26512  003E60  0100               	movlb	0	; () banked
 26513  003E62  9BD1               	bcf	(_keyboard+1)& (0+255),5,b
 26514  003E64                     l1373:
 26515                           
 26516                           ; BSR set to: 0
 26517                           ;keyboard.c: 245: }
 26518                           ;keyboard.c: 246: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 26519                           
 26520                           ; BSR set to: 0
 26521  003E64  BFD5               	btfsc	(_button_state_last+1)& (0+255),7,b
 26522                           
 26523                           ; BSR set to: 0
 26524  003E66  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 26525  003E68  D00E               	goto	l1374
 26526                           
 26527                           ; BSR set to: 0
 26528  003E6A  AFD1               	btfss	(_keyboard+1)& (0+255),7,b
 26529  003E6C  D00C               	goto	l1374
 26530                           
 26531                           ; BSR set to: 0
 26532                           ;keyboard.c: 247: pitch = D2s;
 26533  003E6E  0E0F               	movlw	15
 26534  003E70  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26535                           
 26536                           ;keyboard.c: 248: index = 6;
 26537  003E72  0E06               	movlw	6
 26538  003E74  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26539                           
 26540                           ; BSR set to: 0
 26541                           ;keyboard.c: 249: ON_OFF = 0;
 26542  003E76  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26543                           
 26544                           ; BSR set to: 0
 26545                           ;keyboard.c: 250: playThisNotePentatonic(pitch, index);
 26546  003E78  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26547  003E7C  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26548  003E7E  ECB3  F029         	call	_playThisNotePentatonic
 26549                           
 26550                           ;keyboard.c: 251: keyboard.SW16 = 0;
 26551  003E82  0100               	movlb	0	; () banked
 26552  003E84  9FD1               	bcf	(_keyboard+1)& (0+255),7,b
 26553  003E86                     l1374:
 26554                           
 26555                           ; BSR set to: 0
 26556                           ;keyboard.c: 252: }
 26557                           ;keyboard.c: 253: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 26558                           
 26559                           ; BSR set to: 0
 26560  003E86  B5D6               	btfsc	(_button_state_last+2)& (0+255),2,b
 26561                           
 26562                           ; BSR set to: 0
 26563  003E88  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 26564  003E8A  D00E               	goto	l1375
 26565                           
 26566                           ; BSR set to: 0
 26567  003E8C  A5D2               	btfss	(_keyboard+2)& (0+255),2,b
 26568  003E8E  D00C               	goto	l1375
 26569                           
 26570                           ; BSR set to: 0
 26571                           ;keyboard.c: 254: pitch = F2s;
 26572  003E90  0E12               	movlw	18
 26573  003E92  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26574                           
 26575                           ;keyboard.c: 255: index = 7;
 26576  003E94  0E07               	movlw	7
 26577  003E96  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26578                           
 26579                           ; BSR set to: 0
 26580                           ;keyboard.c: 256: ON_OFF = 0;
 26581  003E98  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26582                           
 26583                           ; BSR set to: 0
 26584                           ;keyboard.c: 257: playThisNotePentatonic(pitch, index);
 26585  003E9A  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26586  003E9E  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26587  003EA0  ECB3  F029         	call	_playThisNotePentatonic
 26588                           
 26589                           ;keyboard.c: 258: keyboard.SW19 = 0;
 26590  003EA4  0100               	movlb	0	; () banked
 26591  003EA6  95D2               	bcf	(_keyboard+2)& (0+255),2,b
 26592  003EA8                     l1375:
 26593                           
 26594                           ; BSR set to: 0
 26595                           ;keyboard.c: 259: }
 26596                           ;keyboard.c: 260: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 26597                           
 26598                           ; BSR set to: 0
 26599  003EA8  B9D6               	btfsc	(_button_state_last+2)& (0+255),4,b
 26600                           
 26601                           ; BSR set to: 0
 26602  003EAA  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 26603  003EAC  D00E               	goto	l1376
 26604                           
 26605                           ; BSR set to: 0
 26606  003EAE  A9D2               	btfss	(_keyboard+2)& (0+255),4,b
 26607  003EB0  D00C               	goto	l1376
 26608                           
 26609                           ; BSR set to: 0
 26610                           ;keyboard.c: 261: pitch = G2s;
 26611  003EB2  0E14               	movlw	20
 26612  003EB4  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26613                           
 26614                           ;keyboard.c: 262: index = 8;
 26615  003EB6  0E08               	movlw	8
 26616  003EB8  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26617                           
 26618                           ; BSR set to: 0
 26619                           ;keyboard.c: 263: ON_OFF = 0;
 26620  003EBA  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26621                           
 26622                           ; BSR set to: 0
 26623                           ;keyboard.c: 264: playThisNotePentatonic(pitch, index);
 26624  003EBC  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26625  003EC0  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26626  003EC2  ECB3  F029         	call	_playThisNotePentatonic
 26627                           
 26628                           ;keyboard.c: 265: keyboard.SW21 = 0;
 26629  003EC6  0100               	movlb	0	; () banked
 26630  003EC8  99D2               	bcf	(_keyboard+2)& (0+255),4,b
 26631  003ECA                     l1376:
 26632                           
 26633                           ; BSR set to: 0
 26634                           ;keyboard.c: 266: }
 26635                           ;keyboard.c: 267: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 26636                           
 26637                           ; BSR set to: 0
 26638  003ECA  ADD6               	btfss	(_button_state_last+2)& (0+255),6,b
 26639  003ECC  0012               	return	
 26640                           
 26641                           ; BSR set to: 0
 26642  003ECE  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 26643  003ED0  0012               	return	
 26644                           
 26645                           ; BSR set to: 0
 26646  003ED2  ADD2               	btfss	(_keyboard+2)& (0+255),6,b
 26647  003ED4  0012               	return	
 26648                           
 26649                           ; BSR set to: 0
 26650                           ;keyboard.c: 268: pitch = A2s;
 26651  003ED6  0E16               	movlw	22
 26652  003ED8  6F7D               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 26653                           
 26654                           ;keyboard.c: 269: index = 9;
 26655  003EDA  0E09               	movlw	9
 26656  003EDC  6F7E               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 26657                           
 26658                           ; BSR set to: 0
 26659                           ;keyboard.c: 270: ON_OFF = 0;
 26660  003EDE  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26661                           
 26662                           ; BSR set to: 0
 26663                           ;keyboard.c: 271: playThisNotePentatonic(pitch, index);
 26664  003EE0  C07E  F077         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 26665  003EE4  517D               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 26666  003EE6  ECB3  F029         	call	_playThisNotePentatonic
 26667                           
 26668                           ;keyboard.c: 272: keyboard.SW23 = 0;
 26669  003EEA  0100               	movlb	0	; () banked
 26670  003EEC  9DD2               	bcf	(_keyboard+2)& (0+255),6,b
 26671  003EEE  0012               	return	
 26672  003EF0                     __end_of_keyboard_sharps_only_efficient:
 26673                           	opt stack 0
 26674                           tblptru	equ	0xFF8
 26675                           tblptrh	equ	0xFF7
 26676                           tblptrl	equ	0xFF6
 26677                           tablat	equ	0xFF5
 26678                           prodh	equ	0xFF4
 26679                           prodl	equ	0xFF3
 26680                           intcon	equ	0xFF2
 26681                           intcon2	equ	0xFF1
 26682                           postinc0	equ	0xFEE
 26683                           wreg	equ	0xFE8
 26684                           indf1	equ	0xFE7
 26685                           postdec1	equ	0xFE5
 26686                           fsr1h	equ	0xFE2
 26687                           fsr1l	equ	0xFE1
 26688                           indf2	equ	0xFDF
 26689                           postinc2	equ	0xFDE
 26690                           plusw2	equ	0xFDB
 26691                           fsr2h	equ	0xFDA
 26692                           fsr2l	equ	0xFD9
 26693                           status	equ	0xFD8
 26694                           
 26695 ;; *************** function _playThisNotePentatonic *****************
 26696 ;; Defined at:
 26697 ;;		line 33 in file "keyboard.c"
 26698 ;; Parameters:    Size  Location     Type
 26699 ;;  pitch           1    wreg     unsigned char 
 26700 ;;  index           1   23[BANK0 ] unsigned char 
 26701 ;; Auto vars:     Size  Location     Type
 26702 ;;  pitch           1    0[COMRAM] unsigned char 
 26703 ;;  temp_pitch      1   28[BANK0 ] unsigned char 
 26704 ;; Return value:  Size  Location     Type
 26705 ;;                  1    wreg      void 
 26706 ;; Registers used:
 26707 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26708 ;; Tracked objects:
 26709 ;;		On entry : 0/0
 26710 ;;		On exit  : 0/0
 26711 ;;		Unchanged: 0/0
 26712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 26713 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26715 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26716 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26717 ;;Total ram usage:        6 bytes
 26718 ;; Hardware stack levels used:    1
 26719 ;; Hardware stack levels required when called:   10
 26720 ;; This function calls:
 26721 ;;		_add_notes_to_arpeggio
 26722 ;;		_delete_notes_from_arpeggio
 26723 ;;		_finish_arpeggio_setup
 26724 ;;		_key_press_release_note_off
 26725 ;;		_noteOff
 26726 ;;		_noteOn
 26727 ;;		_wait_one_pulse
 26728 ;; This function is called by:
 26729 ;;		_keyboard_sharps_only_efficient
 26730 ;;		_processOctave
 26731 ;;		_Function_H_6_1
 26732 ;; This function uses a non-reentrant model
 26733 ;;
 26734                           
 26735                           	psect	text82
 26736  005366                     __ptext82:
 26737                           	opt stack 0
 26738  005366                     _playThisNotePentatonic:
 26739                           	opt stack 16
 26740                           
 26741                           ;keyboard.c: 35: if(ARPEGGIO_ON == 0){
 26742                           
 26743                           ; BSR set to: 0
 26744                           ;incstack = 0
 26745  005366  B635               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 26746  005368  D054               	goto	l1341
 26747                           
 26748                           ;keyboard.c: 37: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 26749  00536A  0E04               	movlw	4
 26750  00536C  0100               	movlb	0	; () banked
 26751  00536E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26752  005370  A4D8               	btfss	status,2,c
 26753  005372  D025               	goto	l1338
 26754                           
 26755                           ; BSR set to: 0
 26756                           ;keyboard.c: 38: if(ON_OFF == 1) {noteOn(channel,pentatonic_major_key[index],velocity);}
 26757  005374  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26758  005376  D010               	goto	l1337
 26759                           
 26760                           ; BSR set to: 0
 26761  005378  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 26762  00537A  0D01               	mullw	1
 26763  00537C  0E92               	movlw	low _pentatonic_major_key
 26764  00537E  24F3               	addwf	prodl,w,c
 26765  005380  6EF6               	movwf	tblptrl,c
 26766  005382  0EF3               	movlw	high _pentatonic_major_key
 26767  005384  20F4               	addwfc	prodh,w,c
 26768  005386  6EF7               	movwf	tblptrh,c
 26769  005388                     	if	0	;There are less than 3 active tblptr bytes
 26770  005388                     	endif
 26771  005388  0008               	tblrd		*
 26772  00538A  CFF5 F06E          	movff	tablat,noteOn@pitch
 26773  00538E  C0FD  F06F         	movff	_velocity,noteOn@velocity
 26774  005392  51F6               	movf	_channel& (0+255),w,b
 26775  005394  ECA2  F044         	call	_noteOn
 26776  005398                     l1337:
 26777                           
 26778                           ;keyboard.c: 39: if(ON_OFF == 0) {noteOff(channel,pentatonic_major_key[index],velocity);
      +                          }
 26779  005398  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26780  00539A  D011               	goto	l1338
 26781  00539C  0100               	movlb	0	; () banked
 26782  00539E  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 26783  0053A0  0D01               	mullw	1
 26784  0053A2  0E92               	movlw	low _pentatonic_major_key
 26785  0053A4  24F3               	addwf	prodl,w,c
 26786  0053A6  6EF6               	movwf	tblptrl,c
 26787  0053A8  0EF3               	movlw	high _pentatonic_major_key
 26788  0053AA  20F4               	addwfc	prodh,w,c
 26789  0053AC  6EF7               	movwf	tblptrh,c
 26790  0053AE                     	if	0	;There are less than 3 active tblptr bytes
 26791  0053AE                     	endif
 26792  0053AE  0008               	tblrd		*
 26793  0053B0  CFF5 F06B          	movff	tablat,noteOff@pitch
 26794  0053B4  C0FD  F06C         	movff	_velocity,noteOff@velocity
 26795  0053B8  51F6               	movf	_channel& (0+255),w,b
 26796  0053BA  ECC9  F047         	call	_noteOff
 26797  0053BE                     l1338:
 26798                           
 26799                           ;keyboard.c: 40: }
 26800                           ;keyboard.c: 42: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 26801  0053BE  0E05               	movlw	5
 26802  0053C0  0100               	movlb	0	; () banked
 26803  0053C2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26804  0053C4  A4D8               	btfss	status,2,c
 26805  0053C6  D025               	goto	l1341
 26806                           
 26807                           ; BSR set to: 0
 26808                           ;keyboard.c: 43: if(ON_OFF == 1) {noteOn(channel,pentatonic_minor_key[index],velocity);}
 26809  0053C8  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26810  0053CA  D010               	goto	l1340
 26811                           
 26812                           ; BSR set to: 0
 26813  0053CC  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 26814  0053CE  0D01               	mullw	1
 26815  0053D0  0E87               	movlw	low _pentatonic_minor_key
 26816  0053D2  24F3               	addwf	prodl,w,c
 26817  0053D4  6EF6               	movwf	tblptrl,c
 26818  0053D6  0EF3               	movlw	high _pentatonic_minor_key
 26819  0053D8  20F4               	addwfc	prodh,w,c
 26820  0053DA  6EF7               	movwf	tblptrh,c
 26821  0053DC                     	if	0	;There are less than 3 active tblptr bytes
 26822  0053DC                     	endif
 26823  0053DC  0008               	tblrd		*
 26824  0053DE  CFF5 F06E          	movff	tablat,noteOn@pitch
 26825  0053E2  C0FD  F06F         	movff	_velocity,noteOn@velocity
 26826  0053E6  51F6               	movf	_channel& (0+255),w,b
 26827  0053E8  ECA2  F044         	call	_noteOn
 26828  0053EC                     l1340:
 26829                           
 26830                           ;keyboard.c: 44: if(ON_OFF == 0) {noteOff(channel,pentatonic_minor_key[index],velocity);
      +                          }
 26831  0053EC  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26832  0053EE  D011               	goto	l1341
 26833  0053F0  0100               	movlb	0	; () banked
 26834  0053F2  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 26835  0053F4  0D01               	mullw	1
 26836  0053F6  0E87               	movlw	low _pentatonic_minor_key
 26837  0053F8  24F3               	addwf	prodl,w,c
 26838  0053FA  6EF6               	movwf	tblptrl,c
 26839  0053FC  0EF3               	movlw	high _pentatonic_minor_key
 26840  0053FE  20F4               	addwfc	prodh,w,c
 26841  005400  6EF7               	movwf	tblptrh,c
 26842  005402                     	if	0	;There are less than 3 active tblptr bytes
 26843  005402                     	endif
 26844  005402  0008               	tblrd		*
 26845  005404  CFF5 F06B          	movff	tablat,noteOff@pitch
 26846  005408  C0FD  F06C         	movff	_velocity,noteOff@velocity
 26847  00540C  51F6               	movf	_channel& (0+255),w,b
 26848  00540E  ECC9  F047         	call	_noteOff
 26849  005412                     l1341:
 26850                           
 26851                           ;keyboard.c: 45: }
 26852                           ;keyboard.c: 46: }
 26853                           ;keyboard.c: 49: if(ARPEGGIO_ON == 1){
 26854  005412  A635               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 26855  005414  0012               	return	
 26856                           
 26857                           ;keyboard.c: 51: unsigned char temp_pitch;
 26858                           ;keyboard.c: 53: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 26859  005416  0E04               	movlw	4
 26860  005418  0100               	movlb	0	; () banked
 26861  00541A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26862  00541C  A4D8               	btfss	status,2,c
 26863  00541E  D00B               	goto	l1343
 26864                           
 26865                           ; BSR set to: 0
 26866                           ;keyboard.c: 54: temp_pitch = pentatonic_major_key[index];
 26867  005420  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 26868  005422  0D01               	mullw	1
 26869  005424  0E92               	movlw	low _pentatonic_major_key
 26870  005426  24F3               	addwf	prodl,w,c
 26871  005428  6EF6               	movwf	tblptrl,c
 26872  00542A  0EF3               	movlw	high _pentatonic_major_key
 26873  00542C  20F4               	addwfc	prodh,w,c
 26874  00542E  6EF7               	movwf	tblptrh,c
 26875  005430                     	if	0	;There are less than 3 active tblptr bytes
 26876  005430                     	endif
 26877  005430  0008               	tblrd		*
 26878  005432  CFF5 F07C          	movff	tablat,playThisNotePentatonic@temp_pitch
 26879  005436                     l1343:
 26880                           
 26881                           ; BSR set to: 0
 26882                           ;keyboard.c: 55: }
 26883                           ;keyboard.c: 57: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 26884                           
 26885                           ; BSR set to: 0
 26886  005436  0E05               	movlw	5
 26887  005438  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26888  00543A  A4D8               	btfss	status,2,c
 26889  00543C  D00B               	goto	l1344
 26890                           
 26891                           ; BSR set to: 0
 26892                           ;keyboard.c: 58: temp_pitch = pentatonic_minor_key[index];
 26893  00543E  5177               	movf	playThisNotePentatonic@index& (0+255),w,b
 26894  005440  0D01               	mullw	1
 26895  005442  0E87               	movlw	low _pentatonic_minor_key
 26896  005444  24F3               	addwf	prodl,w,c
 26897  005446  6EF6               	movwf	tblptrl,c
 26898  005448  0EF3               	movlw	high _pentatonic_minor_key
 26899  00544A  20F4               	addwfc	prodh,w,c
 26900  00544C  6EF7               	movwf	tblptrh,c
 26901  00544E                     	if	0	;There are less than 3 active tblptr bytes
 26902  00544E                     	endif
 26903  00544E  0008               	tblrd		*
 26904  005450  CFF5 F07C          	movff	tablat,playThisNotePentatonic@temp_pitch
 26905  005454                     l1344:
 26906                           
 26907                           ; BSR set to: 0
 26908                           ;keyboard.c: 59: }
 26909                           ;keyboard.c: 61: if(ON_OFF == 1) {
 26910                           
 26911                           ; BSR set to: 0
 26912  005454  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26913  005456  D019               	goto	l1345
 26914                           
 26915                           ; BSR set to: 0
 26916                           ;keyboard.c: 64: TMR0ON = 0;
 26917  005458  9ED5               	bcf	4053,7,c	;volatile
 26918                           
 26919                           ;keyboard.c: 66: parallel = temp_pitch;
 26920  00545A  C07C  F0E6         	movff	playThisNotePentatonic@temp_pitch,_parallel
 26921                           
 26922                           ; BSR set to: 0
 26923                           ;keyboard.c: 69: if(NUM_NOTES_PRESSED > 0){
 26924  00545E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 26925  005460  B4D8               	btfsc	status,2,c
 26926  005462  D00A               	goto	l1346
 26927                           
 26928                           ; BSR set to: 0
 26929                           ;keyboard.c: 70: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 26930  005464  0E00               	movlw	0
 26931  005466  B234               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 26932  005468  0E01               	movlw	1
 26933  00546A  ECCC  F049         	call	_wait_one_pulse
 26934                           
 26935                           ;keyboard.c: 71: if(note_off_was_sent == 0) {key_press_release_note_off();}
 26936  00546E  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 26937  005470  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 26938                           
 26939                           ;keyboard.c: 72: TIMER_OVERFLOWS = 0;
 26940  005474  0E00               	movlw	0
 26941  005476  6E54               	movwf	_TIMER_OVERFLOWS,c
 26942  005478                     l1346:
 26943                           
 26944                           ;keyboard.c: 73: }
 26945                           ;keyboard.c: 75: add_notes_to_arpeggio(temp_pitch);
 26946  005478  0100               	movlb	0	; () banked
 26947  00547A  517C               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 26948  00547C  ECC3  F03F         	call	_add_notes_to_arpeggio
 26949                           
 26950                           ;keyboard.c: 78: if(LATCH == 0) {latch_was_pressed = 0;}
 26951  005480  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 26952  005482  9A34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26953                           
 26954                           ;keyboard.c: 81: finish_arpeggio_setup();
 26955  005484  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 26956                           
 26957                           ;keyboard.c: 84: TMR0ON = 1;
 26958  005488  8ED5               	bsf	4053,7,c	;volatile
 26959  00548A                     l1345:
 26960                           
 26961                           ;keyboard.c: 85: }
 26962                           ;keyboard.c: 87: if((ON_OFF == 0) && (LATCH == 0)) {
 26963  00548A  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26964  00548C  0012               	return	
 26965  00548E  B035               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 26966  005490  0012               	return	
 26967                           
 26968                           ;keyboard.c: 90: TMR0ON = 0;
 26969  005492  9ED5               	bcf	4053,7,c	;volatile
 26970                           
 26971                           ;keyboard.c: 93: if(NUM_NOTES_PRESSED > 0){
 26972  005494  0100               	movlb	0	; () banked
 26973  005496  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 26974  005498  B4D8               	btfsc	status,2,c
 26975  00549A  D00A               	goto	l1350
 26976                           
 26977                           ; BSR set to: 0
 26978                           ;keyboard.c: 94: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 26979  00549C  0E00               	movlw	0
 26980  00549E  B034               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 26981  0054A0  0E01               	movlw	1
 26982  0054A2  ECCC  F049         	call	_wait_one_pulse
 26983                           
 26984                           ;keyboard.c: 95: if(note_off_was_sent == 0) {key_press_release_note_off();}
 26985  0054A6  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 26986  0054A8  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 26987                           
 26988                           ;keyboard.c: 96: TIMER_OVERFLOWS = 0;
 26989  0054AC  0E00               	movlw	0
 26990  0054AE  6E54               	movwf	_TIMER_OVERFLOWS,c
 26991  0054B0                     l1350:
 26992                           
 26993                           ;keyboard.c: 97: }
 26994                           ;keyboard.c: 99: delete_notes_from_arpeggio(temp_pitch);
 26995  0054B0  0100               	movlb	0	; () banked
 26996  0054B2  517C               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 26997  0054B4  EC40  F049         	call	_delete_notes_from_arpeggio
 26998                           
 26999                           ;keyboard.c: 101: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 27000  0054B8  C0E6  F078         	movff	_parallel,??_playThisNotePentatonic
 27001  0054BC  0100               	movlb	0	; () banked
 27002  0054BE  6B79               	clrf	(??_playThisNotePentatonic+1)& (0+255),b
 27003  0054C0  BF78               	btfsc	??_playThisNotePentatonic& (0+255),7,b
 27004  0054C2  0779               	decf	(??_playThisNotePentatonic+1)& (0+255),f,b
 27005  0054C4  517C               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 27006  0054C6  6F7A               	movwf	(??_playThisNotePentatonic+2)& (0+255),b
 27007  0054C8  6B7B               	clrf	(??_playThisNotePentatonic+3)& (0+255),b
 27008  0054CA  5178               	movf	??_playThisNotePentatonic& (0+255),w,b
 27009  0054CC  197A               	xorwf	(??_playThisNotePentatonic+2)& (0+255),w,b
 27010  0054CE  E106               	bnz	l18171
 27011  0054D0  5179               	movf	(??_playThisNotePentatonic+1)& (0+255),w,b
 27012  0054D2  197B               	xorwf	(??_playThisNotePentatonic+3)& (0+255),w,b
 27013  0054D4  A4D8               	btfss	status,2,c
 27014  0054D6  D002               	goto	l1352
 27015                           
 27016                           ; BSR set to: 0
 27017  0054D8  0E00               	movlw	0
 27018  0054DA  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 27019  0054DC                     l1352:
 27020  0054DC                     l18171:
 27021                           
 27022                           ; BSR set to: 0
 27023                           ;keyboard.c: 104: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 27024  0054DC  BC34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 27025                           
 27026                           ; BSR set to: 0
 27027  0054DE  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27028  0054E0  D001               	goto	l1353
 27029                           
 27030                           ; BSR set to: 0
 27031                           ;keyboard.c: 105: LATCH = 1;
 27032  0054E2  8035               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 27033  0054E4                     l1353:
 27034                           
 27035                           ; BSR set to: 0
 27036                           ;keyboard.c: 106: }
 27037                           ;keyboard.c: 109: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 27038  0054E4  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27039                           
 27040                           ; BSR set to: 0
 27041  0054E6  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27042  0054E8  D004               	goto	l1354
 27043                           
 27044                           ; BSR set to: 0
 27045                           ;keyboard.c: 110: NUM_NOTES_PRESSED = 0;
 27046  0054EA  0E00               	movlw	0
 27047  0054EC  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 27048                           
 27049                           ;keyboard.c: 111: ARRAY_INDEX = 0;
 27050  0054EE  0E00               	movlw	0
 27051  0054F0  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 27052  0054F2                     l1354:
 27053                           
 27054                           ; BSR set to: 0
 27055                           ;keyboard.c: 112: }
 27056                           ;keyboard.c: 115: finish_arpeggio_setup();
 27057                           
 27058                           ; BSR set to: 0
 27059  0054F2  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 27060                           
 27061                           ;keyboard.c: 118: TMR0ON = 1;
 27062  0054F6  8ED5               	bsf	4053,7,c	;volatile
 27063  0054F8  0012               	return	
 27064  0054FA                     __end_of_playThisNotePentatonic:
 27065                           	opt stack 0
 27066                           tblptru	equ	0xFF8
 27067                           tblptrh	equ	0xFF7
 27068                           tblptrl	equ	0xFF6
 27069                           tablat	equ	0xFF5
 27070                           prodh	equ	0xFF4
 27071                           prodl	equ	0xFF3
 27072                           intcon	equ	0xFF2
 27073                           intcon2	equ	0xFF1
 27074                           postinc0	equ	0xFEE
 27075                           wreg	equ	0xFE8
 27076                           indf1	equ	0xFE7
 27077                           postdec1	equ	0xFE5
 27078                           fsr1h	equ	0xFE2
 27079                           fsr1l	equ	0xFE1
 27080                           indf2	equ	0xFDF
 27081                           postinc2	equ	0xFDE
 27082                           plusw2	equ	0xFDB
 27083                           fsr2h	equ	0xFDA
 27084                           fsr2l	equ	0xFD9
 27085                           status	equ	0xFD8
 27086                           
 27087 ;; *************** function _keyboard_eight_note_efficient *****************
 27088 ;; Defined at:
 27089 ;;		line 1337 in file "keyboard.c"
 27090 ;; Parameters:    Size  Location     Type
 27091 ;;		None
 27092 ;; Auto vars:     Size  Location     Type
 27093 ;;  index           1   41[BANK0 ] unsigned char 
 27094 ;;  pitch           1   40[BANK0 ] unsigned char 
 27095 ;; Return value:  Size  Location     Type
 27096 ;;                  1    wreg      void 
 27097 ;; Registers used:
 27098 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27099 ;; Tracked objects:
 27100 ;;		On entry : 0/0
 27101 ;;		On exit  : 0/0
 27102 ;;		Unchanged: 0/0
 27103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27105 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27107 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27108 ;;Total ram usage:        2 bytes
 27109 ;; Hardware stack levels used:    1
 27110 ;; Hardware stack levels required when called:   12
 27111 ;; This function calls:
 27112 ;;		_playThisNote8
 27113 ;; This function is called by:
 27114 ;;		_processKeyboard
 27115 ;; This function uses a non-reentrant model
 27116 ;;
 27117                           
 27118                           	psect	text83
 27119  002EFA                     __ptext83:
 27120                           	opt stack 0
 27121  002EFA                     _keyboard_eight_note_efficient:
 27122                           	opt stack 16
 27123                           
 27124                           ;keyboard.c: 1339: unsigned char pitch;
 27125                           ;keyboard.c: 1340: unsigned char index;
 27126                           ;keyboard.c: 1343: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW1){
 27127                           
 27128                           ;incstack = 0
 27129  002EFA  0100               	movlb	0	; () banked
 27130  002EFC  B1D8               	btfsc	_button_state_now& (0+255),0,b
 27131                           
 27132                           ; BSR set to: 0
 27133  002EFE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27134  002F00  D00E               	goto	l1679
 27135                           
 27136                           ; BSR set to: 0
 27137  002F02  B1D0               	btfsc	_keyboard& (0+255),0,b
 27138  002F04  D00C               	goto	l1679
 27139                           
 27140                           ; BSR set to: 0
 27141                           ;keyboard.c: 1344: pitch = C;
 27142  002F06  0E00               	movlw	0
 27143  002F08  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27144                           
 27145                           ;keyboard.c: 1345: index = 0;
 27146  002F0A  0E00               	movlw	0
 27147  002F0C  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27148                           
 27149                           ; BSR set to: 0
 27150                           ;keyboard.c: 1346: ON_OFF = 1;
 27151  002F0E  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27152                           
 27153                           ; BSR set to: 0
 27154                           ;keyboard.c: 1347: playThisNote8(pitch, index);
 27155  002F10  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27156  002F14  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27157  002F16  EC6A  F015         	call	_playThisNote8
 27158                           
 27159                           ;keyboard.c: 1348: keyboard.SW1 = 1;
 27160  002F1A  0100               	movlb	0	; () banked
 27161  002F1C  81D0               	bsf	_keyboard& (0+255),0,b
 27162  002F1E                     l1679:
 27163                           
 27164                           ; BSR set to: 0
 27165                           ;keyboard.c: 1349: }
 27166                           ;keyboard.c: 1350: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW3){
 27167                           
 27168                           ; BSR set to: 0
 27169  002F1E  B5D8               	btfsc	_button_state_now& (0+255),2,b
 27170                           
 27171                           ; BSR set to: 0
 27172  002F20  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27173  002F22  D00E               	goto	l1680
 27174                           
 27175                           ; BSR set to: 0
 27176  002F24  B5D0               	btfsc	_keyboard& (0+255),2,b
 27177  002F26  D00C               	goto	l1680
 27178                           
 27179                           ; BSR set to: 0
 27180                           ;keyboard.c: 1351: pitch = D;
 27181  002F28  0E02               	movlw	2
 27182  002F2A  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27183                           
 27184                           ;keyboard.c: 1352: index = 1;
 27185  002F2C  0E01               	movlw	1
 27186  002F2E  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27187                           
 27188                           ; BSR set to: 0
 27189                           ;keyboard.c: 1353: ON_OFF = 1;
 27190  002F30  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27191                           
 27192                           ; BSR set to: 0
 27193                           ;keyboard.c: 1354: playThisNote8(pitch, index);
 27194  002F32  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27195  002F36  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27196  002F38  EC6A  F015         	call	_playThisNote8
 27197                           
 27198                           ;keyboard.c: 1355: keyboard.SW3 = 1;
 27199  002F3C  0100               	movlb	0	; () banked
 27200  002F3E  85D0               	bsf	_keyboard& (0+255),2,b
 27201  002F40                     l1680:
 27202                           
 27203                           ; BSR set to: 0
 27204                           ;keyboard.c: 1356: }
 27205                           ;keyboard.c: 1357: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW5){
 27206                           
 27207                           ; BSR set to: 0
 27208  002F40  B9D8               	btfsc	_button_state_now& (0+255),4,b
 27209                           
 27210                           ; BSR set to: 0
 27211  002F42  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27212  002F44  D00E               	goto	l1681
 27213                           
 27214                           ; BSR set to: 0
 27215  002F46  B9D0               	btfsc	_keyboard& (0+255),4,b
 27216  002F48  D00C               	goto	l1681
 27217                           
 27218                           ; BSR set to: 0
 27219                           ;keyboard.c: 1358: pitch = E;
 27220  002F4A  0E04               	movlw	4
 27221  002F4C  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27222                           
 27223                           ;keyboard.c: 1359: index = 2;
 27224  002F4E  0E02               	movlw	2
 27225  002F50  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27226                           
 27227                           ; BSR set to: 0
 27228                           ;keyboard.c: 1360: ON_OFF = 1;
 27229  002F52  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27230                           
 27231                           ; BSR set to: 0
 27232                           ;keyboard.c: 1361: playThisNote8(pitch, index);
 27233  002F54  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27234  002F58  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27235  002F5A  EC6A  F015         	call	_playThisNote8
 27236                           
 27237                           ;keyboard.c: 1362: keyboard.SW5 = 5;
 27238  002F5E  0100               	movlb	0	; () banked
 27239  002F60  89D0               	bsf	_keyboard& (0+255),4,b
 27240  002F62                     l1681:
 27241                           
 27242                           ; BSR set to: 0
 27243                           ;keyboard.c: 1363: }
 27244                           ;keyboard.c: 1364: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW6){
 27245                           
 27246                           ; BSR set to: 0
 27247  002F62  BBD8               	btfsc	_button_state_now& (0+255),5,b
 27248                           
 27249                           ; BSR set to: 0
 27250  002F64  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27251  002F66  D00E               	goto	l1682
 27252                           
 27253                           ; BSR set to: 0
 27254  002F68  BBD0               	btfsc	_keyboard& (0+255),5,b
 27255  002F6A  D00C               	goto	l1682
 27256                           
 27257                           ; BSR set to: 0
 27258                           ;keyboard.c: 1365: pitch = F;
 27259  002F6C  0E05               	movlw	5
 27260  002F6E  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27261                           
 27262                           ;keyboard.c: 1366: index = 3;
 27263  002F70  0E03               	movlw	3
 27264  002F72  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27265                           
 27266                           ; BSR set to: 0
 27267                           ;keyboard.c: 1367: ON_OFF = 1;
 27268  002F74  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27269                           
 27270                           ; BSR set to: 0
 27271                           ;keyboard.c: 1368: playThisNote8(pitch, index);
 27272  002F76  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27273  002F7A  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27274  002F7C  EC6A  F015         	call	_playThisNote8
 27275                           
 27276                           ;keyboard.c: 1369: keyboard.SW6 = 1;
 27277  002F80  0100               	movlb	0	; () banked
 27278  002F82  8BD0               	bsf	_keyboard& (0+255),5,b
 27279  002F84                     l1682:
 27280                           
 27281                           ; BSR set to: 0
 27282                           ;keyboard.c: 1370: }
 27283                           ;keyboard.c: 1371: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW8){
 27284                           
 27285                           ; BSR set to: 0
 27286  002F84  BFD8               	btfsc	_button_state_now& (0+255),7,b
 27287                           
 27288                           ; BSR set to: 0
 27289  002F86  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27290  002F88  D00E               	goto	l1683
 27291                           
 27292                           ; BSR set to: 0
 27293  002F8A  BFD0               	btfsc	_keyboard& (0+255),7,b
 27294  002F8C  D00C               	goto	l1683
 27295                           
 27296                           ; BSR set to: 0
 27297                           ;keyboard.c: 1372: pitch = G;
 27298  002F8E  0E07               	movlw	7
 27299  002F90  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27300                           
 27301                           ;keyboard.c: 1373: index = 4;
 27302  002F92  0E04               	movlw	4
 27303  002F94  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27304                           
 27305                           ; BSR set to: 0
 27306                           ;keyboard.c: 1374: ON_OFF = 1;
 27307  002F96  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27308                           
 27309                           ; BSR set to: 0
 27310                           ;keyboard.c: 1375: playThisNote8(pitch, index);
 27311  002F98  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27312  002F9C  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27313  002F9E  EC6A  F015         	call	_playThisNote8
 27314                           
 27315                           ;keyboard.c: 1376: keyboard.SW8 = 1;
 27316  002FA2  0100               	movlb	0	; () banked
 27317  002FA4  8FD0               	bsf	_keyboard& (0+255),7,b
 27318  002FA6                     l1683:
 27319                           
 27320                           ; BSR set to: 0
 27321                           ;keyboard.c: 1377: }
 27322                           ;keyboard.c: 1378: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW10){
 27323                           
 27324                           ; BSR set to: 0
 27325  002FA6  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 27326                           
 27327                           ; BSR set to: 0
 27328  002FA8  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27329  002FAA  D00E               	goto	l1684
 27330                           
 27331                           ; BSR set to: 0
 27332  002FAC  B3D1               	btfsc	(_keyboard+1)& (0+255),1,b
 27333  002FAE  D00C               	goto	l1684
 27334                           
 27335                           ; BSR set to: 0
 27336                           ;keyboard.c: 1379: pitch = A;
 27337  002FB0  0E09               	movlw	9
 27338  002FB2  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27339                           
 27340                           ;keyboard.c: 1380: index = 5;
 27341  002FB4  0E05               	movlw	5
 27342  002FB6  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27343                           
 27344                           ; BSR set to: 0
 27345                           ;keyboard.c: 1381: ON_OFF = 1;
 27346  002FB8  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27347                           
 27348                           ; BSR set to: 0
 27349                           ;keyboard.c: 1382: playThisNote8(pitch, index);
 27350  002FBA  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27351  002FBE  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27352  002FC0  EC6A  F015         	call	_playThisNote8
 27353                           
 27354                           ;keyboard.c: 1383: keyboard.SW10 = 1;
 27355  002FC4  0100               	movlb	0	; () banked
 27356  002FC6  83D1               	bsf	(_keyboard+1)& (0+255),1,b
 27357  002FC8                     l1684:
 27358                           
 27359                           ; BSR set to: 0
 27360                           ;keyboard.c: 1384: }
 27361                           ;keyboard.c: 1385: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW12){
 27362                           
 27363                           ; BSR set to: 0
 27364  002FC8  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 27365                           
 27366                           ; BSR set to: 0
 27367  002FCA  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27368  002FCC  D00E               	goto	l1685
 27369                           
 27370                           ; BSR set to: 0
 27371  002FCE  B7D1               	btfsc	(_keyboard+1)& (0+255),3,b
 27372  002FD0  D00C               	goto	l1685
 27373                           
 27374                           ; BSR set to: 0
 27375                           ;keyboard.c: 1386: pitch = B;
 27376  002FD2  0E0B               	movlw	11
 27377  002FD4  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27378                           
 27379                           ;keyboard.c: 1387: index = 6;
 27380  002FD6  0E06               	movlw	6
 27381  002FD8  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27382                           
 27383                           ; BSR set to: 0
 27384                           ;keyboard.c: 1388: ON_OFF = 1;
 27385  002FDA  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27386                           
 27387                           ; BSR set to: 0
 27388                           ;keyboard.c: 1389: playThisNote8(pitch, index);
 27389  002FDC  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27390  002FE0  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27391  002FE2  EC6A  F015         	call	_playThisNote8
 27392                           
 27393                           ;keyboard.c: 1390: keyboard.SW12 = 1;
 27394  002FE6  0100               	movlb	0	; () banked
 27395  002FE8  87D1               	bsf	(_keyboard+1)& (0+255),3,b
 27396  002FEA                     l1685:
 27397                           
 27398                           ; BSR set to: 0
 27399                           ;keyboard.c: 1391: }
 27400                           ;keyboard.c: 1392: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW13){
 27401                           
 27402                           ; BSR set to: 0
 27403  002FEA  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 27404                           
 27405                           ; BSR set to: 0
 27406  002FEC  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27407  002FEE  D00E               	goto	l1686
 27408                           
 27409                           ; BSR set to: 0
 27410  002FF0  B9D1               	btfsc	(_keyboard+1)& (0+255),4,b
 27411  002FF2  D00C               	goto	l1686
 27412                           
 27413                           ; BSR set to: 0
 27414                           ;keyboard.c: 1393: pitch = C2;
 27415  002FF4  0E0C               	movlw	12
 27416  002FF6  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27417                           
 27418                           ;keyboard.c: 1394: index = 7;
 27419  002FF8  0E07               	movlw	7
 27420  002FFA  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27421                           
 27422                           ; BSR set to: 0
 27423                           ;keyboard.c: 1395: ON_OFF = 1;
 27424  002FFC  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27425                           
 27426                           ; BSR set to: 0
 27427                           ;keyboard.c: 1396: playThisNote8(pitch, index);
 27428  002FFE  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27429  003002  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27430  003004  EC6A  F015         	call	_playThisNote8
 27431                           
 27432                           ;keyboard.c: 1397: keyboard.SW13 = 1;
 27433  003008  0100               	movlb	0	; () banked
 27434  00300A  89D1               	bsf	(_keyboard+1)& (0+255),4,b
 27435  00300C                     l1686:
 27436                           
 27437                           ; BSR set to: 0
 27438                           ;keyboard.c: 1398: }
 27439                           ;keyboard.c: 1399: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW15){
 27440                           
 27441                           ; BSR set to: 0
 27442  00300C  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 27443                           
 27444                           ; BSR set to: 0
 27445  00300E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27446  003010  D00E               	goto	l1687
 27447                           
 27448                           ; BSR set to: 0
 27449  003012  BDD1               	btfsc	(_keyboard+1)& (0+255),6,b
 27450  003014  D00C               	goto	l1687
 27451                           
 27452                           ; BSR set to: 0
 27453                           ;keyboard.c: 1400: pitch = D2;
 27454  003016  0E0E               	movlw	14
 27455  003018  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27456                           
 27457                           ;keyboard.c: 1401: index = 8;
 27458  00301A  0E08               	movlw	8
 27459  00301C  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27460                           
 27461                           ; BSR set to: 0
 27462                           ;keyboard.c: 1402: ON_OFF = 1;
 27463  00301E  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27464                           
 27465                           ; BSR set to: 0
 27466                           ;keyboard.c: 1403: playThisNote8(pitch, index);
 27467  003020  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27468  003024  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27469  003026  EC6A  F015         	call	_playThisNote8
 27470                           
 27471                           ;keyboard.c: 1404: keyboard.SW15 = 1;
 27472  00302A  0100               	movlb	0	; () banked
 27473  00302C  8DD1               	bsf	(_keyboard+1)& (0+255),6,b
 27474  00302E                     l1687:
 27475                           
 27476                           ; BSR set to: 0
 27477                           ;keyboard.c: 1405: }
 27478                           ;keyboard.c: 1406: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW17){
 27479                           
 27480                           ; BSR set to: 0
 27481  00302E  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 27482                           
 27483                           ; BSR set to: 0
 27484  003030  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27485  003032  D00E               	goto	l1688
 27486                           
 27487                           ; BSR set to: 0
 27488  003034  B1D2               	btfsc	(_keyboard+2)& (0+255),0,b
 27489  003036  D00C               	goto	l1688
 27490                           
 27491                           ; BSR set to: 0
 27492                           ;keyboard.c: 1407: pitch = E2;
 27493  003038  0E10               	movlw	16
 27494  00303A  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27495                           
 27496                           ;keyboard.c: 1408: index = 9;
 27497  00303C  0E09               	movlw	9
 27498  00303E  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27499                           
 27500                           ; BSR set to: 0
 27501                           ;keyboard.c: 1409: ON_OFF = 1;
 27502  003040  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27503                           
 27504                           ; BSR set to: 0
 27505                           ;keyboard.c: 1410: playThisNote8(pitch, index);
 27506  003042  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27507  003046  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27508  003048  EC6A  F015         	call	_playThisNote8
 27509                           
 27510                           ;keyboard.c: 1411: keyboard.SW17 = 1;
 27511  00304C  0100               	movlb	0	; () banked
 27512  00304E  81D2               	bsf	(_keyboard+2)& (0+255),0,b
 27513  003050                     l1688:
 27514                           
 27515                           ; BSR set to: 0
 27516                           ;keyboard.c: 1412: }
 27517                           ;keyboard.c: 1413: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW18){
 27518                           
 27519                           ; BSR set to: 0
 27520  003050  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 27521                           
 27522                           ; BSR set to: 0
 27523  003052  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27524  003054  D00E               	goto	l1689
 27525                           
 27526                           ; BSR set to: 0
 27527  003056  B3D2               	btfsc	(_keyboard+2)& (0+255),1,b
 27528  003058  D00C               	goto	l1689
 27529                           
 27530                           ; BSR set to: 0
 27531                           ;keyboard.c: 1414: pitch = F2;
 27532  00305A  0E11               	movlw	17
 27533  00305C  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27534                           
 27535                           ;keyboard.c: 1415: index = 10;
 27536  00305E  0E0A               	movlw	10
 27537  003060  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27538                           
 27539                           ; BSR set to: 0
 27540                           ;keyboard.c: 1416: ON_OFF = 1;
 27541  003062  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27542                           
 27543                           ; BSR set to: 0
 27544                           ;keyboard.c: 1417: playThisNote8(pitch, index);
 27545  003064  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27546  003068  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27547  00306A  EC6A  F015         	call	_playThisNote8
 27548                           
 27549                           ;keyboard.c: 1418: keyboard.SW18 = 1;
 27550  00306E  0100               	movlb	0	; () banked
 27551  003070  83D2               	bsf	(_keyboard+2)& (0+255),1,b
 27552  003072                     l1689:
 27553                           
 27554                           ; BSR set to: 0
 27555                           ;keyboard.c: 1419: }
 27556                           ;keyboard.c: 1420: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW20){
 27557                           
 27558                           ; BSR set to: 0
 27559  003072  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 27560                           
 27561                           ; BSR set to: 0
 27562  003074  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27563  003076  D00E               	goto	l1690
 27564                           
 27565                           ; BSR set to: 0
 27566  003078  B7D2               	btfsc	(_keyboard+2)& (0+255),3,b
 27567  00307A  D00C               	goto	l1690
 27568                           
 27569                           ; BSR set to: 0
 27570                           ;keyboard.c: 1421: pitch = G2;
 27571  00307C  0E13               	movlw	19
 27572  00307E  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27573                           
 27574                           ;keyboard.c: 1422: index = 11;
 27575  003080  0E0B               	movlw	11
 27576  003082  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27577                           
 27578                           ; BSR set to: 0
 27579                           ;keyboard.c: 1423: ON_OFF = 1;
 27580  003084  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27581                           
 27582                           ; BSR set to: 0
 27583                           ;keyboard.c: 1424: playThisNote8(pitch, index);
 27584  003086  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27585  00308A  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27586  00308C  EC6A  F015         	call	_playThisNote8
 27587                           
 27588                           ;keyboard.c: 1425: keyboard.SW20 = 1;
 27589  003090  0100               	movlb	0	; () banked
 27590  003092  87D2               	bsf	(_keyboard+2)& (0+255),3,b
 27591  003094                     l1690:
 27592                           
 27593                           ; BSR set to: 0
 27594                           ;keyboard.c: 1426: }
 27595                           ;keyboard.c: 1427: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW22){
 27596                           
 27597                           ; BSR set to: 0
 27598  003094  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 27599                           
 27600                           ; BSR set to: 0
 27601  003096  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27602  003098  D00E               	goto	l1691
 27603                           
 27604                           ; BSR set to: 0
 27605  00309A  BBD2               	btfsc	(_keyboard+2)& (0+255),5,b
 27606  00309C  D00C               	goto	l1691
 27607                           
 27608                           ; BSR set to: 0
 27609                           ;keyboard.c: 1428: pitch = A2;
 27610  00309E  0E15               	movlw	21
 27611  0030A0  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27612                           
 27613                           ;keyboard.c: 1429: index = 12;
 27614  0030A2  0E0C               	movlw	12
 27615  0030A4  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27616                           
 27617                           ; BSR set to: 0
 27618                           ;keyboard.c: 1430: ON_OFF = 1;
 27619  0030A6  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27620                           
 27621                           ; BSR set to: 0
 27622                           ;keyboard.c: 1431: playThisNote8(pitch, index);
 27623  0030A8  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27624  0030AC  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27625  0030AE  EC6A  F015         	call	_playThisNote8
 27626                           
 27627                           ;keyboard.c: 1432: keyboard.SW22 = 1;
 27628  0030B2  0100               	movlb	0	; () banked
 27629  0030B4  8BD2               	bsf	(_keyboard+2)& (0+255),5,b
 27630  0030B6                     l1691:
 27631                           
 27632                           ; BSR set to: 0
 27633                           ;keyboard.c: 1433: }
 27634                           ;keyboard.c: 1434: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW24){
 27635                           
 27636                           ; BSR set to: 0
 27637  0030B6  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 27638                           
 27639                           ; BSR set to: 0
 27640  0030B8  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27641  0030BA  D00E               	goto	l1692
 27642                           
 27643                           ; BSR set to: 0
 27644  0030BC  BFD2               	btfsc	(_keyboard+2)& (0+255),7,b
 27645  0030BE  D00C               	goto	l1692
 27646                           
 27647                           ; BSR set to: 0
 27648                           ;keyboard.c: 1435: pitch = B2;
 27649  0030C0  0E17               	movlw	23
 27650  0030C2  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27651                           
 27652                           ;keyboard.c: 1436: index = 13;
 27653  0030C4  0E0D               	movlw	13
 27654  0030C6  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27655                           
 27656                           ; BSR set to: 0
 27657                           ;keyboard.c: 1437: ON_OFF = 1;
 27658  0030C8  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27659                           
 27660                           ; BSR set to: 0
 27661                           ;keyboard.c: 1438: playThisNote8(pitch, index);
 27662  0030CA  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27663  0030CE  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27664  0030D0  EC6A  F015         	call	_playThisNote8
 27665                           
 27666                           ;keyboard.c: 1439: keyboard.SW24 = 1;
 27667  0030D4  0100               	movlb	0	; () banked
 27668  0030D6  8FD2               	bsf	(_keyboard+2)& (0+255),7,b
 27669  0030D8                     l1692:
 27670                           
 27671                           ; BSR set to: 0
 27672                           ;keyboard.c: 1440: }
 27673                           ;keyboard.c: 1441: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW25){
 27674                           
 27675                           ; BSR set to: 0
 27676  0030D8  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 27677                           
 27678                           ; BSR set to: 0
 27679  0030DA  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 27680  0030DC  D00E               	goto	l1693
 27681                           
 27682                           ; BSR set to: 0
 27683  0030DE  B1D3               	btfsc	(_keyboard+3)& (0+255),0,b
 27684  0030E0  D00C               	goto	l1693
 27685                           
 27686                           ; BSR set to: 0
 27687                           ;keyboard.c: 1442: pitch = C3;
 27688  0030E2  0E18               	movlw	24
 27689  0030E4  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27690                           
 27691                           ;keyboard.c: 1443: index = 14;
 27692  0030E6  0E0E               	movlw	14
 27693  0030E8  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27694                           
 27695                           ; BSR set to: 0
 27696                           ;keyboard.c: 1444: ON_OFF = 1;
 27697  0030EA  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27698                           
 27699                           ; BSR set to: 0
 27700                           ;keyboard.c: 1445: playThisNote8(pitch, index);
 27701  0030EC  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27702  0030F0  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27703  0030F2  EC6A  F015         	call	_playThisNote8
 27704                           
 27705                           ;keyboard.c: 1446: keyboard.SW25 = 1;
 27706  0030F6  0100               	movlb	0	; () banked
 27707  0030F8  81D3               	bsf	(_keyboard+3)& (0+255),0,b
 27708  0030FA                     l1693:
 27709                           
 27710                           ; BSR set to: 0
 27711                           ;keyboard.c: 1447: }
 27712                           ;keyboard.c: 1450: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x00000
      +                          001) == 0) && keyboard.SW1) {
 27713                           
 27714                           ; BSR set to: 0
 27715  0030FA  B1D4               	btfsc	_button_state_last& (0+255),0,b
 27716                           
 27717                           ; BSR set to: 0
 27718  0030FC  B1D8               	btfsc	_button_state_now& (0+255),0,b
 27719  0030FE  D00E               	goto	l1694
 27720                           
 27721                           ; BSR set to: 0
 27722  003100  A1D0               	btfss	_keyboard& (0+255),0,b
 27723  003102  D00C               	goto	l1694
 27724                           
 27725                           ; BSR set to: 0
 27726                           ;keyboard.c: 1451: pitch = C;
 27727  003104  0E00               	movlw	0
 27728  003106  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27729                           
 27730                           ;keyboard.c: 1452: index = 0;
 27731  003108  0E00               	movlw	0
 27732  00310A  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27733                           
 27734                           ; BSR set to: 0
 27735                           ;keyboard.c: 1453: ON_OFF = 0;
 27736  00310C  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27737                           
 27738                           ; BSR set to: 0
 27739                           ;keyboard.c: 1454: playThisNote8(pitch, index);
 27740  00310E  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27741  003112  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27742  003114  EC6A  F015         	call	_playThisNote8
 27743                           
 27744                           ;keyboard.c: 1455: keyboard.SW1 = 0;
 27745  003118  0100               	movlb	0	; () banked
 27746  00311A  91D0               	bcf	_keyboard& (0+255),0,b
 27747  00311C                     l1694:
 27748                           
 27749                           ; BSR set to: 0
 27750                           ;keyboard.c: 1456: }
 27751                           ;keyboard.c: 1457: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x00000
      +                          004) == 0) && keyboard.SW3) {
 27752                           
 27753                           ; BSR set to: 0
 27754  00311C  B5D4               	btfsc	_button_state_last& (0+255),2,b
 27755                           
 27756                           ; BSR set to: 0
 27757  00311E  B5D8               	btfsc	_button_state_now& (0+255),2,b
 27758  003120  D00E               	goto	l1695
 27759                           
 27760                           ; BSR set to: 0
 27761  003122  A5D0               	btfss	_keyboard& (0+255),2,b
 27762  003124  D00C               	goto	l1695
 27763                           
 27764                           ; BSR set to: 0
 27765                           ;keyboard.c: 1458: pitch = D;
 27766  003126  0E02               	movlw	2
 27767  003128  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27768                           
 27769                           ;keyboard.c: 1459: index = 1;
 27770  00312A  0E01               	movlw	1
 27771  00312C  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27772                           
 27773                           ; BSR set to: 0
 27774                           ;keyboard.c: 1460: ON_OFF = 0;
 27775  00312E  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27776                           
 27777                           ; BSR set to: 0
 27778                           ;keyboard.c: 1461: playThisNote8(pitch, index);
 27779  003130  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27780  003134  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27781  003136  EC6A  F015         	call	_playThisNote8
 27782                           
 27783                           ;keyboard.c: 1462: keyboard.SW3 = 0;
 27784  00313A  0100               	movlb	0	; () banked
 27785  00313C  95D0               	bcf	_keyboard& (0+255),2,b
 27786  00313E                     l1695:
 27787                           
 27788                           ; BSR set to: 0
 27789                           ;keyboard.c: 1463: }
 27790                           ;keyboard.c: 1464: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x00000
      +                          010) == 0) && keyboard.SW5) {
 27791                           
 27792                           ; BSR set to: 0
 27793  00313E  B9D4               	btfsc	_button_state_last& (0+255),4,b
 27794                           
 27795                           ; BSR set to: 0
 27796  003140  B9D8               	btfsc	_button_state_now& (0+255),4,b
 27797  003142  D00E               	goto	l1696
 27798                           
 27799                           ; BSR set to: 0
 27800  003144  A9D0               	btfss	_keyboard& (0+255),4,b
 27801  003146  D00C               	goto	l1696
 27802                           
 27803                           ; BSR set to: 0
 27804                           ;keyboard.c: 1465: pitch = E;
 27805  003148  0E04               	movlw	4
 27806  00314A  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27807                           
 27808                           ;keyboard.c: 1466: index = 2;
 27809  00314C  0E02               	movlw	2
 27810  00314E  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27811                           
 27812                           ; BSR set to: 0
 27813                           ;keyboard.c: 1467: ON_OFF = 0;
 27814  003150  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27815                           
 27816                           ; BSR set to: 0
 27817                           ;keyboard.c: 1468: playThisNote8(pitch, index);
 27818  003152  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27819  003156  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27820  003158  EC6A  F015         	call	_playThisNote8
 27821                           
 27822                           ;keyboard.c: 1469: keyboard.SW5 = 0;
 27823  00315C  0100               	movlb	0	; () banked
 27824  00315E  99D0               	bcf	_keyboard& (0+255),4,b
 27825  003160                     l1696:
 27826                           
 27827                           ; BSR set to: 0
 27828                           ;keyboard.c: 1470: }
 27829                           ;keyboard.c: 1471: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x00000
      +                          020) == 0) && keyboard.SW6) {
 27830                           
 27831                           ; BSR set to: 0
 27832  003160  BBD4               	btfsc	_button_state_last& (0+255),5,b
 27833                           
 27834                           ; BSR set to: 0
 27835  003162  BBD8               	btfsc	_button_state_now& (0+255),5,b
 27836  003164  D00E               	goto	l1697
 27837                           
 27838                           ; BSR set to: 0
 27839  003166  ABD0               	btfss	_keyboard& (0+255),5,b
 27840  003168  D00C               	goto	l1697
 27841                           
 27842                           ; BSR set to: 0
 27843                           ;keyboard.c: 1472: pitch = F;
 27844  00316A  0E05               	movlw	5
 27845  00316C  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27846                           
 27847                           ;keyboard.c: 1473: index = 3;
 27848  00316E  0E03               	movlw	3
 27849  003170  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27850                           
 27851                           ; BSR set to: 0
 27852                           ;keyboard.c: 1474: ON_OFF = 0;
 27853  003172  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27854                           
 27855                           ; BSR set to: 0
 27856                           ;keyboard.c: 1475: playThisNote8(pitch, index);
 27857  003174  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27858  003178  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27859  00317A  EC6A  F015         	call	_playThisNote8
 27860                           
 27861                           ;keyboard.c: 1476: keyboard.SW6 = 0;
 27862  00317E  0100               	movlb	0	; () banked
 27863  003180  9BD0               	bcf	_keyboard& (0+255),5,b
 27864  003182                     l1697:
 27865                           
 27866                           ; BSR set to: 0
 27867                           ;keyboard.c: 1477: }
 27868                           ;keyboard.c: 1478: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x00000
      +                          080) == 0) && keyboard.SW8) {
 27869                           
 27870                           ; BSR set to: 0
 27871  003182  BFD4               	btfsc	_button_state_last& (0+255),7,b
 27872                           
 27873                           ; BSR set to: 0
 27874  003184  BFD8               	btfsc	_button_state_now& (0+255),7,b
 27875  003186  D00E               	goto	l1698
 27876                           
 27877                           ; BSR set to: 0
 27878  003188  AFD0               	btfss	_keyboard& (0+255),7,b
 27879  00318A  D00C               	goto	l1698
 27880                           
 27881                           ; BSR set to: 0
 27882                           ;keyboard.c: 1479: pitch = G;
 27883  00318C  0E07               	movlw	7
 27884  00318E  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27885                           
 27886                           ;keyboard.c: 1480: index = 4;
 27887  003190  0E04               	movlw	4
 27888  003192  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27889                           
 27890                           ; BSR set to: 0
 27891                           ;keyboard.c: 1481: ON_OFF = 0;
 27892  003194  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27893                           
 27894                           ; BSR set to: 0
 27895                           ;keyboard.c: 1482: playThisNote8(pitch, index);
 27896  003196  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27897  00319A  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27898  00319C  EC6A  F015         	call	_playThisNote8
 27899                           
 27900                           ;keyboard.c: 1483: keyboard.SW8 = 0;
 27901  0031A0  0100               	movlb	0	; () banked
 27902  0031A2  9FD0               	bcf	_keyboard& (0+255),7,b
 27903  0031A4                     l1698:
 27904                           
 27905                           ; BSR set to: 0
 27906                           ;keyboard.c: 1484: }
 27907                           ;keyboard.c: 1485: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x00000
      +                          200) == 0) && keyboard.SW10) {
 27908                           
 27909                           ; BSR set to: 0
 27910  0031A4  B3D5               	btfsc	(_button_state_last+1)& (0+255),1,b
 27911                           
 27912                           ; BSR set to: 0
 27913  0031A6  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 27914  0031A8  D00E               	goto	l1699
 27915                           
 27916                           ; BSR set to: 0
 27917  0031AA  A3D1               	btfss	(_keyboard+1)& (0+255),1,b
 27918  0031AC  D00C               	goto	l1699
 27919                           
 27920                           ; BSR set to: 0
 27921                           ;keyboard.c: 1486: pitch = A;
 27922  0031AE  0E09               	movlw	9
 27923  0031B0  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27924                           
 27925                           ;keyboard.c: 1487: index = 5;
 27926  0031B2  0E05               	movlw	5
 27927  0031B4  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27928                           
 27929                           ; BSR set to: 0
 27930                           ;keyboard.c: 1488: ON_OFF = 0;
 27931  0031B6  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27932                           
 27933                           ; BSR set to: 0
 27934                           ;keyboard.c: 1489: playThisNote8(pitch, index);
 27935  0031B8  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27936  0031BC  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27937  0031BE  EC6A  F015         	call	_playThisNote8
 27938                           
 27939                           ;keyboard.c: 1490: keyboard.SW10 = 10;
 27940  0031C2  0100               	movlb	0	; () banked
 27941  0031C4  93D1               	bcf	(_keyboard+1)& (0+255),1,b
 27942  0031C6                     l1699:
 27943                           
 27944                           ; BSR set to: 0
 27945                           ;keyboard.c: 1491: }
 27946                           ;keyboard.c: 1492: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x00000
      +                          800) == 0) && keyboard.SW12) {
 27947                           
 27948                           ; BSR set to: 0
 27949  0031C6  B7D5               	btfsc	(_button_state_last+1)& (0+255),3,b
 27950                           
 27951                           ; BSR set to: 0
 27952  0031C8  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 27953  0031CA  D00E               	goto	l1700
 27954                           
 27955                           ; BSR set to: 0
 27956  0031CC  A7D1               	btfss	(_keyboard+1)& (0+255),3,b
 27957  0031CE  D00C               	goto	l1700
 27958                           
 27959                           ; BSR set to: 0
 27960                           ;keyboard.c: 1493: pitch = B;
 27961  0031D0  0E0B               	movlw	11
 27962  0031D2  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 27963                           
 27964                           ;keyboard.c: 1494: index = 6;
 27965  0031D4  0E06               	movlw	6
 27966  0031D6  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 27967                           
 27968                           ; BSR set to: 0
 27969                           ;keyboard.c: 1495: ON_OFF = 0;
 27970  0031D8  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27971                           
 27972                           ; BSR set to: 0
 27973                           ;keyboard.c: 1496: playThisNote8(pitch, index);
 27974  0031DA  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 27975  0031DE  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 27976  0031E0  EC6A  F015         	call	_playThisNote8
 27977                           
 27978                           ;keyboard.c: 1497: keyboard.SW12 = 0;
 27979  0031E4  0100               	movlb	0	; () banked
 27980  0031E6  97D1               	bcf	(_keyboard+1)& (0+255),3,b
 27981  0031E8                     l1700:
 27982                           
 27983                           ; BSR set to: 0
 27984                           ;keyboard.c: 1498: }
 27985                           ;keyboard.c: 1499: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x00001
      +                          000) == 0) && keyboard.SW13) {
 27986                           
 27987                           ; BSR set to: 0
 27988  0031E8  B9D5               	btfsc	(_button_state_last+1)& (0+255),4,b
 27989                           
 27990                           ; BSR set to: 0
 27991  0031EA  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 27992  0031EC  D00E               	goto	l1701
 27993                           
 27994                           ; BSR set to: 0
 27995  0031EE  A9D1               	btfss	(_keyboard+1)& (0+255),4,b
 27996  0031F0  D00C               	goto	l1701
 27997                           
 27998                           ; BSR set to: 0
 27999                           ;keyboard.c: 1500: pitch = C2;
 28000  0031F2  0E0C               	movlw	12
 28001  0031F4  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28002                           
 28003                           ;keyboard.c: 1501: index = 7;
 28004  0031F6  0E07               	movlw	7
 28005  0031F8  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28006                           
 28007                           ; BSR set to: 0
 28008                           ;keyboard.c: 1502: ON_OFF = 0;
 28009  0031FA  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28010                           
 28011                           ; BSR set to: 0
 28012                           ;keyboard.c: 1503: playThisNote8(pitch, index);
 28013  0031FC  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28014  003200  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28015  003202  EC6A  F015         	call	_playThisNote8
 28016                           
 28017                           ;keyboard.c: 1504: keyboard.SW13 = 0;
 28018  003206  0100               	movlb	0	; () banked
 28019  003208  99D1               	bcf	(_keyboard+1)& (0+255),4,b
 28020  00320A                     l1701:
 28021                           
 28022                           ; BSR set to: 0
 28023                           ;keyboard.c: 1505: }
 28024                           ;keyboard.c: 1506: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x00004
      +                          000) == 0) && keyboard.SW15) {
 28025                           
 28026                           ; BSR set to: 0
 28027  00320A  BDD5               	btfsc	(_button_state_last+1)& (0+255),6,b
 28028                           
 28029                           ; BSR set to: 0
 28030  00320C  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 28031  00320E  D00E               	goto	l1702
 28032                           
 28033                           ; BSR set to: 0
 28034  003210  ADD1               	btfss	(_keyboard+1)& (0+255),6,b
 28035  003212  D00C               	goto	l1702
 28036                           
 28037                           ; BSR set to: 0
 28038                           ;keyboard.c: 1507: pitch = D2;
 28039  003214  0E0E               	movlw	14
 28040  003216  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28041                           
 28042                           ;keyboard.c: 1508: index = 8;
 28043  003218  0E08               	movlw	8
 28044  00321A  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28045                           
 28046                           ; BSR set to: 0
 28047                           ;keyboard.c: 1509: ON_OFF = 0;
 28048  00321C  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28049                           
 28050                           ; BSR set to: 0
 28051                           ;keyboard.c: 1510: playThisNote8(pitch, index);
 28052  00321E  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28053  003222  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28054  003224  EC6A  F015         	call	_playThisNote8
 28055                           
 28056                           ;keyboard.c: 1511: keyboard.SW15 = 0;
 28057  003228  0100               	movlb	0	; () banked
 28058  00322A  9DD1               	bcf	(_keyboard+1)& (0+255),6,b
 28059  00322C                     l1702:
 28060                           
 28061                           ; BSR set to: 0
 28062                           ;keyboard.c: 1512: }
 28063                           ;keyboard.c: 1513: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x00010
      +                          000) == 0) && keyboard.SW17) {
 28064                           
 28065                           ; BSR set to: 0
 28066  00322C  B1D6               	btfsc	(_button_state_last+2)& (0+255),0,b
 28067                           
 28068                           ; BSR set to: 0
 28069  00322E  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 28070  003230  D00E               	goto	l1703
 28071                           
 28072                           ; BSR set to: 0
 28073  003232  A1D2               	btfss	(_keyboard+2)& (0+255),0,b
 28074  003234  D00C               	goto	l1703
 28075                           
 28076                           ; BSR set to: 0
 28077                           ;keyboard.c: 1514: pitch = E2;
 28078  003236  0E10               	movlw	16
 28079  003238  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28080                           
 28081                           ;keyboard.c: 1515: index = 9;
 28082  00323A  0E09               	movlw	9
 28083  00323C  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28084                           
 28085                           ; BSR set to: 0
 28086                           ;keyboard.c: 1516: ON_OFF = 0;
 28087  00323E  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28088                           
 28089                           ; BSR set to: 0
 28090                           ;keyboard.c: 1517: playThisNote8(pitch, index);
 28091  003240  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28092  003244  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28093  003246  EC6A  F015         	call	_playThisNote8
 28094                           
 28095                           ;keyboard.c: 1518: keyboard.SW17 = 0;
 28096  00324A  0100               	movlb	0	; () banked
 28097  00324C  91D2               	bcf	(_keyboard+2)& (0+255),0,b
 28098  00324E                     l1703:
 28099                           
 28100                           ; BSR set to: 0
 28101                           ;keyboard.c: 1519: }
 28102                           ;keyboard.c: 1520: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x00020
      +                          000) == 0) && keyboard.SW18) {
 28103                           
 28104                           ; BSR set to: 0
 28105  00324E  B3D6               	btfsc	(_button_state_last+2)& (0+255),1,b
 28106                           
 28107                           ; BSR set to: 0
 28108  003250  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 28109  003252  D00E               	goto	l1704
 28110                           
 28111                           ; BSR set to: 0
 28112  003254  A3D2               	btfss	(_keyboard+2)& (0+255),1,b
 28113  003256  D00C               	goto	l1704
 28114                           
 28115                           ; BSR set to: 0
 28116                           ;keyboard.c: 1521: pitch = F2;
 28117  003258  0E11               	movlw	17
 28118  00325A  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28119                           
 28120                           ;keyboard.c: 1522: index = 10;
 28121  00325C  0E0A               	movlw	10
 28122  00325E  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28123                           
 28124                           ; BSR set to: 0
 28125                           ;keyboard.c: 1523: ON_OFF = 0;
 28126  003260  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28127                           
 28128                           ; BSR set to: 0
 28129                           ;keyboard.c: 1524: playThisNote8(pitch, index);
 28130  003262  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28131  003266  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28132  003268  EC6A  F015         	call	_playThisNote8
 28133                           
 28134                           ;keyboard.c: 1525: keyboard.SW18 = 0;
 28135  00326C  0100               	movlb	0	; () banked
 28136  00326E  93D2               	bcf	(_keyboard+2)& (0+255),1,b
 28137  003270                     l1704:
 28138                           
 28139                           ; BSR set to: 0
 28140                           ;keyboard.c: 1526: }
 28141                           ;keyboard.c: 1527: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x00080
      +                          000) == 0) && keyboard.SW20) {
 28142                           
 28143                           ; BSR set to: 0
 28144  003270  B7D6               	btfsc	(_button_state_last+2)& (0+255),3,b
 28145                           
 28146                           ; BSR set to: 0
 28147  003272  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 28148  003274  D00E               	goto	l1705
 28149                           
 28150                           ; BSR set to: 0
 28151  003276  A7D2               	btfss	(_keyboard+2)& (0+255),3,b
 28152  003278  D00C               	goto	l1705
 28153                           
 28154                           ; BSR set to: 0
 28155                           ;keyboard.c: 1528: pitch = G2;
 28156  00327A  0E13               	movlw	19
 28157  00327C  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28158                           
 28159                           ;keyboard.c: 1529: index = 11;
 28160  00327E  0E0B               	movlw	11
 28161  003280  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28162                           
 28163                           ; BSR set to: 0
 28164                           ;keyboard.c: 1530: ON_OFF = 0;
 28165  003282  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28166                           
 28167                           ; BSR set to: 0
 28168                           ;keyboard.c: 1531: playThisNote8(pitch, index);
 28169  003284  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28170  003288  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28171  00328A  EC6A  F015         	call	_playThisNote8
 28172                           
 28173                           ;keyboard.c: 1532: keyboard.SW20 = 0;
 28174  00328E  0100               	movlb	0	; () banked
 28175  003290  97D2               	bcf	(_keyboard+2)& (0+255),3,b
 28176  003292                     l1705:
 28177                           
 28178                           ; BSR set to: 0
 28179                           ;keyboard.c: 1533: }
 28180                           ;keyboard.c: 1534: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x00200
      +                          000) == 0) && keyboard.SW22) {
 28181                           
 28182                           ; BSR set to: 0
 28183  003292  BBD6               	btfsc	(_button_state_last+2)& (0+255),5,b
 28184                           
 28185                           ; BSR set to: 0
 28186  003294  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 28187  003296  D00E               	goto	l1706
 28188                           
 28189                           ; BSR set to: 0
 28190  003298  ABD2               	btfss	(_keyboard+2)& (0+255),5,b
 28191  00329A  D00C               	goto	l1706
 28192                           
 28193                           ; BSR set to: 0
 28194                           ;keyboard.c: 1535: pitch = A2;
 28195  00329C  0E15               	movlw	21
 28196  00329E  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28197                           
 28198                           ;keyboard.c: 1536: index = 12;
 28199  0032A0  0E0C               	movlw	12
 28200  0032A2  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28201                           
 28202                           ; BSR set to: 0
 28203                           ;keyboard.c: 1537: ON_OFF = 0;
 28204  0032A4  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28205                           
 28206                           ; BSR set to: 0
 28207                           ;keyboard.c: 1538: playThisNote8(pitch, index);
 28208  0032A6  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28209  0032AA  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28210  0032AC  EC6A  F015         	call	_playThisNote8
 28211                           
 28212                           ;keyboard.c: 1539: keyboard.SW22 = 0;
 28213  0032B0  0100               	movlb	0	; () banked
 28214  0032B2  9BD2               	bcf	(_keyboard+2)& (0+255),5,b
 28215  0032B4                     l1706:
 28216                           
 28217                           ; BSR set to: 0
 28218                           ;keyboard.c: 1540: }
 28219                           ;keyboard.c: 1541: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x00800
      +                          000) == 0) && keyboard.SW24) {
 28220                           
 28221                           ; BSR set to: 0
 28222  0032B4  BFD6               	btfsc	(_button_state_last+2)& (0+255),7,b
 28223                           
 28224                           ; BSR set to: 0
 28225  0032B6  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 28226  0032B8  D00E               	goto	l1707
 28227                           
 28228                           ; BSR set to: 0
 28229  0032BA  AFD2               	btfss	(_keyboard+2)& (0+255),7,b
 28230  0032BC  D00C               	goto	l1707
 28231                           
 28232                           ; BSR set to: 0
 28233                           ;keyboard.c: 1542: pitch = B2;
 28234  0032BE  0E17               	movlw	23
 28235  0032C0  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28236                           
 28237                           ;keyboard.c: 1543: index = 13;
 28238  0032C2  0E0D               	movlw	13
 28239  0032C4  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28240                           
 28241                           ; BSR set to: 0
 28242                           ;keyboard.c: 1544: ON_OFF = 0;
 28243  0032C6  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28244                           
 28245                           ; BSR set to: 0
 28246                           ;keyboard.c: 1545: playThisNote8(pitch, index);
 28247  0032C8  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28248  0032CC  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28249  0032CE  EC6A  F015         	call	_playThisNote8
 28250                           
 28251                           ;keyboard.c: 1546: keyboard.SW24 = 0;
 28252  0032D2  0100               	movlb	0	; () banked
 28253  0032D4  9FD2               	bcf	(_keyboard+2)& (0+255),7,b
 28254  0032D6                     l1707:
 28255                           
 28256                           ; BSR set to: 0
 28257                           ;keyboard.c: 1547: }
 28258                           ;keyboard.c: 1548: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x01000
      +                          000) == 0) && keyboard.SW25) {
 28259                           
 28260                           ; BSR set to: 0
 28261  0032D6  A1D7               	btfss	(_button_state_last+3)& (0+255),0,b
 28262  0032D8  0012               	return	
 28263                           
 28264                           ; BSR set to: 0
 28265  0032DA  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 28266  0032DC  0012               	return	
 28267                           
 28268                           ; BSR set to: 0
 28269  0032DE  A1D3               	btfss	(_keyboard+3)& (0+255),0,b
 28270  0032E0  0012               	return	
 28271                           
 28272                           ; BSR set to: 0
 28273                           ;keyboard.c: 1549: pitch = C;
 28274  0032E2  0E00               	movlw	0
 28275  0032E4  6F88               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 28276                           
 28277                           ;keyboard.c: 1550: index = 14;
 28278  0032E6  0E0E               	movlw	14
 28279  0032E8  6F89               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 28280                           
 28281                           ; BSR set to: 0
 28282                           ;keyboard.c: 1551: ON_OFF = 0;
 28283  0032EA  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28284                           
 28285                           ; BSR set to: 0
 28286                           ;keyboard.c: 1552: playThisNote8(pitch, index);
 28287  0032EC  C089  F07F         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 28288  0032F0  5188               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 28289  0032F2  EC6A  F015         	call	_playThisNote8
 28290                           
 28291                           ;keyboard.c: 1553: keyboard.SW25 = 0;
 28292  0032F6  0100               	movlb	0	; () banked
 28293  0032F8  91D3               	bcf	(_keyboard+3)& (0+255),0,b
 28294  0032FA  0012               	return	
 28295  0032FC                     __end_of_keyboard_eight_note_efficient:
 28296                           	opt stack 0
 28297                           tblptru	equ	0xFF8
 28298                           tblptrh	equ	0xFF7
 28299                           tblptrl	equ	0xFF6
 28300                           tablat	equ	0xFF5
 28301                           prodh	equ	0xFF4
 28302                           prodl	equ	0xFF3
 28303                           intcon	equ	0xFF2
 28304                           intcon2	equ	0xFF1
 28305                           postinc0	equ	0xFEE
 28306                           wreg	equ	0xFE8
 28307                           indf1	equ	0xFE7
 28308                           postdec1	equ	0xFE5
 28309                           fsr1h	equ	0xFE2
 28310                           fsr1l	equ	0xFE1
 28311                           indf2	equ	0xFDF
 28312                           postinc2	equ	0xFDE
 28313                           plusw2	equ	0xFDB
 28314                           fsr2h	equ	0xFDA
 28315                           fsr2l	equ	0xFD9
 28316                           status	equ	0xFD8
 28317                           
 28318 ;; *************** function _playThisNote8 *****************
 28319 ;; Defined at:
 28320 ;;		line 876 in file "keyboard.c"
 28321 ;; Parameters:    Size  Location     Type
 28322 ;;  pitch           1    wreg     unsigned char 
 28323 ;;  index           1   31[BANK0 ] unsigned char 
 28324 ;; Auto vars:     Size  Location     Type
 28325 ;;  pitch           1   36[BANK0 ] unsigned char 
 28326 ;;  temp_pitch      1   37[BANK0 ] unsigned char 
 28327 ;;  mode_p          2   38[BANK0 ] PTR unsigned char 
 28328 ;;		 -> locrian_key(15), aeolian_key(15), mixolydian_key(15), lydian_key(15), 
 28329 ;;		 -> phrygian_key(15), dorian_key(15), ionian_key(15), 
 28330 ;; Return value:  Size  Location     Type
 28331 ;;                  1    wreg      void 
 28332 ;; Registers used:
 28333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28334 ;; Tracked objects:
 28335 ;;		On entry : 0/0
 28336 ;;		On exit  : 0/0
 28337 ;;		Unchanged: 0/0
 28338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 28339 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28340 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28341 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28342 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28343 ;;Total ram usage:        9 bytes
 28344 ;; Hardware stack levels used:    1
 28345 ;; Hardware stack levels required when called:   11
 28346 ;; This function calls:
 28347 ;;		_add_notes_to_arpeggio
 28348 ;;		_delete_notes_from_arpeggio
 28349 ;;		_finish_arpeggio_setup
 28350 ;;		_key_press_release_note_off
 28351 ;;		_noteOff
 28352 ;;		_noteOn
 28353 ;;		_playDiatonicSeventhMajor
 28354 ;;		_playDiatonicSeventhMinor
 28355 ;;		_playDiatonicTriadMajor
 28356 ;;		_playDiatonicTriadMinor
 28357 ;;		_wait_one_pulse
 28358 ;; This function is called by:
 28359 ;;		_keyboard_eight_note_efficient
 28360 ;;		_processOctave
 28361 ;;		_Function_H_6_1
 28362 ;; This function uses a non-reentrant model
 28363 ;;
 28364                           
 28365                           	psect	text84
 28366  002AD4                     __ptext84:
 28367                           	opt stack 0
 28368  002AD4                     _playThisNote8:
 28369                           	opt stack 15
 28370                           
 28371                           ; BSR set to: 0
 28372                           ;incstack = 0
 28373                           ;playThisNote8@pitch stored from wreg
 28374  002AD4  0100               	movlb	0	; () banked
 28375  002AD6  6F84               	movwf	playThisNote8@pitch& (0+255),b
 28376                           
 28377                           ;keyboard.c: 878: unsigned char *mode_p;
 28378                           ;keyboard.c: 881: switch (which_mode) {
 28379  002AD8  D01E               	goto	l1515
 28380  002ADA                     
 28381                           ;keyboard.c: 883: mode_p = ionian_key;
 28382  002ADA  0E55               	movlw	low _ionian_key
 28383  002ADC  0100               	movlb	0	; () banked
 28384  002ADE  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28385  002AE0  0EFD               	movlw	high _ionian_key
 28386  002AE2  D017               	goto	L12
 28387  002AE4                     
 28388                           ; BSR set to: 0
 28389                           ;keyboard.c: 886: mode_p = dorian_key;
 28390                           
 28391                           ; BSR set to: 0
 28392  002AE4  0E46               	movlw	low _dorian_key
 28393  002AE6  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28394  002AE8  0EFD               	movlw	high _dorian_key
 28395  002AEA  D013               	goto	L12
 28396  002AEC                     
 28397                           ; BSR set to: 0
 28398                           ;keyboard.c: 889: mode_p = phrygian_key;
 28399                           
 28400                           ; BSR set to: 0
 28401  002AEC  0E37               	movlw	low _phrygian_key
 28402  002AEE  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28403  002AF0  0EFD               	movlw	high _phrygian_key
 28404  002AF2  D00F               	goto	L12
 28405  002AF4                     
 28406                           ; BSR set to: 0
 28407                           ;keyboard.c: 892: mode_p = lydian_key;
 28408                           
 28409                           ; BSR set to: 0
 28410  002AF4  0E28               	movlw	low _lydian_key
 28411  002AF6  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28412  002AF8  0EFD               	movlw	high _lydian_key
 28413  002AFA  D00B               	goto	L12
 28414  002AFC                     
 28415                           ; BSR set to: 0
 28416                           ;keyboard.c: 895: mode_p = mixolydian_key;
 28417                           
 28418                           ; BSR set to: 0
 28419  002AFC  0E19               	movlw	low _mixolydian_key
 28420  002AFE  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28421  002B00  0EFD               	movlw	high _mixolydian_key
 28422  002B02  D007               	goto	L12
 28423  002B04                     
 28424                           ; BSR set to: 0
 28425                           ;keyboard.c: 898: mode_p = aeolian_key;
 28426                           
 28427                           ; BSR set to: 0
 28428  002B04  0E0A               	movlw	low _aeolian_key
 28429  002B06  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28430  002B08  0EFD               	movlw	high _aeolian_key
 28431  002B0A  D003               	goto	L12
 28432  002B0C                     
 28433                           ; BSR set to: 0
 28434                           ;keyboard.c: 901: mode_p = locrian_key;
 28435                           
 28436                           ; BSR set to: 0
 28437  002B0C  0EFB               	movlw	low _locrian_key
 28438  002B0E  6F86               	movwf	playThisNote8@mode_p& (0+255),b
 28439  002B10  0EFC               	movlw	high _locrian_key
 28440  002B12                     L12:
 28441  002B12  6F87               	movwf	(playThisNote8@mode_p+1)& (0+255),b
 28442                           
 28443                           ; BSR set to: 0
 28444                           ;keyboard.c: 905: }
 28445                           
 28446                           ; BSR set to: 0
 28447                           ;keyboard.c: 904: break;
 28448                           
 28449                           ;keyboard.c: 903: default:
 28450                           
 28451                           ;keyboard.c: 902: break;
 28452  002B14  D017               	goto	l1517
 28453  002B16                     l1515:
 28454                           
 28455                           ; BSR set to: 0
 28456  002B16  0100               	movlb	0	; () banked
 28457  002B18  51F1               	movf	_which_mode& (0+255),w,b
 28458                           
 28459                           ; Switch size 1, requested type "space"
 28460                           ; Number of cases is 7, Range of values is 0 to 6
 28461                           ; switch strategies available:
 28462                           ; Name         Instructions Cycles
 28463                           ; simple_byte           22    12 (average)
 28464                           ;	Chosen strategy is simple_byte
 28465  002B1A  0A00               	xorlw	0	; case 0
 28466  002B1C  B4D8               	btfsc	status,2,c
 28467  002B1E  D7DD               	goto	l1516
 28468  002B20  0A01               	xorlw	1	; case 1
 28469  002B22  B4D8               	btfsc	status,2,c
 28470  002B24  D7DF               	goto	l1518
 28471  002B26  0A03               	xorlw	3	; case 2
 28472  002B28  B4D8               	btfsc	status,2,c
 28473  002B2A  D7E0               	goto	l1519
 28474  002B2C  0A01               	xorlw	1	; case 3
 28475  002B2E  B4D8               	btfsc	status,2,c
 28476  002B30  D7E1               	goto	l1520
 28477  002B32  0A07               	xorlw	7	; case 4
 28478  002B34  B4D8               	btfsc	status,2,c
 28479  002B36  D7E2               	goto	l1521
 28480  002B38  0A01               	xorlw	1	; case 5
 28481  002B3A  B4D8               	btfsc	status,2,c
 28482  002B3C  D7E3               	goto	l1522
 28483  002B3E  0A03               	xorlw	3	; case 6
 28484  002B40  B4D8               	btfsc	status,2,c
 28485  002B42  D7E4               	goto	l1523
 28486  002B44                     l1517:
 28487                           
 28488                           ; BSR set to: 0
 28489                           ;keyboard.c: 908: if(ARPEGGIO_ON == 0){
 28490  002B44  B635               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28491  002B46  D0D0               	goto	l1538
 28492                           
 28493                           ; BSR set to: 0
 28494                           ;keyboard.c: 910: if(KEYBOARD_MODE == MAJOR) {
 28495  002B48  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 28496  002B4A  A4D8               	btfss	status,2,c
 28497  002B4C  D025               	goto	l1528
 28498                           
 28499                           ; BSR set to: 0
 28500                           ;keyboard.c: 911: if(ON_OFF == 1) {noteOn(channel,major_key[index],velocity);}
 28501  002B4E  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28502  002B50  D010               	goto	l1527
 28503                           
 28504                           ; BSR set to: 0
 28505  002B52  517F               	movf	playThisNote8@index& (0+255),w,b
 28506  002B54  0D01               	mullw	1
 28507  002B56  0E78               	movlw	low _major_key
 28508  002B58  24F3               	addwf	prodl,w,c
 28509  002B5A  6EF6               	movwf	tblptrl,c
 28510  002B5C  0EF3               	movlw	high _major_key
 28511  002B5E  20F4               	addwfc	prodh,w,c
 28512  002B60  6EF7               	movwf	tblptrh,c
 28513  002B62                     	if	0	;There are less than 3 active tblptr bytes
 28514  002B62                     	endif
 28515  002B62  0008               	tblrd		*
 28516  002B64  CFF5 F06E          	movff	tablat,noteOn@pitch
 28517  002B68  C0FD  F06F         	movff	_velocity,noteOn@velocity
 28518  002B6C  51F6               	movf	_channel& (0+255),w,b
 28519  002B6E  ECA2  F044         	call	_noteOn
 28520  002B72                     l1527:
 28521                           
 28522                           ;keyboard.c: 912: if(ON_OFF == 0) {noteOff(channel,major_key[index],velocity);}
 28523  002B72  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28524  002B74  D011               	goto	l1528
 28525  002B76  0100               	movlb	0	; () banked
 28526  002B78  517F               	movf	playThisNote8@index& (0+255),w,b
 28527  002B7A  0D01               	mullw	1
 28528  002B7C  0E78               	movlw	low _major_key
 28529  002B7E  24F3               	addwf	prodl,w,c
 28530  002B80  6EF6               	movwf	tblptrl,c
 28531  002B82  0EF3               	movlw	high _major_key
 28532  002B84  20F4               	addwfc	prodh,w,c
 28533  002B86  6EF7               	movwf	tblptrh,c
 28534  002B88                     	if	0	;There are less than 3 active tblptr bytes
 28535  002B88                     	endif
 28536  002B88  0008               	tblrd		*
 28537  002B8A  CFF5 F06B          	movff	tablat,noteOff@pitch
 28538  002B8E  C0FD  F06C         	movff	_velocity,noteOff@velocity
 28539  002B92  51F6               	movf	_channel& (0+255),w,b
 28540  002B94  ECC9  F047         	call	_noteOff
 28541  002B98                     l1528:
 28542                           
 28543                           ;keyboard.c: 913: }
 28544                           ;keyboard.c: 915: if(KEYBOARD_MODE == MINOR) {
 28545  002B98  0E02               	movlw	2
 28546  002B9A  0100               	movlb	0	; () banked
 28547  002B9C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28548  002B9E  A4D8               	btfss	status,2,c
 28549  002BA0  D025               	goto	l1531
 28550                           
 28551                           ; BSR set to: 0
 28552                           ;keyboard.c: 916: if(ON_OFF == 1) {noteOn(channel,minor_key[index],velocity);}
 28553  002BA2  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28554  002BA4  D010               	goto	l1530
 28555                           
 28556                           ; BSR set to: 0
 28557  002BA6  517F               	movf	playThisNote8@index& (0+255),w,b
 28558  002BA8  0D01               	mullw	1
 28559  002BAA  0E69               	movlw	low _minor_key
 28560  002BAC  24F3               	addwf	prodl,w,c
 28561  002BAE  6EF6               	movwf	tblptrl,c
 28562  002BB0  0EF3               	movlw	high _minor_key
 28563  002BB2  20F4               	addwfc	prodh,w,c
 28564  002BB4  6EF7               	movwf	tblptrh,c
 28565  002BB6                     	if	0	;There are less than 3 active tblptr bytes
 28566  002BB6                     	endif
 28567  002BB6  0008               	tblrd		*
 28568  002BB8  CFF5 F06E          	movff	tablat,noteOn@pitch
 28569  002BBC  C0FD  F06F         	movff	_velocity,noteOn@velocity
 28570  002BC0  51F6               	movf	_channel& (0+255),w,b
 28571  002BC2  ECA2  F044         	call	_noteOn
 28572  002BC6                     l1530:
 28573                           
 28574                           ;keyboard.c: 917: if(ON_OFF == 0) {noteOff(channel,minor_key[index],velocity);}
 28575  002BC6  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28576  002BC8  D011               	goto	l1531
 28577  002BCA  0100               	movlb	0	; () banked
 28578  002BCC  517F               	movf	playThisNote8@index& (0+255),w,b
 28579  002BCE  0D01               	mullw	1
 28580  002BD0  0E69               	movlw	low _minor_key
 28581  002BD2  24F3               	addwf	prodl,w,c
 28582  002BD4  6EF6               	movwf	tblptrl,c
 28583  002BD6  0EF3               	movlw	high _minor_key
 28584  002BD8  20F4               	addwfc	prodh,w,c
 28585  002BDA  6EF7               	movwf	tblptrh,c
 28586  002BDC                     	if	0	;There are less than 3 active tblptr bytes
 28587  002BDC                     	endif
 28588  002BDC  0008               	tblrd		*
 28589  002BDE  CFF5 F06B          	movff	tablat,noteOff@pitch
 28590  002BE2  C0FD  F06C         	movff	_velocity,noteOff@velocity
 28591  002BE6  51F6               	movf	_channel& (0+255),w,b
 28592  002BE8  ECC9  F047         	call	_noteOff
 28593  002BEC                     l1531:
 28594                           
 28595                           ;keyboard.c: 918: }
 28596                           ;keyboard.c: 920: if(KEYBOARD_MODE == MODES) {
 28597  002BEC  0E03               	movlw	3
 28598  002BEE  0100               	movlb	0	; () banked
 28599  002BF0  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28600  002BF2  A4D8               	btfss	status,2,c
 28601  002BF4  D079               	goto	l1538
 28602                           
 28603                           ; BSR set to: 0
 28604                           ;keyboard.c: 921: if(index == 0) {
 28605  002BF6  517F               	movf	playThisNote8@index& (0+255),w,b
 28606  002BF8  A4D8               	btfss	status,2,c
 28607  002BFA  D031               	goto	l1535
 28608                           
 28609                           ; BSR set to: 0
 28610                           ;keyboard.c: 922: if(ON_OFF == 1) {noteOn(channel,mode_p[index],velocity);}
 28611  002BFC  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28612  002BFE  D016               	goto	l1534
 28613                           
 28614                           ; BSR set to: 0
 28615  002C00  517F               	movf	playThisNote8@index& (0+255),w,b
 28616  002C02  0D01               	mullw	1
 28617  002C04  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28618  002C08  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28619  002C0C  50F3               	movf	prodl,w,c
 28620  002C0E  2780               	addwf	??_playThisNote8& (0+255),f,b
 28621  002C10  50F4               	movf	prodh,w,c
 28622  002C12  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28623  002C14  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28624  002C18  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28625  002C1C                     	if	0	;tblptru may be non-zero
 28626  002C1C                     	endif
 28627  002C1C                     	if	0	;tblptru may be non-zero
 28628  002C1C                     	endif
 28629  002C1C  0008               	tblrd		*
 28630  002C1E  CFF5 F06E          	movff	tablat,noteOn@pitch
 28631  002C22  C0FD  F06F         	movff	_velocity,noteOn@velocity
 28632  002C26  51F6               	movf	_channel& (0+255),w,b
 28633  002C28  ECA2  F044         	call	_noteOn
 28634  002C2C                     l1534:
 28635                           
 28636                           ;keyboard.c: 923: if(ON_OFF == 0) {noteOff(channel,mode_p[index],velocity);}
 28637  002C2C  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28638  002C2E  D017               	goto	l1535
 28639  002C30  0100               	movlb	0	; () banked
 28640  002C32  517F               	movf	playThisNote8@index& (0+255),w,b
 28641  002C34  0D01               	mullw	1
 28642  002C36  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28643  002C3A  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28644  002C3E  50F3               	movf	prodl,w,c
 28645  002C40  2780               	addwf	??_playThisNote8& (0+255),f,b
 28646  002C42  50F4               	movf	prodh,w,c
 28647  002C44  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28648  002C46  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28649  002C4A  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28650  002C4E                     	if	0	;tblptru may be non-zero
 28651  002C4E                     	endif
 28652  002C4E                     	if	0	;tblptru may be non-zero
 28653  002C4E                     	endif
 28654  002C4E  0008               	tblrd		*
 28655  002C50  CFF5 F06B          	movff	tablat,noteOff@pitch
 28656  002C54  C0FD  F06C         	movff	_velocity,noteOff@velocity
 28657  002C58  51F6               	movf	_channel& (0+255),w,b
 28658  002C5A  ECC9  F047         	call	_noteOff
 28659  002C5E                     l1535:
 28660                           
 28661                           ;keyboard.c: 924: }
 28662                           ;keyboard.c: 925: if(index > 0) {
 28663  002C5E  0100               	movlb	0	; () banked
 28664  002C60  517F               	movf	playThisNote8@index& (0+255),w,b
 28665  002C62  B4D8               	btfsc	status,2,c
 28666  002C64  D041               	goto	l1538
 28667                           
 28668                           ; BSR set to: 0
 28669                           ;keyboard.c: 926: if(ON_OFF == 1) {noteOn(channel,mode_p[0] + mode_p[index],velocity);}
 28670  002C66  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28671  002C68  D01E               	goto	l1537
 28672                           
 28673                           ; BSR set to: 0
 28674  002C6A  517F               	movf	playThisNote8@index& (0+255),w,b
 28675  002C6C  0D01               	mullw	1
 28676  002C6E  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28677  002C72  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28678  002C76  50F3               	movf	prodl,w,c
 28679  002C78  2780               	addwf	??_playThisNote8& (0+255),f,b
 28680  002C7A  50F4               	movf	prodh,w,c
 28681  002C7C  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28682  002C7E  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28683  002C82  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28684  002C86                     	if	0	;tblptru may be non-zero
 28685  002C86                     	endif
 28686  002C86                     	if	0	;tblptru may be non-zero
 28687  002C86                     	endif
 28688  002C86  0008               	tblrd		*
 28689  002C88  CFF5 F082          	movff	tablat,??_playThisNote8+2
 28690  002C8C  C086  FFF6         	movff	playThisNote8@mode_p,tblptrl
 28691  002C90  C087  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 28692  002C94                     	if	0	;tblptru may be non-zero
 28693  002C94                     	endif
 28694  002C94                     	if	0	;tblptru may be non-zero
 28695  002C94                     	endif
 28696  002C94  0008               	tblrd		*
 28697  002C96  50F5               	movf	tablat,w,c
 28698  002C98  2582               	addwf	(??_playThisNote8+2)& (0+255),w,b
 28699  002C9A  6F6E               	movwf	noteOn@pitch& (0+255),b
 28700  002C9C  C0FD  F06F         	movff	_velocity,noteOn@velocity
 28701  002CA0  51F6               	movf	_channel& (0+255),w,b
 28702  002CA2  ECA2  F044         	call	_noteOn
 28703  002CA6                     l1537:
 28704                           
 28705                           ;keyboard.c: 927: if(ON_OFF == 0) {noteOff(channel,mode_p[0] + mode_p[index],velocity);}
 28706  002CA6  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28707  002CA8  D01F               	goto	l1538
 28708  002CAA  0100               	movlb	0	; () banked
 28709  002CAC  517F               	movf	playThisNote8@index& (0+255),w,b
 28710  002CAE  0D01               	mullw	1
 28711  002CB0  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28712  002CB4  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28713  002CB8  50F3               	movf	prodl,w,c
 28714  002CBA  2780               	addwf	??_playThisNote8& (0+255),f,b
 28715  002CBC  50F4               	movf	prodh,w,c
 28716  002CBE  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28717  002CC0  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28718  002CC4  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28719  002CC8                     	if	0	;tblptru may be non-zero
 28720  002CC8                     	endif
 28721  002CC8                     	if	0	;tblptru may be non-zero
 28722  002CC8                     	endif
 28723  002CC8  0008               	tblrd		*
 28724  002CCA  CFF5 F082          	movff	tablat,??_playThisNote8+2
 28725  002CCE  C086  FFF6         	movff	playThisNote8@mode_p,tblptrl
 28726  002CD2  C087  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 28727  002CD6                     	if	0	;tblptru may be non-zero
 28728  002CD6                     	endif
 28729  002CD6                     	if	0	;tblptru may be non-zero
 28730  002CD6                     	endif
 28731  002CD6  0008               	tblrd		*
 28732  002CD8  50F5               	movf	tablat,w,c
 28733  002CDA  2582               	addwf	(??_playThisNote8+2)& (0+255),w,b
 28734  002CDC  6F6B               	movwf	noteOff@pitch& (0+255),b
 28735  002CDE  C0FD  F06C         	movff	_velocity,noteOff@velocity
 28736  002CE2  51F6               	movf	_channel& (0+255),w,b
 28737  002CE4  ECC9  F047         	call	_noteOff
 28738  002CE8                     l1538:
 28739                           
 28740                           ;keyboard.c: 928: }
 28741                           ;keyboard.c: 929: }
 28742                           ;keyboard.c: 930: }
 28743                           ;keyboard.c: 933: if(ARPEGGIO_ON == 1){
 28744  002CE8  A635               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28745  002CEA  D0DE               	goto	l1552
 28746                           
 28747                           ;keyboard.c: 935: unsigned char temp_pitch;
 28748                           ;keyboard.c: 937: if(KEYBOARD_MODE == MAJOR) {
 28749  002CEC  0100               	movlb	0	; () banked
 28750  002CEE  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 28751  002CF0  A4D8               	btfss	status,2,c
 28752  002CF2  D00B               	goto	l1540
 28753                           
 28754                           ; BSR set to: 0
 28755                           ;keyboard.c: 938: temp_pitch = major_key[index];
 28756  002CF4  517F               	movf	playThisNote8@index& (0+255),w,b
 28757  002CF6  0D01               	mullw	1
 28758  002CF8  0E78               	movlw	low _major_key
 28759  002CFA  24F3               	addwf	prodl,w,c
 28760  002CFC  6EF6               	movwf	tblptrl,c
 28761  002CFE  0EF3               	movlw	high _major_key
 28762  002D00  20F4               	addwfc	prodh,w,c
 28763  002D02  6EF7               	movwf	tblptrh,c
 28764  002D04                     	if	0	;There are less than 3 active tblptr bytes
 28765  002D04                     	endif
 28766  002D04  0008               	tblrd		*
 28767  002D06  CFF5 F085          	movff	tablat,playThisNote8@temp_pitch
 28768  002D0A                     l1540:
 28769                           
 28770                           ; BSR set to: 0
 28771                           ;keyboard.c: 939: }
 28772                           ;keyboard.c: 941: if(KEYBOARD_MODE == MINOR) {
 28773                           
 28774                           ; BSR set to: 0
 28775  002D0A  0E02               	movlw	2
 28776  002D0C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28777  002D0E  A4D8               	btfss	status,2,c
 28778  002D10  D00B               	goto	l1541
 28779                           
 28780                           ; BSR set to: 0
 28781                           ;keyboard.c: 942: temp_pitch = minor_key[index];
 28782  002D12  517F               	movf	playThisNote8@index& (0+255),w,b
 28783  002D14  0D01               	mullw	1
 28784  002D16  0E69               	movlw	low _minor_key
 28785  002D18  24F3               	addwf	prodl,w,c
 28786  002D1A  6EF6               	movwf	tblptrl,c
 28787  002D1C  0EF3               	movlw	high _minor_key
 28788  002D1E  20F4               	addwfc	prodh,w,c
 28789  002D20  6EF7               	movwf	tblptrh,c
 28790  002D22                     	if	0	;There are less than 3 active tblptr bytes
 28791  002D22                     	endif
 28792  002D22  0008               	tblrd		*
 28793  002D24  CFF5 F085          	movff	tablat,playThisNote8@temp_pitch
 28794  002D28                     l1541:
 28795                           
 28796                           ; BSR set to: 0
 28797                           ;keyboard.c: 943: }
 28798                           ;keyboard.c: 945: if(KEYBOARD_MODE == MODES) {
 28799                           
 28800                           ; BSR set to: 0
 28801  002D28  0E03               	movlw	3
 28802  002D2A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28803  002D2C  A4D8               	btfss	status,2,c
 28804  002D2E  D030               	goto	l1544
 28805                           
 28806                           ; BSR set to: 0
 28807                           ;keyboard.c: 946: if(index == 0){temp_pitch = mode_p[index];}
 28808  002D30  517F               	movf	playThisNote8@index& (0+255),w,b
 28809  002D32  A4D8               	btfss	status,2,c
 28810  002D34  D011               	goto	l1543
 28811                           
 28812                           ; BSR set to: 0
 28813  002D36  517F               	movf	playThisNote8@index& (0+255),w,b
 28814  002D38  0D01               	mullw	1
 28815  002D3A  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28816  002D3E  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28817  002D42  50F3               	movf	prodl,w,c
 28818  002D44  2780               	addwf	??_playThisNote8& (0+255),f,b
 28819  002D46  50F4               	movf	prodh,w,c
 28820  002D48  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28821  002D4A  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28822  002D4E  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28823  002D52                     	if	0	;tblptru may be non-zero
 28824  002D52                     	endif
 28825  002D52                     	if	0	;tblptru may be non-zero
 28826  002D52                     	endif
 28827  002D52  0008               	tblrd		*
 28828  002D54  CFF5 F085          	movff	tablat,playThisNote8@temp_pitch
 28829  002D58                     l1543:
 28830                           
 28831                           ; BSR set to: 0
 28832                           ;keyboard.c: 947: if(index > 0){temp_pitch = (mode_p[0] + mode_p[index]);}
 28833                           
 28834                           ; BSR set to: 0
 28835  002D58  517F               	movf	playThisNote8@index& (0+255),w,b
 28836  002D5A  B4D8               	btfsc	status,2,c
 28837  002D5C  D019               	goto	l1544
 28838                           
 28839                           ; BSR set to: 0
 28840  002D5E  517F               	movf	playThisNote8@index& (0+255),w,b
 28841  002D60  0D01               	mullw	1
 28842  002D62  C086  F080         	movff	playThisNote8@mode_p,??_playThisNote8
 28843  002D66  C087  F081         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 28844  002D6A  50F3               	movf	prodl,w,c
 28845  002D6C  2780               	addwf	??_playThisNote8& (0+255),f,b
 28846  002D6E  50F4               	movf	prodh,w,c
 28847  002D70  2381               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 28848  002D72  C080  FFF6         	movff	??_playThisNote8,tblptrl
 28849  002D76  C081  FFF7         	movff	??_playThisNote8+1,tblptrh
 28850  002D7A                     	if	0	;tblptru may be non-zero
 28851  002D7A                     	endif
 28852  002D7A                     	if	0	;tblptru may be non-zero
 28853  002D7A                     	endif
 28854  002D7A  0008               	tblrd		*
 28855  002D7C  CFF5 F082          	movff	tablat,??_playThisNote8+2
 28856  002D80  C086  FFF6         	movff	playThisNote8@mode_p,tblptrl
 28857  002D84  C087  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 28858  002D88                     	if	0	;tblptru may be non-zero
 28859  002D88                     	endif
 28860  002D88                     	if	0	;tblptru may be non-zero
 28861  002D88                     	endif
 28862  002D88  0008               	tblrd		*
 28863  002D8A  50F5               	movf	tablat,w,c
 28864  002D8C  2582               	addwf	(??_playThisNote8+2)& (0+255),w,b
 28865  002D8E  6F85               	movwf	playThisNote8@temp_pitch& (0+255),b
 28866  002D90                     l1544:
 28867                           
 28868                           ; BSR set to: 0
 28869                           ;keyboard.c: 948: }
 28870                           ;keyboard.c: 950: if(ON_OFF == 1) {
 28871                           
 28872                           ; BSR set to: 0
 28873                           
 28874                           ; BSR set to: 0
 28875  002D90  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28876  002D92  D024               	goto	l1545
 28877                           
 28878                           ; BSR set to: 0
 28879                           ;keyboard.c: 953: TMR0ON = 0;
 28880  002D94  9ED5               	bcf	4053,7,c	;volatile
 28881                           
 28882                           ;keyboard.c: 955: parallel = temp_pitch;
 28883  002D96  C085  F0E6         	movff	playThisNote8@temp_pitch,_parallel
 28884                           
 28885                           ; BSR set to: 0
 28886                           ;keyboard.c: 958: if(NUM_NOTES_PRESSED > 0){
 28887  002D9A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 28888  002D9C  B4D8               	btfsc	status,2,c
 28889  002D9E  D00A               	goto	l1546
 28890                           
 28891                           ; BSR set to: 0
 28892                           ;keyboard.c: 959: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 28893  002DA0  0E00               	movlw	0
 28894  002DA2  B234               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 28895  002DA4  0E01               	movlw	1
 28896  002DA6  ECCC  F049         	call	_wait_one_pulse
 28897                           
 28898                           ;keyboard.c: 960: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28899  002DAA  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28900  002DAC  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 28901                           
 28902                           ;keyboard.c: 961: TIMER_OVERFLOWS = 0;
 28903  002DB0  0E00               	movlw	0
 28904  002DB2  6E54               	movwf	_TIMER_OVERFLOWS,c
 28905  002DB4                     l1546:
 28906                           
 28907                           ;keyboard.c: 962: }
 28908                           ;keyboard.c: 965: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MOD
      +                          E == MODES)){
 28909  002DB4  0100               	movlb	0	; () banked
 28910  002DB6  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 28911  002DB8  B4D8               	btfsc	status,2,c
 28912  002DBA  D008               	goto	u27880
 28913                           
 28914                           ; BSR set to: 0
 28915  002DBC  0E02               	movlw	2
 28916  002DBE  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28917  002DC0  B4D8               	btfsc	status,2,c
 28918  002DC2  D004               	goto	u27880
 28919                           
 28920                           ; BSR set to: 0
 28921  002DC4  0E03               	movlw	3
 28922  002DC6  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28923  002DC8  A4D8               	btfss	status,2,c
 28924  002DCA  D003               	goto	l1548
 28925  002DCC                     u27880:
 28926                           
 28927                           ; BSR set to: 0
 28928                           ;keyboard.c: 966: add_notes_to_arpeggio(temp_pitch);
 28929                           
 28930                           ; BSR set to: 0
 28931  002DCC  5185               	movf	playThisNote8@temp_pitch& (0+255),w,b
 28932  002DCE  ECC3  F03F         	call	_add_notes_to_arpeggio
 28933  002DD2                     l1548:
 28934                           
 28935                           ;keyboard.c: 967: }
 28936                           ;keyboard.c: 970: if(LATCH == 0) {latch_was_pressed = 0;}
 28937  002DD2  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 28938  002DD4  9A34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28939                           
 28940                           ;keyboard.c: 973: finish_arpeggio_setup();
 28941  002DD6  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 28942                           
 28943                           ;keyboard.c: 976: TMR0ON = 1;
 28944  002DDA  8ED5               	bsf	4053,7,c	;volatile
 28945  002DDC                     l1545:
 28946                           
 28947                           ;keyboard.c: 977: }
 28948                           ;keyboard.c: 979: if((ON_OFF == 0) && (LATCH == 0)) {
 28949  002DDC  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28950  002DDE  B035               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 28951  002DE0  D063               	goto	l1552
 28952                           
 28953                           ;keyboard.c: 982: TMR0ON = 0;
 28954  002DE2  9ED5               	bcf	4053,7,c	;volatile
 28955                           
 28956                           ;keyboard.c: 985: if(NUM_NOTES_PRESSED > 0){
 28957  002DE4  0100               	movlb	0	; () banked
 28958  002DE6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 28959  002DE8  B4D8               	btfsc	status,2,c
 28960  002DEA  D00A               	goto	l1553
 28961                           
 28962                           ; BSR set to: 0
 28963                           ;keyboard.c: 986: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 28964  002DEC  0E00               	movlw	0
 28965  002DEE  B034               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 28966  002DF0  0E01               	movlw	1
 28967  002DF2  ECCC  F049         	call	_wait_one_pulse
 28968                           
 28969                           ;keyboard.c: 987: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28970  002DF6  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28971  002DF8  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 28972                           
 28973                           ;keyboard.c: 988: TIMER_OVERFLOWS = 0;
 28974  002DFC  0E00               	movlw	0
 28975  002DFE  6E54               	movwf	_TIMER_OVERFLOWS,c
 28976  002E00                     l1553:
 28977                           
 28978                           ;keyboard.c: 989: }
 28979                           ;keyboard.c: 992: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MOD
      +                          E == MODES)){
 28980  002E00  0100               	movlb	0	; () banked
 28981  002E02  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 28982  002E04  B4D8               	btfsc	status,2,c
 28983  002E06  D008               	goto	u27960
 28984                           
 28985                           ; BSR set to: 0
 28986  002E08  0E02               	movlw	2
 28987  002E0A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28988  002E0C  B4D8               	btfsc	status,2,c
 28989  002E0E  D004               	goto	u27960
 28990                           
 28991                           ; BSR set to: 0
 28992  002E10  0E03               	movlw	3
 28993  002E12  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 28994  002E14  A4D8               	btfss	status,2,c
 28995  002E16  D003               	goto	l1555
 28996  002E18                     u27960:
 28997                           
 28998                           ; BSR set to: 0
 28999                           ;keyboard.c: 993: delete_notes_from_arpeggio(temp_pitch);
 29000                           
 29001                           ; BSR set to: 0
 29002  002E18  5185               	movf	playThisNote8@temp_pitch& (0+255),w,b
 29003  002E1A  EC40  F049         	call	_delete_notes_from_arpeggio
 29004  002E1E                     l1555:
 29005                           
 29006                           ;keyboard.c: 994: }
 29007                           ;keyboard.c: 996: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 29008  002E1E  C0E6  F080         	movff	_parallel,??_playThisNote8
 29009  002E22  0100               	movlb	0	; () banked
 29010  002E24  6B81               	clrf	(??_playThisNote8+1)& (0+255),b
 29011  002E26  BF80               	btfsc	??_playThisNote8& (0+255),7,b
 29012  002E28  0781               	decf	(??_playThisNote8+1)& (0+255),f,b
 29013  002E2A  5185               	movf	playThisNote8@temp_pitch& (0+255),w,b
 29014  002E2C  6F82               	movwf	(??_playThisNote8+2)& (0+255),b
 29015  002E2E  6B83               	clrf	(??_playThisNote8+3)& (0+255),b
 29016  002E30  5180               	movf	??_playThisNote8& (0+255),w,b
 29017  002E32  1982               	xorwf	(??_playThisNote8+2)& (0+255),w,b
 29018  002E34  E106               	bnz	l18409
 29019  002E36  5181               	movf	(??_playThisNote8+1)& (0+255),w,b
 29020  002E38  1983               	xorwf	(??_playThisNote8+3)& (0+255),w,b
 29021  002E3A  A4D8               	btfss	status,2,c
 29022  002E3C  D002               	goto	l1558
 29023                           
 29024                           ; BSR set to: 0
 29025  002E3E  0E00               	movlw	0
 29026  002E40  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29027  002E42                     l1558:
 29028  002E42                     l18409:
 29029                           
 29030                           ; BSR set to: 0
 29031                           ;keyboard.c: 1001: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 29032  002E42  BC34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 29033                           
 29034                           ; BSR set to: 0
 29035  002E44  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29036  002E46  D001               	goto	l1559
 29037                           
 29038                           ; BSR set to: 0
 29039                           ;keyboard.c: 1002: LATCH = 1;
 29040  002E48  8035               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 29041  002E4A                     l1559:
 29042                           
 29043                           ; BSR set to: 0
 29044                           ;keyboard.c: 1003: }
 29045                           ;keyboard.c: 1008: if(((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_M
      +                          ODE == MODES)) && (UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 29046                           
 29047                           ; BSR set to: 0
 29048  002E4A  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 29049  002E4C  B4D8               	btfsc	status,2,c
 29050  002E4E  D008               	goto	u28020
 29051                           
 29052                           ; BSR set to: 0
 29053  002E50  0E02               	movlw	2
 29054  002E52  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29055  002E54  B4D8               	btfsc	status,2,c
 29056  002E56  D004               	goto	u28020
 29057                           
 29058                           ; BSR set to: 0
 29059  002E58  0E03               	movlw	3
 29060  002E5A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29061  002E5C  A4D8               	btfss	status,2,c
 29062  002E5E  D007               	goto	l1560
 29063  002E60                     u28020:
 29064                           
 29065                           ; BSR set to: 0
 29066  002E60  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29067                           
 29068                           ; BSR set to: 0
 29069  002E62  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29070  002E64  D004               	goto	l1560
 29071                           
 29072                           ; BSR set to: 0
 29073                           ;keyboard.c: 1009: NUM_NOTES_PRESSED = 0;
 29074  002E66  0E00               	movlw	0
 29075  002E68  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29076                           
 29077                           ;keyboard.c: 1010: ARRAY_INDEX = 0;
 29078  002E6A  0E00               	movlw	0
 29079  002E6C  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 29080  002E6E                     l1560:
 29081                           
 29082                           ; BSR set to: 0
 29083                           ;keyboard.c: 1011: }
 29084                           ;keyboard.c: 1014: if((KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) | (KEYBOARD_MODE == DIATON
      +                          IC_TRIAD_MINOR) | (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) |(KEYBOARD_MODE == DIATONIC_7TH_
      +                          MINOR) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_pressed == 1)){
 29085                           
 29086                           ; BSR set to: 0
 29087  002E6E  0E07               	movlw	7
 29088  002E70  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29089  002E72  B4D8               	btfsc	status,2,c
 29090  002E74  D00C               	goto	u28080
 29091                           
 29092                           ; BSR set to: 0
 29093  002E76  0E08               	movlw	8
 29094  002E78  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29095  002E7A  B4D8               	btfsc	status,2,c
 29096  002E7C  D008               	goto	u28080
 29097                           
 29098                           ; BSR set to: 0
 29099  002E7E  0E0A               	movlw	10
 29100  002E80  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29101  002E82  B4D8               	btfsc	status,2,c
 29102  002E84  D004               	goto	u28080
 29103                           
 29104                           ; BSR set to: 0
 29105  002E86  0E0B               	movlw	11
 29106  002E88  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29107  002E8A  A4D8               	btfss	status,2,c
 29108  002E8C  D00A               	goto	l1563
 29109  002E8E                     u28080:
 29110                           
 29111                           ; BSR set to: 0
 29112  002E8E  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29113  002E90  D002               	goto	u28100
 29114                           
 29115                           ; BSR set to: 0
 29116  002E92  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29117  002E94  D006               	goto	l1563
 29118  002E96                     u28100:
 29119                           
 29120                           ; BSR set to: 0
 29121  002E96  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29122  002E98  D004               	goto	l1563
 29123                           
 29124                           ; BSR set to: 0
 29125                           ;keyboard.c: 1015: NUM_NOTES_PRESSED = 0;
 29126  002E9A  0E00               	movlw	0
 29127  002E9C  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29128                           
 29129                           ;keyboard.c: 1016: ARRAY_INDEX = 0;
 29130  002E9E  0E00               	movlw	0
 29131  002EA0  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 29132  002EA2                     l1563:
 29133                           
 29134                           ; BSR set to: 0
 29135                           ;keyboard.c: 1017: }
 29136                           ;keyboard.c: 1020: finish_arpeggio_setup();
 29137                           
 29138                           ; BSR set to: 0
 29139  002EA2  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 29140                           
 29141                           ;keyboard.c: 1023: TMR0ON = 1;
 29142  002EA6  8ED5               	bsf	4053,7,c	;volatile
 29143  002EA8                     l1552:
 29144                           
 29145                           ;keyboard.c: 1024: }
 29146                           ;keyboard.c: 1025: }
 29147                           ;keyboard.c: 1027: if(KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) {
 29148  002EA8  0E07               	movlw	7
 29149  002EAA  0100               	movlb	0	; () banked
 29150  002EAC  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29151  002EAE  A4D8               	btfss	status,2,c
 29152  002EB0  D005               	goto	l1568
 29153                           
 29154                           ; BSR set to: 0
 29155                           ;keyboard.c: 1028: playDiatonicTriadMajor(pitch, index);
 29156  002EB2  C07F  F077         	movff	playThisNote8@index,playDiatonicTriadMajor@index
 29157  002EB6  5184               	movf	playThisNote8@pitch& (0+255),w,b
 29158  002EB8  EC46  F02B         	call	_playDiatonicTriadMajor
 29159  002EBC                     l1568:
 29160                           
 29161                           ;keyboard.c: 1029: }
 29162                           ;keyboard.c: 1030: if(KEYBOARD_MODE == DIATONIC_TRIAD_MINOR) {
 29163  002EBC  0E08               	movlw	8
 29164  002EBE  0100               	movlb	0	; () banked
 29165  002EC0  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29166  002EC2  A4D8               	btfss	status,2,c
 29167  002EC4  D005               	goto	l1569
 29168                           
 29169                           ; BSR set to: 0
 29170                           ;keyboard.c: 1031: playDiatonicTriadMinor(pitch, index);
 29171  002EC6  C07F  F077         	movff	playThisNote8@index,playDiatonicTriadMinor@index
 29172  002ECA  5184               	movf	playThisNote8@pitch& (0+255),w,b
 29173  002ECC  EC73  F023         	call	_playDiatonicTriadMinor
 29174  002ED0                     l1569:
 29175                           
 29176                           ;keyboard.c: 1032: }
 29177                           ;keyboard.c: 1033: if(KEYBOARD_MODE == DIATONIC_7TH_MAJOR) {
 29178  002ED0  0E0A               	movlw	10
 29179  002ED2  0100               	movlb	0	; () banked
 29180  002ED4  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29181  002ED6  A4D8               	btfss	status,2,c
 29182  002ED8  D005               	goto	l1570
 29183                           
 29184                           ; BSR set to: 0
 29185                           ;keyboard.c: 1034: playDiatonicSeventhMajor(pitch, index);
 29186  002EDA  C07F  F077         	movff	playThisNote8@index,playDiatonicSeventhMajor@index
 29187  002EDE  5184               	movf	playThisNote8@pitch& (0+255),w,b
 29188  002EE0  EC7D  F02A         	call	_playDiatonicSeventhMajor
 29189  002EE4                     l1570:
 29190                           
 29191                           ;keyboard.c: 1035: }
 29192                           ;keyboard.c: 1036: if(KEYBOARD_MODE == DIATONIC_7TH_MINOR) {
 29193  002EE4  0E0B               	movlw	11
 29194  002EE6  0100               	movlb	0	; () banked
 29195  002EE8  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 29196  002EEA  A4D8               	btfss	status,2,c
 29197  002EEC  0012               	return	
 29198                           
 29199                           ; BSR set to: 0
 29200                           ;keyboard.c: 1037: playDiatonicSeventhMinor(pitch, index);
 29201  002EEE  C07F  F077         	movff	playThisNote8@index,playDiatonicSeventhMinor@index
 29202  002EF2  5184               	movf	playThisNote8@pitch& (0+255),w,b
 29203  002EF4  ECA2  F024         	call	_playDiatonicSeventhMinor
 29204  002EF8  0012               	return	
 29205  002EFA                     __end_of_playThisNote8:
 29206                           	opt stack 0
 29207                           tblptru	equ	0xFF8
 29208                           tblptrh	equ	0xFF7
 29209                           tblptrl	equ	0xFF6
 29210                           tablat	equ	0xFF5
 29211                           prodh	equ	0xFF4
 29212                           prodl	equ	0xFF3
 29213                           intcon	equ	0xFF2
 29214                           intcon2	equ	0xFF1
 29215                           postinc0	equ	0xFEE
 29216                           wreg	equ	0xFE8
 29217                           indf1	equ	0xFE7
 29218                           postdec1	equ	0xFE5
 29219                           fsr1h	equ	0xFE2
 29220                           fsr1l	equ	0xFE1
 29221                           indf2	equ	0xFDF
 29222                           postinc2	equ	0xFDE
 29223                           plusw2	equ	0xFDB
 29224                           fsr2h	equ	0xFDA
 29225                           fsr2l	equ	0xFD9
 29226                           status	equ	0xFD8
 29227                           
 29228 ;; *************** function _playDiatonicTriadMinor *****************
 29229 ;; Defined at:
 29230 ;;		line 1181 in file "keyboard.c"
 29231 ;; Parameters:    Size  Location     Type
 29232 ;;  pitch           1    wreg     unsigned char 
 29233 ;;  index           1   23[BANK0 ] unsigned char 
 29234 ;; Auto vars:     Size  Location     Type
 29235 ;;  pitch           1   28[BANK0 ] unsigned char 
 29236 ;;  i               1   30[BANK0 ] unsigned char 
 29237 ;;  i               1   29[BANK0 ] unsigned char 
 29238 ;; Return value:  Size  Location     Type
 29239 ;;                  1    wreg      void 
 29240 ;; Registers used:
 29241 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29242 ;; Tracked objects:
 29243 ;;		On entry : 0/0
 29244 ;;		On exit  : 0/0
 29245 ;;		Unchanged: 0/0
 29246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 29247 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29248 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29249 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29250 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29251 ;;Total ram usage:        8 bytes
 29252 ;; Hardware stack levels used:    1
 29253 ;; Hardware stack levels required when called:   10
 29254 ;; This function calls:
 29255 ;;		_finish_arpeggio_setup
 29256 ;;		_key_press_release_note_off
 29257 ;;		_noteOff
 29258 ;;		_noteOn
 29259 ;;		_wait_one_pulse
 29260 ;; This function is called by:
 29261 ;;		_playThisNote8
 29262 ;; This function uses a non-reentrant model
 29263 ;;
 29264                           
 29265                           	psect	text85
 29266  0046E6                     __ptext85:
 29267                           	opt stack 0
 29268  0046E6                     _playDiatonicTriadMinor:
 29269                           	opt stack 15
 29270                           
 29271                           ;incstack = 0
 29272                           ;playDiatonicTriadMinor@pitch stored from wreg
 29273  0046E6  0100               	movlb	0	; () banked
 29274  0046E8  6F7C               	movwf	playDiatonicTriadMinor@pitch& (0+255),b
 29275                           
 29276                           ;keyboard.c: 1184: if(ARPEGGIO_ON == 0){
 29277  0046EA  B635               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 29278  0046EC  D08B               	goto	u24000
 29279                           
 29280                           ;keyboard.c: 1185: for(unsigned char i = 0; i<3; i++){
 29281  0046EE  0E00               	movlw	0
 29282  0046F0  0100               	movlb	0	; () banked
 29283  0046F2  6F7D               	movwf	playDiatonicTriadMinor@i& (0+255),b
 29284  0046F4                     l16767:
 29285                           
 29286                           ; BSR set to: 0
 29287  0046F4  0E02               	movlw	2
 29288  0046F6  657D               	cpfsgt	playDiatonicTriadMinor@i& (0+255),b
 29289  0046F8  D001               	goto	l1622
 29290  0046FA  D084               	goto	u24000
 29291  0046FC                     l1622:
 29292                           
 29293                           ; BSR set to: 0
 29294                           ;keyboard.c: 1186: if(i==0){
 29295                           
 29296                           ; BSR set to: 0
 29297  0046FC  517D               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 29298  0046FE  A4D8               	btfss	status,2,c
 29299  004700  D025               	goto	l1626
 29300                           
 29301                           ; BSR set to: 0
 29302                           ;keyboard.c: 1187: if(ON_OFF == 1) {noteOn(channel,diatonic_minor[index][0],velocity);}
 29303  004702  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29304  004704  D010               	goto	l1625
 29305                           
 29306                           ; BSR set to: 0
 29307  004706  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29308  004708  0D03               	mullw	3
 29309  00470A  0EE3               	movlw	low _diatonic_minor
 29310  00470C  24F3               	addwf	prodl,w,c
 29311  00470E  6EF6               	movwf	tblptrl,c
 29312  004710  0EF2               	movlw	high _diatonic_minor
 29313  004712  20F4               	addwfc	prodh,w,c
 29314  004714  6EF7               	movwf	tblptrh,c
 29315  004716                     	if	0	;There are less than 3 active tblptr bytes
 29316  004716                     	endif
 29317  004716  0008               	tblrd		*
 29318  004718  CFF5 F06E          	movff	tablat,noteOn@pitch
 29319  00471C  C0FD  F06F         	movff	_velocity,noteOn@velocity
 29320  004720  51F6               	movf	_channel& (0+255),w,b
 29321  004722  ECA2  F044         	call	_noteOn
 29322  004726                     l1625:
 29323                           
 29324                           ;keyboard.c: 1188: if(ON_OFF == 0) {noteOff(channel,diatonic_minor[index][0],velocity);}
 29325  004726  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29326  004728  D011               	goto	l1626
 29327  00472A  0100               	movlb	0	; () banked
 29328  00472C  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29329  00472E  0D03               	mullw	3
 29330  004730  0EE3               	movlw	low _diatonic_minor
 29331  004732  24F3               	addwf	prodl,w,c
 29332  004734  6EF6               	movwf	tblptrl,c
 29333  004736  0EF2               	movlw	high _diatonic_minor
 29334  004738  20F4               	addwfc	prodh,w,c
 29335  00473A  6EF7               	movwf	tblptrh,c
 29336  00473C                     	if	0	;There are less than 3 active tblptr bytes
 29337  00473C                     	endif
 29338  00473C  0008               	tblrd		*
 29339  00473E  CFF5 F06B          	movff	tablat,noteOff@pitch
 29340  004742  C0FD  F06C         	movff	_velocity,noteOff@velocity
 29341  004746  51F6               	movf	_channel& (0+255),w,b
 29342  004748  ECC9  F047         	call	_noteOff
 29343  00474C                     l1626:
 29344                           
 29345                           ;keyboard.c: 1189: }
 29346                           ;keyboard.c: 1190: if(i>0){
 29347  00474C  0100               	movlb	0	; () banked
 29348  00474E  517D               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 29349  004750  B4D8               	btfsc	status,2,c
 29350  004752  D055               	goto	l1629
 29351                           
 29352                           ; BSR set to: 0
 29353                           ;keyboard.c: 1191: if(ON_OFF == 1) noteOn(channel,diatonic_minor[index][0] + diatonic_mi
      +                          nor[index][i],velocity);
 29354  004754  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29355  004756  D028               	goto	l1628
 29356                           
 29357                           ; BSR set to: 0
 29358  004758  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29359  00475A  0D03               	mullw	3
 29360  00475C  0EE3               	movlw	low _diatonic_minor
 29361  00475E  6F78               	movwf	??_playDiatonicTriadMinor& (0+255),b
 29362  004760  0EF2               	movlw	high _diatonic_minor
 29363  004762  6F79               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 29364  004764  50F3               	movf	prodl,w,c
 29365  004766  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29366  004768  50F4               	movf	prodh,w,c
 29367  00476A  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29368  00476C  517D               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 29369  00476E  0D01               	mullw	1
 29370  004770  50F3               	movf	prodl,w,c
 29371  004772  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29372  004774  50F4               	movf	prodh,w,c
 29373  004776  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29374  004778  C078  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 29375  00477C  C079  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 29376  004780                     	if	0	;tblptru may be non-zero
 29377  004780                     	endif
 29378  004780                     	if	0	;tblptru may be non-zero
 29379  004780                     	endif
 29380  004780  0008               	tblrd		*
 29381  004782  CFF5 F07A          	movff	tablat,??_playDiatonicTriadMinor+2
 29382  004786  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29383  004788  0D03               	mullw	3
 29384  00478A  0EE3               	movlw	low _diatonic_minor
 29385  00478C  24F3               	addwf	prodl,w,c
 29386  00478E  6EF6               	movwf	tblptrl,c
 29387  004790  0EF2               	movlw	high _diatonic_minor
 29388  004792  20F4               	addwfc	prodh,w,c
 29389  004794  6EF7               	movwf	tblptrh,c
 29390  004796                     	if	0	;There are less than 3 active tblptr bytes
 29391  004796                     	endif
 29392  004796  0008               	tblrd		*
 29393  004798  50F5               	movf	tablat,w,c
 29394  00479A  257A               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 29395  00479C  6F6E               	movwf	noteOn@pitch& (0+255),b
 29396  00479E  C0FD  F06F         	movff	_velocity,noteOn@velocity
 29397  0047A2  51F6               	movf	_channel& (0+255),w,b
 29398  0047A4  ECA2  F044         	call	_noteOn
 29399  0047A8                     l1628:
 29400                           
 29401                           ;keyboard.c: 1192: if(ON_OFF == 0) noteOff(channel,diatonic_minor[index][0] + diatonic_m
      +                          inor[index][i],velocity);
 29402  0047A8  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29403  0047AA  D029               	goto	l1629
 29404  0047AC  0100               	movlb	0	; () banked
 29405  0047AE  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29406  0047B0  0D03               	mullw	3
 29407  0047B2  0EE3               	movlw	low _diatonic_minor
 29408  0047B4  6F78               	movwf	??_playDiatonicTriadMinor& (0+255),b
 29409  0047B6  0EF2               	movlw	high _diatonic_minor
 29410  0047B8  6F79               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 29411  0047BA  50F3               	movf	prodl,w,c
 29412  0047BC  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29413  0047BE  50F4               	movf	prodh,w,c
 29414  0047C0  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29415  0047C2  517D               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 29416  0047C4  0D01               	mullw	1
 29417  0047C6  50F3               	movf	prodl,w,c
 29418  0047C8  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29419  0047CA  50F4               	movf	prodh,w,c
 29420  0047CC  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29421  0047CE  C078  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 29422  0047D2  C079  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 29423  0047D6                     	if	0	;tblptru may be non-zero
 29424  0047D6                     	endif
 29425  0047D6                     	if	0	;tblptru may be non-zero
 29426  0047D6                     	endif
 29427  0047D6  0008               	tblrd		*
 29428  0047D8  CFF5 F07A          	movff	tablat,??_playDiatonicTriadMinor+2
 29429  0047DC  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29430  0047DE  0D03               	mullw	3
 29431  0047E0  0EE3               	movlw	low _diatonic_minor
 29432  0047E2  24F3               	addwf	prodl,w,c
 29433  0047E4  6EF6               	movwf	tblptrl,c
 29434  0047E6  0EF2               	movlw	high _diatonic_minor
 29435  0047E8  20F4               	addwfc	prodh,w,c
 29436  0047EA  6EF7               	movwf	tblptrh,c
 29437  0047EC                     	if	0	;There are less than 3 active tblptr bytes
 29438  0047EC                     	endif
 29439  0047EC  0008               	tblrd		*
 29440  0047EE  50F5               	movf	tablat,w,c
 29441  0047F0  257A               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 29442  0047F2  6F6B               	movwf	noteOff@pitch& (0+255),b
 29443  0047F4  C0FD  F06C         	movff	_velocity,noteOff@velocity
 29444  0047F8  51F6               	movf	_channel& (0+255),w,b
 29445  0047FA  ECC9  F047         	call	_noteOff
 29446  0047FE                     l1629:
 29447  0047FE  0100               	movlb	0	; () banked
 29448  004800  2B7D               	incf	playDiatonicTriadMinor@i& (0+255),f,b
 29449  004802  D778               	goto	l16767
 29450  004804                     u24000:
 29451                           
 29452                           ;keyboard.c: 1193: }
 29453                           ;keyboard.c: 1194: }
 29454                           ;keyboard.c: 1195: }
 29455                           ;keyboard.c: 1198: if(ARPEGGIO_ON == 1){
 29456                           
 29457                           ; BSR set to: 0
 29458  004804  A635               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 29459  004806  0012               	return	
 29460                           
 29461                           ;keyboard.c: 1199: if(ON_OFF == 1) {
 29462  004808  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29463  00480A  D066               	goto	l1631
 29464                           
 29465                           ;keyboard.c: 1201: TMR0ON = 0;
 29466  00480C  9ED5               	bcf	4053,7,c	;volatile
 29467                           
 29468                           ;keyboard.c: 1203: parallel = pitch;
 29469  00480E  C07C  F0E6         	movff	playDiatonicTriadMinor@pitch,_parallel
 29470                           
 29471                           ;keyboard.c: 1206: if(NUM_NOTES_PRESSED > 0){
 29472  004812  0100               	movlb	0	; () banked
 29473  004814  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 29474  004816  B4D8               	btfsc	status,2,c
 29475  004818  D00A               	goto	l1632
 29476                           
 29477                           ; BSR set to: 0
 29478                           ;keyboard.c: 1207: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 29479  00481A  0E00               	movlw	0
 29480  00481C  B234               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 29481  00481E  0E01               	movlw	1
 29482  004820  ECCC  F049         	call	_wait_one_pulse
 29483                           
 29484                           ;keyboard.c: 1208: if(note_off_was_sent == 0) {key_press_release_note_off();}
 29485  004824  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 29486  004826  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 29487                           
 29488                           ;keyboard.c: 1209: TIMER_OVERFLOWS = 0;
 29489  00482A  0E00               	movlw	0
 29490  00482C  6E54               	movwf	_TIMER_OVERFLOWS,c
 29491  00482E                     l1632:
 29492                           
 29493                           ;keyboard.c: 1210: }
 29494                           ;keyboard.c: 1212: for(unsigned char i = 0; i<3; i++){
 29495  00482E  0E00               	movlw	0
 29496  004830  0100               	movlb	0	; () banked
 29497  004832  6F7E               	movwf	playDiatonicTriadMinor@i_1689& (0+255),b
 29498  004834                     l16811:
 29499                           
 29500                           ; BSR set to: 0
 29501  004834  0E02               	movlw	2
 29502  004836  657E               	cpfsgt	playDiatonicTriadMinor@i_1689& (0+255),b
 29503  004838  D001               	goto	l1634
 29504  00483A  D046               	goto	u24080
 29505  00483C                     l1634:
 29506                           
 29507                           ; BSR set to: 0
 29508                           ;keyboard.c: 1213: if(i==0){ARPEGGIO[i] = diatonic_minor[index][0];}
 29509                           
 29510                           ; BSR set to: 0
 29511  00483C  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29512  00483E  A4D8               	btfss	status,2,c
 29513  004840  D013               	goto	l1636
 29514                           
 29515                           ; BSR set to: 0
 29516  004842  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29517  004844  0D03               	mullw	3
 29518  004846  0EE3               	movlw	low _diatonic_minor
 29519  004848  24F3               	addwf	prodl,w,c
 29520  00484A  6EF6               	movwf	tblptrl,c
 29521  00484C  0EF2               	movlw	high _diatonic_minor
 29522  00484E  20F4               	addwfc	prodh,w,c
 29523  004850  6EF7               	movwf	tblptrh,c
 29524  004852                     	if	0	;There are less than 3 active tblptr bytes
 29525  004852                     	endif
 29526  004852  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29527  004854  0D01               	mullw	1
 29528  004856  0E72               	movlw	low _ARPEGGIO
 29529  004858  24F3               	addwf	prodl,w,c
 29530  00485A  6ED9               	movwf	fsr2l,c
 29531  00485C  0E01               	movlw	high _ARPEGGIO
 29532  00485E  20F4               	addwfc	prodh,w,c
 29533  004860  6EDA               	movwf	fsr2h,c
 29534  004862  0008               	tblrd		*
 29535  004864  CFF5 FFDF          	movff	tablat,indf2
 29536  004868                     l1636:
 29537                           
 29538                           ; BSR set to: 0
 29539                           ;keyboard.c: 1214: if(i>0){ARPEGGIO[i] = diatonic_minor[index][0] + diatonic_minor[index
      +                          ][i];}
 29540                           
 29541                           ; BSR set to: 0
 29542  004868  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29543  00486A  B4D8               	btfsc	status,2,c
 29544  00486C  D02B               	goto	l1637
 29545                           
 29546                           ; BSR set to: 0
 29547  00486E  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29548  004870  0D01               	mullw	1
 29549  004872  0E72               	movlw	low _ARPEGGIO
 29550  004874  24F3               	addwf	prodl,w,c
 29551  004876  6ED9               	movwf	fsr2l,c
 29552  004878  0E01               	movlw	high _ARPEGGIO
 29553  00487A  20F4               	addwfc	prodh,w,c
 29554  00487C  6EDA               	movwf	fsr2h,c
 29555  00487E  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29556  004880  0D03               	mullw	3
 29557  004882  0EE3               	movlw	low _diatonic_minor
 29558  004884  6F78               	movwf	??_playDiatonicTriadMinor& (0+255),b
 29559  004886  0EF2               	movlw	high _diatonic_minor
 29560  004888  6F79               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 29561  00488A  50F3               	movf	prodl,w,c
 29562  00488C  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29563  00488E  50F4               	movf	prodh,w,c
 29564  004890  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29565  004892  517E               	movf	playDiatonicTriadMinor@i_1689& (0+255),w,b
 29566  004894  0D01               	mullw	1
 29567  004896  50F3               	movf	prodl,w,c
 29568  004898  2778               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 29569  00489A  50F4               	movf	prodh,w,c
 29570  00489C  2379               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29571  00489E  C078  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 29572  0048A2  C079  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 29573  0048A6                     	if	0	;tblptru may be non-zero
 29574  0048A6                     	endif
 29575  0048A6                     	if	0	;tblptru may be non-zero
 29576  0048A6                     	endif
 29577  0048A6  0008               	tblrd		*
 29578  0048A8  CFF5 F07A          	movff	tablat,??_playDiatonicTriadMinor+2
 29579  0048AC  5177               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 29580  0048AE  0D03               	mullw	3
 29581  0048B0  0EE3               	movlw	low _diatonic_minor
 29582  0048B2  24F3               	addwf	prodl,w,c
 29583  0048B4  6EF6               	movwf	tblptrl,c
 29584  0048B6  0EF2               	movlw	high _diatonic_minor
 29585  0048B8  20F4               	addwfc	prodh,w,c
 29586  0048BA  6EF7               	movwf	tblptrh,c
 29587  0048BC                     	if	0	;There are less than 3 active tblptr bytes
 29588  0048BC                     	endif
 29589  0048BC  0008               	tblrd		*
 29590  0048BE  50F5               	movf	tablat,w,c
 29591  0048C0  257A               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 29592  0048C2  6EDF               	movwf	indf2,c
 29593  0048C4                     l1637:
 29594                           
 29595                           ; BSR set to: 0
 29596                           
 29597                           ; BSR set to: 0
 29598  0048C4  2B7E               	incf	playDiatonicTriadMinor@i_1689& (0+255),f,b
 29599  0048C6  D7B6               	goto	l16811
 29600  0048C8                     u24080:
 29601                           
 29602                           ; BSR set to: 0
 29603                           ;keyboard.c: 1215: }
 29604                           ;keyboard.c: 1217: NUM_NOTES_PRESSED = 3;
 29605                           
 29606                           ; BSR set to: 0
 29607  0048C8  0E03               	movlw	3
 29608  0048CA  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29609                           
 29610                           ; BSR set to: 0
 29611                           ;keyboard.c: 1220: if(LATCH == 0) {latch_was_pressed = 0;}
 29612  0048CC  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 29613                           
 29614                           ; BSR set to: 0
 29615  0048CE  9A34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29616                           
 29617                           ; BSR set to: 0
 29618                           ;keyboard.c: 1223: finish_arpeggio_setup();
 29619                           
 29620                           ; BSR set to: 0
 29621  0048D0  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 29622                           
 29623                           ;keyboard.c: 1225: TMR0ON = 1;
 29624  0048D4  8ED5               	bsf	4053,7,c	;volatile
 29625                           
 29626                           ;keyboard.c: 1227: return;
 29627  0048D6  0012               	return	
 29628  0048D8                     l1631:
 29629                           
 29630                           ;keyboard.c: 1228: }
 29631                           ;keyboard.c: 1230: if((ON_OFF == 0) && (LATCH == 0)) {
 29632  0048D8  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29633  0048DA  0012               	return	
 29634  0048DC  B035               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 29635  0048DE  0012               	return	
 29636                           
 29637                           ;keyboard.c: 1232: if(NUM_NOTES_PRESSED > 0){
 29638  0048E0  0100               	movlb	0	; () banked
 29639  0048E2  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 29640  0048E4  B4D8               	btfsc	status,2,c
 29641  0048E6  D00A               	goto	l1641
 29642                           
 29643                           ; BSR set to: 0
 29644                           ;keyboard.c: 1233: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 29645  0048E8  0E00               	movlw	0
 29646  0048EA  B034               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 29647  0048EC  0E01               	movlw	1
 29648  0048EE  ECCC  F049         	call	_wait_one_pulse
 29649                           
 29650                           ;keyboard.c: 1234: if(note_off_was_sent == 0) {key_press_release_note_off();}
 29651  0048F2  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 29652  0048F4  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 29653                           
 29654                           ;keyboard.c: 1235: TIMER_OVERFLOWS = 0;
 29655  0048F8  0E00               	movlw	0
 29656  0048FA  6E54               	movwf	_TIMER_OVERFLOWS,c
 29657  0048FC                     l1641:
 29658                           
 29659                           ;keyboard.c: 1236: }
 29660                           ;keyboard.c: 1238: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 29661  0048FC  C0E6  F078         	movff	_parallel,??_playDiatonicTriadMinor
 29662  004900  0100               	movlb	0	; () banked
 29663  004902  6B79               	clrf	(??_playDiatonicTriadMinor+1)& (0+255),b
 29664  004904  BF78               	btfsc	??_playDiatonicTriadMinor& (0+255),7,b
 29665  004906  0779               	decf	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 29666  004908  517C               	movf	playDiatonicTriadMinor@pitch& (0+255),w,b
 29667  00490A  6F7A               	movwf	(??_playDiatonicTriadMinor+2)& (0+255),b
 29668  00490C  6B7B               	clrf	(??_playDiatonicTriadMinor+3)& (0+255),b
 29669  00490E  5178               	movf	??_playDiatonicTriadMinor& (0+255),w,b
 29670  004910  197A               	xorwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 29671  004912  E106               	bnz	l16855
 29672  004914  5179               	movf	(??_playDiatonicTriadMinor+1)& (0+255),w,b
 29673  004916  197B               	xorwf	(??_playDiatonicTriadMinor+3)& (0+255),w,b
 29674  004918  A4D8               	btfss	status,2,c
 29675  00491A  D002               	goto	l1643
 29676                           
 29677                           ; BSR set to: 0
 29678  00491C  0E00               	movlw	0
 29679  00491E  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29680  004920                     l1643:
 29681  004920                     l16855:
 29682                           
 29683                           ; BSR set to: 0
 29684                           ;keyboard.c: 1240: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 29685  004920  BC34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 29686                           
 29687                           ; BSR set to: 0
 29688  004922  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29689  004924  D001               	goto	l1644
 29690                           
 29691                           ; BSR set to: 0
 29692                           ;keyboard.c: 1241: LATCH = 1;
 29693  004926  8035               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 29694  004928                     l1644:
 29695                           
 29696                           ; BSR set to: 0
 29697                           ;keyboard.c: 1242: }
 29698                           ;keyboard.c: 1245: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 29699  004928  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29700  00492A  D002               	goto	u24180
 29701                           
 29702                           ; BSR set to: 0
 29703  00492C  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29704  00492E  D006               	goto	l1645
 29705  004930                     u24180:
 29706                           
 29707                           ; BSR set to: 0
 29708  004930  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29709  004932  D004               	goto	l1645
 29710                           
 29711                           ; BSR set to: 0
 29712                           ;keyboard.c: 1246: NUM_NOTES_PRESSED = 0;
 29713  004934  0E00               	movlw	0
 29714  004936  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 29715                           
 29716                           ;keyboard.c: 1247: ARRAY_INDEX = 0;
 29717  004938  0E00               	movlw	0
 29718  00493A  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 29719  00493C                     l1645:
 29720                           
 29721                           ; BSR set to: 0
 29722                           ;keyboard.c: 1248: }
 29723                           ;keyboard.c: 1251: finish_arpeggio_setup();
 29724                           
 29725                           ; BSR set to: 0
 29726  00493C  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 29727                           
 29728                           ;keyboard.c: 1252: TMR0ON = 1;
 29729  004940  8ED5               	bsf	4053,7,c	;volatile
 29730                           
 29731                           ;keyboard.c: 1254: return;
 29732  004942  0012               	return	
 29733  004944                     __end_of_playDiatonicTriadMinor:
 29734                           	opt stack 0
 29735                           tblptru	equ	0xFF8
 29736                           tblptrh	equ	0xFF7
 29737                           tblptrl	equ	0xFF6
 29738                           tablat	equ	0xFF5
 29739                           prodh	equ	0xFF4
 29740                           prodl	equ	0xFF3
 29741                           intcon	equ	0xFF2
 29742                           intcon2	equ	0xFF1
 29743                           postinc0	equ	0xFEE
 29744                           wreg	equ	0xFE8
 29745                           indf1	equ	0xFE7
 29746                           postdec1	equ	0xFE5
 29747                           fsr1h	equ	0xFE2
 29748                           fsr1l	equ	0xFE1
 29749                           indf2	equ	0xFDF
 29750                           postinc2	equ	0xFDE
 29751                           plusw2	equ	0xFDB
 29752                           fsr2h	equ	0xFDA
 29753                           fsr2l	equ	0xFD9
 29754                           status	equ	0xFD8
 29755                           
 29756 ;; *************** function _playDiatonicTriadMajor *****************
 29757 ;; Defined at:
 29758 ;;		line 1041 in file "keyboard.c"
 29759 ;; Parameters:    Size  Location     Type
 29760 ;;  pitch           1    wreg     unsigned char 
 29761 ;;  index           1   23[BANK0 ] unsigned char 
 29762 ;; Auto vars:     Size  Location     Type
 29763 ;;  pitch           1   30[BANK0 ] unsigned char 
 29764 ;;  i               1   29[BANK0 ] unsigned char 
 29765 ;;  i               1   28[BANK0 ] unsigned char 
 29766 ;; Return value:  Size  Location     Type
 29767 ;;                  1    wreg      void 
 29768 ;; Registers used:
 29769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29770 ;; Tracked objects:
 29771 ;;		On entry : 0/0
 29772 ;;		On exit  : 0/0
 29773 ;;		Unchanged: 0/0
 29774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 29775 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29776 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29777 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29778 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29779 ;;Total ram usage:        8 bytes
 29780 ;; Hardware stack levels used:    1
 29781 ;; Hardware stack levels required when called:   10
 29782 ;; This function calls:
 29783 ;;		_finish_arpeggio_setup
 29784 ;;		_key_press_release_note_off
 29785 ;;		_noteOff
 29786 ;;		_noteOn
 29787 ;;		_wait_one_pulse
 29788 ;; This function is called by:
 29789 ;;		_playThisNote8
 29790 ;; This function uses a non-reentrant model
 29791 ;;
 29792                           
 29793                           	psect	text86
 29794  00568C                     __ptext86:
 29795                           	opt stack 0
 29796  00568C                     _playDiatonicTriadMajor:
 29797                           	opt stack 15
 29798                           
 29799                           ;incstack = 0
 29800                           ;playDiatonicTriadMajor@pitch stored from wreg
 29801  00568C  0100               	movlb	0	; () banked
 29802  00568E  6F7E               	movwf	playDiatonicTriadMajor@pitch& (0+255),b
 29803                           
 29804                           ;keyboard.c: 1044: if(ARPEGGIO_ON == 0){
 29805  005690  B635               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 29806  005692  D049               	goto	u23740
 29807                           
 29808                           ;keyboard.c: 1045: for(unsigned char i = 0; i<3; i++){
 29809  005694  0E00               	movlw	0
 29810  005696  0100               	movlb	0	; () banked
 29811  005698  6F7C               	movwf	playDiatonicTriadMajor@i& (0+255),b
 29812  00569A                     l16681:
 29813                           
 29814                           ; BSR set to: 0
 29815  00569A  0E02               	movlw	2
 29816  00569C  657C               	cpfsgt	playDiatonicTriadMajor@i& (0+255),b
 29817  00569E  D001               	goto	l1576
 29818  0056A0  D042               	goto	u23740
 29819  0056A2                     l1576:
 29820                           
 29821                           ; BSR set to: 0
 29822                           ;keyboard.c: 1046: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_major[index][i],velo
      +                          city);}
 29823  0056A2  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29824  0056A4  D01D               	goto	l1578
 29825                           
 29826                           ; BSR set to: 0
 29827  0056A6  5177               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 29828  0056A8  0D03               	mullw	3
 29829  0056AA  0E10               	movlw	low _diatonic_major
 29830  0056AC  6F78               	movwf	??_playDiatonicTriadMajor& (0+255),b
 29831  0056AE  0EF3               	movlw	high _diatonic_major
 29832  0056B0  6F79               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 29833  0056B2  50F3               	movf	prodl,w,c
 29834  0056B4  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 29835  0056B6  50F4               	movf	prodh,w,c
 29836  0056B8  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 29837  0056BA  517C               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 29838  0056BC  0D01               	mullw	1
 29839  0056BE  50F3               	movf	prodl,w,c
 29840  0056C0  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 29841  0056C2  50F4               	movf	prodh,w,c
 29842  0056C4  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 29843  0056C6  C078  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 29844  0056CA  C079  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 29845  0056CE                     	if	0	;tblptru may be non-zero
 29846  0056CE                     	endif
 29847  0056CE                     	if	0	;tblptru may be non-zero
 29848  0056CE                     	endif
 29849  0056CE  0008               	tblrd		*
 29850  0056D0  50F5               	movf	tablat,w,c
 29851  0056D2  257E               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 29852  0056D4  6F6E               	movwf	noteOn@pitch& (0+255),b
 29853  0056D6  C0FD  F06F         	movff	_velocity,noteOn@velocity
 29854  0056DA  51F6               	movf	_channel& (0+255),w,b
 29855  0056DC  ECA2  F044         	call	_noteOn
 29856  0056E0                     l1578:
 29857                           
 29858                           ;keyboard.c: 1047: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_major[index][i],vel
      +                          ocity);}
 29859  0056E0  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29860  0056E2  D01E               	goto	l1579
 29861  0056E4  0100               	movlb	0	; () banked
 29862  0056E6  5177               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 29863  0056E8  0D03               	mullw	3
 29864  0056EA  0E10               	movlw	low _diatonic_major
 29865  0056EC  6F78               	movwf	??_playDiatonicTriadMajor& (0+255),b
 29866  0056EE  0EF3               	movlw	high _diatonic_major
 29867  0056F0  6F79               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 29868  0056F2  50F3               	movf	prodl,w,c
 29869  0056F4  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 29870  0056F6  50F4               	movf	prodh,w,c
 29871  0056F8  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 29872  0056FA  517C               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 29873  0056FC  0D01               	mullw	1
 29874  0056FE  50F3               	movf	prodl,w,c
 29875  005700  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 29876  005702  50F4               	movf	prodh,w,c
 29877  005704  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 29878  005706  C078  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 29879  00570A  C079  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 29880  00570E                     	if	0	;tblptru may be non-zero
 29881  00570E                     	endif
 29882  00570E                     	if	0	;tblptru may be non-zero
 29883  00570E                     	endif
 29884  00570E  0008               	tblrd		*
 29885  005710  50F5               	movf	tablat,w,c
 29886  005712  257E               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 29887  005714  6F6B               	movwf	noteOff@pitch& (0+255),b
 29888  005716  C0FD  F06C         	movff	_velocity,noteOff@velocity
 29889  00571A  51F6               	movf	_channel& (0+255),w,b
 29890  00571C  ECC9  F047         	call	_noteOff
 29891  005720                     l1579:
 29892  005720  0100               	movlb	0	; () banked
 29893  005722  2B7C               	incf	playDiatonicTriadMajor@i& (0+255),f,b
 29894  005724  D7BA               	goto	l16681
 29895  005726                     u23740:
 29896                           
 29897                           ;keyboard.c: 1048: }
 29898                           ;keyboard.c: 1049: }
 29899                           ;keyboard.c: 1052: if(ARPEGGIO_ON == 1){
 29900                           
 29901                           ; BSR set to: 0
 29902  005726  A635               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 29903  005728  0012               	return	
 29904                           
 29905                           ;keyboard.c: 1053: if(ON_OFF == 1) {
 29906  00572A  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29907  00572C  D041               	goto	l1581
 29908                           
 29909                           ;keyboard.c: 1055: TMR0ON = 0;
 29910  00572E  9ED5               	bcf	4053,7,c	;volatile
 29911                           
 29912                           ;keyboard.c: 1057: parallel = pitch;
 29913  005730  C07E  F0E6         	movff	playDiatonicTriadMajor@pitch,_parallel
 29914                           
 29915                           ;keyboard.c: 1060: if(NUM_NOTES_PRESSED > 0){
 29916  005734  0100               	movlb	0	; () banked
 29917  005736  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 29918  005738  B4D8               	btfsc	status,2,c
 29919  00573A  D00A               	goto	l1582
 29920                           
 29921                           ; BSR set to: 0
 29922                           ;keyboard.c: 1061: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 29923  00573C  0E00               	movlw	0
 29924  00573E  B234               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 29925  005740  0E01               	movlw	1
 29926  005742  ECCC  F049         	call	_wait_one_pulse
 29927                           
 29928                           ;keyboard.c: 1062: if(note_off_was_sent == 0) {key_press_release_note_off();}
 29929  005746  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 29930  005748  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 29931                           
 29932                           ;keyboard.c: 1063: TIMER_OVERFLOWS = 0;
 29933  00574C  0E00               	movlw	0
 29934  00574E  6E54               	movwf	_TIMER_OVERFLOWS,c
 29935  005750                     l1582:
 29936                           
 29937                           ;keyboard.c: 1064: }
 29938                           ;keyboard.c: 1066: for(unsigned char i = 0; i<3; i++){
 29939  005750  0E00               	movlw	0
 29940  005752  0100               	movlb	0	; () banked
 29941  005754  6F7D               	movwf	playDiatonicTriadMajor@i_1679& (0+255),b
 29942  005756                     l16711:
 29943                           
 29944                           ; BSR set to: 0
 29945  005756  0E02               	movlw	2
 29946  005758  657D               	cpfsgt	playDiatonicTriadMajor@i_1679& (0+255),b
 29947  00575A  D001               	goto	l1584
 29948  00575C  D022               	goto	u23800
 29949  00575E                     l1584:
 29950                           
 29951                           ; BSR set to: 0
 29952                           ;keyboard.c: 1067: ARPEGGIO[i] = pitch + diatonic_major[index][i];
 29953                           
 29954                           ; BSR set to: 0
 29955  00575E  517D               	movf	playDiatonicTriadMajor@i_1679& (0+255),w,b
 29956  005760  0D01               	mullw	1
 29957  005762  0E72               	movlw	low _ARPEGGIO
 29958  005764  24F3               	addwf	prodl,w,c
 29959  005766  6ED9               	movwf	fsr2l,c
 29960  005768  0E01               	movlw	high _ARPEGGIO
 29961  00576A  20F4               	addwfc	prodh,w,c
 29962  00576C  6EDA               	movwf	fsr2h,c
 29963  00576E  5177               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 29964  005770  0D03               	mullw	3
 29965  005772  0E10               	movlw	low _diatonic_major
 29966  005774  6F78               	movwf	??_playDiatonicTriadMajor& (0+255),b
 29967  005776  0EF3               	movlw	high _diatonic_major
 29968  005778  6F79               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 29969  00577A  50F3               	movf	prodl,w,c
 29970  00577C  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 29971  00577E  50F4               	movf	prodh,w,c
 29972  005780  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 29973  005782  517D               	movf	playDiatonicTriadMajor@i_1679& (0+255),w,b
 29974  005784  0D01               	mullw	1
 29975  005786  50F3               	movf	prodl,w,c
 29976  005788  2778               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 29977  00578A  50F4               	movf	prodh,w,c
 29978  00578C  2379               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 29979  00578E  C078  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 29980  005792  C079  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 29981  005796                     	if	0	;tblptru may be non-zero
 29982  005796                     	endif
 29983  005796                     	if	0	;tblptru may be non-zero
 29984  005796                     	endif
 29985  005796  0008               	tblrd		*
 29986  005798  50F5               	movf	tablat,w,c
 29987  00579A  257E               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 29988  00579C  6EDF               	movwf	indf2,c
 29989                           
 29990                           ; BSR set to: 0
 29991  00579E  2B7D               	incf	playDiatonicTriadMajor@i_1679& (0+255),f,b
 29992  0057A0  D7DA               	goto	l16711
 29993  0057A2                     u23800:
 29994                           
 29995                           ; BSR set to: 0
 29996                           ;keyboard.c: 1068: }
 29997                           ;keyboard.c: 1070: NUM_NOTES_PRESSED = 3;
 29998                           
 29999                           ; BSR set to: 0
 30000  0057A2  0E03               	movlw	3
 30001  0057A4  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30002                           
 30003                           ; BSR set to: 0
 30004                           ;keyboard.c: 1073: if(LATCH == 0) {latch_was_pressed = 0;}
 30005  0057A6  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 30006                           
 30007                           ; BSR set to: 0
 30008  0057A8  9A34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30009                           
 30010                           ; BSR set to: 0
 30011                           ;keyboard.c: 1076: finish_arpeggio_setup();
 30012                           
 30013                           ; BSR set to: 0
 30014  0057AA  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 30015                           
 30016                           ;keyboard.c: 1078: TMR0ON = 1;
 30017  0057AE  8ED5               	bsf	4053,7,c	;volatile
 30018  0057B0                     l1581:
 30019                           
 30020                           ;keyboard.c: 1079: }
 30021                           ;keyboard.c: 1081: if((ON_OFF == 0) && (LATCH == 0)) {
 30022  0057B0  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30023  0057B2  0012               	return	
 30024  0057B4  B035               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 30025  0057B6  0012               	return	
 30026                           
 30027                           ;keyboard.c: 1083: if(NUM_NOTES_PRESSED > 0){
 30028  0057B8  0100               	movlb	0	; () banked
 30029  0057BA  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30030  0057BC  B4D8               	btfsc	status,2,c
 30031  0057BE  D00A               	goto	l1588
 30032                           
 30033                           ; BSR set to: 0
 30034                           ;keyboard.c: 1084: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 30035  0057C0  0E00               	movlw	0
 30036  0057C2  B034               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 30037  0057C4  0E01               	movlw	1
 30038  0057C6  ECCC  F049         	call	_wait_one_pulse
 30039                           
 30040                           ;keyboard.c: 1085: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30041  0057CA  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30042  0057CC  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 30043                           
 30044                           ;keyboard.c: 1086: TIMER_OVERFLOWS = 0;
 30045  0057D0  0E00               	movlw	0
 30046  0057D2  6E54               	movwf	_TIMER_OVERFLOWS,c
 30047  0057D4                     l1588:
 30048                           
 30049                           ;keyboard.c: 1087: }
 30050                           ;keyboard.c: 1089: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 30051  0057D4  C0E6  F078         	movff	_parallel,??_playDiatonicTriadMajor
 30052  0057D8  0100               	movlb	0	; () banked
 30053  0057DA  6B79               	clrf	(??_playDiatonicTriadMajor+1)& (0+255),b
 30054  0057DC  BF78               	btfsc	??_playDiatonicTriadMajor& (0+255),7,b
 30055  0057DE  0779               	decf	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 30056  0057E0  517E               	movf	playDiatonicTriadMajor@pitch& (0+255),w,b
 30057  0057E2  6F7A               	movwf	(??_playDiatonicTriadMajor+2)& (0+255),b
 30058  0057E4  6B7B               	clrf	(??_playDiatonicTriadMajor+3)& (0+255),b
 30059  0057E6  5178               	movf	??_playDiatonicTriadMajor& (0+255),w,b
 30060  0057E8  197A               	xorwf	(??_playDiatonicTriadMajor+2)& (0+255),w,b
 30061  0057EA  E106               	bnz	l16749
 30062  0057EC  5179               	movf	(??_playDiatonicTriadMajor+1)& (0+255),w,b
 30063  0057EE  197B               	xorwf	(??_playDiatonicTriadMajor+3)& (0+255),w,b
 30064  0057F0  A4D8               	btfss	status,2,c
 30065  0057F2  D002               	goto	l1590
 30066                           
 30067                           ; BSR set to: 0
 30068  0057F4  0E00               	movlw	0
 30069  0057F6  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30070  0057F8                     l1590:
 30071  0057F8                     l16749:
 30072                           
 30073                           ; BSR set to: 0
 30074                           ;keyboard.c: 1091: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 30075  0057F8  BC34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 30076                           
 30077                           ; BSR set to: 0
 30078  0057FA  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30079  0057FC  D001               	goto	l1591
 30080                           
 30081                           ; BSR set to: 0
 30082                           ;keyboard.c: 1092: LATCH = 1;
 30083  0057FE  8035               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 30084  005800                     l1591:
 30085                           
 30086                           ; BSR set to: 0
 30087                           ;keyboard.c: 1093: }
 30088                           ;keyboard.c: 1096: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 30089  005800  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30090  005802  D002               	goto	u23900
 30091                           
 30092                           ; BSR set to: 0
 30093  005804  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30094  005806  D006               	goto	l1592
 30095  005808                     u23900:
 30096                           
 30097                           ; BSR set to: 0
 30098  005808  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30099  00580A  D004               	goto	l1592
 30100                           
 30101                           ; BSR set to: 0
 30102                           ;keyboard.c: 1097: NUM_NOTES_PRESSED = 0;
 30103  00580C  0E00               	movlw	0
 30104  00580E  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30105                           
 30106                           ;keyboard.c: 1098: ARRAY_INDEX = 0;
 30107  005810  0E00               	movlw	0
 30108  005812  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 30109  005814                     l1592:
 30110                           
 30111                           ; BSR set to: 0
 30112                           ;keyboard.c: 1099: }
 30113                           ;keyboard.c: 1102: finish_arpeggio_setup();
 30114                           
 30115                           ; BSR set to: 0
 30116  005814  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 30117                           
 30118                           ;keyboard.c: 1103: TMR0ON = 1;
 30119  005818  8ED5               	bsf	4053,7,c	;volatile
 30120  00581A  0012               	return	
 30121  00581C                     __end_of_playDiatonicTriadMajor:
 30122                           	opt stack 0
 30123                           tblptru	equ	0xFF8
 30124                           tblptrh	equ	0xFF7
 30125                           tblptrl	equ	0xFF6
 30126                           tablat	equ	0xFF5
 30127                           prodh	equ	0xFF4
 30128                           prodl	equ	0xFF3
 30129                           intcon	equ	0xFF2
 30130                           intcon2	equ	0xFF1
 30131                           postinc0	equ	0xFEE
 30132                           wreg	equ	0xFE8
 30133                           indf1	equ	0xFE7
 30134                           postdec1	equ	0xFE5
 30135                           fsr1h	equ	0xFE2
 30136                           fsr1l	equ	0xFE1
 30137                           indf2	equ	0xFDF
 30138                           postinc2	equ	0xFDE
 30139                           plusw2	equ	0xFDB
 30140                           fsr2h	equ	0xFDA
 30141                           fsr2l	equ	0xFD9
 30142                           status	equ	0xFD8
 30143                           
 30144 ;; *************** function _playDiatonicSeventhMinor *****************
 30145 ;; Defined at:
 30146 ;;		line 1259 in file "keyboard.c"
 30147 ;; Parameters:    Size  Location     Type
 30148 ;;  pitch           1    wreg     unsigned char 
 30149 ;;  index           1   23[BANK0 ] unsigned char 
 30150 ;; Auto vars:     Size  Location     Type
 30151 ;;  pitch           1   28[BANK0 ] unsigned char 
 30152 ;;  i               1   30[BANK0 ] unsigned char 
 30153 ;;  i               1   29[BANK0 ] unsigned char 
 30154 ;; Return value:  Size  Location     Type
 30155 ;;                  1    wreg      void 
 30156 ;; Registers used:
 30157 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30158 ;; Tracked objects:
 30159 ;;		On entry : 0/0
 30160 ;;		On exit  : 0/0
 30161 ;;		Unchanged: 0/0
 30162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 30163 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30164 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30165 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30166 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30167 ;;Total ram usage:        8 bytes
 30168 ;; Hardware stack levels used:    1
 30169 ;; Hardware stack levels required when called:   10
 30170 ;; This function calls:
 30171 ;;		_finish_arpeggio_setup
 30172 ;;		_key_press_release_note_off
 30173 ;;		_noteOff
 30174 ;;		_noteOn
 30175 ;;		_wait_one_pulse
 30176 ;; This function is called by:
 30177 ;;		_playThisNote8
 30178 ;; This function uses a non-reentrant model
 30179 ;;
 30180                           
 30181                           	psect	text87
 30182  004944                     __ptext87:
 30183                           	opt stack 0
 30184  004944                     _playDiatonicSeventhMinor:
 30185                           	opt stack 15
 30186                           
 30187                           ;incstack = 0
 30188                           ;playDiatonicSeventhMinor@pitch stored from wreg
 30189  004944  0100               	movlb	0	; () banked
 30190  004946  6F7C               	movwf	playDiatonicSeventhMinor@pitch& (0+255),b
 30191                           
 30192                           ;keyboard.c: 1262: if(ARPEGGIO_ON == 0){
 30193  004948  B635               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30194  00494A  D08B               	goto	u24500
 30195                           
 30196                           ;keyboard.c: 1263: for(unsigned char i = 0; i<4; i++){
 30197  00494C  0E00               	movlw	0
 30198  00494E  0100               	movlb	0	; () banked
 30199  004950  6F7D               	movwf	playDiatonicSeventhMinor@i& (0+255),b
 30200  004952                     l16963:
 30201                           
 30202                           ; BSR set to: 0
 30203  004952  0E03               	movlw	3
 30204  004954  657D               	cpfsgt	playDiatonicSeventhMinor@i& (0+255),b
 30205  004956  D001               	goto	l1651
 30206  004958  D084               	goto	u24500
 30207  00495A                     l1651:
 30208                           
 30209                           ; BSR set to: 0
 30210                           ;keyboard.c: 1264: if(i==0){
 30211                           
 30212                           ; BSR set to: 0
 30213  00495A  517D               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 30214  00495C  A4D8               	btfss	status,2,c
 30215  00495E  D025               	goto	l1655
 30216                           
 30217                           ; BSR set to: 0
 30218                           ;keyboard.c: 1265: if(ON_OFF == 1) {noteOn(channel,diatonic_seventh_minor[index][0],velo
      +                          city);}
 30219  004960  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30220  004962  D010               	goto	l1654
 30221                           
 30222                           ; BSR set to: 0
 30223  004964  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30224  004966  0D04               	mullw	4
 30225  004968  0E6B               	movlw	low _diatonic_seventh_minor
 30226  00496A  24F3               	addwf	prodl,w,c
 30227  00496C  6EF6               	movwf	tblptrl,c
 30228  00496E  0EF2               	movlw	high _diatonic_seventh_minor
 30229  004970  20F4               	addwfc	prodh,w,c
 30230  004972  6EF7               	movwf	tblptrh,c
 30231  004974                     	if	0	;There are less than 3 active tblptr bytes
 30232  004974                     	endif
 30233  004974  0008               	tblrd		*
 30234  004976  CFF5 F06E          	movff	tablat,noteOn@pitch
 30235  00497A  C0FD  F06F         	movff	_velocity,noteOn@velocity
 30236  00497E  51F6               	movf	_channel& (0+255),w,b
 30237  004980  ECA2  F044         	call	_noteOn
 30238  004984                     l1654:
 30239                           
 30240                           ;keyboard.c: 1266: if(ON_OFF == 0) {noteOff(channel,diatonic_seventh_minor[index][0],vel
      +                          ocity);}
 30241  004984  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30242  004986  D011               	goto	l1655
 30243  004988  0100               	movlb	0	; () banked
 30244  00498A  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30245  00498C  0D04               	mullw	4
 30246  00498E  0E6B               	movlw	low _diatonic_seventh_minor
 30247  004990  24F3               	addwf	prodl,w,c
 30248  004992  6EF6               	movwf	tblptrl,c
 30249  004994  0EF2               	movlw	high _diatonic_seventh_minor
 30250  004996  20F4               	addwfc	prodh,w,c
 30251  004998  6EF7               	movwf	tblptrh,c
 30252  00499A                     	if	0	;There are less than 3 active tblptr bytes
 30253  00499A                     	endif
 30254  00499A  0008               	tblrd		*
 30255  00499C  CFF5 F06B          	movff	tablat,noteOff@pitch
 30256  0049A0  C0FD  F06C         	movff	_velocity,noteOff@velocity
 30257  0049A4  51F6               	movf	_channel& (0+255),w,b
 30258  0049A6  ECC9  F047         	call	_noteOff
 30259  0049AA                     l1655:
 30260                           
 30261                           ;keyboard.c: 1267: }
 30262                           ;keyboard.c: 1268: if(i>0){
 30263  0049AA  0100               	movlb	0	; () banked
 30264  0049AC  517D               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 30265  0049AE  B4D8               	btfsc	status,2,c
 30266  0049B0  D055               	goto	l1658
 30267                           
 30268                           ; BSR set to: 0
 30269                           ;keyboard.c: 1269: if(ON_OFF == 1) noteOn(channel,diatonic_seventh_minor[index][0] + dia
      +                          tonic_seventh_minor[index][i],velocity);
 30270  0049B2  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30271  0049B4  D028               	goto	l1657
 30272                           
 30273                           ; BSR set to: 0
 30274  0049B6  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30275  0049B8  0D04               	mullw	4
 30276  0049BA  0E6B               	movlw	low _diatonic_seventh_minor
 30277  0049BC  6F78               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 30278  0049BE  0EF2               	movlw	high _diatonic_seventh_minor
 30279  0049C0  6F79               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 30280  0049C2  50F3               	movf	prodl,w,c
 30281  0049C4  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30282  0049C6  50F4               	movf	prodh,w,c
 30283  0049C8  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30284  0049CA  517D               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 30285  0049CC  0D01               	mullw	1
 30286  0049CE  50F3               	movf	prodl,w,c
 30287  0049D0  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30288  0049D2  50F4               	movf	prodh,w,c
 30289  0049D4  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30290  0049D6  C078  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 30291  0049DA  C079  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 30292  0049DE                     	if	0	;tblptru may be non-zero
 30293  0049DE                     	endif
 30294  0049DE                     	if	0	;tblptru may be non-zero
 30295  0049DE                     	endif
 30296  0049DE  0008               	tblrd		*
 30297  0049E0  CFF5 F07A          	movff	tablat,??_playDiatonicSeventhMinor+2
 30298  0049E4  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30299  0049E6  0D04               	mullw	4
 30300  0049E8  0E6B               	movlw	low _diatonic_seventh_minor
 30301  0049EA  24F3               	addwf	prodl,w,c
 30302  0049EC  6EF6               	movwf	tblptrl,c
 30303  0049EE  0EF2               	movlw	high _diatonic_seventh_minor
 30304  0049F0  20F4               	addwfc	prodh,w,c
 30305  0049F2  6EF7               	movwf	tblptrh,c
 30306  0049F4                     	if	0	;There are less than 3 active tblptr bytes
 30307  0049F4                     	endif
 30308  0049F4  0008               	tblrd		*
 30309  0049F6  50F5               	movf	tablat,w,c
 30310  0049F8  257A               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 30311  0049FA  6F6E               	movwf	noteOn@pitch& (0+255),b
 30312  0049FC  C0FD  F06F         	movff	_velocity,noteOn@velocity
 30313  004A00  51F6               	movf	_channel& (0+255),w,b
 30314  004A02  ECA2  F044         	call	_noteOn
 30315  004A06                     l1657:
 30316                           
 30317                           ;keyboard.c: 1270: if(ON_OFF == 0) noteOff(channel,diatonic_seventh_minor[index][0] + di
      +                          atonic_seventh_minor[index][i],velocity);
 30318  004A06  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30319  004A08  D029               	goto	l1658
 30320  004A0A  0100               	movlb	0	; () banked
 30321  004A0C  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30322  004A0E  0D04               	mullw	4
 30323  004A10  0E6B               	movlw	low _diatonic_seventh_minor
 30324  004A12  6F78               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 30325  004A14  0EF2               	movlw	high _diatonic_seventh_minor
 30326  004A16  6F79               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 30327  004A18  50F3               	movf	prodl,w,c
 30328  004A1A  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30329  004A1C  50F4               	movf	prodh,w,c
 30330  004A1E  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30331  004A20  517D               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 30332  004A22  0D01               	mullw	1
 30333  004A24  50F3               	movf	prodl,w,c
 30334  004A26  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30335  004A28  50F4               	movf	prodh,w,c
 30336  004A2A  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30337  004A2C  C078  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 30338  004A30  C079  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 30339  004A34                     	if	0	;tblptru may be non-zero
 30340  004A34                     	endif
 30341  004A34                     	if	0	;tblptru may be non-zero
 30342  004A34                     	endif
 30343  004A34  0008               	tblrd		*
 30344  004A36  CFF5 F07A          	movff	tablat,??_playDiatonicSeventhMinor+2
 30345  004A3A  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30346  004A3C  0D04               	mullw	4
 30347  004A3E  0E6B               	movlw	low _diatonic_seventh_minor
 30348  004A40  24F3               	addwf	prodl,w,c
 30349  004A42  6EF6               	movwf	tblptrl,c
 30350  004A44  0EF2               	movlw	high _diatonic_seventh_minor
 30351  004A46  20F4               	addwfc	prodh,w,c
 30352  004A48  6EF7               	movwf	tblptrh,c
 30353  004A4A                     	if	0	;There are less than 3 active tblptr bytes
 30354  004A4A                     	endif
 30355  004A4A  0008               	tblrd		*
 30356  004A4C  50F5               	movf	tablat,w,c
 30357  004A4E  257A               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 30358  004A50  6F6B               	movwf	noteOff@pitch& (0+255),b
 30359  004A52  C0FD  F06C         	movff	_velocity,noteOff@velocity
 30360  004A56  51F6               	movf	_channel& (0+255),w,b
 30361  004A58  ECC9  F047         	call	_noteOff
 30362  004A5C                     l1658:
 30363  004A5C  0100               	movlb	0	; () banked
 30364  004A5E  2B7D               	incf	playDiatonicSeventhMinor@i& (0+255),f,b
 30365  004A60  D778               	goto	l16963
 30366  004A62                     u24500:
 30367                           
 30368                           ;keyboard.c: 1271: }
 30369                           ;keyboard.c: 1272: }
 30370                           ;keyboard.c: 1273: }
 30371                           ;keyboard.c: 1276: if(ARPEGGIO_ON == 1){
 30372                           
 30373                           ; BSR set to: 0
 30374  004A62  A635               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30375  004A64  0012               	return	
 30376                           
 30377                           ;keyboard.c: 1278: if(ON_OFF == 1) {
 30378  004A66  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30379  004A68  D065               	goto	l1660
 30380                           
 30381                           ;keyboard.c: 1280: TMR0ON = 0;
 30382  004A6A  9ED5               	bcf	4053,7,c	;volatile
 30383                           
 30384                           ;keyboard.c: 1282: parallel = pitch;
 30385  004A6C  C07C  F0E6         	movff	playDiatonicSeventhMinor@pitch,_parallel
 30386                           
 30387                           ;keyboard.c: 1285: if(NUM_NOTES_PRESSED > 0){
 30388  004A70  0100               	movlb	0	; () banked
 30389  004A72  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30390  004A74  B4D8               	btfsc	status,2,c
 30391  004A76  D00A               	goto	l1661
 30392                           
 30393                           ; BSR set to: 0
 30394                           ;keyboard.c: 1286: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 30395  004A78  0E00               	movlw	0
 30396  004A7A  B234               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 30397  004A7C  0E01               	movlw	1
 30398  004A7E  ECCC  F049         	call	_wait_one_pulse
 30399                           
 30400                           ;keyboard.c: 1287: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30401  004A82  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30402  004A84  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 30403                           
 30404                           ;keyboard.c: 1288: TIMER_OVERFLOWS = 0;
 30405  004A88  0E00               	movlw	0
 30406  004A8A  6E54               	movwf	_TIMER_OVERFLOWS,c
 30407  004A8C                     l1661:
 30408                           
 30409                           ;keyboard.c: 1289: }
 30410                           ;keyboard.c: 1291: for(unsigned char i = 0; i<4; i++){
 30411  004A8C  0E00               	movlw	0
 30412  004A8E  0100               	movlb	0	; () banked
 30413  004A90  6F7E               	movwf	playDiatonicSeventhMinor@i_1694& (0+255),b
 30414  004A92                     l17007:
 30415                           
 30416                           ; BSR set to: 0
 30417  004A92  0E03               	movlw	3
 30418  004A94  657E               	cpfsgt	playDiatonicSeventhMinor@i_1694& (0+255),b
 30419  004A96  D001               	goto	l1663
 30420  004A98  D046               	goto	u24580
 30421  004A9A                     l1663:
 30422                           
 30423                           ; BSR set to: 0
 30424                           ;keyboard.c: 1292: if(i==0){ARPEGGIO[i] = diatonic_seventh_minor[index][0];}
 30425                           
 30426                           ; BSR set to: 0
 30427  004A9A  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30428  004A9C  A4D8               	btfss	status,2,c
 30429  004A9E  D013               	goto	l1665
 30430                           
 30431                           ; BSR set to: 0
 30432  004AA0  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30433  004AA2  0D04               	mullw	4
 30434  004AA4  0E6B               	movlw	low _diatonic_seventh_minor
 30435  004AA6  24F3               	addwf	prodl,w,c
 30436  004AA8  6EF6               	movwf	tblptrl,c
 30437  004AAA  0EF2               	movlw	high _diatonic_seventh_minor
 30438  004AAC  20F4               	addwfc	prodh,w,c
 30439  004AAE  6EF7               	movwf	tblptrh,c
 30440  004AB0                     	if	0	;There are less than 3 active tblptr bytes
 30441  004AB0                     	endif
 30442  004AB0  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30443  004AB2  0D01               	mullw	1
 30444  004AB4  0E72               	movlw	low _ARPEGGIO
 30445  004AB6  24F3               	addwf	prodl,w,c
 30446  004AB8  6ED9               	movwf	fsr2l,c
 30447  004ABA  0E01               	movlw	high _ARPEGGIO
 30448  004ABC  20F4               	addwfc	prodh,w,c
 30449  004ABE  6EDA               	movwf	fsr2h,c
 30450  004AC0  0008               	tblrd		*
 30451  004AC2  CFF5 FFDF          	movff	tablat,indf2
 30452  004AC6                     l1665:
 30453                           
 30454                           ; BSR set to: 0
 30455                           ;keyboard.c: 1293: if(i>0){ARPEGGIO[i] = diatonic_seventh_minor[index][0] + diatonic_sev
      +                          enth_minor[index][i];}
 30456                           
 30457                           ; BSR set to: 0
 30458  004AC6  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30459  004AC8  B4D8               	btfsc	status,2,c
 30460  004ACA  D02B               	goto	l1666
 30461                           
 30462                           ; BSR set to: 0
 30463  004ACC  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30464  004ACE  0D01               	mullw	1
 30465  004AD0  0E72               	movlw	low _ARPEGGIO
 30466  004AD2  24F3               	addwf	prodl,w,c
 30467  004AD4  6ED9               	movwf	fsr2l,c
 30468  004AD6  0E01               	movlw	high _ARPEGGIO
 30469  004AD8  20F4               	addwfc	prodh,w,c
 30470  004ADA  6EDA               	movwf	fsr2h,c
 30471  004ADC  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30472  004ADE  0D04               	mullw	4
 30473  004AE0  0E6B               	movlw	low _diatonic_seventh_minor
 30474  004AE2  6F78               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 30475  004AE4  0EF2               	movlw	high _diatonic_seventh_minor
 30476  004AE6  6F79               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 30477  004AE8  50F3               	movf	prodl,w,c
 30478  004AEA  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30479  004AEC  50F4               	movf	prodh,w,c
 30480  004AEE  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30481  004AF0  517E               	movf	playDiatonicSeventhMinor@i_1694& (0+255),w,b
 30482  004AF2  0D01               	mullw	1
 30483  004AF4  50F3               	movf	prodl,w,c
 30484  004AF6  2778               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 30485  004AF8  50F4               	movf	prodh,w,c
 30486  004AFA  2379               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30487  004AFC  C078  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 30488  004B00  C079  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 30489  004B04                     	if	0	;tblptru may be non-zero
 30490  004B04                     	endif
 30491  004B04                     	if	0	;tblptru may be non-zero
 30492  004B04                     	endif
 30493  004B04  0008               	tblrd		*
 30494  004B06  CFF5 F07A          	movff	tablat,??_playDiatonicSeventhMinor+2
 30495  004B0A  5177               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 30496  004B0C  0D04               	mullw	4
 30497  004B0E  0E6B               	movlw	low _diatonic_seventh_minor
 30498  004B10  24F3               	addwf	prodl,w,c
 30499  004B12  6EF6               	movwf	tblptrl,c
 30500  004B14  0EF2               	movlw	high _diatonic_seventh_minor
 30501  004B16  20F4               	addwfc	prodh,w,c
 30502  004B18  6EF7               	movwf	tblptrh,c
 30503  004B1A                     	if	0	;There are less than 3 active tblptr bytes
 30504  004B1A                     	endif
 30505  004B1A  0008               	tblrd		*
 30506  004B1C  50F5               	movf	tablat,w,c
 30507  004B1E  257A               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 30508  004B20  6EDF               	movwf	indf2,c
 30509  004B22                     l1666:
 30510                           
 30511                           ; BSR set to: 0
 30512                           
 30513                           ; BSR set to: 0
 30514  004B22  2B7E               	incf	playDiatonicSeventhMinor@i_1694& (0+255),f,b
 30515  004B24  D7B6               	goto	l17007
 30516  004B26                     u24580:
 30517                           
 30518                           ; BSR set to: 0
 30519                           ;keyboard.c: 1294: }
 30520                           ;keyboard.c: 1296: NUM_NOTES_PRESSED = 4;
 30521                           
 30522                           ; BSR set to: 0
 30523  004B26  0E04               	movlw	4
 30524  004B28  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30525                           
 30526                           ; BSR set to: 0
 30527                           ;keyboard.c: 1299: if(LATCH == 0) {latch_was_pressed = 0;}
 30528  004B2A  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 30529                           
 30530                           ; BSR set to: 0
 30531  004B2C  9A34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30532                           
 30533                           ; BSR set to: 0
 30534                           ;keyboard.c: 1302: finish_arpeggio_setup();
 30535                           
 30536                           ; BSR set to: 0
 30537  004B2E  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 30538                           
 30539                           ;keyboard.c: 1304: TMR0ON = 1;
 30540  004B32  8ED5               	bsf	4053,7,c	;volatile
 30541  004B34                     l1660:
 30542                           
 30543                           ;keyboard.c: 1305: }
 30544                           ;keyboard.c: 1307: if((ON_OFF == 0) && (LATCH == 0)) {
 30545  004B34  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30546  004B36  0012               	return	
 30547  004B38  B035               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 30548  004B3A  0012               	return	
 30549                           
 30550                           ;keyboard.c: 1309: if(NUM_NOTES_PRESSED > 0){
 30551  004B3C  0100               	movlb	0	; () banked
 30552  004B3E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30553  004B40  B4D8               	btfsc	status,2,c
 30554  004B42  D00A               	goto	l1669
 30555                           
 30556                           ; BSR set to: 0
 30557                           ;keyboard.c: 1310: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 30558  004B44  0E00               	movlw	0
 30559  004B46  B034               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 30560  004B48  0E01               	movlw	1
 30561  004B4A  ECCC  F049         	call	_wait_one_pulse
 30562                           
 30563                           ;keyboard.c: 1311: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30564  004B4E  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30565  004B50  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 30566                           
 30567                           ;keyboard.c: 1312: TIMER_OVERFLOWS = 0;
 30568  004B54  0E00               	movlw	0
 30569  004B56  6E54               	movwf	_TIMER_OVERFLOWS,c
 30570  004B58                     l1669:
 30571                           
 30572                           ;keyboard.c: 1313: }
 30573                           ;keyboard.c: 1315: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 30574  004B58  C0E6  F078         	movff	_parallel,??_playDiatonicSeventhMinor
 30575  004B5C  0100               	movlb	0	; () banked
 30576  004B5E  6B79               	clrf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 30577  004B60  BF78               	btfsc	??_playDiatonicSeventhMinor& (0+255),7,b
 30578  004B62  0779               	decf	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 30579  004B64  517C               	movf	playDiatonicSeventhMinor@pitch& (0+255),w,b
 30580  004B66  6F7A               	movwf	(??_playDiatonicSeventhMinor+2)& (0+255),b
 30581  004B68  6B7B               	clrf	(??_playDiatonicSeventhMinor+3)& (0+255),b
 30582  004B6A  5178               	movf	??_playDiatonicSeventhMinor& (0+255),w,b
 30583  004B6C  197A               	xorwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 30584  004B6E  E106               	bnz	l17051
 30585  004B70  5179               	movf	(??_playDiatonicSeventhMinor+1)& (0+255),w,b
 30586  004B72  197B               	xorwf	(??_playDiatonicSeventhMinor+3)& (0+255),w,b
 30587  004B74  A4D8               	btfss	status,2,c
 30588  004B76  D002               	goto	l1671
 30589                           
 30590                           ; BSR set to: 0
 30591  004B78  0E00               	movlw	0
 30592  004B7A  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30593  004B7C                     l1671:
 30594  004B7C                     l17051:
 30595                           
 30596                           ; BSR set to: 0
 30597                           ;keyboard.c: 1317: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 30598  004B7C  BC34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 30599                           
 30600                           ; BSR set to: 0
 30601  004B7E  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30602  004B80  D001               	goto	l1672
 30603                           
 30604                           ; BSR set to: 0
 30605                           ;keyboard.c: 1318: LATCH = 1;
 30606  004B82  8035               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 30607  004B84                     l1672:
 30608                           
 30609                           ; BSR set to: 0
 30610                           ;keyboard.c: 1319: }
 30611                           ;keyboard.c: 1322: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 30612  004B84  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30613  004B86  D002               	goto	u24680
 30614                           
 30615                           ; BSR set to: 0
 30616  004B88  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30617  004B8A  D006               	goto	l1673
 30618  004B8C                     u24680:
 30619                           
 30620                           ; BSR set to: 0
 30621  004B8C  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30622  004B8E  D004               	goto	l1673
 30623                           
 30624                           ; BSR set to: 0
 30625                           ;keyboard.c: 1323: NUM_NOTES_PRESSED = 0;
 30626  004B90  0E00               	movlw	0
 30627  004B92  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30628                           
 30629                           ;keyboard.c: 1324: ARRAY_INDEX = 0;
 30630  004B94  0E00               	movlw	0
 30631  004B96  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 30632  004B98                     l1673:
 30633                           
 30634                           ; BSR set to: 0
 30635                           ;keyboard.c: 1325: }
 30636                           ;keyboard.c: 1328: finish_arpeggio_setup();
 30637                           
 30638                           ; BSR set to: 0
 30639  004B98  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 30640                           
 30641                           ;keyboard.c: 1329: TMR0ON = 1;
 30642  004B9C  8ED5               	bsf	4053,7,c	;volatile
 30643                           
 30644                           ;keyboard.c: 1331: return;
 30645  004B9E  0012               	return	
 30646  004BA0                     __end_of_playDiatonicSeventhMinor:
 30647                           	opt stack 0
 30648                           tblptru	equ	0xFF8
 30649                           tblptrh	equ	0xFF7
 30650                           tblptrl	equ	0xFF6
 30651                           tablat	equ	0xFF5
 30652                           prodh	equ	0xFF4
 30653                           prodl	equ	0xFF3
 30654                           intcon	equ	0xFF2
 30655                           intcon2	equ	0xFF1
 30656                           postinc0	equ	0xFEE
 30657                           wreg	equ	0xFE8
 30658                           indf1	equ	0xFE7
 30659                           postdec1	equ	0xFE5
 30660                           fsr1h	equ	0xFE2
 30661                           fsr1l	equ	0xFE1
 30662                           indf2	equ	0xFDF
 30663                           postinc2	equ	0xFDE
 30664                           plusw2	equ	0xFDB
 30665                           fsr2h	equ	0xFDA
 30666                           fsr2l	equ	0xFD9
 30667                           status	equ	0xFD8
 30668                           
 30669 ;; *************** function _playDiatonicSeventhMajor *****************
 30670 ;; Defined at:
 30671 ;;		line 1109 in file "keyboard.c"
 30672 ;; Parameters:    Size  Location     Type
 30673 ;;  pitch           1    wreg     unsigned char 
 30674 ;;  index           1   23[BANK0 ] unsigned char 
 30675 ;; Auto vars:     Size  Location     Type
 30676 ;;  pitch           1   30[BANK0 ] unsigned char 
 30677 ;;  i               1   29[BANK0 ] unsigned char 
 30678 ;;  i               1   28[BANK0 ] unsigned char 
 30679 ;; Return value:  Size  Location     Type
 30680 ;;                  1    wreg      void 
 30681 ;; Registers used:
 30682 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30683 ;; Tracked objects:
 30684 ;;		On entry : 0/0
 30685 ;;		On exit  : 0/0
 30686 ;;		Unchanged: 0/0
 30687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 30688 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30689 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30690 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30691 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30692 ;;Total ram usage:        8 bytes
 30693 ;; Hardware stack levels used:    1
 30694 ;; Hardware stack levels required when called:   10
 30695 ;; This function calls:
 30696 ;;		_finish_arpeggio_setup
 30697 ;;		_key_press_release_note_off
 30698 ;;		_noteOff
 30699 ;;		_noteOn
 30700 ;;		_wait_one_pulse
 30701 ;; This function is called by:
 30702 ;;		_playThisNote8
 30703 ;; This function uses a non-reentrant model
 30704 ;;
 30705                           
 30706                           	psect	text88
 30707  0054FA                     __ptext88:
 30708                           	opt stack 0
 30709  0054FA                     _playDiatonicSeventhMajor:
 30710                           	opt stack 15
 30711                           
 30712                           ;incstack = 0
 30713                           ;playDiatonicSeventhMajor@pitch stored from wreg
 30714  0054FA  0100               	movlb	0	; () banked
 30715  0054FC  6F7E               	movwf	playDiatonicSeventhMajor@pitch& (0+255),b
 30716                           
 30717                           ;keyboard.c: 1112: if(ARPEGGIO_ON == 0){
 30718  0054FE  B635               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30719  005500  D049               	goto	u24240
 30720                           
 30721                           ;keyboard.c: 1113: for(unsigned char i = 0; i<4; i++){
 30722  005502  0E00               	movlw	0
 30723  005504  0100               	movlb	0	; () banked
 30724  005506  6F7C               	movwf	playDiatonicSeventhMajor@i& (0+255),b
 30725  005508                     l16875:
 30726                           
 30727                           ; BSR set to: 0
 30728  005508  0E03               	movlw	3
 30729  00550A  657C               	cpfsgt	playDiatonicSeventhMajor@i& (0+255),b
 30730  00550C  D001               	goto	l1599
 30731  00550E  D042               	goto	u24240
 30732  005510                     l1599:
 30733                           
 30734                           ; BSR set to: 0
 30735                           ;keyboard.c: 1115: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_seventh_major[index]
      +                          [i],velocity);}
 30736  005510  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30737  005512  D01D               	goto	l1601
 30738                           
 30739                           ; BSR set to: 0
 30740  005514  5177               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 30741  005516  0D04               	mullw	4
 30742  005518  0EA7               	movlw	low _diatonic_seventh_major
 30743  00551A  6F78               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 30744  00551C  0EF2               	movlw	high _diatonic_seventh_major
 30745  00551E  6F79               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 30746  005520  50F3               	movf	prodl,w,c
 30747  005522  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30748  005524  50F4               	movf	prodh,w,c
 30749  005526  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30750  005528  517C               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 30751  00552A  0D01               	mullw	1
 30752  00552C  50F3               	movf	prodl,w,c
 30753  00552E  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30754  005530  50F4               	movf	prodh,w,c
 30755  005532  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30756  005534  C078  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 30757  005538  C079  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 30758  00553C                     	if	0	;tblptru may be non-zero
 30759  00553C                     	endif
 30760  00553C                     	if	0	;tblptru may be non-zero
 30761  00553C                     	endif
 30762  00553C  0008               	tblrd		*
 30763  00553E  50F5               	movf	tablat,w,c
 30764  005540  257E               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 30765  005542  6F6E               	movwf	noteOn@pitch& (0+255),b
 30766  005544  C0FD  F06F         	movff	_velocity,noteOn@velocity
 30767  005548  51F6               	movf	_channel& (0+255),w,b
 30768  00554A  ECA2  F044         	call	_noteOn
 30769  00554E                     l1601:
 30770                           
 30771                           ;keyboard.c: 1116: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_seventh_major[index
      +                          ][i],velocity);}
 30772  00554E  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30773  005550  D01E               	goto	l1602
 30774  005552  0100               	movlb	0	; () banked
 30775  005554  5177               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 30776  005556  0D04               	mullw	4
 30777  005558  0EA7               	movlw	low _diatonic_seventh_major
 30778  00555A  6F78               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 30779  00555C  0EF2               	movlw	high _diatonic_seventh_major
 30780  00555E  6F79               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 30781  005560  50F3               	movf	prodl,w,c
 30782  005562  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30783  005564  50F4               	movf	prodh,w,c
 30784  005566  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30785  005568  517C               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 30786  00556A  0D01               	mullw	1
 30787  00556C  50F3               	movf	prodl,w,c
 30788  00556E  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30789  005570  50F4               	movf	prodh,w,c
 30790  005572  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30791  005574  C078  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 30792  005578  C079  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 30793  00557C                     	if	0	;tblptru may be non-zero
 30794  00557C                     	endif
 30795  00557C                     	if	0	;tblptru may be non-zero
 30796  00557C                     	endif
 30797  00557C  0008               	tblrd		*
 30798  00557E  50F5               	movf	tablat,w,c
 30799  005580  257E               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 30800  005582  6F6B               	movwf	noteOff@pitch& (0+255),b
 30801  005584  C0FD  F06C         	movff	_velocity,noteOff@velocity
 30802  005588  51F6               	movf	_channel& (0+255),w,b
 30803  00558A  ECC9  F047         	call	_noteOff
 30804  00558E                     l1602:
 30805  00558E  0100               	movlb	0	; () banked
 30806  005590  2B7C               	incf	playDiatonicSeventhMajor@i& (0+255),f,b
 30807  005592  D7BA               	goto	l16875
 30808  005594                     u24240:
 30809                           
 30810                           ;keyboard.c: 1117: }
 30811                           ;keyboard.c: 1118: }
 30812                           ;keyboard.c: 1121: if(ARPEGGIO_ON == 1){
 30813                           
 30814                           ; BSR set to: 0
 30815  005594  A635               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30816  005596  0012               	return	
 30817                           
 30818                           ;keyboard.c: 1122: if(ON_OFF == 1) {
 30819  005598  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30820  00559A  D042               	goto	l1604
 30821                           
 30822                           ;keyboard.c: 1124: TMR0ON = 0;
 30823  00559C  9ED5               	bcf	4053,7,c	;volatile
 30824                           
 30825                           ;keyboard.c: 1126: parallel = pitch;
 30826  00559E  C07E  F0E6         	movff	playDiatonicSeventhMajor@pitch,_parallel
 30827                           
 30828                           ;keyboard.c: 1129: if(NUM_NOTES_PRESSED > 0){
 30829  0055A2  0100               	movlb	0	; () banked
 30830  0055A4  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30831  0055A6  B4D8               	btfsc	status,2,c
 30832  0055A8  D00A               	goto	l1605
 30833                           
 30834                           ; BSR set to: 0
 30835                           ;keyboard.c: 1130: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 30836  0055AA  0E00               	movlw	0
 30837  0055AC  B234               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 30838  0055AE  0E01               	movlw	1
 30839  0055B0  ECCC  F049         	call	_wait_one_pulse
 30840                           
 30841                           ;keyboard.c: 1131: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30842  0055B4  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30843  0055B6  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 30844                           
 30845                           ;keyboard.c: 1132: TIMER_OVERFLOWS = 0;
 30846  0055BA  0E00               	movlw	0
 30847  0055BC  6E54               	movwf	_TIMER_OVERFLOWS,c
 30848  0055BE                     l1605:
 30849                           
 30850                           ;keyboard.c: 1133: }
 30851                           ;keyboard.c: 1135: for(unsigned char i = 0; i<4; i++){
 30852  0055BE  0E00               	movlw	0
 30853  0055C0  0100               	movlb	0	; () banked
 30854  0055C2  6F7D               	movwf	playDiatonicSeventhMajor@i_1684& (0+255),b
 30855  0055C4                     l16905:
 30856                           
 30857                           ; BSR set to: 0
 30858  0055C4  0E03               	movlw	3
 30859  0055C6  657D               	cpfsgt	playDiatonicSeventhMajor@i_1684& (0+255),b
 30860  0055C8  D001               	goto	l1607
 30861  0055CA  D022               	goto	u24300
 30862  0055CC                     l1607:
 30863                           
 30864                           ; BSR set to: 0
 30865                           ;keyboard.c: 1136: ARPEGGIO[i] = pitch + diatonic_seventh_major[index][i];
 30866                           
 30867                           ; BSR set to: 0
 30868  0055CC  517D               	movf	playDiatonicSeventhMajor@i_1684& (0+255),w,b
 30869  0055CE  0D01               	mullw	1
 30870  0055D0  0E72               	movlw	low _ARPEGGIO
 30871  0055D2  24F3               	addwf	prodl,w,c
 30872  0055D4  6ED9               	movwf	fsr2l,c
 30873  0055D6  0E01               	movlw	high _ARPEGGIO
 30874  0055D8  20F4               	addwfc	prodh,w,c
 30875  0055DA  6EDA               	movwf	fsr2h,c
 30876  0055DC  5177               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 30877  0055DE  0D04               	mullw	4
 30878  0055E0  0EA7               	movlw	low _diatonic_seventh_major
 30879  0055E2  6F78               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 30880  0055E4  0EF2               	movlw	high _diatonic_seventh_major
 30881  0055E6  6F79               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 30882  0055E8  50F3               	movf	prodl,w,c
 30883  0055EA  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30884  0055EC  50F4               	movf	prodh,w,c
 30885  0055EE  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30886  0055F0  517D               	movf	playDiatonicSeventhMajor@i_1684& (0+255),w,b
 30887  0055F2  0D01               	mullw	1
 30888  0055F4  50F3               	movf	prodl,w,c
 30889  0055F6  2778               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 30890  0055F8  50F4               	movf	prodh,w,c
 30891  0055FA  2379               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30892  0055FC  C078  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 30893  005600  C079  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 30894  005604                     	if	0	;tblptru may be non-zero
 30895  005604                     	endif
 30896  005604                     	if	0	;tblptru may be non-zero
 30897  005604                     	endif
 30898  005604  0008               	tblrd		*
 30899  005606  50F5               	movf	tablat,w,c
 30900  005608  257E               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 30901  00560A  6EDF               	movwf	indf2,c
 30902                           
 30903                           ; BSR set to: 0
 30904  00560C  2B7D               	incf	playDiatonicSeventhMajor@i_1684& (0+255),f,b
 30905  00560E  D7DA               	goto	l16905
 30906  005610                     u24300:
 30907                           
 30908                           ; BSR set to: 0
 30909                           ;keyboard.c: 1137: }
 30910                           ;keyboard.c: 1139: NUM_NOTES_PRESSED = 4;
 30911                           
 30912                           ; BSR set to: 0
 30913  005610  0E04               	movlw	4
 30914  005612  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30915                           
 30916                           ; BSR set to: 0
 30917                           ;keyboard.c: 1142: if(LATCH == 0) {latch_was_pressed = 0;}
 30918  005614  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 30919                           
 30920                           ; BSR set to: 0
 30921  005616  9A34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30922                           
 30923                           ; BSR set to: 0
 30924                           ;keyboard.c: 1145: finish_arpeggio_setup();
 30925                           
 30926                           ; BSR set to: 0
 30927  005618  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 30928                           
 30929                           ;keyboard.c: 1147: TMR0ON = 1;
 30930  00561C  8ED5               	bsf	4053,7,c	;volatile
 30931                           
 30932                           ;keyboard.c: 1149: return;
 30933  00561E  0012               	return	
 30934  005620                     l1604:
 30935                           
 30936                           ;keyboard.c: 1150: }
 30937                           ;keyboard.c: 1152: if((ON_OFF == 0) && (LATCH == 0)) {
 30938  005620  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30939  005622  0012               	return	
 30940  005624  B035               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 30941  005626  0012               	return	
 30942                           
 30943                           ;keyboard.c: 1154: if(NUM_NOTES_PRESSED > 0){
 30944  005628  0100               	movlb	0	; () banked
 30945  00562A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 30946  00562C  B4D8               	btfsc	status,2,c
 30947  00562E  D00A               	goto	l1612
 30948                           
 30949                           ; BSR set to: 0
 30950                           ;keyboard.c: 1155: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 30951  005630  0E00               	movlw	0
 30952  005632  B034               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 30953  005634  0E01               	movlw	1
 30954  005636  ECCC  F049         	call	_wait_one_pulse
 30955                           
 30956                           ;keyboard.c: 1156: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30957  00563A  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30958  00563C  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 30959                           
 30960                           ;keyboard.c: 1157: TIMER_OVERFLOWS = 0;
 30961  005640  0E00               	movlw	0
 30962  005642  6E54               	movwf	_TIMER_OVERFLOWS,c
 30963  005644                     l1612:
 30964                           
 30965                           ;keyboard.c: 1158: }
 30966                           ;keyboard.c: 1160: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 30967  005644  C0E6  F078         	movff	_parallel,??_playDiatonicSeventhMajor
 30968  005648  0100               	movlb	0	; () banked
 30969  00564A  6B79               	clrf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 30970  00564C  BF78               	btfsc	??_playDiatonicSeventhMajor& (0+255),7,b
 30971  00564E  0779               	decf	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 30972  005650  517E               	movf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 30973  005652  6F7A               	movwf	(??_playDiatonicSeventhMajor+2)& (0+255),b
 30974  005654  6B7B               	clrf	(??_playDiatonicSeventhMajor+3)& (0+255),b
 30975  005656  5178               	movf	??_playDiatonicSeventhMajor& (0+255),w,b
 30976  005658  197A               	xorwf	(??_playDiatonicSeventhMajor+2)& (0+255),w,b
 30977  00565A  E106               	bnz	l16943
 30978  00565C  5179               	movf	(??_playDiatonicSeventhMajor+1)& (0+255),w,b
 30979  00565E  197B               	xorwf	(??_playDiatonicSeventhMajor+3)& (0+255),w,b
 30980  005660  A4D8               	btfss	status,2,c
 30981  005662  D002               	goto	l1614
 30982                           
 30983                           ; BSR set to: 0
 30984  005664  0E00               	movlw	0
 30985  005666  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 30986  005668                     l1614:
 30987  005668                     l16943:
 30988                           
 30989                           ; BSR set to: 0
 30990                           ;keyboard.c: 1162: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 30991  005668  BC34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 30992                           
 30993                           ; BSR set to: 0
 30994  00566A  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30995  00566C  D001               	goto	l1615
 30996                           
 30997                           ; BSR set to: 0
 30998                           ;keyboard.c: 1163: LATCH = 1;
 30999  00566E  8035               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 31000  005670                     l1615:
 31001                           
 31002                           ; BSR set to: 0
 31003                           ;keyboard.c: 1164: }
 31004                           ;keyboard.c: 1167: if(((UN_LATCH_MODE == 0 | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1))){
 31005  005670  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31006  005672  D002               	goto	u24400
 31007                           
 31008                           ; BSR set to: 0
 31009  005674  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31010  005676  D006               	goto	l1616
 31011  005678                     u24400:
 31012                           
 31013                           ; BSR set to: 0
 31014  005678  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31015  00567A  D004               	goto	l1616
 31016                           
 31017                           ; BSR set to: 0
 31018                           ;keyboard.c: 1168: NUM_NOTES_PRESSED = 0;
 31019  00567C  0E00               	movlw	0
 31020  00567E  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 31021                           
 31022                           ;keyboard.c: 1169: ARRAY_INDEX = 0;
 31023  005680  0E00               	movlw	0
 31024  005682  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 31025  005684                     l1616:
 31026                           
 31027                           ; BSR set to: 0
 31028                           ;keyboard.c: 1170: }
 31029                           ;keyboard.c: 1173: finish_arpeggio_setup();
 31030                           
 31031                           ; BSR set to: 0
 31032  005684  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 31033                           
 31034                           ;keyboard.c: 1174: TMR0ON = 1;
 31035  005688  8ED5               	bsf	4053,7,c	;volatile
 31036                           
 31037                           ;keyboard.c: 1176: return;
 31038  00568A  0012               	return	
 31039  00568C                     __end_of_playDiatonicSeventhMajor:
 31040                           	opt stack 0
 31041                           tblptru	equ	0xFF8
 31042                           tblptrh	equ	0xFF7
 31043                           tblptrl	equ	0xFF6
 31044                           tablat	equ	0xFF5
 31045                           prodh	equ	0xFF4
 31046                           prodl	equ	0xFF3
 31047                           intcon	equ	0xFF2
 31048                           intcon2	equ	0xFF1
 31049                           postinc0	equ	0xFEE
 31050                           wreg	equ	0xFE8
 31051                           indf1	equ	0xFE7
 31052                           postdec1	equ	0xFE5
 31053                           fsr1h	equ	0xFE2
 31054                           fsr1l	equ	0xFE1
 31055                           indf2	equ	0xFDF
 31056                           postinc2	equ	0xFDE
 31057                           plusw2	equ	0xFDB
 31058                           fsr2h	equ	0xFDA
 31059                           fsr2l	equ	0xFD9
 31060                           status	equ	0xFD8
 31061                           
 31062 ;; *************** function _keyboard_all_note_efficient *****************
 31063 ;; Defined at:
 31064 ;;		line 564 in file "keyboard.c"
 31065 ;; Parameters:    Size  Location     Type
 31066 ;;		None
 31067 ;; Auto vars:     Size  Location     Type
 31068 ;;  pitch           1   37[BANK0 ] unsigned char 
 31069 ;; Return value:  Size  Location     Type
 31070 ;;                  1    wreg      void 
 31071 ;; Registers used:
 31072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31073 ;; Tracked objects:
 31074 ;;		On entry : 0/0
 31075 ;;		On exit  : 0/0
 31076 ;;		Unchanged: 0/0
 31077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 31078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31079 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31081 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31082 ;;Total ram usage:        1 bytes
 31083 ;; Hardware stack levels used:    1
 31084 ;; Hardware stack levels required when called:   12
 31085 ;; This function calls:
 31086 ;;		_playThisNote
 31087 ;; This function is called by:
 31088 ;;		_processKeyboard
 31089 ;; This function uses a non-reentrant model
 31090 ;;
 31091                           
 31092                           	psect	text89
 31093  00174C                     __ptext89:
 31094                           	opt stack 0
 31095  00174C                     _keyboard_all_note_efficient:
 31096                           	opt stack 16
 31097                           
 31098                           ;keyboard.c: 566: unsigned char pitch;
 31099                           ;keyboard.c: 569: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW1) {
 31100                           
 31101                           ;incstack = 0
 31102  00174C  0100               	movlb	0	; () banked
 31103  00174E  B1D8               	btfsc	_button_state_now& (0+255),0,b
 31104                           
 31105                           ; BSR set to: 0
 31106  001750  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31107  001752  D00A               	goto	l1462
 31108                           
 31109                           ; BSR set to: 0
 31110  001754  B1D0               	btfsc	_keyboard& (0+255),0,b
 31111  001756  D008               	goto	l1462
 31112                           
 31113                           ; BSR set to: 0
 31114                           ;keyboard.c: 570: pitch = C;
 31115  001758  0E00               	movlw	0
 31116  00175A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31117                           
 31118                           ; BSR set to: 0
 31119                           ;keyboard.c: 571: ON_OFF = 1;
 31120  00175C  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31121                           
 31122                           ; BSR set to: 0
 31123                           ;keyboard.c: 572: playThisNote(pitch);
 31124  00175E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31125  001760  ECF7  F031         	call	_playThisNote
 31126                           
 31127                           ;keyboard.c: 573: keyboard.SW1 = 1;
 31128  001764  0100               	movlb	0	; () banked
 31129  001766  81D0               	bsf	_keyboard& (0+255),0,b
 31130  001768                     l1462:
 31131                           
 31132                           ; BSR set to: 0
 31133                           ;keyboard.c: 574: }
 31134                           ;keyboard.c: 576: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2) {
 31135                           
 31136                           ; BSR set to: 0
 31137  001768  B3D8               	btfsc	_button_state_now& (0+255),1,b
 31138                           
 31139                           ; BSR set to: 0
 31140  00176A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31141  00176C  D00A               	goto	l1463
 31142                           
 31143                           ; BSR set to: 0
 31144  00176E  B3D0               	btfsc	_keyboard& (0+255),1,b
 31145  001770  D008               	goto	l1463
 31146                           
 31147                           ; BSR set to: 0
 31148                           ;keyboard.c: 577: pitch = Cs;
 31149  001772  0E01               	movlw	1
 31150  001774  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31151                           
 31152                           ; BSR set to: 0
 31153                           ;keyboard.c: 578: ON_OFF = 1;
 31154  001776  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31155                           
 31156                           ; BSR set to: 0
 31157                           ;keyboard.c: 579: playThisNote(pitch);
 31158  001778  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31159  00177A  ECF7  F031         	call	_playThisNote
 31160                           
 31161                           ;keyboard.c: 580: keyboard.SW2 = 1;
 31162  00177E  0100               	movlb	0	; () banked
 31163  001780  83D0               	bsf	_keyboard& (0+255),1,b
 31164  001782                     l1463:
 31165                           
 31166                           ; BSR set to: 0
 31167                           ;keyboard.c: 581: }
 31168                           ;keyboard.c: 583: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW3) {
 31169                           
 31170                           ; BSR set to: 0
 31171  001782  B5D8               	btfsc	_button_state_now& (0+255),2,b
 31172                           
 31173                           ; BSR set to: 0
 31174  001784  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31175  001786  D00A               	goto	l1464
 31176                           
 31177                           ; BSR set to: 0
 31178  001788  B5D0               	btfsc	_keyboard& (0+255),2,b
 31179  00178A  D008               	goto	l1464
 31180                           
 31181                           ; BSR set to: 0
 31182                           ;keyboard.c: 584: pitch = D;
 31183  00178C  0E02               	movlw	2
 31184  00178E  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31185                           
 31186                           ; BSR set to: 0
 31187                           ;keyboard.c: 585: ON_OFF = 1;
 31188  001790  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31189                           
 31190                           ; BSR set to: 0
 31191                           ;keyboard.c: 586: playThisNote(pitch);
 31192  001792  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31193  001794  ECF7  F031         	call	_playThisNote
 31194                           
 31195                           ;keyboard.c: 587: keyboard.SW3 = 1;
 31196  001798  0100               	movlb	0	; () banked
 31197  00179A  85D0               	bsf	_keyboard& (0+255),2,b
 31198  00179C                     l1464:
 31199                           
 31200                           ; BSR set to: 0
 31201                           ;keyboard.c: 588: }
 31202                           ;keyboard.c: 589: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4) {
 31203                           
 31204                           ; BSR set to: 0
 31205  00179C  B7D8               	btfsc	_button_state_now& (0+255),3,b
 31206                           
 31207                           ; BSR set to: 0
 31208  00179E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31209  0017A0  D00A               	goto	l1465
 31210                           
 31211                           ; BSR set to: 0
 31212  0017A2  B7D0               	btfsc	_keyboard& (0+255),3,b
 31213  0017A4  D008               	goto	l1465
 31214                           
 31215                           ; BSR set to: 0
 31216                           ;keyboard.c: 590: pitch = Ds;
 31217  0017A6  0E03               	movlw	3
 31218  0017A8  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31219                           
 31220                           ; BSR set to: 0
 31221                           ;keyboard.c: 591: ON_OFF = 1;
 31222  0017AA  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31223                           
 31224                           ; BSR set to: 0
 31225                           ;keyboard.c: 592: playThisNote(pitch);
 31226  0017AC  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31227  0017AE  ECF7  F031         	call	_playThisNote
 31228                           
 31229                           ;keyboard.c: 593: keyboard.SW4 = 1;
 31230  0017B2  0100               	movlb	0	; () banked
 31231  0017B4  87D0               	bsf	_keyboard& (0+255),3,b
 31232  0017B6                     l1465:
 31233                           
 31234                           ; BSR set to: 0
 31235                           ;keyboard.c: 594: }
 31236                           ;keyboard.c: 595: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW5) {
 31237                           
 31238                           ; BSR set to: 0
 31239  0017B6  B9D8               	btfsc	_button_state_now& (0+255),4,b
 31240                           
 31241                           ; BSR set to: 0
 31242  0017B8  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31243  0017BA  D00A               	goto	l1466
 31244                           
 31245                           ; BSR set to: 0
 31246  0017BC  B9D0               	btfsc	_keyboard& (0+255),4,b
 31247  0017BE  D008               	goto	l1466
 31248                           
 31249                           ; BSR set to: 0
 31250                           ;keyboard.c: 596: pitch = E;
 31251  0017C0  0E04               	movlw	4
 31252  0017C2  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31253                           
 31254                           ; BSR set to: 0
 31255                           ;keyboard.c: 597: ON_OFF = 1;
 31256  0017C4  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31257                           
 31258                           ; BSR set to: 0
 31259                           ;keyboard.c: 598: playThisNote(pitch);
 31260  0017C6  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31261  0017C8  ECF7  F031         	call	_playThisNote
 31262                           
 31263                           ;keyboard.c: 599: keyboard.SW5 = 1;
 31264  0017CC  0100               	movlb	0	; () banked
 31265  0017CE  89D0               	bsf	_keyboard& (0+255),4,b
 31266  0017D0                     l1466:
 31267                           
 31268                           ; BSR set to: 0
 31269                           ;keyboard.c: 600: }
 31270                           ;keyboard.c: 601: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW6) {
 31271                           
 31272                           ; BSR set to: 0
 31273  0017D0  BBD8               	btfsc	_button_state_now& (0+255),5,b
 31274                           
 31275                           ; BSR set to: 0
 31276  0017D2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31277  0017D4  D00A               	goto	l1467
 31278                           
 31279                           ; BSR set to: 0
 31280  0017D6  BBD0               	btfsc	_keyboard& (0+255),5,b
 31281  0017D8  D008               	goto	l1467
 31282                           
 31283                           ; BSR set to: 0
 31284                           ;keyboard.c: 602: pitch = F;
 31285  0017DA  0E05               	movlw	5
 31286  0017DC  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31287                           
 31288                           ; BSR set to: 0
 31289                           ;keyboard.c: 603: ON_OFF = 1;
 31290  0017DE  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31291                           
 31292                           ; BSR set to: 0
 31293                           ;keyboard.c: 604: playThisNote(pitch);
 31294  0017E0  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31295  0017E2  ECF7  F031         	call	_playThisNote
 31296                           
 31297                           ;keyboard.c: 605: keyboard.SW6 = 1;
 31298  0017E6  0100               	movlb	0	; () banked
 31299  0017E8  8BD0               	bsf	_keyboard& (0+255),5,b
 31300  0017EA                     l1467:
 31301                           
 31302                           ; BSR set to: 0
 31303                           ;keyboard.c: 606: }
 31304                           ;keyboard.c: 607: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7) {
 31305                           
 31306                           ; BSR set to: 0
 31307  0017EA  BDD8               	btfsc	_button_state_now& (0+255),6,b
 31308                           
 31309                           ; BSR set to: 0
 31310  0017EC  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31311  0017EE  D00A               	goto	l1468
 31312                           
 31313                           ; BSR set to: 0
 31314  0017F0  BDD0               	btfsc	_keyboard& (0+255),6,b
 31315  0017F2  D008               	goto	l1468
 31316                           
 31317                           ; BSR set to: 0
 31318                           ;keyboard.c: 608: pitch = Fs;
 31319  0017F4  0E06               	movlw	6
 31320  0017F6  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31321                           
 31322                           ; BSR set to: 0
 31323                           ;keyboard.c: 609: ON_OFF = 1;
 31324  0017F8  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31325                           
 31326                           ; BSR set to: 0
 31327                           ;keyboard.c: 610: playThisNote(pitch);
 31328  0017FA  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31329  0017FC  ECF7  F031         	call	_playThisNote
 31330                           
 31331                           ;keyboard.c: 611: keyboard.SW7 = 1;
 31332  001800  0100               	movlb	0	; () banked
 31333  001802  8DD0               	bsf	_keyboard& (0+255),6,b
 31334  001804                     l1468:
 31335                           
 31336                           ; BSR set to: 0
 31337                           ;keyboard.c: 612: }
 31338                           ;keyboard.c: 613: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW8) {
 31339                           
 31340                           ; BSR set to: 0
 31341  001804  BFD8               	btfsc	_button_state_now& (0+255),7,b
 31342                           
 31343                           ; BSR set to: 0
 31344  001806  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31345  001808  D00A               	goto	l1469
 31346                           
 31347                           ; BSR set to: 0
 31348  00180A  BFD0               	btfsc	_keyboard& (0+255),7,b
 31349  00180C  D008               	goto	l1469
 31350                           
 31351                           ; BSR set to: 0
 31352                           ;keyboard.c: 614: pitch = G;
 31353  00180E  0E07               	movlw	7
 31354  001810  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31355                           
 31356                           ; BSR set to: 0
 31357                           ;keyboard.c: 615: ON_OFF = 1;
 31358  001812  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31359                           
 31360                           ; BSR set to: 0
 31361                           ;keyboard.c: 616: playThisNote(pitch);
 31362  001814  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31363  001816  ECF7  F031         	call	_playThisNote
 31364                           
 31365                           ;keyboard.c: 617: keyboard.SW8 = 1;
 31366  00181A  0100               	movlb	0	; () banked
 31367  00181C  8FD0               	bsf	_keyboard& (0+255),7,b
 31368  00181E                     l1469:
 31369                           
 31370                           ; BSR set to: 0
 31371                           ;keyboard.c: 618: }
 31372                           ;keyboard.c: 619: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9) {
 31373                           
 31374                           ; BSR set to: 0
 31375  00181E  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 31376                           
 31377                           ; BSR set to: 0
 31378  001820  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31379  001822  D00A               	goto	l1470
 31380                           
 31381                           ; BSR set to: 0
 31382  001824  B1D1               	btfsc	(_keyboard+1)& (0+255),0,b
 31383  001826  D008               	goto	l1470
 31384                           
 31385                           ; BSR set to: 0
 31386                           ;keyboard.c: 620: pitch = Gs;
 31387  001828  0E08               	movlw	8
 31388  00182A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31389                           
 31390                           ; BSR set to: 0
 31391                           ;keyboard.c: 621: ON_OFF = 1;
 31392  00182C  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31393                           
 31394                           ; BSR set to: 0
 31395                           ;keyboard.c: 622: playThisNote(pitch);
 31396  00182E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31397  001830  ECF7  F031         	call	_playThisNote
 31398                           
 31399                           ;keyboard.c: 623: keyboard.SW9 = 1;
 31400  001834  0100               	movlb	0	; () banked
 31401  001836  81D1               	bsf	(_keyboard+1)& (0+255),0,b
 31402  001838                     l1470:
 31403                           
 31404                           ; BSR set to: 0
 31405                           ;keyboard.c: 624: }
 31406                           ;keyboard.c: 625: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW10) {
 31407                           
 31408                           ; BSR set to: 0
 31409  001838  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 31410                           
 31411                           ; BSR set to: 0
 31412  00183A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31413  00183C  D00A               	goto	l1471
 31414                           
 31415                           ; BSR set to: 0
 31416  00183E  B3D1               	btfsc	(_keyboard+1)& (0+255),1,b
 31417  001840  D008               	goto	l1471
 31418                           
 31419                           ; BSR set to: 0
 31420                           ;keyboard.c: 626: pitch = A;
 31421  001842  0E09               	movlw	9
 31422  001844  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31423                           
 31424                           ; BSR set to: 0
 31425                           ;keyboard.c: 627: ON_OFF = 1;
 31426  001846  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31427                           
 31428                           ; BSR set to: 0
 31429                           ;keyboard.c: 628: playThisNote(pitch);
 31430  001848  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31431  00184A  ECF7  F031         	call	_playThisNote
 31432                           
 31433                           ;keyboard.c: 629: keyboard.SW10 = 1;
 31434  00184E  0100               	movlb	0	; () banked
 31435  001850  83D1               	bsf	(_keyboard+1)& (0+255),1,b
 31436  001852                     l1471:
 31437                           
 31438                           ; BSR set to: 0
 31439                           ;keyboard.c: 630: }
 31440                           ;keyboard.c: 631: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11) {
 31441                           
 31442                           ; BSR set to: 0
 31443  001852  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 31444                           
 31445                           ; BSR set to: 0
 31446  001854  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31447  001856  D00A               	goto	l1472
 31448                           
 31449                           ; BSR set to: 0
 31450  001858  B5D1               	btfsc	(_keyboard+1)& (0+255),2,b
 31451  00185A  D008               	goto	l1472
 31452                           
 31453                           ; BSR set to: 0
 31454                           ;keyboard.c: 632: pitch = As;
 31455  00185C  0E0A               	movlw	10
 31456  00185E  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31457                           
 31458                           ; BSR set to: 0
 31459                           ;keyboard.c: 633: ON_OFF = 1;
 31460  001860  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31461                           
 31462                           ; BSR set to: 0
 31463                           ;keyboard.c: 634: playThisNote(pitch);
 31464  001862  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31465  001864  ECF7  F031         	call	_playThisNote
 31466                           
 31467                           ;keyboard.c: 635: keyboard.SW11 = 1;
 31468  001868  0100               	movlb	0	; () banked
 31469  00186A  85D1               	bsf	(_keyboard+1)& (0+255),2,b
 31470  00186C                     l1472:
 31471                           
 31472                           ; BSR set to: 0
 31473                           ;keyboard.c: 636: }
 31474                           ;keyboard.c: 637: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW12) {
 31475                           
 31476                           ; BSR set to: 0
 31477  00186C  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 31478                           
 31479                           ; BSR set to: 0
 31480  00186E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31481  001870  D00A               	goto	l1473
 31482                           
 31483                           ; BSR set to: 0
 31484  001872  B7D1               	btfsc	(_keyboard+1)& (0+255),3,b
 31485  001874  D008               	goto	l1473
 31486                           
 31487                           ; BSR set to: 0
 31488                           ;keyboard.c: 638: pitch = B;
 31489  001876  0E0B               	movlw	11
 31490  001878  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31491                           
 31492                           ; BSR set to: 0
 31493                           ;keyboard.c: 639: ON_OFF = 1;
 31494  00187A  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31495                           
 31496                           ; BSR set to: 0
 31497                           ;keyboard.c: 640: playThisNote(pitch);
 31498  00187C  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31499  00187E  ECF7  F031         	call	_playThisNote
 31500                           
 31501                           ;keyboard.c: 641: keyboard.SW12 = 1;
 31502  001882  0100               	movlb	0	; () banked
 31503  001884  87D1               	bsf	(_keyboard+1)& (0+255),3,b
 31504  001886                     l1473:
 31505                           
 31506                           ; BSR set to: 0
 31507                           ;keyboard.c: 642: }
 31508                           ;keyboard.c: 643: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW13) {
 31509                           
 31510                           ; BSR set to: 0
 31511  001886  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 31512                           
 31513                           ; BSR set to: 0
 31514  001888  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31515  00188A  D00A               	goto	l1474
 31516                           
 31517                           ; BSR set to: 0
 31518  00188C  B9D1               	btfsc	(_keyboard+1)& (0+255),4,b
 31519  00188E  D008               	goto	l1474
 31520                           
 31521                           ; BSR set to: 0
 31522                           ;keyboard.c: 644: pitch = C2;
 31523  001890  0E0C               	movlw	12
 31524  001892  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31525                           
 31526                           ; BSR set to: 0
 31527                           ;keyboard.c: 645: ON_OFF = 1;
 31528  001894  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31529                           
 31530                           ; BSR set to: 0
 31531                           ;keyboard.c: 646: playThisNote(pitch);
 31532  001896  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31533  001898  ECF7  F031         	call	_playThisNote
 31534                           
 31535                           ;keyboard.c: 647: keyboard.SW13 = 1;
 31536  00189C  0100               	movlb	0	; () banked
 31537  00189E  89D1               	bsf	(_keyboard+1)& (0+255),4,b
 31538  0018A0                     l1474:
 31539                           
 31540                           ; BSR set to: 0
 31541                           ;keyboard.c: 648: }
 31542                           ;keyboard.c: 649: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14) {
 31543                           
 31544                           ; BSR set to: 0
 31545  0018A0  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 31546                           
 31547                           ; BSR set to: 0
 31548  0018A2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31549  0018A4  D00A               	goto	l1475
 31550                           
 31551                           ; BSR set to: 0
 31552  0018A6  BBD1               	btfsc	(_keyboard+1)& (0+255),5,b
 31553  0018A8  D008               	goto	l1475
 31554                           
 31555                           ; BSR set to: 0
 31556                           ;keyboard.c: 650: pitch = C2s;
 31557  0018AA  0E0D               	movlw	13
 31558  0018AC  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31559                           
 31560                           ; BSR set to: 0
 31561                           ;keyboard.c: 651: ON_OFF = 1;
 31562  0018AE  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31563                           
 31564                           ; BSR set to: 0
 31565                           ;keyboard.c: 652: playThisNote(pitch);
 31566  0018B0  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31567  0018B2  ECF7  F031         	call	_playThisNote
 31568                           
 31569                           ;keyboard.c: 653: keyboard.SW14 = 1;
 31570  0018B6  0100               	movlb	0	; () banked
 31571  0018B8  8BD1               	bsf	(_keyboard+1)& (0+255),5,b
 31572  0018BA                     l1475:
 31573                           
 31574                           ; BSR set to: 0
 31575                           ;keyboard.c: 654: }
 31576                           ;keyboard.c: 655: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW15) {
 31577                           
 31578                           ; BSR set to: 0
 31579  0018BA  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 31580                           
 31581                           ; BSR set to: 0
 31582  0018BC  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31583  0018BE  D00A               	goto	l1476
 31584                           
 31585                           ; BSR set to: 0
 31586  0018C0  BDD1               	btfsc	(_keyboard+1)& (0+255),6,b
 31587  0018C2  D008               	goto	l1476
 31588                           
 31589                           ; BSR set to: 0
 31590                           ;keyboard.c: 656: pitch = D2;
 31591  0018C4  0E0E               	movlw	14
 31592  0018C6  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31593                           
 31594                           ; BSR set to: 0
 31595                           ;keyboard.c: 657: ON_OFF = 1;
 31596  0018C8  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31597                           
 31598                           ; BSR set to: 0
 31599                           ;keyboard.c: 658: playThisNote(pitch);
 31600  0018CA  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31601  0018CC  ECF7  F031         	call	_playThisNote
 31602                           
 31603                           ;keyboard.c: 659: keyboard.SW15 = 1;
 31604  0018D0  0100               	movlb	0	; () banked
 31605  0018D2  8DD1               	bsf	(_keyboard+1)& (0+255),6,b
 31606  0018D4                     l1476:
 31607                           
 31608                           ; BSR set to: 0
 31609                           ;keyboard.c: 660: }
 31610                           ;keyboard.c: 661: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16) {
 31611                           
 31612                           ; BSR set to: 0
 31613  0018D4  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 31614                           
 31615                           ; BSR set to: 0
 31616  0018D6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31617  0018D8  D00A               	goto	l1477
 31618                           
 31619                           ; BSR set to: 0
 31620  0018DA  BFD1               	btfsc	(_keyboard+1)& (0+255),7,b
 31621  0018DC  D008               	goto	l1477
 31622                           
 31623                           ; BSR set to: 0
 31624                           ;keyboard.c: 662: pitch = D2s;
 31625  0018DE  0E0F               	movlw	15
 31626  0018E0  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31627                           
 31628                           ; BSR set to: 0
 31629                           ;keyboard.c: 663: ON_OFF = 1;
 31630  0018E2  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31631                           
 31632                           ; BSR set to: 0
 31633                           ;keyboard.c: 664: playThisNote(pitch);
 31634  0018E4  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31635  0018E6  ECF7  F031         	call	_playThisNote
 31636                           
 31637                           ;keyboard.c: 665: keyboard.SW16 = 1;
 31638  0018EA  0100               	movlb	0	; () banked
 31639  0018EC  8FD1               	bsf	(_keyboard+1)& (0+255),7,b
 31640  0018EE                     l1477:
 31641                           
 31642                           ; BSR set to: 0
 31643                           ;keyboard.c: 666: }
 31644                           ;keyboard.c: 667: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW17) {
 31645                           
 31646                           ; BSR set to: 0
 31647  0018EE  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 31648                           
 31649                           ; BSR set to: 0
 31650  0018F0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31651  0018F2  D00A               	goto	l1478
 31652                           
 31653                           ; BSR set to: 0
 31654  0018F4  B1D2               	btfsc	(_keyboard+2)& (0+255),0,b
 31655  0018F6  D008               	goto	l1478
 31656                           
 31657                           ; BSR set to: 0
 31658                           ;keyboard.c: 668: pitch = E2;
 31659  0018F8  0E10               	movlw	16
 31660  0018FA  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31661                           
 31662                           ; BSR set to: 0
 31663                           ;keyboard.c: 669: ON_OFF = 1;
 31664  0018FC  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31665                           
 31666                           ; BSR set to: 0
 31667                           ;keyboard.c: 670: playThisNote(pitch);
 31668  0018FE  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31669  001900  ECF7  F031         	call	_playThisNote
 31670                           
 31671                           ;keyboard.c: 671: keyboard.SW17 = 1;
 31672  001904  0100               	movlb	0	; () banked
 31673  001906  81D2               	bsf	(_keyboard+2)& (0+255),0,b
 31674  001908                     l1478:
 31675                           
 31676                           ; BSR set to: 0
 31677                           ;keyboard.c: 672: }
 31678                           ;keyboard.c: 673: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW18) {
 31679                           
 31680                           ; BSR set to: 0
 31681  001908  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 31682                           
 31683                           ; BSR set to: 0
 31684  00190A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31685  00190C  D00A               	goto	l1479
 31686                           
 31687                           ; BSR set to: 0
 31688  00190E  B3D2               	btfsc	(_keyboard+2)& (0+255),1,b
 31689  001910  D008               	goto	l1479
 31690                           
 31691                           ; BSR set to: 0
 31692                           ;keyboard.c: 674: pitch = F2;
 31693  001912  0E11               	movlw	17
 31694  001914  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31695                           
 31696                           ; BSR set to: 0
 31697                           ;keyboard.c: 675: ON_OFF = 1;
 31698  001916  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31699                           
 31700                           ; BSR set to: 0
 31701                           ;keyboard.c: 676: playThisNote(pitch);
 31702  001918  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31703  00191A  ECF7  F031         	call	_playThisNote
 31704                           
 31705                           ;keyboard.c: 677: keyboard.SW18 = 1;
 31706  00191E  0100               	movlb	0	; () banked
 31707  001920  83D2               	bsf	(_keyboard+2)& (0+255),1,b
 31708  001922                     l1479:
 31709                           
 31710                           ; BSR set to: 0
 31711                           ;keyboard.c: 678: }
 31712                           ;keyboard.c: 679: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19) {
 31713                           
 31714                           ; BSR set to: 0
 31715  001922  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 31716                           
 31717                           ; BSR set to: 0
 31718  001924  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31719  001926  D00A               	goto	l1480
 31720                           
 31721                           ; BSR set to: 0
 31722  001928  B5D2               	btfsc	(_keyboard+2)& (0+255),2,b
 31723  00192A  D008               	goto	l1480
 31724                           
 31725                           ; BSR set to: 0
 31726                           ;keyboard.c: 680: pitch = F2s;
 31727  00192C  0E12               	movlw	18
 31728  00192E  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31729                           
 31730                           ; BSR set to: 0
 31731                           ;keyboard.c: 681: ON_OFF = 1;
 31732  001930  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31733                           
 31734                           ; BSR set to: 0
 31735                           ;keyboard.c: 682: playThisNote(pitch);
 31736  001932  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31737  001934  ECF7  F031         	call	_playThisNote
 31738                           
 31739                           ;keyboard.c: 683: keyboard.SW19 = 1;
 31740  001938  0100               	movlb	0	; () banked
 31741  00193A  85D2               	bsf	(_keyboard+2)& (0+255),2,b
 31742  00193C                     l1480:
 31743                           
 31744                           ; BSR set to: 0
 31745                           ;keyboard.c: 684: }
 31746                           ;keyboard.c: 685: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW20) {
 31747                           
 31748                           ; BSR set to: 0
 31749  00193C  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 31750                           
 31751                           ; BSR set to: 0
 31752  00193E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31753  001940  D00A               	goto	l1481
 31754                           
 31755                           ; BSR set to: 0
 31756  001942  B7D2               	btfsc	(_keyboard+2)& (0+255),3,b
 31757  001944  D008               	goto	l1481
 31758                           
 31759                           ; BSR set to: 0
 31760                           ;keyboard.c: 686: pitch = G2;
 31761  001946  0E13               	movlw	19
 31762  001948  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31763                           
 31764                           ; BSR set to: 0
 31765                           ;keyboard.c: 687: ON_OFF = 1;
 31766  00194A  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31767                           
 31768                           ; BSR set to: 0
 31769                           ;keyboard.c: 688: playThisNote(pitch);
 31770  00194C  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31771  00194E  ECF7  F031         	call	_playThisNote
 31772                           
 31773                           ;keyboard.c: 689: keyboard.SW20 = 1;
 31774  001952  0100               	movlb	0	; () banked
 31775  001954  87D2               	bsf	(_keyboard+2)& (0+255),3,b
 31776  001956                     l1481:
 31777                           
 31778                           ; BSR set to: 0
 31779                           ;keyboard.c: 690: }
 31780                           ;keyboard.c: 691: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21) {
 31781                           
 31782                           ; BSR set to: 0
 31783  001956  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 31784                           
 31785                           ; BSR set to: 0
 31786  001958  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31787  00195A  D00A               	goto	l1482
 31788                           
 31789                           ; BSR set to: 0
 31790  00195C  B9D2               	btfsc	(_keyboard+2)& (0+255),4,b
 31791  00195E  D008               	goto	l1482
 31792                           
 31793                           ; BSR set to: 0
 31794                           ;keyboard.c: 692: pitch = G2s;
 31795  001960  0E14               	movlw	20
 31796  001962  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31797                           
 31798                           ; BSR set to: 0
 31799                           ;keyboard.c: 693: ON_OFF = 1;
 31800  001964  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31801                           
 31802                           ; BSR set to: 0
 31803                           ;keyboard.c: 694: playThisNote(pitch);
 31804  001966  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31805  001968  ECF7  F031         	call	_playThisNote
 31806                           
 31807                           ;keyboard.c: 695: keyboard.SW21 = 1;
 31808  00196C  0100               	movlb	0	; () banked
 31809  00196E  89D2               	bsf	(_keyboard+2)& (0+255),4,b
 31810  001970                     l1482:
 31811                           
 31812                           ; BSR set to: 0
 31813                           ;keyboard.c: 696: }
 31814                           ;keyboard.c: 697: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW22) {
 31815                           
 31816                           ; BSR set to: 0
 31817  001970  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 31818                           
 31819                           ; BSR set to: 0
 31820  001972  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31821  001974  D00A               	goto	l1483
 31822                           
 31823                           ; BSR set to: 0
 31824  001976  BBD2               	btfsc	(_keyboard+2)& (0+255),5,b
 31825  001978  D008               	goto	l1483
 31826                           
 31827                           ; BSR set to: 0
 31828                           ;keyboard.c: 698: pitch = A2;
 31829  00197A  0E15               	movlw	21
 31830  00197C  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31831                           
 31832                           ; BSR set to: 0
 31833                           ;keyboard.c: 699: ON_OFF = 1;
 31834  00197E  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31835                           
 31836                           ; BSR set to: 0
 31837                           ;keyboard.c: 700: playThisNote(pitch);
 31838  001980  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31839  001982  ECF7  F031         	call	_playThisNote
 31840                           
 31841                           ;keyboard.c: 701: keyboard.SW22 = 1;
 31842  001986  0100               	movlb	0	; () banked
 31843  001988  8BD2               	bsf	(_keyboard+2)& (0+255),5,b
 31844  00198A                     l1483:
 31845                           
 31846                           ; BSR set to: 0
 31847                           ;keyboard.c: 702: }
 31848                           ;keyboard.c: 703: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23) {
 31849                           
 31850                           ; BSR set to: 0
 31851  00198A  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 31852                           
 31853                           ; BSR set to: 0
 31854  00198C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31855  00198E  D00A               	goto	l1484
 31856                           
 31857                           ; BSR set to: 0
 31858  001990  BDD2               	btfsc	(_keyboard+2)& (0+255),6,b
 31859  001992  D008               	goto	l1484
 31860                           
 31861                           ; BSR set to: 0
 31862                           ;keyboard.c: 704: pitch = A2s;
 31863  001994  0E16               	movlw	22
 31864  001996  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31865                           
 31866                           ; BSR set to: 0
 31867                           ;keyboard.c: 705: ON_OFF = 1;
 31868  001998  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31869                           
 31870                           ; BSR set to: 0
 31871                           ;keyboard.c: 706: playThisNote(pitch);
 31872  00199A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31873  00199C  ECF7  F031         	call	_playThisNote
 31874                           
 31875                           ;keyboard.c: 707: keyboard.SW23 = 1;
 31876  0019A0  0100               	movlb	0	; () banked
 31877  0019A2  8DD2               	bsf	(_keyboard+2)& (0+255),6,b
 31878  0019A4                     l1484:
 31879                           
 31880                           ; BSR set to: 0
 31881                           ;keyboard.c: 708: }
 31882                           ;keyboard.c: 709: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW24) {
 31883                           
 31884                           ; BSR set to: 0
 31885  0019A4  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 31886                           
 31887                           ; BSR set to: 0
 31888  0019A6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31889  0019A8  D00A               	goto	l1485
 31890                           
 31891                           ; BSR set to: 0
 31892  0019AA  BFD2               	btfsc	(_keyboard+2)& (0+255),7,b
 31893  0019AC  D008               	goto	l1485
 31894                           
 31895                           ; BSR set to: 0
 31896                           ;keyboard.c: 710: pitch = B2;
 31897  0019AE  0E17               	movlw	23
 31898  0019B0  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31899                           
 31900                           ; BSR set to: 0
 31901                           ;keyboard.c: 711: ON_OFF = 1;
 31902  0019B2  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31903                           
 31904                           ; BSR set to: 0
 31905                           ;keyboard.c: 712: playThisNote(pitch);
 31906  0019B4  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31907  0019B6  ECF7  F031         	call	_playThisNote
 31908                           
 31909                           ;keyboard.c: 713: keyboard.SW24 = 1;
 31910  0019BA  0100               	movlb	0	; () banked
 31911  0019BC  8FD2               	bsf	(_keyboard+2)& (0+255),7,b
 31912  0019BE                     l1485:
 31913                           
 31914                           ; BSR set to: 0
 31915                           ;keyboard.c: 714: }
 31916                           ;keyboard.c: 715: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW25) {
 31917                           
 31918                           ; BSR set to: 0
 31919  0019BE  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 31920                           
 31921                           ; BSR set to: 0
 31922  0019C0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 31923  0019C2  D00A               	goto	l1486
 31924                           
 31925                           ; BSR set to: 0
 31926  0019C4  B1D3               	btfsc	(_keyboard+3)& (0+255),0,b
 31927  0019C6  D008               	goto	l1486
 31928                           
 31929                           ; BSR set to: 0
 31930                           ;keyboard.c: 716: pitch = C3;
 31931  0019C8  0E18               	movlw	24
 31932  0019CA  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31933                           
 31934                           ; BSR set to: 0
 31935                           ;keyboard.c: 717: ON_OFF = 1;
 31936  0019CC  8836               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31937                           
 31938                           ; BSR set to: 0
 31939                           ;keyboard.c: 718: playThisNote(pitch);
 31940  0019CE  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31941  0019D0  ECF7  F031         	call	_playThisNote
 31942                           
 31943                           ;keyboard.c: 719: keyboard.SW25 = 1;
 31944  0019D4  0100               	movlb	0	; () banked
 31945  0019D6  81D3               	bsf	(_keyboard+3)& (0+255),0,b
 31946  0019D8                     l1486:
 31947                           
 31948                           ; BSR set to: 0
 31949                           ;keyboard.c: 720: }
 31950                           ;keyboard.c: 723: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x000000
      +                          01) == 0) && keyboard.SW1) {
 31951                           
 31952                           ; BSR set to: 0
 31953  0019D8  B1D4               	btfsc	_button_state_last& (0+255),0,b
 31954                           
 31955                           ; BSR set to: 0
 31956  0019DA  B1D8               	btfsc	_button_state_now& (0+255),0,b
 31957  0019DC  D00A               	goto	l1487
 31958                           
 31959                           ; BSR set to: 0
 31960  0019DE  A1D0               	btfss	_keyboard& (0+255),0,b
 31961  0019E0  D008               	goto	l1487
 31962                           
 31963                           ; BSR set to: 0
 31964                           ;keyboard.c: 724: pitch = C;
 31965  0019E2  0E00               	movlw	0
 31966  0019E4  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 31967                           
 31968                           ; BSR set to: 0
 31969                           ;keyboard.c: 725: ON_OFF = 0;
 31970  0019E6  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31971                           
 31972                           ; BSR set to: 0
 31973                           ;keyboard.c: 726: playThisNote(pitch);
 31974  0019E8  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 31975  0019EA  ECF7  F031         	call	_playThisNote
 31976                           
 31977                           ;keyboard.c: 727: keyboard.SW1 = 0;
 31978  0019EE  0100               	movlb	0	; () banked
 31979  0019F0  91D0               	bcf	_keyboard& (0+255),0,b
 31980  0019F2                     l1487:
 31981                           
 31982                           ; BSR set to: 0
 31983                           ;keyboard.c: 728: }
 31984                           ;keyboard.c: 729: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 31985                           
 31986                           ; BSR set to: 0
 31987  0019F2  B3D4               	btfsc	_button_state_last& (0+255),1,b
 31988                           
 31989                           ; BSR set to: 0
 31990  0019F4  B3D8               	btfsc	_button_state_now& (0+255),1,b
 31991  0019F6  D00A               	goto	l1488
 31992                           
 31993                           ; BSR set to: 0
 31994  0019F8  A3D0               	btfss	_keyboard& (0+255),1,b
 31995  0019FA  D008               	goto	l1488
 31996                           
 31997                           ; BSR set to: 0
 31998                           ;keyboard.c: 730: pitch = Cs;
 31999  0019FC  0E01               	movlw	1
 32000  0019FE  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32001                           
 32002                           ; BSR set to: 0
 32003                           ;keyboard.c: 731: ON_OFF = 0;
 32004  001A00  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32005                           
 32006                           ; BSR set to: 0
 32007                           ;keyboard.c: 732: playThisNote(pitch);
 32008  001A02  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32009  001A04  ECF7  F031         	call	_playThisNote
 32010                           
 32011                           ;keyboard.c: 733: keyboard.SW2 = 0;
 32012  001A08  0100               	movlb	0	; () banked
 32013  001A0A  93D0               	bcf	_keyboard& (0+255),1,b
 32014  001A0C                     l1488:
 32015                           
 32016                           ; BSR set to: 0
 32017                           ;keyboard.c: 734: }
 32018                           ;keyboard.c: 735: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x000000
      +                          04) == 0) && keyboard.SW3) {
 32019                           
 32020                           ; BSR set to: 0
 32021  001A0C  B5D4               	btfsc	_button_state_last& (0+255),2,b
 32022                           
 32023                           ; BSR set to: 0
 32024  001A0E  B5D8               	btfsc	_button_state_now& (0+255),2,b
 32025  001A10  D00A               	goto	l1489
 32026                           
 32027                           ; BSR set to: 0
 32028  001A12  A5D0               	btfss	_keyboard& (0+255),2,b
 32029  001A14  D008               	goto	l1489
 32030                           
 32031                           ; BSR set to: 0
 32032                           ;keyboard.c: 736: pitch = D;
 32033  001A16  0E02               	movlw	2
 32034  001A18  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32035                           
 32036                           ; BSR set to: 0
 32037                           ;keyboard.c: 737: ON_OFF = 0;
 32038  001A1A  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32039                           
 32040                           ; BSR set to: 0
 32041                           ;keyboard.c: 738: playThisNote(pitch);
 32042  001A1C  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32043  001A1E  ECF7  F031         	call	_playThisNote
 32044                           
 32045                           ;keyboard.c: 739: keyboard.SW3 = 0;
 32046  001A22  0100               	movlb	0	; () banked
 32047  001A24  95D0               	bcf	_keyboard& (0+255),2,b
 32048  001A26                     l1489:
 32049                           
 32050                           ; BSR set to: 0
 32051                           ;keyboard.c: 740: }
 32052                           ;keyboard.c: 741: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 32053                           
 32054                           ; BSR set to: 0
 32055  001A26  B7D4               	btfsc	_button_state_last& (0+255),3,b
 32056                           
 32057                           ; BSR set to: 0
 32058  001A28  B7D8               	btfsc	_button_state_now& (0+255),3,b
 32059  001A2A  D00A               	goto	l1490
 32060                           
 32061                           ; BSR set to: 0
 32062  001A2C  A7D0               	btfss	_keyboard& (0+255),3,b
 32063  001A2E  D008               	goto	l1490
 32064                           
 32065                           ; BSR set to: 0
 32066                           ;keyboard.c: 742: pitch = Ds;
 32067  001A30  0E03               	movlw	3
 32068  001A32  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32069                           
 32070                           ; BSR set to: 0
 32071                           ;keyboard.c: 743: ON_OFF = 0;
 32072  001A34  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32073                           
 32074                           ; BSR set to: 0
 32075                           ;keyboard.c: 744: playThisNote(pitch);
 32076  001A36  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32077  001A38  ECF7  F031         	call	_playThisNote
 32078                           
 32079                           ;keyboard.c: 745: keyboard.SW4 = 0;
 32080  001A3C  0100               	movlb	0	; () banked
 32081  001A3E  97D0               	bcf	_keyboard& (0+255),3,b
 32082  001A40                     l1490:
 32083                           
 32084                           ; BSR set to: 0
 32085                           ;keyboard.c: 746: }
 32086                           ;keyboard.c: 747: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x000000
      +                          10) == 0) && keyboard.SW5) {
 32087                           
 32088                           ; BSR set to: 0
 32089  001A40  B9D4               	btfsc	_button_state_last& (0+255),4,b
 32090                           
 32091                           ; BSR set to: 0
 32092  001A42  B9D8               	btfsc	_button_state_now& (0+255),4,b
 32093  001A44  D00A               	goto	l1491
 32094                           
 32095                           ; BSR set to: 0
 32096  001A46  A9D0               	btfss	_keyboard& (0+255),4,b
 32097  001A48  D008               	goto	l1491
 32098                           
 32099                           ; BSR set to: 0
 32100                           ;keyboard.c: 748: pitch = E;
 32101  001A4A  0E04               	movlw	4
 32102  001A4C  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32103                           
 32104                           ; BSR set to: 0
 32105                           ;keyboard.c: 749: ON_OFF = 0;
 32106  001A4E  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32107                           
 32108                           ; BSR set to: 0
 32109                           ;keyboard.c: 750: playThisNote(pitch);
 32110  001A50  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32111  001A52  ECF7  F031         	call	_playThisNote
 32112                           
 32113                           ;keyboard.c: 751: keyboard.SW5 = 0;
 32114  001A56  0100               	movlb	0	; () banked
 32115  001A58  99D0               	bcf	_keyboard& (0+255),4,b
 32116  001A5A                     l1491:
 32117                           
 32118                           ; BSR set to: 0
 32119                           ;keyboard.c: 752: }
 32120                           ;keyboard.c: 753: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x000000
      +                          20) == 0) && keyboard.SW6) {
 32121                           
 32122                           ; BSR set to: 0
 32123  001A5A  BBD4               	btfsc	_button_state_last& (0+255),5,b
 32124                           
 32125                           ; BSR set to: 0
 32126  001A5C  BBD8               	btfsc	_button_state_now& (0+255),5,b
 32127  001A5E  D00A               	goto	l1492
 32128                           
 32129                           ; BSR set to: 0
 32130  001A60  ABD0               	btfss	_keyboard& (0+255),5,b
 32131  001A62  D008               	goto	l1492
 32132                           
 32133                           ; BSR set to: 0
 32134                           ;keyboard.c: 754: pitch = F;
 32135  001A64  0E05               	movlw	5
 32136  001A66  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32137                           
 32138                           ; BSR set to: 0
 32139                           ;keyboard.c: 755: ON_OFF = 0;
 32140  001A68  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32141                           
 32142                           ; BSR set to: 0
 32143                           ;keyboard.c: 756: playThisNote(pitch);
 32144  001A6A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32145  001A6C  ECF7  F031         	call	_playThisNote
 32146                           
 32147                           ;keyboard.c: 757: keyboard.SW6 = 0;
 32148  001A70  0100               	movlb	0	; () banked
 32149  001A72  9BD0               	bcf	_keyboard& (0+255),5,b
 32150  001A74                     l1492:
 32151                           
 32152                           ; BSR set to: 0
 32153                           ;keyboard.c: 758: }
 32154                           ;keyboard.c: 759: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 32155                           
 32156                           ; BSR set to: 0
 32157  001A74  BDD4               	btfsc	_button_state_last& (0+255),6,b
 32158                           
 32159                           ; BSR set to: 0
 32160  001A76  BDD8               	btfsc	_button_state_now& (0+255),6,b
 32161  001A78  D00A               	goto	l1493
 32162                           
 32163                           ; BSR set to: 0
 32164  001A7A  ADD0               	btfss	_keyboard& (0+255),6,b
 32165  001A7C  D008               	goto	l1493
 32166                           
 32167                           ; BSR set to: 0
 32168                           ;keyboard.c: 760: pitch = Fs;
 32169  001A7E  0E06               	movlw	6
 32170  001A80  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32171                           
 32172                           ; BSR set to: 0
 32173                           ;keyboard.c: 761: ON_OFF = 0;
 32174  001A82  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32175                           
 32176                           ; BSR set to: 0
 32177                           ;keyboard.c: 762: playThisNote(pitch);
 32178  001A84  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32179  001A86  ECF7  F031         	call	_playThisNote
 32180                           
 32181                           ;keyboard.c: 763: keyboard.SW7 = 0;
 32182  001A8A  0100               	movlb	0	; () banked
 32183  001A8C  9DD0               	bcf	_keyboard& (0+255),6,b
 32184  001A8E                     l1493:
 32185                           
 32186                           ; BSR set to: 0
 32187                           ;keyboard.c: 764: }
 32188                           ;keyboard.c: 765: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x000000
      +                          80) == 0) && keyboard.SW8) {
 32189                           
 32190                           ; BSR set to: 0
 32191  001A8E  BFD4               	btfsc	_button_state_last& (0+255),7,b
 32192                           
 32193                           ; BSR set to: 0
 32194  001A90  BFD8               	btfsc	_button_state_now& (0+255),7,b
 32195  001A92  D00A               	goto	l1494
 32196                           
 32197                           ; BSR set to: 0
 32198  001A94  AFD0               	btfss	_keyboard& (0+255),7,b
 32199  001A96  D008               	goto	l1494
 32200                           
 32201                           ; BSR set to: 0
 32202                           ;keyboard.c: 766: pitch = G;
 32203  001A98  0E07               	movlw	7
 32204  001A9A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32205                           
 32206                           ; BSR set to: 0
 32207                           ;keyboard.c: 767: ON_OFF = 0;
 32208  001A9C  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32209                           
 32210                           ; BSR set to: 0
 32211                           ;keyboard.c: 768: playThisNote(pitch);
 32212  001A9E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32213  001AA0  ECF7  F031         	call	_playThisNote
 32214                           
 32215                           ;keyboard.c: 769: keyboard.SW8 = 0;
 32216  001AA4  0100               	movlb	0	; () banked
 32217  001AA6  9FD0               	bcf	_keyboard& (0+255),7,b
 32218  001AA8                     l1494:
 32219                           
 32220                           ; BSR set to: 0
 32221                           ;keyboard.c: 770: }
 32222                           ;keyboard.c: 771: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 32223                           
 32224                           ; BSR set to: 0
 32225  001AA8  B1D5               	btfsc	(_button_state_last+1)& (0+255),0,b
 32226                           
 32227                           ; BSR set to: 0
 32228  001AAA  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 32229  001AAC  D00A               	goto	l1495
 32230                           
 32231                           ; BSR set to: 0
 32232  001AAE  A1D1               	btfss	(_keyboard+1)& (0+255),0,b
 32233  001AB0  D008               	goto	l1495
 32234                           
 32235                           ; BSR set to: 0
 32236                           ;keyboard.c: 772: pitch = Gs;
 32237  001AB2  0E08               	movlw	8
 32238  001AB4  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32239                           
 32240                           ; BSR set to: 0
 32241                           ;keyboard.c: 773: ON_OFF = 0;
 32242  001AB6  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32243                           
 32244                           ; BSR set to: 0
 32245                           ;keyboard.c: 774: playThisNote(pitch);
 32246  001AB8  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32247  001ABA  ECF7  F031         	call	_playThisNote
 32248                           
 32249                           ;keyboard.c: 775: keyboard.SW9 = 0;
 32250  001ABE  0100               	movlb	0	; () banked
 32251  001AC0  91D1               	bcf	(_keyboard+1)& (0+255),0,b
 32252  001AC2                     l1495:
 32253                           
 32254                           ; BSR set to: 0
 32255                           ;keyboard.c: 776: }
 32256                           ;keyboard.c: 777: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x000002
      +                          00) == 0) && keyboard.SW10) {
 32257                           
 32258                           ; BSR set to: 0
 32259  001AC2  B3D5               	btfsc	(_button_state_last+1)& (0+255),1,b
 32260                           
 32261                           ; BSR set to: 0
 32262  001AC4  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 32263  001AC6  D00A               	goto	l1496
 32264                           
 32265                           ; BSR set to: 0
 32266  001AC8  A3D1               	btfss	(_keyboard+1)& (0+255),1,b
 32267  001ACA  D008               	goto	l1496
 32268                           
 32269                           ; BSR set to: 0
 32270                           ;keyboard.c: 778: pitch = A;
 32271  001ACC  0E09               	movlw	9
 32272  001ACE  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32273                           
 32274                           ; BSR set to: 0
 32275                           ;keyboard.c: 779: ON_OFF = 0;
 32276  001AD0  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32277                           
 32278                           ; BSR set to: 0
 32279                           ;keyboard.c: 780: playThisNote(pitch);
 32280  001AD2  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32281  001AD4  ECF7  F031         	call	_playThisNote
 32282                           
 32283                           ;keyboard.c: 781: keyboard.SW10 = 0;
 32284  001AD8  0100               	movlb	0	; () banked
 32285  001ADA  93D1               	bcf	(_keyboard+1)& (0+255),1,b
 32286  001ADC                     l1496:
 32287                           
 32288                           ; BSR set to: 0
 32289                           ;keyboard.c: 782: }
 32290                           ;keyboard.c: 783: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 32291                           
 32292                           ; BSR set to: 0
 32293  001ADC  B5D5               	btfsc	(_button_state_last+1)& (0+255),2,b
 32294                           
 32295                           ; BSR set to: 0
 32296  001ADE  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 32297  001AE0  D00A               	goto	l1497
 32298                           
 32299                           ; BSR set to: 0
 32300  001AE2  A5D1               	btfss	(_keyboard+1)& (0+255),2,b
 32301  001AE4  D008               	goto	l1497
 32302                           
 32303                           ; BSR set to: 0
 32304                           ;keyboard.c: 784: pitch = As;
 32305  001AE6  0E0A               	movlw	10
 32306  001AE8  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32307                           
 32308                           ; BSR set to: 0
 32309                           ;keyboard.c: 785: ON_OFF = 0;
 32310  001AEA  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32311                           
 32312                           ; BSR set to: 0
 32313                           ;keyboard.c: 786: playThisNote(pitch);
 32314  001AEC  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32315  001AEE  ECF7  F031         	call	_playThisNote
 32316                           
 32317                           ;keyboard.c: 787: keyboard.SW11 = 0;
 32318  001AF2  0100               	movlb	0	; () banked
 32319  001AF4  95D1               	bcf	(_keyboard+1)& (0+255),2,b
 32320  001AF6                     l1497:
 32321                           
 32322                           ; BSR set to: 0
 32323                           ;keyboard.c: 788: }
 32324                           ;keyboard.c: 789: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x000008
      +                          00) == 0) && keyboard.SW12) {
 32325                           
 32326                           ; BSR set to: 0
 32327  001AF6  B7D5               	btfsc	(_button_state_last+1)& (0+255),3,b
 32328                           
 32329                           ; BSR set to: 0
 32330  001AF8  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 32331  001AFA  D00A               	goto	l1498
 32332                           
 32333                           ; BSR set to: 0
 32334  001AFC  A7D1               	btfss	(_keyboard+1)& (0+255),3,b
 32335  001AFE  D008               	goto	l1498
 32336                           
 32337                           ; BSR set to: 0
 32338                           ;keyboard.c: 790: pitch = B;
 32339  001B00  0E0B               	movlw	11
 32340  001B02  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32341                           
 32342                           ; BSR set to: 0
 32343                           ;keyboard.c: 791: ON_OFF = 0;
 32344  001B04  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32345                           
 32346                           ; BSR set to: 0
 32347                           ;keyboard.c: 792: playThisNote(pitch);
 32348  001B06  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32349  001B08  ECF7  F031         	call	_playThisNote
 32350                           
 32351                           ;keyboard.c: 793: keyboard.SW12 = 0;
 32352  001B0C  0100               	movlb	0	; () banked
 32353  001B0E  97D1               	bcf	(_keyboard+1)& (0+255),3,b
 32354  001B10                     l1498:
 32355                           
 32356                           ; BSR set to: 0
 32357                           ;keyboard.c: 794: }
 32358                           ;keyboard.c: 795: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x000010
      +                          00) == 0) && keyboard.SW13) {
 32359                           
 32360                           ; BSR set to: 0
 32361  001B10  B9D5               	btfsc	(_button_state_last+1)& (0+255),4,b
 32362                           
 32363                           ; BSR set to: 0
 32364  001B12  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 32365  001B14  D00A               	goto	l1499
 32366                           
 32367                           ; BSR set to: 0
 32368  001B16  A9D1               	btfss	(_keyboard+1)& (0+255),4,b
 32369  001B18  D008               	goto	l1499
 32370                           
 32371                           ; BSR set to: 0
 32372                           ;keyboard.c: 796: pitch = C2;
 32373  001B1A  0E0C               	movlw	12
 32374  001B1C  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32375                           
 32376                           ; BSR set to: 0
 32377                           ;keyboard.c: 797: ON_OFF = 0;
 32378  001B1E  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32379                           
 32380                           ; BSR set to: 0
 32381                           ;keyboard.c: 798: playThisNote(pitch);
 32382  001B20  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32383  001B22  ECF7  F031         	call	_playThisNote
 32384                           
 32385                           ;keyboard.c: 799: keyboard.SW13 = 0;
 32386  001B26  0100               	movlb	0	; () banked
 32387  001B28  99D1               	bcf	(_keyboard+1)& (0+255),4,b
 32388  001B2A                     l1499:
 32389                           
 32390                           ; BSR set to: 0
 32391                           ;keyboard.c: 800: }
 32392                           ;keyboard.c: 801: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 32393                           
 32394                           ; BSR set to: 0
 32395  001B2A  BBD5               	btfsc	(_button_state_last+1)& (0+255),5,b
 32396                           
 32397                           ; BSR set to: 0
 32398  001B2C  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 32399  001B2E  D00A               	goto	l1500
 32400                           
 32401                           ; BSR set to: 0
 32402  001B30  ABD1               	btfss	(_keyboard+1)& (0+255),5,b
 32403  001B32  D008               	goto	l1500
 32404                           
 32405                           ; BSR set to: 0
 32406                           ;keyboard.c: 802: pitch = C2s;
 32407  001B34  0E0D               	movlw	13
 32408  001B36  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32409                           
 32410                           ; BSR set to: 0
 32411                           ;keyboard.c: 803: ON_OFF = 0;
 32412  001B38  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32413                           
 32414                           ; BSR set to: 0
 32415                           ;keyboard.c: 804: playThisNote(pitch);
 32416  001B3A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32417  001B3C  ECF7  F031         	call	_playThisNote
 32418                           
 32419                           ;keyboard.c: 805: keyboard.SW14 = 0;
 32420  001B40  0100               	movlb	0	; () banked
 32421  001B42  9BD1               	bcf	(_keyboard+1)& (0+255),5,b
 32422  001B44                     l1500:
 32423                           
 32424                           ; BSR set to: 0
 32425                           ;keyboard.c: 806: }
 32426                           ;keyboard.c: 807: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x000040
      +                          00) == 0) && keyboard.SW15) {
 32427                           
 32428                           ; BSR set to: 0
 32429  001B44  BDD5               	btfsc	(_button_state_last+1)& (0+255),6,b
 32430                           
 32431                           ; BSR set to: 0
 32432  001B46  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 32433  001B48  D00A               	goto	l1501
 32434                           
 32435                           ; BSR set to: 0
 32436  001B4A  ADD1               	btfss	(_keyboard+1)& (0+255),6,b
 32437  001B4C  D008               	goto	l1501
 32438                           
 32439                           ; BSR set to: 0
 32440                           ;keyboard.c: 808: pitch = D2;
 32441  001B4E  0E0E               	movlw	14
 32442  001B50  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32443                           
 32444                           ; BSR set to: 0
 32445                           ;keyboard.c: 809: ON_OFF = 0;
 32446  001B52  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32447                           
 32448                           ; BSR set to: 0
 32449                           ;keyboard.c: 810: playThisNote(pitch);
 32450  001B54  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32451  001B56  ECF7  F031         	call	_playThisNote
 32452                           
 32453                           ;keyboard.c: 811: keyboard.SW15 = 0;
 32454  001B5A  0100               	movlb	0	; () banked
 32455  001B5C  9DD1               	bcf	(_keyboard+1)& (0+255),6,b
 32456  001B5E                     l1501:
 32457                           
 32458                           ; BSR set to: 0
 32459                           ;keyboard.c: 812: }
 32460                           ;keyboard.c: 813: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 32461                           
 32462                           ; BSR set to: 0
 32463  001B5E  BFD5               	btfsc	(_button_state_last+1)& (0+255),7,b
 32464                           
 32465                           ; BSR set to: 0
 32466  001B60  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 32467  001B62  D00A               	goto	l1502
 32468                           
 32469                           ; BSR set to: 0
 32470  001B64  AFD1               	btfss	(_keyboard+1)& (0+255),7,b
 32471  001B66  D008               	goto	l1502
 32472                           
 32473                           ; BSR set to: 0
 32474                           ;keyboard.c: 814: pitch = D2s;
 32475  001B68  0E0F               	movlw	15
 32476  001B6A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32477                           
 32478                           ; BSR set to: 0
 32479                           ;keyboard.c: 815: ON_OFF = 0;
 32480  001B6C  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32481                           
 32482                           ; BSR set to: 0
 32483                           ;keyboard.c: 816: playThisNote(pitch);
 32484  001B6E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32485  001B70  ECF7  F031         	call	_playThisNote
 32486                           
 32487                           ;keyboard.c: 817: keyboard.SW16 = 0;
 32488  001B74  0100               	movlb	0	; () banked
 32489  001B76  9FD1               	bcf	(_keyboard+1)& (0+255),7,b
 32490  001B78                     l1502:
 32491                           
 32492                           ; BSR set to: 0
 32493                           ;keyboard.c: 818: }
 32494                           ;keyboard.c: 819: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x000100
      +                          00) == 0) && keyboard.SW17) {
 32495                           
 32496                           ; BSR set to: 0
 32497  001B78  B1D6               	btfsc	(_button_state_last+2)& (0+255),0,b
 32498                           
 32499                           ; BSR set to: 0
 32500  001B7A  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 32501  001B7C  D00A               	goto	l1503
 32502                           
 32503                           ; BSR set to: 0
 32504  001B7E  A1D2               	btfss	(_keyboard+2)& (0+255),0,b
 32505  001B80  D008               	goto	l1503
 32506                           
 32507                           ; BSR set to: 0
 32508                           ;keyboard.c: 820: pitch = E2;
 32509  001B82  0E10               	movlw	16
 32510  001B84  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32511                           
 32512                           ; BSR set to: 0
 32513                           ;keyboard.c: 821: ON_OFF = 0;
 32514  001B86  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32515                           
 32516                           ; BSR set to: 0
 32517                           ;keyboard.c: 822: playThisNote(pitch);
 32518  001B88  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32519  001B8A  ECF7  F031         	call	_playThisNote
 32520                           
 32521                           ;keyboard.c: 823: keyboard.SW17 = 0;
 32522  001B8E  0100               	movlb	0	; () banked
 32523  001B90  91D2               	bcf	(_keyboard+2)& (0+255),0,b
 32524  001B92                     l1503:
 32525                           
 32526                           ; BSR set to: 0
 32527                           ;keyboard.c: 824: }
 32528                           ;keyboard.c: 825: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x000200
      +                          00) == 0) && keyboard.SW18) {
 32529                           
 32530                           ; BSR set to: 0
 32531  001B92  B3D6               	btfsc	(_button_state_last+2)& (0+255),1,b
 32532                           
 32533                           ; BSR set to: 0
 32534  001B94  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 32535  001B96  D00A               	goto	l1504
 32536                           
 32537                           ; BSR set to: 0
 32538  001B98  A3D2               	btfss	(_keyboard+2)& (0+255),1,b
 32539  001B9A  D008               	goto	l1504
 32540                           
 32541                           ; BSR set to: 0
 32542                           ;keyboard.c: 826: pitch = F2;
 32543  001B9C  0E11               	movlw	17
 32544  001B9E  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32545                           
 32546                           ; BSR set to: 0
 32547                           ;keyboard.c: 827: ON_OFF = 0;
 32548  001BA0  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32549                           
 32550                           ; BSR set to: 0
 32551                           ;keyboard.c: 828: playThisNote(pitch);
 32552  001BA2  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32553  001BA4  ECF7  F031         	call	_playThisNote
 32554                           
 32555                           ;keyboard.c: 829: keyboard.SW18 = 0;
 32556  001BA8  0100               	movlb	0	; () banked
 32557  001BAA  93D2               	bcf	(_keyboard+2)& (0+255),1,b
 32558  001BAC                     l1504:
 32559                           
 32560                           ; BSR set to: 0
 32561                           ;keyboard.c: 830: }
 32562                           ;keyboard.c: 831: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 32563                           
 32564                           ; BSR set to: 0
 32565  001BAC  B5D6               	btfsc	(_button_state_last+2)& (0+255),2,b
 32566                           
 32567                           ; BSR set to: 0
 32568  001BAE  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 32569  001BB0  D00A               	goto	l1505
 32570                           
 32571                           ; BSR set to: 0
 32572  001BB2  A5D2               	btfss	(_keyboard+2)& (0+255),2,b
 32573  001BB4  D008               	goto	l1505
 32574                           
 32575                           ; BSR set to: 0
 32576                           ;keyboard.c: 832: pitch = F2s;
 32577  001BB6  0E12               	movlw	18
 32578  001BB8  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32579                           
 32580                           ; BSR set to: 0
 32581                           ;keyboard.c: 833: ON_OFF = 0;
 32582  001BBA  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32583                           
 32584                           ; BSR set to: 0
 32585                           ;keyboard.c: 834: playThisNote(pitch);
 32586  001BBC  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32587  001BBE  ECF7  F031         	call	_playThisNote
 32588                           
 32589                           ;keyboard.c: 835: keyboard.SW19 = 0;
 32590  001BC2  0100               	movlb	0	; () banked
 32591  001BC4  95D2               	bcf	(_keyboard+2)& (0+255),2,b
 32592  001BC6                     l1505:
 32593                           
 32594                           ; BSR set to: 0
 32595                           ;keyboard.c: 836: }
 32596                           ;keyboard.c: 837: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x000800
      +                          00) == 0) && keyboard.SW20) {
 32597                           
 32598                           ; BSR set to: 0
 32599  001BC6  B7D6               	btfsc	(_button_state_last+2)& (0+255),3,b
 32600                           
 32601                           ; BSR set to: 0
 32602  001BC8  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 32603  001BCA  D00A               	goto	l1506
 32604                           
 32605                           ; BSR set to: 0
 32606  001BCC  A7D2               	btfss	(_keyboard+2)& (0+255),3,b
 32607  001BCE  D008               	goto	l1506
 32608                           
 32609                           ; BSR set to: 0
 32610                           ;keyboard.c: 838: pitch = G2;
 32611  001BD0  0E13               	movlw	19
 32612  001BD2  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32613                           
 32614                           ; BSR set to: 0
 32615                           ;keyboard.c: 839: ON_OFF = 0;
 32616  001BD4  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32617                           
 32618                           ; BSR set to: 0
 32619                           ;keyboard.c: 840: playThisNote(pitch);
 32620  001BD6  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32621  001BD8  ECF7  F031         	call	_playThisNote
 32622                           
 32623                           ;keyboard.c: 841: keyboard.SW20 = 0;
 32624  001BDC  0100               	movlb	0	; () banked
 32625  001BDE  97D2               	bcf	(_keyboard+2)& (0+255),3,b
 32626  001BE0                     l1506:
 32627                           
 32628                           ; BSR set to: 0
 32629                           ;keyboard.c: 842: }
 32630                           ;keyboard.c: 843: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 32631                           
 32632                           ; BSR set to: 0
 32633  001BE0  B9D6               	btfsc	(_button_state_last+2)& (0+255),4,b
 32634                           
 32635                           ; BSR set to: 0
 32636  001BE2  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 32637  001BE4  D00A               	goto	l1507
 32638                           
 32639                           ; BSR set to: 0
 32640  001BE6  A9D2               	btfss	(_keyboard+2)& (0+255),4,b
 32641  001BE8  D008               	goto	l1507
 32642                           
 32643                           ; BSR set to: 0
 32644                           ;keyboard.c: 844: pitch = G2s;
 32645  001BEA  0E14               	movlw	20
 32646  001BEC  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32647                           
 32648                           ; BSR set to: 0
 32649                           ;keyboard.c: 845: ON_OFF = 0;
 32650  001BEE  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32651                           
 32652                           ; BSR set to: 0
 32653                           ;keyboard.c: 846: playThisNote(pitch);
 32654  001BF0  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32655  001BF2  ECF7  F031         	call	_playThisNote
 32656                           
 32657                           ;keyboard.c: 847: keyboard.SW21 = 0;
 32658  001BF6  0100               	movlb	0	; () banked
 32659  001BF8  99D2               	bcf	(_keyboard+2)& (0+255),4,b
 32660  001BFA                     l1507:
 32661                           
 32662                           ; BSR set to: 0
 32663                           ;keyboard.c: 848: }
 32664                           ;keyboard.c: 849: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x002000
      +                          00) == 0) && keyboard.SW22) {
 32665                           
 32666                           ; BSR set to: 0
 32667  001BFA  BBD6               	btfsc	(_button_state_last+2)& (0+255),5,b
 32668                           
 32669                           ; BSR set to: 0
 32670  001BFC  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 32671  001BFE  D00A               	goto	l1508
 32672                           
 32673                           ; BSR set to: 0
 32674  001C00  ABD2               	btfss	(_keyboard+2)& (0+255),5,b
 32675  001C02  D008               	goto	l1508
 32676                           
 32677                           ; BSR set to: 0
 32678                           ;keyboard.c: 850: pitch = A2;
 32679  001C04  0E15               	movlw	21
 32680  001C06  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32681                           
 32682                           ; BSR set to: 0
 32683                           ;keyboard.c: 851: ON_OFF = 0;
 32684  001C08  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32685                           
 32686                           ; BSR set to: 0
 32687                           ;keyboard.c: 852: playThisNote(pitch);
 32688  001C0A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32689  001C0C  ECF7  F031         	call	_playThisNote
 32690                           
 32691                           ;keyboard.c: 853: keyboard.SW22 = 0;
 32692  001C10  0100               	movlb	0	; () banked
 32693  001C12  9BD2               	bcf	(_keyboard+2)& (0+255),5,b
 32694  001C14                     l1508:
 32695                           
 32696                           ; BSR set to: 0
 32697                           ;keyboard.c: 854: }
 32698                           ;keyboard.c: 855: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 32699                           
 32700                           ; BSR set to: 0
 32701  001C14  BDD6               	btfsc	(_button_state_last+2)& (0+255),6,b
 32702                           
 32703                           ; BSR set to: 0
 32704  001C16  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 32705  001C18  D00A               	goto	l1509
 32706                           
 32707                           ; BSR set to: 0
 32708  001C1A  ADD2               	btfss	(_keyboard+2)& (0+255),6,b
 32709  001C1C  D008               	goto	l1509
 32710                           
 32711                           ; BSR set to: 0
 32712                           ;keyboard.c: 856: pitch = A2s;
 32713  001C1E  0E16               	movlw	22
 32714  001C20  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32715                           
 32716                           ; BSR set to: 0
 32717                           ;keyboard.c: 857: ON_OFF = 0;
 32718  001C22  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32719                           
 32720                           ; BSR set to: 0
 32721                           ;keyboard.c: 858: playThisNote(pitch);
 32722  001C24  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32723  001C26  ECF7  F031         	call	_playThisNote
 32724                           
 32725                           ;keyboard.c: 859: keyboard.SW23 = 0;
 32726  001C2A  0100               	movlb	0	; () banked
 32727  001C2C  9DD2               	bcf	(_keyboard+2)& (0+255),6,b
 32728  001C2E                     l1509:
 32729                           
 32730                           ; BSR set to: 0
 32731                           ;keyboard.c: 860: }
 32732                           ;keyboard.c: 861: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x008000
      +                          00) == 0) && keyboard.SW24) {
 32733                           
 32734                           ; BSR set to: 0
 32735  001C2E  BFD6               	btfsc	(_button_state_last+2)& (0+255),7,b
 32736                           
 32737                           ; BSR set to: 0
 32738  001C30  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 32739  001C32  D00A               	goto	l1510
 32740                           
 32741                           ; BSR set to: 0
 32742  001C34  AFD2               	btfss	(_keyboard+2)& (0+255),7,b
 32743  001C36  D008               	goto	l1510
 32744                           
 32745                           ; BSR set to: 0
 32746                           ;keyboard.c: 862: pitch = B2;
 32747  001C38  0E17               	movlw	23
 32748  001C3A  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32749                           
 32750                           ; BSR set to: 0
 32751                           ;keyboard.c: 863: ON_OFF = 0;
 32752  001C3C  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32753                           
 32754                           ; BSR set to: 0
 32755                           ;keyboard.c: 864: playThisNote(pitch);
 32756  001C3E  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32757  001C40  ECF7  F031         	call	_playThisNote
 32758                           
 32759                           ;keyboard.c: 865: keyboard.SW24 = 0;
 32760  001C44  0100               	movlb	0	; () banked
 32761  001C46  9FD2               	bcf	(_keyboard+2)& (0+255),7,b
 32762  001C48                     l1510:
 32763                           
 32764                           ; BSR set to: 0
 32765                           ;keyboard.c: 866: }
 32766                           ;keyboard.c: 867: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x010000
      +                          00) == 0) && keyboard.SW25) {
 32767                           
 32768                           ; BSR set to: 0
 32769  001C48  A1D7               	btfss	(_button_state_last+3)& (0+255),0,b
 32770  001C4A  0012               	return	
 32771                           
 32772                           ; BSR set to: 0
 32773  001C4C  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 32774  001C4E  0012               	return	
 32775                           
 32776                           ; BSR set to: 0
 32777  001C50  A1D3               	btfss	(_keyboard+3)& (0+255),0,b
 32778  001C52  0012               	return	
 32779                           
 32780                           ; BSR set to: 0
 32781                           ;keyboard.c: 868: pitch = C3;
 32782  001C54  0E18               	movlw	24
 32783  001C56  6F85               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 32784                           
 32785                           ; BSR set to: 0
 32786                           ;keyboard.c: 869: ON_OFF = 0;
 32787  001C58  9836               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32788                           
 32789                           ; BSR set to: 0
 32790                           ;keyboard.c: 870: playThisNote(pitch);
 32791  001C5A  5185               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 32792  001C5C  ECF7  F031         	call	_playThisNote
 32793                           
 32794                           ;keyboard.c: 871: keyboard.SW25 = 0;
 32795  001C60  0100               	movlb	0	; () banked
 32796  001C62  91D3               	bcf	(_keyboard+3)& (0+255),0,b
 32797  001C64  0012               	return	
 32798  001C66                     __end_of_keyboard_all_note_efficient:
 32799                           	opt stack 0
 32800                           tblptru	equ	0xFF8
 32801                           tblptrh	equ	0xFF7
 32802                           tblptrl	equ	0xFF6
 32803                           tablat	equ	0xFF5
 32804                           prodh	equ	0xFF4
 32805                           prodl	equ	0xFF3
 32806                           intcon	equ	0xFF2
 32807                           intcon2	equ	0xFF1
 32808                           postinc0	equ	0xFEE
 32809                           wreg	equ	0xFE8
 32810                           indf1	equ	0xFE7
 32811                           postdec1	equ	0xFE5
 32812                           fsr1h	equ	0xFE2
 32813                           fsr1l	equ	0xFE1
 32814                           indf2	equ	0xFDF
 32815                           postinc2	equ	0xFDE
 32816                           plusw2	equ	0xFDB
 32817                           fsr2h	equ	0xFDA
 32818                           fsr2l	equ	0xFD9
 32819                           status	equ	0xFD8
 32820                           
 32821 ;; *************** function _playThisNote *****************
 32822 ;; Defined at:
 32823 ;;		line 467 in file "keyboard.c"
 32824 ;; Parameters:    Size  Location     Type
 32825 ;;  pitch           1    wreg     unsigned char 
 32826 ;; Auto vars:     Size  Location     Type
 32827 ;;  pitch           1   36[BANK0 ] unsigned char 
 32828 ;; Return value:  Size  Location     Type
 32829 ;;                  1    wreg      void 
 32830 ;; Registers used:
 32831 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32832 ;; Tracked objects:
 32833 ;;		On entry : 0/0
 32834 ;;		On exit  : 0/0
 32835 ;;		Unchanged: 0/0
 32836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32839 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32840 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32841 ;;Total ram usage:        5 bytes
 32842 ;; Hardware stack levels used:    1
 32843 ;; Hardware stack levels required when called:   11
 32844 ;; This function calls:
 32845 ;;		_add_notes_to_arpeggio
 32846 ;;		_delete_notes_from_arpeggio
 32847 ;;		_finish_arpeggio_setup
 32848 ;;		_key_press_release_note_off
 32849 ;;		_noteOff
 32850 ;;		_noteOn
 32851 ;;		_playSeventh
 32852 ;;		_playTriad
 32853 ;;		_wait_one_pulse
 32854 ;; This function is called by:
 32855 ;;		_keyboard_all_note_efficient
 32856 ;;		_processOctave
 32857 ;;		_Function_H_6_1
 32858 ;; This function uses a non-reentrant model
 32859 ;;
 32860                           
 32861                           	psect	text90
 32862  0063EE                     __ptext90:
 32863                           	opt stack 0
 32864  0063EE                     _playThisNote:
 32865                           	opt stack 15
 32866                           
 32867                           ; BSR set to: 0
 32868                           ;incstack = 0
 32869                           ;playThisNote@pitch stored from wreg
 32870  0063EE  0100               	movlb	0	; () banked
 32871  0063F0  6F84               	movwf	playThisNote@pitch& (0+255),b
 32872                           
 32873                           ;keyboard.c: 469: if(KEYBOARD_MODE == CHROMATIC) {
 32874  0063F2  0100               	movlb	0	; () banked
 32875  0063F4  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 32876  0063F6  A4D8               	btfss	status,2,c
 32877  0063F8  D06B               	goto	l1452
 32878                           
 32879                           ; BSR set to: 0
 32880                           ;keyboard.c: 472: if(ARPEGGIO_ON == 0){
 32881  0063FA  B635               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 32882  0063FC  D013               	goto	l1445
 32883                           
 32884                           ; BSR set to: 0
 32885                           ;keyboard.c: 473: if(ON_OFF == 1) {noteOn(channel,pitch,velocity);}
 32886  0063FE  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32887  006400  D007               	goto	l1444
 32888                           
 32889                           ; BSR set to: 0
 32890  006402  C084  F06E         	movff	playThisNote@pitch,noteOn@pitch
 32891  006406  C0FD  F06F         	movff	_velocity,noteOn@velocity
 32892  00640A  51F6               	movf	_channel& (0+255),w,b
 32893  00640C  ECA2  F044         	call	_noteOn
 32894  006410                     l1444:
 32895                           
 32896                           ;keyboard.c: 474: if(ON_OFF == 0) {noteOff(channel,pitch,velocity);}
 32897  006410  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32898  006412  D008               	goto	l1445
 32899  006414  C084  F06B         	movff	playThisNote@pitch,noteOff@pitch
 32900  006418  C0FD  F06C         	movff	_velocity,noteOff@velocity
 32901  00641C  0100               	movlb	0	; () banked
 32902  00641E  51F6               	movf	_channel& (0+255),w,b
 32903  006420  ECC9  F047         	call	_noteOff
 32904  006424                     l1445:
 32905                           
 32906                           ;keyboard.c: 475: }
 32907                           ;keyboard.c: 478: if(ARPEGGIO_ON == 1){
 32908  006424  A635               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 32909  006426  D054               	goto	l1452
 32910                           
 32911                           ;keyboard.c: 480: if(ON_OFF == 1){
 32912  006428  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32913  00642A  D01B               	goto	l1447
 32914                           
 32915                           ;keyboard.c: 483: TMR0ON = 0;
 32916  00642C  9ED5               	bcf	4053,7,c	;volatile
 32917                           
 32918                           ;keyboard.c: 485: parallel = pitch;
 32919  00642E  C084  F0E6         	movff	playThisNote@pitch,_parallel
 32920                           
 32921                           ;keyboard.c: 488: if(NUM_NOTES_PRESSED > 0){
 32922  006432  0100               	movlb	0	; () banked
 32923  006434  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 32924  006436  B4D8               	btfsc	status,2,c
 32925  006438  D00A               	goto	l1448
 32926                           
 32927                           ; BSR set to: 0
 32928                           ;keyboard.c: 489: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 32929  00643A  0E00               	movlw	0
 32930  00643C  B234               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 32931  00643E  0E01               	movlw	1
 32932  006440  ECCC  F049         	call	_wait_one_pulse
 32933                           
 32934                           ;keyboard.c: 490: if(note_off_was_sent == 0) {key_press_release_note_off();}
 32935  006444  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 32936  006446  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 32937                           
 32938                           ;keyboard.c: 491: TIMER_OVERFLOWS = 0;
 32939  00644A  0E00               	movlw	0
 32940  00644C  6E54               	movwf	_TIMER_OVERFLOWS,c
 32941  00644E                     l1448:
 32942                           
 32943                           ;keyboard.c: 492: }
 32944                           ;keyboard.c: 495: add_notes_to_arpeggio(pitch);
 32945  00644E  0100               	movlb	0	; () banked
 32946  006450  5184               	movf	playThisNote@pitch& (0+255),w,b
 32947  006452  ECC3  F03F         	call	_add_notes_to_arpeggio
 32948                           
 32949                           ;keyboard.c: 498: if(LATCH == 0) {
 32950  006456  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 32951                           
 32952                           ;keyboard.c: 499: latch_was_pressed = 0;
 32953  006458  9A34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 32954                           
 32955                           ;keyboard.c: 500: }
 32956                           ;keyboard.c: 503: finish_arpeggio_setup();
 32957  00645A  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 32958                           
 32959                           ;keyboard.c: 506: TMR0ON = 1;
 32960  00645E  8ED5               	bsf	4053,7,c	;volatile
 32961                           
 32962                           ;keyboard.c: 508: return;
 32963  006460  0012               	return	
 32964  006462                     l1447:
 32965                           
 32966                           ;keyboard.c: 509: }
 32967                           ;keyboard.c: 512: if((ON_OFF == 0) && (LATCH == 0)){
 32968  006462  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32969  006464  B035               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 32970  006466  D034               	goto	l1452
 32971                           
 32972                           ;keyboard.c: 515: TMR0ON = 0;
 32973  006468  9ED5               	bcf	4053,7,c	;volatile
 32974                           
 32975                           ;keyboard.c: 518: if(NUM_NOTES_PRESSED > 0){
 32976  00646A  0100               	movlb	0	; () banked
 32977  00646C  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 32978  00646E  B4D8               	btfsc	status,2,c
 32979  006470  D00A               	goto	l1453
 32980                           
 32981                           ; BSR set to: 0
 32982                           ;keyboard.c: 519: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 32983  006472  0E00               	movlw	0
 32984  006474  B034               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 32985  006476  0E01               	movlw	1
 32986  006478  ECCC  F049         	call	_wait_one_pulse
 32987                           
 32988                           ;keyboard.c: 520: if(note_off_was_sent == 0) {key_press_release_note_off();}
 32989  00647C  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 32990  00647E  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 32991                           
 32992                           ;keyboard.c: 521: TIMER_OVERFLOWS = 0;
 32993  006482  0E00               	movlw	0
 32994  006484  6E54               	movwf	_TIMER_OVERFLOWS,c
 32995  006486                     l1453:
 32996                           
 32997                           ;keyboard.c: 522: }
 32998                           ;keyboard.c: 525: delete_notes_from_arpeggio(pitch);
 32999  006486  0100               	movlb	0	; () banked
 33000  006488  5184               	movf	playThisNote@pitch& (0+255),w,b
 33001  00648A  EC40  F049         	call	_delete_notes_from_arpeggio
 33002                           
 33003                           ;keyboard.c: 528: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 33004  00648E  C0E6  F080         	movff	_parallel,??_playThisNote
 33005  006492  0100               	movlb	0	; () banked
 33006  006494  6B81               	clrf	(??_playThisNote+1)& (0+255),b
 33007  006496  BF80               	btfsc	??_playThisNote& (0+255),7,b
 33008  006498  0781               	decf	(??_playThisNote+1)& (0+255),f,b
 33009  00649A  5184               	movf	playThisNote@pitch& (0+255),w,b
 33010  00649C  6F82               	movwf	(??_playThisNote+2)& (0+255),b
 33011  00649E  6B83               	clrf	(??_playThisNote+3)& (0+255),b
 33012  0064A0  5180               	movf	??_playThisNote& (0+255),w,b
 33013  0064A2  1982               	xorwf	(??_playThisNote+2)& (0+255),w,b
 33014  0064A4  E106               	bnz	l18245
 33015  0064A6  5181               	movf	(??_playThisNote+1)& (0+255),w,b
 33016  0064A8  1983               	xorwf	(??_playThisNote+3)& (0+255),w,b
 33017  0064AA  A4D8               	btfss	status,2,c
 33018  0064AC  D002               	goto	l1455
 33019                           
 33020                           ; BSR set to: 0
 33021  0064AE  0E00               	movlw	0
 33022  0064B0  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33023  0064B2                     l1455:
 33024  0064B2                     l18245:
 33025                           
 33026                           ; BSR set to: 0
 33027                           ;keyboard.c: 533: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 33028  0064B2  BC34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 33029                           
 33030                           ; BSR set to: 0
 33031  0064B4  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33032  0064B6  D001               	goto	l1456
 33033                           
 33034                           ; BSR set to: 0
 33035                           ;keyboard.c: 534: LATCH = 1;
 33036  0064B8  8035               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 33037  0064BA                     l1456:
 33038                           
 33039                           ; BSR set to: 0
 33040                           ;keyboard.c: 535: }
 33041                           ;keyboard.c: 538: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 33042  0064BA  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 33043                           
 33044                           ; BSR set to: 0
 33045  0064BC  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33046  0064BE  D004               	goto	l1457
 33047                           
 33048                           ; BSR set to: 0
 33049                           ;keyboard.c: 539: NUM_NOTES_PRESSED = 0;
 33050  0064C0  0E00               	movlw	0
 33051  0064C2  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33052                           
 33053                           ;keyboard.c: 540: ARRAY_INDEX = 0;
 33054  0064C4  0E00               	movlw	0
 33055  0064C6  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 33056  0064C8                     l1457:
 33057                           
 33058                           ; BSR set to: 0
 33059                           ;keyboard.c: 541: }
 33060                           ;keyboard.c: 544: finish_arpeggio_setup();
 33061                           
 33062                           ; BSR set to: 0
 33063  0064C8  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 33064                           
 33065                           ;keyboard.c: 547: TMR0ON = 1;
 33066  0064CC  8ED5               	bsf	4053,7,c	;volatile
 33067                           
 33068                           ;keyboard.c: 549: return;
 33069  0064CE  0012               	return	
 33070  0064D0                     l1452:
 33071                           
 33072                           ;keyboard.c: 550: }
 33073                           ;keyboard.c: 551: }
 33074                           ;keyboard.c: 552: }
 33075                           ;keyboard.c: 554: if(KEYBOARD_MODE == TRIAD) {
 33076  0064D0  0E06               	movlw	6
 33077  0064D2  0100               	movlb	0	; () banked
 33078  0064D4  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 33079  0064D6  A4D8               	btfss	status,2,c
 33080  0064D8  D003               	goto	l1458
 33081                           
 33082                           ; BSR set to: 0
 33083                           ;keyboard.c: 555: playTriad(pitch);
 33084  0064DA  5184               	movf	playThisNote@pitch& (0+255),w,b
 33085  0064DC  ECD5  F02C         	call	_playTriad
 33086  0064E0                     l1458:
 33087                           
 33088                           ;keyboard.c: 556: }
 33089                           ;keyboard.c: 558: if(KEYBOARD_MODE == SEVENTH) {
 33090  0064E0  0E09               	movlw	9
 33091  0064E2  0100               	movlb	0	; () banked
 33092  0064E4  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 33093  0064E6  A4D8               	btfss	status,2,c
 33094  0064E8  0012               	return	
 33095                           
 33096                           ; BSR set to: 0
 33097                           ;keyboard.c: 559: playSeventh(pitch);
 33098  0064EA  5184               	movf	playThisNote@pitch& (0+255),w,b
 33099  0064EC  EC0E  F02C         	call	_playSeventh
 33100  0064F0  0012               	return	
 33101  0064F2                     __end_of_playThisNote:
 33102                           	opt stack 0
 33103                           tblptru	equ	0xFF8
 33104                           tblptrh	equ	0xFF7
 33105                           tblptrl	equ	0xFF6
 33106                           tablat	equ	0xFF5
 33107                           prodh	equ	0xFF4
 33108                           prodl	equ	0xFF3
 33109                           intcon	equ	0xFF2
 33110                           intcon2	equ	0xFF1
 33111                           postinc0	equ	0xFEE
 33112                           wreg	equ	0xFE8
 33113                           indf1	equ	0xFE7
 33114                           postdec1	equ	0xFE5
 33115                           fsr1h	equ	0xFE2
 33116                           fsr1l	equ	0xFE1
 33117                           indf2	equ	0xFDF
 33118                           postinc2	equ	0xFDE
 33119                           plusw2	equ	0xFDB
 33120                           fsr2h	equ	0xFDA
 33121                           fsr2l	equ	0xFD9
 33122                           status	equ	0xFD8
 33123                           
 33124 ;; *************** function _playTriad *****************
 33125 ;; Defined at:
 33126 ;;		line 276 in file "keyboard.c"
 33127 ;; Parameters:    Size  Location     Type
 33128 ;;  pitch           1    wreg     unsigned char 
 33129 ;; Auto vars:     Size  Location     Type
 33130 ;;  pitch           1   31[BANK0 ] unsigned char 
 33131 ;;  i               1   30[BANK0 ] unsigned char 
 33132 ;;  i               1   29[BANK0 ] unsigned char 
 33133 ;;  triad_p         2   27[BANK0 ] PTR unsigned char 
 33134 ;;		 -> diminished_triad(3), augmented_triad(3), minor_triad(3), major_triad(3), 
 33135 ;; Return value:  Size  Location     Type
 33136 ;;                  1    wreg      void 
 33137 ;; Registers used:
 33138 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33139 ;; Tracked objects:
 33140 ;;		On entry : 0/0
 33141 ;;		On exit  : 0/0
 33142 ;;		Unchanged: 0/0
 33143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33145 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33146 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33147 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33148 ;;Total ram usage:        9 bytes
 33149 ;; Hardware stack levels used:    1
 33150 ;; Hardware stack levels required when called:   10
 33151 ;; This function calls:
 33152 ;;		_finish_arpeggio_setup
 33153 ;;		_key_press_release_note_off
 33154 ;;		_noteOff
 33155 ;;		_noteOn
 33156 ;;		_wait_one_pulse
 33157 ;; This function is called by:
 33158 ;;		_playThisNote
 33159 ;; This function uses a non-reentrant model
 33160 ;;
 33161                           
 33162                           	psect	text91
 33163  0059AA                     __ptext91:
 33164                           	opt stack 0
 33165  0059AA                     _playTriad:
 33166                           	opt stack 15
 33167                           
 33168                           ;incstack = 0
 33169                           ;playTriad@pitch stored from wreg
 33170  0059AA  0100               	movlb	0	; () banked
 33171  0059AC  6F7F               	movwf	playTriad@pitch& (0+255),b
 33172                           
 33173                           ;keyboard.c: 278: unsigned char *triad_p;
 33174                           ;keyboard.c: 282: switch (which_triad) {
 33175  0059AE  D012               	goto	l1381
 33176  0059B0                     
 33177                           ;keyboard.c: 284: triad_p = major_triad;
 33178  0059B0  0EFC               	movlw	low _major_triad
 33179  0059B2  0100               	movlb	0	; () banked
 33180  0059B4  6F7B               	movwf	playTriad@triad_p& (0+255),b
 33181  0059B6  0E01               	movlw	high _major_triad
 33182  0059B8  D00B               	goto	L15
 33183  0059BA                     
 33184                           ; BSR set to: 0
 33185                           ;keyboard.c: 287: triad_p = minor_triad;
 33186                           
 33187                           ; BSR set to: 0
 33188  0059BA  0EF9               	movlw	low _minor_triad
 33189  0059BC  6F7B               	movwf	playTriad@triad_p& (0+255),b
 33190  0059BE  0E01               	movlw	high _minor_triad
 33191  0059C0  D007               	goto	L15
 33192  0059C2                     
 33193                           ; BSR set to: 0
 33194                           ;keyboard.c: 290: triad_p = augmented_triad;
 33195                           
 33196                           ; BSR set to: 0
 33197  0059C2  0EF6               	movlw	low _augmented_triad
 33198  0059C4  6F7B               	movwf	playTriad@triad_p& (0+255),b
 33199  0059C6  0E01               	movlw	high _augmented_triad
 33200  0059C8  D003               	goto	L15
 33201  0059CA                     
 33202                           ; BSR set to: 0
 33203                           ;keyboard.c: 293: triad_p = diminished_triad;
 33204                           
 33205                           ; BSR set to: 0
 33206  0059CA  0EF3               	movlw	low _diminished_triad
 33207  0059CC  6F7B               	movwf	playTriad@triad_p& (0+255),b
 33208  0059CE  0E01               	movlw	high _diminished_triad
 33209  0059D0                     L15:
 33210  0059D0  6F7C               	movwf	(playTriad@triad_p+1)& (0+255),b
 33211                           
 33212                           ; BSR set to: 0
 33213                           ;keyboard.c: 297: }
 33214                           
 33215                           ; BSR set to: 0
 33216                           ;keyboard.c: 296: break;
 33217                           
 33218                           ;keyboard.c: 295: default:
 33219                           
 33220                           ;keyboard.c: 294: break;
 33221  0059D2  D00E               	goto	l1383
 33222  0059D4                     l1381:
 33223                           
 33224                           ; BSR set to: 0
 33225  0059D4  0100               	movlb	0	; () banked
 33226  0059D6  51F0               	movf	_which_triad& (0+255),w,b
 33227                           
 33228                           ; Switch size 1, requested type "space"
 33229                           ; Number of cases is 4, Range of values is 0 to 3
 33230                           ; switch strategies available:
 33231                           ; Name         Instructions Cycles
 33232                           ; simple_byte           13     7 (average)
 33233                           ;	Chosen strategy is simple_byte
 33234  0059D8  0A00               	xorlw	0	; case 0
 33235  0059DA  B4D8               	btfsc	status,2,c
 33236  0059DC  D7E9               	goto	l1382
 33237  0059DE  0A01               	xorlw	1	; case 1
 33238  0059E0  B4D8               	btfsc	status,2,c
 33239  0059E2  D7EB               	goto	l1384
 33240  0059E4  0A03               	xorlw	3	; case 2
 33241  0059E6  B4D8               	btfsc	status,2,c
 33242  0059E8  D7EC               	goto	l1385
 33243  0059EA  0A01               	xorlw	1	; case 3
 33244  0059EC  B4D8               	btfsc	status,2,c
 33245  0059EE  D7ED               	goto	l1386
 33246  0059F0                     l1383:
 33247                           
 33248                           ; BSR set to: 0
 33249                           ;keyboard.c: 300: if(ARPEGGIO_ON == 0){
 33250  0059F0  B635               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33251  0059F2  D02E               	goto	u23300
 33252                           
 33253                           ; BSR set to: 0
 33254                           ;keyboard.c: 301: for(unsigned char i = 0; i<3; i++){
 33255  0059F4  0E00               	movlw	0
 33256  0059F6  6F7D               	movwf	playTriad@i& (0+255),b
 33257  0059F8                     l16491:
 33258                           
 33259                           ; BSR set to: 0
 33260  0059F8  0E02               	movlw	2
 33261  0059FA  657D               	cpfsgt	playTriad@i& (0+255),b
 33262  0059FC  D001               	goto	l1389
 33263  0059FE  D028               	goto	u23300
 33264  005A00                     l1389:
 33265                           
 33266                           ; BSR set to: 0
 33267                           ;keyboard.c: 302: if(ON_OFF == 1) {noteOn(channel,triad_p[i] + pitch,velocity);}
 33268  005A00  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33269  005A02  D010               	goto	l1391
 33270                           
 33271                           ; BSR set to: 0
 33272  005A04  517D               	movf	playTriad@i& (0+255),w,b
 33273  005A06  0D01               	mullw	1
 33274  005A08  50F3               	movf	prodl,w,c
 33275  005A0A  257B               	addwf	playTriad@triad_p& (0+255),w,b
 33276  005A0C  6ED9               	movwf	fsr2l,c
 33277  005A0E  50F4               	movf	prodh,w,c
 33278  005A10  217C               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 33279  005A12  6EDA               	movwf	fsr2h,c
 33280  005A14  50DF               	movf	indf2,w,c
 33281  005A16  257F               	addwf	playTriad@pitch& (0+255),w,b
 33282  005A18  6F6E               	movwf	noteOn@pitch& (0+255),b
 33283  005A1A  C0FD  F06F         	movff	_velocity,noteOn@velocity
 33284  005A1E  51F6               	movf	_channel& (0+255),w,b
 33285  005A20  ECA2  F044         	call	_noteOn
 33286  005A24                     l1391:
 33287                           
 33288                           ;keyboard.c: 303: if(ON_OFF == 0) {noteOff(channel,triad_p[i] + pitch,velocity);}
 33289  005A24  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33290  005A26  D011               	goto	l1392
 33291  005A28  0100               	movlb	0	; () banked
 33292  005A2A  517D               	movf	playTriad@i& (0+255),w,b
 33293  005A2C  0D01               	mullw	1
 33294  005A2E  50F3               	movf	prodl,w,c
 33295  005A30  257B               	addwf	playTriad@triad_p& (0+255),w,b
 33296  005A32  6ED9               	movwf	fsr2l,c
 33297  005A34  50F4               	movf	prodh,w,c
 33298  005A36  217C               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 33299  005A38  6EDA               	movwf	fsr2h,c
 33300  005A3A  50DF               	movf	indf2,w,c
 33301  005A3C  257F               	addwf	playTriad@pitch& (0+255),w,b
 33302  005A3E  6F6B               	movwf	noteOff@pitch& (0+255),b
 33303  005A40  C0FD  F06C         	movff	_velocity,noteOff@velocity
 33304  005A44  51F6               	movf	_channel& (0+255),w,b
 33305  005A46  ECC9  F047         	call	_noteOff
 33306  005A4A                     l1392:
 33307  005A4A  0100               	movlb	0	; () banked
 33308  005A4C  2B7D               	incf	playTriad@i& (0+255),f,b
 33309  005A4E  D7D4               	goto	l16491
 33310  005A50                     u23300:
 33311                           
 33312                           ; BSR set to: 0
 33313                           ;keyboard.c: 304: }
 33314                           ;keyboard.c: 305: }
 33315                           ;keyboard.c: 308: if(ARPEGGIO_ON == 1){
 33316                           
 33317                           ; BSR set to: 0
 33318  005A50  A635               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33319  005A52  0012               	return	
 33320                           
 33321                           ; BSR set to: 0
 33322                           ;keyboard.c: 309: if(ON_OFF == 1) {
 33323  005A54  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33324  005A56  D034               	goto	l1394
 33325                           
 33326                           ; BSR set to: 0
 33327                           ;keyboard.c: 311: TMR0ON = 0;
 33328  005A58  9ED5               	bcf	4053,7,c	;volatile
 33329                           
 33330                           ;keyboard.c: 314: parallel = pitch;
 33331  005A5A  C07F  F0E6         	movff	playTriad@pitch,_parallel
 33332                           
 33333                           ; BSR set to: 0
 33334                           ;keyboard.c: 317: if(NUM_NOTES_PRESSED > 0){
 33335  005A5E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33336  005A60  B4D8               	btfsc	status,2,c
 33337  005A62  D00A               	goto	l1395
 33338                           
 33339                           ; BSR set to: 0
 33340                           ;keyboard.c: 318: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 33341  005A64  0E00               	movlw	0
 33342  005A66  B234               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 33343  005A68  0E01               	movlw	1
 33344  005A6A  ECCC  F049         	call	_wait_one_pulse
 33345                           
 33346                           ;keyboard.c: 319: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33347  005A6E  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33348  005A70  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 33349                           
 33350                           ;keyboard.c: 320: TIMER_OVERFLOWS = 0;
 33351  005A74  0E00               	movlw	0
 33352  005A76  6E54               	movwf	_TIMER_OVERFLOWS,c
 33353  005A78                     l1395:
 33354                           
 33355                           ;keyboard.c: 321: }
 33356                           ;keyboard.c: 323: for(unsigned char i = 0; i<3; i++){
 33357  005A78  0E00               	movlw	0
 33358  005A7A  0100               	movlb	0	; () banked
 33359  005A7C  6F7E               	movwf	playTriad@i_1657& (0+255),b
 33360  005A7E                     l16521:
 33361                           
 33362                           ; BSR set to: 0
 33363  005A7E  0E02               	movlw	2
 33364  005A80  657E               	cpfsgt	playTriad@i_1657& (0+255),b
 33365  005A82  D001               	goto	l1397
 33366  005A84  D015               	goto	u23360
 33367  005A86                     l1397:
 33368                           
 33369                           ; BSR set to: 0
 33370                           ;keyboard.c: 324: ARPEGGIO[i] = triad_p[i] + pitch;
 33371                           
 33372                           ; BSR set to: 0
 33373  005A86  517E               	movf	playTriad@i_1657& (0+255),w,b
 33374  005A88  0D01               	mullw	1
 33375  005A8A  0E72               	movlw	low _ARPEGGIO
 33376  005A8C  24F3               	addwf	prodl,w,c
 33377  005A8E  6ED9               	movwf	fsr2l,c
 33378  005A90  0E01               	movlw	high _ARPEGGIO
 33379  005A92  20F4               	addwfc	prodh,w,c
 33380  005A94  6EDA               	movwf	fsr2h,c
 33381  005A96  517E               	movf	playTriad@i_1657& (0+255),w,b
 33382  005A98  0D01               	mullw	1
 33383  005A9A  50F3               	movf	prodl,w,c
 33384  005A9C  257B               	addwf	playTriad@triad_p& (0+255),w,b
 33385  005A9E  6EE1               	movwf	fsr1l,c
 33386  005AA0  50F4               	movf	prodh,w,c
 33387  005AA2  217C               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 33388  005AA4  6EE2               	movwf	fsr1h,c
 33389  005AA6  50E7               	movf	indf1,w,c
 33390  005AA8  257F               	addwf	playTriad@pitch& (0+255),w,b
 33391  005AAA  6EDF               	movwf	indf2,c
 33392                           
 33393                           ; BSR set to: 0
 33394  005AAC  2B7E               	incf	playTriad@i_1657& (0+255),f,b
 33395  005AAE  D7E7               	goto	l16521
 33396  005AB0                     u23360:
 33397                           
 33398                           ; BSR set to: 0
 33399                           ;keyboard.c: 325: }
 33400                           ;keyboard.c: 327: NUM_NOTES_PRESSED = 3;
 33401                           
 33402                           ; BSR set to: 0
 33403  005AB0  0E03               	movlw	3
 33404  005AB2  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33405                           
 33406                           ; BSR set to: 0
 33407                           ;keyboard.c: 331: if(LATCH == 0) {latch_was_pressed = 0;}
 33408  005AB4  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 33409                           
 33410                           ; BSR set to: 0
 33411  005AB6  9A34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33412                           
 33413                           ; BSR set to: 0
 33414                           ;keyboard.c: 333: finish_arpeggio_setup();
 33415                           
 33416                           ; BSR set to: 0
 33417  005AB8  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 33418                           
 33419                           ;keyboard.c: 334: TMR0ON = 1;
 33420  005ABC  8ED5               	bsf	4053,7,c	;volatile
 33421                           
 33422                           ;keyboard.c: 336: return;
 33423  005ABE  0012               	return	
 33424  005AC0                     l1394:
 33425                           
 33426                           ; BSR set to: 0
 33427                           ;keyboard.c: 337: }
 33428                           ;keyboard.c: 339: if((ON_OFF == 0) && (LATCH == 0)) {
 33429  005AC0  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33430  005AC2  0012               	return	
 33431                           
 33432                           ; BSR set to: 0
 33433  005AC4  B035               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 33434  005AC6  0012               	return	
 33435                           
 33436                           ; BSR set to: 0
 33437                           ;keyboard.c: 341: if(NUM_NOTES_PRESSED > 0){
 33438  005AC8  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33439  005ACA  B4D8               	btfsc	status,2,c
 33440  005ACC  D00A               	goto	l1402
 33441                           
 33442                           ; BSR set to: 0
 33443                           ;keyboard.c: 342: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 33444  005ACE  0E00               	movlw	0
 33445  005AD0  B034               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 33446  005AD2  0E01               	movlw	1
 33447  005AD4  ECCC  F049         	call	_wait_one_pulse
 33448                           
 33449                           ;keyboard.c: 343: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33450  005AD8  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33451  005ADA  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 33452                           
 33453                           ;keyboard.c: 344: TIMER_OVERFLOWS = 0;
 33454  005ADE  0E00               	movlw	0
 33455  005AE0  6E54               	movwf	_TIMER_OVERFLOWS,c
 33456  005AE2                     l1402:
 33457                           
 33458                           ;keyboard.c: 345: }
 33459                           ;keyboard.c: 348: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 33460  005AE2  C0E6  F077         	movff	_parallel,??_playTriad
 33461  005AE6  0100               	movlb	0	; () banked
 33462  005AE8  6B78               	clrf	(??_playTriad+1)& (0+255),b
 33463  005AEA  BF77               	btfsc	??_playTriad& (0+255),7,b
 33464  005AEC  0778               	decf	(??_playTriad+1)& (0+255),f,b
 33465  005AEE  517F               	movf	playTriad@pitch& (0+255),w,b
 33466  005AF0  6F79               	movwf	(??_playTriad+2)& (0+255),b
 33467  005AF2  6B7A               	clrf	(??_playTriad+3)& (0+255),b
 33468  005AF4  5177               	movf	??_playTriad& (0+255),w,b
 33469  005AF6  1979               	xorwf	(??_playTriad+2)& (0+255),w,b
 33470  005AF8  E106               	bnz	l16559
 33471  005AFA  5178               	movf	(??_playTriad+1)& (0+255),w,b
 33472  005AFC  197A               	xorwf	(??_playTriad+3)& (0+255),w,b
 33473  005AFE  A4D8               	btfss	status,2,c
 33474  005B00  D002               	goto	l1404
 33475                           
 33476                           ; BSR set to: 0
 33477  005B02  0E00               	movlw	0
 33478  005B04  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33479  005B06                     l1404:
 33480  005B06                     l16559:
 33481                           
 33482                           ; BSR set to: 0
 33483                           ;keyboard.c: 353: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 33484  005B06  BC34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 33485                           
 33486                           ; BSR set to: 0
 33487  005B08  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33488  005B0A  D001               	goto	l1405
 33489                           
 33490                           ; BSR set to: 0
 33491                           ;keyboard.c: 354: LATCH = 1;
 33492  005B0C  8035               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 33493  005B0E                     l1405:
 33494                           
 33495                           ; BSR set to: 0
 33496                           ;keyboard.c: 355: }
 33497                           ;keyboard.c: 358: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1)){
 33498  005B0E  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 33499  005B10  D002               	goto	u23460
 33500                           
 33501                           ; BSR set to: 0
 33502  005B12  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 33503  005B14  D006               	goto	l1406
 33504  005B16                     u23460:
 33505                           
 33506                           ; BSR set to: 0
 33507  005B16  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33508  005B18  D004               	goto	l1406
 33509                           
 33510                           ; BSR set to: 0
 33511                           ;keyboard.c: 359: NUM_NOTES_PRESSED = 0;
 33512  005B1A  0E00               	movlw	0
 33513  005B1C  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33514                           
 33515                           ;keyboard.c: 360: ARRAY_INDEX = 0;
 33516  005B1E  0E00               	movlw	0
 33517  005B20  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 33518  005B22                     l1406:
 33519                           
 33520                           ; BSR set to: 0
 33521                           ;keyboard.c: 361: }
 33522                           ;keyboard.c: 363: finish_arpeggio_setup();
 33523                           
 33524                           ; BSR set to: 0
 33525  005B22  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 33526                           
 33527                           ;keyboard.c: 364: TMR0ON = 1;
 33528  005B26  8ED5               	bsf	4053,7,c	;volatile
 33529                           
 33530                           ;keyboard.c: 365: return;
 33531  005B28  0012               	return	
 33532  005B2A                     __end_of_playTriad:
 33533                           	opt stack 0
 33534                           tblptru	equ	0xFF8
 33535                           tblptrh	equ	0xFF7
 33536                           tblptrl	equ	0xFF6
 33537                           tablat	equ	0xFF5
 33538                           prodh	equ	0xFF4
 33539                           prodl	equ	0xFF3
 33540                           intcon	equ	0xFF2
 33541                           intcon2	equ	0xFF1
 33542                           postinc0	equ	0xFEE
 33543                           wreg	equ	0xFE8
 33544                           indf1	equ	0xFE7
 33545                           postdec1	equ	0xFE5
 33546                           fsr1h	equ	0xFE2
 33547                           fsr1l	equ	0xFE1
 33548                           indf2	equ	0xFDF
 33549                           postinc2	equ	0xFDE
 33550                           plusw2	equ	0xFDB
 33551                           fsr2h	equ	0xFDA
 33552                           fsr2l	equ	0xFD9
 33553                           status	equ	0xFD8
 33554                           
 33555 ;; *************** function _playSeventh *****************
 33556 ;; Defined at:
 33557 ;;		line 370 in file "keyboard.c"
 33558 ;; Parameters:    Size  Location     Type
 33559 ;;  pitch           1    wreg     unsigned char 
 33560 ;; Auto vars:     Size  Location     Type
 33561 ;;  pitch           1   31[BANK0 ] unsigned char 
 33562 ;;  i               1   30[BANK0 ] unsigned char 
 33563 ;;  i               1   29[BANK0 ] unsigned char 
 33564 ;;  seventh_p       2   27[BANK0 ] PTR unsigned char 
 33565 ;;		 -> diminished_7th(4), half_diminished_7th(4), minor_7th(4), major_7th(4), 
 33566 ;;		 -> dominant_7th(4), 
 33567 ;; Return value:  Size  Location     Type
 33568 ;;                  1    wreg      void 
 33569 ;; Registers used:
 33570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33571 ;; Tracked objects:
 33572 ;;		On entry : 0/0
 33573 ;;		On exit  : 0/0
 33574 ;;		Unchanged: 0/0
 33575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33577 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33578 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33579 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33580 ;;Total ram usage:        9 bytes
 33581 ;; Hardware stack levels used:    1
 33582 ;; Hardware stack levels required when called:   10
 33583 ;; This function calls:
 33584 ;;		_finish_arpeggio_setup
 33585 ;;		_key_press_release_note_off
 33586 ;;		_noteOff
 33587 ;;		_noteOn
 33588 ;;		_wait_one_pulse
 33589 ;; This function is called by:
 33590 ;;		_playThisNote
 33591 ;; This function uses a non-reentrant model
 33592 ;;
 33593                           
 33594                           	psect	text92
 33595  00581C                     __ptext92:
 33596                           	opt stack 0
 33597  00581C                     _playSeventh:
 33598                           	opt stack 15
 33599                           
 33600                           ;incstack = 0
 33601                           ;playSeventh@pitch stored from wreg
 33602  00581C  0100               	movlb	0	; () banked
 33603  00581E  6F7F               	movwf	playSeventh@pitch& (0+255),b
 33604                           
 33605                           ;keyboard.c: 372: unsigned char *seventh_p;
 33606                           ;keyboard.c: 375: switch (which_seventh) {
 33607  005820  D016               	goto	l1411
 33608  005822                     
 33609                           ;keyboard.c: 377: seventh_p = dominant_7th;
 33610  005822  0EF8               	movlw	low _dominant_7th
 33611  005824  0100               	movlb	0	; () banked
 33612  005826  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33613  005828  0E02               	movlw	high _dominant_7th
 33614  00582A  D00F               	goto	L19
 33615  00582C                     
 33616                           ; BSR set to: 0
 33617                           ;keyboard.c: 380: seventh_p = major_7th;
 33618                           
 33619                           ; BSR set to: 0
 33620  00582C  0EF4               	movlw	low _major_7th
 33621  00582E  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33622  005830  0E02               	movlw	high _major_7th
 33623  005832  D00B               	goto	L19
 33624  005834                     
 33625                           ; BSR set to: 0
 33626                           ;keyboard.c: 383: seventh_p = minor_7th;
 33627                           
 33628                           ; BSR set to: 0
 33629  005834  0EF0               	movlw	low _minor_7th
 33630  005836  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33631  005838  0E02               	movlw	high _minor_7th
 33632  00583A  D007               	goto	L19
 33633  00583C                     
 33634                           ; BSR set to: 0
 33635                           ;keyboard.c: 386: seventh_p = half_diminished_7th;
 33636                           
 33637                           ; BSR set to: 0
 33638  00583C  0EEC               	movlw	low _half_diminished_7th
 33639  00583E  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33640  005840  0E02               	movlw	high _half_diminished_7th
 33641  005842  D003               	goto	L19
 33642  005844                     
 33643                           ; BSR set to: 0
 33644                           ;keyboard.c: 389: seventh_p = diminished_7th;
 33645                           
 33646                           ; BSR set to: 0
 33647  005844  0EE8               	movlw	low _diminished_7th
 33648  005846  6F7B               	movwf	playSeventh@seventh_p& (0+255),b
 33649  005848  0E02               	movlw	high _diminished_7th
 33650  00584A                     L19:
 33651  00584A  6F7C               	movwf	(playSeventh@seventh_p+1)& (0+255),b
 33652                           
 33653                           ; BSR set to: 0
 33654                           ;keyboard.c: 393: }
 33655                           
 33656                           ; BSR set to: 0
 33657                           ;keyboard.c: 392: break;
 33658                           
 33659                           ;keyboard.c: 391: default:
 33660                           
 33661                           ;keyboard.c: 390: break;
 33662  00584C  D011               	goto	l1413
 33663  00584E                     l1411:
 33664                           
 33665                           ; BSR set to: 0
 33666  00584E  0100               	movlb	0	; () banked
 33667  005850  51EF               	movf	_which_seventh& (0+255),w,b
 33668                           
 33669                           ; Switch size 1, requested type "space"
 33670                           ; Number of cases is 5, Range of values is 0 to 4
 33671                           ; switch strategies available:
 33672                           ; Name         Instructions Cycles
 33673                           ; simple_byte           16     9 (average)
 33674                           ;	Chosen strategy is simple_byte
 33675  005852  0A00               	xorlw	0	; case 0
 33676  005854  B4D8               	btfsc	status,2,c
 33677  005856  D7E5               	goto	l1412
 33678  005858  0A01               	xorlw	1	; case 1
 33679  00585A  B4D8               	btfsc	status,2,c
 33680  00585C  D7E7               	goto	l1414
 33681  00585E  0A03               	xorlw	3	; case 2
 33682  005860  B4D8               	btfsc	status,2,c
 33683  005862  D7E8               	goto	l1415
 33684  005864  0A01               	xorlw	1	; case 3
 33685  005866  B4D8               	btfsc	status,2,c
 33686  005868  D7E9               	goto	l1416
 33687  00586A  0A07               	xorlw	7	; case 4
 33688  00586C  B4D8               	btfsc	status,2,c
 33689  00586E  D7EA               	goto	l1417
 33690  005870                     l1413:
 33691                           
 33692                           ; BSR set to: 0
 33693                           ;keyboard.c: 396: if(ARPEGGIO_ON == 0){
 33694  005870  B635               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33695  005872  D02E               	goto	u23520
 33696                           
 33697                           ; BSR set to: 0
 33698                           ;keyboard.c: 397: for(unsigned char i = 0; i<4; i++){
 33699  005874  0E00               	movlw	0
 33700  005876  6F7D               	movwf	playSeventh@i& (0+255),b
 33701  005878                     l16593:
 33702                           
 33703                           ; BSR set to: 0
 33704  005878  0E03               	movlw	3
 33705  00587A  657D               	cpfsgt	playSeventh@i& (0+255),b
 33706  00587C  D001               	goto	l1420
 33707  00587E  D028               	goto	u23520
 33708  005880                     l1420:
 33709                           
 33710                           ; BSR set to: 0
 33711                           ;keyboard.c: 398: if(ON_OFF == 1) {noteOn(channel,seventh_p[i] + pitch,velocity);}
 33712  005880  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33713  005882  D010               	goto	l1422
 33714                           
 33715                           ; BSR set to: 0
 33716  005884  517D               	movf	playSeventh@i& (0+255),w,b
 33717  005886  0D01               	mullw	1
 33718  005888  50F3               	movf	prodl,w,c
 33719  00588A  257B               	addwf	playSeventh@seventh_p& (0+255),w,b
 33720  00588C  6ED9               	movwf	fsr2l,c
 33721  00588E  50F4               	movf	prodh,w,c
 33722  005890  217C               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 33723  005892  6EDA               	movwf	fsr2h,c
 33724  005894  50DF               	movf	indf2,w,c
 33725  005896  257F               	addwf	playSeventh@pitch& (0+255),w,b
 33726  005898  6F6E               	movwf	noteOn@pitch& (0+255),b
 33727  00589A  C0FD  F06F         	movff	_velocity,noteOn@velocity
 33728  00589E  51F6               	movf	_channel& (0+255),w,b
 33729  0058A0  ECA2  F044         	call	_noteOn
 33730  0058A4                     l1422:
 33731                           
 33732                           ;keyboard.c: 399: if(ON_OFF == 0) {noteOff(channel,seventh_p[i] + pitch,velocity);}
 33733  0058A4  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33734  0058A6  D011               	goto	l1423
 33735  0058A8  0100               	movlb	0	; () banked
 33736  0058AA  517D               	movf	playSeventh@i& (0+255),w,b
 33737  0058AC  0D01               	mullw	1
 33738  0058AE  50F3               	movf	prodl,w,c
 33739  0058B0  257B               	addwf	playSeventh@seventh_p& (0+255),w,b
 33740  0058B2  6ED9               	movwf	fsr2l,c
 33741  0058B4  50F4               	movf	prodh,w,c
 33742  0058B6  217C               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 33743  0058B8  6EDA               	movwf	fsr2h,c
 33744  0058BA  50DF               	movf	indf2,w,c
 33745  0058BC  257F               	addwf	playSeventh@pitch& (0+255),w,b
 33746  0058BE  6F6B               	movwf	noteOff@pitch& (0+255),b
 33747  0058C0  C0FD  F06C         	movff	_velocity,noteOff@velocity
 33748  0058C4  51F6               	movf	_channel& (0+255),w,b
 33749  0058C6  ECC9  F047         	call	_noteOff
 33750  0058CA                     l1423:
 33751  0058CA  0100               	movlb	0	; () banked
 33752  0058CC  2B7D               	incf	playSeventh@i& (0+255),f,b
 33753  0058CE  D7D4               	goto	l16593
 33754  0058D0                     u23520:
 33755                           
 33756                           ; BSR set to: 0
 33757                           ;keyboard.c: 400: }
 33758                           ;keyboard.c: 401: }
 33759                           ;keyboard.c: 404: if(ARPEGGIO_ON == 1){
 33760                           
 33761                           ; BSR set to: 0
 33762  0058D0  A635               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 33763  0058D2  0012               	return	
 33764                           
 33765                           ; BSR set to: 0
 33766                           ;keyboard.c: 406: if(ON_OFF == 1) {
 33767  0058D4  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33768  0058D6  D034               	goto	l1425
 33769                           
 33770                           ; BSR set to: 0
 33771                           ;keyboard.c: 408: TMR0ON = 0;
 33772  0058D8  9ED5               	bcf	4053,7,c	;volatile
 33773                           
 33774                           ;keyboard.c: 411: parallel = pitch;
 33775  0058DA  C07F  F0E6         	movff	playSeventh@pitch,_parallel
 33776                           
 33777                           ; BSR set to: 0
 33778                           ;keyboard.c: 414: if(NUM_NOTES_PRESSED > 0){
 33779  0058DE  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33780  0058E0  B4D8               	btfsc	status,2,c
 33781  0058E2  D00A               	goto	l1426
 33782                           
 33783                           ; BSR set to: 0
 33784                           ;keyboard.c: 415: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 33785  0058E4  0E00               	movlw	0
 33786  0058E6  B234               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 33787  0058E8  0E01               	movlw	1
 33788  0058EA  ECCC  F049         	call	_wait_one_pulse
 33789                           
 33790                           ;keyboard.c: 416: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33791  0058EE  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33792  0058F0  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 33793                           
 33794                           ;keyboard.c: 417: TIMER_OVERFLOWS = 0;
 33795  0058F4  0E00               	movlw	0
 33796  0058F6  6E54               	movwf	_TIMER_OVERFLOWS,c
 33797  0058F8                     l1426:
 33798                           
 33799                           ;keyboard.c: 418: }
 33800                           ;keyboard.c: 420: for(unsigned char i = 0; i<4; i++){
 33801  0058F8  0E00               	movlw	0
 33802  0058FA  0100               	movlb	0	; () banked
 33803  0058FC  6F7E               	movwf	playSeventh@i_1662& (0+255),b
 33804  0058FE                     l16623:
 33805                           
 33806                           ; BSR set to: 0
 33807  0058FE  0E03               	movlw	3
 33808  005900  657E               	cpfsgt	playSeventh@i_1662& (0+255),b
 33809  005902  D001               	goto	l1428
 33810  005904  D015               	goto	u23580
 33811  005906                     l1428:
 33812                           
 33813                           ; BSR set to: 0
 33814                           ;keyboard.c: 421: ARPEGGIO[i] = seventh_p[i] + pitch;
 33815                           
 33816                           ; BSR set to: 0
 33817  005906  517E               	movf	playSeventh@i_1662& (0+255),w,b
 33818  005908  0D01               	mullw	1
 33819  00590A  0E72               	movlw	low _ARPEGGIO
 33820  00590C  24F3               	addwf	prodl,w,c
 33821  00590E  6ED9               	movwf	fsr2l,c
 33822  005910  0E01               	movlw	high _ARPEGGIO
 33823  005912  20F4               	addwfc	prodh,w,c
 33824  005914  6EDA               	movwf	fsr2h,c
 33825  005916  517E               	movf	playSeventh@i_1662& (0+255),w,b
 33826  005918  0D01               	mullw	1
 33827  00591A  50F3               	movf	prodl,w,c
 33828  00591C  257B               	addwf	playSeventh@seventh_p& (0+255),w,b
 33829  00591E  6EE1               	movwf	fsr1l,c
 33830  005920  50F4               	movf	prodh,w,c
 33831  005922  217C               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 33832  005924  6EE2               	movwf	fsr1h,c
 33833  005926  50E7               	movf	indf1,w,c
 33834  005928  257F               	addwf	playSeventh@pitch& (0+255),w,b
 33835  00592A  6EDF               	movwf	indf2,c
 33836                           
 33837                           ; BSR set to: 0
 33838  00592C  2B7E               	incf	playSeventh@i_1662& (0+255),f,b
 33839  00592E  D7E7               	goto	l16623
 33840  005930                     u23580:
 33841                           
 33842                           ; BSR set to: 0
 33843                           ;keyboard.c: 422: }
 33844                           ;keyboard.c: 424: NUM_NOTES_PRESSED = 4;
 33845                           
 33846                           ; BSR set to: 0
 33847  005930  0E04               	movlw	4
 33848  005932  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33849                           
 33850                           ; BSR set to: 0
 33851                           ;keyboard.c: 427: if(LATCH == 0) {latch_was_pressed = 0;}
 33852  005934  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 33853                           
 33854                           ; BSR set to: 0
 33855  005936  9A34               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33856                           
 33857                           ; BSR set to: 0
 33858                           ;keyboard.c: 429: finish_arpeggio_setup();
 33859                           
 33860                           ; BSR set to: 0
 33861  005938  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 33862                           
 33863                           ;keyboard.c: 430: TMR0ON = 1;
 33864  00593C  8ED5               	bsf	4053,7,c	;volatile
 33865                           
 33866                           ;keyboard.c: 432: return;
 33867  00593E  0012               	return	
 33868  005940                     l1425:
 33869                           
 33870                           ; BSR set to: 0
 33871                           ;keyboard.c: 433: }
 33872                           ;keyboard.c: 435: if((ON_OFF == 0) && (LATCH == 0)) {
 33873  005940  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 33874  005942  0012               	return	
 33875                           
 33876                           ; BSR set to: 0
 33877  005944  B035               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 33878  005946  0012               	return	
 33879                           
 33880                           ; BSR set to: 0
 33881                           ;keyboard.c: 437: if(NUM_NOTES_PRESSED > 0){
 33882  005948  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 33883  00594A  B4D8               	btfsc	status,2,c
 33884  00594C  D00A               	goto	l1433
 33885                           
 33886                           ; BSR set to: 0
 33887                           ;keyboard.c: 438: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 33888  00594E  0E00               	movlw	0
 33889  005950  B034               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 33890  005952  0E01               	movlw	1
 33891  005954  ECCC  F049         	call	_wait_one_pulse
 33892                           
 33893                           ;keyboard.c: 439: if(note_off_was_sent == 0) {key_press_release_note_off();}
 33894  005958  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 33895  00595A  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 33896                           
 33897                           ;keyboard.c: 440: TIMER_OVERFLOWS = 0;
 33898  00595E  0E00               	movlw	0
 33899  005960  6E54               	movwf	_TIMER_OVERFLOWS,c
 33900  005962                     l1433:
 33901                           
 33902                           ;keyboard.c: 441: }
 33903                           ;keyboard.c: 444: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 33904  005962  C0E6  F077         	movff	_parallel,??_playSeventh
 33905  005966  0100               	movlb	0	; () banked
 33906  005968  6B78               	clrf	(??_playSeventh+1)& (0+255),b
 33907  00596A  BF77               	btfsc	??_playSeventh& (0+255),7,b
 33908  00596C  0778               	decf	(??_playSeventh+1)& (0+255),f,b
 33909  00596E  517F               	movf	playSeventh@pitch& (0+255),w,b
 33910  005970  6F79               	movwf	(??_playSeventh+2)& (0+255),b
 33911  005972  6B7A               	clrf	(??_playSeventh+3)& (0+255),b
 33912  005974  5177               	movf	??_playSeventh& (0+255),w,b
 33913  005976  1979               	xorwf	(??_playSeventh+2)& (0+255),w,b
 33914  005978  E106               	bnz	l16661
 33915  00597A  5178               	movf	(??_playSeventh+1)& (0+255),w,b
 33916  00597C  197A               	xorwf	(??_playSeventh+3)& (0+255),w,b
 33917  00597E  A4D8               	btfss	status,2,c
 33918  005980  D002               	goto	l1435
 33919                           
 33920                           ; BSR set to: 0
 33921  005982  0E00               	movlw	0
 33922  005984  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33923  005986                     l1435:
 33924  005986                     l16661:
 33925                           
 33926                           ; BSR set to: 0
 33927                           ;keyboard.c: 449: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 33928  005986  BC34               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 33929                           
 33930                           ; BSR set to: 0
 33931  005988  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33932  00598A  D001               	goto	l1436
 33933                           
 33934                           ; BSR set to: 0
 33935                           ;keyboard.c: 450: LATCH = 1;
 33936  00598C  8035               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 33937  00598E                     l1436:
 33938                           
 33939                           ; BSR set to: 0
 33940                           ;keyboard.c: 451: }
 33941                           ;keyboard.c: 454: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1)){
 33942  00598E  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 33943  005990  D002               	goto	u23680
 33944                           
 33945                           ; BSR set to: 0
 33946  005992  AE34               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 33947  005994  D006               	goto	l1437
 33948  005996                     u23680:
 33949                           
 33950                           ; BSR set to: 0
 33951  005996  AA34               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 33952  005998  D004               	goto	l1437
 33953                           
 33954                           ; BSR set to: 0
 33955                           ;keyboard.c: 455: NUM_NOTES_PRESSED = 0;
 33956  00599A  0E00               	movlw	0
 33957  00599C  6FE5               	movwf	_NUM_NOTES_PRESSED& (0+255),b
 33958                           
 33959                           ;keyboard.c: 456: ARRAY_INDEX = 0;
 33960  00599E  0E00               	movlw	0
 33961  0059A0  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 33962  0059A2                     l1437:
 33963                           
 33964                           ; BSR set to: 0
 33965                           ;keyboard.c: 457: }
 33966                           ;keyboard.c: 459: finish_arpeggio_setup();
 33967                           
 33968                           ; BSR set to: 0
 33969  0059A2  EC7A  F04A         	call	_finish_arpeggio_setup	;wreg free
 33970                           
 33971                           ;keyboard.c: 460: TMR0ON = 1;
 33972  0059A6  8ED5               	bsf	4053,7,c	;volatile
 33973                           
 33974                           ;keyboard.c: 462: return;
 33975  0059A8  0012               	return	
 33976  0059AA                     __end_of_playSeventh:
 33977                           	opt stack 0
 33978                           tblptru	equ	0xFF8
 33979                           tblptrh	equ	0xFF7
 33980                           tblptrl	equ	0xFF6
 33981                           tablat	equ	0xFF5
 33982                           prodh	equ	0xFF4
 33983                           prodl	equ	0xFF3
 33984                           intcon	equ	0xFF2
 33985                           intcon2	equ	0xFF1
 33986                           postinc0	equ	0xFEE
 33987                           wreg	equ	0xFE8
 33988                           indf1	equ	0xFE7
 33989                           postdec1	equ	0xFE5
 33990                           fsr1h	equ	0xFE2
 33991                           fsr1l	equ	0xFE1
 33992                           indf2	equ	0xFDF
 33993                           postinc2	equ	0xFDE
 33994                           plusw2	equ	0xFDB
 33995                           fsr2h	equ	0xFDA
 33996                           fsr2l	equ	0xFD9
 33997                           status	equ	0xFD8
 33998                           
 33999 ;; *************** function _noteOn *****************
 34000 ;; Defined at:
 34001 ;;		line 83 in file "midi.c"
 34002 ;; Parameters:    Size  Location     Type
 34003 ;;  channel         1    wreg     unsigned char 
 34004 ;;  pitch           1   14[BANK0 ] unsigned char 
 34005 ;;  velocity        1   15[BANK0 ] unsigned char 
 34006 ;; Auto vars:     Size  Location     Type
 34007 ;;  channel         1   16[BANK0 ] unsigned char 
 34008 ;; Return value:  Size  Location     Type
 34009 ;;                  1    wreg      void 
 34010 ;; Registers used:
 34011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34012 ;; Tracked objects:
 34013 ;;		On entry : 0/0
 34014 ;;		On exit  : 0/0
 34015 ;;		Unchanged: 0/0
 34016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34017 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34020 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34021 ;;Total ram usage:        3 bytes
 34022 ;; Hardware stack levels used:    1
 34023 ;; Hardware stack levels required when called:    7
 34024 ;; This function calls:
 34025 ;;		_noteOff
 34026 ;;		_sendOut
 34027 ;;		_sendUSB
 34028 ;; This function is called by:
 34029 ;;		_playThisNotePentatonic
 34030 ;;		_playTriad
 34031 ;;		_playSeventh
 34032 ;;		_playThisNote
 34033 ;;		_playThisNote8
 34034 ;;		_playDiatonicTriadMajor
 34035 ;;		_playDiatonicSeventhMajor
 34036 ;;		_playDiatonicTriadMinor
 34037 ;;		_playDiatonicSeventhMinor
 34038 ;;		_keyboard_all_note
 34039 ;;		_keyboard_eight_note
 34040 ;; This function uses a non-reentrant model
 34041 ;;
 34042                           
 34043                           	psect	text93
 34044  008944                     __ptext93:
 34045                           	opt stack 0
 34046  008944                     _noteOn:
 34047                           	opt stack 18
 34048                           
 34049                           ;incstack = 0
 34050                           ;noteOn@channel stored from wreg
 34051  008944  0100               	movlb	0	; () banked
 34052  008946  6F70               	movwf	noteOn@channel& (0+255),b
 34053                           
 34054                           ;midi.c: 85: noteNumber = pitch + semitone + ((octave + 1) * 12);
 34055  008948  0100               	movlb	0	; () banked
 34056  00894A  29FC               	incf	_octave& (0+255),w,b
 34057  00894C  0D0C               	mullw	12
 34058  00894E  50F3               	movf	prodl,w,c
 34059  008950  256E               	addwf	noteOn@pitch& (0+255),w,b
 34060  008952  25F3               	addwf	_semitone& (0+255),w,b
 34061  008954  6FF4               	movwf	_noteNumber& (0+255),b
 34062                           
 34063                           ; BSR set to: 0
 34064                           ;midi.c: 86: statusByte = channel | note_on;
 34065  008956  5170               	movf	noteOn@channel& (0+255),w,b
 34066  008958  0990               	iorlw	144
 34067  00895A  6FF5               	movwf	_statusByte& (0+255),b
 34068                           
 34069                           ; BSR set to: 0
 34070                           ;midi.c: 89: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 34071  00895C  516F               	movf	noteOn@velocity& (0+255),w,b
 34072  00895E  A4D8               	btfss	status,2,c
 34073  008960  D008               	goto	l451
 34074                           
 34075                           ; BSR set to: 0
 34076  008962  C06E  F06B         	movff	noteOn@pitch,noteOff@pitch
 34077  008966  C06F  F06C         	movff	noteOn@velocity,noteOff@velocity
 34078  00896A  5170               	movf	noteOn@channel& (0+255),w,b
 34079  00896C  ECC9  F047         	call	_noteOff
 34080  008970  0012               	return	
 34081  008972                     l451:
 34082                           
 34083                           ;midi.c: 92: sendUSB(statusByte, noteNumber, velocity);
 34084  008972  C0F4  F060         	movff	_noteNumber,sendUSB@message2
 34085  008976  C06F  F061         	movff	noteOn@velocity,sendUSB@message3
 34086  00897A  0100               	movlb	0	; () banked
 34087  00897C  51F5               	movf	_statusByte& (0+255),w,b
 34088  00897E  EC91  F039         	call	_sendUSB
 34089                           
 34090                           ;midi.c: 95: if(velocity > 0) {
 34091  008982  0100               	movlb	0	; () banked
 34092  008984  516F               	movf	noteOn@velocity& (0+255),w,b
 34093  008986  B4D8               	btfsc	status,2,c
 34094  008988  D00B               	goto	l453
 34095                           
 34096                           ; BSR set to: 0
 34097                           ;midi.c: 96: sendOut(statusByte);
 34098  00898A  51F5               	movf	_statusByte& (0+255),w,b
 34099  00898C  EC89  F04A         	call	_sendOut
 34100                           
 34101                           ;midi.c: 97: sendOut(noteNumber);
 34102  008990  0100               	movlb	0	; () banked
 34103  008992  51F4               	movf	_noteNumber& (0+255),w,b
 34104  008994  EC89  F04A         	call	_sendOut
 34105                           
 34106                           ;midi.c: 98: sendOut(velocity);
 34107  008998  0100               	movlb	0	; () banked
 34108  00899A  516F               	movf	noteOn@velocity& (0+255),w,b
 34109  00899C  EC89  F04A         	call	_sendOut
 34110  0089A0                     l453:
 34111                           
 34112                           ;midi.c: 99: }
 34113                           ;midi.c: 101: note_off_was_sent = 0;
 34114  0089A0  9033               	bcf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 34115  0089A2  0012               	return		;funcret
 34116  0089A4                     __end_of_noteOn:
 34117                           	opt stack 0
 34118                           tblptru	equ	0xFF8
 34119                           tblptrh	equ	0xFF7
 34120                           tblptrl	equ	0xFF6
 34121                           tablat	equ	0xFF5
 34122                           prodh	equ	0xFF4
 34123                           prodl	equ	0xFF3
 34124                           intcon	equ	0xFF2
 34125                           intcon2	equ	0xFF1
 34126                           postinc0	equ	0xFEE
 34127                           wreg	equ	0xFE8
 34128                           indf1	equ	0xFE7
 34129                           postdec1	equ	0xFE5
 34130                           fsr1h	equ	0xFE2
 34131                           fsr1l	equ	0xFE1
 34132                           indf2	equ	0xFDF
 34133                           postinc2	equ	0xFDE
 34134                           plusw2	equ	0xFDB
 34135                           fsr2h	equ	0xFDA
 34136                           fsr2l	equ	0xFD9
 34137                           status	equ	0xFD8
 34138                           
 34139 ;; *************** function _finish_arpeggio_setup *****************
 34140 ;; Defined at:
 34141 ;;		line 87 in file "arpeggio.c"
 34142 ;; Parameters:    Size  Location     Type
 34143 ;;		None
 34144 ;; Auto vars:     Size  Location     Type
 34145 ;;		None
 34146 ;; Return value:  Size  Location     Type
 34147 ;;                  1    wreg      void 
 34148 ;; Registers used:
 34149 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34150 ;; Tracked objects:
 34151 ;;		On entry : 0/0
 34152 ;;		On exit  : 0/0
 34153 ;;		Unchanged: 0/0
 34154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34159 ;;Total ram usage:        0 bytes
 34160 ;; Hardware stack levels used:    1
 34161 ;; Hardware stack levels required when called:    9
 34162 ;; This function calls:
 34163 ;;		_resetArpeggio
 34164 ;;		_setupArpeggio
 34165 ;; This function is called by:
 34166 ;;		_playThisNotePentatonic
 34167 ;;		_playTriad
 34168 ;;		_playSeventh
 34169 ;;		_playThisNote
 34170 ;;		_playThisNote8
 34171 ;;		_playDiatonicTriadMajor
 34172 ;;		_playDiatonicSeventhMajor
 34173 ;;		_playDiatonicTriadMinor
 34174 ;;		_playDiatonicSeventhMinor
 34175 ;; This function uses a non-reentrant model
 34176 ;;
 34177                           
 34178                           	psect	text94
 34179  0094F4                     __ptext94:
 34180                           	opt stack 0
 34181  0094F4                     _finish_arpeggio_setup:
 34182                           	opt stack 16
 34183                           
 34184                           ;arpeggio.c: 90: if((ON_OFF == 1) && (RESET_ON_KEY_PRESS == 1)){resetArpeggio();}
 34185                           
 34186                           ;incstack = 0
 34187  0094F4  B836               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 34188  0094F6  A435               	btfss	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
 34189  0094F8  D002               	goto	l5201
 34190  0094FA  EC61  F048         	call	_resetArpeggio	;wreg free
 34191  0094FE                     l5201:
 34192                           
 34193                           ;arpeggio.c: 91: if((ON_OFF == 0) && (RESET_ON_KEY_RELEASE == 1)){resetArpeggio();}
 34194  0094FE  A836               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 34195  009500  A235               	btfss	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
 34196  009502  D002               	goto	l5202
 34197  009504  EC61  F048         	call	_resetArpeggio	;wreg free
 34198  009508                     l5202:
 34199                           
 34200                           ;arpeggio.c: 94: setupArpeggio();
 34201  009508  ECBC  F040         	call	_setupArpeggio	;wreg free
 34202                           
 34203                           ;arpeggio.c: 96: TIMER_OVERFLOWS = 0;
 34204  00950C  0E00               	movlw	0
 34205  00950E  6E54               	movwf	_TIMER_OVERFLOWS,c
 34206  009510  0012               	return		;funcret
 34207  009512                     __end_of_finish_arpeggio_setup:
 34208                           	opt stack 0
 34209                           tblptru	equ	0xFF8
 34210                           tblptrh	equ	0xFF7
 34211                           tblptrl	equ	0xFF6
 34212                           tablat	equ	0xFF5
 34213                           prodh	equ	0xFF4
 34214                           prodl	equ	0xFF3
 34215                           intcon	equ	0xFF2
 34216                           intcon2	equ	0xFF1
 34217                           postinc0	equ	0xFEE
 34218                           wreg	equ	0xFE8
 34219                           indf1	equ	0xFE7
 34220                           postdec1	equ	0xFE5
 34221                           fsr1h	equ	0xFE2
 34222                           fsr1l	equ	0xFE1
 34223                           indf2	equ	0xFDF
 34224                           postinc2	equ	0xFDE
 34225                           plusw2	equ	0xFDB
 34226                           fsr2h	equ	0xFDA
 34227                           fsr2l	equ	0xFD9
 34228                           status	equ	0xFD8
 34229                           
 34230 ;; *************** function _setupArpeggio *****************
 34231 ;; Defined at:
 34232 ;;		line 170 in file "arpeggio.c"
 34233 ;; Parameters:    Size  Location     Type
 34234 ;;		None
 34235 ;; Auto vars:     Size  Location     Type
 34236 ;;		None
 34237 ;; Return value:  Size  Location     Type
 34238 ;;                  1    wreg      void 
 34239 ;; Registers used:
 34240 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34241 ;; Tracked objects:
 34242 ;;		On entry : 0/0
 34243 ;;		On exit  : 0/0
 34244 ;;		Unchanged: 0/0
 34245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34250 ;;Total ram usage:        0 bytes
 34251 ;; Hardware stack levels used:    1
 34252 ;; Hardware stack levels required when called:    8
 34253 ;; This function calls:
 34254 ;;		_copy_array
 34255 ;;		_random_pitches
 34256 ;;		_random_pitches_non_repeating
 34257 ;; This function is called by:
 34258 ;;		_Function_H_4
 34259 ;;		_finish_arpeggio_setup
 34260 ;; This function uses a non-reentrant model
 34261 ;;
 34262                           
 34263                           	psect	text95
 34264  008178                     __ptext95:
 34265                           	opt stack 0
 34266  008178                     _setupArpeggio:
 34267                           	opt stack 16
 34268                           
 34269                           ;arpeggio.c: 175: if(NUM_NOTES_PRESSED == 0){return;}
 34270                           
 34271                           ;incstack = 0
 34272  008178  0100               	movlb	0	; () banked
 34273  00817A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34274  00817C  B4D8               	btfsc	status,2,c
 34275  00817E  0012               	return	
 34276                           
 34277                           ; BSR set to: 0
 34278                           ;arpeggio.c: 178: copy_array();
 34279                           
 34280                           ; BSR set to: 0
 34281                           
 34282                           ; BSR set to: 0
 34283  008180  EC41  F044         	call	_copy_array	;wreg free
 34284                           
 34285                           ;arpeggio.c: 181: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 34286  008184  0E05               	movlw	5
 34287  008186  0100               	movlb	0	; () banked
 34288  008188  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34289  00818A  B4D8               	btfsc	status,2,c
 34290                           
 34291                           ; BSR set to: 0
 34292  00818C  EC2E  F045         	call	_random_pitches	;wreg free
 34293                           
 34294                           ;arpeggio.c: 182: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {random_pitches_non_repeatin
      +                          g();}
 34295  008190  0E04               	movlw	4
 34296  008192  0100               	movlb	0	; () banked
 34297  008194  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34298  008196  B4D8               	btfsc	status,2,c
 34299                           
 34300                           ; BSR set to: 0
 34301  008198  EC82  F03D         	call	_random_pitches_non_repeating	;wreg free
 34302                           
 34303                           ;arpeggio.c: 191: if(ARPEGGIO_TYPE == AS_PRESSED){arpeggioPtr = ARPEGGIO;}
 34304  00819C  0E06               	movlw	6
 34305  00819E  0100               	movlb	0	; () banked
 34306  0081A0  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34307  0081A2  A4D8               	btfss	status,2,c
 34308  0081A4  D004               	goto	l5235
 34309                           
 34310                           ; BSR set to: 0
 34311  0081A6  0E72               	movlw	low _ARPEGGIO
 34312  0081A8  6E4F               	movwf	_arpeggioPtr,c
 34313  0081AA  0E01               	movlw	high _ARPEGGIO
 34314  0081AC  6E50               	movwf	_arpeggioPtr+1,c
 34315  0081AE                     l5235:
 34316                           
 34317                           ; BSR set to: 0
 34318                           ;arpeggio.c: 192: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN){arpeggioPtr = ARPEG
      +                          GIO_SORTED;}
 34319                           
 34320                           ; BSR set to: 0
 34321  0081AE  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 34322  0081B0  B4D8               	btfsc	status,2,c
 34323  0081B2  D004               	goto	u22740
 34324                           
 34325                           ; BSR set to: 0
 34326  0081B4  0E02               	movlw	2
 34327  0081B6  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34328  0081B8  A4D8               	btfss	status,2,c
 34329  0081BA  D004               	goto	l5236
 34330  0081BC                     u22740:
 34331                           
 34332                           ; BSR set to: 0
 34333                           
 34334                           ; BSR set to: 0
 34335  0081BC  0E9C               	movlw	low _ARPEGGIO_SORTED
 34336  0081BE  6E4F               	movwf	_arpeggioPtr,c
 34337  0081C0  0E02               	movlw	high _ARPEGGIO_SORTED
 34338  0081C2  6E50               	movwf	_arpeggioPtr+1,c
 34339  0081C4                     l5236:
 34340                           
 34341                           ; BSR set to: 0
 34342                           ;arpeggio.c: 193: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP){arpeggioPtr = ARP
      +                          EGGIO_SORTED;}
 34343  0081C4  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 34344  0081C6  B4D8               	btfsc	status,2,c
 34345  0081C8  D004               	goto	u22760
 34346                           
 34347                           ; BSR set to: 0
 34348  0081CA  0E03               	movlw	3
 34349  0081CC  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34350  0081CE  A4D8               	btfss	status,2,c
 34351  0081D0  D004               	goto	l5239
 34352  0081D2                     u22760:
 34353                           
 34354                           ; BSR set to: 0
 34355                           
 34356                           ; BSR set to: 0
 34357  0081D2  0E9C               	movlw	low _ARPEGGIO_SORTED
 34358  0081D4  6E4F               	movwf	_arpeggioPtr,c
 34359  0081D6  0E02               	movlw	high _ARPEGGIO_SORTED
 34360  0081D8  6E50               	movwf	_arpeggioPtr+1,c
 34361  0081DA                     l5239:
 34362                           
 34363                           ; BSR set to: 0
 34364                           ;arpeggio.c: 194: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){ar
      +                          peggioPtr = ARPEGGIO_RANDOM;}
 34365  0081DA  0E05               	movlw	5
 34366  0081DC  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34367  0081DE  B4D8               	btfsc	status,2,c
 34368  0081E0  D004               	goto	u22780
 34369                           
 34370                           ; BSR set to: 0
 34371  0081E2  0E04               	movlw	4
 34372  0081E4  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 34373  0081E6  A4D8               	btfss	status,2,c
 34374  0081E8  0012               	return	
 34375  0081EA                     u22780:
 34376                           
 34377                           ; BSR set to: 0
 34378                           
 34379                           ; BSR set to: 0
 34380  0081EA  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34381  0081EC  6E4F               	movwf	_arpeggioPtr,c
 34382  0081EE  0E02               	movlw	high _ARPEGGIO_RANDOM
 34383  0081F0  6E50               	movwf	_arpeggioPtr+1,c
 34384  0081F2  0012               	return	
 34385  0081F4                     __end_of_setupArpeggio:
 34386                           	opt stack 0
 34387                           tblptru	equ	0xFF8
 34388                           tblptrh	equ	0xFF7
 34389                           tblptrl	equ	0xFF6
 34390                           tablat	equ	0xFF5
 34391                           prodh	equ	0xFF4
 34392                           prodl	equ	0xFF3
 34393                           intcon	equ	0xFF2
 34394                           intcon2	equ	0xFF1
 34395                           postinc0	equ	0xFEE
 34396                           wreg	equ	0xFE8
 34397                           indf1	equ	0xFE7
 34398                           postdec1	equ	0xFE5
 34399                           fsr1h	equ	0xFE2
 34400                           fsr1l	equ	0xFE1
 34401                           indf2	equ	0xFDF
 34402                           postinc2	equ	0xFDE
 34403                           plusw2	equ	0xFDB
 34404                           fsr2h	equ	0xFDA
 34405                           fsr2l	equ	0xFD9
 34406                           status	equ	0xFD8
 34407                           
 34408 ;; *************** function _random_pitches_non_repeating *****************
 34409 ;; Defined at:
 34410 ;;		line 252 in file "arpeggio.c"
 34411 ;; Parameters:    Size  Location     Type
 34412 ;;		None
 34413 ;; Auto vars:     Size  Location     Type
 34414 ;;  randomIndex     1   21[BANK0 ] unsigned char 
 34415 ;;  temp            1   20[BANK0 ] unsigned char 
 34416 ;;  i               1   22[BANK0 ] unsigned char 
 34417 ;; Return value:  Size  Location     Type
 34418 ;;                  1    wreg      void 
 34419 ;; Registers used:
 34420 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34421 ;; Tracked objects:
 34422 ;;		On entry : 0/0
 34423 ;;		On exit  : 0/0
 34424 ;;		Unchanged: 0/0
 34425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34427 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34429 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34430 ;;Total ram usage:        3 bytes
 34431 ;; Hardware stack levels used:    1
 34432 ;; Hardware stack levels required when called:    7
 34433 ;; This function calls:
 34434 ;;		___awmod
 34435 ;;		_rand
 34436 ;; This function is called by:
 34437 ;;		_processOctave
 34438 ;;		_setupArpeggio
 34439 ;; This function uses a non-reentrant model
 34440 ;;
 34441                           
 34442                           	psect	text96
 34443  007B04                     __ptext96:
 34444                           	opt stack 0
 34445  007B04                     _random_pitches_non_repeating:
 34446                           	opt stack 16
 34447                           
 34448                           ;arpeggio.c: 254: if(NUM_NOTES_PRESSED == 0){return;}
 34449                           
 34450                           ; BSR set to: 0
 34451                           ;incstack = 0
 34452  007B04  0100               	movlb	0	; () banked
 34453  007B06  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34454  007B08  B4D8               	btfsc	status,2,c
 34455  007B0A  0012               	return	
 34456                           
 34457                           ; BSR set to: 0
 34458                           ;arpeggio.c: 256: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++) {
 34459                           
 34460                           ; BSR set to: 0
 34461                           
 34462                           ; BSR set to: 0
 34463  007B0C  0E00               	movlw	0
 34464  007B0E  6F76               	movwf	random_pitches_non_repeating@i& (0+255),b
 34465  007B10  D036               	goto	l5277
 34466  007B12                     
 34467                           ; BSR set to: 0
 34468                           ;arpeggio.c: 257: unsigned char temp = ARPEGGIO_RANDOM[i];
 34469                           
 34470                           ; BSR set to: 0
 34471  007B12  5176               	movf	random_pitches_non_repeating@i& (0+255),w,b
 34472  007B14  0D01               	mullw	1
 34473  007B16  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34474  007B18  24F3               	addwf	prodl,w,c
 34475  007B1A  6ED9               	movwf	fsr2l,c
 34476  007B1C  0E02               	movlw	high _ARPEGGIO_RANDOM
 34477  007B1E  20F4               	addwfc	prodh,w,c
 34478  007B20  6EDA               	movwf	fsr2h,c
 34479  007B22  50DF               	movf	indf2,w,c
 34480  007B24  6F74               	movwf	random_pitches_non_repeating@temp& (0+255),b
 34481                           
 34482                           ; BSR set to: 0
 34483                           ;arpeggio.c: 258: unsigned char randomIndex = rand() % NUM_NOTES_PRESSED;
 34484  007B26  EC5C  F045         	call	_rand	;wreg free
 34485  007B2A  C06C  F06E         	movff	?_rand,___awmod@dividend
 34486  007B2E  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
 34487  007B32  C0E5  F070         	movff	_NUM_NOTES_PRESSED,___awmod@divisor
 34488  007B36  0100               	movlb	0	; () banked
 34489  007B38  6B71               	clrf	(___awmod@divisor+1)& (0+255),b
 34490  007B3A  EC5F  F042         	call	___awmod	;wreg free
 34491  007B3E  0100               	movlb	0	; () banked
 34492  007B40  516E               	movf	?___awmod& (0+255),w,b
 34493  007B42  6F75               	movwf	random_pitches_non_repeating@randomIndex& (0+255),b
 34494                           
 34495                           ; BSR set to: 0
 34496                           ;arpeggio.c: 259: ARPEGGIO_RANDOM[i] = ARPEGGIO_RANDOM[randomIndex];
 34497  007B44  5175               	movf	random_pitches_non_repeating@randomIndex& (0+255),w,b
 34498  007B46  0D01               	mullw	1
 34499  007B48  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34500  007B4A  24F3               	addwf	prodl,w,c
 34501  007B4C  6ED9               	movwf	fsr2l,c
 34502  007B4E  0E02               	movlw	high _ARPEGGIO_RANDOM
 34503  007B50  20F4               	addwfc	prodh,w,c
 34504  007B52  6EDA               	movwf	fsr2h,c
 34505  007B54  5176               	movf	random_pitches_non_repeating@i& (0+255),w,b
 34506  007B56  0D01               	mullw	1
 34507  007B58  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34508  007B5A  24F3               	addwf	prodl,w,c
 34509  007B5C  6EE1               	movwf	fsr1l,c
 34510  007B5E  0E02               	movlw	high _ARPEGGIO_RANDOM
 34511  007B60  20F4               	addwfc	prodh,w,c
 34512  007B62  6EE2               	movwf	fsr1h,c
 34513  007B64  CFDF FFE7          	movff	indf2,indf1
 34514                           
 34515                           ; BSR set to: 0
 34516                           ;arpeggio.c: 260: ARPEGGIO_RANDOM[randomIndex] = temp;
 34517  007B68  5175               	movf	random_pitches_non_repeating@randomIndex& (0+255),w,b
 34518  007B6A  0D01               	mullw	1
 34519  007B6C  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34520  007B6E  24F3               	addwf	prodl,w,c
 34521  007B70  6ED9               	movwf	fsr2l,c
 34522  007B72  0E02               	movlw	high _ARPEGGIO_RANDOM
 34523  007B74  20F4               	addwfc	prodh,w,c
 34524  007B76  6EDA               	movwf	fsr2h,c
 34525  007B78  C074  FFDF         	movff	random_pitches_non_repeating@temp,indf2
 34526                           
 34527                           ; BSR set to: 0
 34528  007B7C  2B76               	incf	random_pitches_non_repeating@i& (0+255),f,b
 34529  007B7E                     l5277:
 34530                           
 34531                           ; BSR set to: 0
 34532                           
 34533                           ; BSR set to: 0
 34534  007B7E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34535  007B80  5D76               	subwf	random_pitches_non_repeating@i& (0+255),w,b
 34536  007B82  B0D8               	btfsc	status,0,c
 34537  007B84  0012               	return	
 34538  007B86  D7C5               	goto	l5278
 34539  007B88                     __end_of_random_pitches_non_repeating:
 34540                           	opt stack 0
 34541                           tblptru	equ	0xFF8
 34542                           tblptrh	equ	0xFF7
 34543                           tblptrl	equ	0xFF6
 34544                           tablat	equ	0xFF5
 34545                           prodh	equ	0xFF4
 34546                           prodl	equ	0xFF3
 34547                           intcon	equ	0xFF2
 34548                           intcon2	equ	0xFF1
 34549                           postinc0	equ	0xFEE
 34550                           wreg	equ	0xFE8
 34551                           indf1	equ	0xFE7
 34552                           postdec1	equ	0xFE5
 34553                           fsr1h	equ	0xFE2
 34554                           fsr1l	equ	0xFE1
 34555                           indf2	equ	0xFDF
 34556                           postinc2	equ	0xFDE
 34557                           plusw2	equ	0xFDB
 34558                           fsr2h	equ	0xFDA
 34559                           fsr2l	equ	0xFD9
 34560                           status	equ	0xFD8
 34561                           
 34562 ;; *************** function _random_pitches *****************
 34563 ;; Defined at:
 34564 ;;		line 241 in file "arpeggio.c"
 34565 ;; Parameters:    Size  Location     Type
 34566 ;;		None
 34567 ;; Auto vars:     Size  Location     Type
 34568 ;;  random_array    1   20[BANK0 ] unsigned char 
 34569 ;;  i               1   21[BANK0 ] unsigned char 
 34570 ;; Return value:  Size  Location     Type
 34571 ;;                  1    wreg      void 
 34572 ;; Registers used:
 34573 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34574 ;; Tracked objects:
 34575 ;;		On entry : 0/0
 34576 ;;		On exit  : 0/0
 34577 ;;		Unchanged: 0/0
 34578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34580 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34582 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34583 ;;Total ram usage:        2 bytes
 34584 ;; Hardware stack levels used:    1
 34585 ;; Hardware stack levels required when called:    7
 34586 ;; This function calls:
 34587 ;;		___awmod
 34588 ;;		_rand
 34589 ;; This function is called by:
 34590 ;;		_processOctave
 34591 ;;		_setupArpeggio
 34592 ;; This function uses a non-reentrant model
 34593 ;;
 34594                           
 34595                           	psect	text97
 34596  008A5C                     __ptext97:
 34597                           	opt stack 0
 34598  008A5C                     _random_pitches:
 34599                           	opt stack 16
 34600                           
 34601                           ;arpeggio.c: 243: if(NUM_NOTES_PRESSED == 0){return;}
 34602                           
 34603                           ; BSR set to: 0
 34604                           ;incstack = 0
 34605  008A5C  0100               	movlb	0	; () banked
 34606  008A5E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34607  008A60  B4D8               	btfsc	status,2,c
 34608  008A62  0012               	return	
 34609                           
 34610                           ; BSR set to: 0
 34611                           ;arpeggio.c: 245: for (unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 34612                           
 34613                           ; BSR set to: 0
 34614                           
 34615                           ; BSR set to: 0
 34616  008A64  0E00               	movlw	0
 34617  008A66  6F75               	movwf	random_pitches@i& (0+255),b
 34618  008A68  D022               	goto	l5270
 34619  008A6A                     
 34620                           ; BSR set to: 0
 34621                           ;arpeggio.c: 246: unsigned char random_array_index = rand() % (NUM_NOTES_PRESSED);
 34622                           
 34623                           ; BSR set to: 0
 34624  008A6A  EC5C  F045         	call	_rand	;wreg free
 34625  008A6E  C06C  F06E         	movff	?_rand,___awmod@dividend
 34626  008A72  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
 34627  008A76  C0E5  F070         	movff	_NUM_NOTES_PRESSED,___awmod@divisor
 34628  008A7A  0100               	movlb	0	; () banked
 34629  008A7C  6B71               	clrf	(___awmod@divisor+1)& (0+255),b
 34630  008A7E  EC5F  F042         	call	___awmod	;wreg free
 34631  008A82  0100               	movlb	0	; () banked
 34632  008A84  516E               	movf	?___awmod& (0+255),w,b
 34633  008A86  6F74               	movwf	random_pitches@random_array_index& (0+255),b
 34634                           
 34635                           ; BSR set to: 0
 34636                           ;arpeggio.c: 247: ARPEGGIO_RANDOM[i] = ARPEGGIO[random_array_index];
 34637  008A88  5174               	movf	random_pitches@random_array_index& (0+255),w,b
 34638  008A8A  0D01               	mullw	1
 34639  008A8C  0E72               	movlw	low _ARPEGGIO
 34640  008A8E  24F3               	addwf	prodl,w,c
 34641  008A90  6ED9               	movwf	fsr2l,c
 34642  008A92  0E01               	movlw	high _ARPEGGIO
 34643  008A94  20F4               	addwfc	prodh,w,c
 34644  008A96  6EDA               	movwf	fsr2h,c
 34645  008A98  5175               	movf	random_pitches@i& (0+255),w,b
 34646  008A9A  0D01               	mullw	1
 34647  008A9C  0E8C               	movlw	low _ARPEGGIO_RANDOM
 34648  008A9E  24F3               	addwf	prodl,w,c
 34649  008AA0  6EE1               	movwf	fsr1l,c
 34650  008AA2  0E02               	movlw	high _ARPEGGIO_RANDOM
 34651  008AA4  20F4               	addwfc	prodh,w,c
 34652  008AA6  6EE2               	movwf	fsr1h,c
 34653  008AA8  CFDF FFE7          	movff	indf2,indf1
 34654                           
 34655                           ; BSR set to: 0
 34656  008AAC  2B75               	incf	random_pitches@i& (0+255),f,b
 34657  008AAE                     l5270:
 34658                           
 34659                           ; BSR set to: 0
 34660                           
 34661                           ; BSR set to: 0
 34662  008AAE  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 34663  008AB0  5D75               	subwf	random_pitches@i& (0+255),w,b
 34664  008AB2  B0D8               	btfsc	status,0,c
 34665  008AB4  0012               	return	
 34666  008AB6  D7D9               	goto	l5271
 34667  008AB8                     __end_of_random_pitches:
 34668                           	opt stack 0
 34669                           tblptru	equ	0xFF8
 34670                           tblptrh	equ	0xFF7
 34671                           tblptrl	equ	0xFF6
 34672                           tablat	equ	0xFF5
 34673                           prodh	equ	0xFF4
 34674                           prodl	equ	0xFF3
 34675                           intcon	equ	0xFF2
 34676                           intcon2	equ	0xFF1
 34677                           postinc0	equ	0xFEE
 34678                           wreg	equ	0xFE8
 34679                           indf1	equ	0xFE7
 34680                           postdec1	equ	0xFE5
 34681                           fsr1h	equ	0xFE2
 34682                           fsr1l	equ	0xFE1
 34683                           indf2	equ	0xFDF
 34684                           postinc2	equ	0xFDE
 34685                           plusw2	equ	0xFDB
 34686                           fsr2h	equ	0xFDA
 34687                           fsr2l	equ	0xFD9
 34688                           status	equ	0xFD8
 34689                           
 34690 ;; *************** function _rand *****************
 34691 ;; Defined at:
 34692 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 34693 ;; Parameters:    Size  Location     Type
 34694 ;;		None
 34695 ;; Auto vars:     Size  Location     Type
 34696 ;;		None
 34697 ;; Return value:  Size  Location     Type
 34698 ;;                  2   12[BANK0 ] int 
 34699 ;; Registers used:
 34700 ;;		wreg, status,2, status,0, cstack
 34701 ;; Tracked objects:
 34702 ;;		On entry : 0/0
 34703 ;;		On exit  : 0/0
 34704 ;;		Unchanged: 0/0
 34705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34706 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34709 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34710 ;;Total ram usage:        2 bytes
 34711 ;; Hardware stack levels used:    1
 34712 ;; Hardware stack levels required when called:    6
 34713 ;; This function calls:
 34714 ;;		___lmul
 34715 ;; This function is called by:
 34716 ;;		_random_pitches
 34717 ;;		_random_pitches_non_repeating
 34718 ;; This function uses a non-reentrant model
 34719 ;;
 34720                           
 34721                           	psect	text98
 34722  008AB8                     __ptext98:
 34723                           	opt stack 0
 34724  008AB8                     _rand:
 34725                           	opt stack 16
 34726                           
 34727                           ; BSR set to: 0
 34728                           ;incstack = 0
 34729  008AB8  C1E7  F060         	movff	_randx,___lmul@multiplier
 34730  008ABC  C1E8  F061         	movff	_randx+1,___lmul@multiplier+1
 34731  008AC0  C1E9  F062         	movff	_randx+2,___lmul@multiplier+2
 34732  008AC4  C1EA  F063         	movff	_randx+3,___lmul@multiplier+3
 34733  008AC8  0E6D               	movlw	109
 34734  008ACA  0100               	movlb	0	; () banked
 34735  008ACC  6F64               	movwf	___lmul@multiplicand& (0+255),b
 34736  008ACE  0E4E               	movlw	78
 34737  008AD0  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 34738  008AD2  0EC6               	movlw	198
 34739  008AD4  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 34740  008AD6  0E41               	movlw	65
 34741  008AD8  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 34742  008ADA  EC12  F046         	call	___lmul	;wreg free
 34743  008ADE  C060  F1E7         	movff	?___lmul,_randx
 34744  008AE2  C061  F1E8         	movff	?___lmul+1,_randx+1
 34745  008AE6  C062  F1E9         	movff	?___lmul+2,_randx+2
 34746  008AEA  C063  F1EA         	movff	?___lmul+3,_randx+3
 34747  008AEE  0E39               	movlw	57
 34748  008AF0  0101               	movlb	1	; () banked
 34749  008AF2  27E7               	addwf	_randx& (0+255),f,b
 34750  008AF4  0E30               	movlw	48
 34751  008AF6  23E8               	addwfc	(_randx+1)& (0+255),f,b
 34752  008AF8  0E00               	movlw	0
 34753  008AFA  23E9               	addwfc	(_randx+2)& (0+255),f,b
 34754  008AFC  0E00               	movlw	0
 34755  008AFE  23EA               	addwfc	(_randx+3)& (0+255),f,b
 34756                           
 34757                           ; BSR set to: 1
 34758  008B00  0EFF               	movlw	255
 34759  008B02  15E9               	andwf	(_randx+2)& (0+255),w,b
 34760  008B04  0100               	movlb	0	; () banked
 34761  008B06  6F6C               	movwf	?_rand& (0+255),b
 34762  008B08  0E7F               	movlw	127
 34763  008B0A  0101               	movlb	1	; () banked
 34764  008B0C  15EA               	andwf	(_randx+3)& (0+255),w,b
 34765  008B0E  0100               	movlb	0	; () banked
 34766  008B10  6F6D               	movwf	(?_rand+1)& (0+255),b
 34767  008B12  0012               	return	
 34768  008B14                     __end_of_rand:
 34769                           	opt stack 0
 34770                           tblptru	equ	0xFF8
 34771                           tblptrh	equ	0xFF7
 34772                           tblptrl	equ	0xFF6
 34773                           tablat	equ	0xFF5
 34774                           prodh	equ	0xFF4
 34775                           prodl	equ	0xFF3
 34776                           intcon	equ	0xFF2
 34777                           intcon2	equ	0xFF1
 34778                           postinc0	equ	0xFEE
 34779                           wreg	equ	0xFE8
 34780                           indf1	equ	0xFE7
 34781                           postdec1	equ	0xFE5
 34782                           fsr1h	equ	0xFE2
 34783                           fsr1l	equ	0xFE1
 34784                           indf2	equ	0xFDF
 34785                           postinc2	equ	0xFDE
 34786                           plusw2	equ	0xFDB
 34787                           fsr2h	equ	0xFDA
 34788                           fsr2l	equ	0xFD9
 34789                           status	equ	0xFD8
 34790                           
 34791 ;; *************** function ___awmod *****************
 34792 ;; Defined at:
 34793 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 34794 ;; Parameters:    Size  Location     Type
 34795 ;;  dividend        2   14[BANK0 ] int 
 34796 ;;  divisor         2   16[BANK0 ] int 
 34797 ;; Auto vars:     Size  Location     Type
 34798 ;;  sign            1   19[BANK0 ] unsigned char 
 34799 ;;  counter         1   18[BANK0 ] unsigned char 
 34800 ;; Return value:  Size  Location     Type
 34801 ;;                  2   14[BANK0 ] int 
 34802 ;; Registers used:
 34803 ;;		wreg, status,2, status,0
 34804 ;; Tracked objects:
 34805 ;;		On entry : 0/0
 34806 ;;		On exit  : 0/0
 34807 ;;		Unchanged: 0/0
 34808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34809 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34810 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34812 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34813 ;;Total ram usage:        6 bytes
 34814 ;; Hardware stack levels used:    1
 34815 ;; Hardware stack levels required when called:    5
 34816 ;; This function calls:
 34817 ;;		Nothing
 34818 ;; This function is called by:
 34819 ;;		_processOctave
 34820 ;;		_int2string
 34821 ;;		_random_pitches
 34822 ;;		_random_pitches_non_repeating
 34823 ;; This function uses a non-reentrant model
 34824 ;;
 34825                           
 34826                           	psect	text99
 34827  0084BE                     __ptext99:
 34828                           	opt stack 0
 34829  0084BE                     ___awmod:
 34830                           	opt stack 17
 34831                           
 34832                           ; BSR set to: 0
 34833                           ;incstack = 0
 34834  0084BE  0E00               	movlw	0
 34835  0084C0  0100               	movlb	0	; () banked
 34836  0084C2  6F73               	movwf	___awmod@sign& (0+255),b
 34837                           
 34838                           ; BSR set to: 0
 34839  0084C4  AF6F               	btfss	(___awmod@dividend+1)& (0+255),7,b
 34840  0084C6  D006               	goto	l5600
 34841                           
 34842                           ; BSR set to: 0
 34843  0084C8  6D6E               	negf	___awmod@dividend& (0+255),b
 34844  0084CA  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
 34845  0084CC  B0D8               	btfsc	status,0,c
 34846  0084CE  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
 34847                           
 34848                           ; BSR set to: 0
 34849  0084D0  0E01               	movlw	1
 34850  0084D2  6F73               	movwf	___awmod@sign& (0+255),b
 34851  0084D4                     l5600:
 34852                           
 34853                           ; BSR set to: 0
 34854                           
 34855                           ; BSR set to: 0
 34856  0084D4  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
 34857  0084D6  D004               	goto	l5601
 34858                           
 34859                           ; BSR set to: 0
 34860  0084D8  6D70               	negf	___awmod@divisor& (0+255),b
 34861  0084DA  1F71               	comf	(___awmod@divisor+1)& (0+255),f,b
 34862  0084DC  B0D8               	btfsc	status,0,c
 34863  0084DE  2B71               	incf	(___awmod@divisor+1)& (0+255),f,b
 34864  0084E0                     l5601:
 34865                           
 34866                           ; BSR set to: 0
 34867                           
 34868                           ; BSR set to: 0
 34869  0084E0  5170               	movf	___awmod@divisor& (0+255),w,b
 34870  0084E2  1171               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 34871  0084E4  B4D8               	btfsc	status,2,c
 34872  0084E6  D018               	goto	l5608
 34873                           
 34874                           ; BSR set to: 0
 34875  0084E8  0E01               	movlw	1
 34876  0084EA  6F72               	movwf	___awmod@counter& (0+255),b
 34877  0084EC  D004               	goto	l5603
 34878  0084EE                     
 34879                           ; BSR set to: 0
 34880                           
 34881                           ; BSR set to: 0
 34882  0084EE  90D8               	bcf	status,0,c
 34883  0084F0  3770               	rlcf	___awmod@divisor& (0+255),f,b
 34884  0084F2  3771               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 34885  0084F4  2B72               	incf	___awmod@counter& (0+255),f,b
 34886  0084F6                     l5603:
 34887                           
 34888                           ; BSR set to: 0
 34889                           
 34890                           ; BSR set to: 0
 34891  0084F6  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
 34892  0084F8  D7FA               	goto	l5604
 34893  0084FA                     u22440:
 34894                           
 34895                           ; BSR set to: 0
 34896                           
 34897                           ; BSR set to: 0
 34898                           
 34899                           ; BSR set to: 0
 34900  0084FA  5170               	movf	___awmod@divisor& (0+255),w,b
 34901  0084FC  5D6E               	subwf	___awmod@dividend& (0+255),w,b
 34902  0084FE  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
 34903  008500  596F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 34904  008502  A0D8               	btfss	status,0,c
 34905  008504  D004               	goto	l5607
 34906                           
 34907                           ; BSR set to: 0
 34908  008506  5170               	movf	___awmod@divisor& (0+255),w,b
 34909  008508  5F6E               	subwf	___awmod@dividend& (0+255),f,b
 34910  00850A  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
 34911  00850C  5B6F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 34912  00850E                     l5607:
 34913                           
 34914                           ; BSR set to: 0
 34915                           
 34916                           ; BSR set to: 0
 34917  00850E  90D8               	bcf	status,0,c
 34918  008510  3371               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 34919  008512  3370               	rrcf	___awmod@divisor& (0+255),f,b
 34920                           
 34921                           ; BSR set to: 0
 34922  008514  2F72               	decfsz	___awmod@counter& (0+255),f,b
 34923  008516  D7F1               	goto	u22440
 34924  008518                     l5608:
 34925                           
 34926                           ; BSR set to: 0
 34927                           
 34928                           ; BSR set to: 0
 34929                           
 34930                           ; BSR set to: 0
 34931  008518  5173               	movf	___awmod@sign& (0+255),w,b
 34932  00851A  B4D8               	btfsc	status,2,c
 34933  00851C  D004               	goto	l5609
 34934                           
 34935                           ; BSR set to: 0
 34936  00851E  6D6E               	negf	___awmod@dividend& (0+255),b
 34937  008520  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
 34938  008522  B0D8               	btfsc	status,0,c
 34939  008524  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
 34940  008526                     l5609:
 34941                           
 34942                           ; BSR set to: 0
 34943                           
 34944                           ; BSR set to: 0
 34945  008526  C06E  F06E         	movff	___awmod@dividend,?___awmod
 34946  00852A  C06F  F06F         	movff	___awmod@dividend+1,?___awmod+1
 34947  00852E  0012               	return	
 34948  008530                     __end_of___awmod:
 34949                           	opt stack 0
 34950                           tblptru	equ	0xFF8
 34951                           tblptrh	equ	0xFF7
 34952                           tblptrl	equ	0xFF6
 34953                           tablat	equ	0xFF5
 34954                           prodh	equ	0xFF4
 34955                           prodl	equ	0xFF3
 34956                           intcon	equ	0xFF2
 34957                           intcon2	equ	0xFF1
 34958                           postinc0	equ	0xFEE
 34959                           wreg	equ	0xFE8
 34960                           indf1	equ	0xFE7
 34961                           postdec1	equ	0xFE5
 34962                           fsr1h	equ	0xFE2
 34963                           fsr1l	equ	0xFE1
 34964                           indf2	equ	0xFDF
 34965                           postinc2	equ	0xFDE
 34966                           plusw2	equ	0xFDB
 34967                           fsr2h	equ	0xFDA
 34968                           fsr2l	equ	0xFD9
 34969                           status	equ	0xFD8
 34970                           
 34971 ;; *************** function _copy_array *****************
 34972 ;; Defined at:
 34973 ;;		line 197 in file "arpeggio.c"
 34974 ;; Parameters:    Size  Location     Type
 34975 ;;		None
 34976 ;; Auto vars:     Size  Location     Type
 34977 ;;  i               1    0[BANK0 ] unsigned char 
 34978 ;; Return value:  Size  Location     Type
 34979 ;;                  1    wreg      void 
 34980 ;; Registers used:
 34981 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 34982 ;; Tracked objects:
 34983 ;;		On entry : 0/0
 34984 ;;		On exit  : 0/0
 34985 ;;		Unchanged: 0/0
 34986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34990 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34991 ;;Total ram usage:        1 bytes
 34992 ;; Hardware stack levels used:    1
 34993 ;; Hardware stack levels required when called:    5
 34994 ;; This function calls:
 34995 ;;		Nothing
 34996 ;; This function is called by:
 34997 ;;		_setupArpeggio
 34998 ;; This function uses a non-reentrant model
 34999 ;;
 35000                           
 35001                           	psect	text100
 35002  008882                     __ptext100:
 35003                           	opt stack 0
 35004  008882                     _copy_array:
 35005                           	opt stack 18
 35006                           
 35007                           ;arpeggio.c: 199: if(NUM_NOTES_PRESSED == 0){return;}
 35008                           
 35009                           ; BSR set to: 0
 35010                           ;incstack = 0
 35011  008882  0100               	movlb	0	; () banked
 35012  008884  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35013  008886  B4D8               	btfsc	status,2,c
 35014  008888  0012               	return	
 35015                           
 35016                           ; BSR set to: 0
 35017                           ;arpeggio.c: 202: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 35018                           
 35019                           ; BSR set to: 0
 35020                           
 35021                           ; BSR set to: 0
 35022  00888A  0E00               	movlw	0
 35023  00888C  6F60               	movwf	copy_array@i& (0+255),b
 35024  00888E  D025               	goto	l5249
 35025  008890                     
 35026                           ; BSR set to: 0
 35027                           ;arpeggio.c: 203: ARPEGGIO_SORTED[i] = ARPEGGIO[i];
 35028                           
 35029                           ; BSR set to: 0
 35030  008890  5160               	movf	copy_array@i& (0+255),w,b
 35031  008892  0D01               	mullw	1
 35032  008894  0E72               	movlw	low _ARPEGGIO
 35033  008896  24F3               	addwf	prodl,w,c
 35034  008898  6ED9               	movwf	fsr2l,c
 35035  00889A  0E01               	movlw	high _ARPEGGIO
 35036  00889C  20F4               	addwfc	prodh,w,c
 35037  00889E  6EDA               	movwf	fsr2h,c
 35038  0088A0  5160               	movf	copy_array@i& (0+255),w,b
 35039  0088A2  0D01               	mullw	1
 35040  0088A4  0E9C               	movlw	low _ARPEGGIO_SORTED
 35041  0088A6  24F3               	addwf	prodl,w,c
 35042  0088A8  6EE1               	movwf	fsr1l,c
 35043  0088AA  0E02               	movlw	high _ARPEGGIO_SORTED
 35044  0088AC  20F4               	addwfc	prodh,w,c
 35045  0088AE  6EE2               	movwf	fsr1h,c
 35046  0088B0  CFDF FFE7          	movff	indf2,indf1
 35047                           
 35048                           ;arpeggio.c: 204: ARPEGGIO_RANDOM[i] = ARPEGGIO[i];
 35049  0088B4  5160               	movf	copy_array@i& (0+255),w,b
 35050  0088B6  0D01               	mullw	1
 35051  0088B8  0E72               	movlw	low _ARPEGGIO
 35052  0088BA  24F3               	addwf	prodl,w,c
 35053  0088BC  6ED9               	movwf	fsr2l,c
 35054  0088BE  0E01               	movlw	high _ARPEGGIO
 35055  0088C0  20F4               	addwfc	prodh,w,c
 35056  0088C2  6EDA               	movwf	fsr2h,c
 35057  0088C4  5160               	movf	copy_array@i& (0+255),w,b
 35058  0088C6  0D01               	mullw	1
 35059  0088C8  0E8C               	movlw	low _ARPEGGIO_RANDOM
 35060  0088CA  24F3               	addwf	prodl,w,c
 35061  0088CC  6EE1               	movwf	fsr1l,c
 35062  0088CE  0E02               	movlw	high _ARPEGGIO_RANDOM
 35063  0088D0  20F4               	addwfc	prodh,w,c
 35064  0088D2  6EE2               	movwf	fsr1h,c
 35065  0088D4  CFDF FFE7          	movff	indf2,indf1
 35066                           
 35067                           ; BSR set to: 0
 35068  0088D8  2B60               	incf	copy_array@i& (0+255),f,b
 35069  0088DA                     l5249:
 35070                           
 35071                           ; BSR set to: 0
 35072                           
 35073                           ; BSR set to: 0
 35074  0088DA  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35075  0088DC  5D60               	subwf	copy_array@i& (0+255),w,b
 35076  0088DE  B0D8               	btfsc	status,0,c
 35077  0088E0  0012               	return	
 35078  0088E2  D7D6               	goto	l5250
 35079  0088E4                     __end_of_copy_array:
 35080                           	opt stack 0
 35081                           tblptru	equ	0xFF8
 35082                           tblptrh	equ	0xFF7
 35083                           tblptrl	equ	0xFF6
 35084                           tablat	equ	0xFF5
 35085                           prodh	equ	0xFF4
 35086                           prodl	equ	0xFF3
 35087                           intcon	equ	0xFF2
 35088                           intcon2	equ	0xFF1
 35089                           postinc0	equ	0xFEE
 35090                           wreg	equ	0xFE8
 35091                           indf1	equ	0xFE7
 35092                           postdec1	equ	0xFE5
 35093                           fsr1h	equ	0xFE2
 35094                           fsr1l	equ	0xFE1
 35095                           indf2	equ	0xFDF
 35096                           postinc2	equ	0xFDE
 35097                           plusw2	equ	0xFDB
 35098                           fsr2h	equ	0xFDA
 35099                           fsr2l	equ	0xFD9
 35100                           status	equ	0xFD8
 35101                           
 35102 ;; *************** function _resetArpeggio *****************
 35103 ;; Defined at:
 35104 ;;		line 149 in file "arpeggio.c"
 35105 ;; Parameters:    Size  Location     Type
 35106 ;;		None
 35107 ;; Auto vars:     Size  Location     Type
 35108 ;;		None
 35109 ;; Return value:  Size  Location     Type
 35110 ;;                  1    wreg      void 
 35111 ;; Registers used:
 35112 ;;		wreg, status,2, status,0
 35113 ;; Tracked objects:
 35114 ;;		On entry : 0/0
 35115 ;;		On exit  : 0/0
 35116 ;;		Unchanged: 0/0
 35117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35122 ;;Total ram usage:        0 bytes
 35123 ;; Hardware stack levels used:    1
 35124 ;; Hardware stack levels required when called:    5
 35125 ;; This function calls:
 35126 ;;		Nothing
 35127 ;; This function is called by:
 35128 ;;		_processOctave
 35129 ;;		_finish_arpeggio_setup
 35130 ;; This function uses a non-reentrant model
 35131 ;;
 35132                           
 35133                           	psect	text101
 35134  0090C2                     __ptext101:
 35135                           	opt stack 0
 35136  0090C2                     _resetArpeggio:
 35137                           	opt stack 19
 35138                           
 35139                           ;arpeggio.c: 151: which_note = 0;
 35140                           
 35141                           ; BSR set to: 0
 35142                           ;incstack = 0
 35143  0090C2  0E00               	movlw	0
 35144  0090C4  6E57               	movwf	_which_note,c
 35145                           
 35146                           ;arpeggio.c: 152: which_octave = 0;
 35147  0090C6  0E00               	movlw	0
 35148  0090C8  6E56               	movwf	_which_octave,c
 35149                           
 35150                           ;arpeggio.c: 153: last_note = 0;
 35151  0090CA  0E00               	movlw	0
 35152  0090CC  0100               	movlb	0	; () banked
 35153  0090CE  6FE8               	movwf	_last_note& (0+255),b
 35154                           
 35155                           ;arpeggio.c: 154: last_octave = 0;
 35156  0090D0  0E00               	movlw	0
 35157  0090D2  6E55               	movwf	_last_octave,c
 35158                           
 35159                           ; BSR set to: 0
 35160                           ;arpeggio.c: 155: overflow = 0;
 35161  0090D4  9433               	bcf	_overflow/(0+8),_overflow& (0+7),c
 35162                           
 35163                           ; BSR set to: 0
 35164                           ;arpeggio.c: 156: octave_overflow = 0;
 35165  0090D6  9233               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 35166                           
 35167                           ; BSR set to: 0
 35168                           ;arpeggio.c: 159: if(ARPEGGIO_TYPE == UP_DOWN && startingDirection == DOWN){
 35169  0090D8  0E02               	movlw	2
 35170  0090DA  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 35171  0090DC  A4D8               	btfss	status,2,c
 35172  0090DE  D005               	goto	l5226
 35173                           
 35174                           ; BSR set to: 0
 35175  0090E0  05E9               	decf	_startingDirection& (0+255),w,b
 35176  0090E2  A4D8               	btfss	status,2,c
 35177  0090E4  D002               	goto	l5226
 35178                           
 35179                           ; BSR set to: 0
 35180                           ;arpeggio.c: 160: ARPEGGIO_TYPE = DOWN_UP;
 35181  0090E6  0E03               	movlw	3
 35182  0090E8  6FEA               	movwf	_ARPEGGIO_TYPE& (0+255),b
 35183  0090EA                     l5226:
 35184                           
 35185                           ; BSR set to: 0
 35186                           ;arpeggio.c: 161: }
 35187                           ;arpeggio.c: 163: if(ARPEGGIO_TYPE == DOWN_UP && startingDirection == UP){
 35188                           
 35189                           ; BSR set to: 0
 35190  0090EA  0E03               	movlw	3
 35191  0090EC  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 35192  0090EE  A4D8               	btfss	status,2,c
 35193  0090F0  0012               	return	
 35194                           
 35195                           ; BSR set to: 0
 35196  0090F2  51E9               	movf	_startingDirection& (0+255),w,b
 35197  0090F4  A4D8               	btfss	status,2,c
 35198  0090F6  0012               	return	
 35199                           
 35200                           ; BSR set to: 0
 35201                           ;arpeggio.c: 164: ARPEGGIO_TYPE = UP_DOWN;
 35202  0090F8  0E02               	movlw	2
 35203  0090FA  6FEA               	movwf	_ARPEGGIO_TYPE& (0+255),b
 35204  0090FC  0012               	return	
 35205  0090FE                     __end_of_resetArpeggio:
 35206                           	opt stack 0
 35207                           tblptru	equ	0xFF8
 35208                           tblptrh	equ	0xFF7
 35209                           tblptrl	equ	0xFF6
 35210                           tablat	equ	0xFF5
 35211                           prodh	equ	0xFF4
 35212                           prodl	equ	0xFF3
 35213                           intcon	equ	0xFF2
 35214                           intcon2	equ	0xFF1
 35215                           postinc0	equ	0xFEE
 35216                           wreg	equ	0xFE8
 35217                           indf1	equ	0xFE7
 35218                           postdec1	equ	0xFE5
 35219                           fsr1h	equ	0xFE2
 35220                           fsr1l	equ	0xFE1
 35221                           indf2	equ	0xFDF
 35222                           postinc2	equ	0xFDE
 35223                           plusw2	equ	0xFDB
 35224                           fsr2h	equ	0xFDA
 35225                           fsr2l	equ	0xFD9
 35226                           status	equ	0xFD8
 35227                           
 35228 ;; *************** function _delete_notes_from_arpeggio *****************
 35229 ;; Defined at:
 35230 ;;		line 56 in file "arpeggio.c"
 35231 ;; Parameters:    Size  Location     Type
 35232 ;;  pitch           1    wreg     unsigned char 
 35233 ;; Auto vars:     Size  Location     Type
 35234 ;;  pitch           1    9[BANK0 ] unsigned char 
 35235 ;;  INDEX_TO_SHI    1   10[BANK0 ] char 
 35236 ;; Return value:  Size  Location     Type
 35237 ;;                  1    wreg      void 
 35238 ;; Registers used:
 35239 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35240 ;; Tracked objects:
 35241 ;;		On entry : 0/0
 35242 ;;		On exit  : 0/0
 35243 ;;		Unchanged: 0/0
 35244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35246 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35248 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35249 ;;Total ram usage:        2 bytes
 35250 ;; Hardware stack levels used:    1
 35251 ;; Hardware stack levels required when called:    6
 35252 ;; This function calls:
 35253 ;;		_findArrayIndex
 35254 ;;		_rotateArrayLeft
 35255 ;; This function is called by:
 35256 ;;		_playThisNotePentatonic
 35257 ;;		_playThisNote
 35258 ;;		_playThisNote8
 35259 ;; This function uses a non-reentrant model
 35260 ;;
 35261                           
 35262                           	psect	text102
 35263  009280                     __ptext102:
 35264                           	opt stack 0
 35265  009280                     _delete_notes_from_arpeggio:
 35266                           	opt stack 19
 35267                           
 35268                           ; BSR set to: 0
 35269                           ;incstack = 0
 35270                           ;delete_notes_from_arpeggio@pitch stored from wreg
 35271  009280  0100               	movlb	0	; () banked
 35272  009282  6F69               	movwf	delete_notes_from_arpeggio@pitch& (0+255),b
 35273                           
 35274                           ;arpeggio.c: 59: signed char INDEX_TO_SHIFT_LEFT_AT = findArrayIndex(pitch);
 35275  009284  0100               	movlb	0	; () banked
 35276  009286  5169               	movf	delete_notes_from_arpeggio@pitch& (0+255),w,b
 35277  009288  EC7F  F048         	call	_findArrayIndex
 35278  00928C  0100               	movlb	0	; () banked
 35279  00928E  6F6A               	movwf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),b
 35280                           
 35281                           ; BSR set to: 0
 35282                           ;arpeggio.c: 70: rotateArrayLeft(INDEX_TO_SHIFT_LEFT_AT);
 35283  009290  516A               	movf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),w,b
 35284  009292  ECB1  F041         	call	_rotateArrayLeft
 35285                           
 35286                           ;arpeggio.c: 73: if(NUM_NOTES_PRESSED > 0) {NUM_NOTES_PRESSED--;}
 35287  009296  0100               	movlb	0	; () banked
 35288  009298  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35289  00929A  A4D8               	btfss	status,2,c
 35290                           
 35291                           ; BSR set to: 0
 35292  00929C  07E5               	decf	_NUM_NOTES_PRESSED& (0+255),f,b
 35293                           
 35294                           ; BSR set to: 0
 35295                           ;arpeggio.c: 78: if(NUM_NOTES_PRESSED == 0) {ARRAY_INDEX = 0;}
 35296                           
 35297                           ; BSR set to: 0
 35298  00929E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35299  0092A0  A4D8               	btfss	status,2,c
 35300  0092A2  D002               	goto	l5196
 35301                           
 35302                           ; BSR set to: 0
 35303  0092A4  0E00               	movlw	0
 35304  0092A6  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 35305  0092A8                     l5196:
 35306                           
 35307                           ; BSR set to: 0
 35308                           ;arpeggio.c: 81: if(ARRAY_INDEX > 0){ARRAY_INDEX--;}
 35309  0092A8  51E4               	movf	_ARRAY_INDEX& (0+255),w,b
 35310  0092AA  B4D8               	btfsc	status,2,c
 35311  0092AC  0012               	return	
 35312                           
 35313                           ; BSR set to: 0
 35314  0092AE  07E4               	decf	_ARRAY_INDEX& (0+255),f,b
 35315  0092B0  0012               	return	
 35316  0092B2                     __end_of_delete_notes_from_arpeggio:
 35317                           	opt stack 0
 35318                           tblptru	equ	0xFF8
 35319                           tblptrh	equ	0xFF7
 35320                           tblptrl	equ	0xFF6
 35321                           tablat	equ	0xFF5
 35322                           prodh	equ	0xFF4
 35323                           prodl	equ	0xFF3
 35324                           intcon	equ	0xFF2
 35325                           intcon2	equ	0xFF1
 35326                           postinc0	equ	0xFEE
 35327                           wreg	equ	0xFE8
 35328                           indf1	equ	0xFE7
 35329                           postdec1	equ	0xFE5
 35330                           fsr1h	equ	0xFE2
 35331                           fsr1l	equ	0xFE1
 35332                           indf2	equ	0xFDF
 35333                           postinc2	equ	0xFDE
 35334                           plusw2	equ	0xFDB
 35335                           fsr2h	equ	0xFDA
 35336                           fsr2l	equ	0xFD9
 35337                           status	equ	0xFD8
 35338                           
 35339 ;; *************** function _rotateArrayLeft *****************
 35340 ;; Defined at:
 35341 ;;		line 571 in file "arpeggio.c"
 35342 ;; Parameters:    Size  Location     Type
 35343 ;;  array_index     1    wreg     unsigned char 
 35344 ;; Auto vars:     Size  Location     Type
 35345 ;;  array_index     1    7[BANK0 ] unsigned char 
 35346 ;;  i               1    8[BANK0 ] unsigned char 
 35347 ;; Return value:  Size  Location     Type
 35348 ;;                  1    wreg      void 
 35349 ;; Registers used:
 35350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 35351 ;; Tracked objects:
 35352 ;;		On entry : 0/0
 35353 ;;		On exit  : 0/0
 35354 ;;		Unchanged: 0/0
 35355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35357 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35358 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35359 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35360 ;;Total ram usage:        9 bytes
 35361 ;; Hardware stack levels used:    1
 35362 ;; Hardware stack levels required when called:    5
 35363 ;; This function calls:
 35364 ;;		Nothing
 35365 ;; This function is called by:
 35366 ;;		_delete_notes_from_arpeggio
 35367 ;; This function uses a non-reentrant model
 35368 ;;
 35369                           
 35370                           	psect	text103
 35371  008362                     __ptext103:
 35372                           	opt stack 0
 35373  008362                     _rotateArrayLeft:
 35374                           	opt stack 19
 35375                           
 35376                           ; BSR set to: 0
 35377                           ;incstack = 0
 35378                           ;rotateArrayLeft@array_index stored from wreg
 35379  008362  0100               	movlb	0	; () banked
 35380  008364  6F67               	movwf	rotateArrayLeft@array_index& (0+255),b
 35381                           
 35382                           ;arpeggio.c: 589: for(unsigned char i=array_index; i < (MAX_NUM_NOTES - 1) ;i++)
 35383  008366  C067  F068         	movff	rotateArrayLeft@array_index,rotateArrayLeft@i
 35384  00836A  0EFF               	movlw	255
 35385  00836C  0100               	movlb	0	; () banked
 35386  00836E  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 35387  008370  0EFF               	movlw	255
 35388  008372  6F61               	movwf	(??_rotateArrayLeft+1)& (0+255),b
 35389  008374  0E9D               	movlw	low _MAX_NUM_NOTES
 35390  008376  6EF6               	movwf	tblptrl,c
 35391  008378                     	if	1	;There is more than 1 active tblptr byte
 35392  008378  0EF3               	movlw	high _MAX_NUM_NOTES
 35393  00837A  6EF7               	movwf	tblptrh,c
 35394  00837C                     	endif
 35395  00837C                     	if	0	;There are less than 3 active tblptr bytes
 35396  00837C                     	endif
 35397  00837C  0008               	tblrd		*
 35398  00837E  50F5               	movf	tablat,w,c
 35399  008380  6F62               	movwf	(??_rotateArrayLeft+2)& (0+255),b
 35400  008382  6B63               	clrf	(??_rotateArrayLeft+3)& (0+255),b
 35401  008384  5160               	movf	??_rotateArrayLeft& (0+255),w,b
 35402  008386  2762               	addwf	(??_rotateArrayLeft+2)& (0+255),f,b
 35403  008388  5161               	movf	(??_rotateArrayLeft+1)& (0+255),w,b
 35404  00838A  2363               	addwfc	(??_rotateArrayLeft+3)& (0+255),f,b
 35405  00838C  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 35406  00838E  6F64               	movwf	(??_rotateArrayLeft+4)& (0+255),b
 35407  008390  6B65               	clrf	(??_rotateArrayLeft+5)& (0+255),b
 35408  008392  5162               	movf	(??_rotateArrayLeft+2)& (0+255),w,b
 35409  008394  5D64               	subwf	(??_rotateArrayLeft+4)& (0+255),w,b
 35410  008396  5165               	movf	(??_rotateArrayLeft+5)& (0+255),w,b
 35411  008398  0A80               	xorlw	128
 35412  00839A  6F66               	movwf	(??_rotateArrayLeft+6)& (0+255),b
 35413  00839C  5163               	movf	(??_rotateArrayLeft+3)& (0+255),w,b
 35414  00839E  0A80               	xorlw	128
 35415  0083A0  5966               	subwfb	(??_rotateArrayLeft+6)& (0+255),w,b
 35416  0083A2  B0D8               	btfsc	status,0,c
 35417  0083A4  0012               	return	
 35418                           
 35419                           ; BSR set to: 0
 35420                           ;arpeggio.c: 590: {
 35421                           ;arpeggio.c: 591: ARPEGGIO[i]=ARPEGGIO[i+1];
 35422                           
 35423                           ; BSR set to: 0
 35424                           
 35425                           ; BSR set to: 0
 35426  0083A6  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 35427  0083A8  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 35428  0083AA  6B61               	clrf	(??_rotateArrayLeft+1)& (0+255),b
 35429  0083AC  0E01               	movlw	1
 35430  0083AE  2760               	addwf	??_rotateArrayLeft& (0+255),f,b
 35431  0083B0  0E00               	movlw	0
 35432  0083B2  2361               	addwfc	(??_rotateArrayLeft+1)& (0+255),f,b
 35433  0083B4  0E72               	movlw	low _ARPEGGIO
 35434  0083B6  2560               	addwf	??_rotateArrayLeft& (0+255),w,b
 35435  0083B8  6ED9               	movwf	fsr2l,c
 35436  0083BA  0E01               	movlw	high _ARPEGGIO
 35437  0083BC  2161               	addwfc	(??_rotateArrayLeft+1)& (0+255),w,b
 35438  0083BE  6EDA               	movwf	fsr2h,c
 35439  0083C0  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 35440  0083C2  0D01               	mullw	1
 35441  0083C4  0E72               	movlw	low _ARPEGGIO
 35442  0083C6  24F3               	addwf	prodl,w,c
 35443  0083C8  6EE1               	movwf	fsr1l,c
 35444  0083CA  0E01               	movlw	high _ARPEGGIO
 35445  0083CC  20F4               	addwfc	prodh,w,c
 35446  0083CE  6EE2               	movwf	fsr1h,c
 35447  0083D0  CFDF FFE7          	movff	indf2,indf1
 35448                           
 35449                           ; BSR set to: 0
 35450  0083D4  2B68               	incf	rotateArrayLeft@i& (0+255),f,b
 35451                           
 35452                           ; BSR set to: 0
 35453  0083D6  0EFF               	movlw	255
 35454  0083D8  D7CA               	goto	L20
 35455  0083DA                     __end_of_rotateArrayLeft:
 35456                           	opt stack 0
 35457                           tblptru	equ	0xFF8
 35458                           tblptrh	equ	0xFF7
 35459                           tblptrl	equ	0xFF6
 35460                           tablat	equ	0xFF5
 35461                           prodh	equ	0xFF4
 35462                           prodl	equ	0xFF3
 35463                           intcon	equ	0xFF2
 35464                           intcon2	equ	0xFF1
 35465                           postinc0	equ	0xFEE
 35466                           wreg	equ	0xFE8
 35467                           indf1	equ	0xFE7
 35468                           postdec1	equ	0xFE5
 35469                           fsr1h	equ	0xFE2
 35470                           fsr1l	equ	0xFE1
 35471                           indf2	equ	0xFDF
 35472                           postinc2	equ	0xFDE
 35473                           plusw2	equ	0xFDB
 35474                           fsr2h	equ	0xFDA
 35475                           fsr2l	equ	0xFD9
 35476                           status	equ	0xFD8
 35477                           
 35478 ;; *************** function _findArrayIndex *****************
 35479 ;; Defined at:
 35480 ;;		line 503 in file "arpeggio.c"
 35481 ;; Parameters:    Size  Location     Type
 35482 ;;  pitch_of_key    1    wreg     unsigned char 
 35483 ;; Auto vars:     Size  Location     Type
 35484 ;;  pitch_of_key    1    1[BANK0 ] unsigned char 
 35485 ;;  i               1    2[BANK0 ] unsigned char 
 35486 ;; Return value:  Size  Location     Type
 35487 ;;                  1    wreg      char 
 35488 ;; Registers used:
 35489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 35490 ;; Tracked objects:
 35491 ;;		On entry : 0/0
 35492 ;;		On exit  : 0/0
 35493 ;;		Unchanged: 0/0
 35494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35496 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35498 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35499 ;;Total ram usage:        3 bytes
 35500 ;; Hardware stack levels used:    1
 35501 ;; Hardware stack levels required when called:    5
 35502 ;; This function calls:
 35503 ;;		Nothing
 35504 ;; This function is called by:
 35505 ;;		_delete_notes_from_arpeggio
 35506 ;; This function uses a non-reentrant model
 35507 ;;
 35508                           
 35509                           	psect	text104
 35510  0090FE                     __ptext104:
 35511                           	opt stack 0
 35512  0090FE                     _findArrayIndex:
 35513                           	opt stack 19
 35514                           
 35515                           ; BSR set to: 0
 35516                           ;incstack = 0
 35517                           ;findArrayIndex@pitch_of_key_release stored from wreg
 35518  0090FE  0100               	movlb	0	; () banked
 35519  009100  6F61               	movwf	findArrayIndex@pitch_of_key_release& (0+255),b
 35520                           
 35521                           ;arpeggio.c: 505: for (unsigned char i=0;i<MAX_NUM_NOTES;i++){
 35522  009102  0E00               	movlw	0
 35523  009104  0100               	movlb	0	; () banked
 35524  009106  6F62               	movwf	findArrayIndex@i& (0+255),b
 35525  009108                     l16395:
 35526                           
 35527                           ; BSR set to: 0
 35528  009108  0E9D               	movlw	low _MAX_NUM_NOTES
 35529  00910A  6EF6               	movwf	tblptrl,c
 35530  00910C                     	if	1	;There is more than 1 active tblptr byte
 35531  00910C  0EF3               	movlw	high _MAX_NUM_NOTES
 35532  00910E  6EF7               	movwf	tblptrh,c
 35533  009110                     	endif
 35534  009110                     	if	0	;There are less than 3 active tblptr bytes
 35535  009110                     	endif
 35536  009110  0009               	tblrd		*+
 35537  009112  50F5               	movf	tablat,w,c
 35538  009114  5D62               	subwf	findArrayIndex@i& (0+255),w,b
 35539  009116  B0D8               	btfsc	status,0,c
 35540  009118  0012               	return	
 35541                           
 35542                           ; BSR set to: 0
 35543                           ;arpeggio.c: 506: if(ARPEGGIO[i] == pitch_of_key_release){return i;}
 35544                           
 35545                           ; BSR set to: 0
 35546                           
 35547                           ; BSR set to: 0
 35548  00911A  5162               	movf	findArrayIndex@i& (0+255),w,b
 35549  00911C  0D01               	mullw	1
 35550  00911E  0E72               	movlw	low _ARPEGGIO
 35551  009120  24F3               	addwf	prodl,w,c
 35552  009122  6ED9               	movwf	fsr2l,c
 35553  009124  0E01               	movlw	high _ARPEGGIO
 35554  009126  20F4               	addwfc	prodh,w,c
 35555  009128  6EDA               	movwf	fsr2h,c
 35556  00912A  5161               	movf	findArrayIndex@pitch_of_key_release& (0+255),w,b
 35557  00912C  18DE               	xorwf	postinc2,w,c
 35558  00912E  A4D8               	btfss	status,2,c
 35559  009130  D002               	goto	l16405
 35560                           
 35561                           ; BSR set to: 0
 35562  009132  5162               	movf	findArrayIndex@i& (0+255),w,b
 35563                           
 35564                           ; BSR set to: 0
 35565  009134  0012               	return	
 35566  009136                     l16405:
 35567                           
 35568                           ; BSR set to: 0
 35569                           
 35570                           ; BSR set to: 0
 35571                           
 35572                           ;arpeggio.c: 507: else{;}
 35573                           
 35574                           ; BSR set to: 0
 35575                           
 35576                           ; BSR set to: 0
 35577  009136  2B62               	incf	findArrayIndex@i& (0+255),f,b
 35578  009138  D7E7               	goto	l16395
 35579  00913A                     __end_of_findArrayIndex:
 35580                           	opt stack 0
 35581                           tblptru	equ	0xFF8
 35582                           tblptrh	equ	0xFF7
 35583                           tblptrl	equ	0xFF6
 35584                           tablat	equ	0xFF5
 35585                           prodh	equ	0xFF4
 35586                           prodl	equ	0xFF3
 35587                           intcon	equ	0xFF2
 35588                           intcon2	equ	0xFF1
 35589                           postinc0	equ	0xFEE
 35590                           wreg	equ	0xFE8
 35591                           indf1	equ	0xFE7
 35592                           postdec1	equ	0xFE5
 35593                           fsr1h	equ	0xFE2
 35594                           fsr1l	equ	0xFE1
 35595                           indf2	equ	0xFDF
 35596                           postinc2	equ	0xFDE
 35597                           plusw2	equ	0xFDB
 35598                           fsr2h	equ	0xFDA
 35599                           fsr2l	equ	0xFD9
 35600                           status	equ	0xFD8
 35601                           
 35602 ;; *************** function _add_notes_to_arpeggio *****************
 35603 ;; Defined at:
 35604 ;;		line 39 in file "arpeggio.c"
 35605 ;; Parameters:    Size  Location     Type
 35606 ;;  pitch           1    wreg     unsigned char 
 35607 ;; Auto vars:     Size  Location     Type
 35608 ;;  pitch           1    7[BANK0 ] unsigned char 
 35609 ;; Return value:  Size  Location     Type
 35610 ;;                  1    wreg      void 
 35611 ;; Registers used:
 35612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 35613 ;; Tracked objects:
 35614 ;;		On entry : 0/0
 35615 ;;		On exit  : 0/0
 35616 ;;		Unchanged: 0/0
 35617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35620 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35621 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35622 ;;Total ram usage:        8 bytes
 35623 ;; Hardware stack levels used:    1
 35624 ;; Hardware stack levels required when called:    5
 35625 ;; This function calls:
 35626 ;;		Nothing
 35627 ;; This function is called by:
 35628 ;;		_playThisNotePentatonic
 35629 ;;		_playThisNote
 35630 ;;		_playThisNote8
 35631 ;; This function uses a non-reentrant model
 35632 ;;
 35633                           
 35634                           	psect	text105
 35635  007F86                     __ptext105:
 35636                           	opt stack 0
 35637  007F86                     _add_notes_to_arpeggio:
 35638                           	opt stack 20
 35639                           
 35640                           ; BSR set to: 0
 35641                           ;incstack = 0
 35642                           ;add_notes_to_arpeggio@pitch stored from wreg
 35643  007F86  0100               	movlb	0	; () banked
 35644  007F88  6F67               	movwf	add_notes_to_arpeggio@pitch& (0+255),b
 35645                           
 35646                           ;arpeggio.c: 42: ARPEGGIO[ARRAY_INDEX] = pitch;
 35647  007F8A  0100               	movlb	0	; () banked
 35648  007F8C  51E4               	movf	_ARRAY_INDEX& (0+255),w,b
 35649  007F8E  0D01               	mullw	1
 35650  007F90  0E72               	movlw	low _ARPEGGIO
 35651  007F92  24F3               	addwf	prodl,w,c
 35652  007F94  6ED9               	movwf	fsr2l,c
 35653  007F96  0E01               	movlw	high _ARPEGGIO
 35654  007F98  20F4               	addwfc	prodh,w,c
 35655  007F9A  6EDA               	movwf	fsr2h,c
 35656  007F9C  C067  FFDF         	movff	add_notes_to_arpeggio@pitch,indf2
 35657                           
 35658                           ; BSR set to: 0
 35659                           ;arpeggio.c: 44: ARRAY_INDEX++;
 35660  007FA0  2BE4               	incf	_ARRAY_INDEX& (0+255),f,b
 35661                           
 35662                           ; BSR set to: 0
 35663                           ;arpeggio.c: 47: if(ARRAY_INDEX > (MAX_NUM_NOTES - 1)){ARRAY_INDEX = 0;}
 35664  007FA2  51E4               	movf	_ARRAY_INDEX& (0+255),w,b
 35665  007FA4  6F60               	movwf	??_add_notes_to_arpeggio& (0+255),b
 35666  007FA6  6B61               	clrf	(??_add_notes_to_arpeggio+1)& (0+255),b
 35667  007FA8  0EFF               	movlw	255
 35668  007FAA  6F62               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 35669  007FAC  0EFF               	movlw	255
 35670  007FAE  6F63               	movwf	(??_add_notes_to_arpeggio+3)& (0+255),b
 35671  007FB0  0E9D               	movlw	low _MAX_NUM_NOTES
 35672  007FB2  6EF6               	movwf	tblptrl,c
 35673  007FB4                     	if	1	;There is more than 1 active tblptr byte
 35674  007FB4  0EF3               	movlw	high _MAX_NUM_NOTES
 35675  007FB6  6EF7               	movwf	tblptrh,c
 35676  007FB8                     	endif
 35677  007FB8                     	if	0	;There are less than 3 active tblptr bytes
 35678  007FB8                     	endif
 35679  007FB8  0008               	tblrd		*
 35680  007FBA  50F5               	movf	tablat,w,c
 35681  007FBC  6F64               	movwf	(??_add_notes_to_arpeggio+4)& (0+255),b
 35682  007FBE  6B65               	clrf	(??_add_notes_to_arpeggio+5)& (0+255),b
 35683  007FC0  5162               	movf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 35684  007FC2  2764               	addwf	(??_add_notes_to_arpeggio+4)& (0+255),f,b
 35685  007FC4  5163               	movf	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 35686  007FC6  2365               	addwfc	(??_add_notes_to_arpeggio+5)& (0+255),f,b
 35687  007FC8  5160               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 35688  007FCA  5D64               	subwf	(??_add_notes_to_arpeggio+4)& (0+255),w,b
 35689  007FCC  5165               	movf	(??_add_notes_to_arpeggio+5)& (0+255),w,b
 35690  007FCE  0A80               	xorlw	128
 35691  007FD0  6F66               	movwf	(??_add_notes_to_arpeggio+6)& (0+255),b
 35692  007FD2  5161               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 35693  007FD4  0A80               	xorlw	128
 35694  007FD6  5966               	subwfb	(??_add_notes_to_arpeggio+6)& (0+255),w,b
 35695  007FD8  B0D8               	btfsc	status,0,c
 35696  007FDA  D002               	goto	l5190
 35697                           
 35698                           ; BSR set to: 0
 35699  007FDC  0E00               	movlw	0
 35700  007FDE  6FE4               	movwf	_ARRAY_INDEX& (0+255),b
 35701  007FE0                     l5190:
 35702                           
 35703                           ; BSR set to: 0
 35704                           ;arpeggio.c: 50: NUM_NOTES_PRESSED++;
 35705                           
 35706                           ; BSR set to: 0
 35707  007FE0  2BE5               	incf	_NUM_NOTES_PRESSED& (0+255),f,b
 35708                           
 35709                           ; BSR set to: 0
 35710                           ;arpeggio.c: 52: if(NUM_NOTES_PRESSED > MAX_NUM_NOTES){NUM_NOTES_PRESSED = MAX_NUM_NOTES
      +                          ;}
 35711  007FE2  0E9D               	movlw	low _MAX_NUM_NOTES
 35712  007FE4  6EF6               	movwf	tblptrl,c
 35713  007FE6                     	if	1	;There is more than 1 active tblptr byte
 35714  007FE6  0EF3               	movlw	high _MAX_NUM_NOTES
 35715  007FE8  6EF7               	movwf	tblptrh,c
 35716  007FEA                     	endif
 35717  007FEA                     	if	0	;There are less than 3 active tblptr bytes
 35718  007FEA                     	endif
 35719  007FEA  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 35720  007FEC  0009               	tblrd		*+
 35721  007FEE  5CF5               	subwf	tablat,w,c
 35722  007FF0  B0D8               	btfsc	status,0,c
 35723  007FF2  0012               	return	
 35724                           
 35725                           ; BSR set to: 0
 35726  007FF4  0E9D               	movlw	low _MAX_NUM_NOTES
 35727  007FF6  6EF6               	movwf	tblptrl,c
 35728  007FF8                     	if	1	;There is more than 1 active tblptr byte
 35729  007FF8  0EF3               	movlw	high _MAX_NUM_NOTES
 35730  007FFA  6EF7               	movwf	tblptrh,c
 35731  007FFC                     	endif
 35732  007FFC                     	if	0	;There are less than 3 active tblptr bytes
 35733  007FFC                     	endif
 35734  007FFC  0008               	tblrd		*
 35735  007FFE  CFF5 F0E5          	movff	tablat,_NUM_NOTES_PRESSED
 35736  008002  0012               	return	
 35737  008004                     __end_of_add_notes_to_arpeggio:
 35738                           	opt stack 0
 35739                           tblptru	equ	0xFF8
 35740                           tblptrh	equ	0xFF7
 35741                           tblptrl	equ	0xFF6
 35742                           tablat	equ	0xFF5
 35743                           prodh	equ	0xFF4
 35744                           prodl	equ	0xFF3
 35745                           intcon	equ	0xFF2
 35746                           intcon2	equ	0xFF1
 35747                           postinc0	equ	0xFEE
 35748                           wreg	equ	0xFE8
 35749                           indf1	equ	0xFE7
 35750                           postdec1	equ	0xFE5
 35751                           fsr1h	equ	0xFE2
 35752                           fsr1l	equ	0xFE1
 35753                           indf2	equ	0xFDF
 35754                           postinc2	equ	0xFDE
 35755                           plusw2	equ	0xFDB
 35756                           fsr2h	equ	0xFDA
 35757                           fsr2l	equ	0xFD9
 35758                           status	equ	0xFD8
 35759                           
 35760 ;; *************** function _processDrumpad *****************
 35761 ;; Defined at:
 35762 ;;		line 21 in file "drum.c"
 35763 ;; Parameters:    Size  Location     Type
 35764 ;;		None
 35765 ;; Auto vars:     Size  Location     Type
 35766 ;;		None
 35767 ;; Return value:  Size  Location     Type
 35768 ;;                  1    wreg      void 
 35769 ;; Registers used:
 35770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 35771 ;; Tracked objects:
 35772 ;;		On entry : 0/0
 35773 ;;		On exit  : 0/0
 35774 ;;		Unchanged: 0/0
 35775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35780 ;;Total ram usage:        0 bytes
 35781 ;; Hardware stack levels used:    1
 35782 ;; Hardware stack levels required when called:    8
 35783 ;; This function calls:
 35784 ;;		_controlChange
 35785 ;;		_noteOffDrum
 35786 ;;		_noteOnDrum
 35787 ;; This function is called by:
 35788 ;;		_digitalInputs
 35789 ;; This function uses a non-reentrant model
 35790 ;;
 35791                           
 35792                           	psect	text106
 35793  001C66                     __ptext106:
 35794                           	opt stack 0
 35795  001C66                     _processDrumpad:
 35796                           	opt stack 21
 35797                           
 35798                           ;drum.c: 25: if((drum_button_state_now & 0x01) && !(button_state_now & 0x08000000) && !d
      +                          rum.SW1){
 35799                           
 35800                           ; BSR set to: 0
 35801                           ;incstack = 0
 35802  001C66  0100               	movlb	0	; () banked
 35803  001C68  B1EE               	btfsc	_drum_button_state_now& (0+255),0,b
 35804                           
 35805                           ; BSR set to: 0
 35806  001C6A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 35807  001C6C  D033               	goto	l2297
 35808                           
 35809                           ; BSR set to: 0
 35810  001C6E  B1EC               	btfsc	_drum& (0+255),0,b
 35811  001C70  D031               	goto	l2297
 35812                           
 35813                           ; BSR set to: 0
 35814                           ;drum.c: 26: drum.SW1 = 1;
 35815  001C72  81EC               	bsf	_drum& (0+255),0,b
 35816                           
 35817                           ;drum.c: 27: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[0],velocity);}
 35818  001C74  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 35819  001C76  D007               	goto	l2298
 35820                           
 35821                           ; BSR set to: 0
 35822  001C78  C1DF  F06E         	movff	_DRUM_NOTE,noteOnDrum@pitch
 35823  001C7C  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 35824  001C80  51FE               	movf	_drumchannel& (0+255),w,b
 35825  001C82  EC3E  F046         	call	_noteOnDrum
 35826  001C86                     l2298:
 35827                           
 35828                           ;drum.c: 28: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          127);}
 35829  001C86  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 35830  001C88  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 35831  001C8A  D008               	goto	l2299
 35832  001C8C  C1D7  F06B         	movff	_DRUM_CC,controlChange@controllerNumber
 35833  001C90  0E7F               	movlw	127
 35834  001C92  0100               	movlb	0	; () banked
 35835  001C94  6F6C               	movwf	controlChange@value& (0+255),b
 35836  001C96  51F6               	movf	_channel& (0+255),w,b
 35837  001C98  EC0D  F049         	call	_controlChange
 35838  001C9C                     l2299:
 35839                           
 35840                           ;drum.c: 29: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 0) {controlChan
      +                          ge(channel,DRUM_CC[0], 127);}
 35841  001C9C  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 35842  001C9E  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 35843  001CA0  D00A               	goto	l2300
 35844  001CA2  0100               	movlb	0	; () banked
 35845  001CA4  B1E3               	btfsc	_toggle_state& (0+255),0,b
 35846  001CA6  D007               	goto	l2300
 35847                           
 35848                           ; BSR set to: 0
 35849  001CA8  C1D7  F06B         	movff	_DRUM_CC,controlChange@controllerNumber
 35850  001CAC  0E7F               	movlw	127
 35851  001CAE  6F6C               	movwf	controlChange@value& (0+255),b
 35852  001CB0  51F6               	movf	_channel& (0+255),w,b
 35853  001CB2  EC0D  F049         	call	_controlChange
 35854  001CB6                     l2300:
 35855                           
 35856                           ;drum.c: 30: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 1) {controlChan
      +                          ge(channel,DRUM_CC[0], 0);}
 35857  001CB6  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 35858  001CB8  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 35859  001CBA  D00A               	goto	l2301
 35860  001CBC  0100               	movlb	0	; () banked
 35861  001CBE  A1E3               	btfss	_toggle_state& (0+255),0,b
 35862  001CC0  D007               	goto	l2301
 35863                           
 35864                           ; BSR set to: 0
 35865  001CC2  C1D7  F06B         	movff	_DRUM_CC,controlChange@controllerNumber
 35866  001CC6  0E00               	movlw	0
 35867  001CC8  6F6C               	movwf	controlChange@value& (0+255),b
 35868  001CCA  51F6               	movf	_channel& (0+255),w,b
 35869  001CCC  EC0D  F049         	call	_controlChange
 35870  001CD0                     l2301:
 35871                           
 35872                           ;drum.c: 31: toggle_state.T1 ^= 1;
 35873  001CD0  0100               	movlb	0	; () banked
 35874  001CD2  71E3               	btg	_toggle_state& (0+255),0,b
 35875  001CD4                     l2297:
 35876                           
 35877                           ; BSR set to: 0
 35878                           ;drum.c: 32: }
 35879                           ;drum.c: 33: if(((drum_button_state_now) & 0x02) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW2) {
 35880                           
 35881                           ; BSR set to: 0
 35882  001CD4  B3EE               	btfsc	_drum_button_state_now& (0+255),1,b
 35883                           
 35884                           ; BSR set to: 0
 35885  001CD6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 35886  001CD8  D033               	goto	l2302
 35887                           
 35888                           ; BSR set to: 0
 35889  001CDA  B3EC               	btfsc	_drum& (0+255),1,b
 35890  001CDC  D031               	goto	l2302
 35891                           
 35892                           ; BSR set to: 0
 35893                           ;drum.c: 34: drum.SW2 = 1;
 35894  001CDE  83EC               	bsf	_drum& (0+255),1,b
 35895                           
 35896                           ;drum.c: 35: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[1],velocity);}
 35897  001CE0  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 35898  001CE2  D007               	goto	l2303
 35899                           
 35900                           ; BSR set to: 0
 35901  001CE4  C1E0  F06E         	movff	_DRUM_NOTE+1,noteOnDrum@pitch
 35902  001CE8  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 35903  001CEC  51FE               	movf	_drumchannel& (0+255),w,b
 35904  001CEE  EC3E  F046         	call	_noteOnDrum
 35905  001CF2                     l2303:
 35906                           
 35907                           ;drum.c: 36: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          127);}
 35908  001CF2  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 35909  001CF4  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 35910  001CF6  D008               	goto	l2304
 35911  001CF8  C1D8  F06B         	movff	_DRUM_CC+1,controlChange@controllerNumber
 35912  001CFC  0E7F               	movlw	127
 35913  001CFE  0100               	movlb	0	; () banked
 35914  001D00  6F6C               	movwf	controlChange@value& (0+255),b
 35915  001D02  51F6               	movf	_channel& (0+255),w,b
 35916  001D04  EC0D  F049         	call	_controlChange
 35917  001D08                     l2304:
 35918                           
 35919                           ;drum.c: 37: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 0) {controlChan
      +                          ge(channel,DRUM_CC[1], 127);}
 35920  001D08  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 35921  001D0A  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 35922  001D0C  D00A               	goto	l2305
 35923  001D0E  0100               	movlb	0	; () banked
 35924  001D10  B3E3               	btfsc	_toggle_state& (0+255),1,b
 35925  001D12  D007               	goto	l2305
 35926                           
 35927                           ; BSR set to: 0
 35928  001D14  C1D8  F06B         	movff	_DRUM_CC+1,controlChange@controllerNumber
 35929  001D18  0E7F               	movlw	127
 35930  001D1A  6F6C               	movwf	controlChange@value& (0+255),b
 35931  001D1C  51F6               	movf	_channel& (0+255),w,b
 35932  001D1E  EC0D  F049         	call	_controlChange
 35933  001D22                     l2305:
 35934                           
 35935                           ;drum.c: 38: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 1) {controlChan
      +                          ge(channel,DRUM_CC[1], 0);}
 35936  001D22  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 35937  001D24  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 35938  001D26  D00A               	goto	l2306
 35939  001D28  0100               	movlb	0	; () banked
 35940  001D2A  A3E3               	btfss	_toggle_state& (0+255),1,b
 35941  001D2C  D007               	goto	l2306
 35942                           
 35943                           ; BSR set to: 0
 35944  001D2E  C1D8  F06B         	movff	_DRUM_CC+1,controlChange@controllerNumber
 35945  001D32  0E00               	movlw	0
 35946  001D34  6F6C               	movwf	controlChange@value& (0+255),b
 35947  001D36  51F6               	movf	_channel& (0+255),w,b
 35948  001D38  EC0D  F049         	call	_controlChange
 35949  001D3C                     l2306:
 35950                           
 35951                           ;drum.c: 39: toggle_state.T2 ^= 1;
 35952  001D3C  0100               	movlb	0	; () banked
 35953  001D3E  73E3               	btg	_toggle_state& (0+255),1,b
 35954  001D40                     l2302:
 35955                           
 35956                           ; BSR set to: 0
 35957                           ;drum.c: 40: }
 35958                           ;drum.c: 41: if(((drum_button_state_now) & 0x04) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW3) {
 35959                           
 35960                           ; BSR set to: 0
 35961  001D40  B5EE               	btfsc	_drum_button_state_now& (0+255),2,b
 35962                           
 35963                           ; BSR set to: 0
 35964  001D42  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 35965  001D44  D033               	goto	l2307
 35966                           
 35967                           ; BSR set to: 0
 35968  001D46  B5EC               	btfsc	_drum& (0+255),2,b
 35969  001D48  D031               	goto	l2307
 35970                           
 35971                           ; BSR set to: 0
 35972                           ;drum.c: 42: drum.SW3 = 1;
 35973  001D4A  85EC               	bsf	_drum& (0+255),2,b
 35974                           
 35975                           ;drum.c: 43: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[2],velocity);}
 35976  001D4C  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 35977  001D4E  D007               	goto	l2308
 35978                           
 35979                           ; BSR set to: 0
 35980  001D50  C1E1  F06E         	movff	_DRUM_NOTE+2,noteOnDrum@pitch
 35981  001D54  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 35982  001D58  51FE               	movf	_drumchannel& (0+255),w,b
 35983  001D5A  EC3E  F046         	call	_noteOnDrum
 35984  001D5E                     l2308:
 35985                           
 35986                           ;drum.c: 44: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2], 
      +                          127);}
 35987  001D5E  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 35988  001D60  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 35989  001D62  D008               	goto	l2309
 35990  001D64  C1D9  F06B         	movff	_DRUM_CC+2,controlChange@controllerNumber
 35991  001D68  0E7F               	movlw	127
 35992  001D6A  0100               	movlb	0	; () banked
 35993  001D6C  6F6C               	movwf	controlChange@value& (0+255),b
 35994  001D6E  51F6               	movf	_channel& (0+255),w,b
 35995  001D70  EC0D  F049         	call	_controlChange
 35996  001D74                     l2309:
 35997                           
 35998                           ;drum.c: 45: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 0) {controlChan
      +                          ge(channel,DRUM_CC[2], 127);}
 35999  001D74  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36000  001D76  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36001  001D78  D00A               	goto	l2310
 36002  001D7A  0100               	movlb	0	; () banked
 36003  001D7C  B5E3               	btfsc	_toggle_state& (0+255),2,b
 36004  001D7E  D007               	goto	l2310
 36005                           
 36006                           ; BSR set to: 0
 36007  001D80  C1D9  F06B         	movff	_DRUM_CC+2,controlChange@controllerNumber
 36008  001D84  0E7F               	movlw	127
 36009  001D86  6F6C               	movwf	controlChange@value& (0+255),b
 36010  001D88  51F6               	movf	_channel& (0+255),w,b
 36011  001D8A  EC0D  F049         	call	_controlChange
 36012  001D8E                     l2310:
 36013                           
 36014                           ;drum.c: 46: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 1) {controlChan
      +                          ge(channel,DRUM_CC[2], 0);}
 36015  001D8E  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36016  001D90  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36017  001D92  D00A               	goto	l2311
 36018  001D94  0100               	movlb	0	; () banked
 36019  001D96  A5E3               	btfss	_toggle_state& (0+255),2,b
 36020  001D98  D007               	goto	l2311
 36021                           
 36022                           ; BSR set to: 0
 36023  001D9A  C1D9  F06B         	movff	_DRUM_CC+2,controlChange@controllerNumber
 36024  001D9E  0E00               	movlw	0
 36025  001DA0  6F6C               	movwf	controlChange@value& (0+255),b
 36026  001DA2  51F6               	movf	_channel& (0+255),w,b
 36027  001DA4  EC0D  F049         	call	_controlChange
 36028  001DA8                     l2311:
 36029                           
 36030                           ;drum.c: 47: toggle_state.T3 ^= 1;
 36031  001DA8  0100               	movlb	0	; () banked
 36032  001DAA  75E3               	btg	_toggle_state& (0+255),2,b
 36033  001DAC                     l2307:
 36034                           
 36035                           ; BSR set to: 0
 36036                           ;drum.c: 48: }
 36037                           ;drum.c: 49: if(((drum_button_state_now) & 0x08) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW4) {
 36038                           
 36039                           ; BSR set to: 0
 36040  001DAC  B7EE               	btfsc	_drum_button_state_now& (0+255),3,b
 36041                           
 36042                           ; BSR set to: 0
 36043  001DAE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36044  001DB0  D033               	goto	l2312
 36045                           
 36046                           ; BSR set to: 0
 36047  001DB2  B7EC               	btfsc	_drum& (0+255),3,b
 36048  001DB4  D031               	goto	l2312
 36049                           
 36050                           ; BSR set to: 0
 36051                           ;drum.c: 50: drum.SW4 = 1;
 36052  001DB6  87EC               	bsf	_drum& (0+255),3,b
 36053                           
 36054                           ;drum.c: 51: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[3],velocity);}
 36055  001DB8  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36056  001DBA  D007               	goto	l2313
 36057                           
 36058                           ; BSR set to: 0
 36059  001DBC  C1E2  F06E         	movff	_DRUM_NOTE+3,noteOnDrum@pitch
 36060  001DC0  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36061  001DC4  51FE               	movf	_drumchannel& (0+255),w,b
 36062  001DC6  EC3E  F046         	call	_noteOnDrum
 36063  001DCA                     l2313:
 36064                           
 36065                           ;drum.c: 52: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3], 
      +                          127);}
 36066  001DCA  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36067  001DCC  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36068  001DCE  D008               	goto	l2314
 36069  001DD0  C1DA  F06B         	movff	_DRUM_CC+3,controlChange@controllerNumber
 36070  001DD4  0E7F               	movlw	127
 36071  001DD6  0100               	movlb	0	; () banked
 36072  001DD8  6F6C               	movwf	controlChange@value& (0+255),b
 36073  001DDA  51F6               	movf	_channel& (0+255),w,b
 36074  001DDC  EC0D  F049         	call	_controlChange
 36075  001DE0                     l2314:
 36076                           
 36077                           ;drum.c: 53: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 0) {controlChan
      +                          ge(channel,DRUM_CC[3], 127);}
 36078  001DE0  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36079  001DE2  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36080  001DE4  D00A               	goto	l2315
 36081  001DE6  0100               	movlb	0	; () banked
 36082  001DE8  B7E3               	btfsc	_toggle_state& (0+255),3,b
 36083  001DEA  D007               	goto	l2315
 36084                           
 36085                           ; BSR set to: 0
 36086  001DEC  C1DA  F06B         	movff	_DRUM_CC+3,controlChange@controllerNumber
 36087  001DF0  0E7F               	movlw	127
 36088  001DF2  6F6C               	movwf	controlChange@value& (0+255),b
 36089  001DF4  51F6               	movf	_channel& (0+255),w,b
 36090  001DF6  EC0D  F049         	call	_controlChange
 36091  001DFA                     l2315:
 36092                           
 36093                           ;drum.c: 54: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 1) {controlChan
      +                          ge(channel,DRUM_CC[3], 0);}
 36094  001DFA  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36095  001DFC  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36096  001DFE  D00A               	goto	l2316
 36097  001E00  0100               	movlb	0	; () banked
 36098  001E02  A7E3               	btfss	_toggle_state& (0+255),3,b
 36099  001E04  D007               	goto	l2316
 36100                           
 36101                           ; BSR set to: 0
 36102  001E06  C1DA  F06B         	movff	_DRUM_CC+3,controlChange@controllerNumber
 36103  001E0A  0E00               	movlw	0
 36104  001E0C  6F6C               	movwf	controlChange@value& (0+255),b
 36105  001E0E  51F6               	movf	_channel& (0+255),w,b
 36106  001E10  EC0D  F049         	call	_controlChange
 36107  001E14                     l2316:
 36108                           
 36109                           ;drum.c: 55: toggle_state.T4 ^= 1;
 36110  001E14  0100               	movlb	0	; () banked
 36111  001E16  77E3               	btg	_toggle_state& (0+255),3,b
 36112  001E18                     l2312:
 36113                           
 36114                           ; BSR set to: 0
 36115                           ;drum.c: 56: }
 36116                           ;drum.c: 57: if(((drum_button_state_now) & 0x10) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW5){
 36117                           
 36118                           ; BSR set to: 0
 36119  001E18  B9EE               	btfsc	_drum_button_state_now& (0+255),4,b
 36120                           
 36121                           ; BSR set to: 0
 36122  001E1A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36123  001E1C  D033               	goto	l2317
 36124                           
 36125                           ; BSR set to: 0
 36126  001E1E  B9EC               	btfsc	_drum& (0+255),4,b
 36127  001E20  D031               	goto	l2317
 36128                           
 36129                           ; BSR set to: 0
 36130                           ;drum.c: 58: drum.SW5 = 1;
 36131  001E22  89EC               	bsf	_drum& (0+255),4,b
 36132                           
 36133                           ;drum.c: 59: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[4],velocity);}
 36134  001E24  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36135  001E26  D007               	goto	l2318
 36136                           
 36137                           ; BSR set to: 0
 36138  001E28  C1E3  F06E         	movff	_DRUM_NOTE+4,noteOnDrum@pitch
 36139  001E2C  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36140  001E30  51FE               	movf	_drumchannel& (0+255),w,b
 36141  001E32  EC3E  F046         	call	_noteOnDrum
 36142  001E36                     l2318:
 36143                           
 36144                           ;drum.c: 60: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4], 
      +                          127);}
 36145  001E36  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36146  001E38  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36147  001E3A  D008               	goto	l2319
 36148  001E3C  C1DB  F06B         	movff	_DRUM_CC+4,controlChange@controllerNumber
 36149  001E40  0E7F               	movlw	127
 36150  001E42  0100               	movlb	0	; () banked
 36151  001E44  6F6C               	movwf	controlChange@value& (0+255),b
 36152  001E46  51F6               	movf	_channel& (0+255),w,b
 36153  001E48  EC0D  F049         	call	_controlChange
 36154  001E4C                     l2319:
 36155                           
 36156                           ;drum.c: 61: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 0) {controlChan
      +                          ge(channel,DRUM_CC[4], 127);}
 36157  001E4C  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36158  001E4E  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36159  001E50  D00A               	goto	l2320
 36160  001E52  0100               	movlb	0	; () banked
 36161  001E54  B1E3               	btfsc	_toggle_state& (0+255),0,b
 36162  001E56  D007               	goto	l2320
 36163                           
 36164                           ; BSR set to: 0
 36165  001E58  C1DB  F06B         	movff	_DRUM_CC+4,controlChange@controllerNumber
 36166  001E5C  0E7F               	movlw	127
 36167  001E5E  6F6C               	movwf	controlChange@value& (0+255),b
 36168  001E60  51F6               	movf	_channel& (0+255),w,b
 36169  001E62  EC0D  F049         	call	_controlChange
 36170  001E66                     l2320:
 36171                           
 36172                           ;drum.c: 62: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 1) {controlChan
      +                          ge(channel,DRUM_CC[4], 0);}
 36173  001E66  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36174  001E68  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36175  001E6A  D00A               	goto	l2321
 36176  001E6C  0100               	movlb	0	; () banked
 36177  001E6E  A1E3               	btfss	_toggle_state& (0+255),0,b
 36178  001E70  D007               	goto	l2321
 36179                           
 36180                           ; BSR set to: 0
 36181  001E72  C1DB  F06B         	movff	_DRUM_CC+4,controlChange@controllerNumber
 36182  001E76  0E00               	movlw	0
 36183  001E78  6F6C               	movwf	controlChange@value& (0+255),b
 36184  001E7A  51F6               	movf	_channel& (0+255),w,b
 36185  001E7C  EC0D  F049         	call	_controlChange
 36186  001E80                     l2321:
 36187                           
 36188                           ;drum.c: 63: toggle_state.T5 ^= 1;
 36189  001E80  0100               	movlb	0	; () banked
 36190  001E82  79E3               	btg	_toggle_state& (0+255),4,b
 36191  001E84                     l2317:
 36192                           
 36193                           ; BSR set to: 0
 36194                           ;drum.c: 64: }
 36195                           ;drum.c: 65: if(((drum_button_state_now) & 0x20) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW6) {
 36196                           
 36197                           ; BSR set to: 0
 36198  001E84  BBEE               	btfsc	_drum_button_state_now& (0+255),5,b
 36199                           
 36200                           ; BSR set to: 0
 36201  001E86  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36202  001E88  D033               	goto	l2322
 36203                           
 36204                           ; BSR set to: 0
 36205  001E8A  BBEC               	btfsc	_drum& (0+255),5,b
 36206  001E8C  D031               	goto	l2322
 36207                           
 36208                           ; BSR set to: 0
 36209                           ;drum.c: 66: drum.SW6 = 1;
 36210  001E8E  8BEC               	bsf	_drum& (0+255),5,b
 36211                           
 36212                           ;drum.c: 67: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[5],velocity);}
 36213  001E90  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36214  001E92  D007               	goto	l2323
 36215                           
 36216                           ; BSR set to: 0
 36217  001E94  C1E4  F06E         	movff	_DRUM_NOTE+5,noteOnDrum@pitch
 36218  001E98  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36219  001E9C  51FE               	movf	_drumchannel& (0+255),w,b
 36220  001E9E  EC3E  F046         	call	_noteOnDrum
 36221  001EA2                     l2323:
 36222                           
 36223                           ;drum.c: 68: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5], 
      +                          127);}
 36224  001EA2  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36225  001EA4  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36226  001EA6  D008               	goto	l2324
 36227  001EA8  C1DC  F06B         	movff	_DRUM_CC+5,controlChange@controllerNumber
 36228  001EAC  0E7F               	movlw	127
 36229  001EAE  0100               	movlb	0	; () banked
 36230  001EB0  6F6C               	movwf	controlChange@value& (0+255),b
 36231  001EB2  51F6               	movf	_channel& (0+255),w,b
 36232  001EB4  EC0D  F049         	call	_controlChange
 36233  001EB8                     l2324:
 36234                           
 36235                           ;drum.c: 69: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 0) {controlChan
      +                          ge(channel,DRUM_CC[5], 127);}
 36236  001EB8  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36237  001EBA  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36238  001EBC  D00A               	goto	l2325
 36239  001EBE  0100               	movlb	0	; () banked
 36240  001EC0  B3E3               	btfsc	_toggle_state& (0+255),1,b
 36241  001EC2  D007               	goto	l2325
 36242                           
 36243                           ; BSR set to: 0
 36244  001EC4  C1DC  F06B         	movff	_DRUM_CC+5,controlChange@controllerNumber
 36245  001EC8  0E7F               	movlw	127
 36246  001ECA  6F6C               	movwf	controlChange@value& (0+255),b
 36247  001ECC  51F6               	movf	_channel& (0+255),w,b
 36248  001ECE  EC0D  F049         	call	_controlChange
 36249  001ED2                     l2325:
 36250                           
 36251                           ;drum.c: 70: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 1) {controlChan
      +                          ge(channel,DRUM_CC[5], 0);}
 36252  001ED2  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36253  001ED4  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36254  001ED6  D00A               	goto	l2326
 36255  001ED8  0100               	movlb	0	; () banked
 36256  001EDA  A3E3               	btfss	_toggle_state& (0+255),1,b
 36257  001EDC  D007               	goto	l2326
 36258                           
 36259                           ; BSR set to: 0
 36260  001EDE  C1DC  F06B         	movff	_DRUM_CC+5,controlChange@controllerNumber
 36261  001EE2  0E00               	movlw	0
 36262  001EE4  6F6C               	movwf	controlChange@value& (0+255),b
 36263  001EE6  51F6               	movf	_channel& (0+255),w,b
 36264  001EE8  EC0D  F049         	call	_controlChange
 36265  001EEC                     l2326:
 36266                           
 36267                           ;drum.c: 71: toggle_state.T6 ^= 1;
 36268  001EEC  0100               	movlb	0	; () banked
 36269  001EEE  7BE3               	btg	_toggle_state& (0+255),5,b
 36270  001EF0                     l2322:
 36271                           
 36272                           ; BSR set to: 0
 36273                           ;drum.c: 72: }
 36274                           ;drum.c: 73: if(((drum_button_state_now) & 0x40) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW7) {
 36275                           
 36276                           ; BSR set to: 0
 36277  001EF0  BDEE               	btfsc	_drum_button_state_now& (0+255),6,b
 36278                           
 36279                           ; BSR set to: 0
 36280  001EF2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36281  001EF4  D033               	goto	l2327
 36282                           
 36283                           ; BSR set to: 0
 36284  001EF6  BDEC               	btfsc	_drum& (0+255),6,b
 36285  001EF8  D031               	goto	l2327
 36286                           
 36287                           ; BSR set to: 0
 36288                           ;drum.c: 74: drum.SW7 = 1;
 36289  001EFA  8DEC               	bsf	_drum& (0+255),6,b
 36290                           
 36291                           ;drum.c: 75: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[6],velocity);}
 36292  001EFC  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36293  001EFE  D007               	goto	l2328
 36294                           
 36295                           ; BSR set to: 0
 36296  001F00  C1E5  F06E         	movff	_DRUM_NOTE+6,noteOnDrum@pitch
 36297  001F04  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36298  001F08  51FE               	movf	_drumchannel& (0+255),w,b
 36299  001F0A  EC3E  F046         	call	_noteOnDrum
 36300  001F0E                     l2328:
 36301                           
 36302                           ;drum.c: 76: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6], 
      +                          127);}
 36303  001F0E  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36304  001F10  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36305  001F12  D008               	goto	l2329
 36306  001F14  C1DD  F06B         	movff	_DRUM_CC+6,controlChange@controllerNumber
 36307  001F18  0E7F               	movlw	127
 36308  001F1A  0100               	movlb	0	; () banked
 36309  001F1C  6F6C               	movwf	controlChange@value& (0+255),b
 36310  001F1E  51F6               	movf	_channel& (0+255),w,b
 36311  001F20  EC0D  F049         	call	_controlChange
 36312  001F24                     l2329:
 36313                           
 36314                           ;drum.c: 77: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 0) {controlChan
      +                          ge(channel,DRUM_CC[6], 127);}
 36315  001F24  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36316  001F26  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36317  001F28  D00A               	goto	l2330
 36318  001F2A  0100               	movlb	0	; () banked
 36319  001F2C  B5E3               	btfsc	_toggle_state& (0+255),2,b
 36320  001F2E  D007               	goto	l2330
 36321                           
 36322                           ; BSR set to: 0
 36323  001F30  C1DD  F06B         	movff	_DRUM_CC+6,controlChange@controllerNumber
 36324  001F34  0E7F               	movlw	127
 36325  001F36  6F6C               	movwf	controlChange@value& (0+255),b
 36326  001F38  51F6               	movf	_channel& (0+255),w,b
 36327  001F3A  EC0D  F049         	call	_controlChange
 36328  001F3E                     l2330:
 36329                           
 36330                           ;drum.c: 78: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 1) {controlChan
      +                          ge(channel,DRUM_CC[6], 0);}
 36331  001F3E  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36332  001F40  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36333  001F42  D00A               	goto	l2331
 36334  001F44  0100               	movlb	0	; () banked
 36335  001F46  A5E3               	btfss	_toggle_state& (0+255),2,b
 36336  001F48  D007               	goto	l2331
 36337                           
 36338                           ; BSR set to: 0
 36339  001F4A  C1DD  F06B         	movff	_DRUM_CC+6,controlChange@controllerNumber
 36340  001F4E  0E00               	movlw	0
 36341  001F50  6F6C               	movwf	controlChange@value& (0+255),b
 36342  001F52  51F6               	movf	_channel& (0+255),w,b
 36343  001F54  EC0D  F049         	call	_controlChange
 36344  001F58                     l2331:
 36345                           
 36346                           ;drum.c: 79: toggle_state.T7 ^= 1;
 36347  001F58  0100               	movlb	0	; () banked
 36348  001F5A  7DE3               	btg	_toggle_state& (0+255),6,b
 36349  001F5C                     l2327:
 36350                           
 36351                           ; BSR set to: 0
 36352                           ;drum.c: 80: }
 36353                           ;drum.c: 81: if(((drum_button_state_now) & 0x80) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW8) {
 36354                           
 36355                           ; BSR set to: 0
 36356  001F5C  BFEE               	btfsc	_drum_button_state_now& (0+255),7,b
 36357                           
 36358                           ; BSR set to: 0
 36359  001F5E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 36360  001F60  D033               	goto	l2332
 36361                           
 36362                           ; BSR set to: 0
 36363  001F62  BFEC               	btfsc	_drum& (0+255),7,b
 36364  001F64  D031               	goto	l2332
 36365                           
 36366                           ; BSR set to: 0
 36367                           ;drum.c: 82: drum.SW8 = 1;
 36368  001F66  8FEC               	bsf	_drum& (0+255),7,b
 36369                           
 36370                           ;drum.c: 83: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[7],velocity);}
 36371  001F68  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36372  001F6A  D007               	goto	l2333
 36373                           
 36374                           ; BSR set to: 0
 36375  001F6C  C1E6  F06E         	movff	_DRUM_NOTE+7,noteOnDrum@pitch
 36376  001F70  C0FD  F06F         	movff	_velocity,noteOnDrum@velocity
 36377  001F74  51FE               	movf	_drumchannel& (0+255),w,b
 36378  001F76  EC3E  F046         	call	_noteOnDrum
 36379  001F7A                     l2333:
 36380                           
 36381                           ;drum.c: 84: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7], 
      +                          127);}
 36382  001F7A  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36383  001F7C  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36384  001F7E  D008               	goto	l2334
 36385  001F80  C1DE  F06B         	movff	_DRUM_CC+7,controlChange@controllerNumber
 36386  001F84  0E7F               	movlw	127
 36387  001F86  0100               	movlb	0	; () banked
 36388  001F88  6F6C               	movwf	controlChange@value& (0+255),b
 36389  001F8A  51F6               	movf	_channel& (0+255),w,b
 36390  001F8C  EC0D  F049         	call	_controlChange
 36391  001F90                     l2334:
 36392                           
 36393                           ;drum.c: 85: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 0) {controlChan
      +                          ge(channel,DRUM_CC[7], 127);}
 36394  001F90  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36395  001F92  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36396  001F94  D00A               	goto	l2335
 36397  001F96  0100               	movlb	0	; () banked
 36398  001F98  B7E3               	btfsc	_toggle_state& (0+255),3,b
 36399  001F9A  D007               	goto	l2335
 36400                           
 36401                           ; BSR set to: 0
 36402  001F9C  C1DE  F06B         	movff	_DRUM_CC+7,controlChange@controllerNumber
 36403  001FA0  0E7F               	movlw	127
 36404  001FA2  6F6C               	movwf	controlChange@value& (0+255),b
 36405  001FA4  51F6               	movf	_channel& (0+255),w,b
 36406  001FA6  EC0D  F049         	call	_controlChange
 36407  001FAA                     l2335:
 36408                           
 36409                           ;drum.c: 86: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 1) {controlChan
      +                          ge(channel,DRUM_CC[7], 0);}
 36410  001FAA  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36411  001FAC  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36412  001FAE  D00A               	goto	l2336
 36413  001FB0  0100               	movlb	0	; () banked
 36414  001FB2  A7E3               	btfss	_toggle_state& (0+255),3,b
 36415  001FB4  D007               	goto	l2336
 36416                           
 36417                           ; BSR set to: 0
 36418  001FB6  C1DE  F06B         	movff	_DRUM_CC+7,controlChange@controllerNumber
 36419  001FBA  0E00               	movlw	0
 36420  001FBC  6F6C               	movwf	controlChange@value& (0+255),b
 36421  001FBE  51F6               	movf	_channel& (0+255),w,b
 36422  001FC0  EC0D  F049         	call	_controlChange
 36423  001FC4                     l2336:
 36424                           
 36425                           ;drum.c: 87: toggle_state.T8 ^= 1;
 36426  001FC4  0100               	movlb	0	; () banked
 36427  001FC6  7FE3               	btg	_toggle_state& (0+255),7,b
 36428  001FC8                     l2332:
 36429                           
 36430                           ; BSR set to: 0
 36431                           ;drum.c: 88: }
 36432                           ;drum.c: 91: if(((drum_button_state_last & 0x01)) && ((drum_button_state_now & 0x01) == 
      +                          0) && drum.SW1) {
 36433                           
 36434                           ; BSR set to: 0
 36435  001FC8  B1ED               	btfsc	_drum_button_state_last& (0+255),0,b
 36436                           
 36437                           ; BSR set to: 0
 36438  001FCA  B1EE               	btfsc	_drum_button_state_now& (0+255),0,b
 36439  001FCC  D017               	goto	l2339
 36440                           
 36441                           ; BSR set to: 0
 36442  001FCE  A1EC               	btfss	_drum& (0+255),0,b
 36443  001FD0  D015               	goto	l2339
 36444                           
 36445                           ; BSR set to: 0
 36446                           ;drum.c: 92: drum.SW1 = 0;
 36447  001FD2  91EC               	bcf	_drum& (0+255),0,b
 36448                           
 36449                           ;drum.c: 93: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[0],velocity);}
 36450  001FD4  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36451  001FD6  D007               	goto	l2338
 36452                           
 36453                           ; BSR set to: 0
 36454  001FD8  C1DF  F06B         	movff	_DRUM_NOTE,noteOffDrum@pitch
 36455  001FDC  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36456  001FE0  51FE               	movf	_drumchannel& (0+255),w,b
 36457  001FE2  ECBB  F048         	call	_noteOffDrum
 36458  001FE6                     l2338:
 36459                           
 36460                           ;drum.c: 94: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          0);}
 36461  001FE6  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36462  001FE8  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36463  001FEA  D008               	goto	l2339
 36464  001FEC  C1D7  F06B         	movff	_DRUM_CC,controlChange@controllerNumber
 36465  001FF0  0E00               	movlw	0
 36466  001FF2  0100               	movlb	0	; () banked
 36467  001FF4  6F6C               	movwf	controlChange@value& (0+255),b
 36468  001FF6  51F6               	movf	_channel& (0+255),w,b
 36469  001FF8  EC0D  F049         	call	_controlChange
 36470  001FFC                     l2339:
 36471                           
 36472                           ;drum.c: 95: }
 36473                           ;drum.c: 96: if(((drum_button_state_last & 0x02)) && ((drum_button_state_now & 0x02) == 
      +                          0) && drum.SW2) {
 36474  001FFC  0100               	movlb	0	; () banked
 36475  001FFE  B3ED               	btfsc	_drum_button_state_last& (0+255),1,b
 36476                           
 36477                           ; BSR set to: 0
 36478  002000  B3EE               	btfsc	_drum_button_state_now& (0+255),1,b
 36479  002002  D017               	goto	l2342
 36480                           
 36481                           ; BSR set to: 0
 36482  002004  A3EC               	btfss	_drum& (0+255),1,b
 36483  002006  D015               	goto	l2342
 36484                           
 36485                           ; BSR set to: 0
 36486                           ;drum.c: 97: drum.SW2 = 0;
 36487  002008  93EC               	bcf	_drum& (0+255),1,b
 36488                           
 36489                           ;drum.c: 98: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[1],velocity);}
 36490  00200A  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36491  00200C  D007               	goto	l2341
 36492                           
 36493                           ; BSR set to: 0
 36494  00200E  C1E0  F06B         	movff	_DRUM_NOTE+1,noteOffDrum@pitch
 36495  002012  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36496  002016  51FE               	movf	_drumchannel& (0+255),w,b
 36497  002018  ECBB  F048         	call	_noteOffDrum
 36498  00201C                     l2341:
 36499                           
 36500                           ;drum.c: 99: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          0);}
 36501  00201C  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36502  00201E  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36503  002020  D008               	goto	l2342
 36504  002022  C1D8  F06B         	movff	_DRUM_CC+1,controlChange@controllerNumber
 36505  002026  0E00               	movlw	0
 36506  002028  0100               	movlb	0	; () banked
 36507  00202A  6F6C               	movwf	controlChange@value& (0+255),b
 36508  00202C  51F6               	movf	_channel& (0+255),w,b
 36509  00202E  EC0D  F049         	call	_controlChange
 36510  002032                     l2342:
 36511                           
 36512                           ;drum.c: 100: }
 36513                           ;drum.c: 101: if(((drum_button_state_last & 0x04)) && ((drum_button_state_now & 0x04) ==
      +                           0) && drum.SW3) {
 36514  002032  0100               	movlb	0	; () banked
 36515  002034  B5ED               	btfsc	_drum_button_state_last& (0+255),2,b
 36516                           
 36517                           ; BSR set to: 0
 36518  002036  B5EE               	btfsc	_drum_button_state_now& (0+255),2,b
 36519  002038  D017               	goto	l2345
 36520                           
 36521                           ; BSR set to: 0
 36522  00203A  A5EC               	btfss	_drum& (0+255),2,b
 36523  00203C  D015               	goto	l2345
 36524                           
 36525                           ; BSR set to: 0
 36526                           ;drum.c: 102: drum.SW3 = 0;
 36527  00203E  95EC               	bcf	_drum& (0+255),2,b
 36528                           
 36529                           ;drum.c: 103: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[2],velocity);}
 36530  002040  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36531  002042  D007               	goto	l2344
 36532                           
 36533                           ; BSR set to: 0
 36534  002044  C1E1  F06B         	movff	_DRUM_NOTE+2,noteOffDrum@pitch
 36535  002048  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36536  00204C  51FE               	movf	_drumchannel& (0+255),w,b
 36537  00204E  ECBB  F048         	call	_noteOffDrum
 36538  002052                     l2344:
 36539                           
 36540                           ;drum.c: 104: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2],
      +                           0);}
 36541  002052  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36542  002054  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36543  002056  D008               	goto	l2345
 36544  002058  C1D9  F06B         	movff	_DRUM_CC+2,controlChange@controllerNumber
 36545  00205C  0E00               	movlw	0
 36546  00205E  0100               	movlb	0	; () banked
 36547  002060  6F6C               	movwf	controlChange@value& (0+255),b
 36548  002062  51F6               	movf	_channel& (0+255),w,b
 36549  002064  EC0D  F049         	call	_controlChange
 36550  002068                     l2345:
 36551                           
 36552                           ;drum.c: 105: }
 36553                           ;drum.c: 106: if(((drum_button_state_last & 0x08)) && ((drum_button_state_now & 0x08) ==
      +                           0) && drum.SW4) {
 36554  002068  0100               	movlb	0	; () banked
 36555  00206A  B7ED               	btfsc	_drum_button_state_last& (0+255),3,b
 36556                           
 36557                           ; BSR set to: 0
 36558  00206C  B7EE               	btfsc	_drum_button_state_now& (0+255),3,b
 36559  00206E  D017               	goto	l2348
 36560                           
 36561                           ; BSR set to: 0
 36562  002070  A7EC               	btfss	_drum& (0+255),3,b
 36563  002072  D015               	goto	l2348
 36564                           
 36565                           ; BSR set to: 0
 36566                           ;drum.c: 107: drum.SW4 = 0;
 36567  002074  97EC               	bcf	_drum& (0+255),3,b
 36568                           
 36569                           ;drum.c: 108: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[3],velocity);}
 36570  002076  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36571  002078  D007               	goto	l2347
 36572                           
 36573                           ; BSR set to: 0
 36574  00207A  C1E2  F06B         	movff	_DRUM_NOTE+3,noteOffDrum@pitch
 36575  00207E  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36576  002082  51FE               	movf	_drumchannel& (0+255),w,b
 36577  002084  ECBB  F048         	call	_noteOffDrum
 36578  002088                     l2347:
 36579                           
 36580                           ;drum.c: 109: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3],
      +                           0);}
 36581  002088  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36582  00208A  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36583  00208C  D008               	goto	l2348
 36584  00208E  C1DA  F06B         	movff	_DRUM_CC+3,controlChange@controllerNumber
 36585  002092  0E00               	movlw	0
 36586  002094  0100               	movlb	0	; () banked
 36587  002096  6F6C               	movwf	controlChange@value& (0+255),b
 36588  002098  51F6               	movf	_channel& (0+255),w,b
 36589  00209A  EC0D  F049         	call	_controlChange
 36590  00209E                     l2348:
 36591                           
 36592                           ;drum.c: 110: }
 36593                           ;drum.c: 111: if(((drum_button_state_last & 0x10)) && ((drum_button_state_now & 0x10) ==
      +                           0) && drum.SW5) {
 36594  00209E  0100               	movlb	0	; () banked
 36595  0020A0  B9ED               	btfsc	_drum_button_state_last& (0+255),4,b
 36596                           
 36597                           ; BSR set to: 0
 36598  0020A2  B9EE               	btfsc	_drum_button_state_now& (0+255),4,b
 36599  0020A4  D017               	goto	l2351
 36600                           
 36601                           ; BSR set to: 0
 36602  0020A6  A9EC               	btfss	_drum& (0+255),4,b
 36603  0020A8  D015               	goto	l2351
 36604                           
 36605                           ; BSR set to: 0
 36606                           ;drum.c: 112: drum.SW5 = 0;
 36607  0020AA  99EC               	bcf	_drum& (0+255),4,b
 36608                           
 36609                           ;drum.c: 113: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[4],velocity);}
 36610  0020AC  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36611  0020AE  D007               	goto	l2350
 36612                           
 36613                           ; BSR set to: 0
 36614  0020B0  C1E3  F06B         	movff	_DRUM_NOTE+4,noteOffDrum@pitch
 36615  0020B4  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36616  0020B8  51FE               	movf	_drumchannel& (0+255),w,b
 36617  0020BA  ECBB  F048         	call	_noteOffDrum
 36618  0020BE                     l2350:
 36619                           
 36620                           ;drum.c: 114: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4],
      +                           0);}
 36621  0020BE  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36622  0020C0  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36623  0020C2  D008               	goto	l2351
 36624  0020C4  C1DB  F06B         	movff	_DRUM_CC+4,controlChange@controllerNumber
 36625  0020C8  0E00               	movlw	0
 36626  0020CA  0100               	movlb	0	; () banked
 36627  0020CC  6F6C               	movwf	controlChange@value& (0+255),b
 36628  0020CE  51F6               	movf	_channel& (0+255),w,b
 36629  0020D0  EC0D  F049         	call	_controlChange
 36630  0020D4                     l2351:
 36631                           
 36632                           ;drum.c: 115: }
 36633                           ;drum.c: 116: if(((drum_button_state_last & 0x20)) && ((drum_button_state_now & 0x20) ==
      +                           0) && drum.SW6) {
 36634  0020D4  0100               	movlb	0	; () banked
 36635  0020D6  BBED               	btfsc	_drum_button_state_last& (0+255),5,b
 36636                           
 36637                           ; BSR set to: 0
 36638  0020D8  BBEE               	btfsc	_drum_button_state_now& (0+255),5,b
 36639  0020DA  D017               	goto	l2354
 36640                           
 36641                           ; BSR set to: 0
 36642  0020DC  ABEC               	btfss	_drum& (0+255),5,b
 36643  0020DE  D015               	goto	l2354
 36644                           
 36645                           ; BSR set to: 0
 36646                           ;drum.c: 117: drum.SW6 = 0;
 36647  0020E0  9BEC               	bcf	_drum& (0+255),5,b
 36648                           
 36649                           ;drum.c: 118: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[5],velocity);}
 36650  0020E2  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36651  0020E4  D007               	goto	l2353
 36652                           
 36653                           ; BSR set to: 0
 36654  0020E6  C1E4  F06B         	movff	_DRUM_NOTE+5,noteOffDrum@pitch
 36655  0020EA  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36656  0020EE  51FE               	movf	_drumchannel& (0+255),w,b
 36657  0020F0  ECBB  F048         	call	_noteOffDrum
 36658  0020F4                     l2353:
 36659                           
 36660                           ;drum.c: 119: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5],
      +                           0);}
 36661  0020F4  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36662  0020F6  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36663  0020F8  D008               	goto	l2354
 36664  0020FA  C1DC  F06B         	movff	_DRUM_CC+5,controlChange@controllerNumber
 36665  0020FE  0E00               	movlw	0
 36666  002100  0100               	movlb	0	; () banked
 36667  002102  6F6C               	movwf	controlChange@value& (0+255),b
 36668  002104  51F6               	movf	_channel& (0+255),w,b
 36669  002106  EC0D  F049         	call	_controlChange
 36670  00210A                     l2354:
 36671                           
 36672                           ;drum.c: 120: }
 36673                           ;drum.c: 121: if(((drum_button_state_last & 0x40)) && ((drum_button_state_now & 0x40) ==
      +                           0) && drum.SW7) {
 36674  00210A  0100               	movlb	0	; () banked
 36675  00210C  BDED               	btfsc	_drum_button_state_last& (0+255),6,b
 36676                           
 36677                           ; BSR set to: 0
 36678  00210E  BDEE               	btfsc	_drum_button_state_now& (0+255),6,b
 36679  002110  D017               	goto	l2357
 36680                           
 36681                           ; BSR set to: 0
 36682  002112  ADEC               	btfss	_drum& (0+255),6,b
 36683  002114  D015               	goto	l2357
 36684                           
 36685                           ; BSR set to: 0
 36686                           ;drum.c: 122: drum.SW7 = 0;
 36687  002116  9DEC               	bcf	_drum& (0+255),6,b
 36688                           
 36689                           ;drum.c: 123: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[6],velocity);}
 36690  002118  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36691  00211A  D007               	goto	l2356
 36692                           
 36693                           ; BSR set to: 0
 36694  00211C  C1E5  F06B         	movff	_DRUM_NOTE+6,noteOffDrum@pitch
 36695  002120  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36696  002124  51FE               	movf	_drumchannel& (0+255),w,b
 36697  002126  ECBB  F048         	call	_noteOffDrum
 36698  00212A                     l2356:
 36699                           
 36700                           ;drum.c: 124: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6],
      +                           0);}
 36701  00212A  A632               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36702  00212C  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36703  00212E  D008               	goto	l2357
 36704  002130  C1DD  F06B         	movff	_DRUM_CC+6,controlChange@controllerNumber
 36705  002134  0E00               	movlw	0
 36706  002136  0100               	movlb	0	; () banked
 36707  002138  6F6C               	movwf	controlChange@value& (0+255),b
 36708  00213A  51F6               	movf	_channel& (0+255),w,b
 36709  00213C  EC0D  F049         	call	_controlChange
 36710  002140                     l2357:
 36711                           
 36712                           ;drum.c: 125: }
 36713                           ;drum.c: 126: if(((drum_button_state_last & 0x80)) && ((drum_button_state_now & 0x80) ==
      +                           0) && drum.SW8) {
 36714  002140  0100               	movlb	0	; () banked
 36715  002142  AFED               	btfss	_drum_button_state_last& (0+255),7,b
 36716  002144  0012               	return	
 36717                           
 36718                           ; BSR set to: 0
 36719  002146  BFEE               	btfsc	_drum_button_state_now& (0+255),7,b
 36720  002148  0012               	return	
 36721                           
 36722                           ; BSR set to: 0
 36723  00214A  AFEC               	btfss	_drum& (0+255),7,b
 36724  00214C  0012               	return	
 36725                           
 36726                           ; BSR set to: 0
 36727                           ;drum.c: 127: drum.SW8 = 0;
 36728  00214E  9FEC               	bcf	_drum& (0+255),7,b
 36729                           
 36730                           ;drum.c: 128: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[7],velocity);}
 36731  002150  B832               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36732  002152  D007               	goto	l2359
 36733                           
 36734                           ; BSR set to: 0
 36735  002154  C1E6  F06B         	movff	_DRUM_NOTE+7,noteOffDrum@pitch
 36736  002158  C0FD  F06C         	movff	_velocity,noteOffDrum@velocity
 36737  00215C  51FE               	movf	_drumchannel& (0+255),w,b
 36738  00215E  ECBB  F048         	call	_noteOffDrum
 36739  002162                     l2359:
 36740                           
 36741                           ;drum.c: 129: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7],
      +                           0);}
 36742  002162  B632               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 36743  002164  0012               	return	
 36744  002166  A832               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 36745  002168  0012               	return	
 36746  00216A  C1DE  F06B         	movff	_DRUM_CC+7,controlChange@controllerNumber
 36747  00216E  0E00               	movlw	0
 36748  002170  0100               	movlb	0	; () banked
 36749  002172  6F6C               	movwf	controlChange@value& (0+255),b
 36750  002174  51F6               	movf	_channel& (0+255),w,b
 36751  002176  EC0D  F049         	call	_controlChange
 36752  00217A  0012               	return	
 36753  00217C                     __end_of_processDrumpad:
 36754                           	opt stack 0
 36755                           tblptru	equ	0xFF8
 36756                           tblptrh	equ	0xFF7
 36757                           tblptrl	equ	0xFF6
 36758                           tablat	equ	0xFF5
 36759                           prodh	equ	0xFF4
 36760                           prodl	equ	0xFF3
 36761                           intcon	equ	0xFF2
 36762                           intcon2	equ	0xFF1
 36763                           postinc0	equ	0xFEE
 36764                           wreg	equ	0xFE8
 36765                           indf1	equ	0xFE7
 36766                           postdec1	equ	0xFE5
 36767                           fsr1h	equ	0xFE2
 36768                           fsr1l	equ	0xFE1
 36769                           indf2	equ	0xFDF
 36770                           postinc2	equ	0xFDE
 36771                           plusw2	equ	0xFDB
 36772                           fsr2h	equ	0xFDA
 36773                           fsr2l	equ	0xFD9
 36774                           status	equ	0xFD8
 36775                           
 36776 ;; *************** function _noteOnDrum *****************
 36777 ;; Defined at:
 36778 ;;		line 120 in file "midi.c"
 36779 ;; Parameters:    Size  Location     Type
 36780 ;;  channel         1    wreg     unsigned char 
 36781 ;;  pitch           1   14[BANK0 ] unsigned char 
 36782 ;;  velocity        1   15[BANK0 ] unsigned char 
 36783 ;; Auto vars:     Size  Location     Type
 36784 ;;  channel         1   16[BANK0 ] unsigned char 
 36785 ;; Return value:  Size  Location     Type
 36786 ;;                  1    wreg      void 
 36787 ;; Registers used:
 36788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36789 ;; Tracked objects:
 36790 ;;		On entry : 0/0
 36791 ;;		On exit  : 0/0
 36792 ;;		Unchanged: 0/0
 36793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36794 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36797 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36798 ;;Total ram usage:        3 bytes
 36799 ;; Hardware stack levels used:    1
 36800 ;; Hardware stack levels required when called:    7
 36801 ;; This function calls:
 36802 ;;		_noteOff
 36803 ;;		_sendOut
 36804 ;;		_sendUSB
 36805 ;; This function is called by:
 36806 ;;		_processDrumpad
 36807 ;; This function uses a non-reentrant model
 36808 ;;
 36809                           
 36810                           	psect	text107
 36811  008C7C                     __ptext107:
 36812                           	opt stack 0
 36813  008C7C                     _noteOnDrum:
 36814                           	opt stack 21
 36815                           
 36816                           ;incstack = 0
 36817                           ;noteOnDrum@channel stored from wreg
 36818  008C7C  0100               	movlb	0	; () banked
 36819  008C7E  6F70               	movwf	noteOnDrum@channel& (0+255),b
 36820                           
 36821                           ;midi.c: 122: noteNumber = pitch;
 36822  008C80  C06E  F0F4         	movff	noteOnDrum@pitch,_noteNumber
 36823                           
 36824                           ;midi.c: 123: statusByte = channel | note_on;
 36825  008C84  0100               	movlb	0	; () banked
 36826  008C86  5170               	movf	noteOnDrum@channel& (0+255),w,b
 36827  008C88  0990               	iorlw	144
 36828  008C8A  6FF5               	movwf	_statusByte& (0+255),b
 36829                           
 36830                           ; BSR set to: 0
 36831                           ;midi.c: 125: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 36832  008C8C  516F               	movf	noteOnDrum@velocity& (0+255),w,b
 36833  008C8E  A4D8               	btfss	status,2,c
 36834  008C90  D008               	goto	l459
 36835                           
 36836                           ; BSR set to: 0
 36837  008C92  C06E  F06B         	movff	noteOnDrum@pitch,noteOff@pitch
 36838  008C96  C06F  F06C         	movff	noteOnDrum@velocity,noteOff@velocity
 36839  008C9A  5170               	movf	noteOnDrum@channel& (0+255),w,b
 36840  008C9C  ECC9  F047         	call	_noteOff
 36841  008CA0  0012               	return	
 36842  008CA2                     l459:
 36843                           
 36844                           ;midi.c: 128: sendUSB(statusByte, noteNumber, velocity);
 36845  008CA2  C0F4  F060         	movff	_noteNumber,sendUSB@message2
 36846  008CA6  C06F  F061         	movff	noteOnDrum@velocity,sendUSB@message3
 36847  008CAA  0100               	movlb	0	; () banked
 36848  008CAC  51F5               	movf	_statusByte& (0+255),w,b
 36849  008CAE  EC91  F039         	call	_sendUSB
 36850                           
 36851                           ;midi.c: 131: if(velocity > 0) {
 36852  008CB2  0100               	movlb	0	; () banked
 36853  008CB4  516F               	movf	noteOnDrum@velocity& (0+255),w,b
 36854  008CB6  B4D8               	btfsc	status,2,c
 36855  008CB8  0012               	return	
 36856                           
 36857                           ; BSR set to: 0
 36858                           ;midi.c: 132: sendOut(statusByte);
 36859  008CBA  51F5               	movf	_statusByte& (0+255),w,b
 36860  008CBC  EC89  F04A         	call	_sendOut
 36861                           
 36862                           ;midi.c: 133: sendOut(noteNumber);
 36863  008CC0  0100               	movlb	0	; () banked
 36864  008CC2  51F4               	movf	_noteNumber& (0+255),w,b
 36865  008CC4  EC89  F04A         	call	_sendOut
 36866                           
 36867                           ;midi.c: 134: sendOut(velocity);
 36868  008CC8  0100               	movlb	0	; () banked
 36869  008CCA  516F               	movf	noteOnDrum@velocity& (0+255),w,b
 36870  008CCC  EC89  F04A         	call	_sendOut
 36871  008CD0  0012               	return	
 36872  008CD2                     __end_of_noteOnDrum:
 36873                           	opt stack 0
 36874                           tblptru	equ	0xFF8
 36875                           tblptrh	equ	0xFF7
 36876                           tblptrl	equ	0xFF6
 36877                           tablat	equ	0xFF5
 36878                           prodh	equ	0xFF4
 36879                           prodl	equ	0xFF3
 36880                           intcon	equ	0xFF2
 36881                           intcon2	equ	0xFF1
 36882                           postinc0	equ	0xFEE
 36883                           wreg	equ	0xFE8
 36884                           indf1	equ	0xFE7
 36885                           postdec1	equ	0xFE5
 36886                           fsr1h	equ	0xFE2
 36887                           fsr1l	equ	0xFE1
 36888                           indf2	equ	0xFDF
 36889                           postinc2	equ	0xFDE
 36890                           plusw2	equ	0xFDB
 36891                           fsr2h	equ	0xFDA
 36892                           fsr2l	equ	0xFD9
 36893                           status	equ	0xFD8
 36894                           
 36895 ;; *************** function _noteOffDrum *****************
 36896 ;; Defined at:
 36897 ;;		line 105 in file "midi.c"
 36898 ;; Parameters:    Size  Location     Type
 36899 ;;  channel         1    wreg     unsigned char 
 36900 ;;  pitch           1   11[BANK0 ] unsigned char 
 36901 ;;  velocity        1   12[BANK0 ] unsigned char 
 36902 ;; Auto vars:     Size  Location     Type
 36903 ;;  channel         1   13[BANK0 ] unsigned char 
 36904 ;; Return value:  Size  Location     Type
 36905 ;;                  1    wreg      void 
 36906 ;; Registers used:
 36907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36908 ;; Tracked objects:
 36909 ;;		On entry : 0/0
 36910 ;;		On exit  : 0/0
 36911 ;;		Unchanged: 0/0
 36912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36913 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36916 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36917 ;;Total ram usage:        3 bytes
 36918 ;; Hardware stack levels used:    1
 36919 ;; Hardware stack levels required when called:    6
 36920 ;; This function calls:
 36921 ;;		_sendOut
 36922 ;;		_sendUSB
 36923 ;; This function is called by:
 36924 ;;		_processDrumpad
 36925 ;; This function uses a non-reentrant model
 36926 ;;
 36927                           
 36928                           	psect	text108
 36929  009176                     __ptext108:
 36930                           	opt stack 0
 36931  009176                     _noteOffDrum:
 36932                           	opt stack 22
 36933                           
 36934                           ;incstack = 0
 36935                           ;noteOffDrum@channel stored from wreg
 36936  009176  0100               	movlb	0	; () banked
 36937  009178  6F6D               	movwf	noteOffDrum@channel& (0+255),b
 36938                           
 36939                           ;midi.c: 107: noteNumber = pitch;
 36940  00917A  C06B  F0F4         	movff	noteOffDrum@pitch,_noteNumber
 36941                           
 36942                           ;midi.c: 108: statusByte = channel | note_off;
 36943  00917E  0100               	movlb	0	; () banked
 36944  009180  516D               	movf	noteOffDrum@channel& (0+255),w,b
 36945  009182  0980               	iorlw	128
 36946  009184  6FF5               	movwf	_statusByte& (0+255),b
 36947                           
 36948                           ; BSR set to: 0
 36949                           ;midi.c: 111: sendUSB(statusByte, noteNumber, velocity);
 36950  009186  C0F4  F060         	movff	_noteNumber,sendUSB@message2
 36951  00918A  C06C  F061         	movff	noteOffDrum@velocity,sendUSB@message3
 36952  00918E  51F5               	movf	_statusByte& (0+255),w,b
 36953  009190  EC91  F039         	call	_sendUSB
 36954                           
 36955                           ;midi.c: 114: sendOut(statusByte);
 36956  009194  0100               	movlb	0	; () banked
 36957  009196  51F5               	movf	_statusByte& (0+255),w,b
 36958  009198  EC89  F04A         	call	_sendOut
 36959                           
 36960                           ;midi.c: 115: sendOut(noteNumber);
 36961  00919C  0100               	movlb	0	; () banked
 36962  00919E  51F4               	movf	_noteNumber& (0+255),w,b
 36963  0091A0  EC89  F04A         	call	_sendOut
 36964                           
 36965                           ;midi.c: 116: sendOut(velocity);
 36966  0091A4  0100               	movlb	0	; () banked
 36967  0091A6  516C               	movf	noteOffDrum@velocity& (0+255),w,b
 36968  0091A8  EC89  F04A         	call	_sendOut
 36969  0091AC  0012               	return		;funcret
 36970  0091AE                     __end_of_noteOffDrum:
 36971                           	opt stack 0
 36972                           tblptru	equ	0xFF8
 36973                           tblptrh	equ	0xFF7
 36974                           tblptrl	equ	0xFF6
 36975                           tablat	equ	0xFF5
 36976                           prodh	equ	0xFF4
 36977                           prodl	equ	0xFF3
 36978                           intcon	equ	0xFF2
 36979                           intcon2	equ	0xFF1
 36980                           postinc0	equ	0xFEE
 36981                           wreg	equ	0xFE8
 36982                           indf1	equ	0xFE7
 36983                           postdec1	equ	0xFE5
 36984                           fsr1h	equ	0xFE2
 36985                           fsr1l	equ	0xFE1
 36986                           indf2	equ	0xFDF
 36987                           postinc2	equ	0xFDE
 36988                           plusw2	equ	0xFDB
 36989                           fsr2h	equ	0xFDA
 36990                           fsr2l	equ	0xFD9
 36991                           status	equ	0xFD8
 36992                           
 36993 ;; *************** function _keyboardTranspose *****************
 36994 ;; Defined at:
 36995 ;;		line 28 in file "octave.c"
 36996 ;; Parameters:    Size  Location     Type
 36997 ;;		None
 36998 ;; Auto vars:     Size  Location     Type
 36999 ;;		None
 37000 ;; Return value:  Size  Location     Type
 37001 ;;                  1    wreg      void 
 37002 ;; Registers used:
 37003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37004 ;; Tracked objects:
 37005 ;;		On entry : 0/0
 37006 ;;		On exit  : 0/0
 37007 ;;		Unchanged: 0/0
 37008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37013 ;;Total ram usage:        0 bytes
 37014 ;; Hardware stack levels used:    1
 37015 ;; Hardware stack levels required when called:    8
 37016 ;; This function calls:
 37017 ;;		_key_press_release_note_off
 37018 ;;		_printThisNumber
 37019 ;;		_wait_one_pulse
 37020 ;; This function is called by:
 37021 ;;		_digitalInputs
 37022 ;; This function uses a non-reentrant model
 37023 ;;
 37024                           
 37025                           	psect	text109
 37026  004440                     __ptext109:
 37027                           	opt stack 0
 37028  004440                     _keyboardTranspose:
 37029                           	opt stack 21
 37030                           
 37031                           ;octave.c: 30: static signed char semitone_temp;
 37032                           ;octave.c: 31: static __bit keyPress;
 37033                           ;octave.c: 33: if(button_state_now == (0x08000000 | 0x00000001))
 37034                           
 37035                           ;incstack = 0
 37036  004440  0100               	movlb	0	; () banked
 37037  004442  05D8               	decf	_button_state_now& (0+255),w,b
 37038  004444  E109               	bnz	l22049
 37039  004446  0E08               	movlw	8
 37040  004448  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37041  00444A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37042  00444C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37043  00444E  A4D8               	btfss	status,2,c
 37044  004450  D003               	goto	l2719
 37045                           
 37046                           ; BSR set to: 0
 37047                           ;octave.c: 34: {
 37048                           ;octave.c: 35: semitone_temp = -12;
 37049  004452  0EF4               	movlw	244
 37050  004454  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37051                           
 37052                           ; BSR set to: 0
 37053                           ;octave.c: 36: keyPress = 1;
 37054  004456  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37055  004458                     l2719:
 37056  004458                     l22049:
 37057                           
 37058                           ; BSR set to: 0
 37059                           ;octave.c: 37: }
 37060                           ;octave.c: 38: if(button_state_now == (0x08000000 | 0x00000002))
 37061  004458  0E02               	movlw	2
 37062  00445A  19D8               	xorwf	_button_state_now& (0+255),w,b
 37063  00445C  E109               	bnz	l22055
 37064  00445E  0E08               	movlw	8
 37065  004460  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37066  004462  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37067  004464  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37068  004466  A4D8               	btfss	status,2,c
 37069  004468  D003               	goto	l2720
 37070                           
 37071                           ; BSR set to: 0
 37072                           ;octave.c: 39: {
 37073                           ;octave.c: 40: semitone_temp = -11;
 37074  00446A  0EF5               	movlw	245
 37075  00446C  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37076                           
 37077                           ; BSR set to: 0
 37078                           ;octave.c: 41: keyPress = 1;
 37079  00446E  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37080  004470                     l2720:
 37081  004470                     l22055:
 37082                           
 37083                           ; BSR set to: 0
 37084                           ;octave.c: 42: }
 37085                           ;octave.c: 43: if(button_state_now == (0x08000000 | 0x00000004))
 37086  004470  0E04               	movlw	4
 37087  004472  19D8               	xorwf	_button_state_now& (0+255),w,b
 37088  004474  E109               	bnz	l22061
 37089  004476  0E08               	movlw	8
 37090  004478  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37091  00447A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37092  00447C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37093  00447E  A4D8               	btfss	status,2,c
 37094  004480  D003               	goto	l2721
 37095                           
 37096                           ; BSR set to: 0
 37097                           ;octave.c: 44: {
 37098                           ;octave.c: 45: semitone_temp = -10;
 37099  004482  0EF6               	movlw	246
 37100  004484  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37101                           
 37102                           ; BSR set to: 0
 37103                           ;octave.c: 46: keyPress = 1;
 37104  004486  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37105  004488                     l2721:
 37106  004488                     l22061:
 37107                           
 37108                           ; BSR set to: 0
 37109                           ;octave.c: 47: }
 37110                           ;octave.c: 48: if(button_state_now == (0x08000000 | 0x00000008))
 37111  004488  0E08               	movlw	8
 37112  00448A  19D8               	xorwf	_button_state_now& (0+255),w,b
 37113  00448C  E109               	bnz	l22067
 37114  00448E  0E08               	movlw	8
 37115  004490  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37116  004492  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37117  004494  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37118  004496  A4D8               	btfss	status,2,c
 37119  004498  D003               	goto	l2722
 37120                           
 37121                           ; BSR set to: 0
 37122                           ;octave.c: 49: {
 37123                           ;octave.c: 50: semitone_temp = -9;
 37124  00449A  0EF7               	movlw	247
 37125  00449C  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37126                           
 37127                           ; BSR set to: 0
 37128                           ;octave.c: 51: keyPress = 1;
 37129  00449E  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37130  0044A0                     l2722:
 37131  0044A0                     l22067:
 37132                           
 37133                           ; BSR set to: 0
 37134                           ;octave.c: 52: }
 37135                           ;octave.c: 53: if(button_state_now == (0x08000000 | 0x00000010))
 37136  0044A0  0E10               	movlw	16
 37137  0044A2  19D8               	xorwf	_button_state_now& (0+255),w,b
 37138  0044A4  E109               	bnz	l22073
 37139  0044A6  0E08               	movlw	8
 37140  0044A8  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37141  0044AA  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37142  0044AC  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37143  0044AE  A4D8               	btfss	status,2,c
 37144  0044B0  D003               	goto	l2723
 37145                           
 37146                           ; BSR set to: 0
 37147                           ;octave.c: 54: {
 37148                           ;octave.c: 55: semitone_temp = -8;
 37149  0044B2  0EF8               	movlw	248
 37150  0044B4  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37151                           
 37152                           ; BSR set to: 0
 37153                           ;octave.c: 56: keyPress = 1;
 37154  0044B6  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37155  0044B8                     l2723:
 37156  0044B8                     l22073:
 37157                           
 37158                           ; BSR set to: 0
 37159                           ;octave.c: 57: }
 37160                           ;octave.c: 58: if(button_state_now == (0x08000000 | 0x00000020))
 37161  0044B8  0E20               	movlw	32
 37162  0044BA  19D8               	xorwf	_button_state_now& (0+255),w,b
 37163  0044BC  E109               	bnz	l22079
 37164  0044BE  0E08               	movlw	8
 37165  0044C0  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37166  0044C2  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37167  0044C4  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37168  0044C6  A4D8               	btfss	status,2,c
 37169  0044C8  D003               	goto	l2724
 37170                           
 37171                           ; BSR set to: 0
 37172                           ;octave.c: 59: {
 37173                           ;octave.c: 60: semitone_temp = -7;
 37174  0044CA  0EF9               	movlw	249
 37175  0044CC  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37176                           
 37177                           ; BSR set to: 0
 37178                           ;octave.c: 61: keyPress = 1;
 37179  0044CE  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37180  0044D0                     l2724:
 37181  0044D0                     l22079:
 37182                           
 37183                           ; BSR set to: 0
 37184                           ;octave.c: 62: }
 37185                           ;octave.c: 63: if(button_state_now == (0x08000000 | 0x00000040))
 37186  0044D0  0E40               	movlw	64
 37187  0044D2  19D8               	xorwf	_button_state_now& (0+255),w,b
 37188  0044D4  E109               	bnz	l22085
 37189  0044D6  0E08               	movlw	8
 37190  0044D8  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37191  0044DA  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37192  0044DC  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37193  0044DE  A4D8               	btfss	status,2,c
 37194  0044E0  D003               	goto	l2725
 37195                           
 37196                           ; BSR set to: 0
 37197                           ;octave.c: 64: {
 37198                           ;octave.c: 65: semitone_temp = -6;
 37199  0044E2  0EFA               	movlw	250
 37200  0044E4  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37201                           
 37202                           ; BSR set to: 0
 37203                           ;octave.c: 66: keyPress = 1;
 37204  0044E6  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37205  0044E8                     l2725:
 37206  0044E8                     l22085:
 37207                           
 37208                           ; BSR set to: 0
 37209                           ;octave.c: 67: }
 37210                           ;octave.c: 68: if(button_state_now == (0x08000000 | 0x00000080))
 37211  0044E8  0E80               	movlw	128
 37212  0044EA  19D8               	xorwf	_button_state_now& (0+255),w,b
 37213  0044EC  E109               	bnz	l22091
 37214  0044EE  0E08               	movlw	8
 37215  0044F0  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37216  0044F2  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37217  0044F4  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37218  0044F6  A4D8               	btfss	status,2,c
 37219  0044F8  D003               	goto	l2726
 37220                           
 37221                           ; BSR set to: 0
 37222                           ;octave.c: 69: {
 37223                           ;octave.c: 70: semitone_temp = -5;
 37224  0044FA  0EFB               	movlw	251
 37225  0044FC  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37226                           
 37227                           ; BSR set to: 0
 37228                           ;octave.c: 71: keyPress = 1;
 37229  0044FE  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37230  004500                     l2726:
 37231  004500                     l22091:
 37232                           
 37233                           ; BSR set to: 0
 37234                           ;octave.c: 72: }
 37235                           ;octave.c: 73: if(button_state_now == (0x08000000 | 0x00000100))
 37236  004500  05D9               	decf	(_button_state_now+1)& (0+255),w,b
 37237  004502  E109               	bnz	l22097
 37238  004504  0E08               	movlw	8
 37239  004506  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37240  004508  11D8               	iorwf	_button_state_now& (0+255),w,b
 37241  00450A  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37242  00450C  A4D8               	btfss	status,2,c
 37243  00450E  D003               	goto	l2727
 37244                           
 37245                           ; BSR set to: 0
 37246                           ;octave.c: 74: {
 37247                           ;octave.c: 75: semitone_temp = -4;
 37248  004510  0EFC               	movlw	252
 37249  004512  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37250                           
 37251                           ; BSR set to: 0
 37252                           ;octave.c: 76: keyPress = 1;
 37253  004514  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37254  004516                     l2727:
 37255  004516                     l22097:
 37256                           
 37257                           ; BSR set to: 0
 37258                           ;octave.c: 77: }
 37259                           ;octave.c: 78: if(button_state_now == (0x08000000 | 0x00000200))
 37260  004516  0E02               	movlw	2
 37261  004518  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37262  00451A  E109               	bnz	l22103
 37263  00451C  0E08               	movlw	8
 37264  00451E  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37265  004520  11D8               	iorwf	_button_state_now& (0+255),w,b
 37266  004522  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37267  004524  A4D8               	btfss	status,2,c
 37268  004526  D003               	goto	l2728
 37269                           
 37270                           ; BSR set to: 0
 37271                           ;octave.c: 79: {
 37272                           ;octave.c: 80: semitone_temp = -3;
 37273  004528  0EFD               	movlw	253
 37274  00452A  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37275                           
 37276                           ; BSR set to: 0
 37277                           ;octave.c: 81: keyPress = 1;
 37278  00452C  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37279  00452E                     l2728:
 37280  00452E                     l22103:
 37281                           
 37282                           ; BSR set to: 0
 37283                           ;octave.c: 82: }
 37284                           ;octave.c: 83: if(button_state_now == (0x08000000 | 0x00000400))
 37285  00452E  0E04               	movlw	4
 37286  004530  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37287  004532  E109               	bnz	l22109
 37288  004534  0E08               	movlw	8
 37289  004536  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37290  004538  11D8               	iorwf	_button_state_now& (0+255),w,b
 37291  00453A  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37292  00453C  A4D8               	btfss	status,2,c
 37293  00453E  D003               	goto	l2729
 37294                           
 37295                           ; BSR set to: 0
 37296                           ;octave.c: 84: {
 37297                           ;octave.c: 85: semitone_temp = -2;
 37298  004540  0EFE               	movlw	254
 37299  004542  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37300                           
 37301                           ; BSR set to: 0
 37302                           ;octave.c: 86: keyPress = 1;
 37303  004544  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37304  004546                     l2729:
 37305  004546                     l22109:
 37306                           
 37307                           ; BSR set to: 0
 37308                           ;octave.c: 87: }
 37309                           ;octave.c: 88: if(button_state_now == (0x08000000 | 0x00000800))
 37310  004546  0E08               	movlw	8
 37311  004548  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37312  00454A  E108               	bnz	l22113
 37313  00454C  0E08               	movlw	8
 37314  00454E  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37315  004550  11D8               	iorwf	_button_state_now& (0+255),w,b
 37316  004552  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37317  004554  A4D8               	btfss	status,2,c
 37318  004556  D002               	goto	l2730
 37319                           
 37320                           ; BSR set to: 0
 37321                           ;octave.c: 89: {
 37322                           ;octave.c: 90: semitone_temp = -1;
 37323  004558  6853               	setf	keyboardTranspose@semitone_temp,c
 37324                           
 37325                           ;octave.c: 91: keyPress = 1;
 37326  00455A  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37327  00455C                     l2730:
 37328  00455C                     l22113:
 37329                           
 37330                           ; BSR set to: 0
 37331                           ;octave.c: 92: }
 37332                           ;octave.c: 93: if(button_state_now == (0x08000000 | 0x00001000))
 37333  00455C  0E10               	movlw	16
 37334  00455E  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37335  004560  E109               	bnz	l22119
 37336  004562  0E08               	movlw	8
 37337  004564  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37338  004566  11D8               	iorwf	_button_state_now& (0+255),w,b
 37339  004568  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37340  00456A  A4D8               	btfss	status,2,c
 37341  00456C  D003               	goto	l2731
 37342                           
 37343                           ; BSR set to: 0
 37344                           ;octave.c: 94: {
 37345                           ;octave.c: 95: semitone_temp = 0;
 37346  00456E  0E00               	movlw	0
 37347  004570  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37348                           
 37349                           ; BSR set to: 0
 37350                           ;octave.c: 96: keyPress = 1;
 37351  004572  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37352  004574                     l2731:
 37353  004574                     l22119:
 37354                           
 37355                           ; BSR set to: 0
 37356                           ;octave.c: 97: }
 37357                           ;octave.c: 98: if(button_state_now == (0x08000000 | 0x00002000))
 37358  004574  0E20               	movlw	32
 37359  004576  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37360  004578  E109               	bnz	l22125
 37361  00457A  0E08               	movlw	8
 37362  00457C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37363  00457E  11D8               	iorwf	_button_state_now& (0+255),w,b
 37364  004580  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37365  004582  A4D8               	btfss	status,2,c
 37366  004584  D003               	goto	l2732
 37367                           
 37368                           ; BSR set to: 0
 37369                           ;octave.c: 99: {
 37370                           ;octave.c: 100: semitone_temp = 1;
 37371  004586  0E01               	movlw	1
 37372  004588  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37373                           
 37374                           ; BSR set to: 0
 37375                           ;octave.c: 101: keyPress = 1;
 37376  00458A  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37377  00458C                     l2732:
 37378  00458C                     l22125:
 37379                           
 37380                           ; BSR set to: 0
 37381                           ;octave.c: 102: }
 37382                           ;octave.c: 103: if(button_state_now == (0x08000000 | 0x00004000))
 37383  00458C  0E40               	movlw	64
 37384  00458E  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37385  004590  E109               	bnz	l22131
 37386  004592  0E08               	movlw	8
 37387  004594  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37388  004596  11D8               	iorwf	_button_state_now& (0+255),w,b
 37389  004598  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37390  00459A  A4D8               	btfss	status,2,c
 37391  00459C  D003               	goto	l2733
 37392                           
 37393                           ; BSR set to: 0
 37394                           ;octave.c: 104: {
 37395                           ;octave.c: 105: semitone_temp = 2;
 37396  00459E  0E02               	movlw	2
 37397  0045A0  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37398                           
 37399                           ; BSR set to: 0
 37400                           ;octave.c: 106: keyPress = 1;
 37401  0045A2  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37402  0045A4                     l2733:
 37403  0045A4                     l22131:
 37404                           
 37405                           ; BSR set to: 0
 37406                           ;octave.c: 107: }
 37407                           ;octave.c: 108: if(button_state_now == (0x08000000 | 0x00008000))
 37408  0045A4  0E80               	movlw	128
 37409  0045A6  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 37410  0045A8  E109               	bnz	l22137
 37411  0045AA  0E08               	movlw	8
 37412  0045AC  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37413  0045AE  11D8               	iorwf	_button_state_now& (0+255),w,b
 37414  0045B0  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37415  0045B2  A4D8               	btfss	status,2,c
 37416  0045B4  D003               	goto	l2734
 37417                           
 37418                           ; BSR set to: 0
 37419                           ;octave.c: 109: {
 37420                           ;octave.c: 110: semitone_temp = 3;
 37421  0045B6  0E03               	movlw	3
 37422  0045B8  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37423                           
 37424                           ; BSR set to: 0
 37425                           ;octave.c: 111: keyPress = 1;
 37426  0045BA  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37427  0045BC                     l2734:
 37428  0045BC                     l22137:
 37429                           
 37430                           ; BSR set to: 0
 37431                           ;octave.c: 112: }
 37432                           ;octave.c: 113: if(button_state_now == (0x08000000 | 0x00010000))
 37433  0045BC  05DA               	decf	(_button_state_now+2)& (0+255),w,b
 37434  0045BE  E109               	bnz	l22143
 37435  0045C0  0E08               	movlw	8
 37436  0045C2  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37437  0045C4  11D8               	iorwf	_button_state_now& (0+255),w,b
 37438  0045C6  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37439  0045C8  A4D8               	btfss	status,2,c
 37440  0045CA  D003               	goto	l2735
 37441                           
 37442                           ; BSR set to: 0
 37443                           ;octave.c: 114: {
 37444                           ;octave.c: 115: semitone_temp = 4;
 37445  0045CC  0E04               	movlw	4
 37446  0045CE  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37447                           
 37448                           ; BSR set to: 0
 37449                           ;octave.c: 116: keyPress = 1;
 37450  0045D0  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37451  0045D2                     l2735:
 37452  0045D2                     l22143:
 37453                           
 37454                           ; BSR set to: 0
 37455                           ;octave.c: 117: }
 37456                           ;octave.c: 118: if(button_state_now == (0x08000000 | 0x00020000))
 37457  0045D2  0E02               	movlw	2
 37458  0045D4  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37459  0045D6  E109               	bnz	l22149
 37460  0045D8  0E08               	movlw	8
 37461  0045DA  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37462  0045DC  11D8               	iorwf	_button_state_now& (0+255),w,b
 37463  0045DE  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37464  0045E0  A4D8               	btfss	status,2,c
 37465  0045E2  D003               	goto	l2736
 37466                           
 37467                           ; BSR set to: 0
 37468                           ;octave.c: 119: {
 37469                           ;octave.c: 120: semitone_temp = 5;
 37470  0045E4  0E05               	movlw	5
 37471  0045E6  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37472                           
 37473                           ; BSR set to: 0
 37474                           ;octave.c: 121: keyPress = 1;
 37475  0045E8  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37476  0045EA                     l2736:
 37477  0045EA                     l22149:
 37478                           
 37479                           ; BSR set to: 0
 37480                           ;octave.c: 122: }
 37481                           ;octave.c: 123: if(button_state_now == (0x08000000 | 0x00040000))
 37482  0045EA  0E04               	movlw	4
 37483  0045EC  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37484  0045EE  E109               	bnz	l22155
 37485  0045F0  0E08               	movlw	8
 37486  0045F2  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37487  0045F4  11D8               	iorwf	_button_state_now& (0+255),w,b
 37488  0045F6  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37489  0045F8  A4D8               	btfss	status,2,c
 37490  0045FA  D003               	goto	l2737
 37491                           
 37492                           ; BSR set to: 0
 37493                           ;octave.c: 124: {
 37494                           ;octave.c: 125: semitone_temp = 6;
 37495  0045FC  0E06               	movlw	6
 37496  0045FE  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37497                           
 37498                           ; BSR set to: 0
 37499                           ;octave.c: 126: keyPress = 1;
 37500  004600  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37501  004602                     l2737:
 37502  004602                     l22155:
 37503                           
 37504                           ; BSR set to: 0
 37505                           ;octave.c: 127: }
 37506                           ;octave.c: 128: if(button_state_now == (0x08000000 | 0x00080000))
 37507  004602  0E08               	movlw	8
 37508  004604  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37509  004606  E109               	bnz	l22161
 37510  004608  0E08               	movlw	8
 37511  00460A  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37512  00460C  11D8               	iorwf	_button_state_now& (0+255),w,b
 37513  00460E  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37514  004610  A4D8               	btfss	status,2,c
 37515  004612  D003               	goto	l2738
 37516                           
 37517                           ; BSR set to: 0
 37518                           ;octave.c: 129: {
 37519                           ;octave.c: 130: semitone_temp = 7;
 37520  004614  0E07               	movlw	7
 37521  004616  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37522                           
 37523                           ; BSR set to: 0
 37524                           ;octave.c: 131: keyPress = 1;
 37525  004618  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37526  00461A                     l2738:
 37527  00461A                     l22161:
 37528                           
 37529                           ; BSR set to: 0
 37530                           ;octave.c: 132: }
 37531                           ;octave.c: 133: if(button_state_now == (0x08000000 | 0x00100000))
 37532  00461A  0E10               	movlw	16
 37533  00461C  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37534  00461E  E109               	bnz	l22167
 37535  004620  0E08               	movlw	8
 37536  004622  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37537  004624  11D8               	iorwf	_button_state_now& (0+255),w,b
 37538  004626  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37539  004628  A4D8               	btfss	status,2,c
 37540  00462A  D003               	goto	l2739
 37541                           
 37542                           ; BSR set to: 0
 37543                           ;octave.c: 134: {
 37544                           ;octave.c: 135: semitone_temp = 8;
 37545  00462C  0E08               	movlw	8
 37546  00462E  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37547                           
 37548                           ; BSR set to: 0
 37549                           ;octave.c: 136: keyPress = 1;
 37550  004630  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37551  004632                     l2739:
 37552  004632                     l22167:
 37553                           
 37554                           ; BSR set to: 0
 37555                           ;octave.c: 137: }
 37556                           ;octave.c: 138: if(button_state_now == (0x08000000 | 0x00200000))
 37557  004632  0E20               	movlw	32
 37558  004634  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37559  004636  E109               	bnz	l22173
 37560  004638  0E08               	movlw	8
 37561  00463A  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37562  00463C  11D8               	iorwf	_button_state_now& (0+255),w,b
 37563  00463E  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37564  004640  A4D8               	btfss	status,2,c
 37565  004642  D003               	goto	l2740
 37566                           
 37567                           ; BSR set to: 0
 37568                           ;octave.c: 139: {
 37569                           ;octave.c: 140: semitone_temp = 9;
 37570  004644  0E09               	movlw	9
 37571  004646  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37572                           
 37573                           ; BSR set to: 0
 37574                           ;octave.c: 141: keyPress = 1;
 37575  004648  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37576  00464A                     l2740:
 37577  00464A                     l22173:
 37578                           
 37579                           ; BSR set to: 0
 37580                           ;octave.c: 142: }
 37581                           ;octave.c: 143: if(button_state_now == (0x08000000 | 0x00400000))
 37582  00464A  0E40               	movlw	64
 37583  00464C  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37584  00464E  E109               	bnz	l22179
 37585  004650  0E08               	movlw	8
 37586  004652  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37587  004654  11D8               	iorwf	_button_state_now& (0+255),w,b
 37588  004656  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37589  004658  A4D8               	btfss	status,2,c
 37590  00465A  D003               	goto	l2741
 37591                           
 37592                           ; BSR set to: 0
 37593                           ;octave.c: 144: {
 37594                           ;octave.c: 145: semitone_temp = 10;
 37595  00465C  0E0A               	movlw	10
 37596  00465E  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37597                           
 37598                           ; BSR set to: 0
 37599                           ;octave.c: 146: keyPress = 1;
 37600  004660  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37601  004662                     l2741:
 37602  004662                     l22179:
 37603                           
 37604                           ; BSR set to: 0
 37605                           ;octave.c: 147: }
 37606                           ;octave.c: 148: if(button_state_now == (0x08000000 | 0x00800000))
 37607  004662  0E80               	movlw	128
 37608  004664  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 37609  004666  E109               	bnz	l22185
 37610  004668  0E08               	movlw	8
 37611  00466A  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37612  00466C  11D8               	iorwf	_button_state_now& (0+255),w,b
 37613  00466E  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37614  004670  A4D8               	btfss	status,2,c
 37615  004672  D003               	goto	l2742
 37616                           
 37617                           ; BSR set to: 0
 37618                           ;octave.c: 149: {
 37619                           ;octave.c: 150: semitone_temp = 11;
 37620  004674  0E0B               	movlw	11
 37621  004676  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37622                           
 37623                           ; BSR set to: 0
 37624                           ;octave.c: 151: keyPress = 1;
 37625  004678  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37626  00467A                     l2742:
 37627  00467A                     l22185:
 37628                           
 37629                           ; BSR set to: 0
 37630                           ;octave.c: 152: }
 37631                           ;octave.c: 153: if(button_state_now == (0x08000000 | 0x01000000))
 37632  00467A  0E09               	movlw	9
 37633  00467C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 37634  00467E  11D8               	iorwf	_button_state_now& (0+255),w,b
 37635  004680  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 37636  004682  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 37637  004684  A4D8               	btfss	status,2,c
 37638  004686  D003               	goto	l2743
 37639                           
 37640                           ; BSR set to: 0
 37641                           ;octave.c: 154: {
 37642                           ;octave.c: 155: semitone_temp = 12;
 37643  004688  0E0C               	movlw	12
 37644  00468A  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37645                           
 37646                           ; BSR set to: 0
 37647                           ;octave.c: 156: keyPress = 1;
 37648  00468C  8432               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37649  00468E                     l2743:
 37650                           
 37651                           ; BSR set to: 0
 37652                           ;octave.c: 157: }
 37653                           ;octave.c: 159: if(keyPress == 1) {
 37654                           
 37655                           ; BSR set to: 0
 37656  00468E  A432               	btfss	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37657  004690  0012               	return	
 37658                           
 37659                           ; BSR set to: 0
 37660                           ;octave.c: 162: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 37661  004692  A035               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 37662  004694  D00E               	goto	l2745
 37663                           
 37664                           ; BSR set to: 0
 37665  004696  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 37666  004698  B4D8               	btfsc	status,2,c
 37667  00469A  D00B               	goto	l2745
 37668                           
 37669                           ; BSR set to: 0
 37670                           ;octave.c: 165: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 37671  00469C  0E00               	movlw	0
 37672  00469E  BE33               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 37673  0046A0  0E01               	movlw	1
 37674  0046A2  ECCC  F049         	call	_wait_one_pulse
 37675                           
 37676                           ;octave.c: 169: if(note_off_was_sent == 0) {key_press_release_note_off();}
 37677  0046A6  A033               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 37678  0046A8  EC95  F02D         	call	_key_press_release_note_off	;wreg free
 37679                           
 37680                           ;octave.c: 172: suppress_note_off = 1;
 37681  0046AC  8633               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 37682                           
 37683                           ;octave.c: 174: flag1 = 1;
 37684  0046AE  8E32               	bsf	_flag1/(0+8),_flag1& (0+7),c
 37685                           
 37686                           ;octave.c: 176: flag2 = 1;
 37687  0046B0  8C32               	bsf	_flag2/(0+8),_flag2& (0+7),c
 37688  0046B2                     l2745:
 37689                           
 37690                           ;octave.c: 177: }
 37691                           ;octave.c: 180: if (semitone_temp > 12) {semitone_temp = 12;}
 37692  0046B2  5053               	movf	keyboardTranspose@semitone_temp,w,c
 37693  0046B4  0A80               	xorlw	128
 37694  0046B6  0F73               	addlw	-141
 37695  0046B8  A0D8               	btfss	status,0,c
 37696  0046BA  D002               	goto	l2747
 37697  0046BC  0E0C               	movlw	12
 37698  0046BE  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37699  0046C0                     l2747:
 37700                           
 37701                           ;octave.c: 181: if (semitone_temp < -12) {semitone_temp = -12;}
 37702  0046C0  5053               	movf	keyboardTranspose@semitone_temp,w,c
 37703  0046C2  0A80               	xorlw	128
 37704  0046C4  0F8C               	addlw	140
 37705  0046C6  B0D8               	btfsc	status,0,c
 37706  0046C8  D002               	goto	l2748
 37707  0046CA  0EF4               	movlw	244
 37708  0046CC  6E53               	movwf	keyboardTranspose@semitone_temp,c
 37709  0046CE                     l2748:
 37710                           
 37711                           ;octave.c: 182: semitone = semitone_temp;
 37712  0046CE  C053  F0F3         	movff	keyboardTranspose@semitone_temp,_semitone
 37713                           
 37714                           ;octave.c: 183: printThisNumber(semitone);
 37715  0046D2  0100               	movlb	0	; () banked
 37716  0046D4  51F3               	movf	_semitone& (0+255),w,b
 37717  0046D6  6F60               	movwf	printThisNumber@n& (0+255),b
 37718  0046D8  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 37719  0046DA  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 37720  0046DC  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 37721  0046DE  ECC7  F04A         	call	_printThisNumber	;wreg free
 37722                           
 37723                           ;octave.c: 184: keyPress = 0;
 37724  0046E2  9432               	bcf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 37725  0046E4  0012               	return	
 37726  0046E6                     __end_of_keyboardTranspose:
 37727                           	opt stack 0
 37728                           tblptru	equ	0xFF8
 37729                           tblptrh	equ	0xFF7
 37730                           tblptrl	equ	0xFF6
 37731                           tablat	equ	0xFF5
 37732                           prodh	equ	0xFF4
 37733                           prodl	equ	0xFF3
 37734                           intcon	equ	0xFF2
 37735                           intcon2	equ	0xFF1
 37736                           postinc0	equ	0xFEE
 37737                           wreg	equ	0xFE8
 37738                           indf1	equ	0xFE7
 37739                           postdec1	equ	0xFE5
 37740                           fsr1h	equ	0xFE2
 37741                           fsr1l	equ	0xFE1
 37742                           indf2	equ	0xFDF
 37743                           postinc2	equ	0xFDE
 37744                           plusw2	equ	0xFDB
 37745                           fsr2h	equ	0xFDA
 37746                           fsr2l	equ	0xFD9
 37747                           status	equ	0xFD8
 37748                           
 37749 ;; *************** function _wait_one_pulse *****************
 37750 ;; Defined at:
 37751 ;;		line 20 in file "arpeggio.c"
 37752 ;; Parameters:    Size  Location     Type
 37753 ;;  mode            1    wreg     unsigned char 
 37754 ;; Auto vars:     Size  Location     Type
 37755 ;;  mode            1    0[BANK0 ] unsigned char 
 37756 ;; Return value:  Size  Location     Type
 37757 ;;                  1    wreg      void 
 37758 ;; Registers used:
 37759 ;;		wreg, status,2
 37760 ;; Tracked objects:
 37761 ;;		On entry : 0/0
 37762 ;;		On exit  : 0/0
 37763 ;;		Unchanged: 0/0
 37764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37769 ;;Total ram usage:        1 bytes
 37770 ;; Hardware stack levels used:    1
 37771 ;; Hardware stack levels required when called:    5
 37772 ;; This function calls:
 37773 ;;		Nothing
 37774 ;; This function is called by:
 37775 ;;		_playThisNotePentatonic
 37776 ;;		_playTriad
 37777 ;;		_playSeventh
 37778 ;;		_playThisNote
 37779 ;;		_playThisNote8
 37780 ;;		_playDiatonicTriadMajor
 37781 ;;		_playDiatonicSeventhMajor
 37782 ;;		_playDiatonicTriadMinor
 37783 ;;		_playDiatonicSeventhMinor
 37784 ;;		_keyboardTranspose
 37785 ;;		_processOctave
 37786 ;; This function uses a non-reentrant model
 37787 ;;
 37788                           
 37789                           	psect	text110
 37790  009398                     __ptext110:
 37791                           	opt stack 0
 37792  009398                     _wait_one_pulse:
 37793                           	opt stack 20
 37794                           
 37795                           ;incstack = 0
 37796                           ;wait_one_pulse@mode stored from wreg
 37797  009398  0100               	movlb	0	; () banked
 37798  00939A  6F60               	movwf	wait_one_pulse@mode& (0+255),b
 37799                           
 37800                           ;arpeggio.c: 22: lastNoteMode = mode;
 37801  00939C  0100               	movlb	0	; () banked
 37802  00939E  A160               	btfss	wait_one_pulse@mode& (0+255),0,b
 37803  0093A0  D002               	goto	u22850
 37804  0093A2  8434               	bsf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 37805  0093A4  D001               	goto	u22865
 37806  0093A6                     u22850:
 37807  0093A6  9434               	bcf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 37808  0093A8                     u22865:
 37809                           
 37810                           ;arpeggio.c: 25: if(lastNoteMode == 0) {
 37811  0093A8  B434               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 37812  0093AA  D004               	goto	l5182
 37813                           
 37814                           ;arpeggio.c: 26: finishLastNote = 0;
 37815  0093AC  9A33               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 37816                           
 37817                           ;arpeggio.c: 27: TIMER_OVERFLOWS = 0;
 37818  0093AE  0E00               	movlw	0
 37819  0093B0  6E54               	movwf	_TIMER_OVERFLOWS,c
 37820                           
 37821                           ;arpeggio.c: 28: return;
 37822  0093B2  0012               	return	
 37823  0093B4                     l5182:
 37824                           
 37825                           ;arpeggio.c: 29: }
 37826                           ;arpeggio.c: 32: if(lastNoteMode == 1) {
 37827  0093B4  A434               	btfss	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 37828  0093B6  0012               	return	
 37829                           
 37830                           ;arpeggio.c: 33: finishLastNote = 1;
 37831  0093B8  8A33               	bsf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 37832                           
 37833                           ;arpeggio.c: 34: TMR0ON = 1;
 37834  0093BA  8ED5               	bsf	4053,7,c	;volatile
 37835  0093BC  AA33               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 37836  0093BE  0012               	return	
 37837  0093C0  D7FD               	goto	l5186
 37838  0093C2                     __end_of_wait_one_pulse:
 37839                           	opt stack 0
 37840                           tblptru	equ	0xFF8
 37841                           tblptrh	equ	0xFF7
 37842                           tblptrl	equ	0xFF6
 37843                           tablat	equ	0xFF5
 37844                           prodh	equ	0xFF4
 37845                           prodl	equ	0xFF3
 37846                           intcon	equ	0xFF2
 37847                           intcon2	equ	0xFF1
 37848                           postinc0	equ	0xFEE
 37849                           wreg	equ	0xFE8
 37850                           indf1	equ	0xFE7
 37851                           postdec1	equ	0xFE5
 37852                           fsr1h	equ	0xFE2
 37853                           fsr1l	equ	0xFE1
 37854                           indf2	equ	0xFDF
 37855                           postinc2	equ	0xFDE
 37856                           plusw2	equ	0xFDB
 37857                           fsr2h	equ	0xFDA
 37858                           fsr2l	equ	0xFD9
 37859                           status	equ	0xFD8
 37860                           
 37861 ;; *************** function _printThisNumber *****************
 37862 ;; Defined at:
 37863 ;;		line 21 in file "octave.c"
 37864 ;; Parameters:    Size  Location     Type
 37865 ;;  n               2    0[BANK0 ] int 
 37866 ;; Auto vars:     Size  Location     Type
 37867 ;;		None
 37868 ;; Return value:  Size  Location     Type
 37869 ;;                  1    wreg      void 
 37870 ;; Registers used:
 37871 ;;		wreg, status,2
 37872 ;; Tracked objects:
 37873 ;;		On entry : 0/0
 37874 ;;		On exit  : 0/0
 37875 ;;		Unchanged: 0/0
 37876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37877 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37880 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37881 ;;Total ram usage:        2 bytes
 37882 ;; Hardware stack levels used:    1
 37883 ;; Hardware stack levels required when called:    5
 37884 ;; This function calls:
 37885 ;;		Nothing
 37886 ;; This function is called by:
 37887 ;;		_keyboardTranspose
 37888 ;;		_processOctave
 37889 ;; This function uses a non-reentrant model
 37890 ;;
 37891                           
 37892                           	psect	text111
 37893  00958E                     __ptext111:
 37894                           	opt stack 0
 37895  00958E                     _printThisNumber:
 37896                           	opt stack 23
 37897                           
 37898                           ;octave.c: 22: DISPLAY_MODE = 0;
 37899                           
 37900                           ;incstack = 0
 37901  00958E  0E00               	movlw	0
 37902  009590  6E5A               	movwf	_DISPLAY_MODE,c
 37903                           
 37904                           ;octave.c: 23: DIGIT_MODE = 0;
 37905  009592  0E00               	movlw	0
 37906  009594  6E59               	movwf	_DIGIT_MODE,c
 37907                           
 37908                           ;octave.c: 24: number_to_display = n;
 37909  009596  C060  F05B         	movff	printThisNumber@n,_number_to_display
 37910  00959A  C061  F05C         	movff	printThisNumber@n+1,_number_to_display+1
 37911  00959E  0012               	return		;funcret
 37912  0095A0                     __end_of_printThisNumber:
 37913                           	opt stack 0
 37914                           tblptru	equ	0xFF8
 37915                           tblptrh	equ	0xFF7
 37916                           tblptrl	equ	0xFF6
 37917                           tablat	equ	0xFF5
 37918                           prodh	equ	0xFF4
 37919                           prodl	equ	0xFF3
 37920                           intcon	equ	0xFF2
 37921                           intcon2	equ	0xFF1
 37922                           postinc0	equ	0xFEE
 37923                           wreg	equ	0xFE8
 37924                           indf1	equ	0xFE7
 37925                           postdec1	equ	0xFE5
 37926                           fsr1h	equ	0xFE2
 37927                           fsr1l	equ	0xFE1
 37928                           indf2	equ	0xFDF
 37929                           postinc2	equ	0xFDE
 37930                           plusw2	equ	0xFDB
 37931                           fsr2h	equ	0xFDA
 37932                           fsr2l	equ	0xFD9
 37933                           status	equ	0xFD8
 37934                           
 37935 ;; *************** function _key_press_release_note_off *****************
 37936 ;; Defined at:
 37937 ;;		line 99 in file "arpeggio.c"
 37938 ;; Parameters:    Size  Location     Type
 37939 ;;		None
 37940 ;; Auto vars:     Size  Location     Type
 37941 ;;		None
 37942 ;; Return value:  Size  Location     Type
 37943 ;;                  1    wreg      void 
 37944 ;; Registers used:
 37945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37946 ;; Tracked objects:
 37947 ;;		On entry : 0/0
 37948 ;;		On exit  : 0/0
 37949 ;;		Unchanged: 0/0
 37950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37955 ;;Total ram usage:        0 bytes
 37956 ;; Hardware stack levels used:    1
 37957 ;; Hardware stack levels required when called:    7
 37958 ;; This function calls:
 37959 ;;		_noteOff
 37960 ;; This function is called by:
 37961 ;;		_playThisNotePentatonic
 37962 ;;		_playTriad
 37963 ;;		_playSeventh
 37964 ;;		_playThisNote
 37965 ;;		_playThisNote8
 37966 ;;		_playDiatonicTriadMajor
 37967 ;;		_playDiatonicSeventhMajor
 37968 ;;		_playDiatonicTriadMinor
 37969 ;;		_playDiatonicSeventhMinor
 37970 ;;		_keyboardTranspose
 37971 ;;		_processOctave
 37972 ;; This function uses a non-reentrant model
 37973 ;;
 37974                           
 37975                           	psect	text112
 37976  005B2A                     __ptext112:
 37977                           	opt stack 0
 37978  005B2A                     _key_press_release_note_off:
 37979                           	opt stack 18
 37980                           
 37981                           ;arpeggio.c: 102: if((startingDirection == UP) && (ARPEGGIO_TYPE == DOWN_UP)){stored_oct
      +                          ave += (OCTAVES - 1);}
 37982                           
 37983                           ;incstack = 0
 37984  005B2A  0100               	movlb	0	; () banked
 37985  005B2C  51E9               	movf	_startingDirection& (0+255),w,b
 37986  005B2E  A4D8               	btfss	status,2,c
 37987  005B30  D006               	goto	l5206
 37988                           
 37989                           ; BSR set to: 0
 37990  005B32  0E03               	movlw	3
 37991  005B34  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 37992  005B36  A4D8               	btfss	status,2,c
 37993  005B38  D002               	goto	l5206
 37994                           
 37995                           ; BSR set to: 0
 37996  005B3A  05F8               	decf	_OCTAVES& (0+255),w,b
 37997  005B3C  27E7               	addwf	_stored_octave& (0+255),f,b
 37998  005B3E                     l5206:
 37999                           
 38000                           ; BSR set to: 0
 38001                           ;arpeggio.c: 104: if((startingDirection == DOWN) && (ARPEGGIO_TYPE == UP_DOWN)){stored_o
      +                          ctave -= (OCTAVES - 1);}
 38002  005B3E  05E9               	decf	_startingDirection& (0+255),w,b
 38003  005B40  A4D8               	btfss	status,2,c
 38004  005B42  D006               	goto	l5207
 38005                           
 38006                           ; BSR set to: 0
 38007  005B44  0E02               	movlw	2
 38008  005B46  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 38009  005B48  A4D8               	btfss	status,2,c
 38010  005B4A  D002               	goto	l5207
 38011                           
 38012                           ; BSR set to: 0
 38013  005B4C  05F8               	decf	_OCTAVES& (0+255),w,b
 38014  005B4E  5FE7               	subwf	_stored_octave& (0+255),f,b
 38015  005B50                     l5207:
 38016                           
 38017                           ; BSR set to: 0
 38018                           ;arpeggio.c: 106: TMR0ON = 0;
 38019                           
 38020                           ; BSR set to: 0
 38021  005B50  9ED5               	bcf	4053,7,c	;volatile
 38022                           
 38023                           ; BSR set to: 0
 38024                           ;arpeggio.c: 109: static signed char temp;
 38025                           ;arpeggio.c: 110: temp = last_note;
 38026  005B52  C0E8  F0E2         	movff	_last_note,key_press_release_note_off@temp
 38027                           
 38028                           ; BSR set to: 0
 38029                           ;arpeggio.c: 113: if((last_note != 0)){
 38030  005B56  51E8               	movf	_last_note& (0+255),w,b
 38031  005B58  B4D8               	btfsc	status,2,c
 38032  005B5A  D076               	goto	l5210
 38033                           
 38034                           ; BSR set to: 0
 38035                           ;arpeggio.c: 114: if(stored_octave == -3){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           3)) * 12), velocity);}
 38036  005B5C  0EFD               	movlw	253
 38037  005B5E  19E7               	xorwf	_stored_octave& (0+255),w,b
 38038  005B60  A4D8               	btfss	status,2,c
 38039  005B62  D00E               	goto	l5211
 38040                           
 38041                           ; BSR set to: 0
 38042  005B64  51F8               	movf	_OCTAVES& (0+255),w,b
 38043  005B66  0FFD               	addlw	253
 38044  005B68  0800               	sublw	0
 38045  005B6A  25F8               	addwf	_OCTAVES& (0+255),w,b
 38046  005B6C  0D0C               	mullw	12
 38047  005B6E  50F3               	movf	prodl,w,c
 38048  005B70  0800               	sublw	0
 38049  005B72  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38050  005B74  6F6B               	movwf	noteOff@pitch& (0+255),b
 38051  005B76  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38052  005B7A  51F6               	movf	_channel& (0+255),w,b
 38053  005B7C  ECC9  F047         	call	_noteOff
 38054  005B80                     l5211:
 38055                           
 38056                           ;arpeggio.c: 115: if(stored_octave == -2){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           2)) * 12), velocity);}
 38057  005B80  0EFE               	movlw	254
 38058  005B82  0100               	movlb	0	; () banked
 38059  005B84  19E7               	xorwf	_stored_octave& (0+255),w,b
 38060  005B86  A4D8               	btfss	status,2,c
 38061  005B88  D00E               	goto	l5212
 38062                           
 38063                           ; BSR set to: 0
 38064  005B8A  51F8               	movf	_OCTAVES& (0+255),w,b
 38065  005B8C  0FFE               	addlw	254
 38066  005B8E  0800               	sublw	0
 38067  005B90  25F8               	addwf	_OCTAVES& (0+255),w,b
 38068  005B92  0D0C               	mullw	12
 38069  005B94  50F3               	movf	prodl,w,c
 38070  005B96  0800               	sublw	0
 38071  005B98  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38072  005B9A  6F6B               	movwf	noteOff@pitch& (0+255),b
 38073  005B9C  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38074  005BA0  51F6               	movf	_channel& (0+255),w,b
 38075  005BA2  ECC9  F047         	call	_noteOff
 38076  005BA6                     l5212:
 38077                           
 38078                           ;arpeggio.c: 116: if(stored_octave == -1){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           1)) * 12), velocity);}
 38079  005BA6  0100               	movlb	0	; () banked
 38080  005BA8  29E7               	incf	_stored_octave& (0+255),w,b
 38081  005BAA  A4D8               	btfss	status,2,c
 38082  005BAC  D00D               	goto	l5213
 38083                           
 38084                           ; BSR set to: 0
 38085  005BAE  05F8               	decf	_OCTAVES& (0+255),w,b
 38086  005BB0  0800               	sublw	0
 38087  005BB2  25F8               	addwf	_OCTAVES& (0+255),w,b
 38088  005BB4  0D0C               	mullw	12
 38089  005BB6  50F3               	movf	prodl,w,c
 38090  005BB8  0800               	sublw	0
 38091  005BBA  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38092  005BBC  6F6B               	movwf	noteOff@pitch& (0+255),b
 38093  005BBE  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38094  005BC2  51F6               	movf	_channel& (0+255),w,b
 38095  005BC4  ECC9  F047         	call	_noteOff
 38096  005BC8                     l5213:
 38097                           
 38098                           ;arpeggio.c: 118: if(stored_octave == 0){
 38099  005BC8  0100               	movlb	0	; () banked
 38100  005BCA  51E7               	movf	_stored_octave& (0+255),w,b
 38101  005BCC  A4D8               	btfss	status,2,c
 38102  005BCE  D007               	goto	l5214
 38103                           
 38104                           ; BSR set to: 0
 38105                           ;arpeggio.c: 119: noteOff(channel, temp, velocity);
 38106  005BD0  C0E2  F06B         	movff	key_press_release_note_off@temp,noteOff@pitch
 38107  005BD4  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38108  005BD8  51F6               	movf	_channel& (0+255),w,b
 38109  005BDA  ECC9  F047         	call	_noteOff
 38110  005BDE                     l5214:
 38111                           
 38112                           ;arpeggio.c: 120: }
 38113                           ;arpeggio.c: 122: if(stored_octave == 1){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          1)) * 12), velocity);}
 38114  005BDE  0100               	movlb	0	; () banked
 38115  005BE0  05E7               	decf	_stored_octave& (0+255),w,b
 38116  005BE2  A4D8               	btfss	status,2,c
 38117  005BE4  D00C               	goto	l5215
 38118                           
 38119                           ; BSR set to: 0
 38120  005BE6  05F8               	decf	_OCTAVES& (0+255),w,b
 38121  005BE8  0800               	sublw	0
 38122  005BEA  25F8               	addwf	_OCTAVES& (0+255),w,b
 38123  005BEC  0D0C               	mullw	12
 38124  005BEE  50F3               	movf	prodl,w,c
 38125  005BF0  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38126  005BF2  6F6B               	movwf	noteOff@pitch& (0+255),b
 38127  005BF4  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38128  005BF8  51F6               	movf	_channel& (0+255),w,b
 38129  005BFA  ECC9  F047         	call	_noteOff
 38130  005BFE                     l5215:
 38131                           
 38132                           ;arpeggio.c: 123: if(stored_octave == 2){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          2)) * 12), velocity);}
 38133  005BFE  0E02               	movlw	2
 38134  005C00  0100               	movlb	0	; () banked
 38135  005C02  19E7               	xorwf	_stored_octave& (0+255),w,b
 38136  005C04  A4D8               	btfss	status,2,c
 38137  005C06  D00D               	goto	l5216
 38138                           
 38139                           ; BSR set to: 0
 38140  005C08  51F8               	movf	_OCTAVES& (0+255),w,b
 38141  005C0A  0FFE               	addlw	254
 38142  005C0C  0800               	sublw	0
 38143  005C0E  25F8               	addwf	_OCTAVES& (0+255),w,b
 38144  005C10  0D0C               	mullw	12
 38145  005C12  50F3               	movf	prodl,w,c
 38146  005C14  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38147  005C16  6F6B               	movwf	noteOff@pitch& (0+255),b
 38148  005C18  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38149  005C1C  51F6               	movf	_channel& (0+255),w,b
 38150  005C1E  ECC9  F047         	call	_noteOff
 38151  005C22                     l5216:
 38152                           
 38153                           ;arpeggio.c: 124: if(stored_octave == 3){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          3)) * 12), velocity);}
 38154  005C22  0E03               	movlw	3
 38155  005C24  0100               	movlb	0	; () banked
 38156  005C26  19E7               	xorwf	_stored_octave& (0+255),w,b
 38157  005C28  A4D8               	btfss	status,2,c
 38158  005C2A  D00D               	goto	l5217
 38159                           
 38160                           ; BSR set to: 0
 38161  005C2C  51F8               	movf	_OCTAVES& (0+255),w,b
 38162  005C2E  0FFD               	addlw	253
 38163  005C30  0800               	sublw	0
 38164  005C32  25F8               	addwf	_OCTAVES& (0+255),w,b
 38165  005C34  0D0C               	mullw	12
 38166  005C36  50F3               	movf	prodl,w,c
 38167  005C38  25E2               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38168  005C3A  6F6B               	movwf	noteOff@pitch& (0+255),b
 38169  005C3C  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38170  005C40  51F6               	movf	_channel& (0+255),w,b
 38171  005C42  ECC9  F047         	call	_noteOff
 38172  005C46                     l5217:
 38173                           
 38174                           ;arpeggio.c: 126: note_off_was_sent = 1;
 38175  005C46  8033               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38176  005C48                     l5210:
 38177                           
 38178                           ;arpeggio.c: 127: }
 38179                           ;arpeggio.c: 130: if((last_note == 0) && (note_off_was_sent == 0) && (keyboard.SW1 == 1)
      +                          ){noteOff(channel, stored_octave * 12, velocity);note_off_was_sent = 1;}
 38180  005C48  0100               	movlb	0	; () banked
 38181  005C4A  51E8               	movf	_last_note& (0+255),w,b
 38182  005C4C  B4D8               	btfsc	status,2,c
 38183                           
 38184                           ; BSR set to: 0
 38185  005C4E  B033               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38186  005C50  D00C               	goto	l5218
 38187                           
 38188                           ; BSR set to: 0
 38189  005C52  A1D0               	btfss	_keyboard& (0+255),0,b
 38190  005C54  D00A               	goto	l5218
 38191                           
 38192                           ; BSR set to: 0
 38193  005C56  51E7               	movf	_stored_octave& (0+255),w,b
 38194  005C58  0D0C               	mullw	12
 38195  005C5A  CFF3 F06B          	movff	prodl,noteOff@pitch
 38196  005C5E  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38197  005C62  51F6               	movf	_channel& (0+255),w,b
 38198  005C64  ECC9  F047         	call	_noteOff
 38199  005C68  8033               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38200  005C6A                     l5218:
 38201                           
 38202                           ;arpeggio.c: 131: if((last_note == 0) && (note_off_was_sent == 0)){noteOff(channel, stor
      +                          ed_octave * 12, velocity);note_off_was_sent = 1;}
 38203  005C6A  0100               	movlb	0	; () banked
 38204  005C6C  51E8               	movf	_last_note& (0+255),w,b
 38205  005C6E  B4D8               	btfsc	status,2,c
 38206                           
 38207                           ; BSR set to: 0
 38208  005C70  B033               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38209  005C72  D00A               	goto	l5219
 38210                           
 38211                           ; BSR set to: 0
 38212  005C74  51E7               	movf	_stored_octave& (0+255),w,b
 38213  005C76  0D0C               	mullw	12
 38214  005C78  CFF3 F06B          	movff	prodl,noteOff@pitch
 38215  005C7C  C0FD  F06C         	movff	_velocity,noteOff@velocity
 38216  005C80  51F6               	movf	_channel& (0+255),w,b
 38217  005C82  ECC9  F047         	call	_noteOff
 38218  005C86  8033               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38219  005C88                     l5219:
 38220                           
 38221                           ;arpeggio.c: 133: TMR0ON = 1;
 38222  005C88  8ED5               	bsf	4053,7,c	;volatile
 38223  005C8A  0012               	return		;funcret
 38224  005C8C                     __end_of_key_press_release_note_off:
 38225                           	opt stack 0
 38226                           tblptru	equ	0xFF8
 38227                           tblptrh	equ	0xFF7
 38228                           tblptrl	equ	0xFF6
 38229                           tablat	equ	0xFF5
 38230                           prodh	equ	0xFF4
 38231                           prodl	equ	0xFF3
 38232                           intcon	equ	0xFF2
 38233                           intcon2	equ	0xFF1
 38234                           postinc0	equ	0xFEE
 38235                           wreg	equ	0xFE8
 38236                           indf1	equ	0xFE7
 38237                           postdec1	equ	0xFE5
 38238                           fsr1h	equ	0xFE2
 38239                           fsr1l	equ	0xFE1
 38240                           indf2	equ	0xFDF
 38241                           postinc2	equ	0xFDE
 38242                           plusw2	equ	0xFDB
 38243                           fsr2h	equ	0xFDA
 38244                           fsr2l	equ	0xFD9
 38245                           status	equ	0xFD8
 38246                           
 38247 ;; *************** function _noteOff *****************
 38248 ;; Defined at:
 38249 ;;		line 66 in file "midi.c"
 38250 ;; Parameters:    Size  Location     Type
 38251 ;;  channel         1    wreg     unsigned char 
 38252 ;;  pitch           1   11[BANK0 ] unsigned char 
 38253 ;;  velocity        1   12[BANK0 ] unsigned char 
 38254 ;; Auto vars:     Size  Location     Type
 38255 ;;  channel         1   13[BANK0 ] unsigned char 
 38256 ;; Return value:  Size  Location     Type
 38257 ;;                  1    wreg      void 
 38258 ;; Registers used:
 38259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 38260 ;; Tracked objects:
 38261 ;;		On entry : 0/0
 38262 ;;		On exit  : 0/0
 38263 ;;		Unchanged: 0/0
 38264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38265 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38266 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38268 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38269 ;;Total ram usage:        3 bytes
 38270 ;; Hardware stack levels used:    1
 38271 ;; Hardware stack levels required when called:    6
 38272 ;; This function calls:
 38273 ;;		_sendOut
 38274 ;;		_sendUSB
 38275 ;; This function is called by:
 38276 ;;		_noteOn
 38277 ;;		_noteOnDrum
 38278 ;;		_playThisNotePentatonic
 38279 ;;		_playTriad
 38280 ;;		_playSeventh
 38281 ;;		_playThisNote
 38282 ;;		_playThisNote8
 38283 ;;		_playDiatonicTriadMajor
 38284 ;;		_playDiatonicSeventhMajor
 38285 ;;		_playDiatonicTriadMinor
 38286 ;;		_playDiatonicSeventhMinor
 38287 ;;		_key_press_release_note_off
 38288 ;;		_keyboard_all_note
 38289 ;;		_keyboard_eight_note
 38290 ;; This function uses a non-reentrant model
 38291 ;;
 38292                           
 38293                           	psect	text113
 38294  008F92                     __ptext113:
 38295                           	opt stack 0
 38296  008F92                     _noteOff:
 38297                           	opt stack 18
 38298                           
 38299                           ;incstack = 0
 38300                           ;noteOff@channel stored from wreg
 38301  008F92  0100               	movlb	0	; () banked
 38302  008F94  6F6D               	movwf	noteOff@channel& (0+255),b
 38303                           
 38304                           ;midi.c: 68: noteNumber = pitch + semitone + ((octave + 1)* 12);
 38305  008F96  0100               	movlb	0	; () banked
 38306  008F98  29FC               	incf	_octave& (0+255),w,b
 38307  008F9A  0D0C               	mullw	12
 38308  008F9C  50F3               	movf	prodl,w,c
 38309  008F9E  256B               	addwf	noteOff@pitch& (0+255),w,b
 38310  008FA0  25F3               	addwf	_semitone& (0+255),w,b
 38311  008FA2  6FF4               	movwf	_noteNumber& (0+255),b
 38312                           
 38313                           ; BSR set to: 0
 38314                           ;midi.c: 69: statusByte = channel | note_off;
 38315  008FA4  516D               	movf	noteOff@channel& (0+255),w,b
 38316  008FA6  0980               	iorlw	128
 38317  008FA8  6FF5               	movwf	_statusByte& (0+255),b
 38318                           
 38319                           ; BSR set to: 0
 38320                           ;midi.c: 73: sendUSB(statusByte, noteNumber, velocity);
 38321  008FAA  C0F4  F060         	movff	_noteNumber,sendUSB@message2
 38322  008FAE  C06C  F061         	movff	noteOff@velocity,sendUSB@message3
 38323  008FB2  51F5               	movf	_statusByte& (0+255),w,b
 38324  008FB4  EC91  F039         	call	_sendUSB
 38325                           
 38326                           ;midi.c: 76: sendOut(statusByte);
 38327  008FB8  0100               	movlb	0	; () banked
 38328  008FBA  51F5               	movf	_statusByte& (0+255),w,b
 38329  008FBC  EC89  F04A         	call	_sendOut
 38330                           
 38331                           ;midi.c: 77: sendOut(noteNumber);
 38332  008FC0  0100               	movlb	0	; () banked
 38333  008FC2  51F4               	movf	_noteNumber& (0+255),w,b
 38334  008FC4  EC89  F04A         	call	_sendOut
 38335                           
 38336                           ;midi.c: 78: sendOut(velocity);
 38337  008FC8  0100               	movlb	0	; () banked
 38338  008FCA  516C               	movf	noteOff@velocity& (0+255),w,b
 38339  008FCC  EC89  F04A         	call	_sendOut
 38340  008FD0  0012               	return		;funcret
 38341  008FD2                     __end_of_noteOff:
 38342                           	opt stack 0
 38343                           tblptru	equ	0xFF8
 38344                           tblptrh	equ	0xFF7
 38345                           tblptrl	equ	0xFF6
 38346                           tablat	equ	0xFF5
 38347                           prodh	equ	0xFF4
 38348                           prodl	equ	0xFF3
 38349                           intcon	equ	0xFF2
 38350                           intcon2	equ	0xFF1
 38351                           postinc0	equ	0xFEE
 38352                           wreg	equ	0xFE8
 38353                           indf1	equ	0xFE7
 38354                           postdec1	equ	0xFE5
 38355                           fsr1h	equ	0xFE2
 38356                           fsr1l	equ	0xFE1
 38357                           indf2	equ	0xFDF
 38358                           postinc2	equ	0xFDE
 38359                           plusw2	equ	0xFDB
 38360                           fsr2h	equ	0xFDA
 38361                           fsr2l	equ	0xFD9
 38362                           status	equ	0xFD8
 38363                           
 38364 ;; *************** function _buttonInputsSerial *****************
 38365 ;; Defined at:
 38366 ;;		line 264 in file "main.c"
 38367 ;; Parameters:    Size  Location     Type
 38368 ;;		None
 38369 ;; Auto vars:     Size  Location     Type
 38370 ;;  i               1    5[BANK0 ] unsigned char 
 38371 ;;  i               1    4[BANK0 ] unsigned char 
 38372 ;; Return value:  Size  Location     Type
 38373 ;;                  1    wreg      void 
 38374 ;; Registers used:
 38375 ;;		wreg, status,2, status,0, cstack
 38376 ;; Tracked objects:
 38377 ;;		On entry : 0/0
 38378 ;;		On exit  : 0/0
 38379 ;;		Unchanged: 0/0
 38380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38382 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38383 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38384 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38385 ;;Total ram usage:        6 bytes
 38386 ;; Hardware stack levels used:    1
 38387 ;; Hardware stack levels required when called:    6
 38388 ;; This function calls:
 38389 ;;		_clock
 38390 ;;		_load
 38391 ;; This function is called by:
 38392 ;;		_digitalInputs
 38393 ;; This function uses a non-reentrant model
 38394 ;;
 38395                           
 38396                           	psect	text114
 38397  0081F4                     __ptext114:
 38398                           	opt stack 0
 38399  0081F4                     _buttonInputsSerial:
 38400                           	opt stack 23
 38401                           
 38402                           ;main.c: 266: button_state_now = 0;
 38403                           
 38404                           ;incstack = 0
 38405  0081F4  0E00               	movlw	0
 38406  0081F6  0100               	movlb	0	; () banked
 38407  0081F8  6FD8               	movwf	_button_state_now& (0+255),b
 38408  0081FA  0E00               	movlw	0
 38409  0081FC  6FD9               	movwf	(_button_state_now+1)& (0+255),b
 38410  0081FE  0E00               	movlw	0
 38411  008200  6FDA               	movwf	(_button_state_now+2)& (0+255),b
 38412  008202  0E00               	movlw	0
 38413  008204  6FDB               	movwf	(_button_state_now+3)& (0+255),b
 38414                           
 38415                           ;main.c: 267: drum_button_state_now = 0;
 38416  008206  0E00               	movlw	0
 38417  008208  6FEE               	movwf	_drum_button_state_now& (0+255),b
 38418                           
 38419                           ; BSR set to: 0
 38420                           ;main.c: 268: load();
 38421  00820A  ECF0  F04A         	call	_load	;wreg free
 38422                           
 38423                           ;main.c: 271: for (unsigned char i = 0;i<12;i++){
 38424  00820E  0E00               	movlw	0
 38425  008210  0100               	movlb	0	; () banked
 38426  008212  6F64               	movwf	buttonInputsSerial@i& (0+255),b
 38427  008214                     l23019:
 38428                           
 38429                           ; BSR set to: 0
 38430  008214  0E0B               	movlw	11
 38431  008216  6564               	cpfsgt	buttonInputsSerial@i& (0+255),b
 38432  008218  D001               	goto	l4777
 38433  00821A  D009               	goto	u37680
 38434  00821C                     l4777:
 38435                           
 38436                           ; BSR set to: 0
 38437                           ;main.c: 272: drum_button_state_now = (drum_button_state_now << 1) | (RC4);
 38438                           
 38439                           ; BSR set to: 0
 38440  00821C  90D8               	bcf	status,0,c
 38441  00821E  B882               	btfsc	3970,4,c	;volatile
 38442  008220  80D8               	bsf	status,0,c
 38443  008222  37EE               	rlcf	_drum_button_state_now& (0+255),f,b
 38444                           
 38445                           ; BSR set to: 0
 38446                           ;main.c: 273: clock();
 38447  008224  ECF3  F04A         	call	_clock	;wreg free
 38448  008228  0100               	movlb	0	; () banked
 38449  00822A  2B64               	incf	buttonInputsSerial@i& (0+255),f,b
 38450  00822C  D7F3               	goto	l23019
 38451  00822E                     u37680:
 38452                           
 38453                           ; BSR set to: 0
 38454                           ;main.c: 274: }
 38455                           ;main.c: 277: for (unsigned char i = 0;i<28;i++){
 38456                           
 38457                           ; BSR set to: 0
 38458  00822E  0E00               	movlw	0
 38459  008230  6F65               	movwf	buttonInputsSerial@i_4380& (0+255),b
 38460  008232                     l23033:
 38461                           
 38462                           ; BSR set to: 0
 38463  008232  0E1B               	movlw	27
 38464  008234  6565               	cpfsgt	buttonInputsSerial@i_4380& (0+255),b
 38465  008236  D001               	goto	l4779
 38466  008238  0012               	return	
 38467  00823A                     l4779:
 38468                           
 38469                           ; BSR set to: 0
 38470                           ;main.c: 278: button_state_now = (button_state_now << 1) | (RC4);
 38471                           
 38472                           ; BSR set to: 0
 38473  00823A  90D8               	bcf	status,0,c
 38474  00823C  35D8               	rlcf	_button_state_now& (0+255),w,b
 38475  00823E  6F60               	movwf	??_buttonInputsSerial& (0+255),b
 38476  008240  35D9               	rlcf	(_button_state_now+1)& (0+255),w,b
 38477  008242  6F61               	movwf	(??_buttonInputsSerial+1)& (0+255),b
 38478  008244  35DA               	rlcf	(_button_state_now+2)& (0+255),w,b
 38479  008246  6F62               	movwf	(??_buttonInputsSerial+2)& (0+255),b
 38480  008248  35DB               	rlcf	(_button_state_now+3)& (0+255),w,b
 38481  00824A  6F63               	movwf	(??_buttonInputsSerial+3)& (0+255),b
 38482  00824C  A882               	btfss	3970,4,c	;volatile
 38483  00824E  D002               	goto	u37700
 38484  008250  0E01               	movlw	1
 38485  008252  D001               	goto	u37710
 38486  008254                     u37700:
 38487  008254  0E00               	movlw	0
 38488  008256                     u37710:
 38489  008256  1160               	iorwf	??_buttonInputsSerial& (0+255),w,b
 38490  008258  6FD8               	movwf	_button_state_now& (0+255),b
 38491  00825A  5161               	movf	(??_buttonInputsSerial+1)& (0+255),w,b
 38492  00825C  6FD9               	movwf	(_button_state_now+1)& (0+255),b
 38493  00825E  5162               	movf	(??_buttonInputsSerial+2)& (0+255),w,b
 38494  008260  6FDA               	movwf	(_button_state_now+2)& (0+255),b
 38495  008262  5163               	movf	(??_buttonInputsSerial+3)& (0+255),w,b
 38496  008264  6FDB               	movwf	(_button_state_now+3)& (0+255),b
 38497                           
 38498                           ; BSR set to: 0
 38499                           ;main.c: 279: clock();
 38500  008266  ECF3  F04A         	call	_clock	;wreg free
 38501  00826A  0100               	movlb	0	; () banked
 38502  00826C  2B65               	incf	buttonInputsSerial@i_4380& (0+255),f,b
 38503  00826E  D7E1               	goto	l23033
 38504  008270                     __end_of_buttonInputsSerial:
 38505                           	opt stack 0
 38506                           tblptru	equ	0xFF8
 38507                           tblptrh	equ	0xFF7
 38508                           tblptrl	equ	0xFF6
 38509                           tablat	equ	0xFF5
 38510                           prodh	equ	0xFF4
 38511                           prodl	equ	0xFF3
 38512                           intcon	equ	0xFF2
 38513                           intcon2	equ	0xFF1
 38514                           postinc0	equ	0xFEE
 38515                           wreg	equ	0xFE8
 38516                           indf1	equ	0xFE7
 38517                           postdec1	equ	0xFE5
 38518                           fsr1h	equ	0xFE2
 38519                           fsr1l	equ	0xFE1
 38520                           indf2	equ	0xFDF
 38521                           postinc2	equ	0xFDE
 38522                           plusw2	equ	0xFDB
 38523                           fsr2h	equ	0xFDA
 38524                           fsr2l	equ	0xFD9
 38525                           status	equ	0xFD8
 38526                           
 38527 ;; *************** function _load *****************
 38528 ;; Defined at:
 38529 ;;		line 251 in file "main.c"
 38530 ;; Parameters:    Size  Location     Type
 38531 ;;		None
 38532 ;; Auto vars:     Size  Location     Type
 38533 ;;		None
 38534 ;; Return value:  Size  Location     Type
 38535 ;;                  1    wreg      void 
 38536 ;; Registers used:
 38537 ;;		None
 38538 ;; Tracked objects:
 38539 ;;		On entry : 0/0
 38540 ;;		On exit  : 0/0
 38541 ;;		Unchanged: 0/0
 38542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38547 ;;Total ram usage:        0 bytes
 38548 ;; Hardware stack levels used:    1
 38549 ;; Hardware stack levels required when called:    5
 38550 ;; This function calls:
 38551 ;;		Nothing
 38552 ;; This function is called by:
 38553 ;;		_buttonInputsSerial
 38554 ;; This function uses a non-reentrant model
 38555 ;;
 38556                           
 38557                           	psect	text115
 38558  0095E0                     __ptext115:
 38559                           	opt stack 0
 38560  0095E0                     _load:
 38561                           	opt stack 23
 38562                           
 38563                           ;main.c: 252: RB1 = 0;
 38564                           
 38565                           ; BSR set to: 0
 38566                           ;incstack = 0
 38567  0095E0  9281               	bcf	3969,1,c	;volatile
 38568                           
 38569                           ;main.c: 254: RB1 = 1;
 38570  0095E2  8281               	bsf	3969,1,c	;volatile
 38571  0095E4  0012               	return		;funcret
 38572  0095E6                     __end_of_load:
 38573                           	opt stack 0
 38574                           tblptru	equ	0xFF8
 38575                           tblptrh	equ	0xFF7
 38576                           tblptrl	equ	0xFF6
 38577                           tablat	equ	0xFF5
 38578                           prodh	equ	0xFF4
 38579                           prodl	equ	0xFF3
 38580                           intcon	equ	0xFF2
 38581                           intcon2	equ	0xFF1
 38582                           postinc0	equ	0xFEE
 38583                           wreg	equ	0xFE8
 38584                           indf1	equ	0xFE7
 38585                           postdec1	equ	0xFE5
 38586                           fsr1h	equ	0xFE2
 38587                           fsr1l	equ	0xFE1
 38588                           indf2	equ	0xFDF
 38589                           postinc2	equ	0xFDE
 38590                           plusw2	equ	0xFDB
 38591                           fsr2h	equ	0xFDA
 38592                           fsr2l	equ	0xFD9
 38593                           status	equ	0xFD8
 38594                           
 38595 ;; *************** function _clock *****************
 38596 ;; Defined at:
 38597 ;;		line 258 in file "main.c"
 38598 ;; Parameters:    Size  Location     Type
 38599 ;;		None
 38600 ;; Auto vars:     Size  Location     Type
 38601 ;;		None
 38602 ;; Return value:  Size  Location     Type
 38603 ;;                  1    wreg      void 
 38604 ;; Registers used:
 38605 ;;		None
 38606 ;; Tracked objects:
 38607 ;;		On entry : 0/0
 38608 ;;		On exit  : 0/0
 38609 ;;		Unchanged: 0/0
 38610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38615 ;;Total ram usage:        0 bytes
 38616 ;; Hardware stack levels used:    1
 38617 ;; Hardware stack levels required when called:    5
 38618 ;; This function calls:
 38619 ;;		Nothing
 38620 ;; This function is called by:
 38621 ;;		_buttonInputsSerial
 38622 ;; This function uses a non-reentrant model
 38623 ;;
 38624                           
 38625                           	psect	text116
 38626  0095E6                     __ptext116:
 38627                           	opt stack 0
 38628  0095E6                     _clock:
 38629                           	opt stack 23
 38630                           
 38631                           ;main.c: 259: RC5 = 1;
 38632                           
 38633                           ;incstack = 0
 38634  0095E6  8A82               	bsf	3970,5,c	;volatile
 38635                           
 38636                           ;main.c: 260: RC5 = 0;
 38637  0095E8  9A82               	bcf	3970,5,c	;volatile
 38638  0095EA  0012               	return		;funcret
 38639  0095EC                     __end_of_clock:
 38640                           	opt stack 0
 38641                           tblptru	equ	0xFF8
 38642                           tblptrh	equ	0xFF7
 38643                           tblptrl	equ	0xFF6
 38644                           tablat	equ	0xFF5
 38645                           prodh	equ	0xFF4
 38646                           prodl	equ	0xFF3
 38647                           intcon	equ	0xFF2
 38648                           intcon2	equ	0xFF1
 38649                           postinc0	equ	0xFEE
 38650                           wreg	equ	0xFE8
 38651                           indf1	equ	0xFE7
 38652                           postdec1	equ	0xFE5
 38653                           fsr1h	equ	0xFE2
 38654                           fsr1l	equ	0xFE1
 38655                           indf2	equ	0xFDF
 38656                           postinc2	equ	0xFDE
 38657                           plusw2	equ	0xFDB
 38658                           fsr2h	equ	0xFDA
 38659                           fsr2l	equ	0xFD9
 38660                           status	equ	0xFD8
 38661                           
 38662 ;; *************** function _analogInputs *****************
 38663 ;; Defined at:
 38664 ;;		line 284 in file "main.c"
 38665 ;; Parameters:    Size  Location     Type
 38666 ;;		None
 38667 ;; Auto vars:     Size  Location     Type
 38668 ;;		None
 38669 ;; Return value:  Size  Location     Type
 38670 ;;                  1    wreg      void 
 38671 ;; Registers used:
 38672 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 38673 ;; Tracked objects:
 38674 ;;		On entry : 0/0
 38675 ;;		On exit  : 0/0
 38676 ;;		Unchanged: 0/0
 38677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38682 ;;Total ram usage:        0 bytes
 38683 ;; Hardware stack levels used:    1
 38684 ;; Hardware stack levels required when called:    9
 38685 ;; This function calls:
 38686 ;;		_readPotentiometers
 38687 ;; This function is called by:
 38688 ;;		_main
 38689 ;; This function uses a non-reentrant model
 38690 ;;
 38691                           
 38692                           	psect	text117
 38693  0095EC                     __ptext117:
 38694                           	opt stack 0
 38695  0095EC                     _analogInputs:
 38696                           	opt stack 21
 38697                           
 38698                           ;main.c: 285: readPotentiometers();
 38699                           
 38700                           ;incstack = 0
 38701  0095EC  ECA6  F008         	call	_readPotentiometers	;wreg free
 38702  0095F0  0012               	return		;funcret
 38703  0095F2                     __end_of_analogInputs:
 38704                           	opt stack 0
 38705                           tblptru	equ	0xFF8
 38706                           tblptrh	equ	0xFF7
 38707                           tblptrl	equ	0xFF6
 38708                           tablat	equ	0xFF5
 38709                           prodh	equ	0xFF4
 38710                           prodl	equ	0xFF3
 38711                           intcon	equ	0xFF2
 38712                           intcon2	equ	0xFF1
 38713                           postinc0	equ	0xFEE
 38714                           wreg	equ	0xFE8
 38715                           indf1	equ	0xFE7
 38716                           postdec1	equ	0xFE5
 38717                           fsr1h	equ	0xFE2
 38718                           fsr1l	equ	0xFE1
 38719                           indf2	equ	0xFDF
 38720                           postinc2	equ	0xFDE
 38721                           plusw2	equ	0xFDB
 38722                           fsr2h	equ	0xFDA
 38723                           fsr2l	equ	0xFD9
 38724                           status	equ	0xFD8
 38725                           
 38726 ;; *************** function _readPotentiometers *****************
 38727 ;; Defined at:
 38728 ;;		line 34 in file "potentiometers.c"
 38729 ;; Parameters:    Size  Location     Type
 38730 ;;		None
 38731 ;; Auto vars:     Size  Location     Type
 38732 ;;  i               1  109[BANK0 ] unsigned char 
 38733 ;;  i               1  107[BANK0 ] unsigned char 
 38734 ;;  i               1  108[BANK0 ] unsigned char 
 38735 ;; Return value:  Size  Location     Type
 38736 ;;                  1    wreg      void 
 38737 ;; Registers used:
 38738 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 38739 ;; Tracked objects:
 38740 ;;		On entry : 0/0
 38741 ;;		On exit  : 0/0
 38742 ;;		Unchanged: 0/0
 38743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38745 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38746 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38747 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38748 ;;Total ram usage:       12 bytes
 38749 ;; Hardware stack levels used:    1
 38750 ;; Hardware stack levels required when called:    8
 38751 ;; This function calls:
 38752 ;;		_ADC_Read
 38753 ;;		___fladd
 38754 ;;		___flmul
 38755 ;;		___flneg
 38756 ;;		___fltol
 38757 ;;		___xxtofl
 38758 ;;		_map
 38759 ;;		_processPotentiometers
 38760 ;; This function is called by:
 38761 ;;		_analogInputs
 38762 ;; This function uses a non-reentrant model
 38763 ;;
 38764                           
 38765                           	psect	text118
 38766  00114C                     __ptext118:
 38767                           	opt stack 0
 38768  00114C                     _readPotentiometers:
 38769                           	opt stack 21
 38770                           
 38771                           ;potentiometers.c: 36: static __bit FIRST_READING;
 38772                           ;potentiometers.c: 40: for(unsigned char i=0;i<16;i++){
 38773                           
 38774                           ;incstack = 0
 38775  00114C  0E00               	movlw	0
 38776  00114E  0100               	movlb	0	; () banked
 38777  001150  6FCC               	movwf	readPotentiometers@i& (0+255),b
 38778  001152                     l22921:
 38779                           
 38780                           ; BSR set to: 0
 38781  001152  0E0F               	movlw	15
 38782  001154  65CC               	cpfsgt	readPotentiometers@i& (0+255),b
 38783  001156  D001               	goto	l3876
 38784  001158  D028               	goto	u37480
 38785  00115A                     l3876:
 38786                           
 38787                           ; BSR set to: 0
 38788                           ;potentiometers.c: 42: potentiometer_raw[i] = ADC_Read(i);
 38789                           
 38790                           ; BSR set to: 0
 38791  00115A  51CC               	movf	readPotentiometers@i& (0+255),w,b
 38792  00115C  ECD7  F048         	call	_ADC_Read
 38793  001160  0100               	movlb	0	; () banked
 38794  001162  51CC               	movf	readPotentiometers@i& (0+255),w,b
 38795  001164  0D02               	mullw	2
 38796  001166  0E60               	movlw	low _potentiometer_raw
 38797  001168  24F3               	addwf	prodl,w,c
 38798  00116A  6ED9               	movwf	fsr2l,c
 38799  00116C  0E02               	movlw	high _potentiometer_raw
 38800  00116E  20F4               	addwfc	prodh,w,c
 38801  001170  6EDA               	movwf	fsr2h,c
 38802  001172  C060  FFDE         	movff	?_ADC_Read,postinc2
 38803  001176  C061  FFDD         	movff	?_ADC_Read+1,postdec2
 38804                           
 38805                           ; BSR set to: 0
 38806                           ;potentiometers.c: 51: if (FIRST_READING == 0) {
 38807  00117A  B032               	btfsc	readPotentiometers@FIRST_READING/(0+8),readPotentiometers@FIRST_READING& (0+7),c
 38808  00117C  D014               	goto	l3878
 38809                           
 38810                           ; BSR set to: 0
 38811                           ;potentiometers.c: 52: ema_sum[i] = potentiometer_raw[i];
 38812  00117E  51CC               	movf	readPotentiometers@i& (0+255),w,b
 38813  001180  0D02               	mullw	2
 38814  001182  0E60               	movlw	low _potentiometer_raw
 38815  001184  24F3               	addwf	prodl,w,c
 38816  001186  6ED9               	movwf	fsr2l,c
 38817  001188  0E02               	movlw	high _potentiometer_raw
 38818  00118A  20F4               	addwfc	prodh,w,c
 38819  00118C  6EDA               	movwf	fsr2h,c
 38820  00118E  51CC               	movf	readPotentiometers@i& (0+255),w,b
 38821  001190  0D02               	mullw	2
 38822  001192  0E40               	movlw	low _ema_sum
 38823  001194  24F3               	addwf	prodl,w,c
 38824  001196  6EE1               	movwf	fsr1l,c
 38825  001198  0E02               	movlw	high _ema_sum
 38826  00119A  20F4               	addwfc	prodh,w,c
 38827  00119C  6EE2               	movwf	fsr1h,c
 38828  00119E  CFDE FFE6          	movff	postinc2,postinc1
 38829  0011A2  CFDD FFE5          	movff	postdec2,postdec1
 38830  0011A6                     l3878:
 38831                           
 38832                           ; BSR set to: 0
 38833                           
 38834                           ; BSR set to: 0
 38835  0011A6  2BCC               	incf	readPotentiometers@i& (0+255),f,b
 38836  0011A8  D7D4               	goto	l22921
 38837  0011AA                     u37480:
 38838                           
 38839                           ; BSR set to: 0
 38840                           ;potentiometers.c: 53: }
 38841                           ;potentiometers.c: 54: }
 38842                           ;potentiometers.c: 57: for(unsigned char i=0;i<16;i++){
 38843                           
 38844                           ; BSR set to: 0
 38845  0011AA  0E00               	movlw	0
 38846  0011AC  6FCB               	movwf	readPotentiometers@i_3355& (0+255),b
 38847  0011AE                     l22937:
 38848                           
 38849                           ; BSR set to: 0
 38850  0011AE  0E0F               	movlw	15
 38851  0011B0  65CB               	cpfsgt	readPotentiometers@i_3355& (0+255),b
 38852  0011B2  D001               	goto	l3879
 38853  0011B4  D09D               	goto	u37500
 38854  0011B6                     l3879:
 38855                           
 38856                           ; BSR set to: 0
 38857                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 38858                           
 38859                           ; BSR set to: 0
 38860  0011B6  51CB               	movf	readPotentiometers@i_3355& (0+255),w,b
 38861  0011B8  0D02               	mullw	2
 38862  0011BA  0E40               	movlw	low _ema_sum
 38863  0011BC  24F3               	addwf	prodl,w,c
 38864  0011BE  6ED9               	movwf	fsr2l,c
 38865  0011C0  0E02               	movlw	high _ema_sum
 38866  0011C2  20F4               	addwfc	prodh,w,c
 38867  0011C4  6EDA               	movwf	fsr2h,c
 38868  0011C6  CFDE F060          	movff	postinc2,___xxtofl@val
 38869  0011CA  CFDD F061          	movff	postdec2,___xxtofl@val+1
 38870  0011CE  0E00               	movlw	0
 38871  0011D0  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 38872  0011D2  0EFF               	movlw	-1
 38873  0011D4  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 38874  0011D6  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 38875  0011D8  0E01               	movlw	1
 38876  0011DA  ECF5  F02E         	call	___xxtofl
 38877  0011DE  C060  F072         	movff	?___xxtofl,___flmul@a
 38878  0011E2  C061  F073         	movff	?___xxtofl+1,___flmul@a+1
 38879  0011E6  C062  F074         	movff	?___xxtofl+2,___flmul@a+2
 38880  0011EA  C063  F075         	movff	?___xxtofl+3,___flmul@a+3
 38881  0011EE  0E00               	movlw	0
 38882  0011F0  0100               	movlb	0	; () banked
 38883  0011F2  6FA8               	movwf	___fladd@a& (0+255),b
 38884  0011F4  0E00               	movlw	0
 38885  0011F6  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 38886  0011F8  0E80               	movlw	128
 38887  0011FA  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 38888  0011FC  0E3F               	movlw	63
 38889  0011FE  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 38890  001200  C104  F0A0         	movff	_ema_alpha,___flneg@f1
 38891  001204  C105  F0A1         	movff	_ema_alpha+1,___flneg@f1+1
 38892  001208  C106  F0A2         	movff	_ema_alpha+2,___flneg@f1+2
 38893  00120C  C107  F0A3         	movff	_ema_alpha+3,___flneg@f1+3
 38894  001210  EC59  F049         	call	___flneg	;wreg free
 38895  001214  C0A0  F0A4         	movff	?___flneg,___fladd@b
 38896  001218  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 38897  00121C  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 38898  001220  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 38899  001224  EC27  F01B         	call	___fladd	;wreg free
 38900  001228  C0A4  F06E         	movff	?___fladd,___flmul@b
 38901  00122C  C0A5  F06F         	movff	?___fladd+1,___flmul@b+1
 38902  001230  C0A6  F070         	movff	?___fladd+2,___flmul@b+2
 38903  001234  C0A7  F071         	movff	?___fladd+3,___flmul@b+3
 38904  001238  EC7E  F019         	call	___flmul	;wreg free
 38905  00123C  C06E  F0C7         	movff	?___flmul,_readPotentiometers$5800
 38906  001240  C06F  F0C8         	movff	?___flmul+1,_readPotentiometers$5800+1
 38907  001244  C070  F0C9         	movff	?___flmul+2,_readPotentiometers$5800+2
 38908  001248  C071  F0CA         	movff	?___flmul+3,_readPotentiometers$5800+3
 38909                           
 38910                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 38911  00124C  C0C7  F0A8         	movff	_readPotentiometers$5800,___fladd@a
 38912  001250  C0C8  F0A9         	movff	_readPotentiometers$5800+1,___fladd@a+1
 38913  001254  C0C9  F0AA         	movff	_readPotentiometers$5800+2,___fladd@a+2
 38914  001258  C0CA  F0AB         	movff	_readPotentiometers$5800+3,___fladd@a+3
 38915  00125C  C104  F072         	movff	_ema_alpha,___flmul@a
 38916  001260  C105  F073         	movff	_ema_alpha+1,___flmul@a+1
 38917  001264  C106  F074         	movff	_ema_alpha+2,___flmul@a+2
 38918  001268  C107  F075         	movff	_ema_alpha+3,___flmul@a+3
 38919  00126C  0100               	movlb	0	; () banked
 38920  00126E  51CB               	movf	readPotentiometers@i_3355& (0+255),w,b
 38921  001270  0D02               	mullw	2
 38922  001272  0E60               	movlw	low _potentiometer_raw
 38923  001274  24F3               	addwf	prodl,w,c
 38924  001276  6ED9               	movwf	fsr2l,c
 38925  001278  0E02               	movlw	high _potentiometer_raw
 38926  00127A  20F4               	addwfc	prodh,w,c
 38927  00127C  6EDA               	movwf	fsr2h,c
 38928  00127E  CFDE F060          	movff	postinc2,___xxtofl@val
 38929  001282  CFDD F061          	movff	postdec2,___xxtofl@val+1
 38930  001286  0E00               	movlw	0
 38931  001288  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 38932  00128A  0EFF               	movlw	-1
 38933  00128C  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 38934  00128E  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 38935  001290  0E01               	movlw	1
 38936  001292  ECF5  F02E         	call	___xxtofl
 38937  001296  C060  F06E         	movff	?___xxtofl,___flmul@b
 38938  00129A  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 38939  00129E  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 38940  0012A2  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 38941  0012A6  EC7E  F019         	call	___flmul	;wreg free
 38942  0012AA  C06E  F0A4         	movff	?___flmul,___fladd@b
 38943  0012AE  C06F  F0A5         	movff	?___flmul+1,___fladd@b+1
 38944  0012B2  C070  F0A6         	movff	?___flmul+2,___fladd@b+2
 38945  0012B6  C071  F0A7         	movff	?___flmul+3,___fladd@b+3
 38946  0012BA  EC27  F01B         	call	___fladd	;wreg free
 38947  0012BE  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 38948  0012C2  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 38949  0012C6  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 38950  0012CA  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 38951  0012CE  EC4E  F034         	call	___fltol	;wreg free
 38952  0012D2  0100               	movlb	0	; () banked
 38953  0012D4  51CB               	movf	readPotentiometers@i_3355& (0+255),w,b
 38954  0012D6  0D02               	mullw	2
 38955  0012D8  0E40               	movlw	low _ema_sum
 38956  0012DA  24F3               	addwf	prodl,w,c
 38957  0012DC  6ED9               	movwf	fsr2l,c
 38958  0012DE  0E02               	movlw	high _ema_sum
 38959  0012E0  20F4               	addwfc	prodh,w,c
 38960  0012E2  6EDA               	movwf	fsr2h,c
 38961  0012E4  C0B8  FFDE         	movff	?___fltol,postinc2
 38962  0012E8  C0B9  FFDD         	movff	?___fltol+1,postdec2
 38963                           
 38964                           ; BSR set to: 0
 38965  0012EC  2BCB               	incf	readPotentiometers@i_3355& (0+255),f,b
 38966  0012EE  D75F               	goto	l22937
 38967  0012F0                     u37500:
 38968                           
 38969                           ; BSR set to: 0
 38970                           ;potentiometers.c: 59: }
 38971                           ;potentiometers.c: 64: for(unsigned char i = 0; i<16; i++){
 38972                           
 38973                           ; BSR set to: 0
 38974  0012F0  0E00               	movlw	0
 38975  0012F2  6FCD               	movwf	readPotentiometers@i_3356& (0+255),b
 38976  0012F4                     l22949:
 38977                           
 38978                           ; BSR set to: 0
 38979  0012F4  0E0F               	movlw	15
 38980  0012F6  65CD               	cpfsgt	readPotentiometers@i_3356& (0+255),b
 38981  0012F8  D001               	goto	l3881
 38982  0012FA  D226               	goto	u37660
 38983  0012FC                     l3881:
 38984                           
 38985                           ; BSR set to: 0
 38986                           ;potentiometers.c: 74: static unsigned long count;
 38987                           ;potentiometers.c: 75: count++;
 38988                           
 38989                           ; BSR set to: 0
 38990  0012FC  0E01               	movlw	1
 38991  0012FE  0102               	movlb	2	; () banked
 38992  001300  2780               	addwf	readPotentiometers@count& (0+255),f,b
 38993  001302  0E00               	movlw	0
 38994  001304  2381               	addwfc	(readPotentiometers@count+1)& (0+255),f,b
 38995  001306  2382               	addwfc	(readPotentiometers@count+2)& (0+255),f,b
 38996  001308  2383               	addwfc	(readPotentiometers@count+3)& (0+255),f,b
 38997                           
 38998                           ; BSR set to: 2
 38999                           ;potentiometers.c: 78: if (FIRST_READING == 0) {potentiometer_filtered_last[i] = ema_sum
      +                          [i];}
 39000  00130A  B032               	btfsc	readPotentiometers@FIRST_READING/(0+8),readPotentiometers@FIRST_READING& (0+7),c
 39001  00130C  D015               	goto	l3885
 39002                           
 39003                           ; BSR set to: 2
 39004  00130E  0100               	movlb	0	; () banked
 39005  001310  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39006  001312  0D02               	mullw	2
 39007  001314  0E40               	movlw	low _ema_sum
 39008  001316  24F3               	addwf	prodl,w,c
 39009  001318  6ED9               	movwf	fsr2l,c
 39010  00131A  0E02               	movlw	high _ema_sum
 39011  00131C  20F4               	addwfc	prodh,w,c
 39012  00131E  6EDA               	movwf	fsr2h,c
 39013  001320  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39014  001322  0D02               	mullw	2
 39015  001324  0E00               	movlw	low _potentiometer_filtered_last
 39016  001326  24F3               	addwf	prodl,w,c
 39017  001328  6EE1               	movwf	fsr1l,c
 39018  00132A  0E02               	movlw	high _potentiometer_filtered_last
 39019  00132C  20F4               	addwfc	prodh,w,c
 39020  00132E  6EE2               	movwf	fsr1h,c
 39021  001330  CFDE FFE6          	movff	postinc2,postinc1
 39022  001334  CFDD FFE5          	movff	postdec2,postdec1
 39023  001338                     l3885:
 39024                           
 39025                           ;potentiometers.c: 80: if (((int)(ema_sum[i] - potentiometer_filtered_last[i]) >= HYST_V
      +                          AL) || ((int)(potentiometer_filtered_last[i] - ema_sum[i]) >= HYST_VAL)) {
 39026                           
 39027                           ; BSR set to: 0
 39028  001338  0100               	movlb	0	; () banked
 39029  00133A  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39030  00133C  0D02               	mullw	2
 39031  00133E  0E40               	movlw	low _ema_sum
 39032  001340  24F3               	addwf	prodl,w,c
 39033  001342  6ED9               	movwf	fsr2l,c
 39034  001344  0E02               	movlw	high _ema_sum
 39035  001346  20F4               	addwfc	prodh,w,c
 39036  001348  6EDA               	movwf	fsr2h,c
 39037  00134A  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 39038  00134E  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 39039  001352  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39040  001354  0D02               	mullw	2
 39041  001356  0E00               	movlw	low _potentiometer_filtered_last
 39042  001358  24F3               	addwf	prodl,w,c
 39043  00135A  6ED9               	movwf	fsr2l,c
 39044  00135C  0E02               	movlw	high _potentiometer_filtered_last
 39045  00135E  20F4               	addwfc	prodh,w,c
 39046  001360  6EDA               	movwf	fsr2h,c
 39047  001362  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 39048  001366  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 39049  00136A  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 39050  00136C  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 39051  00136E  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 39052  001370  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 39053  001372  51C2               	movf	??_readPotentiometers& (0+255),w,b
 39054  001374  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 39055  001376  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 39056  001378  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 39057  00137A  0101               	movlb	1	; () banked
 39058  00137C  51EB               	movf	_HYST_VAL& (0+255),w,b
 39059  00137E  0100               	movlb	0	; () banked
 39060  001380  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 39061  001382  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 39062  001384  0A80               	xorlw	128
 39063  001386  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 39064  001388  0101               	movlb	1	; () banked
 39065  00138A  51EC               	movf	(_HYST_VAL+1)& (0+255),w,b
 39066  00138C  0A80               	xorlw	128
 39067  00138E  0100               	movlb	0	; () banked
 39068  001390  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 39069  001392  B0D8               	btfsc	status,0,c
 39070  001394  D02E               	goto	u37540
 39071                           
 39072                           ; BSR set to: 0
 39073  001396  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39074  001398  0D02               	mullw	2
 39075  00139A  0E00               	movlw	low _potentiometer_filtered_last
 39076  00139C  24F3               	addwf	prodl,w,c
 39077  00139E  6ED9               	movwf	fsr2l,c
 39078  0013A0  0E02               	movlw	high _potentiometer_filtered_last
 39079  0013A2  20F4               	addwfc	prodh,w,c
 39080  0013A4  6EDA               	movwf	fsr2h,c
 39081  0013A6  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 39082  0013AA  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 39083  0013AE  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39084  0013B0  0D02               	mullw	2
 39085  0013B2  0E40               	movlw	low _ema_sum
 39086  0013B4  24F3               	addwf	prodl,w,c
 39087  0013B6  6ED9               	movwf	fsr2l,c
 39088  0013B8  0E02               	movlw	high _ema_sum
 39089  0013BA  20F4               	addwfc	prodh,w,c
 39090  0013BC  6EDA               	movwf	fsr2h,c
 39091  0013BE  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 39092  0013C2  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 39093  0013C6  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 39094  0013C8  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 39095  0013CA  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 39096  0013CC  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 39097  0013CE  51C2               	movf	??_readPotentiometers& (0+255),w,b
 39098  0013D0  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 39099  0013D2  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 39100  0013D4  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 39101  0013D6  0101               	movlb	1	; () banked
 39102  0013D8  51EB               	movf	_HYST_VAL& (0+255),w,b
 39103  0013DA  0100               	movlb	0	; () banked
 39104  0013DC  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 39105  0013DE  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 39106  0013E0  0A80               	xorlw	128
 39107  0013E2  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 39108  0013E4  0101               	movlb	1	; () banked
 39109  0013E6  51EC               	movf	(_HYST_VAL+1)& (0+255),w,b
 39110  0013E8  0A80               	xorlw	128
 39111  0013EA  0100               	movlb	0	; () banked
 39112  0013EC  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 39113  0013EE  A0D8               	btfss	status,0,c
 39114  0013F0  D196               	goto	l3886
 39115  0013F2                     u37540:
 39116                           
 39117                           ; BSR set to: 0
 39118                           ;potentiometers.c: 82: if((i==iterator_focus) || (iterator_focus==255)) {count = 0; coun
      +                          t_ISR = 0;}
 39119                           
 39120                           ; BSR set to: 0
 39121  0013F2  51FA               	movf	_iterator_focus& (0+255),w,b
 39122  0013F4  19CD               	xorwf	readPotentiometers@i_3356& (0+255),w,b
 39123  0013F6  B4D8               	btfsc	status,2,c
 39124  0013F8  D003               	goto	u37560
 39125                           
 39126                           ; BSR set to: 0
 39127  0013FA  29FA               	incf	_iterator_focus& (0+255),w,b
 39128  0013FC  A4D8               	btfss	status,2,c
 39129  0013FE  D011               	goto	l3889
 39130  001400                     u37560:
 39131                           
 39132                           ; BSR set to: 0
 39133                           
 39134                           ; BSR set to: 0
 39135  001400  0E00               	movlw	0
 39136  001402  0102               	movlb	2	; () banked
 39137  001404  6F80               	movwf	readPotentiometers@count& (0+255),b
 39138  001406  0E00               	movlw	0
 39139  001408  6F81               	movwf	(readPotentiometers@count+1)& (0+255),b
 39140  00140A  0E00               	movlw	0
 39141  00140C  6F82               	movwf	(readPotentiometers@count+2)& (0+255),b
 39142  00140E  0E00               	movlw	0
 39143  001410  6F83               	movwf	(readPotentiometers@count+3)& (0+255),b
 39144  001412  0E00               	movlw	0
 39145  001414  6F84               	movwf	_count_ISR& (0+255),b
 39146  001416  0E00               	movlw	0
 39147  001418  6F85               	movwf	(_count_ISR+1)& (0+255),b
 39148  00141A  0E00               	movlw	0
 39149  00141C  6F86               	movwf	(_count_ISR+2)& (0+255),b
 39150  00141E  0E00               	movlw	0
 39151  001420  6F87               	movwf	(_count_ISR+3)& (0+255),b
 39152  001422                     l3889:
 39153                           
 39154                           ;potentiometers.c: 84: HYST_VAL = 8;
 39155  001422  0E00               	movlw	0
 39156  001424  0101               	movlb	1	; () banked
 39157  001426  6FEC               	movwf	(_HYST_VAL+1)& (0+255),b
 39158  001428  0E08               	movlw	8
 39159  00142A  6FEB               	movwf	_HYST_VAL& (0+255),b
 39160                           
 39161                           ; BSR set to: 1
 39162                           ;potentiometers.c: 91: if(iterator_focus == 255) {iterator_focus = i;}
 39163  00142C  0100               	movlb	0	; () banked
 39164  00142E  29FA               	incf	_iterator_focus& (0+255),w,b
 39165  001430  B4D8               	btfsc	status,2,c
 39166                           
 39167                           ; BSR set to: 0
 39168  001432  C0CD  F0FA         	movff	readPotentiometers@i_3356,_iterator_focus
 39169                           
 39170                           ; BSR set to: 0
 39171                           ;potentiometers.c: 92: potentiometer_filtered_now[i] = ema_sum[i];
 39172                           
 39173                           ; BSR set to: 0
 39174  001436  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39175  001438  0D02               	mullw	2
 39176  00143A  0E40               	movlw	low _ema_sum
 39177  00143C  24F3               	addwf	prodl,w,c
 39178  00143E  6ED9               	movwf	fsr2l,c
 39179  001440  0E02               	movlw	high _ema_sum
 39180  001442  20F4               	addwfc	prodh,w,c
 39181  001444  6EDA               	movwf	fsr2h,c
 39182  001446  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39183  001448  0D02               	mullw	2
 39184  00144A  0E20               	movlw	low _potentiometer_filtered_now
 39185  00144C  24F3               	addwf	prodl,w,c
 39186  00144E  6EE1               	movwf	fsr1l,c
 39187  001450  0E02               	movlw	high _potentiometer_filtered_now
 39188  001452  20F4               	addwfc	prodh,w,c
 39189  001454  6EE2               	movwf	fsr1h,c
 39190  001456  CFDE FFE6          	movff	postinc2,postinc1
 39191  00145A  CFDD FFE5          	movff	postdec2,postdec1
 39192                           
 39193                           ; BSR set to: 0
 39194                           ;potentiometers.c: 95: if(inputPotsArray[i].controller_resolution == 0) {
 39195  00145E  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39196  001460  0D03               	mullw	3
 39197  001462  0EAC               	movlw	low _inputPotsArray
 39198  001464  24F3               	addwf	prodl,w,c
 39199  001466  6ED9               	movwf	fsr2l,c
 39200  001468  0E02               	movlw	high _inputPotsArray
 39201  00146A  20F4               	addwfc	prodh,w,c
 39202  00146C  6EDA               	movwf	fsr2h,c
 39203  00146E  0102               	movlb	2	; () banked
 39204  001470  B0DF               	btfsc	indf2,0,c
 39205  001472  D097               	goto	l3895
 39206                           
 39207                           ; BSR set to: 2
 39208                           ;potentiometers.c: 96: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i]
      +                          , 0, 0x3F50, 0, 0x3FFF);
 39209  001474  0100               	movlb	0	; () banked
 39210  001476  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39211  001478  0D02               	mullw	2
 39212  00147A  0E20               	movlw	low _potentiometer_filtered_now
 39213  00147C  24F3               	addwf	prodl,w,c
 39214  00147E  6ED9               	movwf	fsr2l,c
 39215  001480  0E02               	movlw	high _potentiometer_filtered_now
 39216  001482  20F4               	addwfc	prodh,w,c
 39217  001484  6EDA               	movwf	fsr2h,c
 39218  001486  CFDE F07A          	movff	postinc2,map@x
 39219  00148A  CFDD F07B          	movff	postdec2,map@x+1
 39220  00148E  0E00               	movlw	0
 39221  001490  BF7B               	btfsc	(map@x+1)& (0+255),7,b
 39222  001492  0EFF               	movlw	-1
 39223  001494  6F7C               	movwf	(map@x+2)& (0+255),b
 39224  001496  6F7D               	movwf	(map@x+3)& (0+255),b
 39225  001498  0E00               	movlw	0
 39226  00149A  6F7E               	movwf	map@in_min& (0+255),b
 39227  00149C  0E00               	movlw	0
 39228  00149E  6F7F               	movwf	(map@in_min+1)& (0+255),b
 39229  0014A0  0E00               	movlw	0
 39230  0014A2  6F80               	movwf	(map@in_min+2)& (0+255),b
 39231  0014A4  0E00               	movlw	0
 39232  0014A6  6F81               	movwf	(map@in_min+3)& (0+255),b
 39233  0014A8  0E50               	movlw	80
 39234  0014AA  6F82               	movwf	map@in_max& (0+255),b
 39235  0014AC  0E3F               	movlw	63
 39236  0014AE  6F83               	movwf	(map@in_max+1)& (0+255),b
 39237  0014B0  0E00               	movlw	0
 39238  0014B2  6F84               	movwf	(map@in_max+2)& (0+255),b
 39239  0014B4  0E00               	movlw	0
 39240  0014B6  6F85               	movwf	(map@in_max+3)& (0+255),b
 39241  0014B8  0E00               	movlw	0
 39242  0014BA  6F86               	movwf	map@out_min& (0+255),b
 39243  0014BC  0E00               	movlw	0
 39244  0014BE  6F87               	movwf	(map@out_min+1)& (0+255),b
 39245  0014C0  0E00               	movlw	0
 39246  0014C2  6F88               	movwf	(map@out_min+2)& (0+255),b
 39247  0014C4  0E00               	movlw	0
 39248  0014C6  6F89               	movwf	(map@out_min+3)& (0+255),b
 39249  0014C8  0EFF               	movlw	255
 39250  0014CA  6F8A               	movwf	map@out_max& (0+255),b
 39251  0014CC  0E3F               	movlw	63
 39252  0014CE  6F8B               	movwf	(map@out_max+1)& (0+255),b
 39253  0014D0  0E00               	movlw	0
 39254  0014D2  6F8C               	movwf	(map@out_max+2)& (0+255),b
 39255  0014D4  0E00               	movlw	0
 39256  0014D6  6F8D               	movwf	(map@out_max+3)& (0+255),b
 39257  0014D8  EC6A  F033         	call	_map	;wreg free
 39258  0014DC  0100               	movlb	0	; () banked
 39259  0014DE  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39260  0014E0  0D02               	mullw	2
 39261  0014E2  0E20               	movlw	low _potentiometer_filtered_now
 39262  0014E4  24F3               	addwf	prodl,w,c
 39263  0014E6  6ED9               	movwf	fsr2l,c
 39264  0014E8  0E02               	movlw	high _potentiometer_filtered_now
 39265  0014EA  20F4               	addwfc	prodh,w,c
 39266  0014EC  6EDA               	movwf	fsr2h,c
 39267  0014EE  C07A  FFDE         	movff	?_map,postinc2
 39268  0014F2  C07B  FFDD         	movff	?_map+1,postdec2
 39269                           
 39270                           ; BSR set to: 0
 39271                           ;potentiometers.c: 97: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] >> 
      +                          3;
 39272  0014F6  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39273  0014F8  0D02               	mullw	2
 39274  0014FA  0E20               	movlw	low _potentiometer_filtered_now
 39275  0014FC  24F3               	addwf	prodl,w,c
 39276  0014FE  6ED9               	movwf	fsr2l,c
 39277  001500  0E02               	movlw	high _potentiometer_filtered_now
 39278  001502  20F4               	addwfc	prodh,w,c
 39279  001504  6EDA               	movwf	fsr2h,c
 39280  001506  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 39281  00150A  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 39282  00150E  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 39283  001510  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 39284  001512  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 39285  001514  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 39286  001516  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 39287  001518  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 39288  00151A  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 39289  00151C  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 39290  00151E  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 39291  001520  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39292  001522  0D02               	mullw	2
 39293  001524  0E20               	movlw	low _potentiometer_filtered_now
 39294  001526  24F3               	addwf	prodl,w,c
 39295  001528  6ED9               	movwf	fsr2l,c
 39296  00152A  0E02               	movlw	high _potentiometer_filtered_now
 39297  00152C  20F4               	addwfc	prodh,w,c
 39298  00152E  6EDA               	movwf	fsr2h,c
 39299  001530  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 39300  001534  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 39301                           
 39302                           ; BSR set to: 0
 39303                           ;potentiometers.c: 98: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now[
      +                          i] = 0;}
 39304  001538  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39305  00153A  0D02               	mullw	2
 39306  00153C  0E20               	movlw	low _potentiometer_filtered_now
 39307  00153E  24F3               	addwf	prodl,w,c
 39308  001540  6ED9               	movwf	fsr2l,c
 39309  001542  0E02               	movlw	high _potentiometer_filtered_now
 39310  001544  20F4               	addwfc	prodh,w,c
 39311  001546  6EDA               	movwf	fsr2h,c
 39312  001548  0E01               	movlw	1
 39313  00154A  AEDB               	btfss	plusw2,7,c
 39314  00154C  D00C               	goto	l3894
 39315                           
 39316                           ; BSR set to: 0
 39317  00154E  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39318  001550  0D02               	mullw	2
 39319  001552  0E20               	movlw	low _potentiometer_filtered_now
 39320  001554  24F3               	addwf	prodl,w,c
 39321  001556  6ED9               	movwf	fsr2l,c
 39322  001558  0E02               	movlw	high _potentiometer_filtered_now
 39323  00155A  20F4               	addwfc	prodh,w,c
 39324  00155C  6EDA               	movwf	fsr2h,c
 39325  00155E  0E00               	movlw	0
 39326  001560  6EDE               	movwf	postinc2,c
 39327  001562  0E00               	movlw	0
 39328  001564  6EDD               	movwf	postdec2,c
 39329  001566                     l3894:
 39330                           
 39331                           ; BSR set to: 0
 39332                           ;potentiometers.c: 99: if(potentiometer_filtered_now[i] > 127){potentiometer_filtered_no
      +                          w[i] = 127;}
 39333  001566  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39334  001568  0D02               	mullw	2
 39335  00156A  0E20               	movlw	low _potentiometer_filtered_now
 39336  00156C  24F3               	addwf	prodl,w,c
 39337  00156E  6ED9               	movwf	fsr2l,c
 39338  001570  0E02               	movlw	high _potentiometer_filtered_now
 39339  001572  20F4               	addwfc	prodh,w,c
 39340  001574  6EDA               	movwf	fsr2h,c
 39341  001576  0E01               	movlw	1
 39342  001578  BEDB               	btfsc	plusw2,7,c
 39343  00157A  D013               	goto	l3895
 39344  00157C  0E01               	movlw	1
 39345  00157E  50DB               	movf	plusw2,w,c
 39346  001580  E104               	bnz	u37600
 39347  001582  0E80               	movlw	128
 39348  001584  5CDE               	subwf	postinc2,w,c
 39349  001586  A0D8               	btfss	status,0,c
 39350  001588  D00C               	goto	l3895
 39351  00158A                     u37600:
 39352                           
 39353                           ; BSR set to: 0
 39354  00158A  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39355  00158C  0D02               	mullw	2
 39356  00158E  0E20               	movlw	low _potentiometer_filtered_now
 39357  001590  24F3               	addwf	prodl,w,c
 39358  001592  6ED9               	movwf	fsr2l,c
 39359  001594  0E02               	movlw	high _potentiometer_filtered_now
 39360  001596  20F4               	addwfc	prodh,w,c
 39361  001598  6EDA               	movwf	fsr2h,c
 39362  00159A  0E7F               	movlw	127
 39363  00159C  6EDE               	movwf	postinc2,c
 39364  00159E  0E00               	movlw	0
 39365  0015A0  6EDD               	movwf	postdec2,c
 39366  0015A2                     l3895:
 39367                           
 39368                           ;potentiometers.c: 100: }
 39369                           ;potentiometers.c: 103: if(inputPotsArray[i].controller_resolution == 1) {
 39370                           
 39371                           ; BSR set to: 0
 39372  0015A2  0100               	movlb	0	; () banked
 39373  0015A4  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39374  0015A6  0D03               	mullw	3
 39375  0015A8  0EAC               	movlw	low _inputPotsArray
 39376  0015AA  24F3               	addwf	prodl,w,c
 39377  0015AC  6ED9               	movwf	fsr2l,c
 39378  0015AE  0E02               	movlw	high _inputPotsArray
 39379  0015B0  20F4               	addwfc	prodh,w,c
 39380  0015B2  6EDA               	movwf	fsr2h,c
 39381  0015B4  0102               	movlb	2	; () banked
 39382  0015B6  A0DF               	btfss	indf2,0,c
 39383  0015B8  D095               	goto	l3898
 39384                           
 39385                           ; BSR set to: 2
 39386                           ;potentiometers.c: 104: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] <<
      +                           4;
 39387  0015BA  0100               	movlb	0	; () banked
 39388  0015BC  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39389  0015BE  0D02               	mullw	2
 39390  0015C0  0E20               	movlw	low _potentiometer_filtered_now
 39391  0015C2  24F3               	addwf	prodl,w,c
 39392  0015C4  6ED9               	movwf	fsr2l,c
 39393  0015C6  0E02               	movlw	high _potentiometer_filtered_now
 39394  0015C8  20F4               	addwfc	prodh,w,c
 39395  0015CA  6EDA               	movwf	fsr2h,c
 39396  0015CC  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 39397  0015D0  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 39398  0015D4  3BC2               	swapf	??_readPotentiometers& (0+255),f,b
 39399  0015D6  3BC3               	swapf	(??_readPotentiometers+1)& (0+255),f,b
 39400  0015D8  0EF0               	movlw	240
 39401  0015DA  17C3               	andwf	(??_readPotentiometers+1)& (0+255),f,b
 39402  0015DC  51C2               	movf	??_readPotentiometers& (0+255),w,b
 39403  0015DE  0B0F               	andlw	15
 39404  0015E0  13C3               	iorwf	(??_readPotentiometers+1)& (0+255),f,b
 39405  0015E2  0EF0               	movlw	240
 39406  0015E4  17C2               	andwf	??_readPotentiometers& (0+255),f,b
 39407  0015E6  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39408  0015E8  0D02               	mullw	2
 39409  0015EA  0E20               	movlw	low _potentiometer_filtered_now
 39410  0015EC  24F3               	addwf	prodl,w,c
 39411  0015EE  6ED9               	movwf	fsr2l,c
 39412  0015F0  0E02               	movlw	high _potentiometer_filtered_now
 39413  0015F2  20F4               	addwfc	prodh,w,c
 39414  0015F4  6EDA               	movwf	fsr2h,c
 39415  0015F6  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 39416  0015FA  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 39417                           
 39418                           ; BSR set to: 0
 39419                           ;potentiometers.c: 105: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i
      +                          ], 0x50, 0x3F00, 0, 0x3FFF);
 39420  0015FE  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39421  001600  0D02               	mullw	2
 39422  001602  0E20               	movlw	low _potentiometer_filtered_now
 39423  001604  24F3               	addwf	prodl,w,c
 39424  001606  6ED9               	movwf	fsr2l,c
 39425  001608  0E02               	movlw	high _potentiometer_filtered_now
 39426  00160A  20F4               	addwfc	prodh,w,c
 39427  00160C  6EDA               	movwf	fsr2h,c
 39428  00160E  CFDE F07A          	movff	postinc2,map@x
 39429  001612  CFDD F07B          	movff	postdec2,map@x+1
 39430  001616  0E00               	movlw	0
 39431  001618  BF7B               	btfsc	(map@x+1)& (0+255),7,b
 39432  00161A  0EFF               	movlw	-1
 39433  00161C  6F7C               	movwf	(map@x+2)& (0+255),b
 39434  00161E  6F7D               	movwf	(map@x+3)& (0+255),b
 39435  001620  0E50               	movlw	80
 39436  001622  6F7E               	movwf	map@in_min& (0+255),b
 39437  001624  0E00               	movlw	0
 39438  001626  6F7F               	movwf	(map@in_min+1)& (0+255),b
 39439  001628  0E00               	movlw	0
 39440  00162A  6F80               	movwf	(map@in_min+2)& (0+255),b
 39441  00162C  0E00               	movlw	0
 39442  00162E  6F81               	movwf	(map@in_min+3)& (0+255),b
 39443  001630  0E00               	movlw	0
 39444  001632  6F82               	movwf	map@in_max& (0+255),b
 39445  001634  0E3F               	movlw	63
 39446  001636  6F83               	movwf	(map@in_max+1)& (0+255),b
 39447  001638  0E00               	movlw	0
 39448  00163A  6F84               	movwf	(map@in_max+2)& (0+255),b
 39449  00163C  0E00               	movlw	0
 39450  00163E  6F85               	movwf	(map@in_max+3)& (0+255),b
 39451  001640  0E00               	movlw	0
 39452  001642  6F86               	movwf	map@out_min& (0+255),b
 39453  001644  0E00               	movlw	0
 39454  001646  6F87               	movwf	(map@out_min+1)& (0+255),b
 39455  001648  0E00               	movlw	0
 39456  00164A  6F88               	movwf	(map@out_min+2)& (0+255),b
 39457  00164C  0E00               	movlw	0
 39458  00164E  6F89               	movwf	(map@out_min+3)& (0+255),b
 39459  001650  0EFF               	movlw	255
 39460  001652  6F8A               	movwf	map@out_max& (0+255),b
 39461  001654  0E3F               	movlw	63
 39462  001656  6F8B               	movwf	(map@out_max+1)& (0+255),b
 39463  001658  0E00               	movlw	0
 39464  00165A  6F8C               	movwf	(map@out_max+2)& (0+255),b
 39465  00165C  0E00               	movlw	0
 39466  00165E  6F8D               	movwf	(map@out_max+3)& (0+255),b
 39467  001660  EC6A  F033         	call	_map	;wreg free
 39468  001664  0100               	movlb	0	; () banked
 39469  001666  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39470  001668  0D02               	mullw	2
 39471  00166A  0E20               	movlw	low _potentiometer_filtered_now
 39472  00166C  24F3               	addwf	prodl,w,c
 39473  00166E  6ED9               	movwf	fsr2l,c
 39474  001670  0E02               	movlw	high _potentiometer_filtered_now
 39475  001672  20F4               	addwfc	prodh,w,c
 39476  001674  6EDA               	movwf	fsr2h,c
 39477  001676  C07A  FFDE         	movff	?_map,postinc2
 39478  00167A  C07B  FFDD         	movff	?_map+1,postdec2
 39479                           
 39480                           ; BSR set to: 0
 39481                           ;potentiometers.c: 107: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now
      +                          [i] = 0;}
 39482  00167E  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39483  001680  0D02               	mullw	2
 39484  001682  0E20               	movlw	low _potentiometer_filtered_now
 39485  001684  24F3               	addwf	prodl,w,c
 39486  001686  6ED9               	movwf	fsr2l,c
 39487  001688  0E02               	movlw	high _potentiometer_filtered_now
 39488  00168A  20F4               	addwfc	prodh,w,c
 39489  00168C  6EDA               	movwf	fsr2h,c
 39490  00168E  0E01               	movlw	1
 39491  001690  AEDB               	btfss	plusw2,7,c
 39492  001692  D00C               	goto	l3897
 39493                           
 39494                           ; BSR set to: 0
 39495  001694  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39496  001696  0D02               	mullw	2
 39497  001698  0E20               	movlw	low _potentiometer_filtered_now
 39498  00169A  24F3               	addwf	prodl,w,c
 39499  00169C  6ED9               	movwf	fsr2l,c
 39500  00169E  0E02               	movlw	high _potentiometer_filtered_now
 39501  0016A0  20F4               	addwfc	prodh,w,c
 39502  0016A2  6EDA               	movwf	fsr2h,c
 39503  0016A4  0E00               	movlw	0
 39504  0016A6  6EDE               	movwf	postinc2,c
 39505  0016A8  0E00               	movlw	0
 39506  0016AA  6EDD               	movwf	postdec2,c
 39507  0016AC                     l3897:
 39508                           
 39509                           ; BSR set to: 0
 39510                           ;potentiometers.c: 108: if(potentiometer_filtered_now[i] > 0x3FFF){potentiometer_filtere
      +                          d_now[i] = 0x3FFF;}
 39511  0016AC  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39512  0016AE  0D02               	mullw	2
 39513  0016B0  0E20               	movlw	low _potentiometer_filtered_now
 39514  0016B2  24F3               	addwf	prodl,w,c
 39515  0016B4  6ED9               	movwf	fsr2l,c
 39516  0016B6  0E02               	movlw	high _potentiometer_filtered_now
 39517  0016B8  20F4               	addwfc	prodh,w,c
 39518  0016BA  6EDA               	movwf	fsr2h,c
 39519  0016BC  0E01               	movlw	1
 39520  0016BE  BEDB               	btfsc	plusw2,7,c
 39521  0016C0  D011               	goto	l3898
 39522  0016C2  52DE               	movf	postinc2,f,c
 39523  0016C4  0E40               	movlw	64
 39524  0016C6  5CDE               	subwf	postinc2,w,c
 39525  0016C8  A0D8               	btfss	status,0,c
 39526  0016CA  D00C               	goto	l3898
 39527                           
 39528                           ; BSR set to: 0
 39529  0016CC  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39530  0016CE  0D02               	mullw	2
 39531  0016D0  0E20               	movlw	low _potentiometer_filtered_now
 39532  0016D2  24F3               	addwf	prodl,w,c
 39533  0016D4  6ED9               	movwf	fsr2l,c
 39534  0016D6  0E02               	movlw	high _potentiometer_filtered_now
 39535  0016D8  20F4               	addwfc	prodh,w,c
 39536  0016DA  6EDA               	movwf	fsr2h,c
 39537  0016DC  0EFF               	movlw	255
 39538  0016DE  6EDE               	movwf	postinc2,c
 39539  0016E0  0E3F               	movlw	63
 39540  0016E2  6EDD               	movwf	postdec2,c
 39541  0016E4                     l3898:
 39542                           
 39543                           ;potentiometers.c: 109: }
 39544                           ;potentiometers.c: 116: if(i==iterator_focus) {processPotentiometers(iterator_focus);}
 39545                           
 39546                           ; BSR set to: 0
 39547                           
 39548                           ; BSR set to: 0
 39549  0016E4  0100               	movlb	0	; () banked
 39550  0016E6  51FA               	movf	_iterator_focus& (0+255),w,b
 39551  0016E8  19CD               	xorwf	readPotentiometers@i_3356& (0+255),w,b
 39552  0016EA  A4D8               	btfss	status,2,c
 39553  0016EC  D003               	goto	l3899
 39554                           
 39555                           ; BSR set to: 0
 39556  0016EE  51FA               	movf	_iterator_focus& (0+255),w,b
 39557  0016F0  EC78  F01F         	call	_processPotentiometers
 39558  0016F4                     l3899:
 39559                           
 39560                           ;potentiometers.c: 117: potentiometer_filtered_last[i] = ema_sum[i];
 39561  0016F4  0100               	movlb	0	; () banked
 39562  0016F6  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39563  0016F8  0D02               	mullw	2
 39564  0016FA  0E40               	movlw	low _ema_sum
 39565  0016FC  24F3               	addwf	prodl,w,c
 39566  0016FE  6ED9               	movwf	fsr2l,c
 39567  001700  0E02               	movlw	high _ema_sum
 39568  001702  20F4               	addwfc	prodh,w,c
 39569  001704  6EDA               	movwf	fsr2h,c
 39570  001706  51CD               	movf	readPotentiometers@i_3356& (0+255),w,b
 39571  001708  0D02               	mullw	2
 39572  00170A  0E00               	movlw	low _potentiometer_filtered_last
 39573  00170C  24F3               	addwf	prodl,w,c
 39574  00170E  6EE1               	movwf	fsr1l,c
 39575  001710  0E02               	movlw	high _potentiometer_filtered_last
 39576  001712  20F4               	addwfc	prodh,w,c
 39577  001714  6EE2               	movwf	fsr1h,c
 39578  001716  CFDE FFE6          	movff	postinc2,postinc1
 39579  00171A  CFDD FFE5          	movff	postdec2,postdec1
 39580  00171E                     l3886:
 39581                           
 39582                           ; BSR set to: 0
 39583                           ;potentiometers.c: 119: }
 39584                           ;potentiometers.c: 123: if (count_ISR >= number_of_interrupts) {
 39585                           
 39586                           ; BSR set to: 0
 39587  00171E  0102               	movlb	2	; () banked
 39588  001720  5188               	movf	_number_of_interrupts& (0+255),w,b
 39589  001722  5D84               	subwf	_count_ISR& (0+255),w,b
 39590  001724  5189               	movf	(_number_of_interrupts+1)& (0+255),w,b
 39591  001726  5985               	subwfb	(_count_ISR+1)& (0+255),w,b
 39592  001728  518A               	movf	(_number_of_interrupts+2)& (0+255),w,b
 39593  00172A  5986               	subwfb	(_count_ISR+2)& (0+255),w,b
 39594  00172C  518B               	movf	(_number_of_interrupts+3)& (0+255),w,b
 39595  00172E  5987               	subwfb	(_count_ISR+3)& (0+255),w,b
 39596  001730  A0D8               	btfss	status,0,c
 39597  001732  D007               	goto	l3900
 39598                           
 39599                           ; BSR set to: 2
 39600                           ;potentiometers.c: 125: HYST_VAL = 16;
 39601  001734  0E00               	movlw	0
 39602  001736  0101               	movlb	1	; () banked
 39603  001738  6FEC               	movwf	(_HYST_VAL+1)& (0+255),b
 39604  00173A  0E10               	movlw	16
 39605  00173C  6FEB               	movwf	_HYST_VAL& (0+255),b
 39606                           
 39607                           ; BSR set to: 1
 39608                           ;potentiometers.c: 132: iterator_focus = 255;
 39609  00173E  0100               	movlb	0	; () banked
 39610  001740  69FA               	setf	_iterator_focus& (0+255),b
 39611  001742                     l3900:
 39612                           
 39613                           ; BSR set to: 0
 39614  001742  0100               	movlb	0	; () banked
 39615  001744  2BCD               	incf	readPotentiometers@i_3356& (0+255),f,b
 39616  001746  D5D6               	goto	l22949
 39617  001748                     u37660:
 39618                           
 39619                           ; BSR set to: 0
 39620                           ;potentiometers.c: 133: }
 39621                           ;potentiometers.c: 134: }
 39622                           ;potentiometers.c: 136: FIRST_READING = 1;
 39623  001748  8032               	bsf	readPotentiometers@FIRST_READING/(0+8),readPotentiometers@FIRST_READING& (0+7),c
 39624                           
 39625                           ; BSR set to: 0
 39626  00174A  0012               	return		;funcret
 39627  00174C                     __end_of_readPotentiometers:
 39628                           	opt stack 0
 39629                           tblptru	equ	0xFF8
 39630                           tblptrh	equ	0xFF7
 39631                           tblptrl	equ	0xFF6
 39632                           tablat	equ	0xFF5
 39633                           prodh	equ	0xFF4
 39634                           prodl	equ	0xFF3
 39635                           intcon	equ	0xFF2
 39636                           intcon2	equ	0xFF1
 39637                           postinc0	equ	0xFEE
 39638                           wreg	equ	0xFE8
 39639                           indf1	equ	0xFE7
 39640                           postinc1	equ	0xFE6
 39641                           postdec1	equ	0xFE5
 39642                           fsr1h	equ	0xFE2
 39643                           fsr1l	equ	0xFE1
 39644                           indf2	equ	0xFDF
 39645                           postinc2	equ	0xFDE
 39646                           postdec2	equ	0xFDD
 39647                           plusw2	equ	0xFDB
 39648                           fsr2h	equ	0xFDA
 39649                           fsr2l	equ	0xFD9
 39650                           status	equ	0xFD8
 39651                           
 39652 ;; *************** function _processPotentiometers *****************
 39653 ;; Defined at:
 39654 ;;		line 140 in file "potentiometers.c"
 39655 ;; Parameters:    Size  Location     Type
 39656 ;;  i               1    wreg     unsigned char 
 39657 ;; Auto vars:     Size  Location     Type
 39658 ;;  i               1   19[BANK0 ] unsigned char 
 39659 ;;  highByte        1   18[BANK0 ] unsigned char 
 39660 ;;  lowByte         1   17[BANK0 ] unsigned char 
 39661 ;; Return value:  Size  Location     Type
 39662 ;;                  1    wreg      void 
 39663 ;; Registers used:
 39664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 39665 ;; Tracked objects:
 39666 ;;		On entry : 0/0
 39667 ;;		On exit  : 0/0
 39668 ;;		Unchanged: 0/0
 39669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39671 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39672 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39673 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39674 ;;Total ram usage:        6 bytes
 39675 ;; Hardware stack levels used:    1
 39676 ;; Hardware stack levels required when called:    7
 39677 ;; This function calls:
 39678 ;;		_controlChange
 39679 ;;		_pitchBend
 39680 ;; This function is called by:
 39681 ;;		_readPotentiometers
 39682 ;; This function uses a non-reentrant model
 39683 ;;
 39684                           
 39685                           	psect	text119
 39686  003EF0                     __ptext119:
 39687                           	opt stack 0
 39688  003EF0                     _processPotentiometers:
 39689                           	opt stack 21
 39690                           
 39691                           ; BSR set to: 0
 39692                           ;incstack = 0
 39693                           ;processPotentiometers@i stored from wreg
 39694  003EF0  0100               	movlb	0	; () banked
 39695  003EF2  6F73               	movwf	processPotentiometers@i& (0+255),b
 39696                           
 39697                           ;potentiometers.c: 145: number_to_display = potentiometer_filtered_now[i];
 39698  003EF4  0100               	movlb	0	; () banked
 39699  003EF6  5173               	movf	processPotentiometers@i& (0+255),w,b
 39700  003EF8  0D02               	mullw	2
 39701  003EFA  0E20               	movlw	low _potentiometer_filtered_now
 39702  003EFC  24F3               	addwf	prodl,w,c
 39703  003EFE  6ED9               	movwf	fsr2l,c
 39704  003F00  0E02               	movlw	high _potentiometer_filtered_now
 39705  003F02  20F4               	addwfc	prodh,w,c
 39706  003F04  6EDA               	movwf	fsr2h,c
 39707  003F06  CFDE F05B          	movff	postinc2,_number_to_display
 39708  003F0A  CFDD F05C          	movff	postdec2,_number_to_display+1
 39709                           
 39710                           ;potentiometers.c: 149: if (inputPotsArray[i].controller_resolution == 0){
 39711  003F0E  5173               	movf	processPotentiometers@i& (0+255),w,b
 39712  003F10  0D03               	mullw	3
 39713  003F12  0EAC               	movlw	low _inputPotsArray
 39714  003F14  24F3               	addwf	prodl,w,c
 39715  003F16  6ED9               	movwf	fsr2l,c
 39716  003F18  0E02               	movlw	high _inputPotsArray
 39717  003F1A  20F4               	addwfc	prodh,w,c
 39718  003F1C  6EDA               	movwf	fsr2h,c
 39719  003F1E  0102               	movlb	2	; () banked
 39720  003F20  B0DF               	btfsc	indf2,0,c
 39721  003F22  D088               	goto	l3908
 39722                           
 39723                           ; BSR set to: 2
 39724                           ;potentiometers.c: 152: DISPLAY_MODE = 0;
 39725  003F24  0E00               	movlw	0
 39726  003F26  6E5A               	movwf	_DISPLAY_MODE,c
 39727                           
 39728                           ;potentiometers.c: 153: DIGIT_MODE = 0;
 39729  003F28  0E00               	movlw	0
 39730  003F2A  6E59               	movwf	_DIGIT_MODE,c
 39731                           
 39732                           ; BSR set to: 2
 39733                           ;potentiometers.c: 157: if(inputPotsArray[i].controller_number >= 0) {
 39734  003F2C  0100               	movlb	0	; () banked
 39735  003F2E  5173               	movf	processPotentiometers@i& (0+255),w,b
 39736  003F30  0D03               	mullw	3
 39737  003F32  0E01               	movlw	1
 39738  003F34  26F3               	addwf	prodl,f,c
 39739  003F36  0E00               	movlw	0
 39740  003F38  22F4               	addwfc	prodh,f,c
 39741  003F3A  0EAC               	movlw	low _inputPotsArray
 39742  003F3C  24F3               	addwf	prodl,w,c
 39743  003F3E  6ED9               	movwf	fsr2l,c
 39744  003F40  0E02               	movlw	high _inputPotsArray
 39745  003F42  20F4               	addwfc	prodh,w,c
 39746  003F44  6EDA               	movwf	fsr2h,c
 39747  003F46  0E00               	movlw	0
 39748  003F48  BEDB               	btfsc	plusw2,7,c
 39749  003F4A  D01B               	goto	l3905
 39750                           
 39751                           ; BSR set to: 0
 39752                           ;potentiometers.c: 158: controlChange(channel, inputPotsArray[i].controller_number, pote
      +                          ntiometer_filtered_now[i]);
 39753  003F4C  5173               	movf	processPotentiometers@i& (0+255),w,b
 39754  003F4E  0D03               	mullw	3
 39755  003F50  0E01               	movlw	1
 39756  003F52  26F3               	addwf	prodl,f,c
 39757  003F54  0E00               	movlw	0
 39758  003F56  22F4               	addwfc	prodh,f,c
 39759  003F58  0EAC               	movlw	low _inputPotsArray
 39760  003F5A  24F3               	addwf	prodl,w,c
 39761  003F5C  6ED9               	movwf	fsr2l,c
 39762  003F5E  0E02               	movlw	high _inputPotsArray
 39763  003F60  20F4               	addwfc	prodh,w,c
 39764  003F62  6EDA               	movwf	fsr2h,c
 39765  003F64  50DF               	movf	indf2,w,c
 39766  003F66  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 39767  003F68  5173               	movf	processPotentiometers@i& (0+255),w,b
 39768  003F6A  0D02               	mullw	2
 39769  003F6C  0E20               	movlw	low _potentiometer_filtered_now
 39770  003F6E  24F3               	addwf	prodl,w,c
 39771  003F70  6ED9               	movwf	fsr2l,c
 39772  003F72  0E02               	movlw	high _potentiometer_filtered_now
 39773  003F74  20F4               	addwfc	prodh,w,c
 39774  003F76  6EDA               	movwf	fsr2h,c
 39775  003F78  50DF               	movf	indf2,w,c
 39776  003F7A  6F6C               	movwf	controlChange@value& (0+255),b
 39777  003F7C  51F6               	movf	_channel& (0+255),w,b
 39778  003F7E  EC0D  F049         	call	_controlChange
 39779  003F82                     l3905:
 39780                           
 39781                           ;potentiometers.c: 159: }
 39782                           ;potentiometers.c: 162: if(inputPotsArray[i].controller_number == -1) {
 39783  003F82  0100               	movlb	0	; () banked
 39784  003F84  5173               	movf	processPotentiometers@i& (0+255),w,b
 39785  003F86  0D03               	mullw	3
 39786  003F88  0E01               	movlw	1
 39787  003F8A  26F3               	addwf	prodl,f,c
 39788  003F8C  0E00               	movlw	0
 39789  003F8E  22F4               	addwfc	prodh,f,c
 39790  003F90  0EAC               	movlw	low _inputPotsArray
 39791  003F92  24F3               	addwf	prodl,w,c
 39792  003F94  6ED9               	movwf	fsr2l,c
 39793  003F96  0E02               	movlw	high _inputPotsArray
 39794  003F98  20F4               	addwfc	prodh,w,c
 39795  003F9A  6EDA               	movwf	fsr2h,c
 39796  003F9C  28DE               	incf	postinc2,w,c
 39797  003F9E  A4D8               	btfss	status,2,c
 39798  003FA0  D00A               	goto	l3906
 39799                           
 39800                           ; BSR set to: 0
 39801                           ;potentiometers.c: 163: velocity = potentiometer_filtered_now[i];
 39802  003FA2  5173               	movf	processPotentiometers@i& (0+255),w,b
 39803  003FA4  0D02               	mullw	2
 39804  003FA6  0E20               	movlw	low _potentiometer_filtered_now
 39805  003FA8  24F3               	addwf	prodl,w,c
 39806  003FAA  6ED9               	movwf	fsr2l,c
 39807  003FAC  0E02               	movlw	high _potentiometer_filtered_now
 39808  003FAE  20F4               	addwfc	prodh,w,c
 39809  003FB0  6EDA               	movwf	fsr2h,c
 39810  003FB2  50DF               	movf	indf2,w,c
 39811  003FB4  6FFD               	movwf	_velocity& (0+255),b
 39812  003FB6                     l3906:
 39813                           
 39814                           ; BSR set to: 0
 39815                           ;potentiometers.c: 164: }
 39816                           ;potentiometers.c: 166: if(inputPotsArray[i].controller_number == -2) {
 39817  003FB6  5173               	movf	processPotentiometers@i& (0+255),w,b
 39818  003FB8  0D03               	mullw	3
 39819  003FBA  0E01               	movlw	1
 39820  003FBC  26F3               	addwf	prodl,f,c
 39821  003FBE  0E00               	movlw	0
 39822  003FC0  22F4               	addwfc	prodh,f,c
 39823  003FC2  0EAC               	movlw	low _inputPotsArray
 39824  003FC4  24F3               	addwf	prodl,w,c
 39825  003FC6  6ED9               	movwf	fsr2l,c
 39826  003FC8  0E02               	movlw	high _inputPotsArray
 39827  003FCA  20F4               	addwfc	prodh,w,c
 39828  003FCC  6EDA               	movwf	fsr2h,c
 39829  003FCE  0EFE               	movlw	254
 39830  003FD0  18DE               	xorwf	postinc2,w,c
 39831  003FD2  A4D8               	btfss	status,2,c
 39832  003FD4  D00F               	goto	l3907
 39833                           
 39834                           ; BSR set to: 0
 39835                           ;potentiometers.c: 167: pitchBend(channel, 0x00, potentiometer_filtered_now[i]);
 39836  003FD6  0E00               	movlw	0
 39837  003FD8  6F6B               	movwf	pitchBend@lowByte& (0+255),b
 39838  003FDA  5173               	movf	processPotentiometers@i& (0+255),w,b
 39839  003FDC  0D02               	mullw	2
 39840  003FDE  0E20               	movlw	low _potentiometer_filtered_now
 39841  003FE0  24F3               	addwf	prodl,w,c
 39842  003FE2  6ED9               	movwf	fsr2l,c
 39843  003FE4  0E02               	movlw	high _potentiometer_filtered_now
 39844  003FE6  20F4               	addwfc	prodh,w,c
 39845  003FE8  6EDA               	movwf	fsr2h,c
 39846  003FEA  50DF               	movf	indf2,w,c
 39847  003FEC  6F6C               	movwf	pitchBend@highByte& (0+255),b
 39848  003FEE  51F6               	movf	_channel& (0+255),w,b
 39849  003FF0  ECF3  F048         	call	_pitchBend
 39850  003FF4                     l3907:
 39851                           
 39852                           ;potentiometers.c: 168: }
 39853                           ;potentiometers.c: 171: if(inputPotsArray[i].controller_number == -3) {
 39854  003FF4  0100               	movlb	0	; () banked
 39855  003FF6  5173               	movf	processPotentiometers@i& (0+255),w,b
 39856  003FF8  0D03               	mullw	3
 39857  003FFA  0E01               	movlw	1
 39858  003FFC  26F3               	addwf	prodl,f,c
 39859  003FFE  0E00               	movlw	0
 39860  004000  22F4               	addwfc	prodh,f,c
 39861  004002  0EAC               	movlw	low _inputPotsArray
 39862  004004  24F3               	addwf	prodl,w,c
 39863  004006  6ED9               	movwf	fsr2l,c
 39864  004008  0E02               	movlw	high _inputPotsArray
 39865  00400A  20F4               	addwfc	prodh,w,c
 39866  00400C  6EDA               	movwf	fsr2h,c
 39867  00400E  0EFD               	movlw	253
 39868  004010  18DE               	xorwf	postinc2,w,c
 39869  004012  A4D8               	btfss	status,2,c
 39870  004014  D00F               	goto	l3908
 39871                           
 39872                           ; BSR set to: 0
 39873                           ;potentiometers.c: 172: controlChange(channel, modulation_wheel_MSB, potentiometer_filte
      +                          red_now[i]);
 39874  004016  0E01               	movlw	1
 39875  004018  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 39876  00401A  5173               	movf	processPotentiometers@i& (0+255),w,b
 39877  00401C  0D02               	mullw	2
 39878  00401E  0E20               	movlw	low _potentiometer_filtered_now
 39879  004020  24F3               	addwf	prodl,w,c
 39880  004022  6ED9               	movwf	fsr2l,c
 39881  004024  0E02               	movlw	high _potentiometer_filtered_now
 39882  004026  20F4               	addwfc	prodh,w,c
 39883  004028  6EDA               	movwf	fsr2h,c
 39884  00402A  50DF               	movf	indf2,w,c
 39885  00402C  6F6C               	movwf	controlChange@value& (0+255),b
 39886  00402E  51F6               	movf	_channel& (0+255),w,b
 39887  004030  EC0D  F049         	call	_controlChange
 39888  004034                     l3908:
 39889                           
 39890                           ;potentiometers.c: 173: }
 39891                           ;potentiometers.c: 174: }
 39892                           ;potentiometers.c: 177: if (inputPotsArray[i].controller_resolution == 1){
 39893  004034  0100               	movlb	0	; () banked
 39894  004036  5173               	movf	processPotentiometers@i& (0+255),w,b
 39895  004038  0D03               	mullw	3
 39896  00403A  0EAC               	movlw	low _inputPotsArray
 39897  00403C  24F3               	addwf	prodl,w,c
 39898  00403E  6ED9               	movwf	fsr2l,c
 39899  004040  0E02               	movlw	high _inputPotsArray
 39900  004042  20F4               	addwfc	prodh,w,c
 39901  004044  6EDA               	movwf	fsr2h,c
 39902  004046  0102               	movlb	2	; () banked
 39903  004048  A0DF               	btfss	indf2,0,c
 39904  00404A  0012               	return	
 39905                           
 39906                           ; BSR set to: 2
 39907                           ;potentiometers.c: 180: DISPLAY_MODE = 0;
 39908  00404C  0E00               	movlw	0
 39909  00404E  6E5A               	movwf	_DISPLAY_MODE,c
 39910                           
 39911                           ;potentiometers.c: 181: DIGIT_MODE = 2;
 39912  004050  0E02               	movlw	2
 39913  004052  6E59               	movwf	_DIGIT_MODE,c
 39914                           
 39915                           ; BSR set to: 2
 39916                           ;potentiometers.c: 185: unsigned char lowByte = (potentiometer_filtered_now[i]) & 0x7F;
 39917  004054  0100               	movlb	0	; () banked
 39918  004056  5173               	movf	processPotentiometers@i& (0+255),w,b
 39919  004058  0D02               	mullw	2
 39920  00405A  0E20               	movlw	low _potentiometer_filtered_now
 39921  00405C  24F3               	addwf	prodl,w,c
 39922  00405E  6ED9               	movwf	fsr2l,c
 39923  004060  0E02               	movlw	high _potentiometer_filtered_now
 39924  004062  20F4               	addwfc	prodh,w,c
 39925  004064  6EDA               	movwf	fsr2h,c
 39926  004066  50DF               	movf	indf2,w,c
 39927  004068  0B7F               	andlw	127
 39928  00406A  6F71               	movwf	processPotentiometers@lowByte& (0+255),b
 39929                           
 39930                           ; BSR set to: 0
 39931                           ;potentiometers.c: 186: unsigned char highByte = (potentiometer_filtered_now[i] >> 7) & 
      +                          0x7F;
 39932  00406C  5173               	movf	processPotentiometers@i& (0+255),w,b
 39933  00406E  0D02               	mullw	2
 39934  004070  0E20               	movlw	low _potentiometer_filtered_now
 39935  004072  24F3               	addwf	prodl,w,c
 39936  004074  6ED9               	movwf	fsr2l,c
 39937  004076  0E02               	movlw	high _potentiometer_filtered_now
 39938  004078  20F4               	addwfc	prodh,w,c
 39939  00407A  6EDA               	movwf	fsr2h,c
 39940  00407C  CFDE F06E          	movff	postinc2,??_processPotentiometers
 39941  004080  CFDD F06F          	movff	postdec2,??_processPotentiometers+1
 39942  004084  0E07               	movlw	7
 39943  004086  6F70               	movwf	(??_processPotentiometers+2)& (0+255),b
 39944  004088                     u33805:
 39945  004088  356F               	rlcf	(??_processPotentiometers+1)& (0+255),w,b
 39946  00408A  336F               	rrcf	(??_processPotentiometers+1)& (0+255),f,b
 39947  00408C  336E               	rrcf	??_processPotentiometers& (0+255),f,b
 39948  00408E  2F70               	decfsz	(??_processPotentiometers+2)& (0+255),f,b
 39949  004090  D7FB               	goto	u33805
 39950  004092  516E               	movf	??_processPotentiometers& (0+255),w,b
 39951  004094  0B7F               	andlw	127
 39952  004096  6F72               	movwf	processPotentiometers@highByte& (0+255),b
 39953                           
 39954                           ; BSR set to: 0
 39955                           ;potentiometers.c: 189: if(inputPotsArray[i].controller_number_two_byte >= 0) {
 39956  004098  5173               	movf	processPotentiometers@i& (0+255),w,b
 39957  00409A  0D03               	mullw	3
 39958  00409C  0E02               	movlw	2
 39959  00409E  26F3               	addwf	prodl,f,c
 39960  0040A0  0E00               	movlw	0
 39961  0040A2  22F4               	addwfc	prodh,f,c
 39962  0040A4  0EAC               	movlw	low _inputPotsArray
 39963  0040A6  24F3               	addwf	prodl,w,c
 39964  0040A8  6ED9               	movwf	fsr2l,c
 39965  0040AA  0E02               	movlw	high _inputPotsArray
 39966  0040AC  20F4               	addwfc	prodh,w,c
 39967  0040AE  6EDA               	movwf	fsr2h,c
 39968  0040B0  0E00               	movlw	0
 39969  0040B2  BEDB               	btfsc	plusw2,7,c
 39970  0040B4  D028               	goto	l3910
 39971                           
 39972                           ; BSR set to: 0
 39973                           ;potentiometers.c: 190: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte, highByte);
 39974  0040B6  5173               	movf	processPotentiometers@i& (0+255),w,b
 39975  0040B8  0D03               	mullw	3
 39976  0040BA  0E02               	movlw	2
 39977  0040BC  26F3               	addwf	prodl,f,c
 39978  0040BE  0E00               	movlw	0
 39979  0040C0  22F4               	addwfc	prodh,f,c
 39980  0040C2  0EAC               	movlw	low _inputPotsArray
 39981  0040C4  24F3               	addwf	prodl,w,c
 39982  0040C6  6ED9               	movwf	fsr2l,c
 39983  0040C8  0E02               	movlw	high _inputPotsArray
 39984  0040CA  20F4               	addwfc	prodh,w,c
 39985  0040CC  6EDA               	movwf	fsr2h,c
 39986  0040CE  50DF               	movf	indf2,w,c
 39987  0040D0  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 39988  0040D2  C072  F06C         	movff	processPotentiometers@highByte,controlChange@value
 39989  0040D6  51F6               	movf	_channel& (0+255),w,b
 39990  0040D8  EC0D  F049         	call	_controlChange
 39991                           
 39992                           ;potentiometers.c: 191: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte + 32, lowByte);
 39993  0040DC  0100               	movlb	0	; () banked
 39994  0040DE  5173               	movf	processPotentiometers@i& (0+255),w,b
 39995  0040E0  0D03               	mullw	3
 39996  0040E2  0E02               	movlw	2
 39997  0040E4  26F3               	addwf	prodl,f,c
 39998  0040E6  0E00               	movlw	0
 39999  0040E8  22F4               	addwfc	prodh,f,c
 40000  0040EA  0EAC               	movlw	low _inputPotsArray
 40001  0040EC  24F3               	addwf	prodl,w,c
 40002  0040EE  6ED9               	movwf	fsr2l,c
 40003  0040F0  0E02               	movlw	high _inputPotsArray
 40004  0040F2  20F4               	addwfc	prodh,w,c
 40005  0040F4  6EDA               	movwf	fsr2h,c
 40006  0040F6  50DF               	movf	indf2,w,c
 40007  0040F8  0F20               	addlw	32
 40008  0040FA  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40009  0040FC  C071  F06C         	movff	processPotentiometers@lowByte,controlChange@value
 40010  004100  51F6               	movf	_channel& (0+255),w,b
 40011  004102  EC0D  F049         	call	_controlChange
 40012  004106                     l3910:
 40013                           
 40014                           ;potentiometers.c: 192: }
 40015                           ;potentiometers.c: 194: if(inputPotsArray[i].controller_number_two_byte == -1) {
 40016  004106  0100               	movlb	0	; () banked
 40017  004108  5173               	movf	processPotentiometers@i& (0+255),w,b
 40018  00410A  0D03               	mullw	3
 40019  00410C  0E02               	movlw	2
 40020  00410E  26F3               	addwf	prodl,f,c
 40021  004110  0E00               	movlw	0
 40022  004112  22F4               	addwfc	prodh,f,c
 40023  004114  0EAC               	movlw	low _inputPotsArray
 40024  004116  24F3               	addwf	prodl,w,c
 40025  004118  6ED9               	movwf	fsr2l,c
 40026  00411A  0E02               	movlw	high _inputPotsArray
 40027  00411C  20F4               	addwfc	prodh,w,c
 40028  00411E  6EDA               	movwf	fsr2h,c
 40029  004120  28DE               	incf	postinc2,w,c
 40030  004122  B4D8               	btfsc	status,2,c
 40031                           
 40032                           ; BSR set to: 0
 40033                           ;potentiometers.c: 195: velocity = highByte;
 40034  004124  C072  F0FD         	movff	processPotentiometers@highByte,_velocity
 40035                           
 40036                           ; BSR set to: 0
 40037                           ;potentiometers.c: 196: }
 40038                           ;potentiometers.c: 198: if(inputPotsArray[i].controller_number_two_byte == -2) {
 40039                           
 40040                           ; BSR set to: 0
 40041  004128  5173               	movf	processPotentiometers@i& (0+255),w,b
 40042  00412A  0D03               	mullw	3
 40043  00412C  0E02               	movlw	2
 40044  00412E  26F3               	addwf	prodl,f,c
 40045  004130  0E00               	movlw	0
 40046  004132  22F4               	addwfc	prodh,f,c
 40047  004134  0EAC               	movlw	low _inputPotsArray
 40048  004136  24F3               	addwf	prodl,w,c
 40049  004138  6ED9               	movwf	fsr2l,c
 40050  00413A  0E02               	movlw	high _inputPotsArray
 40051  00413C  20F4               	addwfc	prodh,w,c
 40052  00413E  6EDA               	movwf	fsr2h,c
 40053  004140  0EFE               	movlw	254
 40054  004142  18DE               	xorwf	postinc2,w,c
 40055  004144  A4D8               	btfss	status,2,c
 40056  004146  D007               	goto	l3912
 40057                           
 40058                           ; BSR set to: 0
 40059                           ;potentiometers.c: 199: pitchBend(channel, lowByte, highByte);
 40060  004148  C071  F06B         	movff	processPotentiometers@lowByte,pitchBend@lowByte
 40061  00414C  C072  F06C         	movff	processPotentiometers@highByte,pitchBend@highByte
 40062  004150  51F6               	movf	_channel& (0+255),w,b
 40063  004152  ECF3  F048         	call	_pitchBend
 40064  004156                     l3912:
 40065                           
 40066                           ;potentiometers.c: 200: }
 40067                           ;potentiometers.c: 202: if(inputPotsArray[i].controller_number_two_byte == -3) {
 40068  004156  0100               	movlb	0	; () banked
 40069  004158  5173               	movf	processPotentiometers@i& (0+255),w,b
 40070  00415A  0D03               	mullw	3
 40071  00415C  0E02               	movlw	2
 40072  00415E  26F3               	addwf	prodl,f,c
 40073  004160  0E00               	movlw	0
 40074  004162  22F4               	addwfc	prodh,f,c
 40075  004164  0EAC               	movlw	low _inputPotsArray
 40076  004166  24F3               	addwf	prodl,w,c
 40077  004168  6ED9               	movwf	fsr2l,c
 40078  00416A  0E02               	movlw	high _inputPotsArray
 40079  00416C  20F4               	addwfc	prodh,w,c
 40080  00416E  6EDA               	movwf	fsr2h,c
 40081  004170  0EFD               	movlw	253
 40082  004172  18DE               	xorwf	postinc2,w,c
 40083  004174  A4D8               	btfss	status,2,c
 40084  004176  0012               	return	
 40085                           
 40086                           ; BSR set to: 0
 40087                           ;potentiometers.c: 203: controlChange(channel, modulation_wheel_MSB, highByte);
 40088  004178  0E01               	movlw	1
 40089  00417A  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40090  00417C  C072  F06C         	movff	processPotentiometers@highByte,controlChange@value
 40091  004180  51F6               	movf	_channel& (0+255),w,b
 40092  004182  EC0D  F049         	call	_controlChange
 40093                           
 40094                           ;potentiometers.c: 204: controlChange(channel, modulation_wheel_MSB + 32, lowByte);
 40095  004186  0E21               	movlw	33
 40096  004188  0100               	movlb	0	; () banked
 40097  00418A  6F6B               	movwf	controlChange@controllerNumber& (0+255),b
 40098  00418C  C071  F06C         	movff	processPotentiometers@lowByte,controlChange@value
 40099  004190  51F6               	movf	_channel& (0+255),w,b
 40100  004192  EC0D  F049         	call	_controlChange
 40101  004196  0012               	return	
 40102  004198                     __end_of_processPotentiometers:
 40103                           	opt stack 0
 40104                           tblptru	equ	0xFF8
 40105                           tblptrh	equ	0xFF7
 40106                           tblptrl	equ	0xFF6
 40107                           tablat	equ	0xFF5
 40108                           prodh	equ	0xFF4
 40109                           prodl	equ	0xFF3
 40110                           intcon	equ	0xFF2
 40111                           intcon2	equ	0xFF1
 40112                           postinc0	equ	0xFEE
 40113                           wreg	equ	0xFE8
 40114                           indf1	equ	0xFE7
 40115                           postinc1	equ	0xFE6
 40116                           postdec1	equ	0xFE5
 40117                           fsr1h	equ	0xFE2
 40118                           fsr1l	equ	0xFE1
 40119                           indf2	equ	0xFDF
 40120                           postinc2	equ	0xFDE
 40121                           postdec2	equ	0xFDD
 40122                           plusw2	equ	0xFDB
 40123                           fsr2h	equ	0xFDA
 40124                           fsr2l	equ	0xFD9
 40125                           status	equ	0xFD8
 40126                           
 40127 ;; *************** function _pitchBend *****************
 40128 ;; Defined at:
 40129 ;;		line 153 in file "midi.c"
 40130 ;; Parameters:    Size  Location     Type
 40131 ;;  channel         1    wreg     unsigned char 
 40132 ;;  lowByte         1   11[BANK0 ] unsigned char 
 40133 ;;  highByte        1   12[BANK0 ] unsigned char 
 40134 ;; Auto vars:     Size  Location     Type
 40135 ;;  channel         1   13[BANK0 ] unsigned char 
 40136 ;; Return value:  Size  Location     Type
 40137 ;;                  1    wreg      void 
 40138 ;; Registers used:
 40139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 40140 ;; Tracked objects:
 40141 ;;		On entry : 0/0
 40142 ;;		On exit  : 0/0
 40143 ;;		Unchanged: 0/0
 40144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40145 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40148 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40149 ;;Total ram usage:        3 bytes
 40150 ;; Hardware stack levels used:    1
 40151 ;; Hardware stack levels required when called:    6
 40152 ;; This function calls:
 40153 ;;		_sendOut
 40154 ;;		_sendUSB
 40155 ;; This function is called by:
 40156 ;;		_processPotentiometers
 40157 ;; This function uses a non-reentrant model
 40158 ;;
 40159                           
 40160                           	psect	text120
 40161  0091E6                     __ptext120:
 40162                           	opt stack 0
 40163  0091E6                     _pitchBend:
 40164                           	opt stack 21
 40165                           
 40166                           ;incstack = 0
 40167                           ;pitchBend@channel stored from wreg
 40168  0091E6  0100               	movlb	0	; () banked
 40169  0091E8  6F6D               	movwf	pitchBend@channel& (0+255),b
 40170                           
 40171                           ;midi.c: 155: statusByte = channel | pitch_bend;
 40172  0091EA  0100               	movlb	0	; () banked
 40173  0091EC  516D               	movf	pitchBend@channel& (0+255),w,b
 40174  0091EE  09E0               	iorlw	224
 40175  0091F0  6FF5               	movwf	_statusByte& (0+255),b
 40176                           
 40177                           ; BSR set to: 0
 40178                           ;midi.c: 158: sendUSB(statusByte, lowByte, highByte);
 40179  0091F2  C06B  F060         	movff	pitchBend@lowByte,sendUSB@message2
 40180  0091F6  C06C  F061         	movff	pitchBend@highByte,sendUSB@message3
 40181  0091FA  51F5               	movf	_statusByte& (0+255),w,b
 40182  0091FC  EC91  F039         	call	_sendUSB
 40183                           
 40184                           ;midi.c: 161: sendOut(statusByte);
 40185  009200  0100               	movlb	0	; () banked
 40186  009202  51F5               	movf	_statusByte& (0+255),w,b
 40187  009204  EC89  F04A         	call	_sendOut
 40188                           
 40189                           ;midi.c: 162: sendOut(lowByte);
 40190  009208  0100               	movlb	0	; () banked
 40191  00920A  516B               	movf	pitchBend@lowByte& (0+255),w,b
 40192  00920C  EC89  F04A         	call	_sendOut
 40193                           
 40194                           ;midi.c: 163: sendOut(highByte);
 40195  009210  0100               	movlb	0	; () banked
 40196  009212  516C               	movf	pitchBend@highByte& (0+255),w,b
 40197  009214  EC89  F04A         	call	_sendOut
 40198  009218  0012               	return		;funcret
 40199  00921A                     __end_of_pitchBend:
 40200                           	opt stack 0
 40201                           tblptru	equ	0xFF8
 40202                           tblptrh	equ	0xFF7
 40203                           tblptrl	equ	0xFF6
 40204                           tablat	equ	0xFF5
 40205                           prodh	equ	0xFF4
 40206                           prodl	equ	0xFF3
 40207                           intcon	equ	0xFF2
 40208                           intcon2	equ	0xFF1
 40209                           postinc0	equ	0xFEE
 40210                           wreg	equ	0xFE8
 40211                           indf1	equ	0xFE7
 40212                           postinc1	equ	0xFE6
 40213                           postdec1	equ	0xFE5
 40214                           fsr1h	equ	0xFE2
 40215                           fsr1l	equ	0xFE1
 40216                           indf2	equ	0xFDF
 40217                           postinc2	equ	0xFDE
 40218                           postdec2	equ	0xFDD
 40219                           plusw2	equ	0xFDB
 40220                           fsr2h	equ	0xFDA
 40221                           fsr2l	equ	0xFD9
 40222                           status	equ	0xFD8
 40223                           
 40224 ;; *************** function _controlChange *****************
 40225 ;; Defined at:
 40226 ;;		line 139 in file "midi.c"
 40227 ;; Parameters:    Size  Location     Type
 40228 ;;  channel         1    wreg     unsigned char 
 40229 ;;  controllerNu    1   11[BANK0 ] unsigned char 
 40230 ;;  value           1   12[BANK0 ] unsigned char 
 40231 ;; Auto vars:     Size  Location     Type
 40232 ;;  channel         1   13[BANK0 ] unsigned char 
 40233 ;; Return value:  Size  Location     Type
 40234 ;;                  1    wreg      void 
 40235 ;; Registers used:
 40236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 40237 ;; Tracked objects:
 40238 ;;		On entry : 0/0
 40239 ;;		On exit  : 0/0
 40240 ;;		Unchanged: 0/0
 40241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40242 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40245 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40246 ;;Total ram usage:        3 bytes
 40247 ;; Hardware stack levels used:    1
 40248 ;; Hardware stack levels required when called:    6
 40249 ;; This function calls:
 40250 ;;		_sendOut
 40251 ;;		_sendUSB
 40252 ;; This function is called by:
 40253 ;;		_processDrumpad
 40254 ;;		_processPotentiometers
 40255 ;;		_panic_button
 40256 ;; This function uses a non-reentrant model
 40257 ;;
 40258                           
 40259                           	psect	text121
 40260  00921A                     __ptext121:
 40261                           	opt stack 0
 40262  00921A                     _controlChange:
 40263                           	opt stack 23
 40264                           
 40265                           ;incstack = 0
 40266                           ;controlChange@channel stored from wreg
 40267  00921A  0100               	movlb	0	; () banked
 40268  00921C  6F6D               	movwf	controlChange@channel& (0+255),b
 40269                           
 40270                           ;midi.c: 141: statusByte = channel | control_change;
 40271  00921E  0100               	movlb	0	; () banked
 40272  009220  516D               	movf	controlChange@channel& (0+255),w,b
 40273  009222  09B0               	iorlw	176
 40274  009224  6FF5               	movwf	_statusByte& (0+255),b
 40275                           
 40276                           ; BSR set to: 0
 40277                           ;midi.c: 144: sendUSB(statusByte, controllerNumber, value);
 40278  009226  C06B  F060         	movff	controlChange@controllerNumber,sendUSB@message2
 40279  00922A  C06C  F061         	movff	controlChange@value,sendUSB@message3
 40280  00922E  51F5               	movf	_statusByte& (0+255),w,b
 40281  009230  EC91  F039         	call	_sendUSB
 40282                           
 40283                           ;midi.c: 147: sendOut(statusByte);
 40284  009234  0100               	movlb	0	; () banked
 40285  009236  51F5               	movf	_statusByte& (0+255),w,b
 40286  009238  EC89  F04A         	call	_sendOut
 40287                           
 40288                           ;midi.c: 148: sendOut(controllerNumber);
 40289  00923C  0100               	movlb	0	; () banked
 40290  00923E  516B               	movf	controlChange@controllerNumber& (0+255),w,b
 40291  009240  EC89  F04A         	call	_sendOut
 40292                           
 40293                           ;midi.c: 149: sendOut(value);
 40294  009244  0100               	movlb	0	; () banked
 40295  009246  516C               	movf	controlChange@value& (0+255),w,b
 40296  009248  EC89  F04A         	call	_sendOut
 40297  00924C  0012               	return		;funcret
 40298  00924E                     __end_of_controlChange:
 40299                           	opt stack 0
 40300                           tblptru	equ	0xFF8
 40301                           tblptrh	equ	0xFF7
 40302                           tblptrl	equ	0xFF6
 40303                           tablat	equ	0xFF5
 40304                           prodh	equ	0xFF4
 40305                           prodl	equ	0xFF3
 40306                           intcon	equ	0xFF2
 40307                           intcon2	equ	0xFF1
 40308                           postinc0	equ	0xFEE
 40309                           wreg	equ	0xFE8
 40310                           indf1	equ	0xFE7
 40311                           postinc1	equ	0xFE6
 40312                           postdec1	equ	0xFE5
 40313                           fsr1h	equ	0xFE2
 40314                           fsr1l	equ	0xFE1
 40315                           indf2	equ	0xFDF
 40316                           postinc2	equ	0xFDE
 40317                           postdec2	equ	0xFDD
 40318                           plusw2	equ	0xFDB
 40319                           fsr2h	equ	0xFDA
 40320                           fsr2l	equ	0xFD9
 40321                           status	equ	0xFD8
 40322                           
 40323 ;; *************** function _sendUSB *****************
 40324 ;; Defined at:
 40325 ;;		line 32 in file "midi.c"
 40326 ;; Parameters:    Size  Location     Type
 40327 ;;  message1        1    wreg     unsigned char 
 40328 ;;  message2        1    0[BANK0 ] unsigned char 
 40329 ;;  message3        1    1[BANK0 ] unsigned char 
 40330 ;; Auto vars:     Size  Location     Type
 40331 ;;  message1        1    5[BANK0 ] unsigned char 
 40332 ;;  ii              1   10[BANK0 ] unsigned char 
 40333 ;;  i               1    9[BANK0 ] unsigned char 
 40334 ;;  midiMessage     3    6[BANK0 ] unsigned char [3]
 40335 ;; Return value:  Size  Location     Type
 40336 ;;                  1    wreg      void 
 40337 ;; Registers used:
 40338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 40339 ;; Tracked objects:
 40340 ;;		On entry : 0/0
 40341 ;;		On exit  : 0/0
 40342 ;;		Unchanged: 0/0
 40343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40344 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40345 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40346 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40347 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40348 ;;Total ram usage:       11 bytes
 40349 ;; Hardware stack levels used:    1
 40350 ;; Hardware stack levels required when called:    5
 40351 ;; This function calls:
 40352 ;;		Nothing
 40353 ;; This function is called by:
 40354 ;;		_noteOff
 40355 ;;		_noteOn
 40356 ;;		_noteOffDrum
 40357 ;;		_noteOnDrum
 40358 ;;		_controlChange
 40359 ;;		_pitchBend
 40360 ;;		_programChange
 40361 ;; This function uses a non-reentrant model
 40362 ;;
 40363                           
 40364                           	psect	text122
 40365  007322                     __ptext122:
 40366                           	opt stack 0
 40367  007322                     _sendUSB:
 40368                           	opt stack 23
 40369                           
 40370                           ;incstack = 0
 40371                           ;sendUSB@message1 stored from wreg
 40372  007322  0100               	movlb	0	; () banked
 40373  007324  6F65               	movwf	sendUSB@message1& (0+255),b
 40374                           
 40375                           ;midi.c: 34: unsigned char midiMessage[3];
 40376                           ;midi.c: 36: midiMessage[0]=message1;
 40377  007326  C065  F066         	movff	sendUSB@message1,sendUSB@midiMessage
 40378                           
 40379                           ;midi.c: 37: midiMessage[1]=message2;
 40380  00732A  C060  F067         	movff	sendUSB@message2,sendUSB@midiMessage+1
 40381                           
 40382                           ;midi.c: 38: midiMessage[2]=message3;
 40383  00732E  C061  F068         	movff	sendUSB@message3,sendUSB@midiMessage+2
 40384                           
 40385                           ;midi.c: 40: RA5 = 0;
 40386  007332  9A80               	bcf	3968,5,c	;volatile
 40387                           
 40388                           ;midi.c: 41: RB2 = 1;
 40389  007334  8481               	bsf	3969,2,c	;volatile
 40390                           
 40391                           ;midi.c: 42: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40392  007336  0E53               	movlw	83
 40393  007338                     u44847:
 40394  007338  2EE8               	decfsz	wreg,f,c
 40395  00733A  D7FE               	bra	u44847
 40396  00733C  F000               	nop	
 40397                           
 40398                           ;midi.c: 44: for(unsigned char i=0;i<3;i++){
 40399  00733E  0E00               	movlw	0
 40400  007340  0100               	movlb	0	; () banked
 40401  007342  6F69               	movwf	sendUSB@i& (0+255),b
 40402  007344                     l16085:
 40403                           
 40404                           ; BSR set to: 0
 40405  007344  0E02               	movlw	2
 40406  007346  6569               	cpfsgt	sendUSB@i& (0+255),b
 40407  007348  D001               	goto	l441
 40408  00734A  D036               	goto	u22540
 40409  00734C                     l441:
 40410                           
 40411                           ; BSR set to: 0
 40412                           ;midi.c: 45: for(unsigned char ii=0;ii<8;ii++){
 40413                           
 40414                           ; BSR set to: 0
 40415  00734C  0E00               	movlw	0
 40416  00734E  6F6A               	movwf	sendUSB@ii& (0+255),b
 40417  007350                     l16091:
 40418                           
 40419                           ; BSR set to: 0
 40420  007350  0E07               	movlw	7
 40421  007352  656A               	cpfsgt	sendUSB@ii& (0+255),b
 40422  007354  D001               	goto	l443
 40423  007356  D02E               	goto	u22530
 40424  007358                     l443:
 40425                           
 40426                           ; BSR set to: 0
 40427                           ;midi.c: 48: RE2 = !!(midiMessage[i] & (1 << ii));
 40428                           
 40429                           ; BSR set to: 0
 40430  007358  5169               	movf	sendUSB@i& (0+255),w,b
 40431  00735A  0D01               	mullw	1
 40432  00735C  0E66               	movlw	low sendUSB@midiMessage
 40433  00735E  24F3               	addwf	prodl,w,c
 40434  007360  6ED9               	movwf	fsr2l,c
 40435  007362  0E00               	movlw	high sendUSB@midiMessage
 40436  007364  20F4               	addwfc	prodh,w,c
 40437  007366  6EDA               	movwf	fsr2h,c
 40438  007368  50DF               	movf	indf2,w,c
 40439  00736A  6F62               	movwf	??_sendUSB& (0+255),b
 40440  00736C  C06A  F063         	movff	sendUSB@ii,??_sendUSB+1
 40441  007370  0E01               	movlw	1
 40442  007372  6F64               	movwf	(??_sendUSB+2)& (0+255),b
 40443  007374  2B63               	incf	(??_sendUSB+1)& (0+255),f,b
 40444  007376  D002               	goto	u22504
 40445  007378                     u22505:
 40446  007378  90D8               	bcf	status,0,c
 40447  00737A  3764               	rlcf	(??_sendUSB+2)& (0+255),f,b
 40448  00737C                     u22504:
 40449  00737C  2F63               	decfsz	(??_sendUSB+1)& (0+255),f,b
 40450  00737E  D7FC               	goto	u22505
 40451  007380  0100               	movlb	0	; () banked
 40452  007382  5164               	movf	(??_sendUSB+2)& (0+255),w,b
 40453  007384  1562               	andwf	??_sendUSB& (0+255),w,b
 40454  007386  0900               	iorlw	0
 40455  007388  B4D8               	btfsc	status,2,c
 40456  00738A  D002               	goto	u22510
 40457  00738C  8484               	bsf	3972,2,c	;volatile
 40458  00738E  D001               	goto	u22525
 40459  007390                     u22510:
 40460  007390  9484               	bcf	3972,2,c	;volatile
 40461  007392                     u22525:
 40462                           
 40463                           ;midi.c: 50: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40464  007392  0E53               	movlw	83
 40465  007394                     u44857:
 40466  007394  2EE8               	decfsz	wreg,f,c
 40467  007396  D7FE               	bra	u44857
 40468  007398  F000               	nop	
 40469                           
 40470                           ;midi.c: 52: RA5 = 1;
 40471  00739A  8A80               	bsf	3968,5,c	;volatile
 40472                           
 40473                           ;midi.c: 53: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40474  00739C  0E53               	movlw	83
 40475  00739E                     u44867:
 40476  00739E  2EE8               	decfsz	wreg,f,c
 40477  0073A0  D7FE               	bra	u44867
 40478  0073A2  F000               	nop	
 40479                           
 40480                           ;midi.c: 55: RA5 = 0;
 40481  0073A4  9A80               	bcf	3968,5,c	;volatile
 40482                           
 40483                           ;midi.c: 56: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40484  0073A6  0E53               	movlw	83
 40485  0073A8                     u44877:
 40486  0073A8  2EE8               	decfsz	wreg,f,c
 40487  0073AA  D7FE               	bra	u44877
 40488  0073AC  F000               	nop	
 40489  0073AE  0100               	movlb	0	; () banked
 40490  0073B0  2B6A               	incf	sendUSB@ii& (0+255),f,b
 40491  0073B2  D7CE               	goto	l16091
 40492  0073B4                     u22530:
 40493                           
 40494                           ; BSR set to: 0
 40495                           
 40496                           ; BSR set to: 0
 40497  0073B4  2B69               	incf	sendUSB@i& (0+255),f,b
 40498  0073B6  D7C6               	goto	l16085
 40499  0073B8                     u22540:
 40500                           
 40501                           ; BSR set to: 0
 40502                           ;midi.c: 57: }
 40503                           ;midi.c: 58: }
 40504                           ;midi.c: 60: RB2 = 0;
 40505  0073B8  9481               	bcf	3969,2,c	;volatile
 40506                           
 40507                           ; BSR set to: 0
 40508                           ;midi.c: 61: _delay((unsigned long)((50)*(20000000/4000000.0)));
 40509  0073BA  0E53               	movlw	83
 40510  0073BC                     u44887:
 40511  0073BC  2EE8               	decfsz	wreg,f,c
 40512  0073BE  D7FE               	bra	u44887
 40513  0073C0  F000               	nop	
 40514  0073C2  0012               	return		;funcret
 40515  0073C4                     __end_of_sendUSB:
 40516                           	opt stack 0
 40517                           tblptru	equ	0xFF8
 40518                           tblptrh	equ	0xFF7
 40519                           tblptrl	equ	0xFF6
 40520                           tablat	equ	0xFF5
 40521                           prodh	equ	0xFF4
 40522                           prodl	equ	0xFF3
 40523                           intcon	equ	0xFF2
 40524                           intcon2	equ	0xFF1
 40525                           postinc0	equ	0xFEE
 40526                           wreg	equ	0xFE8
 40527                           indf1	equ	0xFE7
 40528                           postinc1	equ	0xFE6
 40529                           postdec1	equ	0xFE5
 40530                           fsr1h	equ	0xFE2
 40531                           fsr1l	equ	0xFE1
 40532                           indf2	equ	0xFDF
 40533                           postinc2	equ	0xFDE
 40534                           postdec2	equ	0xFDD
 40535                           plusw2	equ	0xFDB
 40536                           fsr2h	equ	0xFDA
 40537                           fsr2l	equ	0xFD9
 40538                           status	equ	0xFD8
 40539                           
 40540 ;; *************** function _sendOut *****************
 40541 ;; Defined at:
 40542 ;;		line 22 in file "midi.c"
 40543 ;; Parameters:    Size  Location     Type
 40544 ;;  a               1    wreg     unsigned char 
 40545 ;; Auto vars:     Size  Location     Type
 40546 ;;  a               1    0[BANK0 ] unsigned char 
 40547 ;; Return value:  Size  Location     Type
 40548 ;;                  1    wreg      void 
 40549 ;; Registers used:
 40550 ;;		wreg, status,2, cstack
 40551 ;; Tracked objects:
 40552 ;;		On entry : 0/0
 40553 ;;		On exit  : 0/0
 40554 ;;		Unchanged: 0/0
 40555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40559 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40560 ;;Total ram usage:        1 bytes
 40561 ;; Hardware stack levels used:    1
 40562 ;; Hardware stack levels required when called:    5
 40563 ;; This function calls:
 40564 ;;		Nothing
 40565 ;; This function is called by:
 40566 ;;		_noteOff
 40567 ;;		_noteOn
 40568 ;;		_noteOffDrum
 40569 ;;		_noteOnDrum
 40570 ;;		_controlChange
 40571 ;;		_pitchBend
 40572 ;;		_programChange
 40573 ;; This function uses a non-reentrant model
 40574 ;;
 40575                           
 40576                           	psect	text123
 40577  009512                     __ptext123:
 40578                           	opt stack 0
 40579  009512                     _sendOut:
 40580                           	opt stack 23
 40581                           
 40582                           ;incstack = 0
 40583                           ;sendOut@a stored from wreg
 40584  009512  0100               	movlb	0	; () banked
 40585  009514  6F60               	movwf	sendOut@a& (0+255),b
 40586                           
 40587                           ;midi.c: 24: TXREG = a;
 40588  009516  C060  FFAD         	movff	sendOut@a,4013	;volatile
 40589  00951A  A89E               	btfss	3998,4,c	;volatile
 40590  00951C  D7FE               	goto	l436
 40591                           
 40592                           ;midi.c: 26: TXIF = 0;
 40593  00951E  989E               	bcf	3998,4,c	;volatile
 40594                           
 40595                           ;midi.c: 27: _delay((unsigned long)((320)*(20000000/4000000.0)));
 40596  009520  0EE4               	movlw	228
 40597  009522                     u44897:
 40598  009522  D000               	nop2	
 40599  009524  D000               	nop2	
 40600  009526  2EE8               	decfsz	wreg,f,c
 40601  009528  D7FC               	bra	u44897
 40602  00952A  D000               	nop2	
 40603  00952C  D000               	nop2	
 40604  00952E  0012               	return		;funcret
 40605  009530                     __end_of_sendOut:
 40606                           	opt stack 0
 40607                           tblptru	equ	0xFF8
 40608                           tblptrh	equ	0xFF7
 40609                           tblptrl	equ	0xFF6
 40610                           tablat	equ	0xFF5
 40611                           prodh	equ	0xFF4
 40612                           prodl	equ	0xFF3
 40613                           intcon	equ	0xFF2
 40614                           intcon2	equ	0xFF1
 40615                           postinc0	equ	0xFEE
 40616                           wreg	equ	0xFE8
 40617                           indf1	equ	0xFE7
 40618                           postinc1	equ	0xFE6
 40619                           postdec1	equ	0xFE5
 40620                           fsr1h	equ	0xFE2
 40621                           fsr1l	equ	0xFE1
 40622                           indf2	equ	0xFDF
 40623                           postinc2	equ	0xFDE
 40624                           postdec2	equ	0xFDD
 40625                           plusw2	equ	0xFDB
 40626                           fsr2h	equ	0xFDA
 40627                           fsr2l	equ	0xFD9
 40628                           status	equ	0xFD8
 40629                           
 40630 ;; *************** function _map *****************
 40631 ;; Defined at:
 40632 ;;		line 29 in file "potentiometers.c"
 40633 ;; Parameters:    Size  Location     Type
 40634 ;;  x               4   26[BANK0 ] long 
 40635 ;;  in_min          4   30[BANK0 ] long 
 40636 ;;  in_max          4   34[BANK0 ] long 
 40637 ;;  out_min         4   38[BANK0 ] long 
 40638 ;;  out_max         4   42[BANK0 ] long 
 40639 ;; Auto vars:     Size  Location     Type
 40640 ;;		None
 40641 ;; Return value:  Size  Location     Type
 40642 ;;                  4   26[BANK0 ] long 
 40643 ;; Registers used:
 40644 ;;		wreg, status,2, status,0, cstack
 40645 ;; Tracked objects:
 40646 ;;		On entry : 0/0
 40647 ;;		On exit  : 0/0
 40648 ;;		Unchanged: 0/0
 40649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40650 ;;      Params:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40652 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40653 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40654 ;;Total ram usage:       32 bytes
 40655 ;; Hardware stack levels used:    1
 40656 ;; Hardware stack levels required when called:    6
 40657 ;; This function calls:
 40658 ;;		___aldiv
 40659 ;;		___lmul
 40660 ;; This function is called by:
 40661 ;;		_readPotentiometers
 40662 ;; This function uses a non-reentrant model
 40663 ;;
 40664                           
 40665                           	psect	text124
 40666  0066D4                     __ptext124:
 40667                           	opt stack 0
 40668  0066D4                     _map:
 40669                           	opt stack 22
 40670                           
 40671                           ;potentiometers.c: 30: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + o
      +                          ut_min;
 40672                           
 40673                           ;incstack = 0
 40674  0066D4  C07E  F08E         	movff	map@in_min,??_map
 40675  0066D8  C07F  F08F         	movff	map@in_min+1,??_map+1
 40676  0066DC  C080  F090         	movff	map@in_min+2,??_map+2
 40677  0066E0  C081  F091         	movff	map@in_min+3,??_map+3
 40678  0066E4  0100               	movlb	0	; () banked
 40679  0066E6  1F8E               	comf	??_map& (0+255),f,b
 40680  0066E8  1F8F               	comf	(??_map+1)& (0+255),f,b
 40681  0066EA  1F90               	comf	(??_map+2)& (0+255),f,b
 40682  0066EC  1F91               	comf	(??_map+3)& (0+255),f,b
 40683  0066EE  2B8E               	incf	??_map& (0+255),f,b
 40684  0066F0  0E00               	movlw	0
 40685  0066F2  238F               	addwfc	(??_map+1)& (0+255),f,b
 40686  0066F4  2390               	addwfc	(??_map+2)& (0+255),f,b
 40687  0066F6  2391               	addwfc	(??_map+3)& (0+255),f,b
 40688  0066F8  517A               	movf	map@x& (0+255),w,b
 40689  0066FA  258E               	addwf	??_map& (0+255),w,b
 40690  0066FC  6F60               	movwf	___lmul@multiplier& (0+255),b
 40691  0066FE  517B               	movf	(map@x+1)& (0+255),w,b
 40692  006700  218F               	addwfc	(??_map+1)& (0+255),w,b
 40693  006702  6F61               	movwf	(___lmul@multiplier+1)& (0+255),b
 40694  006704  517C               	movf	(map@x+2)& (0+255),w,b
 40695  006706  2190               	addwfc	(??_map+2)& (0+255),w,b
 40696  006708  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
 40697  00670A  517D               	movf	(map@x+3)& (0+255),w,b
 40698  00670C  2191               	addwfc	(??_map+3)& (0+255),w,b
 40699  00670E  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
 40700  006710  C086  F092         	movff	map@out_min,??_map+4
 40701  006714  C087  F093         	movff	map@out_min+1,??_map+5
 40702  006718  C088  F094         	movff	map@out_min+2,??_map+6
 40703  00671C  C089  F095         	movff	map@out_min+3,??_map+7
 40704  006720  1F92               	comf	(??_map+4)& (0+255),f,b
 40705  006722  1F93               	comf	(??_map+5)& (0+255),f,b
 40706  006724  1F94               	comf	(??_map+6)& (0+255),f,b
 40707  006726  1F95               	comf	(??_map+7)& (0+255),f,b
 40708  006728  2B92               	incf	(??_map+4)& (0+255),f,b
 40709  00672A  0E00               	movlw	0
 40710  00672C  2393               	addwfc	(??_map+5)& (0+255),f,b
 40711  00672E  2394               	addwfc	(??_map+6)& (0+255),f,b
 40712  006730  2395               	addwfc	(??_map+7)& (0+255),f,b
 40713  006732  518A               	movf	map@out_max& (0+255),w,b
 40714  006734  2592               	addwf	(??_map+4)& (0+255),w,b
 40715  006736  6F64               	movwf	___lmul@multiplicand& (0+255),b
 40716  006738  518B               	movf	(map@out_max+1)& (0+255),w,b
 40717  00673A  2193               	addwfc	(??_map+5)& (0+255),w,b
 40718  00673C  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 40719  00673E  518C               	movf	(map@out_max+2)& (0+255),w,b
 40720  006740  2194               	addwfc	(??_map+6)& (0+255),w,b
 40721  006742  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 40722  006744  518D               	movf	(map@out_max+3)& (0+255),w,b
 40723  006746  2195               	addwfc	(??_map+7)& (0+255),w,b
 40724  006748  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 40725  00674A  EC12  F046         	call	___lmul	;wreg free
 40726  00674E  C060  F06C         	movff	?___lmul,___aldiv@dividend
 40727  006752  C061  F06D         	movff	?___lmul+1,___aldiv@dividend+1
 40728  006756  C062  F06E         	movff	?___lmul+2,___aldiv@dividend+2
 40729  00675A  C063  F06F         	movff	?___lmul+3,___aldiv@dividend+3
 40730  00675E  C07E  F096         	movff	map@in_min,??_map+8
 40731  006762  C07F  F097         	movff	map@in_min+1,??_map+9
 40732  006766  C080  F098         	movff	map@in_min+2,??_map+10
 40733  00676A  C081  F099         	movff	map@in_min+3,??_map+11
 40734  00676E  0100               	movlb	0	; () banked
 40735  006770  1F96               	comf	(??_map+8)& (0+255),f,b
 40736  006772  1F97               	comf	(??_map+9)& (0+255),f,b
 40737  006774  1F98               	comf	(??_map+10)& (0+255),f,b
 40738  006776  1F99               	comf	(??_map+11)& (0+255),f,b
 40739  006778  2B96               	incf	(??_map+8)& (0+255),f,b
 40740  00677A  0E00               	movlw	0
 40741  00677C  2397               	addwfc	(??_map+9)& (0+255),f,b
 40742  00677E  2398               	addwfc	(??_map+10)& (0+255),f,b
 40743  006780  2399               	addwfc	(??_map+11)& (0+255),f,b
 40744  006782  5182               	movf	map@in_max& (0+255),w,b
 40745  006784  2596               	addwf	(??_map+8)& (0+255),w,b
 40746  006786  6F70               	movwf	___aldiv@divisor& (0+255),b
 40747  006788  5183               	movf	(map@in_max+1)& (0+255),w,b
 40748  00678A  2197               	addwfc	(??_map+9)& (0+255),w,b
 40749  00678C  6F71               	movwf	(___aldiv@divisor+1)& (0+255),b
 40750  00678E  5184               	movf	(map@in_max+2)& (0+255),w,b
 40751  006790  2198               	addwfc	(??_map+10)& (0+255),w,b
 40752  006792  6F72               	movwf	(___aldiv@divisor+2)& (0+255),b
 40753  006794  5185               	movf	(map@in_max+3)& (0+255),w,b
 40754  006796  2199               	addwfc	(??_map+11)& (0+255),w,b
 40755  006798  6F73               	movwf	(___aldiv@divisor+3)& (0+255),b
 40756  00679A  EC27  F035         	call	___aldiv	;wreg free
 40757  00679E  0100               	movlb	0	; () banked
 40758  0067A0  5186               	movf	map@out_min& (0+255),w,b
 40759  0067A2  256C               	addwf	?___aldiv& (0+255),w,b
 40760  0067A4  6F7A               	movwf	?_map& (0+255),b
 40761  0067A6  5187               	movf	(map@out_min+1)& (0+255),w,b
 40762  0067A8  216D               	addwfc	(?___aldiv+1)& (0+255),w,b
 40763  0067AA  6F7B               	movwf	(?_map+1)& (0+255),b
 40764  0067AC  5188               	movf	(map@out_min+2)& (0+255),w,b
 40765  0067AE  216E               	addwfc	(?___aldiv+2)& (0+255),w,b
 40766  0067B0  6F7C               	movwf	(?_map+2)& (0+255),b
 40767  0067B2  5189               	movf	(map@out_min+3)& (0+255),w,b
 40768  0067B4  216F               	addwfc	(?___aldiv+3)& (0+255),w,b
 40769  0067B6  6F7D               	movwf	(?_map+3)& (0+255),b
 40770  0067B8  0012               	return	
 40771  0067BA                     __end_of_map:
 40772                           	opt stack 0
 40773                           tblptru	equ	0xFF8
 40774                           tblptrh	equ	0xFF7
 40775                           tblptrl	equ	0xFF6
 40776                           tablat	equ	0xFF5
 40777                           prodh	equ	0xFF4
 40778                           prodl	equ	0xFF3
 40779                           intcon	equ	0xFF2
 40780                           intcon2	equ	0xFF1
 40781                           postinc0	equ	0xFEE
 40782                           wreg	equ	0xFE8
 40783                           indf1	equ	0xFE7
 40784                           postinc1	equ	0xFE6
 40785                           postdec1	equ	0xFE5
 40786                           fsr1h	equ	0xFE2
 40787                           fsr1l	equ	0xFE1
 40788                           indf2	equ	0xFDF
 40789                           postinc2	equ	0xFDE
 40790                           postdec2	equ	0xFDD
 40791                           plusw2	equ	0xFDB
 40792                           fsr2h	equ	0xFDA
 40793                           fsr2l	equ	0xFD9
 40794                           status	equ	0xFD8
 40795                           
 40796 ;; *************** function ___lmul *****************
 40797 ;; Defined at:
 40798 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 40799 ;; Parameters:    Size  Location     Type
 40800 ;;  multiplier      4    0[BANK0 ] unsigned long 
 40801 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 40802 ;; Auto vars:     Size  Location     Type
 40803 ;;  product         4    8[BANK0 ] unsigned long 
 40804 ;; Return value:  Size  Location     Type
 40805 ;;                  4    0[BANK0 ] unsigned long 
 40806 ;; Registers used:
 40807 ;;		wreg, status,2, status,0
 40808 ;; Tracked objects:
 40809 ;;		On entry : 0/0
 40810 ;;		On exit  : 0/0
 40811 ;;		Unchanged: 0/0
 40812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40813 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40814 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40816 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40817 ;;Total ram usage:       12 bytes
 40818 ;; Hardware stack levels used:    1
 40819 ;; Hardware stack levels required when called:    5
 40820 ;; This function calls:
 40821 ;;		Nothing
 40822 ;; This function is called by:
 40823 ;;		_map
 40824 ;;		_rand
 40825 ;; This function uses a non-reentrant model
 40826 ;;
 40827                           
 40828                           	psect	text125
 40829  008C24                     __ptext125:
 40830                           	opt stack 0
 40831  008C24                     ___lmul:
 40832                           	opt stack 16
 40833                           
 40834                           ; BSR set to: 0
 40835                           ;incstack = 0
 40836  008C24  0E00               	movlw	0
 40837  008C26  0100               	movlb	0	; () banked
 40838  008C28  6F68               	movwf	___lmul@product& (0+255),b
 40839  008C2A  0E00               	movlw	0
 40840  008C2C  6F69               	movwf	(___lmul@product+1)& (0+255),b
 40841  008C2E  0E00               	movlw	0
 40842  008C30  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 40843  008C32  0E00               	movlw	0
 40844  008C34  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 40845  008C36                     
 40846                           ; BSR set to: 0
 40847                           
 40848                           ; BSR set to: 0
 40849  008C36  A160               	btfss	___lmul@multiplier& (0+255),0,b
 40850  008C38  D008               	goto	l5432
 40851                           
 40852                           ; BSR set to: 0
 40853  008C3A  5164               	movf	___lmul@multiplicand& (0+255),w,b
 40854  008C3C  2768               	addwf	___lmul@product& (0+255),f,b
 40855  008C3E  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 40856  008C40  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 40857  008C42  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 40858  008C44  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 40859  008C46  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 40860  008C48  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 40861  008C4A                     l5432:
 40862                           
 40863                           ; BSR set to: 0
 40864                           
 40865                           ; BSR set to: 0
 40866  008C4A  90D8               	bcf	status,0,c
 40867  008C4C  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 40868  008C4E  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 40869  008C50  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 40870  008C52  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 40871                           
 40872                           ; BSR set to: 0
 40873  008C54  90D8               	bcf	status,0,c
 40874  008C56  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 40875  008C58  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 40876  008C5A  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 40877  008C5C  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 40878  008C5E  5160               	movf	___lmul@multiplier& (0+255),w,b
 40879  008C60  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 40880  008C62  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 40881  008C64  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 40882  008C66  A4D8               	btfss	status,2,c
 40883  008C68  D7E6               	goto	l5431
 40884                           
 40885                           ; BSR set to: 0
 40886  008C6A  C068  F060         	movff	___lmul@product,?___lmul
 40887  008C6E  C069  F061         	movff	___lmul@product+1,?___lmul+1
 40888  008C72  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 40889  008C76  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 40890                           
 40891                           ; BSR set to: 0
 40892  008C7A  0012               	return		;funcret
 40893  008C7C                     __end_of___lmul:
 40894                           	opt stack 0
 40895                           tblptru	equ	0xFF8
 40896                           tblptrh	equ	0xFF7
 40897                           tblptrl	equ	0xFF6
 40898                           tablat	equ	0xFF5
 40899                           prodh	equ	0xFF4
 40900                           prodl	equ	0xFF3
 40901                           intcon	equ	0xFF2
 40902                           intcon2	equ	0xFF1
 40903                           postinc0	equ	0xFEE
 40904                           wreg	equ	0xFE8
 40905                           indf1	equ	0xFE7
 40906                           postinc1	equ	0xFE6
 40907                           postdec1	equ	0xFE5
 40908                           fsr1h	equ	0xFE2
 40909                           fsr1l	equ	0xFE1
 40910                           indf2	equ	0xFDF
 40911                           postinc2	equ	0xFDE
 40912                           postdec2	equ	0xFDD
 40913                           plusw2	equ	0xFDB
 40914                           fsr2h	equ	0xFDA
 40915                           fsr2l	equ	0xFD9
 40916                           status	equ	0xFD8
 40917                           
 40918 ;; *************** function ___aldiv *****************
 40919 ;; Defined at:
 40920 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 40921 ;; Parameters:    Size  Location     Type
 40922 ;;  dividend        4   12[BANK0 ] long 
 40923 ;;  divisor         4   16[BANK0 ] long 
 40924 ;; Auto vars:     Size  Location     Type
 40925 ;;  quotient        4   22[BANK0 ] long 
 40926 ;;  sign            1   21[BANK0 ] unsigned char 
 40927 ;;  counter         1   20[BANK0 ] unsigned char 
 40928 ;; Return value:  Size  Location     Type
 40929 ;;                  4   12[BANK0 ] long 
 40930 ;; Registers used:
 40931 ;;		wreg, status,2, status,0
 40932 ;; Tracked objects:
 40933 ;;		On entry : 0/0
 40934 ;;		On exit  : 0/0
 40935 ;;		Unchanged: 0/0
 40936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40937 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40938 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40940 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40941 ;;Total ram usage:       14 bytes
 40942 ;; Hardware stack levels used:    1
 40943 ;; Hardware stack levels required when called:    5
 40944 ;; This function calls:
 40945 ;;		Nothing
 40946 ;; This function is called by:
 40947 ;;		_map
 40948 ;; This function uses a non-reentrant model
 40949 ;;
 40950                           
 40951                           	psect	text126
 40952  006A4E                     __ptext126:
 40953                           	opt stack 0
 40954  006A4E                     ___aldiv:
 40955                           	opt stack 22
 40956                           
 40957                           ; BSR set to: 0
 40958                           ;incstack = 0
 40959  006A4E  0E00               	movlw	0
 40960  006A50  0100               	movlb	0	; () banked
 40961  006A52  6F75               	movwf	___aldiv@sign& (0+255),b
 40962                           
 40963                           ; BSR set to: 0
 40964  006A54  AF73               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 40965  006A56  D00A               	goto	l5475
 40966                           
 40967                           ; BSR set to: 0
 40968  006A58  1F73               	comf	(___aldiv@divisor+3)& (0+255),f,b
 40969  006A5A  1F72               	comf	(___aldiv@divisor+2)& (0+255),f,b
 40970  006A5C  1F71               	comf	(___aldiv@divisor+1)& (0+255),f,b
 40971  006A5E  6D70               	negf	___aldiv@divisor& (0+255),b
 40972  006A60  0E00               	movlw	0
 40973  006A62  2371               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 40974  006A64  2372               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 40975  006A66  2373               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 40976                           
 40977                           ; BSR set to: 0
 40978  006A68  0E01               	movlw	1
 40979  006A6A  6F75               	movwf	___aldiv@sign& (0+255),b
 40980  006A6C                     l5475:
 40981                           
 40982                           ; BSR set to: 0
 40983                           
 40984                           ; BSR set to: 0
 40985  006A6C  AF6F               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 40986  006A6E  D00A               	goto	l5476
 40987                           
 40988                           ; BSR set to: 0
 40989  006A70  1F6F               	comf	(___aldiv@dividend+3)& (0+255),f,b
 40990  006A72  1F6E               	comf	(___aldiv@dividend+2)& (0+255),f,b
 40991  006A74  1F6D               	comf	(___aldiv@dividend+1)& (0+255),f,b
 40992  006A76  6D6C               	negf	___aldiv@dividend& (0+255),b
 40993  006A78  0E00               	movlw	0
 40994  006A7A  236D               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 40995  006A7C  236E               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 40996  006A7E  236F               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 40997                           
 40998                           ; BSR set to: 0
 40999  006A80  0E01               	movlw	1
 41000  006A82  1B75               	xorwf	___aldiv@sign& (0+255),f,b
 41001  006A84                     l5476:
 41002                           
 41003                           ; BSR set to: 0
 41004                           
 41005                           ; BSR set to: 0
 41006  006A84  0E00               	movlw	0
 41007  006A86  6F76               	movwf	___aldiv@quotient& (0+255),b
 41008  006A88  0E00               	movlw	0
 41009  006A8A  6F77               	movwf	(___aldiv@quotient+1)& (0+255),b
 41010  006A8C  0E00               	movlw	0
 41011  006A8E  6F78               	movwf	(___aldiv@quotient+2)& (0+255),b
 41012  006A90  0E00               	movlw	0
 41013  006A92  6F79               	movwf	(___aldiv@quotient+3)& (0+255),b
 41014                           
 41015                           ; BSR set to: 0
 41016  006A94  5170               	movf	___aldiv@divisor& (0+255),w,b
 41017  006A96  1171               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 41018  006A98  1172               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 41019  006A9A  1173               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 41020  006A9C  B4D8               	btfsc	status,2,c
 41021  006A9E  D02A               	goto	l5483
 41022                           
 41023                           ; BSR set to: 0
 41024  006AA0  0E01               	movlw	1
 41025  006AA2  6F74               	movwf	___aldiv@counter& (0+255),b
 41026  006AA4  D006               	goto	l5478
 41027  006AA6                     
 41028                           ; BSR set to: 0
 41029                           
 41030                           ; BSR set to: 0
 41031  006AA6  90D8               	bcf	status,0,c
 41032  006AA8  3770               	rlcf	___aldiv@divisor& (0+255),f,b
 41033  006AAA  3771               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 41034  006AAC  3772               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 41035  006AAE  3773               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 41036  006AB0  2B74               	incf	___aldiv@counter& (0+255),f,b
 41037  006AB2                     l5478:
 41038                           
 41039                           ; BSR set to: 0
 41040                           
 41041                           ; BSR set to: 0
 41042  006AB2  AF73               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 41043  006AB4  D7F8               	goto	l5479
 41044  006AB6                     u29640:
 41045                           
 41046                           ; BSR set to: 0
 41047                           
 41048                           ; BSR set to: 0
 41049                           
 41050                           ; BSR set to: 0
 41051  006AB6  90D8               	bcf	status,0,c
 41052  006AB8  3776               	rlcf	___aldiv@quotient& (0+255),f,b
 41053  006ABA  3777               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 41054  006ABC  3778               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 41055  006ABE  3779               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 41056                           
 41057                           ; BSR set to: 0
 41058  006AC0  5170               	movf	___aldiv@divisor& (0+255),w,b
 41059  006AC2  5D6C               	subwf	___aldiv@dividend& (0+255),w,b
 41060  006AC4  5171               	movf	(___aldiv@divisor+1)& (0+255),w,b
 41061  006AC6  596D               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 41062  006AC8  5172               	movf	(___aldiv@divisor+2)& (0+255),w,b
 41063  006ACA  596E               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 41064  006ACC  5173               	movf	(___aldiv@divisor+3)& (0+255),w,b
 41065  006ACE  596F               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 41066  006AD0  A0D8               	btfss	status,0,c
 41067  006AD2  D009               	goto	l5482
 41068                           
 41069                           ; BSR set to: 0
 41070  006AD4  5170               	movf	___aldiv@divisor& (0+255),w,b
 41071  006AD6  5F6C               	subwf	___aldiv@dividend& (0+255),f,b
 41072  006AD8  5171               	movf	(___aldiv@divisor+1)& (0+255),w,b
 41073  006ADA  5B6D               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 41074  006ADC  5172               	movf	(___aldiv@divisor+2)& (0+255),w,b
 41075  006ADE  5B6E               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 41076  006AE0  5173               	movf	(___aldiv@divisor+3)& (0+255),w,b
 41077  006AE2  5B6F               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 41078                           
 41079                           ; BSR set to: 0
 41080  006AE4  8176               	bsf	___aldiv@quotient& (0+255),0,b
 41081  006AE6                     l5482:
 41082                           
 41083                           ; BSR set to: 0
 41084                           
 41085                           ; BSR set to: 0
 41086  006AE6  90D8               	bcf	status,0,c
 41087  006AE8  3373               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 41088  006AEA  3372               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 41089  006AEC  3371               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 41090  006AEE  3370               	rrcf	___aldiv@divisor& (0+255),f,b
 41091                           
 41092                           ; BSR set to: 0
 41093  006AF0  2F74               	decfsz	___aldiv@counter& (0+255),f,b
 41094  006AF2  D7E1               	goto	u29640
 41095  006AF4                     l5483:
 41096                           
 41097                           ; BSR set to: 0
 41098                           
 41099                           ; BSR set to: 0
 41100                           
 41101                           ; BSR set to: 0
 41102  006AF4  5175               	movf	___aldiv@sign& (0+255),w,b
 41103  006AF6  B4D8               	btfsc	status,2,c
 41104  006AF8  D008               	goto	l5484
 41105                           
 41106                           ; BSR set to: 0
 41107  006AFA  1F79               	comf	(___aldiv@quotient+3)& (0+255),f,b
 41108  006AFC  1F78               	comf	(___aldiv@quotient+2)& (0+255),f,b
 41109  006AFE  1F77               	comf	(___aldiv@quotient+1)& (0+255),f,b
 41110  006B00  6D76               	negf	___aldiv@quotient& (0+255),b
 41111  006B02  0E00               	movlw	0
 41112  006B04  2377               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 41113  006B06  2378               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 41114  006B08  2379               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 41115  006B0A                     l5484:
 41116                           
 41117                           ; BSR set to: 0
 41118                           
 41119                           ; BSR set to: 0
 41120  006B0A  C076  F06C         	movff	___aldiv@quotient,?___aldiv
 41121  006B0E  C077  F06D         	movff	___aldiv@quotient+1,?___aldiv+1
 41122  006B12  C078  F06E         	movff	___aldiv@quotient+2,?___aldiv+2
 41123  006B16  C079  F06F         	movff	___aldiv@quotient+3,?___aldiv+3
 41124  006B1A  0012               	return	
 41125  006B1C                     __end_of___aldiv:
 41126                           	opt stack 0
 41127                           tblptru	equ	0xFF8
 41128                           tblptrh	equ	0xFF7
 41129                           tblptrl	equ	0xFF6
 41130                           tablat	equ	0xFF5
 41131                           prodh	equ	0xFF4
 41132                           prodl	equ	0xFF3
 41133                           intcon	equ	0xFF2
 41134                           intcon2	equ	0xFF1
 41135                           postinc0	equ	0xFEE
 41136                           wreg	equ	0xFE8
 41137                           indf1	equ	0xFE7
 41138                           postinc1	equ	0xFE6
 41139                           postdec1	equ	0xFE5
 41140                           fsr1h	equ	0xFE2
 41141                           fsr1l	equ	0xFE1
 41142                           indf2	equ	0xFDF
 41143                           postinc2	equ	0xFDE
 41144                           postdec2	equ	0xFDD
 41145                           plusw2	equ	0xFDB
 41146                           fsr2h	equ	0xFDA
 41147                           fsr2l	equ	0xFD9
 41148                           status	equ	0xFD8
 41149                           
 41150 ;; *************** function ___xxtofl *****************
 41151 ;; Defined at:
 41152 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
 41153 ;; Parameters:    Size  Location     Type
 41154 ;;  sign            1    wreg     unsigned char 
 41155 ;;  val             4    0[BANK0 ] long 
 41156 ;; Auto vars:     Size  Location     Type
 41157 ;;  sign            1    8[BANK0 ] unsigned char 
 41158 ;;  arg             4   10[BANK0 ] unsigned long 
 41159 ;;  exp             1    9[BANK0 ] unsigned char 
 41160 ;; Return value:  Size  Location     Type
 41161 ;;                  4    0[BANK0 ] unsigned char 
 41162 ;; Registers used:
 41163 ;;		wreg, status,2, status,0
 41164 ;; Tracked objects:
 41165 ;;		On entry : 0/0
 41166 ;;		On exit  : 0/0
 41167 ;;		Unchanged: 0/0
 41168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41169 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41170 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41171 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41172 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41173 ;;Total ram usage:       14 bytes
 41174 ;; Hardware stack levels used:    1
 41175 ;; Hardware stack levels required when called:    5
 41176 ;; This function calls:
 41177 ;;		Nothing
 41178 ;; This function is called by:
 41179 ;;		_calculate_alpha
 41180 ;;		_readPotentiometers
 41181 ;;		_calculate_pulse_length
 41182 ;; This function uses a non-reentrant model
 41183 ;;
 41184                           
 41185                           	psect	text127
 41186  005DEA                     __ptext127:
 41187                           	opt stack 0
 41188  005DEA                     ___xxtofl:
 41189                           	opt stack 22
 41190                           
 41191                           ; BSR set to: 0
 41192                           ;incstack = 0
 41193                           ;___xxtofl@sign stored from wreg
 41194  005DEA  0100               	movlb	0	; () banked
 41195  005DEC  6F68               	movwf	___xxtofl@sign& (0+255),b
 41196  005DEE  0100               	movlb	0	; () banked
 41197  005DF0  5168               	movf	___xxtofl@sign& (0+255),w,b
 41198  005DF2  A4D8               	btfss	status,2,c
 41199                           
 41200                           ; BSR set to: 0
 41201  005DF4  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 41202  005DF6  D01A               	goto	l5981
 41203                           
 41204                           ; BSR set to: 0
 41205  005DF8  C060  F064         	movff	___xxtofl@val,??___xxtofl
 41206  005DFC  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 41207  005E00  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 41208  005E04  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 41209  005E08  1F64               	comf	??___xxtofl& (0+255),f,b
 41210  005E0A  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 41211  005E0C  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 41212  005E0E  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 41213  005E10  2B64               	incf	??___xxtofl& (0+255),f,b
 41214  005E12  0E00               	movlw	0
 41215  005E14  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 41216  005E16  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 41217  005E18  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 41218  005E1A  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 41219  005E1E  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 41220  005E22  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 41221  005E26  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 41222  005E2A  D008               	goto	l5982
 41223  005E2C                     l5981:
 41224                           
 41225                           ; BSR set to: 0
 41226  005E2C  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 41227  005E30  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 41228  005E34  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 41229  005E38  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 41230  005E3C                     l5982:
 41231                           
 41232                           ; BSR set to: 0
 41233                           
 41234                           ; BSR set to: 0
 41235  005E3C  5160               	movf	___xxtofl@val& (0+255),w,b
 41236  005E3E  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 41237  005E40  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 41238  005E42  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 41239  005E44  A4D8               	btfss	status,2,c
 41240  005E46  D009               	goto	l5983
 41241                           
 41242                           ; BSR set to: 0
 41243  005E48  0E00               	movlw	0
 41244  005E4A  6F60               	movwf	?___xxtofl& (0+255),b
 41245  005E4C  0E00               	movlw	0
 41246  005E4E  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 41247  005E50  0E00               	movlw	0
 41248  005E52  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 41249  005E54  0E00               	movlw	0
 41250  005E56  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 41251                           
 41252                           ; BSR set to: 0
 41253  005E58  0012               	return	
 41254  005E5A                     l5983:
 41255                           
 41256                           ; BSR set to: 0
 41257                           
 41258                           ; BSR set to: 0
 41259  005E5A  0E96               	movlw	150
 41260  005E5C  6F69               	movwf	___xxtofl@exp& (0+255),b
 41261  005E5E  D006               	goto	l5985
 41262  005E60                     
 41263                           ; BSR set to: 0
 41264                           
 41265                           ; BSR set to: 0
 41266  005E60  2B69               	incf	___xxtofl@exp& (0+255),f,b
 41267  005E62  90D8               	bcf	status,0,c
 41268  005E64  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 41269  005E66  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 41270  005E68  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 41271  005E6A  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 41272  005E6C                     l5985:
 41273                           
 41274                           ; BSR set to: 0
 41275                           
 41276                           ; BSR set to: 0
 41277  005E6C  0E00               	movlw	0
 41278  005E6E  156A               	andwf	___xxtofl@arg& (0+255),w,b
 41279  005E70  6F64               	movwf	??___xxtofl& (0+255),b
 41280  005E72  0E00               	movlw	0
 41281  005E74  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 41282  005E76  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 41283  005E78  0E00               	movlw	0
 41284  005E7A  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 41285  005E7C  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 41286  005E7E  0EFE               	movlw	254
 41287  005E80  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 41288  005E82  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 41289  005E84  5164               	movf	??___xxtofl& (0+255),w,b
 41290  005E86  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 41291  005E88  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 41292  005E8A  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 41293  005E8C  B4D8               	btfsc	status,2,c
 41294  005E8E  D00D               	goto	l5988
 41295  005E90  D7E7               	goto	l5986
 41296  005E92                     
 41297                           ; BSR set to: 0
 41298                           
 41299                           ; BSR set to: 0
 41300  005E92  2B69               	incf	___xxtofl@exp& (0+255),f,b
 41301                           
 41302                           ; BSR set to: 0
 41303  005E94  0E01               	movlw	1
 41304  005E96  276A               	addwf	___xxtofl@arg& (0+255),f,b
 41305  005E98  0E00               	movlw	0
 41306  005E9A  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 41307  005E9C  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 41308  005E9E  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 41309                           
 41310                           ; BSR set to: 0
 41311  005EA0  90D8               	bcf	status,0,c
 41312  005EA2  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 41313  005EA4  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 41314  005EA6  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 41315  005EA8  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 41316  005EAA                     l5988:
 41317                           
 41318                           ; BSR set to: 0
 41319  005EAA  0E00               	movlw	0
 41320  005EAC  156A               	andwf	___xxtofl@arg& (0+255),w,b
 41321  005EAE  6F64               	movwf	??___xxtofl& (0+255),b
 41322  005EB0  0E00               	movlw	0
 41323  005EB2  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 41324  005EB4  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 41325  005EB6  0E00               	movlw	0
 41326  005EB8  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 41327  005EBA  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 41328  005EBC  0EFF               	movlw	255
 41329  005EBE  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 41330  005EC0  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 41331  005EC2  5164               	movf	??___xxtofl& (0+255),w,b
 41332  005EC4  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 41333  005EC6  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 41334  005EC8  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 41335  005ECA  B4D8               	btfsc	status,2,c
 41336  005ECC  D007               	goto	l5991
 41337  005ECE  D7E1               	goto	l5989
 41338  005ED0                     
 41339                           ; BSR set to: 0
 41340                           
 41341                           ; BSR set to: 0
 41342  005ED0  0769               	decf	___xxtofl@exp& (0+255),f,b
 41343  005ED2  90D8               	bcf	status,0,c
 41344  005ED4  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 41345  005ED6  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 41346  005ED8  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 41347  005EDA  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 41348  005EDC                     l5991:
 41349                           
 41350                           ; BSR set to: 0
 41351                           
 41352                           ; BSR set to: 0
 41353  005EDC  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 41354  005EDE  D003               	goto	u25710
 41355                           
 41356                           ; BSR set to: 0
 41357  005EE0  0E02               	movlw	2
 41358  005EE2  6169               	cpfslt	___xxtofl@exp& (0+255),b
 41359  005EE4  D7F5               	goto	l5992
 41360  005EE6                     u25710:
 41361                           
 41362                           ; BSR set to: 0
 41363                           
 41364                           ; BSR set to: 0
 41365  005EE6  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 41366  005EE8  D008               	goto	l5996
 41367                           
 41368                           ; BSR set to: 0
 41369  005EEA  0EFF               	movlw	255
 41370  005EEC  176A               	andwf	___xxtofl@arg& (0+255),f,b
 41371  005EEE  0EFF               	movlw	255
 41372  005EF0  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 41373  005EF2  0E7F               	movlw	127
 41374  005EF4  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 41375  005EF6  0EFF               	movlw	255
 41376  005EF8  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 41377  005EFA                     l5996:
 41378                           
 41379                           ; BSR set to: 0
 41380  005EFA  90D8               	bcf	status,0,c
 41381  005EFC  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 41382  005EFE  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 41383  005F02  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 41384  005F04  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 41385  005F06  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 41386  005F08  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 41387  005F0C  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 41388  005F0E  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 41389  005F10  6B64               	clrf	??___xxtofl& (0+255),b
 41390  005F12  5164               	movf	??___xxtofl& (0+255),w,b
 41391  005F14  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 41392  005F16  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 41393  005F18  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 41394  005F1A  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 41395  005F1C  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 41396  005F1E  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 41397  005F20  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 41398                           
 41399                           ; BSR set to: 0
 41400  005F22  5168               	movf	___xxtofl@sign& (0+255),w,b
 41401  005F24  A4D8               	btfss	status,2,c
 41402                           
 41403                           ; BSR set to: 0
 41404  005F26  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 41405  005F28  D001               	goto	l5997
 41406                           
 41407                           ; BSR set to: 0
 41408  005F2A  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 41409  005F2C                     l5997:
 41410                           
 41411                           ; BSR set to: 0
 41412                           
 41413                           ; BSR set to: 0
 41414  005F2C  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 41415  005F30  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 41416  005F34  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 41417  005F38  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 41418  005F3C  0012               	return	
 41419  005F3E                     __end_of___xxtofl:
 41420                           	opt stack 0
 41421                           tblptru	equ	0xFF8
 41422                           tblptrh	equ	0xFF7
 41423                           tblptrl	equ	0xFF6
 41424                           tablat	equ	0xFF5
 41425                           prodh	equ	0xFF4
 41426                           prodl	equ	0xFF3
 41427                           intcon	equ	0xFF2
 41428                           intcon2	equ	0xFF1
 41429                           postinc0	equ	0xFEE
 41430                           wreg	equ	0xFE8
 41431                           indf1	equ	0xFE7
 41432                           postinc1	equ	0xFE6
 41433                           postdec1	equ	0xFE5
 41434                           fsr1h	equ	0xFE2
 41435                           fsr1l	equ	0xFE1
 41436                           indf2	equ	0xFDF
 41437                           postinc2	equ	0xFDE
 41438                           postdec2	equ	0xFDD
 41439                           plusw2	equ	0xFDB
 41440                           fsr2h	equ	0xFDA
 41441                           fsr2l	equ	0xFD9
 41442                           status	equ	0xFD8
 41443                           
 41444 ;; *************** function ___fltol *****************
 41445 ;; Defined at:
 41446 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
 41447 ;; Parameters:    Size  Location     Type
 41448 ;;  f1              4   88[BANK0 ] unsigned char 
 41449 ;; Auto vars:     Size  Location     Type
 41450 ;;  exp1            1   97[BANK0 ] unsigned char 
 41451 ;;  sign1           1   96[BANK0 ] unsigned char 
 41452 ;; Return value:  Size  Location     Type
 41453 ;;                  4   88[BANK0 ] long 
 41454 ;; Registers used:
 41455 ;;		wreg, status,2, status,0
 41456 ;; Tracked objects:
 41457 ;;		On entry : 0/0
 41458 ;;		On exit  : 0/0
 41459 ;;		Unchanged: 0/0
 41460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41461 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41462 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41463 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41464 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41465 ;;Total ram usage:       10 bytes
 41466 ;; Hardware stack levels used:    1
 41467 ;; Hardware stack levels required when called:    5
 41468 ;; This function calls:
 41469 ;;		Nothing
 41470 ;; This function is called by:
 41471 ;;		_readPotentiometers
 41472 ;;		_calculate_pulse_length
 41473 ;; This function uses a non-reentrant model
 41474 ;;
 41475                           
 41476                           	psect	text128
 41477  00689C                     __ptext128:
 41478                           	opt stack 0
 41479  00689C                     ___fltol:
 41480                           	opt stack 22
 41481                           
 41482                           ; BSR set to: 0
 41483                           ;incstack = 0
 41484  00689C  0100               	movlb	0	; () banked
 41485  00689E  35BA               	rlcf	(___fltol@f1+2)& (0+255),w,b
 41486  0068A0  35BB               	rlcf	(___fltol@f1+3)& (0+255),w,b
 41487  0068A2  6FC1               	movwf	___fltol@exp1& (0+255),b
 41488  0068A4  51C1               	movf	___fltol@exp1& (0+255),w,b
 41489  0068A6  A4D8               	btfss	status,2,c
 41490  0068A8  D009               	goto	l5649
 41491                           
 41492                           ; BSR set to: 0
 41493  0068AA  0E00               	movlw	0
 41494  0068AC  6FB8               	movwf	?___fltol& (0+255),b
 41495  0068AE  0E00               	movlw	0
 41496  0068B0  6FB9               	movwf	(?___fltol+1)& (0+255),b
 41497  0068B2  0E00               	movlw	0
 41498  0068B4  6FBA               	movwf	(?___fltol+2)& (0+255),b
 41499  0068B6  0E00               	movlw	0
 41500  0068B8  6FBB               	movwf	(?___fltol+3)& (0+255),b
 41501                           
 41502                           ; BSR set to: 0
 41503  0068BA  0012               	return	
 41504  0068BC                     l5649:
 41505                           
 41506                           ; BSR set to: 0
 41507                           
 41508                           ; BSR set to: 0
 41509  0068BC  C0B8  F0BC         	movff	___fltol@f1,??___fltol
 41510  0068C0  C0B9  F0BD         	movff	___fltol@f1+1,??___fltol+1
 41511  0068C4  C0BA  F0BE         	movff	___fltol@f1+2,??___fltol+2
 41512  0068C8  C0BB  F0BF         	movff	___fltol@f1+3,??___fltol+3
 41513  0068CC  0E20               	movlw	32
 41514  0068CE  D005               	goto	u25590
 41515  0068D0                     u25595:
 41516  0068D0  90D8               	bcf	status,0,c
 41517  0068D2  33BF               	rrcf	(??___fltol+3)& (0+255),f,b
 41518  0068D4  33BE               	rrcf	(??___fltol+2)& (0+255),f,b
 41519  0068D6  33BD               	rrcf	(??___fltol+1)& (0+255),f,b
 41520  0068D8  33BC               	rrcf	??___fltol& (0+255),f,b
 41521  0068DA                     u25590:
 41522  0068DA  2EE8               	decfsz	wreg,f,c
 41523  0068DC  D7F9               	goto	u25595
 41524  0068DE  51BC               	movf	??___fltol& (0+255),w,b
 41525  0068E0  6FC0               	movwf	___fltol@sign1& (0+255),b
 41526                           
 41527                           ; BSR set to: 0
 41528  0068E2  8FBA               	bsf	(___fltol@f1+2)& (0+255),7,b
 41529                           
 41530                           ; BSR set to: 0
 41531  0068E4  0EFF               	movlw	255
 41532  0068E6  17B8               	andwf	___fltol@f1& (0+255),f,b
 41533  0068E8  0EFF               	movlw	255
 41534  0068EA  17B9               	andwf	(___fltol@f1+1)& (0+255),f,b
 41535  0068EC  0EFF               	movlw	255
 41536  0068EE  17BA               	andwf	(___fltol@f1+2)& (0+255),f,b
 41537  0068F0  0E00               	movlw	0
 41538  0068F2  17BB               	andwf	(___fltol@f1+3)& (0+255),f,b
 41539                           
 41540                           ; BSR set to: 0
 41541  0068F4  0E96               	movlw	150
 41542  0068F6  5FC1               	subwf	___fltol@exp1& (0+255),f,b
 41543                           
 41544                           ; BSR set to: 0
 41545  0068F8  AFC1               	btfss	___fltol@exp1& (0+255),7,b
 41546  0068FA  D016               	goto	l5651
 41547                           
 41548                           ; BSR set to: 0
 41549  0068FC  51C1               	movf	___fltol@exp1& (0+255),w,b
 41550  0068FE  0A80               	xorlw	128
 41551  006900  0F97               	addlw	151
 41552  006902  B0D8               	btfsc	status,0,c
 41553  006904  D009               	goto	l5652
 41554                           
 41555                           ; BSR set to: 0
 41556  006906  0E00               	movlw	0
 41557  006908  6FB8               	movwf	?___fltol& (0+255),b
 41558  00690A  0E00               	movlw	0
 41559  00690C  6FB9               	movwf	(?___fltol+1)& (0+255),b
 41560  00690E  0E00               	movlw	0
 41561  006910  6FBA               	movwf	(?___fltol+2)& (0+255),b
 41562  006912  0E00               	movlw	0
 41563  006914  6FBB               	movwf	(?___fltol+3)& (0+255),b
 41564                           
 41565                           ; BSR set to: 0
 41566  006916  0012               	return	
 41567  006918                     l5652:
 41568                           
 41569                           ; BSR set to: 0
 41570                           
 41571                           ; BSR set to: 0
 41572                           
 41573                           ; BSR set to: 0
 41574  006918  90D8               	bcf	status,0,c
 41575  00691A  33BB               	rrcf	(___fltol@f1+3)& (0+255),f,b
 41576  00691C  33BA               	rrcf	(___fltol@f1+2)& (0+255),f,b
 41577  00691E  33B9               	rrcf	(___fltol@f1+1)& (0+255),f,b
 41578  006920  33B8               	rrcf	___fltol@f1& (0+255),f,b
 41579                           
 41580                           ; BSR set to: 0
 41581  006922  3FC1               	incfsz	___fltol@exp1& (0+255),f,b
 41582  006924  D7F9               	goto	l5652
 41583                           
 41584                           ; BSR set to: 0
 41585  006926  D015               	goto	u25630
 41586  006928                     l5651:
 41587                           
 41588                           ; BSR set to: 0
 41589                           
 41590                           ; BSR set to: 0
 41591  006928  0E1F               	movlw	31
 41592  00692A  65C1               	cpfsgt	___fltol@exp1& (0+255),b
 41593  00692C  D00F               	goto	l5657
 41594                           
 41595                           ; BSR set to: 0
 41596  00692E  0E00               	movlw	0
 41597  006930  6FB8               	movwf	?___fltol& (0+255),b
 41598  006932  0E00               	movlw	0
 41599  006934  6FB9               	movwf	(?___fltol+1)& (0+255),b
 41600  006936  0E00               	movlw	0
 41601  006938  6FBA               	movwf	(?___fltol+2)& (0+255),b
 41602  00693A  0E00               	movlw	0
 41603  00693C  6FBB               	movwf	(?___fltol+3)& (0+255),b
 41604                           
 41605                           ; BSR set to: 0
 41606  00693E  0012               	return	
 41607  006940                     
 41608                           ; BSR set to: 0
 41609                           
 41610                           ; BSR set to: 0
 41611  006940  90D8               	bcf	status,0,c
 41612  006942  37B8               	rlcf	___fltol@f1& (0+255),f,b
 41613  006944  37B9               	rlcf	(___fltol@f1+1)& (0+255),f,b
 41614  006946  37BA               	rlcf	(___fltol@f1+2)& (0+255),f,b
 41615  006948  37BB               	rlcf	(___fltol@f1+3)& (0+255),f,b
 41616  00694A  07C1               	decf	___fltol@exp1& (0+255),f,b
 41617  00694C                     l5657:
 41618                           
 41619                           ; BSR set to: 0
 41620                           
 41621                           ; BSR set to: 0
 41622  00694C  51C1               	movf	___fltol@exp1& (0+255),w,b
 41623  00694E  A4D8               	btfss	status,2,c
 41624  006950  D7F7               	goto	l5658
 41625  006952                     u25630:
 41626                           
 41627                           ; BSR set to: 0
 41628                           
 41629                           ; BSR set to: 0
 41630                           
 41631                           ; BSR set to: 0
 41632  006952  51C0               	movf	___fltol@sign1& (0+255),w,b
 41633  006954  B4D8               	btfsc	status,2,c
 41634  006956  D008               	goto	l5660
 41635                           
 41636                           ; BSR set to: 0
 41637  006958  1FBB               	comf	(___fltol@f1+3)& (0+255),f,b
 41638  00695A  1FBA               	comf	(___fltol@f1+2)& (0+255),f,b
 41639  00695C  1FB9               	comf	(___fltol@f1+1)& (0+255),f,b
 41640  00695E  6DB8               	negf	___fltol@f1& (0+255),b
 41641  006960  0E00               	movlw	0
 41642  006962  23B9               	addwfc	(___fltol@f1+1)& (0+255),f,b
 41643  006964  23BA               	addwfc	(___fltol@f1+2)& (0+255),f,b
 41644  006966  23BB               	addwfc	(___fltol@f1+3)& (0+255),f,b
 41645  006968                     l5660:
 41646                           
 41647                           ; BSR set to: 0
 41648                           
 41649                           ; BSR set to: 0
 41650  006968  C0B8  F0B8         	movff	___fltol@f1,?___fltol
 41651  00696C  C0B9  F0B9         	movff	___fltol@f1+1,?___fltol+1
 41652  006970  C0BA  F0BA         	movff	___fltol@f1+2,?___fltol+2
 41653  006974  C0BB  F0BB         	movff	___fltol@f1+3,?___fltol+3
 41654  006978  0012               	return	
 41655  00697A                     __end_of___fltol:
 41656                           	opt stack 0
 41657                           tblptru	equ	0xFF8
 41658                           tblptrh	equ	0xFF7
 41659                           tblptrl	equ	0xFF6
 41660                           tablat	equ	0xFF5
 41661                           prodh	equ	0xFF4
 41662                           prodl	equ	0xFF3
 41663                           intcon	equ	0xFF2
 41664                           intcon2	equ	0xFF1
 41665                           postinc0	equ	0xFEE
 41666                           wreg	equ	0xFE8
 41667                           indf1	equ	0xFE7
 41668                           postinc1	equ	0xFE6
 41669                           postdec1	equ	0xFE5
 41670                           fsr1h	equ	0xFE2
 41671                           fsr1l	equ	0xFE1
 41672                           indf2	equ	0xFDF
 41673                           postinc2	equ	0xFDE
 41674                           postdec2	equ	0xFDD
 41675                           plusw2	equ	0xFDB
 41676                           fsr2h	equ	0xFDA
 41677                           fsr2l	equ	0xFD9
 41678                           status	equ	0xFD8
 41679                           
 41680 ;; *************** function ___flneg *****************
 41681 ;; Defined at:
 41682 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
 41683 ;; Parameters:    Size  Location     Type
 41684 ;;  f1              4   64[BANK0 ] long 
 41685 ;; Auto vars:     Size  Location     Type
 41686 ;;		None
 41687 ;; Return value:  Size  Location     Type
 41688 ;;                  4   64[BANK0 ] long 
 41689 ;; Registers used:
 41690 ;;		wreg, status,2, status,0
 41691 ;; Tracked objects:
 41692 ;;		On entry : 0/0
 41693 ;;		On exit  : 0/0
 41694 ;;		Unchanged: 0/0
 41695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41696 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41699 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41700 ;;Total ram usage:        4 bytes
 41701 ;; Hardware stack levels used:    1
 41702 ;; Hardware stack levels required when called:    5
 41703 ;; This function calls:
 41704 ;;		Nothing
 41705 ;; This function is called by:
 41706 ;;		_readPotentiometers
 41707 ;;		_calculate_pulse_length
 41708 ;; This function uses a non-reentrant model
 41709 ;;
 41710                           
 41711                           	psect	text129
 41712  0092B2                     __ptext129:
 41713                           	opt stack 0
 41714  0092B2                     ___flneg:
 41715                           	opt stack 22
 41716                           
 41717                           ; BSR set to: 0
 41718                           ;incstack = 0
 41719  0092B2  0100               	movlb	0	; () banked
 41720  0092B4  51A0               	movf	___flneg@f1& (0+255),w,b
 41721  0092B6  11A1               	iorwf	(___flneg@f1+1)& (0+255),w,b
 41722  0092B8  11A2               	iorwf	(___flneg@f1+2)& (0+255),w,b
 41723  0092BA  11A3               	iorwf	(___flneg@f1+3)& (0+255),w,b
 41724  0092BC  B4D8               	btfsc	status,2,c
 41725  0092BE  D008               	goto	l5626
 41726                           
 41727                           ; BSR set to: 0
 41728  0092C0  0E00               	movlw	0
 41729  0092C2  1BA0               	xorwf	___flneg@f1& (0+255),f,b
 41730  0092C4  0E00               	movlw	0
 41731  0092C6  1BA1               	xorwf	(___flneg@f1+1)& (0+255),f,b
 41732  0092C8  0E00               	movlw	0
 41733  0092CA  1BA2               	xorwf	(___flneg@f1+2)& (0+255),f,b
 41734  0092CC  0E80               	movlw	128
 41735  0092CE  1BA3               	xorwf	(___flneg@f1+3)& (0+255),f,b
 41736  0092D0                     l5626:
 41737                           
 41738                           ; BSR set to: 0
 41739                           
 41740                           ; BSR set to: 0
 41741  0092D0  C0A0  F0A0         	movff	___flneg@f1,?___flneg
 41742  0092D4  C0A1  F0A1         	movff	___flneg@f1+1,?___flneg+1
 41743  0092D8  C0A2  F0A2         	movff	___flneg@f1+2,?___flneg+2
 41744  0092DC  C0A3  F0A3         	movff	___flneg@f1+3,?___flneg+3
 41745  0092E0  0012               	return	
 41746  0092E2                     __end_of___flneg:
 41747                           	opt stack 0
 41748                           tblptru	equ	0xFF8
 41749                           tblptrh	equ	0xFF7
 41750                           tblptrl	equ	0xFF6
 41751                           tablat	equ	0xFF5
 41752                           prodh	equ	0xFF4
 41753                           prodl	equ	0xFF3
 41754                           intcon	equ	0xFF2
 41755                           intcon2	equ	0xFF1
 41756                           postinc0	equ	0xFEE
 41757                           wreg	equ	0xFE8
 41758                           indf1	equ	0xFE7
 41759                           postinc1	equ	0xFE6
 41760                           postdec1	equ	0xFE5
 41761                           fsr1h	equ	0xFE2
 41762                           fsr1l	equ	0xFE1
 41763                           indf2	equ	0xFDF
 41764                           postinc2	equ	0xFDE
 41765                           postdec2	equ	0xFDD
 41766                           plusw2	equ	0xFDB
 41767                           fsr2h	equ	0xFDA
 41768                           fsr2l	equ	0xFD9
 41769                           status	equ	0xFD8
 41770                           
 41771 ;; *************** function ___flmul *****************
 41772 ;; Defined at:
 41773 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
 41774 ;; Parameters:    Size  Location     Type
 41775 ;;  b               4   14[BANK0 ] long 
 41776 ;;  a               4   18[BANK0 ] long 
 41777 ;; Auto vars:     Size  Location     Type
 41778 ;;  prod            4   33[BANK0 ] struct .
 41779 ;;  grs             4   27[BANK0 ] unsigned long 
 41780 ;;  temp            2   37[BANK0 ] struct .
 41781 ;;  bexp            1   32[BANK0 ] unsigned char 
 41782 ;;  aexp            1   31[BANK0 ] unsigned char 
 41783 ;;  sign            1   26[BANK0 ] unsigned char 
 41784 ;; Return value:  Size  Location     Type
 41785 ;;                  4   14[BANK0 ] unsigned char 
 41786 ;; Registers used:
 41787 ;;		wreg, status,2, status,0, prodl, prodh
 41788 ;; Tracked objects:
 41789 ;;		On entry : 0/0
 41790 ;;		On exit  : 0/0
 41791 ;;		Unchanged: 0/0
 41792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41793 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41794 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41795 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41796 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41797 ;;Total ram usage:       25 bytes
 41798 ;; Hardware stack levels used:    1
 41799 ;; Hardware stack levels required when called:    5
 41800 ;; This function calls:
 41801 ;;		Nothing
 41802 ;; This function is called by:
 41803 ;;		_readPotentiometers
 41804 ;;		_calculate_pulse_length
 41805 ;; This function uses a non-reentrant model
 41806 ;;
 41807                           
 41808                           	psect	text130
 41809  0032FC                     __ptext130:
 41810                           	opt stack 0
 41811  0032FC                     ___flmul:
 41812                           	opt stack 22
 41813                           
 41814                           ; BSR set to: 0
 41815                           ;incstack = 0
 41816  0032FC  0100               	movlb	0	; () banked
 41817  0032FE  5171               	movf	(___flmul@b+3)& (0+255),w,b
 41818  003300  0B80               	andlw	128
 41819  003302  6F7A               	movwf	___flmul@sign& (0+255),b
 41820  003304  5171               	movf	(___flmul@b+3)& (0+255),w,b
 41821  003306  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 41822  003308  6F80               	movwf	___flmul@bexp& (0+255),b
 41823                           
 41824                           ; BSR set to: 0
 41825  00330A  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 41826                           
 41827                           ; BSR set to: 0
 41828  00330C  8180               	bsf	___flmul@bexp& (0+255),0,b
 41829                           
 41830                           ; BSR set to: 0
 41831                           
 41832                           ; BSR set to: 0
 41833  00330E  5180               	movf	___flmul@bexp& (0+255),w,b
 41834  003310  B4D8               	btfsc	status,2,c
 41835  003312  D00D               	goto	l5947
 41836                           
 41837                           ; BSR set to: 0
 41838  003314  2980               	incf	___flmul@bexp& (0+255),w,b
 41839  003316  A4D8               	btfss	status,2,c
 41840  003318  D008               	goto	l5948
 41841                           
 41842                           ; BSR set to: 0
 41843  00331A  0E00               	movlw	0
 41844  00331C  6F6E               	movwf	___flmul@b& (0+255),b
 41845  00331E  0E00               	movlw	0
 41846  003320  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 41847  003322  0E00               	movlw	0
 41848  003324  6F70               	movwf	(___flmul@b+2)& (0+255),b
 41849  003326  0E00               	movlw	0
 41850  003328  6F71               	movwf	(___flmul@b+3)& (0+255),b
 41851  00332A                     l5948:
 41852                           
 41853                           ; BSR set to: 0
 41854                           
 41855                           ; BSR set to: 0
 41856  00332A  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 41857  00332C  D008               	goto	l5949
 41858  00332E                     l5947:
 41859                           
 41860                           ; BSR set to: 0
 41861                           
 41862                           ; BSR set to: 0
 41863  00332E  0E00               	movlw	0
 41864  003330  6F6E               	movwf	___flmul@b& (0+255),b
 41865  003332  0E00               	movlw	0
 41866  003334  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 41867  003336  0E00               	movlw	0
 41868  003338  6F70               	movwf	(___flmul@b+2)& (0+255),b
 41869  00333A  0E00               	movlw	0
 41870  00333C  6F71               	movwf	(___flmul@b+3)& (0+255),b
 41871  00333E                     l5949:
 41872                           
 41873                           ; BSR set to: 0
 41874                           
 41875                           ; BSR set to: 0
 41876  00333E  5175               	movf	(___flmul@a+3)& (0+255),w,b
 41877  003340  0B80               	andlw	128
 41878  003342  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 41879                           
 41880                           ; BSR set to: 0
 41881  003344  5175               	movf	(___flmul@a+3)& (0+255),w,b
 41882  003346  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 41883  003348  6F7F               	movwf	___flmul@aexp& (0+255),b
 41884                           
 41885                           ; BSR set to: 0
 41886  00334A  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 41887                           
 41888                           ; BSR set to: 0
 41889  00334C  817F               	bsf	___flmul@aexp& (0+255),0,b
 41890                           
 41891                           ; BSR set to: 0
 41892                           
 41893                           ; BSR set to: 0
 41894  00334E  517F               	movf	___flmul@aexp& (0+255),w,b
 41895  003350  B4D8               	btfsc	status,2,c
 41896  003352  D00D               	goto	l5951
 41897                           
 41898                           ; BSR set to: 0
 41899  003354  297F               	incf	___flmul@aexp& (0+255),w,b
 41900  003356  A4D8               	btfss	status,2,c
 41901  003358  D008               	goto	l5952
 41902                           
 41903                           ; BSR set to: 0
 41904  00335A  0E00               	movlw	0
 41905  00335C  6F72               	movwf	___flmul@a& (0+255),b
 41906  00335E  0E00               	movlw	0
 41907  003360  6F73               	movwf	(___flmul@a+1)& (0+255),b
 41908  003362  0E00               	movlw	0
 41909  003364  6F74               	movwf	(___flmul@a+2)& (0+255),b
 41910  003366  0E00               	movlw	0
 41911  003368  6F75               	movwf	(___flmul@a+3)& (0+255),b
 41912  00336A                     l5952:
 41913                           
 41914                           ; BSR set to: 0
 41915                           
 41916                           ; BSR set to: 0
 41917  00336A  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 41918  00336C  D008               	goto	l5953
 41919  00336E                     l5951:
 41920                           
 41921                           ; BSR set to: 0
 41922                           
 41923                           ; BSR set to: 0
 41924  00336E  0E00               	movlw	0
 41925  003370  6F72               	movwf	___flmul@a& (0+255),b
 41926  003372  0E00               	movlw	0
 41927  003374  6F73               	movwf	(___flmul@a+1)& (0+255),b
 41928  003376  0E00               	movlw	0
 41929  003378  6F74               	movwf	(___flmul@a+2)& (0+255),b
 41930  00337A  0E00               	movlw	0
 41931  00337C  6F75               	movwf	(___flmul@a+3)& (0+255),b
 41932  00337E                     l5953:
 41933                           
 41934                           ; BSR set to: 0
 41935  00337E  517F               	movf	___flmul@aexp& (0+255),w,b
 41936  003380  B4D8               	btfsc	status,2,c
 41937  003382  D003               	goto	u25390
 41938                           
 41939                           ; BSR set to: 0
 41940  003384  5180               	movf	___flmul@bexp& (0+255),w,b
 41941  003386  A4D8               	btfss	status,2,c
 41942  003388  D009               	goto	l5954
 41943  00338A                     u25390:
 41944                           
 41945                           ; BSR set to: 0
 41946                           
 41947                           ; BSR set to: 0
 41948  00338A  0E00               	movlw	0
 41949  00338C  6F6E               	movwf	?___flmul& (0+255),b
 41950  00338E  0E00               	movlw	0
 41951  003390  6F6F               	movwf	(?___flmul+1)& (0+255),b
 41952  003392  0E00               	movlw	0
 41953  003394  6F70               	movwf	(?___flmul+2)& (0+255),b
 41954  003396  0E00               	movlw	0
 41955  003398  6F71               	movwf	(?___flmul+3)& (0+255),b
 41956                           
 41957                           ; BSR set to: 0
 41958  00339A  0012               	return	
 41959  00339C                     l5954:
 41960                           
 41961                           ; BSR set to: 0
 41962                           
 41963                           ; BSR set to: 0
 41964  00339C  5174               	movf	(___flmul@a+2)& (0+255),w,b
 41965  00339E  036E               	mulwf	___flmul@b& (0+255),b
 41966  0033A0  CFF3 F085          	movff	prodl,___flmul@temp
 41967  0033A4  CFF4 F086          	movff	prodh,___flmul@temp+1
 41968                           
 41969                           ; BSR set to: 0
 41970  0033A8  5185               	movf	___flmul@temp& (0+255),w,b
 41971  0033AA  6F7B               	movwf	___flmul@grs& (0+255),b
 41972  0033AC  6B7C               	clrf	(___flmul@grs+1)& (0+255),b
 41973  0033AE  6B7D               	clrf	(___flmul@grs+2)& (0+255),b
 41974  0033B0  6B7E               	clrf	(___flmul@grs+3)& (0+255),b
 41975                           
 41976                           ; BSR set to: 0
 41977  0033B2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41978  0033B4  6F81               	movwf	___flmul@prod& (0+255),b
 41979  0033B6  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 41980  0033B8  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 41981  0033BA  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 41982  0033BC  5173               	movf	(___flmul@a+1)& (0+255),w,b
 41983  0033BE  036F               	mulwf	(___flmul@b+1)& (0+255),b
 41984  0033C0  CFF3 F085          	movff	prodl,___flmul@temp
 41985  0033C4  CFF4 F086          	movff	prodh,___flmul@temp+1
 41986                           
 41987                           ; BSR set to: 0
 41988  0033C8  5185               	movf	___flmul@temp& (0+255),w,b
 41989  0033CA  277B               	addwf	___flmul@grs& (0+255),f,b
 41990  0033CC  0E00               	movlw	0
 41991  0033CE  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 41992  0033D0  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 41993  0033D2  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 41994                           
 41995                           ; BSR set to: 0
 41996  0033D4  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41997  0033D6  2781               	addwf	___flmul@prod& (0+255),f,b
 41998  0033D8  0E00               	movlw	0
 41999  0033DA  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42000  0033DC  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42001  0033DE  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42002  0033E0  5172               	movf	___flmul@a& (0+255),w,b
 42003  0033E2  0370               	mulwf	(___flmul@b+2)& (0+255),b
 42004  0033E4  CFF3 F085          	movff	prodl,___flmul@temp
 42005  0033E8  CFF4 F086          	movff	prodh,___flmul@temp+1
 42006                           
 42007                           ; BSR set to: 0
 42008  0033EC  5185               	movf	___flmul@temp& (0+255),w,b
 42009  0033EE  277B               	addwf	___flmul@grs& (0+255),f,b
 42010  0033F0  0E00               	movlw	0
 42011  0033F2  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42012  0033F4  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42013  0033F6  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42014                           
 42015                           ; BSR set to: 0
 42016  0033F8  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42017  0033FA  2781               	addwf	___flmul@prod& (0+255),f,b
 42018  0033FC  0E00               	movlw	0
 42019  0033FE  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42020  003400  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42021  003402  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42022                           
 42023                           ; BSR set to: 0
 42024  003404  C07D  F07E         	movff	___flmul@grs+2,___flmul@grs+3
 42025  003408  C07C  F07D         	movff	___flmul@grs+1,___flmul@grs+2
 42026  00340C  C07B  F07C         	movff	___flmul@grs,___flmul@grs+1
 42027  003410  6B7B               	clrf	___flmul@grs& (0+255),b
 42028                           
 42029                           ; BSR set to: 0
 42030  003412  5172               	movf	___flmul@a& (0+255),w,b
 42031  003414  036F               	mulwf	(___flmul@b+1)& (0+255),b
 42032  003416  CFF3 F085          	movff	prodl,___flmul@temp
 42033  00341A  CFF4 F086          	movff	prodh,___flmul@temp+1
 42034                           
 42035                           ; BSR set to: 0
 42036  00341E  5185               	movf	___flmul@temp& (0+255),w,b
 42037  003420  277B               	addwf	___flmul@grs& (0+255),f,b
 42038  003422  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42039  003424  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42040  003426  0E00               	movlw	0
 42041  003428  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42042  00342A  0E00               	movlw	0
 42043  00342C  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42044                           
 42045                           ; BSR set to: 0
 42046  00342E  5173               	movf	(___flmul@a+1)& (0+255),w,b
 42047  003430  036E               	mulwf	___flmul@b& (0+255),b
 42048  003432  CFF3 F085          	movff	prodl,___flmul@temp
 42049  003436  CFF4 F086          	movff	prodh,___flmul@temp+1
 42050                           
 42051                           ; BSR set to: 0
 42052  00343A  5185               	movf	___flmul@temp& (0+255),w,b
 42053  00343C  277B               	addwf	___flmul@grs& (0+255),f,b
 42054  00343E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42055  003440  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42056  003442  0E00               	movlw	0
 42057  003444  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42058  003446  0E00               	movlw	0
 42059  003448  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42060                           
 42061                           ; BSR set to: 0
 42062  00344A  C07D  F07E         	movff	___flmul@grs+2,___flmul@grs+3
 42063  00344E  C07C  F07D         	movff	___flmul@grs+1,___flmul@grs+2
 42064  003452  C07B  F07C         	movff	___flmul@grs,___flmul@grs+1
 42065  003456  6B7B               	clrf	___flmul@grs& (0+255),b
 42066  003458  5172               	movf	___flmul@a& (0+255),w,b
 42067  00345A  036E               	mulwf	___flmul@b& (0+255),b
 42068  00345C  CFF3 F085          	movff	prodl,___flmul@temp
 42069  003460  CFF4 F086          	movff	prodh,___flmul@temp+1
 42070                           
 42071                           ; BSR set to: 0
 42072  003464  5185               	movf	___flmul@temp& (0+255),w,b
 42073  003466  277B               	addwf	___flmul@grs& (0+255),f,b
 42074  003468  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42075  00346A  237C               	addwfc	(___flmul@grs+1)& (0+255),f,b
 42076  00346C  0E00               	movlw	0
 42077  00346E  237D               	addwfc	(___flmul@grs+2)& (0+255),f,b
 42078  003470  0E00               	movlw	0
 42079  003472  237E               	addwfc	(___flmul@grs+3)& (0+255),f,b
 42080                           
 42081                           ; BSR set to: 0
 42082  003474  5174               	movf	(___flmul@a+2)& (0+255),w,b
 42083  003476  036F               	mulwf	(___flmul@b+1)& (0+255),b
 42084  003478  CFF3 F085          	movff	prodl,___flmul@temp
 42085  00347C  CFF4 F086          	movff	prodh,___flmul@temp+1
 42086  003480  5185               	movf	___flmul@temp& (0+255),w,b
 42087  003482  2781               	addwf	___flmul@prod& (0+255),f,b
 42088  003484  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42089  003486  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42090  003488  0E00               	movlw	0
 42091  00348A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42092  00348C  0E00               	movlw	0
 42093  00348E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42094                           
 42095                           ; BSR set to: 0
 42096  003490  5173               	movf	(___flmul@a+1)& (0+255),w,b
 42097  003492  0370               	mulwf	(___flmul@b+2)& (0+255),b
 42098  003494  CFF3 F085          	movff	prodl,___flmul@temp
 42099  003498  CFF4 F086          	movff	prodh,___flmul@temp+1
 42100                           
 42101                           ; BSR set to: 0
 42102  00349C  5185               	movf	___flmul@temp& (0+255),w,b
 42103  00349E  2781               	addwf	___flmul@prod& (0+255),f,b
 42104  0034A0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42105  0034A2  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42106  0034A4  0E00               	movlw	0
 42107  0034A6  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42108  0034A8  0E00               	movlw	0
 42109  0034AA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42110  0034AC  5174               	movf	(___flmul@a+2)& (0+255),w,b
 42111  0034AE  0370               	mulwf	(___flmul@b+2)& (0+255),b
 42112  0034B0  CFF3 F085          	movff	prodl,___flmul@temp
 42113  0034B4  CFF4 F086          	movff	prodh,___flmul@temp+1
 42114                           
 42115                           ; BSR set to: 0
 42116  0034B8  5185               	movf	___flmul@temp& (0+255),w,b
 42117  0034BA  6F76               	movwf	??___flmul& (0+255),b
 42118  0034BC  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42119  0034BE  6F77               	movwf	(??___flmul+1)& (0+255),b
 42120  0034C0  6B78               	clrf	(??___flmul+2)& (0+255),b
 42121  0034C2  6B79               	clrf	(??___flmul+3)& (0+255),b
 42122  0034C4  C078  F079         	movff	??___flmul+2,??___flmul+3
 42123  0034C8  C077  F078         	movff	??___flmul+1,??___flmul+2
 42124  0034CC  C076  F077         	movff	??___flmul,??___flmul+1
 42125  0034D0  6B76               	clrf	??___flmul& (0+255),b
 42126  0034D2  5176               	movf	??___flmul& (0+255),w,b
 42127  0034D4  2781               	addwf	___flmul@prod& (0+255),f,b
 42128  0034D6  5177               	movf	(??___flmul+1)& (0+255),w,b
 42129  0034D8  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42130  0034DA  5178               	movf	(??___flmul+2)& (0+255),w,b
 42131  0034DC  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42132  0034DE  5179               	movf	(??___flmul+3)& (0+255),w,b
 42133  0034E0  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42134                           
 42135                           ; BSR set to: 0
 42136  0034E2  C07B  F076         	movff	___flmul@grs,??___flmul
 42137  0034E6  C07C  F077         	movff	___flmul@grs+1,??___flmul+1
 42138  0034EA  C07D  F078         	movff	___flmul@grs+2,??___flmul+2
 42139  0034EE  C07E  F079         	movff	___flmul@grs+3,??___flmul+3
 42140  0034F2  0E19               	movlw	25
 42141  0034F4  D005               	goto	u25400
 42142  0034F6                     u25405:
 42143  0034F6  90D8               	bcf	status,0,c
 42144  0034F8  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 42145  0034FA  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 42146  0034FC  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 42147  0034FE  3376               	rrcf	??___flmul& (0+255),f,b
 42148  003500                     u25400:
 42149  003500  2EE8               	decfsz	wreg,f,c
 42150  003502  D7F9               	goto	u25405
 42151  003504  5176               	movf	??___flmul& (0+255),w,b
 42152  003506  2781               	addwf	___flmul@prod& (0+255),f,b
 42153  003508  5177               	movf	(??___flmul+1)& (0+255),w,b
 42154  00350A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42155  00350C  5178               	movf	(??___flmul+2)& (0+255),w,b
 42156  00350E  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42157  003510  5179               	movf	(??___flmul+3)& (0+255),w,b
 42158  003512  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42159                           
 42160                           ; BSR set to: 0
 42161  003514  C07D  F07E         	movff	___flmul@grs+2,___flmul@grs+3
 42162  003518  C07C  F07D         	movff	___flmul@grs+1,___flmul@grs+2
 42163  00351C  C07B  F07C         	movff	___flmul@grs,___flmul@grs+1
 42164  003520  6B7B               	clrf	___flmul@grs& (0+255),b
 42165                           
 42166                           ; BSR set to: 0
 42167  003522  517F               	movf	___flmul@aexp& (0+255),w,b
 42168  003524  C080  F076         	movff	___flmul@bexp,??___flmul
 42169  003528  6B77               	clrf	(??___flmul+1)& (0+255),b
 42170  00352A  2776               	addwf	??___flmul& (0+255),f,b
 42171  00352C  0E00               	movlw	0
 42172  00352E  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 42173  003530  0E82               	movlw	130
 42174  003532  2576               	addwf	??___flmul& (0+255),w,b
 42175  003534  6F85               	movwf	___flmul@temp& (0+255),b
 42176  003536  0EFF               	movlw	255
 42177  003538  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 42178  00353A  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 42179  00353C  D00F               	goto	l5958
 42180  00353E                     
 42181                           ; BSR set to: 0
 42182                           
 42183                           ; BSR set to: 0
 42184  00353E  90D8               	bcf	status,0,c
 42185  003540  3781               	rlcf	___flmul@prod& (0+255),f,b
 42186  003542  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 42187  003544  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 42188  003546  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 42189                           
 42190                           ; BSR set to: 0
 42191  003548  BF7E               	btfsc	(___flmul@grs+3)& (0+255),7,b
 42192                           
 42193                           ; BSR set to: 0
 42194  00354A  8181               	bsf	___flmul@prod& (0+255),0,b
 42195                           
 42196                           ; BSR set to: 0
 42197  00354C  90D8               	bcf	status,0,c
 42198  00354E  377B               	rlcf	___flmul@grs& (0+255),f,b
 42199  003550  377C               	rlcf	(___flmul@grs+1)& (0+255),f,b
 42200  003552  377D               	rlcf	(___flmul@grs+2)& (0+255),f,b
 42201  003554  377E               	rlcf	(___flmul@grs+3)& (0+255),f,b
 42202  003556  0785               	decf	___flmul@temp& (0+255),f,b
 42203  003558  A0D8               	btfss	status,0,c
 42204  00355A  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 42205  00355C                     l5958:
 42206                           
 42207                           ; BSR set to: 0
 42208                           
 42209                           ; BSR set to: 0
 42210  00355C  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 42211  00355E  D7EF               	goto	l5959
 42212                           
 42213                           ; BSR set to: 0
 42214                           
 42215                           ; BSR set to: 0
 42216  003560  0E00               	movlw	0
 42217  003562  6F7F               	movwf	___flmul@aexp& (0+255),b
 42218                           
 42219                           ; BSR set to: 0
 42220  003564  AF7E               	btfss	(___flmul@grs+3)& (0+255),7,b
 42221  003566  D016               	goto	l5965
 42222                           
 42223                           ; BSR set to: 0
 42224  003568  0EFF               	movlw	255
 42225  00356A  157B               	andwf	___flmul@grs& (0+255),w,b
 42226  00356C  6F76               	movwf	??___flmul& (0+255),b
 42227  00356E  0EFF               	movlw	255
 42228  003570  157C               	andwf	(___flmul@grs+1)& (0+255),w,b
 42229  003572  6F77               	movwf	(??___flmul+1)& (0+255),b
 42230  003574  0EFF               	movlw	255
 42231  003576  157D               	andwf	(___flmul@grs+2)& (0+255),w,b
 42232  003578  6F78               	movwf	(??___flmul+2)& (0+255),b
 42233  00357A  0E7F               	movlw	127
 42234  00357C  157E               	andwf	(___flmul@grs+3)& (0+255),w,b
 42235  00357E  6F79               	movwf	(??___flmul+3)& (0+255),b
 42236  003580  5176               	movf	??___flmul& (0+255),w,b
 42237  003582  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 42238  003584  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 42239  003586  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 42240  003588  A4D8               	btfss	status,2,c
 42241  00358A  D002               	goto	u25450
 42242                           
 42243                           ; BSR set to: 0
 42244                           
 42245                           ; BSR set to: 0
 42246  00358C  A181               	btfss	___flmul@prod& (0+255),0,b
 42247  00358E  D002               	goto	l5965
 42248  003590                     u25450:
 42249                           
 42250                           ; BSR set to: 0
 42251  003590  0E01               	movlw	1
 42252  003592  6F7F               	movwf	___flmul@aexp& (0+255),b
 42253  003594                     l5965:
 42254                           
 42255                           ; BSR set to: 0
 42256                           
 42257                           ; BSR set to: 0
 42258                           
 42259                           ; BSR set to: 0
 42260  003594  517F               	movf	___flmul@aexp& (0+255),w,b
 42261  003596  B4D8               	btfsc	status,2,c
 42262  003598  D01F               	goto	l5967
 42263                           
 42264                           ; BSR set to: 0
 42265  00359A  0E01               	movlw	1
 42266  00359C  2781               	addwf	___flmul@prod& (0+255),f,b
 42267  00359E  0E00               	movlw	0
 42268  0035A0  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 42269  0035A2  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 42270  0035A4  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 42271                           
 42272                           ; BSR set to: 0
 42273  0035A6  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 42274  0035A8  D017               	goto	l5967
 42275                           
 42276                           ; BSR set to: 0
 42277  0035AA  C081  F076         	movff	___flmul@prod,??___flmul
 42278  0035AE  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 42279  0035B2  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 42280  0035B6  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 42281  0035BA  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 42282  0035BC  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 42283  0035BE  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 42284  0035C0  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 42285  0035C2  3376               	rrcf	??___flmul& (0+255),f,b
 42286  0035C4  C076  F081         	movff	??___flmul,___flmul@prod
 42287  0035C8  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 42288  0035CC  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 42289  0035D0  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 42290                           
 42291                           ; BSR set to: 0
 42292  0035D4  4B85               	infsnz	___flmul@temp& (0+255),f,b
 42293  0035D6  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 42294  0035D8                     l5967:
 42295                           
 42296                           ; BSR set to: 0
 42297                           
 42298                           ; BSR set to: 0
 42299                           
 42300                           ; BSR set to: 0
 42301  0035D8  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 42302  0035DA  D00D               	goto	l5968
 42303  0035DC  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42304  0035DE  E103               	bnz	u25480
 42305  0035E0  2985               	incf	___flmul@temp& (0+255),w,b
 42306  0035E2  A0D8               	btfss	status,0,c
 42307  0035E4  D008               	goto	l5968
 42308  0035E6                     u25480:
 42309                           
 42310                           ; BSR set to: 0
 42311  0035E6  0E00               	movlw	0
 42312  0035E8  6F81               	movwf	___flmul@prod& (0+255),b
 42313  0035EA  0E00               	movlw	0
 42314  0035EC  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 42315  0035EE  0E80               	movlw	128
 42316  0035F0  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 42317  0035F2  0E7F               	movlw	127
 42318  0035F4  D020               	goto	L21
 42319  0035F6                     l5968:
 42320                           
 42321                           ; BSR set to: 0
 42322                           
 42323                           ; BSR set to: 0
 42324  0035F6  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 42325  0035F8  D005               	goto	u25490
 42326  0035FA  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 42327  0035FC  E10E               	bnz	l5970
 42328  0035FE  0585               	decf	___flmul@temp& (0+255),w,b
 42329  003600  B0D8               	btfsc	status,0,c
 42330  003602  D00B               	goto	l5970
 42331  003604                     u25490:
 42332                           
 42333                           ; BSR set to: 0
 42334  003604  0E00               	movlw	0
 42335  003606  6F81               	movwf	___flmul@prod& (0+255),b
 42336  003608  0E00               	movlw	0
 42337  00360A  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 42338  00360C  0E00               	movlw	0
 42339  00360E  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 42340  003610  0E00               	movlw	0
 42341  003612  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 42342  003614  0E00               	movlw	0
 42343  003616  6F7A               	movwf	___flmul@sign& (0+255),b
 42344  003618  D00F               	goto	l5971
 42345  00361A                     l5970:
 42346                           
 42347                           ; BSR set to: 0
 42348  00361A  C085  F080         	movff	___flmul@temp,___flmul@bexp
 42349                           
 42350                           ; BSR set to: 0
 42351  00361E  0EFF               	movlw	255
 42352  003620  1781               	andwf	___flmul@prod& (0+255),f,b
 42353  003622  0EFF               	movlw	255
 42354  003624  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 42355  003626  0E7F               	movlw	127
 42356  003628  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 42357  00362A  0E00               	movlw	0
 42358  00362C  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 42359                           
 42360                           ; BSR set to: 0
 42361  00362E  B180               	btfsc	___flmul@bexp& (0+255),0,b
 42362                           
 42363                           ; BSR set to: 0
 42364  003630  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 42365                           
 42366                           ; BSR set to: 0
 42367                           
 42368                           ; BSR set to: 0
 42369  003632  90D8               	bcf	status,0,c
 42370  003634  3180               	rrcf	___flmul@bexp& (0+255),w,b
 42371  003636                     L21:
 42372  003636  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 42373  003638                     l5971:
 42374                           
 42375                           ; BSR set to: 0
 42376                           
 42377                           ; BSR set to: 0
 42378                           
 42379                           ; BSR set to: 0
 42380  003638  517A               	movf	___flmul@sign& (0+255),w,b
 42381  00363A  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 42382                           
 42383                           ; BSR set to: 0
 42384  00363C  C081  F06E         	movff	___flmul@prod,?___flmul
 42385  003640  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 42386  003644  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 42387  003648  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 42388  00364C  0012               	return	
 42389  00364E                     __end_of___flmul:
 42390                           	opt stack 0
 42391                           tblptru	equ	0xFF8
 42392                           tblptrh	equ	0xFF7
 42393                           tblptrl	equ	0xFF6
 42394                           tablat	equ	0xFF5
 42395                           prodh	equ	0xFF4
 42396                           prodl	equ	0xFF3
 42397                           intcon	equ	0xFF2
 42398                           intcon2	equ	0xFF1
 42399                           postinc0	equ	0xFEE
 42400                           wreg	equ	0xFE8
 42401                           indf1	equ	0xFE7
 42402                           postinc1	equ	0xFE6
 42403                           postdec1	equ	0xFE5
 42404                           fsr1h	equ	0xFE2
 42405                           fsr1l	equ	0xFE1
 42406                           indf2	equ	0xFDF
 42407                           postinc2	equ	0xFDE
 42408                           postdec2	equ	0xFDD
 42409                           plusw2	equ	0xFDB
 42410                           fsr2h	equ	0xFDA
 42411                           fsr2l	equ	0xFD9
 42412                           status	equ	0xFD8
 42413                           
 42414 ;; *************** function ___fladd *****************
 42415 ;; Defined at:
 42416 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 42417 ;; Parameters:    Size  Location     Type
 42418 ;;  b               4   68[BANK0 ] unsigned char 
 42419 ;;  a               4   72[BANK0 ] unsigned char 
 42420 ;; Auto vars:     Size  Location     Type
 42421 ;;  grs             1   87[BANK0 ] unsigned char 
 42422 ;;  bexp            1   86[BANK0 ] unsigned char 
 42423 ;;  aexp            1   85[BANK0 ] unsigned char 
 42424 ;;  signs           1   84[BANK0 ] unsigned char 
 42425 ;; Return value:  Size  Location     Type
 42426 ;;                  4   68[BANK0 ] unsigned char 
 42427 ;; Registers used:
 42428 ;;		wreg, status,2, status,0
 42429 ;; Tracked objects:
 42430 ;;		On entry : 0/0
 42431 ;;		On exit  : 0/0
 42432 ;;		Unchanged: 0/0
 42433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42434 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42435 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42436 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42437 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42438 ;;Total ram usage:       20 bytes
 42439 ;; Hardware stack levels used:    1
 42440 ;; Hardware stack levels required when called:    5
 42441 ;; This function calls:
 42442 ;;		Nothing
 42443 ;; This function is called by:
 42444 ;;		_readPotentiometers
 42445 ;;		_calculate_pulse_length
 42446 ;; This function uses a non-reentrant model
 42447 ;;
 42448                           
 42449                           	psect	text131
 42450  00364E                     __ptext131:
 42451                           	opt stack 0
 42452  00364E                     ___fladd:
 42453                           	opt stack 22
 42454                           
 42455                           ; BSR set to: 0
 42456                           ;incstack = 0
 42457  00364E  0100               	movlb	0	; () banked
 42458  003650  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 42459  003652  0B80               	andlw	128
 42460  003654  6FB4               	movwf	___fladd@signs& (0+255),b
 42461  003656  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 42462  003658  25A7               	addwf	(___fladd@b+3)& (0+255),w,b
 42463  00365A  6FB6               	movwf	___fladd@bexp& (0+255),b
 42464                           
 42465                           ; BSR set to: 0
 42466  00365C  BFA6               	btfsc	(___fladd@b+2)& (0+255),7,b
 42467                           
 42468                           ; BSR set to: 0
 42469  00365E  81B6               	bsf	___fladd@bexp& (0+255),0,b
 42470                           
 42471                           ; BSR set to: 0
 42472                           
 42473                           ; BSR set to: 0
 42474  003660  51B6               	movf	___fladd@bexp& (0+255),w,b
 42475  003662  B4D8               	btfsc	status,2,c
 42476  003664  D00D               	goto	l5856
 42477                           
 42478                           ; BSR set to: 0
 42479  003666  29B6               	incf	___fladd@bexp& (0+255),w,b
 42480  003668  A4D8               	btfss	status,2,c
 42481  00366A  D008               	goto	l5857
 42482                           
 42483                           ; BSR set to: 0
 42484  00366C  0E00               	movlw	0
 42485  00366E  6FA4               	movwf	___fladd@b& (0+255),b
 42486  003670  0E00               	movlw	0
 42487  003672  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 42488  003674  0E00               	movlw	0
 42489  003676  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 42490  003678  0E00               	movlw	0
 42491  00367A  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 42492  00367C                     l5857:
 42493                           
 42494                           ; BSR set to: 0
 42495                           
 42496                           ; BSR set to: 0
 42497  00367C  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 42498  00367E  D006               	goto	L22
 42499  003680                     l5856:
 42500                           
 42501                           ; BSR set to: 0
 42502                           
 42503                           ; BSR set to: 0
 42504  003680  0E00               	movlw	0
 42505  003682  6FA4               	movwf	___fladd@b& (0+255),b
 42506  003684  0E00               	movlw	0
 42507  003686  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 42508  003688  0E00               	movlw	0
 42509  00368A  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 42510  00368C                     L22:
 42511  00368C  0E00               	movlw	0
 42512  00368E  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 42513                           
 42514                           ; BSR set to: 0
 42515                           
 42516                           ; BSR set to: 0
 42517  003690  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 42518  003692  0B80               	andlw	128
 42519  003694  6FB5               	movwf	___fladd@aexp& (0+255),b
 42520                           
 42521                           ; BSR set to: 0
 42522  003696  51B4               	movf	___fladd@signs& (0+255),w,b
 42523  003698  19B5               	xorwf	___fladd@aexp& (0+255),w,b
 42524  00369A  A4D8               	btfss	status,2,c
 42525                           
 42526                           ; BSR set to: 0
 42527  00369C  8DB4               	bsf	___fladd@signs& (0+255),6,b
 42528                           
 42529                           ; BSR set to: 0
 42530                           
 42531                           ; BSR set to: 0
 42532  00369E  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 42533  0036A0  25AB               	addwf	(___fladd@a+3)& (0+255),w,b
 42534  0036A2  6FB5               	movwf	___fladd@aexp& (0+255),b
 42535                           
 42536                           ; BSR set to: 0
 42537  0036A4  BFAA               	btfsc	(___fladd@a+2)& (0+255),7,b
 42538                           
 42539                           ; BSR set to: 0
 42540  0036A6  81B5               	bsf	___fladd@aexp& (0+255),0,b
 42541                           
 42542                           ; BSR set to: 0
 42543                           
 42544                           ; BSR set to: 0
 42545  0036A8  51B5               	movf	___fladd@aexp& (0+255),w,b
 42546  0036AA  B4D8               	btfsc	status,2,c
 42547  0036AC  D00D               	goto	l5861
 42548                           
 42549                           ; BSR set to: 0
 42550  0036AE  29B5               	incf	___fladd@aexp& (0+255),w,b
 42551  0036B0  A4D8               	btfss	status,2,c
 42552  0036B2  D008               	goto	l5862
 42553                           
 42554                           ; BSR set to: 0
 42555  0036B4  0E00               	movlw	0
 42556  0036B6  6FA8               	movwf	___fladd@a& (0+255),b
 42557  0036B8  0E00               	movlw	0
 42558  0036BA  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 42559  0036BC  0E00               	movlw	0
 42560  0036BE  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 42561  0036C0  0E00               	movlw	0
 42562  0036C2  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 42563  0036C4                     l5862:
 42564                           
 42565                           ; BSR set to: 0
 42566                           
 42567                           ; BSR set to: 0
 42568  0036C4  8FAA               	bsf	(___fladd@a+2)& (0+255),7,b
 42569  0036C6  D006               	goto	L23
 42570  0036C8                     l5861:
 42571                           
 42572                           ; BSR set to: 0
 42573                           
 42574                           ; BSR set to: 0
 42575  0036C8  0E00               	movlw	0
 42576  0036CA  6FA8               	movwf	___fladd@a& (0+255),b
 42577  0036CC  0E00               	movlw	0
 42578  0036CE  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 42579  0036D0  0E00               	movlw	0
 42580  0036D2  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 42581  0036D4                     L23:
 42582  0036D4  0E00               	movlw	0
 42583  0036D6  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 42584                           
 42585                           ; BSR set to: 0
 42586                           
 42587                           ; BSR set to: 0
 42588  0036D8  51B6               	movf	___fladd@bexp& (0+255),w,b
 42589  0036DA  5DB5               	subwf	___fladd@aexp& (0+255),w,b
 42590  0036DC  B0D8               	btfsc	status,0,c
 42591  0036DE  D022               	goto	l5864
 42592                           
 42593                           ; BSR set to: 0
 42594  0036E0  ADB4               	btfss	___fladd@signs& (0+255),6,b
 42595  0036E2  D002               	goto	l5865
 42596                           
 42597                           ; BSR set to: 0
 42598  0036E4  0E80               	movlw	128
 42599  0036E6  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 42600  0036E8                     l5865:
 42601                           
 42602                           ; BSR set to: 0
 42603                           
 42604                           ; BSR set to: 0
 42605  0036E8  C0B6  F0B7         	movff	___fladd@bexp,___fladd@grs
 42606                           
 42607                           ; BSR set to: 0
 42608  0036EC  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 42609                           
 42610                           ; BSR set to: 0
 42611  0036F0  C0B7  F0B5         	movff	___fladd@grs,___fladd@aexp
 42612                           
 42613                           ; BSR set to: 0
 42614  0036F4  C0A4  F0B7         	movff	___fladd@b,___fladd@grs
 42615                           
 42616                           ; BSR set to: 0
 42617  0036F8  C0A8  F0A4         	movff	___fladd@a,___fladd@b
 42618                           
 42619                           ; BSR set to: 0
 42620  0036FC  C0B7  F0A8         	movff	___fladd@grs,___fladd@a
 42621                           
 42622                           ; BSR set to: 0
 42623  003700  C0A5  F0B7         	movff	___fladd@b+1,___fladd@grs
 42624                           
 42625                           ; BSR set to: 0
 42626  003704  C0A9  F0A5         	movff	___fladd@a+1,___fladd@b+1
 42627                           
 42628                           ; BSR set to: 0
 42629  003708  C0B7  F0A9         	movff	___fladd@grs,___fladd@a+1
 42630                           
 42631                           ; BSR set to: 0
 42632  00370C  C0A6  F0B7         	movff	___fladd@b+2,___fladd@grs
 42633                           
 42634                           ; BSR set to: 0
 42635  003710  C0AA  F0A6         	movff	___fladd@a+2,___fladd@b+2
 42636                           
 42637                           ; BSR set to: 0
 42638  003714  C0B7  F0AA         	movff	___fladd@grs,___fladd@a+2
 42639                           
 42640                           ; BSR set to: 0
 42641  003718  C0A7  F0B7         	movff	___fladd@b+3,___fladd@grs
 42642                           
 42643                           ; BSR set to: 0
 42644  00371C  C0AB  F0A7         	movff	___fladd@a+3,___fladd@b+3
 42645                           
 42646                           ; BSR set to: 0
 42647  003720  C0B7  F0AB         	movff	___fladd@grs,___fladd@a+3
 42648  003724                     l5864:
 42649                           
 42650                           ; BSR set to: 0
 42651                           
 42652                           ; BSR set to: 0
 42653  003724  0E00               	movlw	0
 42654  003726  6FB7               	movwf	___fladd@grs& (0+255),b
 42655                           
 42656                           ; BSR set to: 0
 42657  003728  51B6               	movf	___fladd@bexp& (0+255),w,b
 42658  00372A  6FAC               	movwf	??___fladd& (0+255),b
 42659  00372C  6BAD               	clrf	(??___fladd+1)& (0+255),b
 42660  00372E  1FAC               	comf	??___fladd& (0+255),f,b
 42661  003730  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 42662  003732  4BAC               	infsnz	??___fladd& (0+255),f,b
 42663  003734  2BAD               	incf	(??___fladd+1)& (0+255),f,b
 42664  003736  51B5               	movf	___fladd@aexp& (0+255),w,b
 42665  003738  6FAE               	movwf	(??___fladd+2)& (0+255),b
 42666  00373A  6BAF               	clrf	(??___fladd+3)& (0+255),b
 42667  00373C  51AC               	movf	??___fladd& (0+255),w,b
 42668  00373E  27AE               	addwf	(??___fladd+2)& (0+255),f,b
 42669  003740  51AD               	movf	(??___fladd+1)& (0+255),w,b
 42670  003742  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 42671  003744  BFAF               	btfsc	(??___fladd+3)& (0+255),7,b
 42672  003746  D02C               	goto	l5868
 42673  003748  51AF               	movf	(??___fladd+3)& (0+255),w,b
 42674  00374A  E104               	bnz	u24790
 42675  00374C  0E1A               	movlw	26
 42676  00374E  5DAE               	subwf	(??___fladd+2)& (0+255),w,b
 42677  003750  A0D8               	btfss	status,0,c
 42678  003752  D026               	goto	l5868
 42679  003754                     u24790:
 42680                           
 42681                           ; BSR set to: 0
 42682  003754  51A4               	movf	___fladd@b& (0+255),w,b
 42683  003756  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 42684  003758  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 42685  00375A  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 42686  00375C  B4D8               	btfsc	status,2,c
 42687  00375E  D002               	goto	u24800
 42688  003760  0E01               	movlw	1
 42689  003762  D001               	goto	u24810
 42690  003764                     u24800:
 42691  003764  0E00               	movlw	0
 42692  003766                     u24810:
 42693  003766  6FB7               	movwf	___fladd@grs& (0+255),b
 42694                           
 42695                           ; BSR set to: 0
 42696  003768  0E00               	movlw	0
 42697  00376A  6FA4               	movwf	___fladd@b& (0+255),b
 42698  00376C  0E00               	movlw	0
 42699  00376E  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 42700  003770  0E00               	movlw	0
 42701  003772  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 42702  003774  0E00               	movlw	0
 42703  003776  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 42704                           
 42705                           ; BSR set to: 0
 42706  003778  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 42707  00377C  D015               	goto	u24840
 42708  00377E                     l5869:
 42709                           
 42710                           ; BSR set to: 0
 42711  00377E  A1B7               	btfss	___fladd@grs& (0+255),0,b
 42712  003780  D005               	goto	l5870
 42713                           
 42714                           ; BSR set to: 0
 42715  003782  90D8               	bcf	status,0,c
 42716  003784  31B7               	rrcf	___fladd@grs& (0+255),w,b
 42717  003786  0901               	iorlw	1
 42718  003788  6FB7               	movwf	___fladd@grs& (0+255),b
 42719  00378A  D002               	goto	l5871
 42720  00378C                     l5870:
 42721                           
 42722                           ; BSR set to: 0
 42723                           
 42724                           ; BSR set to: 0
 42725  00378C  90D8               	bcf	status,0,c
 42726  00378E  33B7               	rrcf	___fladd@grs& (0+255),f,b
 42727  003790                     l5871:
 42728                           
 42729                           ; BSR set to: 0
 42730                           
 42731                           ; BSR set to: 0
 42732  003790  B1A4               	btfsc	___fladd@b& (0+255),0,b
 42733                           
 42734                           ; BSR set to: 0
 42735  003792  8FB7               	bsf	___fladd@grs& (0+255),7,b
 42736                           
 42737                           ; BSR set to: 0
 42738                           
 42739                           ; BSR set to: 0
 42740  003794  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 42741  003796  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 42742  003798  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 42743  00379A  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 42744  00379C  33A4               	rrcf	___fladd@b& (0+255),f,b
 42745                           
 42746                           ; BSR set to: 0
 42747  00379E  2BB6               	incf	___fladd@bexp& (0+255),f,b
 42748  0037A0                     l5868:
 42749                           
 42750                           ; BSR set to: 0
 42751  0037A0  51B5               	movf	___fladd@aexp& (0+255),w,b
 42752  0037A2  5DB6               	subwf	___fladd@bexp& (0+255),w,b
 42753  0037A4  A0D8               	btfss	status,0,c
 42754  0037A6  D7EB               	goto	l5869
 42755  0037A8                     u24840:
 42756                           
 42757                           ; BSR set to: 0
 42758                           
 42759                           ; BSR set to: 0
 42760  0037A8  BDB4               	btfsc	___fladd@signs& (0+255),6,b
 42761  0037AA  D029               	goto	l5874
 42762                           
 42763                           ; BSR set to: 0
 42764  0037AC  51B6               	movf	___fladd@bexp& (0+255),w,b
 42765  0037AE  A4D8               	btfss	status,2,c
 42766  0037B0  D009               	goto	l5875
 42767                           
 42768                           ; BSR set to: 0
 42769  0037B2  0E00               	movlw	0
 42770  0037B4  6FA4               	movwf	?___fladd& (0+255),b
 42771  0037B6  0E00               	movlw	0
 42772  0037B8  6FA5               	movwf	(?___fladd+1)& (0+255),b
 42773  0037BA  0E00               	movlw	0
 42774  0037BC  6FA6               	movwf	(?___fladd+2)& (0+255),b
 42775  0037BE  0E00               	movlw	0
 42776  0037C0  6FA7               	movwf	(?___fladd+3)& (0+255),b
 42777                           
 42778                           ; BSR set to: 0
 42779  0037C2  0012               	return	
 42780  0037C4                     l5875:
 42781                           
 42782                           ; BSR set to: 0
 42783                           
 42784                           ; BSR set to: 0
 42785  0037C4  51A8               	movf	___fladd@a& (0+255),w,b
 42786  0037C6  27A4               	addwf	___fladd@b& (0+255),f,b
 42787  0037C8  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 42788  0037CA  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 42789  0037CC  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 42790  0037CE  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 42791  0037D0  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 42792  0037D2  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 42793                           
 42794                           ; BSR set to: 0
 42795  0037D4  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 42796  0037D6  D083               	goto	u24970
 42797                           
 42798                           ; BSR set to: 0
 42799  0037D8  A1B7               	btfss	___fladd@grs& (0+255),0,b
 42800  0037DA  D006               	goto	l5878
 42801                           
 42802                           ; BSR set to: 0
 42803  0037DC  90D8               	bcf	status,0,c
 42804  0037DE  33B7               	rrcf	___fladd@grs& (0+255),f,b
 42805  0037E0  51B7               	movf	___fladd@grs& (0+255),w,b
 42806  0037E2  0901               	iorlw	1
 42807  0037E4  6FB7               	movwf	___fladd@grs& (0+255),b
 42808  0037E6  D002               	goto	l5879
 42809  0037E8                     l5878:
 42810                           
 42811                           ; BSR set to: 0
 42812                           
 42813                           ; BSR set to: 0
 42814  0037E8  90D8               	bcf	status,0,c
 42815  0037EA  33B7               	rrcf	___fladd@grs& (0+255),f,b
 42816  0037EC                     l5879:
 42817                           
 42818                           ; BSR set to: 0
 42819                           
 42820                           ; BSR set to: 0
 42821  0037EC  B1A4               	btfsc	___fladd@b& (0+255),0,b
 42822                           
 42823                           ; BSR set to: 0
 42824  0037EE  8FB7               	bsf	___fladd@grs& (0+255),7,b
 42825                           
 42826                           ; BSR set to: 0
 42827                           
 42828                           ; BSR set to: 0
 42829  0037F0  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 42830  0037F2  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 42831  0037F4  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 42832  0037F6  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 42833  0037F8  33A4               	rrcf	___fladd@b& (0+255),f,b
 42834                           
 42835                           ; BSR set to: 0
 42836  0037FA  2BB6               	incf	___fladd@bexp& (0+255),f,b
 42837                           
 42838                           ; BSR set to: 0
 42839  0037FC  D070               	goto	u24970
 42840  0037FE                     l5874:
 42841                           
 42842                           ; BSR set to: 0
 42843                           
 42844                           ; BSR set to: 0
 42845  0037FE  51A8               	movf	___fladd@a& (0+255),w,b
 42846  003800  5DA4               	subwf	___fladd@b& (0+255),w,b
 42847  003802  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 42848  003804  59A5               	subwfb	(___fladd@b+1)& (0+255),w,b
 42849  003806  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 42850  003808  59A6               	subwfb	(___fladd@b+2)& (0+255),w,b
 42851  00380A  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 42852  00380C  0A80               	xorlw	128
 42853  00380E  6FAC               	movwf	??___fladd& (0+255),b
 42854  003810  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 42855  003812  0A80               	xorlw	128
 42856  003814  59AC               	subwfb	??___fladd& (0+255),w,b
 42857  003816  B0D8               	btfsc	status,0,c
 42858  003818  D036               	goto	l5882
 42859                           
 42860                           ; BSR set to: 0
 42861  00381A  C0A4  F0AC         	movff	___fladd@b,??___fladd
 42862  00381E  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 42863  003822  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 42864  003826  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 42865  00382A  1FAC               	comf	??___fladd& (0+255),f,b
 42866  00382C  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 42867  00382E  1FAE               	comf	(??___fladd+2)& (0+255),f,b
 42868  003830  1FAF               	comf	(??___fladd+3)& (0+255),f,b
 42869  003832  2BAC               	incf	??___fladd& (0+255),f,b
 42870  003834  0E00               	movlw	0
 42871  003836  23AD               	addwfc	(??___fladd+1)& (0+255),f,b
 42872  003838  23AE               	addwfc	(??___fladd+2)& (0+255),f,b
 42873  00383A  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 42874  00383C  51A8               	movf	___fladd@a& (0+255),w,b
 42875  00383E  25AC               	addwf	??___fladd& (0+255),w,b
 42876  003840  6FB0               	movwf	(??___fladd+4)& (0+255),b
 42877  003842  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 42878  003844  21AD               	addwfc	(??___fladd+1)& (0+255),w,b
 42879  003846  6FB1               	movwf	(??___fladd+5)& (0+255),b
 42880  003848  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 42881  00384A  21AE               	addwfc	(??___fladd+2)& (0+255),w,b
 42882  00384C  6FB2               	movwf	(??___fladd+6)& (0+255),b
 42883  00384E  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 42884  003850  21AF               	addwfc	(??___fladd+3)& (0+255),w,b
 42885  003852  6FB3               	movwf	(??___fladd+7)& (0+255),b
 42886  003854  0EFF               	movlw	255
 42887  003856  25B0               	addwf	(??___fladd+4)& (0+255),w,b
 42888  003858  6FA4               	movwf	___fladd@b& (0+255),b
 42889  00385A  0EFF               	movlw	255
 42890  00385C  21B1               	addwfc	(??___fladd+5)& (0+255),w,b
 42891  00385E  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 42892  003860  0EFF               	movlw	255
 42893  003862  21B2               	addwfc	(??___fladd+6)& (0+255),w,b
 42894  003864  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 42895  003866  0EFF               	movlw	255
 42896  003868  21B3               	addwfc	(??___fladd+7)& (0+255),w,b
 42897  00386A  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 42898  00386C  0E80               	movlw	128
 42899  00386E  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 42900                           
 42901                           ; BSR set to: 0
 42902  003870  6DB7               	negf	___fladd@grs& (0+255),b
 42903                           
 42904                           ; BSR set to: 0
 42905  003872  51B7               	movf	___fladd@grs& (0+255),w,b
 42906  003874  A4D8               	btfss	status,2,c
 42907  003876  D00F               	goto	l5884
 42908                           
 42909                           ; BSR set to: 0
 42910  003878  0E01               	movlw	1
 42911  00387A  27A4               	addwf	___fladd@b& (0+255),f,b
 42912  00387C  0E00               	movlw	0
 42913  00387E  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 42914  003880  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 42915  003882  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 42916                           
 42917                           ; BSR set to: 0
 42918  003884  D008               	goto	l5884
 42919  003886                     l5882:
 42920                           
 42921                           ; BSR set to: 0
 42922                           
 42923                           ; BSR set to: 0
 42924  003886  51A8               	movf	___fladd@a& (0+255),w,b
 42925  003888  5FA4               	subwf	___fladd@b& (0+255),f,b
 42926  00388A  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 42927  00388C  5BA5               	subwfb	(___fladd@b+1)& (0+255),f,b
 42928  00388E  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 42929  003890  5BA6               	subwfb	(___fladd@b+2)& (0+255),f,b
 42930  003892  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 42931  003894  5BA7               	subwfb	(___fladd@b+3)& (0+255),f,b
 42932  003896                     l5884:
 42933                           
 42934                           ; BSR set to: 0
 42935  003896  51A4               	movf	___fladd@b& (0+255),w,b
 42936  003898  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 42937  00389A  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 42938  00389C  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 42939  00389E  A4D8               	btfss	status,2,c
 42940  0038A0  D01C               	goto	l5891
 42941                           
 42942                           ; BSR set to: 0
 42943  0038A2  51B7               	movf	___fladd@grs& (0+255),w,b
 42944  0038A4  A4D8               	btfss	status,2,c
 42945  0038A6  D019               	goto	l5891
 42946                           
 42947                           ; BSR set to: 0
 42948  0038A8  0E00               	movlw	0
 42949  0038AA  6FA4               	movwf	?___fladd& (0+255),b
 42950  0038AC  0E00               	movlw	0
 42951  0038AE  6FA5               	movwf	(?___fladd+1)& (0+255),b
 42952  0038B0  0E00               	movlw	0
 42953  0038B2  6FA6               	movwf	(?___fladd+2)& (0+255),b
 42954  0038B4  0E00               	movlw	0
 42955  0038B6  6FA7               	movwf	(?___fladd+3)& (0+255),b
 42956                           
 42957                           ; BSR set to: 0
 42958  0038B8  0012               	return	
 42959  0038BA                     
 42960                           ; BSR set to: 0
 42961                           
 42962                           ; BSR set to: 0
 42963  0038BA  90D8               	bcf	status,0,c
 42964  0038BC  37A4               	rlcf	___fladd@b& (0+255),f,b
 42965  0038BE  37A5               	rlcf	(___fladd@b+1)& (0+255),f,b
 42966  0038C0  37A6               	rlcf	(___fladd@b+2)& (0+255),f,b
 42967  0038C2  37A7               	rlcf	(___fladd@b+3)& (0+255),f,b
 42968                           
 42969                           ; BSR set to: 0
 42970  0038C4  BFB7               	btfsc	___fladd@grs& (0+255),7,b
 42971                           
 42972                           ; BSR set to: 0
 42973  0038C6  81A4               	bsf	___fladd@b& (0+255),0,b
 42974                           
 42975                           ; BSR set to: 0
 42976                           
 42977                           ; BSR set to: 0
 42978  0038C8  A1B7               	btfss	___fladd@grs& (0+255),0,b
 42979  0038CA  D002               	goto	l5889
 42980                           
 42981                           ; BSR set to: 0
 42982  0038CC  80D8               	bsf	status,0,c
 42983  0038CE  D001               	goto	L24
 42984  0038D0                     l5889:
 42985                           
 42986                           ; BSR set to: 0
 42987                           
 42988                           ; BSR set to: 0
 42989  0038D0  90D8               	bcf	status,0,c
 42990  0038D2                     L24:
 42991  0038D2  37B7               	rlcf	___fladd@grs& (0+255),f,b
 42992                           
 42993                           ; BSR set to: 0
 42994                           
 42995                           ; BSR set to: 0
 42996  0038D4  51B6               	movf	___fladd@bexp& (0+255),w,b
 42997  0038D6  A4D8               	btfss	status,2,c
 42998                           
 42999                           ; BSR set to: 0
 43000  0038D8  07B6               	decf	___fladd@bexp& (0+255),f,b
 43001  0038DA                     l5891:
 43002                           
 43003                           ; BSR set to: 0
 43004                           
 43005                           ; BSR set to: 0
 43006                           
 43007                           ; BSR set to: 0
 43008  0038DA  AFA6               	btfss	(___fladd@b+2)& (0+255),7,b
 43009  0038DC  D7EE               	goto	l5887
 43010  0038DE                     u24970:
 43011                           
 43012                           ; BSR set to: 0
 43013                           
 43014                           ; BSR set to: 0
 43015                           
 43016                           ; BSR set to: 0
 43017  0038DE  0E00               	movlw	0
 43018  0038E0  6FB5               	movwf	___fladd@aexp& (0+255),b
 43019                           
 43020                           ; BSR set to: 0
 43021  0038E2  AFB7               	btfss	___fladd@grs& (0+255),7,b
 43022  0038E4  D00A               	goto	l5896
 43023                           
 43024                           ; BSR set to: 0
 43025  0038E6  C0B7  F0AC         	movff	___fladd@grs,??___fladd
 43026  0038EA  0E7F               	movlw	127
 43027  0038EC  17AC               	andwf	??___fladd& (0+255),f,b
 43028  0038EE  A4D8               	btfss	status,2,c
 43029  0038F0  D002               	goto	u25000
 43030                           
 43031                           ; BSR set to: 0
 43032                           
 43033                           ; BSR set to: 0
 43034  0038F2  A1A4               	btfss	___fladd@b& (0+255),0,b
 43035  0038F4  D002               	goto	l5896
 43036  0038F6                     u25000:
 43037                           
 43038                           ; BSR set to: 0
 43039  0038F6  0E01               	movlw	1
 43040  0038F8  6FB5               	movwf	___fladd@aexp& (0+255),b
 43041  0038FA                     l5896:
 43042                           
 43043                           ; BSR set to: 0
 43044                           
 43045                           ; BSR set to: 0
 43046                           
 43047                           ; BSR set to: 0
 43048  0038FA  51B5               	movf	___fladd@aexp& (0+255),w,b
 43049  0038FC  B4D8               	btfsc	status,2,c
 43050  0038FE  D020               	goto	l5899
 43051                           
 43052                           ; BSR set to: 0
 43053  003900  0E01               	movlw	1
 43054  003902  27A4               	addwf	___fladd@b& (0+255),f,b
 43055  003904  0E00               	movlw	0
 43056  003906  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 43057  003908  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 43058  00390A  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 43059                           
 43060                           ; BSR set to: 0
 43061  00390C  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 43062  00390E  D018               	goto	l5899
 43063                           
 43064                           ; BSR set to: 0
 43065  003910  C0A4  F0AC         	movff	___fladd@b,??___fladd
 43066  003914  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 43067  003918  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 43068  00391C  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 43069  003920  35AF               	rlcf	(??___fladd+3)& (0+255),w,b
 43070  003922  33AF               	rrcf	(??___fladd+3)& (0+255),f,b
 43071  003924  33AE               	rrcf	(??___fladd+2)& (0+255),f,b
 43072  003926  33AD               	rrcf	(??___fladd+1)& (0+255),f,b
 43073  003928  33AC               	rrcf	??___fladd& (0+255),f,b
 43074  00392A  C0AC  F0A4         	movff	??___fladd,___fladd@b
 43075  00392E  C0AD  F0A5         	movff	??___fladd+1,___fladd@b+1
 43076  003932  C0AE  F0A6         	movff	??___fladd+2,___fladd@b+2
 43077  003936  C0AF  F0A7         	movff	??___fladd+3,___fladd@b+3
 43078  00393A  29B6               	incf	___fladd@bexp& (0+255),w,b
 43079  00393C  A4D8               	btfss	status,2,c
 43080                           
 43081                           ; BSR set to: 0
 43082  00393E  2BB6               	incf	___fladd@bexp& (0+255),f,b
 43083  003940                     l5899:
 43084                           
 43085                           ; BSR set to: 0
 43086                           
 43087                           ; BSR set to: 0
 43088                           
 43089                           ; BSR set to: 0
 43090                           
 43091                           ; BSR set to: 0
 43092  003940  29B6               	incf	___fladd@bexp& (0+255),w,b
 43093  003942  B4D8               	btfsc	status,2,c
 43094  003944  D003               	goto	u25050
 43095                           
 43096                           ; BSR set to: 0
 43097  003946  51B6               	movf	___fladd@bexp& (0+255),w,b
 43098  003948  A4D8               	btfss	status,2,c
 43099  00394A  D00D               	goto	l5903
 43100  00394C                     u25050:
 43101                           
 43102                           ; BSR set to: 0
 43103                           
 43104                           ; BSR set to: 0
 43105  00394C  0E00               	movlw	0
 43106  00394E  6FA4               	movwf	___fladd@b& (0+255),b
 43107  003950  0E00               	movlw	0
 43108  003952  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 43109  003954  0E00               	movlw	0
 43110  003956  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 43111  003958  0E00               	movlw	0
 43112  00395A  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 43113  00395C  51B6               	movf	___fladd@bexp& (0+255),w,b
 43114  00395E  A4D8               	btfss	status,2,c
 43115  003960  D002               	goto	l5903
 43116                           
 43117                           ; BSR set to: 0
 43118  003962  0E00               	movlw	0
 43119  003964  6FB4               	movwf	___fladd@signs& (0+255),b
 43120  003966                     l5903:
 43121                           
 43122                           ; BSR set to: 0
 43123                           
 43124                           ; BSR set to: 0
 43125                           
 43126                           ; BSR set to: 0
 43127  003966  A1B6               	btfss	___fladd@bexp& (0+255),0,b
 43128  003968  D002               	goto	l5904
 43129                           
 43130                           ; BSR set to: 0
 43131  00396A  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 43132  00396C  D001               	goto	l5905
 43133  00396E                     l5904:
 43134                           
 43135                           ; BSR set to: 0
 43136                           
 43137                           ; BSR set to: 0
 43138  00396E  9FA6               	bcf	(___fladd@b+2)& (0+255),7,b
 43139  003970                     l5905:
 43140                           
 43141                           ; BSR set to: 0
 43142                           
 43143                           ; BSR set to: 0
 43144  003970  90D8               	bcf	status,0,c
 43145  003972  31B6               	rrcf	___fladd@bexp& (0+255),w,b
 43146  003974  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 43147                           
 43148                           ; BSR set to: 0
 43149  003976  BFB4               	btfsc	___fladd@signs& (0+255),7,b
 43150                           
 43151                           ; BSR set to: 0
 43152  003978  8FA7               	bsf	(___fladd@b+3)& (0+255),7,b
 43153                           
 43154                           ; BSR set to: 0
 43155                           
 43156                           ; BSR set to: 0
 43157  00397A  C0A4  F0A4         	movff	___fladd@b,?___fladd
 43158  00397E  C0A5  F0A5         	movff	___fladd@b+1,?___fladd+1
 43159  003982  C0A6  F0A6         	movff	___fladd@b+2,?___fladd+2
 43160  003986  C0A7  F0A7         	movff	___fladd@b+3,?___fladd+3
 43161  00398A  0012               	return	
 43162  00398C                     __end_of___fladd:
 43163                           	opt stack 0
 43164                           tblptru	equ	0xFF8
 43165                           tblptrh	equ	0xFF7
 43166                           tblptrl	equ	0xFF6
 43167                           tablat	equ	0xFF5
 43168                           prodh	equ	0xFF4
 43169                           prodl	equ	0xFF3
 43170                           intcon	equ	0xFF2
 43171                           intcon2	equ	0xFF1
 43172                           postinc0	equ	0xFEE
 43173                           wreg	equ	0xFE8
 43174                           indf1	equ	0xFE7
 43175                           postinc1	equ	0xFE6
 43176                           postdec1	equ	0xFE5
 43177                           fsr1h	equ	0xFE2
 43178                           fsr1l	equ	0xFE1
 43179                           indf2	equ	0xFDF
 43180                           postinc2	equ	0xFDE
 43181                           postdec2	equ	0xFDD
 43182                           plusw2	equ	0xFDB
 43183                           fsr2h	equ	0xFDA
 43184                           fsr2l	equ	0xFD9
 43185                           status	equ	0xFD8
 43186                           
 43187 ;; *************** function _ADC_Read *****************
 43188 ;; Defined at:
 43189 ;;		line 35 in file "adc.c"
 43190 ;; Parameters:    Size  Location     Type
 43191 ;;  adc_channel     1    wreg     unsigned char 
 43192 ;; Auto vars:     Size  Location     Type
 43193 ;;  adc_channel     1    4[BANK0 ] unsigned char 
 43194 ;; Return value:  Size  Location     Type
 43195 ;;                  2    0[BANK0 ] unsigned int 
 43196 ;; Registers used:
 43197 ;;		wreg, status,2, status,0
 43198 ;; Tracked objects:
 43199 ;;		On entry : 0/0
 43200 ;;		On exit  : 0/0
 43201 ;;		Unchanged: 0/0
 43202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43203 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43204 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43205 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43206 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43207 ;;Total ram usage:        5 bytes
 43208 ;; Hardware stack levels used:    1
 43209 ;; Hardware stack levels required when called:    5
 43210 ;; This function calls:
 43211 ;;		Nothing
 43212 ;; This function is called by:
 43213 ;;		_readPotentiometers
 43214 ;; This function uses a non-reentrant model
 43215 ;;
 43216                           
 43217                           	psect	text132
 43218  0091AE                     __ptext132:
 43219                           	opt stack 0
 43220  0091AE                     _ADC_Read:
 43221                           	opt stack 23
 43222                           
 43223                           ; BSR set to: 0
 43224                           ;incstack = 0
 43225                           ;ADC_Read@adc_channel stored from wreg
 43226  0091AE  0100               	movlb	0	; () banked
 43227  0091B0  6F64               	movwf	ADC_Read@adc_channel& (0+255),b
 43228                           
 43229                           ;adc.c: 52: adc_channel &= 0x0F;
 43230  0091B2  0E0F               	movlw	15
 43231  0091B4  0100               	movlb	0	; () banked
 43232  0091B6  1764               	andwf	ADC_Read@adc_channel& (0+255),f,b
 43233                           
 43234                           ;adc.c: 53: ADCON0 &= 0x00000001;
 43235  0091B8  0E01               	movlw	1
 43236  0091BA  16C2               	andwf	4034,f,c	;volatile
 43237                           
 43238                           ;adc.c: 54: PORTA = (adc_channel << 1);
 43239  0091BC  5164               	movf	ADC_Read@adc_channel& (0+255),w,b
 43240  0091BE  2564               	addwf	ADC_Read@adc_channel& (0+255),w,b
 43241  0091C0  6E80               	movwf	3968,c	;volatile
 43242                           
 43243                           ; BSR set to: 0
 43244                           ;adc.c: 56: _delay((unsigned long)((20)*(20000000/4000000.0)));
 43245  0091C2  0E21               	movlw	33
 43246  0091C4                     u44907:
 43247  0091C4  2EE8               	decfsz	wreg,f,c
 43248  0091C6  D7FE               	bra	u44907
 43249  0091C8  F000               	nop	
 43250                           
 43251                           ;adc.c: 57: GO_nDONE = 1;
 43252  0091CA  82C2               	bsf	4034,1,c	;volatile
 43253  0091CC  B2C2               	btfsc	4034,1,c	;volatile
 43254  0091CE  D7FE               	goto	l88
 43255                           
 43256                           ;adc.c: 59: return ((ADRESH<<8)+ADRESL);
 43257  0091D0  50C4               	movf	4036,w,c	;volatile
 43258  0091D2  0100               	movlb	0	; () banked
 43259  0091D4  6F63               	movwf	(??_ADC_Read+1)& (0+255),b
 43260  0091D6  6B62               	clrf	??_ADC_Read& (0+255),b
 43261  0091D8  50C3               	movf	4035,w,c	;volatile
 43262  0091DA  2562               	addwf	??_ADC_Read& (0+255),w,b
 43263  0091DC  6F60               	movwf	?_ADC_Read& (0+255),b
 43264  0091DE  0E00               	movlw	0
 43265  0091E0  2163               	addwfc	(??_ADC_Read+1)& (0+255),w,b
 43266  0091E2  6F61               	movwf	(?_ADC_Read+1)& (0+255),b
 43267  0091E4  0012               	return	
 43268  0091E6                     __end_of_ADC_Read:
 43269                           	opt stack 0
 43270                           tblptru	equ	0xFF8
 43271                           tblptrh	equ	0xFF7
 43272                           tblptrl	equ	0xFF6
 43273                           tablat	equ	0xFF5
 43274                           prodh	equ	0xFF4
 43275                           prodl	equ	0xFF3
 43276                           intcon	equ	0xFF2
 43277                           intcon2	equ	0xFF1
 43278                           postinc0	equ	0xFEE
 43279                           wreg	equ	0xFE8
 43280                           indf1	equ	0xFE7
 43281                           postinc1	equ	0xFE6
 43282                           postdec1	equ	0xFE5
 43283                           fsr1h	equ	0xFE2
 43284                           fsr1l	equ	0xFE1
 43285                           indf2	equ	0xFDF
 43286                           postinc2	equ	0xFDE
 43287                           postdec2	equ	0xFDD
 43288                           plusw2	equ	0xFDB
 43289                           fsr2h	equ	0xFDA
 43290                           fsr2l	equ	0xFD9
 43291                           status	equ	0xFD8
 43292                           
 43293 ;; *************** function _Lcd_Start *****************
 43294 ;; Defined at:
 43295 ;;		line 80 in file "lcd.c"
 43296 ;; Parameters:    Size  Location     Type
 43297 ;;		None
 43298 ;; Auto vars:     Size  Location     Type
 43299 ;;  i               2    4[BANK0 ] int 
 43300 ;; Return value:  Size  Location     Type
 43301 ;;                  1    wreg      void 
 43302 ;; Registers used:
 43303 ;;		wreg, status,2, status,0, cstack
 43304 ;; Tracked objects:
 43305 ;;		On entry : 0/0
 43306 ;;		On exit  : 0/0
 43307 ;;		Unchanged: 0/0
 43308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43310 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43312 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43313 ;;Total ram usage:        3 bytes
 43314 ;; Hardware stack levels used:    1
 43315 ;; Hardware stack levels required when called:    7
 43316 ;; This function calls:
 43317 ;;		_Lcd_Cmd
 43318 ;;		_Lcd_SetBit
 43319 ;; This function is called by:
 43320 ;;		_main
 43321 ;; This function uses a non-reentrant model
 43322 ;;
 43323                           
 43324                           	psect	text133
 43325  007756                     __ptext133:
 43326                           	opt stack 0
 43327  007756                     _Lcd_Start:
 43328                           	opt stack 23
 43329                           
 43330                           ;lcd.c: 82: Lcd_SetBit(0x00);
 43331                           
 43332                           ; BSR set to: 0
 43333                           ;incstack = 0
 43334  007756  0E00               	movlw	0
 43335  007758  EC71  F049         	call	_Lcd_SetBit
 43336                           
 43337                           ;lcd.c: 83: for(int i=1065244; i<=0; i--) __nop();
 43338  00775C  0E41               	movlw	65
 43339  00775E  0100               	movlb	0	; () banked
 43340  007760  6F65               	movwf	(Lcd_Start@i+1)& (0+255),b
 43341  007762  0E1C               	movlw	28
 43342  007764  6F64               	movwf	Lcd_Start@i& (0+255),b
 43343  007766                     l23133:
 43344                           
 43345                           ; BSR set to: 0
 43346  007766  BF65               	btfsc	(Lcd_Start@i+1)& (0+255),7,b
 43347  007768  D005               	goto	l42
 43348  00776A  5165               	movf	(Lcd_Start@i+1)& (0+255),w,b
 43349  00776C  E109               	bnz	l23141
 43350  00776E  0564               	decf	Lcd_Start@i& (0+255),w,b
 43351  007770  B0D8               	btfsc	status,0,c
 43352  007772  D006               	goto	u37870
 43353  007774                     l42:
 43354                           
 43355                           ; BSR set to: 0
 43356  007774  F000               	nop	
 43357  007776  0100               	movlb	0	; () banked
 43358  007778  0764               	decf	Lcd_Start@i& (0+255),f,b
 43359  00777A  A0D8               	btfss	status,0,c
 43360  00777C  0765               	decf	(Lcd_Start@i+1)& (0+255),f,b
 43361  00777E  D7F3               	goto	l23133
 43362  007780                     u37870:
 43363  007780                     l23141:
 43364                           
 43365                           ; BSR set to: 0
 43366                           ;lcd.c: 84: Lcd_Cmd(0x03);
 43367  007780  0E03               	movlw	3
 43368  007782  EC46  F04A         	call	_Lcd_Cmd
 43369                           
 43370                           ;lcd.c: 85: _delay((unsigned long)((5)*(20000000/4000.0)));
 43371  007786  0E21               	movlw	33
 43372  007788  0100               	movlb	0	; () banked
 43373  00778A  6F63               	movwf	??_Lcd_Start& (0+255),b
 43374  00778C  0E76               	movlw	118
 43375  00778E                     u44917:
 43376  00778E  2EE8               	decfsz	wreg,f,c
 43377  007790  D7FE               	bra	u44917
 43378  007792  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 43379  007794  D7FC               	bra	u44917
 43380  007796  F000               	nop	
 43381                           
 43382                           ;lcd.c: 86: Lcd_Cmd(0x03);
 43383  007798  0E03               	movlw	3
 43384  00779A  EC46  F04A         	call	_Lcd_Cmd
 43385                           
 43386                           ;lcd.c: 87: _delay((unsigned long)((11)*(20000000/4000.0)));
 43387  00779E  0E48               	movlw	72
 43388  0077A0  0100               	movlb	0	; () banked
 43389  0077A2  6F63               	movwf	??_Lcd_Start& (0+255),b
 43390  0077A4  0E6C               	movlw	108
 43391  0077A6                     u44927:
 43392  0077A6  2EE8               	decfsz	wreg,f,c
 43393  0077A8  D7FE               	bra	u44927
 43394  0077AA  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 43395  0077AC  D7FC               	bra	u44927
 43396  0077AE  F000               	nop	
 43397                           
 43398                           ;lcd.c: 88: Lcd_Cmd(0x03);
 43399  0077B0  0E03               	movlw	3
 43400  0077B2  EC46  F04A         	call	_Lcd_Cmd
 43401                           
 43402                           ;lcd.c: 89: Lcd_Cmd(0x02);
 43403  0077B6  0E02               	movlw	2
 43404  0077B8  EC46  F04A         	call	_Lcd_Cmd
 43405                           
 43406                           ;lcd.c: 90: Lcd_Cmd(0x02);
 43407  0077BC  0E02               	movlw	2
 43408  0077BE  EC46  F04A         	call	_Lcd_Cmd
 43409                           
 43410                           ;lcd.c: 91: Lcd_Cmd(0x08);
 43411  0077C2  0E08               	movlw	8
 43412  0077C4  EC46  F04A         	call	_Lcd_Cmd
 43413                           
 43414                           ;lcd.c: 92: Lcd_Cmd(0x00);
 43415  0077C8  0E00               	movlw	0
 43416  0077CA  EC46  F04A         	call	_Lcd_Cmd
 43417                           
 43418                           ;lcd.c: 93: Lcd_Cmd(0x0C);
 43419  0077CE  0E0C               	movlw	12
 43420  0077D0  EC46  F04A         	call	_Lcd_Cmd
 43421                           
 43422                           ;lcd.c: 94: Lcd_Cmd(0x00);
 43423  0077D4  0E00               	movlw	0
 43424  0077D6  EC46  F04A         	call	_Lcd_Cmd
 43425                           
 43426                           ;lcd.c: 95: Lcd_Cmd(0x06);
 43427  0077DA  0E06               	movlw	6
 43428  0077DC  EC46  F04A         	call	_Lcd_Cmd
 43429  0077E0  0012               	return		;funcret
 43430  0077E2                     __end_of_Lcd_Start:
 43431                           	opt stack 0
 43432                           tblptru	equ	0xFF8
 43433                           tblptrh	equ	0xFF7
 43434                           tblptrl	equ	0xFF6
 43435                           tablat	equ	0xFF5
 43436                           prodh	equ	0xFF4
 43437                           prodl	equ	0xFF3
 43438                           intcon	equ	0xFF2
 43439                           intcon2	equ	0xFF1
 43440                           postinc0	equ	0xFEE
 43441                           wreg	equ	0xFE8
 43442                           indf1	equ	0xFE7
 43443                           postinc1	equ	0xFE6
 43444                           postdec1	equ	0xFE5
 43445                           fsr1h	equ	0xFE2
 43446                           fsr1l	equ	0xFE1
 43447                           indf2	equ	0xFDF
 43448                           postinc2	equ	0xFDE
 43449                           postdec2	equ	0xFDD
 43450                           plusw2	equ	0xFDB
 43451                           fsr2h	equ	0xFDA
 43452                           fsr2l	equ	0xFD9
 43453                           status	equ	0xFD8
 43454                           
 43455 ;; *************** function _Lcd_Cmd *****************
 43456 ;; Defined at:
 43457 ;;		line 44 in file "lcd.c"
 43458 ;; Parameters:    Size  Location     Type
 43459 ;;  a               1    wreg     unsigned char 
 43460 ;; Auto vars:     Size  Location     Type
 43461 ;;  a               1    2[BANK0 ] unsigned char 
 43462 ;; Return value:  Size  Location     Type
 43463 ;;                  1    wreg      void 
 43464 ;; Registers used:
 43465 ;;		wreg, status,2, cstack
 43466 ;; Tracked objects:
 43467 ;;		On entry : 0/0
 43468 ;;		On exit  : 0/0
 43469 ;;		Unchanged: 0/0
 43470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43472 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43474 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43475 ;;Total ram usage:        2 bytes
 43476 ;; Hardware stack levels used:    1
 43477 ;; Hardware stack levels required when called:    6
 43478 ;; This function calls:
 43479 ;;		_Lcd_SetBit
 43480 ;; This function is called by:
 43481 ;;		_Lcd_Clear
 43482 ;;		_Lcd_Set_Cursor
 43483 ;;		_Lcd_Start
 43484 ;; This function uses a non-reentrant model
 43485 ;;
 43486                           
 43487                           	psect	text134
 43488  00948C                     __ptext134:
 43489                           	opt stack 0
 43490  00948C                     _Lcd_Cmd:
 43491                           	opt stack 20
 43492                           
 43493                           ;incstack = 0
 43494                           ;Lcd_Cmd@a stored from wreg
 43495  00948C  0100               	movlb	0	; () banked
 43496  00948E  6F62               	movwf	Lcd_Cmd@a& (0+255),b
 43497                           
 43498                           ;lcd.c: 46: RE0 = 0;
 43499  009490  9084               	bcf	3972,0,c	;volatile
 43500                           
 43501                           ;lcd.c: 47: Lcd_SetBit(a);
 43502  009492  0100               	movlb	0	; () banked
 43503  009494  5162               	movf	Lcd_Cmd@a& (0+255),w,b
 43504  009496  EC71  F049         	call	_Lcd_SetBit
 43505                           
 43506                           ;lcd.c: 48: RE1 = 1;
 43507  00949A  8284               	bsf	3972,1,c	;volatile
 43508                           
 43509                           ;lcd.c: 49: _delay((unsigned long)((4)*(20000000/4000.0)));
 43510  00949C  0E1A               	movlw	26
 43511  00949E  0100               	movlb	0	; () banked
 43512  0094A0  6F61               	movwf	??_Lcd_Cmd& (0+255),b
 43513  0094A2  0EF8               	movlw	248
 43514  0094A4                     u44937:
 43515  0094A4  2EE8               	decfsz	wreg,f,c
 43516  0094A6  D7FE               	bra	u44937
 43517  0094A8  2F61               	decfsz	??_Lcd_Cmd& (0+255),f,b
 43518  0094AA  D7FC               	bra	u44937
 43519  0094AC  F000               	nop	
 43520                           
 43521                           ;lcd.c: 50: RE1 = 0;
 43522  0094AE  9284               	bcf	3972,1,c	;volatile
 43523  0094B0  0012               	return		;funcret
 43524  0094B2                     __end_of_Lcd_Cmd:
 43525                           	opt stack 0
 43526                           tblptru	equ	0xFF8
 43527                           tblptrh	equ	0xFF7
 43528                           tblptrl	equ	0xFF6
 43529                           tablat	equ	0xFF5
 43530                           prodh	equ	0xFF4
 43531                           prodl	equ	0xFF3
 43532                           intcon	equ	0xFF2
 43533                           intcon2	equ	0xFF1
 43534                           postinc0	equ	0xFEE
 43535                           wreg	equ	0xFE8
 43536                           indf1	equ	0xFE7
 43537                           postinc1	equ	0xFE6
 43538                           postdec1	equ	0xFE5
 43539                           fsr1h	equ	0xFE2
 43540                           fsr1l	equ	0xFE1
 43541                           indf2	equ	0xFDF
 43542                           postinc2	equ	0xFDE
 43543                           postdec2	equ	0xFDD
 43544                           plusw2	equ	0xFDB
 43545                           fsr2h	equ	0xFDA
 43546                           fsr2l	equ	0xFD9
 43547                           status	equ	0xFD8
 43548                           
 43549 ;; *************** function _Lcd_SetBit *****************
 43550 ;; Defined at:
 43551 ;;		line 21 in file "lcd.c"
 43552 ;; Parameters:    Size  Location     Type
 43553 ;;  data_bit        1    wreg     unsigned char 
 43554 ;; Auto vars:     Size  Location     Type
 43555 ;;  data_bit        1    0[BANK0 ] unsigned char 
 43556 ;; Return value:  Size  Location     Type
 43557 ;;                  1    wreg      void 
 43558 ;; Registers used:
 43559 ;;		wreg
 43560 ;; Tracked objects:
 43561 ;;		On entry : 0/0
 43562 ;;		On exit  : 0/0
 43563 ;;		Unchanged: 0/0
 43564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43568 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43569 ;;Total ram usage:        1 bytes
 43570 ;; Hardware stack levels used:    1
 43571 ;; Hardware stack levels required when called:    5
 43572 ;; This function calls:
 43573 ;;		Nothing
 43574 ;; This function is called by:
 43575 ;;		_Lcd_Cmd
 43576 ;;		_Lcd_Start
 43577 ;;		_Lcd_Print_Char
 43578 ;; This function uses a non-reentrant model
 43579 ;;
 43580                           
 43581                           	psect	text135
 43582  0092E2                     __ptext135:
 43583                           	opt stack 0
 43584  0092E2                     _Lcd_SetBit:
 43585                           	opt stack 20
 43586                           
 43587                           ;incstack = 0
 43588                           ;Lcd_SetBit@data_bit stored from wreg
 43589  0092E2  0100               	movlb	0	; () banked
 43590  0092E4  6F60               	movwf	Lcd_SetBit@data_bit& (0+255),b
 43591                           
 43592                           ;lcd.c: 23: if(data_bit& 1)
 43593  0092E6  0100               	movlb	0	; () banked
 43594  0092E8  A160               	btfss	Lcd_SetBit@data_bit& (0+255),0,b
 43595  0092EA  D002               	goto	l19
 43596                           
 43597                           ; BSR set to: 0
 43598                           ;lcd.c: 24: RD4 = 1;
 43599  0092EC  8883               	bsf	3971,4,c	;volatile
 43600  0092EE  D001               	goto	l20
 43601  0092F0                     l19:
 43602                           
 43603                           ; BSR set to: 0
 43604                           ;lcd.c: 25: else
 43605                           ;lcd.c: 26: RD4 = 0;
 43606  0092F0  9883               	bcf	3971,4,c	;volatile
 43607  0092F2                     l20:
 43608                           
 43609                           ; BSR set to: 0
 43610                           ;lcd.c: 28: if(data_bit& 2)
 43611                           
 43612                           ; BSR set to: 0
 43613  0092F2  A360               	btfss	Lcd_SetBit@data_bit& (0+255),1,b
 43614  0092F4  D002               	goto	l21
 43615                           
 43616                           ; BSR set to: 0
 43617                           ;lcd.c: 29: RD5 = 1;
 43618  0092F6  8A83               	bsf	3971,5,c	;volatile
 43619  0092F8  D001               	goto	l22
 43620  0092FA                     l21:
 43621                           
 43622                           ; BSR set to: 0
 43623                           ;lcd.c: 30: else
 43624                           ;lcd.c: 31: RD5 = 0;
 43625  0092FA  9A83               	bcf	3971,5,c	;volatile
 43626  0092FC                     l22:
 43627                           
 43628                           ; BSR set to: 0
 43629                           ;lcd.c: 33: if(data_bit& 4)
 43630                           
 43631                           ; BSR set to: 0
 43632  0092FC  A560               	btfss	Lcd_SetBit@data_bit& (0+255),2,b
 43633  0092FE  D002               	goto	l23
 43634                           
 43635                           ; BSR set to: 0
 43636                           ;lcd.c: 34: RD6 = 1;
 43637  009300  8C83               	bsf	3971,6,c	;volatile
 43638  009302  D001               	goto	l24
 43639  009304                     l23:
 43640                           
 43641                           ; BSR set to: 0
 43642                           ;lcd.c: 35: else
 43643                           ;lcd.c: 36: RD6 = 0;
 43644  009304  9C83               	bcf	3971,6,c	;volatile
 43645  009306                     l24:
 43646                           
 43647                           ; BSR set to: 0
 43648                           ;lcd.c: 38: if(data_bit& 8)
 43649                           
 43650                           ; BSR set to: 0
 43651  009306  A760               	btfss	Lcd_SetBit@data_bit& (0+255),3,b
 43652  009308  D002               	goto	l25
 43653                           
 43654                           ; BSR set to: 0
 43655                           ;lcd.c: 39: RD7 = 1;
 43656  00930A  8E83               	bsf	3971,7,c	;volatile
 43657  00930C  0012               	return	
 43658  00930E                     l25:
 43659                           
 43660                           ; BSR set to: 0
 43661                           ;lcd.c: 40: else
 43662                           ;lcd.c: 41: RD7 = 0;
 43663  00930E  9E83               	bcf	3971,7,c	;volatile
 43664  009310  0012               	return	
 43665  009312                     __end_of_Lcd_SetBit:
 43666                           	opt stack 0
 43667                           tblptru	equ	0xFF8
 43668                           tblptrh	equ	0xFF7
 43669                           tblptrl	equ	0xFF6
 43670                           tablat	equ	0xFF5
 43671                           prodh	equ	0xFF4
 43672                           prodl	equ	0xFF3
 43673                           intcon	equ	0xFF2
 43674                           intcon2	equ	0xFF1
 43675                           postinc0	equ	0xFEE
 43676                           wreg	equ	0xFE8
 43677                           indf1	equ	0xFE7
 43678                           postinc1	equ	0xFE6
 43679                           postdec1	equ	0xFE5
 43680                           fsr1h	equ	0xFE2
 43681                           fsr1l	equ	0xFE1
 43682                           indf2	equ	0xFDF
 43683                           postinc2	equ	0xFDE
 43684                           postdec2	equ	0xFDD
 43685                           plusw2	equ	0xFDB
 43686                           fsr2h	equ	0xFDA
 43687                           fsr2l	equ	0xFD9
 43688                           status	equ	0xFD8
 43689                           
 43690 ;; *************** function _ADC_Initialize *****************
 43691 ;; Defined at:
 43692 ;;		line 22 in file "adc.c"
 43693 ;; Parameters:    Size  Location     Type
 43694 ;;		None
 43695 ;; Auto vars:     Size  Location     Type
 43696 ;;		None
 43697 ;; Return value:  Size  Location     Type
 43698 ;;                  1    wreg      void 
 43699 ;; Registers used:
 43700 ;;		wreg, status,2
 43701 ;; Tracked objects:
 43702 ;;		On entry : 0/0
 43703 ;;		On exit  : 0/0
 43704 ;;		Unchanged: 0/0
 43705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43710 ;;Total ram usage:        0 bytes
 43711 ;; Hardware stack levels used:    1
 43712 ;; Hardware stack levels required when called:    5
 43713 ;; This function calls:
 43714 ;;		Nothing
 43715 ;; This function is called by:
 43716 ;;		_main
 43717 ;; This function uses a non-reentrant model
 43718 ;;
 43719                           
 43720                           	psect	text136
 43721  009566                     __ptext136:
 43722                           	opt stack 0
 43723  009566                     _ADC_Initialize:
 43724                           	opt stack 25
 43725                           
 43726                           ;adc.c: 24: CMCON = 0x7;
 43727                           
 43728                           ; BSR set to: 0
 43729                           ;incstack = 0
 43730  009566  0E07               	movlw	7
 43731  009568  6EB4               	movwf	4020,c	;volatile
 43732                           
 43733                           ;adc.c: 25: ADCON0 = 0b00000000;
 43734  00956A  0E00               	movlw	0
 43735  00956C  6EC2               	movwf	4034,c	;volatile
 43736                           
 43737                           ;adc.c: 26: ADCON1 = 0b00001110;
 43738  00956E  0E0E               	movlw	14
 43739  009570  6EC1               	movwf	4033,c	;volatile
 43740                           
 43741                           ;adc.c: 27: ADCON2 = 0b10000010;
 43742  009572  0E82               	movlw	130
 43743  009574  6EC0               	movwf	4032,c	;volatile
 43744                           
 43745                           ;adc.c: 31: ADON = 1;
 43746  009576  80C2               	bsf	4034,0,c	;volatile
 43747  009578  0012               	return		;funcret
 43748  00957A                     __end_of_ADC_Initialize:
 43749                           	opt stack 0
 43750                           tblptru	equ	0xFF8
 43751                           tblptrh	equ	0xFF7
 43752                           tblptrl	equ	0xFF6
 43753                           tablat	equ	0xFF5
 43754                           prodh	equ	0xFF4
 43755                           prodl	equ	0xFF3
 43756                           intcon	equ	0xFF2
 43757                           intcon2	equ	0xFF1
 43758                           postinc0	equ	0xFEE
 43759                           wreg	equ	0xFE8
 43760                           indf1	equ	0xFE7
 43761                           postinc1	equ	0xFE6
 43762                           postdec1	equ	0xFE5
 43763                           fsr1h	equ	0xFE2
 43764                           fsr1l	equ	0xFE1
 43765                           indf2	equ	0xFDF
 43766                           postinc2	equ	0xFDE
 43767                           postdec2	equ	0xFDD
 43768                           plusw2	equ	0xFDB
 43769                           fsr2h	equ	0xFDA
 43770                           fsr2l	equ	0xFD9
 43771                           status	equ	0xFD8
 43772                           
 43773 ;; *************** function _ISR *****************
 43774 ;; Defined at:
 43775 ;;		line 310 in file "main.c"
 43776 ;; Parameters:    Size  Location     Type
 43777 ;;		None
 43778 ;; Auto vars:     Size  Location     Type
 43779 ;;		None
 43780 ;; Return value:  Size  Location     Type
 43781 ;;                  1    wreg      void 
 43782 ;; Registers used:
 43783 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 43784 ;; Tracked objects:
 43785 ;;		On entry : 0/0
 43786 ;;		On exit  : 0/0
 43787 ;;		Unchanged: 0/0
 43788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43791 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43792 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43793 ;;Total ram usage:       20 bytes
 43794 ;; Hardware stack levels used:    1
 43795 ;; Hardware stack levels required when called:    4
 43796 ;; This function calls:
 43797 ;;		_display
 43798 ;;		_encoderInputsBuxton
 43799 ;;		_playArpeggio
 43800 ;;		i2___lbmod
 43801 ;;		i2_printThisNumber
 43802 ;; This function is called by:
 43803 ;;		Interrupt level 2
 43804 ;; This function uses a non-reentrant model
 43805 ;;
 43806                           
 43807                           	psect	intcode
 43808  000008                     __pintcode:
 43809                           	opt stack 0
 43810  000008                     _ISR:
 43811                           	opt stack 15
 43812                           
 43813                           ;incstack = 0
 43814  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 43815  00000A  EDE7  F028         	call	int_func,f	;refresh shadow registers
 43816                           tblptru	equ	0xFF8
 43817                           tblptrh	equ	0xFF7
 43818                           tblptrl	equ	0xFF6
 43819                           tablat	equ	0xFF5
 43820                           prodh	equ	0xFF4
 43821                           prodl	equ	0xFF3
 43822                           intcon	equ	0xFF2
 43823                           intcon2	equ	0xFF1
 43824                           postinc0	equ	0xFEE
 43825                           wreg	equ	0xFE8
 43826                           indf1	equ	0xFE7
 43827                           postinc1	equ	0xFE6
 43828                           postdec1	equ	0xFE5
 43829                           fsr1h	equ	0xFE2
 43830                           fsr1l	equ	0xFE1
 43831                           indf2	equ	0xFDF
 43832                           postinc2	equ	0xFDE
 43833                           postdec2	equ	0xFDD
 43834                           plusw2	equ	0xFDB
 43835                           fsr2h	equ	0xFDA
 43836                           fsr2l	equ	0xFD9
 43837                           status	equ	0xFD8
 43838                           
 43839                           	psect	intcode_body
 43840  0051CE                     __pintcode_body:
 43841                           	opt stack 15
 43842  0051CE                     int_func:
 43843                           	opt stack 15
 43844  0051CE  0006               	pop		; remove dummy address from shadow register refresh
 43845  0051D0  CFFA F020          	movff	pclath,??_ISR+2
 43846  0051D4  CFFB F021          	movff	pclatu,??_ISR+3
 43847  0051D8  CFE9 F022          	movff	fsr0l,??_ISR+4
 43848  0051DC  CFEA F023          	movff	fsr0h,??_ISR+5
 43849  0051E0  CFE1 F024          	movff	fsr1l,??_ISR+6
 43850  0051E4  CFE2 F025          	movff	fsr1h,??_ISR+7
 43851  0051E8  CFD9 F026          	movff	fsr2l,??_ISR+8
 43852  0051EC  CFDA F027          	movff	fsr2h,??_ISR+9
 43853  0051F0  CFF3 F028          	movff	prodl,??_ISR+10
 43854  0051F4  CFF4 F029          	movff	prodh,??_ISR+11
 43855  0051F8  CFF6 F02A          	movff	tblptrl,??_ISR+12
 43856  0051FC  CFF7 F02B          	movff	tblptrh,??_ISR+13
 43857  005200  CFF8 F02C          	movff	tblptru,??_ISR+14
 43858  005204  CFF5 F02D          	movff	tablat,??_ISR+15
 43859  005208  C05F  F02E         	movff	btemp,??_ISR+16
 43860  00520C  C060  F02F         	movff	btemp+1,??_ISR+17
 43861  005210  C061  F030         	movff	btemp+2,??_ISR+18
 43862  005214  C062  F031         	movff	btemp+3,??_ISR+19
 43863                           
 43864                           ;main.c: 313: if(TMR2IF==1){
 43865  005218  A29E               	btfss	3998,1,c	;volatile
 43866  00521A  D00C               	goto	i2l4794
 43867                           
 43868                           ;main.c: 314: display();
 43869  00521C  ECBD  F04A         	call	_display	;wreg free
 43870                           
 43871                           ;main.c: 315: count_ISR++;
 43872  005220  0E01               	movlw	1
 43873  005222  0102               	movlb	2	; () banked
 43874  005224  2784               	addwf	_count_ISR& (0+255),f,b
 43875  005226  0E00               	movlw	0
 43876  005228  2385               	addwfc	(_count_ISR+1)& (0+255),f,b
 43877  00522A  2386               	addwfc	(_count_ISR+2)& (0+255),f,b
 43878  00522C  2387               	addwfc	(_count_ISR+3)& (0+255),f,b
 43879                           
 43880                           ; BSR set to: 2
 43881                           ;main.c: 317: TMR2 = 0x83;
 43882  00522E  0E83               	movlw	131
 43883  005230  6ECC               	movwf	4044,c	;volatile
 43884                           
 43885                           ; BSR set to: 2
 43886                           ;main.c: 318: TMR2IF = 0;
 43887  005232  929E               	bcf	3998,1,c	;volatile
 43888  005234                     i2l4794:
 43889                           
 43890                           ;main.c: 319: }
 43891                           ;main.c: 322: if(INT0IF==1) {
 43892                           
 43893                           ; BSR set to: 2
 43894  005234  A2F2               	btfss	intcon,1,c	;volatile
 43895  005236  D00B               	goto	i2l4795
 43896                           
 43897                           ;main.c: 323: _delay((unsigned long)((10)*(20000000/4000.0)));
 43898  005238  0E41               	movlw	65
 43899  00523A  6E1E               	movwf	??_ISR& (0+255),c
 43900  00523C  0EEE               	movlw	238
 43901  00523E                     i2u4494_47:
 43902  00523E  2EE8               	decfsz	wreg,f,c
 43903  005240  D7FE               	bra	i2u4494_47
 43904  005242  2E1E               	decfsz	??_ISR& (0+255),f,c
 43905  005244  D7FC               	bra	i2u4494_47
 43906  005246  D000               	nop2	
 43907                           
 43908                           ;main.c: 324: if(RB0 == 0){encoder_click = 1;}
 43909  005248  A081               	btfss	3969,0,c	;volatile
 43910  00524A  8E35               	bsf	_encoder_click/(0+8),_encoder_click& (0+7),c
 43911                           
 43912                           ;main.c: 325: INT0IF = 0;
 43913  00524C  92F2               	bcf	intcon,1,c	;volatile
 43914  00524E                     i2l4795:
 43915                           
 43916                           ;main.c: 326: }
 43917                           ;main.c: 329: if(RBIF==1) {
 43918  00524E  A0F2               	btfss	intcon,0,c	;volatile
 43919  005250  D003               	goto	i2l4797
 43920                           
 43921                           ;main.c: 330: encoderInputsBuxton();
 43922  005252  EC87  F03E         	call	_encoderInputsBuxton	;wreg free
 43923                           
 43924                           ;main.c: 332: RBIF = 0;
 43925  005256  90F2               	bcf	intcon,0,c	;volatile
 43926  005258                     i2l4797:
 43927                           
 43928                           ;main.c: 333: }
 43929                           ;main.c: 337: if(TMR0IF==1) {
 43930  005258  A4F2               	btfss	intcon,2,c	;volatile
 43931  00525A  D05F               	goto	i2l4798
 43932                           
 43933                           ;main.c: 339: TMR0IE = 0;
 43934  00525C  9AF2               	bcf	intcon,5,c	;volatile
 43935                           
 43936                           ;main.c: 342: if((finishLastNote == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 43937  00525E  BA33               	btfsc	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 43938  005260  D040               	goto	i2l4805
 43939  005262  C0F7  F001         	movff	_NOTE_LENGTH_PULSES,i2___lbmod@divisor
 43940  005266  5054               	movf	_TIMER_OVERFLOWS,w,c
 43941  005268  ECE1  F049         	call	i2___lbmod
 43942  00526C  0900               	iorlw	0
 43943  00526E  A4D8               	btfss	status,2,c
 43944  005270  D038               	goto	i2l4805
 43945                           
 43946                           ;main.c: 345: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYP
      +                          E == DOWN) || (ARPEGGIO_TYPE == UP_DOWN) || (ARPEGGIO_TYPE == DOWN_UP)){
 43947  005272  0E06               	movlw	6
 43948  005274  0100               	movlb	0	; () banked
 43949  005276  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 43950  005278  B4D8               	btfsc	status,2,c
 43951  00527A  D00D               	goto	i2u4457_40
 43952                           
 43953                           ; BSR set to: 0
 43954  00527C  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 43955  00527E  B4D8               	btfsc	status,2,c
 43956  005280  D00A               	goto	i2u4457_40
 43957                           
 43958                           ; BSR set to: 0
 43959  005282  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 43960  005284  B4D8               	btfsc	status,2,c
 43961  005286  D007               	goto	i2u4457_40
 43962                           
 43963                           ; BSR set to: 0
 43964  005288  0E02               	movlw	2
 43965  00528A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 43966  00528C  B4D8               	btfsc	status,2,c
 43967  00528E  D003               	goto	i2u4457_40
 43968                           
 43969                           ; BSR set to: 0
 43970  005290  0E03               	movlw	3
 43971  005292  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 43972  005294  B4D8               	btfsc	status,2,c
 43973  005296                     i2u4457_40:
 43974                           
 43975                           ; BSR set to: 0
 43976                           ;main.c: 346: stored_octave = which_octave;
 43977  005296  C056  F0E7         	movff	_which_octave,_stored_octave
 43978                           
 43979                           ; BSR set to: 0
 43980                           ;main.c: 347: }
 43981                           ;main.c: 361: if(ARPEGGIO_ON == 1){
 43982  00529A  B635               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 43983                           
 43984                           ; BSR set to: 0
 43985                           ;main.c: 362: if(DISPLAY_STEP_NUMBER == 1) {printThisNumber((NUM_NOTES_PRESSED * 100) + 
      +                          (which_note + 1));}
 43986  00529C  AA32               	btfss	_DISPLAY_STEP_NUMBER/(0+8),_DISPLAY_STEP_NUMBER& (0+7),c
 43987  00529E  D011               	goto	i2l4804
 43988                           
 43989                           ; BSR set to: 0
 43990  0052A0  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 43991  0052A2  0D64               	mullw	100
 43992  0052A4  5057               	movf	_which_note,w,c
 43993  0052A6  6E1E               	movwf	??_ISR& (0+255),c
 43994  0052A8  6A1F               	clrf	(??_ISR+1)& (0+255),c
 43995  0052AA  50F3               	movf	prodl,w,c
 43996  0052AC  261E               	addwf	??_ISR,f,c
 43997  0052AE  50F4               	movf	prodh,w,c
 43998  0052B0  221F               	addwfc	??_ISR+1,f,c
 43999  0052B2  0E01               	movlw	1
 44000  0052B4  241E               	addwf	??_ISR,w,c
 44001  0052B6  6E01               	movwf	i2printThisNumber@n,c
 44002  0052B8  0E00               	movlw	0
 44003  0052BA  201F               	addwfc	??_ISR+1,w,c
 44004  0052BC  6E02               	movwf	i2printThisNumber@n+1,c
 44005  0052BE  ECD0  F04A         	call	i2_printThisNumber	;wreg free
 44006  0052C2                     i2l4804:
 44007                           
 44008                           ;main.c: 363: }
 44009                           ;main.c: 365: playArpeggio();
 44010  0052C2  EC21  F005         	call	_playArpeggio	;wreg free
 44011                           
 44012                           ;main.c: 368: suppress_note_on = 0;
 44013  0052C6  9833               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 44014                           
 44015                           ;main.c: 369: suppress_note_off = 0;
 44016  0052C8  9633               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 44017                           
 44018                           ;main.c: 370: flag1 = 0;
 44019  0052CA  9E32               	bcf	_flag1/(0+8),_flag1& (0+7),c
 44020                           
 44021                           ;main.c: 371: flag2 = 0;
 44022  0052CC  9C32               	bcf	_flag2/(0+8),_flag2& (0+7),c
 44023                           
 44024                           ;main.c: 374: if((ARPEGGIO_TYPE == RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) {
 44025  0052CE  0E05               	movlw	5
 44026  0052D0  0100               	movlb	0	; () banked
 44027  0052D2  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44028  0052D4  B4D8               	btfsc	status,2,c
 44029  0052D6  D003               	goto	i2u4461_40
 44030                           
 44031                           ; BSR set to: 0
 44032  0052D8  0E04               	movlw	4
 44033  0052DA  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44034  0052DC  B4D8               	btfsc	status,2,c
 44035  0052DE                     i2u4461_40:
 44036                           
 44037                           ; BSR set to: 0
 44038                           ;main.c: 375: stored_octave = which_octave;
 44039  0052DE  C056  F0E7         	movff	_which_octave,_stored_octave
 44040  0052E2                     i2l4805:
 44041                           
 44042                           ;main.c: 376: }
 44043                           ;main.c: 377: }
 44044                           ;main.c: 398: if(lastNoteMode == 1){
 44045                           
 44046                           ; BSR set to: 0
 44047  0052E2  B434               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 44048                           
 44049                           ;main.c: 399: if((finishLastNote == 1) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 44050  0052E4  AA33               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 44051  0052E6  D00B               	goto	i2l4809
 44052  0052E8  C0F7  F001         	movff	_NOTE_LENGTH_PULSES,i2___lbmod@divisor
 44053  0052EC  5054               	movf	_TIMER_OVERFLOWS,w,c
 44054  0052EE  ECE1  F049         	call	i2___lbmod
 44055  0052F2  0900               	iorlw	0
 44056  0052F4  A4D8               	btfss	status,2,c
 44057  0052F6  D003               	goto	i2l4809
 44058                           
 44059                           ;main.c: 408: finishLastNote = 0;
 44060  0052F8  9A33               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 44061                           
 44062                           ;main.c: 411: TIMER_OVERFLOWS = NOTE_LENGTH_PULSES;
 44063  0052FA  C0F7  F054         	movff	_NOTE_LENGTH_PULSES,_TIMER_OVERFLOWS
 44064  0052FE                     i2l4809:
 44065                           
 44066                           ;main.c: 412: }
 44067                           ;main.c: 413: }
 44068                           ;main.c: 415: TIMER_OVERFLOWS++;
 44069  0052FE  2A54               	incf	_TIMER_OVERFLOWS,f,c
 44070                           
 44071                           ;main.c: 417: if(TIMER_OVERFLOWS >= (NOTE_LENGTH_PULSES)){TIMER_OVERFLOWS = 0;}
 44072  005300  0100               	movlb	0	; () banked
 44073  005302  51F7               	movf	_NOTE_LENGTH_PULSES& (0+255),w,b
 44074  005304  5C54               	subwf	_TIMER_OVERFLOWS,w,c
 44075  005306  A0D8               	btfss	status,0,c
 44076  005308  D002               	goto	i2l4810
 44077                           
 44078                           ; BSR set to: 0
 44079  00530A  0E00               	movlw	0
 44080  00530C  6E54               	movwf	_TIMER_OVERFLOWS,c
 44081  00530E                     i2l4810:
 44082                           
 44083                           ; BSR set to: 0
 44084                           ;main.c: 419: TMR0 = TIMER_PRELOAD;
 44085                           
 44086                           ; BSR set to: 0
 44087  00530E  C16D  FFD6         	movff	_TIMER_PRELOAD,4054	;volatile
 44088  005312  C16E  FFD7         	movff	_TIMER_PRELOAD+1,4055	;volatile
 44089                           
 44090                           ; BSR set to: 0
 44091                           ;main.c: 420: TMR0IF = 0;
 44092  005316  94F2               	bcf	intcon,2,c	;volatile
 44093                           
 44094                           ; BSR set to: 0
 44095                           ;main.c: 421: TMR0IE = 1;
 44096  005318  8AF2               	bsf	intcon,5,c	;volatile
 44097  00531A                     i2l4798:
 44098                           
 44099                           ; BSR set to: 0
 44100  00531A  C031  F062         	movff	??_ISR+19,btemp+3
 44101  00531E  C030  F061         	movff	??_ISR+18,btemp+2
 44102  005322  C02F  F060         	movff	??_ISR+17,btemp+1
 44103  005326  C02E  F05F         	movff	??_ISR+16,btemp
 44104  00532A  C02D  FFF5         	movff	??_ISR+15,tablat
 44105  00532E  C02C  FFF8         	movff	??_ISR+14,tblptru
 44106  005332  C02B  FFF7         	movff	??_ISR+13,tblptrh
 44107  005336  C02A  FFF6         	movff	??_ISR+12,tblptrl
 44108  00533A  C029  FFF4         	movff	??_ISR+11,prodh
 44109  00533E  C028  FFF3         	movff	??_ISR+10,prodl
 44110  005342  C027  FFDA         	movff	??_ISR+9,fsr2h
 44111  005346  C026  FFD9         	movff	??_ISR+8,fsr2l
 44112  00534A  C025  FFE2         	movff	??_ISR+7,fsr1h
 44113  00534E  C024  FFE1         	movff	??_ISR+6,fsr1l
 44114  005352  C023  FFEA         	movff	??_ISR+5,fsr0h
 44115  005356  C022  FFE9         	movff	??_ISR+4,fsr0l
 44116  00535A  C021  FFFB         	movff	??_ISR+3,pclatu
 44117  00535E  C020  FFFA         	movff	??_ISR+2,pclath
 44118  005362  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 44119  005364  0011               	retfie		f
 44120  005366                     __end_of_ISR:
 44121                           	opt stack 0
 44122                           pclatu	equ	0xFFB
 44123                           pclath	equ	0xFFA
 44124                           tblptru	equ	0xFF8
 44125                           tblptrh	equ	0xFF7
 44126                           tblptrl	equ	0xFF6
 44127                           tablat	equ	0xFF5
 44128                           prodh	equ	0xFF4
 44129                           prodl	equ	0xFF3
 44130                           intcon	equ	0xFF2
 44131                           intcon2	equ	0xFF1
 44132                           postinc0	equ	0xFEE
 44133                           fsr0h	equ	0xFEA
 44134                           fsr0l	equ	0xFE9
 44135                           wreg	equ	0xFE8
 44136                           indf1	equ	0xFE7
 44137                           postinc1	equ	0xFE6
 44138                           postdec1	equ	0xFE5
 44139                           fsr1h	equ	0xFE2
 44140                           fsr1l	equ	0xFE1
 44141                           indf2	equ	0xFDF
 44142                           postinc2	equ	0xFDE
 44143                           postdec2	equ	0xFDD
 44144                           plusw2	equ	0xFDB
 44145                           fsr2h	equ	0xFDA
 44146                           fsr2l	equ	0xFD9
 44147                           status	equ	0xFD8
 44148                           
 44149 ;; *************** function i2_printThisNumber *****************
 44150 ;; Defined at:
 44151 ;;		line 21 in file "octave.c"
 44152 ;; Parameters:    Size  Location     Type
 44153 ;;  n               2    0[COMRAM] int 
 44154 ;; Auto vars:     Size  Location     Type
 44155 ;;		None
 44156 ;; Return value:  Size  Location     Type
 44157 ;;                  1    wreg      void 
 44158 ;; Registers used:
 44159 ;;		wreg, status,2
 44160 ;; Tracked objects:
 44161 ;;		On entry : 0/0
 44162 ;;		On exit  : 0/0
 44163 ;;		Unchanged: 0/0
 44164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44165 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44168 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44169 ;;Total ram usage:        2 bytes
 44170 ;; Hardware stack levels used:    1
 44171 ;; This function calls:
 44172 ;;		Nothing
 44173 ;; This function is called by:
 44174 ;;		_ISR
 44175 ;; This function uses a non-reentrant model
 44176 ;;
 44177                           
 44178                           	psect	text138
 44179  0095A0                     __ptext138:
 44180                           	opt stack 0
 44181  0095A0                     i2_printThisNumber:
 44182                           	opt stack 18
 44183                           
 44184                           ;octave.c: 22: DISPLAY_MODE = 0;
 44185                           
 44186                           ;incstack = 0
 44187  0095A0  0E00               	movlw	0
 44188  0095A2  6E5A               	movwf	_DISPLAY_MODE,c
 44189                           
 44190                           ;octave.c: 23: DIGIT_MODE = 0;
 44191  0095A4  0E00               	movlw	0
 44192  0095A6  6E59               	movwf	_DIGIT_MODE,c
 44193                           
 44194                           ;octave.c: 24: number_to_display = n;
 44195  0095A8  C001  F05B         	movff	i2printThisNumber@n,_number_to_display
 44196  0095AC  C002  F05C         	movff	i2printThisNumber@n+1,_number_to_display+1
 44197  0095B0  0012               	return		;funcret
 44198  0095B2                     __end_ofi2_printThisNumber:
 44199                           	opt stack 0
 44200                           pclatu	equ	0xFFB
 44201                           pclath	equ	0xFFA
 44202                           tblptru	equ	0xFF8
 44203                           tblptrh	equ	0xFF7
 44204                           tblptrl	equ	0xFF6
 44205                           tablat	equ	0xFF5
 44206                           prodh	equ	0xFF4
 44207                           prodl	equ	0xFF3
 44208                           intcon	equ	0xFF2
 44209                           intcon2	equ	0xFF1
 44210                           postinc0	equ	0xFEE
 44211                           fsr0h	equ	0xFEA
 44212                           fsr0l	equ	0xFE9
 44213                           wreg	equ	0xFE8
 44214                           indf1	equ	0xFE7
 44215                           postinc1	equ	0xFE6
 44216                           postdec1	equ	0xFE5
 44217                           fsr1h	equ	0xFE2
 44218                           fsr1l	equ	0xFE1
 44219                           indf2	equ	0xFDF
 44220                           postinc2	equ	0xFDE
 44221                           postdec2	equ	0xFDD
 44222                           plusw2	equ	0xFDB
 44223                           fsr2h	equ	0xFDA
 44224                           fsr2l	equ	0xFD9
 44225                           status	equ	0xFD8
 44226                           
 44227 ;; *************** function i2___lbmod *****************
 44228 ;; Defined at:
 44229 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbmod.c"
 44230 ;; Parameters:    Size  Location     Type
 44231 ;;  dividend        1    wreg     unsigned char 
 44232 ;;  divisor         1    0[COMRAM] unsigned char 
 44233 ;; Auto vars:     Size  Location     Type
 44234 ;;  dividend        1    1[COMRAM] unsigned char 
 44235 ;;  __lbmod         1    3[COMRAM] unsigned char 
 44236 ;;  __lbmod         1    2[COMRAM] unsigned char 
 44237 ;; Return value:  Size  Location     Type
 44238 ;;                  1    wreg      unsigned char 
 44239 ;; Registers used:
 44240 ;;		wreg, status,2, status,0
 44241 ;; Tracked objects:
 44242 ;;		On entry : 0/0
 44243 ;;		On exit  : 0/0
 44244 ;;		Unchanged: 0/0
 44245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44246 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44247 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44249 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44250 ;;Total ram usage:        4 bytes
 44251 ;; Hardware stack levels used:    1
 44252 ;; This function calls:
 44253 ;;		Nothing
 44254 ;; This function is called by:
 44255 ;;		_ISR
 44256 ;; This function uses a non-reentrant model
 44257 ;;
 44258                           
 44259                           	psect	text139
 44260  0093C2                     __ptext139:
 44261                           	opt stack 0
 44262  0093C2                     i2___lbmod:
 44263                           	opt stack 18
 44264                           
 44265                           ;incstack = 0
 44266                           ;i2___lbmod@dividend stored from wreg
 44267  0093C2  6E02               	movwf	i2___lbmod@dividend,c
 44268  0093C4  0E08               	movlw	8
 44269  0093C6  6E03               	movwf	i2___lbmod@counter,c
 44270  0093C8  0E00               	movlw	0
 44271  0093CA  6E04               	movwf	i2___lbmod@rem,c
 44272  0093CC  90D8               	bcf	status,0,c
 44273  0093CE  3402               	rlcf	i2___lbmod@dividend,w,c
 44274  0093D0  3404               	rlcf	i2___lbmod@rem,w,c
 44275  0093D2  6E04               	movwf	i2___lbmod@rem,c
 44276  0093D4  90D8               	bcf	status,0,c
 44277  0093D6  3602               	rlcf	i2___lbmod@dividend,f,c
 44278  0093D8  5001               	movf	i2___lbmod@divisor,w,c
 44279  0093DA  5C04               	subwf	i2___lbmod@rem,w,c
 44280  0093DC  A0D8               	btfss	status,0,c
 44281  0093DE  D002               	goto	i2l5759
 44282  0093E0  5001               	movf	i2___lbmod@divisor,w,c
 44283  0093E2  5E04               	subwf	i2___lbmod@rem,f,c
 44284  0093E4                     i2l5759:
 44285  0093E4  2E03               	decfsz	i2___lbmod@counter,f,c
 44286  0093E6  D7F2               	goto	i2l5758
 44287  0093E8  5004               	movf	i2___lbmod@rem,w,c
 44288  0093EA  0012               	return	
 44289  0093EC                     __end_ofi2___lbmod:
 44290                           	opt stack 0
 44291                           pclatu	equ	0xFFB
 44292                           pclath	equ	0xFFA
 44293                           tblptru	equ	0xFF8
 44294                           tblptrh	equ	0xFF7
 44295                           tblptrl	equ	0xFF6
 44296                           tablat	equ	0xFF5
 44297                           prodh	equ	0xFF4
 44298                           prodl	equ	0xFF3
 44299                           intcon	equ	0xFF2
 44300                           intcon2	equ	0xFF1
 44301                           postinc0	equ	0xFEE
 44302                           fsr0h	equ	0xFEA
 44303                           fsr0l	equ	0xFE9
 44304                           wreg	equ	0xFE8
 44305                           indf1	equ	0xFE7
 44306                           postinc1	equ	0xFE6
 44307                           postdec1	equ	0xFE5
 44308                           fsr1h	equ	0xFE2
 44309                           fsr1l	equ	0xFE1
 44310                           indf2	equ	0xFDF
 44311                           postinc2	equ	0xFDE
 44312                           postdec2	equ	0xFDD
 44313                           plusw2	equ	0xFDB
 44314                           fsr2h	equ	0xFDA
 44315                           fsr2l	equ	0xFD9
 44316                           status	equ	0xFD8
 44317                           
 44318 ;; *************** function _playArpeggio *****************
 44319 ;; Defined at:
 44320 ;;		line 264 in file "arpeggio.c"
 44321 ;; Parameters:    Size  Location     Type
 44322 ;;		None
 44323 ;; Auto vars:     Size  Location     Type
 44324 ;;		None
 44325 ;; Return value:  Size  Location     Type
 44326 ;;                  1    wreg      void 
 44327 ;; Registers used:
 44328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 44329 ;; Tracked objects:
 44330 ;;		On entry : 0/0
 44331 ;;		On exit  : 0/0
 44332 ;;		Unchanged: 0/0
 44333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44336 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44337 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44338 ;;Total ram usage:        6 bytes
 44339 ;; Hardware stack levels used:    1
 44340 ;; Hardware stack levels required when called:    3
 44341 ;; This function calls:
 44342 ;;		_sort_pitches
 44343 ;;		i2___awmod
 44344 ;;		i2_noteOff
 44345 ;;		i2_noteOn
 44346 ;;		i2_rand
 44347 ;;		i2_random_pitches
 44348 ;;		i2_random_pitches_non_repeating
 44349 ;; This function is called by:
 44350 ;;		_ISR
 44351 ;; This function uses a non-reentrant model
 44352 ;;
 44353                           
 44354                           	psect	text140
 44355  000A42                     __ptext140:
 44356                           	opt stack 0
 44357  000A42                     _playArpeggio:
 44358                           	opt stack 15
 44359                           
 44360                           ;arpeggio.c: 267: if(NUM_NOTES_PRESSED == 0){return;}
 44361                           
 44362                           ;incstack = 0
 44363  000A42  0100               	movlb	0	; () banked
 44364  000A44  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44365  000A46  B4D8               	btfsc	status,2,c
 44366  000A48  0012               	return	
 44367                           
 44368                           ; BSR set to: 0
 44369                           ;arpeggio.c: 275: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE == A
      +                          S_PRESSED) {
 44370                           
 44371                           ; BSR set to: 0
 44372                           
 44373                           ; BSR set to: 0
 44374  000A4A  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 44375  000A4C  B4D8               	btfsc	status,2,c
 44376  000A4E  D008               	goto	i2u3804_40
 44377                           
 44378                           ; BSR set to: 0
 44379  000A50  0E02               	movlw	2
 44380  000A52  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44381  000A54  B4D8               	btfsc	status,2,c
 44382  000A56  D004               	goto	i2u3804_40
 44383                           
 44384                           ; BSR set to: 0
 44385  000A58  0E06               	movlw	6
 44386  000A5A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44387  000A5C  A4D8               	btfss	status,2,c
 44388  000A5E  D0B8               	goto	i2l5299
 44389  000A60                     i2u3804_40:
 44390                           
 44391                           ; BSR set to: 0
 44392                           ;arpeggio.c: 277: if(startingDirection == UP){
 44393                           
 44394                           ; BSR set to: 0
 44395  000A60  51E9               	movf	_startingDirection& (0+255),w,b
 44396  000A62  B4D8               	btfsc	status,2,c
 44397                           
 44398                           ; BSR set to: 0
 44399                           ;arpeggio.c: 279: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 44400  000A64  A433               	btfss	_overflow/(0+8),_overflow& (0+7),c
 44401  000A66  D026               	goto	i2l5288
 44402                           
 44403                           ; BSR set to: 0
 44404  000A68  5056               	movf	_which_octave,w,c
 44405  000A6A  0A80               	xorlw	128
 44406  000A6C  0F7F               	addlw	-129
 44407  000A6E  B0D8               	btfsc	status,0,c
 44408                           
 44409                           ; BSR set to: 0
 44410  000A70  B233               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44411  000A72  D020               	goto	i2l5288
 44412                           
 44413                           ; BSR set to: 0
 44414  000A74  BE32               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 44415  000A76  D01E               	goto	i2l5288
 44416                           
 44417                           ; BSR set to: 0
 44418                           ;arpeggio.c: 282: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - 1) * 12),velocity);
 44419  000A78  0EFF               	movlw	255
 44420  000A7A  6E18               	movwf	??_playArpeggio& (0+255),c
 44421  000A7C  0EFF               	movlw	255
 44422  000A7E  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44423  000A80  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44424  000A82  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44425  000A84  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44426  000A86  5018               	movf	??_playArpeggio,w,c
 44427  000A88  261A               	addwf	??_playArpeggio+2,f,c
 44428  000A8A  5019               	movf	??_playArpeggio+1,w,c
 44429  000A8C  221B               	addwfc	??_playArpeggio+3,f,c
 44430  000A8E  501A               	movf	??_playArpeggio+2,w,c
 44431  000A90  244F               	addwf	_arpeggioPtr,w,c
 44432  000A92  6ED9               	movwf	fsr2l,c
 44433  000A94  501B               	movf	??_playArpeggio+3,w,c
 44434  000A96  2050               	addwfc	_arpeggioPtr+1,w,c
 44435  000A98  6EDA               	movwf	fsr2h,c
 44436  000A9A  50DF               	movf	indf2,w,c
 44437  000A9C  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44438  000A9E  0456               	decf	_which_octave,w,c
 44439  000AA0  0D0C               	mullw	12
 44440  000AA2  50F3               	movf	prodl,w,c
 44441  000AA4  241C               	addwf	??_playArpeggio+4,w,c
 44442  000AA6  6E0C               	movwf	i2noteOff@pitch,c
 44443  000AA8  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44444  000AAC  51F6               	movf	_channel& (0+255),w,b
 44445  000AAE  EC9D  F048         	call	i2_noteOff
 44446                           
 44447                           ;arpeggio.c: 283: overflow = 0;
 44448  000AB2  9433               	bcf	_overflow/(0+8),_overflow& (0+7),c
 44449  000AB4                     i2l5288:
 44450                           
 44451                           ;arpeggio.c: 284: }
 44452                           ;arpeggio.c: 285: }
 44453                           ;arpeggio.c: 287: if(startingDirection == DOWN){
 44454  000AB4  0100               	movlb	0	; () banked
 44455  000AB6  05E9               	decf	_startingDirection& (0+255),w,b
 44456  000AB8  B4D8               	btfsc	status,2,c
 44457                           
 44458                           ; BSR set to: 0
 44459                           ;arpeggio.c: 289: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 44460  000ABA  A433               	btfss	_overflow/(0+8),_overflow& (0+7),c
 44461  000ABC  D028               	goto	i2l5290
 44462                           
 44463                           ; BSR set to: 0
 44464  000ABE  5056               	movf	_which_octave,w,c
 44465  000AC0  0A80               	xorlw	128
 44466  000AC2  0F7F               	addlw	-129
 44467  000AC4  B0D8               	btfsc	status,0,c
 44468                           
 44469                           ; BSR set to: 0
 44470  000AC6  B233               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44471  000AC8  D022               	goto	i2l5290
 44472                           
 44473                           ; BSR set to: 0
 44474  000ACA  BE32               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 44475  000ACC  D020               	goto	i2l5290
 44476                           
 44477                           ; BSR set to: 0
 44478                           ;arpeggio.c: 290: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - OCTAVES) * 12),velocity);
 44479  000ACE  0EFF               	movlw	255
 44480  000AD0  6E18               	movwf	??_playArpeggio& (0+255),c
 44481  000AD2  0EFF               	movlw	255
 44482  000AD4  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44483  000AD6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44484  000AD8  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44485  000ADA  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44486  000ADC  5018               	movf	??_playArpeggio,w,c
 44487  000ADE  261A               	addwf	??_playArpeggio+2,f,c
 44488  000AE0  5019               	movf	??_playArpeggio+1,w,c
 44489  000AE2  221B               	addwfc	??_playArpeggio+3,f,c
 44490  000AE4  501A               	movf	??_playArpeggio+2,w,c
 44491  000AE6  244F               	addwf	_arpeggioPtr,w,c
 44492  000AE8  6ED9               	movwf	fsr2l,c
 44493  000AEA  501B               	movf	??_playArpeggio+3,w,c
 44494  000AEC  2050               	addwfc	_arpeggioPtr+1,w,c
 44495  000AEE  6EDA               	movwf	fsr2h,c
 44496  000AF0  50DF               	movf	indf2,w,c
 44497  000AF2  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44498  000AF4  51F8               	movf	_OCTAVES& (0+255),w,b
 44499  000AF6  0800               	sublw	0
 44500  000AF8  2456               	addwf	_which_octave,w,c
 44501  000AFA  0D0C               	mullw	12
 44502  000AFC  50F3               	movf	prodl,w,c
 44503  000AFE  241C               	addwf	??_playArpeggio+4,w,c
 44504  000B00  6E0C               	movwf	i2noteOff@pitch,c
 44505  000B02  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44506  000B06  51F6               	movf	_channel& (0+255),w,b
 44507  000B08  EC9D  F048         	call	i2_noteOff
 44508                           
 44509                           ;arpeggio.c: 291: overflow = 0;
 44510  000B0C  9433               	bcf	_overflow/(0+8),_overflow& (0+7),c
 44511  000B0E                     i2l5290:
 44512                           
 44513                           ;arpeggio.c: 292: }
 44514                           ;arpeggio.c: 293: }
 44515                           ;arpeggio.c: 295: if(octave_overflow == 1){
 44516  000B0E  A233               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44517  000B10  D05F               	goto	i2l5299
 44518                           
 44519                           ;arpeggio.c: 296: if(startingDirection == UP) {
 44520  000B12  0100               	movlb	0	; () banked
 44521  000B14  51E9               	movf	_startingDirection& (0+255),w,b
 44522  000B16  A4D8               	btfss	status,2,c
 44523  000B18  D020               	goto	i2l5292
 44524                           
 44525                           ; BSR set to: 0
 44526                           ;arpeggio.c: 298: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + ((OCTAVES - 1) * 12),velocity);}
 44527  000B1A  BC32               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 44528  000B1C  D01D               	goto	i2l5293
 44529                           
 44530                           ; BSR set to: 0
 44531  000B1E  0EFF               	movlw	255
 44532  000B20  6E18               	movwf	??_playArpeggio& (0+255),c
 44533  000B22  0EFF               	movlw	255
 44534  000B24  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44535  000B26  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44536  000B28  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44537  000B2A  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44538  000B2C  5018               	movf	??_playArpeggio,w,c
 44539  000B2E  261A               	addwf	??_playArpeggio+2,f,c
 44540  000B30  5019               	movf	??_playArpeggio+1,w,c
 44541  000B32  221B               	addwfc	??_playArpeggio+3,f,c
 44542  000B34  501A               	movf	??_playArpeggio+2,w,c
 44543  000B36  244F               	addwf	_arpeggioPtr,w,c
 44544  000B38  6ED9               	movwf	fsr2l,c
 44545  000B3A  501B               	movf	??_playArpeggio+3,w,c
 44546  000B3C  2050               	addwfc	_arpeggioPtr+1,w,c
 44547  000B3E  6EDA               	movwf	fsr2h,c
 44548  000B40  50DF               	movf	indf2,w,c
 44549  000B42  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44550  000B44  05F8               	decf	_OCTAVES& (0+255),w,b
 44551  000B46  0D0C               	mullw	12
 44552  000B48  50F3               	movf	prodl,w,c
 44553  000B4A  241C               	addwf	??_playArpeggio+4,w,c
 44554  000B4C  6E0C               	movwf	i2noteOff@pitch,c
 44555  000B4E  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44556  000B52  51F6               	movf	_channel& (0+255),w,b
 44557  000B54  EC9D  F048         	call	i2_noteOff
 44558  000B58                     i2l5293:
 44559                           
 44560                           ;arpeggio.c: 299: octave_overflow = 0;
 44561  000B58  9233               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44562  000B5A                     i2l5292:
 44563                           
 44564                           ;arpeggio.c: 300: }
 44565                           ;arpeggio.c: 302: if(startingDirection == DOWN){
 44566  000B5A  0100               	movlb	0	; () banked
 44567  000B5C  05E9               	decf	_startingDirection& (0+255),w,b
 44568  000B5E  A4D8               	btfss	status,2,c
 44569  000B60  D01B               	goto	i2l5294
 44570                           
 44571                           ; BSR set to: 0
 44572                           ;arpeggio.c: 304: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )),velocity);}
 44573  000B62  BC32               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 44574  000B64  D018               	goto	i2l5295
 44575                           
 44576                           ; BSR set to: 0
 44577  000B66  0EFF               	movlw	255
 44578  000B68  6E18               	movwf	??_playArpeggio& (0+255),c
 44579  000B6A  0EFF               	movlw	255
 44580  000B6C  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44581  000B6E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44582  000B70  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44583  000B72  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44584  000B74  5018               	movf	??_playArpeggio,w,c
 44585  000B76  261A               	addwf	??_playArpeggio+2,f,c
 44586  000B78  5019               	movf	??_playArpeggio+1,w,c
 44587  000B7A  221B               	addwfc	??_playArpeggio+3,f,c
 44588  000B7C  501A               	movf	??_playArpeggio+2,w,c
 44589  000B7E  244F               	addwf	_arpeggioPtr,w,c
 44590  000B80  6ED9               	movwf	fsr2l,c
 44591  000B82  501B               	movf	??_playArpeggio+3,w,c
 44592  000B84  2050               	addwfc	_arpeggioPtr+1,w,c
 44593  000B86  6EDA               	movwf	fsr2h,c
 44594  000B88  50DF               	movf	indf2,w,c
 44595  000B8A  6E0C               	movwf	i2noteOff@pitch,c
 44596  000B8C  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44597  000B90  51F6               	movf	_channel& (0+255),w,b
 44598  000B92  EC9D  F048         	call	i2_noteOff
 44599  000B96                     i2l5295:
 44600                           
 44601                           ;arpeggio.c: 305: octave_overflow = 0;
 44602  000B96  9233               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44603  000B98                     i2l5294:
 44604                           
 44605                           ;arpeggio.c: 306: }
 44606                           ;arpeggio.c: 310: if(skipFirstLast == 1){
 44607  000B98  A634               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 44608  000B9A  D013               	goto	i2l5298
 44609                           
 44610                           ;arpeggio.c: 311: if(NUM_NOTES_PRESSED > 1){
 44611  000B9C  0E01               	movlw	1
 44612  000B9E  0100               	movlb	0	; () banked
 44613  000BA0  65E5               	cpfsgt	_NUM_NOTES_PRESSED& (0+255),b
 44614  000BA2  D003               	goto	i2l5297
 44615                           
 44616                           ; BSR set to: 0
 44617                           ;arpeggio.c: 312: which_note = 1;
 44618  000BA4  0E01               	movlw	1
 44619  000BA6  6E57               	movwf	_which_note,c
 44620                           
 44621                           ; BSR set to: 0
 44622                           ;arpeggio.c: 313: suppress_note_off = 1;
 44623  000BA8  8633               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 44624  000BAA                     i2l5297:
 44625                           
 44626                           ; BSR set to: 0
 44627                           ;arpeggio.c: 314: }
 44628                           ;arpeggio.c: 318: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 44629                           
 44630                           ; BSR set to: 0
 44631  000BAA  05E5               	decf	_NUM_NOTES_PRESSED& (0+255),w,b
 44632  000BAC  A4D8               	btfss	status,2,c
 44633  000BAE  D009               	goto	i2l5298
 44634                           
 44635                           ; BSR set to: 0
 44636  000BB0  0E01               	movlw	1
 44637  000BB2  65F8               	cpfsgt	_OCTAVES& (0+255),b
 44638  000BB4  D006               	goto	i2l5298
 44639                           
 44640                           ; BSR set to: 0
 44641                           ;arpeggio.c: 319: flag1 = 1;
 44642  000BB6  8E32               	bsf	_flag1/(0+8),_flag1& (0+7),c
 44643                           
 44644                           ; BSR set to: 0
 44645                           ;arpeggio.c: 321: which_note = 0;
 44646  000BB8  0E00               	movlw	0
 44647  000BBA  6E57               	movwf	_which_note,c
 44648                           
 44649                           ; BSR set to: 0
 44650                           ;arpeggio.c: 322: which_octave--;
 44651  000BBC  0656               	decf	_which_octave,f,c
 44652                           
 44653                           ; BSR set to: 0
 44654                           ;arpeggio.c: 323: stored_octave = which_octave;
 44655  000BBE  C056  F0E7         	movff	_which_octave,_stored_octave
 44656  000BC2                     i2l5298:
 44657                           
 44658                           ;arpeggio.c: 324: }
 44659                           ;arpeggio.c: 325: }
 44660                           ;arpeggio.c: 328: if(ARPEGGIO_TYPE == UP_DOWN) {ARPEGGIO_TYPE = DOWN_UP;}
 44661                           
 44662                           ; BSR set to: 0
 44663                           
 44664                           ; BSR set to: 0
 44665  000BC2  0E02               	movlw	2
 44666  000BC4  0100               	movlb	0	; () banked
 44667  000BC6  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44668  000BC8  A4D8               	btfss	status,2,c
 44669  000BCA  D002               	goto	i2l5299
 44670                           
 44671                           ; BSR set to: 0
 44672  000BCC  0E03               	movlw	3
 44673  000BCE  6FEA               	movwf	_ARPEGGIO_TYPE& (0+255),b
 44674  000BD0                     i2l5299:
 44675                           
 44676                           ;arpeggio.c: 329: }
 44677                           ;arpeggio.c: 330: }
 44678                           ;arpeggio.c: 333: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP) {
 44679                           
 44680                           ; BSR set to: 0
 44681                           
 44682                           ; BSR set to: 0
 44683                           
 44684                           ; BSR set to: 0
 44685  000BD0  0100               	movlb	0	; () banked
 44686  000BD2  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 44687  000BD4  B4D8               	btfsc	status,2,c
 44688  000BD6  D004               	goto	i2u3826_40
 44689                           
 44690                           ; BSR set to: 0
 44691  000BD8  0E03               	movlw	3
 44692  000BDA  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44693  000BDC  A4D8               	btfss	status,2,c
 44694  000BDE  D0BF               	goto	i2l5315
 44695  000BE0                     i2u3826_40:
 44696                           
 44697                           ; BSR set to: 0
 44698                           ;arpeggio.c: 335: if(startingDirection == UP){
 44699                           
 44700                           ; BSR set to: 0
 44701  000BE0  51E9               	movf	_startingDirection& (0+255),w,b
 44702  000BE2  B4D8               	btfsc	status,2,c
 44703                           
 44704                           ; BSR set to: 0
 44705                           ;arpeggio.c: 337: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 44706  000BE4  A433               	btfss	_overflow/(0+8),_overflow& (0+7),c
 44707  000BE6  D024               	goto	i2l5304
 44708                           
 44709                           ; BSR set to: 0
 44710  000BE8  BE56               	btfsc	_which_octave,7,c
 44711                           
 44712                           ; BSR set to: 0
 44713  000BEA  B233               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44714  000BEC  D021               	goto	i2l5304
 44715                           
 44716                           ; BSR set to: 0
 44717  000BEE  BE32               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 44718  000BF0  D01F               	goto	i2l5304
 44719                           
 44720                           ; BSR set to: 0
 44721                           ;arpeggio.c: 338: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((OCTAVES +
      +                           which_octave) * 12),velocity);
 44722  000BF2  0EFF               	movlw	255
 44723  000BF4  6E18               	movwf	??_playArpeggio& (0+255),c
 44724  000BF6  0EFF               	movlw	255
 44725  000BF8  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44726  000BFA  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44727  000BFC  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44728  000BFE  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44729  000C00  5018               	movf	??_playArpeggio,w,c
 44730  000C02  261A               	addwf	??_playArpeggio+2,f,c
 44731  000C04  5019               	movf	??_playArpeggio+1,w,c
 44732  000C06  221B               	addwfc	??_playArpeggio+3,f,c
 44733  000C08  501A               	movf	??_playArpeggio+2,w,c
 44734  000C0A  244F               	addwf	_arpeggioPtr,w,c
 44735  000C0C  6ED9               	movwf	fsr2l,c
 44736  000C0E  501B               	movf	??_playArpeggio+3,w,c
 44737  000C10  2050               	addwfc	_arpeggioPtr+1,w,c
 44738  000C12  6EDA               	movwf	fsr2h,c
 44739  000C14  50DF               	movf	indf2,w,c
 44740  000C16  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44741  000C18  5056               	movf	_which_octave,w,c
 44742  000C1A  25F8               	addwf	_OCTAVES& (0+255),w,b
 44743  000C1C  0D0C               	mullw	12
 44744  000C1E  50F3               	movf	prodl,w,c
 44745  000C20  241C               	addwf	??_playArpeggio+4,w,c
 44746  000C22  6E0C               	movwf	i2noteOff@pitch,c
 44747  000C24  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44748  000C28  51F6               	movf	_channel& (0+255),w,b
 44749  000C2A  EC9D  F048         	call	i2_noteOff
 44750                           
 44751                           ;arpeggio.c: 339: overflow = 0;
 44752  000C2E  9433               	bcf	_overflow/(0+8),_overflow& (0+7),c
 44753  000C30                     i2l5304:
 44754                           
 44755                           ;arpeggio.c: 340: }
 44756                           ;arpeggio.c: 341: }
 44757                           ;arpeggio.c: 343: if(startingDirection == DOWN) {
 44758  000C30  0100               	movlb	0	; () banked
 44759  000C32  05E9               	decf	_startingDirection& (0+255),w,b
 44760  000C34  B4D8               	btfsc	status,2,c
 44761                           
 44762                           ; BSR set to: 0
 44763                           ;arpeggio.c: 345: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 44764  000C36  A433               	btfss	_overflow/(0+8),_overflow& (0+7),c
 44765  000C38  D023               	goto	i2l5306
 44766                           
 44767                           ; BSR set to: 0
 44768  000C3A  BE56               	btfsc	_which_octave,7,c
 44769                           
 44770                           ; BSR set to: 0
 44771  000C3C  B233               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44772  000C3E  D020               	goto	i2l5306
 44773                           
 44774                           ; BSR set to: 0
 44775  000C40  BE32               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 44776  000C42  D01E               	goto	i2l5306
 44777                           
 44778                           ; BSR set to: 0
 44779                           ;arpeggio.c: 346: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave + 1) * 12),velocity);
 44780  000C44  0EFF               	movlw	255
 44781  000C46  6E18               	movwf	??_playArpeggio& (0+255),c
 44782  000C48  0EFF               	movlw	255
 44783  000C4A  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44784  000C4C  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44785  000C4E  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44786  000C50  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44787  000C52  5018               	movf	??_playArpeggio,w,c
 44788  000C54  261A               	addwf	??_playArpeggio+2,f,c
 44789  000C56  5019               	movf	??_playArpeggio+1,w,c
 44790  000C58  221B               	addwfc	??_playArpeggio+3,f,c
 44791  000C5A  501A               	movf	??_playArpeggio+2,w,c
 44792  000C5C  244F               	addwf	_arpeggioPtr,w,c
 44793  000C5E  6ED9               	movwf	fsr2l,c
 44794  000C60  501B               	movf	??_playArpeggio+3,w,c
 44795  000C62  2050               	addwfc	_arpeggioPtr+1,w,c
 44796  000C64  6EDA               	movwf	fsr2h,c
 44797  000C66  50DF               	movf	indf2,w,c
 44798  000C68  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44799  000C6A  2856               	incf	_which_octave,w,c
 44800  000C6C  0D0C               	mullw	12
 44801  000C6E  50F3               	movf	prodl,w,c
 44802  000C70  241C               	addwf	??_playArpeggio+4,w,c
 44803  000C72  6E0C               	movwf	i2noteOff@pitch,c
 44804  000C74  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44805  000C78  51F6               	movf	_channel& (0+255),w,b
 44806  000C7A  EC9D  F048         	call	i2_noteOff
 44807                           
 44808                           ;arpeggio.c: 347: overflow = 0;
 44809  000C7E  9433               	bcf	_overflow/(0+8),_overflow& (0+7),c
 44810  000C80                     i2l5306:
 44811                           
 44812                           ;arpeggio.c: 348: }
 44813                           ;arpeggio.c: 349: }
 44814                           ;arpeggio.c: 351: if(octave_overflow == 1){
 44815  000C80  A233               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44816  000C82  D06D               	goto	i2l5315
 44817                           
 44818                           ;arpeggio.c: 353: if(startingDirection == UP){
 44819  000C84  0100               	movlb	0	; () banked
 44820  000C86  51E9               	movf	_startingDirection& (0+255),w,b
 44821  000C88  A4D8               	btfss	status,2,c
 44822  000C8A  D024               	goto	i2l5308
 44823                           
 44824                           ; BSR set to: 0
 44825                           ;arpeggio.c: 355: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + OCTAVES) * 12),velocity);}
 44826  000C8C  BC32               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 44827  000C8E  D021               	goto	i2l5309
 44828                           
 44829                           ; BSR set to: 0
 44830  000C90  0EFF               	movlw	255
 44831  000C92  6E18               	movwf	??_playArpeggio& (0+255),c
 44832  000C94  0EFF               	movlw	255
 44833  000C96  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44834  000C98  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44835  000C9A  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44836  000C9C  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44837  000C9E  5018               	movf	??_playArpeggio,w,c
 44838  000CA0  261A               	addwf	??_playArpeggio+2,f,c
 44839  000CA2  5019               	movf	??_playArpeggio+1,w,c
 44840  000CA4  221B               	addwfc	??_playArpeggio+3,f,c
 44841  000CA6  501A               	movf	??_playArpeggio+2,w,c
 44842  000CA8  244F               	addwf	_arpeggioPtr,w,c
 44843  000CAA  6ED9               	movwf	fsr2l,c
 44844  000CAC  501B               	movf	??_playArpeggio+3,w,c
 44845  000CAE  2050               	addwfc	_arpeggioPtr+1,w,c
 44846  000CB0  6EDA               	movwf	fsr2h,c
 44847  000CB2  50DF               	movf	indf2,w,c
 44848  000CB4  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44849  000CB6  51F8               	movf	_OCTAVES& (0+255),w,b
 44850  000CB8  0D01               	mullw	1
 44851  000CBA  50F3               	movf	prodl,w,c
 44852  000CBC  0800               	sublw	0
 44853  000CBE  25F8               	addwf	_OCTAVES& (0+255),w,b
 44854  000CC0  0D0C               	mullw	12
 44855  000CC2  50F3               	movf	prodl,w,c
 44856  000CC4  241C               	addwf	??_playArpeggio+4,w,c
 44857  000CC6  6E0C               	movwf	i2noteOff@pitch,c
 44858  000CC8  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44859  000CCC  51F6               	movf	_channel& (0+255),w,b
 44860  000CCE  EC9D  F048         	call	i2_noteOff
 44861  000CD2                     i2l5309:
 44862                           
 44863                           ;arpeggio.c: 356: octave_overflow = 0;
 44864  000CD2  9233               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44865  000CD4                     i2l5308:
 44866                           
 44867                           ;arpeggio.c: 357: }
 44868                           ;arpeggio.c: 359: if(startingDirection == DOWN){
 44869  000CD4  0100               	movlb	0	; () banked
 44870  000CD6  05E9               	decf	_startingDirection& (0+255),w,b
 44871  000CD8  A4D8               	btfss	status,2,c
 44872  000CDA  D025               	goto	i2l5310
 44873                           
 44874                           ; BSR set to: 0
 44875                           ;arpeggio.c: 361: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + 1) * 12),velocity);}
 44876  000CDC  BC32               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 44877  000CDE  D022               	goto	i2l5311
 44878                           
 44879                           ; BSR set to: 0
 44880  000CE0  0EFF               	movlw	255
 44881  000CE2  6E18               	movwf	??_playArpeggio& (0+255),c
 44882  000CE4  0EFF               	movlw	255
 44883  000CE6  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 44884  000CE8  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 44885  000CEA  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 44886  000CEC  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 44887  000CEE  5018               	movf	??_playArpeggio,w,c
 44888  000CF0  261A               	addwf	??_playArpeggio+2,f,c
 44889  000CF2  5019               	movf	??_playArpeggio+1,w,c
 44890  000CF4  221B               	addwfc	??_playArpeggio+3,f,c
 44891  000CF6  501A               	movf	??_playArpeggio+2,w,c
 44892  000CF8  244F               	addwf	_arpeggioPtr,w,c
 44893  000CFA  6ED9               	movwf	fsr2l,c
 44894  000CFC  501B               	movf	??_playArpeggio+3,w,c
 44895  000CFE  2050               	addwfc	_arpeggioPtr+1,w,c
 44896  000D00  6EDA               	movwf	fsr2h,c
 44897  000D02  50DF               	movf	indf2,w,c
 44898  000D04  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 44899  000D06  51F8               	movf	_OCTAVES& (0+255),w,b
 44900  000D08  0D01               	mullw	1
 44901  000D0A  50F3               	movf	prodl,w,c
 44902  000D0C  0800               	sublw	0
 44903  000D0E  6E1D               	movwf	(??_playArpeggio+5)& (0+255),c
 44904  000D10  281D               	incf	??_playArpeggio+5,w,c
 44905  000D12  0D0C               	mullw	12
 44906  000D14  50F3               	movf	prodl,w,c
 44907  000D16  241C               	addwf	??_playArpeggio+4,w,c
 44908  000D18  6E0C               	movwf	i2noteOff@pitch,c
 44909  000D1A  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 44910  000D1E  51F6               	movf	_channel& (0+255),w,b
 44911  000D20  EC9D  F048         	call	i2_noteOff
 44912  000D24                     i2l5311:
 44913                           
 44914                           ;arpeggio.c: 362: octave_overflow = 0;
 44915  000D24  9233               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 44916  000D26                     i2l5310:
 44917                           
 44918                           ;arpeggio.c: 363: }
 44919                           ;arpeggio.c: 367: if(skipFirstLast == 1){
 44920  000D26  A634               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 44921  000D28  D013               	goto	i2l5314
 44922                           
 44923                           ;arpeggio.c: 368: if(NUM_NOTES_PRESSED > 1){
 44924  000D2A  0E01               	movlw	1
 44925  000D2C  0100               	movlb	0	; () banked
 44926  000D2E  65E5               	cpfsgt	_NUM_NOTES_PRESSED& (0+255),b
 44927  000D30  D003               	goto	i2l5313
 44928                           
 44929                           ; BSR set to: 0
 44930                           ;arpeggio.c: 369: which_note = 1;
 44931  000D32  0E01               	movlw	1
 44932  000D34  6E57               	movwf	_which_note,c
 44933                           
 44934                           ; BSR set to: 0
 44935                           ;arpeggio.c: 370: suppress_note_off = 1;
 44936  000D36  8633               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 44937  000D38                     i2l5313:
 44938                           
 44939                           ; BSR set to: 0
 44940                           ;arpeggio.c: 371: }
 44941                           ;arpeggio.c: 375: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 44942                           
 44943                           ; BSR set to: 0
 44944  000D38  05E5               	decf	_NUM_NOTES_PRESSED& (0+255),w,b
 44945  000D3A  A4D8               	btfss	status,2,c
 44946  000D3C  D009               	goto	i2l5314
 44947                           
 44948                           ; BSR set to: 0
 44949  000D3E  0E01               	movlw	1
 44950  000D40  65F8               	cpfsgt	_OCTAVES& (0+255),b
 44951  000D42  D006               	goto	i2l5314
 44952                           
 44953                           ; BSR set to: 0
 44954                           ;arpeggio.c: 376: flag1 = 1;
 44955  000D44  8E32               	bsf	_flag1/(0+8),_flag1& (0+7),c
 44956                           
 44957                           ; BSR set to: 0
 44958                           ;arpeggio.c: 378: which_note = 0;
 44959  000D46  0E00               	movlw	0
 44960  000D48  6E57               	movwf	_which_note,c
 44961                           
 44962                           ; BSR set to: 0
 44963                           ;arpeggio.c: 379: which_octave++;
 44964  000D4A  2A56               	incf	_which_octave,f,c
 44965                           
 44966                           ; BSR set to: 0
 44967                           ;arpeggio.c: 380: stored_octave = which_octave;
 44968  000D4C  C056  F0E7         	movff	_which_octave,_stored_octave
 44969  000D50                     i2l5314:
 44970                           
 44971                           ;arpeggio.c: 381: }
 44972                           ;arpeggio.c: 382: }
 44973                           ;arpeggio.c: 384: if(ARPEGGIO_TYPE == DOWN_UP) {ARPEGGIO_TYPE = UP_DOWN;}
 44974                           
 44975                           ; BSR set to: 0
 44976                           
 44977                           ; BSR set to: 0
 44978  000D50  0E03               	movlw	3
 44979  000D52  0100               	movlb	0	; () banked
 44980  000D54  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 44981  000D56  A4D8               	btfss	status,2,c
 44982  000D58  D002               	goto	i2l5315
 44983                           
 44984                           ; BSR set to: 0
 44985  000D5A  0E02               	movlw	2
 44986  000D5C  6FEA               	movwf	_ARPEGGIO_TYPE& (0+255),b
 44987  000D5E                     i2l5315:
 44988                           
 44989                           ;arpeggio.c: 385: }
 44990                           ;arpeggio.c: 386: }
 44991                           ;arpeggio.c: 389: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){
 44992                           
 44993                           ; BSR set to: 0
 44994                           
 44995                           ; BSR set to: 0
 44996                           
 44997                           ; BSR set to: 0
 44998  000D5E  0E05               	movlw	5
 44999  000D60  0100               	movlb	0	; () banked
 45000  000D62  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45001  000D64  B4D8               	btfsc	status,2,c
 45002  000D66  D004               	goto	i2u3848_40
 45003                           
 45004                           ; BSR set to: 0
 45005  000D68  0E04               	movlw	4
 45006  000D6A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45007  000D6C  A4D8               	btfss	status,2,c
 45008  000D6E  D056               	goto	i2l5321
 45009  000D70                     i2u3848_40:
 45010                           
 45011                           ; BSR set to: 0
 45012                           ;arpeggio.c: 391: last_octave = which_octave;
 45013  000D70  C056  F055         	movff	_which_octave,_last_octave
 45014                           
 45015                           ;arpeggio.c: 393: if((overflow == 1) && (flag1 == 0)){
 45016  000D74  B433               	btfsc	_overflow/(0+8),_overflow& (0+7),c
 45017                           
 45018                           ; BSR set to: 0
 45019  000D76  BE32               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45020  000D78  D00B               	goto	i2l5319
 45021                           
 45022                           ; BSR set to: 0
 45023                           ;arpeggio.c: 394: noteOff(channel,last_note + (last_octave * 12),velocity);
 45024  000D7A  5055               	movf	_last_octave,w,c
 45025  000D7C  0D0C               	mullw	12
 45026  000D7E  50F3               	movf	prodl,w,c
 45027  000D80  25E8               	addwf	_last_note& (0+255),w,b
 45028  000D82  6E0C               	movwf	i2noteOff@pitch,c
 45029  000D84  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45030  000D88  51F6               	movf	_channel& (0+255),w,b
 45031  000D8A  EC9D  F048         	call	i2_noteOff
 45032                           
 45033                           ;arpeggio.c: 395: overflow = 0;
 45034  000D8E  9433               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45035  000D90                     i2l5319:
 45036                           
 45037                           ;arpeggio.c: 396: }
 45038                           ;arpeggio.c: 398: if((which_note > 0) && (suppress_note_off == 0)){noteOff(channel,*(arp
      +                          eggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 45039  000D90  5057               	movf	_which_note,w,c
 45040  000D92  A4D8               	btfss	status,2,c
 45041  000D94  B633               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45042  000D96  D01E               	goto	i2l5320
 45043  000D98  0EFF               	movlw	255
 45044  000D9A  6E18               	movwf	??_playArpeggio& (0+255),c
 45045  000D9C  0EFF               	movlw	255
 45046  000D9E  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45047  000DA0  5057               	movf	_which_note,w,c
 45048  000DA2  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45049  000DA4  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45050  000DA6  5018               	movf	??_playArpeggio,w,c
 45051  000DA8  261A               	addwf	??_playArpeggio+2,f,c
 45052  000DAA  5019               	movf	??_playArpeggio+1,w,c
 45053  000DAC  221B               	addwfc	??_playArpeggio+3,f,c
 45054  000DAE  501A               	movf	??_playArpeggio+2,w,c
 45055  000DB0  244F               	addwf	_arpeggioPtr,w,c
 45056  000DB2  6ED9               	movwf	fsr2l,c
 45057  000DB4  501B               	movf	??_playArpeggio+3,w,c
 45058  000DB6  2050               	addwfc	_arpeggioPtr+1,w,c
 45059  000DB8  6EDA               	movwf	fsr2h,c
 45060  000DBA  50DF               	movf	indf2,w,c
 45061  000DBC  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45062  000DBE  5056               	movf	_which_octave,w,c
 45063  000DC0  0D0C               	mullw	12
 45064  000DC2  50F3               	movf	prodl,w,c
 45065  000DC4  241C               	addwf	??_playArpeggio+4,w,c
 45066  000DC6  6E0C               	movwf	i2noteOff@pitch,c
 45067  000DC8  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45068  000DCC  0100               	movlb	0	; () banked
 45069  000DCE  51F6               	movf	_channel& (0+255),w,b
 45070  000DD0  EC9D  F048         	call	i2_noteOff
 45071  000DD4                     i2l5320:
 45072                           
 45073                           ;arpeggio.c: 399: which_octave = rand() % OCTAVES;
 45074  000DD4  ECBE  F046         	call	i2_rand	;wreg free
 45075  000DD8  C00D  F00F         	movff	?i2_rand,i2___awmod@dividend
 45076  000DDC  C00E  F010         	movff	?i2_rand+1,i2___awmod@dividend+1
 45077  000DE0  C0F8  F011         	movff	_OCTAVES,i2___awmod@divisor
 45078  000DE4  6A12               	clrf	i2___awmod@divisor+1,c
 45079  000DE6  ECD0  F042         	call	i2___awmod	;wreg free
 45080  000DEA  500F               	movf	?i2___awmod,w,c
 45081  000DEC  6E56               	movwf	_which_octave,c
 45082                           
 45083                           ;arpeggio.c: 400: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 45084  000DEE  B833               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45085  000DF0  D015               	goto	i2l5321
 45086  000DF2  5057               	movf	_which_note,w,c
 45087  000DF4  0D01               	mullw	1
 45088  000DF6  50F3               	movf	prodl,w,c
 45089  000DF8  244F               	addwf	_arpeggioPtr,w,c
 45090  000DFA  6ED9               	movwf	fsr2l,c
 45091  000DFC  50F4               	movf	prodh,w,c
 45092  000DFE  2050               	addwfc	_arpeggioPtr+1,w,c
 45093  000E00  6EDA               	movwf	fsr2h,c
 45094  000E02  50DF               	movf	indf2,w,c
 45095  000E04  6E18               	movwf	??_playArpeggio& (0+255),c
 45096  000E06  5056               	movf	_which_octave,w,c
 45097  000E08  0D0C               	mullw	12
 45098  000E0A  50F3               	movf	prodl,w,c
 45099  000E0C  2418               	addwf	??_playArpeggio,w,c
 45100  000E0E  6E0F               	movwf	i2noteOn@pitch,c
 45101  000E10  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45102  000E14  0100               	movlb	0	; () banked
 45103  000E16  51F6               	movf	_channel& (0+255),w,b
 45104  000E18  EC8A  F045         	call	i2_noteOn
 45105  000E1C                     i2l5321:
 45106                           
 45107                           ;arpeggio.c: 401: }
 45108                           ;arpeggio.c: 403: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE =
      +                          = AS_PRESSED)) {
 45109  000E1C  0100               	movlb	0	; () banked
 45110  000E1E  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 45111  000E20  B4D8               	btfsc	status,2,c
 45112  000E22  D008               	goto	i2u3856_40
 45113                           
 45114                           ; BSR set to: 0
 45115  000E24  0E02               	movlw	2
 45116  000E26  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45117  000E28  B4D8               	btfsc	status,2,c
 45118  000E2A  D004               	goto	i2u3856_40
 45119                           
 45120                           ; BSR set to: 0
 45121  000E2C  0E06               	movlw	6
 45122  000E2E  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45123  000E30  A4D8               	btfss	status,2,c
 45124  000E32  D07F               	goto	i2l5332
 45125  000E34                     i2u3856_40:
 45126                           
 45127                           ; BSR set to: 0
 45128                           ;arpeggio.c: 405: SORT_DIRECTION = 0;
 45129                           
 45130                           ; BSR set to: 0
 45131  000E34  9835               	bcf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 45132                           
 45133                           ; BSR set to: 0
 45134                           ;arpeggio.c: 406: sort_pitches();
 45135  000E36  EC6A  F031         	call	_sort_pitches	;wreg free
 45136                           
 45137                           ;arpeggio.c: 408: if(startingDirection == UP){
 45138  000E3A  0100               	movlb	0	; () banked
 45139  000E3C  51E9               	movf	_startingDirection& (0+255),w,b
 45140  000E3E  A4D8               	btfss	status,2,c
 45141  000E40  D038               	goto	i2l5329
 45142                           
 45143                           ; BSR set to: 0
 45144                           ;arpeggio.c: 410: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 45145  000E42  5057               	movf	_which_note,w,c
 45146  000E44  A4D8               	btfss	status,2,c
 45147                           
 45148                           ; BSR set to: 0
 45149  000E46  B633               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45150  000E48  D01D               	goto	i2l5328
 45151                           
 45152                           ; BSR set to: 0
 45153  000E4A  0EFF               	movlw	255
 45154  000E4C  6E18               	movwf	??_playArpeggio& (0+255),c
 45155  000E4E  0EFF               	movlw	255
 45156  000E50  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45157  000E52  5057               	movf	_which_note,w,c
 45158  000E54  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45159  000E56  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45160  000E58  5018               	movf	??_playArpeggio,w,c
 45161  000E5A  261A               	addwf	??_playArpeggio+2,f,c
 45162  000E5C  5019               	movf	??_playArpeggio+1,w,c
 45163  000E5E  221B               	addwfc	??_playArpeggio+3,f,c
 45164  000E60  501A               	movf	??_playArpeggio+2,w,c
 45165  000E62  244F               	addwf	_arpeggioPtr,w,c
 45166  000E64  6ED9               	movwf	fsr2l,c
 45167  000E66  501B               	movf	??_playArpeggio+3,w,c
 45168  000E68  2050               	addwfc	_arpeggioPtr+1,w,c
 45169  000E6A  6EDA               	movwf	fsr2h,c
 45170  000E6C  50DF               	movf	indf2,w,c
 45171  000E6E  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45172  000E70  5056               	movf	_which_octave,w,c
 45173  000E72  0D0C               	mullw	12
 45174  000E74  50F3               	movf	prodl,w,c
 45175  000E76  241C               	addwf	??_playArpeggio+4,w,c
 45176  000E78  6E0C               	movwf	i2noteOff@pitch,c
 45177  000E7A  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45178  000E7E  51F6               	movf	_channel& (0+255),w,b
 45179  000E80  EC9D  F048         	call	i2_noteOff
 45180  000E84                     i2l5328:
 45181                           
 45182                           ;arpeggio.c: 411: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 45183  000E84  B833               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45184  000E86  D015               	goto	i2l5329
 45185  000E88  5057               	movf	_which_note,w,c
 45186  000E8A  0D01               	mullw	1
 45187  000E8C  50F3               	movf	prodl,w,c
 45188  000E8E  244F               	addwf	_arpeggioPtr,w,c
 45189  000E90  6ED9               	movwf	fsr2l,c
 45190  000E92  50F4               	movf	prodh,w,c
 45191  000E94  2050               	addwfc	_arpeggioPtr+1,w,c
 45192  000E96  6EDA               	movwf	fsr2h,c
 45193  000E98  50DF               	movf	indf2,w,c
 45194  000E9A  6E18               	movwf	??_playArpeggio& (0+255),c
 45195  000E9C  5056               	movf	_which_octave,w,c
 45196  000E9E  0D0C               	mullw	12
 45197  000EA0  50F3               	movf	prodl,w,c
 45198  000EA2  2418               	addwf	??_playArpeggio,w,c
 45199  000EA4  6E0F               	movwf	i2noteOn@pitch,c
 45200  000EA6  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45201  000EAA  0100               	movlb	0	; () banked
 45202  000EAC  51F6               	movf	_channel& (0+255),w,b
 45203  000EAE  EC8A  F045         	call	i2_noteOn
 45204  000EB2                     i2l5329:
 45205                           
 45206                           ;arpeggio.c: 412: }
 45207                           ;arpeggio.c: 414: if(startingDirection == DOWN) {
 45208  000EB2  0100               	movlb	0	; () banked
 45209  000EB4  05E9               	decf	_startingDirection& (0+255),w,b
 45210  000EB6  A4D8               	btfss	status,2,c
 45211  000EB8  D03C               	goto	i2l5332
 45212                           
 45213                           ; BSR set to: 0
 45214                           ;arpeggio.c: 416: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 45215  000EBA  5057               	movf	_which_note,w,c
 45216  000EBC  A4D8               	btfss	status,2,c
 45217                           
 45218                           ; BSR set to: 0
 45219  000EBE  B633               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45220  000EC0  D01F               	goto	i2l5331
 45221                           
 45222                           ; BSR set to: 0
 45223  000EC2  0EFF               	movlw	255
 45224  000EC4  6E18               	movwf	??_playArpeggio& (0+255),c
 45225  000EC6  0EFF               	movlw	255
 45226  000EC8  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45227  000ECA  5057               	movf	_which_note,w,c
 45228  000ECC  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45229  000ECE  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45230  000ED0  5018               	movf	??_playArpeggio,w,c
 45231  000ED2  261A               	addwf	??_playArpeggio+2,f,c
 45232  000ED4  5019               	movf	??_playArpeggio+1,w,c
 45233  000ED6  221B               	addwfc	??_playArpeggio+3,f,c
 45234  000ED8  501A               	movf	??_playArpeggio+2,w,c
 45235  000EDA  244F               	addwf	_arpeggioPtr,w,c
 45236  000EDC  6ED9               	movwf	fsr2l,c
 45237  000EDE  501B               	movf	??_playArpeggio+3,w,c
 45238  000EE0  2050               	addwfc	_arpeggioPtr+1,w,c
 45239  000EE2  6EDA               	movwf	fsr2h,c
 45240  000EE4  50DF               	movf	indf2,w,c
 45241  000EE6  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45242  000EE8  05F8               	decf	_OCTAVES& (0+255),w,b
 45243  000EEA  0800               	sublw	0
 45244  000EEC  2456               	addwf	_which_octave,w,c
 45245  000EEE  0D0C               	mullw	12
 45246  000EF0  50F3               	movf	prodl,w,c
 45247  000EF2  241C               	addwf	??_playArpeggio+4,w,c
 45248  000EF4  6E0C               	movwf	i2noteOff@pitch,c
 45249  000EF6  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45250  000EFA  51F6               	movf	_channel& (0+255),w,b
 45251  000EFC  EC9D  F048         	call	i2_noteOff
 45252  000F00                     i2l5331:
 45253                           
 45254                           ;arpeggio.c: 417: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 45255  000F00  B833               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45256  000F02  D017               	goto	i2l5332
 45257  000F04  5057               	movf	_which_note,w,c
 45258  000F06  0D01               	mullw	1
 45259  000F08  50F3               	movf	prodl,w,c
 45260  000F0A  244F               	addwf	_arpeggioPtr,w,c
 45261  000F0C  6ED9               	movwf	fsr2l,c
 45262  000F0E  50F4               	movf	prodh,w,c
 45263  000F10  2050               	addwfc	_arpeggioPtr+1,w,c
 45264  000F12  6EDA               	movwf	fsr2h,c
 45265  000F14  50DF               	movf	indf2,w,c
 45266  000F16  6E18               	movwf	??_playArpeggio& (0+255),c
 45267  000F18  0100               	movlb	0	; () banked
 45268  000F1A  05F8               	decf	_OCTAVES& (0+255),w,b
 45269  000F1C  0800               	sublw	0
 45270  000F1E  2456               	addwf	_which_octave,w,c
 45271  000F20  0D0C               	mullw	12
 45272  000F22  50F3               	movf	prodl,w,c
 45273  000F24  2418               	addwf	??_playArpeggio,w,c
 45274  000F26  6E0F               	movwf	i2noteOn@pitch,c
 45275  000F28  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45276  000F2C  51F6               	movf	_channel& (0+255),w,b
 45277  000F2E  EC8A  F045         	call	i2_noteOn
 45278  000F32                     i2l5332:
 45279                           
 45280                           ;arpeggio.c: 418: }
 45281                           ;arpeggio.c: 419: }
 45282                           ;arpeggio.c: 421: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 45283  000F32  0100               	movlb	0	; () banked
 45284  000F34  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 45285  000F36  B4D8               	btfsc	status,2,c
 45286  000F38  D004               	goto	i2u3866_40
 45287                           
 45288                           ; BSR set to: 0
 45289  000F3A  0E03               	movlw	3
 45290  000F3C  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45291  000F3E  A4D8               	btfss	status,2,c
 45292  000F40  D082               	goto	i2l5341
 45293  000F42                     i2u3866_40:
 45294                           
 45295                           ; BSR set to: 0
 45296                           ;arpeggio.c: 423: SORT_DIRECTION = 1;
 45297  000F42  8835               	bsf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 45298                           
 45299                           ; BSR set to: 0
 45300                           ;arpeggio.c: 424: sort_pitches();
 45301  000F44  EC6A  F031         	call	_sort_pitches	;wreg free
 45302                           
 45303                           ;arpeggio.c: 426: suppress_note_on = 0;
 45304  000F48  9833               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45305                           
 45306                           ;arpeggio.c: 428: if(startingDirection == UP){
 45307  000F4A  0100               	movlb	0	; () banked
 45308  000F4C  51E9               	movf	_startingDirection& (0+255),w,b
 45309  000F4E  A4D8               	btfss	status,2,c
 45310  000F50  D03E               	goto	i2l5338
 45311                           
 45312                           ; BSR set to: 0
 45313                           ;arpeggio.c: 430: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 45314  000F52  5057               	movf	_which_note,w,c
 45315  000F54  A4D8               	btfss	status,2,c
 45316                           
 45317                           ; BSR set to: 0
 45318  000F56  B633               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45319  000F58  D020               	goto	i2l5337
 45320                           
 45321                           ; BSR set to: 0
 45322  000F5A  0EFF               	movlw	255
 45323  000F5C  6E18               	movwf	??_playArpeggio& (0+255),c
 45324  000F5E  0EFF               	movlw	255
 45325  000F60  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45326  000F62  5057               	movf	_which_note,w,c
 45327  000F64  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45328  000F66  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45329  000F68  5018               	movf	??_playArpeggio,w,c
 45330  000F6A  261A               	addwf	??_playArpeggio+2,f,c
 45331  000F6C  5019               	movf	??_playArpeggio+1,w,c
 45332  000F6E  221B               	addwfc	??_playArpeggio+3,f,c
 45333  000F70  501A               	movf	??_playArpeggio+2,w,c
 45334  000F72  244F               	addwf	_arpeggioPtr,w,c
 45335  000F74  6ED9               	movwf	fsr2l,c
 45336  000F76  501B               	movf	??_playArpeggio+3,w,c
 45337  000F78  2050               	addwfc	_arpeggioPtr+1,w,c
 45338  000F7A  6EDA               	movwf	fsr2h,c
 45339  000F7C  50DF               	movf	indf2,w,c
 45340  000F7E  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45341  000F80  51F8               	movf	_OCTAVES& (0+255),w,b
 45342  000F82  2456               	addwf	_which_octave,w,c
 45343  000F84  6E1D               	movwf	(??_playArpeggio+5)& (0+255),c
 45344  000F86  041D               	decf	??_playArpeggio+5,w,c
 45345  000F88  0D0C               	mullw	12
 45346  000F8A  50F3               	movf	prodl,w,c
 45347  000F8C  241C               	addwf	??_playArpeggio+4,w,c
 45348  000F8E  6E0C               	movwf	i2noteOff@pitch,c
 45349  000F90  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45350  000F94  51F6               	movf	_channel& (0+255),w,b
 45351  000F96  EC9D  F048         	call	i2_noteOff
 45352  000F9A                     i2l5337:
 45353                           
 45354                           ;arpeggio.c: 431: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 45355  000F9A  B833               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45356  000F9C  D018               	goto	i2l5338
 45357  000F9E  5057               	movf	_which_note,w,c
 45358  000FA0  0D01               	mullw	1
 45359  000FA2  50F3               	movf	prodl,w,c
 45360  000FA4  244F               	addwf	_arpeggioPtr,w,c
 45361  000FA6  6ED9               	movwf	fsr2l,c
 45362  000FA8  50F4               	movf	prodh,w,c
 45363  000FAA  2050               	addwfc	_arpeggioPtr+1,w,c
 45364  000FAC  6EDA               	movwf	fsr2h,c
 45365  000FAE  50DF               	movf	indf2,w,c
 45366  000FB0  6E18               	movwf	??_playArpeggio& (0+255),c
 45367  000FB2  0100               	movlb	0	; () banked
 45368  000FB4  51F8               	movf	_OCTAVES& (0+255),w,b
 45369  000FB6  2456               	addwf	_which_octave,w,c
 45370  000FB8  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45371  000FBA  0419               	decf	??_playArpeggio+1,w,c
 45372  000FBC  0D0C               	mullw	12
 45373  000FBE  50F3               	movf	prodl,w,c
 45374  000FC0  2418               	addwf	??_playArpeggio,w,c
 45375  000FC2  6E0F               	movwf	i2noteOn@pitch,c
 45376  000FC4  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45377  000FC8  51F6               	movf	_channel& (0+255),w,b
 45378  000FCA  EC8A  F045         	call	i2_noteOn
 45379  000FCE                     i2l5338:
 45380                           
 45381                           ;arpeggio.c: 432: }
 45382                           ;arpeggio.c: 434: if(startingDirection == DOWN){
 45383  000FCE  0100               	movlb	0	; () banked
 45384  000FD0  05E9               	decf	_startingDirection& (0+255),w,b
 45385  000FD2  A4D8               	btfss	status,2,c
 45386  000FD4  D038               	goto	i2l5341
 45387                           
 45388                           ; BSR set to: 0
 45389                           ;arpeggio.c: 436: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave) * 12),velocity);}
 45390  000FD6  5057               	movf	_which_note,w,c
 45391  000FD8  A4D8               	btfss	status,2,c
 45392                           
 45393                           ; BSR set to: 0
 45394  000FDA  B633               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45395  000FDC  D01D               	goto	i2l5340
 45396                           
 45397                           ; BSR set to: 0
 45398  000FDE  0EFF               	movlw	255
 45399  000FE0  6E18               	movwf	??_playArpeggio& (0+255),c
 45400  000FE2  0EFF               	movlw	255
 45401  000FE4  6E19               	movwf	(??_playArpeggio+1)& (0+255),c
 45402  000FE6  5057               	movf	_which_note,w,c
 45403  000FE8  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45404  000FEA  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45405  000FEC  5018               	movf	??_playArpeggio,w,c
 45406  000FEE  261A               	addwf	??_playArpeggio+2,f,c
 45407  000FF0  5019               	movf	??_playArpeggio+1,w,c
 45408  000FF2  221B               	addwfc	??_playArpeggio+3,f,c
 45409  000FF4  501A               	movf	??_playArpeggio+2,w,c
 45410  000FF6  244F               	addwf	_arpeggioPtr,w,c
 45411  000FF8  6ED9               	movwf	fsr2l,c
 45412  000FFA  501B               	movf	??_playArpeggio+3,w,c
 45413  000FFC  2050               	addwfc	_arpeggioPtr+1,w,c
 45414  000FFE  6EDA               	movwf	fsr2h,c
 45415  001000  50DF               	movf	indf2,w,c
 45416  001002  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45417  001004  5056               	movf	_which_octave,w,c
 45418  001006  0D0C               	mullw	12
 45419  001008  50F3               	movf	prodl,w,c
 45420  00100A  241C               	addwf	??_playArpeggio+4,w,c
 45421  00100C  6E0C               	movwf	i2noteOff@pitch,c
 45422  00100E  C0FD  F00D         	movff	_velocity,i2noteOff@velocity
 45423  001012  51F6               	movf	_channel& (0+255),w,b
 45424  001014  EC9D  F048         	call	i2_noteOff
 45425  001018                     i2l5340:
 45426                           
 45427                           ;arpeggio.c: 437: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 45428  001018  B833               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45429  00101A  D015               	goto	i2l5341
 45430  00101C  5057               	movf	_which_note,w,c
 45431  00101E  0D01               	mullw	1
 45432  001020  50F3               	movf	prodl,w,c
 45433  001022  244F               	addwf	_arpeggioPtr,w,c
 45434  001024  6ED9               	movwf	fsr2l,c
 45435  001026  50F4               	movf	prodh,w,c
 45436  001028  2050               	addwfc	_arpeggioPtr+1,w,c
 45437  00102A  6EDA               	movwf	fsr2h,c
 45438  00102C  50DF               	movf	indf2,w,c
 45439  00102E  6E18               	movwf	??_playArpeggio& (0+255),c
 45440  001030  5056               	movf	_which_octave,w,c
 45441  001032  0D0C               	mullw	12
 45442  001034  50F3               	movf	prodl,w,c
 45443  001036  2418               	addwf	??_playArpeggio,w,c
 45444  001038  6E0F               	movwf	i2noteOn@pitch,c
 45445  00103A  C0FD  F010         	movff	_velocity,i2noteOn@velocity
 45446  00103E  0100               	movlb	0	; () banked
 45447  001040  51F6               	movf	_channel& (0+255),w,b
 45448  001042  EC8A  F045         	call	i2_noteOn
 45449  001046                     i2l5341:
 45450                           
 45451                           ;arpeggio.c: 438: }
 45452                           ;arpeggio.c: 439: }
 45453                           ;arpeggio.c: 441: last_note = *(arpeggioPtr + which_note);
 45454  001046  5057               	movf	_which_note,w,c
 45455  001048  0D01               	mullw	1
 45456  00104A  50F3               	movf	prodl,w,c
 45457  00104C  244F               	addwf	_arpeggioPtr,w,c
 45458  00104E  6ED9               	movwf	fsr2l,c
 45459  001050  50F4               	movf	prodh,w,c
 45460  001052  2050               	addwfc	_arpeggioPtr+1,w,c
 45461  001054  6EDA               	movwf	fsr2h,c
 45462  001056  50DF               	movf	indf2,w,c
 45463  001058  0100               	movlb	0	; () banked
 45464  00105A  6FE8               	movwf	_last_note& (0+255),b
 45465                           
 45466                           ; BSR set to: 0
 45467                           ;arpeggio.c: 442: which_note++;
 45468  00105C  2A57               	incf	_which_note,f,c
 45469                           
 45470                           ; BSR set to: 0
 45471                           ;arpeggio.c: 443: suppress_note_off = 0;
 45472  00105E  9633               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45473                           
 45474                           ; BSR set to: 0
 45475                           ;arpeggio.c: 455: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | (ARPEGGIO_TYPE
      +                           == RANDOM) | (ARPEGGIO_TYPE == RANDOM_NON_REPEATING) | ARPEGGIO_TYPE == AS_PRESSED) {
 45476  001060  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 45477  001062  B4D8               	btfsc	status,2,c
 45478  001064  D010               	goto	i2u3879_40
 45479                           
 45480                           ; BSR set to: 0
 45481  001066  0E02               	movlw	2
 45482  001068  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45483  00106A  B4D8               	btfsc	status,2,c
 45484  00106C  D00C               	goto	i2u3879_40
 45485                           
 45486                           ; BSR set to: 0
 45487  00106E  0E05               	movlw	5
 45488  001070  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45489  001072  B4D8               	btfsc	status,2,c
 45490  001074  D008               	goto	i2u3879_40
 45491                           
 45492                           ; BSR set to: 0
 45493  001076  0E04               	movlw	4
 45494  001078  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45495  00107A  B4D8               	btfsc	status,2,c
 45496  00107C  D004               	goto	i2u3879_40
 45497                           
 45498                           ; BSR set to: 0
 45499  00107E  0E06               	movlw	6
 45500  001080  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45501  001082  A4D8               	btfss	status,2,c
 45502  001084  D039               	goto	i2l5353
 45503  001086                     i2u3879_40:
 45504                           
 45505                           ; BSR set to: 0
 45506                           ;arpeggio.c: 457: if(which_note >= (NUM_NOTES_PRESSED)){
 45507                           
 45508                           ; BSR set to: 0
 45509  001086  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45510  001088  5C57               	subwf	_which_note,w,c
 45511  00108A  A0D8               	btfss	status,0,c
 45512  00108C  D01E               	goto	i2l5352
 45513                           
 45514                           ; BSR set to: 0
 45515                           ;arpeggio.c: 459: which_note = 0;
 45516  00108E  0E00               	movlw	0
 45517  001090  6E57               	movwf	_which_note,c
 45518                           
 45519                           ;arpeggio.c: 462: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | ARPEGGIO_TYPE 
      +                          == AS_PRESSED) {
 45520  001092  51EA               	movf	_ARPEGGIO_TYPE& (0+255),w,b
 45521  001094  B4D8               	btfsc	status,2,c
 45522  001096  D007               	goto	i2u3883_40
 45523                           
 45524                           ; BSR set to: 0
 45525  001098  0E02               	movlw	2
 45526  00109A  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45527  00109C  B4D8               	btfsc	status,2,c
 45528  00109E  D003               	goto	i2u3883_40
 45529                           
 45530                           ; BSR set to: 0
 45531  0010A0  0E06               	movlw	6
 45532  0010A2  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45533  0010A4  B4D8               	btfsc	status,2,c
 45534  0010A6                     i2u3883_40:
 45535                           
 45536                           ; BSR set to: 0
 45537                           ;arpeggio.c: 463: which_octave++;
 45538                           
 45539                           ; BSR set to: 0
 45540  0010A6  2A56               	incf	_which_octave,f,c
 45541                           
 45542                           ; BSR set to: 0
 45543                           ;arpeggio.c: 464: }
 45544                           ;arpeggio.c: 466: overflow = 1;
 45545                           
 45546                           ; BSR set to: 0
 45547  0010A8  8433               	bsf	_overflow/(0+8),_overflow& (0+7),c
 45548                           
 45549                           ; BSR set to: 0
 45550                           ;arpeggio.c: 467: flag1 = 0;
 45551  0010AA  9E32               	bcf	_flag1/(0+8),_flag1& (0+7),c
 45552                           
 45553                           ; BSR set to: 0
 45554                           ;arpeggio.c: 470: if(ARPEGGIO_TYPE == RANDOM) {
 45555  0010AC  0E05               	movlw	5
 45556  0010AE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45557  0010B0  B4D8               	btfsc	status,2,c
 45558                           
 45559                           ; BSR set to: 0
 45560                           ;arpeggio.c: 471: if(AUTO_RANDOMIZE == 0) {random_pitches();}
 45561  0010B2  B834               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 45562  0010B4  D002               	goto	i2l5350
 45563                           
 45564                           ; BSR set to: 0
 45565  0010B6  ECE5  F045         	call	i2_random_pitches	;wreg free
 45566  0010BA                     i2l5350:
 45567                           
 45568                           ;arpeggio.c: 472: }
 45569                           ;arpeggio.c: 473: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {
 45570  0010BA  0E04               	movlw	4
 45571  0010BC  0100               	movlb	0	; () banked
 45572  0010BE  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45573  0010C0  B4D8               	btfsc	status,2,c
 45574                           
 45575                           ; BSR set to: 0
 45576                           ;arpeggio.c: 474: if(AUTO_RANDOMIZE == 0) {random_pitches_non_repeating();}
 45577  0010C2  B834               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 45578  0010C4  D002               	goto	i2l5352
 45579                           
 45580                           ; BSR set to: 0
 45581  0010C6  EC06  F03E         	call	i2_random_pitches_non_repeating	;wreg free
 45582  0010CA                     i2l5352:
 45583                           
 45584                           ;arpeggio.c: 475: }
 45585                           ;arpeggio.c: 476: }
 45586                           ;arpeggio.c: 478: if(which_octave>=OCTAVES) {
 45587  0010CA  0100               	movlb	0	; () banked
 45588  0010CC  51F8               	movf	_OCTAVES& (0+255),w,b
 45589  0010CE  6E18               	movwf	??_playArpeggio& (0+255),c
 45590  0010D0  6A19               	clrf	(??_playArpeggio+1)& (0+255),c
 45591  0010D2  C056  F01A         	movff	_which_octave,??_playArpeggio+2
 45592  0010D6  6A1B               	clrf	(??_playArpeggio+3)& (0+255),c
 45593  0010D8  BE1A               	btfsc	(??_playArpeggio+2)& (0+255),7,c
 45594  0010DA  061B               	decf	(??_playArpeggio+3)& (0+255),f,c
 45595  0010DC  5018               	movf	??_playArpeggio,w,c
 45596  0010DE  5C1A               	subwf	??_playArpeggio+2,w,c
 45597  0010E0  501B               	movf	??_playArpeggio+3,w,c
 45598  0010E2  0A80               	xorlw	128
 45599  0010E4  6E1C               	movwf	(??_playArpeggio+4)& (0+255),c
 45600  0010E6  5019               	movf	??_playArpeggio+1,w,c
 45601  0010E8  0A80               	xorlw	128
 45602  0010EA  581C               	subwfb	(??_playArpeggio+4)& (0+255),w,c
 45603  0010EC  A0D8               	btfss	status,0,c
 45604  0010EE  D004               	goto	i2l5353
 45605                           
 45606                           ; BSR set to: 0
 45607                           ;arpeggio.c: 479: which_octave = 0;
 45608  0010F0  0E00               	movlw	0
 45609  0010F2  6E56               	movwf	_which_octave,c
 45610                           
 45611                           ; BSR set to: 0
 45612                           ;arpeggio.c: 480: octave_overflow = 1;
 45613  0010F4  8233               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45614                           
 45615                           ; BSR set to: 0
 45616                           ;arpeggio.c: 481: flag2 = 0;
 45617  0010F6  9C32               	bcf	_flag2/(0+8),_flag2& (0+7),c
 45618  0010F8                     i2l5353:
 45619                           
 45620                           ; BSR set to: 0
 45621                           ;arpeggio.c: 482: }
 45622                           ;arpeggio.c: 483: }
 45623                           ;arpeggio.c: 486: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 45624                           
 45625                           ; BSR set to: 0
 45626                           
 45627                           ; BSR set to: 0
 45628  0010F8  05EA               	decf	_ARPEGGIO_TYPE& (0+255),w,b
 45629  0010FA  B4D8               	btfsc	status,2,c
 45630  0010FC  D004               	goto	i2u3890_40
 45631                           
 45632                           ; BSR set to: 0
 45633  0010FE  0E03               	movlw	3
 45634  001100  19EA               	xorwf	_ARPEGGIO_TYPE& (0+255),w,b
 45635  001102  A4D8               	btfss	status,2,c
 45636  001104  0012               	return	
 45637  001106                     i2u3890_40:
 45638                           
 45639                           ; BSR set to: 0
 45640                           ;arpeggio.c: 488: if(which_note>=(NUM_NOTES_PRESSED)){
 45641                           
 45642                           ; BSR set to: 0
 45643  001106  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45644  001108  5C57               	subwf	_which_note,w,c
 45645  00110A  A0D8               	btfss	status,0,c
 45646  00110C  D005               	goto	i2l5357
 45647                           
 45648                           ; BSR set to: 0
 45649                           ;arpeggio.c: 489: which_note = 0;
 45650  00110E  0E00               	movlw	0
 45651  001110  6E57               	movwf	_which_note,c
 45652                           
 45653                           ; BSR set to: 0
 45654                           ;arpeggio.c: 490: which_octave--;
 45655  001112  0656               	decf	_which_octave,f,c
 45656                           
 45657                           ; BSR set to: 0
 45658                           ;arpeggio.c: 491: overflow = 1;
 45659  001114  8433               	bsf	_overflow/(0+8),_overflow& (0+7),c
 45660                           
 45661                           ; BSR set to: 0
 45662                           ;arpeggio.c: 492: flag1 = 0;
 45663  001116  9E32               	bcf	_flag1/(0+8),_flag1& (0+7),c
 45664  001118                     i2l5357:
 45665                           
 45666                           ; BSR set to: 0
 45667                           ;arpeggio.c: 493: }
 45668                           ;arpeggio.c: 494: if(which_octave <= (OCTAVES * -1)) {
 45669                           
 45670                           ; BSR set to: 0
 45671  001118  C056  F018         	movff	_which_octave,??_playArpeggio
 45672  00111C  6A19               	clrf	(??_playArpeggio+1)& (0+255),c
 45673  00111E  BE18               	btfsc	??_playArpeggio& (0+255),7,c
 45674  001120  0619               	decf	(??_playArpeggio+1)& (0+255),f,c
 45675  001122  51F8               	movf	_OCTAVES& (0+255),w,b
 45676  001124  0D01               	mullw	1
 45677  001126  1EF3               	comf	prodl,f,c
 45678  001128  1EF4               	comf	prodh,f,c
 45679  00112A  4AF3               	infsnz	prodl,f,c
 45680  00112C  2AF4               	incf	prodh,f,c
 45681  00112E  5018               	movf	??_playArpeggio,w,c
 45682  001130  5CF3               	subwf	prodl,w,c
 45683  001132  50F4               	movf	prodh,w,c
 45684  001134  0A80               	xorlw	128
 45685  001136  6E1A               	movwf	(??_playArpeggio+2)& (0+255),c
 45686  001138  5019               	movf	??_playArpeggio+1,w,c
 45687  00113A  0A80               	xorlw	128
 45688  00113C  581A               	subwfb	(??_playArpeggio+2)& (0+255),w,c
 45689  00113E  A0D8               	btfss	status,0,c
 45690  001140  0012               	return	
 45691                           
 45692                           ; BSR set to: 0
 45693                           ;arpeggio.c: 495: which_octave = 0;
 45694  001142  0E00               	movlw	0
 45695  001144  6E56               	movwf	_which_octave,c
 45696                           
 45697                           ; BSR set to: 0
 45698                           ;arpeggio.c: 496: octave_overflow = 1;
 45699  001146  8233               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45700                           
 45701                           ; BSR set to: 0
 45702                           ;arpeggio.c: 497: flag2 = 0;
 45703  001148  9C32               	bcf	_flag2/(0+8),_flag2& (0+7),c
 45704                           
 45705                           ; BSR set to: 0
 45706  00114A  0012               	return	
 45707  00114C                     __end_of_playArpeggio:
 45708                           	opt stack 0
 45709                           pclatu	equ	0xFFB
 45710                           pclath	equ	0xFFA
 45711                           tblptru	equ	0xFF8
 45712                           tblptrh	equ	0xFF7
 45713                           tblptrl	equ	0xFF6
 45714                           tablat	equ	0xFF5
 45715                           prodh	equ	0xFF4
 45716                           prodl	equ	0xFF3
 45717                           intcon	equ	0xFF2
 45718                           intcon2	equ	0xFF1
 45719                           postinc0	equ	0xFEE
 45720                           fsr0h	equ	0xFEA
 45721                           fsr0l	equ	0xFE9
 45722                           wreg	equ	0xFE8
 45723                           indf1	equ	0xFE7
 45724                           postinc1	equ	0xFE6
 45725                           postdec1	equ	0xFE5
 45726                           fsr1h	equ	0xFE2
 45727                           fsr1l	equ	0xFE1
 45728                           indf2	equ	0xFDF
 45729                           postinc2	equ	0xFDE
 45730                           postdec2	equ	0xFDD
 45731                           plusw2	equ	0xFDB
 45732                           fsr2h	equ	0xFDA
 45733                           fsr2l	equ	0xFD9
 45734                           status	equ	0xFD8
 45735                           
 45736 ;; *************** function i2_random_pitches_non_repeating *****************
 45737 ;; Defined at:
 45738 ;;		line 252 in file "arpeggio.c"
 45739 ;; Parameters:    Size  Location     Type
 45740 ;;		None
 45741 ;; Auto vars:     Size  Location     Type
 45742 ;;  random_pitch    1   22[COMRAM] unsigned char 
 45743 ;;  random_pitch    1   21[COMRAM] unsigned char 
 45744 ;;  random_pitch    1   20[COMRAM] unsigned char 
 45745 ;; Return value:  Size  Location     Type
 45746 ;;                  1    wreg      void 
 45747 ;; Registers used:
 45748 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 45749 ;; Tracked objects:
 45750 ;;		On entry : 0/0
 45751 ;;		On exit  : 0/0
 45752 ;;		Unchanged: 0/0
 45753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 45754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45755 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45757 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45758 ;;Total ram usage:        3 bytes
 45759 ;; Hardware stack levels used:    1
 45760 ;; Hardware stack levels required when called:    2
 45761 ;; This function calls:
 45762 ;;		i2___awmod
 45763 ;;		i2_rand
 45764 ;; This function is called by:
 45765 ;;		_playArpeggio
 45766 ;; This function uses a non-reentrant model
 45767 ;;
 45768                           
 45769                           	psect	text141
 45770  007C0C                     __ptext141:
 45771                           	opt stack 0
 45772  007C0C                     i2_random_pitches_non_repeating:
 45773                           	opt stack 15
 45774                           
 45775                           ;arpeggio.c: 254: if(NUM_NOTES_PRESSED == 0){return;}
 45776                           
 45777                           ; BSR set to: 0
 45778                           ;incstack = 0
 45779  007C0C  0100               	movlb	0	; () banked
 45780  007C0E  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45781  007C10  B4D8               	btfsc	status,2,c
 45782  007C12  0012               	return	
 45783                           
 45784                           ; BSR set to: 0
 45785                           ;arpeggio.c: 256: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++) {
 45786                           
 45787                           ; BSR set to: 0
 45788                           
 45789                           ; BSR set to: 0
 45790  007C14  0E00               	movlw	0
 45791  007C16  6E17               	movwf	i2random_pitches_non_repeating@i,c
 45792  007C18  D034               	goto	i2l5277
 45793  007C1A                     
 45794                           ; BSR set to: 0
 45795                           ;arpeggio.c: 257: unsigned char temp = ARPEGGIO_RANDOM[i];
 45796                           
 45797                           ; BSR set to: 0
 45798  007C1A  5017               	movf	i2random_pitches_non_repeating@i,w,c
 45799  007C1C  0D01               	mullw	1
 45800  007C1E  0E8C               	movlw	low _ARPEGGIO_RANDOM
 45801  007C20  24F3               	addwf	prodl,w,c
 45802  007C22  6ED9               	movwf	fsr2l,c
 45803  007C24  0E02               	movlw	high _ARPEGGIO_RANDOM
 45804  007C26  20F4               	addwfc	prodh,w,c
 45805  007C28  6EDA               	movwf	fsr2h,c
 45806  007C2A  50DF               	movf	indf2,w,c
 45807  007C2C  6E15               	movwf	i2random_pitches_non_repeating@temp,c
 45808                           
 45809                           ; BSR set to: 0
 45810                           ;arpeggio.c: 258: unsigned char randomIndex = rand() % NUM_NOTES_PRESSED;
 45811  007C2E  ECBE  F046         	call	i2_rand	;wreg free
 45812  007C32  C00D  F00F         	movff	?i2_rand,i2___awmod@dividend
 45813  007C36  C00E  F010         	movff	?i2_rand+1,i2___awmod@dividend+1
 45814  007C3A  C0E5  F011         	movff	_NUM_NOTES_PRESSED,i2___awmod@divisor
 45815  007C3E  6A12               	clrf	i2___awmod@divisor+1,c
 45816  007C40  ECD0  F042         	call	i2___awmod	;wreg free
 45817  007C44  500F               	movf	?i2___awmod,w,c
 45818  007C46  6E16               	movwf	i2random_pitches_non_repeating@randomIndex,c
 45819                           
 45820                           ;arpeggio.c: 259: ARPEGGIO_RANDOM[i] = ARPEGGIO_RANDOM[randomIndex];
 45821  007C48  5016               	movf	i2random_pitches_non_repeating@randomIndex,w,c
 45822  007C4A  0D01               	mullw	1
 45823  007C4C  0E8C               	movlw	low _ARPEGGIO_RANDOM
 45824  007C4E  24F3               	addwf	prodl,w,c
 45825  007C50  6ED9               	movwf	fsr2l,c
 45826  007C52  0E02               	movlw	high _ARPEGGIO_RANDOM
 45827  007C54  20F4               	addwfc	prodh,w,c
 45828  007C56  6EDA               	movwf	fsr2h,c
 45829  007C58  5017               	movf	i2random_pitches_non_repeating@i,w,c
 45830  007C5A  0D01               	mullw	1
 45831  007C5C  0E8C               	movlw	low _ARPEGGIO_RANDOM
 45832  007C5E  24F3               	addwf	prodl,w,c
 45833  007C60  6EE1               	movwf	fsr1l,c
 45834  007C62  0E02               	movlw	high _ARPEGGIO_RANDOM
 45835  007C64  20F4               	addwfc	prodh,w,c
 45836  007C66  6EE2               	movwf	fsr1h,c
 45837  007C68  CFDF FFE7          	movff	indf2,indf1
 45838                           
 45839                           ;arpeggio.c: 260: ARPEGGIO_RANDOM[randomIndex] = temp;
 45840  007C6C  5016               	movf	i2random_pitches_non_repeating@randomIndex,w,c
 45841  007C6E  0D01               	mullw	1
 45842  007C70  0E8C               	movlw	low _ARPEGGIO_RANDOM
 45843  007C72  24F3               	addwf	prodl,w,c
 45844  007C74  6ED9               	movwf	fsr2l,c
 45845  007C76  0E02               	movlw	high _ARPEGGIO_RANDOM
 45846  007C78  20F4               	addwfc	prodh,w,c
 45847  007C7A  6EDA               	movwf	fsr2h,c
 45848  007C7C  C015  FFDF         	movff	i2random_pitches_non_repeating@temp,indf2
 45849  007C80  2A17               	incf	i2random_pitches_non_repeating@i,f,c
 45850  007C82                     i2l5277:
 45851  007C82  0100               	movlb	0	; () banked
 45852  007C84  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45853  007C86  5C17               	subwf	i2random_pitches_non_repeating@i,w,c
 45854  007C88  B0D8               	btfsc	status,0,c
 45855  007C8A  0012               	return	
 45856  007C8C  D7C6               	goto	i2l5278
 45857  007C8E                     __end_ofi2_random_pitches_non_repeating:
 45858                           	opt stack 0
 45859                           pclatu	equ	0xFFB
 45860                           pclath	equ	0xFFA
 45861                           tblptru	equ	0xFF8
 45862                           tblptrh	equ	0xFF7
 45863                           tblptrl	equ	0xFF6
 45864                           tablat	equ	0xFF5
 45865                           prodh	equ	0xFF4
 45866                           prodl	equ	0xFF3
 45867                           intcon	equ	0xFF2
 45868                           intcon2	equ	0xFF1
 45869                           postinc0	equ	0xFEE
 45870                           fsr0h	equ	0xFEA
 45871                           fsr0l	equ	0xFE9
 45872                           wreg	equ	0xFE8
 45873                           indf1	equ	0xFE7
 45874                           postinc1	equ	0xFE6
 45875                           postdec1	equ	0xFE5
 45876                           fsr1h	equ	0xFE2
 45877                           fsr1l	equ	0xFE1
 45878                           indf2	equ	0xFDF
 45879                           postinc2	equ	0xFDE
 45880                           postdec2	equ	0xFDD
 45881                           plusw2	equ	0xFDB
 45882                           fsr2h	equ	0xFDA
 45883                           fsr2l	equ	0xFD9
 45884                           status	equ	0xFD8
 45885                           
 45886 ;; *************** function i2_random_pitches *****************
 45887 ;; Defined at:
 45888 ;;		line 241 in file "arpeggio.c"
 45889 ;; Parameters:    Size  Location     Type
 45890 ;;		None
 45891 ;; Auto vars:     Size  Location     Type
 45892 ;;  random_pitch    1   21[COMRAM] unsigned char 
 45893 ;;  random_pitch    1   20[COMRAM] unsigned char 
 45894 ;; Return value:  Size  Location     Type
 45895 ;;                  1    wreg      void 
 45896 ;; Registers used:
 45897 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 45898 ;; Tracked objects:
 45899 ;;		On entry : 0/0
 45900 ;;		On exit  : 0/0
 45901 ;;		Unchanged: 0/0
 45902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 45903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45904 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45906 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45907 ;;Total ram usage:        2 bytes
 45908 ;; Hardware stack levels used:    1
 45909 ;; Hardware stack levels required when called:    2
 45910 ;; This function calls:
 45911 ;;		i2___awmod
 45912 ;;		i2_rand
 45913 ;; This function is called by:
 45914 ;;		_playArpeggio
 45915 ;; This function uses a non-reentrant model
 45916 ;;
 45917                           
 45918                           	psect	text142
 45919  008BCA                     __ptext142:
 45920                           	opt stack 0
 45921  008BCA                     i2_random_pitches:
 45922                           	opt stack 15
 45923                           
 45924                           ;arpeggio.c: 243: if(NUM_NOTES_PRESSED == 0){return;}
 45925                           
 45926                           ; BSR set to: 0
 45927                           ;incstack = 0
 45928  008BCA  0100               	movlb	0	; () banked
 45929  008BCC  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45930  008BCE  B4D8               	btfsc	status,2,c
 45931  008BD0  0012               	return	
 45932                           
 45933                           ; BSR set to: 0
 45934                           ;arpeggio.c: 245: for (unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 45935                           
 45936                           ; BSR set to: 0
 45937                           
 45938                           ; BSR set to: 0
 45939  008BD2  0E00               	movlw	0
 45940  008BD4  6E16               	movwf	i2random_pitches@i,c
 45941  008BD6  D020               	goto	i2l5270
 45942  008BD8                     
 45943                           ; BSR set to: 0
 45944                           ;arpeggio.c: 246: unsigned char random_array_index = rand() % (NUM_NOTES_PRESSED);
 45945                           
 45946                           ; BSR set to: 0
 45947  008BD8  ECBE  F046         	call	i2_rand	;wreg free
 45948  008BDC  C00D  F00F         	movff	?i2_rand,i2___awmod@dividend
 45949  008BE0  C00E  F010         	movff	?i2_rand+1,i2___awmod@dividend+1
 45950  008BE4  C0E5  F011         	movff	_NUM_NOTES_PRESSED,i2___awmod@divisor
 45951  008BE8  6A12               	clrf	i2___awmod@divisor+1,c
 45952  008BEA  ECD0  F042         	call	i2___awmod	;wreg free
 45953  008BEE  500F               	movf	?i2___awmod,w,c
 45954  008BF0  6E15               	movwf	i2random_pitches@random_array_index,c
 45955                           
 45956                           ;arpeggio.c: 247: ARPEGGIO_RANDOM[i] = ARPEGGIO[random_array_index];
 45957  008BF2  5015               	movf	i2random_pitches@random_array_index,w,c
 45958  008BF4  0D01               	mullw	1
 45959  008BF6  0E72               	movlw	low _ARPEGGIO
 45960  008BF8  24F3               	addwf	prodl,w,c
 45961  008BFA  6ED9               	movwf	fsr2l,c
 45962  008BFC  0E01               	movlw	high _ARPEGGIO
 45963  008BFE  20F4               	addwfc	prodh,w,c
 45964  008C00  6EDA               	movwf	fsr2h,c
 45965  008C02  5016               	movf	i2random_pitches@i,w,c
 45966  008C04  0D01               	mullw	1
 45967  008C06  0E8C               	movlw	low _ARPEGGIO_RANDOM
 45968  008C08  24F3               	addwf	prodl,w,c
 45969  008C0A  6EE1               	movwf	fsr1l,c
 45970  008C0C  0E02               	movlw	high _ARPEGGIO_RANDOM
 45971  008C0E  20F4               	addwfc	prodh,w,c
 45972  008C10  6EE2               	movwf	fsr1h,c
 45973  008C12  CFDF FFE7          	movff	indf2,indf1
 45974  008C16  2A16               	incf	i2random_pitches@i,f,c
 45975  008C18                     i2l5270:
 45976  008C18  0100               	movlb	0	; () banked
 45977  008C1A  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 45978  008C1C  5C16               	subwf	i2random_pitches@i,w,c
 45979  008C1E  B0D8               	btfsc	status,0,c
 45980  008C20  0012               	return	
 45981  008C22  D7DA               	goto	i2l5271
 45982  008C24                     __end_ofi2_random_pitches:
 45983                           	opt stack 0
 45984                           pclatu	equ	0xFFB
 45985                           pclath	equ	0xFFA
 45986                           tblptru	equ	0xFF8
 45987                           tblptrh	equ	0xFF7
 45988                           tblptrl	equ	0xFF6
 45989                           tablat	equ	0xFF5
 45990                           prodh	equ	0xFF4
 45991                           prodl	equ	0xFF3
 45992                           intcon	equ	0xFF2
 45993                           intcon2	equ	0xFF1
 45994                           postinc0	equ	0xFEE
 45995                           fsr0h	equ	0xFEA
 45996                           fsr0l	equ	0xFE9
 45997                           wreg	equ	0xFE8
 45998                           indf1	equ	0xFE7
 45999                           postinc1	equ	0xFE6
 46000                           postdec1	equ	0xFE5
 46001                           fsr1h	equ	0xFE2
 46002                           fsr1l	equ	0xFE1
 46003                           indf2	equ	0xFDF
 46004                           postinc2	equ	0xFDE
 46005                           postdec2	equ	0xFDD
 46006                           plusw2	equ	0xFDB
 46007                           fsr2h	equ	0xFDA
 46008                           fsr2l	equ	0xFD9
 46009                           status	equ	0xFD8
 46010                           
 46011 ;; *************** function i2_rand *****************
 46012 ;; Defined at:
 46013 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 46014 ;; Parameters:    Size  Location     Type
 46015 ;;		None
 46016 ;; Auto vars:     Size  Location     Type
 46017 ;;		None
 46018 ;; Return value:  Size  Location     Type
 46019 ;;                  2   12[COMRAM] int 
 46020 ;; Registers used:
 46021 ;;		wreg, status,2, status,0, cstack
 46022 ;; Tracked objects:
 46023 ;;		On entry : 0/0
 46024 ;;		On exit  : 0/0
 46025 ;;		Unchanged: 0/0
 46026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46027 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46030 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46031 ;;Total ram usage:        2 bytes
 46032 ;; Hardware stack levels used:    1
 46033 ;; Hardware stack levels required when called:    1
 46034 ;; This function calls:
 46035 ;;		i2___lmul
 46036 ;; This function is called by:
 46037 ;;		_playArpeggio
 46038 ;;		i2_random_pitches
 46039 ;;		i2_random_pitches_non_repeating
 46040 ;; This function uses a non-reentrant model
 46041 ;;
 46042                           
 46043                           	psect	text143
 46044  008D7C                     __ptext143:
 46045                           	opt stack 0
 46046  008D7C                     i2_rand:
 46047                           	opt stack 15
 46048                           
 46049                           ; BSR set to: 0
 46050                           ;incstack = 0
 46051  008D7C  C1E7  F001         	movff	_randx,i2___lmul@multiplier
 46052  008D80  C1E8  F002         	movff	_randx+1,i2___lmul@multiplier+1
 46053  008D84  C1E9  F003         	movff	_randx+2,i2___lmul@multiplier+2
 46054  008D88  C1EA  F004         	movff	_randx+3,i2___lmul@multiplier+3
 46055  008D8C  0E6D               	movlw	109
 46056  008D8E  6E05               	movwf	i2___lmul@multiplicand,c
 46057  008D90  0E4E               	movlw	78
 46058  008D92  6E06               	movwf	i2___lmul@multiplicand+1,c
 46059  008D94  0EC6               	movlw	198
 46060  008D96  6E07               	movwf	i2___lmul@multiplicand+2,c
 46061  008D98  0E41               	movlw	65
 46062  008D9A  6E08               	movwf	i2___lmul@multiplicand+3,c
 46063  008D9C  EC69  F046         	call	i2___lmul	;wreg free
 46064  008DA0  C001  F1E7         	movff	?i2___lmul,_randx
 46065  008DA4  C002  F1E8         	movff	?i2___lmul+1,_randx+1
 46066  008DA8  C003  F1E9         	movff	?i2___lmul+2,_randx+2
 46067  008DAC  C004  F1EA         	movff	?i2___lmul+3,_randx+3
 46068  008DB0  0E39               	movlw	57
 46069  008DB2  0101               	movlb	1	; () banked
 46070  008DB4  27E7               	addwf	_randx& (0+255),f,b
 46071  008DB6  0E30               	movlw	48
 46072  008DB8  23E8               	addwfc	(_randx+1)& (0+255),f,b
 46073  008DBA  0E00               	movlw	0
 46074  008DBC  23E9               	addwfc	(_randx+2)& (0+255),f,b
 46075  008DBE  0E00               	movlw	0
 46076  008DC0  23EA               	addwfc	(_randx+3)& (0+255),f,b
 46077                           
 46078                           ; BSR set to: 1
 46079  008DC2  0EFF               	movlw	255
 46080  008DC4  15E9               	andwf	(_randx+2)& (0+255),w,b
 46081  008DC6  6E0D               	movwf	?i2_rand,c
 46082  008DC8  0E7F               	movlw	127
 46083  008DCA  15EA               	andwf	(_randx+3)& (0+255),w,b
 46084  008DCC  6E0E               	movwf	?i2_rand+1,c
 46085  008DCE  0012               	return	
 46086  008DD0                     __end_ofi2_rand:
 46087                           	opt stack 0
 46088                           pclatu	equ	0xFFB
 46089                           pclath	equ	0xFFA
 46090                           tblptru	equ	0xFF8
 46091                           tblptrh	equ	0xFF7
 46092                           tblptrl	equ	0xFF6
 46093                           tablat	equ	0xFF5
 46094                           prodh	equ	0xFF4
 46095                           prodl	equ	0xFF3
 46096                           intcon	equ	0xFF2
 46097                           intcon2	equ	0xFF1
 46098                           postinc0	equ	0xFEE
 46099                           fsr0h	equ	0xFEA
 46100                           fsr0l	equ	0xFE9
 46101                           wreg	equ	0xFE8
 46102                           indf1	equ	0xFE7
 46103                           postinc1	equ	0xFE6
 46104                           postdec1	equ	0xFE5
 46105                           fsr1h	equ	0xFE2
 46106                           fsr1l	equ	0xFE1
 46107                           indf2	equ	0xFDF
 46108                           postinc2	equ	0xFDE
 46109                           postdec2	equ	0xFDD
 46110                           plusw2	equ	0xFDB
 46111                           fsr2h	equ	0xFDA
 46112                           fsr2l	equ	0xFD9
 46113                           status	equ	0xFD8
 46114                           
 46115 ;; *************** function i2___lmul *****************
 46116 ;; Defined at:
 46117 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 46118 ;; Parameters:    Size  Location     Type
 46119 ;;  multiplier      4    0[COMRAM] unsigned long 
 46120 ;;  multiplicand    4    4[COMRAM] unsigned long 
 46121 ;; Auto vars:     Size  Location     Type
 46122 ;;  __lmul          4    8[COMRAM] unsigned long 
 46123 ;; Return value:  Size  Location     Type
 46124 ;;                  4    0[COMRAM] unsigned long 
 46125 ;; Registers used:
 46126 ;;		wreg, status,2, status,0
 46127 ;; Tracked objects:
 46128 ;;		On entry : 0/0
 46129 ;;		On exit  : 0/0
 46130 ;;		Unchanged: 0/0
 46131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46132 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46133 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46135 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46136 ;;Total ram usage:       12 bytes
 46137 ;; Hardware stack levels used:    1
 46138 ;; This function calls:
 46139 ;;		Nothing
 46140 ;; This function is called by:
 46141 ;;		i2_rand
 46142 ;; This function uses a non-reentrant model
 46143 ;;
 46144                           
 46145                           	psect	text144
 46146  008CD2                     __ptext144:
 46147                           	opt stack 0
 46148  008CD2                     i2___lmul:
 46149                           	opt stack 15
 46150                           
 46151                           ; BSR set to: 1
 46152                           ;incstack = 0
 46153  008CD2  0E00               	movlw	0
 46154  008CD4  6E09               	movwf	i2___lmul@product,c
 46155  008CD6  0E00               	movlw	0
 46156  008CD8  6E0A               	movwf	i2___lmul@product+1,c
 46157  008CDA  0E00               	movlw	0
 46158  008CDC  6E0B               	movwf	i2___lmul@product+2,c
 46159  008CDE  0E00               	movlw	0
 46160  008CE0  6E0C               	movwf	i2___lmul@product+3,c
 46161  008CE2  A001               	btfss	i2___lmul@multiplier,0,c
 46162  008CE4  D008               	goto	i2l5432
 46163  008CE6  5005               	movf	i2___lmul@multiplicand,w,c
 46164  008CE8  2609               	addwf	i2___lmul@product,f,c
 46165  008CEA  5006               	movf	i2___lmul@multiplicand+1,w,c
 46166  008CEC  220A               	addwfc	i2___lmul@product+1,f,c
 46167  008CEE  5007               	movf	i2___lmul@multiplicand+2,w,c
 46168  008CF0  220B               	addwfc	i2___lmul@product+2,f,c
 46169  008CF2  5008               	movf	i2___lmul@multiplicand+3,w,c
 46170  008CF4  220C               	addwfc	i2___lmul@product+3,f,c
 46171  008CF6                     i2l5432:
 46172  008CF6  90D8               	bcf	status,0,c
 46173  008CF8  3605               	rlcf	i2___lmul@multiplicand,f,c
 46174  008CFA  3606               	rlcf	i2___lmul@multiplicand+1,f,c
 46175  008CFC  3607               	rlcf	i2___lmul@multiplicand+2,f,c
 46176  008CFE  3608               	rlcf	i2___lmul@multiplicand+3,f,c
 46177  008D00  90D8               	bcf	status,0,c
 46178  008D02  3204               	rrcf	i2___lmul@multiplier+3,f,c
 46179  008D04  3203               	rrcf	i2___lmul@multiplier+2,f,c
 46180  008D06  3202               	rrcf	i2___lmul@multiplier+1,f,c
 46181  008D08  3201               	rrcf	i2___lmul@multiplier,f,c
 46182  008D0A  5001               	movf	i2___lmul@multiplier,w,c
 46183  008D0C  1002               	iorwf	i2___lmul@multiplier+1,w,c
 46184  008D0E  1003               	iorwf	i2___lmul@multiplier+2,w,c
 46185  008D10  1004               	iorwf	i2___lmul@multiplier+3,w,c
 46186  008D12  A4D8               	btfss	status,2,c
 46187  008D14  D7E6               	goto	i2l5431
 46188  008D16  C009  F001         	movff	i2___lmul@product,?i2___lmul
 46189  008D1A  C00A  F002         	movff	i2___lmul@product+1,?i2___lmul+1
 46190  008D1E  C00B  F003         	movff	i2___lmul@product+2,?i2___lmul+2
 46191  008D22  C00C  F004         	movff	i2___lmul@product+3,?i2___lmul+3
 46192  008D26  0012               	return		;funcret
 46193  008D28                     __end_ofi2___lmul:
 46194                           	opt stack 0
 46195                           pclatu	equ	0xFFB
 46196                           pclath	equ	0xFFA
 46197                           tblptru	equ	0xFF8
 46198                           tblptrh	equ	0xFF7
 46199                           tblptrl	equ	0xFF6
 46200                           tablat	equ	0xFF5
 46201                           prodh	equ	0xFF4
 46202                           prodl	equ	0xFF3
 46203                           intcon	equ	0xFF2
 46204                           intcon2	equ	0xFF1
 46205                           postinc0	equ	0xFEE
 46206                           fsr0h	equ	0xFEA
 46207                           fsr0l	equ	0xFE9
 46208                           wreg	equ	0xFE8
 46209                           indf1	equ	0xFE7
 46210                           postinc1	equ	0xFE6
 46211                           postdec1	equ	0xFE5
 46212                           fsr1h	equ	0xFE2
 46213                           fsr1l	equ	0xFE1
 46214                           indf2	equ	0xFDF
 46215                           postinc2	equ	0xFDE
 46216                           postdec2	equ	0xFDD
 46217                           plusw2	equ	0xFDB
 46218                           fsr2h	equ	0xFDA
 46219                           fsr2l	equ	0xFD9
 46220                           status	equ	0xFD8
 46221                           
 46222 ;; *************** function i2_noteOn *****************
 46223 ;; Defined at:
 46224 ;;		line 83 in file "midi.c"
 46225 ;; Parameters:    Size  Location     Type
 46226 ;;  channel         1    wreg     unsigned char 
 46227 ;;  pitch           1   14[COMRAM] unsigned char 
 46228 ;;  velocity        1   15[COMRAM] unsigned char 
 46229 ;; Auto vars:     Size  Location     Type
 46230 ;;  channel         1   16[COMRAM] unsigned char 
 46231 ;; Return value:  Size  Location     Type
 46232 ;;                  1    wreg      void 
 46233 ;; Registers used:
 46234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 46235 ;; Tracked objects:
 46236 ;;		On entry : 0/0
 46237 ;;		On exit  : 0/0
 46238 ;;		Unchanged: 0/0
 46239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46240 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46241 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46243 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46244 ;;Total ram usage:        3 bytes
 46245 ;; Hardware stack levels used:    1
 46246 ;; Hardware stack levels required when called:    2
 46247 ;; This function calls:
 46248 ;;		i2_noteOff
 46249 ;;		i2_sendOut
 46250 ;;		i2_sendUSB
 46251 ;; This function is called by:
 46252 ;;		_playArpeggio
 46253 ;; This function uses a non-reentrant model
 46254 ;;
 46255                           
 46256                           	psect	text145
 46257  008B14                     __ptext145:
 46258                           	opt stack 0
 46259  008B14                     i2_noteOn:
 46260                           	opt stack 15
 46261                           
 46262                           ;incstack = 0
 46263                           ;i2noteOn@channel stored from wreg
 46264  008B14  6E11               	movwf	i2noteOn@channel,c
 46265                           
 46266                           ;midi.c: 85: noteNumber = pitch + semitone + ((octave + 1) * 12);
 46267  008B16  0100               	movlb	0	; () banked
 46268  008B18  29FC               	incf	_octave& (0+255),w,b
 46269  008B1A  0D0C               	mullw	12
 46270  008B1C  50F3               	movf	prodl,w,c
 46271  008B1E  240F               	addwf	i2noteOn@pitch,w,c
 46272  008B20  25F3               	addwf	_semitone& (0+255),w,b
 46273  008B22  6FF4               	movwf	_noteNumber& (0+255),b
 46274                           
 46275                           ; BSR set to: 0
 46276                           ;midi.c: 86: statusByte = channel | note_on;
 46277  008B24  5011               	movf	i2noteOn@channel,w,c
 46278  008B26  0990               	iorlw	144
 46279  008B28  6FF5               	movwf	_statusByte& (0+255),b
 46280                           
 46281                           ; BSR set to: 0
 46282                           ;midi.c: 89: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 46283  008B2A  5010               	movf	i2noteOn@velocity,w,c
 46284  008B2C  A4D8               	btfss	status,2,c
 46285  008B2E  D008               	goto	i2l451
 46286                           
 46287                           ; BSR set to: 0
 46288  008B30  C00F  F00C         	movff	i2noteOn@pitch,i2noteOff@pitch
 46289  008B34  C010  F00D         	movff	i2noteOn@velocity,i2noteOff@velocity
 46290  008B38  5011               	movf	i2noteOn@channel,w,c
 46291  008B3A  EC9D  F048         	call	i2_noteOff
 46292  008B3E  0012               	return	
 46293  008B40                     i2l451:
 46294                           
 46295                           ;midi.c: 92: sendUSB(statusByte, noteNumber, velocity);
 46296  008B40  C0F4  F001         	movff	_noteNumber,i2sendUSB@message2
 46297  008B44  C010  F002         	movff	i2noteOn@velocity,i2sendUSB@message3
 46298  008B48  0100               	movlb	0	; () banked
 46299  008B4A  51F5               	movf	_statusByte& (0+255),w,b
 46300  008B4C  EC7E  F03A         	call	i2_sendUSB
 46301                           
 46302                           ;midi.c: 95: if(velocity > 0) {
 46303  008B50  5010               	movf	i2noteOn@velocity,w,c
 46304  008B52  B4D8               	btfsc	status,2,c
 46305  008B54  D00B               	goto	i2l453
 46306                           
 46307                           ;midi.c: 96: sendOut(statusByte);
 46308  008B56  0100               	movlb	0	; () banked
 46309  008B58  51F5               	movf	_statusByte& (0+255),w,b
 46310  008B5A  EC98  F04A         	call	i2_sendOut
 46311                           
 46312                           ;midi.c: 97: sendOut(noteNumber);
 46313  008B5E  0100               	movlb	0	; () banked
 46314  008B60  51F4               	movf	_noteNumber& (0+255),w,b
 46315  008B62  EC98  F04A         	call	i2_sendOut
 46316                           
 46317                           ;midi.c: 98: sendOut(velocity);
 46318  008B66  5010               	movf	i2noteOn@velocity,w,c
 46319  008B68  EC98  F04A         	call	i2_sendOut
 46320  008B6C                     i2l453:
 46321                           
 46322                           ;midi.c: 99: }
 46323                           ;midi.c: 101: note_off_was_sent = 0;
 46324  008B6C  9033               	bcf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 46325  008B6E  0012               	return		;funcret
 46326  008B70                     __end_ofi2_noteOn:
 46327                           	opt stack 0
 46328                           pclatu	equ	0xFFB
 46329                           pclath	equ	0xFFA
 46330                           tblptru	equ	0xFF8
 46331                           tblptrh	equ	0xFF7
 46332                           tblptrl	equ	0xFF6
 46333                           tablat	equ	0xFF5
 46334                           prodh	equ	0xFF4
 46335                           prodl	equ	0xFF3
 46336                           intcon	equ	0xFF2
 46337                           intcon2	equ	0xFF1
 46338                           postinc0	equ	0xFEE
 46339                           fsr0h	equ	0xFEA
 46340                           fsr0l	equ	0xFE9
 46341                           wreg	equ	0xFE8
 46342                           indf1	equ	0xFE7
 46343                           postinc1	equ	0xFE6
 46344                           postdec1	equ	0xFE5
 46345                           fsr1h	equ	0xFE2
 46346                           fsr1l	equ	0xFE1
 46347                           indf2	equ	0xFDF
 46348                           postinc2	equ	0xFDE
 46349                           postdec2	equ	0xFDD
 46350                           plusw2	equ	0xFDB
 46351                           fsr2h	equ	0xFDA
 46352                           fsr2l	equ	0xFD9
 46353                           status	equ	0xFD8
 46354                           
 46355 ;; *************** function i2_noteOff *****************
 46356 ;; Defined at:
 46357 ;;		line 66 in file "midi.c"
 46358 ;; Parameters:    Size  Location     Type
 46359 ;;  channel         1    wreg     unsigned char 
 46360 ;;  pitch           1   11[COMRAM] unsigned char 
 46361 ;;  velocity        1   12[COMRAM] unsigned char 
 46362 ;; Auto vars:     Size  Location     Type
 46363 ;;  channel         1   13[COMRAM] unsigned char 
 46364 ;; Return value:  Size  Location     Type
 46365 ;;                  1    wreg      void 
 46366 ;; Registers used:
 46367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 46368 ;; Tracked objects:
 46369 ;;		On entry : 0/0
 46370 ;;		On exit  : 0/0
 46371 ;;		Unchanged: 0/0
 46372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46373 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46374 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46376 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46377 ;;Total ram usage:        3 bytes
 46378 ;; Hardware stack levels used:    1
 46379 ;; Hardware stack levels required when called:    1
 46380 ;; This function calls:
 46381 ;;		i2_sendOut
 46382 ;;		i2_sendUSB
 46383 ;; This function is called by:
 46384 ;;		_playArpeggio
 46385 ;;		i2_noteOn
 46386 ;; This function uses a non-reentrant model
 46387 ;;
 46388                           
 46389                           	psect	text146
 46390  00913A                     __ptext146:
 46391                           	opt stack 0
 46392  00913A                     i2_noteOff:
 46393                           	opt stack 15
 46394                           
 46395                           ;incstack = 0
 46396                           ;i2noteOff@channel stored from wreg
 46397  00913A  6E0E               	movwf	i2noteOff@channel,c
 46398                           
 46399                           ;midi.c: 68: noteNumber = pitch + semitone + ((octave + 1)* 12);
 46400  00913C  0100               	movlb	0	; () banked
 46401  00913E  29FC               	incf	_octave& (0+255),w,b
 46402  009140  0D0C               	mullw	12
 46403  009142  50F3               	movf	prodl,w,c
 46404  009144  240C               	addwf	i2noteOff@pitch,w,c
 46405  009146  25F3               	addwf	_semitone& (0+255),w,b
 46406  009148  6FF4               	movwf	_noteNumber& (0+255),b
 46407                           
 46408                           ; BSR set to: 0
 46409                           ;midi.c: 69: statusByte = channel | note_off;
 46410  00914A  500E               	movf	i2noteOff@channel,w,c
 46411  00914C  0980               	iorlw	128
 46412  00914E  6FF5               	movwf	_statusByte& (0+255),b
 46413                           
 46414                           ; BSR set to: 0
 46415                           ;midi.c: 73: sendUSB(statusByte, noteNumber, velocity);
 46416  009150  C0F4  F001         	movff	_noteNumber,i2sendUSB@message2
 46417  009154  C00D  F002         	movff	i2noteOff@velocity,i2sendUSB@message3
 46418  009158  51F5               	movf	_statusByte& (0+255),w,b
 46419  00915A  EC7E  F03A         	call	i2_sendUSB
 46420                           
 46421                           ;midi.c: 76: sendOut(statusByte);
 46422  00915E  0100               	movlb	0	; () banked
 46423  009160  51F5               	movf	_statusByte& (0+255),w,b
 46424  009162  EC98  F04A         	call	i2_sendOut
 46425                           
 46426                           ;midi.c: 77: sendOut(noteNumber);
 46427  009166  0100               	movlb	0	; () banked
 46428  009168  51F4               	movf	_noteNumber& (0+255),w,b
 46429  00916A  EC98  F04A         	call	i2_sendOut
 46430                           
 46431                           ;midi.c: 78: sendOut(velocity);
 46432  00916E  500D               	movf	i2noteOff@velocity,w,c
 46433  009170  EC98  F04A         	call	i2_sendOut
 46434  009174  0012               	return		;funcret
 46435  009176                     __end_ofi2_noteOff:
 46436                           	opt stack 0
 46437                           pclatu	equ	0xFFB
 46438                           pclath	equ	0xFFA
 46439                           tblptru	equ	0xFF8
 46440                           tblptrh	equ	0xFF7
 46441                           tblptrl	equ	0xFF6
 46442                           tablat	equ	0xFF5
 46443                           prodh	equ	0xFF4
 46444                           prodl	equ	0xFF3
 46445                           intcon	equ	0xFF2
 46446                           intcon2	equ	0xFF1
 46447                           postinc0	equ	0xFEE
 46448                           fsr0h	equ	0xFEA
 46449                           fsr0l	equ	0xFE9
 46450                           wreg	equ	0xFE8
 46451                           indf1	equ	0xFE7
 46452                           postinc1	equ	0xFE6
 46453                           postdec1	equ	0xFE5
 46454                           fsr1h	equ	0xFE2
 46455                           fsr1l	equ	0xFE1
 46456                           indf2	equ	0xFDF
 46457                           postinc2	equ	0xFDE
 46458                           postdec2	equ	0xFDD
 46459                           plusw2	equ	0xFDB
 46460                           fsr2h	equ	0xFDA
 46461                           fsr2l	equ	0xFD9
 46462                           status	equ	0xFD8
 46463                           
 46464 ;; *************** function i2_sendUSB *****************
 46465 ;; Defined at:
 46466 ;;		line 32 in file "midi.c"
 46467 ;; Parameters:    Size  Location     Type
 46468 ;;  message1        1    wreg     unsigned char 
 46469 ;;  message2        1    0[COMRAM] unsigned char 
 46470 ;;  message3        1    1[COMRAM] unsigned char 
 46471 ;; Auto vars:     Size  Location     Type
 46472 ;;  message1        1    8[COMRAM] unsigned char 
 46473 ;;  sendUSB         3    5[COMRAM] unsigned char [3]
 46474 ;;  sendUSB         1   10[COMRAM] unsigned char 
 46475 ;;  sendUSB         1    9[COMRAM] unsigned char 
 46476 ;; Return value:  Size  Location     Type
 46477 ;;                  1    wreg      void 
 46478 ;; Registers used:
 46479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 46480 ;; Tracked objects:
 46481 ;;		On entry : 0/0
 46482 ;;		On exit  : 0/0
 46483 ;;		Unchanged: 0/0
 46484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46485 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46486 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46487 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46488 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46489 ;;Total ram usage:       11 bytes
 46490 ;; Hardware stack levels used:    1
 46491 ;; This function calls:
 46492 ;;		Nothing
 46493 ;; This function is called by:
 46494 ;;		i2_noteOff
 46495 ;;		i2_noteOn
 46496 ;; This function uses a non-reentrant model
 46497 ;;
 46498                           
 46499                           	psect	text147
 46500  0074FC                     __ptext147:
 46501                           	opt stack 0
 46502  0074FC                     i2_sendUSB:
 46503                           	opt stack 16
 46504                           
 46505                           ;incstack = 0
 46506                           ;i2sendUSB@message1 stored from wreg
 46507  0074FC  6E09               	movwf	i2sendUSB@message1,c
 46508                           
 46509                           ;midi.c: 34: unsigned char midiMessage[3];
 46510                           ;midi.c: 36: midiMessage[0]=message1;
 46511  0074FE  C009  F006         	movff	i2sendUSB@message1,i2sendUSB@midiMessage
 46512                           
 46513                           ;midi.c: 37: midiMessage[1]=message2;
 46514  007502  C001  F007         	movff	i2sendUSB@message2,i2sendUSB@midiMessage+1
 46515                           
 46516                           ;midi.c: 38: midiMessage[2]=message3;
 46517  007506  C002  F008         	movff	i2sendUSB@message3,i2sendUSB@midiMessage+2
 46518                           
 46519                           ;midi.c: 40: RA5 = 0;
 46520  00750A  9A80               	bcf	3968,5,c	;volatile
 46521                           
 46522                           ;midi.c: 41: RB2 = 1;
 46523  00750C  8481               	bsf	3969,2,c	;volatile
 46524                           
 46525                           ;midi.c: 42: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46526  00750E  0E53               	movlw	83
 46527  007510                     i2u4495_47:
 46528  007510  2EE8               	decfsz	wreg,f,c
 46529  007512  D7FE               	bra	i2u4495_47
 46530  007514  F000               	nop	
 46531                           
 46532                           ;midi.c: 44: for(unsigned char i=0;i<3;i++){
 46533  007516  0E00               	movlw	0
 46534  007518  6E0A               	movwf	i2sendUSB@i,c
 46535  00751A                     i2l19281:
 46536  00751A  0E02               	movlw	2
 46537  00751C  640A               	cpfsgt	i2sendUSB@i,c
 46538  00751E  D001               	goto	i2l441
 46539  007520  D034               	goto	i2u2974_40
 46540  007522                     i2l441:
 46541                           
 46542                           ;midi.c: 45: for(unsigned char ii=0;ii<8;ii++){
 46543  007522  0E00               	movlw	0
 46544  007524  6E0B               	movwf	i2sendUSB@ii,c
 46545  007526                     i2l19287:
 46546  007526  0E07               	movlw	7
 46547  007528  640B               	cpfsgt	i2sendUSB@ii,c
 46548  00752A  D001               	goto	i2l443
 46549  00752C  D02C               	goto	i2u2973_40
 46550  00752E                     i2l443:
 46551                           
 46552                           ;midi.c: 48: RE2 = !!(midiMessage[i] & (1 << ii));
 46553  00752E  500A               	movf	i2sendUSB@i,w,c
 46554  007530  0D01               	mullw	1
 46555  007532  0E06               	movlw	low i2sendUSB@midiMessage
 46556  007534  24F3               	addwf	prodl,w,c
 46557  007536  6ED9               	movwf	fsr2l,c
 46558  007538  0E00               	movlw	high i2sendUSB@midiMessage
 46559  00753A  20F4               	addwfc	prodh,w,c
 46560  00753C  6EDA               	movwf	fsr2h,c
 46561  00753E  50DF               	movf	indf2,w,c
 46562  007540  6E03               	movwf	??i2_sendUSB& (0+255),c
 46563  007542  C00B  F004         	movff	i2sendUSB@ii,??i2_sendUSB+1
 46564  007546  0E01               	movlw	1
 46565  007548  6E05               	movwf	(??i2_sendUSB+2)& (0+255),c
 46566  00754A  2A04               	incf	??i2_sendUSB+1,f,c
 46567  00754C  D002               	goto	i2u2970_44
 46568  00754E                     i2u2970_45:
 46569  00754E  90D8               	bcf	status,0,c
 46570  007550  3605               	rlcf	??i2_sendUSB+2,f,c
 46571  007552                     i2u2970_44:
 46572  007552  2E04               	decfsz	??i2_sendUSB+1,f,c
 46573  007554  D7FC               	goto	i2u2970_45
 46574  007556  5005               	movf	??i2_sendUSB+2,w,c
 46575  007558  1403               	andwf	??i2_sendUSB,w,c
 46576  00755A  0900               	iorlw	0
 46577  00755C  B4D8               	btfsc	status,2,c
 46578  00755E  D002               	goto	i2u2971_40
 46579  007560  8484               	bsf	3972,2,c	;volatile
 46580  007562  D001               	goto	i2u2972_45
 46581  007564                     i2u2971_40:
 46582  007564  9484               	bcf	3972,2,c	;volatile
 46583  007566                     i2u2972_45:
 46584                           
 46585                           ;midi.c: 50: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46586  007566  0E53               	movlw	83
 46587  007568                     i2u4496_47:
 46588  007568  2EE8               	decfsz	wreg,f,c
 46589  00756A  D7FE               	bra	i2u4496_47
 46590  00756C  F000               	nop	
 46591                           
 46592                           ;midi.c: 52: RA5 = 1;
 46593  00756E  8A80               	bsf	3968,5,c	;volatile
 46594                           
 46595                           ;midi.c: 53: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46596  007570  0E53               	movlw	83
 46597  007572                     i2u4497_47:
 46598  007572  2EE8               	decfsz	wreg,f,c
 46599  007574  D7FE               	bra	i2u4497_47
 46600  007576  F000               	nop	
 46601                           
 46602                           ;midi.c: 55: RA5 = 0;
 46603  007578  9A80               	bcf	3968,5,c	;volatile
 46604                           
 46605                           ;midi.c: 56: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46606  00757A  0E53               	movlw	83
 46607  00757C                     i2u4498_47:
 46608  00757C  2EE8               	decfsz	wreg,f,c
 46609  00757E  D7FE               	bra	i2u4498_47
 46610  007580  F000               	nop	
 46611  007582  2A0B               	incf	i2sendUSB@ii,f,c
 46612  007584  D7D0               	goto	i2l19287
 46613  007586                     i2u2973_40:
 46614  007586  2A0A               	incf	i2sendUSB@i,f,c
 46615  007588  D7C8               	goto	i2l19281
 46616  00758A                     i2u2974_40:
 46617                           
 46618                           ;midi.c: 57: }
 46619                           ;midi.c: 58: }
 46620                           ;midi.c: 60: RB2 = 0;
 46621  00758A  9481               	bcf	3969,2,c	;volatile
 46622                           
 46623                           ;midi.c: 61: _delay((unsigned long)((50)*(20000000/4000000.0)));
 46624  00758C  0E53               	movlw	83
 46625  00758E                     i2u4499_47:
 46626  00758E  2EE8               	decfsz	wreg,f,c
 46627  007590  D7FE               	bra	i2u4499_47
 46628  007592  F000               	nop	
 46629  007594  0012               	return		;funcret
 46630  007596                     __end_ofi2_sendUSB:
 46631                           	opt stack 0
 46632                           pclatu	equ	0xFFB
 46633                           pclath	equ	0xFFA
 46634                           tblptru	equ	0xFF8
 46635                           tblptrh	equ	0xFF7
 46636                           tblptrl	equ	0xFF6
 46637                           tablat	equ	0xFF5
 46638                           prodh	equ	0xFF4
 46639                           prodl	equ	0xFF3
 46640                           intcon	equ	0xFF2
 46641                           intcon2	equ	0xFF1
 46642                           postinc0	equ	0xFEE
 46643                           fsr0h	equ	0xFEA
 46644                           fsr0l	equ	0xFE9
 46645                           wreg	equ	0xFE8
 46646                           indf1	equ	0xFE7
 46647                           postinc1	equ	0xFE6
 46648                           postdec1	equ	0xFE5
 46649                           fsr1h	equ	0xFE2
 46650                           fsr1l	equ	0xFE1
 46651                           indf2	equ	0xFDF
 46652                           postinc2	equ	0xFDE
 46653                           postdec2	equ	0xFDD
 46654                           plusw2	equ	0xFDB
 46655                           fsr2h	equ	0xFDA
 46656                           fsr2l	equ	0xFD9
 46657                           status	equ	0xFD8
 46658                           
 46659 ;; *************** function i2_sendOut *****************
 46660 ;; Defined at:
 46661 ;;		line 22 in file "midi.c"
 46662 ;; Parameters:    Size  Location     Type
 46663 ;;  a               1    wreg     unsigned char 
 46664 ;; Auto vars:     Size  Location     Type
 46665 ;;  a               1    0[COMRAM] unsigned char 
 46666 ;; Return value:  Size  Location     Type
 46667 ;;                  1    wreg      void 
 46668 ;; Registers used:
 46669 ;;		wreg, status,2, cstack
 46670 ;; Tracked objects:
 46671 ;;		On entry : 0/0
 46672 ;;		On exit  : 0/0
 46673 ;;		Unchanged: 0/0
 46674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46676 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46678 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46679 ;;Total ram usage:        1 bytes
 46680 ;; Hardware stack levels used:    1
 46681 ;; This function calls:
 46682 ;;		Nothing
 46683 ;; This function is called by:
 46684 ;;		i2_noteOff
 46685 ;;		i2_noteOn
 46686 ;; This function uses a non-reentrant model
 46687 ;;
 46688                           
 46689                           	psect	text148
 46690  009530                     __ptext148:
 46691                           	opt stack 0
 46692  009530                     i2_sendOut:
 46693                           	opt stack 16
 46694                           
 46695                           ;incstack = 0
 46696                           ;i2sendOut@a stored from wreg
 46697  009530  6E01               	movwf	i2sendOut@a,c
 46698                           
 46699                           ;midi.c: 24: TXREG = a;
 46700  009532  C001  FFAD         	movff	i2sendOut@a,4013	;volatile
 46701  009536  A89E               	btfss	3998,4,c	;volatile
 46702  009538  D7FE               	goto	i2l436
 46703                           
 46704                           ;midi.c: 26: TXIF = 0;
 46705  00953A  989E               	bcf	3998,4,c	;volatile
 46706                           
 46707                           ;midi.c: 27: _delay((unsigned long)((320)*(20000000/4000000.0)));
 46708  00953C  0EE4               	movlw	228
 46709  00953E                     i2u4500_47:
 46710  00953E  D000               	nop2	
 46711  009540  D000               	nop2	
 46712  009542  2EE8               	decfsz	wreg,f,c
 46713  009544  D7FC               	bra	i2u4500_47
 46714  009546  D000               	nop2	
 46715  009548  D000               	nop2	
 46716  00954A  0012               	return		;funcret
 46717  00954C                     __end_ofi2_sendOut:
 46718                           	opt stack 0
 46719                           pclatu	equ	0xFFB
 46720                           pclath	equ	0xFFA
 46721                           tblptru	equ	0xFF8
 46722                           tblptrh	equ	0xFF7
 46723                           tblptrl	equ	0xFF6
 46724                           tablat	equ	0xFF5
 46725                           prodh	equ	0xFF4
 46726                           prodl	equ	0xFF3
 46727                           intcon	equ	0xFF2
 46728                           intcon2	equ	0xFF1
 46729                           postinc0	equ	0xFEE
 46730                           fsr0h	equ	0xFEA
 46731                           fsr0l	equ	0xFE9
 46732                           wreg	equ	0xFE8
 46733                           indf1	equ	0xFE7
 46734                           postinc1	equ	0xFE6
 46735                           postdec1	equ	0xFE5
 46736                           fsr1h	equ	0xFE2
 46737                           fsr1l	equ	0xFE1
 46738                           indf2	equ	0xFDF
 46739                           postinc2	equ	0xFDE
 46740                           postdec2	equ	0xFDD
 46741                           plusw2	equ	0xFDB
 46742                           fsr2h	equ	0xFDA
 46743                           fsr2l	equ	0xFD9
 46744                           status	equ	0xFD8
 46745                           
 46746 ;; *************** function _sort_pitches *****************
 46747 ;; Defined at:
 46748 ;;		line 209 in file "arpeggio.c"
 46749 ;; Parameters:    Size  Location     Type
 46750 ;;		None
 46751 ;; Auto vars:     Size  Location     Type
 46752 ;;  j               1    3[COMRAM] unsigned char 
 46753 ;;  i               1    4[COMRAM] unsigned char 
 46754 ;;  a               1    2[COMRAM] unsigned char 
 46755 ;; Return value:  Size  Location     Type
 46756 ;;                  1    wreg      void 
 46757 ;; Registers used:
 46758 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 46759 ;; Tracked objects:
 46760 ;;		On entry : 0/0
 46761 ;;		On exit  : 0/0
 46762 ;;		Unchanged: 0/0
 46763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46765 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46766 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46767 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46768 ;;Total ram usage:        5 bytes
 46769 ;; Hardware stack levels used:    1
 46770 ;; This function calls:
 46771 ;;		Nothing
 46772 ;; This function is called by:
 46773 ;;		_playArpeggio
 46774 ;; This function uses a non-reentrant model
 46775 ;;
 46776                           
 46777                           	psect	text149
 46778  0062D4                     __ptext149:
 46779                           	opt stack 0
 46780  0062D4                     _sort_pitches:
 46781                           	opt stack 17
 46782                           
 46783                           ;arpeggio.c: 211: if(NUM_NOTES_PRESSED == 0){return;}
 46784                           
 46785                           ;incstack = 0
 46786  0062D4  0100               	movlb	0	; () banked
 46787  0062D6  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 46788  0062D8  B4D8               	btfsc	status,2,c
 46789  0062DA  0012               	return	
 46790                           
 46791                           ; BSR set to: 0
 46792                           ;arpeggio.c: 213: unsigned char a;
 46793                           ;arpeggio.c: 214: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; ++i){
 46794                           
 46795                           ; BSR set to: 0
 46796                           
 46797                           ; BSR set to: 0
 46798  0062DC  0E00               	movlw	0
 46799  0062DE  6E05               	movwf	sort_pitches@i,c
 46800  0062E0  D081               	goto	i2l5256
 46801  0062E2                     
 46802                           ; BSR set to: 0
 46803                           ;arpeggio.c: 215: for(unsigned char j = i + 1; j < NUM_NOTES_PRESSED; ++j){
 46804                           
 46805                           ; BSR set to: 0
 46806  0062E2  2805               	incf	sort_pitches@i,w,c
 46807  0062E4  6E04               	movwf	sort_pitches@j,c
 46808  0062E6  D079               	goto	i2l5258
 46809  0062E8                     i2l5259:
 46810                           
 46811                           ; BSR set to: 0
 46812                           ;arpeggio.c: 221: if(SORT_DIRECTION == 0) {
 46813  0062E8  B835               	btfsc	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46814  0062EA  D03A               	goto	i2l5261
 46815                           
 46816                           ; BSR set to: 0
 46817                           ;arpeggio.c: 222: if(ARPEGGIO_SORTED[i] > ARPEGGIO_SORTED[j]){
 46818  0062EC  5005               	movf	sort_pitches@i,w,c
 46819  0062EE  0D01               	mullw	1
 46820  0062F0  0E9C               	movlw	low _ARPEGGIO_SORTED
 46821  0062F2  24F3               	addwf	prodl,w,c
 46822  0062F4  6ED9               	movwf	fsr2l,c
 46823  0062F6  0E02               	movlw	high _ARPEGGIO_SORTED
 46824  0062F8  20F4               	addwfc	prodh,w,c
 46825  0062FA  6EDA               	movwf	fsr2h,c
 46826  0062FC  5004               	movf	sort_pitches@j,w,c
 46827  0062FE  0D01               	mullw	1
 46828  006300  0E9C               	movlw	low _ARPEGGIO_SORTED
 46829  006302  24F3               	addwf	prodl,w,c
 46830  006304  6EE1               	movwf	fsr1l,c
 46831  006306  0E02               	movlw	high _ARPEGGIO_SORTED
 46832  006308  20F4               	addwfc	prodh,w,c
 46833  00630A  6EE2               	movwf	fsr1h,c
 46834  00630C  50DE               	movf	postinc2,w,c
 46835  00630E  5CE6               	subwf	postinc1,w,c
 46836  006310  B0D8               	btfsc	status,0,c
 46837  006312  D026               	goto	i2l5261
 46838                           
 46839                           ; BSR set to: 0
 46840                           ;arpeggio.c: 223: a = ARPEGGIO_SORTED[i];
 46841  006314  5005               	movf	sort_pitches@i,w,c
 46842  006316  0D01               	mullw	1
 46843  006318  0E9C               	movlw	low _ARPEGGIO_SORTED
 46844  00631A  24F3               	addwf	prodl,w,c
 46845  00631C  6ED9               	movwf	fsr2l,c
 46846  00631E  0E02               	movlw	high _ARPEGGIO_SORTED
 46847  006320  20F4               	addwfc	prodh,w,c
 46848  006322  6EDA               	movwf	fsr2h,c
 46849  006324  50DF               	movf	indf2,w,c
 46850  006326  6E03               	movwf	sort_pitches@a,c
 46851                           
 46852                           ; BSR set to: 0
 46853                           ;arpeggio.c: 224: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 46854  006328  5004               	movf	sort_pitches@j,w,c
 46855  00632A  0D01               	mullw	1
 46856  00632C  0E9C               	movlw	low _ARPEGGIO_SORTED
 46857  00632E  24F3               	addwf	prodl,w,c
 46858  006330  6ED9               	movwf	fsr2l,c
 46859  006332  0E02               	movlw	high _ARPEGGIO_SORTED
 46860  006334  20F4               	addwfc	prodh,w,c
 46861  006336  6EDA               	movwf	fsr2h,c
 46862  006338  5005               	movf	sort_pitches@i,w,c
 46863  00633A  0D01               	mullw	1
 46864  00633C  0E9C               	movlw	low _ARPEGGIO_SORTED
 46865  00633E  24F3               	addwf	prodl,w,c
 46866  006340  6EE1               	movwf	fsr1l,c
 46867  006342  0E02               	movlw	high _ARPEGGIO_SORTED
 46868  006344  20F4               	addwfc	prodh,w,c
 46869  006346  6EE2               	movwf	fsr1h,c
 46870  006348  CFDF FFE7          	movff	indf2,indf1
 46871                           
 46872                           ; BSR set to: 0
 46873                           ;arpeggio.c: 225: ARPEGGIO_SORTED[j] = a;
 46874  00634C  5004               	movf	sort_pitches@j,w,c
 46875  00634E  0D01               	mullw	1
 46876  006350  0E9C               	movlw	low _ARPEGGIO_SORTED
 46877  006352  24F3               	addwf	prodl,w,c
 46878  006354  6ED9               	movwf	fsr2l,c
 46879  006356  0E02               	movlw	high _ARPEGGIO_SORTED
 46880  006358  20F4               	addwfc	prodh,w,c
 46881  00635A  6EDA               	movwf	fsr2h,c
 46882  00635C  C003  FFDF         	movff	sort_pitches@a,indf2
 46883  006360                     i2l5261:
 46884                           
 46885                           ; BSR set to: 0
 46886                           ;arpeggio.c: 226: }
 46887                           ;arpeggio.c: 227: }
 46888                           ;arpeggio.c: 229: if(SORT_DIRECTION == 1) {
 46889                           
 46890                           ; BSR set to: 0
 46891                           
 46892                           ; BSR set to: 0
 46893  006360  A835               	btfss	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46894  006362  D03A               	goto	i2l5263
 46895                           
 46896                           ; BSR set to: 0
 46897                           ;arpeggio.c: 230: if(ARPEGGIO_SORTED[i] < ARPEGGIO_SORTED[j]){
 46898  006364  5004               	movf	sort_pitches@j,w,c
 46899  006366  0D01               	mullw	1
 46900  006368  0E9C               	movlw	low _ARPEGGIO_SORTED
 46901  00636A  24F3               	addwf	prodl,w,c
 46902  00636C  6ED9               	movwf	fsr2l,c
 46903  00636E  0E02               	movlw	high _ARPEGGIO_SORTED
 46904  006370  20F4               	addwfc	prodh,w,c
 46905  006372  6EDA               	movwf	fsr2h,c
 46906  006374  5005               	movf	sort_pitches@i,w,c
 46907  006376  0D01               	mullw	1
 46908  006378  0E9C               	movlw	low _ARPEGGIO_SORTED
 46909  00637A  24F3               	addwf	prodl,w,c
 46910  00637C  6EE1               	movwf	fsr1l,c
 46911  00637E  0E02               	movlw	high _ARPEGGIO_SORTED
 46912  006380  20F4               	addwfc	prodh,w,c
 46913  006382  6EE2               	movwf	fsr1h,c
 46914  006384  50DE               	movf	postinc2,w,c
 46915  006386  5CE6               	subwf	postinc1,w,c
 46916  006388  B0D8               	btfsc	status,0,c
 46917  00638A  D026               	goto	i2l5263
 46918                           
 46919                           ; BSR set to: 0
 46920                           ;arpeggio.c: 231: a = ARPEGGIO_SORTED[i];
 46921  00638C  5005               	movf	sort_pitches@i,w,c
 46922  00638E  0D01               	mullw	1
 46923  006390  0E9C               	movlw	low _ARPEGGIO_SORTED
 46924  006392  24F3               	addwf	prodl,w,c
 46925  006394  6ED9               	movwf	fsr2l,c
 46926  006396  0E02               	movlw	high _ARPEGGIO_SORTED
 46927  006398  20F4               	addwfc	prodh,w,c
 46928  00639A  6EDA               	movwf	fsr2h,c
 46929  00639C  50DF               	movf	indf2,w,c
 46930  00639E  6E03               	movwf	sort_pitches@a,c
 46931                           
 46932                           ; BSR set to: 0
 46933                           ;arpeggio.c: 232: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 46934  0063A0  5004               	movf	sort_pitches@j,w,c
 46935  0063A2  0D01               	mullw	1
 46936  0063A4  0E9C               	movlw	low _ARPEGGIO_SORTED
 46937  0063A6  24F3               	addwf	prodl,w,c
 46938  0063A8  6ED9               	movwf	fsr2l,c
 46939  0063AA  0E02               	movlw	high _ARPEGGIO_SORTED
 46940  0063AC  20F4               	addwfc	prodh,w,c
 46941  0063AE  6EDA               	movwf	fsr2h,c
 46942  0063B0  5005               	movf	sort_pitches@i,w,c
 46943  0063B2  0D01               	mullw	1
 46944  0063B4  0E9C               	movlw	low _ARPEGGIO_SORTED
 46945  0063B6  24F3               	addwf	prodl,w,c
 46946  0063B8  6EE1               	movwf	fsr1l,c
 46947  0063BA  0E02               	movlw	high _ARPEGGIO_SORTED
 46948  0063BC  20F4               	addwfc	prodh,w,c
 46949  0063BE  6EE2               	movwf	fsr1h,c
 46950  0063C0  CFDF FFE7          	movff	indf2,indf1
 46951                           
 46952                           ; BSR set to: 0
 46953                           ;arpeggio.c: 233: ARPEGGIO_SORTED[j] = a;
 46954  0063C4  5004               	movf	sort_pitches@j,w,c
 46955  0063C6  0D01               	mullw	1
 46956  0063C8  0E9C               	movlw	low _ARPEGGIO_SORTED
 46957  0063CA  24F3               	addwf	prodl,w,c
 46958  0063CC  6ED9               	movwf	fsr2l,c
 46959  0063CE  0E02               	movlw	high _ARPEGGIO_SORTED
 46960  0063D0  20F4               	addwfc	prodh,w,c
 46961  0063D2  6EDA               	movwf	fsr2h,c
 46962  0063D4  C003  FFDF         	movff	sort_pitches@a,indf2
 46963  0063D8                     i2l5263:
 46964                           
 46965                           ; BSR set to: 0
 46966                           
 46967                           ; BSR set to: 0
 46968                           
 46969                           ; BSR set to: 0
 46970  0063D8  2A04               	incf	sort_pitches@j,f,c
 46971  0063DA                     i2l5258:
 46972                           
 46973                           ; BSR set to: 0
 46974                           
 46975                           ; BSR set to: 0
 46976  0063DA  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 46977  0063DC  5C04               	subwf	sort_pitches@j,w,c
 46978  0063DE  A0D8               	btfss	status,0,c
 46979  0063E0  D783               	goto	i2l5259
 46980                           
 46981                           ; BSR set to: 0
 46982                           
 46983                           ; BSR set to: 0
 46984  0063E2  2A05               	incf	sort_pitches@i,f,c
 46985  0063E4                     i2l5256:
 46986                           
 46987                           ; BSR set to: 0
 46988                           
 46989                           ; BSR set to: 0
 46990  0063E4  51E5               	movf	_NUM_NOTES_PRESSED& (0+255),w,b
 46991  0063E6  5C05               	subwf	sort_pitches@i,w,c
 46992  0063E8  B0D8               	btfsc	status,0,c
 46993  0063EA  0012               	return	
 46994  0063EC  D77A               	goto	i2l5257
 46995  0063EE                     __end_of_sort_pitches:
 46996                           	opt stack 0
 46997                           pclatu	equ	0xFFB
 46998                           pclath	equ	0xFFA
 46999                           tblptru	equ	0xFF8
 47000                           tblptrh	equ	0xFF7
 47001                           tblptrl	equ	0xFF6
 47002                           tablat	equ	0xFF5
 47003                           prodh	equ	0xFF4
 47004                           prodl	equ	0xFF3
 47005                           intcon	equ	0xFF2
 47006                           intcon2	equ	0xFF1
 47007                           postinc0	equ	0xFEE
 47008                           fsr0h	equ	0xFEA
 47009                           fsr0l	equ	0xFE9
 47010                           wreg	equ	0xFE8
 47011                           indf1	equ	0xFE7
 47012                           postinc1	equ	0xFE6
 47013                           postdec1	equ	0xFE5
 47014                           fsr1h	equ	0xFE2
 47015                           fsr1l	equ	0xFE1
 47016                           indf2	equ	0xFDF
 47017                           postinc2	equ	0xFDE
 47018                           postdec2	equ	0xFDD
 47019                           plusw2	equ	0xFDB
 47020                           fsr2h	equ	0xFDA
 47021                           fsr2l	equ	0xFD9
 47022                           status	equ	0xFD8
 47023                           
 47024 ;; *************** function _encoderInputsBuxton *****************
 47025 ;; Defined at:
 47026 ;;		line 27 in file "encoder.c"
 47027 ;; Parameters:    Size  Location     Type
 47028 ;;		None
 47029 ;; Auto vars:     Size  Location     Type
 47030 ;;  pinstate        1    5[COMRAM] unsigned char 
 47031 ;;  tempB           1    4[COMRAM] unsigned char 
 47032 ;;  tempA           1    3[COMRAM] unsigned char 
 47033 ;; Return value:  Size  Location     Type
 47034 ;;                  1    wreg      void 
 47035 ;; Registers used:
 47036 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 47037 ;; Tracked objects:
 47038 ;;		On entry : 0/0
 47039 ;;		On exit  : 0/0
 47040 ;;		Unchanged: 0/0
 47041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47043 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47044 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47045 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47046 ;;Total ram usage:        6 bytes
 47047 ;; Hardware stack levels used:    1
 47048 ;; This function calls:
 47049 ;;		Nothing
 47050 ;; This function is called by:
 47051 ;;		_ISR
 47052 ;; This function uses a non-reentrant model
 47053 ;;
 47054                           
 47055                           	psect	text150
 47056  007D0E                     __ptext150:
 47057                           	opt stack 0
 47058  007D0E                     _encoderInputsBuxton:
 47059                           	opt stack 18
 47060                           
 47061                           ;encoder.c: 30: if(encoderPolarity == 0){
 47062                           
 47063                           ; BSR set to: 0
 47064                           ;incstack = 0
 47065  007D0E  B036               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 47066  007D10  D006               	goto	i2l807
 47067                           
 47068                           ;encoder.c: 31: encoderA = RB5;
 47069  007D12  8436               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 47070  007D14  AA81               	btfss	3969,5,c	;volatile
 47071  007D16  9436               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 47072                           
 47073                           ;encoder.c: 32: encoderB = RB4;
 47074  007D18  8236               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 47075  007D1A  A881               	btfss	3969,4,c	;volatile
 47076  007D1C  9236               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 47077  007D1E                     i2l807:
 47078                           
 47079                           ;encoder.c: 33: }
 47080                           ;encoder.c: 36: if(encoderPolarity == 1){
 47081  007D1E  A036               	btfss	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 47082  007D20  D006               	goto	i2l808
 47083                           
 47084                           ;encoder.c: 37: encoderA = RB4;
 47085  007D22  8436               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 47086  007D24  A881               	btfss	3969,4,c	;volatile
 47087  007D26  9436               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 47088                           
 47089                           ;encoder.c: 38: encoderB = RB5;
 47090  007D28  8236               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 47091  007D2A  AA81               	btfss	3969,5,c	;volatile
 47092  007D2C  9236               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 47093  007D2E                     i2l808:
 47094                           
 47095                           ;encoder.c: 39: }
 47096                           ;encoder.c: 42: unsigned char tempA = encoderA << 1;
 47097  007D2E  A436               	btfss	_encoderA/(0+8),_encoderA& (0+7),c
 47098  007D30  D003               	goto	i2u3790_40
 47099  007D32  6A01               	clrf	??_encoderInputsBuxton& (0+255),c
 47100  007D34  2A01               	incf	??_encoderInputsBuxton& (0+255),f,c
 47101  007D36  D001               	goto	i2u3791_48
 47102  007D38                     i2u3790_40:
 47103  007D38  6A01               	clrf	??_encoderInputsBuxton& (0+255),c
 47104  007D3A                     i2u3791_48:
 47105  007D3A  90D8               	bcf	status,0,c
 47106  007D3C  3401               	rlcf	??_encoderInputsBuxton,w,c
 47107  007D3E  6E04               	movwf	encoderInputsBuxton@tempA,c
 47108                           
 47109                           ;encoder.c: 43: unsigned char tempB = encoderB;
 47110  007D40  0E00               	movlw	0
 47111  007D42  B236               	btfsc	_encoderB/(0+8),_encoderB& (0+7),c
 47112  007D44  0E01               	movlw	1
 47113  007D46  6E05               	movwf	encoderInputsBuxton@tempB,c
 47114                           
 47115                           ;encoder.c: 44: unsigned char pinstate = tempA | tempB;
 47116  007D48  5004               	movf	encoderInputsBuxton@tempA,w,c
 47117  007D4A  1005               	iorwf	encoderInputsBuxton@tempB,w,c
 47118  007D4C  6E06               	movwf	encoderInputsBuxton@pinstate,c
 47119                           
 47120                           ;encoder.c: 46: state = ttable[state & 0xf][pinstate];
 47121  007D4E  C058  F001         	movff	_state,??_encoderInputsBuxton
 47122  007D52  0E0F               	movlw	15
 47123  007D54  1601               	andwf	??_encoderInputsBuxton,f,c
 47124  007D56  5001               	movf	??_encoderInputsBuxton,w,c
 47125  007D58  0D04               	mullw	4
 47126  007D5A  0E3D               	movlw	low _ttable
 47127  007D5C  6E02               	movwf	(??_encoderInputsBuxton+1)& (0+255),c
 47128  007D5E  0EF3               	movlw	high _ttable
 47129  007D60  6E03               	movwf	(??_encoderInputsBuxton+2)& (0+255),c
 47130  007D62  50F3               	movf	prodl,w,c
 47131  007D64  2602               	addwf	??_encoderInputsBuxton+1,f,c
 47132  007D66  50F4               	movf	prodh,w,c
 47133  007D68  2203               	addwfc	??_encoderInputsBuxton+2,f,c
 47134  007D6A  5006               	movf	encoderInputsBuxton@pinstate,w,c
 47135  007D6C  0D01               	mullw	1
 47136  007D6E  50F3               	movf	prodl,w,c
 47137  007D70  2602               	addwf	??_encoderInputsBuxton+1,f,c
 47138  007D72  50F4               	movf	prodh,w,c
 47139  007D74  2203               	addwfc	??_encoderInputsBuxton+2,f,c
 47140  007D76  C002  FFF6         	movff	??_encoderInputsBuxton+1,tblptrl
 47141  007D7A  C003  FFF7         	movff	??_encoderInputsBuxton+2,tblptrh
 47142  007D7E                     	if	0	;tblptru may be non-zero
 47143  007D7E                     	endif
 47144  007D7E                     	if	0	;tblptru may be non-zero
 47145  007D7E                     	endif
 47146  007D7E  0008               	tblrd		*
 47147  007D80  CFF5 F058          	movff	tablat,_state
 47148                           
 47149                           ;encoder.c: 47: encoder_direction = state & 0x30;
 47150  007D84  5058               	movf	_state,w,c
 47151  007D86  0B30               	andlw	48
 47152  007D88  0100               	movlb	0	; () banked
 47153  007D8A  6FEB               	movwf	_encoder_direction& (0+255),b
 47154                           
 47155                           ; BSR set to: 0
 47156  007D8C  0012               	return		;funcret
 47157  007D8E                     __end_of_encoderInputsBuxton:
 47158                           	opt stack 0
 47159                           pclatu	equ	0xFFB
 47160                           pclath	equ	0xFFA
 47161                           tblptru	equ	0xFF8
 47162                           tblptrh	equ	0xFF7
 47163                           tblptrl	equ	0xFF6
 47164                           tablat	equ	0xFF5
 47165                           prodh	equ	0xFF4
 47166                           prodl	equ	0xFF3
 47167                           intcon	equ	0xFF2
 47168                           intcon2	equ	0xFF1
 47169                           postinc0	equ	0xFEE
 47170                           fsr0h	equ	0xFEA
 47171                           fsr0l	equ	0xFE9
 47172                           wreg	equ	0xFE8
 47173                           indf1	equ	0xFE7
 47174                           postinc1	equ	0xFE6
 47175                           postdec1	equ	0xFE5
 47176                           fsr1h	equ	0xFE2
 47177                           fsr1l	equ	0xFE1
 47178                           indf2	equ	0xFDF
 47179                           postinc2	equ	0xFDE
 47180                           postdec2	equ	0xFDD
 47181                           plusw2	equ	0xFDB
 47182                           fsr2h	equ	0xFDA
 47183                           fsr2l	equ	0xFD9
 47184                           status	equ	0xFD8
 47185                           
 47186 ;; *************** function _display *****************
 47187 ;; Defined at:
 47188 ;;		line 21 in file "segment.c"
 47189 ;; Parameters:    Size  Location     Type
 47190 ;;		None
 47191 ;; Auto vars:     Size  Location     Type
 47192 ;;		None
 47193 ;; Return value:  Size  Location     Type
 47194 ;;                  1    wreg      void 
 47195 ;; Registers used:
 47196 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 47197 ;; Tracked objects:
 47198 ;;		On entry : 0/0
 47199 ;;		On exit  : 0/0
 47200 ;;		Unchanged: 0/0
 47201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47206 ;;Total ram usage:        0 bytes
 47207 ;; Hardware stack levels used:    1
 47208 ;; Hardware stack levels required when called:    2
 47209 ;; This function calls:
 47210 ;;		_displayDigits
 47211 ;;		_displayString
 47212 ;; This function is called by:
 47213 ;;		_ISR
 47214 ;; This function uses a non-reentrant model
 47215 ;;
 47216                           
 47217                           	psect	text151
 47218  00957A                     __ptext151:
 47219                           	opt stack 0
 47220  00957A                     _display:
 47221                           	opt stack 16
 47222                           
 47223                           ;segment.c: 22: if (DISPLAY_MODE == 0) {displayDigits();}
 47224                           
 47225                           ; BSR set to: 0
 47226                           ;incstack = 0
 47227  00957A  505A               	movf	_DISPLAY_MODE,w,c
 47228  00957C  B4D8               	btfsc	status,2,c
 47229  00957E  ECCC  F020         	call	_displayDigits	;wreg free
 47230                           
 47231                           ;segment.c: 23: if (DISPLAY_MODE == 1) {displayString();}
 47232  009582  045A               	decf	_DISPLAY_MODE,w,c
 47233  009584  A4D8               	btfss	status,2,c
 47234  009586  0012               	return	
 47235  009588  EC79  F032         	call	_displayString	;wreg free
 47236  00958C  0012               	return	
 47237  00958E                     __end_of_display:
 47238                           	opt stack 0
 47239                           pclatu	equ	0xFFB
 47240                           pclath	equ	0xFFA
 47241                           tblptru	equ	0xFF8
 47242                           tblptrh	equ	0xFF7
 47243                           tblptrl	equ	0xFF6
 47244                           tablat	equ	0xFF5
 47245                           prodh	equ	0xFF4
 47246                           prodl	equ	0xFF3
 47247                           intcon	equ	0xFF2
 47248                           intcon2	equ	0xFF1
 47249                           postinc0	equ	0xFEE
 47250                           fsr0h	equ	0xFEA
 47251                           fsr0l	equ	0xFE9
 47252                           wreg	equ	0xFE8
 47253                           indf1	equ	0xFE7
 47254                           postinc1	equ	0xFE6
 47255                           postdec1	equ	0xFE5
 47256                           fsr1h	equ	0xFE2
 47257                           fsr1l	equ	0xFE1
 47258                           indf2	equ	0xFDF
 47259                           postinc2	equ	0xFDE
 47260                           postdec2	equ	0xFDD
 47261                           plusw2	equ	0xFDB
 47262                           fsr2h	equ	0xFDA
 47263                           fsr2l	equ	0xFD9
 47264                           status	equ	0xFD8
 47265                           
 47266 ;; *************** function _displayString *****************
 47267 ;; Defined at:
 47268 ;;		line 164 in file "segment.c"
 47269 ;; Parameters:    Size  Location     Type
 47270 ;;		None
 47271 ;; Auto vars:     Size  Location     Type
 47272 ;;  i               1    1[COMRAM] unsigned char 
 47273 ;; Return value:  Size  Location     Type
 47274 ;;                  1    wreg      void 
 47275 ;; Registers used:
 47276 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 47277 ;; Tracked objects:
 47278 ;;		On entry : 0/0
 47279 ;;		On exit  : 0/0
 47280 ;;		Unchanged: 0/0
 47281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47283 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47284 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47285 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47286 ;;Total ram usage:        2 bytes
 47287 ;; Hardware stack levels used:    1
 47288 ;; This function calls:
 47289 ;;		Nothing
 47290 ;; This function is called by:
 47291 ;;		_display
 47292 ;; This function uses a non-reentrant model
 47293 ;;
 47294                           
 47295                           	psect	text152
 47296  0064F2                     __ptext152:
 47297                           	opt stack 0
 47298  0064F2                     _displayString:
 47299                           	opt stack 17
 47300                           
 47301                           ;segment.c: 166: static unsigned char letter[4];
 47302                           ;segment.c: 167: static unsigned char letter_counter;
 47303                           ;segment.c: 170: for(unsigned char i=0;i<4;i++) {
 47304                           
 47305                           ;incstack = 0
 47306  0064F2  0E00               	movlw	0
 47307  0064F4  6E02               	movwf	displayString@i,c
 47308  0064F6                     i2l22611:
 47309  0064F6  0E03               	movlw	3
 47310  0064F8  6402               	cpfsgt	displayString@i,c
 47311  0064FA  D001               	goto	i2l2893
 47312  0064FC  D02A               	goto	i2u3693_40
 47313  0064FE                     i2l2893:
 47314                           
 47315                           ;segment.c: 171: if(string_to_display[i] > (unsigned char) 'z') {letter[i] = 'z';}
 47316  0064FE  5002               	movf	displayString@i,w,c
 47317  006500  0D01               	mullw	1
 47318  006502  0EEE               	movlw	low _string_to_display
 47319  006504  24F3               	addwf	prodl,w,c
 47320  006506  6ED9               	movwf	fsr2l,c
 47321  006508  0E01               	movlw	high _string_to_display
 47322  00650A  20F4               	addwfc	prodh,w,c
 47323  00650C  6EDA               	movwf	fsr2h,c
 47324  00650E  0E7A               	movlw	122
 47325  006510  64DF               	cpfsgt	indf2,c
 47326  006512  D00A               	goto	i2l2895
 47327  006514  5002               	movf	displayString@i,w,c
 47328  006516  0D01               	mullw	1
 47329  006518  0E00               	movlw	low displayString@letter
 47330  00651A  24F3               	addwf	prodl,w,c
 47331  00651C  6ED9               	movwf	fsr2l,c
 47332  00651E  0E01               	movlw	high displayString@letter
 47333  006520  20F4               	addwfc	prodh,w,c
 47334  006522  6EDA               	movwf	fsr2h,c
 47335  006524  0E7A               	movlw	122
 47336  006526  D012               	goto	L25
 47337  006528                     i2l2895:
 47338                           
 47339                           ;segment.c: 172: else letter[i] = string_to_display[i] - '0';
 47340  006528  5002               	movf	displayString@i,w,c
 47341  00652A  0D01               	mullw	1
 47342  00652C  0E00               	movlw	low displayString@letter
 47343  00652E  24F3               	addwf	prodl,w,c
 47344  006530  6ED9               	movwf	fsr2l,c
 47345  006532  0E01               	movlw	high displayString@letter
 47346  006534  20F4               	addwfc	prodh,w,c
 47347  006536  6EDA               	movwf	fsr2h,c
 47348  006538  5002               	movf	displayString@i,w,c
 47349  00653A  0D01               	mullw	1
 47350  00653C  0EEE               	movlw	low _string_to_display
 47351  00653E  24F3               	addwf	prodl,w,c
 47352  006540  6EE1               	movwf	fsr1l,c
 47353  006542  0E01               	movlw	high _string_to_display
 47354  006544  20F4               	addwfc	prodh,w,c
 47355  006546  6EE2               	movwf	fsr1h,c
 47356  006548  50E7               	movf	indf1,w,c
 47357  00654A  0FD0               	addlw	208
 47358  00654C                     L25:
 47359  00654C  6EDF               	movwf	indf2,c
 47360  00654E  2A02               	incf	displayString@i,f,c
 47361  006550  D7D2               	goto	i2l22611
 47362  006552                     i2u3693_40:
 47363                           
 47364                           ;segment.c: 173: }
 47365                           ;segment.c: 175: if(letter_counter == 0){
 47366  006552  5051               	movf	displayString@letter_counter,w,c
 47367  006554  A4D8               	btfss	status,2,c
 47368  006556  D00E               	goto	i2l2897
 47369                           
 47370                           ;segment.c: 176: RC3 = 0;
 47371  006558  9682               	bcf	3970,3,c	;volatile
 47372                           
 47373                           ;segment.c: 177: PORTD = seg_ascii[letter[0]];
 47374  00655A  0101               	movlb	1	; () banked
 47375  00655C  5100               	movf	displayString@letter& (0+255),w,b
 47376  00655E  0D01               	mullw	1
 47377  006560  0E20               	movlw	low _seg_ascii
 47378  006562  24F3               	addwf	prodl,w,c
 47379  006564  6EF6               	movwf	tblptrl,c
 47380  006566  0EF2               	movlw	high _seg_ascii
 47381  006568  20F4               	addwfc	prodh,w,c
 47382  00656A  6EF7               	movwf	tblptrh,c
 47383  00656C                     	if	0	;There are less than 3 active tblptr bytes
 47384  00656C                     	endif
 47385  00656C  0008               	tblrd		*
 47386  00656E  CFF5 FF83          	movff	tablat,3971	;volatile
 47387                           
 47388                           ; BSR set to: 1
 47389                           ;segment.c: 178: RC0 = 1;
 47390  006572  8082               	bsf	3970,0,c	;volatile
 47391  006574                     i2l2897:
 47392                           
 47393                           ;segment.c: 179: }
 47394                           ;segment.c: 180: if(letter_counter == 1){
 47395                           
 47396                           ; BSR set to: 1
 47397  006574  0451               	decf	displayString@letter_counter,w,c
 47398  006576  A4D8               	btfss	status,2,c
 47399  006578  D00E               	goto	i2l2898
 47400                           
 47401                           ;segment.c: 181: RC0 = 0;
 47402  00657A  9082               	bcf	3970,0,c	;volatile
 47403                           
 47404                           ;segment.c: 182: PORTD = seg_ascii[letter[1]];
 47405  00657C  0101               	movlb	1	; () banked
 47406  00657E  5101               	movf	(displayString@letter+1)& (0+255),w,b
 47407  006580  0D01               	mullw	1
 47408  006582  0E20               	movlw	low _seg_ascii
 47409  006584  24F3               	addwf	prodl,w,c
 47410  006586  6EF6               	movwf	tblptrl,c
 47411  006588  0EF2               	movlw	high _seg_ascii
 47412  00658A  20F4               	addwfc	prodh,w,c
 47413  00658C  6EF7               	movwf	tblptrh,c
 47414  00658E                     	if	0	;There are less than 3 active tblptr bytes
 47415  00658E                     	endif
 47416  00658E  0008               	tblrd		*
 47417  006590  CFF5 FF83          	movff	tablat,3971	;volatile
 47418                           
 47419                           ; BSR set to: 1
 47420                           ;segment.c: 183: RC1 = 1;
 47421  006594  8282               	bsf	3970,1,c	;volatile
 47422  006596                     i2l2898:
 47423                           
 47424                           ;segment.c: 184: }
 47425                           ;segment.c: 185: if(letter_counter == 2){
 47426                           
 47427                           ; BSR set to: 1
 47428  006596  0E02               	movlw	2
 47429  006598  1851               	xorwf	displayString@letter_counter,w,c
 47430  00659A  A4D8               	btfss	status,2,c
 47431  00659C  D00E               	goto	i2l2899
 47432                           
 47433                           ;segment.c: 186: RC1 = 0;
 47434  00659E  9282               	bcf	3970,1,c	;volatile
 47435                           
 47436                           ;segment.c: 187: PORTD = seg_ascii[letter[2]];
 47437  0065A0  0101               	movlb	1	; () banked
 47438  0065A2  5102               	movf	(displayString@letter+2)& (0+255),w,b
 47439  0065A4  0D01               	mullw	1
 47440  0065A6  0E20               	movlw	low _seg_ascii
 47441  0065A8  24F3               	addwf	prodl,w,c
 47442  0065AA  6EF6               	movwf	tblptrl,c
 47443  0065AC  0EF2               	movlw	high _seg_ascii
 47444  0065AE  20F4               	addwfc	prodh,w,c
 47445  0065B0  6EF7               	movwf	tblptrh,c
 47446  0065B2                     	if	0	;There are less than 3 active tblptr bytes
 47447  0065B2                     	endif
 47448  0065B2  0008               	tblrd		*
 47449  0065B4  CFF5 FF83          	movff	tablat,3971	;volatile
 47450                           
 47451                           ; BSR set to: 1
 47452                           ;segment.c: 188: RC2 = 1;
 47453  0065B8  8482               	bsf	3970,2,c	;volatile
 47454  0065BA                     i2l2899:
 47455                           
 47456                           ;segment.c: 189: }
 47457                           ;segment.c: 190: if(letter_counter == 3){
 47458                           
 47459                           ; BSR set to: 1
 47460  0065BA  0E03               	movlw	3
 47461  0065BC  1851               	xorwf	displayString@letter_counter,w,c
 47462  0065BE  A4D8               	btfss	status,2,c
 47463  0065C0  D00E               	goto	i2l2900
 47464                           
 47465                           ;segment.c: 191: RC2 = 0;
 47466  0065C2  9482               	bcf	3970,2,c	;volatile
 47467                           
 47468                           ;segment.c: 192: PORTD = seg_ascii[letter[3]];
 47469  0065C4  0101               	movlb	1	; () banked
 47470  0065C6  5103               	movf	(displayString@letter+3)& (0+255),w,b
 47471  0065C8  0D01               	mullw	1
 47472  0065CA  0E20               	movlw	low _seg_ascii
 47473  0065CC  24F3               	addwf	prodl,w,c
 47474  0065CE  6EF6               	movwf	tblptrl,c
 47475  0065D0  0EF2               	movlw	high _seg_ascii
 47476  0065D2  20F4               	addwfc	prodh,w,c
 47477  0065D4  6EF7               	movwf	tblptrh,c
 47478  0065D6                     	if	0	;There are less than 3 active tblptr bytes
 47479  0065D6                     	endif
 47480  0065D6  0008               	tblrd		*
 47481  0065D8  CFF5 FF83          	movff	tablat,3971	;volatile
 47482                           
 47483                           ; BSR set to: 1
 47484                           ;segment.c: 193: RC3 = 1;
 47485  0065DC  8682               	bsf	3970,3,c	;volatile
 47486  0065DE                     i2l2900:
 47487                           
 47488                           ;segment.c: 194: }
 47489                           ;segment.c: 197: letter_counter++;
 47490                           
 47491                           ; BSR set to: 1
 47492  0065DE  2A51               	incf	displayString@letter_counter,f,c
 47493                           
 47494                           ;segment.c: 198: if(letter_counter > 3){letter_counter = 0;}
 47495  0065E0  0E03               	movlw	3
 47496  0065E2  6451               	cpfsgt	displayString@letter_counter,c
 47497  0065E4  0012               	return	
 47498  0065E6  0E00               	movlw	0
 47499  0065E8  6E51               	movwf	displayString@letter_counter,c
 47500  0065EA  0012               	return	
 47501  0065EC                     __end_of_displayString:
 47502                           	opt stack 0
 47503                           pclatu	equ	0xFFB
 47504                           pclath	equ	0xFFA
 47505                           tblptru	equ	0xFF8
 47506                           tblptrh	equ	0xFF7
 47507                           tblptrl	equ	0xFF6
 47508                           tablat	equ	0xFF5
 47509                           prodh	equ	0xFF4
 47510                           prodl	equ	0xFF3
 47511                           intcon	equ	0xFF2
 47512                           intcon2	equ	0xFF1
 47513                           postinc0	equ	0xFEE
 47514                           fsr0h	equ	0xFEA
 47515                           fsr0l	equ	0xFE9
 47516                           wreg	equ	0xFE8
 47517                           indf1	equ	0xFE7
 47518                           postinc1	equ	0xFE6
 47519                           postdec1	equ	0xFE5
 47520                           fsr1h	equ	0xFE2
 47521                           fsr1l	equ	0xFE1
 47522                           indf2	equ	0xFDF
 47523                           postinc2	equ	0xFDE
 47524                           postdec2	equ	0xFDD
 47525                           plusw2	equ	0xFDB
 47526                           fsr2h	equ	0xFDA
 47527                           fsr2l	equ	0xFD9
 47528                           status	equ	0xFD8
 47529                           
 47530 ;; *************** function _displayDigits *****************
 47531 ;; Defined at:
 47532 ;;		line 54 in file "segment.c"
 47533 ;; Parameters:    Size  Location     Type
 47534 ;;		None
 47535 ;; Auto vars:     Size  Location     Type
 47536 ;;  highByte        1   24[COMRAM] unsigned char 
 47537 ;;  lowByte         1   23[COMRAM] unsigned char 
 47538 ;; Return value:  Size  Location     Type
 47539 ;;                  1    wreg      void 
 47540 ;; Registers used:
 47541 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 47542 ;; Tracked objects:
 47543 ;;		On entry : 0/0
 47544 ;;		On exit  : 0/0
 47545 ;;		Unchanged: 0/0
 47546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47548 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47549 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47550 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47551 ;;Total ram usage:        5 bytes
 47552 ;; Hardware stack levels used:    1
 47553 ;; Hardware stack levels required when called:    1
 47554 ;; This function calls:
 47555 ;;		i2___awdiv
 47556 ;;		i2___awmod
 47557 ;; This function is called by:
 47558 ;;		_display
 47559 ;; This function uses a non-reentrant model
 47560 ;;
 47561                           
 47562                           	psect	text153
 47563  004198                     __ptext153:
 47564                           	opt stack 0
 47565  004198                     _displayDigits:
 47566                           	opt stack 16
 47567                           
 47568                           ;segment.c: 60: static unsigned char digit[4];
 47569                           ;segment.c: 61: static unsigned char digit_counter;
 47570                           ;segment.c: 62: static signed int number_to_display_last;
 47571                           ;segment.c: 63: static signed int number_to_display_temp;
 47572                           ;segment.c: 66: if(number_to_display != number_to_display_last){
 47573                           
 47574                           ;incstack = 0
 47575  004198  0101               	movlb	1	; () banked
 47576  00419A  516B               	movf	displayDigits@number_to_display_last& (0+255),w,b
 47577  00419C  185B               	xorwf	_number_to_display,w,c
 47578  00419E  E104               	bnz	i2u3652_40
 47579  0041A0  516C               	movf	(displayDigits@number_to_display_last+1)& (0+255),w,b
 47580  0041A2  185C               	xorwf	_number_to_display+1,w,c
 47581  0041A4  B4D8               	btfsc	status,2,c
 47582  0041A6  D0B1               	goto	i2l2854
 47583  0041A8                     i2u3652_40:
 47584                           
 47585                           ; BSR set to: 1
 47586                           ;segment.c: 68: if(DIGIT_MODE == 0) {
 47587  0041A8  5059               	movf	_DIGIT_MODE,w,c
 47588  0041AA  A4D8               	btfss	status,2,c
 47589  0041AC  D062               	goto	i2l2855
 47590                           
 47591                           ; BSR set to: 1
 47592                           ;segment.c: 70: if(number_to_display >= 0){number_to_display_temp = number_to_display;}
 47593  0041AE  BE5C               	btfsc	_number_to_display+1,7,c
 47594  0041B0  D004               	goto	i2l2856
 47595                           
 47596                           ; BSR set to: 1
 47597  0041B2  C05B  F04D         	movff	_number_to_display,displayDigits@number_to_display_temp
 47598  0041B6  C05C  F04E         	movff	_number_to_display+1,displayDigits@number_to_display_temp+1
 47599  0041BA                     i2l2856:
 47600                           
 47601                           ; BSR set to: 1
 47602                           ;segment.c: 71: if(number_to_display < 0){number_to_display_temp = 0 - number_to_display
      +                          ;}
 47603                           
 47604                           ; BSR set to: 1
 47605  0041BA  AE5C               	btfss	_number_to_display+1,7,c
 47606  0041BC  D00C               	goto	i2l2857
 47607                           
 47608                           ; BSR set to: 1
 47609  0041BE  C05B  F015         	movff	_number_to_display,??_displayDigits
 47610  0041C2  C05C  F016         	movff	_number_to_display+1,??_displayDigits+1
 47611  0041C6  1E15               	comf	??_displayDigits,f,c
 47612  0041C8  1E16               	comf	??_displayDigits+1,f,c
 47613  0041CA  4A15               	infsnz	??_displayDigits,f,c
 47614  0041CC  2A16               	incf	??_displayDigits+1,f,c
 47615  0041CE  C015  F04D         	movff	??_displayDigits,displayDigits@number_to_display_temp
 47616  0041D2  C016  F04E         	movff	??_displayDigits+1,displayDigits@number_to_display_temp+1
 47617  0041D6                     i2l2857:
 47618                           
 47619                           ; BSR set to: 1
 47620                           ;segment.c: 73: digit[0] = (number_to_display_temp / 1000) % 10;
 47621                           
 47622                           ; BSR set to: 1
 47623  0041D6  0E03               	movlw	3
 47624  0041D8  6E04               	movwf	i2___awdiv@divisor+1,c
 47625  0041DA  0EE8               	movlw	232
 47626  0041DC  6E03               	movwf	i2___awdiv@divisor,c
 47627  0041DE  C04D  F001         	movff	displayDigits@number_to_display_temp,i2___awdiv@dividend
 47628  0041E2  C04E  F002         	movff	displayDigits@number_to_display_temp+1,i2___awdiv@dividend+1
 47629  0041E6  ECC4  F03D         	call	i2___awdiv	;wreg free
 47630  0041EA  C001  F00F         	movff	?i2___awdiv,i2___awmod@dividend
 47631  0041EE  C002  F010         	movff	?i2___awdiv+1,i2___awmod@dividend+1
 47632  0041F2  0E00               	movlw	0
 47633  0041F4  6E12               	movwf	i2___awmod@divisor+1,c
 47634  0041F6  0E0A               	movlw	10
 47635  0041F8  6E11               	movwf	i2___awmod@divisor,c
 47636  0041FA  ECD0  F042         	call	i2___awmod	;wreg free
 47637  0041FE  500F               	movf	?i2___awmod,w,c
 47638  004200  6E37               	movwf	displayDigits@digit,c
 47639                           
 47640                           ;segment.c: 74: digit[1] = (number_to_display_temp / 100) % 10;
 47641  004202  0E00               	movlw	0
 47642  004204  6E04               	movwf	i2___awdiv@divisor+1,c
 47643  004206  0E64               	movlw	100
 47644  004208  6E03               	movwf	i2___awdiv@divisor,c
 47645  00420A  C04D  F001         	movff	displayDigits@number_to_display_temp,i2___awdiv@dividend
 47646  00420E  C04E  F002         	movff	displayDigits@number_to_display_temp+1,i2___awdiv@dividend+1
 47647  004212  ECC4  F03D         	call	i2___awdiv	;wreg free
 47648  004216  C001  F00F         	movff	?i2___awdiv,i2___awmod@dividend
 47649  00421A  C002  F010         	movff	?i2___awdiv+1,i2___awmod@dividend+1
 47650  00421E  0E00               	movlw	0
 47651  004220  6E12               	movwf	i2___awmod@divisor+1,c
 47652  004222  0E0A               	movlw	10
 47653  004224  6E11               	movwf	i2___awmod@divisor,c
 47654  004226  ECD0  F042         	call	i2___awmod	;wreg free
 47655  00422A  500F               	movf	?i2___awmod,w,c
 47656  00422C  6E38               	movwf	displayDigits@digit+1,c
 47657                           
 47658                           ;segment.c: 75: digit[2] = (number_to_display_temp / 10) % 10;
 47659  00422E  0E00               	movlw	0
 47660  004230  6E04               	movwf	i2___awdiv@divisor+1,c
 47661  004232  0E0A               	movlw	10
 47662  004234  6E03               	movwf	i2___awdiv@divisor,c
 47663  004236  C04D  F001         	movff	displayDigits@number_to_display_temp,i2___awdiv@dividend
 47664  00423A  C04E  F002         	movff	displayDigits@number_to_display_temp+1,i2___awdiv@dividend+1
 47665  00423E  ECC4  F03D         	call	i2___awdiv	;wreg free
 47666  004242  C001  F00F         	movff	?i2___awdiv,i2___awmod@dividend
 47667  004246  C002  F010         	movff	?i2___awdiv+1,i2___awmod@dividend+1
 47668  00424A  0E00               	movlw	0
 47669  00424C  6E12               	movwf	i2___awmod@divisor+1,c
 47670  00424E  0E0A               	movlw	10
 47671  004250  6E11               	movwf	i2___awmod@divisor,c
 47672  004252  ECD0  F042         	call	i2___awmod	;wreg free
 47673  004256  500F               	movf	?i2___awmod,w,c
 47674  004258  6E39               	movwf	displayDigits@digit+2,c
 47675                           
 47676                           ;segment.c: 76: digit[3] = number_to_display_temp % 10;
 47677  00425A  C04D  F00F         	movff	displayDigits@number_to_display_temp,i2___awmod@dividend
 47678  00425E  C04E  F010         	movff	displayDigits@number_to_display_temp+1,i2___awmod@dividend+1
 47679  004262  0E00               	movlw	0
 47680  004264  6E12               	movwf	i2___awmod@divisor+1,c
 47681  004266  0E0A               	movlw	10
 47682  004268  6E11               	movwf	i2___awmod@divisor,c
 47683  00426A  ECD0  F042         	call	i2___awmod	;wreg free
 47684  00426E  500F               	movf	?i2___awmod,w,c
 47685  004270  6E3A               	movwf	displayDigits@digit+3,c
 47686  004272                     i2l2855:
 47687                           
 47688                           ;segment.c: 77: }
 47689                           ;segment.c: 79: if(DIGIT_MODE == 1) {
 47690  004272  0459               	decf	_DIGIT_MODE,w,c
 47691  004274  A4D8               	btfss	status,2,c
 47692  004276  D022               	goto	i2l2858
 47693                           
 47694                           ;segment.c: 80: digit[0] = (number_to_display >> 12) % 16;
 47695  004278  C05B  F015         	movff	_number_to_display,??_displayDigits
 47696  00427C  C05C  F016         	movff	_number_to_display+1,??_displayDigits+1
 47697  004280  0E0C               	movlw	12
 47698  004282  6E17               	movwf	(??_displayDigits+2)& (0+255),c
 47699  004284                     i2u3657_45:
 47700  004284  3416               	rlcf	??_displayDigits+1,w,c
 47701  004286  3216               	rrcf	??_displayDigits+1,f,c
 47702  004288  3215               	rrcf	??_displayDigits,f,c
 47703  00428A  2E17               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47704  00428C  D7FB               	goto	i2u3657_45
 47705  00428E  5015               	movf	??_displayDigits,w,c
 47706  004290  0B0F               	andlw	15
 47707  004292  6E37               	movwf	displayDigits@digit,c
 47708                           
 47709                           ;segment.c: 81: digit[1] = (number_to_display >> 8) % 16;
 47710  004294  505C               	movf	_number_to_display+1,w,c
 47711  004296  0B0F               	andlw	15
 47712  004298  6E38               	movwf	displayDigits@digit+1,c
 47713                           
 47714                           ;segment.c: 82: digit[2] = (number_to_display >> 4) % 16;
 47715  00429A  C05B  F015         	movff	_number_to_display,??_displayDigits
 47716  00429E  C05C  F016         	movff	_number_to_display+1,??_displayDigits+1
 47717  0042A2  0E04               	movlw	4
 47718  0042A4  6E17               	movwf	(??_displayDigits+2)& (0+255),c
 47719  0042A6                     i2u3658_45:
 47720  0042A6  3416               	rlcf	??_displayDigits+1,w,c
 47721  0042A8  3216               	rrcf	??_displayDigits+1,f,c
 47722  0042AA  3215               	rrcf	??_displayDigits,f,c
 47723  0042AC  2E17               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47724  0042AE  D7FB               	goto	i2u3658_45
 47725  0042B0  5015               	movf	??_displayDigits,w,c
 47726  0042B2  0B0F               	andlw	15
 47727  0042B4  6E39               	movwf	displayDigits@digit+2,c
 47728                           
 47729                           ;segment.c: 83: digit[3] = number_to_display % 16;
 47730  0042B6  505B               	movf	_number_to_display,w,c
 47731  0042B8  0B0F               	andlw	15
 47732  0042BA  6E3A               	movwf	displayDigits@digit+3,c
 47733  0042BC                     i2l2858:
 47734                           
 47735                           ;segment.c: 84: }
 47736                           ;segment.c: 86: if(DIGIT_MODE == 2) {
 47737  0042BC  0E02               	movlw	2
 47738  0042BE  1859               	xorwf	_DIGIT_MODE,w,c
 47739  0042C0  A4D8               	btfss	status,2,c
 47740  0042C2  D01F               	goto	i2l2859
 47741                           
 47742                           ;segment.c: 88: unsigned char lowByte = number_to_display & 0x7F;
 47743  0042C4  505B               	movf	_number_to_display,w,c
 47744  0042C6  0B7F               	andlw	127
 47745  0042C8  6E18               	movwf	displayDigits@lowByte,c
 47746                           
 47747                           ;segment.c: 89: unsigned char highByte = (number_to_display >> 7) & 0x7F;
 47748  0042CA  C05B  F015         	movff	_number_to_display,??_displayDigits
 47749  0042CE  C05C  F016         	movff	_number_to_display+1,??_displayDigits+1
 47750  0042D2  0E07               	movlw	7
 47751  0042D4  6E17               	movwf	(??_displayDigits+2)& (0+255),c
 47752  0042D6                     i2u3660_45:
 47753  0042D6  3416               	rlcf	??_displayDigits+1,w,c
 47754  0042D8  3216               	rrcf	??_displayDigits+1,f,c
 47755  0042DA  3215               	rrcf	??_displayDigits,f,c
 47756  0042DC  2E17               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47757  0042DE  D7FB               	goto	i2u3660_45
 47758  0042E0  5015               	movf	??_displayDigits,w,c
 47759  0042E2  0B7F               	andlw	127
 47760  0042E4  6E19               	movwf	displayDigits@highByte,c
 47761                           
 47762                           ;segment.c: 91: digit[0] = (highByte >> 4) % 0x8;
 47763  0042E6  3819               	swapf	displayDigits@highByte,w,c
 47764  0042E8  0B0F               	andlw	15
 47765  0042EA  0B07               	andlw	7
 47766  0042EC  6E37               	movwf	displayDigits@digit,c
 47767                           
 47768                           ;segment.c: 92: digit[1] = highByte % 16;
 47769  0042EE  5019               	movf	displayDigits@highByte,w,c
 47770  0042F0  0B0F               	andlw	15
 47771  0042F2  6E38               	movwf	displayDigits@digit+1,c
 47772                           
 47773                           ;segment.c: 93: digit[2] = (lowByte >> 4) % 0x8;
 47774  0042F4  3818               	swapf	displayDigits@lowByte,w,c
 47775  0042F6  0B0F               	andlw	15
 47776  0042F8  0B07               	andlw	7
 47777  0042FA  6E39               	movwf	displayDigits@digit+2,c
 47778                           
 47779                           ;segment.c: 94: digit[3] = lowByte % 16;
 47780  0042FC  5018               	movf	displayDigits@lowByte,w,c
 47781  0042FE  0B0F               	andlw	15
 47782  004300  6E3A               	movwf	displayDigits@digit+3,c
 47783  004302                     i2l2859:
 47784                           
 47785                           ;segment.c: 96: }
 47786                           ;segment.c: 99: number_to_display_last = number_to_display;
 47787  004302  C05B  F16B         	movff	_number_to_display,displayDigits@number_to_display_last
 47788  004306  C05C  F16C         	movff	_number_to_display+1,displayDigits@number_to_display_last+1
 47789  00430A                     i2l2854:
 47790                           
 47791                           ;segment.c: 100: }
 47792                           ;segment.c: 103: if (DIGIT_MODE == 0 || DIGIT_MODE == 1 || DIGIT_MODE == 2) {
 47793  00430A  5059               	movf	_DIGIT_MODE,w,c
 47794  00430C  B4D8               	btfsc	status,2,c
 47795  00430E  D007               	goto	i2u3663_40
 47796  004310  0459               	decf	_DIGIT_MODE,w,c
 47797  004312  B4D8               	btfsc	status,2,c
 47798  004314  D004               	goto	i2u3663_40
 47799  004316  0E02               	movlw	2
 47800  004318  1859               	xorwf	_DIGIT_MODE,w,c
 47801  00431A  A4D8               	btfss	status,2,c
 47802  00431C  D08A               	goto	i2l2883
 47803  00431E                     i2u3663_40:
 47804                           
 47805                           ;segment.c: 108: if(digit_counter == 0){
 47806  00431E  5052               	movf	displayDigits@digit_counter,w,c
 47807  004320  A4D8               	btfss	status,2,c
 47808  004322  D022               	goto	i2l2870
 47809                           
 47810                           ;segment.c: 109: RC3 = 0;
 47811  004324  9682               	bcf	3970,3,c	;volatile
 47812                           
 47813                           ;segment.c: 112: if(DIGIT_MODE == 0 && number_to_display < 0){
 47814  004326  5059               	movf	_DIGIT_MODE,w,c
 47815  004328  B4D8               	btfsc	status,2,c
 47816  00432A  AE5C               	btfss	_number_to_display+1,7,c
 47817  00432C  D00A               	goto	i2l2864
 47818                           
 47819                           ;segment.c: 115: if(digit[1] > 0){PORTD = 0x40; RC0 = 1;}
 47820  00432E  5038               	movf	displayDigits@digit+1,w,c
 47821  004330  B4D8               	btfsc	status,2,c
 47822  004332  D003               	goto	i2l2865
 47823  004334  0E40               	movlw	64
 47824  004336  6E83               	movwf	3971,c	;volatile
 47825  004338  8082               	bsf	3970,0,c	;volatile
 47826  00433A                     i2l2865:
 47827                           
 47828                           ;segment.c: 116: if(light_decimal_points == 1){PORTD |= 0x80;}
 47829  00433A  AA36               	btfss	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47830  00433C  D015               	goto	i2l2870
 47831  00433E  8E83               	bsf	3971,7,c	;volatile
 47832                           
 47833                           ;segment.c: 117: }
 47834  004340  D013               	goto	i2l2870
 47835  004342                     i2l2864:
 47836                           
 47837                           ;segment.c: 119: else {
 47838                           ;segment.c: 120: PORTD = seg_bcd_hex[digit[0]];
 47839  004342  5037               	movf	displayDigits@digit,w,c
 47840  004344  0D01               	mullw	1
 47841  004346  0E59               	movlw	low _seg_bcd_hex
 47842  004348  24F3               	addwf	prodl,w,c
 47843  00434A  6EF6               	movwf	tblptrl,c
 47844  00434C  0EF3               	movlw	high _seg_bcd_hex
 47845  00434E  20F4               	addwfc	prodh,w,c
 47846  004350  6EF7               	movwf	tblptrh,c
 47847  004352                     	if	0	;There are less than 3 active tblptr bytes
 47848  004352                     	endif
 47849  004352  0008               	tblrd		*
 47850  004354  CFF5 FF83          	movff	tablat,3971	;volatile
 47851                           
 47852                           ;segment.c: 121: if(light_decimal_points == 1){PORTD |= 0x80;}
 47853  004358  BA36               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47854  00435A  8E83               	bsf	3971,7,c	;volatile
 47855                           
 47856                           ;segment.c: 122: if(digit[0] == 0){RC0 = 0;}
 47857  00435C  5037               	movf	displayDigits@digit,w,c
 47858  00435E  A4D8               	btfss	status,2,c
 47859  004360  D002               	goto	i2l2869
 47860  004362  9082               	bcf	3970,0,c	;volatile
 47861  004364  D001               	goto	i2l2870
 47862  004366                     i2l2869:
 47863                           
 47864                           ;segment.c: 123: else{RC0 = 1;}
 47865  004366  8082               	bsf	3970,0,c	;volatile
 47866  004368                     i2l2870:
 47867                           
 47868                           ;segment.c: 124: }
 47869                           ;segment.c: 125: }
 47870                           ;segment.c: 126: if(digit_counter == 1){
 47871  004368  0452               	decf	displayDigits@digit_counter,w,c
 47872  00436A  A4D8               	btfss	status,2,c
 47873  00436C  D024               	goto	i2l2876
 47874                           
 47875                           ;segment.c: 127: RC0 = 0;
 47876  00436E  9082               	bcf	3970,0,c	;volatile
 47877                           
 47878                           ;segment.c: 128: PORTD = seg_bcd_hex[digit[1]];
 47879  004370  5038               	movf	displayDigits@digit+1,w,c
 47880  004372  0D01               	mullw	1
 47881  004374  0E59               	movlw	low _seg_bcd_hex
 47882  004376  24F3               	addwf	prodl,w,c
 47883  004378  6EF6               	movwf	tblptrl,c
 47884  00437A  0EF3               	movlw	high _seg_bcd_hex
 47885  00437C  20F4               	addwfc	prodh,w,c
 47886  00437E  6EF7               	movwf	tblptrh,c
 47887  004380                     	if	0	;There are less than 3 active tblptr bytes
 47888  004380                     	endif
 47889  004380  0008               	tblrd		*
 47890  004382  CFF5 FF83          	movff	tablat,3971	;volatile
 47891                           
 47892                           ;segment.c: 129: if(light_decimal_points == 1){PORTD |= 0x80;}
 47893  004386  BA36               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47894  004388  8E83               	bsf	3971,7,c	;volatile
 47895                           
 47896                           ;segment.c: 130: if(digit[0] == 0 && digit[1] == 0){RC1 = 0;}
 47897  00438A  5037               	movf	displayDigits@digit,w,c
 47898  00438C  A4D8               	btfss	status,2,c
 47899  00438E  D005               	goto	i2l2873
 47900  004390  5038               	movf	displayDigits@digit+1,w,c
 47901  004392  A4D8               	btfss	status,2,c
 47902  004394  D002               	goto	i2l2873
 47903  004396  9282               	bcf	3970,1,c	;volatile
 47904  004398  D001               	goto	i2l2874
 47905  00439A                     i2l2873:
 47906                           
 47907                           ;segment.c: 131: else{RC1 = 1;}
 47908  00439A  8282               	bsf	3970,1,c	;volatile
 47909  00439C                     i2l2874:
 47910                           
 47911                           ;segment.c: 133: if(DIGIT_MODE == 0 && number_to_display < 0){
 47912  00439C  5059               	movf	_DIGIT_MODE,w,c
 47913  00439E  B4D8               	btfsc	status,2,c
 47914  0043A0  AE5C               	btfss	_number_to_display+1,7,c
 47915  0043A2  D009               	goto	i2l2876
 47916                           
 47917                           ;segment.c: 135: if(digit[2] > 0 && digit[1] == 0){PORTD = 0x40; RC1 = 1;}
 47918  0043A4  5039               	movf	displayDigits@digit+2,w,c
 47919  0043A6  B4D8               	btfsc	status,2,c
 47920  0043A8  D006               	goto	i2l2876
 47921  0043AA  5038               	movf	displayDigits@digit+1,w,c
 47922  0043AC  A4D8               	btfss	status,2,c
 47923  0043AE  D003               	goto	i2l2876
 47924  0043B0  0E40               	movlw	64
 47925  0043B2  6E83               	movwf	3971,c	;volatile
 47926  0043B4  8282               	bsf	3970,1,c	;volatile
 47927  0043B6                     i2l2876:
 47928                           
 47929                           ;segment.c: 136: }
 47930                           ;segment.c: 137: }
 47931                           ;segment.c: 138: if(digit_counter == 2){
 47932  0043B6  0E02               	movlw	2
 47933  0043B8  1852               	xorwf	displayDigits@digit_counter,w,c
 47934  0043BA  A4D8               	btfss	status,2,c
 47935  0043BC  D027               	goto	i2l2882
 47936                           
 47937                           ;segment.c: 139: RC1 = 0;
 47938  0043BE  9282               	bcf	3970,1,c	;volatile
 47939                           
 47940                           ;segment.c: 140: PORTD = seg_bcd_hex[digit[2]];
 47941  0043C0  5039               	movf	displayDigits@digit+2,w,c
 47942  0043C2  0D01               	mullw	1
 47943  0043C4  0E59               	movlw	low _seg_bcd_hex
 47944  0043C6  24F3               	addwf	prodl,w,c
 47945  0043C8  6EF6               	movwf	tblptrl,c
 47946  0043CA  0EF3               	movlw	high _seg_bcd_hex
 47947  0043CC  20F4               	addwfc	prodh,w,c
 47948  0043CE  6EF7               	movwf	tblptrh,c
 47949  0043D0                     	if	0	;There are less than 3 active tblptr bytes
 47950  0043D0                     	endif
 47951  0043D0  0008               	tblrd		*
 47952  0043D2  CFF5 FF83          	movff	tablat,3971	;volatile
 47953                           
 47954                           ;segment.c: 141: if(light_decimal_points == 1){PORTD |= 0x80;}
 47955  0043D6  BA36               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47956  0043D8  8E83               	bsf	3971,7,c	;volatile
 47957                           
 47958                           ;segment.c: 142: if(digit[0] == 0 && digit[1] == 0 && digit[2] == 0){RC2 = 0;}
 47959  0043DA  5037               	movf	displayDigits@digit,w,c
 47960  0043DC  A4D8               	btfss	status,2,c
 47961  0043DE  D008               	goto	i2l2879
 47962  0043E0  5038               	movf	displayDigits@digit+1,w,c
 47963  0043E2  A4D8               	btfss	status,2,c
 47964  0043E4  D005               	goto	i2l2879
 47965  0043E6  5039               	movf	displayDigits@digit+2,w,c
 47966  0043E8  A4D8               	btfss	status,2,c
 47967  0043EA  D002               	goto	i2l2879
 47968  0043EC  9482               	bcf	3970,2,c	;volatile
 47969  0043EE  D001               	goto	i2l2880
 47970  0043F0                     i2l2879:
 47971                           
 47972                           ;segment.c: 143: else{RC2 = 1;}
 47973  0043F0  8482               	bsf	3970,2,c	;volatile
 47974  0043F2                     i2l2880:
 47975                           
 47976                           ;segment.c: 145: if(DIGIT_MODE == 0 && number_to_display < 0){
 47977  0043F2  5059               	movf	_DIGIT_MODE,w,c
 47978  0043F4  B4D8               	btfsc	status,2,c
 47979  0043F6  AE5C               	btfss	_number_to_display+1,7,c
 47980  0043F8  D009               	goto	i2l2882
 47981                           
 47982                           ;segment.c: 146: if(digit[3] > 0 && digit[2] == 0){PORTD = 0x40; RC2 = 1;}
 47983  0043FA  503A               	movf	displayDigits@digit+3,w,c
 47984  0043FC  B4D8               	btfsc	status,2,c
 47985  0043FE  D006               	goto	i2l2882
 47986  004400  5039               	movf	displayDigits@digit+2,w,c
 47987  004402  A4D8               	btfss	status,2,c
 47988  004404  D003               	goto	i2l2882
 47989  004406  0E40               	movlw	64
 47990  004408  6E83               	movwf	3971,c	;volatile
 47991  00440A  8482               	bsf	3970,2,c	;volatile
 47992  00440C                     i2l2882:
 47993                           
 47994                           ;segment.c: 147: }
 47995                           ;segment.c: 148: }
 47996                           ;segment.c: 149: if(digit_counter == 3){
 47997  00440C  0E03               	movlw	3
 47998  00440E  1852               	xorwf	displayDigits@digit_counter,w,c
 47999  004410  A4D8               	btfss	status,2,c
 48000  004412  D00F               	goto	i2l2883
 48001                           
 48002                           ;segment.c: 150: RC2 = 0;
 48003  004414  9482               	bcf	3970,2,c	;volatile
 48004                           
 48005                           ;segment.c: 151: PORTD = seg_bcd_hex[digit[3]];
 48006  004416  503A               	movf	displayDigits@digit+3,w,c
 48007  004418  0D01               	mullw	1
 48008  00441A  0E59               	movlw	low _seg_bcd_hex
 48009  00441C  24F3               	addwf	prodl,w,c
 48010  00441E  6EF6               	movwf	tblptrl,c
 48011  004420  0EF3               	movlw	high _seg_bcd_hex
 48012  004422  20F4               	addwfc	prodh,w,c
 48013  004424  6EF7               	movwf	tblptrh,c
 48014  004426                     	if	0	;There are less than 3 active tblptr bytes
 48015  004426                     	endif
 48016  004426  0008               	tblrd		*
 48017  004428  CFF5 FF83          	movff	tablat,3971	;volatile
 48018                           
 48019                           ;segment.c: 152: if(light_decimal_points == 1){PORTD |= 0x80;}
 48020  00442C  BA36               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48021  00442E  8E83               	bsf	3971,7,c	;volatile
 48022                           
 48023                           ;segment.c: 153: RC3 = 1;
 48024  004430  8682               	bsf	3970,3,c	;volatile
 48025  004432                     i2l2883:
 48026                           
 48027                           ;segment.c: 154: }
 48028                           ;segment.c: 155: }
 48029                           ;segment.c: 158: digit_counter++;
 48030  004432  2A52               	incf	displayDigits@digit_counter,f,c
 48031                           
 48032                           ;segment.c: 159: if(digit_counter > 3){digit_counter = 0;}
 48033  004434  0E03               	movlw	3
 48034  004436  6452               	cpfsgt	displayDigits@digit_counter,c
 48035  004438  0012               	return	
 48036  00443A  0E00               	movlw	0
 48037  00443C  6E52               	movwf	displayDigits@digit_counter,c
 48038  00443E  0012               	return	
 48039  004440                     __end_of_displayDigits:
 48040                           	opt stack 0
 48041                           pclatu	equ	0xFFB
 48042                           pclath	equ	0xFFA
 48043                           tblptru	equ	0xFF8
 48044                           tblptrh	equ	0xFF7
 48045                           tblptrl	equ	0xFF6
 48046                           tablat	equ	0xFF5
 48047                           prodh	equ	0xFF4
 48048                           prodl	equ	0xFF3
 48049                           intcon	equ	0xFF2
 48050                           intcon2	equ	0xFF1
 48051                           postinc0	equ	0xFEE
 48052                           fsr0h	equ	0xFEA
 48053                           fsr0l	equ	0xFE9
 48054                           wreg	equ	0xFE8
 48055                           indf1	equ	0xFE7
 48056                           postinc1	equ	0xFE6
 48057                           postdec1	equ	0xFE5
 48058                           fsr1h	equ	0xFE2
 48059                           fsr1l	equ	0xFE1
 48060                           indf2	equ	0xFDF
 48061                           postinc2	equ	0xFDE
 48062                           postdec2	equ	0xFDD
 48063                           plusw2	equ	0xFDB
 48064                           fsr2h	equ	0xFDA
 48065                           fsr2l	equ	0xFD9
 48066                           status	equ	0xFD8
 48067                           
 48068 ;; *************** function i2___awmod *****************
 48069 ;; Defined at:
 48070 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 48071 ;; Parameters:    Size  Location     Type
 48072 ;;  dividend        2   14[COMRAM] int 
 48073 ;;  divisor         2   16[COMRAM] int 
 48074 ;; Auto vars:     Size  Location     Type
 48075 ;;  __awmod         1   19[COMRAM] unsigned char 
 48076 ;;  __awmod         1   18[COMRAM] unsigned char 
 48077 ;; Return value:  Size  Location     Type
 48078 ;;                  2   14[COMRAM] int 
 48079 ;; Registers used:
 48080 ;;		wreg, status,2, status,0
 48081 ;; Tracked objects:
 48082 ;;		On entry : 0/0
 48083 ;;		On exit  : 0/0
 48084 ;;		Unchanged: 0/0
 48085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 48086 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48087 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48089 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48090 ;;Total ram usage:        6 bytes
 48091 ;; Hardware stack levels used:    1
 48092 ;; This function calls:
 48093 ;;		Nothing
 48094 ;; This function is called by:
 48095 ;;		_displayDigits
 48096 ;;		_playArpeggio
 48097 ;;		i2_random_pitches
 48098 ;;		i2_random_pitches_non_repeating
 48099 ;; This function uses a non-reentrant model
 48100 ;;
 48101                           
 48102                           	psect	text154
 48103  0085A0                     __ptext154:
 48104                           	opt stack 0
 48105  0085A0                     i2___awmod:
 48106                           	opt stack 16
 48107                           
 48108                           ;incstack = 0
 48109  0085A0  0E00               	movlw	0
 48110  0085A2  6E14               	movwf	i2___awmod@sign,c
 48111  0085A4  AE10               	btfss	i2___awmod@dividend+1,7,c
 48112  0085A6  D006               	goto	i2l5600
 48113  0085A8  6C0F               	negf	i2___awmod@dividend,c
 48114  0085AA  1E10               	comf	i2___awmod@dividend+1,f,c
 48115  0085AC  B0D8               	btfsc	status,0,c
 48116  0085AE  2A10               	incf	i2___awmod@dividend+1,f,c
 48117  0085B0  0E01               	movlw	1
 48118  0085B2  6E14               	movwf	i2___awmod@sign,c
 48119  0085B4                     i2l5600:
 48120  0085B4  AE12               	btfss	i2___awmod@divisor+1,7,c
 48121  0085B6  D004               	goto	i2l5601
 48122  0085B8  6C11               	negf	i2___awmod@divisor,c
 48123  0085BA  1E12               	comf	i2___awmod@divisor+1,f,c
 48124  0085BC  B0D8               	btfsc	status,0,c
 48125  0085BE  2A12               	incf	i2___awmod@divisor+1,f,c
 48126  0085C0                     i2l5601:
 48127  0085C0  5011               	movf	i2___awmod@divisor,w,c
 48128  0085C2  1012               	iorwf	i2___awmod@divisor+1,w,c
 48129  0085C4  B4D8               	btfsc	status,2,c
 48130  0085C6  D018               	goto	i2l5608
 48131  0085C8  0E01               	movlw	1
 48132  0085CA  6E13               	movwf	i2___awmod@counter,c
 48133  0085CC  D004               	goto	i2l5603
 48134  0085CE  90D8               	bcf	status,0,c
 48135  0085D0  3611               	rlcf	i2___awmod@divisor,f,c
 48136  0085D2  3612               	rlcf	i2___awmod@divisor+1,f,c
 48137  0085D4  2A13               	incf	i2___awmod@counter,f,c
 48138  0085D6                     i2l5603:
 48139  0085D6  AE12               	btfss	i2___awmod@divisor+1,7,c
 48140  0085D8  D7FA               	goto	i2l5604
 48141  0085DA                     i2u3394_40:
 48142  0085DA  5011               	movf	i2___awmod@divisor,w,c
 48143  0085DC  5C0F               	subwf	i2___awmod@dividend,w,c
 48144  0085DE  5012               	movf	i2___awmod@divisor+1,w,c
 48145  0085E0  5810               	subwfb	i2___awmod@dividend+1,w,c
 48146  0085E2  A0D8               	btfss	status,0,c
 48147  0085E4  D004               	goto	i2l5607
 48148  0085E6  5011               	movf	i2___awmod@divisor,w,c
 48149  0085E8  5E0F               	subwf	i2___awmod@dividend,f,c
 48150  0085EA  5012               	movf	i2___awmod@divisor+1,w,c
 48151  0085EC  5A10               	subwfb	i2___awmod@dividend+1,f,c
 48152  0085EE                     i2l5607:
 48153  0085EE  90D8               	bcf	status,0,c
 48154  0085F0  3212               	rrcf	i2___awmod@divisor+1,f,c
 48155  0085F2  3211               	rrcf	i2___awmod@divisor,f,c
 48156  0085F4  2E13               	decfsz	i2___awmod@counter,f,c
 48157  0085F6  D7F1               	goto	i2u3394_40
 48158  0085F8                     i2l5608:
 48159  0085F8  5014               	movf	i2___awmod@sign,w,c
 48160  0085FA  B4D8               	btfsc	status,2,c
 48161  0085FC  D004               	goto	i2l5609
 48162  0085FE  6C0F               	negf	i2___awmod@dividend,c
 48163  008600  1E10               	comf	i2___awmod@dividend+1,f,c
 48164  008602  B0D8               	btfsc	status,0,c
 48165  008604  2A10               	incf	i2___awmod@dividend+1,f,c
 48166  008606                     i2l5609:
 48167  008606  C00F  F00F         	movff	i2___awmod@dividend,?i2___awmod
 48168  00860A  C010  F010         	movff	i2___awmod@dividend+1,?i2___awmod+1
 48169  00860E  0012               	return	
 48170  008610                     __end_ofi2___awmod:
 48171                           	opt stack 0
 48172                           pclatu	equ	0xFFB
 48173                           pclath	equ	0xFFA
 48174                           tblptru	equ	0xFF8
 48175                           tblptrh	equ	0xFF7
 48176                           tblptrl	equ	0xFF6
 48177                           tablat	equ	0xFF5
 48178                           prodh	equ	0xFF4
 48179                           prodl	equ	0xFF3
 48180                           intcon	equ	0xFF2
 48181                           intcon2	equ	0xFF1
 48182                           postinc0	equ	0xFEE
 48183                           fsr0h	equ	0xFEA
 48184                           fsr0l	equ	0xFE9
 48185                           wreg	equ	0xFE8
 48186                           indf1	equ	0xFE7
 48187                           postinc1	equ	0xFE6
 48188                           postdec1	equ	0xFE5
 48189                           fsr1h	equ	0xFE2
 48190                           fsr1l	equ	0xFE1
 48191                           indf2	equ	0xFDF
 48192                           postinc2	equ	0xFDE
 48193                           postdec2	equ	0xFDD
 48194                           plusw2	equ	0xFDB
 48195                           fsr2h	equ	0xFDA
 48196                           fsr2l	equ	0xFD9
 48197                           status	equ	0xFD8
 48198                           
 48199 ;; *************** function i2___awdiv *****************
 48200 ;; Defined at:
 48201 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 48202 ;; Parameters:    Size  Location     Type
 48203 ;;  dividend        2    0[COMRAM] int 
 48204 ;;  divisor         2    2[COMRAM] int 
 48205 ;; Auto vars:     Size  Location     Type
 48206 ;;  __awdiv         2    6[COMRAM] int 
 48207 ;;  __awdiv         1    5[COMRAM] unsigned char 
 48208 ;;  __awdiv         1    4[COMRAM] unsigned char 
 48209 ;; Return value:  Size  Location     Type
 48210 ;;                  2    0[COMRAM] int 
 48211 ;; Registers used:
 48212 ;;		wreg, status,2, status,0
 48213 ;; Tracked objects:
 48214 ;;		On entry : 0/0
 48215 ;;		On exit  : 0/0
 48216 ;;		Unchanged: 0/0
 48217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 48218 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48219 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48221 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 48222 ;;Total ram usage:        8 bytes
 48223 ;; Hardware stack levels used:    1
 48224 ;; This function calls:
 48225 ;;		Nothing
 48226 ;; This function is called by:
 48227 ;;		_displayDigits
 48228 ;; This function uses a non-reentrant model
 48229 ;;
 48230                           
 48231                           	psect	text155
 48232  007B88                     __ptext155:
 48233                           	opt stack 0
 48234  007B88                     i2___awdiv:
 48235                           	opt stack 16
 48236                           
 48237                           ;incstack = 0
 48238  007B88  0E00               	movlw	0
 48239  007B8A  6E06               	movwf	i2___awdiv@sign,c
 48240  007B8C  AE04               	btfss	i2___awdiv@divisor+1,7,c
 48241  007B8E  D006               	goto	i2l5587
 48242  007B90  6C03               	negf	i2___awdiv@divisor,c
 48243  007B92  1E04               	comf	i2___awdiv@divisor+1,f,c
 48244  007B94  B0D8               	btfsc	status,0,c
 48245  007B96  2A04               	incf	i2___awdiv@divisor+1,f,c
 48246  007B98  0E01               	movlw	1
 48247  007B9A  6E06               	movwf	i2___awdiv@sign,c
 48248  007B9C                     i2l5587:
 48249  007B9C  AE02               	btfss	i2___awdiv@dividend+1,7,c
 48250  007B9E  D006               	goto	i2l5588
 48251  007BA0  6C01               	negf	i2___awdiv@dividend,c
 48252  007BA2  1E02               	comf	i2___awdiv@dividend+1,f,c
 48253  007BA4  B0D8               	btfsc	status,0,c
 48254  007BA6  2A02               	incf	i2___awdiv@dividend+1,f,c
 48255  007BA8  0E01               	movlw	1
 48256  007BAA  1A06               	xorwf	i2___awdiv@sign,f,c
 48257  007BAC                     i2l5588:
 48258  007BAC  0E00               	movlw	0
 48259  007BAE  6E08               	movwf	i2___awdiv@quotient+1,c
 48260  007BB0  0E00               	movlw	0
 48261  007BB2  6E07               	movwf	i2___awdiv@quotient,c
 48262  007BB4  5003               	movf	i2___awdiv@divisor,w,c
 48263  007BB6  1004               	iorwf	i2___awdiv@divisor+1,w,c
 48264  007BB8  B4D8               	btfsc	status,2,c
 48265  007BBA  D01C               	goto	i2l5595
 48266  007BBC  0E01               	movlw	1
 48267  007BBE  6E05               	movwf	i2___awdiv@counter,c
 48268  007BC0  D004               	goto	i2l5590
 48269  007BC2  90D8               	bcf	status,0,c
 48270  007BC4  3603               	rlcf	i2___awdiv@divisor,f,c
 48271  007BC6  3604               	rlcf	i2___awdiv@divisor+1,f,c
 48272  007BC8  2A05               	incf	i2___awdiv@counter,f,c
 48273  007BCA                     i2l5590:
 48274  007BCA  AE04               	btfss	i2___awdiv@divisor+1,7,c
 48275  007BCC  D7FA               	goto	i2l5591
 48276  007BCE                     i2u3388_40:
 48277  007BCE  90D8               	bcf	status,0,c
 48278  007BD0  3607               	rlcf	i2___awdiv@quotient,f,c
 48279  007BD2  3608               	rlcf	i2___awdiv@quotient+1,f,c
 48280  007BD4  5003               	movf	i2___awdiv@divisor,w,c
 48281  007BD6  5C01               	subwf	i2___awdiv@dividend,w,c
 48282  007BD8  5004               	movf	i2___awdiv@divisor+1,w,c
 48283  007BDA  5802               	subwfb	i2___awdiv@dividend+1,w,c
 48284  007BDC  A0D8               	btfss	status,0,c
 48285  007BDE  D005               	goto	i2l5594
 48286  007BE0  5003               	movf	i2___awdiv@divisor,w,c
 48287  007BE2  5E01               	subwf	i2___awdiv@dividend,f,c
 48288  007BE4  5004               	movf	i2___awdiv@divisor+1,w,c
 48289  007BE6  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 48290  007BE8  8007               	bsf	i2___awdiv@quotient,0,c
 48291  007BEA                     i2l5594:
 48292  007BEA  90D8               	bcf	status,0,c
 48293  007BEC  3204               	rrcf	i2___awdiv@divisor+1,f,c
 48294  007BEE  3203               	rrcf	i2___awdiv@divisor,f,c
 48295  007BF0  2E05               	decfsz	i2___awdiv@counter,f,c
 48296  007BF2  D7ED               	goto	i2u3388_40
 48297  007BF4                     i2l5595:
 48298  007BF4  5006               	movf	i2___awdiv@sign,w,c
 48299  007BF6  B4D8               	btfsc	status,2,c
 48300  007BF8  D004               	goto	i2l5596
 48301  007BFA  6C07               	negf	i2___awdiv@quotient,c
 48302  007BFC  1E08               	comf	i2___awdiv@quotient+1,f,c
 48303  007BFE  B0D8               	btfsc	status,0,c
 48304  007C00  2A08               	incf	i2___awdiv@quotient+1,f,c
 48305  007C02                     i2l5596:
 48306  007C02  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 48307  007C06  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 48308  007C0A  0012               	return	
 48309  007C0C                     __end_ofi2___awdiv:
 48310                           	opt stack 0
 48311                           pclatu	equ	0xFFB
 48312                           pclath	equ	0xFFA
 48313                           tblptru	equ	0xFF8
 48314                           tblptrh	equ	0xFF7
 48315                           tblptrl	equ	0xFF6
 48316                           tablat	equ	0xFF5
 48317                           prodh	equ	0xFF4
 48318                           prodl	equ	0xFF3
 48319                           intcon	equ	0xFF2
 48320                           intcon2	equ	0xFF1
 48321                           postinc0	equ	0xFEE
 48322                           fsr0h	equ	0xFEA
 48323                           fsr0l	equ	0xFE9
 48324                           wreg	equ	0xFE8
 48325                           indf1	equ	0xFE7
 48326                           postinc1	equ	0xFE6
 48327                           postdec1	equ	0xFE5
 48328                           fsr1h	equ	0xFE2
 48329                           fsr1l	equ	0xFE1
 48330                           indf2	equ	0xFDF
 48331                           postinc2	equ	0xFDE
 48332                           postdec2	equ	0xFDD
 48333                           plusw2	equ	0xFDB
 48334                           fsr2h	equ	0xFDA
 48335                           fsr2l	equ	0xFD9
 48336                           status	equ	0xFD8
 48337                           pclatu	equ	0xFFB
 48338                           pclath	equ	0xFFA
 48339                           tblptru	equ	0xFF8
 48340                           tblptrh	equ	0xFF7
 48341                           tblptrl	equ	0xFF6
 48342                           tablat	equ	0xFF5
 48343                           prodh	equ	0xFF4
 48344                           prodl	equ	0xFF3
 48345                           intcon	equ	0xFF2
 48346                           intcon2	equ	0xFF1
 48347                           postinc0	equ	0xFEE
 48348                           fsr0h	equ	0xFEA
 48349                           fsr0l	equ	0xFE9
 48350                           wreg	equ	0xFE8
 48351                           indf1	equ	0xFE7
 48352                           postinc1	equ	0xFE6
 48353                           postdec1	equ	0xFE5
 48354                           fsr1h	equ	0xFE2
 48355                           fsr1l	equ	0xFE1
 48356                           indf2	equ	0xFDF
 48357                           postinc2	equ	0xFDE
 48358                           postdec2	equ	0xFDD
 48359                           plusw2	equ	0xFDB
 48360                           fsr2h	equ	0xFDA
 48361                           fsr2l	equ	0xFD9
 48362                           status	equ	0xFD8
 48363                           
 48364                           	psect	rparam
 48365  0000                     pclatu	equ	0xFFB
 48366                           pclath	equ	0xFFA
 48367                           tblptru	equ	0xFF8
 48368                           tblptrh	equ	0xFF7
 48369                           tblptrl	equ	0xFF6
 48370                           tablat	equ	0xFF5
 48371                           prodh	equ	0xFF4
 48372                           prodl	equ	0xFF3
 48373                           intcon	equ	0xFF2
 48374                           intcon2	equ	0xFF1
 48375                           postinc0	equ	0xFEE
 48376                           fsr0h	equ	0xFEA
 48377                           fsr0l	equ	0xFE9
 48378                           wreg	equ	0xFE8
 48379                           indf1	equ	0xFE7
 48380                           postinc1	equ	0xFE6
 48381                           postdec1	equ	0xFE5
 48382                           fsr1h	equ	0xFE2
 48383                           fsr1l	equ	0xFE1
 48384                           indf2	equ	0xFDF
 48385                           postinc2	equ	0xFDE
 48386                           postdec2	equ	0xFDD
 48387                           plusw2	equ	0xFDB
 48388                           fsr2h	equ	0xFDA
 48389                           fsr2l	equ	0xFD9
 48390                           status	equ	0xFD8
 48391                           
 48392                           	psect	temp
 48393  00005F                     btemp:
 48394                           	opt stack 0
 48395  00005F                     	ds	1
 48396  0000                     int$flags	set	btemp
 48397  0000                     wtemp6	set	btemp+1
 48398                           pclatu	equ	0xFFB
 48399                           pclath	equ	0xFFA
 48400                           tblptru	equ	0xFF8
 48401                           tblptrh	equ	0xFF7
 48402                           tblptrl	equ	0xFF6
 48403                           tablat	equ	0xFF5
 48404                           prodh	equ	0xFF4
 48405                           prodl	equ	0xFF3
 48406                           intcon	equ	0xFF2
 48407                           intcon2	equ	0xFF1
 48408                           postinc0	equ	0xFEE
 48409                           fsr0h	equ	0xFEA
 48410                           fsr0l	equ	0xFE9
 48411                           wreg	equ	0xFE8
 48412                           indf1	equ	0xFE7
 48413                           postinc1	equ	0xFE6
 48414                           postdec1	equ	0xFE5
 48415                           fsr1h	equ	0xFE2
 48416                           fsr1l	equ	0xFE1
 48417                           indf2	equ	0xFDF
 48418                           postinc2	equ	0xFDE
 48419                           postdec2	equ	0xFDD
 48420                           plusw2	equ	0xFDB
 48421                           fsr2h	equ	0xFDA
 48422                           fsr2l	equ	0xFD9
 48423                           status	equ	0xFD8


Data Sizes:
    Strings     667
    Constant    5281
    Data        238
    BSS         382
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      94
    BANK0           160    112     160
    BANK1           256     80     255
    BANK2           256      0     252
    BANK3           256      0     105
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_62(CODE[5]), STR_60(CODE[5]), STR_57(CODE[5]), STR_55(CODE[5]), 
		 -> STR_52(CODE[5]), STR_51(CODE[5]), STR_43(CODE[5]), STR_41(CODE[5]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[5]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[5]), 
		 -> STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    arpeggioPtr	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), ARPEGGIO_RANDOM(BANK2[16]), ARPEGGIO_SORTED(BANK2[16]), ARPEGGIO(BANK1[16]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    playThisNote8@mode_p	PTR unsigned char  size(2) Largest target is 15
		 -> locrian_key(CODE[15]), aeolian_key(CODE[15]), mixolydian_key(CODE[15]), lydian_key(CODE[15]), 
		 -> phrygian_key(CODE[15]), dorian_key(CODE[15]), ionian_key(CODE[15]), 

    playSeventh@seventh_p	PTR unsigned char  size(2) Largest target is 4
		 -> diminished_7th(BANK2[4]), half_diminished_7th(BANK2[4]), minor_7th(BANK2[4]), major_7th(BANK2[4]), 
		 -> dominant_7th(BANK2[4]), 

    playTriad@triad_p	PTR unsigned char  size(2) Largest target is 3
		 -> diminished_triad(BANK1[3]), augmented_triad(BANK1[3]), minor_triad(BANK1[3]), major_triad(BANK1[3]), 

    Lcd_Print_String@a	PTR unsigned char  size(2) Largest target is 2397
		 -> STR_76(CODE[16]), STR_75(CODE[12]), STR_74(CODE[10]), STR_73(CODE[12]), 
		 -> STR_72(CODE[10]), STR_71(CODE[12]), STR_70(CODE[10]), STR_69(CODE[12]), 
		 -> STR_68(CODE[10]), STR_67(CODE[12]), STR_66(CODE[13]), STR_65(CODE[15]), 
		 -> STR_64(CODE[15]), STR_63(CODE[16]), STR_61(CODE[14]), STR_59(CODE[12]), 
		 -> STR_58(CODE[15]), STR_56(CODE[14]), STR_54(CODE[15]), STR_53(CODE[17]), 
		 -> STR_50(CODE[9]), STR_49(CODE[10]), STR_48(CODE[13]), STR_47(CODE[13]), 
		 -> STR_46(CODE[17]), STR_45(CODE[14]), STR_44(CODE[14]), STR_42(CODE[15]), 
		 -> STR_40(CODE[16]), STR_39(CODE[17]), STR_38(CODE[13]), STR_37(CODE[17]), 
		 -> STR_36(CODE[8]), STR_35(CODE[8]), STR_34(CODE[12]), STR_33(CODE[17]), 
		 -> STR_32(CODE[15]), STR_31(CODE[14]), STR_30(CODE[17]), STR_29(CODE[15]), 
		 -> STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[16]), STR_25(CODE[14]), 
		 -> STR_24(CODE[12]), LCD_STRINGS(CODE[2397]), STR_23(CODE[13]), STR_22(CODE[17]), 
		 -> STR_21(CODE[16]), STR_20(CODE[5]), STR_19(CODE[11]), STR_18(CODE[11]), 
		 -> STR_17(CODE[11]), STR_16(CODE[10]), STR_15(CODE[11]), STR_14(CODE[11]), 
		 -> STR_13(CODE[11]), STR_12(CODE[10]), string2display(BANK1[5]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_playArpeggio
    _playArpeggio->i2_random_pitches_non_repeating
    i2_random_pitches_non_repeating->i2___awmod
    i2_random_pitches->i2___awmod
    i2_rand->i2___lmul
    i2_noteOn->i2_noteOff
    i2_noteOff->i2_sendUSB
    _display->_displayDigits
    _displayDigits->i2___awmod
    i2___awmod->i2_rand

Critical Paths under _main in BANK0

    _main->_menu_lcd
    _panic_button->_controlChange
    _menu_lcd->_Function_G
    _Lcd_Clear->_Lcd_Cmd
    _Function_H_9->_Function_H_9_1
    _Function_H_9->_Function_H_9_2
    _Function_H_9->_Function_H_9_3
    _Function_H_9->_Function_H_9_4
    _Function_H_9_4->_Lcd_Print_String
    _Function_H_9_3->_Lcd_Print_String
    _Function_H_9_2->_Lcd_Print_String
    _Function_H_9_1->_Lcd_Print_String
    _Function_H_8->_Lcd_Print_String
    _Function_H_8_2->_Lcd_Print_String
    _Function_H_8_1->_Lcd_Print_String
    _Function_H_7->_Lcd_Print_String
    _Function_H_6_2->_Lcd_Print_String
    _Function_H_6_1->_playThisNote8
    _Function_H_5->_Lcd_Print_String
    _Function_H_3->_int2string
    _Function_H_2->_calculate_pulse_length
    _Function_H_1->_Lcd_Print_String
    _Function_G->_Function_G_2
    _Function_G_4->_exitFunction
    _exitFunction->_Lcd_Print_String
    _Function_G_3->_Lcd_Print_String
    _loadFromEEPROM->_calculate_pulse_length
    _calculate_pulse_length->___fltol
    _exitLoad->_Lcd_Print_String
    _Function_G_1->_saveToEEPROM
    _exitSave->_Lcd_Print_String
    _eepromExit->_Lcd_Print_String
    _Function_F->_int2string
    _programChange->_sendUSB
    _Function_E_2->_int2string
    _Function_E_1->_int2string
    _Function_D_5->_setControllerNumbers
    _Function_D_4->_setControllerNumbers
    _Function_D_3->_setControllerNumbers
    _setControllerNumbers->_int2string
    _calculate_alpha->___fldiv
    ___fldiv->___flmul
    _Function_D_1->_Lcd_Print_String
    _Function_C->_Function_C_2
    _Function_C->_Function_C_3
    _Function_C_3->_int2string
    _Function_C_2->_int2string
    _int2string->___awmod
    _Function_C_1->_Lcd_Print_String
    _Function_B->_Lcd_Print_String
    _Function_A->_Function_A_1
    _Function_A->_Function_A_2
    _Function_A->_Function_A_3
    _Function_A_3->_Lcd_Print_String
    _Function_A_2->_Lcd_Print_String
    _Function_A_1->_Lcd_Print_String
    _clear_row2->_Lcd_Print_String
    _clear_row1->_Lcd_Print_String
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->___wmul
    _Lcd_Print_Char->_Lcd_SetBit
    _initializeSaveSlotsOnce->_saveToEEPROM
    _saveToEEPROM->_Write_b_eep
    _initializeMenuArray->___wmul
    _displayTest->_strcpy
    _digitalInputs->_processOctave
    _processOctave->_playThisNote8
    ___wmul->___lbmod
    _processKeyboard->_keyboard_eight_note_efficient
    _keyboard_sharps_only_efficient->_playThisNotePentatonic
    _keyboard_eight_note_efficient->_playThisNote8
    _playThisNote8->_playDiatonicSeventhMajor
    _playThisNote8->_playDiatonicSeventhMinor
    _playThisNote8->_playDiatonicTriadMajor
    _playThisNote8->_playDiatonicTriadMinor
    _keyboard_all_note_efficient->_playThisNote
    _playThisNote->_playSeventh
    _playThisNote->_playTriad
    _noteOn->_noteOff
    _setupArpeggio->_random_pitches_non_repeating
    _random_pitches_non_repeating->___awmod
    _random_pitches->___awmod
    _rand->___lmul
    ___awmod->_rand
    _delete_notes_from_arpeggio->_rotateArrayLeft
    _processDrumpad->_noteOnDrum
    _noteOnDrum->_noteOff
    _noteOffDrum->_sendUSB
    _key_press_release_note_off->_noteOff
    _noteOff->_sendUSB
    _analogInputs->_readPotentiometers
    _readPotentiometers->___fltol
    _processPotentiometers->_controlChange
    _processPotentiometers->_pitchBend
    _pitchBend->_sendUSB
    _controlChange->_sendUSB
    _map->___aldiv
    ___aldiv->___lmul
    ___fltol->___fladd
    ___flneg->___fldiv
    ___flmul->___xxtofl
    ___fladd->___flneg
    _Lcd_Start->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_SetBit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _selectSlotOnBoot->_loadFromEEPROM
    _Function_G_2->_loadFromEEPROM

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0 9889587
                                            111 BANK0      1     1      0
                     _ADC_Initialize
                          _Lcd_Start
                         _Read_b_eep
                       _analogInputs
                    _calculate_alpha
             _calculate_pulse_length
                      _digitalInputs
                        _displayTest
                _initializeMenuArray
            _initializeSaveSlotsOnce
                           _menu_lcd
                       _panic_button
               _processEncoderBuxton
                   _selectSlotOnBoot
                              _setup
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectSlotOnBoot                                     1     1      0   10873
                                            108 BANK0      1     1      0
                         _Read_b_eep
                     _loadFromEEPROM
 ---------------------------------------------------------------------------------
 (1) _panic_button                                         0     0      0    7555
                      _controlChange
 ---------------------------------------------------------------------------------
 (1) _menu_lcd                                             1     1      0 4191755
                                            110 BANK0      1     1      0
                         _Function_A
                         _Function_B
                         _Function_C
                         _Function_D
                         _Function_E
                         _Function_F
                         _Function_G
                         _Function_H
                          _Lcd_Clear
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                       _exitFunction
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Function_H                                           1     1      0 3244070
                                            108 BANK0      1     1      0
                       _Function_H_1
                       _Function_H_2
                       _Function_H_3
                       _Function_H_4
                       _Function_H_5
                       _Function_H_6
                       _Function_H_7
                       _Function_H_8
                       _Function_H_9
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_9                                         1     1      0  182290
                                             17 BANK0      1     1      0
                     _Function_H_9_1
                     _Function_H_9_2
                     _Function_H_9_3
                     _Function_H_9_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_4                                       1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_3                                       1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_2                                       1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_1                                       1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_8                                         1     1      0   72250
                                             16 BANK0      1     1      0
                     _Function_H_8_1
                     _Function_H_8_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_2                                       0     0      0   17896
                   _Lcd_Print_String
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_1                                       0     0      0   27908
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_7                                         0     0      0   30567
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _Function_H_6                                         1     1      0 2778482
                                             40 BANK0      1     1      0
                     _Function_H_6_1
                     _Function_H_6_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_2                                       0     0      0   30567
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_1                                       0     0      0 2721469
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                       _playThisNote
                      _playThisNote8
             _playThisNotePentatonic
               _processEncoderBuxton
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _Function_H_5                                         2     2      0   36548
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_4                                         1     1      0   41539
                                             23 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
                      _setupArpeggio
 ---------------------------------------------------------------------------------
 (3) _Function_H_3                                         0     0      0   23683
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_2                                         0     0      0   31710
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
             _calculate_pulse_length
                         _clear_row2
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_H_1                                         0     0      0   20555
                   _Lcd_Print_String
                         _clear_row2
               _processEncoderBuxton
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Function_G                                           1     1      0  289283
                                            109 BANK0      1     1      0
                       _Function_G_1
                       _Function_G_2
                       _Function_G_3
                       _Function_G_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                         _eepromExit
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_G_4                                         1     1      0   55508
                                             18 BANK0      1     1      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                       _exitFunction
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _exitFunction                                         2     2      0   17896
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_3                                         2     2      0   29062
                                             16 BANK0      2     2      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                         _clear_row1
                         _clear_row2
 ---------------------------------------------------------------------------------
 (3) _Function_G_2                                         1     1      0   83808
                                            108 BANK0      1     1      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitLoad
                     _loadFromEEPROM
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _loadFromEEPROM                                      80    80      0   10404
                                              0 BANK1     80    80      0
                         _Read_b_eep
             _calculate_pulse_length
 ---------------------------------------------------------------------------------
 (3) _calculate_pulse_length                              10     8      2    8027
                                             98 BANK0     10     8      2
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) _exitLoad                                             2     2      0   17896
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_1                                         1     1      0   76563
                                             84 BANK0      1     1      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitSave
               _processEncoderBuxton
                       _saveToEEPROM
 ---------------------------------------------------------------------------------
 (4) _exitSave                                             2     2      0   17896
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _eepromExit                                           2     2      0   17896
                                             16 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (2) _Function_F                                           0     0      0   25288
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
               _processEncoderBuxton
                      _programChange
 ---------------------------------------------------------------------------------
 (3) _programChange                                        3     1      2    1605
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _Function_E                                           1     1      0   53788
                                             26 BANK0      1     1      0
                       _Function_E_1
                       _Function_E_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_E_2                                         0     0      0   13671
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_E_1                                         0     0      0   13671
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _Function_D                                           1     1      0  232876
                                             64 BANK0      1     1      0
                       _Function_D_1
                       _Function_D_2
                       _Function_D_3
                       _Function_D_4
                       _Function_D_5
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_D_5                                         2     2      0   50856
                                             28 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
               _setControllerNumbers
 ---------------------------------------------------------------------------------
 (3) _Function_D_4                                         2     2      0   50856
                                             28 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
               _setControllerNumbers
 ---------------------------------------------------------------------------------
 (3) _Function_D_3                                         2     2      0   50856
                                             28 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
               _setControllerNumbers
 ---------------------------------------------------------------------------------
 (4) _setControllerNumbers                                 2     2      0   14375
                                             26 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
 ---------------------------------------------------------------------------------
 (3) _Function_D_2                                         0     0      0   17336
                           _Busy_eep
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                        _Write_b_eep
                    _calculate_alpha
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _calculate_alpha                                      0     0      0    2511
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    1809
                                             39 BANK0     25    17      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Function_D_1                                         1     1      0   36526
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
            _setControllerResolution
 ---------------------------------------------------------------------------------
 (4) _setControllerResolution                              1     1      0      68
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Function_C                                           1     1      0  147616
                                             28 BANK0      1     1      0
                       _Function_C_1
                       _Function_C_2
                       _Function_C_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_C_3                                         2     2      0   42356
                                             26 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_C_2                                         2     2      0   42356
                                             26 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _int2string
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (4) _int2string                                           6     4      2    3659
                                             20 BANK0      6     4      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     904
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _Function_C_1                                         1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _Function_B                                           1     1      0   26446
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (2) _Function_A                                           1     1      0  135820
                                             17 BANK0      1     1      0
                       _Function_A_1
                       _Function_A_2
                       _Function_A_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_A_3                                         1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_A_2                                         1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (3) _Function_A_1                                         1     1      0   36458
                                             16 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (1) _processEncoderBuxton                                 7     7      0       0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _clear_row2                                           0     0      0   10012
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (3) _clear_row1                                           0     0      0   10012
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (4) _Lcd_Set_Cursor                                       5     4      1    2128
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Print_String                                     6     4      2    7884
                                             10 BANK0      6     4      2
                     _Lcd_Print_Char
                            ___lbmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Lcd_Print_Char                                       7     7      0     270
                                              1 BANK0      7     7      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1    2919
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _initializeSaveSlotsOnce                              1     1      0    4760
                                             84 BANK0      1     1      0
                           _Busy_eep
                         _Read_b_eep
                        _Write_b_eep
                       _saveToEEPROM
 ---------------------------------------------------------------------------------
 (4) _saveToEEPROM                                        80    80      0    3159
                                              4 BANK0     80    80      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (4) _Write_b_eep                                          4     1      3    1154
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (4) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2     424
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initializeMenuArray                                  3     3      0    5744
                                             10 BANK0      3     3      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _displayTest                                          2     2      0    2659
                                              6 BANK0      2     2      0
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _digitalInputs                                        0     0      0 5635927
                 _buttonInputsSerial
                  _keyboardTranspose
                     _processDrumpad
                    _processKeyboard
                      _processOctave
 ---------------------------------------------------------------------------------
 (2) _processOctave                                        2     2      0 2780332
                                             40 BANK0      2     2      0
                            ___awmod
                             ___wmul
         _key_press_release_note_off
                       _playThisNote
                      _playThisNote8
             _playThisNotePentatonic
                    _printThisNumber
                     _random_pitches
       _random_pitches_non_repeating
                      _resetArpeggio
                             _strcpy
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    2659
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    5631
                                              4 BANK0      6     2      4
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _processKeyboard                                      0     0      0 2694352
        _keyboard_all_note_efficient
      _keyboard_eight_note_efficient
     _keyboard_sharps_only_efficient
 ---------------------------------------------------------------------------------
 (3) _keyboard_sharps_only_efficient                       2     2      0  301094
                                             29 BANK0      2     2      0
             _playThisNotePentatonic
 ---------------------------------------------------------------------------------
 (5) _playThisNotePentatonic                               7     6      1  300174
                                             23 BANK0      6     5      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (3) _keyboard_eight_note_efficient                        2     2      0 1496953
                                             40 BANK0      2     2      0
                      _playThisNote8
 ---------------------------------------------------------------------------------
 (5) _playThisNote8                                        9     8      1 1495573
                                             31 BANK0      9     8      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
           _playDiatonicSeventhMajor
           _playDiatonicSeventhMinor
             _playDiatonicTriadMajor
             _playDiatonicTriadMinor
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _playDiatonicTriadMinor                               8     7      1  298597
                                             23 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _playDiatonicTriadMajor                               8     7      1  298421
                                             23 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _playDiatonicSeventhMinor                             8     7      1  298597
                                             23 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _playDiatonicSeventhMajor                             8     7      1  298421
                                             23 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (3) _keyboard_all_note_efficient                          1     1      0  896305
                                             37 BANK0      1     1      0
                       _playThisNote
 ---------------------------------------------------------------------------------
 (5) _playThisNote                                         5     5      0  895155
                                             32 BANK0      5     5      0
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                        _playSeventh
                          _playTriad
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _playTriad                                            9     9      0  298349
                                             23 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _playSeventh                                          9     9      0  298350
                                             23 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _noteOn                                               3     1      2  145212
                                             14 BANK0      3     1      2
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (6) _finish_arpeggio_setup                                0     0      0    5081
                      _resetArpeggio
                      _setupArpeggio
 ---------------------------------------------------------------------------------
 (7) _setupArpeggio                                        0     0      0    5081
                         _copy_array
                     _random_pitches
       _random_pitches_non_repeating
 ---------------------------------------------------------------------------------
 (8) _random_pitches_non_repeating                         3     3      0    2518
                                             20 BANK0      3     3      0
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (8) _random_pitches                                       2     2      0    2451
                                             20 BANK0      2     2      0
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (9) _rand                                                 2     0      2     522
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (9) ___awmod                                              6     2      4    1860
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (8) _copy_array                                           1     1      0     112
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _resetArpeggio                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _delete_notes_from_arpeggio                           2     2      0     269
                                              9 BANK0      2     2      0
                     _findArrayIndex
                    _rotateArrayLeft
 ---------------------------------------------------------------------------------
 (7) _rotateArrayLeft                                      9     9      0     112
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (7) _findArrayIndex                                       3     3      0     112
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (6) _add_notes_to_arpeggio                                8     8      0      22
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (2) _processDrumpad                                       0     0      0   86840
                      _controlChange
                        _noteOffDrum
                         _noteOnDrum
 ---------------------------------------------------------------------------------
 (3) _noteOnDrum                                           3     1      2   76616
                                             14 BANK0      3     1      2
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (3) _noteOffDrum                                          3     1      2    2669
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _keyboardTranspose                                    0     0      0   74311
         _key_press_release_note_off
                    _printThisNumber
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _wait_one_pulse                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _printThisNumber                                      2     0      2     452
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _key_press_release_note_off                           0     0      0   73837
                            _noteOff
 ---------------------------------------------------------------------------------
 (7) _noteOff                                              3     1      2   73837
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _buttonInputsSerial                                   6     6      0      92
                                              0 BANK0      6     6      0
                              _clock
                               _load
 ---------------------------------------------------------------------------------
 (3) _load                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clock                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _analogInputs                                         0     0      0   19010
                 _readPotentiometers
 ---------------------------------------------------------------------------------
 (2) _readPotentiometers                                  12    12      0   19010
                                             98 BANK0     12    12      0
                           _ADC_Read
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _map
              _processPotentiometers
 ---------------------------------------------------------------------------------
 (3) _processPotentiometers                                6     6      0    9930
                                             14 BANK0      6     6      0
                      _controlChange
                          _pitchBend
 ---------------------------------------------------------------------------------
 (4) _pitchBend                                            3     1      2    1779
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _controlChange                                        3     1      2    7555
                                             11 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (3) _sendUSB                                             11     9      2    1343
                                              0 BANK0     11     9      2
 ---------------------------------------------------------------------------------
 (3) _sendOut                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _map                                                 32    12     20    1888
                                             26 BANK0     32    12     20
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (10) ___lmul                                             12     4      8     522
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     452
                                             12 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     702
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     381
                                             88 BANK0     10     6      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     197
                                             64 BANK0      4     0      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    2200
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    2692
                                             68 BANK0     20    12      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             5     3      2      23
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Start                                            3     3      0     244
                                              3 BANK0      3     3      0
                            _Lcd_Cmd
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (5) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (6) _Lcd_SetBit                                           1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR                                                20    20      0    8044
                                             29 COMRAM    20    20      0
                            _display
                _encoderInputsBuxton
                       _playArpeggio
                          i2___lbmod
                  i2_printThisNumber
 ---------------------------------------------------------------------------------
 (13) i2_printThisNumber                                   2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (13) i2___lbmod                                           4     3      1     211
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (13) _playArpeggio                                        6     6      0    6376
                                             23 COMRAM     6     6      0
                       _sort_pitches
                          i2___awmod
                          i2_noteOff
                           i2_noteOn
                             i2_rand
                   i2_random_pitches
     i2_random_pitches_non_repeating
 ---------------------------------------------------------------------------------
 (14) i2_random_pitches_non_repeating                      3     3      0     940
                                             20 COMRAM     3     3      0
                          i2___awmod
                             i2_rand
 ---------------------------------------------------------------------------------
 (14) i2_random_pitches                                    2     2      0     873
                                             20 COMRAM     2     2      0
                          i2___awmod
                             i2_rand
 ---------------------------------------------------------------------------------
 (15) i2_rand                                              2     0      2     144
                                             12 COMRAM     2     0      2
                           i2___lmul
 ---------------------------------------------------------------------------------
 (16) i2___lmul                                           12     4      8     144
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (14) i2_noteOn                                            3     1      2    2116
                                             14 COMRAM     3     1      2
                          i2_noteOff
                          i2_sendOut
                          i2_sendUSB
 ---------------------------------------------------------------------------------
 (15) i2_noteOff                                           3     1      2    1263
                                             11 COMRAM     3     1      2
                          i2_sendOut
                          i2_sendUSB
 ---------------------------------------------------------------------------------
 (15) i2_sendUSB                                          11     9      2     373
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (15) i2_sendOut                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) _sort_pitches                                        5     5      0     380
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (13) _encoderInputsBuxton                                 6     6      0      69
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (13) _display                                             0     0      0    1340
                      _displayDigits
                      _displayString
 ---------------------------------------------------------------------------------
 (14) _displayString                                       2     2      0     134
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (14) _displayDigits                                       5     5      0    1206
                                             20 COMRAM     5     5      0
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     660
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                             i2_rand (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awdiv                                           8     4      4     456
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _Lcd_Start
     _Lcd_Cmd
       _Lcd_SetBit
     _Lcd_SetBit
   _Read_b_eep
   _analogInputs
     _readPotentiometers
       _ADC_Read
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         ___xxtofl (ARG)
       ___flneg
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _map
         ___aldiv
           ___lmul (ARG)
         ___lmul
       _processPotentiometers
         _controlChange
           _sendOut
           _sendUSB
         _pitchBend
           _sendOut
           _sendUSB
   _calculate_alpha
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _calculate_pulse_length
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       ___xxtofl (ARG)
     ___flneg
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _digitalInputs
     _buttonInputsSerial
       _clock
       _load
     _keyboardTranspose
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _printThisNumber
       _wait_one_pulse
     _processDrumpad
       _controlChange
         _sendOut
         _sendUSB
       _noteOffDrum
         _sendOut
         _sendUSB
       _noteOnDrum
         _noteOff
           _sendOut
           _sendUSB
         _sendOut
         _sendUSB
     _processKeyboard
       _keyboard_all_note_efficient
         _playThisNote
           _add_notes_to_arpeggio
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playSeventh
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playTriad
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_eight_note_efficient
         _playThisNote8
           _add_notes_to_arpeggio
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playDiatonicSeventhMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicSeventhMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_sharps_only_efficient
         _playThisNotePentatonic
           _add_notes_to_arpeggio
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
     _processOctave
       ___awmod
         ___awdiv (ARG)
         _rand (ARG)
           ___lmul
       ___wmul
         ___lbmod (ARG)
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _playThisNote
         _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
           _findArrayIndex
           _rotateArrayLeft
         _finish_arpeggio_setup
           _resetArpeggio
           _setupArpeggio
             _copy_array
             _random_pitches
               ___awmod
                 ___awdiv (ARG)
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
                 ___awdiv (ARG)
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
         _key_press_release_note_off
           _noteOff
             _sendOut
             _sendUSB
         _noteOff
           _sendOut
           _sendUSB
         _noteOn
           _noteOff
             _sendOut
             _sendUSB
           _sendOut
           _sendUSB
         _playSeventh
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
         _playTriad
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
         _wait_one_pulse
       _playThisNote8
         _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
           _findArrayIndex
           _rotateArrayLeft
         _finish_arpeggio_setup
           _resetArpeggio
           _setupArpeggio
             _copy_array
             _random_pitches
               ___awmod
                 ___awdiv (ARG)
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
                 ___awdiv (ARG)
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
         _key_press_release_note_off
           _noteOff
             _sendOut
             _sendUSB
         _noteOff
           _sendOut
           _sendUSB
         _noteOn
           _noteOff
             _sendOut
             _sendUSB
           _sendOut
           _sendUSB
         _playDiatonicSeventhMajor
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
         _playDiatonicSeventhMinor
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
         _playDiatonicTriadMajor
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
         _playDiatonicTriadMinor
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                   ___awdiv (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
         _wait_one_pulse
       _playThisNotePentatonic
         _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
           _findArrayIndex
           _rotateArrayLeft
         _finish_arpeggio_setup
           _resetArpeggio
           _setupArpeggio
             _copy_array
             _random_pitches
               ___awmod
                 ___awdiv (ARG)
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
                 ___awdiv (ARG)
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
         _key_press_release_note_off
           _noteOff
             _sendOut
             _sendUSB
         _noteOff
           _sendOut
           _sendUSB
         _noteOn
           _noteOff
             _sendOut
             _sendUSB
           _sendOut
           _sendUSB
         _wait_one_pulse
       _printThisNumber
       _random_pitches
         ___awmod
           ___awdiv (ARG)
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _random_pitches_non_repeating
         ___awmod
           ___awdiv (ARG)
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _resetArpeggio
       _strcpy
       _wait_one_pulse
   _displayTest
     _strcpy
   _initializeMenuArray
     ___wmul
       ___lbmod (ARG)
   _initializeSaveSlotsOnce
     _Busy_eep
     _Read_b_eep
     _Write_b_eep
     _saveToEEPROM
       _Busy_eep
       _Write_b_eep
   _menu_lcd
     _Function_A
       _Function_A_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_A_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_A_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_B
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_C
       _Function_C_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_C_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_C_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_D
       _Function_D_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setControllerResolution
       _Function_D_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _Write_b_eep
         _calculate_alpha
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_D_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
       _Function_D_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
       _Function_D_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_E
       _Function_E_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_E_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Function_F
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_SetBit
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _int2string
         ___awdiv
         ___awmod
           ___awdiv (ARG)
           _rand (ARG)
             ___lmul
       _processEncoderBuxton
       _programChange
         _sendOut
         _sendUSB
     _Function_G
       _Function_G_1
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitSave
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _processEncoderBuxton
         _saveToEEPROM
           _Busy_eep
           _Write_b_eep
       _Function_G_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitLoad
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _loadFromEEPROM
           _Read_b_eep
           _calculate_pulse_length
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
         _processEncoderBuxton
       _Function_G_3
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _Function_G_4
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _exitFunction
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _eepromExit
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _processEncoderBuxton
     _Function_H
       _Function_H_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _strcpy
       _Function_H_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _calculate_pulse_length
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul
             ___xxtofl (ARG)
           ___flneg
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_H_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             _rand (ARG)
               ___lmul
         _processEncoderBuxton
       _Function_H_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _setupArpeggio
           _copy_array
           _random_pitches
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
             _rand
               ___lmul
           _random_pitches_non_repeating
             ___awmod
               ___awdiv (ARG)
               _rand (ARG)
                 ___lmul
             _rand
               ___lmul
       _Function_H_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_H_6
         _Function_H_6_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _playThisNote
             _add_notes_to_arpeggio
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _playSeventh
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playTriad
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _wait_one_pulse
           _playThisNote8
             _add_notes_to_arpeggio
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _playDiatonicSeventhMajor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicSeventhMinor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicTriadMajor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicTriadMinor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                       ___awdiv (ARG)
                       _rand (ARG)
                         ___lmul
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _wait_one_pulse
           _playThisNotePentatonic
             _add_notes_to_arpeggio
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                     ___awdiv (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _processEncoderBuxton
           _strcpy
         _Function_H_6_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
           _strcpy
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_H_7
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
         _strcpy
       _Function_H_8
         _Function_H_8_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Function_H_8_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Function_H_9
         _Function_H_9_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Function_H_9_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Function_H_9_3
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Function_H_9_4
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _processEncoderBuxton
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_SetBit
     _Lcd_Print_String
       _Lcd_Print_Char
         _Lcd_SetBit
       ___lbmod (ARG)
       ___wmul (ARG)
         ___lbmod (ARG)
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_SetBit
     ___lbmod
     ___wmul
       ___lbmod (ARG)
     _exitFunction
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _clear_row1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
   _panic_button
     _controlChange
       _sendOut
       _sendUSB
   _processEncoderBuxton
   _selectSlotOnBoot
     _Read_b_eep
     _loadFromEEPROM
       _Read_b_eep
       _calculate_pulse_length
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul
           ___xxtofl (ARG)
         ___flneg
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
   _setup
   _srand

 _ISR (ROOT)
   _display
     _displayDigits
       i2___awdiv
       i2___awmod
         i2___awdiv (ARG)
         i2_rand (ARG)
           i2___lmul
     _displayString
   _encoderInputsBuxton
   _playArpeggio
     _sort_pitches
     i2___awmod
       i2___awdiv (ARG)
       i2_rand (ARG)
         i2___lmul
     i2_noteOff
       i2_sendOut
       i2_sendUSB
     i2_noteOn
       i2_noteOff
         i2_sendOut
         i2_sendUSB
       i2_sendOut
       i2_sendUSB
     i2_rand
       i2___lmul
     i2_random_pitches
       i2___awmod
         i2___awdiv (ARG)
         i2_rand (ARG)
           i2___lmul
       i2_rand
         i2___lmul
     i2_random_pitches_non_repeating
       i2___awmod
         i2___awdiv (ARG)
         i2_rand (ARG)
           i2___lmul
       i2_rand
         i2___lmul
   i2___lbmod
   i2_printThisNumber

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      69      11       41.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FC       9       98.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100     50      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     70      A0       5      100.0%
BITCOMRAM           5E      0       5       0        5.3%
COMRAM              5E     31      5E       1      100.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     362      20        0.0%
DATA                 0      0     362       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 12 20:23:17 2023

                   _arpeggiatorAutoLatchOnOffMenu 0120                           playThisNote8@temp_pitch 0085  
                       ?_playDiatonicSeventhMinor 0077                           _readPotentiometers$5800 00C7  
                              i2printThisNumber@n 0001                                      ___fldiv@aexp 009F  
                                    ___fldiv@bexp 009E                                _RESET_ON_KEY_PRESS 01AA  
                                    ___fldiv@sign 0093                                      ?_displayTest 0001  
                                              l20 92F2                                                l21 92FA  
                                              l22 92FC                                                l23 9304  
                                              l24 9306                                                l25 930E  
                                              l42 7774                                                l50 7B00  
                                              l19 92F0                                                l36 8B9E  
                                              l54 8142                                                l47 7AB2  
                                              l55 8108                                                l48 7ACA  
                                              l49 7AE8                                                l88 91CC  
                                    ___awdiv@sign 0065                     __size_of_processEncoderBuxton 0A30  
                             ___wmul@multiplicand 0066                                       __CFG_BORV$3 000000  
                                  ?_programChange 006B                   __size_of_playDiatonicTriadMajor 0190  
                                    __CFG_CP0$OFF 000000                                      __CFG_CP1$OFF 000000  
                                    __CFG_CP2$OFF 000000                                      __CFG_CP3$OFF 000000  
                                     __CFG_OSC$HS 000000                   __size_of_playDiatonicTriadMinor 025E  
                        _LAST_NOTE_MODE_KEY_PRESS 01A1                           playDiatonicTriadMajor@i 007C  
                                             l441 734C                                               l443 7358  
                                             l451 8972                                               l436 951A  
                                             l453 89A0                                               l459 8CA2  
                                             l820 00E6                                               l901 07EC  
                                             l830 020E                                               l822 0120  
                                             l911 0840                                               l903 07FA  
                                             l840 036A                                               l832 0252  
                                             l824 0158                                               l816 0068  
                                             l921 089A                                               l913 0852  
                                             l905 080A                                               l850 0436  
                                             l842 0380                                               l834 0298  
                                             l826 019C                                               l818 00A2  
                                             l931 08F0                                               l923 08AC  
                                             l915 0868                                               l907 081C  
                                             l940 0944                                               l860 0524  
                                             l852 044A                                               l844 0396  
                                             l836 02DE                                               l828 01D6  
                                             l933 0900                                               l925 08BE  
                                             l917 087E                                               l909 082E  
                                             l942 0956                                               l862 055C  
                                             l854 045E                                               l846 03DC  
                                             l838 0324                                               l951 09BC  
                                             l935 090E                                               l927 08D0  
                                             l919 088C                                               l871 061E  
                                             l863 056A                                               l960 0A3A  
                                             l952 09CC                                               l944 0968  
                                             l936 091C                                               l880 06FA  
                                             l856 04A4                                               l848 0422  
                                             l953 09DC                                               l929 08DE  
                                             l873 0664                                               l865 057E  
                                             l946 097A                                               l938 0930  
                                             l882 0734                                               l874 0674  
                                             l858 04EA                                               l955 09EC  
                                             l947 098A                                               l891 079E  
                                             l883 0742                                               l875 0684  
                                             l867 0592                                               l956 09FA  
                                             l948 099A                                               l884 0752  
                                             l876 0694                                               l957 0A0A  
                                             l949 09AA                                               l893 07AE  
                                             l885 0762                                               l869 05D8  
                                             l958 0A1A                                               l886 0772  
                                             l878 06DA                                               l959 0A2A  
                                             l895 07BE                                               l879 06EA  
                                             l897 07CC                                               l889 078E  
                                             l899 07DC                                               _GIE 007F97  
                            _RESET_ON_KEY_RELEASE 01A9                                               _BPM 00FF  
                                    __CFG_CPB$OFF 000000                                               _RB0 007C08  
                                             _RB1 007C09                                               _RB2 007C0A  
                                             _RC0 007C10                                               _RA5 007C05  
                                             _RC1 007C11                                               _RB4 007C0C  
                                             _RC2 007C12                                               _RB5 007C0D  
                                             _RC3 007C13                                               _RE0 007C20  
                                             _RC4 007C14                                               _RE1 007C21  
                                             _RC5 007C15                                               _RD4 007C1C  
                                             _RE2 007C22                                               _RD5 007C1D  
                                             _RD6 007C1E                                               _RD7 007C1F  
                                 random_pitches@i 0075                                      __CFG_CPD$OFF 000000  
                                             _ISR 0008                                               _PSA 007EAB  
                                             _map 66D4                           playDiatonicTriadMinor@i 007D  
                            __size_of_Write_b_eep 0042                                      ___awmod@sign 0073  
                                             prod 000FF3                                               wreg 000FE8  
                                  ?_displayDigits 0001                                  ??_wait_one_pulse 0060  
                                    ___flmul@aexp 007F                                      ___flmul@bexp 0080  
                  __end_of_playThisNotePentatonic 54FA                                      ___flmul@sign 007A  
                                    ___flmul@temp 0085                                      ___flmul@prod 0081  
                        loadFromEEPROM@slotNumber 01D4                                      __CFG_LVP$OFF 000000  
                                            ?_ISR 0001                       _potentiometer_filtered_last 0200  
                                    ___fltol@exp1 00C1                                      __CFG_WDT$OFF 000000  
                                  ?_displayString 0001                                              l1402 5AE2  
                                            l1411 584E                                              l2300 1CB6  
                                            l1420 5880                                              l1412 5822  
                                            l1404 5B06                                              l1500 1B44  
                                            l1340 53EC                                              l2301 1CD0  
                                            l1413 5870                                              l1405 5B0E  
                                            l1501 1B5E                                              l1341 5412  
                                            l2310 1D8E                                              l2302 1D40  
                                            l1422 58A4                                              l1414 582C  
                                            l1406 5B22                                              l1510 1C48  
                                            l1502 1B78                                              l1350 54B0  
                                            l2311 1DA8                                              l2303 1CF2  
                                            l1423 58CA                                              l1415 5834  
                                            l1503 1B92                                              l1343 5436  
                                            l2320 1E66                                              l2312 1E18  
                                            l2304 1D08                                              l1416 583C  
                                            l1504 1BAC                                              l1520 2AF4  
                                            l1352 54DC                                              l1344 5454  
                                            l1360 3CAA                                              l2321 1E80  
                                            l2313 1DCA                                              l2305 1D22  
                                            l1433 5962                                              l1425 5940  
                                            l1417 5844                                              l1505 1BC6  
                                            l1601 554E                                              l1521 2AFC  
                                            l1353 54E4                                              l1345 548A  
                                            l1337 5398                                              l1361 3CCC  
                                            l2330 1F3E                                              l2322 1EF0  
                                            l2314 1DE0                                              l2306 1D3C  
                                            l1426 58F8                                              l1506 1BE0  
                                            l1602 558E                                              l1530 2BC6  
                                            l1522 2B04                                              l1354 54F2  
                                            l1346 5478                                              l1338 53BE  
                                            l1370 3DFE                                              l1362 3CEE  
                                            l2331 1F58                                              l2323 1EA2  
                                            l2315 1DFA                                              l2307 1DAC  
                                            l1435 5986                                              l1507 1BFA  
                                            l1531 2BEC                                              l1515 2B16  
                                            l1523 2B0C                                              l1371 3E20  
                                            l1363 3D10                                              l2332 1FC8  
                                            l2324 1EB8                                              l2316 1E14  
                                            l2308 1D5E                                              l1436 598E  
                                            l1428 5906                                              l1452 64D0  
                                            l1444 6410                                              l1508 1C14  
                                            l1612 5644                                              l1604 5620  
                                            l1540 2D0A                                              l1516 2ADA  
                                            l1700 31E8                                              l1372 3E42  
                                            l1364 3D32                                              l2341 201C  
                                            l2333 1F7A                                              l2325 1ED2  
                                            l2317 1E84                                              l2309 1D74  
                                            l1437 59A2                                              l1381 59D4  
                                            l1453 6486                                              l1445 6424  
                                            l1509 1C2E                                              l1605 55BE  
                                            l1541 2D28                                              l1517 2B44  
                                            l1701 320A                                              l1373 3E64  
                                            l1365 3D54                                              l2350 20BE  
                                            l2342 2032                                              l2334 1F90  
                                            l2326 1EEC                                              l2318 1E36  
                                            l1382 59B0                                              l1470 1838  
                                            l1462 1768                                              l1614 5668  
                                            l1622 46FC                                              l1534 2C2C  
                                            l1518 2AE4                                              l1702 322C  
                                            l1374 3E86                                              l1366 3D76  
                                            l1358 3C66                                              l2351 20D4  
                                            l2335 1FAA                                              l2327 1F5C  
                                            l2319 1E4C                                              l1391 5A24  
                                            l1383 59F0                                              l1455 64B2  
                                            l1447 6462                                              l1471 1852  
                                            l1463 1782                                              l1615 5670  
                                            l1607 55CC                                              l1631 48D8  
                                            l1543 2D58                                              l1535 2C5E  
                                            l1527 2B72                                              l1519 2AEC  
                                            l1703 324E                                              l1375 3EA8  
                                            l1367 3D98                                              l1359 3C88  
                                            l2344 2052                                              l2336 1FC4  
                                            l2328 1F0E                                              l1392 5A4A  
                                            l1384 59BA                                              l1456 64BA  
                                            l1448 644E                                              l1480 193C  
                                            l1472 186C                                              l1464 179C  
                                            l1616 5684                                              l1632 482E  
                                            l1552 2EA8                                              l1560 2E6E  
                                            l1544 2D90                                              l1528 2B98  
                                            l1704 3270                                              l1376 3ECA  
                                            l1368 3DBA                                              l3400 6866  
                                            l2353 20F4                                              l2345 2068  
                                            l2329 1F24                                              l1385 59C2  
                                            l1457 64C8                                              l1481 1956  
                                            l1473 1886                                              l1465 17B6  
                                            l1641 48FC                                              l1625 4726  
                                            l1553 2E00                                              l1545 2DDC  
                                            l1537 2CA6                                              l1705 3292  
                                            l1369 3DDC                                              l3401 681A  
                                            l2354 210A                                              l2338 1FE6  
                                            l1394 5AC0                                              l1386 59CA  
                                            l1458 64E0                                              l1490 1A40  
                                            l1482 1970                                              l1474 18A0  
                                            l1466 17D0                                              l1634 483C  
                                            l1626 474C                                              l1570 2EE4  
                                            l1546 2DB4                                              l1538 2CE8  
                                            l1706 32B4                                              l3330 69AE  
                                            l2347 2088                                              l2339 1FFC  
                                            l1395 5A78                                              l1491 1A5A  
                                            l1483 198A                                              l1475 18BA  
                                            l1467 17EA                                              l1651 495A  
                                            l1643 4920                                              l1563 2EA2  
                                            l1555 2E1E                                              l1707 32D6  
                                            l3315 4E5C                                              l3331 69B6  
                                            l3403 6824                                              l2356 212A  
                                            l2348 209E                                              l1492 1A74  
                                            l1484 19A4                                              l1476 18D4  
                                            l1468 1804                                              l1660 4B34  
                                            l1644 4928                                              l1636 4868  
                                            l1628 47A8                                              l1548 2DD2  
                                            l3316 4DE4                                              l3404 682E  
                                            l2357 2140                                              l1397 5A86  
                                            l1389 5A00                                              l1493 1A8E  
                                            l1485 19BE                                              l1477 18EE  
                                            l1469 181E                                              l1661 4A8C  
                                            l1581 57B0                                              l1645 493C  
                                            l1637 48C4                                              l1629 47FE  
                                            l3421 807A                                              l3501 7854  
                                            l3405 6838                                              l1494 1AA8  
                                            l1486 19D8                                              l1478 1908  
                                            l1654 4984                                              l1590 57F8  
                                            l1582 5750                                              l1558 2E42  
                                            l3414 80F6                                              l3422 8016  
                                            l3430 7A68                                              l3502 77F8  
                                            l3350 23F0                                              l3342 218C  
                                            l3406 6842                                              l2359 2162  
                                            l1495 1AC2                                              l1487 19F2  
                                            l1479 1922                                              l1671 4B7C  
                                            l1663 4A9A                                              l1655 49AA  
                                            l1591 5800                                              l1559 2E4A  
                                            l3415 8092                                              l3423 806A  
                                            l3503 7852                                              l3407 684C  
                                            l2720 4470                                              l1496 1ADC  
                                            l1488 1A0C                                              l1672 4B84  
                                            l1592 5814                                              l1584 575E  
                                            l1576 56A2                                              l1568 2EBC  
                                            l1680 2F40                                              l3416 80E6  
                                            l3336 937A                                              l3352 22E0  
                                            l3344 2284                                              l3600 73DA  
                                            l3408 6856                                              l2721 4488  
                                            l2297 1CD4                                              l5201 94FE  
                                            l1497 1AF6                                              l1489 1A26  
                                            l1673 4B98                                              l1665 4AC6  
                                            l1657 4A06                                              l1569 2ED0  
                                            l1681 2F62                                              l2801 2A9C  
                                            l3329 69A4                                              l3361 24BA  
                                            l3353 231C                                              l3521 7E74  
                                            l3601 7434                                              l3409 6860  
                                            l5210 5C48                                              l2730 455C  
                                            l2722 44A0                                              l2298 1C86  
                                            l5202 9508                                              l1498 1B10  
                                            l1666 4B22                                              l1658 4A5C  
                                            l1578 56E0                                              l1690 3094  
                                            l1682 2F84                                              l2802 2AC2  
                                            l3362 24F4                                              l3354 2358  
                                            l3514 82D8                                              l3522 7E18  
                                            l3530 7DF4                                              l5211 5B80  
                                            l2731 4574                                              l2723 44B8  
                                            l2299 1C9C                                              l1499 1B2A  
                                            l1579 5720                                              l1691 30B6  
                                            l1683 2FA6                                              l3435 7EE0  
                                            l3363 252E                                              l3355 2394  
                                            l3347 2228                                              l3515 827C  
                                            l3523 7E72                                              l5212 5BA6  
                                            l2740 464A                                              l2732 458C  
                                            l2724 44D0                                              l1588 57D4  
                                            l1692 30D8                                              l1684 2FC8  
                                            l3428 7A7A                                              l3436 7E98  
                                            l3452 7734                                              l3460 61B8  
                                            l3508 8920                                              l3516 82D6  
                                            l3620 6E4A                                              l5213 5BC8  
                                            l2741 4662                                              l2733 45A4  
                                            l2725 44E8                                              l1669 4B58  
                                            l1693 30FA                                              l1685 2FEA  
                                            l3429 7A0E                                              l3437 7EDE  
                                            l3445 7D08                                              l3453 76D8  
                                            l3461 6212                                              l3509 88F4  
                                            l3365 25C2                                              l3357 23EA  
                                            l3349 227E                                              l5214 5BDE  
                                            l5206 5B3E                                              l2742 467A  
                                            l2734 45BC                                              l2726 4500  
                                            l1694 311C                                              l1686 300C  
                                            l3446 7CA2                                              l3454 7732  
                                            l3606 7682                                              l5215 5BFE  
                                            l5207 5B50                                              l2743 468E  
                                            l2735 45D2                                              l2727 4516  
                                            l2719 4458                                              l1599 5510  
                                            l1695 313E                                              l1687 302E  
                                            l1679 2F1E                                              l3367 25FA  
                                            l3359 2482                                              l3535 79C6  
                                            l3607 7638                                              l3703 6F44  
                                            l5216 5C22                                              l2736 45EA  
                                            l2728 452E                                              l1696 3160  
                                            l1688 3050                                              l3464 6228  
                                            l3480 61A6                                              l3368 2634  
                                            l3528 7DF6                                              l3536 7982  
                                            l3560 853A                                              l4280 4BDC  
                                            l3608 7680                                              l3704 6EC0  
                                            l3712 84A2                                              l5217 5C46  
                                            l2745 46B2                                              l2737 4602  
                                            l2729 4546                                              l1697 3182  
                                            l1689 3072                                              l2753 269C  
                                            l3465 62CE                                              l3481 613A  
                                            l3369 266E                                              l3529 7D9A  
                                            l3537 79C4                                              l3553 8E64  
                                            l3561 8582                                              l4281 4BEC  
                                            l3713 8458                                              l3721 6D3E  
                                            l5218 5C6A                                              l2738 461A  
                                            l5226 90EA                                              l5250 8890  
                                            l1698 31A4                                              l2762 2712  
                                            l4290 5026                                              l3466 6262  
                                            l3482 6136                                              l3474 60EC  
                                            l3490 787C                                              l3554 8E30  
                                            l3570 86A4                                              l4282 4BFA  
                                            l3634 74EA                                              l3650 89F6  
                                            l3706 6F0E                                              l3714 84A0  
                                            l3722 6CB6                                              l3730 8350  
                                            l3618 6E4C                                              l5219 5C88  
                                            l2747 46C0                                              l2739 4632  
                                            l5235 81AE                                              l1699 31C6  
                                            l3467 625E                                              l3459 6214  
                                            l3483 616E                                              l3475 6090  
                                            l3491 78BE                                              l3547 8EB2  
                                            l4283 4C30                                              l3635 7478  
                                            l3643 87A2                                              l3651 89B4  
                                            l3707 6F42                                              l3731 8300  
                                            l3619 6E08                                              l3900 1742  
                                            l2748 46CE                                              l5236 81C4  
                                            l2780 28E4                                              l2772 27E8  
                                            l3468 6296                                              l3484 616A  
                                            l3476 60EA                                              l3548 8E7E  
                                            l3580 731A                                              l3644 8760  
                                            l3652 89CE                                              l3724 6D08  
                                            l3740 87CE                                              l2781 28C4  
                                            l4293 51CC                                              l3469 6292  
                                            l3637 74B4                                              l3645 877A  
                                            l3661 6C88                                              l3725 6D3C  
                                            l3733 8334                                              l3910 4106  
                                            l5182 93B4                                              l5190 7FE0  
                                            l5270 8AAE                                              l2790 2A1E  
                                            l2766 2734                                              l2758 26CA  
                                            l4278 4BBC                                              l3638 74E8  
                                            l3670 6D66                                              l3734 834E  
                                            l3742 87F0                                              l3750 842E  
                                            l3398 6812                                              ?_map 007A  
                                            l5431 8C36                                              l5271 8A6A  
                                            l5239 81DA                                              l2791 29D2  
                                            l2783 28D6                                              l2775 2820  
                                            l2767 275A                                              l4287 4FF6  
                                            l3479 6100                                              l3559 8584  
                                            l3575 72E4                                              l4279 4BCC  
                                            l3743 880A                                              l5432 8C4A  
                                            l3912 4156                                              l5600 84D4  
                                            l2768 277E                                              l4288 5006  
                                            l3568 86CC                                              l3576 728C  
                                            l3584 7242                                              l3664 6C9A  
                                            l3680 5FA4                                              l3760 71B0  
                                            l3905 3F82                                              l5249 88DA  
                                            l5601 84E0                                              l2785 2968  
                                            l2769 27B4                                              l5417 8F7E  
                                            l4289 5016                                              l3489 78C0  
                                            l3569 868A                                              l3577 72E2  
                                            l3585 71EA                                              l3657 6C54  
                                            l3673 6DE0                                              l3681 5F54  
                                            l3761 71CA                                              l3906 3FB6  
                                            l5186 93BC                                              l2794 29E8  
                                            l2786 294E                                              l2778 285A  
                                            l3586 7240                                              l3658 6BF8  
                                            l3674 6D84                                              l3770 7128  
                                            l3907 3FF4                                              l5603 84F6  
                                            l2795 2A0E                                              l3579 72F8  
                                            l3659 6C52                                              l3675 6DDE  
                                            l3691 6018                                              l3683 5F88  
                                            l3739 880C                                              l3908 4034  
                                            l5196 92A8                                              l5604 84EE  
                                            l2788 295A                                              l3588 7256  
                                            l3684 5FA2                                              l3748 8430  
                                            l5277 7B7E                                              l3589 7278  
                                            l3749 83E6                                              l3757 71CC  
                                            l5278 7B12                                              l2798 2A86  
                                            l3686 5FD4                                              l3758 7152  
                                            l3766 712A                                              l5607 850E  
                                            l3599 7436                                              l3695 6060  
                                            l3767 70B0                                              l3775 7088  
                                            l5608 8518                                              l3776 700E  
                                            l3784 6FE6                                              l4824 6BCE  
                                            l3881 12FC                                              l5609 8526  
                                            l3769 710E                                              l3785 6F6C  
                                            l3793 75FA                                              l5626 92D0  
                                            l5482 6AE6                                              l3778 706C  
                                            l3794 75A2                                              l5651 6928  
                                            l5483 6AF4                                              l5475 6A6C  
                                            l3779 7086                                              l3787 6FCA  
                                            l3795 75F8                                              l5660 6968  
                                            l5652 6918                                              l5484 6B0A  
                                            l5476 6A84                                              l3876 115A  
                                            l3788 6FE4                                              l3885 1338  
                                            l5478 6AB2                                              l3886 171E  
                                            l3894 1566                                              l3878 11A6  
                                            l5590 7936                                              l5903 3966  
                                            l5479 6AA6                                              l3895 15A2  
                                            l3879 11B6                                              l5591 792E  
                                            l5904 396E                                              l5920 3A44  
                                            l5905 3970                                              l5657 694C  
                                            l5649 68BC                                              l3897 16AC  
                                            l3889 1422                                              l4777 821C  
                                            l5913 39BE                                              l5658 6940  
                                            l3898 16E4                                              l5594 7956  
                                            l5930 3B4E                                              l5922 3A6C  
                                            l5914 39BA                                              l3899 16F4  
                                            l4779 823A                                              l4787 8D64  
                                            l5595 7960                                              l5587 7908  
                                            l5931 3B30                                              l5923 3B1A  
                                            l5596 796E                                              l5588 7918  
                                            l5940 3BEE                                              l5924 3ACA  
                                            l5861 36C8                                              l5941 3C18  
                                            l5925 3AF2                                              l5917 39FE  
                                            l5870 378C                                              l5862 36C4  
                                            l5758 9320                                              l5942 3C24  
                                            l5918 39FA                                              l5871 3790  
                                            l5951 336E                                              l5759 9338  
                                            l5943 3C26                                              l5927 3B18  
                                            l5864 3724                                              l5856 3680  
                                            l5952 336A                                              l5865 36E8  
                                            l5857 367C                                              l5953 337E  
                                            l5937 3B86                                              l5882 3886  
                                            l5874 37FE                                              l5970 361A  
                                            l5954 339C                                              l5891 38DA  
                                            l5875 37C4                                              l5971 3638  
                                            l5947 332E                                              l5939 3BCA  
                                            l5884 3896                                              l5868 37A0  
                                            l5948 332A                                              l5869 377E  
                                            l5965 3594                                              l5949 333E  
                                            l5981 5E2C                                              l5878 37E8  
                                            l5958 355C                                              l5982 5E3C  
                                            l5887 38BA                                              l5879 37EC  
                                            l5967 35D8                                              l5959 353E  
                                            l5991 5EDC                                              l5983 5E5A  
                                            l5975 9262                                              l5896 38FA  
                                            l5968 35F6                                              l5992 5ED0  
                                            l5976 9258                                              l5889 38D0  
                                            l5985 5E6C                                              l5986 5E60  
                                            l5899 3940                                              l5996 5EFA  
                                            l5988 5EAA                                              _ADON 007E10  
                                            l5997 5F2C                                              l5989 5E92  
                           __size_of_sort_pitches 011A                                              STR_1 FFE6  
                                            STR_2 FFE1                                              STR_3 FFFA  
                                            STR_4 FFF0                                              STR_5 FFDC  
                                            STR_6 FFEB                                              STR_7 FFF5  
                                            STR_8 FFD7                                              STR_9 FD70  
                                            _BRGH 007D62                            __end_of_random_pitches 8AB8  
                                            _CREN 007D5C                                              _T0CS 007EAD  
                                            _IPEN 007E87                                              _PEIE 007F96  
                                            _RBIE 007F93                                              _RBIF 007F90  
                                            _TMR0 000FD6                                              _TMR2 000FCC  
                                            _SPEN 007D5F                                              _PPQN 005E  
                                            _TXIF 007CF4                                              _TXEN 007D65  
                                            _SYNC 007D64                          _LAST_NOTE_MODE_TRANSPOSE 019F  
                                            _main 6B1C                                              _drum 00EC  
                                            _load 95E0                                              _rand 8AB8  
                                            fsr0h 000FEA                                              fsr1h 000FE2  
                                            fsr2h 000FDA                                              fsr0l 000FE9  
                                            indf1 000FE7                                              indf2 000FDF  
                                            fsr1l 000FE1                                              map@x 007A  
                                            fsr2l 000FD9                                              btemp 005F  
                                __end_of_ADC_Read 91E6                          __end_ofi2_random_pitches 8C24  
                    ??_key_press_release_note_off 006E                                              prodh 000FF4  
                                            prodl 000FF3                keyboard_eight_note_efficient@index 0089  
                                 ??_setupArpeggio 0077                                              start 000E  
                              Lcd_Print_Char@i_57 0066                keyboard_eight_note_efficient@pitch 0088  
                                   __CFG_IESO$OFF 000000                                   ___fldiv@new_exp 0098  
                              Lcd_Print_Char@data 0063                              __end_of_analogInputs 95F2  
                                  _drumCCTypeMenu 015F                                   __end_of_Lcd_Cmd 94B2  
                                   __CFG_MCLRE$ON 000000                                   _rotateArrayLeft 8362  
                                    ___param_bank 000000                                             ??_ISR 001E  
                                           ??_map 008E                   __end_of_setControllerResolution 9398  
                       _arpeggiatorLatchOnOffMenu 0123                                    noteOff@channel 006D  
                                      _Lcd_SetBit 92E2                                             l22103 452E  
                                           l22113 455C                                             l22131 45A4  
                                           l22125 458C                                             l22109 4546  
                                           l22061 4488                                             l21317 6D5E  
                                           l22143 45D2                                             l22119 4574  
                                           l22055 4470                              programChange@channel 006D  
                                           l23033 8232                                             l22161 461A  
                                           l22137 45BC                                             l22073 44B8  
                                           l22049 4458                                             l23019 8214  
                                           l22155 4602                                             l22091 4500  
                                           l22067 44A0                                             l23141 7780  
                                           l23133 7766                                             l22173 464A  
                                           l22149 45EA                                             l22085 44E8  
                                           l22167 4632                                             l22079 44D0  
                                           l22185 467A                                             l22097 4516  
                                           l22179 4662                                             l22445 2A1E  
                                           l17007 4A92                                             l22383 28E4  
                                           l16091 7350                                             l17051 4B7C  
                                           l16085 7344                                             l16405 9136  
                                           l22921 1152                                             l16521 5A7E  
                                           l16623 58FE                                             l16711 5756  
                                           l22937 11AE                                             l16395 9108  
                                           l16491 59F8                                             l16811 4834  
                                           l18171 54DC                                             l22949 12F4  
                                           l16661 5986                                             l18245 64B2  
                                           l16559 5B06                                             l16593 5878  
                                           l16905 55C4                                             l16681 569A  
                                           l18409 2E42                                             l16749 57F8  
                                           l17389 3C18                                             l16943 5668  
                                           l16855 4920                                             l16767 46F4  
                                           l16875 5508                                             l16963 4952  
                                           l18589 9372                                     ___fltol@sign1 00C0  
                                 __end_of___aldiv 6B1C                                             l18897 5192  
                                 __end_of___fladd 398C                                             ?_main 0001  
                                           ?_load 0001                                   __end_of___fldiv 3C42  
                                           ?_rand 006C                                   __end_of___awdiv 7978  
                                ?_calculate_alpha 0001                                   __end_of___flneg 92E2  
                                           _EEADR 000FA9                                             STR_10 FD64  
                                           STR_11 FD64                                             STR_12 FD6B  
                                           STR_20 FFC3                                             STR_13 FF9E  
                                           STR_21 FDFD                                             STR_14 FF88  
                                           STR_30 FDA8                                             STR_22 FD75  
                                           STR_15 FF93                                             STR_23 FF18  
                                           STR_31 FEC4                                             STR_16 FD6B  
                                           STR_24 FF58                                             STR_32 FE4D  
                                           STR_40 FE3D                                             STR_17 FF9E  
                                           STR_41 FFCD                                             STR_25 FED2  
                                           STR_33 FD97                                             STR_18 FF88  
                                           STR_50 FF0F                                             STR_34 FF4C  
                                           STR_42 FE98                                             STR_26 FE2D  
                                           STR_19 FF93                                             STR_51 FFE6  
                                           STR_43 FFD2                                             STR_35 FFBB  
                                           STR_27 FEE0                                             STR_52 FFDC  
                                           STR_60 FF6B                                             STR_36 FFB3  
                                           STR_44 FEB6                                             STR_28 FDCA  
                                 __end_of___awmod 8530                                             STR_61 FEFC  
                                           STR_45 FEEE                                             STR_29 FE6B  
                                           STR_53 FDDB                                             STR_37 FD86  
                                           STR_70 FFA9                                             STR_62 FFC8  
                                           STR_38 FF25                                             STR_54 FE89  
                                           STR_46 FDB9                                             STR_55 FFDC  
                                           STR_71 FF7C                                             STR_47 FF32  
                                           STR_63 FE1D                                             STR_39 FDEC  
                                           STR_72 FFA9                                             STR_48 FDDF  
                                           STR_56 FF0A                                             STR_64 FEA7  
                                           STR_49 FE8E                                             STR_73 FF7C  
                                           STR_57 FFF0                                             STR_65 FE7A  
                                           STR_74 FFA9                                             STR_66 FF3F  
                                           STR_58 FE5C                                             STR_75 FF7C  
                                           STR_67 FF70                                             STR_59 FF64  
                                           STR_68 FFA9                                             STR_76 FE0D  
                                 __end_of___lbmod 9340                                             STR_69 FF7C  
                                 __end_of___flmul 364E                                   __end_of___fltol 697A  
                                           _CMCON 000FB4                                             _T0CON 000FD5  
                                 ___awdiv@divisor 0062                                             _T2CON 000FCA  
                                           u24000 4804                                             u23300 5A50  
                                           u22510 7390                                             u25000 38F6  
                                           u22504 737C                                             u22440 84FA  
                                           u22505 7378                                             u22530 73B4  
                                           u22540 73B8                                             u24300 5610  
                                           u23180 8138                                             u22525 7392  
                                           u23190 8170                                             u23520 58D0  
                                           u23360 5AB0                                             u24400 5678  
                                           u24240 5594                                             u24080 48C8  
                                           u22800 7ACA                                             u25050 394C  
                                           u23187 812E                                             u22740 81BC  
                                           u23460 5B16                                             u24500 4A62  
                                           u24180 4930                                             u22820 7B00  
                                           u25300 3BFC                                             u23197 8166  
                                           _LATCH 01A8                                             u25400 3500  
                                           u22760 81D2                                             u23800 57A2  
                                           u33080 7862                                             u22850 93A6  
                                           u22780 81EA                                             u23580 5930  
                                           u23900 5808                                             u23740 5726  
                                           u34060 8660                                             u25260 3B82  
                                           u33340 74F8                                             u25405 34F6  
                                           u33095 7864                                             u24800 3764  
                                           u23680 5996                                             u34080 8676  
                                           u33280 7444                                             u22865 93A8  
                                           u24810 3766                                             u25450 3590  
                                           u25290 3BD8                                             u24580 4B26  
                                           u28100 2E96                                             u28020 2E60  
                                           u36020 2724                                             u25540 793A  
                                           u33460 6C84                                             u33620 6D4C  
                                           u25390 338A                                             u25630 6952  
                                           u25710 5EE6                                             u33295 7446  
                                           u24840 37A8                                             u25480 35E6  
                                           u24680 4B8C                                             u36120 278C  
                                           u33480 6C96                                             u29000 5FB2  
                                           u25490 3604                                             u33805 4088  
                                           u24790 3754                                             u25590 68DA  
                                           u36310 292E                                             u28215 8F8C  
                                           u29015 5FB4                                             u28080 2E8E  
                                           u36160 27C0                                             u28216 8F8E  
                                           u32880 7752                                             u24970 38DE  
                                           u36250 28A4                                             u25595 68D0  
                                           u29140 6050                                             u29060 600C  
                                           u29230 6F52                                             u37160 7D04  
                                           u36450 2A66                                             u36370 29B2  
                                           u29170 6072                                             u29410 71DA  
                                           u37500 12F0                                             u28700 4C54  
                                           u33990 8626                                             u35910 26BE  
                                           u29350 881A                                             u37175 7D06  
                                           u37600 158A                                             u28800 4D80  
                                           u28720 4C60                                             u29290 835E  
                                           u29530 7096                                             u28715 4C56  
                                           u37540 13F2                                             u37700 8254  
                                           u28900 4DBC                                             u28820 4D8C  
                                           u28740 4CAC                                             u37710 8256  
                                           u28670 4C30                                             u29470 7138  
                                           u44807 906C                                             u28815 4D82  
                                           u28735 4C62                                             u29640 6AB6  
                                           u37560 1400                                             u37480 11AA  
                                           u27960 2E18                                             u27880 2DCC  
                                           u28920 4DC8                                             u28840 4D98  
                                           u28760 4D4C                                             u28680 4C48  
                                           u44680 6B6A                                             u44817 90A8  
                                           u44907 91C4                                             u44827 7F2E  
                                           u28915 4DBE                                             u28835 4D8E  
                                           u28755 4CAE                                             u37660 1748  
                                           u28940 4DD4                                             u28860 4DA4  
                                           u28780 4D74                                             u44917 778E  
                                           u44837 7F5A                                             u35990 2702  
                                           u29590 6FF4                                             u44927 77A6  
                                           u44847 7338                                             u28935 4DCA  
                                           u28855 4D9A                                             u28775 4D4E  
                                           u28695 4C4A                                             u44695 6B6C  
                                           u37680 822E                                             u28880 4DB0  
                                           u44937 94A4                                             u44857 7394  
                                           u44777 8FF4                                             u44867 739E  
                                           u28875 4DA6                                             u28795 4D76  
                                           u44787 8A4A                                             u44877 73A8  
                                           u44797 9030                                             u37870 7780  
                                           u44887 73BC                                             u28895 4DB2  
                                           i2l441 7522                                             u44897 9522  
                                           i2l443 752E                                             i2l451 8B40  
                                           i2l436 9536                             _processPotentiometers 3EF0  
                                           i2l453 8B6C                                             u37990 8D48  
                                           i2l807 7D1E                                             i2l808 7D2E  
                                 ___awdiv@counter 0064                                     _controlChange 921A  
                                           _SPBRG 000FAF                                             _PORTA 000F80  
                                           _PORTB 000F81                                             _PORTC 000F82  
                                           _PORTD 000F83                                             _PORTE 000F84  
                                    _sort_pitches 62D4                           __size_of_Lcd_Set_Cursor 005A  
                                           _TRISA 000F92                                             _TRISB 000F93  
                                           _TRISC 000F94                                             _TRISD 000F95  
                                           _TRISE 000F96                                             _TXREG 000FAD  
                  ?_keyboard_eight_note_efficient 0001                                     __CFG_PWRT$OFF 000000  
                           __end_of_playThisNote8 2EFA                                     __CFG_WRT0$OFF 000000  
                                   __CFG_WRT1$OFF 000000                        __size_of_keyboardTranspose 02A6  
                                   __CFG_WRT2$OFF 000000                               ___lmul@multiplicand 0064  
                                   __CFG_WRT3$OFF 000000                       encoderInputsBuxton@pinstate 0006  
                                  __CFG_EBTR0$OFF 000000                                    __CFG_FCMEN$OFF 000000  
                                  __CFG_EBTR1$OFF 000000                                    __CFG_EBTR2$OFF 000000  
                                  __CFG_EBTR3$OFF 000000                                     __CFG_WRTB$OFF 000000  
                                 __end_of_display 958E                                     __CFG_WRTC$OFF 000000  
                                   __CFG_WRTD$OFF 000000                                    Read_b_eep@badd 0060  
                                 ??_processOctave 0088                                    __CFG_EBTRB$OFF 000000  
                                           _flag1 0197                                             _flag2 0196  
                                   _transposeMenu 0162                                             _clock 95E6  
                 ?_keyboard_sharps_only_efficient 0001                  ??_keyboard_sharps_only_efficient 007D  
             __size_of_key_press_release_note_off 0162                            Write_b_eep@GIE_BIT_VAL 0063  
                                           _randx 01E7                                    noteOn@velocity 006F  
                                           _setup 881E                                             _srand 95B2  
                                           _state 0058                                   __end_of_sendUSB 73C4  
                                     copy_array@i 0060                                   __end_of_sendOut 9530  
                                 ?_random_pitches 0001                                    __pbitbssCOMRAM 0190  
                                 __end_of_noteOff 8FD2                                    __CFG_BOREN$OFF 000000  
                                           pclath 000FFA                                        i2sendUSB@i 000A  
                                           tablat 000FF5                            _playDiatonicTriadMajor 568C  
                                _suppress_note_on 019C                                  __end_ofi2___lmul 8D28  
                  __size_of_finish_arpeggio_setup 001E                            _playDiatonicTriadMinor 46E6  
                                           plusw2 000FDB                     __end_of_finish_arpeggio_setup 9512  
                       __size_of_Lcd_Print_String 007C                __end_of_delete_notes_from_arpeggio 92B2  
                      _delete_notes_from_arpeggio 9280                    keyboardTranspose@semitone_temp 0053  
                                           status 000FD8                                        i2sendOut@a 0001  
                                   _UN_LATCH_MODE 01A7                                             wtemp6 0060  
                                   i2___lbmod@rem 0004                                _encoder_state_last 016F  
       i2random_pitches_non_repeating@randomIndex 0016           random_pitches_non_repeating@randomIndex 0075  
                              __size_ofi2___awdiv 0084                                __size_ofi2___awmod 0070  
                                __end_ofi2_noteOn 8B70                                __size_ofi2___lbmod 002A  
                            _LAST_NOTE_MODE_RESET 019E                           __size_of_Lcd_Print_Char 0084  
                     __size_of_buttonInputsSerial 007C                                     ?_Function_A_1 0001  
                                   ?_Function_A_2 0001                                     ?_Function_A_3 0001  
                                   ?_Function_C_1 0001                                     ?_Function_C_2 0001  
                                   ?_Function_C_3 0001                                     ?_Function_D_1 0001  
                                   ?_Function_D_2 0001                                     ?_Function_D_3 0001  
                                   ?_Function_D_4 0001                                     ?_Function_E_1 0001  
                                   ?_Function_D_5 0001                                     ?_Function_E_2 0001  
                                   ?_Function_G_1 0001                                     ?_Function_G_2 0001  
                                   ?_Function_G_3 0001                                     ?_Function_G_4 0001  
                                   ?_Function_H_1 0001                                     ?_Function_H_2 0001  
                                   ?_Function_H_3 0001                                     ?_Function_H_4 0001  
                                   ?_Function_H_5 0001                                     ?_Function_H_6 0001  
                                   ?_Function_H_7 0001                                     ?_Function_H_8 0001  
                                   ?_Function_H_9 0001                                   __initialization 65EC  
                                    __end_of_main 6BE8                                      __end_of_load 95E6  
                                    __end_of_rand 8B14                                   ??_programChange 006D  
                                      _Read_b_eep 954C                                  __end_of_Busy_eep 95E0  
                             _half_diminished_7th 02EC                           _initializeSaveSlotsOnce 8F06  
                              __size_ofi2_sendUSB 009A                                        _Function_A 7E8A  
                                      _Function_B 7C8E                                        _Function_C 786A  
                              __size_ofi2_sendOut 001C                                        _Function_D 7978  
                                      _Function_E 8530                                        _Function_F 867C  
                                      _Function_G 762E                                        _Function_H 6DFE  
                              __size_ofi2_noteOff 003C                           __size_of_loadFromEEPROM 0238  
                                          ??_main 00CF                            _arpeggiatorOctavesMenu 012F  
                                          ??_load 0060                                            ??_rand 006E  
                                  ?_controlChange 006B                                __size_of_Lcd_Clear 000E  
                                   __activetblptr 000002                                   ??_displayDigits 0015  
                                    ?_playSeventh 0001                                __size_of_Lcd_Start 008C  
                      rotateArrayLeft@array_index 0067                              displayDigits@lowByte 0018  
                                 ??_displayString 0001                i2random_pitches_non_repeating@temp 0015  
                random_pitches_non_repeating@temp 0074                                            ?_clock 0001  
                                          _ADCON0 000FC2                                            _ADCON1 000FC1  
                                          _ADCON2 000FC0                                            _ADRESH 000FC4  
                                          _EEADRH 000FAA                                            _ADRESL 000FC3  
                                          _EEDATA 000FA8                                            _EECON2 000FA7  
                                          _T08BIT 007EAE                                  ___awdiv@dividend 0060  
                                          ?_setup 0001                                            ?_srand 0060  
                    calculate_pulse_length@s_tick 00C4                                   __CFG_BBSIZ$1024 000000  
                                    ?_noteOffDrum 006B                               saveToEEPROM@to_save 0064  
                                          _INT0IE 007F94                                            _INT0IF 007F91  
                                   ?_exitFunction 0001                                            i2l2900 65DE  
                                          i2l5310 0D26                                            i2l5311 0D24  
                                          i2l5320 0DD4                                            i2l5304 0C30  
                                          i2l5321 0E1C                                            i2l5313 0D38  
                                          i2l5314 0D50                                            i2l5306 0C80  
                                          i2l5331 0F00                                            i2l5315 0D5E  
                                          i2l5340 1018                                            i2l5332 0F32  
                                          i2l5308 0CD4                                            i2l5261 6360  
                                          i2l5341 1046                                            i2l5309 0CD2  
                                          i2l2870 4368                                            i2l2854 430A  
                                          i2l5270 8C18                                            i2l5350 10BA  
                                          i2l2855 4272                                            i2l5263 63D8  
                                          i2l5431 8CE2                                            i2l5271 8BD8  
                                          i2l5319 0D90                                            i2l5600 85B4  
                                          i2l2880 43F2                                            i2l2864 4342  
                                          i2l2856 41BA                                            i2l5256 63E4  
                                          i2l5432 8CF6                                            i2l5352 10CA  
                                          i2l5328 0E84                                            i2l5601 85C0  
                                          i2l2873 439A                                            i2l2865 433A  
                                          i2l2857 41D6                                            i2l5257 62E2  
                                          i2l5353 10F8                                            i2l5337 0F9A  
                                          i2l5329 0EB2                                            i2l2882 440C  
                                          i2l2874 439C                                            i2l2858 42BC  
                                          i2l5258 63DA                                            i2l5338 0FCE  
                                          i2l5290 0B0E                                            i2l4810 530E  
                                          i2l5603 85D6                                            i2l2883 4432  
                                          i2l2859 4302                                            i2l5259 62E8  
                                          i2l5604 85CE                                            i2l2876 43B6  
                                          i2l5292 0B5A                                            i2l4804 52C2  
                                          i2l2869 4366                                            i2l2893 64FE  
                                          i2l5277 7C82                                            i2l5357 1118  
                                          i2l5293 0B58                                            i2l4805 52E2  
                                          i2l5278 7C1A                                            i2l5294 0B98  
                                          i2l5607 85EE                                            i2l2879 43F0  
                                          i2l2895 6528                                            i2l5295 0B96  
                                          i2l5608 85F8                                            i2l5288 0AB4  
                                          i2l5609 8606                                            i2l2897 6574  
                                          i2l5297 0BAA                                            i2l4809 52FE  
                                          i2l2898 6596                                            i2l5298 0BC2  
                                          i2l2899 65BA                                            i2l5299 0BD0  
                                          i2l5590 7BCA                                            i2l5591 7BC2  
                                          i2l5594 7BEA                                            i2l4794 5234  
                                          i2l5595 7BF4                                            i2l5587 7B9C  
                                          i2l4795 524E                                            i2l5596 7C02  
                                          i2l5588 7BAC                                            i2l4797 5258  
                                          i2l5758 93CC                                            i2l4798 531A  
                                          i2l5759 93E4                                         ??_Lcd_Cmd 0061  
                                          _TMR0IE 007F95                                            _TMR0IF 007F92  
                                          _TMR2IE 007CE9                                            _TMR2IF 007CF1  
                                          _TMR0ON 007EAF                                  i2___lmul@product 0009  
                                          _TMR2ON 007E52                           __end_of_rotateArrayLeft 83DA  
                                          _ON_OFF 01B4                                  __end_of___xxtofl 5F3E  
                                          i2_rand 8D7C                      __size_of_initializeMenuArray 0202  
                        __end_of_selectSlotOnBoot 94F4                                    ??_Function_A_1 0070  
                                  ??_Function_A_2 0070                                    ??_Function_A_3 0070  
                                  ??_Function_C_1 0070                                    ??_Function_C_2 007A  
                                  ??_Function_C_3 007A                                    ??_Function_D_1 0070  
                                  ??_Function_D_2 00A0                                    ??_Function_D_3 007C  
                                  ??_Function_D_4 007C                                    ??_Function_D_5 007C  
                                  ??_Function_E_1 007A                                    ??_Function_E_2 007A  
                                  ??_Function_G_1 00B4                                    ??_Function_G_2 00CC  
                                  ??_Function_G_3 0070                                    ??_Function_G_4 0072  
                                  ??_Function_H_1 0070                                    ??_Function_H_2 00CC  
                                  ??_Function_H_3 007A                                    ??_Function_H_4 0077  
                                  ??_Function_H_5 0070                                    ??_Function_H_6 0088  
                                  ??_Function_H_7 0070                                    ??_Function_H_8 0070  
                                  ??_Function_H_9 0071                                     ?_panic_button 0001  
                           __end_of_resetArpeggio 90FE                                    __CFG_XINST$OFF 000000  
                                 noteOff@velocity 006C                           __size_of_Function_H_6_1 0146  
                         __size_of_Function_H_6_2 00AC                           __size_of_Function_H_8_1 0078  
                         __size_of_Function_H_8_2 0066                           __size_of_Function_H_9_1 00A2  
                         __size_of_Function_H_9_2 00A2                           __size_of_Function_H_9_3 00A2  
                         __size_of_Function_H_9_4 00A2                                  ??_processDrumpad 0071  
                        readPotentiometers@i_3355 00CB                          readPotentiometers@i_3356 00CD  
                                          ___lmul 8C24                                  ascii@LCD_STRINGS E8C3  
                                       ??___aldiv 0074                                         ??___fladd 00AC  
                                          ___wmul 9464                                         ??___fldiv 008F  
                                       ??___awdiv 0064                                         ??___flneg 00A4  
                                       ??___awmod 0072                                         ??___lbmod 0061  
                                       ??___flmul 0076                                         ??___fltol 00BC  
                         ??_add_notes_to_arpeggio 0060                                       ?_Lcd_SetBit 0001  
                                __end_of_exitLoad 904A                                  __end_of_exitSave 9086  
                                          _octave 00FC                                            clear_0 6692  
                                          clear_1 669E                                            clear_2 66AA  
                                          clear_3 66C0                                  __end_of_menu_lcd 689C  
                                ___awdiv@quotient 0066                                   ___awmod@divisor 0070  
                                          _noteOn 8944                                   ___awmod@counter 0072  
                          ?_processPotentiometers 0001                                            _ttable F33D  
                            __size_of_displayTest 007E                                            _strcpy 924E  
                                       ??_display 001A                         _arpeggiatorNoteLengthMenu 0129  
                                  i2___awdiv@sign 0006                                 _programChangeMenu 0144  
                               _latch_was_pressed 01A5                                      __pdataCOMRAM 005B  
                                     i2sendUSB@ii 000B                                 __end_ofi2___awdiv 7C0C  
                               __end_ofi2___awmod 8610                                 __end_ofi2___lbmod 93EC  
                                       ?_ADC_Read 0060                                         ??_sendUSB 0062  
                        __size_of_printThisNumber 0012                                 _suppress_note_off 019B  
                                       ??_sendOut 0060                                      __mediumconst E8C2  
                keyboard_all_note_efficient@pitch 0085                                         ??_noteOff 006D  
                                          tblptrh 000FF7                                            tblptrl 000FF6  
                                          tblptru 000FF8                                            srand@x 0060  
                                  i2___awmod@sign 0014                                    ??_exitFunction 0070  
                                 Lcd_Set_Cursor@a 0064                                   Lcd_Set_Cursor@b 0063  
                                 Lcd_Set_Cursor@y 0066                                   Lcd_Set_Cursor@z 0065  
                    __size_of_encoderInputsBuxton 0080                                   noteOnDrum@pitch 006E  
                       loadFromEEPROM@baseAddress 01D2                                      ___xxtofl@arg 006A  
                                    ___xxtofl@exp 0069                              selectSlotOnBoot@slot 00CC  
                           __size_of_analogInputs 0006                                      ___xxtofl@val 0060  
                                 ___lbmod@divisor 0060                        _LAST_NOTE_MODE_KEY_RELEASE 01A0  
                               __end_ofi2_sendUSB 7596                                        __accesstop 0060  
                         __end_of__initialization 66C6                                   ___lbmod@counter 0062  
                               __end_ofi2_sendOut 954C                                   __CFG_PBADEN$OFF 000000  
                                      ___flneg@f1 00A0                                 __end_ofi2_noteOff 9176  
              __end_of_key_press_release_note_off 5C8C                        _key_press_release_note_off 5B2A  
                                   _MAX_NUM_NOTES F39D                                 __end_of_Lcd_Clear 95D0  
                        __size_of_processKeyboard 006C                                     ___rparam_used 000001  
                                  ??_panic_button 006E                                 _button_state_last 00D4  
                                      ___fltol@f1 00B8                             __end_of_digitalInputs 8D7C  
                               __end_of_Lcd_Start 77E2                     processPotentiometers@highByte 0072  
                   __size_of_setControllerNumbers 04F8                                    __pcstackCOMRAM 0001  
                          _diatonic_seventh_major F2A7                         ??_initializeSaveSlotsOnce 00B4  
                    ?_keyboard_all_note_efficient 0001                              initializeMenuArray@i 006C  
                                    __pidataBANK0 95D0                                      __pidataBANK1 93EC  
                                    __pidataBANK2 8DD0                                      __pidataBANK3 86E6  
                          _diatonic_seventh_minor F26B                               buttonInputsSerial@i 0064  
                                   __end_of_clock 95EC                                       ?_Read_b_eep 0060  
                                   _stored_octave 00E7                                     __end_of_setup 8882  
                                   __end_of_srand 95C2                                   ??_controlChange 006D  
                                     ?_Function_A 0001                                       ?_Function_B 0001  
                                     ?_Function_C 0001                                       ?_Function_D 0001  
                                     ?_Function_E 0001                                       ?_Function_F 0001  
                                     ?_Function_G 0001                                       ?_Function_H 0001  
                     _arpeggiatorLastNoteModeMenu 00DC                               ADC_Read@adc_channel 0064  
                                       ?i2___lmul 0001                           Function_C_2@array_index 007B  
                                   ?_playArpeggio 0001                              _number_of_interrupts 0288  
                                  _Lcd_Set_Cursor 8B70                                        ??_ADC_Read 0062  
                                   ?_saveToEEPROM 0001                                      _analogInputs 95EC  
                    __end_of_pentatonic_major_key F39D                                   _slidepotsCCMenu 014D  
                               i2_printThisNumber 95A0                        add_notes_to_arpeggio@pitch 0067  
                                       ?i2_noteOn 000F                                  playSeventh@pitch 007F  
delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT 006A                        __end_of_readPotentiometers 174C  
                                         ??_clock 0060                                ?i2_printThisNumber 0001  
                                 findArrayIndex@i 0062                      __end_of_processEncoderBuxton 0A42  
                                         ??_setup 0060                                           ??_srand 0062  
                           displayDigits@highByte 0019                                        __pbssBANK0 00D0  
                                      __pbssBANK1 0100                                        __pbssBANK2 0200  
              i2random_pitches@random_array_index 0015                  random_pitches@random_array_index 0074  
                                   ?_playThisNote 0001                                  _Lcd_Print_String 80FC  
                       keyboardTranspose@keyPress 0192                               __size_of_Lcd_SetBit 0030  
                                       ?_Busy_eep 0001                      __end_of_pentatonic_minor_key F392  
                                ?_rotateArrayLeft 0001                            _drum_button_state_last 00ED  
                             ??i2_printThisNumber 0003                                           ?i2_rand 000D  
                                  _Lcd_Print_Char 7A80                                 ?i2_random_pitches 0001  
                        ??_calculate_pulse_length 00C4                      ??_delete_notes_from_arpeggio 0069  
                                    _DISPLAY_MODE 005A                                        _clear_row1 943C  
                                      _clear_row2 9414                                ??i2_random_pitches 0015  
                                         ?___lmul 0060                                           ?___wmul 0064  
                          saveToEEPROM@byte_count 00B2                      playDiatonicTriadMajor@i_1679 007D  
                              __size_of_playTriad 0180                                __size_of_pitchBend 0034  
                   ??_keyboard_all_note_efficient 0085                                    ___lmul@product 0068  
                              Lcd_SetBit@data_bit 0060                                    _loadFromEEPROM 4BA0  
                                         ?_noteOn 006E                            __end_of_Lcd_Set_Cursor 8BCA  
                                   ??_Write_b_eep 0063                                    ??_playArpeggio 0018  
                         __size_of_ADC_Initialize 0014                                           ?_strcpy 0060  
                                      ??i2___lmul 0009                           Function_C_3@array_index 007B  
                       __end_ofi2_printThisNumber 95B2                                 _number_to_display 005B  
                                      _eepromMenu 013B                                        _eepromExit 9086  
                                         i2l22611 64F6                           __size_of_findArrayIndex 003C  
                                  ??_saveToEEPROM 0064                                           _INTEDG0 007F8E  
                                         _DRUM_CC 01D7                                           i2l19281 751A  
                                         i2l19287 7526                                         ?___xxtofl 0060  
                                         _OCTAVES 00F8                findArrayIndex@pitch_of_key_release 0061  
                                ??_random_pitches 0074                              __end_of_Function_A_1 80FC  
                int2string@number_to_display_temp 0078                              __end_of_Function_A_2 8080  
                            __end_of_Function_A_3 7A80                              __end_of_Function_C_1 7756  
                            __end_of_Function_C_2 62D4                              __end_of_Function_C_3 61AC  
                            __end_of_Function_D_1 786A                              __end_of_Function_D_2 8944  
                            __end_of_Function_D_3 82EA                              __end_of_Function_D_4 7E8A  
                            __end_of_Function_D_5 7E0C                              __end_of_Function_E_1 8EBC  
                            __end_of_Function_E_2 8E6E                              __end_of_Function_G_1 7322  
                            __end_of_Function_G_2 7280                              __end_of_Function_G_3 8A5C  
                            __end_of_Function_G_4 7462                              __end_of_Function_H_1 74FC  
                            __end_of_Function_H_2 87B8                              __end_of_Function_H_3 8A00  
                            __end_of_Function_H_4 6CA0                              __end_of_Function_H_5 6DFE  
                            __end_of_Function_H_6 84BE                              __end_of_Function_H_7 6D50  
                            __end_of_Function_H_8 844C                              __end_of_Function_H_9 762E  
                                      ??i2_noteOn 0011                          ?_setControllerResolution 0001  
                            __size_of_playSeventh 018E                   __end_of_initializeSaveSlotsOnce 8F50  
                         ?_playDiatonicTriadMajor 0077                           ?_playDiatonicTriadMinor 0077  
                                      _drumCCMenu 0159                                    ??_playThisNote 0080  
             _arpeggiatorLastNoteModeKeyPressMenu 0111                                 ??_printThisNumber 0062  
                             __size_of_Read_b_eep 001A                                        _int2string 697A  
                                 _ARPEGGIO_RANDOM 028C                                   Lcd_Print_Char@i 0064  
                                      _dorian_key FD46                                        ??_Busy_eep 0060  
                                         _Lcd_Cmd 948C                            __end_of_Lcd_Print_Char 7B04  
                                      _drumNNMenu 015C                                         ?_exitLoad 0001  
                            __size_of_noteOffDrum 0038                                        _copy_array 8882  
                                       ?_exitSave 0001                       ?_delete_notes_from_arpeggio 0001  
                                     noteOn@pitch 006E                                   _ARPEGGIO_SORTED 029C  
                             __size_of_Function_A 007E                               __size_of_Function_B 0080  
                             __size_of_Function_C 0088                               __size_of_Function_D 0084  
                             __size_of_Function_E 0070                               __size_of_Function_F 006A  
                             __size_of_Function_G 0094                               __size_of_Function_H 00AC  
                                       ?_menu_lcd 0001                          _playDiatonicSeventhMajor 54FA  
                 ??_keyboard_eight_note_efficient 0088                          _playDiatonicSeventhMinor 4944  
                                 __size_ofi2_rand 0054                              i2sendUSB@midiMessage 0006  
                 i2random_pitches_non_repeating@i 0017                     random_pitches_non_repeating@i 0076  
                                         __Hparam 0000                                      _CONTROL_MODE 0193  
                       playDiatonicSeventhMajor@i 007C                                    _mixolydian_key FD19  
                                         __Lparam 0000                                 _potentiometer_raw 0260  
                           __end_of_setupArpeggio 81F4                                    _Function_H_6_1 5F3E  
                                  _Function_H_6_2 6EAA                                    _Function_H_8_1 82EA  
                                  _Function_H_8_2 87B8                                    _Function_H_9_1 713C  
                                  _Function_H_9_2 709A                                    _Function_H_9_3 6FF8  
                                  _Function_H_9_4 6F56            __end_of_keyboard_sharps_only_efficient 3EF0  
         __size_of_keyboard_sharps_only_efficient 02AE                    _keyboard_sharps_only_efficient 3C42  
                       playDiatonicSeventhMinor@i 007D                                           ___aldiv 6A4E  
                                         ___fladd 364E                                   _midiChannelMenu 0147  
                                         ___fldiv 398C                                           ___awdiv 78F2  
                                         ___flneg 92B2                                   __size_of___lmul 0058  
                                         ___awmod 84BE                                           ___lbmod 9312  
                                         ___flmul 32FC                            __end_of_loadFromEEPROM 4DD8  
                                         ___fltol 689C                                   __size_of___wmul 0028  
                               ??_processKeyboard 008A                              __end_of_exitFunction 900E  
                                 __CFG_STVREN$OFF 000000                                           _channel 00F6  
                                         __pcinit 65EC                                           __ramtop 0D00  
                                 ?_Lcd_Set_Cursor 0063                                        _ionian_key FD55  
                                 __size_of_noteOn 0060                                           _ema_sum 0240  
                               __end_of_major_key F387                                           __ptext0 6B1C  
                                         __ptext1 95B2                                           __ptext2 881E  
                                         __ptext3 94D4                                           __ptext4 94B2  
                                         __ptext5 67BA                                           __ptext6 95C2  
                                         __ptext7 6DFE                                           __ptext8 7596  
                                         __ptext9 6F56                                           _command 01ED  
                              _NOTE_LENGTH_PULSES 00F7                                           _display 957A  
                                 __size_of_strcpy 0032                                      __size_of_ISR 535E  
                             _initializeMenuArray 4DD8                                      __size_of_map 00E6  
                                      ??___xxtofl 0064                            saveToEEPROM@slotNumber 00B1  
                                ___awmod@dividend 006E                              __end_of_panic_button 94D4  
                                         _sendUSB 7322                                  ___aldiv@dividend 006C  
                  __end_of_playDiatonicTriadMajor 581C                                           _sendOut 9512  
                  __end_of_playDiatonicTriadMinor 4944                                  rotateArrayLeft@i 0068  
                                         _noteOff 8F92                                  noteOffDrum@pitch 006B  
                             __end_of_Write_b_eep 8F92             _arpeggiatorLastNoteModeKeyReleaseMenu 010E  
                                playTriad@triad_p 007B                                 __end_of_seg_ascii F26B  
                         saveToEEPROM@baseAddress 00AF                          __end_ofascii@LCD_STRINGS F220  
            __size_of_keyboard_all_note_efficient 051A                                 __end_of_minor_key F378  
                        __size_of_calculate_alpha 004A                   setControllerNumbers@array_index 007B  
                                       _DRUM_MODE 0194                                         _DRUM_NOTE 01DF  
                                  __pintcode_body 51CE              __end_of_random_pitches_non_repeating 7B88  
           __size_of_random_pitches_non_repeating 0084                             __end_of_processOctave 2AD4  
                ??i2_random_pitches_non_repeating 0015                   ?i2_random_pitches_non_repeating 0001  
                    _random_pitches_non_repeating 7B04                              end_of_initialization 66C6  
                               __end_of_playTriad 5B2A                                 __end_of_pitchBend 921A  
                                 ?_Lcd_Print_Char 0001                                        ??_exitLoad 0070  
                                   __Lmediumconst E8C2                              _light_decimal_points 01B5  
                                         int_func 51CE                                        ??_exitSave 0070  
                                      ??_menu_lcd 00CE                        __end_of_buttonInputsSerial 8270  
                                      _noteOnDrum 8C7C                                    displayString@i 0002  
                          __end_of_mixolydian_key FD28                           __size_of_wait_one_pulse 002A  
                            ?_initializeMenuArray 0001                            __end_of_Function_H_6_1 6084  
                          __end_of_Function_H_6_2 6F56                            __end_of_Function_H_8_1 8362  
                          __end_of_Function_H_8_2 881E                            __end_of_Function_H_9_1 71DE  
                          __end_of_Function_H_9_2 713C                            __end_of_Function_H_9_3 709A  
                          __end_of_Function_H_9_4 6FF8                             _finish_arpeggio_setup 94F4  
                                       i2u4500_47 953E                                        _noteNumber 00F4  
                                       i2u3394_40 85DA                                         i2u3388_40 7BCE  
                                       i2u3652_40 41A8                                         i2u3804_40 0A60  
                                       i2u3660_45 42D6                                         i2u4461_40 52DE  
                                       i2u3663_40 431E                                         i2u4457_40 5296  
                                       i2u3657_45 4284                                         i2u3826_40 0BE0  
                                       i2u2970_44 7552                                         i2u3658_45 42A6  
                                       i2u2970_45 754E                                         i2u2971_40 7564  
                                       i2u2972_45 7566                                         i2u3693_40 6552  
                                       i2u2973_40 7586                                         i2u3790_40 7D38  
                                       i2u2974_40 758A                                 ?_selectSlotOnBoot 0001  
                                       i2u4494_47 523E                                         i2u4495_47 7510  
                                       i2u3791_48 7D3A                                         i2u3856_40 0E34  
                                       i2u3848_40 0D70                                         i2u4496_47 7568  
                                       i2u4497_47 7572                                         i2u3890_40 1106  
                                       i2u3866_40 0F42                                         i2u4498_47 757C  
                                       i2u3883_40 10A6                                         i2u4499_47 758E  
                               pitchBend@highByte 006C                                         i2u3879_40 1086  
                                      _lydian_key FD28                   __size_of_calculate_pulse_length 015E  
                                     ?_clear_row1 0001                                       ?_clear_row2 0001  
                                  _diatonic_major F310                                    _diatonic_minor F2E3  
                          __size_of_playThisNote8 0426                              _pentatonic_major_key F392  
                                  _joystickCCMenu 014A                                         _PRESCALER 005D  
                                      _potsCCMenu 0150                                  ___aldiv@quotient 0076  
                              ??_selectSlotOnBoot 00CC                                           postdec1 000FE5  
                                         postdec2 000FDD                                           postinc0 000FEE  
                                         postinc1 000FE6                                           postinc2 000FDE  
                         ??_processPotentiometers 006E                               i2___lmul@multiplier 0001  
                                 _drumChannelMenu 013E                                   ?_loadFromEEPROM 0001  
                             noteOffDrum@velocity 006C                                controlChange@value 006C  
                             _encoderInputsBuxton 7D0E                                      ??_Lcd_SetBit 0060  
                            _processEncoderBuxton 0012                             __end_of_programChange 936C  
                               playThisNote@pitch 0084                    __size_of_add_notes_to_arpeggio 007E  
                        ??_playThisNotePentatonic 0078                     __end_of_add_notes_to_arpeggio 8004  
                                  _string2display 0182                                 _encoder_direction 00EB  
                            _pentatonic_minor_key F387                        __size_ofi2_printThisNumber 0012  
                                      _which_mode 00F1                                        _which_note 0057  
                                     ?_eepromExit 0001                                       ___fladd@grs 00B7  
                                ___lbmod@dividend 0061                             __end_of_displayDigits 4440  
                                   ___xxtofl@sign 0068                             loadFromEEPROM@to_load 0187  
                                     ___fldiv@grs 009A                                       ___fldiv@rem 0094  
                               __size_of_ADC_Read 0038                                         i2___awdiv 7B88  
                                       i2___awmod 85A0                                         i2___lbmod 93C2  
                           __end_of_displayString 65EC                              ?_encoderInputsBuxton 0001  
                    playDiatonicTriadMinor@i_1689 007E                                   _TIMER_OVERFLOWS 0054  
                                    _dominant_7th 02F8                               __end_of_aeolian_key FD19  
                                      map@out_max 008A                                        map@out_min 0086  
                                     ?_int2string 0074                              _arpeggiatorLatchMenu 0126  
                                     ___lbmod@rem 0063                                        _statusByte 00F5  
                                     ___flmul@grs 007B                     ?_random_pitches_non_repeating 0001  
                            _arpeggiatorOnOffMenu 0135                                       ?_copy_array 0001  
                              programChange@data1 006B                                programChange@data2 006C  
                      _potentiometer_filtered_now 0220                                __end_of_Lcd_SetBit 9312  
                           ??_initializeMenuArray 006A                       ?_key_press_release_note_off 0001  
                            __end_of_playArpeggio 114C                                i2___awdiv@dividend 0001  
                      _arpeggiatorUnLatchModeMenu 011D                            __end_of_diatonic_major F33D  
                                 ?_Function_H_6_1 0001                                   ?_Function_H_6_2 0001  
                                 ?_Function_H_8_1 0001                                   ?_Function_H_8_2 0001  
                                 ?_Function_H_9_1 0001                                   ?_Function_H_9_2 0001  
                                 ?_Function_H_9_3 0001                                   ?_Function_H_9_4 0001  
                          __end_of_diatonic_minor F310                                         i2_sendUSB 74FC  
                            __end_of_saveToEEPROM 51CE                                    __end_ofi2_rand 8DD0  
                                       i2_sendOut 9530                                         i2_noteOff 913A  
                                   noteOn@channel 0070                                         _Lcd_Clear 95C2  
           __end_of_keyboard_eight_note_efficient 32FC            __size_of_keyboard_eight_note_efficient 0402  
                   _keyboard_eight_note_efficient 2EFA                                displayDigits@digit 0037  
                     _calculate_pulse_length$5801 00C8                                     ??_displayTest 0066  
                                    ??_Read_b_eep 0062                                         _Lcd_Start 7756  
                           ?_processEncoderBuxton 0001                                    __end_of___lmul 8C7C  
                                  __end_of___wmul 948C                                     __pidataCOMRAM 95F2  
                            __end_of_playThisNote 64F2                                      ??_Function_A 0071  
                                    ??_Function_B 0070                                      ??_Function_C 007C  
                                    ??_Function_D 00A0                                      ??_Function_E 007A  
                                    ??_Function_F 007A                                      ??_Function_G 00CD  
                                    ??_Function_H 00CC                             __size_of_Function_A_1 007C  
                           __size_of_Function_A_2 007C                             __size_of_Function_A_3 0084  
                           __size_of_Function_C_1 0094                             __size_of_Function_C_2 0128  
                           __size_of_Function_C_3 0128                             __size_of_Function_D_1 0088  
                           __size_of_Function_D_2 0060                             __size_of_Function_D_3 007A  
                           __size_of_Function_D_4 007E                             __size_of_Function_D_5 007E  
                           __size_of_Function_E_1 004E                             __size_of_Function_E_2 004E  
                           __size_of_Function_G_1 00A2                             __size_of_Function_G_2 00A2  
                           __size_of_Function_G_3 005C                             __size_of_Function_G_4 009E  
                           __size_of_Function_H_1 009A                             __size_of_Function_H_2 0068  
                           __size_of_Function_H_3 005C                             __size_of_Function_H_4 00B8  
                           __size_of_Function_H_5 00AE                             __size_of_Function_H_6 0072  
                           __size_of_Function_H_7 00B0                             __size_of_Function_H_8 0072  
                           __size_of_Function_H_9 0098                                    _ADC_Initialize 9566  
                        __end_of_Lcd_Print_String 8178                          setControllerResolution@i 0060  
                                     _Write_b_eep 8F50                       playThisNotePentatonic@index 0077  
                                  __end_of_noteOn 89A4                                    _TRANSPOSE_MODE 01AD  
                     playThisNotePentatonic@pitch 0001                                 i2sendUSB@message1 0009  
                               i2sendUSB@message2 0001                                 i2sendUSB@message3 0002  
                                  _findArrayIndex 90FE                                    __end_of_ttable F359  
                            _arpeggiatorTempoMenu 0132                   readPotentiometers@FIRST_READING 0190  
                                  __end_of_strcpy 9280                      __end_of_setControllerNumbers 2674  
                             start_initialization 65EC                            _calculate_pulse_length 5C8C  
                               _encoder_state_now 0170                                 __size_ofi2___lmul 0056  
                              i2___awdiv@quotient 0007                                       __end_of_ISR 5366  
                                   _playThisNote8 2AD4                            __size_of_resetArpeggio 003C  
                                     __end_of_map 67BA                               __size_of_clear_row1 0028  
                             __size_of_clear_row2 0028                                wait_one_pulse@mode 0060  
                                      ?i2___awdiv 0001                             ??_encoderInputsBuxton 0001  
                                      ?i2___awmod 000F                                        ?i2___lbmod 0001  
                               __size_ofi2_noteOn 005C                                 playSeventh@i_1662 007E  
                playThisNotePentatonic@temp_pitch 007C                                __end_of_Read_b_eep 9566  
                  __end_of_diatonic_seventh_major F2E3                            ?_finish_arpeggio_setup 0001  
                  __end_of_diatonic_seventh_minor F2A7                                       ?_noteOnDrum 006E  
                               Lcd_Print_String@a 006A                                 Lcd_Print_String@i 006E  
                                    _lastNoteMode 01A2                                 ??_calculate_alpha 00A0  
                                        ??i2_rand 000F                                __end_of_Function_A 7F08  
                              __end_of_Function_B 7D0E                                __end_of_Function_C 78F2  
                              __end_of_Function_D 79FC                                __end_of_Function_E 85A0  
                              __end_of_Function_F 86E6                                __end_of_Function_G 76C2  
                              __end_of_Function_H 6EAA                                 __size_of_Busy_eep 0006  
                              _readPotentiometers 114C                                        ?i2_sendUSB 0001  
                             __size_of_eepromExit 003C                                     _ARPEGGIO_TYPE 00EA  
                                      ?i2_sendOut 0001                                        ?i2_noteOff 000C  
                           __size_of_exitFunction 003C                                      _Function_A_1 8080  
                                    _Function_A_2 8004                                      _Function_A_3 79FC  
                                    _Function_C_1 76C2                                      _Function_C_2 61AC  
                                    _Function_C_3 6084                                      _Function_D_1 77E2  
                                    _Function_D_2 88E4                                      _Function_D_3 8270  
                                    _Function_D_4 7E0C                                      _Function_D_5 7D8E  
                                    _Function_E_1 8E6E                                      _Function_E_2 8E20  
                                    _Function_G_1 7280                                      _Function_G_2 71DE  
                                    _Function_G_3 8A00                                      _Function_G_4 73C4  
                                    _Function_H_1 7462                                      _Function_H_2 8750  
                                    _Function_H_3 89A4                                      _Function_H_4 6BE8  
                                    _Function_H_5 6D50                                      _Function_H_6 844C  
                                    _Function_H_7 6CA0                                      _Function_H_8 83DA  
                                    _Function_H_9 7596                                   _encoderPolarity 01B0  
                                      ?_Lcd_Clear 0001                                          ??___lmul 0068  
                             displayString@letter 0100                                          ??___wmul 0068  
                                      ?_Lcd_Start 0001                            __end_of_ADC_Initialize 957A  
                         readPotentiometers@count 0280                               ?_readPotentiometers 0001  
                                     __pdataBANK0 00F7                                       __pdataBANK1 01D7  
                                     __pdataBANK2 02AC                                       __pdataBANK3 0300  
                                __CFG_LPT1OSC$OFF 000000                               __end_of_LCD_STRINGS FCFB  
                           __size_of_panic_button 0022                        Lcd_Print_Char@Lower_Nibble 0061  
                          __end_of_findArrayIndex 913A                                          ??_noteOn 0070  
                             __size_of_int2string 00D4                               _encoderPolarityMenu 0138  
                           __end_of_controlChange 924E                                          ??_strcpy 0064  
                 __size_of_playThisNotePentatonic 0194                                         ___fladd@a 00A8  
                                       ___fladd@b 00A4                               __size_of_copy_array 0062  
                       __size_ofi2_random_pitches 005A                                   _printThisNumber 958E  
                                   ?_sort_pitches 0001                                         ___fldiv@a 008B  
                                       ___fldiv@b 0087                                     _TIMER_PRELOAD 016D  
                             __end_of_displayTest 7F86                           Function_D_3@array_index 007D  
                         __size_of_processDrumpad 0516                                         ___flmul@a 0072  
                                       ___flmul@b 006E                                       __pbssCOMRAM 0037  
                                     _aeolian_key FD0A                                  _button_state_now 00D8  
                      displayDigits@digit_counter 0052                                    ?_playThisNote8 007F  
                                   __pcstackBANK0 0060                                     __pcstackBANK1 0187  
                          __size_of_digitalInputs 0054                        ??_playDiatonicSeventhMajor 0078  
                _arpeggiatorLastNoteModeResetMenu 0108                        ??_playDiatonicSeventhMinor 0078  
                               __size_of___xxtofl 0154                                     sort_pitches@a 0003  
                     displayString@letter_counter 0051                                     sort_pitches@i 0005  
                                   sort_pitches@j 0004                              ??_readPotentiometers 00C2  
                          processPotentiometers@i 0073                                      _exitFunction 8FD2  
                                     _ARPEGGIO_ON 01AB                                          ?_Lcd_Cmd 0001  
                                    _keyboardMenu 004A                                   _processKeyboard 8610  
                                  _wait_one_pulse 9398                                  printThisNumber@n 0060  
                        ?_initializeSaveSlotsOnce 0001                             _drum_button_state_now 00EE  
                __size_of_setControllerResolution 002C                                 __size_of_exitLoad 003C  
                            __end_of_phrygian_key FD46                                 __size_of_exitSave 003C  
                             readPotentiometers@i 00CC                                 __size_of_menu_lcd 00E2  
                                    _panic_button 94B2                    ??_random_pitches_non_repeating 0074  
                                   _resetArpeggio 90C2                                  ??_Lcd_Set_Cursor 0064  
                                       _ema_alpha 0104                                     Function_H_5@i 0071  
                                       __pintcode 0008                                     __pmediumconst E8C2  
                          ??_processEncoderBuxton 0060                                          ?___aldiv 006C  
                                        ?___fladd 00A4                                   _arpeggiatorMenu 003B  
                                        ?___fldiv 0087                          __size_of_rotateArrayLeft 0078  
                                        ?___awdiv 0060                                         __ptext100 8882  
                                       __ptext101 90C2                                         __ptext110 9398  
                                       __ptext102 9280                                          ?___flneg 00A0  
                                       __ptext111 958E                                         __ptext103 8362  
                                       __ptext120 91E6                                         __ptext112 5B2A  
                                       __ptext104 90FE                                         __ptext121 921A  
                                       __ptext113 8F92                                         __ptext105 7F86  
                                       __ptext130 32FC                                         __ptext122 7322  
                                       __ptext114 81F4                                         __ptext106 1C66  
                                       __ptext131 364E                                         __ptext123 9512  
                                       __ptext115 95E0                                         __ptext107 8C7C  
                                       __ptext140 0A42                                         __ptext132 91AE  
                                       __ptext124 66D4                                         __ptext116 95E6  
                                       __ptext108 9176                                         __ptext141 7C0C  
                                       __ptext133 7756                                         __ptext125 8C24  
                                       __ptext117 95EC                                         __ptext109 4440  
                                       __ptext150 7D0E                                         __ptext142 8BCA  
                                       __ptext134 948C                                         __ptext126 6A4E  
                                       __ptext118 114C                                         __ptext151 957A  
                                       __ptext143 8D7C                                         __ptext135 92E2  
                                       __ptext127 5DEA                                         __ptext119 3EF0  
                                       __ptext152 64F2                                         __ptext144 8CD2  
                                       __ptext136 9566                                         __ptext128 689C  
                                       __ptext153 4198                                         __ptext145 8B14  
                                       __ptext129 92B2                                         __ptext154 85A0  
                                       __ptext146 913A                                         __ptext138 95A0  
                                       __ptext155 7B88                                         __ptext147 74FC  
                                       __ptext139 93C2                                         __ptext148 9530  
                                       __ptext149 62D4                                          ?___awmod 006E  
                                        ?___lbmod 0060                                          ?___flmul 006E  
                                        ?___fltol 00B8                                   ?_ADC_Initialize 0001  
                                      playTriad@i 007D                                       _ARRAY_INDEX 00E4  
            _arpeggiatorLastNoteModeTransposeMenu 010B                                    _diminished_7th 02E8  
                                 ?_findArrayIndex 0001                                       _ema_integer 00FB  
                                  ??_sort_pitches 0001                                          ?_display 0001  
                                   ??_playSeventh 0077                    playDiatonicSeventhMajor@i_1684 007D  
                             __size_of_noteOnDrum 0056                                         _count_ISR 0284  
                   controlChange@controllerNumber 006B                          encoderInputsBuxton@tempA 0004  
                        encoderInputsBuxton@tempB 0005                           Function_D_4@array_index 007D  
                                       _major_7th 02F4                                   playTriad@i_1657 007E  
                                        _ADC_Read 91AE                                          ?_sendUSB 0060  
                                        ?_sendOut 0001                                 i2random_pitches@i 0016  
                                       _major_key F378                                          ?_noteOff 006B  
                                       _last_note 00E8                                  ??_Lcd_Print_Char 0061  
                                       _menuArray 0300                                      _patch_number 0171  
                                  __size_of_clock 0006                                      playSeventh@i 007D  
                                        _ARPEGGIO 0172                                       ??i2___awdiv 0005  
                                     ??i2___awmod 0013                                       ??i2___lbmod 0002  
                           __size_of_playArpeggio 070A                                     ??_noteOffDrum 006D  
                                  __size_of_setup 0064                                    __size_of_srand 0010  
                          __end_of_wait_one_pulse 93C2                             __size_of_saveToEEPROM 01F4  
                                       _minor_7th 02F0                                   ___aldiv@divisor 0070  
                              noteOffDrum@channel 006D                                         _seg_ascii F220  
                                 ___aldiv@counter 0074                            _playThisNotePentatonic 5366  
                                       _minor_key F369                                    ___wmul@product 0068  
                                       _playTriad 59AA                              int2string@isNegative 0191  
                                       _pitchBend 91E6                                  ??_loadFromEEPROM 00CC  
                                pitchBend@channel 006D                                         _savesMenu 00DF  
                                     ??i2_sendUSB 0003                                       _arpeggioPtr 004F  
                                  ?_resetArpeggio 0001                                       ??i2_sendOut 0001  
                                   _digitalInputs 8D28                                          Lcd_Cmd@a 0062  
                                     ??i2_noteOff 000E                                      ??_clear_row1 0070  
                                    ??_clear_row2 0070                              _setControllerNumbers 217C  
                                     _LCD_STRINGS F39E                             __size_of_playThisNote 0104  
                                        _GO_nDONE 007E11               __end_of_keyboard_all_note_efficient 1C66  
                     _keyboard_all_note_efficient 174C                                       ??_Lcd_Clear 0063  
                                __CFG_WDTPS$32768 000000        initializeSaveSlotsOnce@initializeSlotsOnce 00B4  
                                        _HYST_VAL 01EB            __end_ofi2_random_pitches_non_repeating 7C8E  
         __size_ofi2_random_pitches_non_repeating 0082                    i2_random_pitches_non_repeating 7C0C  
                                _diminished_triad 01F3                           __end_of_printThisNumber 95A0  
                                     ??_Lcd_Start 0063                                  pitchBend@lowByte 006B  
                                     _displayTest 7F08                               __end_of_locrian_key FD0A  
                                        _POT_MODE 01B3                               __end_of_seg_bcd_hex F369  
                  key_press_release_note_off@temp 00E2                    __size_of_processPotentiometers 02A8  
                              _buttonInputsSerial 81F4                     __end_of_processPotentiometers 4198  
                                       map@in_max 0082                                         map@in_min 007E  
                                       _triadMenu 0044                          buttonInputsSerial@i_4380 0065  
                               ___wmul@multiplier 0064                                     _skipFirstLast 01A3  
                                        i2___lmul 8CD2                                   ??_playThisNote8 0080  
                                    _playArpeggio 0A42                                   Write_b_eep@badd 0060  
                                 Write_b_eep@bdat 0062                                      ??_eepromExit 0070  
                    _arpeggiatorSkipFirstLastMenu 0114                         __size_of_selectSlotOnBoot 0020  
                    _arpeggiatorRandomizeSkipMenu 011A                           Function_D_5@array_index 007D  
                             ?_buttonInputsSerial 0001                                 i2___awdiv@divisor 0003  
                                    _saveToEEPROM 4FDA                                 i2___awdiv@counter 0005  
                                        i2_noteOn 8B14                           __end_of_processKeyboard 867C  
                          __size_of_setupArpeggio 007C                                 _string_to_display 01EE  
                                    noteOff@pitch 006B                                 ___lmul@multiplier 0060  
                              __end_of_clear_row1 9464                                __end_of_clear_row2 943C  
                             __end_of_playSeventh 59AA                                         copy_data0 6600  
                                       copy_data1 6620                                         copy_data2 6640  
                                       copy_data3 6660                                         copy_data4 6680  
                                ??_Function_H_6_1 0088                                  ??_Function_H_6_2 0070  
                                ??_Function_H_8_1 0070                                  ??_Function_H_8_2 0070  
                                ??_Function_H_9_1 0070                                  ??_Function_H_9_2 0070  
                                ??_Function_H_9_3 0070                                  ??_Function_H_9_4 0070  
                              i2___awmod@dividend 000F               displayDigits@number_to_display_last 016B  
                    _arpeggiatorRandomizeTypeMenu 0117                                      ??_int2string 0076  
                                 ?_wait_one_pulse 0001               displayDigits@number_to_display_temp 004D  
                                    _playThisNote 63EE                                          _Busy_eep 95DA  
                                    ??_copy_array 0060                             __end_of_MAX_NUM_NOTES F39E  
                               _NUM_NOTES_PRESSED 00E5                           __size_of_random_pitches 005C  
                                __size_of_Lcd_Cmd 0026                                        ?_playTriad 0001  
                                      _EECON1bits 000FA6                                        ?_pitchBend 006B  
                             __end_of_noteOffDrum 91AE                                   _octave_overflow 0199  
                                  ?_digitalInputs 0001                              ??_buttonInputsSerial 0060  
                                     _major_triad 01FC                                          __Hrparam 0000  
                           ?_setControllerNumbers 0001                               _arpeggiatorTypeMenu 012C  
                                        __Lrparam 0000                                   _augmented_triad 01F6  
                              __end_of_eepromExit 90C2                                        _DIGIT_MODE 0059  
                                __size_of___aldiv 00CE                                  __size_of___fladd 033E  
                                __size_of___fldiv 02B6                                  __size_of___awdiv 0086  
                                __size_of___flneg 0030                                       _last_octave 0055  
                                __size_of___awmod 0072                                  __size_of___lbmod 002E  
                                __size_of___flmul 0352                                  __size_of___fltol 00DE  
                                     _drumchannel 00FE                            __size_of_processOctave 0460  
                            playSeventh@seventh_p 007B                                      ?_Write_b_eep 0060  
                         ?_calculate_pulse_length 00C2                                 ?_Lcd_Print_String 006A  
                              __end_of_int2string 6A4E                                  i2_random_pitches 8BCA  
                               ??_rotateArrayLeft 0060                                __end_of_dorian_key FD55  
                                       sendUSB@ii 006A                                    _processDrumpad 1C66  
                                __size_of_display 0014                                __end_of_copy_array 88E4  
                                        ___xxtofl 5DEA                             _add_notes_to_arpeggio 7F86  
                              ??_Lcd_Print_String 006C                                     ?_analogInputs 0001  
                                 _mainChannelMenu 0141                  __end_of_playDiatonicSeventhMajor 568C  
                __end_of_playDiatonicSeventhMinor 4BA0                                  __size_of_sendUSB 00A2  
                                 _calculate_alpha 8EBC                                  __size_of_sendOut 001E  
                                __size_of_noteOff 0040                                          __ptext10 6FF8  
                                        __ptext11 709A                                          __ptext20 6D50  
                                        __ptext12 713C                                          __ptext21 6BE8  
                                        __ptext13 83DA                                          __ptext30 4BA0  
                                        __ptext22 89A4                                          __ptext14 87B8  
                                        __ptext31 5C8C                                          __ptext23 8750  
                                        __ptext15 82EA                                          __ptext40 8E6E  
                                        __ptext32 900E                                          __ptext24 7462  
                                        __ptext16 6CA0                                          __ptext41 7978  
                                        __ptext33 7280                                          __ptext25 762E  
                                        __ptext17 844C                                          __ptext50 936C  
                                        __ptext42 7D8E                                          __ptext34 904A  
                                        __ptext26 73C4                                          __ptext18 6EAA  
                                        __ptext51 786A                                          __ptext43 7E0C  
                                        __ptext35 9086                                          __ptext27 8FD2  
                                        __ptext19 5F3E                                          __ptext60 8004  
                                        __ptext52 6084                                          __ptext44 8270  
                                        __ptext36 867C                                          __ptext28 8A00  
                                        __ptext61 8080                                          __ptext53 61AC  
                                        __ptext45 217C                                          __ptext37 9340  
                                        __ptext29 71DE                                          __ptext70 4FDA  
                                        __ptext62 0012                                          __ptext54 697A  
                                        __ptext46 88E4                                          __ptext38 8530  
                                        __ptext71 8F50                                          __ptext63 9414  
                                        __ptext55 78F2                                          __ptext47 8EBC  
                                        __ptext39 8E20                                          __ptext80 8610  
                                        __ptext72 95DA                                          __ptext64 943C  
                                        __ptext56 76C2                                          __ptext48 398C  
                                        __ptext81 3C42                                          __ptext73 954C  
                                        __ptext65 8B70                                          __ptext57 7C8E  
                                        __ptext49 77E2                                          __ptext90 63EE  
                                        __ptext82 5366                                          __ptext74 4DD8  
                                        __ptext66 80FC                                          __ptext58 7E8A  
                                        __ptext91 59AA                                          __ptext83 2EFA  
                                        __ptext75 7F08                                          __ptext67 7A80  
                                        __ptext59 79FC                                          __ptext92 581C  
                                        __ptext84 2AD4                                          __ptext76 8D28  
                                        __ptext68 9312                                          __ptext93 8944  
                                        __ptext85 46E6                                          __ptext77 2674  
                                        __ptext69 8F06                                          __ptext94 94F4  
                                        __ptext86 568C                                          __ptext78 924E  
                                        __ptext95 8178                                          __ptext87 4944  
                                        __ptext79 9464                                          __ptext96 7B04  
                                        __ptext88 54FA                                          __ptext97 8A5C  
                                        __ptext89 174C                                          __ptext98 8AB8  
                                        __ptext99 84BE                       __end_of_initializeMenuArray 4FDA  
                                        _encoderA 01B2                                          _encoderB 01B1  
                         ??_finish_arpeggio_setup 0077                                          _mainMenu 0168  
                              i2___lbmod@dividend 0002                      processPotentiometers@lowByte 0071  
                             _DISPLAY_STEP_NUMBER 0195                                        strcpy@from 0062  
                                        _drumMenu 0041                            __size_of_programChange 002C  
                                        _exitLoad 900E                                          _keyboard 00D0  
                                   __size_of_main 00CC                                          _exitSave 904A  
                               _startingDirection 00E9                                          _modeMenu 0047  
                                   __size_of_load 0006                                     __size_of_rand 005C  
                                    ??_noteOnDrum 0070                     playDiatonicSeventhMajor@index 0077  
                                        _menu_lcd 67BA                                          _parallel 00E6  
                                 ??_resetArpeggio 0060                     playDiatonicSeventhMajor@pitch 007E  
                         _setControllerResolution 936C                              __end_of_sort_pitches 63EE  
                                  playTriad@pitch 007F                                __end_of_ionian_key FD64  
                                     _locrian_key FCFB                    playDiatonicSeventhMinor@i_1694 007E  
                                     _seg_bcd_hex F359                                          _semitone 00F3  
                          __size_of_displayDigits 02A8                                        _AUTO_LATCH 01A6  
                                   _potsAlphaMenu 0153                                     _setupArpeggio 8178  
                             playThisNote8@mode_p 0086                                          _potsMenu 003E  
                                        _velocity 00FD                                          _overflow 019A  
                                        int$flags 005F                                  ?_printThisNumber 0060  
                               i2noteOff@velocity 000D                        Lcd_Print_Char@Upper_Nibble 0062  
                  __end_of_calculate_pulse_length 5DEA                                       _minor_triad 01F9  
                          __size_of_displayString 00FA                          ??_playDiatonicTriadMajor 0078  
                                 sendUSB@message1 0065                                   sendUSB@message2 0060  
                                 sendUSB@message3 0061                          ??_playDiatonicTriadMinor 0078  
                               _note_off_was_sent 0198                       playDiatonicTriadMajor@index 0077  
                          __end_of_processDrumpad 217C                       playDiatonicTriadMajor@pitch 007E  
                            controlChange@channel 006D                                 i2___awmod@divisor 0011  
                     __end_of_encoderInputsBuxton 7D8E                                    ??_analogInputs 00CE  
                               i2___awmod@counter 0013                                       _playSeventh 581C  
                                      _INTCONbits 000FF2                             i2___lmul@multiplicand 0005  
                              __end_of_noteOnDrum 8CD2                                      _phrygian_key FD37  
                                ?_processKeyboard 0001                                     _encoder_click 01AF  
                              __end_of_lydian_key FD37                                 _keyboardTranspose 4440  
                                     _noteOffDrum 9176                                          intlevel2 0000  
                                        sendUSB@i 0069                                ?_keyboardTranspose 0001  
                                   _processOctave 2674                                  i2noteOff@channel 000E  
                                  _AUTO_RANDOMIZE 01A4                                          sendOut@a 0060  
                                 ??_digitalInputs 008A                   delete_notes_from_arpeggio@pitch 0069  
                                     ??_playTriad 0077                            ??_setControllerNumbers 007A  
                                     ??_pitchBend 006D                                 i2___lbmod@divisor 0001  
                                  _SORT_DIRECTION 01AC                                    _iterator_focus 00FA  
                               i2___lbmod@counter 0003                                  int2string@number 0074  
             initializeMenuArray@NumberOfElements 006B                                  ??_ADC_Initialize 0060  
                             ??_keyboardTranspose 006E                          _NOTE_LENGTH_PULSES_ARRAY 02DC  
                                  ?_setupArpeggio 0001                                     _which_seventh 00EF  
                                ??_findArrayIndex 0060                                playThisNote8@index 007F  
                                  _lcd_print_once 01AE                                playThisNote8@pitch 0084  
                   playDiatonicSeventhMinor@index 0077                     playDiatonicSeventhMinor@pitch 007C  
                                i2noteOn@velocity 0010               keyboard_sharps_only_efficient@index 007E  
                                  _finishLastNote 019D                                Lcd_Set_Cursor@temp 0067  
             keyboard_sharps_only_efficient@pitch 007D                          loadFromEEPROM@byte_count 01D5  
                                 i2noteOn@channel 0011                                     _programChange 9340  
                                      Lcd_Start@i 0064                           __end_of_calculate_alpha 8F06  
                                 ?_processDrumpad 0001                  __size_of_initializeSaveSlotsOnce 004A  
                                  _inputPotsArray 02AC                            ?_add_notes_to_arpeggio 0001  
                                _selectSlotOnBoot 94D4                                       _seventhMenu 0165  
                                        strcpy@cp 0064                                          strcpy@to 0060  
                               noteOnDrum@channel 0070                                      _which_octave 0056  
                       __end_of_keyboardTranspose 46E6                                      _which_screen 00F9  
                                    ___aldiv@sign 0075                                      _potsResoMenu 0156  
                                   _displayDigits 4198                       playDiatonicTriadMinor@index 0077  
                              noteOnDrum@velocity 006F                       playDiatonicTriadMinor@pitch 007C  
             __size_of_delete_notes_from_arpeggio 0032                                     ___fladd@signs 00B4  
                         ?_playThisNotePentatonic 0077                                    ?_processOctave 0001  
                     __size_of_readPotentiometers 0600                                     _displayString 64F2  
                       ??_setControllerResolution 0060                                    i2noteOff@pitch 000C  
                                     _which_triad 00F0                                     _KEYBOARD_MODE 00F2  
                                    ___fladd@aexp 00B5                                      ___fladd@bexp 00B6  
                                  _random_pitches 8A5C                                      _toggle_state 00E3  
                                   i2noteOn@pitch 000F                            __size_of_controlChange 0034  
                              sendUSB@midiMessage 0066                 __size_of_playDiatonicSeventhMajor 0192  
               __size_of_playDiatonicSeventhMinor 025C                         ?_playDiatonicSeventhMajor 0077  
